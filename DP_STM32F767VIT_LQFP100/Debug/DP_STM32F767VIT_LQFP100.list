
DP_STM32F767VIT_LQFP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fef4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003518  080200f8  080200f8  000300f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023610  08023610  0004026c  2**0
                  CONTENTS
  4 .ARM          00000008  08023610  08023610  00033610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023618  08023618  0004026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023618  08023618  00033618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802361c  0802361c  0003361c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08023620  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001968c  20000270  0802388c  00040270  2**3
                  ALLOC
 10 ._user_heap_stack 00024004  200198fc  0802388c  000498fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000c2b9a  00000000  00000000  0004029a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009ae3  00000000  00000000  00102e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000048f8  00000000  00000000  0010c918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004488  00000000  00000000  00111210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036c75  00000000  00000000  00115698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00036ada  00000000  00000000  0014c30d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001315a3  00000000  00000000  00182de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002b438a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014150  00000000  00000000  002b4408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000270 	.word	0x20000270
 800021c:	00000000 	.word	0x00000000
 8000220:	080200dc 	.word	0x080200dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000274 	.word	0x20000274
 800023c:	080200dc 	.word	0x080200dc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800044e:	f1a4 0401 	sub.w	r4, r4, #1
 8000452:	d1e9      	bne.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b99a 	b.w	80009d4 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f82e 	bl	8000708 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80006f8 <__aeabi_d2ulz+0x40>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000700 <__aeabi_d2ulz+0x48>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	f84d bd04 	str.w	fp, [sp, #-4]!
 80006d0:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d4:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d8:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80006dc:	f04f 0b00 	mov.w	fp, #0
 80006e0:	ee17 3a10 	vmov	r3, s14
 80006e4:	ee16 1a10 	vmov	r1, s12
 80006e8:	ea4b 0003 	orr.w	r0, fp, r3
 80006ec:	f85d bb04 	ldr.w	fp, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	4688      	mov	r8, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14b      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000716:	428a      	cmp	r2, r1
 8000718:	4615      	mov	r5, r2
 800071a:	d967      	bls.n	80007ec <__udivmoddi4+0xe4>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0720 	rsb	r7, r2, #32
 8000726:	fa01 f302 	lsl.w	r3, r1, r2
 800072a:	fa20 f707 	lsr.w	r7, r0, r7
 800072e:	4095      	lsls	r5, r2
 8000730:	ea47 0803 	orr.w	r8, r7, r3
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000740:	fa1f fc85 	uxth.w	ip, r5
 8000744:	fb0e 8817 	mls	r8, lr, r7, r8
 8000748:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074c:	fb07 f10c 	mul.w	r1, r7, ip
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18eb      	adds	r3, r5, r3
 8000756:	f107 30ff 	add.w	r0, r7, #4294967295
 800075a:	f080 811b 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8118 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000764:	3f02      	subs	r7, #2
 8000766:	442b      	add	r3, r5
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000770:	fb0e 3310 	mls	r3, lr, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fc0c 	mul.w	ip, r0, ip
 800077c:	45a4      	cmp	ip, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	192c      	adds	r4, r5, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8107 	bcs.w	8000998 <__udivmoddi4+0x290>
 800078a:	45a4      	cmp	ip, r4
 800078c:	f240 8104 	bls.w	8000998 <__udivmoddi4+0x290>
 8000790:	3802      	subs	r0, #2
 8000792:	442c      	add	r4, r5
 8000794:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000798:	eba4 040c 	sub.w	r4, r4, ip
 800079c:	2700      	movs	r7, #0
 800079e:	b11e      	cbz	r6, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c6 4300 	strd	r4, r3, [r6]
 80007a8:	4639      	mov	r1, r7
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0xbe>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80eb 	beq.w	800098e <__udivmoddi4+0x286>
 80007b8:	2700      	movs	r7, #0
 80007ba:	e9c6 0100 	strd	r0, r1, [r6]
 80007be:	4638      	mov	r0, r7
 80007c0:	4639      	mov	r1, r7
 80007c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c6:	fab3 f783 	clz	r7, r3
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d147      	bne.n	800085e <__udivmoddi4+0x156>
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d302      	bcc.n	80007d8 <__udivmoddi4+0xd0>
 80007d2:	4282      	cmp	r2, r0
 80007d4:	f200 80fa 	bhi.w	80009cc <__udivmoddi4+0x2c4>
 80007d8:	1a84      	subs	r4, r0, r2
 80007da:	eb61 0303 	sbc.w	r3, r1, r3
 80007de:	2001      	movs	r0, #1
 80007e0:	4698      	mov	r8, r3
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d0e0      	beq.n	80007a8 <__udivmoddi4+0xa0>
 80007e6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ea:	e7dd      	b.n	80007a8 <__udivmoddi4+0xa0>
 80007ec:	b902      	cbnz	r2, 80007f0 <__udivmoddi4+0xe8>
 80007ee:	deff      	udf	#255	; 0xff
 80007f0:	fab2 f282 	clz	r2, r2
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	f040 808f 	bne.w	8000918 <__udivmoddi4+0x210>
 80007fa:	1b49      	subs	r1, r1, r5
 80007fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000800:	fa1f f885 	uxth.w	r8, r5
 8000804:	2701      	movs	r7, #1
 8000806:	fbb1 fcfe 	udiv	ip, r1, lr
 800080a:	0c23      	lsrs	r3, r4, #16
 800080c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000810:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000814:	fb08 f10c 	mul.w	r1, r8, ip
 8000818:	4299      	cmp	r1, r3
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x124>
 800081c:	18eb      	adds	r3, r5, r3
 800081e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4299      	cmp	r1, r3
 8000826:	f200 80cd 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 800082a:	4684      	mov	ip, r0
 800082c:	1a59      	subs	r1, r3, r1
 800082e:	b2a3      	uxth	r3, r4
 8000830:	fbb1 f0fe 	udiv	r0, r1, lr
 8000834:	fb0e 1410 	mls	r4, lr, r0, r1
 8000838:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800083c:	fb08 f800 	mul.w	r8, r8, r0
 8000840:	45a0      	cmp	r8, r4
 8000842:	d907      	bls.n	8000854 <__udivmoddi4+0x14c>
 8000844:	192c      	adds	r4, r5, r4
 8000846:	f100 33ff 	add.w	r3, r0, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x14a>
 800084c:	45a0      	cmp	r8, r4
 800084e:	f200 80b6 	bhi.w	80009be <__udivmoddi4+0x2b6>
 8000852:	4618      	mov	r0, r3
 8000854:	eba4 0408 	sub.w	r4, r4, r8
 8000858:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800085c:	e79f      	b.n	800079e <__udivmoddi4+0x96>
 800085e:	f1c7 0c20 	rsb	ip, r7, #32
 8000862:	40bb      	lsls	r3, r7
 8000864:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000868:	ea4e 0e03 	orr.w	lr, lr, r3
 800086c:	fa01 f407 	lsl.w	r4, r1, r7
 8000870:	fa20 f50c 	lsr.w	r5, r0, ip
 8000874:	fa21 f30c 	lsr.w	r3, r1, ip
 8000878:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800087c:	4325      	orrs	r5, r4
 800087e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000882:	0c2c      	lsrs	r4, r5, #16
 8000884:	fb08 3319 	mls	r3, r8, r9, r3
 8000888:	fa1f fa8e 	uxth.w	sl, lr
 800088c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000890:	fb09 f40a 	mul.w	r4, r9, sl
 8000894:	429c      	cmp	r4, r3
 8000896:	fa02 f207 	lsl.w	r2, r2, r7
 800089a:	fa00 f107 	lsl.w	r1, r0, r7
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1e 0303 	adds.w	r3, lr, r3
 80008a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80008a8:	f080 8087 	bcs.w	80009ba <__udivmoddi4+0x2b2>
 80008ac:	429c      	cmp	r4, r3
 80008ae:	f240 8084 	bls.w	80009ba <__udivmoddi4+0x2b2>
 80008b2:	f1a9 0902 	sub.w	r9, r9, #2
 80008b6:	4473      	add	r3, lr
 80008b8:	1b1b      	subs	r3, r3, r4
 80008ba:	b2ad      	uxth	r5, r5
 80008bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c0:	fb08 3310 	mls	r3, r8, r0, r3
 80008c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008cc:	45a2      	cmp	sl, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1e 0404 	adds.w	r4, lr, r4
 80008d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008d8:	d26b      	bcs.n	80009b2 <__udivmoddi4+0x2aa>
 80008da:	45a2      	cmp	sl, r4
 80008dc:	d969      	bls.n	80009b2 <__udivmoddi4+0x2aa>
 80008de:	3802      	subs	r0, #2
 80008e0:	4474      	add	r4, lr
 80008e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008e6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ea:	eba4 040a 	sub.w	r4, r4, sl
 80008ee:	454c      	cmp	r4, r9
 80008f0:	46c2      	mov	sl, r8
 80008f2:	464b      	mov	r3, r9
 80008f4:	d354      	bcc.n	80009a0 <__udivmoddi4+0x298>
 80008f6:	d051      	beq.n	800099c <__udivmoddi4+0x294>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d069      	beq.n	80009d0 <__udivmoddi4+0x2c8>
 80008fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000900:	eb64 0403 	sbc.w	r4, r4, r3
 8000904:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000908:	40fd      	lsrs	r5, r7
 800090a:	40fc      	lsrs	r4, r7
 800090c:	ea4c 0505 	orr.w	r5, ip, r5
 8000910:	e9c6 5400 	strd	r5, r4, [r6]
 8000914:	2700      	movs	r7, #0
 8000916:	e747      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000918:	f1c2 0320 	rsb	r3, r2, #32
 800091c:	fa20 f703 	lsr.w	r7, r0, r3
 8000920:	4095      	lsls	r5, r2
 8000922:	fa01 f002 	lsl.w	r0, r1, r2
 8000926:	fa21 f303 	lsr.w	r3, r1, r3
 800092a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800092e:	4338      	orrs	r0, r7
 8000930:	0c01      	lsrs	r1, r0, #16
 8000932:	fbb3 f7fe 	udiv	r7, r3, lr
 8000936:	fa1f f885 	uxth.w	r8, r5
 800093a:	fb0e 3317 	mls	r3, lr, r7, r3
 800093e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000942:	fb07 f308 	mul.w	r3, r7, r8
 8000946:	428b      	cmp	r3, r1
 8000948:	fa04 f402 	lsl.w	r4, r4, r2
 800094c:	d907      	bls.n	800095e <__udivmoddi4+0x256>
 800094e:	1869      	adds	r1, r5, r1
 8000950:	f107 3cff 	add.w	ip, r7, #4294967295
 8000954:	d22f      	bcs.n	80009b6 <__udivmoddi4+0x2ae>
 8000956:	428b      	cmp	r3, r1
 8000958:	d92d      	bls.n	80009b6 <__udivmoddi4+0x2ae>
 800095a:	3f02      	subs	r7, #2
 800095c:	4429      	add	r1, r5
 800095e:	1acb      	subs	r3, r1, r3
 8000960:	b281      	uxth	r1, r0
 8000962:	fbb3 f0fe 	udiv	r0, r3, lr
 8000966:	fb0e 3310 	mls	r3, lr, r0, r3
 800096a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800096e:	fb00 f308 	mul.w	r3, r0, r8
 8000972:	428b      	cmp	r3, r1
 8000974:	d907      	bls.n	8000986 <__udivmoddi4+0x27e>
 8000976:	1869      	adds	r1, r5, r1
 8000978:	f100 3cff 	add.w	ip, r0, #4294967295
 800097c:	d217      	bcs.n	80009ae <__udivmoddi4+0x2a6>
 800097e:	428b      	cmp	r3, r1
 8000980:	d915      	bls.n	80009ae <__udivmoddi4+0x2a6>
 8000982:	3802      	subs	r0, #2
 8000984:	4429      	add	r1, r5
 8000986:	1ac9      	subs	r1, r1, r3
 8000988:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800098c:	e73b      	b.n	8000806 <__udivmoddi4+0xfe>
 800098e:	4637      	mov	r7, r6
 8000990:	4630      	mov	r0, r6
 8000992:	e709      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000994:	4607      	mov	r7, r0
 8000996:	e6e7      	b.n	8000768 <__udivmoddi4+0x60>
 8000998:	4618      	mov	r0, r3
 800099a:	e6fb      	b.n	8000794 <__udivmoddi4+0x8c>
 800099c:	4541      	cmp	r1, r8
 800099e:	d2ab      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80009a4:	eb69 020e 	sbc.w	r2, r9, lr
 80009a8:	3801      	subs	r0, #1
 80009aa:	4613      	mov	r3, r2
 80009ac:	e7a4      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009ae:	4660      	mov	r0, ip
 80009b0:	e7e9      	b.n	8000986 <__udivmoddi4+0x27e>
 80009b2:	4618      	mov	r0, r3
 80009b4:	e795      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b6:	4667      	mov	r7, ip
 80009b8:	e7d1      	b.n	800095e <__udivmoddi4+0x256>
 80009ba:	4681      	mov	r9, r0
 80009bc:	e77c      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009be:	3802      	subs	r0, #2
 80009c0:	442c      	add	r4, r5
 80009c2:	e747      	b.n	8000854 <__udivmoddi4+0x14c>
 80009c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c8:	442b      	add	r3, r5
 80009ca:	e72f      	b.n	800082c <__udivmoddi4+0x124>
 80009cc:	4638      	mov	r0, r7
 80009ce:	e708      	b.n	80007e2 <__udivmoddi4+0xda>
 80009d0:	4637      	mov	r7, r6
 80009d2:	e6e9      	b.n	80007a8 <__udivmoddi4+0xa0>

080009d4 <__aeabi_idiv0>:
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff fc37 	bl	8000254 <strlen>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <Send_Uart+0x28>)
 80009f2:	f010 fb2f 	bl	8011054 <HAL_UART_Transmit>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200119ac 	.word	0x200119ac

08000a04 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <Mount_SD+0x38>)
 8000a12:	f01b fd0d 	bl	801c430 <f_mount>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <Mount_SD+0x3c>)
 8000a1c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <Mount_SD+0x3c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <Mount_SD+0x2a>
 8000a26:	4807      	ldr	r0, [pc, #28]	; (8000a44 <Mount_SD+0x40>)
 8000a28:	f7ff ffd6 	bl	80009d8 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000a2c:	e002      	b.n	8000a34 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <Mount_SD+0x44>)
 8000a30:	f7ff ffd2 	bl	80009d8 <Send_Uart>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20001b38 	.word	0x20001b38
 8000a40:	20001a10 	.word	0x20001a10
 8000a44:	080200f8 	.word	0x080200f8
 8000a48:	0802011c 	.word	0x0802011c

08000a4c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f01b fce9 	bl	801c430 <f_mount>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <Unmount_SD+0x38>)
 8000a64:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <Unmount_SD+0x38>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <Unmount_SD+0x2a>
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <Unmount_SD+0x3c>)
 8000a70:	f7ff ffb2 	bl	80009d8 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000a74:	e002      	b.n	8000a7c <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <Unmount_SD+0x40>)
 8000a78:	f7ff ffae 	bl	80009d8 <Send_Uart>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20001a10 	.word	0x20001a10
 8000a88:	08020140 	.word	0x08020140
 8000a8c:	08020168 	.word	0x08020168

08000a90 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 8000a96:	2014      	movs	r0, #20
 8000a98:	f01d fac8 	bl	801e02c <malloc>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8000aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa2:	4929      	ldr	r1, [pc, #164]	; (8000b48 <Format_SD+0xb8>)
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	8013      	strh	r3, [r2, #0]

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000aac:	463b      	mov	r3, r7
 8000aae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f01c fb2f 	bl	801d114 <f_opendir>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <Format_SD+0xbc>)
 8000abc:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <Format_SD+0xbc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d136      	bne.n	8000b34 <Format_SD+0xa4>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4921      	ldr	r1, [pc, #132]	; (8000b50 <Format_SD+0xc0>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f01c fbbb 	bl	801d246 <f_readdir>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Format_SD+0xbc>)
 8000ad6:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <Format_SD+0xbc>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d125      	bne.n	8000b2c <Format_SD+0x9c>
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <Format_SD+0xc0>)
 8000ae2:	7d9b      	ldrb	r3, [r3, #22]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d021      	beq.n	8000b2c <Format_SD+0x9c>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <Format_SD+0xc0>)
 8000aea:	7a1b      	ldrb	r3, [r3, #8]
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d011      	beq.n	8000b18 <Format_SD+0x88>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000af4:	4917      	ldr	r1, [pc, #92]	; (8000b54 <Format_SD+0xc4>)
 8000af6:	4818      	ldr	r0, [pc, #96]	; (8000b58 <Format_SD+0xc8>)
 8000af8:	f7ff fba2 	bl	8000240 <strcmp>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d012      	beq.n	8000b28 <Format_SD+0x98>
            	fresult = f_unlink(fno.fname);
 8000b02:	4814      	ldr	r0, [pc, #80]	; (8000b54 <Format_SD+0xc4>)
 8000b04:	f01c fcca 	bl	801d49c <f_unlink>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <Format_SD+0xbc>)
 8000b0e:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <Format_SD+0xbc>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b07      	cmp	r3, #7
 8000b16:	e7d6      	b.n	8000ac6 <Format_SD+0x36>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000b18:	480e      	ldr	r0, [pc, #56]	; (8000b54 <Format_SD+0xc4>)
 8000b1a:	f01c fcbf 	bl	801d49c <f_unlink>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <Format_SD+0xbc>)
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e7ce      	b.n	8000ac6 <Format_SD+0x36>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000b28:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000b2a:	e7cc      	b.n	8000ac6 <Format_SD+0x36>
            }
        }
        f_closedir(&dir);
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f01c fb63 	bl	801d1fa <f_closedir>
    }
    free(path);
 8000b34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b36:	f01d fa81 	bl	801e03c <free>
    return fresult;
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <Format_SD+0xbc>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3738      	adds	r7, #56	; 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	080201b8 	.word	0x080201b8
 8000b4c:	20001a10 	.word	0x20001a10
 8000b50:	20001a1c 	.word	0x20001a1c
 8000b54:	20001a32 	.word	0x20001a32
 8000b58:	0802018c 	.word	0x0802018c

08000b5c <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000b66:	494d      	ldr	r1, [pc, #308]	; (8000c9c <Write_File+0x140>)
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f01c fba9 	bl	801d2c0 <f_stat>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <Write_File+0x144>)
 8000b74:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000b76:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <Write_File+0x144>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d012      	beq.n	8000ba4 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000b7e:	2064      	movs	r0, #100	; 0x64
 8000b80:	f01d fa54 	bl	801e02c <malloc>
 8000b84:	4603      	mov	r3, r0
 8000b86:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4946      	ldr	r1, [pc, #280]	; (8000ca4 <Write_File+0x148>)
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f01d ff63 	bl	801ea58 <siprintf>
		Send_Uart (buf);
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff ff20 	bl	80009d8 <Send_Uart>
	    free(buf);
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f01d fa4f 	bl	801e03c <free>
	    return fresult;
 8000b9e:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <Write_File+0x144>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	e077      	b.n	8000c94 <Write_File+0x138>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_EXISTING | FA_WRITE);
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	483f      	ldr	r0, [pc, #252]	; (8000ca8 <Write_File+0x14c>)
 8000baa:	f01b fc87 	bl	801c4bc <f_open>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <Write_File+0x144>)
 8000bb4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <Write_File+0x144>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d015      	beq.n	8000bea <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000bbe:	2064      	movs	r0, #100	; 0x64
 8000bc0:	f01d fa34 	bl	801e02c <malloc>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <Write_File+0x144>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4936      	ldr	r1, [pc, #216]	; (8000cac <Write_File+0x150>)
 8000bd2:	6938      	ldr	r0, [r7, #16]
 8000bd4:	f01d ff40 	bl	801ea58 <siprintf>
	    	Send_Uart(buf);
 8000bd8:	6938      	ldr	r0, [r7, #16]
 8000bda:	f7ff fefd 	bl	80009d8 <Send_Uart>
	        free(buf);
 8000bde:	6938      	ldr	r0, [r7, #16]
 8000be0:	f01d fa2c 	bl	801e03c <free>
	        return fresult;
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <Write_File+0x144>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	e054      	b.n	8000c94 <Write_File+0x138>
	    }

	    else
	    {
	    	fresult = f_write(&fil, data, strlen(data), &bw);
 8000bea:	6838      	ldr	r0, [r7, #0]
 8000bec:	f7ff fb32 	bl	8000254 <strlen>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <Write_File+0x154>)
 8000bf4:	6839      	ldr	r1, [r7, #0]
 8000bf6:	482c      	ldr	r0, [pc, #176]	; (8000ca8 <Write_File+0x14c>)
 8000bf8:	f01b fe2c 	bl	801c854 <f_write>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <Write_File+0x144>)
 8000c02:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <Write_File+0x144>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d012      	beq.n	8000c32 <Write_File+0xd6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f01d fa0d 	bl	801e02c <malloc>
 8000c12:	4603      	mov	r3, r0
 8000c14:	61fb      	str	r3, [r7, #28]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <Write_File+0x144>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4925      	ldr	r1, [pc, #148]	; (8000cb4 <Write_File+0x158>)
 8000c20:	69f8      	ldr	r0, [r7, #28]
 8000c22:	f01d ff19 	bl	801ea58 <siprintf>
	    		Send_Uart(buf);
 8000c26:	69f8      	ldr	r0, [r7, #28]
 8000c28:	f7ff fed6 	bl	80009d8 <Send_Uart>
	    		free(buf);
 8000c2c:	69f8      	ldr	r0, [r7, #28]
 8000c2e:	f01d fa05 	bl	801e03c <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&fil);
 8000c32:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <Write_File+0x14c>)
 8000c34:	f01c f820 	bl	801cc78 <f_close>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <Write_File+0x144>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <Write_File+0x144>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d013      	beq.n	8000c70 <Write_File+0x114>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000c48:	2064      	movs	r0, #100	; 0x64
 8000c4a:	f01d f9ef 	bl	801e02c <malloc>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <Write_File+0x144>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4917      	ldr	r1, [pc, #92]	; (8000cb8 <Write_File+0x15c>)
 8000c5c:	6978      	ldr	r0, [r7, #20]
 8000c5e:	f01d fefb 	bl	801ea58 <siprintf>
	    		Send_Uart(buf);
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff feb8 	bl	80009d8 <Send_Uart>
	    		free(buf);
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f01d f9e7 	bl	801e03c <free>
 8000c6e:	e00f      	b.n	8000c90 <Write_File+0x134>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f01d f9db 	bl	801e02c <malloc>
 8000c76:	4603      	mov	r3, r0
 8000c78:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n", name);
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	490f      	ldr	r1, [pc, #60]	; (8000cbc <Write_File+0x160>)
 8000c7e:	69b8      	ldr	r0, [r7, #24]
 8000c80:	f01d feea 	bl	801ea58 <siprintf>
	    		Send_Uart(buf);
 8000c84:	69b8      	ldr	r0, [r7, #24]
 8000c86:	f7ff fea7 	bl	80009d8 <Send_Uart>
	    		free(buf);
 8000c8a:	69b8      	ldr	r0, [r7, #24]
 8000c8c:	f01d f9d6 	bl	801e03c <free>
	    	}
	    }
	    return fresult;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <Write_File+0x144>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20001a1c 	.word	0x20001a1c
 8000ca0:	20001a10 	.word	0x20001a10
 8000ca4:	080201bc 	.word	0x080201bc
 8000ca8:	200009e0 	.word	0x200009e0
 8000cac:	080201dc 	.word	0x080201dc
 8000cb0:	200009d8 	.word	0x200009d8
 8000cb4:	08020204 	.word	0x08020204
 8000cb8:	08020238 	.word	0x08020238
 8000cbc:	08020270 	.word	0x08020270

08000cc0 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000cc8:	4943      	ldr	r1, [pc, #268]	; (8000dd8 <Create_File+0x118>)
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f01c faf8 	bl	801d2c0 <f_stat>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <Create_File+0x11c>)
 8000cd6:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000cd8:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <Create_File+0x11c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d112      	bne.n	8000d06 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f01d f9a3 	bl	801e02c <malloc>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	493c      	ldr	r1, [pc, #240]	; (8000de0 <Create_File+0x120>)
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f01d feb2 	bl	801ea58 <siprintf>
		Send_Uart(buf);
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff fe6f 	bl	80009d8 <Send_Uart>
		free(buf);
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f01d f99e 	bl	801e03c <free>
	    return fresult;
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <Create_File+0x11c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	e063      	b.n	8000dce <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000d06:	220b      	movs	r2, #11
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4836      	ldr	r0, [pc, #216]	; (8000de4 <Create_File+0x124>)
 8000d0c:	f01b fbd6 	bl	801c4bc <f_open>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <Create_File+0x11c>)
 8000d16:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <Create_File+0x11c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d015      	beq.n	8000d4c <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f01d f983 	bl	801e02c <malloc>
 8000d26:	4603      	mov	r3, r0
 8000d28:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000d2a:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <Create_File+0x11c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	492d      	ldr	r1, [pc, #180]	; (8000de8 <Create_File+0x128>)
 8000d34:	6938      	ldr	r0, [r7, #16]
 8000d36:	f01d fe8f 	bl	801ea58 <siprintf>
			Send_Uart(buf);
 8000d3a:	6938      	ldr	r0, [r7, #16]
 8000d3c:	f7ff fe4c 	bl	80009d8 <Send_Uart>
			free(buf);
 8000d40:	6938      	ldr	r0, [r7, #16]
 8000d42:	f01d f97b 	bl	801e03c <free>
		    return fresult;
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <Create_File+0x11c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	e040      	b.n	8000dce <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000d4c:	2064      	movs	r0, #100	; 0x64
 8000d4e:	f01d f96d 	bl	801e02c <malloc>
 8000d52:	4603      	mov	r3, r0
 8000d54:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4924      	ldr	r1, [pc, #144]	; (8000dec <Create_File+0x12c>)
 8000d5a:	69f8      	ldr	r0, [r7, #28]
 8000d5c:	f01d fe7c 	bl	801ea58 <siprintf>
			Send_Uart(buf);
 8000d60:	69f8      	ldr	r0, [r7, #28]
 8000d62:	f7ff fe39 	bl	80009d8 <Send_Uart>
			free(buf);
 8000d66:	69f8      	ldr	r0, [r7, #28]
 8000d68:	f01d f968 	bl	801e03c <free>
		}

		fresult = f_close(&fil);
 8000d6c:	481d      	ldr	r0, [pc, #116]	; (8000de4 <Create_File+0x124>)
 8000d6e:	f01b ff83 	bl	801cc78 <f_close>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <Create_File+0x11c>)
 8000d78:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <Create_File+0x11c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d013      	beq.n	8000daa <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000d82:	2064      	movs	r0, #100	; 0x64
 8000d84:	f01d f952 	bl	801e02c <malloc>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <Create_File+0x11c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4916      	ldr	r1, [pc, #88]	; (8000df0 <Create_File+0x130>)
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f01d fe5e 	bl	801ea58 <siprintf>
			Send_Uart(buf);
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff fe1b 	bl	80009d8 <Send_Uart>
			free(buf);
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f01d f94a 	bl	801e03c <free>
 8000da8:	e00f      	b.n	8000dca <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f01d f93e 	bl	801e02c <malloc>
 8000db0:	4603      	mov	r3, r0
 8000db2:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	490f      	ldr	r1, [pc, #60]	; (8000df4 <Create_File+0x134>)
 8000db8:	69b8      	ldr	r0, [r7, #24]
 8000dba:	f01d fe4d 	bl	801ea58 <siprintf>
			Send_Uart(buf);
 8000dbe:	69b8      	ldr	r0, [r7, #24]
 8000dc0:	f7ff fe0a 	bl	80009d8 <Send_Uart>
			free(buf);
 8000dc4:	69b8      	ldr	r0, [r7, #24]
 8000dc6:	f01d f939 	bl	801e03c <free>
		}
	}
    return fresult;
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <Create_File+0x11c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001a1c 	.word	0x20001a1c
 8000ddc:	20001a10 	.word	0x20001a10
 8000de0:	08020334 	.word	0x08020334
 8000de4:	200009e0 	.word	0x200009e0
 8000de8:	0802036c 	.word	0x0802036c
 8000dec:	08020394 	.word	0x08020394
 8000df0:	080203d4 	.word	0x080203d4
 8000df4:	08020314 	.word	0x08020314

08000df8 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <SELECT+0x14>)
 8000e02:	f008 fd27 	bl	8009854 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <DESELECT+0x14>)
 8000e1a:	f008 fd1b 	bl	8009854 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]

  //isWaitingForData = 1;

  while (HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY);
 8000e32:	bf00      	nop
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <SPI_TxByte+0x30>)
 8000e36:	f00f fa3b 	bl	80102b0 <HAL_SPI_GetState>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d1f9      	bne.n	8000e34 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi4, &data, 1, SPI_TIMEOUT);		// default
 8000e40:	1df9      	adds	r1, r7, #7
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	2201      	movs	r2, #1
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <SPI_TxByte+0x30>)
 8000e4a:	f00e fb53 	bl	800f4f4 <HAL_SPI_Transmit>

  //HAL_SPI_Transmit_DMA(&hspi4, &data, 1);
 // while(isWaitingForData == 1);


}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000557c 	.word	0x2000557c

08000e5c <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000e62:	23ff      	movs	r3, #255	; 0xff
 8000e64:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71bb      	strb	r3, [r7, #6]
  
  //isWaitingForData = 1;

  while ((HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY));
 8000e6a:	bf00      	nop
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <SPI_RxByte+0x38>)
 8000e6e:	f00f fa1f 	bl	80102b0 <HAL_SPI_GetState>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d1f9      	bne.n	8000e6c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi4, &dummy, &data, 1, SPI_TIMEOUT);		// default
 8000e78:	1dba      	adds	r2, r7, #6
 8000e7a:	1df9      	adds	r1, r7, #7
 8000e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <SPI_RxByte+0x38>)
 8000e86:	f00e fc9b 	bl	800f7c0 <HAL_SPI_TransmitReceive>
  
  //HAL_SPI_TransmitReceive_DMA(&hspi4, &dummy, &data, 1);
  //while(isWaitingForData == 1);

  return data;
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000557c 	.word	0x2000557c

08000e98 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000ea0:	f7ff ffdc 	bl	8000e5c <SPI_RxByte>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	701a      	strb	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <SD_ReadyWait+0x34>)
 8000ebc:	2232      	movs	r2, #50	; 0x32
 8000ebe:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000ec0:	f7ff ffcc 	bl	8000e5c <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000ec4:	f7ff ffca 	bl	8000e5c <SPI_RxByte>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2bff      	cmp	r3, #255	; 0xff
 8000ed0:	d004      	beq.n	8000edc <SD_ReadyWait+0x28>
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SD_ReadyWait+0x34>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1f3      	bne.n	8000ec4 <SD_ReadyWait+0x10>
  
  return res;
 8000edc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20014511 	.word	0x20014511

08000eec <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000ef2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ef6:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000ef8:	f7ff ff8a 	bl	8000e10 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e005      	b.n	8000f0e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000f02:	20ff      	movs	r0, #255	; 0xff
 8000f04:	f7ff ff90 	bl	8000e28 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b09      	cmp	r3, #9
 8000f12:	ddf6      	ble.n	8000f02 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000f14:	f7ff ff70 	bl	8000df8 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000f18:	2340      	movs	r3, #64	; 0x40
 8000f1a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000f2c:	2395      	movs	r3, #149	; 0x95
 8000f2e:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e009      	b.n	8000f4a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000f36:	1d3a      	adds	r2, r7, #4
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff72 	bl	8000e28 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3301      	adds	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	ddf2      	ble.n	8000f36 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000f50:	e002      	b.n	8000f58 <SD_PowerOn+0x6c>
  {
    Count--;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000f58:	f7ff ff80 	bl	8000e5c <SPI_RxByte>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d002      	beq.n	8000f68 <SD_PowerOn+0x7c>
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f4      	bne.n	8000f52 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000f68:	f7ff ff52 	bl	8000e10 <DESELECT>
  SPI_TxByte(0XFF);
 8000f6c:	20ff      	movs	r0, #255	; 0xff
 8000f6e:	f7ff ff5b 	bl	8000e28 <SPI_TxByte>
  
  PowerFlag = 1;
 8000f72:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <SD_PowerOn+0x94>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000028d 	.word	0x2000028d

08000f84 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <SD_PowerOff+0x14>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	2000028d 	.word	0x2000028d

08000f9c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <SD_CheckPower+0x14>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000028d 	.word	0x2000028d

08000fb4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <SD_RxDataBlock+0x68>)
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000fc4:	f7ff ff4a 	bl	8000e5c <SPI_RxByte>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2bff      	cmp	r3, #255	; 0xff
 8000fd0:	d104      	bne.n	8000fdc <SD_RxDataBlock+0x28>
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <SD_RxDataBlock+0x68>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f3      	bne.n	8000fc4 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2bfe      	cmp	r3, #254	; 0xfe
 8000fe0:	d001      	beq.n	8000fe6 <SD_RxDataBlock+0x32>
    return FALSE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e016      	b.n	8001014 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff53 	bl	8000e98 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff4d 	bl	8000e98 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3b02      	subs	r3, #2
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ed      	bne.n	8000fe6 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800100a:	f7ff ff27 	bl	8000e5c <SPI_RxByte>
  SPI_RxByte();
 800100e:	f7ff ff25 	bl	8000e5c <SPI_RxByte>
  
  return TRUE;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20014510 	.word	0x20014510

08001020 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001030:	f7ff ff40 	bl	8000eb4 <SD_ReadyWait>
 8001034:	4603      	mov	r3, r0
 8001036:	2bff      	cmp	r3, #255	; 0xff
 8001038:	d001      	beq.n	800103e <SD_TxDataBlock+0x1e>
    return FALSE;
 800103a:	2300      	movs	r3, #0
 800103c:	e040      	b.n	80010c0 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fef1 	bl	8000e28 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	2bfd      	cmp	r3, #253	; 0xfd
 800104a:	d031      	beq.n	80010b0 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fee5 	bl	8000e28 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fede 	bl	8000e28 <SPI_TxByte>
    } while (--wc);
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	3b01      	subs	r3, #1
 8001070:	73bb      	strb	r3, [r7, #14]
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1eb      	bne.n	8001050 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001078:	f7ff fef0 	bl	8000e5c <SPI_RxByte>
    SPI_RxByte();
 800107c:	f7ff feee 	bl	8000e5c <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001080:	e00b      	b.n	800109a <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001082:	f7ff feeb 	bl	8000e5c <SPI_RxByte>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	2b05      	cmp	r3, #5
 8001092:	d006      	beq.n	80010a2 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	3301      	adds	r3, #1
 8001098:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800109a:	7b7b      	ldrb	r3, [r7, #13]
 800109c:	2b40      	cmp	r3, #64	; 0x40
 800109e:	d9f0      	bls.n	8001082 <SD_TxDataBlock+0x62>
 80010a0:	e000      	b.n	80010a4 <SD_TxDataBlock+0x84>
        break;
 80010a2:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80010a4:	bf00      	nop
 80010a6:	f7ff fed9 	bl	8000e5c <SPI_RxByte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0fa      	beq.n	80010a6 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d101      	bne.n	80010be <SD_TxDataBlock+0x9e>
    return TRUE;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80010d4:	f7ff feee 	bl	8000eb4 <SD_ReadyWait>
 80010d8:	4603      	mov	r3, r0
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	d001      	beq.n	80010e2 <SD_SendCmd+0x1a>
    return 0xFF;
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	e040      	b.n	8001164 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fe9f 	bl	8000e28 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	0e1b      	lsrs	r3, r3, #24
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fe99 	bl	8000e28 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	0c1b      	lsrs	r3, r3, #16
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe93 	bl	8000e28 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fe8d 	bl	8000e28 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe88 	bl	8000e28 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b40      	cmp	r3, #64	; 0x40
 8001120:	d101      	bne.n	8001126 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001122:	2395      	movs	r3, #149	; 0x95
 8001124:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b48      	cmp	r3, #72	; 0x48
 800112a:	d101      	bne.n	8001130 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800112c:	2387      	movs	r3, #135	; 0x87
 800112e:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fe78 	bl	8000e28 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b4c      	cmp	r3, #76	; 0x4c
 800113c:	d101      	bne.n	8001142 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800113e:	f7ff fe8d 	bl	8000e5c <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001142:	230a      	movs	r3, #10
 8001144:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001146:	f7ff fe89 	bl	8000e5c <SPI_RxByte>
 800114a:	4603      	mov	r3, r0
 800114c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800114e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001152:	2b00      	cmp	r3, #0
 8001154:	da05      	bge.n	8001162 <SD_SendCmd+0x9a>
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	3b01      	subs	r3, #1
 800115a:	73bb      	strb	r3, [r7, #14]
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f1      	bne.n	8001146 <SD_SendCmd+0x7e>
  
  return res;
 8001162:	7b7b      	ldrb	r3, [r7, #13]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 800117c:	2301      	movs	r3, #1
 800117e:	e0d5      	b.n	800132c <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001180:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <SD_disk_initialize+0x1c8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <SD_disk_initialize+0x2a>
    return Stat;        
 800118e:	4b69      	ldr	r3, [pc, #420]	; (8001334 <SD_disk_initialize+0x1c8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	e0ca      	b.n	800132c <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001196:	f7ff fea9 	bl	8000eec <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800119a:	f7ff fe2d 	bl	8000df8 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80011a2:	2100      	movs	r1, #0
 80011a4:	2040      	movs	r0, #64	; 0x40
 80011a6:	f7ff ff8f 	bl	80010c8 <SD_SendCmd>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	f040 80a5 	bne.w	80012fc <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80011b2:	4b61      	ldr	r3, [pc, #388]	; (8001338 <SD_disk_initialize+0x1cc>)
 80011b4:	2264      	movs	r2, #100	; 0x64
 80011b6:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80011b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011bc:	2048      	movs	r0, #72	; 0x48
 80011be:	f7ff ff83 	bl	80010c8 <SD_SendCmd>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d158      	bne.n	800127a <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e00c      	b.n	80011e8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80011ce:	7bfc      	ldrb	r4, [r7, #15]
 80011d0:	f7ff fe44 	bl	8000e5c <SPI_RxByte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4423      	add	r3, r4
 80011de:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	3301      	adds	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d9ef      	bls.n	80011ce <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80011ee:	7abb      	ldrb	r3, [r7, #10]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	f040 8083 	bne.w	80012fc <SD_disk_initialize+0x190>
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	2baa      	cmp	r3, #170	; 0xaa
 80011fa:	d17f      	bne.n	80012fc <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80011fc:	2100      	movs	r1, #0
 80011fe:	2077      	movs	r0, #119	; 0x77
 8001200:	f7ff ff62 	bl	80010c8 <SD_SendCmd>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d807      	bhi.n	800121a <SD_disk_initialize+0xae>
 800120a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800120e:	2069      	movs	r0, #105	; 0x69
 8001210:	f7ff ff5a 	bl	80010c8 <SD_SendCmd>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800121a:	4b47      	ldr	r3, [pc, #284]	; (8001338 <SD_disk_initialize+0x1cc>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1eb      	bne.n	80011fc <SD_disk_initialize+0x90>
 8001224:	e000      	b.n	8001228 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001226:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001228:	4b43      	ldr	r3, [pc, #268]	; (8001338 <SD_disk_initialize+0x1cc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d064      	beq.n	80012fc <SD_disk_initialize+0x190>
 8001232:	2100      	movs	r1, #0
 8001234:	207a      	movs	r0, #122	; 0x7a
 8001236:	f7ff ff47 	bl	80010c8 <SD_SendCmd>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d15d      	bne.n	80012fc <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e00c      	b.n	8001260 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001246:	7bfc      	ldrb	r4, [r7, #15]
 8001248:	f7ff fe08 	bl	8000e5c <SPI_RxByte>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4423      	add	r3, r4
 8001256:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3301      	adds	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d9ef      	bls.n	8001246 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001266:	7a3b      	ldrb	r3, [r7, #8]
 8001268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SD_disk_initialize+0x108>
 8001270:	2306      	movs	r3, #6
 8001272:	e000      	b.n	8001276 <SD_disk_initialize+0x10a>
 8001274:	2302      	movs	r3, #2
 8001276:	73bb      	strb	r3, [r7, #14]
 8001278:	e040      	b.n	80012fc <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800127a:	2100      	movs	r1, #0
 800127c:	2077      	movs	r0, #119	; 0x77
 800127e:	f7ff ff23 	bl	80010c8 <SD_SendCmd>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d808      	bhi.n	800129a <SD_disk_initialize+0x12e>
 8001288:	2100      	movs	r1, #0
 800128a:	2069      	movs	r0, #105	; 0x69
 800128c:	f7ff ff1c 	bl	80010c8 <SD_SendCmd>
 8001290:	4603      	mov	r3, r0
 8001292:	2b01      	cmp	r3, #1
 8001294:	d801      	bhi.n	800129a <SD_disk_initialize+0x12e>
 8001296:	2302      	movs	r3, #2
 8001298:	e000      	b.n	800129c <SD_disk_initialize+0x130>
 800129a:	2301      	movs	r3, #1
 800129c:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d10e      	bne.n	80012c2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80012a4:	2100      	movs	r1, #0
 80012a6:	2077      	movs	r0, #119	; 0x77
 80012a8:	f7ff ff0e 	bl	80010c8 <SD_SendCmd>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d80e      	bhi.n	80012d0 <SD_disk_initialize+0x164>
 80012b2:	2100      	movs	r1, #0
 80012b4:	2069      	movs	r0, #105	; 0x69
 80012b6:	f7ff ff07 	bl	80010c8 <SD_SendCmd>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d107      	bne.n	80012d0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80012c0:	e00d      	b.n	80012de <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80012c2:	2100      	movs	r1, #0
 80012c4:	2041      	movs	r0, #65	; 0x41
 80012c6:	f7ff feff 	bl	80010c8 <SD_SendCmd>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <SD_disk_initialize+0x1cc>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e1      	bne.n	800129e <SD_disk_initialize+0x132>
 80012da:	e000      	b.n	80012de <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80012dc:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <SD_disk_initialize+0x1cc>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <SD_disk_initialize+0x18c>
 80012e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ec:	2050      	movs	r0, #80	; 0x50
 80012ee:	f7ff feeb 	bl	80010c8 <SD_SendCmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <SD_disk_initialize+0x1d0>)
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001302:	f7ff fd85 	bl	8000e10 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001306:	f7ff fda9 	bl	8000e5c <SPI_RxByte>
  
  if (type) 
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <SD_disk_initialize+0x1c8>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SD_disk_initialize+0x1c8>)
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e001      	b.n	8001326 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001322:	f7ff fe2f 	bl	8000f84 <SD_PowerOff>
  }
  
  return Stat;
 8001326:	4b03      	ldr	r3, [pc, #12]	; (8001334 <SD_disk_initialize+0x1c8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20014510 	.word	0x20014510
 800133c:	2000028c 	.word	0x2000028c

08001340 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001350:	2301      	movs	r3, #1
 8001352:	e002      	b.n	800135a <SD_disk_status+0x1a>
  
  return Stat;
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SD_disk_status+0x28>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000

0800136c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <SD_disk_read+0x1c>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <SD_disk_read+0x20>
    return RES_PARERR;
 8001388:	2304      	movs	r3, #4
 800138a:	e051      	b.n	8001430 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <SD_disk_read+0xcc>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800139a:	2303      	movs	r3, #3
 800139c:	e048      	b.n	8001430 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <SD_disk_read+0xd0>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80013b0:	f7ff fd22 	bl	8000df8 <SELECT>
  
  if (count == 1) 
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d111      	bne.n	80013de <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	2051      	movs	r0, #81	; 0x51
 80013be:	f7ff fe83 	bl	80010c8 <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d129      	bne.n	800141c <SD_disk_read+0xb0>
 80013c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013cc:	68b8      	ldr	r0, [r7, #8]
 80013ce:	f7ff fdf1 	bl	8000fb4 <SD_RxDataBlock>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d021      	beq.n	800141c <SD_disk_read+0xb0>
      count = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	e01e      	b.n	800141c <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	2052      	movs	r0, #82	; 0x52
 80013e2:	f7ff fe71 	bl	80010c8 <SD_SendCmd>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d117      	bne.n	800141c <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80013ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7ff fddf 	bl	8000fb4 <SD_RxDataBlock>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001402:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3b01      	subs	r3, #1
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ed      	bne.n	80013ec <SD_disk_read+0x80>
 8001410:	e000      	b.n	8001414 <SD_disk_read+0xa8>
          break;
 8001412:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001414:	2100      	movs	r1, #0
 8001416:	204c      	movs	r0, #76	; 0x4c
 8001418:	f7ff fe56 	bl	80010c8 <SD_SendCmd>
    }
  }
  
  DESELECT();
 800141c:	f7ff fcf8 	bl	8000e10 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001420:	f7ff fd1c 	bl	8000e5c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf14      	ite	ne
 800142a:	2301      	movne	r3, #1
 800142c:	2300      	moveq	r3, #0
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	2000028c 	.word	0x2000028c

08001440 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <SD_disk_write+0x1c>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <SD_disk_write+0x20>
    return RES_PARERR;
 800145c:	2304      	movs	r3, #4
 800145e:	e06b      	b.n	8001538 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001460:	4b37      	ldr	r3, [pc, #220]	; (8001540 <SD_disk_write+0x100>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800146e:	2303      	movs	r3, #3
 8001470:	e062      	b.n	8001538 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <SD_disk_write+0x100>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001480:	2302      	movs	r3, #2
 8001482:	e059      	b.n	8001538 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <SD_disk_write+0x104>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001496:	f7ff fcaf 	bl	8000df8 <SELECT>
  
  if (count == 1) 
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d110      	bne.n	80014c2 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	2058      	movs	r0, #88	; 0x58
 80014a4:	f7ff fe10 	bl	80010c8 <SD_SendCmd>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d13a      	bne.n	8001524 <SD_disk_write+0xe4>
 80014ae:	21fe      	movs	r1, #254	; 0xfe
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f7ff fdb5 	bl	8001020 <SD_TxDataBlock>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d033      	beq.n	8001524 <SD_disk_write+0xe4>
      count = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	e030      	b.n	8001524 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <SD_disk_write+0x104>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80014ce:	2100      	movs	r1, #0
 80014d0:	2077      	movs	r0, #119	; 0x77
 80014d2:	f7ff fdf9 	bl	80010c8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	2057      	movs	r0, #87	; 0x57
 80014da:	f7ff fdf5 	bl	80010c8 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2059      	movs	r0, #89	; 0x59
 80014e2:	f7ff fdf1 	bl	80010c8 <SD_SendCmd>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d11b      	bne.n	8001524 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80014ec:	21fc      	movs	r1, #252	; 0xfc
 80014ee:	68b8      	ldr	r0, [r7, #8]
 80014f0:	f7ff fd96 	bl	8001020 <SD_TxDataBlock>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001500:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3b01      	subs	r3, #1
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <SD_disk_write+0xac>
 800150e:	e000      	b.n	8001512 <SD_disk_write+0xd2>
          break;
 8001510:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001512:	21fd      	movs	r1, #253	; 0xfd
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff fd83 	bl	8001020 <SD_TxDataBlock>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001524:	f7ff fc74 	bl	8000e10 <DESELECT>
  SPI_RxByte();
 8001528:	f7ff fc98 	bl	8000e5c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	2000028c 	.word	0x2000028c

08001548 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b08b      	sub	sp, #44	; 0x2c
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	603a      	str	r2, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	460b      	mov	r3, r1
 8001556:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001562:	2304      	movs	r3, #4
 8001564:	e117      	b.n	8001796 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d126      	bne.n	80015c0 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d00e      	beq.n	8001598 <SD_disk_ioctl+0x50>
 800157a:	2b02      	cmp	r3, #2
 800157c:	d012      	beq.n	80015a4 <SD_disk_ioctl+0x5c>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11a      	bne.n	80015b8 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001582:	f7ff fd0b 	bl	8000f9c <SD_CheckPower>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 800158c:	f7ff fcfa 	bl	8000f84 <SD_PowerOff>
      res = RES_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001596:	e0fc      	b.n	8001792 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8001598:	f7ff fca8 	bl	8000eec <SD_PowerOn>
      res = RES_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015a2:	e0f6      	b.n	8001792 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	1c5c      	adds	r4, r3, #1
 80015a8:	f7ff fcf8 	bl	8000f9c <SD_CheckPower>
 80015ac:	4603      	mov	r3, r0
 80015ae:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015b6:	e0ec      	b.n	8001792 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80015b8:	2304      	movs	r3, #4
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015be:	e0e8      	b.n	8001792 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80015c0:	4b77      	ldr	r3, [pc, #476]	; (80017a0 <SD_disk_ioctl+0x258>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0e1      	b.n	8001796 <SD_disk_ioctl+0x24e>
    
    SELECT();
 80015d2:	f7ff fc11 	bl	8000df8 <SELECT>
    
    switch (ctrl) 
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	2b0d      	cmp	r3, #13
 80015da:	f200 80cb 	bhi.w	8001774 <SD_disk_ioctl+0x22c>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <SD_disk_ioctl+0x9c>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080016df 	.word	0x080016df
 80015e8:	0800161d 	.word	0x0800161d
 80015ec:	080016cf 	.word	0x080016cf
 80015f0:	08001775 	.word	0x08001775
 80015f4:	08001775 	.word	0x08001775
 80015f8:	08001775 	.word	0x08001775
 80015fc:	08001775 	.word	0x08001775
 8001600:	08001775 	.word	0x08001775
 8001604:	08001775 	.word	0x08001775
 8001608:	08001775 	.word	0x08001775
 800160c:	08001775 	.word	0x08001775
 8001610:	080016f1 	.word	0x080016f1
 8001614:	08001715 	.word	0x08001715
 8001618:	08001739 	.word	0x08001739
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800161c:	2100      	movs	r1, #0
 800161e:	2049      	movs	r0, #73	; 0x49
 8001620:	f7ff fd52 	bl	80010c8 <SD_SendCmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 80a8 	bne.w	800177c <SD_disk_ioctl+0x234>
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2110      	movs	r1, #16
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fcbe 	bl	8000fb4 <SD_RxDataBlock>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 809e 	beq.w	800177c <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8001640:	7b3b      	ldrb	r3, [r7, #12]
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10e      	bne.n	8001668 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800164a:	7d7b      	ldrb	r3, [r7, #21]
 800164c:	b29a      	uxth	r2, r3
 800164e:	7d3b      	ldrb	r3, [r7, #20]
 8001650:	b29b      	uxth	r3, r3
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b29b      	uxth	r3, r3
 8001656:	4413      	add	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	3301      	adds	r3, #1
 800165c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800165e:	8bfb      	ldrh	r3, [r7, #30]
 8001660:	029a      	lsls	r2, r3, #10
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e02e      	b.n	80016c6 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001668:	7c7b      	ldrb	r3, [r7, #17]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	b2da      	uxtb	r2, r3
 8001670:	7dbb      	ldrb	r3, [r7, #22]
 8001672:	09db      	lsrs	r3, r3, #7
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b2da      	uxtb	r2, r3
 800167a:	7d7b      	ldrb	r3, [r7, #21]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0306 	and.w	r3, r3, #6
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4413      	add	r3, r2
 8001688:	b2db      	uxtb	r3, r3
 800168a:	3302      	adds	r3, #2
 800168c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001690:	7d3b      	ldrb	r3, [r7, #20]
 8001692:	099b      	lsrs	r3, r3, #6
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b29a      	uxth	r2, r3
 8001698:	7cfb      	ldrb	r3, [r7, #19]
 800169a:	b29b      	uxth	r3, r3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	7cbb      	ldrb	r3, [r7, #18]
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80016b8:	8bfa      	ldrh	r2, [r7, #30]
 80016ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016be:	3b09      	subs	r3, #9
 80016c0:	409a      	lsls	r2, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80016cc:	e056      	b.n	800177c <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016dc:	e055      	b.n	800178a <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80016de:	f7ff fbe9 	bl	8000eb4 <SD_ReadyWait>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2bff      	cmp	r3, #255	; 0xff
 80016e6:	d14b      	bne.n	8001780 <SD_disk_ioctl+0x238>
        res = RES_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016ee:	e047      	b.n	8001780 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80016f0:	2100      	movs	r1, #0
 80016f2:	2049      	movs	r0, #73	; 0x49
 80016f4:	f7ff fce8 	bl	80010c8 <SD_SendCmd>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d142      	bne.n	8001784 <SD_disk_ioctl+0x23c>
 80016fe:	2110      	movs	r1, #16
 8001700:	6a38      	ldr	r0, [r7, #32]
 8001702:	f7ff fc57 	bl	8000fb4 <SD_RxDataBlock>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d03b      	beq.n	8001784 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001712:	e037      	b.n	8001784 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001714:	2100      	movs	r1, #0
 8001716:	204a      	movs	r0, #74	; 0x4a
 8001718:	f7ff fcd6 	bl	80010c8 <SD_SendCmd>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d132      	bne.n	8001788 <SD_disk_ioctl+0x240>
 8001722:	2110      	movs	r1, #16
 8001724:	6a38      	ldr	r0, [r7, #32]
 8001726:	f7ff fc45 	bl	8000fb4 <SD_RxDataBlock>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02b      	beq.n	8001788 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001736:	e027      	b.n	8001788 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001738:	2100      	movs	r1, #0
 800173a:	207a      	movs	r0, #122	; 0x7a
 800173c:	f7ff fcc4 	bl	80010c8 <SD_SendCmd>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8001746:	2300      	movs	r3, #0
 8001748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800174c:	e00b      	b.n	8001766 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 800174e:	6a3c      	ldr	r4, [r7, #32]
 8001750:	1c63      	adds	r3, r4, #1
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	f7ff fb82 	bl	8000e5c <SPI_RxByte>
 8001758:	4603      	mov	r3, r0
 800175a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800175c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001760:	3301      	adds	r3, #1
 8001762:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800176a:	2b03      	cmp	r3, #3
 800176c:	d9ef      	bls.n	800174e <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001774:	2304      	movs	r3, #4
 8001776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800177a:	e006      	b.n	800178a <SD_disk_ioctl+0x242>
      break;
 800177c:	bf00      	nop
 800177e:	e004      	b.n	800178a <SD_disk_ioctl+0x242>
      break;
 8001780:	bf00      	nop
 8001782:	e002      	b.n	800178a <SD_disk_ioctl+0x242>
      break;
 8001784:	bf00      	nop
 8001786:	e000      	b.n	800178a <SD_disk_ioctl+0x242>
      break;
 8001788:	bf00      	nop
    }
    
    DESELECT();
 800178a:	f7ff fb41 	bl	8000e10 <DESELECT>
    SPI_RxByte();
 800178e:	f7ff fb65 	bl	8000e5c <SPI_RxByte>
  }
  
  return res;
 8001792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001796:	4618      	mov	r0, r3
 8001798:	372c      	adds	r7, #44	; 0x2c
 800179a:	46bd      	mov	sp, r7
 800179c:	bd90      	pop	{r4, r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000000 	.word	0x20000000

080017a4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017ac:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <SCB_EnableICache+0x3c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80017b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <SCB_EnableICache+0x3c>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <SCB_EnableICache+0x3c>)
 80017c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <SCB_EnableDCache+0x7c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017f2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <SCB_EnableDCache+0x7c>)
 80017f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017fc:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0b5b      	lsrs	r3, r3, #13
 8001802:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001806:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001810:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800181a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001820:	490f      	ldr	r1, [pc, #60]	; (8001860 <SCB_EnableDCache+0x7c>)
 8001822:	4313      	orrs	r3, r2
 8001824:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ef      	bne.n	8001812 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	60fa      	str	r2, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e5      	bne.n	8001808 <SCB_EnableDCache+0x24>
 800183c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <SCB_EnableDCache+0x7c>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <SCB_EnableDCache+0x7c>)
 8001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184a:	6153      	str	r3, [r2, #20]
 800184c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001850:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8001876:	2320      	movs	r3, #32
 8001878:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800187a:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800187e:	e00b      	b.n	8001898 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <SCB_CleanDCache_by_Addr+0x50>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4413      	add	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dcf0      	bgt.n	8001880 <SCB_CleanDCache_by_Addr+0x1c>
 800189e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018a2:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80018a6:	bf00      	nop
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <HAL_SPI_TxRxCpltCallback>:
/* USER CODE BEGIN 0 */



//void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

	isWaitingForData = 0;
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]

}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000001 	.word	0x20000001

080018d8 <BSP_SD_WriteCpltCallback>:


void BSP_SD_WriteCpltCallback(void){
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0


	isReadyForNext = 1;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <BSP_SD_WriteCpltCallback+0x14>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]

}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20000002 	.word	0x20000002

080018f0 <HAL_GPIO_EXTI_Callback>:
}*/



// user button instrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ADC_RSV_PIN) {
			isAdcDone = 1;
	}
	*/

	if( ( __HAL_TIM_GET_COUNTER(&htim5) - previousButtonPress ) >=  buttonPressInterval ){
 80018fa:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x160>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001900:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x164>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x168>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	f0c0 808f 	bcc.w	8001a2e <HAL_GPIO_EXTI_Callback+0x13e>
		previousButtonPress += ( ( __HAL_TIM_GET_COUNTER(&htim5) ) - previousButtonPress );
 8001910:	4b4f      	ldr	r3, [pc, #316]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x160>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001916:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x164>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1ad2      	subs	r2, r2, r3
 800191c:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x164>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4413      	add	r3, r2
 8001922:	4a4c      	ldr	r2, [pc, #304]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x164>)
 8001924:	6013      	str	r3, [r2, #0]


	if (GPIO_Pin == BUTTON_MEASURE_PIN) {
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d14e      	bne.n	80019ca <HAL_GPIO_EXTI_Callback+0xda>

		if (isMeasuring == 0) {
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x16c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d125      	bne.n	8001982 <HAL_GPIO_EXTI_Callback+0x92>

			if( settings.powerSourceEnableMode == 1 ){
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x170>)
 8001938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10a      	bne.n	8001956 <HAL_GPIO_EXTI_Callback+0x66>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	2110      	movs	r1, #16
 8001944:	4847      	ldr	r0, [pc, #284]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x174>)
 8001946:	f007 ff85 	bl	8009854 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001950:	4845      	ldr	r0, [pc, #276]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x178>)
 8001952:	f007 ff7f 	bl	8009854 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 1;
				  //send_uart3("Power Source: ENABLED\n");
			 }

			//isLoggingToConsole = 1;
			if(settings.isTriggerActive == 0)
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x170>)
 8001958:	7b5b      	ldrb	r3, [r3, #13]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_GPIO_EXTI_Callback+0x74>
				isMeasuring = 1;
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 1;
 8001964:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x17c>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 0;
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x180>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001976:	483f      	ldr	r0, [pc, #252]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x184>)
 8001978:	f007 ff6c 	bl	8009854 <HAL_GPIO_WritePin>
			buzzerOn();
 800197c:	f000 f88a 	bl	8001a94 <buzzerOn>
 8001980:	e023      	b.n	80019ca <HAL_GPIO_EXTI_Callback+0xda>

		} else {


			if( settings.powerSourceEnableMode == 1){
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x170>)
 8001984:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10a      	bne.n	80019a2 <HAL_GPIO_EXTI_Callback+0xb2>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2110      	movs	r1, #16
 8001990:	4834      	ldr	r0, [pc, #208]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x174>)
 8001992:	f007 ff5f 	bl	8009854 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800199c:	4832      	ldr	r0, [pc, #200]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x178>)
 800199e:	f007 ff59 	bl	8009854 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 0;
				  //send_uart3("Power Source: DISABLED\n");
			 }

			isMeasuring = 0;
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x16c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
			isTriggered = 0;
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x188>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 0;
 80019ae:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x17c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 1;
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x180>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c0:	482c      	ldr	r0, [pc, #176]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x184>)
 80019c2:	f007 ff47 	bl	8009854 <HAL_GPIO_WritePin>
			buzzerOff();
 80019c6:	f000 f86c 	bl	8001aa2 <buzzerOff>
		}

	}
	if (GPIO_Pin == ADC_ALARM_PIN && settings.isTriggerActive == 1) {
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	2b04      	cmp	r3, #4
		//isMeasuring = 1;

	}

	if(GPIO_Pin == BUTTON_ENTER_PIN){
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d4:	d103      	bne.n	80019de <HAL_GPIO_EXTI_Callback+0xee>

		isEnterTriggered = 1;
 80019d6:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x18c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
		//isEnterTriggered = 0;

	}


}
 80019dc:	e033      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_ESC_PIN){
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e4:	d103      	bne.n	80019ee <HAL_GPIO_EXTI_Callback+0xfe>
		isEscTriggered = 1;
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x190>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
}
 80019ec:	e02b      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_UP_PIN){
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f4:	d103      	bne.n	80019fe <HAL_GPIO_EXTI_Callback+0x10e>
		isUpTriggered = 1;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x194>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
}
 80019fc:	e023      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_DOWN_PIN){
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a04:	d103      	bne.n	8001a0e <HAL_GPIO_EXTI_Callback+0x11e>
		isDownTriggered = 1;
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x198>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
}
 8001a0c:	e01b      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_LEFT_PIN){
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a14:	d103      	bne.n	8001a1e <HAL_GPIO_EXTI_Callback+0x12e>
		isLeftTriggered = 1;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
}
 8001a1c:	e013      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_RIGHT_PIN){
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a24:	d10f      	bne.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
		isRightTriggered = 1;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
}
 8001a2c:	e00b      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
		isDownTriggered = 0;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x198>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
		isUpTriggered = 0;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x194>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
		isLeftTriggered = 0;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		isRightTriggered = 0;
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20011b58 	.word	0x20011b58
 8001a54:	2000031c 	.word	0x2000031c
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	20000322 	.word	0x20000322
 8001a60:	20000018 	.word	0x20000018
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	20000320 	.word	0x20000320
 8001a70:	20000321 	.word	0x20000321
 8001a74:	40021000 	.word	0x40021000
 8001a78:	20000314 	.word	0x20000314
 8001a7c:	20000315 	.word	0x20000315
 8001a80:	20000316 	.word	0x20000316
 8001a84:	20000317 	.word	0x20000317
 8001a88:	20000318 	.word	0x20000318
 8001a8c:	20000319 	.word	0x20000319
 8001a90:	2000031a 	.word	0x2000031a

08001a94 <buzzerOn>:

// Enable buzzer
void buzzerOn(){
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
	//htim1.Instance->CCR1 = 75;
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <buzzerOff>:

// Disable buzzer
void buzzerOff(){
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <send_uart>:

/* to send the data to the uart */
void send_uart(char *string) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7fe fbcb 	bl	8000254 <strlen>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	81fb      	strh	r3, [r7, #14]

	SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fecc 	bl	8001864 <SCB_CleanDCache_by_Addr>

	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking

	//isReadyForNext = 0;
	HAL_UART_Transmit_DMA(&huart6, (uint8_t*) string, len);
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <send_uart+0x30>)
 8001ad4:	f00f fb50 	bl	8011178 <HAL_UART_Transmit_DMA>
	//while(isReadyForNext == 0);

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200119ac 	.word	0x200119ac

08001ae4 <send_uart2>:

void send_uart2(char *string) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7fe fbb1 	bl	8000254 <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	81fb      	strh	r3, [r7, #14]

	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);

	UARTAddToTxBuff2(string, len);
 8001af6:	89fb      	ldrh	r3, [r7, #14]
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f006 f9a4 	bl	8007e48 <UARTAddToTxBuff2>

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <send_uart3>:

void send_uart3(char *string) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7fe fb9f 	bl	8000254 <strlen>
 8001b16:	4603      	mov	r3, r0
 8001b18:	81fb      	strh	r3, [r7, #14]

	//SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
	//HAL_UART_Transmit_DMA(&huart3, (uint8_t*) string, len);
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);
	UARTAddToTxBuff(string, len);
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f006 f97e 	bl	8007e20 <UARTAddToTxBuff>

}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <bufclear>:
	return i;
}

/* to clear buffer */
void bufclear(void)  // clear buffer
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	e007      	b.n	8001b48 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b38:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <bufclear+0x30>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3301      	adds	r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	dbf3      	blt.n	8001b38 <bufclear+0xc>
	}
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20002c00 	.word	0x20002c00

08001b60 <microDelay>:

// 1us base delay function
void microDelay(uint16_t delay) {
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <microDelay+0x2c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8001b72:	bf00      	nop
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <microDelay+0x2c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3f9      	bcc.n	8001b74 <microDelay+0x14>

}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20011b18 	.word	0x20011b18

08001b90 <eepromReadEEPROM>:


HAL_StatusTypeDef eepromReadEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	80fb      	strh	r3, [r7, #6]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8001ba8:	e03b      	b.n	8001c22 <eepromReadEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 8001baa:	88ba      	ldrh	r2, [r7, #4]
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 8001bb2:	897b      	ldrh	r3, [r7, #10]
 8001bb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001bb6:	d918      	bls.n	8001bea <eepromReadEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <eepromReadEEPROM+0xac>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b299      	uxth	r1, r3
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2232      	movs	r2, #50	; 0x32
 8001bcc:	9202      	str	r2, [sp, #8]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	460a      	mov	r2, r1
 8001bd8:	21a0      	movs	r1, #160	; 0xa0
 8001bda:	f009 ff07 	bl	800b9ec <HAL_I2C_Mem_Read>
 8001bde:	4603      	mov	r3, r0
 8001be0:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 8001be2:	89fb      	ldrh	r3, [r7, #14]
 8001be4:	3340      	adds	r3, #64	; 0x40
 8001be6:	81fb      	strh	r3, [r7, #14]
 8001be8:	e018      	b.n	8001c1c <eepromReadEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <eepromReadEEPROM+0xac>)
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	88fa      	ldrh	r2, [r7, #6]
 8001bf0:	89fb      	ldrh	r3, [r7, #14]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b299      	uxth	r1, r3
 8001bf6:	89fb      	ldrh	r3, [r7, #14]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2232      	movs	r2, #50	; 0x32
 8001bfe:	9202      	str	r2, [sp, #8]
 8001c00:	897a      	ldrh	r2, [r7, #10]
 8001c02:	9201      	str	r2, [sp, #4]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2302      	movs	r3, #2
 8001c08:	460a      	mov	r2, r1
 8001c0a:	21a0      	movs	r1, #160	; 0xa0
 8001c0c:	f009 feee 	bl	800b9ec <HAL_I2C_Mem_Read>
 8001c10:	4603      	mov	r3, r0
 8001c12:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 8001c14:	89fa      	ldrh	r2, [r7, #14]
 8001c16:	897b      	ldrh	r3, [r7, #10]
 8001c18:	4413      	add	r3, r2
 8001c1a:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE / 2);
 8001c1c:	2005      	movs	r0, #5
 8001c1e:	f006 fb1f 	bl	8008260 <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 8001c22:	89fa      	ldrh	r2, [r7, #14]
 8001c24:	88bb      	ldrh	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d202      	bcs.n	8001c30 <eepromReadEEPROM+0xa0>
 8001c2a:	7b7b      	ldrb	r3, [r7, #13]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0bc      	beq.n	8001baa <eepromReadEEPROM+0x1a>
	}
	return Result;
 8001c30:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000010 	.word	0x20000010

08001c40 <eepromWriteEEPROM>:

HAL_StatusTypeDef eepromWriteEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	80fb      	strh	r3, [r7, #6]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8001c58:	e03b      	b.n	8001cd2 <eepromWriteEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 8001c5a:	88ba      	ldrh	r2, [r7, #4]
 8001c5c:	89fb      	ldrh	r3, [r7, #14]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 8001c62:	897b      	ldrh	r3, [r7, #10]
 8001c64:	2b3f      	cmp	r3, #63	; 0x3f
 8001c66:	d918      	bls.n	8001c9a <eepromWriteEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <eepromWriteEEPROM+0xac>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	88fa      	ldrh	r2, [r7, #6]
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	4413      	add	r3, r2
 8001c72:	b299      	uxth	r1, r3
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	2232      	movs	r2, #50	; 0x32
 8001c7c:	9202      	str	r2, [sp, #8]
 8001c7e:	2240      	movs	r2, #64	; 0x40
 8001c80:	9201      	str	r2, [sp, #4]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2302      	movs	r3, #2
 8001c86:	460a      	mov	r2, r1
 8001c88:	21a0      	movs	r1, #160	; 0xa0
 8001c8a:	f009 fd9b 	bl	800b7c4 <HAL_I2C_Mem_Write>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	3340      	adds	r3, #64	; 0x40
 8001c96:	81fb      	strh	r3, [r7, #14]
 8001c98:	e018      	b.n	8001ccc <eepromWriteEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <eepromWriteEEPROM+0xac>)
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	88fa      	ldrh	r2, [r7, #6]
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b299      	uxth	r1, r3
 8001ca6:	89fb      	ldrh	r3, [r7, #14]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	2232      	movs	r2, #50	; 0x32
 8001cae:	9202      	str	r2, [sp, #8]
 8001cb0:	897a      	ldrh	r2, [r7, #10]
 8001cb2:	9201      	str	r2, [sp, #4]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	460a      	mov	r2, r1
 8001cba:	21a0      	movs	r1, #160	; 0xa0
 8001cbc:	f009 fd82 	bl	800b7c4 <HAL_I2C_Mem_Write>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 8001cc4:	89fa      	ldrh	r2, [r7, #14]
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	4413      	add	r3, r2
 8001cca:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE);
 8001ccc:	200a      	movs	r0, #10
 8001cce:	f006 fac7 	bl	8008260 <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 8001cd2:	89fa      	ldrh	r2, [r7, #14]
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d202      	bcs.n	8001ce0 <eepromWriteEEPROM+0xa0>
 8001cda:	7b7b      	ldrb	r3, [r7, #13]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0bc      	beq.n	8001c5a <eepromWriteEEPROM+0x1a>
	}
	return Result;
 8001ce0:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000010 	.word	0x20000010

08001cf0 <writeEEPROM_AT24>:
	uint8_t isLoggingToEthernet;
	//double ADC_RESOLUTION;

};*/

void writeEEPROM_AT24(){
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	466b      	mov	r3, sp
 8001cf8:	461d      	mov	r5, r3

	uint8_t dataLength = 36;
 8001cfa:	2324      	movs	r3, #36	; 0x24
 8001cfc:	75fb      	strb	r3, [r7, #23]
	uint8_t dataBuffer [dataLength];
 8001cfe:	7df8      	ldrb	r0, [r7, #23]
 8001d00:	4603      	mov	r3, r0
 8001d02:	3b01      	subs	r3, #1
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	b2c1      	uxtb	r1, r0
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	f04f 0400 	mov.w	r4, #0
 8001d14:	00d4      	lsls	r4, r2, #3
 8001d16:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d1a:	00cb      	lsls	r3, r1, #3
 8001d1c:	b2c1      	uxtb	r1, r0
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	f04f 0400 	mov.w	r4, #0
 8001d2a:	00d4      	lsls	r4, r2, #3
 8001d2c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d30:	00cb      	lsls	r3, r1, #3
 8001d32:	4603      	mov	r3, r0
 8001d34:	3307      	adds	r3, #7
 8001d36:	08db      	lsrs	r3, r3, #3
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	ebad 0d03 	sub.w	sp, sp, r3
 8001d3e:	466b      	mov	r3, sp
 8001d40:	3300      	adds	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
	uint64_t buffer64 = 0;
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	f04f 0400 	mov.w	r4, #0
 8001d4c:	e9c7 3400 	strd	r3, r4, [r7]


	dataBuffer[0] = settings.isLoggingToConsole;
 8001d50:	4ba3      	ldr	r3, [pc, #652]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	701a      	strb	r2, [r3, #0]
	dataBuffer[1] = settings.isLoggingToSD;
 8001d58:	4ba1      	ldr	r3, [pc, #644]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d5a:	785a      	ldrb	r2, [r3, #1]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	705a      	strb	r2, [r3, #1]
	dataBuffer[2] = settings.measuringInterval>>24;
 8001d60:	4b9f      	ldr	r3, [pc, #636]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	0e1b      	lsrs	r3, r3, #24
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	709a      	strb	r2, [r3, #2]
	dataBuffer[3] = settings.measuringInterval>>16;
 8001d6c:	4b9c      	ldr	r3, [pc, #624]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	70da      	strb	r2, [r3, #3]
	dataBuffer[4] = settings.measuringInterval>>8;
 8001d78:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	711a      	strb	r2, [r3, #4]
	dataBuffer[5] = settings.measuringInterval;
 8001d84:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	715a      	strb	r2, [r3, #5]
	dataBuffer[6] = settings.samplingInterval>>24;
 8001d8e:	4b94      	ldr	r3, [pc, #592]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0e1b      	lsrs	r3, r3, #24
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	719a      	strb	r2, [r3, #6]
	dataBuffer[7] = settings.samplingInterval>>16;
 8001d9a:	4b91      	ldr	r3, [pc, #580]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	71da      	strb	r2, [r3, #7]
	dataBuffer[8] = settings.samplingInterval>>8;
 8001da6:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	721a      	strb	r2, [r3, #8]
	dataBuffer[9] = settings.samplingInterval;
 8001db2:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	725a      	strb	r2, [r3, #9]
	dataBuffer[10] = settings.isAveraging;
 8001dbc:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001dbe:	7b1a      	ldrb	r2, [r3, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	729a      	strb	r2, [r3, #10]
	dataBuffer[11] = settings.isTriggerActive;
 8001dc4:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001dc6:	7b5a      	ldrb	r2, [r3, #13]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	72da      	strb	r2, [r3, #11]

	buffer64 = settings.triggerLevel*1000000000;
 8001dcc:	4b84      	ldr	r3, [pc, #528]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001dce:	ed93 7b04 	vldr	d7, [r3, #16]
 8001dd2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001fd8 <writeEEPROM_AT24+0x2e8>
 8001dd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dda:	ec51 0b17 	vmov	r0, r1, d7
 8001dde:	f7fe fc6b 	bl	80006b8 <__aeabi_d2ulz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	e9c7 3400 	strd	r3, r4, [r7]
	dataBuffer[12] = buffer64>>56;
 8001dea:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	f04f 0400 	mov.w	r4, #0
 8001df6:	0e13      	lsrs	r3, r2, #24
 8001df8:	2400      	movs	r4, #0
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	731a      	strb	r2, [r3, #12]
	dataBuffer[13] = buffer64>>48;
 8001e00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	f04f 0400 	mov.w	r4, #0
 8001e0c:	0c13      	lsrs	r3, r2, #16
 8001e0e:	2400      	movs	r4, #0
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	735a      	strb	r2, [r3, #13]
	dataBuffer[14] = buffer64>>40;
 8001e16:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	f04f 0400 	mov.w	r4, #0
 8001e22:	0a13      	lsrs	r3, r2, #8
 8001e24:	2400      	movs	r4, #0
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	739a      	strb	r2, [r3, #14]
	dataBuffer[15] = buffer64>>32;
 8001e2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f04f 0400 	mov.w	r4, #0
 8001e38:	0013      	movs	r3, r2
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	73da      	strb	r2, [r3, #15]
	dataBuffer[16] = buffer64>>24;
 8001e42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f04f 0400 	mov.w	r4, #0
 8001e4e:	0e0b      	lsrs	r3, r1, #24
 8001e50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e54:	0e14      	lsrs	r4, r2, #24
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	741a      	strb	r2, [r3, #16]
	dataBuffer[17] = buffer64>>16;
 8001e5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	f04f 0400 	mov.w	r4, #0
 8001e68:	0c0b      	lsrs	r3, r1, #16
 8001e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e6e:	0c14      	lsrs	r4, r2, #16
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	745a      	strb	r2, [r3, #17]
	dataBuffer[18] = buffer64>>8;
 8001e76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	f04f 0400 	mov.w	r4, #0
 8001e82:	0a0b      	lsrs	r3, r1, #8
 8001e84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e88:	0a14      	lsrs	r4, r2, #8
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	749a      	strb	r2, [r3, #18]
	dataBuffer[19] = buffer64;
 8001e90:	783a      	ldrb	r2, [r7, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	74da      	strb	r2, [r3, #19]

	buffer64 = settings.lastOffsetValue*1000000000;
 8001e96:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001e98:	ed93 7b06 	vldr	d7, [r3, #24]
 8001e9c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001fd8 <writeEEPROM_AT24+0x2e8>
 8001ea0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ea4:	ec51 0b17 	vmov	r0, r1, d7
 8001ea8:	f7fe fc06 	bl	80006b8 <__aeabi_d2ulz>
 8001eac:	4603      	mov	r3, r0
 8001eae:	460c      	mov	r4, r1
 8001eb0:	e9c7 3400 	strd	r3, r4, [r7]
	dataBuffer[20] = buffer64>>56;
 8001eb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	f04f 0400 	mov.w	r4, #0
 8001ec0:	0e13      	lsrs	r3, r2, #24
 8001ec2:	2400      	movs	r4, #0
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	751a      	strb	r2, [r3, #20]
	dataBuffer[21] = buffer64>>48;
 8001eca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	f04f 0400 	mov.w	r4, #0
 8001ed6:	0c13      	lsrs	r3, r2, #16
 8001ed8:	2400      	movs	r4, #0
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	755a      	strb	r2, [r3, #21]
	dataBuffer[22] = buffer64>>40;
 8001ee0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	f04f 0400 	mov.w	r4, #0
 8001eec:	0a13      	lsrs	r3, r2, #8
 8001eee:	2400      	movs	r4, #0
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	759a      	strb	r2, [r3, #22]
	dataBuffer[23] = buffer64>>32;
 8001ef6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	f04f 0400 	mov.w	r4, #0
 8001f02:	0013      	movs	r3, r2
 8001f04:	2400      	movs	r4, #0
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	75da      	strb	r2, [r3, #23]
	dataBuffer[24] = buffer64>>24;
 8001f0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	f04f 0400 	mov.w	r4, #0
 8001f18:	0e0b      	lsrs	r3, r1, #24
 8001f1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f1e:	0e14      	lsrs	r4, r2, #24
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	761a      	strb	r2, [r3, #24]
	dataBuffer[25] = buffer64>>16;
 8001f26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	f04f 0400 	mov.w	r4, #0
 8001f32:	0c0b      	lsrs	r3, r1, #16
 8001f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f38:	0c14      	lsrs	r4, r2, #16
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	765a      	strb	r2, [r3, #25]
	dataBuffer[26] = buffer64>>8;
 8001f40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	f04f 0400 	mov.w	r4, #0
 8001f4c:	0a0b      	lsrs	r3, r1, #8
 8001f4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f52:	0a14      	lsrs	r4, r2, #8
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	769a      	strb	r2, [r3, #26]
	dataBuffer[27] = buffer64;
 8001f5a:	783a      	ldrb	r2, [r7, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	76da      	strb	r2, [r3, #27]

	dataBuffer[28] = settings.powerSourceVoltage>>8;
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f62:	8c1b      	ldrh	r3, [r3, #32]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	771a      	strb	r2, [r3, #28]
	dataBuffer[29] = settings.powerSourceVoltage;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f70:	8c1b      	ldrh	r3, [r3, #32]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	775a      	strb	r2, [r3, #29]

	dataBuffer[30] = settings.powerSourceCurrent>>8;
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	779a      	strb	r2, [r3, #30]
	dataBuffer[31] = settings.powerSourceCurrent;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f88:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	77da      	strb	r2, [r3, #31]

	dataBuffer[32] = settings.powerSourceEnable;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f92:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f883 2020 	strb.w	r2, [r3, #32]
	dataBuffer[33] = settings.powerSourceEnableMode;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f9e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	dataBuffer[34] = settings.isLoggingToUSB;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001faa:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dataBuffer[35] = settings.isLoggingToEthernet;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001fb6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	//at24_HAL_WriteBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, dataLength);
	eepromWriteEEPROM(0, &dataBuffer, dataLength);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	7dfa      	ldrb	r2, [r7, #23]
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fe39 	bl	8001c40 <eepromWriteEEPROM>
 8001fce:	46ad      	mov	sp, r5


}
 8001fd0:	bf00      	nop
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	41cdcd65 	.word	0x41cdcd65
 8001fe0:	20000018 	.word	0x20000018
 8001fe4:	00000000 	.word	0x00000000

08001fe8 <readEEPROM_AT24>:

void readEEPROM_AT24(){
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b097      	sub	sp, #92	; 0x5c
 8001fec:	af00      	add	r7, sp, #0

	uint8_t buffer8 = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t buffer32 = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t buffer16 = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint64_t buffer64 = 0;
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	f04f 0400 	mov.w	r4, #0
 8002006:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	uint8_t dataBuffer [64];

	//at24_HAL_ReadBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, 12);
	eepromReadEEPROM( 0, &dataBuffer, 64);
 800200a:	463b      	mov	r3, r7
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	4619      	mov	r1, r3
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff fdbd 	bl	8001b90 <eepromReadEEPROM>

	settings.isLoggingToConsole = dataBuffer[0];
 8002016:	783a      	ldrb	r2, [r7, #0]
 8002018:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <readEEPROM_AT24+0x200>)
 800201a:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = dataBuffer[1];
 800201c:	787a      	ldrb	r2, [r7, #1]
 800201e:	4b72      	ldr	r3, [pc, #456]	; (80021e8 <readEEPROM_AT24+0x200>)
 8002020:	705a      	strb	r2, [r3, #1]

	buffer32 = dataBuffer[5] | dataBuffer[4] << 8 | dataBuffer[3] << 16 | dataBuffer[2] << 24;
 8002022:	797b      	ldrb	r3, [r7, #5]
 8002024:	461a      	mov	r2, r3
 8002026:	793b      	ldrb	r3, [r7, #4]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	431a      	orrs	r2, r3
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	431a      	orrs	r2, r3
 8002032:	78bb      	ldrb	r3, [r7, #2]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	4313      	orrs	r3, r2
 8002038:	653b      	str	r3, [r7, #80]	; 0x50
	settings.measuringInterval = buffer32;
 800203a:	4a6b      	ldr	r2, [pc, #428]	; (80021e8 <readEEPROM_AT24+0x200>)
 800203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203e:	6053      	str	r3, [r2, #4]

	buffer32 = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	653b      	str	r3, [r7, #80]	; 0x50
	buffer32 = dataBuffer[9] | dataBuffer[8] << 8 | dataBuffer[7] << 16 | dataBuffer[6] << 24;
 8002044:	7a7b      	ldrb	r3, [r7, #9]
 8002046:	461a      	mov	r2, r3
 8002048:	7a3b      	ldrb	r3, [r7, #8]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	431a      	orrs	r2, r3
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	431a      	orrs	r2, r3
 8002054:	79bb      	ldrb	r3, [r7, #6]
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	4313      	orrs	r3, r2
 800205a:	653b      	str	r3, [r7, #80]	; 0x50
	settings.samplingInterval = buffer32;
 800205c:	4a62      	ldr	r2, [pc, #392]	; (80021e8 <readEEPROM_AT24+0x200>)
 800205e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002060:	6093      	str	r3, [r2, #8]

	settings.isAveraging = dataBuffer[10];
 8002062:	7aba      	ldrb	r2, [r7, #10]
 8002064:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <readEEPROM_AT24+0x200>)
 8002066:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = dataBuffer[11];
 8002068:	7afa      	ldrb	r2, [r7, #11]
 800206a:	4b5f      	ldr	r3, [pc, #380]	; (80021e8 <readEEPROM_AT24+0x200>)
 800206c:	735a      	strb	r2, [r3, #13]

	buffer64 = 0;
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	f04f 0400 	mov.w	r4, #0
 8002076:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	buffer64 = dataBuffer[19] | dataBuffer[18] << 8 | dataBuffer[17] << 16 | dataBuffer[16] << 24 | dataBuffer[15] << 32 | dataBuffer[14] << 40 | dataBuffer[13] << 48 | dataBuffer[12] << 56;
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	461a      	mov	r2, r3
 800207e:	7cbb      	ldrb	r3, [r7, #18]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	431a      	orrs	r2, r3
 8002084:	7c7b      	ldrb	r3, [r7, #17]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	431a      	orrs	r2, r3
 800208a:	7c3b      	ldrb	r3, [r7, #16]
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	431a      	orrs	r2, r3
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	4619      	mov	r1, r3
 8002094:	2320      	movs	r3, #32
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	431a      	orrs	r2, r3
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	4619      	mov	r1, r3
 80020a0:	2328      	movs	r3, #40	; 0x28
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	431a      	orrs	r2, r3
 80020a8:	7b7b      	ldrb	r3, [r7, #13]
 80020aa:	4619      	mov	r1, r3
 80020ac:	2330      	movs	r3, #48	; 0x30
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	431a      	orrs	r2, r3
 80020b4:	7b3b      	ldrb	r3, [r7, #12]
 80020b6:	4619      	mov	r1, r3
 80020b8:	2338      	movs	r3, #56	; 0x38
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80020c4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	settings.triggerLevel = buffer64;
 80020c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80020cc:	f7fe faa6 	bl	800061c <__aeabi_ul2d>
 80020d0:	4603      	mov	r3, r0
 80020d2:	460c      	mov	r4, r1
 80020d4:	4a44      	ldr	r2, [pc, #272]	; (80021e8 <readEEPROM_AT24+0x200>)
 80020d6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	settings.triggerLevel /= 1000000000;
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <readEEPROM_AT24+0x200>)
 80020dc:	ed93 6b04 	vldr	d6, [r3, #16]
 80020e0:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 80021e0 <readEEPROM_AT24+0x1f8>
 80020e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020e8:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <readEEPROM_AT24+0x200>)
 80020ea:	ed83 7b04 	vstr	d7, [r3, #16]

	buffer64 = 0;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	f04f 0400 	mov.w	r4, #0
 80020f6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	buffer64 = dataBuffer[27] | dataBuffer[26] << 8 | dataBuffer[25] << 16 | dataBuffer[24] << 24 | dataBuffer[23] << 32 | dataBuffer[22] << 40 | dataBuffer[21] << 48 | dataBuffer[20] << 56;
 80020fa:	7efb      	ldrb	r3, [r7, #27]
 80020fc:	461a      	mov	r2, r3
 80020fe:	7ebb      	ldrb	r3, [r7, #26]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	431a      	orrs	r2, r3
 8002104:	7e7b      	ldrb	r3, [r7, #25]
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	431a      	orrs	r2, r3
 800210a:	7e3b      	ldrb	r3, [r7, #24]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	431a      	orrs	r2, r3
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	4619      	mov	r1, r3
 8002114:	2320      	movs	r3, #32
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	431a      	orrs	r2, r3
 800211c:	7dbb      	ldrb	r3, [r7, #22]
 800211e:	4619      	mov	r1, r3
 8002120:	2328      	movs	r3, #40	; 0x28
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	431a      	orrs	r2, r3
 8002128:	7d7b      	ldrb	r3, [r7, #21]
 800212a:	4619      	mov	r1, r3
 800212c:	2330      	movs	r3, #48	; 0x30
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	431a      	orrs	r2, r3
 8002134:	7d3b      	ldrb	r3, [r7, #20]
 8002136:	4619      	mov	r1, r3
 8002138:	2338      	movs	r3, #56	; 0x38
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002144:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	settings.lastOffsetValue = buffer64;
 8002148:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800214c:	f7fe fa66 	bl	800061c <__aeabi_ul2d>
 8002150:	4603      	mov	r3, r0
 8002152:	460c      	mov	r4, r1
 8002154:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <readEEPROM_AT24+0x200>)
 8002156:	e9c2 3406 	strd	r3, r4, [r2, #24]
	settings.lastOffsetValue /= 1000000000;
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <readEEPROM_AT24+0x200>)
 800215c:	ed93 6b06 	vldr	d6, [r3, #24]
 8002160:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80021e0 <readEEPROM_AT24+0x1f8>
 8002164:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <readEEPROM_AT24+0x200>)
 800216a:	ed83 7b06 	vstr	d7, [r3, #24]

	buffer16 = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[29] | dataBuffer[28] << 8;
 8002174:	7f7b      	ldrb	r3, [r7, #29]
 8002176:	b21a      	sxth	r2, r3
 8002178:	7f3b      	ldrb	r3, [r7, #28]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	b21b      	sxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	b21b      	sxth	r3, r3
 8002182:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceVoltage = buffer16;
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <readEEPROM_AT24+0x200>)
 8002188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800218c:	8413      	strh	r3, [r2, #32]

	buffer16 = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[31] | dataBuffer[30] << 8;
 8002194:	7ffb      	ldrb	r3, [r7, #31]
 8002196:	b21a      	sxth	r2, r3
 8002198:	7fbb      	ldrb	r3, [r7, #30]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceCurrent = buffer16;
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021ac:	8453      	strh	r3, [r2, #34]	; 0x22

	settings.powerSourceEnable = dataBuffer[32];
 80021ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = dataBuffer[33];
 80021b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	settings.isLoggingToUSB = dataBuffer[34];
 80021c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = dataBuffer[35];
 80021cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27



}
 80021d6:	bf00      	nop
 80021d8:	375c      	adds	r7, #92	; 0x5c
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	bf00      	nop
 80021e0:	00000000 	.word	0x00000000
 80021e4:	41cdcd65 	.word	0x41cdcd65
 80021e8:	20000018 	.word	0x20000018
 80021ec:	00000000 	.word	0x00000000

080021f0 <initEEPROM>:

void initEEPROM (){
 80021f0:	b490      	push	{r4, r7}
 80021f2:	af00      	add	r7, sp, #0

	settings.isLoggingToConsole = 1;
 80021f4:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <initEEPROM+0x80>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = 0;
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <initEEPROM+0x80>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	705a      	strb	r2, [r3, #1]
	settings.isLoggingToUSB = 0;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <initEEPROM+0x80>)
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = 0;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <initEEPROM+0x80>)
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	settings.measuringInterval = 5;
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <initEEPROM+0x80>)
 8002212:	2205      	movs	r2, #5
 8002214:	605a      	str	r2, [r3, #4]
	settings.samplingInterval = 100;
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <initEEPROM+0x80>)
 8002218:	2264      	movs	r2, #100	; 0x64
 800221a:	609a      	str	r2, [r3, #8]
	settings.isAveraging = 0;
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <initEEPROM+0x80>)
 800221e:	2200      	movs	r2, #0
 8002220:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = 0;
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <initEEPROM+0x80>)
 8002224:	2200      	movs	r2, #0
 8002226:	735a      	strb	r2, [r3, #13]
	settings.triggerLevel = 0.0001;
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <initEEPROM+0x80>)
 800222a:	a40f      	add	r4, pc, #60	; (adr r4, 8002268 <initEEPROM+0x78>)
 800222c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002230:	e9c2 3404 	strd	r3, r4, [r2, #16]
	settings.lastOffsetValue = 0.0;
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <initEEPROM+0x80>)
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	settings.powerSourceVoltage = 2500;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <initEEPROM+0x80>)
 8002244:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002248:	841a      	strh	r2, [r3, #32]
	settings.powerSourceCurrent = 250;
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <initEEPROM+0x80>)
 800224c:	22fa      	movs	r2, #250	; 0xfa
 800224e:	845a      	strh	r2, [r3, #34]	; 0x22
	settings.powerSourceEnable = 1;
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <initEEPROM+0x80>)
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = 0;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <initEEPROM+0x80>)
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//eepromSaveObject(settings.isAveraging, 1);


}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc90      	pop	{r4, r7}
 8002266:	4770      	bx	lr
 8002268:	eb1c432d 	.word	0xeb1c432d
 800226c:	3f1a36e2 	.word	0x3f1a36e2
 8002270:	20000018 	.word	0x20000018
 8002274:	00000000 	.word	0x00000000

08002278 <setPotenciomenters>:
 * // Pot A = Voltage control, Pot B = current limit control
	uint8_t i2cWiperAdressPotA = 0x18;
	uint8_t i2cWiperAdressPotB = 0x4E;
 *
 */
void setPotenciomenters(){
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b08d      	sub	sp, #52	; 0x34
 800227c:	af02      	add	r7, sp, #8

	uint8_t temp8 = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	double tempDouble = 0;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	f04f 0400 	mov.w	r4, #0
 800228c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double tempDouble2 = 0;
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	f04f 0400 	mov.w	r4, #0
 8002298:	e9c7 3404 	strd	r3, r4, [r7, #16]

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 800229c:	4b64      	ldr	r3, [pc, #400]	; (8002430 <setPotenciomenters+0x1b8>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 80022a4:	4b62      	ldr	r3, [pc, #392]	; (8002430 <setPotenciomenters+0x1b8>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	73bb      	strb	r3, [r7, #14]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 80022b4:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <setPotenciomenters+0x1bc>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	737b      	strb	r3, [r7, #13]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 80022bc:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <setPotenciomenters+0x1bc>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	733b      	strb	r3, [r7, #12]

	/*Voltage settings*/
	tempDouble2 = settings.powerSourceVoltage;
 80022cc:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <setPotenciomenters+0x1c0>)
 80022ce:	8c1b      	ldrh	r3, [r3, #32]
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80022d8:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( (tempDouble2 / 1000) / ( VOLTAGE_SENSE_CURRENT * LT3045_NUMBER ) ) - 4700;
 80022dc:	ed97 7b04 	vldr	d7, [r7, #16]
 80022e0:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8002408 <setPotenciomenters+0x190>
 80022e4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022e8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8002410 <setPotenciomenters+0x198>
 80022ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022f0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002418 <setPotenciomenters+0x1a0>
 80022f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022f8:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_A_RESOLUTION;
 80022fc:	4b4f      	ldr	r3, [pc, #316]	; (800243c <setPotenciomenters+0x1c4>)
 80022fe:	ed93 6b00 	vldr	d6, [r3]
 8002302:	ed97 5b06 	vldr	d5, [r7, #24]
 8002306:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800230a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800230e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002312:	793b      	ldrb	r3, [r7, #4]
 8002314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8002318:	4b49      	ldr	r3, [pc, #292]	; (8002440 <setPotenciomenters+0x1c8>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 800231e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002322:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8002326:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800232a:	33fe      	adds	r3, #254	; 0xfe
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b44      	ldr	r3, [pc, #272]	; (8002440 <setPotenciomenters+0x1c8>)
 8002330:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 8002332:	4b43      	ldr	r3, [pc, #268]	; (8002440 <setPotenciomenters+0x1c8>)
 8002334:	2200      	movs	r2, #0
 8002336:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	b299      	uxth	r1, r3
 800233c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2302      	movs	r3, #2
 8002344:	4a3e      	ldr	r2, [pc, #248]	; (8002440 <setPotenciomenters+0x1c8>)
 8002346:	483f      	ldr	r0, [pc, #252]	; (8002444 <setPotenciomenters+0x1cc>)
 8002348:	f009 f852 	bl	800b3f0 <HAL_I2C_Master_Transmit>

	/*Current settings*/
	temp8 = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tempDouble = 0;
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	f04f 0400 	mov.w	r4, #0
 800235a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	tempDouble2 = 0;
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	f04f 0400 	mov.w	r4, #0
 8002366:	e9c7 3404 	strd	r3, r4, [r7, #16]

	HAL_Delay(100);
 800236a:	2064      	movs	r0, #100	; 0x64
 800236c:	f005 ff78 	bl	8008260 <HAL_Delay>

	tempDouble2 = settings.powerSourceCurrent;
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <setPotenciomenters+0x1c0>)
 8002372:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800237c:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( 150 / tempDouble2 ) * 1000;
 8002380:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8002420 <setPotenciomenters+0x1a8>
 8002384:	ed97 6b04 	vldr	d6, [r7, #16]
 8002388:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800238c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002408 <setPotenciomenters+0x190>
 8002390:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002394:	ed87 7b06 	vstr	d7, [r7, #24]
	tempDouble *= LT3045_NUMBER;
	tempDouble -= 330; /// by design 330 ohm inserted
 8002398:	ed97 7b06 	vldr	d7, [r7, #24]
 800239c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8002428 <setPotenciomenters+0x1b0>
 80023a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023a4:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_B_RESOLUTION;
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <setPotenciomenters+0x1d0>)
 80023aa:	ed93 6b00 	vldr	d6, [r3]
 80023ae:	ed97 5b06 	vldr	d5, [r7, #24]
 80023b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80023be:	793b      	ldrb	r3, [r7, #4]
 80023c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <setPotenciomenters+0x1c8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 80023ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ce:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80023d2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80023d6:	33fe      	adds	r3, #254	; 0xfe
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <setPotenciomenters+0x1c8>)
 80023dc:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <setPotenciomenters+0x1c8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrB, &i2cDataToWrite, 2, 1000);
 80023e4:	7b7b      	ldrb	r3, [r7, #13]
 80023e6:	b299      	uxth	r1, r3
 80023e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2302      	movs	r3, #2
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <setPotenciomenters+0x1c8>)
 80023f2:	4814      	ldr	r0, [pc, #80]	; (8002444 <setPotenciomenters+0x1cc>)
 80023f4:	f008 fffc 	bl	800b3f0 <HAL_I2C_Master_Transmit>


	HAL_Delay(100);
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	f005 ff31 	bl	8008260 <HAL_Delay>

}
 80023fe:	bf00      	nop
 8002400:	372c      	adds	r7, #44	; 0x2c
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
 8002406:	bf00      	nop
 8002408:	00000000 	.word	0x00000000
 800240c:	408f4000 	.word	0x408f4000
 8002410:	eb1c432d 	.word	0xeb1c432d
 8002414:	3f1a36e2 	.word	0x3f1a36e2
 8002418:	00000000 	.word	0x00000000
 800241c:	40b25c00 	.word	0x40b25c00
 8002420:	00000000 	.word	0x00000000
 8002424:	4062c000 	.word	0x4062c000
 8002428:	00000000 	.word	0x00000000
 800242c:	4074a000 	.word	0x4074a000
 8002430:	20000058 	.word	0x20000058
 8002434:	20000059 	.word	0x20000059
 8002438:	20000018 	.word	0x20000018
 800243c:	20000048 	.word	0x20000048
 8002440:	20011a6c 	.word	0x20011a6c
 8002444:	20007128 	.word	0x20007128
 8002448:	20000050 	.word	0x20000050

0800244c <readPotenciometers>:

void readPotenciometers(){
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af02      	add	r7, sp, #8

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <readPotenciometers+0xe8>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	71fb      	strb	r3, [r7, #7]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 800245a:	4b36      	ldr	r3, [pc, #216]	; (8002534 <readPotenciometers+0xe8>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	b25b      	sxtb	r3, r3
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	b25b      	sxtb	r3, r3
 8002468:	71bb      	strb	r3, [r7, #6]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <readPotenciometers+0xec>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	717b      	strb	r3, [r7, #5]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 8002472:	4b31      	ldr	r3, [pc, #196]	; (8002538 <readPotenciometers+0xec>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	b25b      	sxtb	r3, r3
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	b25b      	sxtb	r3, r3
 8002480:	713b      	strb	r3, [r7, #4]

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8002482:	4b2e      	ldr	r3, [pc, #184]	; (800253c <readPotenciometers+0xf0>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <readPotenciometers+0xf0>)
 800248a:	2200      	movs	r2, #0
 800248c:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0x00;
 800248e:	4b2b      	ldr	r3, [pc, #172]	; (800253c <readPotenciometers+0xf0>)
 8002490:	2200      	movs	r2, #0
 8002492:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	b299      	uxth	r1, r3
 8002498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	4a26      	ldr	r2, [pc, #152]	; (800253c <readPotenciometers+0xf0>)
 80024a2:	4827      	ldr	r0, [pc, #156]	; (8002540 <readPotenciometers+0xf4>)
 80024a4:	f008 ffa4 	bl	800b3f0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrA, &i2cDataToRead, 1, 1000);
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	b299      	uxth	r1, r3
 80024ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	4a23      	ldr	r2, [pc, #140]	; (8002544 <readPotenciometers+0xf8>)
 80024b6:	4822      	ldr	r0, [pc, #136]	; (8002540 <readPotenciometers+0xf4>)
 80024b8:	f009 f88e 	bl	800b5d8 <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot A - Voltage Control - read value: %d\n", i2cDataToRead[0]);
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <readPotenciometers+0xf8>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4921      	ldr	r1, [pc, #132]	; (8002548 <readPotenciometers+0xfc>)
 80024c4:	4821      	ldr	r0, [pc, #132]	; (800254c <readPotenciometers+0x100>)
 80024c6:	f01c fac7 	bl	801ea58 <siprintf>
	send_uart3(uartBufferTx);
 80024ca:	4820      	ldr	r0, [pc, #128]	; (800254c <readPotenciometers+0x100>)
 80024cc:	f7ff fb1c 	bl	8001b08 <send_uart3>

	HAL_Delay(100);
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f005 fec5 	bl	8008260 <HAL_Delay>

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <readPotenciometers+0xf0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <readPotenciometers+0xf0>)
 80024de:	2200      	movs	r2, #0
 80024e0:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <readPotenciometers+0xf0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrB, &i2cDataToWrite, 1, 1000);
 80024e8:	793b      	ldrb	r3, [r7, #4]
 80024ea:	b299      	uxth	r1, r3
 80024ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2301      	movs	r3, #1
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <readPotenciometers+0xf0>)
 80024f6:	4812      	ldr	r0, [pc, #72]	; (8002540 <readPotenciometers+0xf4>)
 80024f8:	f008 ff7a 	bl	800b3f0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrB, &i2cDataToRead, 1, 1000);
 80024fc:	793b      	ldrb	r3, [r7, #4]
 80024fe:	b299      	uxth	r1, r3
 8002500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2301      	movs	r3, #1
 8002508:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <readPotenciometers+0xf8>)
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <readPotenciometers+0xf4>)
 800250c:	f009 f864 	bl	800b5d8 <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot B - Current Control - read value: %d\n", i2cDataToRead[0]);
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <readPotenciometers+0xf8>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	490e      	ldr	r1, [pc, #56]	; (8002550 <readPotenciometers+0x104>)
 8002518:	480c      	ldr	r0, [pc, #48]	; (800254c <readPotenciometers+0x100>)
 800251a:	f01c fa9d 	bl	801ea58 <siprintf>
	send_uart3(uartBufferTx);
 800251e:	480b      	ldr	r0, [pc, #44]	; (800254c <readPotenciometers+0x100>)
 8002520:	f7ff faf2 	bl	8001b08 <send_uart3>

	HAL_Delay(100);
 8002524:	2064      	movs	r0, #100	; 0x64
 8002526:	f005 fe9b 	bl	8008260 <HAL_Delay>


}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000058 	.word	0x20000058
 8002538:	20000059 	.word	0x20000059
 800253c:	20011a6c 	.word	0x20011a6c
 8002540:	20007128 	.word	0x20007128
 8002544:	20007188 	.word	0x20007188
 8002548:	0802050c 	.word	0x0802050c
 800254c:	20011a2c 	.word	0x20011a2c
 8002550:	08020538 	.word	0x08020538

08002554 <saveToSD>:
#endif

}

// logging to SD card
void saveToSD (char *string){
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]


	if(startOfMeasurement == 1){
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <saveToSD+0xf8>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d119      	bne.n	8002598 <saveToSD+0x44>
		// file name format "20YYMMDD_HHMM" example "20200120_1022"
		sprintf(loggingFileName, "20%2d%2d%2d_%2d%2d.txt", Date.Year, Date.Month, Date.Date, Time.Hours,Time.Minutes);
		//uint8_t len = strlen(loggingFileName);
	*/
		/* Mount SD Card */
		fresult = f_mount(&fs, "", 0);
 8002564:	2200      	movs	r2, #0
 8002566:	493a      	ldr	r1, [pc, #232]	; (8002650 <saveToSD+0xfc>)
 8002568:	483a      	ldr	r0, [pc, #232]	; (8002654 <saveToSD+0x100>)
 800256a:	f019 ff61 	bl	801c430 <f_mount>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <saveToSD+0x104>)
 8002574:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 8002576:	4b38      	ldr	r3, [pc, #224]	; (8002658 <saveToSD+0x104>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <saveToSD+0x3e>
			isMeasuring = 0;
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <saveToSD+0x108>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
			send_uart("!!! Sampling stopped !!!\n");
 8002584:	4836      	ldr	r0, [pc, #216]	; (8002660 <saveToSD+0x10c>)
 8002586:	f7ff fa93 	bl	8001ab0 <send_uart>

			//#ifdef DEBUG
				return send_uart("!!! ERROR: mounting SD CARD !!!\n");
 800258a:	4836      	ldr	r0, [pc, #216]	; (8002664 <saveToSD+0x110>)
 800258c:	f7ff fa90 	bl	8001ab0 <send_uart>
 8002590:	e058      	b.n	8002644 <saveToSD+0xf0>
			//#endif
		} else {
			#ifdef DEBUG
				send_uart("SD CARD mounted successfully...\n");
 8002592:	4835      	ldr	r0, [pc, #212]	; (8002668 <saveToSD+0x114>)
 8002594:	f7ff fa8c 	bl	8001ab0 <send_uart>
		startOfMeasurement == 0;

	}

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8002598:	4a34      	ldr	r2, [pc, #208]	; (800266c <saveToSD+0x118>)
 800259a:	4935      	ldr	r1, [pc, #212]	; (8002670 <saveToSD+0x11c>)
 800259c:	482c      	ldr	r0, [pc, #176]	; (8002650 <saveToSD+0xfc>)
 800259e:	f01a fec8 	bl	801d332 <f_getfree>


	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80025a2:	4b32      	ldr	r3, [pc, #200]	; (800266c <saveToSD+0x118>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	895b      	ldrh	r3, [r3, #10]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b31      	ldr	r3, [pc, #196]	; (8002670 <saveToSD+0x11c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	fb03 f302 	mul.w	r3, r3, r2
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025ba:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80025be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025c6:	ee17 2a90 	vmov	r2, s15
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <saveToSD+0x120>)
 80025cc:	601a      	str	r2, [r3, #0]

	#ifdef DEBUG
		bufclear();
 80025ce:	f7ff faad 	bl	8001b2c <bufclear>
		sprintf(buffer, "SD CARD Free Space: \t%lu\n", free_space);
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <saveToSD+0x120>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4927      	ldr	r1, [pc, #156]	; (8002678 <saveToSD+0x124>)
 80025da:	4828      	ldr	r0, [pc, #160]	; (800267c <saveToSD+0x128>)
 80025dc:	f01c fa3c 	bl	801ea58 <siprintf>
		send_uart(buffer);
 80025e0:	4826      	ldr	r0, [pc, #152]	; (800267c <saveToSD+0x128>)
 80025e2:	f7ff fa65 	bl	8001ab0 <send_uart>
	#endif

	if( free_space < strlen(string) ){
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fd fe34 	bl	8000254 <strlen>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <saveToSD+0x120>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d909      	bls.n	800260a <saveToSD+0xb6>
		isMeasuring = 0;
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <saveToSD+0x108>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
		send_uart("!!! Sampling stopped !!!\n");
 80025fc:	4818      	ldr	r0, [pc, #96]	; (8002660 <saveToSD+0x10c>)
 80025fe:	f7ff fa57 	bl	8001ab0 <send_uart>

		return send_uart("!!! ERROR: SD card capacity !!!\n");
 8002602:	481f      	ldr	r0, [pc, #124]	; (8002680 <saveToSD+0x12c>)
 8002604:	f7ff fa54 	bl	8001ab0 <send_uart>
 8002608:	e01c      	b.n	8002644 <saveToSD+0xf0>

	}


	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&fil, loggingFileName,	FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800260a:	2213      	movs	r2, #19
 800260c:	491d      	ldr	r1, [pc, #116]	; (8002684 <saveToSD+0x130>)
 800260e:	481e      	ldr	r0, [pc, #120]	; (8002688 <saveToSD+0x134>)
 8002610:	f019 ff54 	bl	801c4bc <f_open>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <saveToSD+0x104>)
 800261a:	701a      	strb	r2, [r3, #0]

	/* Move to offset to the end of the file */
	fresult = f_lseek(&fil, &fil.fptr);
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <saveToSD+0x138>)
 800261e:	4619      	mov	r1, r3
 8002620:	4819      	ldr	r0, [pc, #100]	; (8002688 <saveToSD+0x134>)
 8002622:	f01a fb53 	bl	801cccc <f_lseek>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <saveToSD+0x104>)
 800262c:	701a      	strb	r2, [r3, #0]

	/* write the string to the file */
	fresult = f_puts(string, &fil);
 800262e:	4916      	ldr	r1, [pc, #88]	; (8002688 <saveToSD+0x134>)
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f01b f856 	bl	801d6e2 <f_puts>
 8002636:	4603      	mov	r3, r0
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <saveToSD+0x104>)
 800263c:	701a      	strb	r2, [r3, #0]

	/* Close file */
	f_close(&fil);
 800263e:	4812      	ldr	r0, [pc, #72]	; (8002688 <saveToSD+0x134>)
 8002640:	f01a fb1a 	bl	801cc78 <f_close>
	//bufclear();




}
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000320 	.word	0x20000320
 8002650:	08020564 	.word	0x08020564
 8002654:	20001b38 	.word	0x20001b38
 8002658:	20001a10 	.word	0x20001a10
 800265c:	20000322 	.word	0x20000322
 8002660:	08020754 	.word	0x08020754
 8002664:	08020770 	.word	0x08020770
 8002668:	08020588 	.word	0x08020588
 800266c:	200009dc 	.word	0x200009dc
 8002670:	20001a18 	.word	0x20001a18
 8002674:	20001a14 	.word	0x20001a14
 8002678:	080205c8 	.word	0x080205c8
 800267c:	20002c00 	.word	0x20002c00
 8002680:	08020794 	.word	0x08020794
 8002684:	20005354 	.word	0x20005354
 8002688:	200009e0 	.word	0x200009e0
 800268c:	200009f8 	.word	0x200009f8

08002690 <setRangeNA>:


// function to set selected range ON/OFF
// ON --> selection = 1
// OFF --> selection = 0
void setRangeNA(uint8_t selection){
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]

	if(selection){
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00c      	beq.n	80026ba <setRangeNA+0x2a>
		// nA range ON
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);
		// NA_TRANS port E pin 1 HIGH
		GPIOE->ODR |= (1<<1);
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <setRangeNA+0x50>)
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <setRangeNA+0x50>)
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	6153      	str	r3, [r2, #20]
		// AS4 port E pin 3 LOW
		GPIOE->ODR &= ~(1<<3);
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <setRangeNA+0x50>)
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <setRangeNA+0x50>)
 80026b2:	f023 0308 	bic.w	r3, r3, #8
 80026b6:	6153      	str	r3, [r2, #20]
		// AS4 port E pin 3 HIGH
		GPIOE->ODR |= (1<<3);

	}

}
 80026b8:	e00b      	b.n	80026d2 <setRangeNA+0x42>
		GPIOE->ODR &= ~(1<<1);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <setRangeNA+0x50>)
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <setRangeNA+0x50>)
 80026c0:	f023 0302 	bic.w	r3, r3, #2
 80026c4:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= (1<<3);
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <setRangeNA+0x50>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <setRangeNA+0x50>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	6153      	str	r3, [r2, #20]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <setRangeUA>:

void setRangeUA (uint8_t selection){
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]

	if(selection){
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <setRangeUA+0x2a>
		// uA range ON
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_RESET);
		// UA_TRANS port E pin 0 HIGH
		GPIOE->ODR |= (1<<0);
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <setRangeUA+0x50>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <setRangeUA+0x50>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6153      	str	r3, [r2, #20]
		// AS3 port E pin 5 LOW
		GPIOE->ODR &= ~(1<<5);
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <setRangeUA+0x50>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <setRangeUA+0x50>)
 8002706:	f023 0320 	bic.w	r3, r3, #32
 800270a:	6153      	str	r3, [r2, #20]
		GPIOE->ODR &= ~(1<<0);
		// AS3 port E pin 5 HIGH
		GPIOE->ODR |= (1<<5);

	}
}
 800270c:	e00b      	b.n	8002726 <setRangeUA+0x42>
		GPIOE->ODR &= ~(1<<0);
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <setRangeUA+0x50>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <setRangeUA+0x50>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= (1<<5);
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <setRangeUA+0x50>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <setRangeUA+0x50>)
 8002720:	f043 0320 	orr.w	r3, r3, #32
 8002724:	6153      	str	r3, [r2, #20]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <setRangeMA>:

void setRangeMA (uint8_t selection){
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]

	if(selection){
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00c      	beq.n	8002762 <setRangeMA+0x2a>
		// mA range ON
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_RESET);
		// MA_TRANS port B pin 9 HIGH
		GPIOB->ODR |= (1<<9);
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <setRangeMA+0x50>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <setRangeMA+0x50>)
 800274e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002752:	6153      	str	r3, [r2, #20]
		// AS2 port E pin 4 LOW
		GPIOE->ODR &= ~(1<<4);
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <setRangeMA+0x54>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <setRangeMA+0x54>)
 800275a:	f023 0310 	bic.w	r3, r3, #16
 800275e:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<9);
		// AS2 port E pin 4 HIGH
		GPIOE->ODR |= (1<<4);

	}
}
 8002760:	e00b      	b.n	800277a <setRangeMA+0x42>
		GPIOB->ODR &= ~(1<<9);
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <setRangeMA+0x50>)
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <setRangeMA+0x50>)
 8002768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800276c:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= (1<<4);
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <setRangeMA+0x54>)
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4a06      	ldr	r2, [pc, #24]	; (800278c <setRangeMA+0x54>)
 8002774:	f043 0310 	orr.w	r3, r3, #16
 8002778:	6153      	str	r3, [r2, #20]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40020400 	.word	0x40020400
 800278c:	40021000 	.word	0x40021000

08002790 <change_range>:


// simple range changing , no linear regression, based on measured value and hard limits
void change_range(float measuredValue) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	ed87 0a01 	vstr	s0, [r7, #4]

	// change from nA to uA
	if (currentRange == 0 & measuredValue >= RANGE_UPPER_LIMIT_NA) {
 800279a:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <change_range+0x140>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80027b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	bfac      	ite	ge
 80027ba:	2301      	movge	r3, #1
 80027bc:	2300      	movlt	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	4013      	ands	r3, r2
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <change_range+0x50>
		currentRange = 1;
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <change_range+0x140>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]

		setRangeNA(0);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7ff ff5e 	bl	8002690 <setRangeNA>
		setRangeUA(1);
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7ff ff85 	bl	80026e4 <setRangeUA>
		setRangeMA(0);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7ff ffac 	bl	8002738 <setRangeMA>
		*/

	}

	// change from uA to mA
	if (currentRange == 1 & measuredValue >= RANGE_UPPER_LIMIT_UA) {
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <change_range+0x140>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80027f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	bfac      	ite	ge
 8002800:	2301      	movge	r3, #1
 8002802:	2300      	movlt	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4013      	ands	r3, r2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <change_range+0x98>
	//else if (currentRange == 1 & measuredValue >= RANGE_UPPER_LIMIT_UA) {
		currentRange = 2;
 800280e:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <change_range+0x140>)
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]

		setRangeNA(0);
 8002814:	2000      	movs	r0, #0
 8002816:	f7ff ff3b 	bl	8002690 <setRangeNA>
		setRangeUA(0);
 800281a:	2000      	movs	r0, #0
 800281c:	f7ff ff62 	bl	80026e4 <setRangeUA>
		setRangeMA(1);
 8002820:	2001      	movs	r0, #1
 8002822:	f7ff ff89 	bl	8002738 <setRangeMA>
	 HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);

	 }
	 */

}
 8002826:	e04a      	b.n	80028be <change_range+0x12e>
	else if (currentRange == 2 & measuredValue <= RANGE_LOWER_LIMIT_MA) {
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <change_range+0x140>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2da      	uxtb	r2, r3
 8002836:	edd7 7a01 	vldr	s15, [r7, #4]
 800283a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800283e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80028c8 <change_range+0x138>
 8002842:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	bf94      	ite	ls
 800284c:	2301      	movls	r3, #1
 800284e:	2300      	movhi	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4013      	ands	r3, r2
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00c      	beq.n	8002874 <change_range+0xe4>
		currentRange = 1;
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <change_range+0x140>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
		setRangeNA(0);
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff ff15 	bl	8002690 <setRangeNA>
		setRangeUA(1);
 8002866:	2001      	movs	r0, #1
 8002868:	f7ff ff3c 	bl	80026e4 <setRangeUA>
		setRangeMA(0);
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff ff63 	bl	8002738 <setRangeMA>
}
 8002872:	e024      	b.n	80028be <change_range+0x12e>
	else if (currentRange == 1 & measuredValue <= RANGE_LOWER_LIMIT_UA) {
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <change_range+0x140>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2da      	uxtb	r2, r3
 8002882:	edd7 7a01 	vldr	s15, [r7, #4]
 8002886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800288a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80028c8 <change_range+0x138>
 800288e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002896:	bf94      	ite	ls
 8002898:	2301      	movls	r3, #1
 800289a:	2300      	movhi	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4013      	ands	r3, r2
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <change_range+0x12e>
		currentRange = 0;
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <change_range+0x140>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
		setRangeNA(1);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7ff feef 	bl	8002690 <setRangeNA>
		setRangeUA(0);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7ff ff16 	bl	80026e4 <setRangeUA>
		setRangeMA(0);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7ff ff3d 	bl	8002738 <setRangeMA>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80028cc:	3f50624d 	.word	0x3f50624d
 80028d0:	20000344 	.word	0x20000344

080028d4 <adc_write_data>:
	 }
	 */

}

void adc_write_data(uint8_t command, uint8_t regAdrr, uint8_t dataValueMS, uint8_t dataValueLS){
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	4603      	mov	r3, r0
 80028e8:	71bb      	strb	r3, [r7, #6]
 80028ea:	460b      	mov	r3, r1
 80028ec:	717b      	strb	r3, [r7, #5]
 80028ee:	4613      	mov	r3, r2
 80028f0:	713b      	strb	r3, [r7, #4]

	isWaitingForData = 1;
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <adc_write_data+0xbc>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]

	uint8_t bufferTx [4];
	uint8_t bufferRx [4];

	bufferTx [0] = command;				// write 8 bit command word
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	733b      	strb	r3, [r7, #12]
	bufferTx [1] = regAdrr;				// write 8 bit register address
 80028fc:	79bb      	ldrb	r3, [r7, #6]
 80028fe:	737b      	strb	r3, [r7, #13]
	bufferTx [2] = dataValueMS;			// 16 bit register value --> 8 MSB bit into register
 8002900:	797b      	ldrb	r3, [r7, #5]
 8002902:	73bb      	strb	r3, [r7, #14]
	bufferTx [3] = dataValueLS;			// 16 bit register value --> 8 LSB bit into register
 8002904:	793b      	ldrb	r3, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]

	// to GPI LOW
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	; 0x40
 800290c:	4821      	ldr	r0, [pc, #132]	; (8002994 <adc_write_data+0xc0>)
 800290e:	f006 ffa1 	bl	8009854 <HAL_GPIO_WritePin>
	microDelay(50);
 8002912:	2032      	movs	r0, #50	; 0x32
 8002914:	f7ff f924 	bl	8001b60 <microDelay>

	HAL_SPI_TransmitReceive_IT(&hspi1, bufferTx, bufferRx, 4);
 8002918:	f107 0208 	add.w	r2, r7, #8
 800291c:	f107 010c 	add.w	r1, r7, #12
 8002920:	2304      	movs	r3, #4
 8002922:	481d      	ldr	r0, [pc, #116]	; (8002998 <adc_write_data+0xc4>)
 8002924:	f00d f960 	bl	800fbe8 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, bufferTx, bufferRx, 4);

	while (isWaitingForData > 0);
 8002928:	bf00      	nop
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <adc_write_data+0xbc>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1fb      	bne.n	800292a <adc_write_data+0x56>

	microDelay(50);
 8002932:	2032      	movs	r0, #50	; 0x32
 8002934:	f7ff f914 	bl	8001b60 <microDelay>
	// to GPI HIGH
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	2140      	movs	r1, #64	; 0x40
 800293c:	4815      	ldr	r0, [pc, #84]	; (8002994 <adc_write_data+0xc0>)
 800293e:	f006 ff89 	bl	8009854 <HAL_GPIO_WritePin>

	microDelay(50);
 8002942:	2032      	movs	r0, #50	; 0x32
 8002944:	f7ff f90c 	bl	8001b60 <microDelay>

	// to GPI LOW
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	2140      	movs	r1, #64	; 0x40
 800294c:	4811      	ldr	r0, [pc, #68]	; (8002994 <adc_write_data+0xc0>)
 800294e:	f006 ff81 	bl	8009854 <HAL_GPIO_WritePin>
	microDelay(50);
 8002952:	2032      	movs	r0, #50	; 0x32
 8002954:	f7ff f904 	bl	8001b60 <microDelay>

	HAL_SPI_TransmitReceive_IT(&hspi1, bufferTx, bufferRx, 4);
 8002958:	f107 0208 	add.w	r2, r7, #8
 800295c:	f107 010c 	add.w	r1, r7, #12
 8002960:	2304      	movs	r3, #4
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <adc_write_data+0xc4>)
 8002964:	f00d f940 	bl	800fbe8 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, bufferTx, bufferRx, 4);

	while (isWaitingForData > 0);
 8002968:	bf00      	nop
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <adc_write_data+0xbc>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1fb      	bne.n	800296a <adc_write_data+0x96>

	microDelay(50);
 8002972:	2032      	movs	r0, #50	; 0x32
 8002974:	f7ff f8f4 	bl	8001b60 <microDelay>
	// to GPI HIGH
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002978:	2201      	movs	r2, #1
 800297a:	2140      	movs	r1, #64	; 0x40
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <adc_write_data+0xc0>)
 800297e:	f006 ff69 	bl	8009854 <HAL_GPIO_WritePin>

	microDelay(50);
 8002982:	2032      	movs	r0, #50	; 0x32
 8002984:	f7ff f8ec 	bl	8001b60 <microDelay>


}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	20000001 	.word	0x20000001
 8002994:	40020c00 	.word	0x40020c00
 8002998:	20005378 	.word	0x20005378

0800299c <adc_config>:

// sequence to config ADC after reset or power up
uint8_t adc_config() {
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <adc_config+0x1c>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]

	// SETTING ADC PGA AND WORKING RANGE
	adc_write_data(ADC_WRITE, ADC_RANGE_SEL_REG, 0x0, ADC_RANGE_UNIDIR_125REF_INT_REF);
 80029a6:	230b      	movs	r3, #11
 80029a8:	2200      	movs	r2, #0
 80029aa:	2114      	movs	r1, #20
 80029ac:	20d0      	movs	r0, #208	; 0xd0
 80029ae:	f7ff ff91 	bl	80028d4 <adc_write_data>
	returnValue = HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
*/

}
 80029b2:	bf00      	nop
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000001 	.word	0x20000001

080029bc <adc_compensateOffset>:

	send_uart3("ADC resetted\n");

}

void adc_compensateOffset(){
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0

	double result = 0;
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	e9c7 3402 	strd	r3, r4, [r7, #8]
	uint16_t offsetSamples = 500;
 80029ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029d2:	807b      	strh	r3, [r7, #2]

	HAL_Delay(50);
 80029d4:	2032      	movs	r0, #50	; 0x32
 80029d6:	f005 fc43 	bl	8008260 <HAL_Delay>

	// stabilize components anf flush buffer
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 80029da:	2300      	movs	r3, #0
 80029dc:	71fb      	strb	r3, [r7, #7]
 80029de:	e007      	b.n	80029f0 <adc_compensateOffset+0x34>
		adc_sample();
 80029e0:	f000 f866 	bl	8002ab0 <adc_sample>
		//result += previousValues[SAMPLES-1];
		microDelay(100);
 80029e4:	2064      	movs	r0, #100	; 0x64
 80029e6:	f7ff f8bb 	bl	8001b60 <microDelay>
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	3301      	adds	r3, #1
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	4926      	ldr	r1, [pc, #152]	; (8002a90 <adc_compensateOffset+0xd4>)
 80029f8:	fba1 1303 	umull	r1, r3, r1, r3
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d3ed      	bcc.n	80029e0 <adc_compensateOffset+0x24>
	}

	for(uint16_t i = 0; i < offsetSamples; i++){
 8002a04:	2300      	movs	r3, #0
 8002a06:	80bb      	strh	r3, [r7, #4]
 8002a08:	e021      	b.n	8002a4e <adc_compensateOffset+0x92>
		adc_sample();
 8002a0a:	f000 f851 	bl	8002ab0 <adc_sample>
		//result += measuredValue; //previousValues[SAMPLES-1];
		result += previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
 8002a0e:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <adc_compensateOffset+0xd8>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f103 0109 	add.w	r1, r3, #9
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <adc_compensateOffset+0xdc>)
 8002a18:	fb83 2301 	smull	r2, r3, r3, r1
 8002a1c:	109a      	asrs	r2, r3, #2
 8002a1e:	17cb      	asrs	r3, r1, #31
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	1aca      	subs	r2, r1, r3
 8002a2c:	491b      	ldr	r1, [pc, #108]	; (8002a9c <adc_compensateOffset+0xe0>)
 8002a2e:	00d3      	lsls	r3, r2, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	ed93 7b00 	vldr	d7, [r3]
 8002a36:	ed97 6b02 	vldr	d6, [r7, #8]
 8002a3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a3e:	ed87 7b02 	vstr	d7, [r7, #8]
		microDelay(50);
 8002a42:	2032      	movs	r0, #50	; 0x32
 8002a44:	f7ff f88c 	bl	8001b60 <microDelay>
	for(uint16_t i = 0; i < offsetSamples; i++){
 8002a48:	88bb      	ldrh	r3, [r7, #4]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	80bb      	strh	r3, [r7, #4]
 8002a4e:	88ba      	ldrh	r2, [r7, #4]
 8002a50:	887b      	ldrh	r3, [r7, #2]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d3d9      	bcc.n	8002a0a <adc_compensateOffset+0x4e>
	}

	settings.lastOffsetValue = result / offsetSamples;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	ee07 3a90 	vmov	s15, r3
 8002a5c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002a60:	ed97 5b02 	vldr	d5, [r7, #8]
 8002a64:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <adc_compensateOffset+0xe4>)
 8002a6a:	ed83 7b06 	vstr	d7, [r3, #24]

	sprintf(uartBufferTx, "ADC offset: %.12f\n", settings.lastOffsetValue);
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <adc_compensateOffset+0xe4>)
 8002a70:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	490a      	ldr	r1, [pc, #40]	; (8002aa4 <adc_compensateOffset+0xe8>)
 8002a7a:	480b      	ldr	r0, [pc, #44]	; (8002aa8 <adc_compensateOffset+0xec>)
 8002a7c:	f01b ffec 	bl	801ea58 <siprintf>
	send_uart3(uartBufferTx);
 8002a80:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <adc_compensateOffset+0xec>)
 8002a82:	f7ff f841 	bl	8001b08 <send_uart3>


}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	cccccccd 	.word	0xcccccccd
 8002a94:	20000345 	.word	0x20000345
 8002a98:	66666667 	.word	0x66666667
 8002a9c:	2000c880 	.word	0x2000c880
 8002aa0:	20000018 	.word	0x20000018
 8002aa4:	080207c8 	.word	0x080207c8
 8002aa8:	20011a2c 	.word	0x20011a2c
 8002aac:	00000000 	.word	0x00000000

08002ab0 <adc_sample>:


}

// NEW ADC TI ADS8910 18bit, 1Msps, differencial
void adc_sample() {
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <adc_sample+0x1e0>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
	uint32_t receivedValue = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	607b      	str	r3, [r7, #4]
	isAdcDone = 0;
 8002ac0:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <adc_sample+0x1e4>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]

	// dummy data to clock data out of ADC = No operation command
	spiDataTx[0] = 0x00;	// 0000 1000
 8002ac6:	4b74      	ldr	r3, [pc, #464]	; (8002c98 <adc_sample+0x1e8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
	spiDataTx[1] = 0x00;	// 0000 0000
 8002acc:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <adc_sample+0x1e8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	705a      	strb	r2, [r3, #1]
	spiDataTx[2] = 0x00;	// 0000 0000
 8002ad2:	4b71      	ldr	r3, [pc, #452]	; (8002c98 <adc_sample+0x1e8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	709a      	strb	r2, [r3, #2]

	// starting conversion
	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_SET);
	// CONV port B pin 5
	// SET HIGH
	GPIOB->ODR |= (1<<5);
 8002ad8:	4b70      	ldr	r3, [pc, #448]	; (8002c9c <adc_sample+0x1ec>)
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	4a6f      	ldr	r2, [pc, #444]	; (8002c9c <adc_sample+0x1ec>)
 8002ade:	f043 0320 	orr.w	r3, r3, #32
 8002ae2:	6153      	str	r3, [r2, #20]
	//microDelay(1);

	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
	// CONV port B pin 5
	// SET LOW
	GPIOB->ODR &= ~(1<<5);
 8002ae4:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <adc_sample+0x1ec>)
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	4a6c      	ldr	r2, [pc, #432]	; (8002c9c <adc_sample+0x1ec>)
 8002aea:	f023 0320 	bic.w	r3, r3, #32
 8002aee:	6153      	str	r3, [r2, #20]

	// RVS port D pin 5 check for transition LOW-->HIGH
	//while( (GPIOD->IDR & 0x20) != 1);
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8002af0:	bf00      	nop
 8002af2:	2120      	movs	r1, #32
 8002af4:	486a      	ldr	r0, [pc, #424]	; (8002ca0 <adc_sample+0x1f0>)
 8002af6:	f006 fe95 	bl	8009824 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d1f8      	bne.n	8002af2 <adc_sample+0x42>
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002b00:	4b67      	ldr	r3, [pc, #412]	; (8002ca0 <adc_sample+0x1f0>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	4a66      	ldr	r2, [pc, #408]	; (8002ca0 <adc_sample+0x1f0>)
 8002b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0a:	6153      	str	r3, [r2, #20]

	//HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	4a65      	ldr	r2, [pc, #404]	; (8002ca4 <adc_sample+0x1f4>)
 8002b10:	4961      	ldr	r1, [pc, #388]	; (8002c98 <adc_sample+0x1e8>)
 8002b12:	4865      	ldr	r0, [pc, #404]	; (8002ca8 <adc_sample+0x1f8>)
 8002b14:	f00d f918 	bl	800fd48 <HAL_SPI_TransmitReceive_DMA>
	//HAL_SPI_TransmitReceive_IT(&hspi1, spiDataTx, spiDataRx, 4);
	//HAL_SPI_Receive_DMA(&hspi1, spiDataRx, 4);

	while (isWaitingForData > 0);
 8002b18:	bf00      	nop
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <adc_sample+0x1e0>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1fb      	bne.n	8002b1a <adc_sample+0x6a>

	// to CS HIGH
 	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 	// CS port D pin 6
 	// SET HIGH
 	GPIOD->ODR |= (1<<6);
 8002b22:	4b5f      	ldr	r3, [pc, #380]	; (8002ca0 <adc_sample+0x1f0>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4a5e      	ldr	r2, [pc, #376]	; (8002ca0 <adc_sample+0x1f0>)
 8002b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2c:	6153      	str	r3, [r2, #20]

	//shifting received byte data into final value
 	// ADS8690  // ADS8910
	receivedValue = (spiDataRx[2] >> 6) | (spiDataRx[1] << 2)	| (spiDataRx[0] << 10);
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <adc_sample+0x1f4>)
 8002b30:	789b      	ldrb	r3, [r3, #2]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <adc_sample+0x1f4>)
 8002b3a:	785b      	ldrb	r3, [r3, #1]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	4b58      	ldr	r3, [pc, #352]	; (8002ca4 <adc_sample+0x1f4>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	4313      	orrs	r3, r2
 8002b48:	607b      	str	r3, [r7, #4]

	measuredValue = receivedValue;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b54:	4b55      	ldr	r3, [pc, #340]	; (8002cac <adc_sample+0x1fc>)
 8002b56:	ed83 7b00 	vstr	d7, [r3]

	if(receivedValue <= 131071){
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b60:	d228      	bcs.n	8002bb4 <adc_sample+0x104>
		measuredValue = receivedValue;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b6c:	4b4f      	ldr	r3, [pc, #316]	; (8002cac <adc_sample+0x1fc>)
 8002b6e:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = (measuredValue * ADC_RESOLUTION);
 8002b72:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <adc_sample+0x1fc>)
 8002b74:	ed93 6b00 	vldr	d6, [r3]
 8002b78:	4b4d      	ldr	r3, [pc, #308]	; (8002cb0 <adc_sample+0x200>)
 8002b7a:	ed93 7b00 	vldr	d7, [r3]
 8002b7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <adc_sample+0x1fc>)
 8002b84:	ed83 7b00 	vstr	d7, [r3]
		// adding bidirectional offset value
		//measuredValue = measuredValue - (ADC_REF_VALUE * ADC_PGA*ADC_BIDIRECTIONAL);
		// shifting from mV to V value
		measuredValue /= 1000;
 8002b88:	4b48      	ldr	r3, [pc, #288]	; (8002cac <adc_sample+0x1fc>)
 8002b8a:	ed93 6b00 	vldr	d6, [r3]
 8002b8e:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002c80 <adc_sample+0x1d0>
 8002b92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b96:	4b45      	ldr	r3, [pc, #276]	; (8002cac <adc_sample+0x1fc>)
 8002b98:	ed83 7b00 	vstr	d7, [r3]
		//measuredValue *=2.186;
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 8002b9c:	4b43      	ldr	r3, [pc, #268]	; (8002cac <adc_sample+0x1fc>)
 8002b9e:	ed93 6b00 	vldr	d6, [r3]
 8002ba2:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <adc_sample+0x204>)
 8002ba4:	ed93 7b06 	vldr	d7, [r3, #24]
 8002ba8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bac:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <adc_sample+0x1fc>)
 8002bae:	ed83 7b00 	vstr	d7, [r3]
 8002bb2:	e033      	b.n	8002c1c <adc_sample+0x16c>
	}
	else{
		measuredValue = receivedValue - 0x1FFFF;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <adc_sample+0x208>)
 8002bb8:	4413      	add	r3, r2
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002bc2:	4b3a      	ldr	r3, [pc, #232]	; (8002cac <adc_sample+0x1fc>)
 8002bc4:	ed83 7b00 	vstr	d7, [r3]

		measuredValue = measuredValue * ADC_RESOLUTION; //(-ADC_REF_VALUE + temp);
 8002bc8:	4b38      	ldr	r3, [pc, #224]	; (8002cac <adc_sample+0x1fc>)
 8002bca:	ed93 6b00 	vldr	d6, [r3]
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <adc_sample+0x200>)
 8002bd0:	ed93 7b00 	vldr	d7, [r3]
 8002bd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bd8:	4b34      	ldr	r3, [pc, #208]	; (8002cac <adc_sample+0x1fc>)
 8002bda:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = measuredValue - ADC_REF_VALUE;
 8002bde:	4b33      	ldr	r3, [pc, #204]	; (8002cac <adc_sample+0x1fc>)
 8002be0:	ed93 7b00 	vldr	d7, [r3]
 8002be4:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002c88 <adc_sample+0x1d8>
 8002be8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bec:	4b2f      	ldr	r3, [pc, #188]	; (8002cac <adc_sample+0x1fc>)
 8002bee:	ed83 7b00 	vstr	d7, [r3]
		// shifting from mV to V value
		measuredValue /= 1000;
 8002bf2:	4b2e      	ldr	r3, [pc, #184]	; (8002cac <adc_sample+0x1fc>)
 8002bf4:	ed93 6b00 	vldr	d6, [r3]
 8002bf8:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002c80 <adc_sample+0x1d0>
 8002bfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <adc_sample+0x1fc>)
 8002c02:	ed83 7b00 	vstr	d7, [r3]
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <adc_sample+0x1fc>)
 8002c08:	ed93 6b00 	vldr	d6, [r3]
 8002c0c:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <adc_sample+0x204>)
 8002c0e:	ed93 7b06 	vldr	d7, [r3, #24]
 8002c12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c16:	4b25      	ldr	r3, [pc, #148]	; (8002cac <adc_sample+0x1fc>)
 8002c18:	ed83 7b00 	vstr	d7, [r3]
	}
*/

	// change range filling values
	//previousValues[SAMPLES - 1] = measuredValue;
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <adc_sample+0x20c>)
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <adc_sample+0x210>)
 8002c22:	fba3 1302 	umull	r1, r3, r3, r2
 8002c26:	08d9      	lsrs	r1, r3, #3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <adc_sample+0x1fc>)
 8002c38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c3c:	4921      	ldr	r1, [pc, #132]	; (8002cc4 <adc_sample+0x214>)
 8002c3e:	00d2      	lsls	r2, r2, #3
 8002c40:	440a      	add	r2, r1
 8002c42:	e9c2 3400 	strd	r3, r4, [r2]
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <adc_sample+0x20c>)
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <adc_sample+0x210>)
 8002c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c50:	08d9      	lsrs	r1, r3, #3
 8002c52:	460b      	mov	r3, r1
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <adc_sample+0x218>)
 8002c62:	7819      	ldrb	r1, [r3, #0]
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <adc_sample+0x21c>)
 8002c66:	5499      	strb	r1, [r3, r2]
	currentValuePosition++;
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <adc_sample+0x20c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <adc_sample+0x20c>)
 8002c72:	701a      	strb	r2, [r3, #0]


}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}
 8002c7c:	f3af 8000 	nop.w
 8002c80:	00000000 	.word	0x00000000
 8002c84:	408f4000 	.word	0x408f4000
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	40b38800 	.word	0x40b38800
 8002c90:	20000001 	.word	0x20000001
 8002c94:	20000323 	.word	0x20000323
 8002c98:	20005570 	.word	0x20005570
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40020c00 	.word	0x40020c00
 8002ca4:	2000d8d4 	.word	0x2000d8d4
 8002ca8:	20005378 	.word	0x20005378
 8002cac:	20000348 	.word	0x20000348
 8002cb0:	20000040 	.word	0x20000040
 8002cb4:	20000018 	.word	0x20000018
 8002cb8:	fffe0001 	.word	0xfffe0001
 8002cbc:	20000345 	.word	0x20000345
 8002cc0:	cccccccd 	.word	0xcccccccd
 8002cc4:	2000c880 	.word	0x2000c880
 8002cc8:	20000344 	.word	0x20000344
 8002ccc:	20007178 	.word	0x20007178

08002cd0 <adc_sample_ads8691>:


// OLD ADC TI ADS8691 18bit, 1Msps, with buffer, single ended
void adc_sample_ads8691() {
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 8002cd6:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <adc_sample_ads8691+0x160>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
	uint32_t receivedValue = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]
	isAdcDone = 0;
 8002ce0:	4b54      	ldr	r3, [pc, #336]	; (8002e34 <adc_sample_ads8691+0x164>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]

	// dummy data to clock data out of ADC = No operation command
	spiDataTx[0] = 0x00;	// 0000 1000
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <adc_sample_ads8691+0x168>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
	spiDataTx[1] = 0x00;	// 0000 0000
 8002cec:	4b52      	ldr	r3, [pc, #328]	; (8002e38 <adc_sample_ads8691+0x168>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	705a      	strb	r2, [r3, #1]
	spiDataTx[2] = 0x00;	// 0000 0000
 8002cf2:	4b51      	ldr	r3, [pc, #324]	; (8002e38 <adc_sample_ads8691+0x168>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	709a      	strb	r2, [r3, #2]
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002cf8:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	4a4f      	ldr	r2, [pc, #316]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d02:	6153      	str	r3, [r2, #20]

	// to CS HIGH
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
	// CS port D pin 6
	// SET HIGH
	GPIOD->ODR |= (1<<6);
 8002d04:	4b4d      	ldr	r3, [pc, #308]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	4a4c      	ldr	r2, [pc, #304]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0e:	6153      	str	r3, [r2, #20]

	// RVS port D pin 5 check for transition LOW-->HIGH
	//while( (GPIOD->IDR & 0x20) != 1);
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8002d10:	bf00      	nop
 8002d12:	2120      	movs	r1, #32
 8002d14:	4849      	ldr	r0, [pc, #292]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d16:	f006 fd85 	bl	8009824 <HAL_GPIO_ReadPin>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d1f8      	bne.n	8002d12 <adc_sample_ads8691+0x42>
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002d20:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	4a45      	ldr	r2, [pc, #276]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d2a:	6153      	str	r3, [r2, #20]

	//HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	4a44      	ldr	r2, [pc, #272]	; (8002e40 <adc_sample_ads8691+0x170>)
 8002d30:	4941      	ldr	r1, [pc, #260]	; (8002e38 <adc_sample_ads8691+0x168>)
 8002d32:	4844      	ldr	r0, [pc, #272]	; (8002e44 <adc_sample_ads8691+0x174>)
 8002d34:	f00d f808 	bl	800fd48 <HAL_SPI_TransmitReceive_DMA>
	//HAL_SPI_TransmitReceive_IT(&hspi1, spiDataTx, spiDataRx, 4);
	//HAL_SPI_Receive_DMA(&hspi1, spiDataRx, 4);

	while (isWaitingForData > 0);
 8002d38:	bf00      	nop
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <adc_sample_ads8691+0x160>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1fb      	bne.n	8002d3a <adc_sample_ads8691+0x6a>

	// to CS HIGH
 	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 	// CS port D pin 6
 	// SET HIGH
 	GPIOD->ODR |= (1<<6);
 8002d42:	4b3e      	ldr	r3, [pc, #248]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4a3d      	ldr	r2, [pc, #244]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d4c:	6153      	str	r3, [r2, #20]

	//shifting received byte data into final value
 	// ADS8690  // ADS8910
	receivedValue = (spiDataRx[2] >> 6) | (spiDataRx[1] << 2)	| (spiDataRx[0] << 10);
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	; (8002e40 <adc_sample_ads8691+0x170>)
 8002d50:	789b      	ldrb	r3, [r3, #2]
 8002d52:	099b      	lsrs	r3, r3, #6
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <adc_sample_ads8691+0x170>)
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <adc_sample_ads8691+0x170>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	029b      	lsls	r3, r3, #10
 8002d66:	4313      	orrs	r3, r2
 8002d68:	607b      	str	r3, [r7, #4]

	measuredValue = receivedValue;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d76:	ed83 7b00 	vstr	d7, [r3]
	//measuredValue = (measuredValue * (0.09375));
	measuredValue = (measuredValue * ADC_RESOLUTION);
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d7c:	ed93 6b00 	vldr	d6, [r3]
 8002d80:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <adc_sample_ads8691+0x17c>)
 8002d82:	ed93 7b00 	vldr	d7, [r3]
 8002d86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d8c:	ed83 7b00 	vstr	d7, [r3]
	//measuredValue = ( measuredValue * ( (ADC_REF_VALUE*ADC_PGA*2) / ADC_SCALE ) );

	// adding bidirectional offset value
	measuredValue = measuredValue - (ADC_REF_VALUE * ADC_PGA*ADC_BIDIRECTIONAL);
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d96:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d98:	e9c2 3400 	strd	r3, r4, [r2]
	// shifting from mV to V value
	measuredValue /= 1000;
 8002d9c:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d9e:	ed93 6b00 	vldr	d6, [r3]
 8002da2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002e28 <adc_sample_ads8691+0x158>
 8002da6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002daa:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002dac:	ed83 7b00 	vstr	d7, [r3]
	// adding measured DC offset value
	measuredValue -= settings.lastOffsetValue;
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002db2:	ed93 6b00 	vldr	d6, [r3]
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <adc_sample_ads8691+0x180>)
 8002db8:	ed93 7b06 	vldr	d7, [r3, #24]
 8002dbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002dc2:	ed83 7b00 	vstr	d7, [r3]
	}
*/

	// change range filling values
	//previousValues[SAMPLES - 1] = measuredValue;
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <adc_sample_ads8691+0x184>)
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <adc_sample_ads8691+0x188>)
 8002dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd0:	08d9      	lsrs	r1, r3, #3
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002de2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002de6:	491d      	ldr	r1, [pc, #116]	; (8002e5c <adc_sample_ads8691+0x18c>)
 8002de8:	00d2      	lsls	r2, r2, #3
 8002dea:	440a      	add	r2, r1
 8002dec:	e9c2 3400 	strd	r3, r4, [r2]
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <adc_sample_ads8691+0x184>)
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <adc_sample_ads8691+0x188>)
 8002df6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfa:	08d9      	lsrs	r1, r3, #3
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <adc_sample_ads8691+0x190>)
 8002e0c:	7819      	ldrb	r1, [r3, #0]
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <adc_sample_ads8691+0x194>)
 8002e10:	5499      	strb	r1, [r3, r2]
	currentValuePosition++;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <adc_sample_ads8691+0x184>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <adc_sample_ads8691+0x184>)
 8002e1c:	701a      	strb	r2, [r3, #0]


}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}
 8002e26:	bf00      	nop
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	408f4000 	.word	0x408f4000
 8002e30:	20000001 	.word	0x20000001
 8002e34:	20000323 	.word	0x20000323
 8002e38:	20005570 	.word	0x20005570
 8002e3c:	40020c00 	.word	0x40020c00
 8002e40:	2000d8d4 	.word	0x2000d8d4
 8002e44:	20005378 	.word	0x20005378
 8002e48:	20000348 	.word	0x20000348
 8002e4c:	20000040 	.word	0x20000040
 8002e50:	20000018 	.word	0x20000018
 8002e54:	20000345 	.word	0x20000345
 8002e58:	cccccccd 	.word	0xcccccccd
 8002e5c:	2000c880 	.word	0x2000c880
 8002e60:	20000344 	.word	0x20000344
 8002e64:	20007178 	.word	0x20007178

08002e68 <ranges>:

void ranges() {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
		//check_range_linear(previousValues[SAMPLES - 1], b);
		check_range_linear(previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES], b);
	}
	else{

		if(rangeMode == 4){
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <ranges+0xe0>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11a      	bne.n	8002eaa <ranges+0x42>
			change_range((float)previousValues[ (currentValuePosition + SAMPLES - 1)%SAMPLES]);
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <ranges+0xe4>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f103 0109 	add.w	r1, r3, #9
 8002e7c:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <ranges+0xe8>)
 8002e7e:	fb83 2301 	smull	r2, r3, r3, r1
 8002e82:	109a      	asrs	r2, r3, #2
 8002e84:	17cb      	asrs	r3, r1, #31
 8002e86:	1ad2      	subs	r2, r2, r3
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	1aca      	subs	r2, r1, r3
 8002e92:	4930      	ldr	r1, [pc, #192]	; (8002f54 <ranges+0xec>)
 8002e94:	00d3      	lsls	r3, r2, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	ed93 7b00 	vldr	d7, [r3]
 8002e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea4:	f7ff fc74 	bl	8002790 <change_range>


	//change_range((float)previousValues[ (currentValuePosition + SAMPLES - 1)%SAMPLES]);


}
 8002ea8:	e04c      	b.n	8002f44 <ranges+0xdc>
		else if(rangeMode == 0){
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <ranges+0xe0>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <ranges+0x64>
			currentRange = 0;
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <ranges+0xf0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
			setRangeNA(1);
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7ff fbe9 	bl	8002690 <setRangeNA>
			setRangeUA(0);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7ff fc10 	bl	80026e4 <setRangeUA>
			setRangeMA(0);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7ff fc37 	bl	8002738 <setRangeMA>
}
 8002eca:	e03b      	b.n	8002f44 <ranges+0xdc>
		else if(rangeMode == 1){
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <ranges+0xe0>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10c      	bne.n	8002eee <ranges+0x86>
			currentRange = 1;
 8002ed4:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <ranges+0xf0>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
			setRangeNA(0);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7ff fbd8 	bl	8002690 <setRangeNA>
			setRangeUA(1);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7ff fbff 	bl	80026e4 <setRangeUA>
			setRangeMA(0);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7ff fc26 	bl	8002738 <setRangeMA>
}
 8002eec:	e02a      	b.n	8002f44 <ranges+0xdc>
		else if(rangeMode == 2){
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <ranges+0xe0>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d10c      	bne.n	8002f10 <ranges+0xa8>
			currentRange = 2;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <ranges+0xf0>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
			setRangeNA(0);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7ff fbc7 	bl	8002690 <setRangeNA>
			setRangeUA(0);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7ff fbee 	bl	80026e4 <setRangeUA>
			setRangeMA(1);
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f7ff fc15 	bl	8002738 <setRangeMA>
}
 8002f0e:	e019      	b.n	8002f44 <ranges+0xdc>
			change_range((float)previousValues[ (currentValuePosition + SAMPLES - 1)%SAMPLES]);
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <ranges+0xe4>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f103 0109 	add.w	r1, r3, #9
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <ranges+0xe8>)
 8002f1a:	fb83 2301 	smull	r2, r3, r3, r1
 8002f1e:	109a      	asrs	r2, r3, #2
 8002f20:	17cb      	asrs	r3, r1, #31
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	1aca      	subs	r2, r1, r3
 8002f2e:	4909      	ldr	r1, [pc, #36]	; (8002f54 <ranges+0xec>)
 8002f30:	00d3      	lsls	r3, r2, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	ed93 7b00 	vldr	d7, [r3]
 8002f38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	f7ff fc26 	bl	8002790 <change_range>
}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	2000000c 	.word	0x2000000c
 8002f4c:	20000345 	.word	0x20000345
 8002f50:	66666667 	.word	0x66666667
 8002f54:	2000c880 	.word	0x2000c880
 8002f58:	20000344 	.word	0x20000344
 8002f5c:	00000000 	.word	0x00000000

08002f60 <previousValueToCurrent>:

// convert measured voltage and its range to final current value
double previousValueToCurrent (uint8_t index){
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]

	// nA
	if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 0){
 8002f6a:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <previousValueToCurrent+0x170>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f103 020a 	add.w	r2, r3, #10
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	1ad1      	subs	r1, r2, r3
 8002f76:	4b57      	ldr	r3, [pc, #348]	; (80030d4 <previousValueToCurrent+0x174>)
 8002f78:	fb83 2301 	smull	r2, r3, r3, r1
 8002f7c:	109a      	asrs	r2, r3, #2
 8002f7e:	17cb      	asrs	r3, r1, #31
 8002f80:	1ad2      	subs	r2, r2, r3
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	1aca      	subs	r2, r1, r3
 8002f8c:	4b52      	ldr	r3, [pc, #328]	; (80030d8 <previousValueToCurrent+0x178>)
 8002f8e:	5c9b      	ldrb	r3, [r3, r2]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11a      	bne.n	8002fca <previousValueToCurrent+0x6a>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000000);
 8002f94:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <previousValueToCurrent+0x170>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	f103 020a 	add.w	r2, r3, #10
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	1ad1      	subs	r1, r2, r3
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <previousValueToCurrent+0x174>)
 8002fa2:	fb83 2301 	smull	r2, r3, r3, r1
 8002fa6:	109a      	asrs	r2, r3, #2
 8002fa8:	17cb      	asrs	r3, r1, #31
 8002faa:	1ad2      	subs	r2, r2, r3
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	1aca      	subs	r2, r1, r3
 8002fb6:	4949      	ldr	r1, [pc, #292]	; (80030dc <previousValueToCurrent+0x17c>)
 8002fb8:	00d3      	lsls	r3, r2, #3
 8002fba:	440b      	add	r3, r1
 8002fbc:	ed93 6b00 	vldr	d6, [r3]
 8002fc0:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 80030c0 <previousValueToCurrent+0x160>
 8002fc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002fc8:	e071      	b.n	80030ae <previousValueToCurrent+0x14e>
	}
	// uA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 1){
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <previousValueToCurrent+0x170>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	f103 020a 	add.w	r2, r3, #10
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	1ad1      	subs	r1, r2, r3
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <previousValueToCurrent+0x174>)
 8002fd8:	fb83 2301 	smull	r2, r3, r3, r1
 8002fdc:	109a      	asrs	r2, r3, #2
 8002fde:	17cb      	asrs	r3, r1, #31
 8002fe0:	1ad2      	subs	r2, r2, r3
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	1aca      	subs	r2, r1, r3
 8002fec:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <previousValueToCurrent+0x178>)
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d11a      	bne.n	800302a <previousValueToCurrent+0xca>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000);
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <previousValueToCurrent+0x170>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	f103 020a 	add.w	r2, r3, #10
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	1ad1      	subs	r1, r2, r3
 8003000:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <previousValueToCurrent+0x174>)
 8003002:	fb83 2301 	smull	r2, r3, r3, r1
 8003006:	109a      	asrs	r2, r3, #2
 8003008:	17cb      	asrs	r3, r1, #31
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	1aca      	subs	r2, r1, r3
 8003016:	4931      	ldr	r1, [pc, #196]	; (80030dc <previousValueToCurrent+0x17c>)
 8003018:	00d3      	lsls	r3, r2, #3
 800301a:	440b      	add	r3, r1
 800301c:	ed93 6b00 	vldr	d6, [r3]
 8003020:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80030c8 <previousValueToCurrent+0x168>
 8003024:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003028:	e041      	b.n	80030ae <previousValueToCurrent+0x14e>
	}
	// mA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 2){
 800302a:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <previousValueToCurrent+0x170>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	f103 020a 	add.w	r2, r3, #10
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	1ad1      	subs	r1, r2, r3
 8003036:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <previousValueToCurrent+0x174>)
 8003038:	fb83 2301 	smull	r2, r3, r3, r1
 800303c:	109a      	asrs	r2, r3, #2
 800303e:	17cb      	asrs	r3, r1, #31
 8003040:	1ad2      	subs	r2, r2, r3
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	1aca      	subs	r2, r1, r3
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <previousValueToCurrent+0x178>)
 800304e:	5c9b      	ldrb	r3, [r3, r2]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d116      	bne.n	8003082 <previousValueToCurrent+0x122>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 8003054:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <previousValueToCurrent+0x170>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	f103 020a 	add.w	r2, r3, #10
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	1ad1      	subs	r1, r2, r3
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <previousValueToCurrent+0x174>)
 8003062:	fb83 2301 	smull	r2, r3, r3, r1
 8003066:	109a      	asrs	r2, r3, #2
 8003068:	17cb      	asrs	r3, r1, #31
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	1aca      	subs	r2, r1, r3
 8003076:	4919      	ldr	r1, [pc, #100]	; (80030dc <previousValueToCurrent+0x17c>)
 8003078:	00d3      	lsls	r3, r2, #3
 800307a:	440b      	add	r3, r1
 800307c:	ed93 7b00 	vldr	d7, [r3]
 8003080:	e015      	b.n	80030ae <previousValueToCurrent+0x14e>
	}
	else{
		// leaving as is indicating error during operation
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <previousValueToCurrent+0x170>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	f103 020a 	add.w	r2, r3, #10
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	1ad1      	subs	r1, r2, r3
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <previousValueToCurrent+0x174>)
 8003090:	fb83 2301 	smull	r2, r3, r3, r1
 8003094:	109a      	asrs	r2, r3, #2
 8003096:	17cb      	asrs	r3, r1, #31
 8003098:	1ad2      	subs	r2, r2, r3
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	1aca      	subs	r2, r1, r3
 80030a4:	490d      	ldr	r1, [pc, #52]	; (80030dc <previousValueToCurrent+0x17c>)
 80030a6:	00d3      	lsls	r3, r2, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	ed93 7b00 	vldr	d7, [r3]
	}

	return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);


}
 80030ae:	eeb0 0b47 	vmov.f64	d0, d7
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	f3af 8000 	nop.w
 80030c0:	00000000 	.word	0x00000000
 80030c4:	412e8480 	.word	0x412e8480
 80030c8:	00000000 	.word	0x00000000
 80030cc:	408f4000 	.word	0x408f4000
 80030d0:	20000345 	.word	0x20000345
 80030d4:	66666667 	.word	0x66666667
 80030d8:	20007178 	.word	0x20007178
 80030dc:	2000c880 	.word	0x2000c880

080030e0 <averaging>:

double averaging (){
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0

	double resultValue = 0;
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if(settings.isAveraging == 1){
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <averaging+0xa4>)
 80030f4:	7b1b      	ldrb	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d136      	bne.n	8003168 <averaging+0x88>

		if(settings.samplingInterval >= 100){
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <averaging+0xa4>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b63      	cmp	r3, #99	; 0x63
 8003100:	d916      	bls.n	8003130 <averaging+0x50>

			for (uint8_t i = 1;  i < 4; i++)
 8003102:	2301      	movs	r3, #1
 8003104:	71fb      	strb	r3, [r7, #7]
 8003106:	e008      	b.n	800311a <averaging+0x3a>
				//resultValue += previousValues[SAMPLES - i];
				//resultValue += previousValues[(currentValuePosition + SAMPLES - i)%SAMPLES];
				resultValue = previousValueToCurrent((uint8_t)i);
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff28 	bl	8002f60 <previousValueToCurrent>
 8003110:	ed87 0b02 	vstr	d0, [r7, #8]
			for (uint8_t i = 1;  i < 4; i++)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	3301      	adds	r3, #1
 8003118:	71fb      	strb	r3, [r7, #7]
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d9f3      	bls.n	8003108 <averaging+0x28>

			resultValue /= 3;
 8003120:	ed97 6b02 	vldr	d6, [r7, #8]
 8003124:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003128:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800312c:	ed87 7b02 	vstr	d7, [r7, #8]

		}
		if(settings.samplingInterval >= 200){
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <averaging+0xa4>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2bc7      	cmp	r3, #199	; 0xc7
 8003136:	d91c      	bls.n	8003172 <averaging+0x92>

			for (uint8_t i = 1;  i < 7; i++)
 8003138:	2301      	movs	r3, #1
 800313a:	71bb      	strb	r3, [r7, #6]
 800313c:	e008      	b.n	8003150 <averaging+0x70>
				//resultValue += previousValues[SAMPLES - i];
				//resultValue += previousValues[(currentValuePosition + SAMPLES - i)%SAMPLES];
				resultValue = previousValueToCurrent((uint8_t)i);
 800313e:	79bb      	ldrb	r3, [r7, #6]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff0d 	bl	8002f60 <previousValueToCurrent>
 8003146:	ed87 0b02 	vstr	d0, [r7, #8]
			for (uint8_t i = 1;  i < 7; i++)
 800314a:	79bb      	ldrb	r3, [r7, #6]
 800314c:	3301      	adds	r3, #1
 800314e:	71bb      	strb	r3, [r7, #6]
 8003150:	79bb      	ldrb	r3, [r7, #6]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d9f3      	bls.n	800313e <averaging+0x5e>

			resultValue /= 6;
 8003156:	ed97 6b02 	vldr	d6, [r7, #8]
 800315a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800315e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003162:	ed87 7b02 	vstr	d7, [r7, #8]
 8003166:	e004      	b.n	8003172 <averaging+0x92>
	}
	else{

		//resultValue = previousValues[SAMPLES-1];
		//resultValue = previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
		resultValue = previousValueToCurrent((uint8_t)1);
 8003168:	2001      	movs	r0, #1
 800316a:	f7ff fef9 	bl	8002f60 <previousValueToCurrent>
 800316e:	ed87 0b02 	vstr	d0, [r7, #8]
	}


	return resultValue;
 8003172:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003176:	ec44 3b17 	vmov	d7, r3, r4



}
 800317a:	eeb0 0b47 	vmov.f64	d0, d7
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	20000018 	.word	0x20000018

08003188 <triggerMenu>:


// program will check every measuring period if sample value is greater or equal to trigger level
// and also if trigger menu is activated plus if it was activated before --> if all check in it then starts measurement
// TODO - possibly implement HW trigger (ADC8691) allows settings High and Low + hysteresis values and send interrupt when exceeding values
void triggerMenu(){
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0

	//if(previousValues[SAMPLES-1] >= triggerLevel && isTriggered == 0 && isTriggerActive == 1){
	if(averaging() >= settings.triggerLevel && isTriggered == 0 && settings.isTriggerActive == 1){
 800318c:	f7ff ffa8 	bl	80030e0 <averaging>
 8003190:	eeb0 6b40 	vmov.f64	d6, d0
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <triggerMenu+0x40>)
 8003196:	ed93 7b04 	vldr	d7, [r3, #16]
 800319a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a2:	da00      	bge.n	80031a6 <triggerMenu+0x1e>
		isMeasuring = 1;

	}


}
 80031a4:	e00d      	b.n	80031c2 <triggerMenu+0x3a>
	if(averaging() >= settings.triggerLevel && isTriggered == 0 && settings.isTriggerActive == 1){
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <triggerMenu+0x44>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <triggerMenu+0x3a>
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <triggerMenu+0x40>)
 80031b0:	7b5b      	ldrb	r3, [r3, #13]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d105      	bne.n	80031c2 <triggerMenu+0x3a>
		isTriggered = 1;
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <triggerMenu+0x44>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
		isMeasuring = 1;
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <triggerMenu+0x48>)
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000018 	.word	0x20000018
 80031cc:	20000314 	.word	0x20000314
 80031d0:	20000322 	.word	0x20000322

080031d4 <decimalToHex>:

// convert 1 Byte decimal value to 1 byte hex value
uint8_t decimalToHex(uint8_t decimal){
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]

	uint8_t highValue = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
	uint8_t lowValue = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73bb      	strb	r3, [r7, #14]
	uint8_t result = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	737b      	strb	r3, [r7, #13]

	lowValue = decimal%16;
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	73bb      	strb	r3, [r7, #14]

	while(decimal >=16){
 80031f2:	e005      	b.n	8003200 <decimalToHex+0x2c>
		highValue++;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	3301      	adds	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
		decimal -=16;
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	3b10      	subs	r3, #16
 80031fe:	71fb      	strb	r3, [r7, #7]
	while(decimal >=16){
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d8f6      	bhi.n	80031f4 <decimalToHex+0x20>
	}

	result = lowValue | highValue << 4;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	b25a      	sxtb	r2, r3
 800320c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003210:	4313      	orrs	r3, r2
 8003212:	b25b      	sxtb	r3, r3
 8003214:	737b      	strb	r3, [r7, #13]

	return result;
 8003216:	7b7b      	ldrb	r3, [r7, #13]


}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <convertInputToInt>:
	return 999;


}*/

uint16_t convertInputToInt (uint8_t expectedLength, uint8_t *inputWord){
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	71fb      	strb	r3, [r7, #7]

	uint8_t inputLen = strlen(inputWord);
 8003230:	6838      	ldr	r0, [r7, #0]
 8003232:	f7fd f80f 	bl	8000254 <strlen>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]

	if (expectedLength + 2 >= inputLen) {
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	429a      	cmp	r2, r3
 8003242:	db05      	blt.n	8003250 <convertInputToInt+0x2c>
		return atoi(inputWord);
 8003244:	6838      	ldr	r0, [r7, #0]
 8003246:	f01a fec3 	bl	801dfd0 <atoi>
 800324a:	4603      	mov	r3, r0
 800324c:	b29b      	uxth	r3, r3
 800324e:	e001      	b.n	8003254 <convertInputToInt+0x30>
	} else {
		//send_uart("\nERR-Command length mismatch\n");
		return 999;
 8003250:	f240 33e7 	movw	r3, #999	; 0x3e7

	return 999;



}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <flushUart>:



}*/

void flushUart(){
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0

	uint8_t dummy = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	71fb      	strb	r3, [r7, #7]

	while(UART_RX_AVAILABLE_BYTE() > 0)
 8003266:	e004      	b.n	8003272 <flushUart+0x16>
		UART_RX_Read(&dummy, 1);
 8003268:	1dfb      	adds	r3, r7, #7
 800326a:	2101      	movs	r1, #1
 800326c:	4618      	mov	r0, r3
 800326e:	f004 ff41 	bl	80080f4 <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8003272:	f004 ff53 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f5      	bne.n	8003268 <flushUart+0xc>

}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <printSettingsValues>:

void printSettingsValues(){
 8003284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003286:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 800328a:	af0e      	add	r7, sp, #56	; 0x38

	//send_uart("\nSettings\n");
	uint8_t txBuffer [1024];
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
			" Trigger level [A]: %1.12f\n Offset value [mV]: %1.12f\n Power source - Voltage [mV]: %d\n Power source - Current limit [mA]: %d\n Power source enabled: %d\n Power source enable mode: %d\n",
			settings.isLoggingToConsole,
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <printSettingsValues+0xb0>)
 800328e:	781b      	ldrb	r3, [r3, #0]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8003290:	469c      	mov	ip, r3
			settings.isLoggingToSD,
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <printSettingsValues+0xb0>)
 8003294:	785b      	ldrb	r3, [r3, #1]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8003296:	469e      	mov	lr, r3
			settings.isLoggingToUSB,
 8003298:	4b26      	ldr	r3, [pc, #152]	; (8003334 <printSettingsValues+0xb0>)
 800329a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 800329e:	61fb      	str	r3, [r7, #28]
			settings.isLoggingToEthernet,
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <printSettingsValues+0xb0>)
 80032a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <printSettingsValues+0xb0>)
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	617a      	str	r2, [r7, #20]
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <printSettingsValues+0xb0>)
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	6139      	str	r1, [r7, #16]
			settings.measuringInterval,
			settings.samplingInterval,
			settings.isAveraging,
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <printSettingsValues+0xb0>)
 80032b6:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032b8:	60fb      	str	r3, [r7, #12]
			settings.isTriggerActive,
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <printSettingsValues+0xb0>)
 80032bc:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <printSettingsValues+0xb0>)
 80032c2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <printSettingsValues+0xb0>)
 80032c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
			settings.triggerLevel,
			settings.lastOffsetValue,
			settings.powerSourceVoltage,
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <printSettingsValues+0xb0>)
 80032ce:	8c1b      	ldrh	r3, [r3, #32]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032d0:	607b      	str	r3, [r7, #4]
			settings.powerSourceCurrent,
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <printSettingsValues+0xb0>)
 80032d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032d6:	603b      	str	r3, [r7, #0]
			settings.powerSourceEnable,
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <printSettingsValues+0xb0>)
 80032da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032de:	461e      	mov	r6, r3
			settings.powerSourceEnableMode);
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <printSettingsValues+0xb0>)
 80032e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032e6:	f107 0020 	add.w	r0, r7, #32
 80032ea:	930d      	str	r3, [sp, #52]	; 0x34
 80032ec:	960c      	str	r6, [sp, #48]	; 0x30
 80032ee:	683e      	ldr	r6, [r7, #0]
 80032f0:	960b      	str	r6, [sp, #44]	; 0x2c
 80032f2:	687e      	ldr	r6, [r7, #4]
 80032f4:	960a      	str	r6, [sp, #40]	; 0x28
 80032f6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80032fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80032fe:	68bc      	ldr	r4, [r7, #8]
 8003300:	9405      	str	r4, [sp, #20]
 8003302:	68fc      	ldr	r4, [r7, #12]
 8003304:	9404      	str	r4, [sp, #16]
 8003306:	6939      	ldr	r1, [r7, #16]
 8003308:	9103      	str	r1, [sp, #12]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	9202      	str	r2, [sp, #8]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	9201      	str	r2, [sp, #4]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	4673      	mov	r3, lr
 8003318:	4662      	mov	r2, ip
 800331a:	4907      	ldr	r1, [pc, #28]	; (8003338 <printSettingsValues+0xb4>)
 800331c:	f01b fb9c 	bl	801ea58 <siprintf>
	send_uart3(txBuffer);
 8003320:	f107 0320 	add.w	r3, r7, #32
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fbef 	bl	8001b08 <send_uart3>



}
 800332a:	bf00      	nop
 800332c:	f207 4724 	addw	r7, r7, #1060	; 0x424
 8003330:	46bd      	mov	sp, r7
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003334:	20000018 	.word	0x20000018
 8003338:	080207dc 	.word	0x080207dc

0800333c <printLastMeasuredValues>:


void printLastMeasuredValues(){
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b09d      	sub	sp, #116	; 0x74
 8003340:	af02      	add	r7, sp, #8

	uint8_t txBuffer [100];

	send_uart3("\nLast measured values\n");
 8003342:	481a      	ldr	r0, [pc, #104]	; (80033ac <printLastMeasuredValues+0x70>)
 8003344:	f7fe fbe0 	bl	8001b08 <send_uart3>
	sprintf(txBuffer, "Buffer contains: %d samples\n", SAMPLES);
 8003348:	463b      	mov	r3, r7
 800334a:	220a      	movs	r2, #10
 800334c:	4918      	ldr	r1, [pc, #96]	; (80033b0 <printLastMeasuredValues+0x74>)
 800334e:	4618      	mov	r0, r3
 8003350:	f01b fb82 	bl	801ea58 <siprintf>
	send_uart3(txBuffer);
 8003354:	463b      	mov	r3, r7
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fbd6 	bl	8001b08 <send_uart3>

	for(uint8_t i = SAMPLES; i > 0; i--){
 800335c:	230a      	movs	r3, #10
 800335e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003362:	e01b      	b.n	800339c <printLastMeasuredValues+0x60>
		sprintf(txBuffer,"Measured value %3d [A]: %1.12f\n", (i+SAMPLES-1%SAMPLES), previousValueToCurrent(i));
 8003364:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003368:	f103 0409 	add.w	r4, r3, #9
 800336c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fdf5 	bl	8002f60 <previousValueToCurrent>
 8003376:	eeb0 7b40 	vmov.f64	d7, d0
 800337a:	463b      	mov	r3, r7
 800337c:	ed8d 7b00 	vstr	d7, [sp]
 8003380:	4622      	mov	r2, r4
 8003382:	490c      	ldr	r1, [pc, #48]	; (80033b4 <printLastMeasuredValues+0x78>)
 8003384:	4618      	mov	r0, r3
 8003386:	f01b fb67 	bl	801ea58 <siprintf>
		send_uart3(txBuffer);
 800338a:	463b      	mov	r3, r7
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe fbbb 	bl	8001b08 <send_uart3>
	for(uint8_t i = SAMPLES; i > 0; i--){
 8003392:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003396:	3b01      	subs	r3, #1
 8003398:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800339c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1df      	bne.n	8003364 <printLastMeasuredValues+0x28>


	}
}
 80033a4:	bf00      	nop
 80033a6:	376c      	adds	r7, #108	; 0x6c
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	08020980 	.word	0x08020980
 80033b0:	08020998 	.word	0x08020998
 80033b4:	080209b8 	.word	0x080209b8

080033b8 <printCurrentTimeDate>:

void printCurrentTimeDate(){
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b0c5      	sub	sp, #276	; 0x114
 80033bc:	af04      	add	r7, sp, #16

	uint8_t txBuffer [250];

	/* Get the RTC current Time and Date */
	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80033be:	2200      	movs	r2, #0
 80033c0:	4917      	ldr	r1, [pc, #92]	; (8003420 <printCurrentTimeDate+0x68>)
 80033c2:	4818      	ldr	r0, [pc, #96]	; (8003424 <printCurrentTimeDate+0x6c>)
 80033c4:	f00a f9f0 	bl	800d7a8 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80033c8:	2200      	movs	r2, #0
 80033ca:	4917      	ldr	r1, [pc, #92]	; (8003428 <printCurrentTimeDate+0x70>)
 80033cc:	4815      	ldr	r0, [pc, #84]	; (8003424 <printCurrentTimeDate+0x6c>)
 80033ce:	f00a faf1 	bl	800d9b4 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	/* Display date Format: dd-mm-yy */
	sprintf(txBuffer,"Time [hh:mm:ss] and Date [dd-mm-yy]\n %02d:%02d:%02d_%02d-%02d-%2d\n",Time.Hours, Time.Minutes, Time.Seconds, Date.Date, Date.Month, 2000 + Date.Year);
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <printCurrentTimeDate+0x68>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461d      	mov	r5, r3
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <printCurrentTimeDate+0x68>)
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	461e      	mov	r6, r3
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <printCurrentTimeDate+0x68>)
 80033e0:	789b      	ldrb	r3, [r3, #2]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <printCurrentTimeDate+0x70>)
 80033e6:	789b      	ldrb	r3, [r3, #2]
 80033e8:	4619      	mov	r1, r3
 80033ea:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <printCurrentTimeDate+0x70>)
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	461c      	mov	r4, r3
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <printCurrentTimeDate+0x70>)
 80033f2:	78db      	ldrb	r3, [r3, #3]
 80033f4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80033f8:	1d38      	adds	r0, r7, #4
 80033fa:	9303      	str	r3, [sp, #12]
 80033fc:	9402      	str	r4, [sp, #8]
 80033fe:	9101      	str	r1, [sp, #4]
 8003400:	9200      	str	r2, [sp, #0]
 8003402:	4633      	mov	r3, r6
 8003404:	462a      	mov	r2, r5
 8003406:	4909      	ldr	r1, [pc, #36]	; (800342c <printCurrentTimeDate+0x74>)
 8003408:	f01b fb26 	bl	801ea58 <siprintf>

	send_uart3(txBuffer);
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fb7a 	bl	8001b08 <send_uart3>

}
 8003414:	bf00      	nop
 8003416:	f507 7782 	add.w	r7, r7, #260	; 0x104
 800341a:	46bd      	mov	sp, r7
 800341c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800341e:	bf00      	nop
 8003420:	20008804 	.word	0x20008804
 8003424:	20003000 	.word	0x20003000
 8003428:	20006e60 	.word	0x20006e60
 800342c:	080209d8 	.word	0x080209d8

08003430 <getConsoleInput>:

}*/

// function to read defined number of chars from uart ring buffer
// if timeout value will be 0 then it will act as blocking function waiting for atleast 1 char otherwise it will wait for defined number of chars or timeout
uint8_t getConsoleInput(uint8_t *buffer, uint8_t commandLength, uint32_t timeoutValue){
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	460b      	mov	r3, r1
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	72fb      	strb	r3, [r7, #11]

	// set flags
	//isWaitingForData = 1;
	uint32_t consoleInputTime = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
	// reset timer
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003442:	4b3c      	ldr	r3, [pc, #240]	; (8003534 <getConsoleInput+0x104>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
	// null buffer
	for(uint8_t i = 0; i < 10; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e007      	b.n	8003460 <getConsoleInput+0x30>
		buffer[i] = 0;
 8003450:	7ffb      	ldrb	r3, [r7, #31]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 10; i++)
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	3301      	adds	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	7ffb      	ldrb	r3, [r7, #31]
 8003462:	2b09      	cmp	r3, #9
 8003464:	d9f4      	bls.n	8003450 <getConsoleInput+0x20>
	// blocking and timeout
	if(timeoutValue > 1){
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d929      	bls.n	80034c0 <getConsoleInput+0x90>

		while (UART_RX_AVAILABLE_BYTE() < 1	&& __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue);
 800346c:	bf00      	nop
 800346e:	f004 fe55 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <getConsoleInput+0x54>
 8003478:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <getConsoleInput+0x104>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d8f4      	bhi.n	800346e <getConsoleInput+0x3e>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8003484:	f004 fe4a 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 8003488:	4603      	mov	r3, r0
 800348a:	757b      	strb	r3, [r7, #21]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 800348c:	4b29      	ldr	r3, [pc, #164]	; (8003534 <getConsoleInput+0x104>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	61bb      	str	r3, [r7, #24]

		UART_RX_Read(buffer, commandLength + 2);
 8003494:	7afb      	ldrb	r3, [r7, #11]
 8003496:	3302      	adds	r3, #2
 8003498:	b2db      	uxtb	r3, r3
 800349a:	4619      	mov	r1, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f004 fe29 	bl	80080f4 <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 80034a2:	f7ff fedb 	bl	800325c <flushUart>
		//while(isWaitingForData == 1 && __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue );

		//consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);

		// timeout report
		if (UART_RX_AVAILABLE_BYTE() < 1 || consoleInputTime > timeoutValue) {
 80034a6:	f004 fe39 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <getConsoleInput+0x88>
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d901      	bls.n	80034bc <getConsoleInput+0x8c>
			return 99;
 80034b8:	2363      	movs	r3, #99	; 0x63
 80034ba:	e036      	b.n	800352a <getConsoleInput+0xfa>
		}

		return 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	e034      	b.n	800352a <getConsoleInput+0xfa>

		// blocking, no timeout
	} else if(timeoutValue == 1) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d118      	bne.n	80034f8 <getConsoleInput+0xc8>
		 return 99;
		 }

		 return 0;
		 */
		while(UART_RX_AVAILABLE_BYTE() < 1);
 80034c6:	bf00      	nop
 80034c8:	f004 fe28 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0fa      	beq.n	80034c8 <getConsoleInput+0x98>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80034d2:	f004 fe23 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75bb      	strb	r3, [r7, #22]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <getConsoleInput+0x104>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	61bb      	str	r3, [r7, #24]
		UART_RX_Read(buffer, commandLength + 2);
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	3302      	adds	r3, #2
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f004 fe02 	bl	80080f4 <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 80034f0:	f7ff feb4 	bl	800325c <flushUart>

		return 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e018      	b.n	800352a <getConsoleInput+0xfa>


	}
	// non blocking, no timeout
	else{
		if (UART_RX_AVAILABLE_BYTE() > 0) {
 80034f8:	f004 fe10 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <getConsoleInput+0xf8>
			uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8003502:	f004 fe0b 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 8003506:	4603      	mov	r3, r0
 8003508:	75fb      	strb	r3, [r7, #23]
			//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
			consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <getConsoleInput+0x104>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	61bb      	str	r3, [r7, #24]

			UART_RX_Read(buffer, commandLength + 2);
 8003512:	7afb      	ldrb	r3, [r7, #11]
 8003514:	3302      	adds	r3, #2
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4619      	mov	r1, r3
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f004 fdea 	bl	80080f4 <UART_RX_Read>
			//send_uart(dataToRead);
			flushUart();
 8003520:	f7ff fe9c 	bl	800325c <flushUart>

		} else
			return 99;

		return 0;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <getConsoleInput+0xfa>
			return 99;
 8003528:	2363      	movs	r3, #99	; 0x63
	}

	return 0;


}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	2000d8d8 	.word	0x2000d8d8

08003538 <consoleMeasuringInterface>:
*		[206] *Set trigger threshold
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

void consoleMeasuringInterface(){
 8003538:	b580      	push	{r7, lr}
 800353a:	b08e      	sub	sp, #56	; 0x38
 800353c:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nMeasuring settings menu\n[201] Show measuring settings menu\n[202] Set measuring period\n[203] Set sampling period\n[204] Enable averaging function\n[205]Enable trigger function\n[206] Set trigger threshold\n"
 8003542:	4896      	ldr	r0, [pc, #600]	; (800379c <consoleMeasuringInterface+0x264>)
 8003544:	f7fe fae0 	bl	8001b08 <send_uart3>
			"[888] Go to Main menu\n[999] Go to Main menu\n");

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8003548:	2201      	movs	r2, #1
 800354a:	2103      	movs	r1, #3
 800354c:	4894      	ldr	r0, [pc, #592]	; (80037a0 <consoleMeasuringInterface+0x268>)
 800354e:	f7ff ff6f 	bl	8003430 <getConsoleInput>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 8003558:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800355c:	2b63      	cmp	r3, #99	; 0x63
 800355e:	f000 8119 	beq.w	8003794 <consoleMeasuringInterface+0x25c>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 8003562:	498f      	ldr	r1, [pc, #572]	; (80037a0 <consoleMeasuringInterface+0x268>)
 8003564:	2003      	movs	r0, #3
 8003566:	f7ff fe5d 	bl	8003224 <convertInputToInt>
 800356a:	4603      	mov	r3, r0
 800356c:	2bcc      	cmp	r3, #204	; 0xcc
 800356e:	d077      	beq.n	8003660 <consoleMeasuringInterface+0x128>
 8003570:	2bcc      	cmp	r3, #204	; 0xcc
 8003572:	dc06      	bgt.n	8003582 <consoleMeasuringInterface+0x4a>
 8003574:	2bca      	cmp	r3, #202	; 0xca
 8003576:	d017      	beq.n	80035a8 <consoleMeasuringInterface+0x70>
 8003578:	2bca      	cmp	r3, #202	; 0xca
 800357a:	dc43      	bgt.n	8003604 <consoleMeasuringInterface+0xcc>
 800357c:	2bc9      	cmp	r3, #201	; 0xc9
 800357e:	d010      	beq.n	80035a2 <consoleMeasuringInterface+0x6a>
 8003580:	e102      	b.n	8003788 <consoleMeasuringInterface+0x250>
 8003582:	2bce      	cmp	r3, #206	; 0xce
 8003584:	f000 80ba 	beq.w	80036fc <consoleMeasuringInterface+0x1c4>
 8003588:	2bce      	cmp	r3, #206	; 0xce
 800358a:	f2c0 8090 	blt.w	80036ae <consoleMeasuringInterface+0x176>
 800358e:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8003592:	f000 80eb 	beq.w	800376c <consoleMeasuringInterface+0x234>
 8003596:	f240 32e7 	movw	r2, #999	; 0x3e7
 800359a:	4293      	cmp	r3, r2
 800359c:	f000 80ed 	beq.w	800377a <consoleMeasuringInterface+0x242>
 80035a0:	e0f2      	b.n	8003788 <consoleMeasuringInterface+0x250>
		// show measuring settings menu
		case 201:
			return consoleMeasuringInterface();
 80035a2:	f7ff ffc9 	bl	8003538 <consoleMeasuringInterface>
 80035a6:	e0f6      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// set measuring period
		case 202:
			temp16 = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired measuring interval in us (anywhere between 1us - 1000000us/1sec) or enter 0 to exit without change\n");
 80035ac:	487d      	ldr	r0, [pc, #500]	; (80037a4 <consoleMeasuringInterface+0x26c>)
 80035ae:	f7fe faab 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80035b2:	2201      	movs	r2, #1
 80035b4:	210a      	movs	r1, #10
 80035b6:	487a      	ldr	r0, [pc, #488]	; (80037a0 <consoleMeasuringInterface+0x268>)
 80035b8:	f7ff ff3a 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80035bc:	4978      	ldr	r1, [pc, #480]	; (80037a0 <consoleMeasuringInterface+0x268>)
 80035be:	200a      	movs	r0, #10
 80035c0:	f7ff fe30 	bl	8003224 <convertInputToInt>
 80035c4:	4603      	mov	r3, r0
 80035c6:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 1000000){
 80035c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <consoleMeasuringInterface+0xb2>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 80035ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80035d0:	463b      	mov	r3, r7
 80035d2:	4975      	ldr	r1, [pc, #468]	; (80037a8 <consoleMeasuringInterface+0x270>)
 80035d4:	4618      	mov	r0, r3
 80035d6:	f01b fa3f 	bl	801ea58 <siprintf>
				send_uart3(tempBuf);
 80035da:	463b      	mov	r3, r7
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fa93 	bl	8001b08 <send_uart3>
				settings.measuringInterval = temp16;
 80035e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035e4:	4a71      	ldr	r2, [pc, #452]	; (80037ac <consoleMeasuringInterface+0x274>)
 80035e6:	6053      	str	r3, [r2, #4]
 80035e8:	e009      	b.n	80035fe <consoleMeasuringInterface+0xc6>
			}
			else if(temp16 == 0){
 80035ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <consoleMeasuringInterface+0xc0>
				send_uart3("\nMeasuring period: UNCHANGED\n");
 80035f0:	486f      	ldr	r0, [pc, #444]	; (80037b0 <consoleMeasuringInterface+0x278>)
 80035f2:	f7fe fa89 	bl	8001b08 <send_uart3>
 80035f6:	e002      	b.n	80035fe <consoleMeasuringInterface+0xc6>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 80035f8:	486e      	ldr	r0, [pc, #440]	; (80037b4 <consoleMeasuringInterface+0x27c>)
 80035fa:	f7fe fa85 	bl	8001b08 <send_uart3>
			}
			return consoleMeasuringInterface();
 80035fe:	f7ff ff9b 	bl	8003538 <consoleMeasuringInterface>
 8003602:	e0c8      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// set sampling period
		case 203:
			temp16 = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired sampling interval in us (anywhere between 1us - 10000000us/10sec) or enter 0 to exit without change\n");
 8003608:	486b      	ldr	r0, [pc, #428]	; (80037b8 <consoleMeasuringInterface+0x280>)
 800360a:	f7fe fa7d 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 800360e:	2201      	movs	r2, #1
 8003610:	210a      	movs	r1, #10
 8003612:	4863      	ldr	r0, [pc, #396]	; (80037a0 <consoleMeasuringInterface+0x268>)
 8003614:	f7ff ff0c 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8003618:	4961      	ldr	r1, [pc, #388]	; (80037a0 <consoleMeasuringInterface+0x268>)
 800361a:	200a      	movs	r0, #10
 800361c:	f7ff fe02 	bl	8003224 <convertInputToInt>
 8003620:	4603      	mov	r3, r0
 8003622:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 10000000){
 8003624:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <consoleMeasuringInterface+0x10e>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 800362a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800362c:	463b      	mov	r3, r7
 800362e:	495e      	ldr	r1, [pc, #376]	; (80037a8 <consoleMeasuringInterface+0x270>)
 8003630:	4618      	mov	r0, r3
 8003632:	f01b fa11 	bl	801ea58 <siprintf>
				send_uart3(tempBuf);
 8003636:	463b      	mov	r3, r7
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fa65 	bl	8001b08 <send_uart3>
				settings.samplingInterval = temp16;
 800363e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003640:	4a5a      	ldr	r2, [pc, #360]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003642:	6093      	str	r3, [r2, #8]
 8003644:	e009      	b.n	800365a <consoleMeasuringInterface+0x122>
			}
			else if(temp16 == 0){
 8003646:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <consoleMeasuringInterface+0x11c>
				send_uart3("\nSampling period: UNCHANGED\n");
 800364c:	485b      	ldr	r0, [pc, #364]	; (80037bc <consoleMeasuringInterface+0x284>)
 800364e:	f7fe fa5b 	bl	8001b08 <send_uart3>
 8003652:	e002      	b.n	800365a <consoleMeasuringInterface+0x122>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8003654:	4857      	ldr	r0, [pc, #348]	; (80037b4 <consoleMeasuringInterface+0x27c>)
 8003656:	f7fe fa57 	bl	8001b08 <send_uart3>
			}
			return consoleMeasuringInterface();
 800365a:	f7ff ff6d 	bl	8003538 <consoleMeasuringInterface>
 800365e:	e09a      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// enable averaging
		case 204:
			send_uart3("\nDo you want to enable averaging function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 8003660:	4857      	ldr	r0, [pc, #348]	; (80037c0 <consoleMeasuringInterface+0x288>)
 8003662:	f7fe fa51 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8003666:	2201      	movs	r2, #1
 8003668:	2101      	movs	r1, #1
 800366a:	484d      	ldr	r0, [pc, #308]	; (80037a0 <consoleMeasuringInterface+0x268>)
 800366c:	f7ff fee0 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003670:	494b      	ldr	r1, [pc, #300]	; (80037a0 <consoleMeasuringInterface+0x268>)
 8003672:	2001      	movs	r0, #1
 8003674:	f7ff fdd6 	bl	8003224 <convertInputToInt>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d002      	beq.n	8003684 <consoleMeasuringInterface+0x14c>
 800367e:	2b02      	cmp	r3, #2
 8003680:	d007      	beq.n	8003692 <consoleMeasuringInterface+0x15a>
 8003682:	e00d      	b.n	80036a0 <consoleMeasuringInterface+0x168>
			case 1:
				settings.isAveraging = 1;
 8003684:	4b49      	ldr	r3, [pc, #292]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003686:	2201      	movs	r2, #1
 8003688:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: ENABLED\n");
 800368a:	484e      	ldr	r0, [pc, #312]	; (80037c4 <consoleMeasuringInterface+0x28c>)
 800368c:	f7fe fa3c 	bl	8001b08 <send_uart3>
				break;
 8003690:	e00a      	b.n	80036a8 <consoleMeasuringInterface+0x170>
			case 2:
				settings.isAveraging = 0;
 8003692:	4b46      	ldr	r3, [pc, #280]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003694:	2200      	movs	r2, #0
 8003696:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: DISABLED\n");
 8003698:	484b      	ldr	r0, [pc, #300]	; (80037c8 <consoleMeasuringInterface+0x290>)
 800369a:	f7fe fa35 	bl	8001b08 <send_uart3>
				break;
 800369e:	e003      	b.n	80036a8 <consoleMeasuringInterface+0x170>
			default:
				send_uart3("\nAVERAGING FUNCTION: NO CHANGE\n");
 80036a0:	484a      	ldr	r0, [pc, #296]	; (80037cc <consoleMeasuringInterface+0x294>)
 80036a2:	f7fe fa31 	bl	8001b08 <send_uart3>
				break;
 80036a6:	bf00      	nop
			}
			return consoleMeasuringInterface();
 80036a8:	f7ff ff46 	bl	8003538 <consoleMeasuringInterface>
 80036ac:	e073      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// enable trigger
		case 205:
			send_uart3("\nDo you want to enable trigger function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 80036ae:	4848      	ldr	r0, [pc, #288]	; (80037d0 <consoleMeasuringInterface+0x298>)
 80036b0:	f7fe fa2a 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 80036b4:	2201      	movs	r2, #1
 80036b6:	2101      	movs	r1, #1
 80036b8:	4839      	ldr	r0, [pc, #228]	; (80037a0 <consoleMeasuringInterface+0x268>)
 80036ba:	f7ff feb9 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 80036be:	4938      	ldr	r1, [pc, #224]	; (80037a0 <consoleMeasuringInterface+0x268>)
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7ff fdaf 	bl	8003224 <convertInputToInt>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d002      	beq.n	80036d2 <consoleMeasuringInterface+0x19a>
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d007      	beq.n	80036e0 <consoleMeasuringInterface+0x1a8>
 80036d0:	e00d      	b.n	80036ee <consoleMeasuringInterface+0x1b6>
			case 1:
				settings.isTriggerActive = 1;
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <consoleMeasuringInterface+0x274>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER FUNCTION: ENABLED\n");
 80036d8:	483e      	ldr	r0, [pc, #248]	; (80037d4 <consoleMeasuringInterface+0x29c>)
 80036da:	f7fe fa15 	bl	8001b08 <send_uart3>
				break;
 80036de:	e00a      	b.n	80036f6 <consoleMeasuringInterface+0x1be>
			case 2:
				settings.isTriggerActive = 0;
 80036e0:	4b32      	ldr	r3, [pc, #200]	; (80037ac <consoleMeasuringInterface+0x274>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER: DISABLED\n");
 80036e6:	483c      	ldr	r0, [pc, #240]	; (80037d8 <consoleMeasuringInterface+0x2a0>)
 80036e8:	f7fe fa0e 	bl	8001b08 <send_uart3>
				break;
 80036ec:	e003      	b.n	80036f6 <consoleMeasuringInterface+0x1be>
			default:
				send_uart3("\nTRIGGER: NO CHANGE\n");
 80036ee:	483b      	ldr	r0, [pc, #236]	; (80037dc <consoleMeasuringInterface+0x2a4>)
 80036f0:	f7fe fa0a 	bl	8001b08 <send_uart3>
				break;
 80036f4:	bf00      	nop
			}
			return consoleMeasuringInterface();
 80036f6:	f7ff ff1f 	bl	8003538 <consoleMeasuringInterface>
 80036fa:	e04c      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// set trigger level
		case 206:
			temp16 = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired trigger menu threashold in multiples of nA (anywhere between 5nA - 4A) or enter 0 to exit without change\n");
 8003700:	4837      	ldr	r0, [pc, #220]	; (80037e0 <consoleMeasuringInterface+0x2a8>)
 8003702:	f7fe fa01 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003706:	2201      	movs	r2, #1
 8003708:	210a      	movs	r1, #10
 800370a:	4825      	ldr	r0, [pc, #148]	; (80037a0 <consoleMeasuringInterface+0x268>)
 800370c:	f7ff fe90 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8003710:	4923      	ldr	r1, [pc, #140]	; (80037a0 <consoleMeasuringInterface+0x268>)
 8003712:	200a      	movs	r0, #10
 8003714:	f7ff fd86 	bl	8003224 <convertInputToInt>
 8003718:	4603      	mov	r3, r0
 800371a:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 5 & temp16 <= 4000000){
 800371c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800371e:	2b04      	cmp	r3, #4
 8003720:	d917      	bls.n	8003752 <consoleMeasuringInterface+0x21a>
				uint8_t tempBuf [50];
				settings.samplingInterval = temp16;
 8003722:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003724:	4a21      	ldr	r2, [pc, #132]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003726:	6093      	str	r3, [r2, #8]
				settings.samplingInterval /= 1000000000;
 8003728:	4b20      	ldr	r3, [pc, #128]	; (80037ac <consoleMeasuringInterface+0x274>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	0a5b      	lsrs	r3, r3, #9
 800372e:	4a2d      	ldr	r2, [pc, #180]	; (80037e4 <consoleMeasuringInterface+0x2ac>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	09db      	lsrs	r3, r3, #7
 8003736:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003738:	6093      	str	r3, [r2, #8]
				sprintf(tempBuf,"New entered value is: %1.12f A\n", settings.samplingInterval);
 800373a:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <consoleMeasuringInterface+0x274>)
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	463b      	mov	r3, r7
 8003740:	4929      	ldr	r1, [pc, #164]	; (80037e8 <consoleMeasuringInterface+0x2b0>)
 8003742:	4618      	mov	r0, r3
 8003744:	f01b f988 	bl	801ea58 <siprintf>
				send_uart3(tempBuf);
 8003748:	463b      	mov	r3, r7
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe f9dc 	bl	8001b08 <send_uart3>
 8003750:	e009      	b.n	8003766 <consoleMeasuringInterface+0x22e>

			}
			else if(temp16 == 0){
 8003752:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003754:	2b00      	cmp	r3, #0
 8003756:	d103      	bne.n	8003760 <consoleMeasuringInterface+0x228>
				send_uart3("\nSampling period: UNCHANGED\n");
 8003758:	4818      	ldr	r0, [pc, #96]	; (80037bc <consoleMeasuringInterface+0x284>)
 800375a:	f7fe f9d5 	bl	8001b08 <send_uart3>
 800375e:	e002      	b.n	8003766 <consoleMeasuringInterface+0x22e>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8003760:	4814      	ldr	r0, [pc, #80]	; (80037b4 <consoleMeasuringInterface+0x27c>)
 8003762:	f7fe f9d1 	bl	8001b08 <send_uart3>
			}
			return consoleMeasuringInterface();
 8003766:	f7ff fee7 	bl	8003538 <consoleMeasuringInterface>
 800376a:	e014      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;

			// main menu + print main menu structure
		case 888:
			send_uart3("\nGoing back to Main menu\n");
 800376c:	481f      	ldr	r0, [pc, #124]	; (80037ec <consoleMeasuringInterface+0x2b4>)
 800376e:	f7fe f9cb 	bl	8001b08 <send_uart3>
			return consoleInterface(123);
 8003772:	207b      	movs	r0, #123	; 0x7b
 8003774:	f000 fdfe 	bl	8004374 <consoleInterface>
 8003778:	e00d      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// main menu + print main menu structure
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 800377a:	481c      	ldr	r0, [pc, #112]	; (80037ec <consoleMeasuringInterface+0x2b4>)
 800377c:	f7fe f9c4 	bl	8001b08 <send_uart3>
			return consoleInterface(123);
 8003780:	207b      	movs	r0, #123	; 0x7b
 8003782:	f000 fdf7 	bl	8004374 <consoleInterface>
 8003786:	e006      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 8003788:	4819      	ldr	r0, [pc, #100]	; (80037f0 <consoleMeasuringInterface+0x2b8>)
 800378a:	f7fe f9bd 	bl	8001b08 <send_uart3>
			return consoleMeasuringInterface();
 800378e:	f7ff fed3 	bl	8003538 <consoleMeasuringInterface>
 8003792:	e000      	b.n	8003796 <consoleMeasuringInterface+0x25e>
		return;
 8003794:	bf00      	nop
			break;
	}

	return consoleMeasuringInterface();

}
 8003796:	3738      	adds	r7, #56	; 0x38
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	08020a1c 	.word	0x08020a1c
 80037a0:	200087f8 	.word	0x200087f8
 80037a4:	08020b14 	.word	0x08020b14
 80037a8:	08020b88 	.word	0x08020b88
 80037ac:	20000018 	.word	0x20000018
 80037b0:	08020ba8 	.word	0x08020ba8
 80037b4:	08020bc8 	.word	0x08020bc8
 80037b8:	08020be8 	.word	0x08020be8
 80037bc:	08020c5c 	.word	0x08020c5c
 80037c0:	08020c7c 	.word	0x08020c7c
 80037c4:	08020ce4 	.word	0x08020ce4
 80037c8:	08020d04 	.word	0x08020d04
 80037cc:	08020d24 	.word	0x08020d24
 80037d0:	08020d44 	.word	0x08020d44
 80037d4:	08020da8 	.word	0x08020da8
 80037d8:	08020dc4 	.word	0x08020dc4
 80037dc:	08020dd8 	.word	0x08020dd8
 80037e0:	08020df0 	.word	0x08020df0
 80037e4:	00044b83 	.word	0x00044b83
 80037e8:	08020e6c 	.word	0x08020e6c
 80037ec:	08020e8c 	.word	0x08020e8c
 80037f0:	08020ea8 	.word	0x08020ea8

080037f4 <consoleRTCSettings>:
*		[888] *Go to Device settings menu
*		[999] *Go to main menu
*/

// menu for setting RTC clock
void consoleRTCSettings(){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	; 0x38
 80037f8:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	86fb      	strh	r3, [r7, #54]	; 0x36
	// print menu structure
	send_uart3("\nRTC settings menu\n[302] Show RTC settings menu\n[321] Show current time and date\n[322] Set Time - Hours, Minutes\n[323] Set Date - Day\n[324] Set Date - Month\n[325] Set Date - Year\n"
 80037fe:	48bc      	ldr	r0, [pc, #752]	; (8003af0 <consoleRTCSettings+0x2fc>)
 8003800:	f7fe f982 	bl	8001b08 <send_uart3>
			"[888] Go to Device settings menu\n[999] Go to Main menu\n");

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8003804:	2200      	movs	r2, #0
 8003806:	49bb      	ldr	r1, [pc, #748]	; (8003af4 <consoleRTCSettings+0x300>)
 8003808:	48bb      	ldr	r0, [pc, #748]	; (8003af8 <consoleRTCSettings+0x304>)
 800380a:	f009 ffcd 	bl	800d7a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800380e:	2200      	movs	r2, #0
 8003810:	49ba      	ldr	r1, [pc, #744]	; (8003afc <consoleRTCSettings+0x308>)
 8003812:	48b9      	ldr	r0, [pc, #740]	; (8003af8 <consoleRTCSettings+0x304>)
 8003814:	f00a f8ce 	bl	800d9b4 <HAL_RTC_GetDate>

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8003818:	2201      	movs	r2, #1
 800381a:	2103      	movs	r1, #3
 800381c:	48b8      	ldr	r0, [pc, #736]	; (8003b00 <consoleRTCSettings+0x30c>)
 800381e:	f7ff fe07 	bl	8003430 <getConsoleInput>
 8003822:	4603      	mov	r3, r0
 8003824:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 8003828:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800382c:	2b63      	cmp	r3, #99	; 0x63
 800382e:	f000 82e9 	beq.w	8003e04 <consoleRTCSettings+0x610>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 8003832:	49b3      	ldr	r1, [pc, #716]	; (8003b00 <consoleRTCSettings+0x30c>)
 8003834:	2003      	movs	r0, #3
 8003836:	f7ff fcf5 	bl	8003224 <convertInputToInt>
 800383a:	4603      	mov	r3, r0
 800383c:	f240 1243 	movw	r2, #323	; 0x143
 8003840:	4293      	cmp	r3, r2
 8003842:	f000 80ab 	beq.w	800399c <consoleRTCSettings+0x1a8>
 8003846:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 800384a:	da0a      	bge.n	8003862 <consoleRTCSettings+0x6e>
 800384c:	f240 1241 	movw	r2, #321	; 0x141
 8003850:	4293      	cmp	r3, r2
 8003852:	d01c      	beq.n	800388e <consoleRTCSettings+0x9a>
 8003854:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8003858:	da1e      	bge.n	8003898 <consoleRTCSettings+0xa4>
 800385a:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800385e:	d013      	beq.n	8003888 <consoleRTCSettings+0x94>
 8003860:	e2ca      	b.n	8003df8 <consoleRTCSettings+0x604>
 8003862:	f240 1245 	movw	r2, #325	; 0x145
 8003866:	4293      	cmp	r3, r2
 8003868:	f000 826b 	beq.w	8003d42 <consoleRTCSettings+0x54e>
 800386c:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8003870:	f340 80e0 	ble.w	8003a34 <consoleRTCSettings+0x240>
 8003874:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8003878:	f000 82b1 	beq.w	8003dde <consoleRTCSettings+0x5ea>
 800387c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003880:	4293      	cmp	r3, r2
 8003882:	f000 82b2 	beq.w	8003dea <consoleRTCSettings+0x5f6>
 8003886:	e2b7      	b.n	8003df8 <consoleRTCSettings+0x604>
		// show rtc settings menu
		case 302:
			return consoleRTCSettings();
 8003888:	f7ff ffb4 	bl	80037f4 <consoleRTCSettings>
 800388c:	e2bb      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// show current time and date
		case 321:
			printCurrentTimeDate();
 800388e:	f7ff fd93 	bl	80033b8 <printCurrentTimeDate>
			return consoleRTCSettings();
 8003892:	f7ff ffaf 	bl	80037f4 <consoleRTCSettings>
 8003896:	e2b6      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// set time - hours, minutes
		case 322:
			temp16 = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter time, first hours in 24h format then when prompted minutes and finally seconds\n\n ENTER hours\n");
 800389c:	4899      	ldr	r0, [pc, #612]	; (8003b04 <consoleRTCSettings+0x310>)
 800389e:	f7fe f933 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80038a2:	2201      	movs	r2, #1
 80038a4:	210a      	movs	r1, #10
 80038a6:	4896      	ldr	r0, [pc, #600]	; (8003b00 <consoleRTCSettings+0x30c>)
 80038a8:	f7ff fdc2 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80038ac:	4994      	ldr	r1, [pc, #592]	; (8003b00 <consoleRTCSettings+0x30c>)
 80038ae:	200a      	movs	r0, #10
 80038b0:	f7ff fcb8 	bl	8003224 <convertInputToInt>
 80038b4:	4603      	mov	r3, r0
 80038b6:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 0 & temp16 <= 24){
 80038b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038ba:	2b18      	cmp	r3, #24
 80038bc:	d868      	bhi.n	8003990 <consoleRTCSettings+0x19c>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered time - hours: %d\n", temp16);
 80038be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038c0:	463b      	mov	r3, r7
 80038c2:	4991      	ldr	r1, [pc, #580]	; (8003b08 <consoleRTCSettings+0x314>)
 80038c4:	4618      	mov	r0, r3
 80038c6:	f01b f8c7 	bl	801ea58 <siprintf>
				send_uart3(tempBuf);
 80038ca:	463b      	mov	r3, r7
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe f91b 	bl	8001b08 <send_uart3>
				Time.Hours = temp16;
 80038d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4b87      	ldr	r3, [pc, #540]	; (8003af4 <consoleRTCSettings+0x300>)
 80038d8:	701a      	strb	r2, [r3, #0]

				temp16 = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	86fb      	strh	r3, [r7, #54]	; 0x36
				send_uart3("\n ENTER minutes\n");
 80038de:	488b      	ldr	r0, [pc, #556]	; (8003b0c <consoleRTCSettings+0x318>)
 80038e0:	f7fe f912 	bl	8001b08 <send_uart3>
				getConsoleInput(&inputData, 10, 1);
 80038e4:	2201      	movs	r2, #1
 80038e6:	210a      	movs	r1, #10
 80038e8:	4885      	ldr	r0, [pc, #532]	; (8003b00 <consoleRTCSettings+0x30c>)
 80038ea:	f7ff fda1 	bl	8003430 <getConsoleInput>
				temp16 = convertInputToInt(10, &inputData);
 80038ee:	4984      	ldr	r1, [pc, #528]	; (8003b00 <consoleRTCSettings+0x30c>)
 80038f0:	200a      	movs	r0, #10
 80038f2:	f7ff fc97 	bl	8003224 <convertInputToInt>
 80038f6:	4603      	mov	r3, r0
 80038f8:	86fb      	strh	r3, [r7, #54]	; 0x36
				if(temp16 >= 0 & temp16 <= 60){
 80038fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038fc:	2b3c      	cmp	r3, #60	; 0x3c
 80038fe:	d84a      	bhi.n	8003996 <consoleRTCSettings+0x1a2>
					sprintf(tempBuf,"  Entered time - minutes: %d\n", temp16);
 8003900:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003902:	463b      	mov	r3, r7
 8003904:	4982      	ldr	r1, [pc, #520]	; (8003b10 <consoleRTCSettings+0x31c>)
 8003906:	4618      	mov	r0, r3
 8003908:	f01b f8a6 	bl	801ea58 <siprintf>
					send_uart3(tempBuf);
 800390c:	463b      	mov	r3, r7
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe f8fa 	bl	8001b08 <send_uart3>
					Time.Minutes = temp16;
 8003914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <consoleRTCSettings+0x300>)
 800391a:	705a      	strb	r2, [r3, #1]

					temp16 = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	86fb      	strh	r3, [r7, #54]	; 0x36
					send_uart3("\n ENTER seconds\n");
 8003920:	487c      	ldr	r0, [pc, #496]	; (8003b14 <consoleRTCSettings+0x320>)
 8003922:	f7fe f8f1 	bl	8001b08 <send_uart3>
					getConsoleInput(&inputData, 10, 1);
 8003926:	2201      	movs	r2, #1
 8003928:	210a      	movs	r1, #10
 800392a:	4875      	ldr	r0, [pc, #468]	; (8003b00 <consoleRTCSettings+0x30c>)
 800392c:	f7ff fd80 	bl	8003430 <getConsoleInput>
					temp16 = convertInputToInt(10, &inputData);
 8003930:	4973      	ldr	r1, [pc, #460]	; (8003b00 <consoleRTCSettings+0x30c>)
 8003932:	200a      	movs	r0, #10
 8003934:	f7ff fc76 	bl	8003224 <convertInputToInt>
 8003938:	4603      	mov	r3, r0
 800393a:	86fb      	strh	r3, [r7, #54]	; 0x36
					if(temp16 >= 0 & temp16 <= 60){
 800393c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800393e:	2b3c      	cmp	r3, #60	; 0x3c
 8003940:	d829      	bhi.n	8003996 <consoleRTCSettings+0x1a2>
						sprintf(tempBuf,"  Entered time - seconds: %d\n", temp16);
 8003942:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003944:	463b      	mov	r3, r7
 8003946:	4974      	ldr	r1, [pc, #464]	; (8003b18 <consoleRTCSettings+0x324>)
 8003948:	4618      	mov	r0, r3
 800394a:	f01b f885 	bl	801ea58 <siprintf>
						send_uart3(tempBuf);
 800394e:	463b      	mov	r3, r7
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe f8d9 	bl	8001b08 <send_uart3>
						Time.Seconds = temp16;
 8003956:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <consoleRTCSettings+0x300>)
 800395c:	709a      	strb	r2, [r3, #2]

						Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800395e:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <consoleRTCSettings+0x300>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
						Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8003964:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <consoleRTCSettings+0x300>)
 8003966:	2200      	movs	r2, #0
 8003968:	615a      	str	r2, [r3, #20]
						if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 800396a:	2200      	movs	r2, #0
 800396c:	4961      	ldr	r1, [pc, #388]	; (8003af4 <consoleRTCSettings+0x300>)
 800396e:	4862      	ldr	r0, [pc, #392]	; (8003af8 <consoleRTCSettings+0x304>)
 8003970:	f009 fe5c 	bl	800d62c <HAL_RTC_SetTime>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <consoleRTCSettings+0x18e>
						{
							send_uart3("ERROR - SAVING TIME\n");
 800397a:	4868      	ldr	r0, [pc, #416]	; (8003b1c <consoleRTCSettings+0x328>)
 800397c:	f7fe f8c4 	bl	8001b08 <send_uart3>
 8003980:	e009      	b.n	8003996 <consoleRTCSettings+0x1a2>
						}
						else
							HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003982:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003986:	2101      	movs	r1, #1
 8003988:	485b      	ldr	r0, [pc, #364]	; (8003af8 <consoleRTCSettings+0x304>)
 800398a:	f00a f8f3 	bl	800db74 <HAL_RTCEx_BKUPWrite>
 800398e:	e002      	b.n	8003996 <consoleRTCSettings+0x1a2>
					}
				}
			}
			else{
				send_uart3("\nEntered value if out of range\n Time not set");
 8003990:	4863      	ldr	r0, [pc, #396]	; (8003b20 <consoleRTCSettings+0x32c>)
 8003992:	f7fe f8b9 	bl	8001b08 <send_uart3>
			}
			return consoleRTCSettings();
 8003996:	f7ff ff2d 	bl	80037f4 <consoleRTCSettings>
 800399a:	e234      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// set date - day
		case 323:
			temp16 = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - day in format from 1 to 31\n");
 80039a0:	4860      	ldr	r0, [pc, #384]	; (8003b24 <consoleRTCSettings+0x330>)
 80039a2:	f7fe f8b1 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80039a6:	2201      	movs	r2, #1
 80039a8:	210a      	movs	r1, #10
 80039aa:	4855      	ldr	r0, [pc, #340]	; (8003b00 <consoleRTCSettings+0x30c>)
 80039ac:	f7ff fd40 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80039b0:	4953      	ldr	r1, [pc, #332]	; (8003b00 <consoleRTCSettings+0x30c>)
 80039b2:	200a      	movs	r0, #10
 80039b4:	f7ff fc36 	bl	8003224 <convertInputToInt>
 80039b8:	4603      	mov	r3, r0
 80039ba:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 80039bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf14      	ite	ne
 80039c2:	2301      	movne	r3, #1
 80039c4:	2300      	moveq	r3, #0
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039ca:	2b1f      	cmp	r3, #31
 80039cc:	bf94      	ite	ls
 80039ce:	2301      	movls	r3, #1
 80039d0:	2300      	movhi	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	4013      	ands	r3, r2
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d025      	beq.n	8003a28 <consoleRTCSettings+0x234>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered day: %d\n", temp16);
 80039dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80039de:	463b      	mov	r3, r7
 80039e0:	4951      	ldr	r1, [pc, #324]	; (8003b28 <consoleRTCSettings+0x334>)
 80039e2:	4618      	mov	r0, r3
 80039e4:	f01b f838 	bl	801ea58 <siprintf>
				send_uart3(tempBuf);
 80039e8:	463b      	mov	r3, r7
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe f88c 	bl	8001b08 <send_uart3>
				Date.Date = decimalToHex((uint8_t)temp16);
 80039f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fbed 	bl	80031d4 <decimalToHex>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <consoleRTCSettings+0x308>)
 8003a00:	709a      	strb	r2, [r3, #2]
				//Date.Date = temp16;
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003a02:	2200      	movs	r2, #0
 8003a04:	493d      	ldr	r1, [pc, #244]	; (8003afc <consoleRTCSettings+0x308>)
 8003a06:	483c      	ldr	r0, [pc, #240]	; (8003af8 <consoleRTCSettings+0x304>)
 8003a08:	f009 ff2c 	bl	800d864 <HAL_RTC_SetDate>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <consoleRTCSettings+0x226>
				{
					send_uart3("ERROR - SAVING DATE\n");
 8003a12:	4846      	ldr	r0, [pc, #280]	; (8003b2c <consoleRTCSettings+0x338>)
 8003a14:	f7fe f878 	bl	8001b08 <send_uart3>
 8003a18:	e009      	b.n	8003a2e <consoleRTCSettings+0x23a>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003a1a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4835      	ldr	r0, [pc, #212]	; (8003af8 <consoleRTCSettings+0x304>)
 8003a22:	f00a f8a7 	bl	800db74 <HAL_RTCEx_BKUPWrite>
 8003a26:	e002      	b.n	8003a2e <consoleRTCSettings+0x23a>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8003a28:	4841      	ldr	r0, [pc, #260]	; (8003b30 <consoleRTCSettings+0x33c>)
 8003a2a:	f7fe f86d 	bl	8001b08 <send_uart3>
			}
			return consoleRTCSettings();
 8003a2e:	f7ff fee1 	bl	80037f4 <consoleRTCSettings>
 8003a32:	e1e8      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// set date - month
		case 324:
			send_uart3("\nEnter number corresponding to month(1 - January, 2 - February, ...)\n");
 8003a34:	483f      	ldr	r0, [pc, #252]	; (8003b34 <consoleRTCSettings+0x340>)
 8003a36:	f7fe f867 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	210a      	movs	r1, #10
 8003a3e:	4830      	ldr	r0, [pc, #192]	; (8003b00 <consoleRTCSettings+0x30c>)
 8003a40:	f7ff fcf6 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(10, &inputData)) {
 8003a44:	492e      	ldr	r1, [pc, #184]	; (8003b00 <consoleRTCSettings+0x30c>)
 8003a46:	200a      	movs	r0, #10
 8003a48:	f7ff fbec 	bl	8003224 <convertInputToInt>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	2b0b      	cmp	r3, #11
 8003a52:	f200 816f 	bhi.w	8003d34 <consoleRTCSettings+0x540>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <consoleRTCSettings+0x268>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003abf 	.word	0x08003abf
 8003a64:	08003b41 	.word	0x08003b41
 8003a68:	08003b73 	.word	0x08003b73
 8003a6c:	08003ba5 	.word	0x08003ba5
 8003a70:	08003bd7 	.word	0x08003bd7
 8003a74:	08003c09 	.word	0x08003c09
 8003a78:	08003c3b 	.word	0x08003c3b
 8003a7c:	08003c6d 	.word	0x08003c6d
 8003a80:	08003c9f 	.word	0x08003c9f
 8003a84:	08003cd1 	.word	0x08003cd1
 8003a88:	08003d03 	.word	0x08003d03
				case 1:
					Date.Month = RTC_MONTH_JANUARY;
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <consoleRTCSettings+0x308>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: January / 1\n");
 8003a92:	4829      	ldr	r0, [pc, #164]	; (8003b38 <consoleRTCSettings+0x344>)
 8003a94:	f7fe f838 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	4918      	ldr	r1, [pc, #96]	; (8003afc <consoleRTCSettings+0x308>)
 8003a9c:	4816      	ldr	r0, [pc, #88]	; (8003af8 <consoleRTCSettings+0x304>)
 8003a9e:	f009 fee1 	bl	800d864 <HAL_RTC_SetDate>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <consoleRTCSettings+0x2bc>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003aa8:	4820      	ldr	r0, [pc, #128]	; (8003b2c <consoleRTCSettings+0x338>)
 8003aaa:	f7fe f82d 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003aae:	e145      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003ab0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4810      	ldr	r0, [pc, #64]	; (8003af8 <consoleRTCSettings+0x304>)
 8003ab8:	f00a f85c 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003abc:	e13e      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 2:
					Date.Month = RTC_MONTH_FEBRUARY;
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <consoleRTCSettings+0x308>)
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: February / 2\n");
 8003ac4:	481d      	ldr	r0, [pc, #116]	; (8003b3c <consoleRTCSettings+0x348>)
 8003ac6:	f7fe f81f 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003aca:	2200      	movs	r2, #0
 8003acc:	490b      	ldr	r1, [pc, #44]	; (8003afc <consoleRTCSettings+0x308>)
 8003ace:	480a      	ldr	r0, [pc, #40]	; (8003af8 <consoleRTCSettings+0x304>)
 8003ad0:	f009 fec8 	bl	800d864 <HAL_RTC_SetDate>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <consoleRTCSettings+0x2ee>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003ada:	4814      	ldr	r0, [pc, #80]	; (8003b2c <consoleRTCSettings+0x338>)
 8003adc:	f7fe f814 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003ae0:	e12c      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003ae2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	4803      	ldr	r0, [pc, #12]	; (8003af8 <consoleRTCSettings+0x304>)
 8003aea:	f00a f843 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003aee:	e125      	b.n	8003d3c <consoleRTCSettings+0x548>
 8003af0:	08020ec0 	.word	0x08020ec0
 8003af4:	20008804 	.word	0x20008804
 8003af8:	20003000 	.word	0x20003000
 8003afc:	20006e60 	.word	0x20006e60
 8003b00:	200087f8 	.word	0x200087f8
 8003b04:	08020fac 	.word	0x08020fac
 8003b08:	08021014 	.word	0x08021014
 8003b0c:	08021030 	.word	0x08021030
 8003b10:	08021044 	.word	0x08021044
 8003b14:	08021064 	.word	0x08021064
 8003b18:	08021078 	.word	0x08021078
 8003b1c:	08021098 	.word	0x08021098
 8003b20:	080210b0 	.word	0x080210b0
 8003b24:	080210e0 	.word	0x080210e0
 8003b28:	0802110c 	.word	0x0802110c
 8003b2c:	08021120 	.word	0x08021120
 8003b30:	08021138 	.word	0x08021138
 8003b34:	08021168 	.word	0x08021168
 8003b38:	080211b0 	.word	0x080211b0
 8003b3c:	080211cc 	.word	0x080211cc
				case 3:
					Date.Month = RTC_MONTH_MARCH;
 8003b40:	4bb2      	ldr	r3, [pc, #712]	; (8003e0c <consoleRTCSettings+0x618>)
 8003b42:	2203      	movs	r2, #3
 8003b44:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: March / 3\n");
 8003b46:	48b2      	ldr	r0, [pc, #712]	; (8003e10 <consoleRTCSettings+0x61c>)
 8003b48:	f7fd ffde 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	49af      	ldr	r1, [pc, #700]	; (8003e0c <consoleRTCSettings+0x618>)
 8003b50:	48b0      	ldr	r0, [pc, #704]	; (8003e14 <consoleRTCSettings+0x620>)
 8003b52:	f009 fe87 	bl	800d864 <HAL_RTC_SetDate>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <consoleRTCSettings+0x370>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003b5c:	48ae      	ldr	r0, [pc, #696]	; (8003e18 <consoleRTCSettings+0x624>)
 8003b5e:	f7fd ffd3 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003b62:	e0eb      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003b64:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003b68:	2101      	movs	r1, #1
 8003b6a:	48aa      	ldr	r0, [pc, #680]	; (8003e14 <consoleRTCSettings+0x620>)
 8003b6c:	f00a f802 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003b70:	e0e4      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 4:
					Date.Month = RTC_MONTH_APRIL;
 8003b72:	4ba6      	ldr	r3, [pc, #664]	; (8003e0c <consoleRTCSettings+0x618>)
 8003b74:	2204      	movs	r2, #4
 8003b76:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: April / 4\n");
 8003b78:	48a8      	ldr	r0, [pc, #672]	; (8003e1c <consoleRTCSettings+0x628>)
 8003b7a:	f7fd ffc5 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	49a2      	ldr	r1, [pc, #648]	; (8003e0c <consoleRTCSettings+0x618>)
 8003b82:	48a4      	ldr	r0, [pc, #656]	; (8003e14 <consoleRTCSettings+0x620>)
 8003b84:	f009 fe6e 	bl	800d864 <HAL_RTC_SetDate>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <consoleRTCSettings+0x3a2>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003b8e:	48a2      	ldr	r0, [pc, #648]	; (8003e18 <consoleRTCSettings+0x624>)
 8003b90:	f7fd ffba 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003b94:	e0d2      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003b96:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	489d      	ldr	r0, [pc, #628]	; (8003e14 <consoleRTCSettings+0x620>)
 8003b9e:	f009 ffe9 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003ba2:	e0cb      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 5:
					Date.Month = RTC_MONTH_MAY;
 8003ba4:	4b99      	ldr	r3, [pc, #612]	; (8003e0c <consoleRTCSettings+0x618>)
 8003ba6:	2205      	movs	r2, #5
 8003ba8:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: May / 5\n");
 8003baa:	489d      	ldr	r0, [pc, #628]	; (8003e20 <consoleRTCSettings+0x62c>)
 8003bac:	f7fd ffac 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4996      	ldr	r1, [pc, #600]	; (8003e0c <consoleRTCSettings+0x618>)
 8003bb4:	4897      	ldr	r0, [pc, #604]	; (8003e14 <consoleRTCSettings+0x620>)
 8003bb6:	f009 fe55 	bl	800d864 <HAL_RTC_SetDate>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <consoleRTCSettings+0x3d4>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003bc0:	4895      	ldr	r0, [pc, #596]	; (8003e18 <consoleRTCSettings+0x624>)
 8003bc2:	f7fd ffa1 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003bc6:	e0b9      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003bc8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4891      	ldr	r0, [pc, #580]	; (8003e14 <consoleRTCSettings+0x620>)
 8003bd0:	f009 ffd0 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003bd4:	e0b2      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 6:
					Date.Month = RTC_MONTH_JUNE;
 8003bd6:	4b8d      	ldr	r3, [pc, #564]	; (8003e0c <consoleRTCSettings+0x618>)
 8003bd8:	2206      	movs	r2, #6
 8003bda:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: June / 6\n");
 8003bdc:	4891      	ldr	r0, [pc, #580]	; (8003e24 <consoleRTCSettings+0x630>)
 8003bde:	f7fd ff93 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003be2:	2200      	movs	r2, #0
 8003be4:	4989      	ldr	r1, [pc, #548]	; (8003e0c <consoleRTCSettings+0x618>)
 8003be6:	488b      	ldr	r0, [pc, #556]	; (8003e14 <consoleRTCSettings+0x620>)
 8003be8:	f009 fe3c 	bl	800d864 <HAL_RTC_SetDate>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <consoleRTCSettings+0x406>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003bf2:	4889      	ldr	r0, [pc, #548]	; (8003e18 <consoleRTCSettings+0x624>)
 8003bf4:	f7fd ff88 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003bf8:	e0a0      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003bfa:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4884      	ldr	r0, [pc, #528]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c02:	f009 ffb7 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003c06:	e099      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 7:
					Date.Month = RTC_MONTH_JULY;
 8003c08:	4b80      	ldr	r3, [pc, #512]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: July / 7\n");
 8003c0e:	4886      	ldr	r0, [pc, #536]	; (8003e28 <consoleRTCSettings+0x634>)
 8003c10:	f7fd ff7a 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c14:	2200      	movs	r2, #0
 8003c16:	497d      	ldr	r1, [pc, #500]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c18:	487e      	ldr	r0, [pc, #504]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c1a:	f009 fe23 	bl	800d864 <HAL_RTC_SetDate>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <consoleRTCSettings+0x438>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003c24:	487c      	ldr	r0, [pc, #496]	; (8003e18 <consoleRTCSettings+0x624>)
 8003c26:	f7fd ff6f 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003c2a:	e087      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003c2c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003c30:	2101      	movs	r1, #1
 8003c32:	4878      	ldr	r0, [pc, #480]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c34:	f009 ff9e 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003c38:	e080      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 8:
					Date.Month = RTC_MONTH_AUGUST;
 8003c3a:	4b74      	ldr	r3, [pc, #464]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: August / 8\n");
 8003c40:	487a      	ldr	r0, [pc, #488]	; (8003e2c <consoleRTCSettings+0x638>)
 8003c42:	f7fd ff61 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c46:	2200      	movs	r2, #0
 8003c48:	4970      	ldr	r1, [pc, #448]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c4a:	4872      	ldr	r0, [pc, #456]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c4c:	f009 fe0a 	bl	800d864 <HAL_RTC_SetDate>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <consoleRTCSettings+0x46a>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003c56:	4870      	ldr	r0, [pc, #448]	; (8003e18 <consoleRTCSettings+0x624>)
 8003c58:	f7fd ff56 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003c5c:	e06e      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003c5e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003c62:	2101      	movs	r1, #1
 8003c64:	486b      	ldr	r0, [pc, #428]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c66:	f009 ff85 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003c6a:	e067      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 9:
					Date.Month = RTC_MONTH_SEPTEMBER;
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c6e:	2209      	movs	r2, #9
 8003c70:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: September / 9\n");
 8003c72:	486f      	ldr	r0, [pc, #444]	; (8003e30 <consoleRTCSettings+0x63c>)
 8003c74:	f7fd ff48 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4964      	ldr	r1, [pc, #400]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c7c:	4865      	ldr	r0, [pc, #404]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c7e:	f009 fdf1 	bl	800d864 <HAL_RTC_SetDate>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <consoleRTCSettings+0x49c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003c88:	4863      	ldr	r0, [pc, #396]	; (8003e18 <consoleRTCSettings+0x624>)
 8003c8a:	f7fd ff3d 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003c8e:	e055      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003c90:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003c94:	2101      	movs	r1, #1
 8003c96:	485f      	ldr	r0, [pc, #380]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c98:	f009 ff6c 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003c9c:	e04e      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 10:
					Date.Month = RTC_MONTH_OCTOBER;
 8003c9e:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <consoleRTCSettings+0x618>)
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: October / 10\n");
 8003ca4:	4863      	ldr	r0, [pc, #396]	; (8003e34 <consoleRTCSettings+0x640>)
 8003ca6:	f7fd ff2f 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003caa:	2200      	movs	r2, #0
 8003cac:	4957      	ldr	r1, [pc, #348]	; (8003e0c <consoleRTCSettings+0x618>)
 8003cae:	4859      	ldr	r0, [pc, #356]	; (8003e14 <consoleRTCSettings+0x620>)
 8003cb0:	f009 fdd8 	bl	800d864 <HAL_RTC_SetDate>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <consoleRTCSettings+0x4ce>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003cba:	4857      	ldr	r0, [pc, #348]	; (8003e18 <consoleRTCSettings+0x624>)
 8003cbc:	f7fd ff24 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003cc0:	e03c      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003cc2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4852      	ldr	r0, [pc, #328]	; (8003e14 <consoleRTCSettings+0x620>)
 8003cca:	f009 ff53 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003cce:	e035      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 11:
					Date.Month = RTC_MONTH_NOVEMBER;
 8003cd0:	4b4e      	ldr	r3, [pc, #312]	; (8003e0c <consoleRTCSettings+0x618>)
 8003cd2:	2211      	movs	r2, #17
 8003cd4:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: November / 11\n");
 8003cd6:	4858      	ldr	r0, [pc, #352]	; (8003e38 <consoleRTCSettings+0x644>)
 8003cd8:	f7fd ff16 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	494b      	ldr	r1, [pc, #300]	; (8003e0c <consoleRTCSettings+0x618>)
 8003ce0:	484c      	ldr	r0, [pc, #304]	; (8003e14 <consoleRTCSettings+0x620>)
 8003ce2:	f009 fdbf 	bl	800d864 <HAL_RTC_SetDate>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <consoleRTCSettings+0x500>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003cec:	484a      	ldr	r0, [pc, #296]	; (8003e18 <consoleRTCSettings+0x624>)
 8003cee:	f7fd ff0b 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003cf2:	e023      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003cf4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4846      	ldr	r0, [pc, #280]	; (8003e14 <consoleRTCSettings+0x620>)
 8003cfc:	f009 ff3a 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003d00:	e01c      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 12:
					Date.Month = RTC_MONTH_DECEMBER;
 8003d02:	4b42      	ldr	r3, [pc, #264]	; (8003e0c <consoleRTCSettings+0x618>)
 8003d04:	2212      	movs	r2, #18
 8003d06:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: December / 12\n");
 8003d08:	484c      	ldr	r0, [pc, #304]	; (8003e3c <consoleRTCSettings+0x648>)
 8003d0a:	f7fd fefd 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	493e      	ldr	r1, [pc, #248]	; (8003e0c <consoleRTCSettings+0x618>)
 8003d12:	4840      	ldr	r0, [pc, #256]	; (8003e14 <consoleRTCSettings+0x620>)
 8003d14:	f009 fda6 	bl	800d864 <HAL_RTC_SetDate>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <consoleRTCSettings+0x532>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003d1e:	483e      	ldr	r0, [pc, #248]	; (8003e18 <consoleRTCSettings+0x624>)
 8003d20:	f7fd fef2 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003d24:	e00a      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003d26:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4839      	ldr	r0, [pc, #228]	; (8003e14 <consoleRTCSettings+0x620>)
 8003d2e:	f009 ff21 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003d32:	e003      	b.n	8003d3c <consoleRTCSettings+0x548>
				default:
					send_uart3("\nEntered value if out of range\n Date not set");
 8003d34:	4842      	ldr	r0, [pc, #264]	; (8003e40 <consoleRTCSettings+0x64c>)
 8003d36:	f7fd fee7 	bl	8001b08 <send_uart3>
					break;
 8003d3a:	bf00      	nop
			}
			return consoleRTCSettings();
 8003d3c:	f7ff fd5a 	bl	80037f4 <consoleRTCSettings>
 8003d40:	e061      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// set date - year
		case 325:
			temp16 = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - year in format of last 2 digits (ex. 2020 means entering 20)\n");
 8003d46:	483f      	ldr	r0, [pc, #252]	; (8003e44 <consoleRTCSettings+0x650>)
 8003d48:	f7fd fede 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	210a      	movs	r1, #10
 8003d50:	483d      	ldr	r0, [pc, #244]	; (8003e48 <consoleRTCSettings+0x654>)
 8003d52:	f7ff fb6d 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8003d56:	493c      	ldr	r1, [pc, #240]	; (8003e48 <consoleRTCSettings+0x654>)
 8003d58:	200a      	movs	r0, #10
 8003d5a:	f7ff fa63 	bl	8003224 <convertInputToInt>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 8003d62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d70:	2b1f      	cmp	r3, #31
 8003d72:	bf94      	ite	ls
 8003d74:	2301      	movls	r3, #1
 8003d76:	2300      	movhi	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d027      	beq.n	8003dd2 <consoleRTCSettings+0x5de>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered year: %d\n", 2000 + temp16);
 8003d82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d84:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003d88:	463b      	mov	r3, r7
 8003d8a:	4930      	ldr	r1, [pc, #192]	; (8003e4c <consoleRTCSettings+0x658>)
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f01a fe63 	bl	801ea58 <siprintf>
				send_uart3(tempBuf);
 8003d92:	463b      	mov	r3, r7
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd feb7 	bl	8001b08 <send_uart3>
				Date.Year = decimalToHex((uint8_t)temp16);
 8003d9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fa18 	bl	80031d4 <decimalToHex>
 8003da4:	4603      	mov	r3, r0
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <consoleRTCSettings+0x618>)
 8003daa:	70da      	strb	r2, [r3, #3]
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003dac:	2200      	movs	r2, #0
 8003dae:	4917      	ldr	r1, [pc, #92]	; (8003e0c <consoleRTCSettings+0x618>)
 8003db0:	4818      	ldr	r0, [pc, #96]	; (8003e14 <consoleRTCSettings+0x620>)
 8003db2:	f009 fd57 	bl	800d864 <HAL_RTC_SetDate>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <consoleRTCSettings+0x5d0>
				{
					send_uart3("ERROR - SAVING DATE\n");
 8003dbc:	4816      	ldr	r0, [pc, #88]	; (8003e18 <consoleRTCSettings+0x624>)
 8003dbe:	f7fd fea3 	bl	8001b08 <send_uart3>
 8003dc2:	e009      	b.n	8003dd8 <consoleRTCSettings+0x5e4>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003dc4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4812      	ldr	r0, [pc, #72]	; (8003e14 <consoleRTCSettings+0x620>)
 8003dcc:	f009 fed2 	bl	800db74 <HAL_RTCEx_BKUPWrite>
 8003dd0:	e002      	b.n	8003dd8 <consoleRTCSettings+0x5e4>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8003dd2:	481b      	ldr	r0, [pc, #108]	; (8003e40 <consoleRTCSettings+0x64c>)
 8003dd4:	f7fd fe98 	bl	8001b08 <send_uart3>
			}
			return consoleRTCSettings();
 8003dd8:	f7ff fd0c 	bl	80037f4 <consoleRTCSettings>
 8003ddc:	e013      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;

		// device settings menu
		case 888:
			send_uart3("\nGoing back to Device settings menu\n");
 8003dde:	481c      	ldr	r0, [pc, #112]	; (8003e50 <consoleRTCSettings+0x65c>)
 8003de0:	f7fd fe92 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 8003de4:	f000 f83a 	bl	8003e5c <consoleDeviceInterface>
 8003de8:	e00d      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// main menu
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 8003dea:	481a      	ldr	r0, [pc, #104]	; (8003e54 <consoleRTCSettings+0x660>)
 8003dec:	f7fd fe8c 	bl	8001b08 <send_uart3>
			return consoleInterface(123);
 8003df0:	207b      	movs	r0, #123	; 0x7b
 8003df2:	f000 fabf 	bl	8004374 <consoleInterface>
 8003df6:	e006      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 8003df8:	4817      	ldr	r0, [pc, #92]	; (8003e58 <consoleRTCSettings+0x664>)
 8003dfa:	f7fd fe85 	bl	8001b08 <send_uart3>
			return consoleRTCSettings();
 8003dfe:	f7ff fcf9 	bl	80037f4 <consoleRTCSettings>
 8003e02:	e000      	b.n	8003e06 <consoleRTCSettings+0x612>
		return;
 8003e04:	bf00      	nop


	return consoleRTCSettings();


}
 8003e06:	3738      	adds	r7, #56	; 0x38
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20006e60 	.word	0x20006e60
 8003e10:	080211ec 	.word	0x080211ec
 8003e14:	20003000 	.word	0x20003000
 8003e18:	08021120 	.word	0x08021120
 8003e1c:	08021208 	.word	0x08021208
 8003e20:	08021224 	.word	0x08021224
 8003e24:	0802123c 	.word	0x0802123c
 8003e28:	08021258 	.word	0x08021258
 8003e2c:	08021274 	.word	0x08021274
 8003e30:	08021290 	.word	0x08021290
 8003e34:	080212b0 	.word	0x080212b0
 8003e38:	080212d0 	.word	0x080212d0
 8003e3c:	080212f0 	.word	0x080212f0
 8003e40:	08021138 	.word	0x08021138
 8003e44:	08021310 	.word	0x08021310
 8003e48:	200087f8 	.word	0x200087f8
 8003e4c:	0802135c 	.word	0x0802135c
 8003e50:	08021370 	.word	0x08021370
 8003e54:	08020e8c 	.word	0x08020e8c
 8003e58:	08020ea8 	.word	0x08020ea8

08003e5c <consoleDeviceInterface>:
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

// subfunction to hanhle console inputs for device settings menu
void consoleDeviceInterface(){
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b08f      	sub	sp, #60	; 0x3c
 8003e60:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 8003e66:	48b2      	ldr	r0, [pc, #712]	; (8004130 <consoleDeviceInterface+0x2d4>)
 8003e68:	f7fd fe4e 	bl	8001b08 <send_uart3>
			"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");


	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2103      	movs	r1, #3
 8003e70:	48b0      	ldr	r0, [pc, #704]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003e72:	f7ff fadd 	bl	8003430 <getConsoleInput>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if(stateFlag == 99){
 8003e7c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003e80:	2b63      	cmp	r3, #99	; 0x63
 8003e82:	f000 824d 	beq.w	8004320 <consoleDeviceInterface+0x4c4>
		return;
	}

	switch(convertInputToInt(3, inputData)){
 8003e86:	49ab      	ldr	r1, [pc, #684]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003e88:	2003      	movs	r0, #3
 8003e8a:	f7ff f9cb 	bl	8003224 <convertInputToInt>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f240 1233 	movw	r2, #307	; 0x133
 8003e94:	4293      	cmp	r3, r2
 8003e96:	f000 80cd 	beq.w	8004034 <consoleDeviceInterface+0x1d8>
 8003e9a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8003e9e:	da18      	bge.n	8003ed2 <consoleDeviceInterface+0x76>
 8003ea0:	f240 122f 	movw	r2, #303	; 0x12f
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d03b      	beq.n	8003f20 <consoleDeviceInterface+0xc4>
 8003ea8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003eac:	da07      	bge.n	8003ebe <consoleDeviceInterface+0x62>
 8003eae:	f240 122d 	movw	r2, #301	; 0x12d
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02b      	beq.n	8003f0e <consoleDeviceInterface+0xb2>
 8003eb6:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8003eba:	d02e      	beq.n	8003f1a <consoleDeviceInterface+0xbe>
 8003ebc:	e22a      	b.n	8004314 <consoleDeviceInterface+0x4b8>
 8003ebe:	f240 1231 	movw	r2, #305	; 0x131
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	f000 8081 	beq.w	8003fca <consoleDeviceInterface+0x16e>
 8003ec8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8003ecc:	f280 8083 	bge.w	8003fd6 <consoleDeviceInterface+0x17a>
 8003ed0:	e075      	b.n	8003fbe <consoleDeviceInterface+0x162>
 8003ed2:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003ed6:	f000 815b 	beq.w	8004190 <consoleDeviceInterface+0x334>
 8003eda:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003ede:	dc09      	bgt.n	8003ef4 <consoleDeviceInterface+0x98>
 8003ee0:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8003ee4:	f000 80d8 	beq.w	8004098 <consoleDeviceInterface+0x23c>
 8003ee8:	f240 1235 	movw	r2, #309	; 0x135
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f000 80dc 	beq.w	80040aa <consoleDeviceInterface+0x24e>
 8003ef2:	e20f      	b.n	8004314 <consoleDeviceInterface+0x4b8>
 8003ef4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003ef8:	f000 81c8 	beq.w	800428c <consoleDeviceInterface+0x430>
 8003efc:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003f00:	f2c0 8185 	blt.w	800420e <consoleDeviceInterface+0x3b2>
 8003f04:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8003f08:	f000 81fd 	beq.w	8004306 <consoleDeviceInterface+0x4aa>
 8003f0c:	e202      	b.n	8004314 <consoleDeviceInterface+0x4b8>
		// show device settings menu
		case 301:
			send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 8003f0e:	4888      	ldr	r0, [pc, #544]	; (8004130 <consoleDeviceInterface+0x2d4>)
 8003f10:	f7fd fdfa 	bl	8001b08 <send_uart3>
						"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");
			return consoleDeviceInterface();
 8003f14:	f7ff ffa2 	bl	8003e5c <consoleDeviceInterface>
 8003f18:	e203      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// go to RTC settings submenu
		case 302:
			return consoleRTCSettings();
 8003f1a:	f7ff fc6b 	bl	80037f4 <consoleRTCSettings>
 8003f1e:	e200      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// choose storing method
		case 303:
			send_uart3("\nChoose storing method\n\n 1 - COM port\n 2 - SD Card\n 3 - USB Flash Drive\n 0 - Exit, no change\n");
 8003f20:	4885      	ldr	r0, [pc, #532]	; (8004138 <consoleDeviceInterface+0x2dc>)
 8003f22:	f7fd fdf1 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8003f26:	2201      	movs	r2, #1
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4882      	ldr	r0, [pc, #520]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003f2c:	f7ff fa80 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003f30:	4980      	ldr	r1, [pc, #512]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003f32:	2001      	movs	r0, #1
 8003f34:	f7ff f976 	bl	8003224 <convertInputToInt>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d838      	bhi.n	8003fb0 <consoleDeviceInterface+0x154>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <consoleDeviceInterface+0xe8>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003fa9 	.word	0x08003fa9
 8003f48:	08003f55 	.word	0x08003f55
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f8d 	.word	0x08003f8d
			case 1:
				settings.isLoggingToConsole = 1;
 8003f54:	4b79      	ldr	r3, [pc, #484]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 8003f5a:	4b78      	ldr	r3, [pc, #480]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 8003f60:	4b76      	ldr	r3, [pc, #472]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: COM port\n");
 8003f68:	4875      	ldr	r0, [pc, #468]	; (8004140 <consoleDeviceInterface+0x2e4>)
 8003f6a:	f7fd fdcd 	bl	8001b08 <send_uart3>
				break;
 8003f6e:	e023      	b.n	8003fb8 <consoleDeviceInterface+0x15c>
			case 2:
				settings.isLoggingToConsole = 0;
 8003f70:	4b72      	ldr	r3, [pc, #456]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 1;
 8003f76:	4b71      	ldr	r3, [pc, #452]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 8003f7c:	4b6f      	ldr	r3, [pc, #444]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: SD Card\n");
 8003f84:	486f      	ldr	r0, [pc, #444]	; (8004144 <consoleDeviceInterface+0x2e8>)
 8003f86:	f7fd fdbf 	bl	8001b08 <send_uart3>
				break;
 8003f8a:	e015      	b.n	8003fb8 <consoleDeviceInterface+0x15c>
			case 3:
				settings.isLoggingToConsole = 0;
 8003f8c:	4b6b      	ldr	r3, [pc, #428]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 8003f92:	4b6a      	ldr	r3, [pc, #424]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 1;
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				//isLoggingToConsole = 1;
				//isLoggingToSD = 1;
				send_uart3("\nStoring method: USB Flash Drive\n");
 8003fa0:	4869      	ldr	r0, [pc, #420]	; (8004148 <consoleDeviceInterface+0x2ec>)
 8003fa2:	f7fd fdb1 	bl	8001b08 <send_uart3>
				break;
 8003fa6:	e007      	b.n	8003fb8 <consoleDeviceInterface+0x15c>
			case 0:
				send_uart3("\nStoring method: UNCHANGED\n");
 8003fa8:	4868      	ldr	r0, [pc, #416]	; (800414c <consoleDeviceInterface+0x2f0>)
 8003faa:	f7fd fdad 	bl	8001b08 <send_uart3>
				break;
 8003fae:	e003      	b.n	8003fb8 <consoleDeviceInterface+0x15c>
			default:
				send_uart3("\nStoring method: UNDEFINED\n");
 8003fb0:	4867      	ldr	r0, [pc, #412]	; (8004150 <consoleDeviceInterface+0x2f4>)
 8003fb2:	f7fd fda9 	bl	8001b08 <send_uart3>
				break;
 8003fb6:	bf00      	nop
			}
			return consoleDeviceInterface();
 8003fb8:	f7ff ff50 	bl	8003e5c <consoleDeviceInterface>
 8003fbc:	e1b1      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// check SD card
		case 304:
			send_uart3("\nChecking SD card\n");
 8003fbe:	4865      	ldr	r0, [pc, #404]	; (8004154 <consoleDeviceInterface+0x2f8>)
 8003fc0:	f7fd fda2 	bl	8001b08 <send_uart3>

			return consoleDeviceInterface();
 8003fc4:	f7ff ff4a 	bl	8003e5c <consoleDeviceInterface>
 8003fc8:	e1ab      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// check USB flash drive
		case 305:
			send_uart3("\nChecking USB flash drive\n");
 8003fca:	4863      	ldr	r0, [pc, #396]	; (8004158 <consoleDeviceInterface+0x2fc>)
 8003fcc:	f7fd fd9c 	bl	8001b08 <send_uart3>

			return consoleDeviceInterface();
 8003fd0:	f7ff ff44 	bl	8003e5c <consoleDeviceInterface>
 8003fd4:	e1a5      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// perform DC offset calibration
		case 306:
			send_uart3("\nDo you really want to perform offset calibration (You will lose previous DC offset calibration value)\n 1 - YES, PERFORM CALIBRATION\n 2 - NO, I DONT WANT TO\n"
 8003fd6:	4861      	ldr	r0, [pc, #388]	; (800415c <consoleDeviceInterface+0x300>)
 8003fd8:	f7fd fd96 	bl	8001b08 <send_uart3>
					" !! BEFORE YOU ANSWER !!\n UNPLUG all measured devices from device (inc. measuring plugs) and then start procedure)\n");
			getConsoleInput(&inputData, 1, 1);
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2101      	movs	r1, #1
 8003fe0:	4854      	ldr	r0, [pc, #336]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003fe2:	f7ff fa25 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003fe6:	4953      	ldr	r1, [pc, #332]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f7ff f91b 	bl	8003224 <convertInputToInt>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d002      	beq.n	8003ffa <consoleDeviceInterface+0x19e>
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d012      	beq.n	800401e <consoleDeviceInterface+0x1c2>
 8003ff8:	e015      	b.n	8004026 <consoleDeviceInterface+0x1ca>
			case 1:
				send_uart3("\nOffset calibration - started\n");
 8003ffa:	4859      	ldr	r0, [pc, #356]	; (8004160 <consoleDeviceInterface+0x304>)
 8003ffc:	f7fd fd84 	bl	8001b08 <send_uart3>
				adc_compensateOffset();
 8004000:	f7fe fcdc 	bl	80029bc <adc_compensateOffset>
				send_uart3("\nOffset calibration - finished\n");
 8004004:	4857      	ldr	r0, [pc, #348]	; (8004164 <consoleDeviceInterface+0x308>)
 8004006:	f7fd fd7f 	bl	8001b08 <send_uart3>
				writeEEPROM_AT24();
 800400a:	f7fd fe71 	bl	8001cf0 <writeEEPROM_AT24>
				microDelay(5);
 800400e:	2005      	movs	r0, #5
 8004010:	f7fd fda6 	bl	8001b60 <microDelay>
				readEEPROM_AT24();
 8004014:	f7fd ffe8 	bl	8001fe8 <readEEPROM_AT24>
				printSettingsValues();
 8004018:	f7ff f934 	bl	8003284 <printSettingsValues>
				break;
 800401c:	e007      	b.n	800402e <consoleDeviceInterface+0x1d2>
			case 2:
				send_uart3("\nOffset value: UNCHANGED\n");
 800401e:	4852      	ldr	r0, [pc, #328]	; (8004168 <consoleDeviceInterface+0x30c>)
 8004020:	f7fd fd72 	bl	8001b08 <send_uart3>
				break;
 8004024:	e003      	b.n	800402e <consoleDeviceInterface+0x1d2>
			default:
				send_uart3("\nOffset value: UNCHANGED\n");
 8004026:	4850      	ldr	r0, [pc, #320]	; (8004168 <consoleDeviceInterface+0x30c>)
 8004028:	f7fd fd6e 	bl	8001b08 <send_uart3>
				break;
 800402c:	bf00      	nop
			}

			return consoleDeviceInterface();
 800402e:	f7ff ff15 	bl	8003e5c <consoleDeviceInterface>
 8004032:	e176      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// zero DC offset value / disable calibration
		case 307:
			send_uart3("\nDo you really want to zero offset calibration value (You will lose DC offset calibration)\n 1 - YES, ZERO DC OFFSET\n 2 - NO, I DONT WANT TO\n");
 8004034:	484d      	ldr	r0, [pc, #308]	; (800416c <consoleDeviceInterface+0x310>)
 8004036:	f7fd fd67 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 800403a:	2201      	movs	r2, #1
 800403c:	2101      	movs	r1, #1
 800403e:	483d      	ldr	r0, [pc, #244]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8004040:	f7ff f9f6 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8004044:	493b      	ldr	r1, [pc, #236]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8004046:	2001      	movs	r0, #1
 8004048:	f7ff f8ec 	bl	8003224 <convertInputToInt>
 800404c:	4603      	mov	r3, r0
 800404e:	2b01      	cmp	r3, #1
 8004050:	d002      	beq.n	8004058 <consoleDeviceInterface+0x1fc>
 8004052:	2b02      	cmp	r3, #2
 8004054:	d014      	beq.n	8004080 <consoleDeviceInterface+0x224>
 8004056:	e017      	b.n	8004088 <consoleDeviceInterface+0x22c>
			case 1:
				settings.lastOffsetValue = 0.0;
 8004058:	4a38      	ldr	r2, [pc, #224]	; (800413c <consoleDeviceInterface+0x2e0>)
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	f04f 0400 	mov.w	r4, #0
 8004062:	e9c2 3406 	strd	r3, r4, [r2, #24]
				writeEEPROM_AT24();
 8004066:	f7fd fe43 	bl	8001cf0 <writeEEPROM_AT24>
				microDelay(5);
 800406a:	2005      	movs	r0, #5
 800406c:	f7fd fd78 	bl	8001b60 <microDelay>
				readEEPROM_AT24();
 8004070:	f7fd ffba 	bl	8001fe8 <readEEPROM_AT24>
				printSettingsValues();
 8004074:	f7ff f906 	bl	8003284 <printSettingsValues>
				send_uart3("\nDC offset value: ZEROED\n");
 8004078:	483d      	ldr	r0, [pc, #244]	; (8004170 <consoleDeviceInterface+0x314>)
 800407a:	f7fd fd45 	bl	8001b08 <send_uart3>
				break;
 800407e:	e007      	b.n	8004090 <consoleDeviceInterface+0x234>
			case 2:
				send_uart3("\nDC offset value: UNCHANGED\n");
 8004080:	483c      	ldr	r0, [pc, #240]	; (8004174 <consoleDeviceInterface+0x318>)
 8004082:	f7fd fd41 	bl	8001b08 <send_uart3>
				break;
 8004086:	e003      	b.n	8004090 <consoleDeviceInterface+0x234>
			default:
				send_uart3("\nDC offset value: UNCHANGED\n");
 8004088:	483a      	ldr	r0, [pc, #232]	; (8004174 <consoleDeviceInterface+0x318>)
 800408a:	f7fd fd3d 	bl	8001b08 <send_uart3>
				break;
 800408e:	bf00      	nop
			}
			break;
 8004090:	bf00      	nop
			send_uart3("\nUNDEFINED SELECTION\n");
			return consoleDeviceInterface();
			break;
	}

	return consoleDeviceInterface();
 8004092:	f7ff fee3 	bl	8003e5c <consoleDeviceInterface>
 8004096:	e144      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nDevice selfcheck - started\n");
 8004098:	4837      	ldr	r0, [pc, #220]	; (8004178 <consoleDeviceInterface+0x31c>)
 800409a:	f7fd fd35 	bl	8001b08 <send_uart3>
			send_uart3("\nDevice selfcheck - finished\n");
 800409e:	4837      	ldr	r0, [pc, #220]	; (800417c <consoleDeviceInterface+0x320>)
 80040a0:	f7fd fd32 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 80040a4:	f7ff feda 	bl	8003e5c <consoleDeviceInterface>
 80040a8:	e13b      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			temp16 = settings.powerSourceVoltage;
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <consoleDeviceInterface+0x2e0>)
 80040ac:	8c1b      	ldrh	r3, [r3, #32]
 80040ae:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source voltage in mV (anywhere between 500 mV - 5500 mV) or enter 0 to exit without change\n");
 80040b0:	4833      	ldr	r0, [pc, #204]	; (8004180 <consoleDeviceInterface+0x324>)
 80040b2:	f7fd fd29 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80040b6:	2201      	movs	r2, #1
 80040b8:	210a      	movs	r1, #10
 80040ba:	481e      	ldr	r0, [pc, #120]	; (8004134 <consoleDeviceInterface+0x2d8>)
 80040bc:	f7ff f9b8 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80040c0:	491c      	ldr	r1, [pc, #112]	; (8004134 <consoleDeviceInterface+0x2d8>)
 80040c2:	200a      	movs	r0, #10
 80040c4:	f7ff f8ae 	bl	8003224 <convertInputToInt>
 80040c8:	4603      	mov	r3, r0
 80040ca:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 500 & temp16 <= 5500){
 80040cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040ce:	f240 12f3 	movw	r2, #499	; 0x1f3
 80040d2:	4293      	cmp	r3, r2
 80040d4:	bf8c      	ite	hi
 80040d6:	2301      	movhi	r3, #1
 80040d8:	2300      	movls	r3, #0
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040de:	f241 517c 	movw	r1, #5500	; 0x157c
 80040e2:	428b      	cmp	r3, r1
 80040e4:	bf94      	ite	ls
 80040e6:	2301      	movls	r3, #1
 80040e8:	2300      	movhi	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	4013      	ands	r3, r2
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00f      	beq.n	8004114 <consoleDeviceInterface+0x2b8>
				sprintf(tempBuf,"New entered value is: %d mV\n", temp16);
 80040f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80040f6:	463b      	mov	r3, r7
 80040f8:	4922      	ldr	r1, [pc, #136]	; (8004184 <consoleDeviceInterface+0x328>)
 80040fa:	4618      	mov	r0, r3
 80040fc:	f01a fcac 	bl	801ea58 <siprintf>
				send_uart3(tempBuf);
 8004100:	463b      	mov	r3, r7
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd fd00 	bl	8001b08 <send_uart3>
				settings.powerSourceVoltage = temp16;
 8004108:	4a0c      	ldr	r2, [pc, #48]	; (800413c <consoleDeviceInterface+0x2e0>)
 800410a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800410c:	8413      	strh	r3, [r2, #32]
				setPotenciomenters();
 800410e:	f7fe f8b3 	bl	8002278 <setPotenciomenters>
 8004112:	e009      	b.n	8004128 <consoleDeviceInterface+0x2cc>
			else if(temp16 == 0){
 8004114:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <consoleDeviceInterface+0x2c6>
				send_uart3("\nPower source - Voltage: UNCHANGED\n");
 800411a:	481b      	ldr	r0, [pc, #108]	; (8004188 <consoleDeviceInterface+0x32c>)
 800411c:	f7fd fcf4 	bl	8001b08 <send_uart3>
 8004120:	e002      	b.n	8004128 <consoleDeviceInterface+0x2cc>
				send_uart3("\nEntered value if out of range\n");
 8004122:	481a      	ldr	r0, [pc, #104]	; (800418c <consoleDeviceInterface+0x330>)
 8004124:	f7fd fcf0 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 8004128:	f7ff fe98 	bl	8003e5c <consoleDeviceInterface>
 800412c:	e0f9      	b.n	8004322 <consoleDeviceInterface+0x4c6>
 800412e:	bf00      	nop
 8004130:	08021398 	.word	0x08021398
 8004134:	200087f8 	.word	0x200087f8
 8004138:	08021550 	.word	0x08021550
 800413c:	20000018 	.word	0x20000018
 8004140:	080215b0 	.word	0x080215b0
 8004144:	080215cc 	.word	0x080215cc
 8004148:	080215e8 	.word	0x080215e8
 800414c:	0802160c 	.word	0x0802160c
 8004150:	08021628 	.word	0x08021628
 8004154:	08021644 	.word	0x08021644
 8004158:	08021658 	.word	0x08021658
 800415c:	08021674 	.word	0x08021674
 8004160:	08021788 	.word	0x08021788
 8004164:	080217a8 	.word	0x080217a8
 8004168:	080217c8 	.word	0x080217c8
 800416c:	080217e4 	.word	0x080217e4
 8004170:	08021874 	.word	0x08021874
 8004174:	08021890 	.word	0x08021890
 8004178:	080218b0 	.word	0x080218b0
 800417c:	080218d0 	.word	0x080218d0
 8004180:	080218f0 	.word	0x080218f0
 8004184:	08021964 	.word	0x08021964
 8004188:	08021984 	.word	0x08021984
 800418c:	08020bc8 	.word	0x08020bc8
			temp16 = settings.powerSourceCurrent;
 8004190:	4b65      	ldr	r3, [pc, #404]	; (8004328 <consoleDeviceInterface+0x4cc>)
 8004192:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004194:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source current limit in mA (anywhere between 10 mA - 500 mA) or enter 0 to exit without change\n");
 8004196:	4865      	ldr	r0, [pc, #404]	; (800432c <consoleDeviceInterface+0x4d0>)
 8004198:	f7fd fcb6 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 800419c:	2201      	movs	r2, #1
 800419e:	210a      	movs	r1, #10
 80041a0:	4863      	ldr	r0, [pc, #396]	; (8004330 <consoleDeviceInterface+0x4d4>)
 80041a2:	f7ff f945 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80041a6:	4962      	ldr	r1, [pc, #392]	; (8004330 <consoleDeviceInterface+0x4d4>)
 80041a8:	200a      	movs	r0, #10
 80041aa:	f7ff f83b 	bl	8003224 <convertInputToInt>
 80041ae:	4603      	mov	r3, r0
 80041b0:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 10 & temp16 <= 500){
 80041b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	bf8c      	ite	hi
 80041b8:	2301      	movhi	r3, #1
 80041ba:	2300      	movls	r3, #0
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041c4:	bf94      	ite	ls
 80041c6:	2301      	movls	r3, #1
 80041c8:	2300      	movhi	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4013      	ands	r3, r2
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00f      	beq.n	80041f4 <consoleDeviceInterface+0x398>
				sprintf(tempBuf,"New entered value is: %d mA\n", temp16);
 80041d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80041d6:	463b      	mov	r3, r7
 80041d8:	4956      	ldr	r1, [pc, #344]	; (8004334 <consoleDeviceInterface+0x4d8>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f01a fc3c 	bl	801ea58 <siprintf>
				send_uart3(tempBuf);
 80041e0:	463b      	mov	r3, r7
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fc90 	bl	8001b08 <send_uart3>
				settings.powerSourceCurrent = temp16;
 80041e8:	4a4f      	ldr	r2, [pc, #316]	; (8004328 <consoleDeviceInterface+0x4cc>)
 80041ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ec:	8453      	strh	r3, [r2, #34]	; 0x22
				setPotenciomenters();
 80041ee:	f7fe f843 	bl	8002278 <setPotenciomenters>
 80041f2:	e009      	b.n	8004208 <consoleDeviceInterface+0x3ac>
			else if(temp16 == 0){
 80041f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <consoleDeviceInterface+0x3a6>
				send_uart3("\nPower source - Current: UNCHANGED\n");
 80041fa:	484f      	ldr	r0, [pc, #316]	; (8004338 <consoleDeviceInterface+0x4dc>)
 80041fc:	f7fd fc84 	bl	8001b08 <send_uart3>
 8004200:	e002      	b.n	8004208 <consoleDeviceInterface+0x3ac>
				send_uart3("\nEntered value if out of range\n");
 8004202:	484e      	ldr	r0, [pc, #312]	; (800433c <consoleDeviceInterface+0x4e0>)
 8004204:	f7fd fc80 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 8004208:	f7ff fe28 	bl	8003e5c <consoleDeviceInterface>
 800420c:	e089      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nDo you want to enable power source\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n");
 800420e:	484c      	ldr	r0, [pc, #304]	; (8004340 <consoleDeviceInterface+0x4e4>)
 8004210:	f7fd fc7a 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8004214:	2201      	movs	r2, #1
 8004216:	2101      	movs	r1, #1
 8004218:	4845      	ldr	r0, [pc, #276]	; (8004330 <consoleDeviceInterface+0x4d4>)
 800421a:	f7ff f909 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 800421e:	4944      	ldr	r1, [pc, #272]	; (8004330 <consoleDeviceInterface+0x4d4>)
 8004220:	2001      	movs	r0, #1
 8004222:	f7fe ffff 	bl	8003224 <convertInputToInt>
 8004226:	4603      	mov	r3, r0
 8004228:	2b01      	cmp	r3, #1
 800422a:	d002      	beq.n	8004232 <consoleDeviceInterface+0x3d6>
 800422c:	2b02      	cmp	r3, #2
 800422e:	d013      	beq.n	8004258 <consoleDeviceInterface+0x3fc>
 8004230:	e025      	b.n	800427e <consoleDeviceInterface+0x422>
				settings.powerSourceEnable = 1;
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <consoleDeviceInterface+0x4cc>)
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 800423a:	2201      	movs	r2, #1
 800423c:	2110      	movs	r1, #16
 800423e:	4841      	ldr	r0, [pc, #260]	; (8004344 <consoleDeviceInterface+0x4e8>)
 8004240:	f005 fb08 	bl	8009854 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8004244:	2201      	movs	r2, #1
 8004246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800424a:	483f      	ldr	r0, [pc, #252]	; (8004348 <consoleDeviceInterface+0x4ec>)
 800424c:	f005 fb02 	bl	8009854 <HAL_GPIO_WritePin>
				send_uart3("\nPower source: ENABLED\n");
 8004250:	483e      	ldr	r0, [pc, #248]	; (800434c <consoleDeviceInterface+0x4f0>)
 8004252:	f7fd fc59 	bl	8001b08 <send_uart3>
				break;
 8004256:	e016      	b.n	8004286 <consoleDeviceInterface+0x42a>
				settings.powerSourceEnable = 0;
 8004258:	4b33      	ldr	r3, [pc, #204]	; (8004328 <consoleDeviceInterface+0x4cc>)
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				send_uart3("\nPower source: DISABLED\n");
 8004260:	483b      	ldr	r0, [pc, #236]	; (8004350 <consoleDeviceInterface+0x4f4>)
 8004262:	f7fd fc51 	bl	8001b08 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8004266:	2200      	movs	r2, #0
 8004268:	2110      	movs	r1, #16
 800426a:	4836      	ldr	r0, [pc, #216]	; (8004344 <consoleDeviceInterface+0x4e8>)
 800426c:	f005 faf2 	bl	8009854 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8004270:	2200      	movs	r2, #0
 8004272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004276:	4834      	ldr	r0, [pc, #208]	; (8004348 <consoleDeviceInterface+0x4ec>)
 8004278:	f005 faec 	bl	8009854 <HAL_GPIO_WritePin>
				break;
 800427c:	e003      	b.n	8004286 <consoleDeviceInterface+0x42a>
				send_uart3("\nPower source: NO CHANGE\n");
 800427e:	4835      	ldr	r0, [pc, #212]	; (8004354 <consoleDeviceInterface+0x4f8>)
 8004280:	f7fd fc42 	bl	8001b08 <send_uart3>
				break;
 8004284:	bf00      	nop
			return consoleDeviceInterface();
 8004286:	f7ff fde9 	bl	8003e5c <consoleDeviceInterface>
 800428a:	e04a      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nChoose behaviour of power source\n 1 - Enable when starting measuring\n 2 - Enable when starting device\n 3 - Leave to user (manually enable/disable)\n 4 - Exit without change\n");
 800428c:	4832      	ldr	r0, [pc, #200]	; (8004358 <consoleDeviceInterface+0x4fc>)
 800428e:	f7fd fc3b 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8004292:	2201      	movs	r2, #1
 8004294:	2101      	movs	r1, #1
 8004296:	4826      	ldr	r0, [pc, #152]	; (8004330 <consoleDeviceInterface+0x4d4>)
 8004298:	f7ff f8ca 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 800429c:	4924      	ldr	r1, [pc, #144]	; (8004330 <consoleDeviceInterface+0x4d4>)
 800429e:	2001      	movs	r0, #1
 80042a0:	f7fe ffc0 	bl	8003224 <convertInputToInt>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d00b      	beq.n	80042c2 <consoleDeviceInterface+0x466>
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d01c      	beq.n	80042e8 <consoleDeviceInterface+0x48c>
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d122      	bne.n	80042f8 <consoleDeviceInterface+0x49c>
				settings.powerSourceEnableMode = 1;
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <consoleDeviceInterface+0x4cc>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting measuring\n");
 80042ba:	4828      	ldr	r0, [pc, #160]	; (800435c <consoleDeviceInterface+0x500>)
 80042bc:	f7fd fc24 	bl	8001b08 <send_uart3>
				break;
 80042c0:	e01e      	b.n	8004300 <consoleDeviceInterface+0x4a4>
				settings.powerSourceEnableMode = 2;
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <consoleDeviceInterface+0x4cc>)
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting device\n");
 80042ca:	4825      	ldr	r0, [pc, #148]	; (8004360 <consoleDeviceInterface+0x504>)
 80042cc:	f7fd fc1c 	bl	8001b08 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 80042d0:	2201      	movs	r2, #1
 80042d2:	2110      	movs	r1, #16
 80042d4:	481b      	ldr	r0, [pc, #108]	; (8004344 <consoleDeviceInterface+0x4e8>)
 80042d6:	f005 fabd 	bl	8009854 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 80042da:	2201      	movs	r2, #1
 80042dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042e0:	4819      	ldr	r0, [pc, #100]	; (8004348 <consoleDeviceInterface+0x4ec>)
 80042e2:	f005 fab7 	bl	8009854 <HAL_GPIO_WritePin>
				break;
 80042e6:	e00b      	b.n	8004300 <consoleDeviceInterface+0x4a4>
				settings.powerSourceEnableMode = 0;
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <consoleDeviceInterface+0x4cc>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable by user\n");
 80042f0:	481c      	ldr	r0, [pc, #112]	; (8004364 <consoleDeviceInterface+0x508>)
 80042f2:	f7fd fc09 	bl	8001b08 <send_uart3>
				break;
 80042f6:	e003      	b.n	8004300 <consoleDeviceInterface+0x4a4>
				send_uart3("\nPower source enable mode: NO CHANGE\n");
 80042f8:	481b      	ldr	r0, [pc, #108]	; (8004368 <consoleDeviceInterface+0x50c>)
 80042fa:	f7fd fc05 	bl	8001b08 <send_uart3>
				break;
 80042fe:	bf00      	nop
			return consoleDeviceInterface();
 8004300:	f7ff fdac 	bl	8003e5c <consoleDeviceInterface>
 8004304:	e00d      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nGoing back to Main menu\n");
 8004306:	4819      	ldr	r0, [pc, #100]	; (800436c <consoleDeviceInterface+0x510>)
 8004308:	f7fd fbfe 	bl	8001b08 <send_uart3>
			return consoleInterface(123);
 800430c:	207b      	movs	r0, #123	; 0x7b
 800430e:	f000 f831 	bl	8004374 <consoleInterface>
 8004312:	e006      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nUNDEFINED SELECTION\n");
 8004314:	4816      	ldr	r0, [pc, #88]	; (8004370 <consoleDeviceInterface+0x514>)
 8004316:	f7fd fbf7 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 800431a:	f7ff fd9f 	bl	8003e5c <consoleDeviceInterface>
 800431e:	e000      	b.n	8004322 <consoleDeviceInterface+0x4c6>
		return;
 8004320:	bf00      	nop


}
 8004322:	373c      	adds	r7, #60	; 0x3c
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}
 8004328:	20000018 	.word	0x20000018
 800432c:	080219a8 	.word	0x080219a8
 8004330:	200087f8 	.word	0x200087f8
 8004334:	08021a20 	.word	0x08021a20
 8004338:	08021a40 	.word	0x08021a40
 800433c:	08020bc8 	.word	0x08020bc8
 8004340:	08021a64 	.word	0x08021a64
 8004344:	40020000 	.word	0x40020000
 8004348:	40020400 	.word	0x40020400
 800434c:	08021aac 	.word	0x08021aac
 8004350:	08021ac4 	.word	0x08021ac4
 8004354:	08021ae0 	.word	0x08021ae0
 8004358:	08021afc 	.word	0x08021afc
 800435c:	08021bac 	.word	0x08021bac
 8004360:	08021be8 	.word	0x08021be8
 8004364:	08021c20 	.word	0x08021c20
 8004368:	08021c4c 	.word	0x08021c4c
 800436c:	08020e8c 	.word	0x08020e8c
 8004370:	08020ea8 	.word	0x08020ea8

08004374 <consoleInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void consoleInterface(uint8_t flag){
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]

	uint8_t stateFlag = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]

	if(flag == 0){
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10d      	bne.n	80043a4 <consoleInterface+0x30>
		HAL_UART_Receive_IT(&huart6, inputData, 3);
		while(isWaitingForData == 1);
		*/
		//send_uart("flag0");
		//microDelay(50);
		microDelay(1);
 8004388:	2001      	movs	r0, #1
 800438a:	f7fd fbe9 	bl	8001b60 <microDelay>
		return;
	}


	// get input command
	stateFlag = getConsoleInput(inputData, 3, 0);
 800438e:	2200      	movs	r2, #0
 8004390:	2103      	movs	r1, #3
 8004392:	4864      	ldr	r0, [pc, #400]	; (8004524 <consoleInterface+0x1b0>)
 8004394:	f7ff f84c 	bl	8003430 <getConsoleInput>
 8004398:	4603      	mov	r3, r0
 800439a:	73fb      	strb	r3, [r7, #15]

	// timeout or no data handler
	if(stateFlag == 99){
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b63      	cmp	r3, #99	; 0x63
 80043a0:	d10b      	bne.n	80043ba <consoleInterface+0x46>
		return;
 80043a2:	e0bc      	b.n	800451e <consoleInterface+0x1aa>
	else if(flag == 11){
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	2b0b      	cmp	r3, #11
 80043a8:	d103      	bne.n	80043b2 <consoleInterface+0x3e>
		send_uart3("Input timeout");
 80043aa:	485f      	ldr	r0, [pc, #380]	; (8004528 <consoleInterface+0x1b4>)
 80043ac:	f7fd fbac 	bl	8001b08 <send_uart3>
		return;
 80043b0:	e0b5      	b.n	800451e <consoleInterface+0x1aa>
		send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 80043b2:	485e      	ldr	r0, [pc, #376]	; (800452c <consoleInterface+0x1b8>)
 80043b4:	f7fd fba8 	bl	8001b08 <send_uart3>
		return;
 80043b8:	e0b1      	b.n	800451e <consoleInterface+0x1aa>
	}

	switch(convertInputToInt(3, inputData)){
 80043ba:	495a      	ldr	r1, [pc, #360]	; (8004524 <consoleInterface+0x1b0>)
 80043bc:	2003      	movs	r0, #3
 80043be:	f7fe ff31 	bl	8003224 <convertInputToInt>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b68      	cmp	r3, #104	; 0x68
 80043c6:	d02e      	beq.n	8004426 <consoleInterface+0xb2>
 80043c8:	2b68      	cmp	r3, #104	; 0x68
 80043ca:	dc0c      	bgt.n	80043e6 <consoleInterface+0x72>
 80043cc:	2b65      	cmp	r3, #101	; 0x65
 80043ce:	d01a      	beq.n	8004406 <consoleInterface+0x92>
 80043d0:	2b65      	cmp	r3, #101	; 0x65
 80043d2:	dc03      	bgt.n	80043dc <consoleInterface+0x68>
 80043d4:	2b63      	cmp	r3, #99	; 0x63
 80043d6:	f000 8094 	beq.w	8004502 <consoleInterface+0x18e>
 80043da:	e099      	b.n	8004510 <consoleInterface+0x19c>
 80043dc:	2b66      	cmp	r3, #102	; 0x66
 80043de:	d01c      	beq.n	800441a <consoleInterface+0xa6>
 80043e0:	2b67      	cmp	r3, #103	; 0x67
 80043e2:	d01d      	beq.n	8004420 <consoleInterface+0xac>
 80043e4:	e094      	b.n	8004510 <consoleInterface+0x19c>
 80043e6:	2b6f      	cmp	r3, #111	; 0x6f
 80043e8:	d05c      	beq.n	80044a4 <consoleInterface+0x130>
 80043ea:	2b6f      	cmp	r3, #111	; 0x6f
 80043ec:	dc04      	bgt.n	80043f8 <consoleInterface+0x84>
 80043ee:	2b69      	cmp	r3, #105	; 0x69
 80043f0:	d021      	beq.n	8004436 <consoleInterface+0xc2>
 80043f2:	2b6a      	cmp	r3, #106	; 0x6a
 80043f4:	d02c      	beq.n	8004450 <consoleInterface+0xdc>
 80043f6:	e08b      	b.n	8004510 <consoleInterface+0x19c>
 80043f8:	2bc9      	cmp	r3, #201	; 0xc9
 80043fa:	d008      	beq.n	800440e <consoleInterface+0x9a>
 80043fc:	f240 122d 	movw	r2, #301	; 0x12d
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <consoleInterface+0xa0>
 8004404:	e084      	b.n	8004510 <consoleInterface+0x19c>
	//switch (convertInputToInt(3, &getConsoleInput(3))){
	//switch (convertInputToInt(3, &inputData)) {
		// Show default menu
		case 101:
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8004406:	4849      	ldr	r0, [pc, #292]	; (800452c <consoleInterface+0x1b8>)
 8004408:	f7fd fb7e 	bl	8001b08 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 800440c:	e087      	b.n	800451e <consoleInterface+0x1aa>
		// Show measuring settings menu
		case 201:
			consoleMeasuringInterface();
 800440e:	f7ff f893 	bl	8003538 <consoleMeasuringInterface>
			break;
 8004412:	e084      	b.n	800451e <consoleInterface+0x1aa>
		// Show device settings menu
		case 301:
			consoleDeviceInterface();
 8004414:	f7ff fd22 	bl	8003e5c <consoleDeviceInterface>
			break;
 8004418:	e081      	b.n	800451e <consoleInterface+0x1aa>
		// Show current settings
		case 102:
			printSettingsValues();
 800441a:	f7fe ff33 	bl	8003284 <printSettingsValues>
			break;
 800441e:	e07e      	b.n	800451e <consoleInterface+0x1aa>
		// show last measured values
		case 103:
			printLastMeasuredValues();
 8004420:	f7fe ff8c 	bl	800333c <printLastMeasuredValues>
			break;
 8004424:	e07b      	b.n	800451e <consoleInterface+0x1aa>
		// read EEPROM
		case 104:
			readEEPROM_AT24();
 8004426:	f7fd fddf 	bl	8001fe8 <readEEPROM_AT24>
			printSettingsValues();
 800442a:	f7fe ff2b 	bl	8003284 <printSettingsValues>
			send_uart3("\n EEPROM read\n");
 800442e:	4840      	ldr	r0, [pc, #256]	; (8004530 <consoleInterface+0x1bc>)
 8004430:	f7fd fb6a 	bl	8001b08 <send_uart3>
			break;
 8004434:	e073      	b.n	800451e <consoleInterface+0x1aa>
		// write EEPROM
		case 105:
			writeEEPROM_AT24();
 8004436:	f7fd fc5b 	bl	8001cf0 <writeEEPROM_AT24>
			microDelay(5);
 800443a:	2005      	movs	r0, #5
 800443c:	f7fd fb90 	bl	8001b60 <microDelay>
			readEEPROM_AT24();
 8004440:	f7fd fdd2 	bl	8001fe8 <readEEPROM_AT24>
			printSettingsValues();
 8004444:	f7fe ff1e 	bl	8003284 <printSettingsValues>
			send_uart3("\n EEPROM written and read back\n");
 8004448:	483a      	ldr	r0, [pc, #232]	; (8004534 <consoleInterface+0x1c0>)
 800444a:	f7fd fb5d 	bl	8001b08 <send_uart3>
			break;
 800444e:	e066      	b.n	800451e <consoleInterface+0x1aa>
		// initialize EEPROM
		case 106:
			send_uart3("\nDou you really want to initialize EEPROM (You will lose all user settings)?\n\n1 - YES, INIT AND SAVE\n2 - NO, I DONT WANT TO\n");
 8004450:	4839      	ldr	r0, [pc, #228]	; (8004538 <consoleInterface+0x1c4>)
 8004452:	f7fd fb59 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8004456:	2201      	movs	r2, #1
 8004458:	2101      	movs	r1, #1
 800445a:	4832      	ldr	r0, [pc, #200]	; (8004524 <consoleInterface+0x1b0>)
 800445c:	f7fe ffe8 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8004460:	4930      	ldr	r1, [pc, #192]	; (8004524 <consoleInterface+0x1b0>)
 8004462:	2001      	movs	r0, #1
 8004464:	f7fe fede 	bl	8003224 <convertInputToInt>
 8004468:	4603      	mov	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d002      	beq.n	8004474 <consoleInterface+0x100>
 800446e:	2b02      	cmp	r3, #2
 8004470:	d00f      	beq.n	8004492 <consoleInterface+0x11e>
 8004472:	e012      	b.n	800449a <consoleInterface+0x126>
			case 1:
				initEEPROM();
 8004474:	f7fd febc 	bl	80021f0 <initEEPROM>
				writeEEPROM_AT24();
 8004478:	f7fd fc3a 	bl	8001cf0 <writeEEPROM_AT24>
				microDelay(5);
 800447c:	2005      	movs	r0, #5
 800447e:	f7fd fb6f 	bl	8001b60 <microDelay>
				readEEPROM_AT24();
 8004482:	f7fd fdb1 	bl	8001fe8 <readEEPROM_AT24>
				printSettingsValues();
 8004486:	f7fe fefd 	bl	8003284 <printSettingsValues>
				send_uart3("\n\nEEPROM INITIALIZED\n");
 800448a:	482c      	ldr	r0, [pc, #176]	; (800453c <consoleInterface+0x1c8>)
 800448c:	f7fd fb3c 	bl	8001b08 <send_uart3>
				break;
 8004490:	e007      	b.n	80044a2 <consoleInterface+0x12e>
			case 2:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 8004492:	482b      	ldr	r0, [pc, #172]	; (8004540 <consoleInterface+0x1cc>)
 8004494:	f7fd fb38 	bl	8001b08 <send_uart3>
				break;
 8004498:	e003      	b.n	80044a2 <consoleInterface+0x12e>
			default:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 800449a:	4829      	ldr	r0, [pc, #164]	; (8004540 <consoleInterface+0x1cc>)
 800449c:	f7fd fb34 	bl	8001b08 <send_uart3>
				break;
 80044a0:	bf00      	nop
			}
			break;
 80044a2:	e03c      	b.n	800451e <consoleInterface+0x1aa>
		// start measuring
		case 111:
			send_uart3("\n Measuring - started\n");
 80044a4:	4827      	ldr	r0, [pc, #156]	; (8004544 <consoleInterface+0x1d0>)
 80044a6:	f7fd fb2f 	bl	8001b08 <send_uart3>
			if (isMeasuring == 0) {
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <consoleInterface+0x1d4>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d113      	bne.n	80044dc <consoleInterface+0x168>
				//isLoggingToConsole = 1;
				if (settings.isTriggerActive == 0)
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <consoleInterface+0x1d8>)
 80044b6:	7b5b      	ldrb	r3, [r3, #13]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <consoleInterface+0x14e>
					isMeasuring = 1;
 80044bc:	4b22      	ldr	r3, [pc, #136]	; (8004548 <consoleInterface+0x1d4>)
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 1;
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <consoleInterface+0x1dc>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 0;
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <consoleInterface+0x1e0>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80044ce:	2201      	movs	r2, #1
 80044d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044d4:	4820      	ldr	r0, [pc, #128]	; (8004558 <consoleInterface+0x1e4>)
 80044d6:	f005 f9bd 	bl	8009854 <HAL_GPIO_WritePin>
				startOfMeasurement = 0;
				endOfMeasurement = 1;

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
			}
			break;
 80044da:	e020      	b.n	800451e <consoleInterface+0x1aa>
				isMeasuring = 0;
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <consoleInterface+0x1d4>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
				isTriggered = 0;
 80044e2:	4b1e      	ldr	r3, [pc, #120]	; (800455c <consoleInterface+0x1e8>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 0;
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <consoleInterface+0x1dc>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 1;
 80044ee:	4b19      	ldr	r3, [pc, #100]	; (8004554 <consoleInterface+0x1e0>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80044f4:	2200      	movs	r2, #0
 80044f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044fa:	4817      	ldr	r0, [pc, #92]	; (8004558 <consoleInterface+0x1e4>)
 80044fc:	f005 f9aa 	bl	8009854 <HAL_GPIO_WritePin>
			break;
 8004500:	e00d      	b.n	800451e <consoleInterface+0x1aa>
		// timeout error output
		case 99:
			send_uart3("\nERR-Input timeout\n");
 8004502:	4817      	ldr	r0, [pc, #92]	; (8004560 <consoleInterface+0x1ec>)
 8004504:	f7fd fb00 	bl	8001b08 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8004508:	4808      	ldr	r0, [pc, #32]	; (800452c <consoleInterface+0x1b8>)
 800450a:	f7fd fafd 	bl	8001b08 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 800450e:	e006      	b.n	800451e <consoleInterface+0x1aa>
		// all outher input combination output
		default:
			send_uart3("\nERR-Invalid input\n");
 8004510:	4814      	ldr	r0, [pc, #80]	; (8004564 <consoleInterface+0x1f0>)
 8004512:	f7fd faf9 	bl	8001b08 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8004516:	4805      	ldr	r0, [pc, #20]	; (800452c <consoleInterface+0x1b8>)
 8004518:	f7fd faf6 	bl	8001b08 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 800451c:	bf00      	nop





}
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	200087f8 	.word	0x200087f8
 8004528:	08021c74 	.word	0x08021c74
 800452c:	08021c84 	.word	0x08021c84
 8004530:	08021d68 	.word	0x08021d68
 8004534:	08021d78 	.word	0x08021d78
 8004538:	08021d98 	.word	0x08021d98
 800453c:	08021e18 	.word	0x08021e18
 8004540:	08021e30 	.word	0x08021e30
 8004544:	08021e4c 	.word	0x08021e4c
 8004548:	20000322 	.word	0x20000322
 800454c:	20000018 	.word	0x20000018
 8004550:	20000320 	.word	0x20000320
 8004554:	20000321 	.word	0x20000321
 8004558:	40021000 	.word	0x40021000
 800455c:	20000314 	.word	0x20000314
 8004560:	08021e64 	.word	0x08021e64
 8004564:	08021e78 	.word	0x08021e78

08004568 <u8x8_stm32_gpio_and_delay>:

}



uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr){
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	72fb      	strb	r3, [r7, #11]
 8004576:	4613      	mov	r3, r2
 8004578:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	3b28      	subs	r3, #40	; 0x28
 800457e:	2b2d      	cmp	r3, #45	; 0x2d
 8004580:	f200 80a3 	bhi.w	80046ca <u8x8_stm32_gpio_and_delay+0x162>
 8004584:	a201      	add	r2, pc, #4	; (adr r2, 800458c <u8x8_stm32_gpio_and_delay+0x24>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	08004645 	.word	0x08004645
 8004590:	0800464d 	.word	0x0800464d
 8004594:	080046cb 	.word	0x080046cb
 8004598:	080046cb 	.word	0x080046cb
 800459c:	080046cb 	.word	0x080046cb
 80045a0:	080046cb 	.word	0x080046cb
 80045a4:	080046cb 	.word	0x080046cb
 80045a8:	080046cb 	.word	0x080046cb
 80045ac:	080046cb 	.word	0x080046cb
 80045b0:	080046cb 	.word	0x080046cb
 80045b4:	080046cb 	.word	0x080046cb
 80045b8:	080046cb 	.word	0x080046cb
 80045bc:	080046cb 	.word	0x080046cb
 80045c0:	080046cb 	.word	0x080046cb
 80045c4:	080046cb 	.word	0x080046cb
 80045c8:	080046cb 	.word	0x080046cb
 80045cc:	080046cb 	.word	0x080046cb
 80045d0:	080046cb 	.word	0x080046cb
 80045d4:	080046cb 	.word	0x080046cb
 80045d8:	080046cb 	.word	0x080046cb
 80045dc:	080046cb 	.word	0x080046cb
 80045e0:	080046cb 	.word	0x080046cb
 80045e4:	080046cb 	.word	0x080046cb
 80045e8:	080046cb 	.word	0x080046cb
 80045ec:	080046cb 	.word	0x080046cb
 80045f0:	080046cb 	.word	0x080046cb
 80045f4:	080046cb 	.word	0x080046cb
 80045f8:	080046cb 	.word	0x080046cb
 80045fc:	080046cb 	.word	0x080046cb
 8004600:	080046cb 	.word	0x080046cb
 8004604:	080046cb 	.word	0x080046cb
 8004608:	080046cb 	.word	0x080046cb
 800460c:	080046cb 	.word	0x080046cb
 8004610:	080046cb 	.word	0x080046cb
 8004614:	080046d5 	.word	0x080046d5
 8004618:	08004657 	.word	0x08004657
 800461c:	080046cb 	.word	0x080046cb
 8004620:	080046cb 	.word	0x080046cb
 8004624:	080046cb 	.word	0x080046cb
 8004628:	080046cb 	.word	0x080046cb
 800462c:	08004683 	.word	0x08004683
 8004630:	0800468f 	.word	0x0800468f
 8004634:	0800469b 	.word	0x0800469b
 8004638:	080046bf 	.word	0x080046bf
 800463c:	080046a7 	.word	0x080046a7
 8004640:	080046b3 	.word	0x080046b3
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
 8004644:	2001      	movs	r0, #1
 8004646:	f003 fe0b 	bl	8008260 <HAL_Delay>
    break;
 800464a:	e044      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 800464c:	7abb      	ldrb	r3, [r7, #10]
 800464e:	4618      	mov	r0, r3
 8004650:	f003 fe06 	bl	8008260 <HAL_Delay>
    //microDelay(arg_int*10);
    break;
 8004654:	e03f      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
    //HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
	//HAL_Delay(1);
    break;
  case U8X8_MSG_GPIO_RESET:
    //HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
	isDownTriggered=0;
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <u8x8_stm32_gpio_and_delay+0x178>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
	isEnterTriggered=0;
 800465c:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <u8x8_stm32_gpio_and_delay+0x17c>)
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
	isEscTriggered=0;
 8004662:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <u8x8_stm32_gpio_and_delay+0x180>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
	isUpTriggered=0;
 8004668:	4b20      	ldr	r3, [pc, #128]	; (80046ec <u8x8_stm32_gpio_and_delay+0x184>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
	isLeftTriggered=0;
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <u8x8_stm32_gpio_and_delay+0x188>)
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
	isRightTriggered=0;
 8004674:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <u8x8_stm32_gpio_and_delay+0x18c>)
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
	microDelay(1);
 800467a:	2001      	movs	r0, #1
 800467c:	f7fd fa70 	bl	8001b60 <microDelay>
	//HAL_Delay(1);
	break;
 8004680:	e029      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_SELECT:
	u8x8_SetGPIOResult(u8x8, isEnterTriggered);
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <u8x8_stm32_gpio_and_delay+0x17c>)
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
	break;
 800468c:	e023      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_NEXT:
	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 800468e:	4b17      	ldr	r3, [pc, #92]	; (80046ec <u8x8_stm32_gpio_and_delay+0x184>)
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 8004698:	e01d      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_PREV:
	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 800469a:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <u8x8_stm32_gpio_and_delay+0x178>)
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 80046a4:	e017      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_UP:
  	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <u8x8_stm32_gpio_and_delay+0x184>)
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 80046b0:	e011      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_DOWN:
  	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <u8x8_stm32_gpio_and_delay+0x178>)
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 80046bc:	e00b      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_HOME:
	u8x8_SetGPIOResult(u8x8, isEscTriggered);
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <u8x8_stm32_gpio_and_delay+0x180>)
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN));
	break;
 80046c8:	e005      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  default:
	u8x8_SetGPIOResult(u8x8, 1);			// default return value
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 80046d2:	e000      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
    break;
 80046d4:	bf00      	nop
  }

  return 1;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000318 	.word	0x20000318
 80046e4:	20000315 	.word	0x20000315
 80046e8:	20000316 	.word	0x20000316
 80046ec:	20000317 	.word	0x20000317
 80046f0:	20000319 	.word	0x20000319
 80046f4:	2000031a 	.word	0x2000031a

080046f8 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	72fb      	strb	r3, [r7, #11]
 8004706:	4613      	mov	r3, r2
 8004708:	72bb      	strb	r3, [r7, #10]
  static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
  static uint8_t buf_idx;
  uint8_t *data;

  switch(msg)
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	3b14      	subs	r3, #20
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d862      	bhi.n	80047d8 <u8x8_byte_i2c+0xe0>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <u8x8_byte_i2c+0x20>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	0800477d 	.word	0x0800477d
 800471c:	080047d9 	.word	0x080047d9
 8004720:	080047d9 	.word	0x080047d9
 8004724:	0800474d 	.word	0x0800474d
 8004728:	080047af 	.word	0x080047af
 800472c:	080047b7 	.word	0x080047b7
 8004730:	080047d9 	.word	0x080047d9
 8004734:	080047d9 	.word	0x080047d9
 8004738:	080047d9 	.word	0x080047d9
 800473c:	080047d9 	.word	0x080047d9
 8004740:	080047d9 	.word	0x080047d9
 8004744:	080047d9 	.word	0x080047d9
 8004748:	080047dd 	.word	0x080047dd
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	617b      	str	r3, [r7, #20]
      while( arg_int > 0 )
 8004750:	e010      	b.n	8004774 <u8x8_byte_i2c+0x7c>
      {
    	  buffer[buf_idx++] = *data;
 8004752:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <u8x8_byte_i2c+0xf0>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	b2d1      	uxtb	r1, r2
 800475a:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <u8x8_byte_i2c+0xf0>)
 800475c:	7011      	strb	r1, [r2, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	7819      	ldrb	r1, [r3, #0]
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <u8x8_byte_i2c+0xf4>)
 8004766:	5499      	strb	r1, [r3, r2]
    	  data++;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3301      	adds	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
    	  arg_int--;
 800476e:	7abb      	ldrb	r3, [r7, #10]
 8004770:	3b01      	subs	r3, #1
 8004772:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8004774:	7abb      	ldrb	r3, [r7, #10]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1eb      	bne.n	8004752 <u8x8_byte_i2c+0x5a>
      }
      break;
 800477a:	e030      	b.n	80047de <u8x8_byte_i2c+0xe6>
    case U8X8_MSG_BYTE_INIT:
      /* add your custom code to init i2c subsystem */
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 800477c:	2201      	movs	r2, #1
 800477e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004782:	481b      	ldr	r0, [pc, #108]	; (80047f0 <u8x8_byte_i2c+0xf8>)
 8004784:	f005 f866 	bl	8009854 <HAL_GPIO_WritePin>
    	// Hardware display reset
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_RESET);
 8004788:	2200      	movs	r2, #0
 800478a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800478e:	4818      	ldr	r0, [pc, #96]	; (80047f0 <u8x8_byte_i2c+0xf8>)
 8004790:	f005 f860 	bl	8009854 <HAL_GPIO_WritePin>
    	HAL_Delay(1);	// The minimum reset "L" pulse width (tRW) is 1us at VDD=3.3V and 2us at VDD=1.8V
 8004794:	2001      	movs	r0, #1
 8004796:	f003 fd63 	bl	8008260 <HAL_Delay>
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 800479a:	2201      	movs	r2, #1
 800479c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047a0:	4813      	ldr	r0, [pc, #76]	; (80047f0 <u8x8_byte_i2c+0xf8>)
 80047a2:	f005 f857 	bl	8009854 <HAL_GPIO_WritePin>
    	HAL_Delay(2); // The maximum reset duration (tR) is 1us at VDD=3.3V and 2us at VDD=1.8V
 80047a6:	2002      	movs	r0, #2
 80047a8:	f003 fd5a 	bl	8008260 <HAL_Delay>
      break;
 80047ac:	e017      	b.n	80047de <u8x8_byte_i2c+0xe6>
    case U8X8_MSG_BYTE_SET_DC:
      /* ignored for i2c */
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      buf_idx = 0;
 80047ae:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <u8x8_byte_i2c+0xf0>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
      //buffer[buf_idx++] = 0;
      break;
 80047b4:	e013      	b.n	80047de <u8x8_byte_i2c+0xe6>
    case U8X8_MSG_BYTE_END_TRANSFER:
      //i2c_transfer(u8x8_GetI2CAddress(u8x8) >> 1, buf_idx, buffer);
      //HAL_I2C_Master_Transmit(&hi2c4, i2cDeviceAddress, (uint8_t *) arg_ptr, arg_int, 1000);
      //HAL_I2C_Master_Transmit(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 1000);
      HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 200);
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <u8x8_byte_i2c+0xfc>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b299      	uxth	r1, r3
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <u8x8_byte_i2c+0xf0>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	23c8      	movs	r3, #200	; 0xc8
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <u8x8_byte_i2c+0xf4>)
 80047ca:	480b      	ldr	r0, [pc, #44]	; (80047f8 <u8x8_byte_i2c+0x100>)
 80047cc:	f006 fe10 	bl	800b3f0 <HAL_I2C_Master_Transmit>
      //HAL_I2C_Master_Transmit_DMA(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx);
      microDelay(1);
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7fd f9c5 	bl	8001b60 <microDelay>
      break;
 80047d6:	e002      	b.n	80047de <u8x8_byte_i2c+0xe6>
    default:
      return 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	e001      	b.n	80047e0 <u8x8_byte_i2c+0xe8>
      break;
 80047dc:	bf00      	nop
  }
  return 1;
 80047de:	2301      	movs	r3, #1
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000350 	.word	0x20000350
 80047ec:	20000354 	.word	0x20000354
 80047f0:	40020000 	.word	0x40020000
 80047f4:	2000005a 	.word	0x2000005a
 80047f8:	2000707c 	.word	0x2000707c

080047fc <u8x8_GetMenuEvent>:
}
*/


uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
 8004804:	2300      	movs	r3, #0
 8004806:	73fb      	strb	r3, [r7, #15]

  HAL_Delay(5);
 8004808:	2005      	movs	r0, #5
 800480a:	f003 fd29 	bl	8008260 <HAL_Delay>

  if(isEnterTriggered == 1){
 800480e:	4b4a      	ldr	r3, [pc, #296]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d113      	bne.n	800483e <u8x8_GetMenuEvent+0x42>
	  //isEnterTriggered = 0;
	  isDownTriggered = 0;
 8004816:	4b49      	ldr	r3, [pc, #292]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 800481c:	4b46      	ldr	r3, [pc, #280]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8004822:	4b47      	ldr	r3, [pc, #284]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004828:	4b46      	ldr	r3, [pc, #280]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800482e:	4b46      	ldr	r3, [pc, #280]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004834:	4b45      	ldr	r3, [pc, #276]	; (800494c <u8x8_GetMenuEvent+0x150>)
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_SELECT;
 800483a:	2350      	movs	r3, #80	; 0x50
 800483c:	e078      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else if(isEscTriggered == 1){
 800483e:	4b40      	ldr	r3, [pc, #256]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d113      	bne.n	800486e <u8x8_GetMenuEvent+0x72>
	  //isEscTriggered = 0;
	  isDownTriggered = 0;
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 800484c:	4b3a      	ldr	r3, [pc, #232]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8004852:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004858:	4b3a      	ldr	r3, [pc, #232]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800485e:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004864:	4b39      	ldr	r3, [pc, #228]	; (800494c <u8x8_GetMenuEvent+0x150>)
 8004866:	2200      	movs	r2, #0
 8004868:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_HOME;
 800486a:	2353      	movs	r3, #83	; 0x53
 800486c:	e060      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else if(isLeftTriggered== 1){
 800486e:	4b36      	ldr	r3, [pc, #216]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d113      	bne.n	800489e <u8x8_GetMenuEvent+0xa2>
  	  //isLeftTriggered = 0;
	  isDownTriggered = 0;
 8004876:	4b31      	ldr	r3, [pc, #196]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 800487c:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8004882:	4b2f      	ldr	r3, [pc, #188]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004888:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800488e:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004894:	4b2d      	ldr	r3, [pc, #180]	; (800494c <u8x8_GetMenuEvent+0x150>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_PREV;
 800489a:	2352      	movs	r3, #82	; 0x52
 800489c:	e048      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else if(isRightTriggered == 1){
 800489e:	4b2b      	ldr	r3, [pc, #172]	; (800494c <u8x8_GetMenuEvent+0x150>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d113      	bne.n	80048ce <u8x8_GetMenuEvent+0xd2>
  	  //isRightTriggered = 0;
	  isDownTriggered = 0;
 80048a6:	4b25      	ldr	r3, [pc, #148]	; (800493c <u8x8_GetMenuEvent+0x140>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 80048ac:	4b22      	ldr	r3, [pc, #136]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 80048b8:	4b22      	ldr	r3, [pc, #136]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 80048be:	4b22      	ldr	r3, [pc, #136]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <u8x8_GetMenuEvent+0x150>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_NEXT;
 80048ca:	2351      	movs	r3, #81	; 0x51
 80048cc:	e030      	b.n	8004930 <u8x8_GetMenuEvent+0x134>
	  return U8X8_MSG_GPIO_MENU_PREV;
  }
  else if(HAL_GPIO_ReadPin(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET){
  	  return U8X8_MSG_GPIO_MENU_NEXT;
  }*/
  else if(isUpTriggered == 1){
 80048ce:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d113      	bne.n	80048fe <u8x8_GetMenuEvent+0x102>
	  //isUpTriggered = 0;
	  isDownTriggered = 0;
 80048d6:	4b19      	ldr	r3, [pc, #100]	; (800493c <u8x8_GetMenuEvent+0x140>)
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 80048dc:	4b16      	ldr	r3, [pc, #88]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 80048e8:	4b16      	ldr	r3, [pc, #88]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 80048ee:	4b16      	ldr	r3, [pc, #88]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 80048f4:	4b15      	ldr	r3, [pc, #84]	; (800494c <u8x8_GetMenuEvent+0x150>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_UP;
 80048fa:	2354      	movs	r3, #84	; 0x54
 80048fc:	e018      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else if(isDownTriggered == 1){
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d113      	bne.n	800492e <u8x8_GetMenuEvent+0x132>
	  //isDownTriggered = 0;
	  isDownTriggered = 0;
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <u8x8_GetMenuEvent+0x150>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_DOWN;
 800492a:	2355      	movs	r3, #85	; 0x55
 800492c:	e000      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else{
	  return 0;
 800492e:	2300      	movs	r3, #0
  }



  return result_msg;
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000315 	.word	0x20000315
 800493c:	20000318 	.word	0x20000318
 8004940:	20000316 	.word	0x20000316
 8004944:	20000317 	.word	0x20000317
 8004948:	20000319 	.word	0x20000319
 800494c:	2000031a 	.word	0x2000031a

08004950 <screenInfoPanel>:



}

void screenInfoPanel(){
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af02      	add	r7, sp, #8
	//u8g2_ClearDisplay(&u8g2);
	//u8g2_SetFontMode(&u8g2, 1);
	//u8g2_SetFontDirection(&u8g2, 0);
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf

	u8g2_ClearBuffer(&u8g2);
 8004956:	4853      	ldr	r0, [pc, #332]	; (8004aa4 <screenInfoPanel+0x154>)
 8004958:	f00f f8cb 	bl	8013af2 <u8g2_ClearBuffer>

	u8g2_DrawStr(&u8g2, 15 , 7, "InfoPanel");
 800495c:	4b52      	ldr	r3, [pc, #328]	; (8004aa8 <screenInfoPanel+0x158>)
 800495e:	2207      	movs	r2, #7
 8004960:	210f      	movs	r1, #15
 8004962:	4850      	ldr	r0, [pc, #320]	; (8004aa4 <screenInfoPanel+0x154>)
 8004964:	f00f ff0a 	bl	801477c <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 70 , 7, "Range: Auto");
	u8g2_DrawStr(&u8g2, 70 , 7, "Range: ");
 8004968:	4b50      	ldr	r3, [pc, #320]	; (8004aac <screenInfoPanel+0x15c>)
 800496a:	2207      	movs	r2, #7
 800496c:	2146      	movs	r1, #70	; 0x46
 800496e:	484d      	ldr	r0, [pc, #308]	; (8004aa4 <screenInfoPanel+0x154>)
 8004970:	f00f ff04 	bl	801477c <u8g2_DrawStr>
	if(rangeMode == 0)
 8004974:	4b4e      	ldr	r3, [pc, #312]	; (8004ab0 <screenInfoPanel+0x160>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <screenInfoPanel+0x3a>
		u8g2_DrawStr(&u8g2, 98 , 7, "nA");
 800497c:	4b4d      	ldr	r3, [pc, #308]	; (8004ab4 <screenInfoPanel+0x164>)
 800497e:	2207      	movs	r2, #7
 8004980:	2162      	movs	r1, #98	; 0x62
 8004982:	4848      	ldr	r0, [pc, #288]	; (8004aa4 <screenInfoPanel+0x154>)
 8004984:	f00f fefa 	bl	801477c <u8g2_DrawStr>
 8004988:	e01b      	b.n	80049c2 <screenInfoPanel+0x72>
	else if(rangeMode == 1)
 800498a:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <screenInfoPanel+0x160>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d106      	bne.n	80049a0 <screenInfoPanel+0x50>
		u8g2_DrawStr(&u8g2, 98 , 7, "uA");
 8004992:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <screenInfoPanel+0x168>)
 8004994:	2207      	movs	r2, #7
 8004996:	2162      	movs	r1, #98	; 0x62
 8004998:	4842      	ldr	r0, [pc, #264]	; (8004aa4 <screenInfoPanel+0x154>)
 800499a:	f00f feef 	bl	801477c <u8g2_DrawStr>
 800499e:	e010      	b.n	80049c2 <screenInfoPanel+0x72>
	else if(rangeMode == 2)
 80049a0:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <screenInfoPanel+0x160>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d106      	bne.n	80049b6 <screenInfoPanel+0x66>
		u8g2_DrawStr(&u8g2, 98 , 7, "mA");
 80049a8:	4b44      	ldr	r3, [pc, #272]	; (8004abc <screenInfoPanel+0x16c>)
 80049aa:	2207      	movs	r2, #7
 80049ac:	2162      	movs	r1, #98	; 0x62
 80049ae:	483d      	ldr	r0, [pc, #244]	; (8004aa4 <screenInfoPanel+0x154>)
 80049b0:	f00f fee4 	bl	801477c <u8g2_DrawStr>
 80049b4:	e005      	b.n	80049c2 <screenInfoPanel+0x72>
	else
		u8g2_DrawStr(&u8g2, 98 , 7, "Auto");
 80049b6:	4b42      	ldr	r3, [pc, #264]	; (8004ac0 <screenInfoPanel+0x170>)
 80049b8:	2207      	movs	r2, #7
 80049ba:	2162      	movs	r1, #98	; 0x62
 80049bc:	4839      	ldr	r0, [pc, #228]	; (8004aa4 <screenInfoPanel+0x154>)
 80049be:	f00f fedd 	bl	801477c <u8g2_DrawStr>

	//u8g2_DrawGlyph(u8g2, x, y, encoding)
	u8g2_DrawLine(&u8g2, 0, 10, 128, 10);
 80049c2:	230a      	movs	r3, #10
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	220a      	movs	r2, #10
 80049ca:	2100      	movs	r1, #0
 80049cc:	4835      	ldr	r0, [pc, #212]	; (8004aa4 <screenInfoPanel+0x154>)
 80049ce:	f010 fb65 	bl	801509c <u8g2_DrawLine>
	u8g2_DrawLine(&u8g2, 64, 0, 64, 10);
 80049d2:	230a      	movs	r3, #10
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	2340      	movs	r3, #64	; 0x40
 80049d8:	2200      	movs	r2, #0
 80049da:	2140      	movs	r1, #64	; 0x40
 80049dc:	4831      	ldr	r0, [pc, #196]	; (8004aa4 <screenInfoPanel+0x154>)
 80049de:	f010 fb5d 	bl	801509c <u8g2_DrawLine>

	sprintf(buffer, "OUT voltage [mV]: %d", settings.powerSourceVoltage);
 80049e2:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <screenInfoPanel+0x174>)
 80049e4:	8c1b      	ldrh	r3, [r3, #32]
 80049e6:	461a      	mov	r2, r3
 80049e8:	4937      	ldr	r1, [pc, #220]	; (8004ac8 <screenInfoPanel+0x178>)
 80049ea:	4838      	ldr	r0, [pc, #224]	; (8004acc <screenInfoPanel+0x17c>)
 80049ec:	f01a f834 	bl	801ea58 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 20, buffer);
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <screenInfoPanel+0x17c>)
 80049f2:	2214      	movs	r2, #20
 80049f4:	210a      	movs	r1, #10
 80049f6:	482b      	ldr	r0, [pc, #172]	; (8004aa4 <screenInfoPanel+0x154>)
 80049f8:	f00f fec0 	bl	801477c <u8g2_DrawStr>
	sprintf(buffer, "OUT current limit [mA]: %d", settings.powerSourceCurrent);
 80049fc:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <screenInfoPanel+0x174>)
 80049fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004a00:	461a      	mov	r2, r3
 8004a02:	4933      	ldr	r1, [pc, #204]	; (8004ad0 <screenInfoPanel+0x180>)
 8004a04:	4831      	ldr	r0, [pc, #196]	; (8004acc <screenInfoPanel+0x17c>)
 8004a06:	f01a f827 	bl	801ea58 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 30, buffer);
 8004a0a:	4b30      	ldr	r3, [pc, #192]	; (8004acc <screenInfoPanel+0x17c>)
 8004a0c:	221e      	movs	r2, #30
 8004a0e:	210a      	movs	r1, #10
 8004a10:	4824      	ldr	r0, [pc, #144]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a12:	f00f feb3 	bl	801477c <u8g2_DrawStr>
	sprintf(buffer, "Sampling interval [us]: %d", settings.samplingInterval);
 8004a16:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	492d      	ldr	r1, [pc, #180]	; (8004ad4 <screenInfoPanel+0x184>)
 8004a1e:	482b      	ldr	r0, [pc, #172]	; (8004acc <screenInfoPanel+0x17c>)
 8004a20:	f01a f81a 	bl	801ea58 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 40, buffer);
 8004a24:	4b29      	ldr	r3, [pc, #164]	; (8004acc <screenInfoPanel+0x17c>)
 8004a26:	2228      	movs	r2, #40	; 0x28
 8004a28:	210a      	movs	r1, #10
 8004a2a:	481e      	ldr	r0, [pc, #120]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a2c:	f00f fea6 	bl	801477c <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: NA");
	u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: ");
 8004a30:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <screenInfoPanel+0x188>)
 8004a32:	2232      	movs	r2, #50	; 0x32
 8004a34:	210a      	movs	r1, #10
 8004a36:	481b      	ldr	r0, [pc, #108]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a38:	f00f fea0 	bl	801477c <u8g2_DrawStr>
	if(settings.isLoggingToConsole == 1)
 8004a3c:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d106      	bne.n	8004a52 <screenInfoPanel+0x102>
		u8g2_DrawStr(&u8g2, 74 , 50, "PC");
 8004a44:	4b25      	ldr	r3, [pc, #148]	; (8004adc <screenInfoPanel+0x18c>)
 8004a46:	2232      	movs	r2, #50	; 0x32
 8004a48:	214a      	movs	r1, #74	; 0x4a
 8004a4a:	4816      	ldr	r0, [pc, #88]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a4c:	f00f fe96 	bl	801477c <u8g2_DrawStr>
 8004a50:	e021      	b.n	8004a96 <screenInfoPanel+0x146>
	else if(settings.isLoggingToSD == 1)
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d106      	bne.n	8004a68 <screenInfoPanel+0x118>
		u8g2_DrawStr(&u8g2, 74 , 50, "SD");
 8004a5a:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <screenInfoPanel+0x190>)
 8004a5c:	2232      	movs	r2, #50	; 0x32
 8004a5e:	214a      	movs	r1, #74	; 0x4a
 8004a60:	4810      	ldr	r0, [pc, #64]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a62:	f00f fe8b 	bl	801477c <u8g2_DrawStr>
 8004a66:	e016      	b.n	8004a96 <screenInfoPanel+0x146>
	else if(settings.isLoggingToUSB == 1)
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a6a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d106      	bne.n	8004a80 <screenInfoPanel+0x130>
		u8g2_DrawStr(&u8g2, 74 , 50, "USB");
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <screenInfoPanel+0x194>)
 8004a74:	2232      	movs	r2, #50	; 0x32
 8004a76:	214a      	movs	r1, #74	; 0x4a
 8004a78:	480a      	ldr	r0, [pc, #40]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a7a:	f00f fe7f 	bl	801477c <u8g2_DrawStr>
 8004a7e:	e00a      	b.n	8004a96 <screenInfoPanel+0x146>
	else if(settings.isLoggingToEthernet == 1)
 8004a80:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a82:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d105      	bne.n	8004a96 <screenInfoPanel+0x146>
		u8g2_DrawStr(&u8g2, 74 , 50, "Eth");
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <screenInfoPanel+0x198>)
 8004a8c:	2232      	movs	r2, #50	; 0x32
 8004a8e:	214a      	movs	r1, #74	; 0x4a
 8004a90:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a92:	f00f fe73 	bl	801477c <u8g2_DrawStr>

	u8g2_SendBuffer(&u8g2);
 8004a96:	4803      	ldr	r0, [pc, #12]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a98:	f00f f89e 	bl	8013bd8 <u8g2_SendBuffer>
	//HAL_Delay(50);



}
 8004a9c:	bf00      	nop
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000290 	.word	0x20000290
 8004aa8:	08021f1c 	.word	0x08021f1c
 8004aac:	08021f28 	.word	0x08021f28
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	08021f30 	.word	0x08021f30
 8004ab8:	08021f34 	.word	0x08021f34
 8004abc:	08021f38 	.word	0x08021f38
 8004ac0:	08021f3c 	.word	0x08021f3c
 8004ac4:	20000018 	.word	0x20000018
 8004ac8:	08021f44 	.word	0x08021f44
 8004acc:	20002c00 	.word	0x20002c00
 8004ad0:	08021f5c 	.word	0x08021f5c
 8004ad4:	08021f78 	.word	0x08021f78
 8004ad8:	08021f94 	.word	0x08021f94
 8004adc:	08021fa8 	.word	0x08021fa8
 8004ae0:	08021fac 	.word	0x08021fac
 8004ae4:	08021fb0 	.word	0x08021fb0
 8004ae8:	08021fb4 	.word	0x08021fb4

08004aec <screenDeviceSettings>:
 *		[312] *Behaviour mode of power source - DIF SUBMENU
 *		[888] *Go to main menu
 *		[999] *Go to main menu
*/

void screenDeviceSettings(){
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af02      	add	r7, sp, #8
	sprintf(buffer, "Test uint32: %d", settings.samplingInterval);
	send_uart(buffer);
	HAL_Delay(10000);
	*/

	u8g2_ClearDisplay(&u8g2);
 8004af2:	48c0      	ldr	r0, [pc, #768]	; (8004df4 <screenDeviceSettings+0x308>)
 8004af4:	f00f f8e3 	bl	8013cbe <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8004af8:	48be      	ldr	r0, [pc, #760]	; (8004df4 <screenDeviceSettings+0x308>)
 8004afa:	f00e fffa 	bl	8013af2 <u8g2_ClearBuffer>

	uint32_t temp32 = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Device menu", 1,"Storing method\nCheck SD card\nCheck USB drive\nOffset calibration\nNull offset\nBack to Main")) {
 8004b02:	4bbd      	ldr	r3, [pc, #756]	; (8004df8 <screenDeviceSettings+0x30c>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	49bd      	ldr	r1, [pc, #756]	; (8004dfc <screenDeviceSettings+0x310>)
 8004b08:	48ba      	ldr	r0, [pc, #744]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b0a:	f010 feb4 	bl	8015876 <u8g2_UserInterfaceSelectionList>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b05      	cmp	r3, #5
 8004b12:	f200 8166 	bhi.w	8004de2 <screenDeviceSettings+0x2f6>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <screenDeviceSettings+0x30>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b35 	.word	0x08004b35
 8004b20:	08004b41 	.word	0x08004b41
 8004b24:	08004ca5 	.word	0x08004ca5
 8004b28:	08004cd1 	.word	0x08004cd1
 8004b2c:	08004cfd 	.word	0x08004cfd
 8004b30:	08004d6b 	.word	0x08004d6b
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 8004b34:	4bb2      	ldr	r3, [pc, #712]	; (8004e00 <screenDeviceSettings+0x314>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004b3a:	f000 fe5f 	bl	80057fc <screenInterface>
 8004b3e:	e155      	b.n	8004dec <screenDeviceSettings+0x300>
	// storing method
	case 1:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Storing method", 1,"COM port\nSD Card\nUSB Drive\nEthernet\nExit");
 8004b40:	4bb0      	ldr	r3, [pc, #704]	; (8004e04 <screenDeviceSettings+0x318>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	49b0      	ldr	r1, [pc, #704]	; (8004e08 <screenDeviceSettings+0x31c>)
 8004b46:	48ab      	ldr	r0, [pc, #684]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b48:	f010 fe95 	bl	8015876 <u8g2_UserInterfaceSelectionList>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	607b      	str	r3, [r7, #4]
		if (temp32 == 1) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d121      	bne.n	8004b9a <screenDeviceSettings+0xae>
			u8g2_ClearDisplay(&u8g2);
 8004b56:	48a7      	ldr	r0, [pc, #668]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b58:	f00f f8b1 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004b5c:	48a5      	ldr	r0, [pc, #660]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b5e:	f00e ffc8 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: COM Port");
 8004b62:	4baa      	ldr	r3, [pc, #680]	; (8004e0c <screenDeviceSettings+0x320>)
 8004b64:	2223      	movs	r2, #35	; 0x23
 8004b66:	2114      	movs	r1, #20
 8004b68:	48a2      	ldr	r0, [pc, #648]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b6a:	f00f fe07 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004b6e:	48a1      	ldr	r0, [pc, #644]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b70:	f00f f832 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 1;
 8004b74:	4ba6      	ldr	r3, [pc, #664]	; (8004e10 <screenDeviceSettings+0x324>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8004b7a:	4ba5      	ldr	r3, [pc, #660]	; (8004e10 <screenDeviceSettings+0x324>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8004b80:	4ba3      	ldr	r3, [pc, #652]	; (8004e10 <screenDeviceSettings+0x324>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8004b88:	4ba1      	ldr	r3, [pc, #644]	; (8004e10 <screenDeviceSettings+0x324>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 8004b90:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004b94:	f003 fb64 	bl	8008260 <HAL_Delay>
 8004b98:	e081      	b.n	8004c9e <screenDeviceSettings+0x1b2>
		} else if (temp32 == 2) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d121      	bne.n	8004be4 <screenDeviceSettings+0xf8>
			u8g2_ClearDisplay(&u8g2);
 8004ba0:	4894      	ldr	r0, [pc, #592]	; (8004df4 <screenDeviceSettings+0x308>)
 8004ba2:	f00f f88c 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004ba6:	4893      	ldr	r0, [pc, #588]	; (8004df4 <screenDeviceSettings+0x308>)
 8004ba8:	f00e ffa3 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: SD Card");
 8004bac:	4b99      	ldr	r3, [pc, #612]	; (8004e14 <screenDeviceSettings+0x328>)
 8004bae:	2223      	movs	r2, #35	; 0x23
 8004bb0:	2114      	movs	r1, #20
 8004bb2:	4890      	ldr	r0, [pc, #576]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bb4:	f00f fde2 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004bb8:	488e      	ldr	r0, [pc, #568]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bba:	f00f f80d 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8004bbe:	4b94      	ldr	r3, [pc, #592]	; (8004e10 <screenDeviceSettings+0x324>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 1;
 8004bc4:	4b92      	ldr	r3, [pc, #584]	; (8004e10 <screenDeviceSettings+0x324>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8004bca:	4b91      	ldr	r3, [pc, #580]	; (8004e10 <screenDeviceSettings+0x324>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8004bd2:	4b8f      	ldr	r3, [pc, #572]	; (8004e10 <screenDeviceSettings+0x324>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 8004bda:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004bde:	f003 fb3f 	bl	8008260 <HAL_Delay>
 8004be2:	e05c      	b.n	8004c9e <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d121      	bne.n	8004c2e <screenDeviceSettings+0x142>
			u8g2_ClearDisplay(&u8g2);
 8004bea:	4882      	ldr	r0, [pc, #520]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bec:	f00f f867 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004bf0:	4880      	ldr	r0, [pc, #512]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bf2:	f00e ff7e 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: USB Drive");
 8004bf6:	4b88      	ldr	r3, [pc, #544]	; (8004e18 <screenDeviceSettings+0x32c>)
 8004bf8:	2223      	movs	r2, #35	; 0x23
 8004bfa:	2114      	movs	r1, #20
 8004bfc:	487d      	ldr	r0, [pc, #500]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bfe:	f00f fdbd 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004c02:	487c      	ldr	r0, [pc, #496]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c04:	f00e ffe8 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8004c08:	4b81      	ldr	r3, [pc, #516]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8004c0e:	4b80      	ldr	r3, [pc, #512]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 1;
 8004c14:	4b7e      	ldr	r3, [pc, #504]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8004c1c:	4b7c      	ldr	r3, [pc, #496]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 8004c24:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004c28:	f003 fb1a 	bl	8008260 <HAL_Delay>
 8004c2c:	e037      	b.n	8004c9e <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d121      	bne.n	8004c78 <screenDeviceSettings+0x18c>
			u8g2_ClearDisplay(&u8g2);
 8004c34:	486f      	ldr	r0, [pc, #444]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c36:	f00f f842 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004c3a:	486e      	ldr	r0, [pc, #440]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c3c:	f00e ff59 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: Ethernet");
 8004c40:	4b76      	ldr	r3, [pc, #472]	; (8004e1c <screenDeviceSettings+0x330>)
 8004c42:	2223      	movs	r2, #35	; 0x23
 8004c44:	2114      	movs	r1, #20
 8004c46:	486b      	ldr	r0, [pc, #428]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c48:	f00f fd98 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004c4c:	4869      	ldr	r0, [pc, #420]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c4e:	f00e ffc3 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8004c52:	4b6f      	ldr	r3, [pc, #444]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8004c58:	4b6d      	ldr	r3, [pc, #436]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8004c5e:	4b6c      	ldr	r3, [pc, #432]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 1;
 8004c66:	4b6a      	ldr	r3, [pc, #424]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 8004c6e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004c72:	f003 faf5 	bl	8008260 <HAL_Delay>
 8004c76:	e012      	b.n	8004c9e <screenDeviceSettings+0x1b2>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004c78:	485e      	ldr	r0, [pc, #376]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c7a:	f00f f820 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004c7e:	485d      	ldr	r0, [pc, #372]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c80:	f00e ff37 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: UNCHANGED");
 8004c84:	4b66      	ldr	r3, [pc, #408]	; (8004e20 <screenDeviceSettings+0x334>)
 8004c86:	2223      	movs	r2, #35	; 0x23
 8004c88:	2114      	movs	r1, #20
 8004c8a:	485a      	ldr	r0, [pc, #360]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c8c:	f00f fd76 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004c90:	4858      	ldr	r0, [pc, #352]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c92:	f00e ffa1 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004c96:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004c9a:	f003 fae1 	bl	8008260 <HAL_Delay>
		}
		return screenDeviceSettings();
 8004c9e:	f7ff ff25 	bl	8004aec <screenDeviceSettings>
 8004ca2:	e0a3      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// check sd card
	case 2:
		u8g2_ClearDisplay(&u8g2);
 8004ca4:	4853      	ldr	r0, [pc, #332]	; (8004df4 <screenDeviceSettings+0x308>)
 8004ca6:	f00f f80a 	bl	8013cbe <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 8004caa:	4852      	ldr	r0, [pc, #328]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cac:	f00e ff21 	bl	8013af2 <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "SD CARD: OK");
 8004cb0:	4b5c      	ldr	r3, [pc, #368]	; (8004e24 <screenDeviceSettings+0x338>)
 8004cb2:	2223      	movs	r2, #35	; 0x23
 8004cb4:	2114      	movs	r1, #20
 8004cb6:	484f      	ldr	r0, [pc, #316]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cb8:	f00f fd60 	bl	801477c <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8004cbc:	484d      	ldr	r0, [pc, #308]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cbe:	f00e ff8b 	bl	8013bd8 <u8g2_SendBuffer>
		HAL_Delay(1500);
 8004cc2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004cc6:	f003 facb 	bl	8008260 <HAL_Delay>
		return screenDeviceSettings();
 8004cca:	f7ff ff0f 	bl	8004aec <screenDeviceSettings>
 8004cce:	e08d      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// check usb flash drive
	case 3:
		u8g2_ClearDisplay(&u8g2);
 8004cd0:	4848      	ldr	r0, [pc, #288]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cd2:	f00e fff4 	bl	8013cbe <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 8004cd6:	4847      	ldr	r0, [pc, #284]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cd8:	f00e ff0b 	bl	8013af2 <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "USB DRIVE: OK");
 8004cdc:	4b52      	ldr	r3, [pc, #328]	; (8004e28 <screenDeviceSettings+0x33c>)
 8004cde:	2223      	movs	r2, #35	; 0x23
 8004ce0:	2114      	movs	r1, #20
 8004ce2:	4844      	ldr	r0, [pc, #272]	; (8004df4 <screenDeviceSettings+0x308>)
 8004ce4:	f00f fd4a 	bl	801477c <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8004ce8:	4842      	ldr	r0, [pc, #264]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cea:	f00e ff75 	bl	8013bd8 <u8g2_SendBuffer>
		HAL_Delay(1500);
 8004cee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004cf2:	f003 fab5 	bl	8008260 <HAL_Delay>
		return screenDeviceSettings();
 8004cf6:	f7ff fef9 	bl	8004aec <screenDeviceSettings>
 8004cfa:	e077      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// perform zero offset calibration
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Offset calibration", NULL, NULL," YES \n NO ") == 1) {
 8004cfc:	4b4b      	ldr	r3, [pc, #300]	; (8004e2c <screenDeviceSettings+0x340>)
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	2200      	movs	r2, #0
 8004d04:	494a      	ldr	r1, [pc, #296]	; (8004e30 <screenDeviceSettings+0x344>)
 8004d06:	483b      	ldr	r0, [pc, #236]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d08:	f010 fb81 	bl	801540e <u8g2_UserInterfaceMessage>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d115      	bne.n	8004d3e <screenDeviceSettings+0x252>
			adc_compensateOffset();
 8004d12:	f7fd fe53 	bl	80029bc <adc_compensateOffset>
			u8g2_ClearDisplay(&u8g2);
 8004d16:	4837      	ldr	r0, [pc, #220]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d18:	f00e ffd1 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004d1c:	4835      	ldr	r0, [pc, #212]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d1e:	f00e fee8 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: CALIBRATED");
 8004d22:	4b44      	ldr	r3, [pc, #272]	; (8004e34 <screenDeviceSettings+0x348>)
 8004d24:	2223      	movs	r2, #35	; 0x23
 8004d26:	2114      	movs	r1, #20
 8004d28:	4832      	ldr	r0, [pc, #200]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d2a:	f00f fd27 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004d2e:	4831      	ldr	r0, [pc, #196]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d30:	f00e ff52 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004d34:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004d38:	f003 fa92 	bl	8008260 <HAL_Delay>
 8004d3c:	e012      	b.n	8004d64 <screenDeviceSettings+0x278>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004d3e:	482d      	ldr	r0, [pc, #180]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d40:	f00e ffbd 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004d44:	482b      	ldr	r0, [pc, #172]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d46:	f00e fed4 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <screenDeviceSettings+0x34c>)
 8004d4c:	2223      	movs	r2, #35	; 0x23
 8004d4e:	210f      	movs	r1, #15
 8004d50:	4828      	ldr	r0, [pc, #160]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d52:	f00f fd13 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004d56:	4827      	ldr	r0, [pc, #156]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d58:	f00e ff3e 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004d5c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004d60:	f003 fa7e 	bl	8008260 <HAL_Delay>
		}
		return screenDeviceSettings();
 8004d64:	f7ff fec2 	bl	8004aec <screenDeviceSettings>
 8004d68:	e040      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// zero offset value
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Zero offset value", NULL, NULL," YES \n NO ") == 1) {
 8004d6a:	4b30      	ldr	r3, [pc, #192]	; (8004e2c <screenDeviceSettings+0x340>)
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2200      	movs	r2, #0
 8004d72:	4932      	ldr	r1, [pc, #200]	; (8004e3c <screenDeviceSettings+0x350>)
 8004d74:	481f      	ldr	r0, [pc, #124]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d76:	f010 fb4a 	bl	801540e <u8g2_UserInterfaceMessage>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d11a      	bne.n	8004db6 <screenDeviceSettings+0x2ca>
			u8g2_ClearDisplay(&u8g2);
 8004d80:	481c      	ldr	r0, [pc, #112]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d82:	f00e ff9c 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004d86:	481b      	ldr	r0, [pc, #108]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d88:	f00e feb3 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: ZEROED");
 8004d8c:	4b2c      	ldr	r3, [pc, #176]	; (8004e40 <screenDeviceSettings+0x354>)
 8004d8e:	2223      	movs	r2, #35	; 0x23
 8004d90:	2114      	movs	r1, #20
 8004d92:	4818      	ldr	r0, [pc, #96]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d94:	f00f fcf2 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004d98:	4816      	ldr	r0, [pc, #88]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d9a:	f00e ff1d 	bl	8013bd8 <u8g2_SendBuffer>
			settings.lastOffsetValue = 0.0;
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <screenDeviceSettings+0x324>)
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	f04f 0400 	mov.w	r4, #0
 8004da8:	e9c2 3406 	strd	r3, r4, [r2, #24]
			HAL_Delay(1500);
 8004dac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004db0:	f003 fa56 	bl	8008260 <HAL_Delay>
 8004db4:	e012      	b.n	8004ddc <screenDeviceSettings+0x2f0>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004db6:	480f      	ldr	r0, [pc, #60]	; (8004df4 <screenDeviceSettings+0x308>)
 8004db8:	f00e ff81 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004dbc:	480d      	ldr	r0, [pc, #52]	; (8004df4 <screenDeviceSettings+0x308>)
 8004dbe:	f00e fe98 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <screenDeviceSettings+0x34c>)
 8004dc4:	2223      	movs	r2, #35	; 0x23
 8004dc6:	210f      	movs	r1, #15
 8004dc8:	480a      	ldr	r0, [pc, #40]	; (8004df4 <screenDeviceSettings+0x308>)
 8004dca:	f00f fcd7 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004dce:	4809      	ldr	r0, [pc, #36]	; (8004df4 <screenDeviceSettings+0x308>)
 8004dd0:	f00e ff02 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004dd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004dd8:	f003 fa42 	bl	8008260 <HAL_Delay>
		}
		return screenDeviceSettings();
 8004ddc:	f7ff fe86 	bl	8004aec <screenDeviceSettings>
 8004de0:	e004      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 8004de2:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <screenDeviceSettings+0x314>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004de8:	f000 fd08 	bl	80057fc <screenInterface>

	}



}
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd90      	pop	{r4, r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000290 	.word	0x20000290
 8004df8:	08021fb8 	.word	0x08021fb8
 8004dfc:	08022014 	.word	0x08022014
 8004e00:	20000315 	.word	0x20000315
 8004e04:	08022020 	.word	0x08022020
 8004e08:	0802204c 	.word	0x0802204c
 8004e0c:	0802205c 	.word	0x0802205c
 8004e10:	20000018 	.word	0x20000018
 8004e14:	08022074 	.word	0x08022074
 8004e18:	0802208c 	.word	0x0802208c
 8004e1c:	080220a4 	.word	0x080220a4
 8004e20:	080220bc 	.word	0x080220bc
 8004e24:	080220d4 	.word	0x080220d4
 8004e28:	080220e0 	.word	0x080220e0
 8004e2c:	08022104 	.word	0x08022104
 8004e30:	080220f0 	.word	0x080220f0
 8004e34:	08022110 	.word	0x08022110
 8004e38:	08022124 	.word	0x08022124
 8004e3c:	08022138 	.word	0x08022138
 8004e40:	0802214c 	.word	0x0802214c
 8004e44:	00000000 	.word	0x00000000

08004e48 <screenMeasuringSettings>:
 *		[205] *Enabling trigger menu
 *		[206] *Set trigger threshold
 *		[888] *Go to main menu
 *		[999] *Go to main menu
 */
void screenMeasuringSettings(){
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 8004e4e:	487c      	ldr	r0, [pc, #496]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004e50:	f00e ff35 	bl	8013cbe <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8004e54:	487a      	ldr	r0, [pc, #488]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004e56:	f00e fe4c 	bl	8013af2 <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 20, 35, "Measuring Settings");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/

	uint32_t temp32 = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]

	switch(u8g2_UserInterfaceSelectionList(&u8g2, "Measuring menu", 1, "Current settings\nMeasuring period\nSampling period\nEnable averaging\nEnable trigger\nTrigger threshold\nBack to Main")){
 8004e5e:	4b79      	ldr	r3, [pc, #484]	; (8005044 <screenMeasuringSettings+0x1fc>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	4979      	ldr	r1, [pc, #484]	; (8005048 <screenMeasuringSettings+0x200>)
 8004e64:	4876      	ldr	r0, [pc, #472]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004e66:	f010 fd06 	bl	8015876 <u8g2_UserInterfaceSelectionList>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	f200 80da 	bhi.w	8005026 <screenMeasuringSettings+0x1de>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <screenMeasuringSettings+0x30>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004e95 	.word	0x08004e95
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ea7 	.word	0x08004ea7
 8004e84:	08004ec9 	.word	0x08004ec9
 8004e88:	08004eed 	.word	0x08004eed
 8004e8c:	08004f63 	.word	0x08004f63
 8004e90:	08004fd9 	.word	0x08004fd9
	case 0:
		isEnterTriggered = 1;
 8004e94:	4b6d      	ldr	r3, [pc, #436]	; (800504c <screenMeasuringSettings+0x204>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004e9a:	f000 fcaf 	bl	80057fc <screenInterface>
 8004e9e:	e0c7      	b.n	8005030 <screenMeasuringSettings+0x1e8>

	// current settings
	case 1:
		screenInfoPanel();
 8004ea0:	f7ff fd56 	bl	8004950 <screenInfoPanel>
		break;
 8004ea4:	e0c4      	b.n	8005030 <screenMeasuringSettings+0x1e8>
	// measuring period
	case 2:
		u8g2_UserInterfaceInputValue32(&u8g2, "Measuring period", "", &settings.measuringInterval, 1, 100000, 5, " us");
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <screenMeasuringSettings+0x208>)
 8004ea8:	9303      	str	r3, [sp, #12]
 8004eaa:	2305      	movs	r3, #5
 8004eac:	9302      	str	r3, [sp, #8]
 8004eae:	4b69      	ldr	r3, [pc, #420]	; (8005054 <screenMeasuringSettings+0x20c>)
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	4b68      	ldr	r3, [pc, #416]	; (8005058 <screenMeasuringSettings+0x210>)
 8004eb8:	4a68      	ldr	r2, [pc, #416]	; (800505c <screenMeasuringSettings+0x214>)
 8004eba:	4969      	ldr	r1, [pc, #420]	; (8005060 <screenMeasuringSettings+0x218>)
 8004ebc:	4860      	ldr	r0, [pc, #384]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004ebe:	f00f fefd 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8004ec2:	f7ff ffc1 	bl	8004e48 <screenMeasuringSettings>
 8004ec6:	e0b3      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	// sampling period
	case 3:
		u8g2_UserInterfaceInputValue32(&u8g2, "Sampling period", "", &settings.samplingInterval, 1, 50000, 5, " us");
 8004ec8:	4b61      	ldr	r3, [pc, #388]	; (8005050 <screenMeasuringSettings+0x208>)
 8004eca:	9303      	str	r3, [sp, #12]
 8004ecc:	2305      	movs	r3, #5
 8004ece:	9302      	str	r3, [sp, #8]
 8004ed0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	4b62      	ldr	r3, [pc, #392]	; (8005064 <screenMeasuringSettings+0x21c>)
 8004edc:	4a5f      	ldr	r2, [pc, #380]	; (800505c <screenMeasuringSettings+0x214>)
 8004ede:	4962      	ldr	r1, [pc, #392]	; (8005068 <screenMeasuringSettings+0x220>)
 8004ee0:	4857      	ldr	r0, [pc, #348]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004ee2:	f00f feeb 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8004ee6:	f7ff ffaf 	bl	8004e48 <screenMeasuringSettings>
 8004eea:	e0a1      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	// enable averaging
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable averaging function", NULL, NULL," YES \n NO ") == 1) {
 8004eec:	4b5f      	ldr	r3, [pc, #380]	; (800506c <screenMeasuringSettings+0x224>)
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	495e      	ldr	r1, [pc, #376]	; (8005070 <screenMeasuringSettings+0x228>)
 8004ef6:	4852      	ldr	r0, [pc, #328]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004ef8:	f010 fa89 	bl	801540e <u8g2_UserInterfaceMessage>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d116      	bne.n	8004f30 <screenMeasuringSettings+0xe8>
			u8g2_ClearDisplay(&u8g2);
 8004f02:	484f      	ldr	r0, [pc, #316]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f04:	f00e fedb 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004f08:	484d      	ldr	r0, [pc, #308]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f0a:	f00e fdf2 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "AVERAGING: ENABLED");
 8004f0e:	4b59      	ldr	r3, [pc, #356]	; (8005074 <screenMeasuringSettings+0x22c>)
 8004f10:	2223      	movs	r2, #35	; 0x23
 8004f12:	2114      	movs	r1, #20
 8004f14:	484a      	ldr	r0, [pc, #296]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f16:	f00f fc31 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004f1a:	4849      	ldr	r0, [pc, #292]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f1c:	f00e fe5c 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isAveraging = 1;
 8004f20:	4b55      	ldr	r3, [pc, #340]	; (8005078 <screenMeasuringSettings+0x230>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8004f26:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004f2a:	f003 f999 	bl	8008260 <HAL_Delay>
 8004f2e:	e015      	b.n	8004f5c <screenMeasuringSettings+0x114>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 8004f30:	4843      	ldr	r0, [pc, #268]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f32:	f00e fec4 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004f36:	4842      	ldr	r0, [pc, #264]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f38:	f00e fddb 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "AVERAGING: DISABLED");
 8004f3c:	4b4f      	ldr	r3, [pc, #316]	; (800507c <screenMeasuringSettings+0x234>)
 8004f3e:	2223      	movs	r2, #35	; 0x23
 8004f40:	210f      	movs	r1, #15
 8004f42:	483f      	ldr	r0, [pc, #252]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f44:	f00f fc1a 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004f48:	483d      	ldr	r0, [pc, #244]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f4a:	f00e fe45 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 8004f4e:	4b4a      	ldr	r3, [pc, #296]	; (8005078 <screenMeasuringSettings+0x230>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8004f54:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004f58:	f003 f982 	bl	8008260 <HAL_Delay>
		}
		return screenMeasuringSettings();
 8004f5c:	f7ff ff74 	bl	8004e48 <screenMeasuringSettings>
 8004f60:	e066      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	// enable trigger
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable trigger function", NULL, NULL," YES \n NO ") == 1) {
 8004f62:	4b42      	ldr	r3, [pc, #264]	; (800506c <screenMeasuringSettings+0x224>)
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2300      	movs	r3, #0
 8004f68:	2200      	movs	r2, #0
 8004f6a:	4945      	ldr	r1, [pc, #276]	; (8005080 <screenMeasuringSettings+0x238>)
 8004f6c:	4834      	ldr	r0, [pc, #208]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f6e:	f010 fa4e 	bl	801540e <u8g2_UserInterfaceMessage>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d116      	bne.n	8004fa6 <screenMeasuringSettings+0x15e>
			u8g2_ClearDisplay(&u8g2);
 8004f78:	4831      	ldr	r0, [pc, #196]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f7a:	f00e fea0 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004f7e:	4830      	ldr	r0, [pc, #192]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f80:	f00e fdb7 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TRIGGER: ENABLED");
 8004f84:	4b3f      	ldr	r3, [pc, #252]	; (8005084 <screenMeasuringSettings+0x23c>)
 8004f86:	2223      	movs	r2, #35	; 0x23
 8004f88:	2114      	movs	r1, #20
 8004f8a:	482d      	ldr	r0, [pc, #180]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f8c:	f00f fbf6 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004f90:	482b      	ldr	r0, [pc, #172]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f92:	f00e fe21 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isTriggerActive = 1;
 8004f96:	4b38      	ldr	r3, [pc, #224]	; (8005078 <screenMeasuringSettings+0x230>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8004f9c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004fa0:	f003 f95e 	bl	8008260 <HAL_Delay>
 8004fa4:	e015      	b.n	8004fd2 <screenMeasuringSettings+0x18a>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 8004fa6:	4826      	ldr	r0, [pc, #152]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004fa8:	f00e fe89 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004fac:	4824      	ldr	r0, [pc, #144]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004fae:	f00e fda0 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "TRIGGER: DISABLED");
 8004fb2:	4b35      	ldr	r3, [pc, #212]	; (8005088 <screenMeasuringSettings+0x240>)
 8004fb4:	2223      	movs	r2, #35	; 0x23
 8004fb6:	210f      	movs	r1, #15
 8004fb8:	4821      	ldr	r0, [pc, #132]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004fba:	f00f fbdf 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004fbe:	4820      	ldr	r0, [pc, #128]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004fc0:	f00e fe0a 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isTriggerActive = 0;
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	; (8005078 <screenMeasuringSettings+0x230>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8004fca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004fce:	f003 f947 	bl	8008260 <HAL_Delay>
		}
		return screenMeasuringSettings();
 8004fd2:	f7ff ff39 	bl	8004e48 <screenMeasuringSettings>
 8004fd6:	e02b      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	// trigger level
	case 6:
		u8g2_UserInterfaceInputValue32(&u8g2, "Trigger level", "x100 nA", &temp32, 1, 10000000, 5, " nA");
 8004fd8:	1d3a      	adds	r2, r7, #4
 8004fda:	4b2c      	ldr	r3, [pc, #176]	; (800508c <screenMeasuringSettings+0x244>)
 8004fdc:	9303      	str	r3, [sp, #12]
 8004fde:	2305      	movs	r3, #5
 8004fe0:	9302      	str	r3, [sp, #8]
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	; (8005090 <screenMeasuringSettings+0x248>)
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	4a29      	ldr	r2, [pc, #164]	; (8005094 <screenMeasuringSettings+0x24c>)
 8004fee:	492a      	ldr	r1, [pc, #168]	; (8005098 <screenMeasuringSettings+0x250>)
 8004ff0:	4813      	ldr	r0, [pc, #76]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004ff2:	f00f fe63 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
		settings.triggerLevel = temp32*100;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2264      	movs	r2, #100	; 0x64
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005006:	4b1c      	ldr	r3, [pc, #112]	; (8005078 <screenMeasuringSettings+0x230>)
 8005008:	ed83 7b04 	vstr	d7, [r3, #16]
		settings.triggerLevel /= 10000000;
 800500c:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <screenMeasuringSettings+0x230>)
 800500e:	ed93 6b04 	vldr	d6, [r3, #16]
 8005012:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8005038 <screenMeasuringSettings+0x1f0>
 8005016:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800501a:	4b17      	ldr	r3, [pc, #92]	; (8005078 <screenMeasuringSettings+0x230>)
 800501c:	ed83 7b04 	vstr	d7, [r3, #16]
		return screenMeasuringSettings();
 8005020:	f7ff ff12 	bl	8004e48 <screenMeasuringSettings>
 8005024:	e004      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	default:
		isEnterTriggered = 1;
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <screenMeasuringSettings+0x204>)
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 800502c:	f000 fbe6 	bl	80057fc <screenInterface>
		break;

	}


}
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	00000000 	.word	0x00000000
 800503c:	416312d0 	.word	0x416312d0
 8005040:	20000290 	.word	0x20000290
 8005044:	0802215c 	.word	0x0802215c
 8005048:	080221d0 	.word	0x080221d0
 800504c:	20000315 	.word	0x20000315
 8005050:	080221f4 	.word	0x080221f4
 8005054:	000186a0 	.word	0x000186a0
 8005058:	2000001c 	.word	0x2000001c
 800505c:	08020564 	.word	0x08020564
 8005060:	080221e0 	.word	0x080221e0
 8005064:	20000020 	.word	0x20000020
 8005068:	080221f8 	.word	0x080221f8
 800506c:	08022104 	.word	0x08022104
 8005070:	08022208 	.word	0x08022208
 8005074:	08022224 	.word	0x08022224
 8005078:	20000018 	.word	0x20000018
 800507c:	08022238 	.word	0x08022238
 8005080:	0802224c 	.word	0x0802224c
 8005084:	08022264 	.word	0x08022264
 8005088:	08022278 	.word	0x08022278
 800508c:	080222a4 	.word	0x080222a4
 8005090:	00989680 	.word	0x00989680
 8005094:	0802228c 	.word	0x0802228c
 8005098:	08022294 	.word	0x08022294

0800509c <screenPowerSourceControl>:
*		[310] *Adjust current limit for power source
*		[311] *Enable power source
*		[312] *Behaviour mode of power source
*/

void screenPowerSourceControl(){
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af04      	add	r7, sp, #16
	u8g2_ClearBuffer(&u8g2);
	u8g2_DrawStr(&u8g2, 15, 35, "Power Source Control");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/
	u8g2_ClearDisplay(&u8g2);
 80050a2:	4891      	ldr	r0, [pc, #580]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80050a4:	f00e fe0b 	bl	8013cbe <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 80050a8:	488f      	ldr	r0, [pc, #572]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80050aa:	f00e fd22 	bl	8013af2 <u8g2_ClearBuffer>


	uint32_t temp32 = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Power source menu", 1,"Adjust voltage\nAdjust current limit\nEnable source\nEnable mode\nBack to Main")) {
 80050b2:	4b8e      	ldr	r3, [pc, #568]	; (80052ec <screenPowerSourceControl+0x250>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	498e      	ldr	r1, [pc, #568]	; (80052f0 <screenPowerSourceControl+0x254>)
 80050b8:	488b      	ldr	r0, [pc, #556]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80050ba:	f010 fbdc 	bl	8015876 <u8g2_UserInterfaceSelectionList>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	f200 8109 	bhi.w	80052d8 <screenPowerSourceControl+0x23c>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <screenPowerSourceControl+0x30>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050e1 	.word	0x080050e1
 80050d0:	080050ed 	.word	0x080050ed
 80050d4:	08005121 	.word	0x08005121
 80050d8:	08005153 	.word	0x08005153
 80050dc:	080051e9 	.word	0x080051e9
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 80050e0:	4b84      	ldr	r3, [pc, #528]	; (80052f4 <screenPowerSourceControl+0x258>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80050e6:	f000 fb89 	bl	80057fc <screenInterface>
 80050ea:	e0fa      	b.n	80052e2 <screenPowerSourceControl+0x246>
	// adjust voltage
	case 1:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source voltage", "",&settings.powerSourceVoltage, 500, 5500, 5, " mV");
 80050ec:	4b82      	ldr	r3, [pc, #520]	; (80052f8 <screenPowerSourceControl+0x25c>)
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	2305      	movs	r3, #5
 80050f2:	9302      	str	r3, [sp, #8]
 80050f4:	f241 537c 	movw	r3, #5500	; 0x157c
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	4b7e      	ldr	r3, [pc, #504]	; (80052fc <screenPowerSourceControl+0x260>)
 8005102:	4a7f      	ldr	r2, [pc, #508]	; (8005300 <screenPowerSourceControl+0x264>)
 8005104:	497f      	ldr	r1, [pc, #508]	; (8005304 <screenPowerSourceControl+0x268>)
 8005106:	4878      	ldr	r0, [pc, #480]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005108:	f00f fdd8 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
 800510c:	4603      	mov	r3, r0
 800510e:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <screenPowerSourceControl+0x7e>
			setPotenciomenters();
 8005116:	f7fd f8af 	bl	8002278 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 800511a:	f7ff ffbf 	bl	800509c <screenPowerSourceControl>
 800511e:	e0e0      	b.n	80052e2 <screenPowerSourceControl+0x246>
		break;
	// adjust current limit
	case 2:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source current limit", "",&settings.powerSourceCurrent, 10, 500, 5, " mA");
 8005120:	4b79      	ldr	r3, [pc, #484]	; (8005308 <screenPowerSourceControl+0x26c>)
 8005122:	9303      	str	r3, [sp, #12]
 8005124:	2305      	movs	r3, #5
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	230a      	movs	r3, #10
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	4b76      	ldr	r3, [pc, #472]	; (800530c <screenPowerSourceControl+0x270>)
 8005134:	4a72      	ldr	r2, [pc, #456]	; (8005300 <screenPowerSourceControl+0x264>)
 8005136:	4976      	ldr	r1, [pc, #472]	; (8005310 <screenPowerSourceControl+0x274>)
 8005138:	486b      	ldr	r0, [pc, #428]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800513a:	f00f fdbf 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
 800513e:	4603      	mov	r3, r0
 8005140:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <screenPowerSourceControl+0xb0>
			setPotenciomenters();
 8005148:	f7fd f896 	bl	8002278 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 800514c:	f7ff ffa6 	bl	800509c <screenPowerSourceControl>
 8005150:	e0c7      	b.n	80052e2 <screenPowerSourceControl+0x246>
		break;
	// enable source
	case 3:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable power souce", NULL, NULL," YES \n NO ") == 1) {
 8005152:	4b70      	ldr	r3, [pc, #448]	; (8005314 <screenPowerSourceControl+0x278>)
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	2200      	movs	r2, #0
 800515a:	496f      	ldr	r1, [pc, #444]	; (8005318 <screenPowerSourceControl+0x27c>)
 800515c:	4862      	ldr	r0, [pc, #392]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800515e:	f010 f956 	bl	801540e <u8g2_UserInterfaceMessage>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d11e      	bne.n	80051a6 <screenPowerSourceControl+0x10a>
			u8g2_ClearDisplay(&u8g2);
 8005168:	485f      	ldr	r0, [pc, #380]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800516a:	f00e fda8 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800516e:	485e      	ldr	r0, [pc, #376]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005170:	f00e fcbf 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "SOURCE: ENABLED");
 8005174:	4b69      	ldr	r3, [pc, #420]	; (800531c <screenPowerSourceControl+0x280>)
 8005176:	2223      	movs	r2, #35	; 0x23
 8005178:	2114      	movs	r1, #20
 800517a:	485b      	ldr	r0, [pc, #364]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800517c:	f00f fafe 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005180:	4859      	ldr	r0, [pc, #356]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005182:	f00e fd29 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8005186:	2201      	movs	r2, #1
 8005188:	2110      	movs	r1, #16
 800518a:	4865      	ldr	r0, [pc, #404]	; (8005320 <screenPowerSourceControl+0x284>)
 800518c:	f004 fb62 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8005190:	2201      	movs	r2, #1
 8005192:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005196:	4863      	ldr	r0, [pc, #396]	; (8005324 <screenPowerSourceControl+0x288>)
 8005198:	f004 fb5c 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 800519c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80051a0:	f003 f85e 	bl	8008260 <HAL_Delay>
 80051a4:	e01d      	b.n	80051e2 <screenPowerSourceControl+0x146>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 80051a6:	4850      	ldr	r0, [pc, #320]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051a8:	f00e fd89 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80051ac:	484e      	ldr	r0, [pc, #312]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051ae:	f00e fca0 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "SOURCE: DISABLED");
 80051b2:	4b5d      	ldr	r3, [pc, #372]	; (8005328 <screenPowerSourceControl+0x28c>)
 80051b4:	2223      	movs	r2, #35	; 0x23
 80051b6:	210f      	movs	r1, #15
 80051b8:	484b      	ldr	r0, [pc, #300]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051ba:	f00f fadf 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80051be:	484a      	ldr	r0, [pc, #296]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051c0:	f00e fd0a 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 80051c4:	2200      	movs	r2, #0
 80051c6:	2110      	movs	r1, #16
 80051c8:	4855      	ldr	r0, [pc, #340]	; (8005320 <screenPowerSourceControl+0x284>)
 80051ca:	f004 fb43 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 80051ce:	2200      	movs	r2, #0
 80051d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051d4:	4853      	ldr	r0, [pc, #332]	; (8005324 <screenPowerSourceControl+0x288>)
 80051d6:	f004 fb3d 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 80051da:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80051de:	f003 f83f 	bl	8008260 <HAL_Delay>
		}
		return screenPowerSourceControl();
 80051e2:	f7ff ff5b 	bl	800509c <screenPowerSourceControl>
 80051e6:	e07c      	b.n	80052e2 <screenPowerSourceControl+0x246>
		break;
	// enable mode
	case 4:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Enable mode", 1,"Enable on measuring\nEnable on boot\nManual mode\nExit");
 80051e8:	4b50      	ldr	r3, [pc, #320]	; (800532c <screenPowerSourceControl+0x290>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	4950      	ldr	r1, [pc, #320]	; (8005330 <screenPowerSourceControl+0x294>)
 80051ee:	483e      	ldr	r0, [pc, #248]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051f0:	f010 fb41 	bl	8015876 <u8g2_UserInterfaceSelectionList>
 80051f4:	4603      	mov	r3, r0
 80051f6:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d117      	bne.n	800522e <screenPowerSourceControl+0x192>
			u8g2_ClearDisplay(&u8g2);
 80051fe:	483a      	ldr	r0, [pc, #232]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005200:	f00e fd5d 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005204:	4838      	ldr	r0, [pc, #224]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005206:	f00e fc74 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: START MEAS");
 800520a:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <screenPowerSourceControl+0x298>)
 800520c:	2223      	movs	r2, #35	; 0x23
 800520e:	2114      	movs	r1, #20
 8005210:	4835      	ldr	r0, [pc, #212]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005212:	f00f fab3 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005216:	4834      	ldr	r0, [pc, #208]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005218:	f00e fcde 	bl	8013bd8 <u8g2_SendBuffer>
			settings.powerSourceEnableMode = 1;
 800521c:	4b46      	ldr	r3, [pc, #280]	; (8005338 <screenPowerSourceControl+0x29c>)
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			HAL_Delay(1500);
 8005224:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005228:	f003 f81a 	bl	8008260 <HAL_Delay>
 800522c:	e051      	b.n	80052d2 <screenPowerSourceControl+0x236>
		}
		else if(temp32 == 2){
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d121      	bne.n	8005278 <screenPowerSourceControl+0x1dc>
			u8g2_ClearDisplay(&u8g2);
 8005234:	482c      	ldr	r0, [pc, #176]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005236:	f00e fd42 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800523a:	482b      	ldr	r0, [pc, #172]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800523c:	f00e fc59 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: DURING BOOT");
 8005240:	4b3e      	ldr	r3, [pc, #248]	; (800533c <screenPowerSourceControl+0x2a0>)
 8005242:	2223      	movs	r2, #35	; 0x23
 8005244:	2114      	movs	r1, #20
 8005246:	4828      	ldr	r0, [pc, #160]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005248:	f00f fa98 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800524c:	4826      	ldr	r0, [pc, #152]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800524e:	f00e fcc3 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isAveraging = 2;
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <screenPowerSourceControl+0x29c>)
 8005254:	2202      	movs	r2, #2
 8005256:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8005258:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800525c:	f003 f800 	bl	8008260 <HAL_Delay>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8005260:	2201      	movs	r2, #1
 8005262:	2110      	movs	r1, #16
 8005264:	482e      	ldr	r0, [pc, #184]	; (8005320 <screenPowerSourceControl+0x284>)
 8005266:	f004 faf5 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800526a:	2201      	movs	r2, #1
 800526c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005270:	482c      	ldr	r0, [pc, #176]	; (8005324 <screenPowerSourceControl+0x288>)
 8005272:	f004 faef 	bl	8009854 <HAL_GPIO_WritePin>
 8005276:	e02c      	b.n	80052d2 <screenPowerSourceControl+0x236>

		}
		else if(temp32 == 3){
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d116      	bne.n	80052ac <screenPowerSourceControl+0x210>
			u8g2_ClearDisplay(&u8g2);
 800527e:	481a      	ldr	r0, [pc, #104]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005280:	f00e fd1d 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005284:	4818      	ldr	r0, [pc, #96]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005286:	f00e fc34 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: MANUAL");
 800528a:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <screenPowerSourceControl+0x2a4>)
 800528c:	2223      	movs	r2, #35	; 0x23
 800528e:	2114      	movs	r1, #20
 8005290:	4815      	ldr	r0, [pc, #84]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005292:	f00f fa73 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005296:	4814      	ldr	r0, [pc, #80]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005298:	f00e fc9e 	bl	8013bd8 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 800529c:	4b26      	ldr	r3, [pc, #152]	; (8005338 <screenPowerSourceControl+0x29c>)
 800529e:	2200      	movs	r2, #0
 80052a0:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 80052a2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80052a6:	f002 ffdb 	bl	8008260 <HAL_Delay>
 80052aa:	e012      	b.n	80052d2 <screenPowerSourceControl+0x236>
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 80052ac:	480e      	ldr	r0, [pc, #56]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80052ae:	f00e fd06 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80052b2:	480d      	ldr	r0, [pc, #52]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80052b4:	f00e fc1d 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: NO CHANGE");
 80052b8:	4b22      	ldr	r3, [pc, #136]	; (8005344 <screenPowerSourceControl+0x2a8>)
 80052ba:	2223      	movs	r2, #35	; 0x23
 80052bc:	2114      	movs	r1, #20
 80052be:	480a      	ldr	r0, [pc, #40]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80052c0:	f00f fa5c 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80052c4:	4808      	ldr	r0, [pc, #32]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80052c6:	f00e fc87 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80052ca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80052ce:	f002 ffc7 	bl	8008260 <HAL_Delay>
			//settings.powerSourceEnableMode = 1;
		}
		return screenPowerSourceControl();
 80052d2:	f7ff fee3 	bl	800509c <screenPowerSourceControl>
 80052d6:	e004      	b.n	80052e2 <screenPowerSourceControl+0x246>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <screenPowerSourceControl+0x258>)
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80052de:	f000 fa8d 	bl	80057fc <screenInterface>
		break;

	}


}
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000290 	.word	0x20000290
 80052ec:	080222a8 	.word	0x080222a8
 80052f0:	080222f4 	.word	0x080222f4
 80052f4:	20000315 	.word	0x20000315
 80052f8:	08022318 	.word	0x08022318
 80052fc:	20000038 	.word	0x20000038
 8005300:	08020564 	.word	0x08020564
 8005304:	08022308 	.word	0x08022308
 8005308:	08022334 	.word	0x08022334
 800530c:	2000003a 	.word	0x2000003a
 8005310:	0802231c 	.word	0x0802231c
 8005314:	08022104 	.word	0x08022104
 8005318:	08022338 	.word	0x08022338
 800531c:	0802234c 	.word	0x0802234c
 8005320:	40020000 	.word	0x40020000
 8005324:	40020400 	.word	0x40020400
 8005328:	0802235c 	.word	0x0802235c
 800532c:	08022370 	.word	0x08022370
 8005330:	080223a4 	.word	0x080223a4
 8005334:	080223b0 	.word	0x080223b0
 8005338:	20000018 	.word	0x20000018
 800533c:	080223c4 	.word	0x080223c4
 8005340:	080223d8 	.word	0x080223d8
 8005344:	080223e8 	.word	0x080223e8

08005348 <screenRtcSettings>:
 *		[325] *Set Date - Year
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 */

void screenRtcSettings(){
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 800534e:	48b4      	ldr	r0, [pc, #720]	; (8005620 <screenRtcSettings+0x2d8>)
 8005350:	f00e fcb5 	bl	8013cbe <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8005354:	48b2      	ldr	r0, [pc, #712]	; (8005620 <screenRtcSettings+0x2d8>)
 8005356:	f00e fbcc 	bl	8013af2 <u8g2_ClearBuffer>

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800535a:	2200      	movs	r2, #0
 800535c:	49b1      	ldr	r1, [pc, #708]	; (8005624 <screenRtcSettings+0x2dc>)
 800535e:	48b2      	ldr	r0, [pc, #712]	; (8005628 <screenRtcSettings+0x2e0>)
 8005360:	f008 fa22 	bl	800d7a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8005364:	2200      	movs	r2, #0
 8005366:	49b1      	ldr	r1, [pc, #708]	; (800562c <screenRtcSettings+0x2e4>)
 8005368:	48af      	ldr	r0, [pc, #700]	; (8005628 <screenRtcSettings+0x2e0>)
 800536a:	f008 fb23 	bl	800d9b4 <HAL_RTC_GetDate>

	uint32_t temp32 = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "RTC menu", 1,"Set Time\nSet Date - Days\nSet Date - Month\nSet Date - Year\nBack to Main")) {
 8005372:	4baf      	ldr	r3, [pc, #700]	; (8005630 <screenRtcSettings+0x2e8>)
 8005374:	2201      	movs	r2, #1
 8005376:	49af      	ldr	r1, [pc, #700]	; (8005634 <screenRtcSettings+0x2ec>)
 8005378:	48a9      	ldr	r0, [pc, #676]	; (8005620 <screenRtcSettings+0x2d8>)
 800537a:	f010 fa7c 	bl	8015876 <u8g2_UserInterfaceSelectionList>
 800537e:	4603      	mov	r3, r0
 8005380:	2b04      	cmp	r3, #4
 8005382:	f200 8218 	bhi.w	80057b6 <screenRtcSettings+0x46e>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <screenRtcSettings+0x44>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053a1 	.word	0x080053a1
 8005390:	080053ad 	.word	0x080053ad
 8005394:	0800550d 	.word	0x0800550d
 8005398:	080055c7 	.word	0x080055c7
 800539c:	080056fd 	.word	0x080056fd
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 80053a0:	4ba5      	ldr	r3, [pc, #660]	; (8005638 <screenRtcSettings+0x2f0>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80053a6:	f000 fa29 	bl	80057fc <screenInterface>
 80053aa:	e209      	b.n	80057c0 <screenRtcSettings+0x478>
	// set time - hours, minutes, seconds
	case 1:
		temp32 = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	607b      	str	r3, [r7, #4]
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - hours", "1 .. 24",&Time.Hours, 1, 24, 5, " h") == 1){
 80053b0:	4ba2      	ldr	r3, [pc, #648]	; (800563c <screenRtcSettings+0x2f4>)
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	2305      	movs	r3, #5
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	2318      	movs	r3, #24
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	2301      	movs	r3, #1
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	4b98      	ldr	r3, [pc, #608]	; (8005624 <screenRtcSettings+0x2dc>)
 80053c2:	4a9f      	ldr	r2, [pc, #636]	; (8005640 <screenRtcSettings+0x2f8>)
 80053c4:	499f      	ldr	r1, [pc, #636]	; (8005644 <screenRtcSettings+0x2fc>)
 80053c6:	4896      	ldr	r0, [pc, #600]	; (8005620 <screenRtcSettings+0x2d8>)
 80053c8:	f00f fc78 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 8086 	bne.w	80054e0 <screenRtcSettings+0x198>
			if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - minutes", "0 .. 59",&Time.Minutes, 0, 59, 5, " min") == 1){
 80053d4:	4b9c      	ldr	r3, [pc, #624]	; (8005648 <screenRtcSettings+0x300>)
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	2305      	movs	r3, #5
 80053da:	9302      	str	r3, [sp, #8]
 80053dc:	233b      	movs	r3, #59	; 0x3b
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	2300      	movs	r3, #0
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	4b99      	ldr	r3, [pc, #612]	; (800564c <screenRtcSettings+0x304>)
 80053e6:	4a9a      	ldr	r2, [pc, #616]	; (8005650 <screenRtcSettings+0x308>)
 80053e8:	499a      	ldr	r1, [pc, #616]	; (8005654 <screenRtcSettings+0x30c>)
 80053ea:	488d      	ldr	r0, [pc, #564]	; (8005620 <screenRtcSettings+0x2d8>)
 80053ec:	f00f fc66 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d160      	bne.n	80054b8 <screenRtcSettings+0x170>
				if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - seconds", "0 .. 59",&Time.Seconds, 0, 59, 5, " sec") == 1){
 80053f6:	4b98      	ldr	r3, [pc, #608]	; (8005658 <screenRtcSettings+0x310>)
 80053f8:	9303      	str	r3, [sp, #12]
 80053fa:	2305      	movs	r3, #5
 80053fc:	9302      	str	r3, [sp, #8]
 80053fe:	233b      	movs	r3, #59	; 0x3b
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	2300      	movs	r3, #0
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4b95      	ldr	r3, [pc, #596]	; (800565c <screenRtcSettings+0x314>)
 8005408:	4a91      	ldr	r2, [pc, #580]	; (8005650 <screenRtcSettings+0x308>)
 800540a:	4995      	ldr	r1, [pc, #596]	; (8005660 <screenRtcSettings+0x318>)
 800540c:	4884      	ldr	r0, [pc, #528]	; (8005620 <screenRtcSettings+0x2d8>)
 800540e:	f00f fc55 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d13b      	bne.n	8005490 <screenRtcSettings+0x148>

					Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005418:	4b82      	ldr	r3, [pc, #520]	; (8005624 <screenRtcSettings+0x2dc>)
 800541a:	2200      	movs	r2, #0
 800541c:	611a      	str	r2, [r3, #16]
					Time.StoreOperation = RTC_STOREOPERATION_RESET;
 800541e:	4b81      	ldr	r3, [pc, #516]	; (8005624 <screenRtcSettings+0x2dc>)
 8005420:	2200      	movs	r2, #0
 8005422:	615a      	str	r2, [r3, #20]
					if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 8005424:	2200      	movs	r2, #0
 8005426:	497f      	ldr	r1, [pc, #508]	; (8005624 <screenRtcSettings+0x2dc>)
 8005428:	487f      	ldr	r0, [pc, #508]	; (8005628 <screenRtcSettings+0x2e0>)
 800542a:	f008 f8ff 	bl	800d62c <HAL_RTC_SetTime>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <screenRtcSettings+0x114>
					{
						u8g2_ClearDisplay(&u8g2);
 8005434:	487a      	ldr	r0, [pc, #488]	; (8005620 <screenRtcSettings+0x2d8>)
 8005436:	f00e fc42 	bl	8013cbe <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 800543a:	4879      	ldr	r0, [pc, #484]	; (8005620 <screenRtcSettings+0x2d8>)
 800543c:	f00e fb59 	bl	8013af2 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: ERROR");
 8005440:	4b88      	ldr	r3, [pc, #544]	; (8005664 <screenRtcSettings+0x31c>)
 8005442:	2223      	movs	r2, #35	; 0x23
 8005444:	2114      	movs	r1, #20
 8005446:	4876      	ldr	r0, [pc, #472]	; (8005620 <screenRtcSettings+0x2d8>)
 8005448:	f00f f998 	bl	801477c <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 800544c:	4874      	ldr	r0, [pc, #464]	; (8005620 <screenRtcSettings+0x2d8>)
 800544e:	f00e fbc3 	bl	8013bd8 <u8g2_SendBuffer>
						HAL_Delay(1500);
 8005452:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005456:	f002 ff03 	bl	8008260 <HAL_Delay>
 800545a:	e054      	b.n	8005506 <screenRtcSettings+0x1be>
					}
					else{
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800545c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8005460:	2101      	movs	r1, #1
 8005462:	4871      	ldr	r0, [pc, #452]	; (8005628 <screenRtcSettings+0x2e0>)
 8005464:	f008 fb86 	bl	800db74 <HAL_RTCEx_BKUPWrite>

						u8g2_ClearDisplay(&u8g2);
 8005468:	486d      	ldr	r0, [pc, #436]	; (8005620 <screenRtcSettings+0x2d8>)
 800546a:	f00e fc28 	bl	8013cbe <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 800546e:	486c      	ldr	r0, [pc, #432]	; (8005620 <screenRtcSettings+0x2d8>)
 8005470:	f00e fb3f 	bl	8013af2 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: SAVED");
 8005474:	4b7c      	ldr	r3, [pc, #496]	; (8005668 <screenRtcSettings+0x320>)
 8005476:	2223      	movs	r2, #35	; 0x23
 8005478:	2114      	movs	r1, #20
 800547a:	4869      	ldr	r0, [pc, #420]	; (8005620 <screenRtcSettings+0x2d8>)
 800547c:	f00f f97e 	bl	801477c <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8005480:	4867      	ldr	r0, [pc, #412]	; (8005620 <screenRtcSettings+0x2d8>)
 8005482:	f00e fba9 	bl	8013bd8 <u8g2_SendBuffer>
						HAL_Delay(1500);
 8005486:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800548a:	f002 fee9 	bl	8008260 <HAL_Delay>
 800548e:	e03a      	b.n	8005506 <screenRtcSettings+0x1be>
					}

				}
				else{
					u8g2_ClearDisplay(&u8g2);
 8005490:	4863      	ldr	r0, [pc, #396]	; (8005620 <screenRtcSettings+0x2d8>)
 8005492:	f00e fc14 	bl	8013cbe <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 8005496:	4862      	ldr	r0, [pc, #392]	; (8005620 <screenRtcSettings+0x2d8>)
 8005498:	f00e fb2b 	bl	8013af2 <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 800549c:	4b73      	ldr	r3, [pc, #460]	; (800566c <screenRtcSettings+0x324>)
 800549e:	2223      	movs	r2, #35	; 0x23
 80054a0:	2114      	movs	r1, #20
 80054a2:	485f      	ldr	r0, [pc, #380]	; (8005620 <screenRtcSettings+0x2d8>)
 80054a4:	f00f f96a 	bl	801477c <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 80054a8:	485d      	ldr	r0, [pc, #372]	; (8005620 <screenRtcSettings+0x2d8>)
 80054aa:	f00e fb95 	bl	8013bd8 <u8g2_SendBuffer>
					HAL_Delay(1500);
 80054ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80054b2:	f002 fed5 	bl	8008260 <HAL_Delay>
 80054b6:	e026      	b.n	8005506 <screenRtcSettings+0x1be>

				}

			}
			else{
				u8g2_ClearDisplay(&u8g2);
 80054b8:	4859      	ldr	r0, [pc, #356]	; (8005620 <screenRtcSettings+0x2d8>)
 80054ba:	f00e fc00 	bl	8013cbe <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80054be:	4858      	ldr	r0, [pc, #352]	; (8005620 <screenRtcSettings+0x2d8>)
 80054c0:	f00e fb17 	bl	8013af2 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 80054c4:	4b69      	ldr	r3, [pc, #420]	; (800566c <screenRtcSettings+0x324>)
 80054c6:	2223      	movs	r2, #35	; 0x23
 80054c8:	2114      	movs	r1, #20
 80054ca:	4855      	ldr	r0, [pc, #340]	; (8005620 <screenRtcSettings+0x2d8>)
 80054cc:	f00f f956 	bl	801477c <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80054d0:	4853      	ldr	r0, [pc, #332]	; (8005620 <screenRtcSettings+0x2d8>)
 80054d2:	f00e fb81 	bl	8013bd8 <u8g2_SendBuffer>
				HAL_Delay(1500);
 80054d6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80054da:	f002 fec1 	bl	8008260 <HAL_Delay>
 80054de:	e012      	b.n	8005506 <screenRtcSettings+0x1be>
			}
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 80054e0:	484f      	ldr	r0, [pc, #316]	; (8005620 <screenRtcSettings+0x2d8>)
 80054e2:	f00e fbec 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80054e6:	484e      	ldr	r0, [pc, #312]	; (8005620 <screenRtcSettings+0x2d8>)
 80054e8:	f00e fb03 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 80054ec:	4b5f      	ldr	r3, [pc, #380]	; (800566c <screenRtcSettings+0x324>)
 80054ee:	2223      	movs	r2, #35	; 0x23
 80054f0:	2114      	movs	r1, #20
 80054f2:	484b      	ldr	r0, [pc, #300]	; (8005620 <screenRtcSettings+0x2d8>)
 80054f4:	f00f f942 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80054f8:	4849      	ldr	r0, [pc, #292]	; (8005620 <screenRtcSettings+0x2d8>)
 80054fa:	f00e fb6d 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80054fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005502:	f002 fead 	bl	8008260 <HAL_Delay>

		}

		return screenRtcSettings();
 8005506:	f7ff ff1f 	bl	8005348 <screenRtcSettings>
 800550a:	e159      	b.n	80057c0 <screenRtcSettings+0x478>
		break;
	// set date day
	case 2:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - day", "1 .. 31",&Date.Date, 1, 31, 5, "") == 1){
 800550c:	4b58      	ldr	r3, [pc, #352]	; (8005670 <screenRtcSettings+0x328>)
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	2305      	movs	r3, #5
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	231f      	movs	r3, #31
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	2301      	movs	r3, #1
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	4b55      	ldr	r3, [pc, #340]	; (8005674 <screenRtcSettings+0x32c>)
 800551e:	4a56      	ldr	r2, [pc, #344]	; (8005678 <screenRtcSettings+0x330>)
 8005520:	4956      	ldr	r1, [pc, #344]	; (800567c <screenRtcSettings+0x334>)
 8005522:	483f      	ldr	r0, [pc, #252]	; (8005620 <screenRtcSettings+0x2d8>)
 8005524:	f00f fbca 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
 8005528:	4603      	mov	r3, r0
 800552a:	2b01      	cmp	r3, #1
 800552c:	d135      	bne.n	800559a <screenRtcSettings+0x252>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800552e:	2200      	movs	r2, #0
 8005530:	493e      	ldr	r1, [pc, #248]	; (800562c <screenRtcSettings+0x2e4>)
 8005532:	483d      	ldr	r0, [pc, #244]	; (8005628 <screenRtcSettings+0x2e0>)
 8005534:	f008 f996 	bl	800d864 <HAL_RTC_SetDate>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d013      	beq.n	8005566 <screenRtcSettings+0x21e>
			{
				u8g2_ClearDisplay(&u8g2);
 800553e:	4838      	ldr	r0, [pc, #224]	; (8005620 <screenRtcSettings+0x2d8>)
 8005540:	f00e fbbd 	bl	8013cbe <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005544:	4836      	ldr	r0, [pc, #216]	; (8005620 <screenRtcSettings+0x2d8>)
 8005546:	f00e fad4 	bl	8013af2 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: ERROR");
 800554a:	4b4d      	ldr	r3, [pc, #308]	; (8005680 <screenRtcSettings+0x338>)
 800554c:	2223      	movs	r2, #35	; 0x23
 800554e:	2114      	movs	r1, #20
 8005550:	4833      	ldr	r0, [pc, #204]	; (8005620 <screenRtcSettings+0x2d8>)
 8005552:	f00f f913 	bl	801477c <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005556:	4832      	ldr	r0, [pc, #200]	; (8005620 <screenRtcSettings+0x2d8>)
 8005558:	f00e fb3e 	bl	8013bd8 <u8g2_SendBuffer>
				HAL_Delay(1500);
 800555c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005560:	f002 fe7e 	bl	8008260 <HAL_Delay>
 8005564:	e02c      	b.n	80055c0 <screenRtcSettings+0x278>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8005566:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800556a:	2101      	movs	r1, #1
 800556c:	482e      	ldr	r0, [pc, #184]	; (8005628 <screenRtcSettings+0x2e0>)
 800556e:	f008 fb01 	bl	800db74 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 8005572:	482b      	ldr	r0, [pc, #172]	; (8005620 <screenRtcSettings+0x2d8>)
 8005574:	f00e fba3 	bl	8013cbe <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005578:	4829      	ldr	r0, [pc, #164]	; (8005620 <screenRtcSettings+0x2d8>)
 800557a:	f00e faba 	bl	8013af2 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: SAVED");
 800557e:	4b41      	ldr	r3, [pc, #260]	; (8005684 <screenRtcSettings+0x33c>)
 8005580:	2223      	movs	r2, #35	; 0x23
 8005582:	2114      	movs	r1, #20
 8005584:	4826      	ldr	r0, [pc, #152]	; (8005620 <screenRtcSettings+0x2d8>)
 8005586:	f00f f8f9 	bl	801477c <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 800558a:	4825      	ldr	r0, [pc, #148]	; (8005620 <screenRtcSettings+0x2d8>)
 800558c:	f00e fb24 	bl	8013bd8 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8005590:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005594:	f002 fe64 	bl	8008260 <HAL_Delay>
 8005598:	e012      	b.n	80055c0 <screenRtcSettings+0x278>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 800559a:	4821      	ldr	r0, [pc, #132]	; (8005620 <screenRtcSettings+0x2d8>)
 800559c:	f00e fb8f 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80055a0:	481f      	ldr	r0, [pc, #124]	; (8005620 <screenRtcSettings+0x2d8>)
 80055a2:	f00e faa6 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "DAY: NOT SAVED");
 80055a6:	4b38      	ldr	r3, [pc, #224]	; (8005688 <screenRtcSettings+0x340>)
 80055a8:	2223      	movs	r2, #35	; 0x23
 80055aa:	2114      	movs	r1, #20
 80055ac:	481c      	ldr	r0, [pc, #112]	; (8005620 <screenRtcSettings+0x2d8>)
 80055ae:	f00f f8e5 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80055b2:	481b      	ldr	r0, [pc, #108]	; (8005620 <screenRtcSettings+0x2d8>)
 80055b4:	f00e fb10 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80055b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80055bc:	f002 fe50 	bl	8008260 <HAL_Delay>
		}
		return screenRtcSettings();
 80055c0:	f7ff fec2 	bl	8005348 <screenRtcSettings>
 80055c4:	e0fc      	b.n	80057c0 <screenRtcSettings+0x478>
		break;
	// set date month
	case 3:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - month", "1 .. 12",&Date.Month, 1, 12, 5, "") == 1){
 80055c6:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <screenRtcSettings+0x328>)
 80055c8:	9303      	str	r3, [sp, #12]
 80055ca:	2305      	movs	r3, #5
 80055cc:	9302      	str	r3, [sp, #8]
 80055ce:	230c      	movs	r3, #12
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	2301      	movs	r3, #1
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	4b2d      	ldr	r3, [pc, #180]	; (800568c <screenRtcSettings+0x344>)
 80055d8:	4a2d      	ldr	r2, [pc, #180]	; (8005690 <screenRtcSettings+0x348>)
 80055da:	492e      	ldr	r1, [pc, #184]	; (8005694 <screenRtcSettings+0x34c>)
 80055dc:	4810      	ldr	r0, [pc, #64]	; (8005620 <screenRtcSettings+0x2d8>)
 80055de:	f00f fb6d 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d173      	bne.n	80056d0 <screenRtcSettings+0x388>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80055e8:	2200      	movs	r2, #0
 80055ea:	4910      	ldr	r1, [pc, #64]	; (800562c <screenRtcSettings+0x2e4>)
 80055ec:	480e      	ldr	r0, [pc, #56]	; (8005628 <screenRtcSettings+0x2e0>)
 80055ee:	f008 f939 	bl	800d864 <HAL_RTC_SetDate>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d051      	beq.n	800569c <screenRtcSettings+0x354>
			{
				u8g2_ClearDisplay(&u8g2);
 80055f8:	4809      	ldr	r0, [pc, #36]	; (8005620 <screenRtcSettings+0x2d8>)
 80055fa:	f00e fb60 	bl	8013cbe <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80055fe:	4808      	ldr	r0, [pc, #32]	; (8005620 <screenRtcSettings+0x2d8>)
 8005600:	f00e fa77 	bl	8013af2 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: ERROR");
 8005604:	4b24      	ldr	r3, [pc, #144]	; (8005698 <screenRtcSettings+0x350>)
 8005606:	2223      	movs	r2, #35	; 0x23
 8005608:	2114      	movs	r1, #20
 800560a:	4805      	ldr	r0, [pc, #20]	; (8005620 <screenRtcSettings+0x2d8>)
 800560c:	f00f f8b6 	bl	801477c <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005610:	4803      	ldr	r0, [pc, #12]	; (8005620 <screenRtcSettings+0x2d8>)
 8005612:	f00e fae1 	bl	8013bd8 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8005616:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800561a:	f002 fe21 	bl	8008260 <HAL_Delay>
 800561e:	e06a      	b.n	80056f6 <screenRtcSettings+0x3ae>
 8005620:	20000290 	.word	0x20000290
 8005624:	20008804 	.word	0x20008804
 8005628:	20003000 	.word	0x20003000
 800562c:	20006e60 	.word	0x20006e60
 8005630:	080223fc 	.word	0x080223fc
 8005634:	08022444 	.word	0x08022444
 8005638:	20000315 	.word	0x20000315
 800563c:	0802246c 	.word	0x0802246c
 8005640:	08022450 	.word	0x08022450
 8005644:	08022458 	.word	0x08022458
 8005648:	08022490 	.word	0x08022490
 800564c:	20008805 	.word	0x20008805
 8005650:	08022470 	.word	0x08022470
 8005654:	08022478 	.word	0x08022478
 8005658:	080224b0 	.word	0x080224b0
 800565c:	20008806 	.word	0x20008806
 8005660:	08022498 	.word	0x08022498
 8005664:	080224b8 	.word	0x080224b8
 8005668:	080224c4 	.word	0x080224c4
 800566c:	080224d0 	.word	0x080224d0
 8005670:	08020564 	.word	0x08020564
 8005674:	20006e62 	.word	0x20006e62
 8005678:	080224e0 	.word	0x080224e0
 800567c:	080224e8 	.word	0x080224e8
 8005680:	080224f8 	.word	0x080224f8
 8005684:	08022504 	.word	0x08022504
 8005688:	08022510 	.word	0x08022510
 800568c:	20006e61 	.word	0x20006e61
 8005690:	08022520 	.word	0x08022520
 8005694:	08022528 	.word	0x08022528
 8005698:	0802253c 	.word	0x0802253c
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800569c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80056a0:	2101      	movs	r1, #1
 80056a2:	4849      	ldr	r0, [pc, #292]	; (80057c8 <screenRtcSettings+0x480>)
 80056a4:	f008 fa66 	bl	800db74 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 80056a8:	4848      	ldr	r0, [pc, #288]	; (80057cc <screenRtcSettings+0x484>)
 80056aa:	f00e fb08 	bl	8013cbe <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80056ae:	4847      	ldr	r0, [pc, #284]	; (80057cc <screenRtcSettings+0x484>)
 80056b0:	f00e fa1f 	bl	8013af2 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: SAVED");
 80056b4:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <screenRtcSettings+0x488>)
 80056b6:	2223      	movs	r2, #35	; 0x23
 80056b8:	2114      	movs	r1, #20
 80056ba:	4844      	ldr	r0, [pc, #272]	; (80057cc <screenRtcSettings+0x484>)
 80056bc:	f00f f85e 	bl	801477c <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80056c0:	4842      	ldr	r0, [pc, #264]	; (80057cc <screenRtcSettings+0x484>)
 80056c2:	f00e fa89 	bl	8013bd8 <u8g2_SendBuffer>
				HAL_Delay(1500);
 80056c6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80056ca:	f002 fdc9 	bl	8008260 <HAL_Delay>
 80056ce:	e012      	b.n	80056f6 <screenRtcSettings+0x3ae>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 80056d0:	483e      	ldr	r0, [pc, #248]	; (80057cc <screenRtcSettings+0x484>)
 80056d2:	f00e faf4 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80056d6:	483d      	ldr	r0, [pc, #244]	; (80057cc <screenRtcSettings+0x484>)
 80056d8:	f00e fa0b 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "MONTH: NOT SAVED");
 80056dc:	4b3d      	ldr	r3, [pc, #244]	; (80057d4 <screenRtcSettings+0x48c>)
 80056de:	2223      	movs	r2, #35	; 0x23
 80056e0:	2114      	movs	r1, #20
 80056e2:	483a      	ldr	r0, [pc, #232]	; (80057cc <screenRtcSettings+0x484>)
 80056e4:	f00f f84a 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80056e8:	4838      	ldr	r0, [pc, #224]	; (80057cc <screenRtcSettings+0x484>)
 80056ea:	f00e fa75 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80056ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80056f2:	f002 fdb5 	bl	8008260 <HAL_Delay>
		}
		return screenRtcSettings();
 80056f6:	f7ff fe27 	bl	8005348 <screenRtcSettings>
 80056fa:	e061      	b.n	80057c0 <screenRtcSettings+0x478>
		break;
	// set date year
	case 4:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - year", "20XX 0 .. 100",&Date.Year, 0, 100, 5, "") == 1){
 80056fc:	4b36      	ldr	r3, [pc, #216]	; (80057d8 <screenRtcSettings+0x490>)
 80056fe:	9303      	str	r3, [sp, #12]
 8005700:	2305      	movs	r3, #5
 8005702:	9302      	str	r3, [sp, #8]
 8005704:	2364      	movs	r3, #100	; 0x64
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	2300      	movs	r3, #0
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	4b33      	ldr	r3, [pc, #204]	; (80057dc <screenRtcSettings+0x494>)
 800570e:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <screenRtcSettings+0x498>)
 8005710:	4934      	ldr	r1, [pc, #208]	; (80057e4 <screenRtcSettings+0x49c>)
 8005712:	482e      	ldr	r0, [pc, #184]	; (80057cc <screenRtcSettings+0x484>)
 8005714:	f00f fad2 	bl	8014cbc <u8g2_UserInterfaceInputValue32>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d135      	bne.n	800578a <screenRtcSettings+0x442>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800571e:	2200      	movs	r2, #0
 8005720:	4931      	ldr	r1, [pc, #196]	; (80057e8 <screenRtcSettings+0x4a0>)
 8005722:	4829      	ldr	r0, [pc, #164]	; (80057c8 <screenRtcSettings+0x480>)
 8005724:	f008 f89e 	bl	800d864 <HAL_RTC_SetDate>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d013      	beq.n	8005756 <screenRtcSettings+0x40e>
			{
				u8g2_ClearDisplay(&u8g2);
 800572e:	4827      	ldr	r0, [pc, #156]	; (80057cc <screenRtcSettings+0x484>)
 8005730:	f00e fac5 	bl	8013cbe <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005734:	4825      	ldr	r0, [pc, #148]	; (80057cc <screenRtcSettings+0x484>)
 8005736:	f00e f9dc 	bl	8013af2 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: ERROR");
 800573a:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <screenRtcSettings+0x4a4>)
 800573c:	2223      	movs	r2, #35	; 0x23
 800573e:	2114      	movs	r1, #20
 8005740:	4822      	ldr	r0, [pc, #136]	; (80057cc <screenRtcSettings+0x484>)
 8005742:	f00f f81b 	bl	801477c <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005746:	4821      	ldr	r0, [pc, #132]	; (80057cc <screenRtcSettings+0x484>)
 8005748:	f00e fa46 	bl	8013bd8 <u8g2_SendBuffer>
				HAL_Delay(1500);
 800574c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005750:	f002 fd86 	bl	8008260 <HAL_Delay>
 8005754:	e02c      	b.n	80057b0 <screenRtcSettings+0x468>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8005756:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800575a:	2101      	movs	r1, #1
 800575c:	481a      	ldr	r0, [pc, #104]	; (80057c8 <screenRtcSettings+0x480>)
 800575e:	f008 fa09 	bl	800db74 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 8005762:	481a      	ldr	r0, [pc, #104]	; (80057cc <screenRtcSettings+0x484>)
 8005764:	f00e faab 	bl	8013cbe <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005768:	4818      	ldr	r0, [pc, #96]	; (80057cc <screenRtcSettings+0x484>)
 800576a:	f00e f9c2 	bl	8013af2 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: SAVED");
 800576e:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <screenRtcSettings+0x4a8>)
 8005770:	2223      	movs	r2, #35	; 0x23
 8005772:	2114      	movs	r1, #20
 8005774:	4815      	ldr	r0, [pc, #84]	; (80057cc <screenRtcSettings+0x484>)
 8005776:	f00f f801 	bl	801477c <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 800577a:	4814      	ldr	r0, [pc, #80]	; (80057cc <screenRtcSettings+0x484>)
 800577c:	f00e fa2c 	bl	8013bd8 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8005780:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005784:	f002 fd6c 	bl	8008260 <HAL_Delay>
 8005788:	e012      	b.n	80057b0 <screenRtcSettings+0x468>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 800578a:	4810      	ldr	r0, [pc, #64]	; (80057cc <screenRtcSettings+0x484>)
 800578c:	f00e fa97 	bl	8013cbe <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005790:	480e      	ldr	r0, [pc, #56]	; (80057cc <screenRtcSettings+0x484>)
 8005792:	f00e f9ae 	bl	8013af2 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "YEAR: NOT SAVED");
 8005796:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <screenRtcSettings+0x4ac>)
 8005798:	2223      	movs	r2, #35	; 0x23
 800579a:	2114      	movs	r1, #20
 800579c:	480b      	ldr	r0, [pc, #44]	; (80057cc <screenRtcSettings+0x484>)
 800579e:	f00e ffed 	bl	801477c <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80057a2:	480a      	ldr	r0, [pc, #40]	; (80057cc <screenRtcSettings+0x484>)
 80057a4:	f00e fa18 	bl	8013bd8 <u8g2_SendBuffer>
			HAL_Delay(1500);
 80057a8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80057ac:	f002 fd58 	bl	8008260 <HAL_Delay>
		}
		return screenRtcSettings();
 80057b0:	f7ff fdca 	bl	8005348 <screenRtcSettings>
 80057b4:	e004      	b.n	80057c0 <screenRtcSettings+0x478>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <screenRtcSettings+0x4b0>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80057bc:	f000 f81e 	bl	80057fc <screenInterface>
	}




}
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20003000 	.word	0x20003000
 80057cc:	20000290 	.word	0x20000290
 80057d0:	0802254c 	.word	0x0802254c
 80057d4:	0802255c 	.word	0x0802255c
 80057d8:	08020564 	.word	0x08020564
 80057dc:	20006e63 	.word	0x20006e63
 80057e0:	08022570 	.word	0x08022570
 80057e4:	08022580 	.word	0x08022580
 80057e8:	20006e60 	.word	0x20006e60
 80057ec:	08022590 	.word	0x08022590
 80057f0:	0802259c 	.word	0x0802259c
 80057f4:	080225a8 	.word	0x080225a8
 80057f8:	20000315 	.word	0x20000315

080057fc <screenInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void screenInterface(){
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af02      	add	r7, sp, #8
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf


	//isDownTriggered = 0;
	//isUpTriggered = 0;
	isLeftTriggered = 0;
 8005802:	4b66      	ldr	r3, [pc, #408]	; (800599c <screenInterface+0x1a0>)
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
	isRightTriggered = 0;
 8005808:	4b65      	ldr	r3, [pc, #404]	; (80059a0 <screenInterface+0x1a4>)
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
	isEscTriggered = 0;
 800580e:	4b65      	ldr	r3, [pc, #404]	; (80059a4 <screenInterface+0x1a8>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]

	if(isUpTriggered){
 8005814:	4b64      	ldr	r3, [pc, #400]	; (80059a8 <screenInterface+0x1ac>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00f      	beq.n	800583c <screenInterface+0x40>
		isUpTriggered = 0;
 800581c:	4b62      	ldr	r3, [pc, #392]	; (80059a8 <screenInterface+0x1ac>)
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
		rangeMode++;
 8005822:	4b62      	ldr	r3, [pc, #392]	; (80059ac <screenInterface+0x1b0>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b60      	ldr	r3, [pc, #384]	; (80059ac <screenInterface+0x1b0>)
 800582c:	701a      	strb	r2, [r3, #0]

		if(rangeMode > 4)
 800582e:	4b5f      	ldr	r3, [pc, #380]	; (80059ac <screenInterface+0x1b0>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b04      	cmp	r3, #4
 8005834:	d902      	bls.n	800583c <screenInterface+0x40>
			rangeMode = 0;
 8005836:	4b5d      	ldr	r3, [pc, #372]	; (80059ac <screenInterface+0x1b0>)
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
	}
	if(isDownTriggered){
 800583c:	4b5c      	ldr	r3, [pc, #368]	; (80059b0 <screenInterface+0x1b4>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <screenInterface+0x5a>
		isDownTriggered = 0;
 8005844:	4b5a      	ldr	r3, [pc, #360]	; (80059b0 <screenInterface+0x1b4>)
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
		rangeMode--;
 800584a:	4b58      	ldr	r3, [pc, #352]	; (80059ac <screenInterface+0x1b0>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	b2da      	uxtb	r2, r3
 8005852:	4b56      	ldr	r3, [pc, #344]	; (80059ac <screenInterface+0x1b0>)
 8005854:	701a      	strb	r2, [r3, #0]
		if(rangeMode < 0)
			rangeMode = 4;

	}

	if(isEnterTriggered == 1){
 8005856:	4b57      	ldr	r3, [pc, #348]	; (80059b4 <screenInterface+0x1b8>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b01      	cmp	r3, #1
 800585c:	f040 8098 	bne.w	8005990 <screenInterface+0x194>
		isEnterTriggered = 0;
 8005860:	4b54      	ldr	r3, [pc, #336]	; (80059b4 <screenInterface+0x1b8>)
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
		u8g2_ClearBuffer(&u8g2);
 8005866:	4854      	ldr	r0, [pc, #336]	; (80059b8 <screenInterface+0x1bc>)
 8005868:	f00e f943 	bl	8013af2 <u8g2_ClearBuffer>


		switch(u8g2_UserInterfaceSelectionList(&u8g2, "MENU", 1, "Device Settings\nMeasuring settings\nStart measuring\nPower source control\nRTC Settings\nBack to InfoPanel")){
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <screenInterface+0x1c0>)
 800586e:	2201      	movs	r2, #1
 8005870:	4953      	ldr	r1, [pc, #332]	; (80059c0 <screenInterface+0x1c4>)
 8005872:	4851      	ldr	r0, [pc, #324]	; (80059b8 <screenInterface+0x1bc>)
 8005874:	f00f ffff 	bl	8015876 <u8g2_UserInterfaceSelectionList>
 8005878:	4603      	mov	r3, r0
 800587a:	2b05      	cmp	r3, #5
 800587c:	f200 8084 	bhi.w	8005988 <screenInterface+0x18c>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <screenInterface+0x8c>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058a1 	.word	0x080058a1
 800588c:	080058a7 	.word	0x080058a7
 8005890:	080058ad 	.word	0x080058ad
 8005894:	080058b3 	.word	0x080058b3
 8005898:	0800597d 	.word	0x0800597d
 800589c:	08005983 	.word	0x08005983
			// back to info panel
			case 0:
				screenInfoPanel();
 80058a0:	f7ff f856 	bl	8004950 <screenInfoPanel>
				break;
 80058a4:	e076      	b.n	8005994 <screenInterface+0x198>
			// device settings
			case 1:
				screenDeviceSettings();
 80058a6:	f7ff f921 	bl	8004aec <screenDeviceSettings>
				break;
 80058aa:	e073      	b.n	8005994 <screenInterface+0x198>
			// measuring settings
			case 2:
				screenMeasuringSettings();
 80058ac:	f7ff facc 	bl	8004e48 <screenMeasuringSettings>
				break;
 80058b0:	e070      	b.n	8005994 <screenInterface+0x198>
			// Start measuring
			case 3:
				if(u8g2_UserInterfaceMessage(&u8g2, "Start measuring", NULL, NULL, " YES \n NO ") == 1){
 80058b2:	4b44      	ldr	r3, [pc, #272]	; (80059c4 <screenInterface+0x1c8>)
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	2300      	movs	r3, #0
 80058b8:	2200      	movs	r2, #0
 80058ba:	4943      	ldr	r1, [pc, #268]	; (80059c8 <screenInterface+0x1cc>)
 80058bc:	483e      	ldr	r0, [pc, #248]	; (80059b8 <screenInterface+0x1bc>)
 80058be:	f00f fda6 	bl	801540e <u8g2_UserInterfaceMessage>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d149      	bne.n	800595c <screenInterface+0x160>
					if (isMeasuring == 0) {
 80058c8:	4b40      	ldr	r3, [pc, #256]	; (80059cc <screenInterface+0x1d0>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d122      	bne.n	8005918 <screenInterface+0x11c>
						//isLoggingToConsole = 1;
						if (settings.isTriggerActive == 0)
 80058d2:	4b3f      	ldr	r3, [pc, #252]	; (80059d0 <screenInterface+0x1d4>)
 80058d4:	7b5b      	ldrb	r3, [r3, #13]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <screenInterface+0xe4>
							isMeasuring = 1;
 80058da:	4b3c      	ldr	r3, [pc, #240]	; (80059cc <screenInterface+0x1d0>)
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 1;
 80058e0:	4b3c      	ldr	r3, [pc, #240]	; (80059d4 <screenInterface+0x1d8>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 0;
 80058e6:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <screenInterface+0x1dc>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]

						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80058ec:	2201      	movs	r2, #1
 80058ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058f2:	483a      	ldr	r0, [pc, #232]	; (80059dc <screenInterface+0x1e0>)
 80058f4:	f003 ffae 	bl	8009854 <HAL_GPIO_WritePin>

						u8g2_ClearDisplay(&u8g2);
 80058f8:	482f      	ldr	r0, [pc, #188]	; (80059b8 <screenInterface+0x1bc>)
 80058fa:	f00e f9e0 	bl	8013cbe <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 80058fe:	482e      	ldr	r0, [pc, #184]	; (80059b8 <screenInterface+0x1bc>)
 8005900:	f00e f8f7 	bl	8013af2 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STARTED!");
 8005904:	4b36      	ldr	r3, [pc, #216]	; (80059e0 <screenInterface+0x1e4>)
 8005906:	2223      	movs	r2, #35	; 0x23
 8005908:	2114      	movs	r1, #20
 800590a:	482b      	ldr	r0, [pc, #172]	; (80059b8 <screenInterface+0x1bc>)
 800590c:	f00e ff36 	bl	801477c <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8005910:	4829      	ldr	r0, [pc, #164]	; (80059b8 <screenInterface+0x1bc>)
 8005912:	f00e f961 	bl	8013bd8 <u8g2_SendBuffer>
					u8g2_ClearDisplay(&u8g2);
					u8g2_ClearBuffer(&u8g2);
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
					u8g2_SendBuffer(&u8g2);
				}
				break;
 8005916:	e03d      	b.n	8005994 <screenInterface+0x198>
						isMeasuring = 0;
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <screenInterface+0x1d0>)
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
						isTriggered = 0;
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <screenInterface+0x1e8>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 0;
 8005924:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <screenInterface+0x1d8>)
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 1;
 800592a:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <screenInterface+0x1dc>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005930:	2200      	movs	r2, #0
 8005932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005936:	4829      	ldr	r0, [pc, #164]	; (80059dc <screenInterface+0x1e0>)
 8005938:	f003 ff8c 	bl	8009854 <HAL_GPIO_WritePin>
						u8g2_ClearDisplay(&u8g2);
 800593c:	481e      	ldr	r0, [pc, #120]	; (80059b8 <screenInterface+0x1bc>)
 800593e:	f00e f9be 	bl	8013cbe <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8005942:	481d      	ldr	r0, [pc, #116]	; (80059b8 <screenInterface+0x1bc>)
 8005944:	f00e f8d5 	bl	8013af2 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STOPPED!");
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <screenInterface+0x1ec>)
 800594a:	2223      	movs	r2, #35	; 0x23
 800594c:	2114      	movs	r1, #20
 800594e:	481a      	ldr	r0, [pc, #104]	; (80059b8 <screenInterface+0x1bc>)
 8005950:	f00e ff14 	bl	801477c <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8005954:	4818      	ldr	r0, [pc, #96]	; (80059b8 <screenInterface+0x1bc>)
 8005956:	f00e f93f 	bl	8013bd8 <u8g2_SendBuffer>
				break;
 800595a:	e01b      	b.n	8005994 <screenInterface+0x198>
					u8g2_ClearDisplay(&u8g2);
 800595c:	4816      	ldr	r0, [pc, #88]	; (80059b8 <screenInterface+0x1bc>)
 800595e:	f00e f9ae 	bl	8013cbe <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 8005962:	4815      	ldr	r0, [pc, #84]	; (80059b8 <screenInterface+0x1bc>)
 8005964:	f00e f8c5 	bl	8013af2 <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
 8005968:	4b20      	ldr	r3, [pc, #128]	; (80059ec <screenInterface+0x1f0>)
 800596a:	2223      	movs	r2, #35	; 0x23
 800596c:	210f      	movs	r1, #15
 800596e:	4812      	ldr	r0, [pc, #72]	; (80059b8 <screenInterface+0x1bc>)
 8005970:	f00e ff04 	bl	801477c <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 8005974:	4810      	ldr	r0, [pc, #64]	; (80059b8 <screenInterface+0x1bc>)
 8005976:	f00e f92f 	bl	8013bd8 <u8g2_SendBuffer>
				break;
 800597a:	e00b      	b.n	8005994 <screenInterface+0x198>
			// Power source control
			case 4:
				screenPowerSourceControl();
 800597c:	f7ff fb8e 	bl	800509c <screenPowerSourceControl>
				break;
 8005980:	e008      	b.n	8005994 <screenInterface+0x198>
			// rtc settings
			case 5:
				screenRtcSettings();
 8005982:	f7ff fce1 	bl	8005348 <screenRtcSettings>
				break;
 8005986:	e005      	b.n	8005994 <screenInterface+0x198>
			default:
				screenInfoPanel();
 8005988:	f7fe ffe2 	bl	8004950 <screenInfoPanel>
				break;
 800598c:	bf00      	nop
 800598e:	e001      	b.n	8005994 <screenInterface+0x198>


	}

	else{
		screenInfoPanel();
 8005990:	f7fe ffde 	bl	8004950 <screenInfoPanel>
	}




}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000319 	.word	0x20000319
 80059a0:	2000031a 	.word	0x2000031a
 80059a4:	20000316 	.word	0x20000316
 80059a8:	20000317 	.word	0x20000317
 80059ac:	2000000c 	.word	0x2000000c
 80059b0:	20000318 	.word	0x20000318
 80059b4:	20000315 	.word	0x20000315
 80059b8:	20000290 	.word	0x20000290
 80059bc:	080225b8 	.word	0x080225b8
 80059c0:	08021f14 	.word	0x08021f14
 80059c4:	08022104 	.word	0x08022104
 80059c8:	08022620 	.word	0x08022620
 80059cc:	20000322 	.word	0x20000322
 80059d0:	20000018 	.word	0x20000018
 80059d4:	20000320 	.word	0x20000320
 80059d8:	20000321 	.word	0x20000321
 80059dc:	40021000 	.word	0x40021000
 80059e0:	08022630 	.word	0x08022630
 80059e4:	20000314 	.word	0x20000314
 80059e8:	08022644 	.word	0x08022644
 80059ec:	08022658 	.word	0x08022658

080059f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80059f6:	f7fb fed5 	bl	80017a4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80059fa:	f7fb fef3 	bl	80017e4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059fe:	f002 fbc3 	bl	8008188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a02:	f000 fbbb 	bl	800617c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a06:	f000 ffdf 	bl	80069c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005a0a:	f000 ff83 	bl	8006914 <MX_DMA_Init>
  MX_ETH_Init();
 8005a0e:	f000 fc6d 	bl	80062ec <MX_ETH_Init>
  MX_I2C4_Init();
 8005a12:	f000 fceb 	bl	80063ec <MX_I2C4_Init>
  MX_RTC_Init();
 8005a16:	f000 fd29 	bl	800646c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8005a1a:	f000 fd83 	bl	8006524 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8005a1e:	f000 fda1 	bl	8006564 <MX_SPI1_Init>
  MX_SPI4_Init();
 8005a22:	f000 fddd 	bl	80065e0 <MX_SPI4_Init>
  MX_UART7_Init();
 8005a26:	f000 ff11 	bl	800684c <MX_UART7_Init>
  MX_FATFS_Init();
 8005a2a:	f010 fec9 	bl	80167c0 <MX_FATFS_Init>
  MX_TIM4_Init();
 8005a2e:	f000 fe15 	bl	800665c <MX_TIM4_Init>
  MX_TIM5_Init();
 8005a32:	f000 fe61 	bl	80066f8 <MX_TIM5_Init>
  MX_TIM7_Init();
 8005a36:	f000 fead 	bl	8006794 <MX_TIM7_Init>
  MX_TIM14_Init();
 8005a3a:	f000 fee1 	bl	8006800 <MX_TIM14_Init>
  MX_USB_HOST_Init();
 8005a3e:	f017 ff97 	bl	801d970 <MX_USB_HOST_Init>
  MX_I2C1_Init();
 8005a42:	f000 fc93 	bl	800636c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8005a46:	f000 ff33 	bl	80068b0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */


  // init 32 bit TIM5 in normal mode for 1 us delay
  HAL_TIM_Base_Start(&htim5);
 8005a4a:	48c4      	ldr	r0, [pc, #784]	; (8005d5c <main+0x36c>)
 8005a4c:	f00b f808 	bl	8010a60 <HAL_TIM_Base_Start>
  // init 16 bit TIM4 in normal mode for 1 us delay
  HAL_TIM_Base_Start(&htim4);
 8005a50:	48c3      	ldr	r0, [pc, #780]	; (8005d60 <main+0x370>)
 8005a52:	f00b f805 	bl	8010a60 <HAL_TIM_Base_Start>

  // init 16 bit TIM14 for timeout interrupt
  HAL_TIM_Base_Start(&htim14);
 8005a56:	48c3      	ldr	r0, [pc, #780]	; (8005d64 <main+0x374>)
 8005a58:	f00b f802 	bl	8010a60 <HAL_TIM_Base_Start>

  // unit indication LED
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a62:	48c1      	ldr	r0, [pc, #772]	; (8005d68 <main+0x378>)
 8005a64:	f003 fef6 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a6e:	48be      	ldr	r0, [pc, #760]	; (8005d68 <main+0x378>)
 8005a70:	f003 fef0 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8005a74:	2200      	movs	r2, #0
 8005a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a7a:	48bc      	ldr	r0, [pc, #752]	; (8005d6c <main+0x37c>)
 8005a7c:	f003 feea 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005a80:	20fa      	movs	r0, #250	; 0xfa
 8005a82:	f002 fbed 	bl	8008260 <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8005a86:	2201      	movs	r2, #1
 8005a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a8c:	48b6      	ldr	r0, [pc, #728]	; (8005d68 <main+0x378>)
 8005a8e:	f003 fee1 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8005a92:	2201      	movs	r2, #1
 8005a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a98:	48b3      	ldr	r0, [pc, #716]	; (8005d68 <main+0x378>)
 8005a9a:	f003 fedb 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005aa4:	48b1      	ldr	r0, [pc, #708]	; (8005d6c <main+0x37c>)
 8005aa6:	f003 fed5 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005aaa:	20fa      	movs	r0, #250	; 0xfa
 8005aac:	f002 fbd8 	bl	8008260 <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ab6:	48ac      	ldr	r0, [pc, #688]	; (8005d68 <main+0x378>)
 8005ab8:	f003 fecc 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ac2:	48a9      	ldr	r0, [pc, #676]	; (8005d68 <main+0x378>)
 8005ac4:	f003 fec6 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ace:	48a7      	ldr	r0, [pc, #668]	; (8005d6c <main+0x37c>)
 8005ad0:	f003 fec0 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005ad4:	20fa      	movs	r0, #250	; 0xfa
 8005ad6:	f002 fbc3 	bl	8008260 <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8005ada:	2201      	movs	r2, #1
 8005adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ae0:	48a1      	ldr	r0, [pc, #644]	; (8005d68 <main+0x378>)
 8005ae2:	f003 feb7 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005aec:	489e      	ldr	r0, [pc, #632]	; (8005d68 <main+0x378>)
 8005aee:	f003 feb1 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8005af2:	2201      	movs	r2, #1
 8005af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005af8:	489c      	ldr	r0, [pc, #624]	; (8005d6c <main+0x37c>)
 8005afa:	f003 feab 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005afe:	20fa      	movs	r0, #250	; 0xfa
 8005b00:	f002 fbae 	bl	8008260 <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005b04:	2200      	movs	r2, #0
 8005b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b0a:	4897      	ldr	r0, [pc, #604]	; (8005d68 <main+0x378>)
 8005b0c:	f003 fea2 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8005b10:	2200      	movs	r2, #0
 8005b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b16:	4894      	ldr	r0, [pc, #592]	; (8005d68 <main+0x378>)
 8005b18:	f003 fe9c 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b22:	4892      	ldr	r0, [pc, #584]	; (8005d6c <main+0x37c>)
 8005b24:	f003 fe96 	bl	8009854 <HAL_GPIO_WritePin>

  // default setting for ranges
  // mA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_SET);
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2110      	movs	r1, #16
 8005b2c:	488e      	ldr	r0, [pc, #568]	; (8005d68 <main+0x378>)
 8005b2e:	f003 fe91 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_RESET);
 8005b32:	2200      	movs	r2, #0
 8005b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b38:	488c      	ldr	r0, [pc, #560]	; (8005d6c <main+0x37c>)
 8005b3a:	f003 fe8b 	bl	8009854 <HAL_GPIO_WritePin>

  // uA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 8005b3e:	2201      	movs	r2, #1
 8005b40:	2120      	movs	r1, #32
 8005b42:	4889      	ldr	r0, [pc, #548]	; (8005d68 <main+0x378>)
 8005b44:	f003 fe86 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4886      	ldr	r0, [pc, #536]	; (8005d68 <main+0x378>)
 8005b4e:	f003 fe81 	bl	8009854 <HAL_GPIO_WritePin>

  // nA range ON
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2108      	movs	r1, #8
 8005b56:	4884      	ldr	r0, [pc, #528]	; (8005d68 <main+0x378>)
 8005b58:	f003 fe7c 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_SET);
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	2102      	movs	r1, #2
 8005b60:	4881      	ldr	r0, [pc, #516]	; (8005d68 <main+0x378>)
 8005b62:	f003 fe77 	bl	8009854 <HAL_GPIO_WritePin>

  // GND range ON
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_GND_PORT, RANGE_SELECT_PIN_AS_GND, GPIO_PIN_RESET);
 8005b66:	2200      	movs	r2, #0
 8005b68:	2104      	movs	r1, #4
 8005b6a:	487f      	ldr	r0, [pc, #508]	; (8005d68 <main+0x378>)
 8005b6c:	f003 fe72 	bl	8009854 <HAL_GPIO_WritePin>


  // set adc conv pin to default/low level
  HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
 8005b70:	2200      	movs	r2, #0
 8005b72:	2120      	movs	r1, #32
 8005b74:	487d      	ldr	r0, [pc, #500]	; (8005d6c <main+0x37c>)
 8005b76:	f003 fe6d 	bl	8009854 <HAL_GPIO_WritePin>

  /***************** set mA range on -- TEST only ********************************/
  currentRange = 2;
 8005b7a:	4b7d      	ldr	r3, [pc, #500]	; (8005d70 <main+0x380>)
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	701a      	strb	r2, [r3, #0]

  // mA range ON
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_RESET);
 8005b80:	2200      	movs	r2, #0
 8005b82:	2110      	movs	r1, #16
 8005b84:	4878      	ldr	r0, [pc, #480]	; (8005d68 <main+0x378>)
 8005b86:	f003 fe65 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_SET);
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b90:	4876      	ldr	r0, [pc, #472]	; (8005d6c <main+0x37c>)
 8005b92:	f003 fe5f 	bl	8009854 <HAL_GPIO_WritePin>

  // uA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 8005b96:	2201      	movs	r2, #1
 8005b98:	2120      	movs	r1, #32
 8005b9a:	4873      	ldr	r0, [pc, #460]	; (8005d68 <main+0x378>)
 8005b9c:	f003 fe5a 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	4870      	ldr	r0, [pc, #448]	; (8005d68 <main+0x378>)
 8005ba6:	f003 fe55 	bl	8009854 <HAL_GPIO_WritePin>

  // nA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_SET);
 8005baa:	2201      	movs	r2, #1
 8005bac:	2108      	movs	r1, #8
 8005bae:	486e      	ldr	r0, [pc, #440]	; (8005d68 <main+0x378>)
 8005bb0:	f003 fe50 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_RESET);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	486b      	ldr	r0, [pc, #428]	; (8005d68 <main+0x378>)
 8005bba:	f003 fe4b 	bl	8009854 <HAL_GPIO_WritePin>


  // USB OTG Power Enable
  HAL_GPIO_WritePin(USB_OTG_POWER_EN_PORT, USB_OTG_POWER_EN_PIN, GPIO_PIN_SET);
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bc4:	486b      	ldr	r0, [pc, #428]	; (8005d74 <main+0x384>)
 8005bc6:	f003 fe45 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005bca:	2001      	movs	r0, #1
 8005bcc:	f002 fb48 	bl	8008260 <HAL_Delay>
  //u8g2_InitDisplay(&u8g2);
  //u8g2_SetPowerSave(&u8g2, 0);
  // SCREEN INIT

  //u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c
  u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c // 180 degree rotation
 8005bd0:	4b69      	ldr	r3, [pc, #420]	; (8005d78 <main+0x388>)
 8005bd2:	4a6a      	ldr	r2, [pc, #424]	; (8005d7c <main+0x38c>)
 8005bd4:	496a      	ldr	r1, [pc, #424]	; (8005d80 <main+0x390>)
 8005bd6:	486b      	ldr	r0, [pc, #428]	; (8005d84 <main+0x394>)
 8005bd8:	f00e f896 	bl	8013d08 <u8g2_Setup_sh1106_i2c_128x64_noname_f>
  //u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
  u8g2_InitDisplay(&u8g2);
 8005bdc:	4869      	ldr	r0, [pc, #420]	; (8005d84 <main+0x394>)
 8005bde:	f010 fc27 	bl	8016430 <u8x8_InitDisplay>

  u8g2_SetPowerSave(&u8g2, 0);
 8005be2:	2100      	movs	r1, #0
 8005be4:	4867      	ldr	r0, [pc, #412]	; (8005d84 <main+0x394>)
 8005be6:	f010 fc32 	bl	801644e <u8x8_SetPowerSave>
  u8g2_SetFlipMode(&u8g2, 1);
 8005bea:	2101      	movs	r1, #1
 8005bec:	4865      	ldr	r0, [pc, #404]	; (8005d84 <main+0x394>)
 8005bee:	f010 fc3f 	bl	8016470 <u8x8_SetFlipMode>
  u8g2_ClearDisplay(&u8g2);
 8005bf2:	4864      	ldr	r0, [pc, #400]	; (8005d84 <main+0x394>)
 8005bf4:	f00e f863 	bl	8013cbe <u8g2_ClearDisplay>
  //u8g2_Clear(&u8g2);
  u8g2_SetFontMode(&u8g2, 0);
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4862      	ldr	r0, [pc, #392]	; (8005d84 <main+0x394>)
 8005bfc:	f00e fd00 	bl	8014600 <u8g2_SetFontMode>
  u8g2_SetContrast(&u8g2, 80);
 8005c00:	2150      	movs	r1, #80	; 0x50
 8005c02:	4860      	ldr	r0, [pc, #384]	; (8005d84 <main+0x394>)
 8005c04:	f010 fc45 	bl	8016492 <u8x8_SetContrast>
  u8g2_SetFontDirection(&u8g2, 0);
 8005c08:	2100      	movs	r1, #0
 8005c0a:	485e      	ldr	r0, [pc, #376]	; (8005d84 <main+0x394>)
 8005c0c:	f00e fef0 	bl	80149f0 <u8g2_SetFontDirection>
  u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf		//u8g2_font_6x10_tf
 8005c10:	495d      	ldr	r1, [pc, #372]	; (8005d88 <main+0x398>)
 8005c12:	485c      	ldr	r0, [pc, #368]	; (8005d84 <main+0x394>)
 8005c14:	f00e fe6e 	bl	80148f4 <u8g2_SetFont>
  u8g2_ClearBuffer(&u8g2);
 8005c18:	485a      	ldr	r0, [pc, #360]	; (8005d84 <main+0x394>)
 8005c1a:	f00d ff6a 	bl	8013af2 <u8g2_ClearBuffer>
  //ST7528_Contrast(ST7528_RREG_72, ST7528_BIAS_11, 10);
  //ST7528_Clear();
  //ST7528_SetYDir(SCR_INVERT_OFF);
  //u8g2_DrawStr(&u8g2, 10, 10, "Hello World!");
  //u8g2_DrawLine(&u8g2, 5, 5, 155, 15);
  u8g2_SendBuffer(&u8g2);
 8005c1e:	4859      	ldr	r0, [pc, #356]	; (8005d84 <main+0x394>)
 8005c20:	f00d ffda 	bl	8013bd8 <u8g2_SendBuffer>
  u8g2_UpdateDisplay(&u8g2);
 8005c24:	4857      	ldr	r0, [pc, #348]	; (8005d84 <main+0x394>)
 8005c26:	f00e f83f 	bl	8013ca8 <u8g2_UpdateDisplay>
  HAL_Delay(100);
 8005c2a:	2064      	movs	r0, #100	; 0x64
 8005c2c:	f002 fb18 	bl	8008260 <HAL_Delay>
  	LCD_Circle(30, 44, 4, 15);
  	ST7528_Flush();
  	HAL_Delay(500);
*/

  u8g2_DrawStr(&u8g2, 20, 20, "Current logger");
 8005c30:	4b56      	ldr	r3, [pc, #344]	; (8005d8c <main+0x39c>)
 8005c32:	2214      	movs	r2, #20
 8005c34:	2114      	movs	r1, #20
 8005c36:	4853      	ldr	r0, [pc, #332]	; (8005d84 <main+0x394>)
 8005c38:	f00e fda0 	bl	801477c <u8g2_DrawStr>
  u8g2_DrawStr(&u8g2, 20, 40, "Firmware version 1.0.0");
 8005c3c:	4b54      	ldr	r3, [pc, #336]	; (8005d90 <main+0x3a0>)
 8005c3e:	2228      	movs	r2, #40	; 0x28
 8005c40:	2114      	movs	r1, #20
 8005c42:	4850      	ldr	r0, [pc, #320]	; (8005d84 <main+0x394>)
 8005c44:	f00e fd9a 	bl	801477c <u8g2_DrawStr>
  u8g2_SendBuffer(&u8g2);
 8005c48:	484e      	ldr	r0, [pc, #312]	; (8005d84 <main+0x394>)
 8005c4a:	f00d ffc5 	bl	8013bd8 <u8g2_SendBuffer>
  u8g2_UpdateDisplay(&u8g2);
 8005c4e:	484d      	ldr	r0, [pc, #308]	; (8005d84 <main+0x394>)
 8005c50:	f00e f82a 	bl	8013ca8 <u8g2_UpdateDisplay>


	HAL_Delay(1000);
 8005c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c58:	f002 fb02 	bl	8008260 <HAL_Delay>

  // init uart ring buffers
  UARTRXInit();
 8005c5c:	f002 f9c0 	bl	8007fe0 <UARTRXInit>
  UARTTXInit();
 8005c60:	f002 f8c6 	bl	8007df0 <UARTTXInit>
  writeEEPROM_AT24();
  HAL_Delay(5);
  send_uart3("EEEPROM - DATA WRITE - DONE\n");
  microDelay(50);
  */
  send_uart3("EEPROM - DATA READ - START\n");
 8005c64:	484b      	ldr	r0, [pc, #300]	; (8005d94 <main+0x3a4>)
 8005c66:	f7fb ff4f 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005c6a:	2032      	movs	r0, #50	; 0x32
 8005c6c:	f7fb ff78 	bl	8001b60 <microDelay>

  readEEPROM_AT24();
 8005c70:	f7fc f9ba 	bl	8001fe8 <readEEPROM_AT24>
  printSettingsValues();
 8005c74:	f7fd fb06 	bl	8003284 <printSettingsValues>

  send_uart3("EEPROM - DATA READ - DONE\n");
 8005c78:	4847      	ldr	r0, [pc, #284]	; (8005d98 <main+0x3a8>)
 8005c7a:	f7fb ff45 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005c7e:	2032      	movs	r0, #50	; 0x32
 8005c80:	f7fb ff6e 	bl	8001b60 <microDelay>


  // config ADC
  // reset pin
  HAL_GPIO_WritePin(ADC_RESET_PORT, ADC_RESET_PIN, GPIO_PIN_SET);
 8005c84:	2201      	movs	r2, #1
 8005c86:	2140      	movs	r1, #64	; 0x40
 8005c88:	4838      	ldr	r0, [pc, #224]	; (8005d6c <main+0x37c>)
 8005c8a:	f003 fde3 	bl	8009854 <HAL_GPIO_WritePin>

  adc_config();
 8005c8e:	f7fc fe85 	bl	800299c <adc_config>

  microDelay(500);
 8005c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c96:	f7fb ff63 	bl	8001b60 <microDelay>

  // measure adc offset
  //adc_compensateOffset();
  microDelay(50);
 8005c9a:	2032      	movs	r0, #50	; 0x32
 8005c9c:	f7fb ff60 	bl	8001b60 <microDelay>
  //u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
  //u8g2_DrawStr(&u8g2, 0, 15, "Hello World!");
  //u8g2_DrawCircle(&u8g2, 64, 40, 10, U8G2_DRAW_ALL);

  // getting time and date for formatting as name of new logged file
  HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	493e      	ldr	r1, [pc, #248]	; (8005d9c <main+0x3ac>)
 8005ca4:	483e      	ldr	r0, [pc, #248]	; (8005da0 <main+0x3b0>)
 8005ca6:	f007 fd7f 	bl	800d7a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 8005caa:	2200      	movs	r2, #0
 8005cac:	493d      	ldr	r1, [pc, #244]	; (8005da4 <main+0x3b4>)
 8005cae:	483c      	ldr	r0, [pc, #240]	; (8005da0 <main+0x3b0>)
 8005cb0:	f007 fe80 	bl	800d9b4 <HAL_RTC_GetDate>
  // file name format "20YYMMDD_HHMM" example "20200120_1022" = 20.1.2020 10:22
  sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year, Date.Month, Date.Date, Time.Hours,Time.Minutes);
 8005cb4:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <main+0x3b4>)
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8005cbc:	4b39      	ldr	r3, [pc, #228]	; (8005da4 <main+0x3b4>)
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	461c      	mov	r4, r3
 8005cc2:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <main+0x3b4>)
 8005cc4:	789b      	ldrb	r3, [r3, #2]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4b34      	ldr	r3, [pc, #208]	; (8005d9c <main+0x3ac>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	4b33      	ldr	r3, [pc, #204]	; (8005d9c <main+0x3ac>)
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	9001      	str	r0, [sp, #4]
 8005cd6:	9100      	str	r1, [sp, #0]
 8005cd8:	4623      	mov	r3, r4
 8005cda:	4933      	ldr	r1, [pc, #204]	; (8005da8 <main+0x3b8>)
 8005cdc:	4833      	ldr	r0, [pc, #204]	; (8005dac <main+0x3bc>)
 8005cde:	f018 febb 	bl	801ea58 <siprintf>

  send_uart3(uartBufferTx);
 8005ce2:	4832      	ldr	r0, [pc, #200]	; (8005dac <main+0x3bc>)
 8005ce4:	f7fb ff10 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005ce8:	2032      	movs	r0, #50	; 0x32
 8005cea:	f7fb ff39 	bl	8001b60 <microDelay>
  //HAL_RTC_SetTime(&hrtc, &Time, FORMAT_BCD);
  //HAL_RTC_SetDate(&hrtc, &Date, FORMAT_BCD);


  send_uart3("Power source - Init - START\n");
 8005cee:	4830      	ldr	r0, [pc, #192]	; (8005db0 <main+0x3c0>)
 8005cf0:	f7fb ff0a 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005cf4:	2032      	movs	r0, #50	; 0x32
 8005cf6:	f7fb ff33 	bl	8001b60 <microDelay>

  setPotenciomenters();
 8005cfa:	f7fc fabd 	bl	8002278 <setPotenciomenters>

  readPotenciometers();
 8005cfe:	f7fc fba5 	bl	800244c <readPotenciometers>

  if( (settings.powerSourceEnableMode == 0 & settings.powerSourceEnable == 1 ) | settings.powerSourceEnableMode == 2 ){
 8005d02:	4b2c      	ldr	r3, [pc, #176]	; (8005db4 <main+0x3c4>)
 8005d04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <main+0x3c4>)
 8005d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	4013      	ands	r3, r2
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <main+0x3c4>)
 8005d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d03e      	beq.n	8005dbc <main+0x3cc>
	  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8005d3e:	2201      	movs	r2, #1
 8005d40:	2110      	movs	r1, #16
 8005d42:	480c      	ldr	r0, [pc, #48]	; (8005d74 <main+0x384>)
 8005d44:	f003 fd86 	bl	8009854 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d4e:	4807      	ldr	r0, [pc, #28]	; (8005d6c <main+0x37c>)
 8005d50:	f003 fd80 	bl	8009854 <HAL_GPIO_WritePin>
	  send_uart3("Power Source: ENABLED\n");
 8005d54:	4818      	ldr	r0, [pc, #96]	; (8005db8 <main+0x3c8>)
 8005d56:	f7fb fed7 	bl	8001b08 <send_uart3>
 8005d5a:	e03d      	b.n	8005dd8 <main+0x3e8>
 8005d5c:	20011b58 	.word	0x20011b58
 8005d60:	20011b18 	.word	0x20011b18
 8005d64:	2000d8d8 	.word	0x2000d8d8
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	40020400 	.word	0x40020400
 8005d70:	20000344 	.word	0x20000344
 8005d74:	40020000 	.word	0x40020000
 8005d78:	08004569 	.word	0x08004569
 8005d7c:	080046f9 	.word	0x080046f9
 8005d80:	08022e68 	.word	0x08022e68
 8005d84:	20000290 	.word	0x20000290
 8005d88:	080228a0 	.word	0x080228a0
 8005d8c:	08022674 	.word	0x08022674
 8005d90:	08022684 	.word	0x08022684
 8005d94:	0802269c 	.word	0x0802269c
 8005d98:	080226b8 	.word	0x080226b8
 8005d9c:	20008804 	.word	0x20008804
 8005da0:	20003000 	.word	0x20003000
 8005da4:	20006e60 	.word	0x20006e60
 8005da8:	080226d4 	.word	0x080226d4
 8005dac:	20011a2c 	.word	0x20011a2c
 8005db0:	080226f0 	.word	0x080226f0
 8005db4:	20000018 	.word	0x20000018
 8005db8:	08022710 	.word	0x08022710
  }
  else{
	  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2110      	movs	r1, #16
 8005dc0:	48a7      	ldr	r0, [pc, #668]	; (8006060 <main+0x670>)
 8005dc2:	f003 fd47 	bl	8009854 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dcc:	48a5      	ldr	r0, [pc, #660]	; (8006064 <main+0x674>)
 8005dce:	f003 fd41 	bl	8009854 <HAL_GPIO_WritePin>
	  send_uart3("Power Source: DISABLED\n");
 8005dd2:	48a5      	ldr	r0, [pc, #660]	; (8006068 <main+0x678>)
 8005dd4:	f7fb fe98 	bl	8001b08 <send_uart3>
	  HAL_Delay(1000);

  }
*/

  send_uart3("Power source - Init - DONE\n");
 8005dd8:	48a4      	ldr	r0, [pc, #656]	; (800606c <main+0x67c>)
 8005dda:	f7fb fe95 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005dde:	2032      	movs	r0, #50	; 0x32
 8005de0:	f7fb febe 	bl	8001b60 <microDelay>

  //sd_card_test();

  send_uart3("Memory devices - Init - START\n");
 8005de4:	48a2      	ldr	r0, [pc, #648]	; (8006070 <main+0x680>)
 8005de6:	f7fb fe8f 	bl	8001b08 <send_uart3>


  Mount_SD("/");
 8005dea:	48a2      	ldr	r0, [pc, #648]	; (8006074 <main+0x684>)
 8005dec:	f7fa fe0a 	bl	8000a04 <Mount_SD>
  Format_SD();
 8005df0:	f7fa fe4e 	bl	8000a90 <Format_SD>
  Create_File("FILE1.TXT");
 8005df4:	48a0      	ldr	r0, [pc, #640]	; (8006078 <main+0x688>)
 8005df6:	f7fa ff63 	bl	8000cc0 <Create_File>
  Write_File("FILE1.TXT", "test123");
 8005dfa:	49a0      	ldr	r1, [pc, #640]	; (800607c <main+0x68c>)
 8005dfc:	489e      	ldr	r0, [pc, #632]	; (8006078 <main+0x688>)
 8005dfe:	f7fa fead 	bl	8000b5c <Write_File>
  Create_File("FILE2.TXT");
 8005e02:	489f      	ldr	r0, [pc, #636]	; (8006080 <main+0x690>)
 8005e04:	f7fa ff5c 	bl	8000cc0 <Create_File>
  Unmount_SD("/");
 8005e08:	489a      	ldr	r0, [pc, #616]	; (8006074 <main+0x684>)
 8005e0a:	f7fa fe1f 	bl	8000a4c <Unmount_SD>
  send_uart3("FS DONE\n");
 8005e0e:	489d      	ldr	r0, [pc, #628]	; (8006084 <main+0x694>)
 8005e10:	f7fb fe7a 	bl	8001b08 <send_uart3>
  */

  // SD Card


  send_uart3("Memory devices - Init - DONE\n");
 8005e14:	489c      	ldr	r0, [pc, #624]	; (8006088 <main+0x698>)
 8005e16:	f7fb fe77 	bl	8001b08 <send_uart3>

  send_uart3("\nINITDONE\n");
 8005e1a:	489c      	ldr	r0, [pc, #624]	; (800608c <main+0x69c>)
 8005e1c:	f7fb fe74 	bl	8001b08 <send_uart3>
  send_uart2("\nINITDONE\n");
 8005e20:	489a      	ldr	r0, [pc, #616]	; (800608c <main+0x69c>)
 8005e22:	f7fb fe5f 	bl	8001ae4 <send_uart2>
  microDelay(50);
 8005e26:	2032      	movs	r0, #50	; 0x32
 8005e28:	f7fb fe9a 	bl	8001b60 <microDelay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // cycle measurement
	  	  	if ( ( TIM5->CNT - previousMeasuringTime ) >=  settings.measuringInterval) {
 8005e2c:	4b98      	ldr	r3, [pc, #608]	; (8006090 <main+0x6a0>)
 8005e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e30:	4b98      	ldr	r3, [pc, #608]	; (8006094 <main+0x6a4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	1ad2      	subs	r2, r2, r3
 8005e36:	4b98      	ldr	r3, [pc, #608]	; (8006098 <main+0x6a8>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d318      	bcc.n	8005e70 <main+0x480>
	  	  		timeWindowMeasuring = ( TIM5->CNT - previousMeasuringTime );
 8005e3e:	4b94      	ldr	r3, [pc, #592]	; (8006090 <main+0x6a0>)
 8005e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e42:	4b94      	ldr	r3, [pc, #592]	; (8006094 <main+0x6a4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	4a94      	ldr	r2, [pc, #592]	; (800609c <main+0x6ac>)
 8005e4a:	6013      	str	r3, [r2, #0]
	  		//if ( ( __HAL_TIM_GET_COUNTER(&htim5) - previousMeasuringTime ) >=  settings.measuringInterval) {
	  			//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  			//timeWindowMeasuring = ( __HAL_TIM_GET_COUNTER(&htim5) - previousMeasuringTime );
	  			previousMeasuringTime += timeWindowMeasuring;
 8005e4c:	4b91      	ldr	r3, [pc, #580]	; (8006094 <main+0x6a4>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b92      	ldr	r3, [pc, #584]	; (800609c <main+0x6ac>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4413      	add	r3, r2
 8005e56:	4a8f      	ldr	r2, [pc, #572]	; (8006094 <main+0x6a4>)
 8005e58:	6013      	str	r3, [r2, #0]

	  			// External ADC convertor - 18b
	  			//adc_sample();
	  			adc_sample_ads8691();
 8005e5a:	f7fc ff39 	bl	8002cd0 <adc_sample_ads8691>


	  			//microDelay(20);

	  			// calculate and change measuring range accordingly
	  			ranges();
 8005e5e:	f7fd f803 	bl	8002e68 <ranges>

	  			triggerMenu();
 8005e62:	f7fd f991 	bl	8003188 <triggerMenu>
	  			}
	  			*/

	  			//HAL_ADC_Start_IT (&hadc1);

	  			cycleNumber++;
 8005e66:	4b8e      	ldr	r3, [pc, #568]	; (80060a0 <main+0x6b0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	4a8c      	ldr	r2, [pc, #560]	; (80060a0 <main+0x6b0>)
 8005e6e:	6013      	str	r3, [r2, #0]


	  		}

	  		// cycle sample storing
	  	    if ( ( ( TIM5->CNT - previousSamplingTime) >=  (settings.samplingInterval - SAMPLING_TOLERANCE) )  && isMeasuring == 1 && isReadyForNext == 1) {
 8005e70:	4b87      	ldr	r3, [pc, #540]	; (8006090 <main+0x6a0>)
 8005e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e74:	4b8b      	ldr	r3, [pc, #556]	; (80060a4 <main+0x6b4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	4b87      	ldr	r3, [pc, #540]	; (8006098 <main+0x6a8>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	3b0a      	subs	r3, #10
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d372      	bcc.n	8005f6a <main+0x57a>
 8005e84:	4b88      	ldr	r3, [pc, #544]	; (80060a8 <main+0x6b8>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d16d      	bne.n	8005f6a <main+0x57a>
 8005e8e:	4b87      	ldr	r3, [pc, #540]	; (80060ac <main+0x6bc>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d169      	bne.n	8005f6a <main+0x57a>
	  	    	timeWindowSampling = ( TIM5->CNT - previousSamplingTime );
 8005e96:	4b7e      	ldr	r3, [pc, #504]	; (8006090 <main+0x6a0>)
 8005e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e9a:	4b82      	ldr	r3, [pc, #520]	; (80060a4 <main+0x6b4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	4a83      	ldr	r2, [pc, #524]	; (80060b0 <main+0x6c0>)
 8005ea2:	6013      	str	r3, [r2, #0]
	  		//if ( ( (__HAL_TIM_GET_COUNTER(&htim5) - previousSamplingTime) >=  (settings.samplingInterval - SAMPLING_TOLERANCE) )  && isMeasuring == 1 && isReadyForNext == 1) {
	  			//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  			//timeWindowSampling = ( __HAL_TIM_GET_COUNTER(&htim5) - previousSamplingTime );
	  			previousSamplingTime += timeWindowSampling;
 8005ea4:	4b7f      	ldr	r3, [pc, #508]	; (80060a4 <main+0x6b4>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b81      	ldr	r3, [pc, #516]	; (80060b0 <main+0x6c0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	4a7d      	ldr	r2, [pc, #500]	; (80060a4 <main+0x6b4>)
 8005eb0:	6013      	str	r3, [r2, #0]

	  			measuringNumber++;
 8005eb2:	4b80      	ldr	r3, [pc, #512]	; (80060b4 <main+0x6c4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	4a7e      	ldr	r2, [pc, #504]	; (80060b4 <main+0x6c4>)
 8005eba:	6013      	str	r3, [r2, #0]

	  			if(startOfMeasurement == 1){
 8005ebc:	4b7e      	ldr	r3, [pc, #504]	; (80060b8 <main+0x6c8>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d123      	bne.n	8005f0c <main+0x51c>

	  				// getting time and date for formatting as name of new logged file
	  				//HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BCD);
	  				//HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BCD);
	  				HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	497d      	ldr	r1, [pc, #500]	; (80060bc <main+0x6cc>)
 8005ec8:	487d      	ldr	r0, [pc, #500]	; (80060c0 <main+0x6d0>)
 8005eca:	f007 fc6d 	bl	800d7a8 <HAL_RTC_GetTime>
	  				HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 8005ece:	2200      	movs	r2, #0
 8005ed0:	497c      	ldr	r1, [pc, #496]	; (80060c4 <main+0x6d4>)
 8005ed2:	487b      	ldr	r0, [pc, #492]	; (80060c0 <main+0x6d0>)
 8005ed4:	f007 fd6e 	bl	800d9b4 <HAL_RTC_GetDate>

	  				// file name format "20YYMMDD_HHMM" example "20200120_1022"
	  				sprintf(loggingFileName, "\n20%2d%2d%2d_%2d%2d.txt\n\n", Date.Year, Date.Month, Date.Date, Time.Hours,Time.Minutes);
 8005ed8:	4b7a      	ldr	r3, [pc, #488]	; (80060c4 <main+0x6d4>)
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	4618      	mov	r0, r3
 8005ede:	4b79      	ldr	r3, [pc, #484]	; (80060c4 <main+0x6d4>)
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	461c      	mov	r4, r3
 8005ee4:	4b77      	ldr	r3, [pc, #476]	; (80060c4 <main+0x6d4>)
 8005ee6:	789b      	ldrb	r3, [r3, #2]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b74      	ldr	r3, [pc, #464]	; (80060bc <main+0x6cc>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4b72      	ldr	r3, [pc, #456]	; (80060bc <main+0x6cc>)
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	9302      	str	r3, [sp, #8]
 8005ef6:	9101      	str	r1, [sp, #4]
 8005ef8:	9200      	str	r2, [sp, #0]
 8005efa:	4623      	mov	r3, r4
 8005efc:	4602      	mov	r2, r0
 8005efe:	4972      	ldr	r1, [pc, #456]	; (80060c8 <main+0x6d8>)
 8005f00:	4872      	ldr	r0, [pc, #456]	; (80060cc <main+0x6dc>)
 8005f02:	f018 fda9 	bl	801ea58 <siprintf>
	  				measuringNumber = 0;
 8005f06:	4b6b      	ldr	r3, [pc, #428]	; (80060b4 <main+0x6c4>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
	  			//bufclear();
	  			//sprintf(uartBufferTx, "%d %d %6.10f %6.12f\n", measuringNumber, currentRange, measuredValue, measuredValueCurrent);
	  			//uartBufferTxJumbo += uartBufferTx;
	  			//sprintf(uartBufferTx, "%d %d %6.16f\n", measuringNumber, currentRange, measuredValue);
	  			//sprintf(uartBufferTx, "%d %.12f\n", measuringNumber, measuredValueCurrent);
	  			sprintf(uartBufferTx, "%d %.12f\n", measuringNumber, averaging());
 8005f0c:	4b69      	ldr	r3, [pc, #420]	; (80060b4 <main+0x6c4>)
 8005f0e:	681c      	ldr	r4, [r3, #0]
 8005f10:	f7fd f8e6 	bl	80030e0 <averaging>
 8005f14:	eeb0 7b40 	vmov.f64	d7, d0
 8005f18:	ed8d 7b00 	vstr	d7, [sp]
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	496c      	ldr	r1, [pc, #432]	; (80060d0 <main+0x6e0>)
 8005f20:	486c      	ldr	r0, [pc, #432]	; (80060d4 <main+0x6e4>)
 8005f22:	f018 fd99 	bl	801ea58 <siprintf>
	  			//sprintf(uartBufferTx, "%d %d %6.16f\n", measuringNumber, previousValuesRange[(currentValuePosition + SAMPLES - 1)%SAMPLES], previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES]);
	  			//sprintf(uartBufferTx, "%d %.12f\n", measuringNumber, measuredValueCurrent);

	  			if(settings.isLoggingToConsole == 1){
 8005f26:	4b5c      	ldr	r3, [pc, #368]	; (8006098 <main+0x6a8>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10f      	bne.n	8005f4e <main+0x55e>

	  				isReadyForNext = 0;
 8005f2e:	4b5f      	ldr	r3, [pc, #380]	; (80060ac <main+0x6bc>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]

	  				if(startOfMeasurement == 1){
 8005f34:	4b60      	ldr	r3, [pc, #384]	; (80060b8 <main+0x6c8>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d105      	bne.n	8005f48 <main+0x558>
	  					send_uart3(loggingFileName);
 8005f3c:	4863      	ldr	r0, [pc, #396]	; (80060cc <main+0x6dc>)
 8005f3e:	f7fb fde3 	bl	8001b08 <send_uart3>
	  					send_uart3("\n\n\n");
 8005f42:	4865      	ldr	r0, [pc, #404]	; (80060d8 <main+0x6e8>)
 8005f44:	f7fb fde0 	bl	8001b08 <send_uart3>
	  				}

	  				send_uart3(uartBufferTx);
 8005f48:	4862      	ldr	r0, [pc, #392]	; (80060d4 <main+0x6e4>)
 8005f4a:	f7fb fddd 	bl	8001b08 <send_uart3>

	  			}

	  			if(settings.isLoggingToSD == 1){
 8005f4e:	4b52      	ldr	r3, [pc, #328]	; (8006098 <main+0x6a8>)
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d102      	bne.n	8005f5c <main+0x56c>

	  				saveToSD(uartBufferTx);
 8005f56:	485f      	ldr	r0, [pc, #380]	; (80060d4 <main+0x6e4>)
 8005f58:	f7fc fafc 	bl	8002554 <saveToSD>
	  			if(settings.isLoggingToEthernet == 1){

	  				// empty
	  			}

	  			if(startOfMeasurement == 1)
 8005f5c:	4b56      	ldr	r3, [pc, #344]	; (80060b8 <main+0x6c8>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d102      	bne.n	8005f6a <main+0x57a>
	  				startOfMeasurement = 0;
 8005f64:	4b54      	ldr	r3, [pc, #336]	; (80060b8 <main+0x6c8>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
	  		//sprintf(uartBufferTx, "Time between measuring voltage: %d\n", timeWindowMeasuring);
	  		//sprintf(uartBufferTx, "MT: %d ST: %d\n", timeWindowMeasuring, timeWindowSampling);
	  		//send_uart2(uartBufferTx);
	  		//send_uart3(uartBufferTx);

	  		if(endOfMeasurement == 1 && settings.isLoggingToSD == 1){
 8005f6a:	4b5c      	ldr	r3, [pc, #368]	; (80060dc <main+0x6ec>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d113      	bne.n	8005f9a <main+0x5aa>
 8005f72:	4b49      	ldr	r3, [pc, #292]	; (8006098 <main+0x6a8>)
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d10f      	bne.n	8005f9a <main+0x5aa>

	  			/* Unmount SDCARD */

	  			fresult = f_mount(NULL, "", 1);
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4958      	ldr	r1, [pc, #352]	; (80060e0 <main+0x6f0>)
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f016 fa56 	bl	801c430 <f_mount>
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	4b56      	ldr	r3, [pc, #344]	; (80060e4 <main+0x6f4>)
 8005f8a:	701a      	strb	r2, [r3, #0]
	  			if (fresult == FR_OK) {
 8005f8c:	4b55      	ldr	r3, [pc, #340]	; (80060e4 <main+0x6f4>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <main+0x5aa>
	  				#ifdef DEBUG
	  					send_uart3("SD CARD UNMOUNTED successfully...\n");
 8005f94:	4854      	ldr	r0, [pc, #336]	; (80060e8 <main+0x6f8>)
 8005f96:	f7fb fdb7 	bl	8001b08 <send_uart3>


	  		}


	  		if ( ( ( TIM5->CNT - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 1) {
 8005f9a:	4b3d      	ldr	r3, [pc, #244]	; (8006090 <main+0x6a0>)
 8005f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f9e:	4b53      	ldr	r3, [pc, #332]	; (80060ec <main+0x6fc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	1ad2      	subs	r2, r2, r3
 8005fa4:	4b52      	ldr	r3, [pc, #328]	; (80060f0 <main+0x700>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d325      	bcc.n	8005ff8 <main+0x608>
 8005fac:	4b3e      	ldr	r3, [pc, #248]	; (80060a8 <main+0x6b8>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d120      	bne.n	8005ff8 <main+0x608>
	  		//if ( ( (__HAL_TIM_GET_COUNTER(&htim5) - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 1) {


	  			// timeout or no data handler
	  			if(getConsoleInput(inputData, 1, 0) != 99){
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2101      	movs	r1, #1
 8005fba:	484e      	ldr	r0, [pc, #312]	; (80060f4 <main+0x704>)
 8005fbc:	f7fd fa38 	bl	8003430 <getConsoleInput>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b63      	cmp	r3, #99	; 0x63
 8005fc4:	d014      	beq.n	8005ff0 <main+0x600>
	  				send_uart3("\nEND MEASURING\n");
 8005fc6:	484c      	ldr	r0, [pc, #304]	; (80060f8 <main+0x708>)
 8005fc8:	f7fb fd9e 	bl	8001b08 <send_uart3>
	  				isMeasuring = 0;
 8005fcc:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <main+0x6b8>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]
	  				isTriggered = 0;
 8005fd2:	4b4a      	ldr	r3, [pc, #296]	; (80060fc <main+0x70c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
	  				startOfMeasurement = 0;
 8005fd8:	4b37      	ldr	r3, [pc, #220]	; (80060b8 <main+0x6c8>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
	  				endOfMeasurement = 1;
 8005fde:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <main+0x6ec>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
	  				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fea:	4845      	ldr	r0, [pc, #276]	; (8006100 <main+0x710>)
 8005fec:	f003 fc32 	bl	8009854 <HAL_GPIO_WritePin>

	  			}

	  			previousConsoleInteraction = TIM5->CNT;
 8005ff0:	4b27      	ldr	r3, [pc, #156]	; (8006090 <main+0x6a0>)
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	4a3d      	ldr	r2, [pc, #244]	; (80060ec <main+0x6fc>)
 8005ff6:	6013      	str	r3, [r2, #0]
	  			//previousConsoleInteraction = __HAL_TIM_GET_COUNTER(&htim5);

	  		}

	  		// cycle user interfaces
	  		if ( ( ( TIM5->CNT - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 0) {
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <main+0x6a0>)
 8005ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ffc:	4b3b      	ldr	r3, [pc, #236]	; (80060ec <main+0x6fc>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	1ad2      	subs	r2, r2, r3
 8006002:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <main+0x700>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d30d      	bcc.n	8006026 <main+0x636>
 800600a:	4b27      	ldr	r3, [pc, #156]	; (80060a8 <main+0x6b8>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d108      	bne.n	8006026 <main+0x636>
	  		//if ( ( (__HAL_TIM_GET_COUNTER(&htim5) - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 0) {

	  			screenInterface();
 8006014:	f7ff fbf2 	bl	80057fc <screenInterface>

	  			consoleInterface(0);
 8006018:	2000      	movs	r0, #0
 800601a:	f7fe f9ab 	bl	8004374 <consoleInterface>

	  			previousConsoleInteraction = TIM5->CNT;
 800601e:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <main+0x6a0>)
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	4a32      	ldr	r2, [pc, #200]	; (80060ec <main+0x6fc>)
 8006024:	6013      	str	r3, [r2, #0]

	  		}

	  		// constrol print of sampling and measuring cycle times in us

	  		if(cycleNumber%10 == 1){
 8006026:	4b1e      	ldr	r3, [pc, #120]	; (80060a0 <main+0x6b0>)
 8006028:	6819      	ldr	r1, [r3, #0]
 800602a:	4b36      	ldr	r3, [pc, #216]	; (8006104 <main+0x714>)
 800602c:	fba3 2301 	umull	r2, r3, r3, r1
 8006030:	08da      	lsrs	r2, r3, #3
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	1aca      	subs	r2, r1, r3
 800603c:	2a01      	cmp	r2, #1
 800603e:	d10a      	bne.n	8006056 <main+0x666>
	  			sprintf(uartBufferTx, "MT:%d_ST:%d\n", timeWindowMeasuring, timeWindowSampling);
 8006040:	4b16      	ldr	r3, [pc, #88]	; (800609c <main+0x6ac>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b1a      	ldr	r3, [pc, #104]	; (80060b0 <main+0x6c0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	492f      	ldr	r1, [pc, #188]	; (8006108 <main+0x718>)
 800604a:	4822      	ldr	r0, [pc, #136]	; (80060d4 <main+0x6e4>)
 800604c:	f018 fd04 	bl	801ea58 <siprintf>
	  			//send_uart2(uartBufferTx);
	  			//send_uart(uartBufferTx);
	  			send_uart2(uartBufferTx);
 8006050:	4820      	ldr	r0, [pc, #128]	; (80060d4 <main+0x6e4>)
 8006052:	f7fb fd47 	bl	8001ae4 <send_uart2>
	  		}

	  		//i2c_tests();

	  		if (isMeasuring == 1) {
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <main+0x6b8>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	e056      	b.n	800610c <main+0x71c>
 800605e:	bf00      	nop
 8006060:	40020000 	.word	0x40020000
 8006064:	40020400 	.word	0x40020400
 8006068:	08022728 	.word	0x08022728
 800606c:	08022740 	.word	0x08022740
 8006070:	0802275c 	.word	0x0802275c
 8006074:	0802277c 	.word	0x0802277c
 8006078:	08022780 	.word	0x08022780
 800607c:	0802278c 	.word	0x0802278c
 8006080:	08022794 	.word	0x08022794
 8006084:	080227a0 	.word	0x080227a0
 8006088:	080227ac 	.word	0x080227ac
 800608c:	080227cc 	.word	0x080227cc
 8006090:	40000c00 	.word	0x40000c00
 8006094:	20000338 	.word	0x20000338
 8006098:	20000018 	.word	0x20000018
 800609c:	20000324 	.word	0x20000324
 80060a0:	20000330 	.word	0x20000330
 80060a4:	2000033c 	.word	0x2000033c
 80060a8:	20000322 	.word	0x20000322
 80060ac:	20000002 	.word	0x20000002
 80060b0:	20000328 	.word	0x20000328
 80060b4:	2000032c 	.word	0x2000032c
 80060b8:	20000320 	.word	0x20000320
 80060bc:	20008804 	.word	0x20008804
 80060c0:	20003000 	.word	0x20003000
 80060c4:	20006e60 	.word	0x20006e60
 80060c8:	080227d8 	.word	0x080227d8
 80060cc:	20005354 	.word	0x20005354
 80060d0:	080227f4 	.word	0x080227f4
 80060d4:	20011a2c 	.word	0x20011a2c
 80060d8:	08022800 	.word	0x08022800
 80060dc:	20000321 	.word	0x20000321
 80060e0:	08020564 	.word	0x08020564
 80060e4:	20001a10 	.word	0x20001a10
 80060e8:	080206ac 	.word	0x080206ac
 80060ec:	20000340 	.word	0x20000340
 80060f0:	20000008 	.word	0x20000008
 80060f4:	200087f8 	.word	0x200087f8
 80060f8:	08022804 	.word	0x08022804
 80060fc:	20000314 	.word	0x20000314
 8006100:	40021000 	.word	0x40021000
 8006104:	cccccccd 	.word	0xcccccccd
 8006108:	08022814 	.word	0x08022814
 800610c:	2b01      	cmp	r3, #1
 800610e:	d110      	bne.n	8006132 <main+0x742>

	  			if (( TIM5->CNT - previousBlinkTime) >= 150000) {
 8006110:	4b14      	ldr	r3, [pc, #80]	; (8006164 <main+0x774>)
 8006112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006114:	4b14      	ldr	r3, [pc, #80]	; (8006168 <main+0x778>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	4a14      	ldr	r2, [pc, #80]	; (800616c <main+0x77c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d908      	bls.n	8006132 <main+0x742>
	  			//if (( __HAL_TIM_GET_COUNTER(&htim5) - previousBlinkTime) >= 150000) {
	  				//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  				previousBlinkTime = TIM5->CNT;
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <main+0x774>)
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	4a10      	ldr	r2, [pc, #64]	; (8006168 <main+0x778>)
 8006126:	6013      	str	r3, [r2, #0]
	  				//previousBlinkTime = __HAL_TIM_GET_COUNTER(&htim5);
	  				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8006128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800612c:	4810      	ldr	r0, [pc, #64]	; (8006170 <main+0x780>)
 800612e:	f003 fbaa 	bl	8009886 <HAL_GPIO_TogglePin>

	  			}
	  		}
	  		if (isMeasuring == 0) {
 8006132:	4b10      	ldr	r3, [pc, #64]	; (8006174 <main+0x784>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d110      	bne.n	800615e <main+0x76e>

	  				if (( TIM5->CNT - previousBlinkTime) >= 500000) {
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <main+0x774>)
 800613e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006140:	4b09      	ldr	r3, [pc, #36]	; (8006168 <main+0x778>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	4a0c      	ldr	r2, [pc, #48]	; (8006178 <main+0x788>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d908      	bls.n	800615e <main+0x76e>
	  				//if (( __HAL_TIM_GET_COUNTER(&htim5) - previousBlinkTime) >= 500000) {
	  					//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  					previousBlinkTime = TIM5->CNT;
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <main+0x774>)
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	4a05      	ldr	r2, [pc, #20]	; (8006168 <main+0x778>)
 8006152:	6013      	str	r3, [r2, #0]
	  					//previousBlinkTime = __HAL_TIM_GET_COUNTER(&htim5);
	  					HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8006154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006158:	4805      	ldr	r0, [pc, #20]	; (8006170 <main+0x780>)
 800615a:	f003 fb94 	bl	8009886 <HAL_GPIO_TogglePin>
	  		}



    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800615e:	f017 fc2d 	bl	801d9bc <MX_USB_HOST_Process>
	  	  	if ( ( TIM5->CNT - previousMeasuringTime ) >=  settings.measuringInterval) {
 8006162:	e663      	b.n	8005e2c <main+0x43c>
 8006164:	40000c00 	.word	0x40000c00
 8006168:	20000334 	.word	0x20000334
 800616c:	000249ef 	.word	0x000249ef
 8006170:	40021000 	.word	0x40021000
 8006174:	20000322 	.word	0x20000322
 8006178:	0007a11f 	.word	0x0007a11f

0800617c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b0b8      	sub	sp, #224	; 0xe0
 8006180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006182:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006186:	2234      	movs	r2, #52	; 0x34
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f017 ff69 	bl	801e062 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006190:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	605a      	str	r2, [r3, #4]
 800619a:	609a      	str	r2, [r3, #8]
 800619c:	60da      	str	r2, [r3, #12]
 800619e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80061a0:	f107 0308 	add.w	r3, r7, #8
 80061a4:	2290      	movs	r2, #144	; 0x90
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f017 ff5a 	bl	801e062 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80061ae:	f006 f857 	bl	800c260 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 80061b2:	4b4b      	ldr	r3, [pc, #300]	; (80062e0 <SystemClock_Config+0x164>)
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	f023 0318 	bic.w	r3, r3, #24
 80061ba:	4a49      	ldr	r2, [pc, #292]	; (80062e0 <SystemClock_Config+0x164>)
 80061bc:	f043 0310 	orr.w	r3, r3, #16
 80061c0:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80061c2:	4b47      	ldr	r3, [pc, #284]	; (80062e0 <SystemClock_Config+0x164>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	4a46      	ldr	r2, [pc, #280]	; (80062e0 <SystemClock_Config+0x164>)
 80061c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061cc:	6413      	str	r3, [r2, #64]	; 0x40
 80061ce:	4b44      	ldr	r3, [pc, #272]	; (80062e0 <SystemClock_Config+0x164>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d6:	607b      	str	r3, [r7, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061da:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <SystemClock_Config+0x168>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a41      	ldr	r2, [pc, #260]	; (80062e4 <SystemClock_Config+0x168>)
 80061e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	4b3f      	ldr	r3, [pc, #252]	; (80062e4 <SystemClock_Config+0x168>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80061f2:	2307      	movs	r3, #7
 80061f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80061f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006200:	2301      	movs	r3, #1
 8006202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006206:	2301      	movs	r3, #1
 8006208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800620c:	2310      	movs	r3, #16
 800620e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006212:	2302      	movs	r3, #2
 8006214:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006218:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800621c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 10;
 8006220:	230a      	movs	r3, #10
 8006222:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006226:	23d8      	movs	r3, #216	; 0xd8
 8006228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800622c:	2302      	movs	r3, #2
 800622e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006232:	2309      	movs	r3, #9
 8006234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006238:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800623c:	4618      	mov	r0, r3
 800623e:	f006 f86f 	bl	800c320 <HAL_RCC_OscConfig>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006248:	f000 fd5e 	bl	8006d08 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800624c:	f006 f818 	bl	800c280 <HAL_PWREx_EnableOverDrive>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8006256:	f000 fd57 	bl	8006d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800625a:	230f      	movs	r3, #15
 800625c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006260:	2302      	movs	r3, #2
 8006262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006266:	2300      	movs	r3, #0
 8006268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800626c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800627c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006280:	2107      	movs	r1, #7
 8006282:	4618      	mov	r0, r3
 8006284:	f006 fafa 	bl	800c87c <HAL_RCC_ClockConfig>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800628e:	f000 fd3b 	bl	8006d08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 8006292:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <SystemClock_Config+0x16c>)
 8006294:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800629a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800629c:	2300      	movs	r3, #0
 800629e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80062a0:	2300      	movs	r3, #0
 80062a2:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80062a4:	2300      	movs	r3, #0
 80062a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80062a8:	2300      	movs	r3, #0
 80062aa:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062b8:	f107 0308 	add.w	r3, r7, #8
 80062bc:	4618      	mov	r0, r3
 80062be:	f006 fd13 	bl	800cce8 <HAL_RCCEx_PeriphCLKConfig>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <SystemClock_Config+0x150>
  {
    Error_Handler();
 80062c8:	f000 fd1e 	bl	8006d08 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80062cc:	2200      	movs	r2, #0
 80062ce:	2100      	movs	r1, #0
 80062d0:	2000      	movs	r0, #0
 80062d2:	f006 fbbf 	bl	800ca54 <HAL_RCC_MCOConfig>
}
 80062d6:	bf00      	nop
 80062d8:	37e0      	adds	r7, #224	; 0xe0
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40023800 	.word	0x40023800
 80062e4:	40007000 	.word	0x40007000
 80062e8:	00a25820 	.word	0x00a25820

080062ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80062f0:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <MX_ETH_Init+0x78>)
 80062f2:	4a1d      	ldr	r2, [pc, #116]	; (8006368 <MX_ETH_Init+0x7c>)
 80062f4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80062f6:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <MX_ETH_Init+0x78>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <MX_ETH_Init+0x78>)
 80062fe:	2201      	movs	r2, #1
 8006300:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8006302:	4b18      	ldr	r3, [pc, #96]	; (8006364 <MX_ETH_Init+0x78>)
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <MX_ETH_Init+0x78>)
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	3301      	adds	r3, #1
 8006310:	2280      	movs	r2, #128	; 0x80
 8006312:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8006314:	4b13      	ldr	r3, [pc, #76]	; (8006364 <MX_ETH_Init+0x78>)
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	3302      	adds	r3, #2
 800631a:	22e1      	movs	r2, #225	; 0xe1
 800631c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <MX_ETH_Init+0x78>)
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	3303      	adds	r3, #3
 8006324:	2200      	movs	r2, #0
 8006326:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <MX_ETH_Init+0x78>)
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	3304      	adds	r3, #4
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <MX_ETH_Init+0x78>)
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	3305      	adds	r3, #5
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <MX_ETH_Init+0x78>)
 800633e:	2200      	movs	r2, #0
 8006340:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <MX_ETH_Init+0x78>)
 8006344:	2200      	movs	r2, #0
 8006346:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006348:	4b06      	ldr	r3, [pc, #24]	; (8006364 <MX_ETH_Init+0x78>)
 800634a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800634e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8006350:	4804      	ldr	r0, [pc, #16]	; (8006364 <MX_ETH_Init+0x78>)
 8006352:	f002 fc51 	bl	8008bf8 <HAL_ETH_Init>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 800635c:	f000 fcd4 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8006360:	bf00      	nop
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20006e18 	.word	0x20006e18
 8006368:	40028000 	.word	0x40028000

0800636c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006370:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <MX_I2C1_Init+0x78>)
 8006374:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8006376:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006378:	4a1b      	ldr	r2, [pc, #108]	; (80063e8 <MX_I2C1_Init+0x7c>)
 800637a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800637c:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <MX_I2C1_Init+0x74>)
 800637e:	2200      	movs	r2, #0
 8006380:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006382:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006384:	2201      	movs	r2, #1
 8006386:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <MX_I2C1_Init+0x74>)
 800638a:	2200      	movs	r2, #0
 800638c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800638e:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006390:	2200      	movs	r2, #0
 8006392:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006396:	2200      	movs	r2, #0
 8006398:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <MX_I2C1_Init+0x74>)
 800639c:	2200      	movs	r2, #0
 800639e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063a0:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <MX_I2C1_Init+0x74>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063a6:	480e      	ldr	r0, [pc, #56]	; (80063e0 <MX_I2C1_Init+0x74>)
 80063a8:	f004 ff92 	bl	800b2d0 <HAL_I2C_Init>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80063b2:	f000 fca9 	bl	8006d08 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80063b6:	2100      	movs	r1, #0
 80063b8:	4809      	ldr	r0, [pc, #36]	; (80063e0 <MX_I2C1_Init+0x74>)
 80063ba:	f005 feb9 	bl	800c130 <HAL_I2CEx_ConfigAnalogFilter>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80063c4:	f000 fca0 	bl	8006d08 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80063c8:	2100      	movs	r1, #0
 80063ca:	4805      	ldr	r0, [pc, #20]	; (80063e0 <MX_I2C1_Init+0x74>)
 80063cc:	f005 fefb 	bl	800c1c6 <HAL_I2CEx_ConfigDigitalFilter>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80063d6:	f000 fc97 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80063da:	bf00      	nop
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	2000707c 	.word	0x2000707c
 80063e4:	40005400 	.word	0x40005400
 80063e8:	6000030d 	.word	0x6000030d

080063ec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <MX_I2C4_Init+0x74>)
 80063f2:	4a1c      	ldr	r2, [pc, #112]	; (8006464 <MX_I2C4_Init+0x78>)
 80063f4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x6000030D;
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <MX_I2C4_Init+0x74>)
 80063f8:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <MX_I2C4_Init+0x7c>)
 80063fa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80063fc:	4b18      	ldr	r3, [pc, #96]	; (8006460 <MX_I2C4_Init+0x74>)
 80063fe:	2200      	movs	r2, #0
 8006400:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006402:	4b17      	ldr	r3, [pc, #92]	; (8006460 <MX_I2C4_Init+0x74>)
 8006404:	2201      	movs	r2, #1
 8006406:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006408:	4b15      	ldr	r3, [pc, #84]	; (8006460 <MX_I2C4_Init+0x74>)
 800640a:	2200      	movs	r2, #0
 800640c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <MX_I2C4_Init+0x74>)
 8006410:	2200      	movs	r2, #0
 8006412:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006414:	4b12      	ldr	r3, [pc, #72]	; (8006460 <MX_I2C4_Init+0x74>)
 8006416:	2200      	movs	r2, #0
 8006418:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800641a:	4b11      	ldr	r3, [pc, #68]	; (8006460 <MX_I2C4_Init+0x74>)
 800641c:	2200      	movs	r2, #0
 800641e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <MX_I2C4_Init+0x74>)
 8006422:	2200      	movs	r2, #0
 8006424:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8006426:	480e      	ldr	r0, [pc, #56]	; (8006460 <MX_I2C4_Init+0x74>)
 8006428:	f004 ff52 	bl	800b2d0 <HAL_I2C_Init>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8006432:	f000 fc69 	bl	8006d08 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006436:	2100      	movs	r1, #0
 8006438:	4809      	ldr	r0, [pc, #36]	; (8006460 <MX_I2C4_Init+0x74>)
 800643a:	f005 fe79 	bl	800c130 <HAL_I2CEx_ConfigAnalogFilter>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8006444:	f000 fc60 	bl	8006d08 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8006448:	2100      	movs	r1, #0
 800644a:	4805      	ldr	r0, [pc, #20]	; (8006460 <MX_I2C4_Init+0x74>)
 800644c:	f005 febb 	bl	800c1c6 <HAL_I2CEx_ConfigDigitalFilter>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8006456:	f000 fc57 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20007128 	.word	0x20007128
 8006464:	40006000 	.word	0x40006000
 8006468:	6000030d 	.word	0x6000030d

0800646c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	609a      	str	r2, [r3, #8]
 800647e:	60da      	str	r2, [r3, #12]
 8006480:	611a      	str	r2, [r3, #16]
 8006482:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8006484:	2300      	movs	r3, #0
 8006486:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8006488:	4b24      	ldr	r3, [pc, #144]	; (800651c <MX_RTC_Init+0xb0>)
 800648a:	4a25      	ldr	r2, [pc, #148]	; (8006520 <MX_RTC_Init+0xb4>)
 800648c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800648e:	4b23      	ldr	r3, [pc, #140]	; (800651c <MX_RTC_Init+0xb0>)
 8006490:	2200      	movs	r2, #0
 8006492:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006494:	4b21      	ldr	r3, [pc, #132]	; (800651c <MX_RTC_Init+0xb0>)
 8006496:	227f      	movs	r2, #127	; 0x7f
 8006498:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800649a:	4b20      	ldr	r3, [pc, #128]	; (800651c <MX_RTC_Init+0xb0>)
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80064a0:	4b1e      	ldr	r3, [pc, #120]	; (800651c <MX_RTC_Init+0xb0>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80064a6:	4b1d      	ldr	r3, [pc, #116]	; (800651c <MX_RTC_Init+0xb0>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80064ac:	4b1b      	ldr	r3, [pc, #108]	; (800651c <MX_RTC_Init+0xb0>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80064b2:	481a      	ldr	r0, [pc, #104]	; (800651c <MX_RTC_Init+0xb0>)
 80064b4:	f007 f83e 	bl	800d534 <HAL_RTC_Init>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80064be:	f000 fc23 	bl	8006d08 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x12;
 80064c2:	2312      	movs	r3, #18
 80064c4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x32;
 80064c6:	2332      	movs	r3, #50	; 0x32
 80064c8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80064d6:	f107 0308 	add.w	r3, r7, #8
 80064da:	2201      	movs	r2, #1
 80064dc:	4619      	mov	r1, r3
 80064de:	480f      	ldr	r0, [pc, #60]	; (800651c <MX_RTC_Init+0xb0>)
 80064e0:	f007 f8a4 	bl	800d62c <HAL_RTC_SetTime>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80064ea:	f000 fc0d 	bl	8006d08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80064ee:	2301      	movs	r3, #1
 80064f0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80064f2:	2302      	movs	r3, #2
 80064f4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x8;
 80064f6:	2308      	movs	r3, #8
 80064f8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x14;
 80064fa:	2314      	movs	r3, #20
 80064fc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	2201      	movs	r2, #1
 8006502:	4619      	mov	r1, r3
 8006504:	4805      	ldr	r0, [pc, #20]	; (800651c <MX_RTC_Init+0xb0>)
 8006506:	f007 f9ad 	bl	800d864 <HAL_RTC_SetDate>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8006510:	f000 fbfa 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006514:	bf00      	nop
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20003000 	.word	0x20003000
 8006520:	40002800 	.word	0x40002800

08006524 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 800652a:	4a0d      	ldr	r2, [pc, #52]	; (8006560 <MX_SDMMC1_SD_Init+0x3c>)
 800652c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 8006530:	2200      	movs	r2, #0
 8006532:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8006534:	4b09      	ldr	r3, [pc, #36]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 800653c:	2200      	movs	r2, #0
 800653e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8006540:	4b06      	ldr	r3, [pc, #24]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 8006542:	2200      	movs	r2, #0
 8006544:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 8006548:	2200      	movs	r2, #0
 800654a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 800654c:	4b03      	ldr	r3, [pc, #12]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 800654e:	2204      	movs	r2, #4
 8006550:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8006552:	bf00      	nop
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	20002b7c 	.word	0x20002b7c
 8006560:	40012c00 	.word	0x40012c00

08006564 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006568:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <MX_SPI1_Init+0x74>)
 800656a:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <MX_SPI1_Init+0x78>)
 800656c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800656e:	4b1a      	ldr	r3, [pc, #104]	; (80065d8 <MX_SPI1_Init+0x74>)
 8006570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <MX_SPI1_Init+0x74>)
 8006578:	2200      	movs	r2, #0
 800657a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800657c:	4b16      	ldr	r3, [pc, #88]	; (80065d8 <MX_SPI1_Init+0x74>)
 800657e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006582:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006584:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <MX_SPI1_Init+0x74>)
 8006586:	2200      	movs	r2, #0
 8006588:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800658a:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <MX_SPI1_Init+0x74>)
 800658c:	2200      	movs	r2, #0
 800658e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <MX_SPI1_Init+0x74>)
 8006592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006596:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <MX_SPI1_Init+0x74>)
 800659a:	2200      	movs	r2, #0
 800659c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80065b0:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065b2:	2207      	movs	r2, #7
 80065b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80065b6:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065be:	2208      	movs	r2, #8
 80065c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80065c2:	4805      	ldr	r0, [pc, #20]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065c4:	f008 ff04 	bl	800f3d0 <HAL_SPI_Init>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80065ce:	f000 fb9b 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80065d2:	bf00      	nop
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20005378 	.word	0x20005378
 80065dc:	40013000 	.word	0x40013000

080065e0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <MX_SPI4_Init+0x74>)
 80065e6:	4a1c      	ldr	r2, [pc, #112]	; (8006658 <MX_SPI4_Init+0x78>)
 80065e8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <MX_SPI4_Init+0x74>)
 80065ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065f0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80065f2:	4b18      	ldr	r3, [pc, #96]	; (8006654 <MX_SPI4_Init+0x74>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80065f8:	4b16      	ldr	r3, [pc, #88]	; (8006654 <MX_SPI4_Init+0x74>)
 80065fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80065fe:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <MX_SPI4_Init+0x74>)
 8006602:	2200      	movs	r2, #0
 8006604:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006606:	4b13      	ldr	r3, [pc, #76]	; (8006654 <MX_SPI4_Init+0x74>)
 8006608:	2200      	movs	r2, #0
 800660a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800660c:	4b11      	ldr	r3, [pc, #68]	; (8006654 <MX_SPI4_Init+0x74>)
 800660e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006612:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <MX_SPI4_Init+0x74>)
 8006616:	2200      	movs	r2, #0
 8006618:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800661a:	4b0e      	ldr	r3, [pc, #56]	; (8006654 <MX_SPI4_Init+0x74>)
 800661c:	2200      	movs	r2, #0
 800661e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <MX_SPI4_Init+0x74>)
 8006622:	2200      	movs	r2, #0
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006626:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <MX_SPI4_Init+0x74>)
 8006628:	2200      	movs	r2, #0
 800662a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <MX_SPI4_Init+0x74>)
 800662e:	2207      	movs	r2, #7
 8006630:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006632:	4b08      	ldr	r3, [pc, #32]	; (8006654 <MX_SPI4_Init+0x74>)
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006638:	4b06      	ldr	r3, [pc, #24]	; (8006654 <MX_SPI4_Init+0x74>)
 800663a:	2208      	movs	r2, #8
 800663c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800663e:	4805      	ldr	r0, [pc, #20]	; (8006654 <MX_SPI4_Init+0x74>)
 8006640:	f008 fec6 	bl	800f3d0 <HAL_SPI_Init>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800664a:	f000 fb5d 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800664e:	bf00      	nop
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	2000557c 	.word	0x2000557c
 8006658:	40013400 	.word	0x40013400

0800665c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006662:	f107 0310 	add.w	r3, r7, #16
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	605a      	str	r2, [r3, #4]
 8006678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800667a:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <MX_TIM4_Init+0x94>)
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <MX_TIM4_Init+0x98>)
 800667e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108;
 8006680:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <MX_TIM4_Init+0x94>)
 8006682:	226c      	movs	r2, #108	; 0x6c
 8006684:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006686:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <MX_TIM4_Init+0x94>)
 8006688:	2200      	movs	r2, #0
 800668a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 800668c:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <MX_TIM4_Init+0x94>)
 800668e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006692:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006694:	4b16      	ldr	r3, [pc, #88]	; (80066f0 <MX_TIM4_Init+0x94>)
 8006696:	2200      	movs	r2, #0
 8006698:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800669a:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <MX_TIM4_Init+0x94>)
 800669c:	2200      	movs	r2, #0
 800669e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80066a0:	4813      	ldr	r0, [pc, #76]	; (80066f0 <MX_TIM4_Init+0x94>)
 80066a2:	f00a f9b2 	bl	8010a0a <HAL_TIM_Base_Init>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80066ac:	f000 fb2c 	bl	8006d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80066b6:	f107 0310 	add.w	r3, r7, #16
 80066ba:	4619      	mov	r1, r3
 80066bc:	480c      	ldr	r0, [pc, #48]	; (80066f0 <MX_TIM4_Init+0x94>)
 80066be:	f00a f9f9 	bl	8010ab4 <HAL_TIM_ConfigClockSource>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80066c8:	f000 fb1e 	bl	8006d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066cc:	2300      	movs	r3, #0
 80066ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80066d4:	1d3b      	adds	r3, r7, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	4805      	ldr	r0, [pc, #20]	; (80066f0 <MX_TIM4_Init+0x94>)
 80066da:	f00a fbdf 	bl	8010e9c <HAL_TIMEx_MasterConfigSynchronization>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80066e4:	f000 fb10 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80066e8:	bf00      	nop
 80066ea:	3720      	adds	r7, #32
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20011b18 	.word	0x20011b18
 80066f4:	40000800 	.word	0x40000800

080066f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066fe:	f107 0310 	add.w	r3, r7, #16
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	605a      	str	r2, [r3, #4]
 8006708:	609a      	str	r2, [r3, #8]
 800670a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800670c:	1d3b      	adds	r3, r7, #4
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006716:	4b1d      	ldr	r3, [pc, #116]	; (800678c <MX_TIM5_Init+0x94>)
 8006718:	4a1d      	ldr	r2, [pc, #116]	; (8006790 <MX_TIM5_Init+0x98>)
 800671a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 800671c:	4b1b      	ldr	r3, [pc, #108]	; (800678c <MX_TIM5_Init+0x94>)
 800671e:	226c      	movs	r2, #108	; 0x6c
 8006720:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006722:	4b1a      	ldr	r3, [pc, #104]	; (800678c <MX_TIM5_Init+0x94>)
 8006724:	2200      	movs	r2, #0
 8006726:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF-1;
 8006728:	4b18      	ldr	r3, [pc, #96]	; (800678c <MX_TIM5_Init+0x94>)
 800672a:	f06f 0201 	mvn.w	r2, #1
 800672e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006730:	4b16      	ldr	r3, [pc, #88]	; (800678c <MX_TIM5_Init+0x94>)
 8006732:	2200      	movs	r2, #0
 8006734:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006736:	4b15      	ldr	r3, [pc, #84]	; (800678c <MX_TIM5_Init+0x94>)
 8006738:	2200      	movs	r2, #0
 800673a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800673c:	4813      	ldr	r0, [pc, #76]	; (800678c <MX_TIM5_Init+0x94>)
 800673e:	f00a f964 	bl	8010a0a <HAL_TIM_Base_Init>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8006748:	f000 fade 	bl	8006d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800674c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006752:	f107 0310 	add.w	r3, r7, #16
 8006756:	4619      	mov	r1, r3
 8006758:	480c      	ldr	r0, [pc, #48]	; (800678c <MX_TIM5_Init+0x94>)
 800675a:	f00a f9ab 	bl	8010ab4 <HAL_TIM_ConfigClockSource>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8006764:	f000 fad0 	bl	8006d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006768:	2300      	movs	r3, #0
 800676a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006770:	1d3b      	adds	r3, r7, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4805      	ldr	r0, [pc, #20]	; (800678c <MX_TIM5_Init+0x94>)
 8006776:	f00a fb91 	bl	8010e9c <HAL_TIMEx_MasterConfigSynchronization>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8006780:	f000 fac2 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006784:	bf00      	nop
 8006786:	3720      	adds	r7, #32
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	20011b58 	.word	0x20011b58
 8006790:	40000c00 	.word	0x40000c00

08006794 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80067a4:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067a6:	4a15      	ldr	r2, [pc, #84]	; (80067fc <MX_TIM7_Init+0x68>)
 80067a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067b0:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067bc:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80067c2:	480d      	ldr	r0, [pc, #52]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067c4:	f00a f921 	bl	8010a0a <HAL_TIM_Base_Init>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80067ce:	f000 fa9b 	bl	8006d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067d2:	2300      	movs	r3, #0
 80067d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80067da:	1d3b      	adds	r3, r7, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4806      	ldr	r0, [pc, #24]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067e0:	f00a fb5c 	bl	8010e9c <HAL_TIMEx_MasterConfigSynchronization>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80067ea:	f000 fa8d 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	200124d0 	.word	0x200124d0
 80067fc:	40001400 	.word	0x40001400

08006800 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006804:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <MX_TIM14_Init+0x44>)
 8006806:	4a10      	ldr	r2, [pc, #64]	; (8006848 <MX_TIM14_Init+0x48>)
 8006808:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 54000;
 800680a:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <MX_TIM14_Init+0x44>)
 800680c:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8006810:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006812:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <MX_TIM14_Init+0x44>)
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0xFFFF-1;
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <MX_TIM14_Init+0x44>)
 800681a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800681e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <MX_TIM14_Init+0x44>)
 8006822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006826:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <MX_TIM14_Init+0x44>)
 800682a:	2200      	movs	r2, #0
 800682c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <MX_TIM14_Init+0x44>)
 8006830:	f00a f8eb 	bl	8010a0a <HAL_TIM_Base_Init>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <MX_TIM14_Init+0x3e>
  {
    Error_Handler();
 800683a:	f000 fa65 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800683e:	bf00      	nop
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	2000d8d8 	.word	0x2000d8d8
 8006848:	40002000 	.word	0x40002000

0800684c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006850:	4b14      	ldr	r3, [pc, #80]	; (80068a4 <MX_UART7_Init+0x58>)
 8006852:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <MX_UART7_Init+0x5c>)
 8006854:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 3000000;
 8006856:	4b13      	ldr	r3, [pc, #76]	; (80068a4 <MX_UART7_Init+0x58>)
 8006858:	4a14      	ldr	r2, [pc, #80]	; (80068ac <MX_UART7_Init+0x60>)
 800685a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800685c:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <MX_UART7_Init+0x58>)
 800685e:	2200      	movs	r2, #0
 8006860:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006862:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <MX_UART7_Init+0x58>)
 8006864:	2200      	movs	r2, #0
 8006866:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8006868:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <MX_UART7_Init+0x58>)
 800686a:	2200      	movs	r2, #0
 800686c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <MX_UART7_Init+0x58>)
 8006870:	220c      	movs	r2, #12
 8006872:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <MX_UART7_Init+0x58>)
 8006876:	2200      	movs	r2, #0
 8006878:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_8;
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <MX_UART7_Init+0x58>)
 800687c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006880:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <MX_UART7_Init+0x58>)
 8006884:	2200      	movs	r2, #0
 8006886:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006888:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <MX_UART7_Init+0x58>)
 800688a:	2200      	movs	r2, #0
 800688c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800688e:	4805      	ldr	r0, [pc, #20]	; (80068a4 <MX_UART7_Init+0x58>)
 8006890:	f00a fb92 	bl	8010fb8 <HAL_UART_Init>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800689a:	f000 fa35 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800689e:	bf00      	nop
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20011928 	.word	0x20011928
 80068a8:	40007800 	.word	0x40007800
 80068ac:	002dc6c0 	.word	0x002dc6c0

080068b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80068b4:	4b14      	ldr	r3, [pc, #80]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068b6:	4a15      	ldr	r2, [pc, #84]	; (800690c <MX_USART6_UART_Init+0x5c>)
 80068b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 3000000;
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068bc:	4a14      	ldr	r2, [pc, #80]	; (8006910 <MX_USART6_UART_Init+0x60>)
 80068be:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80068c0:	4b11      	ldr	r3, [pc, #68]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80068c6:	4b10      	ldr	r3, [pc, #64]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80068cc:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068d4:	220c      	movs	r2, #12
 80068d6:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068d8:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068da:	2200      	movs	r2, #0
 80068dc:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 80068de:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80068e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068e6:	4b08      	ldr	r3, [pc, #32]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80068f2:	4805      	ldr	r0, [pc, #20]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068f4:	f00a fb60 	bl	8010fb8 <HAL_UART_Init>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80068fe:	f000 fa03 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006902:	bf00      	nop
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	200119ac 	.word	0x200119ac
 800690c:	40011400 	.word	0x40011400
 8006910:	002dc6c0 	.word	0x002dc6c0

08006914 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800691a:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <MX_DMA_Init+0xb0>)
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	4a29      	ldr	r2, [pc, #164]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006924:	6313      	str	r3, [r2, #48]	; 0x30
 8006926:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	4a23      	ldr	r2, [pc, #140]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800693c:	6313      	str	r3, [r2, #48]	; 0x30
 800693e:	4b21      	ldr	r3, [pc, #132]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800694a:	2200      	movs	r2, #0
 800694c:	2102      	movs	r1, #2
 800694e:	200c      	movs	r0, #12
 8006950:	f001 fd83 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006954:	200c      	movs	r0, #12
 8006956:	f001 fd9c 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800695a:	2200      	movs	r2, #0
 800695c:	2100      	movs	r1, #0
 800695e:	200e      	movs	r0, #14
 8006960:	f001 fd7b 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8006964:	200e      	movs	r0, #14
 8006966:	f001 fd94 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800696a:	2200      	movs	r2, #0
 800696c:	2102      	movs	r1, #2
 800696e:	2038      	movs	r0, #56	; 0x38
 8006970:	f001 fd73 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006974:	2038      	movs	r0, #56	; 0x38
 8006976:	f001 fd8c 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	2039      	movs	r0, #57	; 0x39
 8006980:	f001 fd6b 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006984:	2039      	movs	r0, #57	; 0x39
 8006986:	f001 fd84 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800698a:	2200      	movs	r2, #0
 800698c:	2100      	movs	r1, #0
 800698e:	203b      	movs	r0, #59	; 0x3b
 8006990:	f001 fd63 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006994:	203b      	movs	r0, #59	; 0x3b
 8006996:	f001 fd7c 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 2, 0);
 800699a:	2200      	movs	r2, #0
 800699c:	2102      	movs	r1, #2
 800699e:	2044      	movs	r0, #68	; 0x44
 80069a0:	f001 fd5b 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80069a4:	2044      	movs	r0, #68	; 0x44
 80069a6:	f001 fd74 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80069aa:	2200      	movs	r2, #0
 80069ac:	2100      	movs	r1, #0
 80069ae:	2045      	movs	r0, #69	; 0x45
 80069b0:	f001 fd53 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80069b4:	2045      	movs	r0, #69	; 0x45
 80069b6:	f001 fd6c 	bl	8008492 <HAL_NVIC_EnableIRQ>

}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40023800 	.word	0x40023800

080069c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08c      	sub	sp, #48	; 0x30
 80069cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ce:	f107 031c 	add.w	r3, r7, #28
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	605a      	str	r2, [r3, #4]
 80069d8:	609a      	str	r2, [r3, #8]
 80069da:	60da      	str	r2, [r3, #12]
 80069dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80069de:	4bbc      	ldr	r3, [pc, #752]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	4abb      	ldr	r2, [pc, #748]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069e4:	f043 0310 	orr.w	r3, r3, #16
 80069e8:	6313      	str	r3, [r2, #48]	; 0x30
 80069ea:	4bb9      	ldr	r3, [pc, #740]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069f6:	4bb6      	ldr	r3, [pc, #728]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	4ab5      	ldr	r2, [pc, #724]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069fc:	f043 0304 	orr.w	r3, r3, #4
 8006a00:	6313      	str	r3, [r2, #48]	; 0x30
 8006a02:	4bb3      	ldr	r3, [pc, #716]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a0e:	4bb0      	ldr	r3, [pc, #704]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	4aaf      	ldr	r2, [pc, #700]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a18:	6313      	str	r3, [r2, #48]	; 0x30
 8006a1a:	4bad      	ldr	r3, [pc, #692]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a26:	4baa      	ldr	r3, [pc, #680]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	4aa9      	ldr	r2, [pc, #676]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6313      	str	r3, [r2, #48]	; 0x30
 8006a32:	4ba7      	ldr	r3, [pc, #668]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a3e:	4ba4      	ldr	r3, [pc, #656]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	4aa3      	ldr	r2, [pc, #652]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a44:	f043 0302 	orr.w	r3, r3, #2
 8006a48:	6313      	str	r3, [r2, #48]	; 0x30
 8006a4a:	4ba1      	ldr	r3, [pc, #644]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	60bb      	str	r3, [r7, #8]
 8006a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a56:	4b9e      	ldr	r3, [pc, #632]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	4a9d      	ldr	r2, [pc, #628]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a5c:	f043 0308 	orr.w	r3, r3, #8
 8006a60:	6313      	str	r3, [r2, #48]	; 0x30
 8006a62:	4b9b      	ldr	r3, [pc, #620]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin, GPIO_PIN_SET);
 8006a6e:	2201      	movs	r2, #1
 8006a70:	213c      	movs	r1, #60	; 0x3c
 8006a72:	4898      	ldr	r0, [pc, #608]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006a74:	f002 feee 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE6_Pin|LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin 
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f648 0143 	movw	r1, #34883	; 0x8843
 8006a7e:	4895      	ldr	r0, [pc, #596]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006a80:	f002 fee8 	bl	8009854 <HAL_GPIO_WritePin>
                          |RANGE_NA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC13_Pin|PC2_Pin|PC3_Pin, GPIO_PIN_RESET);
 8006a84:	2200      	movs	r2, #0
 8006a86:	f242 010c 	movw	r1, #8204	; 0x200c
 8006a8a:	4893      	ldr	r0, [pc, #588]	; (8006cd8 <MX_GPIO_Init+0x310>)
 8006a8c:	f002 fee2 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA0_Pin|PA3_Pin|PS_EN_Pin|USB_OTG_FS_VBUS_Pin 
 8006a90:	2200      	movs	r2, #0
 8006a92:	f248 6119 	movw	r1, #34329	; 0x8619
 8006a96:	4891      	ldr	r0, [pc, #580]	; (8006cdc <MX_GPIO_Init+0x314>)
 8006a98:	f002 fedc 	bl	8009854 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin|PA15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ADC_CONV_Pin|RANGE_MA_Pin, GPIO_PIN_RESET);
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8006aa2:	488f      	ldr	r0, [pc, #572]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006aa4:	f002 fed6 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDMMC1_WP_GPIO_Port, SDMMC1_WP_Pin, GPIO_PIN_RESET);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2102      	movs	r1, #2
 8006aac:	488d      	ldr	r0, [pc, #564]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006aae:	f002 fed1 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	2140      	movs	r1, #64	; 0x40
 8006ab6:	488b      	ldr	r0, [pc, #556]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006ab8:	f002 fecc 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_RST_GPIO_Port, ADC_RST_Pin, GPIO_PIN_SET);
 8006abc:	2201      	movs	r2, #1
 8006abe:	2140      	movs	r1, #64	; 0x40
 8006ac0:	4887      	ldr	r0, [pc, #540]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006ac2:	f002 fec7 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASW1_Pin ASW4_Pin ASW2_Pin ASW3_Pin 
                           LED_BLUE_Pin LED_GREEN_Pin RANGE_UA_Pin RANGE_NA_Pin */
  GPIO_InitStruct.Pin = ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin 
 8006ac6:	f648 033f 	movw	r3, #34879	; 0x883f
 8006aca:	61fb      	str	r3, [r7, #28]
                          |LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin|RANGE_NA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006acc:	2301      	movs	r3, #1
 8006ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ad8:	f107 031c 	add.w	r3, r7, #28
 8006adc:	4619      	mov	r1, r3
 8006ade:	487d      	ldr	r0, [pc, #500]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006ae0:	f002 fcf6 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6_Pin */
  GPIO_InitStruct.Pin = PE6_Pin;
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006af0:	2300      	movs	r3, #0
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PE6_GPIO_Port, &GPIO_InitStruct);
 8006af4:	f107 031c 	add.w	r3, r7, #28
 8006af8:	4619      	mov	r1, r3
 8006afa:	4876      	ldr	r0, [pc, #472]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006afc:	f002 fce8 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_Pin PC2_Pin PC3_Pin */
  GPIO_InitStruct.Pin = PC13_Pin|PC2_Pin|PC3_Pin;
 8006b00:	f242 030c 	movw	r3, #8204	; 0x200c
 8006b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b06:	2301      	movs	r3, #1
 8006b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b12:	f107 031c 	add.w	r3, r7, #28
 8006b16:	4619      	mov	r1, r3
 8006b18:	486f      	ldr	r0, [pc, #444]	; (8006cd8 <MX_GPIO_Init+0x310>)
 8006b1a:	f002 fcd9 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0_Pin PA3_Pin USB_OTG_FS_VBUS_Pin LCD_RST_Pin 
                           PA15_Pin */
  GPIO_InitStruct.Pin = PA0_Pin|PA3_Pin|USB_OTG_FS_VBUS_Pin|LCD_RST_Pin 
 8006b1e:	f248 6309 	movw	r3, #34313	; 0x8609
 8006b22:	61fb      	str	r3, [r7, #28]
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b24:	2301      	movs	r3, #1
 8006b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b30:	f107 031c 	add.w	r3, r7, #28
 8006b34:	4619      	mov	r1, r3
 8006b36:	4869      	ldr	r0, [pc, #420]	; (8006cdc <MX_GPIO_Init+0x314>)
 8006b38:	f002 fcca 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS_EN_Pin */
  GPIO_InitStruct.Pin = PS_EN_Pin;
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b40:	2301      	movs	r3, #1
 8006b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PS_EN_GPIO_Port, &GPIO_InitStruct);
 8006b4c:	f107 031c 	add.w	r3, r7, #28
 8006b50:	4619      	mov	r1, r3
 8006b52:	4862      	ldr	r0, [pc, #392]	; (8006cdc <MX_GPIO_Init+0x314>)
 8006b54:	f002 fcbc 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OverCurrent_Pin;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b5c:	4b62      	ldr	r3, [pc, #392]	; (8006ce8 <MX_GPIO_Init+0x320>)
 8006b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006b64:	f107 031c 	add.w	r3, r7, #28
 8006b68:	4619      	mov	r1, r3
 8006b6a:	485d      	ldr	r0, [pc, #372]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006b6c:	f002 fcb0 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MEASURING_Pin Extra_GPIO_Pin BUTTON_DOWN_Pin BUTTON_PREV_Pin */
  GPIO_InitStruct.Pin = BUTTON_MEASURING_Pin|Extra_GPIO_Pin|BUTTON_DOWN_Pin|BUTTON_PREV_Pin;
 8006b70:	f24c 0306 	movw	r3, #49158	; 0xc006
 8006b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006b76:	4b5d      	ldr	r3, [pc, #372]	; (8006cec <MX_GPIO_Init+0x324>)
 8006b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b7e:	f107 031c 	add.w	r3, r7, #28
 8006b82:	4619      	mov	r1, r3
 8006b84:	4856      	ldr	r0, [pc, #344]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006b86:	f002 fca3 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8006b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b90:	2302      	movs	r3, #2
 8006b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8006ba0:	f107 031c 	add.w	r3, r7, #28
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	484b      	ldr	r0, [pc, #300]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006ba8:	f002 fc92 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin ADC_CONV_Pin ADC_RST_Pin RANGE_MA_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ADC_CONV_Pin|ADC_RST_Pin|RANGE_MA_Pin;
 8006bac:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8006bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bbe:	f107 031c 	add.w	r3, r7, #28
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4846      	ldr	r0, [pc, #280]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006bc6:	f002 fc83 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_NEXT_Pin BUTTON_UP_Pin BUTTON_ESC_Pin BUTTON_ENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_NEXT_Pin|BUTTON_UP_Pin|BUTTON_ESC_Pin|BUTTON_ENTER_Pin;
 8006bca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006bd0:	4b46      	ldr	r3, [pc, #280]	; (8006cec <MX_GPIO_Init+0x324>)
 8006bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bd8:	f107 031c 	add.w	r3, r7, #28
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4841      	ldr	r0, [pc, #260]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006be0:	f002 fc76 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bea:	2302      	movs	r3, #2
 8006bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bfa:	f107 031c 	add.w	r3, r7, #28
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4836      	ldr	r0, [pc, #216]	; (8006cdc <MX_GPIO_Init+0x314>)
 8006c02:	f002 fc65 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin ADC_RVS_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|ADC_RVS_Pin;
 8006c06:	2321      	movs	r3, #33	; 0x21
 8006c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c12:	f107 031c 	add.w	r3, r7, #28
 8006c16:	4619      	mov	r1, r3
 8006c18:	4832      	ldr	r0, [pc, #200]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006c1a:	f002 fc59 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC1_WP_Pin */
  GPIO_InitStruct.Pin = SDMMC1_WP_Pin;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c22:	2301      	movs	r3, #1
 8006c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c26:	2302      	movs	r3, #2
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SDMMC1_WP_GPIO_Port, &GPIO_InitStruct);
 8006c2e:	f107 031c 	add.w	r3, r7, #28
 8006c32:	4619      	mov	r1, r3
 8006c34:	482b      	ldr	r0, [pc, #172]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006c36:	f002 fc4b 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3_Pin PD4_Pin */
  GPIO_InitStruct.Pin = PD3_Pin|PD4_Pin;
 8006c3a:	2318      	movs	r3, #24
 8006c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006c3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ce8 <MX_GPIO_Init+0x320>)
 8006c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c46:	f107 031c 	add.w	r3, r7, #28
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4825      	ldr	r0, [pc, #148]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006c4e:	f002 fc3f 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c56:	2301      	movs	r3, #1
 8006c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8006c62:	f107 031c 	add.w	r3, r7, #28
 8006c66:	4619      	mov	r1, r3
 8006c68:	481e      	ldr	r0, [pc, #120]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006c6a:	f002 fc31 	bl	80094d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2101      	movs	r1, #1
 8006c72:	2006      	movs	r0, #6
 8006c74:	f001 fbf1 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006c78:	2006      	movs	r0, #6
 8006c7a:	f001 fc0a 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2101      	movs	r1, #1
 8006c82:	2007      	movs	r0, #7
 8006c84:	f001 fbe9 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8006c88:	2007      	movs	r0, #7
 8006c8a:	f001 fc02 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2101      	movs	r1, #1
 8006c92:	2008      	movs	r0, #8
 8006c94:	f001 fbe1 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006c98:	2008      	movs	r0, #8
 8006c9a:	f001 fbfa 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	2009      	movs	r0, #9
 8006ca4:	f001 fbd9 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006ca8:	2009      	movs	r0, #9
 8006caa:	f001 fbf2 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	200a      	movs	r0, #10
 8006cb4:	f001 fbd1 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006cb8:	200a      	movs	r0, #10
 8006cba:	f001 fbea 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	2017      	movs	r0, #23
 8006cc4:	f001 fbc9 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006cc8:	2017      	movs	r0, #23
 8006cca:	f001 fbe2 	bl	8008492 <HAL_NVIC_EnableIRQ>
 8006cce:	e00f      	b.n	8006cf0 <MX_GPIO_Init+0x328>
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	40020800 	.word	0x40020800
 8006cdc:	40020000 	.word	0x40020000
 8006ce0:	40020400 	.word	0x40020400
 8006ce4:	40020c00 	.word	0x40020c00
 8006ce8:	10110000 	.word	0x10110000
 8006cec:	10210000 	.word	0x10210000

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	2028      	movs	r0, #40	; 0x28
 8006cf6:	f001 fbb0 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006cfa:	2028      	movs	r0, #40	; 0x28
 8006cfc:	f001 fbc9 	bl	8008492 <HAL_NVIC_EnableIRQ>

}
 8006d00:	bf00      	nop
 8006d02:	3730      	adds	r7, #48	; 0x30
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006d0c:	bf00      	nop
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <ringbuff_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                  Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
BUF_PREF(buff_init)(BUF_PREF(buff_t)* buff, void* buffdata, size_t size) {
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <ringbuff_init+0x1e>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <ringbuff_init+0x1e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <ringbuff_init+0x22>
        return 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e00b      	b.n	8006d50 <ringbuff_init+0x3a>
    }

    BUF_MEMSET(buff, 0x00, sizeof(*buff));
 8006d38:	2210      	movs	r2, #16
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f017 f990 	bl	801e062 <memset>

    buff->size = size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	601a      	str	r2, [r3, #0]

    return 1;
 8006d4e:	2301      	movs	r3, #1
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                  When returned value is less than `btw`, there was no enough memory available
 *                  to copy full data array
 */
size_t
BUF_PREF(buff_write)(BUF_PREF(buff_t)* buff, const void* data, size_t btw) {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || btw == 0) {
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <ringbuff_write+0x2c>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d006      	beq.n	8006d84 <ringbuff_write+0x2c>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <ringbuff_write+0x2c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <ringbuff_write+0x30>
        return 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	e047      	b.n	8006e18 <ringbuff_write+0xc0>
    }

    /* Calculate maximum number of bytes available to write */
    free = BUF_PREF(buff_get_free)(buff);
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f8ad 	bl	8006ee8 <ringbuff_get_free>
 8006d8e:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	4293      	cmp	r3, r2
 8006d96:	bf28      	it	cs
 8006d98:	4613      	movcs	r3, r2
 8006d9a:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <ringbuff_write+0x4e>
        return 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e038      	b.n	8006e18 <ringbuff_write+0xc0>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bf28      	it	cs
 8006db6:	4613      	movcs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	69f9      	ldr	r1, [r7, #28]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f017 f93f 	bl	801e04c <memcpy>
    buff->w += tocopy;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <ringbuff_write+0xa8>
        BUF_MEMCPY(buff->buff, (void *)&d[tocopy], btw);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	4413      	add	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	4619      	mov	r1, r3
 8006df6:	f017 f929 	bl	801e04c <memcpy>
        buff->w = btw;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	60da      	str	r2, [r3, #12]
    }

    if (buff->w >= buff->size) {
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d302      	bcc.n	8006e12 <ringbuff_write+0xba>
        buff->w = 0;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	60da      	str	r2, [r3, #12]
    }
    return tocopy + btw;
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4413      	add	r3, r2
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <ringbuff_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
BUF_PREF(buff_read)(BUF_PREF(buff_t)* buff, void* data, size_t btr) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    uint8_t *d = data;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || btr == 0) {
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <ringbuff_read+0x2c>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d006      	beq.n	8006e4c <ringbuff_read+0x2c>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <ringbuff_read+0x2c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <ringbuff_read+0x30>
        return 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e047      	b.n	8006ee0 <ringbuff_read+0xc0>
    }

    /* Calculate maximum number of bytes available to read */
    full = BUF_PREF(buff_get_full)(buff);
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f880 	bl	8006f56 <ringbuff_get_full>
 8006e56:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	bf28      	it	cs
 8006e60:	4613      	movcs	r3, r2
 8006e62:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <ringbuff_read+0x4e>
        return 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e038      	b.n	8006ee0 <ringbuff_read+0xc0>
    }

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->r, btr);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	bf28      	it	cs
 8006e7e:	4613      	movcs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	69f8      	ldr	r0, [r7, #28]
 8006e92:	f017 f8db 	bl	801e04c <memcpy>
    buff->r += tocopy;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	609a      	str	r2, [r3, #8]
    btr -= tocopy;
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <ringbuff_read+0xa8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	18d0      	adds	r0, r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	f017 f8c5 	bl	801e04c <memcpy>
        buff->r = btr;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
    }

    /* Step 3: Check end of buffer */
    if (buff->r >= buff->size) {
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d302      	bcc.n	8006eda <ringbuff_read+0xba>
        buff->r = 0;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
    }
    return tocopy + btr;
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4413      	add	r3, r2
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <ringbuff_get_free>:
 * \brief           Get number of bytes in buffer available to write
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
BUF_PREF(buff_get_free)(BUF_PREF(buff_t)* buff) {
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <ringbuff_get_free+0x1e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <ringbuff_get_free+0x1e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <ringbuff_get_free+0x22>
        return 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e01f      	b.n	8006f4a <ringbuff_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d103      	bne.n	8006f26 <ringbuff_get_free+0x3e>
        size = buff->size;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e00f      	b.n	8006f46 <ringbuff_get_free+0x5e>
    } else if (r > w) {
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d904      	bls.n	8006f38 <ringbuff_get_free+0x50>
        size = r - w;
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e006      	b.n	8006f46 <ringbuff_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	68f9      	ldr	r1, [r7, #12]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1acb      	subs	r3, r1, r3
 8006f42:	4413      	add	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	3b01      	subs	r3, #1
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <ringbuff_get_full>:
 * \brief           Get number of bytes in buffer available to read
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
BUF_PREF(buff_get_full)(BUF_PREF(buff_t)* buff) {
 8006f56:	b480      	push	{r7}
 8006f58:	b087      	sub	sp, #28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <ringbuff_get_full+0x1e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <ringbuff_get_full+0x1e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <ringbuff_get_full+0x22>
        return 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e01d      	b.n	8006fb4 <ringbuff_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d102      	bne.n	8006f92 <ringbuff_get_full+0x3c>
        size = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e00f      	b.n	8006fb2 <ringbuff_get_full+0x5c>
    } else if (w > r) {
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d904      	bls.n	8006fa4 <ringbuff_get_full+0x4e>
        size = w - r;
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	e006      	b.n	8006fb2 <ringbuff_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	6939      	ldr	r1, [r7, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1acb      	subs	r3, r1, r3
 8006fae:	4413      	add	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]
    }
    return size;
 8006fb2:	697b      	ldr	r3, [r7, #20]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <ringbuff_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
BUF_PREF(buff_get_linear_block_read_address)(BUF_PREF(buff_t)* buff) {
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <ringbuff_get_linear_block_read_address+0x1e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <ringbuff_get_linear_block_read_address+0x1e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <ringbuff_get_linear_block_read_address+0x22>
        return NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e004      	b.n	8006fec <ringbuff_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	4413      	add	r3, r2
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
BUF_PREF(buff_get_linear_block_read_length)(BUF_PREF(buff_t)* buff) {
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <ringbuff_get_linear_block_read_length+0x1e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <ringbuff_get_linear_block_read_length+0x1e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <ringbuff_get_linear_block_read_length+0x22>
        return 0;
 8007016:	2300      	movs	r3, #0
 8007018:	e01b      	b.n	8007052 <ringbuff_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	429a      	cmp	r2, r3
 800702c:	d904      	bls.n	8007038 <ringbuff_get_linear_block_read_length+0x40>
        len = w - r;
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e00b      	b.n	8007050 <ringbuff_get_linear_block_read_length+0x58>
    } else if (r > w) {
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	429a      	cmp	r2, r3
 800703e:	d905      	bls.n	800704c <ringbuff_get_linear_block_read_length+0x54>
        len = buff->size - r;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	e001      	b.n	8007050 <ringbuff_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
    }
    return len;
 8007050:	697b      	ldr	r3, [r7, #20]
}
 8007052:	4618      	mov	r0, r3
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
BUF_PREF(buff_skip)(BUF_PREF(buff_t)* buff, size_t len) {
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <ringbuff_skip+0x26>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <ringbuff_skip+0x26>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <ringbuff_skip+0x26>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <ringbuff_skip+0x2a>
        return 0;
 8007084:	2300      	movs	r3, #0
 8007086:	e01b      	b.n	80070c0 <ringbuff_skip+0x62>
    }

    full = BUF_PREF(buff_get_full)(buff);       /* Get buffer used length */
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff ff64 	bl	8006f56 <ringbuff_get_full>
 800708e:	60f8      	str	r0, [r7, #12]
    buff->r += BUF_MIN(len, full);              /* Advance read pointer */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	428b      	cmp	r3, r1
 800709a:	bf28      	it	cs
 800709c:	460b      	movcs	r3, r1
 800709e:	441a      	add	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d306      	bcc.n	80070be <ringbuff_skip+0x60>
        buff->r -= buff->size;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	1ad2      	subs	r2, r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	609a      	str	r2, [r3, #8]
    }
    return len;
 80070be:	683b      	ldr	r3, [r7, #0]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <ringbuff_advance>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to advance
 * \return          Number of bytes advanced for write operation
 */
size_t
BUF_PREF(buff_advance)(BUF_PREF(buff_t)* buff, size_t len) {
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
    size_t free;

    if (!BUF_IS_VALID(buff) || len == 0) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00a      	beq.n	80070ee <ringbuff_advance+0x26>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <ringbuff_advance+0x26>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <ringbuff_advance+0x26>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <ringbuff_advance+0x2a>
        return 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e01b      	b.n	800712a <ringbuff_advance+0x62>
    }

    free = BUF_PREF(buff_get_free)(buff);       /* Get buffer free length */
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fef8 	bl	8006ee8 <ringbuff_get_free>
 80070f8:	60f8      	str	r0, [r7, #12]
    buff->w += BUF_MIN(len, free);              /* Advance write pointer */
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	428b      	cmp	r3, r1
 8007104:	bf28      	it	cs
 8007106:	460b      	movcs	r3, r1
 8007108:	441a      	add	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60da      	str	r2, [r3, #12]
    if (buff->w >= buff->size) {                /* Subtract possible overflow */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d306      	bcc.n	8007128 <ringbuff_advance+0x60>
        buff->w -= buff->size;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]
    }
    return len;
 8007128:	683b      	ldr	r3, [r7, #0]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <HAL_MspInit+0x44>)
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	4a0e      	ldr	r2, [pc, #56]	; (8007178 <HAL_MspInit+0x44>)
 8007140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007144:	6413      	str	r3, [r2, #64]	; 0x40
 8007146:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <HAL_MspInit+0x44>)
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800714e:	607b      	str	r3, [r7, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_MspInit+0x44>)
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	4a08      	ldr	r2, [pc, #32]	; (8007178 <HAL_MspInit+0x44>)
 8007158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800715c:	6453      	str	r3, [r2, #68]	; 0x44
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <HAL_MspInit+0x44>)
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40023800 	.word	0x40023800

0800717c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	605a      	str	r2, [r3, #4]
 800718e:	609a      	str	r2, [r3, #8]
 8007190:	60da      	str	r2, [r3, #12]
 8007192:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a3f      	ldr	r2, [pc, #252]	; (8007298 <HAL_ETH_MspInit+0x11c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d178      	bne.n	8007290 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800719e:	4b3f      	ldr	r3, [pc, #252]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	4a3e      	ldr	r2, [pc, #248]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071a8:	6313      	str	r3, [r2, #48]	; 0x30
 80071aa:	4b3c      	ldr	r3, [pc, #240]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b2:	623b      	str	r3, [r7, #32]
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	4b39      	ldr	r3, [pc, #228]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	4a38      	ldr	r2, [pc, #224]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071c0:	6313      	str	r3, [r2, #48]	; 0x30
 80071c2:	4b36      	ldr	r3, [pc, #216]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4b33      	ldr	r3, [pc, #204]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	4a32      	ldr	r2, [pc, #200]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071d8:	6313      	str	r3, [r2, #48]	; 0x30
 80071da:	4b30      	ldr	r3, [pc, #192]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071e6:	4b2d      	ldr	r3, [pc, #180]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	4a2c      	ldr	r2, [pc, #176]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071ec:	f043 0304 	orr.w	r3, r3, #4
 80071f0:	6313      	str	r3, [r2, #48]	; 0x30
 80071f2:	4b2a      	ldr	r3, [pc, #168]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071fe:	4b27      	ldr	r3, [pc, #156]	; (800729c <HAL_ETH_MspInit+0x120>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	4a26      	ldr	r2, [pc, #152]	; (800729c <HAL_ETH_MspInit+0x120>)
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	6313      	str	r3, [r2, #48]	; 0x30
 800720a:	4b24      	ldr	r3, [pc, #144]	; (800729c <HAL_ETH_MspInit+0x120>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007216:	4b21      	ldr	r3, [pc, #132]	; (800729c <HAL_ETH_MspInit+0x120>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	4a20      	ldr	r2, [pc, #128]	; (800729c <HAL_ETH_MspInit+0x120>)
 800721c:	f043 0302 	orr.w	r3, r3, #2
 8007220:	6313      	str	r3, [r2, #48]	; 0x30
 8007222:	4b1e      	ldr	r3, [pc, #120]	; (800729c <HAL_ETH_MspInit+0x120>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800722e:	2332      	movs	r3, #50	; 0x32
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007232:	2302      	movs	r3, #2
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007236:	2300      	movs	r3, #0
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800723a:	2303      	movs	r3, #3
 800723c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800723e:	230b      	movs	r3, #11
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007246:	4619      	mov	r1, r3
 8007248:	4815      	ldr	r0, [pc, #84]	; (80072a0 <HAL_ETH_MspInit+0x124>)
 800724a:	f002 f941 	bl	80094d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800724e:	2386      	movs	r3, #134	; 0x86
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007252:	2302      	movs	r3, #2
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007256:	2300      	movs	r3, #0
 8007258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800725a:	2303      	movs	r3, #3
 800725c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800725e:	230b      	movs	r3, #11
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007266:	4619      	mov	r1, r3
 8007268:	480e      	ldr	r0, [pc, #56]	; (80072a4 <HAL_ETH_MspInit+0x128>)
 800726a:	f002 f931 	bl	80094d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800726e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007274:	2302      	movs	r3, #2
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007278:	2300      	movs	r3, #0
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800727c:	2303      	movs	r3, #3
 800727e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007280:	230b      	movs	r3, #11
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007288:	4619      	mov	r1, r3
 800728a:	4807      	ldr	r0, [pc, #28]	; (80072a8 <HAL_ETH_MspInit+0x12c>)
 800728c:	f002 f920 	bl	80094d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8007290:	bf00      	nop
 8007292:	3738      	adds	r7, #56	; 0x38
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40028000 	.word	0x40028000
 800729c:	40023800 	.word	0x40023800
 80072a0:	40020800 	.word	0x40020800
 80072a4:	40020000 	.word	0x40020000
 80072a8:	40020400 	.word	0x40020400

080072ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08c      	sub	sp, #48	; 0x30
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072b4:	f107 031c 	add.w	r3, r7, #28
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	60da      	str	r2, [r3, #12]
 80072c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a2f      	ldr	r2, [pc, #188]	; (8007388 <HAL_I2C_MspInit+0xdc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d129      	bne.n	8007322 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <HAL_I2C_MspInit+0xe0>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	4a2e      	ldr	r2, [pc, #184]	; (800738c <HAL_I2C_MspInit+0xe0>)
 80072d4:	f043 0302 	orr.w	r3, r3, #2
 80072d8:	6313      	str	r3, [r2, #48]	; 0x30
 80072da:	4b2c      	ldr	r3, [pc, #176]	; (800738c <HAL_I2C_MspInit+0xe0>)
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80072e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80072ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072ec:	2312      	movs	r3, #18
 80072ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072f0:	2301      	movs	r3, #1
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072f4:	2303      	movs	r3, #3
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80072f8:	2304      	movs	r3, #4
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072fc:	f107 031c 	add.w	r3, r7, #28
 8007300:	4619      	mov	r1, r3
 8007302:	4823      	ldr	r0, [pc, #140]	; (8007390 <HAL_I2C_MspInit+0xe4>)
 8007304:	f002 f8e4 	bl	80094d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007308:	4b20      	ldr	r3, [pc, #128]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	4a1f      	ldr	r2, [pc, #124]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800730e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007312:	6413      	str	r3, [r2, #64]	; 0x40
 8007314:	4b1d      	ldr	r3, [pc, #116]	; (800738c <HAL_I2C_MspInit+0xe0>)
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8007320:	e02d      	b.n	800737e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C4)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1b      	ldr	r2, [pc, #108]	; (8007394 <HAL_I2C_MspInit+0xe8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d128      	bne.n	800737e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800732c:	4b17      	ldr	r3, [pc, #92]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	4a16      	ldr	r2, [pc, #88]	; (800738c <HAL_I2C_MspInit+0xe0>)
 8007332:	f043 0308 	orr.w	r3, r3, #8
 8007336:	6313      	str	r3, [r2, #48]	; 0x30
 8007338:	4b14      	ldr	r3, [pc, #80]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007344:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800734a:	2312      	movs	r3, #18
 800734c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800734e:	2301      	movs	r3, #1
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007352:	2303      	movs	r3, #3
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007356:	2304      	movs	r3, #4
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800735a:	f107 031c 	add.w	r3, r7, #28
 800735e:	4619      	mov	r1, r3
 8007360:	480d      	ldr	r0, [pc, #52]	; (8007398 <HAL_I2C_MspInit+0xec>)
 8007362:	f002 f8b5 	bl	80094d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007366:	4b09      	ldr	r3, [pc, #36]	; (800738c <HAL_I2C_MspInit+0xe0>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	4a08      	ldr	r2, [pc, #32]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800736c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007370:	6413      	str	r3, [r2, #64]	; 0x40
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <HAL_I2C_MspInit+0xe0>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	bf00      	nop
 8007380:	3730      	adds	r7, #48	; 0x30
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40005400 	.word	0x40005400
 800738c:	40023800 	.word	0x40023800
 8007390:	40020400 	.word	0x40020400
 8007394:	40006000 	.word	0x40006000
 8007398:	40020c00 	.word	0x40020c00

0800739c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a07      	ldr	r2, [pc, #28]	; (80073c8 <HAL_RTC_MspInit+0x2c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d105      	bne.n	80073ba <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <HAL_RTC_MspInit+0x30>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b2:	4a06      	ldr	r2, [pc, #24]	; (80073cc <HAL_RTC_MspInit+0x30>)
 80073b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40002800 	.word	0x40002800
 80073cc:	40023800 	.word	0x40023800

080073d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	; 0x28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073d8:	f107 0314 	add.w	r3, r7, #20
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	609a      	str	r2, [r3, #8]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a47      	ldr	r2, [pc, #284]	; (800750c <HAL_SD_MspInit+0x13c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	f040 8088 	bne.w	8007504 <HAL_SD_MspInit+0x134>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80073f4:	4b46      	ldr	r3, [pc, #280]	; (8007510 <HAL_SD_MspInit+0x140>)
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	4a45      	ldr	r2, [pc, #276]	; (8007510 <HAL_SD_MspInit+0x140>)
 80073fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073fe:	6453      	str	r3, [r2, #68]	; 0x44
 8007400:	4b43      	ldr	r3, [pc, #268]	; (8007510 <HAL_SD_MspInit+0x140>)
 8007402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800740c:	4b40      	ldr	r3, [pc, #256]	; (8007510 <HAL_SD_MspInit+0x140>)
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	4a3f      	ldr	r2, [pc, #252]	; (8007510 <HAL_SD_MspInit+0x140>)
 8007412:	f043 0304 	orr.w	r3, r3, #4
 8007416:	6313      	str	r3, [r2, #48]	; 0x30
 8007418:	4b3d      	ldr	r3, [pc, #244]	; (8007510 <HAL_SD_MspInit+0x140>)
 800741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007424:	4b3a      	ldr	r3, [pc, #232]	; (8007510 <HAL_SD_MspInit+0x140>)
 8007426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007428:	4a39      	ldr	r2, [pc, #228]	; (8007510 <HAL_SD_MspInit+0x140>)
 800742a:	f043 0308 	orr.w	r3, r3, #8
 800742e:	6313      	str	r3, [r2, #48]	; 0x30
 8007430:	4b37      	ldr	r3, [pc, #220]	; (8007510 <HAL_SD_MspInit+0x140>)
 8007432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007434:	f003 0308 	and.w	r3, r3, #8
 8007438:	60bb      	str	r3, [r7, #8]
 800743a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800743c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007440:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007442:	2302      	movs	r3, #2
 8007444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800744a:	2303      	movs	r3, #3
 800744c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800744e:	230c      	movs	r3, #12
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007452:	f107 0314 	add.w	r3, r7, #20
 8007456:	4619      	mov	r1, r3
 8007458:	482e      	ldr	r0, [pc, #184]	; (8007514 <HAL_SD_MspInit+0x144>)
 800745a:	f002 f839 	bl	80094d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800745e:	2304      	movs	r3, #4
 8007460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007462:	2302      	movs	r3, #2
 8007464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800746a:	2303      	movs	r3, #3
 800746c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800746e:	230c      	movs	r3, #12
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007472:	f107 0314 	add.w	r3, r7, #20
 8007476:	4619      	mov	r1, r3
 8007478:	4827      	ldr	r0, [pc, #156]	; (8007518 <HAL_SD_MspInit+0x148>)
 800747a:	f002 f829 	bl	80094d0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 800747e:	4b27      	ldr	r3, [pc, #156]	; (800751c <HAL_SD_MspInit+0x14c>)
 8007480:	4a27      	ldr	r2, [pc, #156]	; (8007520 <HAL_SD_MspInit+0x150>)
 8007482:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8007484:	4b25      	ldr	r3, [pc, #148]	; (800751c <HAL_SD_MspInit+0x14c>)
 8007486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800748a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800748c:	4b23      	ldr	r3, [pc, #140]	; (800751c <HAL_SD_MspInit+0x14c>)
 800748e:	2240      	movs	r2, #64	; 0x40
 8007490:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007492:	4b22      	ldr	r3, [pc, #136]	; (800751c <HAL_SD_MspInit+0x14c>)
 8007494:	2200      	movs	r2, #0
 8007496:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007498:	4b20      	ldr	r3, [pc, #128]	; (800751c <HAL_SD_MspInit+0x14c>)
 800749a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800749e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80074a0:	4b1e      	ldr	r3, [pc, #120]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074a6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80074a8:	4b1c      	ldr	r3, [pc, #112]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074ae:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80074b0:	4b1a      	ldr	r3, [pc, #104]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074b2:	2220      	movs	r2, #32
 80074b4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80074b6:	4b19      	ldr	r3, [pc, #100]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80074bc:	4b17      	ldr	r3, [pc, #92]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074be:	2204      	movs	r2, #4
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80074c2:	4b16      	ldr	r3, [pc, #88]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074c4:	2203      	movs	r2, #3
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80074c8:	4b14      	ldr	r3, [pc, #80]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80074d0:	4b12      	ldr	r3, [pc, #72]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80074d8:	4810      	ldr	r0, [pc, #64]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074da:	f000 fff5 	bl	80084c8 <HAL_DMA_Init>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80074e4:	f7ff fc10 	bl	8006d08 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a0c      	ldr	r2, [pc, #48]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80074ee:	4a0b      	ldr	r2, [pc, #44]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80074f4:	2200      	movs	r2, #0
 80074f6:	2100      	movs	r1, #0
 80074f8:	2031      	movs	r0, #49	; 0x31
 80074fa:	f000 ffae 	bl	800845a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80074fe:	2031      	movs	r0, #49	; 0x31
 8007500:	f000 ffc7 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8007504:	bf00      	nop
 8007506:	3728      	adds	r7, #40	; 0x28
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40012c00 	.word	0x40012c00
 8007510:	40023800 	.word	0x40023800
 8007514:	40020800 	.word	0x40020800
 8007518:	40020c00 	.word	0x40020c00
 800751c:	20003020 	.word	0x20003020
 8007520:	40026458 	.word	0x40026458

08007524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08e      	sub	sp, #56	; 0x38
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800752c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	605a      	str	r2, [r3, #4]
 8007536:	609a      	str	r2, [r3, #8]
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a7e      	ldr	r2, [pc, #504]	; (800773c <HAL_SPI_MspInit+0x218>)
 8007542:	4293      	cmp	r3, r2
 8007544:	f040 80c7 	bne.w	80076d6 <HAL_SPI_MspInit+0x1b2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007548:	4b7d      	ldr	r3, [pc, #500]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754c:	4a7c      	ldr	r2, [pc, #496]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800754e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007552:	6453      	str	r3, [r2, #68]	; 0x44
 8007554:	4b7a      	ldr	r3, [pc, #488]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800755c:	623b      	str	r3, [r7, #32]
 800755e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007560:	4b77      	ldr	r3, [pc, #476]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	4a76      	ldr	r2, [pc, #472]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	6313      	str	r3, [r2, #48]	; 0x30
 800756c:	4b74      	ldr	r3, [pc, #464]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007578:	4b71      	ldr	r3, [pc, #452]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	4a70      	ldr	r2, [pc, #448]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800757e:	f043 0308 	orr.w	r3, r3, #8
 8007582:	6313      	str	r3, [r2, #48]	; 0x30
 8007584:	4b6e      	ldr	r3, [pc, #440]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007590:	4b6b      	ldr	r3, [pc, #428]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	4a6a      	ldr	r2, [pc, #424]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007596:	f043 0302 	orr.w	r3, r3, #2
 800759a:	6313      	str	r3, [r2, #48]	; 0x30
 800759c:	4b68      	ldr	r3, [pc, #416]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80075a8:	2320      	movs	r3, #32
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ac:	2302      	movs	r3, #2
 80075ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075b4:	2303      	movs	r3, #3
 80075b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80075b8:	2305      	movs	r3, #5
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075c0:	4619      	mov	r1, r3
 80075c2:	4860      	ldr	r0, [pc, #384]	; (8007744 <HAL_SPI_MspInit+0x220>)
 80075c4:	f001 ff84 	bl	80094d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075cc:	2302      	movs	r3, #2
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075d4:	2303      	movs	r3, #3
 80075d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80075d8:	2305      	movs	r3, #5
 80075da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075e0:	4619      	mov	r1, r3
 80075e2:	4859      	ldr	r0, [pc, #356]	; (8007748 <HAL_SPI_MspInit+0x224>)
 80075e4:	f001 ff74 	bl	80094d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80075e8:	2310      	movs	r3, #16
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ec:	2302      	movs	r3, #2
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075f4:	2303      	movs	r3, #3
 80075f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80075f8:	2305      	movs	r3, #5
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007600:	4619      	mov	r1, r3
 8007602:	4852      	ldr	r0, [pc, #328]	; (800774c <HAL_SPI_MspInit+0x228>)
 8007604:	f001 ff64 	bl	80094d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8007608:	4b51      	ldr	r3, [pc, #324]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800760a:	4a52      	ldr	r2, [pc, #328]	; (8007754 <HAL_SPI_MspInit+0x230>)
 800760c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800760e:	4b50      	ldr	r3, [pc, #320]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007610:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007614:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007616:	4b4e      	ldr	r3, [pc, #312]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007618:	2200      	movs	r2, #0
 800761a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800761c:	4b4c      	ldr	r3, [pc, #304]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800761e:	2200      	movs	r2, #0
 8007620:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007622:	4b4b      	ldr	r3, [pc, #300]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007628:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800762a:	4b49      	ldr	r3, [pc, #292]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800762c:	2200      	movs	r2, #0
 800762e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007630:	4b47      	ldr	r3, [pc, #284]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007632:	2200      	movs	r2, #0
 8007634:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8007636:	4b46      	ldr	r3, [pc, #280]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007638:	2200      	movs	r2, #0
 800763a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800763c:	4b44      	ldr	r3, [pc, #272]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800763e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007642:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007644:	4b42      	ldr	r3, [pc, #264]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007646:	2200      	movs	r2, #0
 8007648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800764a:	4841      	ldr	r0, [pc, #260]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800764c:	f000 ff3c 	bl	80084c8 <HAL_DMA_Init>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <HAL_SPI_MspInit+0x136>
    {
      Error_Handler();
 8007656:	f7ff fb57 	bl	8006d08 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a3c      	ldr	r2, [pc, #240]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800765e:	659a      	str	r2, [r3, #88]	; 0x58
 8007660:	4a3b      	ldr	r2, [pc, #236]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8007666:	4b3c      	ldr	r3, [pc, #240]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007668:	4a3c      	ldr	r2, [pc, #240]	; (800775c <HAL_SPI_MspInit+0x238>)
 800766a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800766c:	4b3a      	ldr	r3, [pc, #232]	; (8007758 <HAL_SPI_MspInit+0x234>)
 800766e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007672:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007674:	4b38      	ldr	r3, [pc, #224]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007676:	2240      	movs	r2, #64	; 0x40
 8007678:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800767a:	4b37      	ldr	r3, [pc, #220]	; (8007758 <HAL_SPI_MspInit+0x234>)
 800767c:	2200      	movs	r2, #0
 800767e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007680:	4b35      	ldr	r3, [pc, #212]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007686:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007688:	4b33      	ldr	r3, [pc, #204]	; (8007758 <HAL_SPI_MspInit+0x234>)
 800768a:	2200      	movs	r2, #0
 800768c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800768e:	4b32      	ldr	r3, [pc, #200]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007690:	2200      	movs	r2, #0
 8007692:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007694:	4b30      	ldr	r3, [pc, #192]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007696:	2200      	movs	r2, #0
 8007698:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800769a:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <HAL_SPI_MspInit+0x234>)
 800769c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80076a0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80076a2:	4b2d      	ldr	r3, [pc, #180]	; (8007758 <HAL_SPI_MspInit+0x234>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80076a8:	482b      	ldr	r0, [pc, #172]	; (8007758 <HAL_SPI_MspInit+0x234>)
 80076aa:	f000 ff0d 	bl	80084c8 <HAL_DMA_Init>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_SPI_MspInit+0x194>
    {
      Error_Handler();
 80076b4:	f7ff fb28 	bl	8006d08 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a27      	ldr	r2, [pc, #156]	; (8007758 <HAL_SPI_MspInit+0x234>)
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
 80076be:	4a26      	ldr	r2, [pc, #152]	; (8007758 <HAL_SPI_MspInit+0x234>)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80076c4:	2200      	movs	r2, #0
 80076c6:	2103      	movs	r1, #3
 80076c8:	2023      	movs	r0, #35	; 0x23
 80076ca:	f000 fec6 	bl	800845a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80076ce:	2023      	movs	r0, #35	; 0x23
 80076d0:	f000 fedf 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80076d4:	e02d      	b.n	8007732 <HAL_SPI_MspInit+0x20e>
  else if(hspi->Instance==SPI4)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a21      	ldr	r2, [pc, #132]	; (8007760 <HAL_SPI_MspInit+0x23c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d128      	bne.n	8007732 <HAL_SPI_MspInit+0x20e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80076e0:	4b17      	ldr	r3, [pc, #92]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e4:	4a16      	ldr	r2, [pc, #88]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076ea:	6453      	str	r3, [r2, #68]	; 0x44
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	4a10      	ldr	r2, [pc, #64]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076fe:	f043 0310 	orr.w	r3, r3, #16
 8007702:	6313      	str	r3, [r2, #48]	; 0x30
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	f003 0310 	and.w	r3, r3, #16
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8007710:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007716:	2302      	movs	r3, #2
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800771a:	2300      	movs	r3, #0
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800771e:	2303      	movs	r3, #3
 8007720:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007722:	2305      	movs	r3, #5
 8007724:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800772a:	4619      	mov	r1, r3
 800772c:	480d      	ldr	r0, [pc, #52]	; (8007764 <HAL_SPI_MspInit+0x240>)
 800772e:	f001 fecf 	bl	80094d0 <HAL_GPIO_Init>
}
 8007732:	bf00      	nop
 8007734:	3738      	adds	r7, #56	; 0x38
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40013000 	.word	0x40013000
 8007740:	40023800 	.word	0x40023800
 8007744:	40020000 	.word	0x40020000
 8007748:	40020c00 	.word	0x40020c00
 800774c:	40020400 	.word	0x40020400
 8007750:	20011aa4 	.word	0x20011aa4
 8007754:	40026410 	.word	0x40026410
 8007758:	200070c8 	.word	0x200070c8
 800775c:	40026488 	.word	0x40026488
 8007760:	40013400 	.word	0x40013400
 8007764:	40021000 	.word	0x40021000

08007768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a25      	ldr	r2, [pc, #148]	; (800780c <HAL_TIM_Base_MspInit+0xa4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d10c      	bne.n	8007794 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800777a:	4b25      	ldr	r3, [pc, #148]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	4a24      	ldr	r2, [pc, #144]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 8007780:	f043 0304 	orr.w	r3, r3, #4
 8007784:	6413      	str	r3, [r2, #64]	; 0x40
 8007786:	4b22      	ldr	r3, [pc, #136]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8007792:	e034      	b.n	80077fe <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <HAL_TIM_Base_MspInit+0xac>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d10c      	bne.n	80077b8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800779e:	4b1c      	ldr	r3, [pc, #112]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	4a1b      	ldr	r2, [pc, #108]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077a4:	f043 0308 	orr.w	r3, r3, #8
 80077a8:	6413      	str	r3, [r2, #64]	; 0x40
 80077aa:	4b19      	ldr	r3, [pc, #100]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]
}
 80077b6:	e022      	b.n	80077fe <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a16      	ldr	r2, [pc, #88]	; (8007818 <HAL_TIM_Base_MspInit+0xb0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d10c      	bne.n	80077dc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80077c2:	4b13      	ldr	r3, [pc, #76]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	4a12      	ldr	r2, [pc, #72]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077c8:	f043 0320 	orr.w	r3, r3, #32
 80077cc:	6413      	str	r3, [r2, #64]	; 0x40
 80077ce:	4b10      	ldr	r3, [pc, #64]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
}
 80077da:	e010      	b.n	80077fe <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a0e      	ldr	r2, [pc, #56]	; (800781c <HAL_TIM_Base_MspInit+0xb4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d10b      	bne.n	80077fe <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80077e6:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	4a09      	ldr	r2, [pc, #36]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f0:	6413      	str	r3, [r2, #64]	; 0x40
 80077f2:	4b07      	ldr	r3, [pc, #28]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fa:	60bb      	str	r3, [r7, #8]
 80077fc:	68bb      	ldr	r3, [r7, #8]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40000800 	.word	0x40000800
 8007810:	40023800 	.word	0x40023800
 8007814:	40000c00 	.word	0x40000c00
 8007818:	40001400 	.word	0x40001400
 800781c:	40002000 	.word	0x40002000

08007820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08c      	sub	sp, #48	; 0x30
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007828:	f107 031c 	add.w	r3, r7, #28
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	605a      	str	r2, [r3, #4]
 8007832:	609a      	str	r2, [r3, #8]
 8007834:	60da      	str	r2, [r3, #12]
 8007836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a9f      	ldr	r2, [pc, #636]	; (8007abc <HAL_UART_MspInit+0x29c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	f040 809a 	bne.w	8007978 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8007844:	4b9e      	ldr	r3, [pc, #632]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	4a9d      	ldr	r2, [pc, #628]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800784a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800784e:	6413      	str	r3, [r2, #64]	; 0x40
 8007850:	4b9b      	ldr	r3, [pc, #620]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800785c:	4b98      	ldr	r3, [pc, #608]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	4a97      	ldr	r2, [pc, #604]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007862:	f043 0310 	orr.w	r3, r3, #16
 8007866:	6313      	str	r3, [r2, #48]	; 0x30
 8007868:	4b95      	ldr	r3, [pc, #596]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007874:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800787a:	2302      	movs	r3, #2
 800787c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787e:	2300      	movs	r3, #0
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007882:	2303      	movs	r3, #3
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007886:	2308      	movs	r3, #8
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800788a:	f107 031c 	add.w	r3, r7, #28
 800788e:	4619      	mov	r1, r3
 8007890:	488c      	ldr	r0, [pc, #560]	; (8007ac4 <HAL_UART_MspInit+0x2a4>)
 8007892:	f001 fe1d 	bl	80094d0 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 8007896:	4b8c      	ldr	r3, [pc, #560]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 8007898:	4a8c      	ldr	r2, [pc, #560]	; (8007acc <HAL_UART_MspInit+0x2ac>)
 800789a:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 800789c:	4b8a      	ldr	r3, [pc, #552]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 800789e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80078a2:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80078a4:	4b88      	ldr	r3, [pc, #544]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078a6:	2240      	movs	r2, #64	; 0x40
 80078a8:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078aa:	4b87      	ldr	r3, [pc, #540]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80078b0:	4b85      	ldr	r3, [pc, #532]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078b6:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078b8:	4b83      	ldr	r3, [pc, #524]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078be:	4b82      	ldr	r3, [pc, #520]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80078c4:	4b80      	ldr	r3, [pc, #512]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80078ca:	4b7f      	ldr	r3, [pc, #508]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80078d0:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80078d2:	4b7d      	ldr	r3, [pc, #500]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078d4:	2204      	movs	r2, #4
 80078d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80078d8:	4b7b      	ldr	r3, [pc, #492]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078da:	2203      	movs	r2, #3
 80078dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80078de:	4b7a      	ldr	r3, [pc, #488]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80078e4:	4b78      	ldr	r3, [pc, #480]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80078ea:	4877      	ldr	r0, [pc, #476]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078ec:	f000 fdec 	bl	80084c8 <HAL_DMA_Init>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 80078f6:	f7ff fa07 	bl	8006d08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a72      	ldr	r2, [pc, #456]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078fe:	669a      	str	r2, [r3, #104]	; 0x68
 8007900:	4a71      	ldr	r2, [pc, #452]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8007906:	4b72      	ldr	r3, [pc, #456]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007908:	4a72      	ldr	r2, [pc, #456]	; (8007ad4 <HAL_UART_MspInit+0x2b4>)
 800790a:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800790c:	4b70      	ldr	r3, [pc, #448]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800790e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007912:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007914:	4b6e      	ldr	r3, [pc, #440]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007916:	2200      	movs	r2, #0
 8007918:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800791a:	4b6d      	ldr	r3, [pc, #436]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800791c:	2200      	movs	r2, #0
 800791e:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007920:	4b6b      	ldr	r3, [pc, #428]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007926:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007928:	4b69      	ldr	r3, [pc, #420]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800792a:	2200      	movs	r2, #0
 800792c:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800792e:	4b68      	ldr	r3, [pc, #416]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007930:	2200      	movs	r2, #0
 8007932:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8007934:	4b66      	ldr	r3, [pc, #408]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800793a:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800793c:	4b64      	ldr	r3, [pc, #400]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800793e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007942:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007944:	4b62      	ldr	r3, [pc, #392]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007946:	2200      	movs	r2, #0
 8007948:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800794a:	4861      	ldr	r0, [pc, #388]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800794c:	f000 fdbc 	bl	80084c8 <HAL_DMA_Init>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8007956:	f7ff f9d7 	bl	8006d08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a5c      	ldr	r2, [pc, #368]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800795e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007960:	4a5b      	ldr	r2, [pc, #364]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8007966:	2200      	movs	r2, #0
 8007968:	2105      	movs	r1, #5
 800796a:	2052      	movs	r0, #82	; 0x52
 800796c:	f000 fd75 	bl	800845a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8007970:	2052      	movs	r0, #82	; 0x52
 8007972:	f000 fd8e 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007976:	e09d      	b.n	8007ab4 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART6)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a56      	ldr	r2, [pc, #344]	; (8007ad8 <HAL_UART_MspInit+0x2b8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	f040 8098 	bne.w	8007ab4 <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007984:	4b4e      	ldr	r3, [pc, #312]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007988:	4a4d      	ldr	r2, [pc, #308]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800798a:	f043 0320 	orr.w	r3, r3, #32
 800798e:	6453      	str	r3, [r2, #68]	; 0x44
 8007990:	4b4b      	ldr	r3, [pc, #300]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800799c:	4b48      	ldr	r3, [pc, #288]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	4a47      	ldr	r2, [pc, #284]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 80079a2:	f043 0304 	orr.w	r3, r3, #4
 80079a6:	6313      	str	r3, [r2, #48]	; 0x30
 80079a8:	4b45      	ldr	r3, [pc, #276]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80079b4:	23c0      	movs	r3, #192	; 0xc0
 80079b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079b8:	2302      	movs	r3, #2
 80079ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079bc:	2300      	movs	r3, #0
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079c0:	2303      	movs	r3, #3
 80079c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80079c4:	2308      	movs	r3, #8
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079c8:	f107 031c 	add.w	r3, r7, #28
 80079cc:	4619      	mov	r1, r3
 80079ce:	4843      	ldr	r0, [pc, #268]	; (8007adc <HAL_UART_MspInit+0x2bc>)
 80079d0:	f001 fd7e 	bl	80094d0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80079d4:	4b42      	ldr	r3, [pc, #264]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079d6:	4a43      	ldr	r2, [pc, #268]	; (8007ae4 <HAL_UART_MspInit+0x2c4>)
 80079d8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80079da:	4b41      	ldr	r3, [pc, #260]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079dc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80079e0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079e2:	4b3f      	ldr	r3, [pc, #252]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079e8:	4b3d      	ldr	r3, [pc, #244]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079ee:	4b3c      	ldr	r3, [pc, #240]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079f4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079f6:	4b3a      	ldr	r3, [pc, #232]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079fc:	4b38      	ldr	r3, [pc, #224]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007a02:	4b37      	ldr	r3, [pc, #220]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a08:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007a0a:	4b35      	ldr	r3, [pc, #212]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007a10:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007a12:	4b33      	ldr	r3, [pc, #204]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007a18:	4831      	ldr	r0, [pc, #196]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a1a:	f000 fd55 	bl	80084c8 <HAL_DMA_Init>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8007a24:	f7ff f970 	bl	8006d08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a2d      	ldr	r2, [pc, #180]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a2c:	66da      	str	r2, [r3, #108]	; 0x6c
 8007a2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007a34:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a36:	4a2d      	ldr	r2, [pc, #180]	; (8007aec <HAL_UART_MspInit+0x2cc>)
 8007a38:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8007a3a:	4b2b      	ldr	r3, [pc, #172]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a3c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007a40:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007a42:	4b29      	ldr	r3, [pc, #164]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a44:	2240      	movs	r2, #64	; 0x40
 8007a46:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a48:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007a4e:	4b26      	ldr	r3, [pc, #152]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a54:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007a5c:	4b22      	ldr	r3, [pc, #136]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8007a62:	4b21      	ldr	r3, [pc, #132]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007a68:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007a6e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007a70:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a72:	2204      	movs	r2, #4
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007a76:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a78:	2203      	movs	r2, #3
 8007a7a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007a82:	4b19      	ldr	r3, [pc, #100]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007a88:	4817      	ldr	r0, [pc, #92]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a8a:	f000 fd1d 	bl	80084c8 <HAL_DMA_Init>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <HAL_UART_MspInit+0x278>
      Error_Handler();
 8007a94:	f7ff f938 	bl	8006d08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a13      	ldr	r2, [pc, #76]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a9c:	669a      	str	r2, [r3, #104]	; 0x68
 8007a9e:	4a12      	ldr	r2, [pc, #72]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	2047      	movs	r0, #71	; 0x47
 8007aaa:	f000 fcd6 	bl	800845a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007aae:	2047      	movs	r0, #71	; 0x47
 8007ab0:	f000 fcef 	bl	8008492 <HAL_NVIC_EnableIRQ>
}
 8007ab4:	bf00      	nop
 8007ab6:	3730      	adds	r7, #48	; 0x30
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40007800 	.word	0x40007800
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	2000c81c 	.word	0x2000c81c
 8007acc:	40026028 	.word	0x40026028
 8007ad0:	20003084 	.word	0x20003084
 8007ad4:	40026058 	.word	0x40026058
 8007ad8:	40011400 	.word	0x40011400
 8007adc:	40020800 	.word	0x40020800
 8007ae0:	2000718c 	.word	0x2000718c
 8007ae4:	40026428 	.word	0x40026428
 8007ae8:	200123a8 	.word	0x200123a8
 8007aec:	400264a0 	.word	0x400264a0

08007af0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007af4:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <SDTimer_Handler+0x40>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d006      	beq.n	8007b0c <SDTimer_Handler+0x1c>
    Timer1--;
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <SDTimer_Handler+0x40>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <SDTimer_Handler+0x40>)
 8007b0a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8007b0c:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <SDTimer_Handler+0x44>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d006      	beq.n	8007b24 <SDTimer_Handler+0x34>
    Timer2--;
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <SDTimer_Handler+0x44>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <SDTimer_Handler+0x44>)
 8007b22:	701a      	strb	r2, [r3, #0]
}
 8007b24:	bf00      	nop
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20014510 	.word	0x20014510
 8007b34:	20014511 	.word	0x20014511

08007b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b3c:	bf00      	nop
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b46:	b480      	push	{r7}
 8007b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b4a:	e7fe      	b.n	8007b4a <HardFault_Handler+0x4>

08007b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b50:	e7fe      	b.n	8007b50 <MemManage_Handler+0x4>

08007b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b52:	b480      	push	{r7}
 8007b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b56:	e7fe      	b.n	8007b56 <BusFault_Handler+0x4>

08007b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b5c:	e7fe      	b.n	8007b5c <UsageFault_Handler+0x4>

08007b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007b62:	bf00      	nop
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b70:	bf00      	nop
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007b7e:	bf00      	nop
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <SysTick_Handler+0x30>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	3301      	adds	r3, #1
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <SysTick_Handler+0x30>)
 8007b98:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 8007b9a:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <SysTick_Handler+0x30>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	d904      	bls.n	8007bae <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8007ba4:	4b04      	ldr	r3, [pc, #16]	; (8007bb8 <SysTick_Handler+0x30>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8007baa:	f7ff ffa1 	bl	8007af0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007bae:	f000 fb37 	bl	8008220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007bb2:	bf00      	nop
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000374 	.word	0x20000374

08007bbc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	f001 fe7b 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007bc6:	bf00      	nop
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8007bce:	2002      	movs	r0, #2
 8007bd0:	f001 fe74 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007bd4:	bf00      	nop
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007bdc:	2004      	movs	r0, #4
 8007bde:	f001 fe6d 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007be2:	bf00      	nop
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007bea:	2008      	movs	r0, #8
 8007bec:	f001 fe66 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007bf0:	bf00      	nop
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007bf8:	2010      	movs	r0, #16
 8007bfa:	f001 fe5f 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007bfe:	bf00      	nop
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8007c08:	4802      	ldr	r0, [pc, #8]	; (8007c14 <DMA1_Stream1_IRQHandler+0x10>)
 8007c0a:	f000 fd8d 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007c0e:	bf00      	nop
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	2000c81c 	.word	0x2000c81c

08007c18 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8007c1c:	4802      	ldr	r0, [pc, #8]	; (8007c28 <DMA1_Stream3_IRQHandler+0x10>)
 8007c1e:	f000 fd83 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8007c22:	bf00      	nop
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20003084 	.word	0x20003084

08007c2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007c30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c34:	f001 fe42 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8007c38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c3c:	f001 fe3e 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007c40:	bf00      	nop
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007c48:	4802      	ldr	r0, [pc, #8]	; (8007c54 <SPI1_IRQHandler+0x10>)
 8007c4a:	f008 fa09 	bl	8010060 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007c4e:	bf00      	nop
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20005378 	.word	0x20005378

08007c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007c5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007c60:	f001 fe2c 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007c64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c68:	f001 fe28 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007c6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007c70:	f001 fe24 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007c74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c78:	f001 fe20 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007c7c:	bf00      	nop
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8007c84:	4802      	ldr	r0, [pc, #8]	; (8007c90 <SDMMC1_IRQHandler+0x10>)
 8007c86:	f006 fbbf 	bl	800e408 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8007c8a:	bf00      	nop
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20002b7c 	.word	0x20002b7c

08007c94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007c98:	4802      	ldr	r0, [pc, #8]	; (8007ca4 <DMA2_Stream0_IRQHandler+0x10>)
 8007c9a:	f000 fd45 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20011aa4 	.word	0x20011aa4

08007ca8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007cac:	4802      	ldr	r0, [pc, #8]	; (8007cb8 <DMA2_Stream1_IRQHandler+0x10>)
 8007cae:	f000 fd3b 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007cb2:	bf00      	nop
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	2000718c 	.word	0x2000718c

08007cbc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8007cc0:	4802      	ldr	r0, [pc, #8]	; (8007ccc <DMA2_Stream3_IRQHandler+0x10>)
 8007cc2:	f000 fd31 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007cc6:	bf00      	nop
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20003020 	.word	0x20003020

08007cd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007cd4:	4802      	ldr	r0, [pc, #8]	; (8007ce0 <OTG_FS_IRQHandler+0x10>)
 8007cd6:	f002 f899 	bl	8009e0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007cda:	bf00      	nop
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20019634 	.word	0x20019634

08007ce4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007ce8:	4802      	ldr	r0, [pc, #8]	; (8007cf4 <DMA2_Stream5_IRQHandler+0x10>)
 8007cea:	f000 fd1d 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8007cee:	bf00      	nop
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	200070c8 	.word	0x200070c8

08007cf8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8007cfc:	4802      	ldr	r0, [pc, #8]	; (8007d08 <DMA2_Stream6_IRQHandler+0x10>)
 8007cfe:	f000 fd13 	bl	8008728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007d02:	bf00      	nop
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200123a8 	.word	0x200123a8

08007d0c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007d10:	4809      	ldr	r0, [pc, #36]	; (8007d38 <USART6_IRQHandler+0x2c>)
 8007d12:	f009 fb31 	bl	8011378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE))
 8007d16:	4b08      	ldr	r3, [pc, #32]	; (8007d38 <USART6_IRQHandler+0x2c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d106      	bne.n	8007d32 <USART6_IRQHandler+0x26>

  {

	  HAL_UART_RxCpltCallback (&huart6);
 8007d24:	4804      	ldr	r0, [pc, #16]	; (8007d38 <USART6_IRQHandler+0x2c>)
 8007d26:	f000 f9c5 	bl	80080b4 <HAL_UART_RxCpltCallback>

	  __HAL_UART_CLEAR_IDLEFLAG (&huart6);
 8007d2a:	4b03      	ldr	r3, [pc, #12]	; (8007d38 <USART6_IRQHandler+0x2c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2210      	movs	r2, #16
 8007d30:	621a      	str	r2, [r3, #32]

  }
  /* USER CODE END USART6_IRQn 1 */
}
 8007d32:	bf00      	nop
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	200119ac 	.word	0x200119ac

08007d3c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8007d40:	4809      	ldr	r0, [pc, #36]	; (8007d68 <UART7_IRQHandler+0x2c>)
 8007d42:	f009 fb19 	bl	8011378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart7, UART_FLAG_IDLE))
 8007d46:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <UART7_IRQHandler+0x2c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d106      	bne.n	8007d62 <UART7_IRQHandler+0x26>

  {

	  HAL_UART_RxCpltCallback (&huart7);
 8007d54:	4804      	ldr	r0, [pc, #16]	; (8007d68 <UART7_IRQHandler+0x2c>)
 8007d56:	f000 f9ad 	bl	80080b4 <HAL_UART_RxCpltCallback>

	  __HAL_UART_CLEAR_IDLEFLAG (&huart7);
 8007d5a:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <UART7_IRQHandler+0x2c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2210      	movs	r2, #16
 8007d60:	621a      	str	r2, [r3, #32]

  }
  /* USER CODE END UART7_IRQn 1 */
}
 8007d62:	bf00      	nop
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20011928 	.word	0x20011928

08007d6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007d74:	4b11      	ldr	r3, [pc, #68]	; (8007dbc <_sbrk+0x50>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <_sbrk+0x16>
		heap_end = &end;
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <_sbrk+0x50>)
 8007d7e:	4a10      	ldr	r2, [pc, #64]	; (8007dc0 <_sbrk+0x54>)
 8007d80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007d82:	4b0e      	ldr	r3, [pc, #56]	; (8007dbc <_sbrk+0x50>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <_sbrk+0x50>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4413      	add	r3, r2
 8007d90:	466a      	mov	r2, sp
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d907      	bls.n	8007da6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007d96:	f016 f91f 	bl	801dfd8 <__errno>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	230c      	movs	r3, #12
 8007d9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007da0:	f04f 33ff 	mov.w	r3, #4294967295
 8007da4:	e006      	b.n	8007db4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007da6:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <_sbrk+0x50>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4413      	add	r3, r2
 8007dae:	4a03      	ldr	r2, [pc, #12]	; (8007dbc <_sbrk+0x50>)
 8007db0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007db2:	68fb      	ldr	r3, [r7, #12]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20000378 	.word	0x20000378
 8007dc0:	20019900 	.word	0x20019900

08007dc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007dc8:	4b08      	ldr	r3, [pc, #32]	; (8007dec <SystemInit+0x28>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dce:	4a07      	ldr	r2, [pc, #28]	; (8007dec <SystemInit+0x28>)
 8007dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <SystemInit+0x28>)
 8007dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007dde:	609a      	str	r2, [r3, #8]
#endif
}
 8007de0:	bf00      	nop
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	e000ed00 	.word	0xe000ed00

08007df0 <UARTTXInit>:
extern uint8_t isReadyForNext;

//extern uint8_t processBuf[250];


void UARTTXInit(void) {
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  ringbuff_init(&txRing,txBuf,UART_TX_RINGBUFF_SZ);
 8007df4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007df8:	4905      	ldr	r1, [pc, #20]	; (8007e10 <UARTTXInit+0x20>)
 8007dfa:	4806      	ldr	r0, [pc, #24]	; (8007e14 <UARTTXInit+0x24>)
 8007dfc:	f7fe ff8b 	bl	8006d16 <ringbuff_init>
  ringbuff_init(&txRing2,txBuf2,UART_TX_RINGBUFF_SZ_2);
 8007e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e04:	4904      	ldr	r1, [pc, #16]	; (8007e18 <UARTTXInit+0x28>)
 8007e06:	4805      	ldr	r0, [pc, #20]	; (8007e1c <UARTTXInit+0x2c>)
 8007e08:	f7fe ff85 	bl	8006d16 <ringbuff_init>
}
 8007e0c:	bf00      	nop
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	2000881c 	.word	0x2000881c
 8007e14:	20011b04 	.word	0x20011b04
 8007e18:	20006610 	.word	0x20006610
 8007e1c:	2000d918 	.word	0x2000d918

08007e20 <UARTAddToTxBuff>:

void UARTAddToTxBuff(const void *data,u16 len) {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	807b      	strh	r3, [r7, #2]
  ringbuff_write(&txRing,data,len);
 8007e2c:	887b      	ldrh	r3, [r7, #2]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	4804      	ldr	r0, [pc, #16]	; (8007e44 <UARTAddToTxBuff+0x24>)
 8007e34:	f7fe ff90 	bl	8006d58 <ringbuff_write>
  UARTTxData();
 8007e38:	f000 f81a 	bl	8007e70 <UARTTxData>
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20011b04 	.word	0x20011b04

08007e48 <UARTAddToTxBuff2>:

void UARTAddToTxBuff2(const void *data,u16 len) {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	807b      	strh	r3, [r7, #2]
  ringbuff_write(&txRing2,data,len);
 8007e54:	887b      	ldrh	r3, [r7, #2]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	4804      	ldr	r0, [pc, #16]	; (8007e6c <UARTAddToTxBuff2+0x24>)
 8007e5c:	f7fe ff7c 	bl	8006d58 <ringbuff_write>
  UARTTxData2();
 8007e60:	f000 f82e 	bl	8007ec0 <UARTTxData2>
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	2000d918 	.word	0x2000d918

08007e70 <UARTTxData>:


static void UARTTxData(void) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8007e76:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <UARTTxData+0x44>)
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d116      	bne.n	8007eac <UARTTxData+0x3c>
  txLen=ringbuff_get_linear_block_read_length(&txRing); //Get maximal length of buffer to read data as linear memory
 8007e7e:	480e      	ldr	r0, [pc, #56]	; (8007eb8 <UARTTxData+0x48>)
 8007e80:	f7ff f8ba 	bl	8006ff8 <ringbuff_get_linear_block_read_length>
 8007e84:	4603      	mov	r3, r0
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <UARTTxData+0x44>)
 8007e8a:	801a      	strh	r2, [r3, #0]
  if(txLen){
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <UARTTxData+0x44>)
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00c      	beq.n	8007eae <UARTTxData+0x3e>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing); // Get pointer to read memory
 8007e94:	4808      	ldr	r0, [pc, #32]	; (8007eb8 <UARTTxData+0x48>)
 8007e96:	f7ff f893 	bl	8006fc0 <ringbuff_get_linear_block_read_address>
 8007e9a:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart6,ringData,txLen); // Start DMA transfer
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <UARTTxData+0x44>)
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4805      	ldr	r0, [pc, #20]	; (8007ebc <UARTTxData+0x4c>)
 8007ea6:	f009 f967 	bl	8011178 <HAL_UART_Transmit_DMA>
 8007eaa:	e000      	b.n	8007eae <UARTTxData+0x3e>
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8007eac:	bf00      	nop
  }
}
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20005574 	.word	0x20005574
 8007eb8:	20011b04 	.word	0x20011b04
 8007ebc:	200119ac 	.word	0x200119ac

08007ec0 <UARTTxData2>:

static void UARTTxData2(void) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8007ec6:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <UARTTxData2+0x44>)
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d116      	bne.n	8007efc <UARTTxData2+0x3c>
  txLen2=ringbuff_get_linear_block_read_length(&txRing2); //Get maximal length of buffer to read data as linear memory
 8007ece:	480e      	ldr	r0, [pc, #56]	; (8007f08 <UARTTxData2+0x48>)
 8007ed0:	f7ff f892 	bl	8006ff8 <ringbuff_get_linear_block_read_length>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <UARTTxData2+0x44>)
 8007eda:	801a      	strh	r2, [r3, #0]
  if(txLen2){
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <UARTTxData2+0x44>)
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00c      	beq.n	8007efe <UARTTxData2+0x3e>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing2); // Get pointer to read memory
 8007ee4:	4808      	ldr	r0, [pc, #32]	; (8007f08 <UARTTxData2+0x48>)
 8007ee6:	f7ff f86b 	bl	8006fc0 <ringbuff_get_linear_block_read_address>
 8007eea:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 8007eec:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <UARTTxData2+0x44>)
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4805      	ldr	r0, [pc, #20]	; (8007f0c <UARTTxData2+0x4c>)
 8007ef6:	f009 f93f 	bl	8011178 <HAL_UART_Transmit_DMA>
 8007efa:	e000      	b.n	8007efe <UARTTxData2+0x3e>
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8007efc:	bf00      	nop
  }
}
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	2000d8d0 	.word	0x2000d8d0
 8007f08:	2000d918 	.word	0x2000d918
 8007f0c:	20011928 	.word	0x20011928

08007f10 <UARTTxComplete>:

void UARTTxComplete(void) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  if (txLen) {
 8007f14:	4b08      	ldr	r3, [pc, #32]	; (8007f38 <UARTTxComplete+0x28>)
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <UARTTxComplete+0x22>
   ringbuff_skip(&txRing,txLen); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 8007f1c:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <UARTTxComplete+0x28>)
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	4619      	mov	r1, r3
 8007f22:	4806      	ldr	r0, [pc, #24]	; (8007f3c <UARTTxComplete+0x2c>)
 8007f24:	f7ff f89b 	bl	800705e <ringbuff_skip>
   txLen=0; // Reset length = DMA is not active
 8007f28:	4b03      	ldr	r3, [pc, #12]	; (8007f38 <UARTTxComplete+0x28>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	801a      	strh	r2, [r3, #0]
   UARTTxData(); // Try to send more
 8007f2e:	f7ff ff9f 	bl	8007e70 <UARTTxData>
  }
}
 8007f32:	bf00      	nop
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20005574 	.word	0x20005574
 8007f3c:	20011b04 	.word	0x20011b04

08007f40 <UARTTxComplete2>:

void UARTTxComplete2(void) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  if (txLen2) {
 8007f44:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <UARTTxComplete2+0x28>)
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <UARTTxComplete2+0x22>
   ringbuff_skip(&txRing2,txLen2); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 8007f4c:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <UARTTxComplete2+0x28>)
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	4619      	mov	r1, r3
 8007f52:	4806      	ldr	r0, [pc, #24]	; (8007f6c <UARTTxComplete2+0x2c>)
 8007f54:	f7ff f883 	bl	800705e <ringbuff_skip>
   txLen2=0; // Reset length = DMA is not active
 8007f58:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <UARTTxComplete2+0x28>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	801a      	strh	r2, [r3, #0]
   UARTTxData2(); // Try to send more
 8007f5e:	f7ff ffaf 	bl	8007ec0 <UARTTxData2>
  }
}
 8007f62:	bf00      	nop
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	2000d8d0 	.word	0x2000d8d0
 8007f6c:	2000d918 	.word	0x2000d918

08007f70 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	//isReadyForNext = 1;

  if (huart->Instance == USART6) {
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a15      	ldr	r2, [pc, #84]	; (8007fd4 <HAL_UART_TxCpltCallback+0x64>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d10f      	bne.n	8007fa2 <HAL_UART_TxCpltCallback+0x32>
	  isReadyForNext = 1;
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <HAL_UART_TxCpltCallback+0x68>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	701a      	strb	r2, [r3, #0]

	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007f96:	601a      	str	r2, [r3, #0]
	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	675a      	str	r2, [r3, #116]	; 0x74
	  UARTTxComplete();
 8007f9e:	f7ff ffb7 	bl	8007f10 <UARTTxComplete>
  }

  if (huart->Instance == UART7) {
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a0d      	ldr	r2, [pc, #52]	; (8007fdc <HAL_UART_TxCpltCallback+0x6c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d10f      	bne.n	8007fcc <HAL_UART_TxCpltCallback+0x5c>
  	  isReadyForNext = 1;
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <HAL_UART_TxCpltCallback+0x68>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]

  	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007fc0:	601a      	str	r2, [r3, #0]
  	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	675a      	str	r2, [r3, #116]	; 0x74
  	  UARTTxComplete2();
 8007fc8:	f7ff ffba 	bl	8007f40 <UARTTxComplete2>
    }

}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40011400 	.word	0x40011400
 8007fd8:	20000002 	.word	0x20000002
 8007fdc:	40007800 	.word	0x40007800

08007fe0 <UARTRXInit>:

u8 rxBuf[UART_RX_RINGBUFF_SZ],rxLen;
ringbuff_t rxRing;
u16 rxLastPos,rxThisPos;

void UARTRXInit(void) {
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
  ringbuff_init(&rxRing,rxBuf,UART_RX_RINGBUFF_SZ);
 8007fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe8:	4910      	ldr	r1, [pc, #64]	; (800802c <UARTRXInit+0x4c>)
 8007fea:	4811      	ldr	r0, [pc, #68]	; (8008030 <UARTRXInit+0x50>)
 8007fec:	f7fe fe93 	bl	8006d16 <ringbuff_init>
  rxLastPos=0;
 8007ff0:	4b10      	ldr	r3, [pc, #64]	; (8008034 <UARTRXInit+0x54>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	801a      	strh	r2, [r3, #0]
  rxThisPos=0;
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <UARTRXInit+0x58>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	801a      	strh	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);   // enable idle line interrupt
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	; (800803c <UARTRXInit+0x5c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	4b0e      	ldr	r3, [pc, #56]	; (800803c <UARTRXInit+0x5c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0210 	orr.w	r2, r2, #16
 800800a:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Instance->CR &= ~DMA_SxCR_HTIE;  // disable uart half tx interrupt
 800800c:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <UARTRXInit+0x60>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <UARTRXInit+0x60>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0208 	bic.w	r2, r2, #8
 800801a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart6,rxBuf,UART_RX_RINGBUFF_SZ);
 800801c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008020:	4902      	ldr	r1, [pc, #8]	; (800802c <UARTRXInit+0x4c>)
 8008022:	4806      	ldr	r0, [pc, #24]	; (800803c <UARTRXInit+0x5c>)
 8008024:	f009 f924 	bl	8011270 <HAL_UART_Receive_DMA>
}
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20011b98 	.word	0x20011b98
 8008030:	20012398 	.word	0x20012398
 8008034:	20011a68 	.word	0x20011a68
 8008038:	20011a70 	.word	0x20011a70
 800803c:	200119ac 	.word	0x200119ac
 8008040:	2000718c 	.word	0x2000718c

08008044 <UARTRxComplete>:

void UARTRxComplete(void) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
  u8 addr;
  u16 len;
  rxThisPos=UART_DMA_WRITE_PTR; //get current write pointer
 800804a:	4b16      	ldr	r3, [pc, #88]	; (80080a4 <UARTRxComplete+0x60>)
 800804c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	b29b      	uxth	r3, r3
 8008054:	425b      	negs	r3, r3
 8008056:	b29b      	uxth	r3, r3
 8008058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800805c:	b29a      	uxth	r2, r3
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <UARTRxComplete+0x64>)
 8008060:	801a      	strh	r2, [r3, #0]
  len=(rxThisPos-rxLastPos+UART_RX_RINGBUFF_SZ)%UART_RX_RINGBUFF_SZ; //calculate how far the DMA write pointer has moved
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <UARTRxComplete+0x64>)
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	4b10      	ldr	r3, [pc, #64]	; (80080ac <UARTRxComplete+0x68>)
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008072:	425a      	negs	r2, r3
 8008074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008078:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800807c:	bf58      	it	pl
 800807e:	4253      	negpl	r3, r2
 8008080:	80fb      	strh	r3, [r7, #6]
  if(len<=UART_RX_MAX_MESSAGE_LEN) { //check message size
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008088:	d808      	bhi.n	800809c <UARTRxComplete+0x58>
   ringbuff_advance(&rxRing,len); //move the ring buffer write pointer
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	4619      	mov	r1, r3
 800808e:	4808      	ldr	r0, [pc, #32]	; (80080b0 <UARTRxComplete+0x6c>)
 8008090:	f7ff f81a 	bl	80070c8 <ringbuff_advance>
   rxLastPos=rxThisPos;
 8008094:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <UARTRxComplete+0x64>)
 8008096:	881a      	ldrh	r2, [r3, #0]
 8008098:	4b04      	ldr	r3, [pc, #16]	; (80080ac <UARTRxComplete+0x68>)
 800809a:	801a      	strh	r2, [r3, #0]
  }
  else {
    //while(1); //implement message to large exception
	  //HAL_Delay(10000);
  }
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	200119ac 	.word	0x200119ac
 80080a8:	20011a70 	.word	0x20011a70
 80080ac:	20011a68 	.word	0x20011a68
 80080b0:	20012398 	.word	0x20012398

080080b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	isWaitingForData = 0;
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <HAL_UART_RxCpltCallback+0x34>)
 80080be:	2200      	movs	r2, #0
 80080c0:	701a      	strb	r2, [r3, #0]

  if (huart->Instance == USART6) {
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a09      	ldr	r2, [pc, #36]	; (80080ec <HAL_UART_RxCpltCallback+0x38>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d108      	bne.n	80080de <HAL_UART_RxCpltCallback+0x2a>
    if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE)) {
 80080cc:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <HAL_UART_RxCpltCallback+0x3c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d101      	bne.n	80080de <HAL_UART_RxCpltCallback+0x2a>
      UARTRxComplete();
 80080da:	f7ff ffb3 	bl	8008044 <UARTRxComplete>
    }
  }
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000001 	.word	0x20000001
 80080ec:	40011400 	.word	0x40011400
 80080f0:	200119ac 	.word	0x200119ac

080080f4 <UART_RX_Read>:

uint8_t UART_RX_Read(uint8_t *dataBuffer, uint8_t size){
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]

	return ringbuff_read(&rxRing, dataBuffer, size);
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	461a      	mov	r2, r3
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	4804      	ldr	r0, [pc, #16]	; (8008118 <UART_RX_Read+0x24>)
 8008108:	f7fe fe8a 	bl	8006e20 <ringbuff_read>
 800810c:	4603      	mov	r3, r0
 800810e:	b2db      	uxtb	r3, r3

}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20012398 	.word	0x20012398

0800811c <UART_RX_AVAILABLE_BYTE>:

uint16_t UART_RX_AVAILABLE_BYTE(){
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0

	return ringbuff_get_full(&rxRing);
 8008120:	4803      	ldr	r0, [pc, #12]	; (8008130 <UART_RX_AVAILABLE_BYTE+0x14>)
 8008122:	f7fe ff18 	bl	8006f56 <ringbuff_get_full>
 8008126:	4603      	mov	r3, r0
 8008128:	b29b      	uxth	r3, r3

}
 800812a:	4618      	mov	r0, r3
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20012398 	.word	0x20012398

08008134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800816c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008138:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800813a:	e003      	b.n	8008144 <LoopCopyDataInit>

0800813c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800813c:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800813e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008140:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008142:	3104      	adds	r1, #4

08008144 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008144:	480b      	ldr	r0, [pc, #44]	; (8008174 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008148:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800814a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800814c:	d3f6      	bcc.n	800813c <CopyDataInit>
  ldr  r2, =_sbss
 800814e:	4a0b      	ldr	r2, [pc, #44]	; (800817c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008150:	e002      	b.n	8008158 <LoopFillZerobss>

08008152 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008152:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008154:	f842 3b04 	str.w	r3, [r2], #4

08008158 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800815a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800815c:	d3f9      	bcc.n	8008152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800815e:	f7ff fe31 	bl	8007dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008162:	f015 ff3f 	bl	801dfe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008166:	f7fd fc43 	bl	80059f0 <main>
  bx  lr    
 800816a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800816c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008170:	08023620 	.word	0x08023620
  ldr  r0, =_sdata
 8008174:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008178:	2000026c 	.word	0x2000026c
  ldr  r2, =_sbss
 800817c:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 8008180:	200198fc 	.word	0x200198fc

08008184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008184:	e7fe      	b.n	8008184 <ADC_IRQHandler>
	...

08008188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <HAL_Init+0x34>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0a      	ldr	r2, [pc, #40]	; (80081bc <HAL_Init+0x34>)
 8008192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008196:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008198:	4b08      	ldr	r3, [pc, #32]	; (80081bc <HAL_Init+0x34>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a07      	ldr	r2, [pc, #28]	; (80081bc <HAL_Init+0x34>)
 800819e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80081a4:	2003      	movs	r0, #3
 80081a6:	f000 f94d 	bl	8008444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80081aa:	2000      	movs	r0, #0
 80081ac:	f000 f808 	bl	80081c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80081b0:	f7fe ffc0 	bl	8007134 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40023c00 	.word	0x40023c00

080081c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80081c8:	4b12      	ldr	r3, [pc, #72]	; (8008214 <HAL_InitTick+0x54>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	4b12      	ldr	r3, [pc, #72]	; (8008218 <HAL_InitTick+0x58>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	4619      	mov	r1, r3
 80081d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081da:	fbb2 f3f3 	udiv	r3, r2, r3
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 f965 	bl	80084ae <HAL_SYSTICK_Config>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e00e      	b.n	800820c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b0f      	cmp	r3, #15
 80081f2:	d80a      	bhi.n	800820a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081f4:	2200      	movs	r2, #0
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	f000 f92d 	bl	800845a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008200:	4a06      	ldr	r2, [pc, #24]	; (800821c <HAL_InitTick+0x5c>)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	e000      	b.n	800820c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
}
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	2000005c 	.word	0x2000005c
 8008218:	20000064 	.word	0x20000064
 800821c:	20000060 	.word	0x20000060

08008220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008224:	4b06      	ldr	r3, [pc, #24]	; (8008240 <HAL_IncTick+0x20>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <HAL_IncTick+0x24>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4413      	add	r3, r2
 8008230:	4a04      	ldr	r2, [pc, #16]	; (8008244 <HAL_IncTick+0x24>)
 8008232:	6013      	str	r3, [r2, #0]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20000064 	.word	0x20000064
 8008244:	20014514 	.word	0x20014514

08008248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
  return uwTick;
 800824c:	4b03      	ldr	r3, [pc, #12]	; (800825c <HAL_GetTick+0x14>)
 800824e:	681b      	ldr	r3, [r3, #0]
}
 8008250:	4618      	mov	r0, r3
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20014514 	.word	0x20014514

08008260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008268:	f7ff ffee 	bl	8008248 <HAL_GetTick>
 800826c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008278:	d005      	beq.n	8008286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800827a:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <HAL_Delay+0x40>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4413      	add	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008286:	bf00      	nop
 8008288:	f7ff ffde 	bl	8008248 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	429a      	cmp	r2, r3
 8008296:	d8f7      	bhi.n	8008288 <HAL_Delay+0x28>
  {
  }
}
 8008298:	bf00      	nop
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000064 	.word	0x20000064

080082a4 <__NVIC_SetPriorityGrouping>:
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082b4:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <__NVIC_SetPriorityGrouping+0x40>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80082c0:	4013      	ands	r3, r2
 80082c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80082cc:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <__NVIC_SetPriorityGrouping+0x44>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082d2:	4a04      	ldr	r2, [pc, #16]	; (80082e4 <__NVIC_SetPriorityGrouping+0x40>)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	60d3      	str	r3, [r2, #12]
}
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	e000ed00 	.word	0xe000ed00
 80082e8:	05fa0000 	.word	0x05fa0000

080082ec <__NVIC_GetPriorityGrouping>:
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <__NVIC_GetPriorityGrouping+0x18>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	f003 0307 	and.w	r3, r3, #7
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	e000ed00 	.word	0xe000ed00

08008308 <__NVIC_EnableIRQ>:
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008316:	2b00      	cmp	r3, #0
 8008318:	db0b      	blt.n	8008332 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	f003 021f 	and.w	r2, r3, #31
 8008320:	4907      	ldr	r1, [pc, #28]	; (8008340 <__NVIC_EnableIRQ+0x38>)
 8008322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	2001      	movs	r0, #1
 800832a:	fa00 f202 	lsl.w	r2, r0, r2
 800832e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	e000e100 	.word	0xe000e100

08008344 <__NVIC_SetPriority>:
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008354:	2b00      	cmp	r3, #0
 8008356:	db0a      	blt.n	800836e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	b2da      	uxtb	r2, r3
 800835c:	490c      	ldr	r1, [pc, #48]	; (8008390 <__NVIC_SetPriority+0x4c>)
 800835e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008362:	0112      	lsls	r2, r2, #4
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	440b      	add	r3, r1
 8008368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800836c:	e00a      	b.n	8008384 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	b2da      	uxtb	r2, r3
 8008372:	4908      	ldr	r1, [pc, #32]	; (8008394 <__NVIC_SetPriority+0x50>)
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	f003 030f 	and.w	r3, r3, #15
 800837a:	3b04      	subs	r3, #4
 800837c:	0112      	lsls	r2, r2, #4
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	440b      	add	r3, r1
 8008382:	761a      	strb	r2, [r3, #24]
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	e000e100 	.word	0xe000e100
 8008394:	e000ed00 	.word	0xe000ed00

08008398 <NVIC_EncodePriority>:
{
 8008398:	b480      	push	{r7}
 800839a:	b089      	sub	sp, #36	; 0x24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f1c3 0307 	rsb	r3, r3, #7
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	bf28      	it	cs
 80083b6:	2304      	movcs	r3, #4
 80083b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	3304      	adds	r3, #4
 80083be:	2b06      	cmp	r3, #6
 80083c0:	d902      	bls.n	80083c8 <NVIC_EncodePriority+0x30>
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	3b03      	subs	r3, #3
 80083c6:	e000      	b.n	80083ca <NVIC_EncodePriority+0x32>
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	43da      	mvns	r2, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	401a      	ands	r2, r3
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083e0:	f04f 31ff 	mov.w	r1, #4294967295
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	fa01 f303 	lsl.w	r3, r1, r3
 80083ea:	43d9      	mvns	r1, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083f0:	4313      	orrs	r3, r2
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3724      	adds	r7, #36	; 0x24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
	...

08008400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3b01      	subs	r3, #1
 800840c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008410:	d301      	bcc.n	8008416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008412:	2301      	movs	r3, #1
 8008414:	e00f      	b.n	8008436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008416:	4a0a      	ldr	r2, [pc, #40]	; (8008440 <SysTick_Config+0x40>)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3b01      	subs	r3, #1
 800841c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800841e:	210f      	movs	r1, #15
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	f7ff ff8e 	bl	8008344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008428:	4b05      	ldr	r3, [pc, #20]	; (8008440 <SysTick_Config+0x40>)
 800842a:	2200      	movs	r2, #0
 800842c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800842e:	4b04      	ldr	r3, [pc, #16]	; (8008440 <SysTick_Config+0x40>)
 8008430:	2207      	movs	r2, #7
 8008432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	e000e010 	.word	0xe000e010

08008444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff ff29 	bl	80082a4 <__NVIC_SetPriorityGrouping>
}
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	4603      	mov	r3, r0
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008468:	2300      	movs	r3, #0
 800846a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800846c:	f7ff ff3e 	bl	80082ec <__NVIC_GetPriorityGrouping>
 8008470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	6978      	ldr	r0, [r7, #20]
 8008478:	f7ff ff8e 	bl	8008398 <NVIC_EncodePriority>
 800847c:	4602      	mov	r2, r0
 800847e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008482:	4611      	mov	r1, r2
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff ff5d 	bl	8008344 <__NVIC_SetPriority>
}
 800848a:	bf00      	nop
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	4603      	mov	r3, r0
 800849a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800849c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff ff31 	bl	8008308 <__NVIC_EnableIRQ>
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff ffa2 	bl	8008400 <SysTick_Config>
 80084bc:	4603      	mov	r3, r0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80084d4:	f7ff feb8 	bl	8008248 <HAL_GetTick>
 80084d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e099      	b.n	8008618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008504:	e00f      	b.n	8008526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008506:	f7ff fe9f 	bl	8008248 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b05      	cmp	r3, #5
 8008512:	d908      	bls.n	8008526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2203      	movs	r2, #3
 800851e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e078      	b.n	8008618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e8      	bne.n	8008506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	4b38      	ldr	r3, [pc, #224]	; (8008620 <HAL_DMA_Init+0x158>)
 8008540:	4013      	ands	r3, r2
 8008542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800855e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800856a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	4313      	orrs	r3, r2
 8008576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	2b04      	cmp	r3, #4
 800857e:	d107      	bne.n	8008590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	4313      	orrs	r3, r2
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d117      	bne.n	80085ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00e      	beq.n	80085ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fa99 	bl	8008b04 <DMA_CheckFifoParam>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d008      	beq.n	80085ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2240      	movs	r2, #64	; 0x40
 80085dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80085e6:	2301      	movs	r3, #1
 80085e8:	e016      	b.n	8008618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa50 	bl	8008a98 <DMA_CalcBaseAndBitshift>
 80085f8:	4603      	mov	r3, r0
 80085fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008600:	223f      	movs	r2, #63	; 0x3f
 8008602:	409a      	lsls	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	e010803f 	.word	0xe010803f

08008624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008642:	2b01      	cmp	r3, #1
 8008644:	d101      	bne.n	800864a <HAL_DMA_Start_IT+0x26>
 8008646:	2302      	movs	r3, #2
 8008648:	e048      	b.n	80086dc <HAL_DMA_Start_IT+0xb8>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d137      	bne.n	80086ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2202      	movs	r2, #2
 8008662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f9e2 	bl	8008a3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800867c:	223f      	movs	r2, #63	; 0x3f
 800867e:	409a      	lsls	r2, r3
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0216 	orr.w	r2, r2, #22
 8008692:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	695a      	ldr	r2, [r3, #20]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086a2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0208 	orr.w	r2, r2, #8
 80086ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0201 	orr.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e005      	b.n	80086da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80086d6:	2302      	movs	r3, #2
 80086d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80086da:	7dfb      	ldrb	r3, [r7, #23]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d004      	beq.n	8008702 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2280      	movs	r2, #128	; 0x80
 80086fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e00c      	b.n	800871c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2205      	movs	r2, #5
 8008706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 0201 	bic.w	r2, r2, #1
 8008718:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008734:	4b92      	ldr	r3, [pc, #584]	; (8008980 <HAL_DMA_IRQHandler+0x258>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a92      	ldr	r2, [pc, #584]	; (8008984 <HAL_DMA_IRQHandler+0x25c>)
 800873a:	fba2 2303 	umull	r2, r3, r2, r3
 800873e:	0a9b      	lsrs	r3, r3, #10
 8008740:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008746:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008752:	2208      	movs	r2, #8
 8008754:	409a      	lsls	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4013      	ands	r3, r2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d01a      	beq.n	8008794 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d013      	beq.n	8008794 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0204 	bic.w	r2, r2, #4
 800877a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008780:	2208      	movs	r2, #8
 8008782:	409a      	lsls	r2, r3
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878c:	f043 0201 	orr.w	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008798:	2201      	movs	r2, #1
 800879a:	409a      	lsls	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4013      	ands	r3, r2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d012      	beq.n	80087ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b6:	2201      	movs	r2, #1
 80087b8:	409a      	lsls	r2, r3
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	f043 0202 	orr.w	r2, r3, #2
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ce:	2204      	movs	r2, #4
 80087d0:	409a      	lsls	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4013      	ands	r3, r2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d012      	beq.n	8008800 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ec:	2204      	movs	r2, #4
 80087ee:	409a      	lsls	r2, r3
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f8:	f043 0204 	orr.w	r2, r3, #4
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008804:	2210      	movs	r2, #16
 8008806:	409a      	lsls	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4013      	ands	r3, r2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d043      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d03c      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008822:	2210      	movs	r2, #16
 8008824:	409a      	lsls	r2, r3
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d018      	beq.n	800886a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d108      	bne.n	8008858 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d024      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
 8008856:	e01f      	b.n	8008898 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01b      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	4798      	blx	r3
 8008868:	e016      	b.n	8008898 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008874:	2b00      	cmp	r3, #0
 8008876:	d107      	bne.n	8008888 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0208 	bic.w	r2, r2, #8
 8008886:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800889c:	2220      	movs	r2, #32
 800889e:	409a      	lsls	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 808e 	beq.w	80089c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0310 	and.w	r3, r3, #16
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 8086 	beq.w	80089c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088be:	2220      	movs	r2, #32
 80088c0:	409a      	lsls	r2, r3
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	d136      	bne.n	8008940 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0216 	bic.w	r2, r2, #22
 80088e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	695a      	ldr	r2, [r3, #20]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <HAL_DMA_IRQHandler+0x1da>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0208 	bic.w	r2, r2, #8
 8008910:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008916:	223f      	movs	r2, #63	; 0x3f
 8008918:	409a      	lsls	r2, r3
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008932:	2b00      	cmp	r3, #0
 8008934:	d07d      	beq.n	8008a32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
        }
        return;
 800893e:	e078      	b.n	8008a32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01c      	beq.n	8008988 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d108      	bne.n	800896e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	2b00      	cmp	r3, #0
 8008962:	d030      	beq.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4798      	blx	r3
 800896c:	e02b      	b.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d027      	beq.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3
 800897e:	e022      	b.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
 8008980:	2000005c 	.word	0x2000005c
 8008984:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10f      	bne.n	80089b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0210 	bic.w	r2, r2, #16
 80089a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d032      	beq.n	8008a34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d022      	beq.n	8008a20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2205      	movs	r2, #5
 80089de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0201 	bic.w	r2, r2, #1
 80089f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	3301      	adds	r3, #1
 80089f6:	60bb      	str	r3, [r7, #8]
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d307      	bcc.n	8008a0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f2      	bne.n	80089f2 <HAL_DMA_IRQHandler+0x2ca>
 8008a0c:	e000      	b.n	8008a10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008a0e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	4798      	blx	r3
 8008a30:	e000      	b.n	8008a34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008a32:	bf00      	nop
    }
  }
}
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop

08008a3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2b40      	cmp	r3, #64	; 0x40
 8008a68:	d108      	bne.n	8008a7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008a7a:	e007      	b.n	8008a8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	60da      	str	r2, [r3, #12]
}
 8008a8c:	bf00      	nop
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	3b10      	subs	r3, #16
 8008aa8:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <DMA_CalcBaseAndBitshift+0x60>)
 8008aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008aae:	091b      	lsrs	r3, r3, #4
 8008ab0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008ab2:	4a12      	ldr	r2, [pc, #72]	; (8008afc <DMA_CalcBaseAndBitshift+0x64>)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d908      	bls.n	8008ad8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <DMA_CalcBaseAndBitshift+0x68>)
 8008ace:	4013      	ands	r3, r2
 8008ad0:	1d1a      	adds	r2, r3, #4
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	659a      	str	r2, [r3, #88]	; 0x58
 8008ad6:	e006      	b.n	8008ae6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	461a      	mov	r2, r3
 8008ade:	4b08      	ldr	r3, [pc, #32]	; (8008b00 <DMA_CalcBaseAndBitshift+0x68>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	aaaaaaab 	.word	0xaaaaaaab
 8008afc:	08022898 	.word	0x08022898
 8008b00:	fffffc00 	.word	0xfffffc00

08008b04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d11f      	bne.n	8008b5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d855      	bhi.n	8008bd0 <DMA_CheckFifoParam+0xcc>
 8008b24:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <DMA_CheckFifoParam+0x28>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b3d 	.word	0x08008b3d
 8008b30:	08008b4f 	.word	0x08008b4f
 8008b34:	08008b3d 	.word	0x08008b3d
 8008b38:	08008bd1 	.word	0x08008bd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d045      	beq.n	8008bd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b4c:	e042      	b.n	8008bd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b56:	d13f      	bne.n	8008bd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b5c:	e03c      	b.n	8008bd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b66:	d121      	bne.n	8008bac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d836      	bhi.n	8008bdc <DMA_CheckFifoParam+0xd8>
 8008b6e:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <DMA_CheckFifoParam+0x70>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008b85 	.word	0x08008b85
 8008b78:	08008b8b 	.word	0x08008b8b
 8008b7c:	08008b85 	.word	0x08008b85
 8008b80:	08008b9d 	.word	0x08008b9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]
      break;
 8008b88:	e02f      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d024      	beq.n	8008be0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b9a:	e021      	b.n	8008be0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ba4:	d11e      	bne.n	8008be4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008baa:	e01b      	b.n	8008be4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d902      	bls.n	8008bb8 <DMA_CheckFifoParam+0xb4>
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d003      	beq.n	8008bbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008bb6:	e018      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbc:	e015      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00e      	beq.n	8008be8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8008bce:	e00b      	b.n	8008be8 <DMA_CheckFifoParam+0xe4>
      break;
 8008bd0:	bf00      	nop
 8008bd2:	e00a      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
      break;
 8008bd4:	bf00      	nop
 8008bd6:	e008      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
      break;
 8008bd8:	bf00      	nop
 8008bda:	e006      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
      break;
 8008bdc:	bf00      	nop
 8008bde:	e004      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
      break;
 8008be0:	bf00      	nop
 8008be2:	e002      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
      break;   
 8008be4:	bf00      	nop
 8008be6:	e000      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
      break;
 8008be8:	bf00      	nop
    }
  } 
  
  return status; 
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	61fb      	str	r3, [r7, #28]
 8008c04:	2300      	movs	r3, #0
 8008c06:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8008c08:	4ba9      	ldr	r3, [pc, #676]	; (8008eb0 <HAL_ETH_Init+0x2b8>)
 8008c0a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e183      	b.n	8008f26 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7fe faa2 	bl	800717c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c38:	4b9e      	ldr	r3, [pc, #632]	; (8008eb4 <HAL_ETH_Init+0x2bc>)
 8008c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3c:	4a9d      	ldr	r2, [pc, #628]	; (8008eb4 <HAL_ETH_Init+0x2bc>)
 8008c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c42:	6453      	str	r3, [r2, #68]	; 0x44
 8008c44:	4b9b      	ldr	r3, [pc, #620]	; (8008eb4 <HAL_ETH_Init+0x2bc>)
 8008c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4c:	60bb      	str	r3, [r7, #8]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8008c50:	4b99      	ldr	r3, [pc, #612]	; (8008eb8 <HAL_ETH_Init+0x2c0>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	4a98      	ldr	r2, [pc, #608]	; (8008eb8 <HAL_ETH_Init+0x2c0>)
 8008c56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c5a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8008c5c:	4b96      	ldr	r3, [pc, #600]	; (8008eb8 <HAL_ETH_Init+0x2c0>)
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	4994      	ldr	r1, [pc, #592]	; (8008eb8 <HAL_ETH_Init+0x2c0>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f042 0201 	orr.w	r2, r2, #1
 8008c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c80:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008c82:	f7ff fae1 	bl	8008248 <HAL_GetTick>
 8008c86:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008c88:	e011      	b.n	8008cae <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8008c8a:	f7ff fadd 	bl	8008248 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008c98:	d909      	bls.n	8008cae <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2203      	movs	r2, #3
 8008c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e13b      	b.n	8008f26 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e4      	bne.n	8008c8a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f023 031c 	bic.w	r3, r3, #28
 8008cce:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008cd0:	f003 ffd6 	bl	800cc80 <HAL_RCC_GetHCLKFreq>
 8008cd4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	4a78      	ldr	r2, [pc, #480]	; (8008ebc <HAL_ETH_Init+0x2c4>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d908      	bls.n	8008cf0 <HAL_ETH_Init+0xf8>
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	4a77      	ldr	r2, [pc, #476]	; (8008ec0 <HAL_ETH_Init+0x2c8>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d804      	bhi.n	8008cf0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	f043 0308 	orr.w	r3, r3, #8
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	e027      	b.n	8008d40 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	4a73      	ldr	r2, [pc, #460]	; (8008ec0 <HAL_ETH_Init+0x2c8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d908      	bls.n	8008d0a <HAL_ETH_Init+0x112>
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	4a72      	ldr	r2, [pc, #456]	; (8008ec4 <HAL_ETH_Init+0x2cc>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d804      	bhi.n	8008d0a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	f043 030c 	orr.w	r3, r3, #12
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	e01a      	b.n	8008d40 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	4a6d      	ldr	r2, [pc, #436]	; (8008ec4 <HAL_ETH_Init+0x2cc>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d903      	bls.n	8008d1a <HAL_ETH_Init+0x122>
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	4a6c      	ldr	r2, [pc, #432]	; (8008ec8 <HAL_ETH_Init+0x2d0>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d911      	bls.n	8008d3e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	4a6a      	ldr	r2, [pc, #424]	; (8008ec8 <HAL_ETH_Init+0x2d0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d908      	bls.n	8008d34 <HAL_ETH_Init+0x13c>
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	4a69      	ldr	r2, [pc, #420]	; (8008ecc <HAL_ETH_Init+0x2d4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d804      	bhi.n	8008d34 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	f043 0304 	orr.w	r3, r3, #4
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e005      	b.n	8008d40 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f043 0310 	orr.w	r3, r3, #16
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	e000      	b.n	8008d40 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8008d3e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69fa      	ldr	r2, [r7, #28]
 8008d46:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8008d48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f956 	bl	8009000 <HAL_ETH_WritePHYRegister>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00b      	beq.n	8008d72 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8008d5e:	6939      	ldr	r1, [r7, #16]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f9b3 	bl	80090cc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e0d9      	b.n	8008f26 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8008d72:	20ff      	movs	r0, #255	; 0xff
 8008d74:	f7ff fa74 	bl	8008260 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80a7 	beq.w	8008ed0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d82:	f7ff fa61 	bl	8008248 <HAL_GetTick>
 8008d86:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008d88:	f107 030c 	add.w	r3, r7, #12
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2101      	movs	r1, #1
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f8cd 	bl	8008f30 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008d96:	f7ff fa57 	bl	8008248 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d90f      	bls.n	8008dc8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008dac:	6939      	ldr	r1, [r7, #16]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f98c 	bl	80090cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e0ae      	b.n	8008f26 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0da      	beq.n	8008d88 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8008dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f911 	bl	8009000 <HAL_ETH_WritePHYRegister>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008de8:	6939      	ldr	r1, [r7, #16]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f96e 	bl	80090cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e094      	b.n	8008f26 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8008dfc:	f7ff fa24 	bl	8008248 <HAL_GetTick>
 8008e00:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008e02:	f107 030c 	add.w	r3, r7, #12
 8008e06:	461a      	mov	r2, r3
 8008e08:	2101      	movs	r1, #1
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f890 	bl	8008f30 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8008e10:	f7ff fa1a 	bl	8008248 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d90f      	bls.n	8008e42 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008e26:	6939      	ldr	r1, [r7, #16]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f94f 	bl	80090cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e071      	b.n	8008f26 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f003 0320 	and.w	r3, r3, #32
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0da      	beq.n	8008e02 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8008e4c:	f107 030c 	add.w	r3, r7, #12
 8008e50:	461a      	mov	r2, r3
 8008e52:	211f      	movs	r1, #31
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f86b 	bl	8008f30 <HAL_ETH_ReadPHYRegister>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00b      	beq.n	8008e78 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008e64:	6939      	ldr	r1, [r7, #16]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f930 	bl	80090cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008e74:	2301      	movs	r3, #1
 8008e76:	e056      	b.n	8008f26 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d004      	beq.n	8008e8c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e88:	60da      	str	r2, [r3, #12]
 8008e8a:	e002      	b.n	8008e92 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	609a      	str	r2, [r3, #8]
 8008ea2:	e037      	b.n	8008f14 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008eaa:	609a      	str	r2, [r3, #8]
 8008eac:	e032      	b.n	8008f14 <HAL_ETH_Init+0x31c>
 8008eae:	bf00      	nop
 8008eb0:	03938700 	.word	0x03938700
 8008eb4:	40023800 	.word	0x40023800
 8008eb8:	40013800 	.word	0x40013800
 8008ebc:	01312cff 	.word	0x01312cff
 8008ec0:	02160ebf 	.word	0x02160ebf
 8008ec4:	039386ff 	.word	0x039386ff
 8008ec8:	05f5e0ff 	.word	0x05f5e0ff
 8008ecc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	08db      	lsrs	r3, r3, #3
 8008ed6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	085b      	lsrs	r3, r3, #1
 8008ede:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f889 	bl	8009000 <HAL_ETH_WritePHYRegister>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00b      	beq.n	8008f0c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008ef8:	6939      	ldr	r1, [r7, #16]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f8e6 	bl	80090cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e00c      	b.n	8008f26 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8008f0c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008f10:	f7ff f9a6 	bl	8008260 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8008f14:	6939      	ldr	r1, [r7, #16]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f8d8 	bl	80090cc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3720      	adds	r7, #32
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop

08008f30 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b82      	cmp	r3, #130	; 0x82
 8008f50:	d101      	bne.n	8008f56 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8008f52:	2302      	movs	r3, #2
 8008f54:	e050      	b.n	8008ff8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2282      	movs	r2, #130	; 0x82
 8008f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f003 031c 	and.w	r3, r3, #28
 8008f6c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8a1b      	ldrh	r3, [r3, #16]
 8008f72:	02db      	lsls	r3, r3, #11
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008f7c:	897b      	ldrh	r3, [r7, #10]
 8008f7e:	019b      	lsls	r3, r3, #6
 8008f80:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f023 0302 	bic.w	r3, r3, #2
 8008f90:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f043 0301 	orr.w	r3, r3, #1
 8008f98:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008fa2:	f7ff f951 	bl	8008248 <HAL_GetTick>
 8008fa6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008fa8:	e015      	b.n	8008fd6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8008faa:	f7ff f94d 	bl	8008248 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb8:	d309      	bcc.n	8008fce <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e014      	b.n	8008ff8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e4      	bne.n	8008faa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	460b      	mov	r3, r1
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b42      	cmp	r3, #66	; 0x42
 8009020:	d101      	bne.n	8009026 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8009022:	2302      	movs	r3, #2
 8009024:	e04e      	b.n	80090c4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2242      	movs	r2, #66	; 0x42
 800902a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f003 031c 	and.w	r3, r3, #28
 800903c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8a1b      	ldrh	r3, [r3, #16]
 8009042:	02db      	lsls	r3, r3, #11
 8009044:	b29b      	uxth	r3, r3
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	4313      	orrs	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800904c:	897b      	ldrh	r3, [r7, #10]
 800904e:	019b      	lsls	r3, r3, #6
 8009050:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f043 0302 	orr.w	r3, r3, #2
 8009060:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f043 0301 	orr.w	r3, r3, #1
 8009068:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800907c:	f7ff f8e4 	bl	8008248 <HAL_GetTick>
 8009080:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009082:	e015      	b.n	80090b0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009084:	f7ff f8e0 	bl	8008248 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009092:	d309      	bcc.n	80090a8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e00d      	b.n	80090c4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e4      	bne.n	8009084 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b0b0      	sub	sp, #192	; 0xc0
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090e8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80090f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80090fa:	2300      	movs	r3, #0
 80090fc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80090fe:	2300      	movs	r3, #0
 8009100:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8009102:	2300      	movs	r3, #0
 8009104:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8009106:	2300      	movs	r3, #0
 8009108:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d103      	bne.n	800911a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8009112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009116:	663b      	str	r3, [r7, #96]	; 0x60
 8009118:	e001      	b.n	800911e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800911a:	2300      	movs	r3, #0
 800911c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800911e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009122:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8009124:	2300      	movs	r3, #0
 8009126:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009128:	2300      	movs	r3, #0
 800912a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800912c:	2300      	movs	r3, #0
 800912e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8009130:	2300      	movs	r3, #0
 8009132:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8009134:	2300      	movs	r3, #0
 8009136:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8009138:	2340      	movs	r3, #64	; 0x40
 800913a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800913c:	2300      	movs	r3, #0
 800913e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8009142:	2300      	movs	r3, #0
 8009144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8009148:	2300      	movs	r3, #0
 800914a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800914e:	2300      	movs	r3, #0
 8009150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8009154:	2300      	movs	r3, #0
 8009156:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800915a:	2300      	movs	r3, #0
 800915c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8009160:	2300      	movs	r3, #0
 8009162:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8009166:	2300      	movs	r3, #0
 8009168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800916c:	2380      	movs	r3, #128	; 0x80
 800916e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8009172:	2300      	movs	r3, #0
 8009174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8009178:	2300      	movs	r3, #0
 800917a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800917e:	2300      	movs	r3, #0
 8009180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8009184:	2300      	movs	r3, #0
 8009186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800918a:	2300      	movs	r3, #0
 800918c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8009190:	2300      	movs	r3, #0
 8009192:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80091a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091a4:	4bab      	ldr	r3, [pc, #684]	; (8009454 <ETH_MACDMAConfig+0x388>)
 80091a6:	4013      	ands	r3, r2
 80091a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80091ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80091ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80091b0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80091b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80091b4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80091b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80091b8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80091be:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80091c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80091c2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80091c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80091c6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80091cc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80091ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80091d0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80091d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80091d4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80091d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80091d8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80091da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80091dc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80091de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80091e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80091e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009200:	2001      	movs	r0, #1
 8009202:	f7ff f82d 	bl	8008260 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800920e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009210:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8009212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009214:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8009216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8009218:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800921a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800921e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8009220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8009224:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8009226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800922a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800922c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8009230:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8009234:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800923c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800923e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800924a:	2001      	movs	r0, #1
 800924c:	f7ff f808 	bl	8008260 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009258:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009262:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800926c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009278:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800927c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8009280:	4013      	ands	r3, r2
 8009282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800928a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800928c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009290:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8009292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8009296:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8009298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800929c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800929e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80092a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80092a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80092a8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80092aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092ae:	4313      	orrs	r3, r2
 80092b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092bc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80092c8:	2001      	movs	r0, #1
 80092ca:	f7fe ffc9 	bl	8008260 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092d6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80092d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80092dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80092f2:	2001      	movs	r0, #1
 80092f4:	f7fe ffb4 	bl	8008260 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009300:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8009302:	2300      	movs	r3, #0
 8009304:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8009306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800930a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800930c:	2300      	movs	r3, #0
 800930e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8009310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009314:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8009316:	2300      	movs	r3, #0
 8009318:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800931a:	2300      	movs	r3, #0
 800931c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800931e:	2300      	movs	r3, #0
 8009320:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8009322:	2300      	movs	r3, #0
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8009326:	2304      	movs	r3, #4
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800932a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8009330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009334:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800933a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800933c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009340:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8009342:	2380      	movs	r3, #128	; 0x80
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8009346:	2300      	movs	r3, #0
 8009348:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800934a:	2300      	movs	r3, #0
 800934c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	f241 0318 	movw	r3, #4120	; 0x1018
 8009356:	4413      	add	r3, r2
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800935e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009362:	4b3d      	ldr	r3, [pc, #244]	; (8009458 <ETH_MACDMAConfig+0x38c>)
 8009364:	4013      	ands	r3, r2
 8009366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800936a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800936c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800936e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8009370:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8009372:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8009374:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8009376:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8009378:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800937a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800937c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800937e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8009380:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8009382:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8009386:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800938a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800938c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009390:	4313      	orrs	r3, r2
 8009392:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	f241 0318 	movw	r3, #4120	; 0x1018
 800939e:	4413      	add	r3, r2
 80093a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80093a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80093ae:	4413      	add	r3, r2
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80093b6:	2001      	movs	r0, #1
 80093b8:	f7fe ff52 	bl	8008260 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80093c4:	4413      	add	r3, r2
 80093c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80093ca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80093cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80093d0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80093d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80093d4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80093d8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80093da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80093dc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80093de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80093e2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80093e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80093e6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80093f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009404:	2001      	movs	r0, #1
 8009406:	f7fe ff2b 	bl	8008260 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009416:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d10d      	bne.n	800943c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	f241 031c 	movw	r3, #4124	; 0x101c
 8009428:	4413      	add	r3, r2
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6811      	ldr	r1, [r2, #0]
 8009430:	4a0a      	ldr	r2, [pc, #40]	; (800945c <ETH_MACDMAConfig+0x390>)
 8009432:	431a      	orrs	r2, r3
 8009434:	f241 031c 	movw	r3, #4124	; 0x101c
 8009438:	440b      	add	r3, r1
 800943a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	461a      	mov	r2, r3
 8009442:	2100      	movs	r1, #0
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f80b 	bl	8009460 <ETH_MACAddressConfig>
}
 800944a:	bf00      	nop
 800944c:	37c0      	adds	r7, #192	; 0xc0
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	ff20810f 	.word	0xff20810f
 8009458:	f8de3f23 	.word	0xf8de3f23
 800945c:	00010040 	.word	0x00010040

08009460 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3305      	adds	r3, #5
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	3204      	adds	r2, #4
 8009478:	7812      	ldrb	r2, [r2, #0]
 800947a:	4313      	orrs	r3, r2
 800947c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <ETH_MACAddressConfig+0x68>)
 8009482:	4413      	add	r3, r2
 8009484:	461a      	mov	r2, r3
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3303      	adds	r3, #3
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	061a      	lsls	r2, r3, #24
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3302      	adds	r3, #2
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	041b      	lsls	r3, r3, #16
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3301      	adds	r3, #1
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	021b      	lsls	r3, r3, #8
 80094a4:	4313      	orrs	r3, r2
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	7812      	ldrb	r2, [r2, #0]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	4b06      	ldr	r3, [pc, #24]	; (80094cc <ETH_MACAddressConfig+0x6c>)
 80094b2:	4413      	add	r3, r2
 80094b4:	461a      	mov	r2, r3
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	6013      	str	r3, [r2, #0]
}
 80094ba:	bf00      	nop
 80094bc:	371c      	adds	r7, #28
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	40028040 	.word	0x40028040
 80094cc:	40028044 	.word	0x40028044

080094d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b089      	sub	sp, #36	; 0x24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80094da:	2300      	movs	r3, #0
 80094dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80094e2:	2300      	movs	r3, #0
 80094e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80094e6:	2300      	movs	r3, #0
 80094e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80094ea:	2300      	movs	r3, #0
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	e175      	b.n	80097dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80094f0:	2201      	movs	r2, #1
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	fa02 f303 	lsl.w	r3, r2, r3
 80094f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4013      	ands	r3, r2
 8009502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	429a      	cmp	r2, r3
 800950a:	f040 8164 	bne.w	80097d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d00b      	beq.n	800952e <HAL_GPIO_Init+0x5e>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	2b02      	cmp	r3, #2
 800951c:	d007      	beq.n	800952e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009522:	2b11      	cmp	r3, #17
 8009524:	d003      	beq.n	800952e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2b12      	cmp	r3, #18
 800952c:	d130      	bne.n	8009590 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	2203      	movs	r2, #3
 800953a:	fa02 f303 	lsl.w	r3, r2, r3
 800953e:	43db      	mvns	r3, r3
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	4013      	ands	r3, r2
 8009544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	fa02 f303 	lsl.w	r3, r2, r3
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	4313      	orrs	r3, r2
 8009556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009564:	2201      	movs	r2, #1
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	fa02 f303 	lsl.w	r3, r2, r3
 800956c:	43db      	mvns	r3, r3
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	4013      	ands	r3, r2
 8009572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	091b      	lsrs	r3, r3, #4
 800957a:	f003 0201 	and.w	r2, r3, #1
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	fa02 f303 	lsl.w	r3, r2, r3
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	4313      	orrs	r3, r2
 8009588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	2203      	movs	r2, #3
 800959c:	fa02 f303 	lsl.w	r3, r2, r3
 80095a0:	43db      	mvns	r3, r3
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	4013      	ands	r3, r2
 80095a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	fa02 f303 	lsl.w	r3, r2, r3
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d003      	beq.n	80095d0 <HAL_GPIO_Init+0x100>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	2b12      	cmp	r3, #18
 80095ce:	d123      	bne.n	8009618 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	08da      	lsrs	r2, r3, #3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3208      	adds	r2, #8
 80095d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	f003 0307 	and.w	r3, r3, #7
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	220f      	movs	r2, #15
 80095e8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ec:	43db      	mvns	r3, r3
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	4013      	ands	r3, r2
 80095f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	691a      	ldr	r2, [r3, #16]
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	f003 0307 	and.w	r3, r3, #7
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	fa02 f303 	lsl.w	r3, r2, r3
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	4313      	orrs	r3, r2
 8009608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	08da      	lsrs	r2, r3, #3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3208      	adds	r2, #8
 8009612:	69b9      	ldr	r1, [r7, #24]
 8009614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	2203      	movs	r2, #3
 8009624:	fa02 f303 	lsl.w	r3, r2, r3
 8009628:	43db      	mvns	r3, r3
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	4013      	ands	r3, r2
 800962e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	f003 0203 	and.w	r2, r3, #3
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	fa02 f303 	lsl.w	r3, r2, r3
 8009640:	69ba      	ldr	r2, [r7, #24]
 8009642:	4313      	orrs	r3, r2
 8009644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80be 	beq.w	80097d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800965a:	4b65      	ldr	r3, [pc, #404]	; (80097f0 <HAL_GPIO_Init+0x320>)
 800965c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965e:	4a64      	ldr	r2, [pc, #400]	; (80097f0 <HAL_GPIO_Init+0x320>)
 8009660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009664:	6453      	str	r3, [r2, #68]	; 0x44
 8009666:	4b62      	ldr	r3, [pc, #392]	; (80097f0 <HAL_GPIO_Init+0x320>)
 8009668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009672:	4a60      	ldr	r2, [pc, #384]	; (80097f4 <HAL_GPIO_Init+0x324>)
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	089b      	lsrs	r3, r3, #2
 8009678:	3302      	adds	r3, #2
 800967a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800967e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	220f      	movs	r2, #15
 800968a:	fa02 f303 	lsl.w	r3, r2, r3
 800968e:	43db      	mvns	r3, r3
 8009690:	69ba      	ldr	r2, [r7, #24]
 8009692:	4013      	ands	r3, r2
 8009694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a57      	ldr	r2, [pc, #348]	; (80097f8 <HAL_GPIO_Init+0x328>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d037      	beq.n	800970e <HAL_GPIO_Init+0x23e>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a56      	ldr	r2, [pc, #344]	; (80097fc <HAL_GPIO_Init+0x32c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d031      	beq.n	800970a <HAL_GPIO_Init+0x23a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a55      	ldr	r2, [pc, #340]	; (8009800 <HAL_GPIO_Init+0x330>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d02b      	beq.n	8009706 <HAL_GPIO_Init+0x236>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a54      	ldr	r2, [pc, #336]	; (8009804 <HAL_GPIO_Init+0x334>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d025      	beq.n	8009702 <HAL_GPIO_Init+0x232>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a53      	ldr	r2, [pc, #332]	; (8009808 <HAL_GPIO_Init+0x338>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d01f      	beq.n	80096fe <HAL_GPIO_Init+0x22e>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a52      	ldr	r2, [pc, #328]	; (800980c <HAL_GPIO_Init+0x33c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d019      	beq.n	80096fa <HAL_GPIO_Init+0x22a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a51      	ldr	r2, [pc, #324]	; (8009810 <HAL_GPIO_Init+0x340>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d013      	beq.n	80096f6 <HAL_GPIO_Init+0x226>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a50      	ldr	r2, [pc, #320]	; (8009814 <HAL_GPIO_Init+0x344>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d00d      	beq.n	80096f2 <HAL_GPIO_Init+0x222>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a4f      	ldr	r2, [pc, #316]	; (8009818 <HAL_GPIO_Init+0x348>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d007      	beq.n	80096ee <HAL_GPIO_Init+0x21e>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a4e      	ldr	r2, [pc, #312]	; (800981c <HAL_GPIO_Init+0x34c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d101      	bne.n	80096ea <HAL_GPIO_Init+0x21a>
 80096e6:	2309      	movs	r3, #9
 80096e8:	e012      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096ea:	230a      	movs	r3, #10
 80096ec:	e010      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096ee:	2308      	movs	r3, #8
 80096f0:	e00e      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096f2:	2307      	movs	r3, #7
 80096f4:	e00c      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096f6:	2306      	movs	r3, #6
 80096f8:	e00a      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096fa:	2305      	movs	r3, #5
 80096fc:	e008      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096fe:	2304      	movs	r3, #4
 8009700:	e006      	b.n	8009710 <HAL_GPIO_Init+0x240>
 8009702:	2303      	movs	r3, #3
 8009704:	e004      	b.n	8009710 <HAL_GPIO_Init+0x240>
 8009706:	2302      	movs	r3, #2
 8009708:	e002      	b.n	8009710 <HAL_GPIO_Init+0x240>
 800970a:	2301      	movs	r3, #1
 800970c:	e000      	b.n	8009710 <HAL_GPIO_Init+0x240>
 800970e:	2300      	movs	r3, #0
 8009710:	69fa      	ldr	r2, [r7, #28]
 8009712:	f002 0203 	and.w	r2, r2, #3
 8009716:	0092      	lsls	r2, r2, #2
 8009718:	4093      	lsls	r3, r2
 800971a:	69ba      	ldr	r2, [r7, #24]
 800971c:	4313      	orrs	r3, r2
 800971e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009720:	4934      	ldr	r1, [pc, #208]	; (80097f4 <HAL_GPIO_Init+0x324>)
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	089b      	lsrs	r3, r3, #2
 8009726:	3302      	adds	r3, #2
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800972e:	4b3c      	ldr	r3, [pc, #240]	; (8009820 <HAL_GPIO_Init+0x350>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	43db      	mvns	r3, r3
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	4013      	ands	r3, r2
 800973c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009752:	4a33      	ldr	r2, [pc, #204]	; (8009820 <HAL_GPIO_Init+0x350>)
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009758:	4b31      	ldr	r3, [pc, #196]	; (8009820 <HAL_GPIO_Init+0x350>)
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	43db      	mvns	r3, r3
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	4013      	ands	r3, r2
 8009766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009774:	69ba      	ldr	r2, [r7, #24]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800977c:	4a28      	ldr	r2, [pc, #160]	; (8009820 <HAL_GPIO_Init+0x350>)
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009782:	4b27      	ldr	r3, [pc, #156]	; (8009820 <HAL_GPIO_Init+0x350>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	43db      	mvns	r3, r3
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	4013      	ands	r3, r2
 8009790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80097a6:	4a1e      	ldr	r2, [pc, #120]	; (8009820 <HAL_GPIO_Init+0x350>)
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80097ac:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <HAL_GPIO_Init+0x350>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	43db      	mvns	r3, r3
 80097b6:	69ba      	ldr	r2, [r7, #24]
 80097b8:	4013      	ands	r3, r2
 80097ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80097d0:	4a13      	ldr	r2, [pc, #76]	; (8009820 <HAL_GPIO_Init+0x350>)
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	3301      	adds	r3, #1
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	2b0f      	cmp	r3, #15
 80097e0:	f67f ae86 	bls.w	80094f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80097e4:	bf00      	nop
 80097e6:	3724      	adds	r7, #36	; 0x24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	40023800 	.word	0x40023800
 80097f4:	40013800 	.word	0x40013800
 80097f8:	40020000 	.word	0x40020000
 80097fc:	40020400 	.word	0x40020400
 8009800:	40020800 	.word	0x40020800
 8009804:	40020c00 	.word	0x40020c00
 8009808:	40021000 	.word	0x40021000
 800980c:	40021400 	.word	0x40021400
 8009810:	40021800 	.word	0x40021800
 8009814:	40021c00 	.word	0x40021c00
 8009818:	40022000 	.word	0x40022000
 800981c:	40022400 	.word	0x40022400
 8009820:	40013c00 	.word	0x40013c00

08009824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691a      	ldr	r2, [r3, #16]
 8009834:	887b      	ldrh	r3, [r7, #2]
 8009836:	4013      	ands	r3, r2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
 8009840:	e001      	b.n	8009846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009846:	7bfb      	ldrb	r3, [r7, #15]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	807b      	strh	r3, [r7, #2]
 8009860:	4613      	mov	r3, r2
 8009862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009864:	787b      	ldrb	r3, [r7, #1]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800986a:	887a      	ldrh	r2, [r7, #2]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009870:	e003      	b.n	800987a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009872:	887b      	ldrh	r3, [r7, #2]
 8009874:	041a      	lsls	r2, r3, #16
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	619a      	str	r2, [r3, #24]
}
 800987a:	bf00      	nop
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695a      	ldr	r2, [r3, #20]
 8009896:	887b      	ldrh	r3, [r7, #2]
 8009898:	4013      	ands	r3, r2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d004      	beq.n	80098a8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800989e:	887b      	ldrh	r3, [r7, #2]
 80098a0:	041a      	lsls	r2, r3, #16
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80098a6:	e002      	b.n	80098ae <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80098a8:	887a      	ldrh	r2, [r7, #2]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	619a      	str	r2, [r3, #24]
}
 80098ae:	bf00      	nop
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
	...

080098bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80098c6:	4b08      	ldr	r3, [pc, #32]	; (80098e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098c8:	695a      	ldr	r2, [r3, #20]
 80098ca:	88fb      	ldrh	r3, [r7, #6]
 80098cc:	4013      	ands	r3, r2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d006      	beq.n	80098e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80098d2:	4a05      	ldr	r2, [pc, #20]	; (80098e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	4618      	mov	r0, r3
 80098dc:	f7f8 f808 	bl	80018f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	40013c00 	.word	0x40013c00

080098ec <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80098ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ee:	b08f      	sub	sp, #60	; 0x3c
 80098f0:	af0a      	add	r7, sp, #40	; 0x28
 80098f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e054      	b.n	80099a8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d106      	bne.n	800991e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f014 f887 	bl	801da2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2203      	movs	r2, #3
 8009922:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4618      	mov	r0, r3
 800993e:	f009 f97c 	bl	8012c3a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	687e      	ldr	r6, [r7, #4]
 800994a:	466d      	mov	r5, sp
 800994c:	f106 0410 	add.w	r4, r6, #16
 8009950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009958:	e894 0003 	ldmia.w	r4, {r0, r1}
 800995c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009960:	1d33      	adds	r3, r6, #4
 8009962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009964:	6838      	ldr	r0, [r7, #0]
 8009966:	f009 f8ff 	bl	8012b68 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2101      	movs	r1, #1
 8009970:	4618      	mov	r0, r3
 8009972:	f009 f973 	bl	8012c5c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	687e      	ldr	r6, [r7, #4]
 800997e:	466d      	mov	r5, sp
 8009980:	f106 0410 	add.w	r4, r6, #16
 8009984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800998a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800998c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009990:	e885 0003 	stmia.w	r5, {r0, r1}
 8009994:	1d33      	adds	r3, r6, #4
 8009996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009998:	6838      	ldr	r0, [r7, #0]
 800999a:	f009 fa85 	bl	8012ea8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099b0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80099b0:	b590      	push	{r4, r7, lr}
 80099b2:	b089      	sub	sp, #36	; 0x24
 80099b4:	af04      	add	r7, sp, #16
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	4608      	mov	r0, r1
 80099ba:	4611      	mov	r1, r2
 80099bc:	461a      	mov	r2, r3
 80099be:	4603      	mov	r3, r0
 80099c0:	70fb      	strb	r3, [r7, #3]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70bb      	strb	r3, [r7, #2]
 80099c6:	4613      	mov	r3, r2
 80099c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d101      	bne.n	80099d8 <HAL_HCD_HC_Init+0x28>
 80099d4:	2302      	movs	r3, #2
 80099d6:	e07f      	b.n	8009ad8 <HAL_HCD_HC_Init+0x128>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80099e0:	78fa      	ldrb	r2, [r7, #3]
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	440b      	add	r3, r1
 80099ee:	333d      	adds	r3, #61	; 0x3d
 80099f0:	2200      	movs	r2, #0
 80099f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	440b      	add	r3, r1
 8009a02:	3338      	adds	r3, #56	; 0x38
 8009a04:	787a      	ldrb	r2, [r7, #1]
 8009a06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009a08:	78fa      	ldrb	r2, [r7, #3]
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	440b      	add	r3, r1
 8009a16:	3340      	adds	r3, #64	; 0x40
 8009a18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009a1a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	440b      	add	r3, r1
 8009a2a:	3339      	adds	r3, #57	; 0x39
 8009a2c:	78fa      	ldrb	r2, [r7, #3]
 8009a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009a30:	78fa      	ldrb	r2, [r7, #3]
 8009a32:	6879      	ldr	r1, [r7, #4]
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	440b      	add	r3, r1
 8009a3e:	333f      	adds	r3, #63	; 0x3f
 8009a40:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009a44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	78bb      	ldrb	r3, [r7, #2]
 8009a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a4e:	b2d8      	uxtb	r0, r3
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	440b      	add	r3, r1
 8009a5c:	333a      	adds	r3, #58	; 0x3a
 8009a5e:	4602      	mov	r2, r0
 8009a60:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009a62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	da0a      	bge.n	8009a80 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009a6a:	78fa      	ldrb	r2, [r7, #3]
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	440b      	add	r3, r1
 8009a78:	333b      	adds	r3, #59	; 0x3b
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	e009      	b.n	8009a94 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009a80:	78fa      	ldrb	r2, [r7, #3]
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	440b      	add	r3, r1
 8009a8e:	333b      	adds	r3, #59	; 0x3b
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009a94:	78fa      	ldrb	r2, [r7, #3]
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	440b      	add	r3, r1
 8009aa2:	333c      	adds	r3, #60	; 0x3c
 8009aa4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009aa8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	787c      	ldrb	r4, [r7, #1]
 8009ab0:	78ba      	ldrb	r2, [r7, #2]
 8009ab2:	78f9      	ldrb	r1, [r7, #3]
 8009ab4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ab6:	9302      	str	r3, [sp, #8]
 8009ab8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	f009 fb65 	bl	8013194 <USB_HC_Init>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd90      	pop	{r4, r7, pc}

08009ae0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d101      	bne.n	8009afe <HAL_HCD_HC_Halt+0x1e>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e00f      	b.n	8009b1e <HAL_HCD_HC_Halt+0x3e>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	78fa      	ldrb	r2, [r7, #3]
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f009 fd9f 	bl	8013652 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	4608      	mov	r0, r1
 8009b32:	4611      	mov	r1, r2
 8009b34:	461a      	mov	r2, r3
 8009b36:	4603      	mov	r3, r0
 8009b38:	70fb      	strb	r3, [r7, #3]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70bb      	strb	r3, [r7, #2]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8009b42:	78fa      	ldrb	r2, [r7, #3]
 8009b44:	6879      	ldr	r1, [r7, #4]
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	440b      	add	r3, r1
 8009b50:	333b      	adds	r3, #59	; 0x3b
 8009b52:	78ba      	ldrb	r2, [r7, #2]
 8009b54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009b56:	78fa      	ldrb	r2, [r7, #3]
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	00db      	lsls	r3, r3, #3
 8009b62:	440b      	add	r3, r1
 8009b64:	333f      	adds	r3, #63	; 0x3f
 8009b66:	787a      	ldrb	r2, [r7, #1]
 8009b68:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8009b6a:	7c3b      	ldrb	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d114      	bne.n	8009b9a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009b70:	78fa      	ldrb	r2, [r7, #3]
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	440b      	add	r3, r1
 8009b7e:	3342      	adds	r3, #66	; 0x42
 8009b80:	2203      	movs	r2, #3
 8009b82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009b84:	78fa      	ldrb	r2, [r7, #3]
 8009b86:	6879      	ldr	r1, [r7, #4]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	440b      	add	r3, r1
 8009b92:	333d      	adds	r3, #61	; 0x3d
 8009b94:	7f3a      	ldrb	r2, [r7, #28]
 8009b96:	701a      	strb	r2, [r3, #0]
 8009b98:	e009      	b.n	8009bae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009b9a:	78fa      	ldrb	r2, [r7, #3]
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	440b      	add	r3, r1
 8009ba8:	3342      	adds	r3, #66	; 0x42
 8009baa:	2202      	movs	r2, #2
 8009bac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009bae:	787b      	ldrb	r3, [r7, #1]
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	f200 80d6 	bhi.w	8009d62 <HAL_HCD_HC_SubmitRequest+0x23a>
 8009bb6:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <HAL_HCD_HC_SubmitRequest+0x94>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009bcd 	.word	0x08009bcd
 8009bc0:	08009d4d 	.word	0x08009d4d
 8009bc4:	08009c39 	.word	0x08009c39
 8009bc8:	08009cc3 	.word	0x08009cc3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009bcc:	7c3b      	ldrb	r3, [r7, #16]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	f040 80c9 	bne.w	8009d66 <HAL_HCD_HC_SubmitRequest+0x23e>
 8009bd4:	78bb      	ldrb	r3, [r7, #2]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 80c5 	bne.w	8009d66 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8009bdc:	8b3b      	ldrh	r3, [r7, #24]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	00db      	lsls	r3, r3, #3
 8009bee:	440b      	add	r3, r1
 8009bf0:	3351      	adds	r3, #81	; 0x51
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009bf6:	78fa      	ldrb	r2, [r7, #3]
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	440b      	add	r3, r1
 8009c04:	3351      	adds	r3, #81	; 0x51
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10a      	bne.n	8009c22 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009c0c:	78fa      	ldrb	r2, [r7, #3]
 8009c0e:	6879      	ldr	r1, [r7, #4]
 8009c10:	4613      	mov	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	440b      	add	r3, r1
 8009c1a:	3342      	adds	r3, #66	; 0x42
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009c20:	e0a1      	b.n	8009d66 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009c22:	78fa      	ldrb	r2, [r7, #3]
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	440b      	add	r3, r1
 8009c30:	3342      	adds	r3, #66	; 0x42
 8009c32:	2202      	movs	r2, #2
 8009c34:	701a      	strb	r2, [r3, #0]
      break;
 8009c36:	e096      	b.n	8009d66 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009c38:	78bb      	ldrb	r3, [r7, #2]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d120      	bne.n	8009c80 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009c3e:	78fa      	ldrb	r2, [r7, #3]
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	4613      	mov	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	440b      	add	r3, r1
 8009c4c:	3351      	adds	r3, #81	; 0x51
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	440b      	add	r3, r1
 8009c62:	3342      	adds	r3, #66	; 0x42
 8009c64:	2200      	movs	r2, #0
 8009c66:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009c68:	e07e      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009c6a:	78fa      	ldrb	r2, [r7, #3]
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	440b      	add	r3, r1
 8009c78:	3342      	adds	r3, #66	; 0x42
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	701a      	strb	r2, [r3, #0]
      break;
 8009c7e:	e073      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009c80:	78fa      	ldrb	r2, [r7, #3]
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	4613      	mov	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	440b      	add	r3, r1
 8009c8e:	3350      	adds	r3, #80	; 0x50
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10a      	bne.n	8009cac <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	440b      	add	r3, r1
 8009ca4:	3342      	adds	r3, #66	; 0x42
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	701a      	strb	r2, [r3, #0]
      break;
 8009caa:	e05d      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009cac:	78fa      	ldrb	r2, [r7, #3]
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	440b      	add	r3, r1
 8009cba:	3342      	adds	r3, #66	; 0x42
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	701a      	strb	r2, [r3, #0]
      break;
 8009cc0:	e052      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009cc2:	78bb      	ldrb	r3, [r7, #2]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d120      	bne.n	8009d0a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	440b      	add	r3, r1
 8009cd6:	3351      	adds	r3, #81	; 0x51
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10a      	bne.n	8009cf4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009cde:	78fa      	ldrb	r2, [r7, #3]
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	00db      	lsls	r3, r3, #3
 8009cea:	440b      	add	r3, r1
 8009cec:	3342      	adds	r3, #66	; 0x42
 8009cee:	2200      	movs	r2, #0
 8009cf0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009cf2:	e039      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009cf4:	78fa      	ldrb	r2, [r7, #3]
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	440b      	add	r3, r1
 8009d02:	3342      	adds	r3, #66	; 0x42
 8009d04:	2202      	movs	r2, #2
 8009d06:	701a      	strb	r2, [r3, #0]
      break;
 8009d08:	e02e      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	440b      	add	r3, r1
 8009d18:	3350      	adds	r3, #80	; 0x50
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009d20:	78fa      	ldrb	r2, [r7, #3]
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	440b      	add	r3, r1
 8009d2e:	3342      	adds	r3, #66	; 0x42
 8009d30:	2200      	movs	r2, #0
 8009d32:	701a      	strb	r2, [r3, #0]
      break;
 8009d34:	e018      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009d36:	78fa      	ldrb	r2, [r7, #3]
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	440b      	add	r3, r1
 8009d44:	3342      	adds	r3, #66	; 0x42
 8009d46:	2202      	movs	r2, #2
 8009d48:	701a      	strb	r2, [r3, #0]
      break;
 8009d4a:	e00d      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009d4c:	78fa      	ldrb	r2, [r7, #3]
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	00db      	lsls	r3, r3, #3
 8009d58:	440b      	add	r3, r1
 8009d5a:	3342      	adds	r3, #66	; 0x42
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	701a      	strb	r2, [r3, #0]
      break;
 8009d60:	e002      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8009d62:	bf00      	nop
 8009d64:	e000      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8009d66:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009d68:	78fa      	ldrb	r2, [r7, #3]
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	00db      	lsls	r3, r3, #3
 8009d74:	440b      	add	r3, r1
 8009d76:	3344      	adds	r3, #68	; 0x44
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009d7c:	78fa      	ldrb	r2, [r7, #3]
 8009d7e:	8b39      	ldrh	r1, [r7, #24]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	00db      	lsls	r3, r3, #3
 8009d8a:	4403      	add	r3, r0
 8009d8c:	3348      	adds	r3, #72	; 0x48
 8009d8e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009d90:	78fa      	ldrb	r2, [r7, #3]
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	4613      	mov	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	440b      	add	r3, r1
 8009d9e:	335c      	adds	r3, #92	; 0x5c
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009da4:	78fa      	ldrb	r2, [r7, #3]
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	00db      	lsls	r3, r3, #3
 8009db0:	440b      	add	r3, r1
 8009db2:	334c      	adds	r3, #76	; 0x4c
 8009db4:	2200      	movs	r2, #0
 8009db6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009db8:	78fa      	ldrb	r2, [r7, #3]
 8009dba:	6879      	ldr	r1, [r7, #4]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	440b      	add	r3, r1
 8009dc6:	3339      	adds	r3, #57	; 0x39
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009dcc:	78fa      	ldrb	r2, [r7, #3]
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	440b      	add	r3, r1
 8009dda:	335d      	adds	r3, #93	; 0x5d
 8009ddc:	2200      	movs	r2, #0
 8009dde:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	3338      	adds	r3, #56	; 0x38
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	18d1      	adds	r1, r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f009 fad4 	bl	80133a8 <USB_HC_StartXfer>
 8009e00:	4603      	mov	r3, r0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop

08009e0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f008 fffd 	bl	8012e22 <USB_GetMode>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	f040 80ef 	bne.w	800a00e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f008 ffe1 	bl	8012dfc <USB_ReadInterrupts>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 80e5 	beq.w	800a00c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f008 ffd8 	bl	8012dfc <USB_ReadInterrupts>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e56:	d104      	bne.n	8009e62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009e60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f008 ffc8 	bl	8012dfc <USB_ReadInterrupts>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e76:	d104      	bne.n	8009e82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f008 ffb8 	bl	8012dfc <USB_ReadInterrupts>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e96:	d104      	bne.n	8009ea2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009ea0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f008 ffa8 	bl	8012dfc <USB_ReadInterrupts>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d103      	bne.n	8009ebe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f008 ff9a 	bl	8012dfc <USB_ReadInterrupts>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ed2:	d115      	bne.n	8009f00 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009edc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d108      	bne.n	8009f00 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f013 fe0e 	bl	801db10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2101      	movs	r1, #1
 8009efa:	4618      	mov	r0, r3
 8009efc:	f009 f884 	bl	8013008 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f008 ff79 	bl	8012dfc <USB_ReadInterrupts>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f14:	d102      	bne.n	8009f1c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 f966 	bl	800b1e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f008 ff6b 	bl	8012dfc <USB_ReadInterrupts>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f003 0308 	and.w	r3, r3, #8
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d106      	bne.n	8009f3e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f013 fdd1 	bl	801dad8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2208      	movs	r2, #8
 8009f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f008 ff5a 	bl	8012dfc <USB_ReadInterrupts>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f52:	d138      	bne.n	8009fc6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f009 fb69 	bl	8013630 <USB_HC_ReadInterrupt>
 8009f5e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e025      	b.n	8009fb2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f003 030f 	and.w	r3, r3, #15
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d018      	beq.n	8009fac <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f90:	d106      	bne.n	8009fa0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f8cf 	bl	800a13c <HCD_HC_IN_IRQHandler>
 8009f9e:	e005      	b.n	8009fac <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fcfd 	bl	800a9a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d3d4      	bcc.n	8009f66 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f008 ff16 	bl	8012dfc <USB_ReadInterrupts>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f003 0310 	and.w	r3, r3, #16
 8009fd6:	2b10      	cmp	r3, #16
 8009fd8:	d101      	bne.n	8009fde <HAL_HCD_IRQHandler+0x1d2>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e000      	b.n	8009fe0 <HAL_HCD_IRQHandler+0x1d4>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d014      	beq.n	800a00e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	699a      	ldr	r2, [r3, #24]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f022 0210 	bic.w	r2, r2, #16
 8009ff2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 f84b 	bl	800b090 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	699a      	ldr	r2, [r3, #24]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 0210 	orr.w	r2, r2, #16
 800a008:	619a      	str	r2, [r3, #24]
 800a00a:	e000      	b.n	800a00e <HAL_HCD_IRQHandler+0x202>
      return;
 800a00c:	bf00      	nop
    }
  }
}
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <HAL_HCD_Start+0x16>
 800a026:	2302      	movs	r3, #2
 800a028:	e013      	b.n	800a052 <HAL_HCD_Start+0x3e>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4618      	mov	r0, r3
 800a038:	f008 fdee 	bl	8012c18 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2101      	movs	r1, #1
 800a042:	4618      	mov	r0, r3
 800a044:	f009 f844 	bl	80130d0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d101      	bne.n	800a070 <HAL_HCD_Stop+0x16>
 800a06c:	2302      	movs	r3, #2
 800a06e:	e00d      	b.n	800a08c <HAL_HCD_Stop+0x32>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f009 fc23 	bl	80138c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f008 ffeb 	bl	801307c <USB_ResetPort>
 800a0a6:	4603      	mov	r3, r0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800a0bc:	78fa      	ldrb	r2, [r7, #3]
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	440b      	add	r3, r1
 800a0ca:	335c      	adds	r3, #92	; 0x5c
 800a0cc:	781b      	ldrb	r3, [r3, #0]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800a0e6:	78fa      	ldrb	r2, [r7, #3]
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	440b      	add	r3, r1
 800a0f4:	334c      	adds	r3, #76	; 0x4c
 800a0f6:	681b      	ldr	r3, [r3, #0]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4618      	mov	r0, r3
 800a112:	f009 f82d 	bl	8013170 <USB_GetCurrentFrame>
 800a116:	4603      	mov	r3, r0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f009 f808 	bl	8013142 <USB_GetHostSpeed>
 800a132:	4603      	mov	r3, r0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a152:	78fb      	ldrb	r3, [r7, #3]
 800a154:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d119      	bne.n	800a1a0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	4413      	add	r3, r2
 800a174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a178:	461a      	mov	r2, r3
 800a17a:	2304      	movs	r3, #4
 800a17c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	4413      	add	r3, r2
 800a186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	0151      	lsls	r1, r2, #5
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	440a      	add	r2, r1
 800a194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a198:	f043 0302 	orr.w	r3, r3, #2
 800a19c:	60d3      	str	r3, [r2, #12]
 800a19e:	e0ce      	b.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b6:	d12c      	bne.n	800a212 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	440b      	add	r3, r1
 800a1da:	335d      	adds	r3, #93	; 0x5d
 800a1dc:	2207      	movs	r2, #7
 800a1de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	0151      	lsls	r1, r2, #5
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	440a      	add	r2, r1
 800a1f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1fa:	f043 0302 	orr.w	r3, r3, #2
 800a1fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f009 fa21 	bl	8013652 <USB_HC_Halt>
 800a210:	e095      	b.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f003 0320 	and.w	r3, r3, #32
 800a224:	2b20      	cmp	r3, #32
 800a226:	d109      	bne.n	800a23c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a234:	461a      	mov	r2, r3
 800a236:	2320      	movs	r3, #32
 800a238:	6093      	str	r3, [r2, #8]
 800a23a:	e080      	b.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	4413      	add	r3, r2
 800a244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f003 0308 	and.w	r3, r3, #8
 800a24e:	2b08      	cmp	r3, #8
 800a250:	d134      	bne.n	800a2bc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	0151      	lsls	r1, r2, #5
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	440a      	add	r2, r1
 800a268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a26c:	f043 0302 	orr.w	r3, r3, #2
 800a270:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800a272:	6879      	ldr	r1, [r7, #4]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	440b      	add	r3, r1
 800a280:	335d      	adds	r3, #93	; 0x5d
 800a282:	2205      	movs	r2, #5
 800a284:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	015a      	lsls	r2, r3, #5
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	4413      	add	r3, r2
 800a28e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a292:	461a      	mov	r2, r3
 800a294:	2310      	movs	r3, #16
 800a296:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	015a      	lsls	r2, r3, #5
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	2308      	movs	r3, #8
 800a2a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	b2d2      	uxtb	r2, r2
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f009 f9cc 	bl	8013652 <USB_HC_Halt>
 800a2ba:	e040      	b.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d2:	d134      	bne.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	0151      	lsls	r1, r2, #5
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	440a      	add	r2, r1
 800a2ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2ee:	f043 0302 	orr.w	r3, r3, #2
 800a2f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	b2d2      	uxtb	r2, r2
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f009 f9a7 	bl	8013652 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a310:	461a      	mov	r2, r3
 800a312:	2310      	movs	r3, #16
 800a314:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4613      	mov	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	440b      	add	r3, r1
 800a324:	335d      	adds	r3, #93	; 0x5d
 800a326:	2208      	movs	r2, #8
 800a328:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	4413      	add	r3, r2
 800a332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a336:	461a      	mov	r2, r3
 800a338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a33c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	4413      	add	r3, r2
 800a346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a354:	d122      	bne.n	800a39c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a370:	f043 0302 	orr.w	r3, r3, #2
 800a374:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	b2d2      	uxtb	r2, r2
 800a37e:	4611      	mov	r1, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f009 f966 	bl	8013652 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a392:	461a      	mov	r2, r3
 800a394:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a398:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800a39a:	e300      	b.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	f040 80fd 	bne.w	800a5ae <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d01b      	beq.n	800a3f4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	440b      	add	r3, r1
 800a3ca:	3348      	adds	r3, #72	; 0x48
 800a3cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	0159      	lsls	r1, r3, #5
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	440b      	add	r3, r1
 800a3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a3e0:	1ad1      	subs	r1, r2, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	4403      	add	r3, r0
 800a3f0:	334c      	adds	r3, #76	; 0x4c
 800a3f2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	00db      	lsls	r3, r3, #3
 800a400:	440b      	add	r3, r1
 800a402:	335d      	adds	r3, #93	; 0x5d
 800a404:	2201      	movs	r2, #1
 800a406:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a408:	6879      	ldr	r1, [r7, #4]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	4613      	mov	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4413      	add	r3, r2
 800a412:	00db      	lsls	r3, r3, #3
 800a414:	440b      	add	r3, r1
 800a416:	3358      	adds	r3, #88	; 0x58
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	4413      	add	r3, r2
 800a424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a428:	461a      	mov	r2, r3
 800a42a:	2301      	movs	r3, #1
 800a42c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4613      	mov	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	440b      	add	r3, r1
 800a43c:	333f      	adds	r3, #63	; 0x3f
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a444:	6879      	ldr	r1, [r7, #4]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	440b      	add	r3, r1
 800a452:	333f      	adds	r3, #63	; 0x3f
 800a454:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a456:	2b02      	cmp	r3, #2
 800a458:	d121      	bne.n	800a49e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	4413      	add	r3, r2
 800a462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	0151      	lsls	r1, r2, #5
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	440a      	add	r2, r1
 800a470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a474:	f043 0302 	orr.w	r3, r3, #2
 800a478:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	4611      	mov	r1, r2
 800a484:	4618      	mov	r0, r3
 800a486:	f009 f8e4 	bl	8013652 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	4413      	add	r3, r2
 800a492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a496:	461a      	mov	r2, r3
 800a498:	2310      	movs	r3, #16
 800a49a:	6093      	str	r3, [r2, #8]
 800a49c:	e070      	b.n	800a580 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a49e:	6879      	ldr	r1, [r7, #4]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	440b      	add	r3, r1
 800a4ac:	333f      	adds	r3, #63	; 0x3f
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d12a      	bne.n	800a50a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	0151      	lsls	r1, r2, #5
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	440a      	add	r2, r1
 800a4ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	440b      	add	r3, r1
 800a4e2:	335c      	adds	r3, #92	; 0x5c
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	b2d8      	uxtb	r0, r3
 800a4ec:	6879      	ldr	r1, [r7, #4]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	440b      	add	r3, r1
 800a4fa:	335c      	adds	r3, #92	; 0x5c
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	4601      	mov	r1, r0
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f013 fb12 	bl	801db2c <HAL_HCD_HC_NotifyURBChange_Callback>
 800a508:	e03a      	b.n	800a580 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4613      	mov	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	00db      	lsls	r3, r3, #3
 800a516:	440b      	add	r3, r1
 800a518:	333f      	adds	r3, #63	; 0x3f
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d12f      	bne.n	800a580 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a520:	6879      	ldr	r1, [r7, #4]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	4613      	mov	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	440b      	add	r3, r1
 800a52e:	335c      	adds	r3, #92	; 0x5c
 800a530:	2201      	movs	r2, #1
 800a532:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	4613      	mov	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	440b      	add	r3, r1
 800a542:	3350      	adds	r3, #80	; 0x50
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	f083 0301 	eor.w	r3, r3, #1
 800a54a:	b2d8      	uxtb	r0, r3
 800a54c:	6879      	ldr	r1, [r7, #4]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	440b      	add	r3, r1
 800a55a:	3350      	adds	r3, #80	; 0x50
 800a55c:	4602      	mov	r2, r0
 800a55e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	b2d8      	uxtb	r0, r3
 800a564:	6879      	ldr	r1, [r7, #4]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	4613      	mov	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	440b      	add	r3, r1
 800a572:	335c      	adds	r3, #92	; 0x5c
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	4601      	mov	r1, r0
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f013 fad6 	bl	801db2c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	440b      	add	r3, r1
 800a58e:	3350      	adds	r3, #80	; 0x50
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	f083 0301 	eor.w	r3, r3, #1
 800a596:	b2d8      	uxtb	r0, r3
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4613      	mov	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	440b      	add	r3, r1
 800a5a6:	3350      	adds	r3, #80	; 0x50
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	701a      	strb	r2, [r3, #0]
}
 800a5ac:	e1f7      	b.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f003 0302 	and.w	r3, r3, #2
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	f040 811a 	bne.w	800a7fa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	015a      	lsls	r2, r3, #5
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	0151      	lsls	r1, r2, #5
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	440a      	add	r2, r1
 800a5dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5e0:	f023 0302 	bic.w	r3, r3, #2
 800a5e4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	440b      	add	r3, r1
 800a5f4:	335d      	adds	r3, #93	; 0x5d
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d10a      	bne.n	800a612 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a5fc:	6879      	ldr	r1, [r7, #4]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	4613      	mov	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	00db      	lsls	r3, r3, #3
 800a608:	440b      	add	r3, r1
 800a60a:	335c      	adds	r3, #92	; 0x5c
 800a60c:	2201      	movs	r2, #1
 800a60e:	701a      	strb	r2, [r3, #0]
 800a610:	e0d9      	b.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	440b      	add	r3, r1
 800a620:	335d      	adds	r3, #93	; 0x5d
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b05      	cmp	r3, #5
 800a626:	d10a      	bne.n	800a63e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	440b      	add	r3, r1
 800a636:	335c      	adds	r3, #92	; 0x5c
 800a638:	2205      	movs	r2, #5
 800a63a:	701a      	strb	r2, [r3, #0]
 800a63c:	e0c3      	b.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4613      	mov	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4413      	add	r3, r2
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	440b      	add	r3, r1
 800a64c:	335d      	adds	r3, #93	; 0x5d
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	2b06      	cmp	r3, #6
 800a652:	d00a      	beq.n	800a66a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4613      	mov	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	440b      	add	r3, r1
 800a662:	335d      	adds	r3, #93	; 0x5d
 800a664:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a666:	2b08      	cmp	r3, #8
 800a668:	d156      	bne.n	800a718 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	440b      	add	r3, r1
 800a678:	3358      	adds	r3, #88	; 0x58
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	1c59      	adds	r1, r3, #1
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	00db      	lsls	r3, r3, #3
 800a68a:	4403      	add	r3, r0
 800a68c:	3358      	adds	r3, #88	; 0x58
 800a68e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	4613      	mov	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	440b      	add	r3, r1
 800a69e:	3358      	adds	r3, #88	; 0x58
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d914      	bls.n	800a6d0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	440b      	add	r3, r1
 800a6b4:	3358      	adds	r3, #88	; 0x58
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	00db      	lsls	r3, r3, #3
 800a6c6:	440b      	add	r3, r1
 800a6c8:	335c      	adds	r3, #92	; 0x5c
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	701a      	strb	r2, [r3, #0]
 800a6ce:	e009      	b.n	800a6e4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	440b      	add	r3, r1
 800a6de:	335c      	adds	r3, #92	; 0x5c
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a702:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	015a      	lsls	r2, r3, #5
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	4413      	add	r3, r2
 800a70c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a710:	461a      	mov	r2, r3
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	e056      	b.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	440b      	add	r3, r1
 800a726:	335d      	adds	r3, #93	; 0x5d
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d123      	bne.n	800a776 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4613      	mov	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	440b      	add	r3, r1
 800a73c:	335c      	adds	r3, #92	; 0x5c
 800a73e:	2202      	movs	r2, #2
 800a740:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a758:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a760:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a76e:	461a      	mov	r2, r3
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	e027      	b.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	440b      	add	r3, r1
 800a784:	335d      	adds	r3, #93	; 0x5d
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	2b07      	cmp	r3, #7
 800a78a:	d11c      	bne.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	440b      	add	r3, r1
 800a79a:	3358      	adds	r3, #88	; 0x58
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	1c59      	adds	r1, r3, #1
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4403      	add	r3, r0
 800a7ae:	3358      	adds	r3, #88	; 0x58
 800a7b0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	00db      	lsls	r3, r3, #3
 800a7be:	440b      	add	r3, r1
 800a7c0:	335c      	adds	r3, #92	; 0x5c
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	015a      	lsls	r2, r3, #5
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	b2d8      	uxtb	r0, r3
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	440b      	add	r3, r1
 800a7ea:	335c      	adds	r3, #92	; 0x5c
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	4601      	mov	r1, r0
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f013 f99a 	bl	801db2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a7f8:	e0d1      	b.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	4413      	add	r3, r2
 800a802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80c:	2b80      	cmp	r3, #128	; 0x80
 800a80e:	d13e      	bne.n	800a88e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	015a      	lsls	r2, r3, #5
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	4413      	add	r3, r2
 800a818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	0151      	lsls	r1, r2, #5
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	440a      	add	r2, r1
 800a826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a82a:	f043 0302 	orr.w	r3, r3, #2
 800a82e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800a830:	6879      	ldr	r1, [r7, #4]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	440b      	add	r3, r1
 800a83e:	3358      	adds	r3, #88	; 0x58
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	1c59      	adds	r1, r3, #1
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	4403      	add	r3, r0
 800a852:	3358      	adds	r3, #88	; 0x58
 800a854:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a856:	6879      	ldr	r1, [r7, #4]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	440b      	add	r3, r1
 800a864:	335d      	adds	r3, #93	; 0x5d
 800a866:	2206      	movs	r2, #6
 800a868:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	b2d2      	uxtb	r2, r2
 800a872:	4611      	mov	r1, r2
 800a874:	4618      	mov	r0, r3
 800a876:	f008 feec 	bl	8013652 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	4413      	add	r3, r2
 800a882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a886:	461a      	mov	r2, r3
 800a888:	2380      	movs	r3, #128	; 0x80
 800a88a:	6093      	str	r3, [r2, #8]
}
 800a88c:	e087      	b.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	4413      	add	r3, r2
 800a896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f003 0310 	and.w	r3, r3, #16
 800a8a0:	2b10      	cmp	r3, #16
 800a8a2:	d17c      	bne.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	00db      	lsls	r3, r3, #3
 800a8b0:	440b      	add	r3, r1
 800a8b2:	333f      	adds	r3, #63	; 0x3f
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	d122      	bne.n	800a900 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3358      	adds	r3, #88	; 0x58
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	015a      	lsls	r2, r3, #5
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	0151      	lsls	r1, r2, #5
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	440a      	add	r2, r1
 800a8e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8e8:	f043 0302 	orr.w	r3, r3, #2
 800a8ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	b2d2      	uxtb	r2, r2
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f008 feaa 	bl	8013652 <USB_HC_Halt>
 800a8fe:	e045      	b.n	800a98c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a900:	6879      	ldr	r1, [r7, #4]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	00db      	lsls	r3, r3, #3
 800a90c:	440b      	add	r3, r1
 800a90e:	333f      	adds	r3, #63	; 0x3f
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00a      	beq.n	800a92c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a916:	6879      	ldr	r1, [r7, #4]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	00db      	lsls	r3, r3, #3
 800a922:	440b      	add	r3, r1
 800a924:	333f      	adds	r3, #63	; 0x3f
 800a926:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d12f      	bne.n	800a98c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	4613      	mov	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	00db      	lsls	r3, r3, #3
 800a938:	440b      	add	r3, r1
 800a93a:	3358      	adds	r3, #88	; 0x58
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d121      	bne.n	800a98c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	440b      	add	r3, r1
 800a956:	335d      	adds	r3, #93	; 0x5d
 800a958:	2203      	movs	r2, #3
 800a95a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	4413      	add	r3, r2
 800a964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	0151      	lsls	r1, r2, #5
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	440a      	add	r2, r1
 800a972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a976:	f043 0302 	orr.w	r3, r3, #2
 800a97a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	b2d2      	uxtb	r2, r2
 800a984:	4611      	mov	r1, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f008 fe63 	bl	8013652 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	015a      	lsls	r2, r3, #5
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	4413      	add	r3, r2
 800a994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a998:	461a      	mov	r2, r3
 800a99a:	2310      	movs	r3, #16
 800a99c:	6093      	str	r3, [r2, #8]
}
 800a99e:	bf00      	nop
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b086      	sub	sp, #24
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d119      	bne.n	800aa0a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	2304      	movs	r3, #4
 800a9e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	0151      	lsls	r1, r2, #5
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	440a      	add	r2, r1
 800a9fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa02:	f043 0302 	orr.w	r3, r3, #2
 800aa06:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800aa08:	e33e      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	f003 0320 	and.w	r3, r3, #32
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	d141      	bne.n	800aaa4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	015a      	lsls	r2, r3, #5
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	4413      	add	r3, r2
 800aa28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	2320      	movs	r3, #32
 800aa30:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4613      	mov	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	440b      	add	r3, r1
 800aa40:	333d      	adds	r3, #61	; 0x3d
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	f040 831f 	bne.w	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800aa4a:	6879      	ldr	r1, [r7, #4]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	440b      	add	r3, r1
 800aa58:	333d      	adds	r3, #61	; 0x3d
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4613      	mov	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	440b      	add	r3, r1
 800aa6c:	335c      	adds	r3, #92	; 0x5c
 800aa6e:	2202      	movs	r2, #2
 800aa70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	0151      	lsls	r1, r2, #5
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	440a      	add	r2, r1
 800aa88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa8c:	f043 0302 	orr.w	r3, r3, #2
 800aa90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f008 fdd8 	bl	8013652 <USB_HC_Halt>
}
 800aaa2:	e2f1      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab6:	2b40      	cmp	r3, #64	; 0x40
 800aab8:	d13f      	bne.n	800ab3a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800aaba:	6879      	ldr	r1, [r7, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	00db      	lsls	r3, r3, #3
 800aac6:	440b      	add	r3, r1
 800aac8:	335d      	adds	r3, #93	; 0x5d
 800aaca:	2204      	movs	r2, #4
 800aacc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	4613      	mov	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	440b      	add	r3, r1
 800aadc:	333d      	adds	r3, #61	; 0x3d
 800aade:	2201      	movs	r2, #1
 800aae0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	440b      	add	r3, r1
 800aaf0:	3358      	adds	r3, #88	; 0x58
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	0151      	lsls	r1, r2, #5
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	440a      	add	r2, r1
 800ab0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab10:	f043 0302 	orr.w	r3, r3, #2
 800ab14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	b2d2      	uxtb	r2, r2
 800ab1e:	4611      	mov	r1, r2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f008 fd96 	bl	8013652 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab32:	461a      	mov	r2, r3
 800ab34:	2340      	movs	r3, #64	; 0x40
 800ab36:	6093      	str	r3, [r2, #8]
}
 800ab38:	e2a6      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab50:	d122      	bne.n	800ab98 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	0151      	lsls	r1, r2, #5
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	440a      	add	r2, r1
 800ab68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab6c:	f043 0302 	orr.w	r3, r3, #2
 800ab70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	b2d2      	uxtb	r2, r2
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f008 fd68 	bl	8013652 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab94:	6093      	str	r3, [r2, #8]
}
 800ab96:	e277      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d135      	bne.n	800ac1a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	00db      	lsls	r3, r3, #3
 800abba:	440b      	add	r3, r1
 800abbc:	3358      	adds	r3, #88	; 0x58
 800abbe:	2200      	movs	r2, #0
 800abc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	0151      	lsls	r1, r2, #5
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	440a      	add	r2, r1
 800abd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abdc:	f043 0302 	orr.w	r3, r3, #2
 800abe0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	b2d2      	uxtb	r2, r2
 800abea:	4611      	mov	r1, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f008 fd30 	bl	8013652 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	015a      	lsls	r2, r3, #5
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abfe:	461a      	mov	r2, r3
 800ac00:	2301      	movs	r3, #1
 800ac02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800ac04:	6879      	ldr	r1, [r7, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	440b      	add	r3, r1
 800ac12:	335d      	adds	r3, #93	; 0x5d
 800ac14:	2201      	movs	r2, #1
 800ac16:	701a      	strb	r2, [r3, #0]
}
 800ac18:	e236      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	015a      	lsls	r2, r3, #5
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	4413      	add	r3, r2
 800ac22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d12b      	bne.n	800ac88 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	015a      	lsls	r2, r3, #5
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	4413      	add	r3, r2
 800ac38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	2308      	movs	r3, #8
 800ac40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	015a      	lsls	r2, r3, #5
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	4413      	add	r3, r2
 800ac4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	0151      	lsls	r1, r2, #5
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	440a      	add	r2, r1
 800ac58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac5c:	f043 0302 	orr.w	r3, r3, #2
 800ac60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	b2d2      	uxtb	r2, r2
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f008 fcf0 	bl	8013652 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4613      	mov	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	440b      	add	r3, r1
 800ac80:	335d      	adds	r3, #93	; 0x5d
 800ac82:	2205      	movs	r2, #5
 800ac84:	701a      	strb	r2, [r3, #0]
}
 800ac86:	e1ff      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f003 0310 	and.w	r3, r3, #16
 800ac9a:	2b10      	cmp	r3, #16
 800ac9c:	d155      	bne.n	800ad4a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4613      	mov	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	440b      	add	r3, r1
 800acac:	3358      	adds	r3, #88	; 0x58
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	440b      	add	r3, r1
 800acc0:	335d      	adds	r3, #93	; 0x5d
 800acc2:	2203      	movs	r2, #3
 800acc4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4613      	mov	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	440b      	add	r3, r1
 800acd4:	333d      	adds	r3, #61	; 0x3d
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d114      	bne.n	800ad06 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800acdc:	6879      	ldr	r1, [r7, #4]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4613      	mov	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	00db      	lsls	r3, r3, #3
 800ace8:	440b      	add	r3, r1
 800acea:	333c      	adds	r3, #60	; 0x3c
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d109      	bne.n	800ad06 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	4613      	mov	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	440b      	add	r3, r1
 800ad00:	333d      	adds	r3, #61	; 0x3d
 800ad02:	2201      	movs	r2, #1
 800ad04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	0151      	lsls	r1, r2, #5
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	440a      	add	r2, r1
 800ad1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad20:	f043 0302 	orr.w	r3, r3, #2
 800ad24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	b2d2      	uxtb	r2, r2
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f008 fc8e 	bl	8013652 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad42:	461a      	mov	r2, r3
 800ad44:	2310      	movs	r3, #16
 800ad46:	6093      	str	r3, [r2, #8]
}
 800ad48:	e19e      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	015a      	lsls	r2, r3, #5
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	4413      	add	r3, r2
 800ad52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad5c:	2b80      	cmp	r3, #128	; 0x80
 800ad5e:	d12b      	bne.n	800adb8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	015a      	lsls	r2, r3, #5
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	4413      	add	r3, r2
 800ad68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	0151      	lsls	r1, r2, #5
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	440a      	add	r2, r1
 800ad76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad7a:	f043 0302 	orr.w	r3, r3, #2
 800ad7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	b2d2      	uxtb	r2, r2
 800ad88:	4611      	mov	r1, r2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f008 fc61 	bl	8013652 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	440b      	add	r3, r1
 800ad9e:	335d      	adds	r3, #93	; 0x5d
 800ada0:	2206      	movs	r2, #6
 800ada2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	015a      	lsls	r2, r3, #5
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	4413      	add	r3, r2
 800adac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb0:	461a      	mov	r2, r3
 800adb2:	2380      	movs	r3, #128	; 0x80
 800adb4:	6093      	str	r3, [r2, #8]
}
 800adb6:	e167      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adce:	d135      	bne.n	800ae3c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	4413      	add	r3, r2
 800add8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	0151      	lsls	r1, r2, #5
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	440a      	add	r2, r1
 800ade6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adea:	f043 0302 	orr.w	r3, r3, #2
 800adee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	b2d2      	uxtb	r2, r2
 800adf8:	4611      	mov	r1, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f008 fc29 	bl	8013652 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	2310      	movs	r3, #16
 800ae10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	440b      	add	r3, r1
 800ae34:	335d      	adds	r3, #93	; 0x5d
 800ae36:	2208      	movs	r2, #8
 800ae38:	701a      	strb	r2, [r3, #0]
}
 800ae3a:	e125      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	f040 811a 	bne.w	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	0151      	lsls	r1, r2, #5
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	440a      	add	r2, r1
 800ae6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae6e:	f023 0302 	bic.w	r3, r3, #2
 800ae72:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	00db      	lsls	r3, r3, #3
 800ae80:	440b      	add	r3, r1
 800ae82:	335d      	adds	r3, #93	; 0x5d
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d137      	bne.n	800aefa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	440b      	add	r3, r1
 800ae98:	335c      	adds	r3, #92	; 0x5c
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4613      	mov	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	00db      	lsls	r3, r3, #3
 800aeaa:	440b      	add	r3, r1
 800aeac:	333f      	adds	r3, #63	; 0x3f
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d00b      	beq.n	800aecc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	440b      	add	r3, r1
 800aec2:	333f      	adds	r3, #63	; 0x3f
 800aec4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	f040 80c5 	bne.w	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800aecc:	6879      	ldr	r1, [r7, #4]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	4613      	mov	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	440b      	add	r3, r1
 800aeda:	3351      	adds	r3, #81	; 0x51
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	f083 0301 	eor.w	r3, r3, #1
 800aee2:	b2d8      	uxtb	r0, r3
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	440b      	add	r3, r1
 800aef2:	3351      	adds	r3, #81	; 0x51
 800aef4:	4602      	mov	r2, r0
 800aef6:	701a      	strb	r2, [r3, #0]
 800aef8:	e0ad      	b.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	4613      	mov	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	440b      	add	r3, r1
 800af08:	335d      	adds	r3, #93	; 0x5d
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b03      	cmp	r3, #3
 800af0e:	d10a      	bne.n	800af26 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	440b      	add	r3, r1
 800af1e:	335c      	adds	r3, #92	; 0x5c
 800af20:	2202      	movs	r2, #2
 800af22:	701a      	strb	r2, [r3, #0]
 800af24:	e097      	b.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	00db      	lsls	r3, r3, #3
 800af32:	440b      	add	r3, r1
 800af34:	335d      	adds	r3, #93	; 0x5d
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d10a      	bne.n	800af52 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800af3c:	6879      	ldr	r1, [r7, #4]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	00db      	lsls	r3, r3, #3
 800af48:	440b      	add	r3, r1
 800af4a:	335c      	adds	r3, #92	; 0x5c
 800af4c:	2202      	movs	r2, #2
 800af4e:	701a      	strb	r2, [r3, #0]
 800af50:	e081      	b.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4613      	mov	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	440b      	add	r3, r1
 800af60:	335d      	adds	r3, #93	; 0x5d
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b05      	cmp	r3, #5
 800af66:	d10a      	bne.n	800af7e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	4613      	mov	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	00db      	lsls	r3, r3, #3
 800af74:	440b      	add	r3, r1
 800af76:	335c      	adds	r3, #92	; 0x5c
 800af78:	2205      	movs	r2, #5
 800af7a:	701a      	strb	r2, [r3, #0]
 800af7c:	e06b      	b.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800af7e:	6879      	ldr	r1, [r7, #4]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	00db      	lsls	r3, r3, #3
 800af8a:	440b      	add	r3, r1
 800af8c:	335d      	adds	r3, #93	; 0x5d
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	2b06      	cmp	r3, #6
 800af92:	d00a      	beq.n	800afaa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800af94:	6879      	ldr	r1, [r7, #4]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	4613      	mov	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	00db      	lsls	r3, r3, #3
 800afa0:	440b      	add	r3, r1
 800afa2:	335d      	adds	r3, #93	; 0x5d
 800afa4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800afa6:	2b08      	cmp	r3, #8
 800afa8:	d155      	bne.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800afaa:	6879      	ldr	r1, [r7, #4]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	440b      	add	r3, r1
 800afb8:	3358      	adds	r3, #88	; 0x58
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	1c59      	adds	r1, r3, #1
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	4613      	mov	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	4403      	add	r3, r0
 800afcc:	3358      	adds	r3, #88	; 0x58
 800afce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800afd0:	6879      	ldr	r1, [r7, #4]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	4613      	mov	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	00db      	lsls	r3, r3, #3
 800afdc:	440b      	add	r3, r1
 800afde:	3358      	adds	r3, #88	; 0x58
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d914      	bls.n	800b010 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	4613      	mov	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	00db      	lsls	r3, r3, #3
 800aff2:	440b      	add	r3, r1
 800aff4:	3358      	adds	r3, #88	; 0x58
 800aff6:	2200      	movs	r2, #0
 800aff8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	440b      	add	r3, r1
 800b008:	335c      	adds	r3, #92	; 0x5c
 800b00a:	2204      	movs	r2, #4
 800b00c:	701a      	strb	r2, [r3, #0]
 800b00e:	e009      	b.n	800b024 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	4613      	mov	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	440b      	add	r3, r1
 800b01e:	335c      	adds	r3, #92	; 0x5c
 800b020:	2202      	movs	r2, #2
 800b022:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b03a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b042:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b050:	461a      	mov	r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b062:	461a      	mov	r2, r3
 800b064:	2302      	movs	r3, #2
 800b066:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	b2d8      	uxtb	r0, r3
 800b06c:	6879      	ldr	r1, [r7, #4]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	4613      	mov	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	440b      	add	r3, r1
 800b07a:	335c      	adds	r3, #92	; 0x5c
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	4601      	mov	r1, r0
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f012 fd52 	bl	801db2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800b088:	bf00      	nop
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08a      	sub	sp, #40	; 0x28
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	f003 030f 	and.w	r3, r3, #15
 800b0b0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	0c5b      	lsrs	r3, r3, #17
 800b0b6:	f003 030f 	and.w	r3, r3, #15
 800b0ba:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	091b      	lsrs	r3, r3, #4
 800b0c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0c4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d003      	beq.n	800b0d4 <HCD_RXQLVL_IRQHandler+0x44>
 800b0cc:	2b05      	cmp	r3, #5
 800b0ce:	f000 8082 	beq.w	800b1d6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800b0d2:	e083      	b.n	800b1dc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d07f      	beq.n	800b1da <HCD_RXQLVL_IRQHandler+0x14a>
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	00db      	lsls	r3, r3, #3
 800b0e6:	440b      	add	r3, r1
 800b0e8:	3344      	adds	r3, #68	; 0x44
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d074      	beq.n	800b1da <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6818      	ldr	r0, [r3, #0]
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	69ba      	ldr	r2, [r7, #24]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	440b      	add	r3, r1
 800b102:	3344      	adds	r3, #68	; 0x44
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	b292      	uxth	r2, r2
 800b10a:	4619      	mov	r1, r3
 800b10c:	f007 fe4d 	bl	8012daa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	440b      	add	r3, r1
 800b11e:	3344      	adds	r3, #68	; 0x44
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	18d1      	adds	r1, r2, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	69ba      	ldr	r2, [r7, #24]
 800b12a:	4613      	mov	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4413      	add	r3, r2
 800b130:	00db      	lsls	r3, r3, #3
 800b132:	4403      	add	r3, r0
 800b134:	3344      	adds	r3, #68	; 0x44
 800b136:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	69ba      	ldr	r2, [r7, #24]
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	440b      	add	r3, r1
 800b146:	334c      	adds	r3, #76	; 0x4c
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	18d1      	adds	r1, r2, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	00db      	lsls	r3, r3, #3
 800b15a:	4403      	add	r3, r0
 800b15c:	334c      	adds	r3, #76	; 0x4c
 800b15e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	6a3b      	ldr	r3, [r7, #32]
 800b166:	4413      	add	r3, r2
 800b168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b16c:	691a      	ldr	r2, [r3, #16]
 800b16e:	4b1d      	ldr	r3, [pc, #116]	; (800b1e4 <HCD_RXQLVL_IRQHandler+0x154>)
 800b170:	4013      	ands	r3, r2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d031      	beq.n	800b1da <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b18c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b194:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800b1a8:	6879      	ldr	r1, [r7, #4]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	440b      	add	r3, r1
 800b1b6:	3350      	adds	r3, #80	; 0x50
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	f083 0301 	eor.w	r3, r3, #1
 800b1be:	b2d8      	uxtb	r0, r3
 800b1c0:	6879      	ldr	r1, [r7, #4]
 800b1c2:	69ba      	ldr	r2, [r7, #24]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	440b      	add	r3, r1
 800b1ce:	3350      	adds	r3, #80	; 0x50
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	701a      	strb	r2, [r3, #0]
      break;
 800b1d4:	e001      	b.n	800b1da <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800b1d6:	bf00      	nop
 800b1d8:	e000      	b.n	800b1dc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800b1da:	bf00      	nop
  }
}
 800b1dc:	bf00      	nop
 800b1de:	3728      	adds	r7, #40	; 0x28
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	1ff80000 	.word	0x1ff80000

0800b1e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b214:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d10b      	bne.n	800b238 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b01      	cmp	r3, #1
 800b228:	d102      	bne.n	800b230 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f012 fc62 	bl	801daf4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	f043 0302 	orr.w	r3, r3, #2
 800b236:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f003 0308 	and.w	r3, r3, #8
 800b23e:	2b08      	cmp	r3, #8
 800b240:	d132      	bne.n	800b2a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	f043 0308 	orr.w	r3, r3, #8
 800b248:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b04      	cmp	r3, #4
 800b252:	d126      	bne.n	800b2a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d113      	bne.n	800b284 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b266:	d106      	bne.n	800b276 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2102      	movs	r1, #2
 800b26e:	4618      	mov	r0, r3
 800b270:	f007 feca 	bl	8013008 <USB_InitFSLSPClkSel>
 800b274:	e011      	b.n	800b29a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2101      	movs	r1, #1
 800b27c:	4618      	mov	r0, r3
 800b27e:	f007 fec3 	bl	8013008 <USB_InitFSLSPClkSel>
 800b282:	e00a      	b.n	800b29a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d106      	bne.n	800b29a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b292:	461a      	mov	r2, r3
 800b294:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b298:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f012 fc54 	bl	801db48 <HAL_HCD_PortEnabled_Callback>
 800b2a0:	e002      	b.n	800b2a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f012 fc5e 	bl	801db64 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f003 0320 	and.w	r3, r3, #32
 800b2ae:	2b20      	cmp	r3, #32
 800b2b0:	d103      	bne.n	800b2ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f043 0320 	orr.w	r3, r3, #32
 800b2b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6013      	str	r3, [r2, #0]
}
 800b2c6:	bf00      	nop
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e07f      	b.n	800b3e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d106      	bne.n	800b2fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7fb ffd8 	bl	80072ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2224      	movs	r2, #36	; 0x24
 800b300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 0201 	bic.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b320:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	689a      	ldr	r2, [r3, #8]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b330:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d107      	bne.n	800b34a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689a      	ldr	r2, [r3, #8]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b346:	609a      	str	r2, [r3, #8]
 800b348:	e006      	b.n	800b358 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	689a      	ldr	r2, [r3, #8]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b356:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d104      	bne.n	800b36a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b368:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6859      	ldr	r1, [r3, #4]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	4b1d      	ldr	r3, [pc, #116]	; (800b3ec <HAL_I2C_Init+0x11c>)
 800b376:	430b      	orrs	r3, r1
 800b378:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68da      	ldr	r2, [r3, #12]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b388:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	691a      	ldr	r2, [r3, #16]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	ea42 0103 	orr.w	r1, r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	021a      	lsls	r2, r3, #8
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	69d9      	ldr	r1, [r3, #28]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1a      	ldr	r2, [r3, #32]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f042 0201 	orr.w	r2, r2, #1
 800b3c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	02008000 	.word	0x02008000

0800b3f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b088      	sub	sp, #32
 800b3f4:	af02      	add	r7, sp, #8
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	607a      	str	r2, [r7, #4]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	817b      	strh	r3, [r7, #10]
 800b400:	4613      	mov	r3, r2
 800b402:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b20      	cmp	r3, #32
 800b40e:	f040 80da 	bne.w	800b5c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d101      	bne.n	800b420 <HAL_I2C_Master_Transmit+0x30>
 800b41c:	2302      	movs	r3, #2
 800b41e:	e0d3      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b428:	f7fc ff0e 	bl	8008248 <HAL_GetTick>
 800b42c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	2319      	movs	r3, #25
 800b434:	2201      	movs	r2, #1
 800b436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 fcbc 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	e0be      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2221      	movs	r2, #33	; 0x21
 800b44e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2210      	movs	r2, #16
 800b456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	893a      	ldrh	r2, [r7, #8]
 800b46a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2200      	movs	r2, #0
 800b470:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b476:	b29b      	uxth	r3, r3
 800b478:	2bff      	cmp	r3, #255	; 0xff
 800b47a:	d90e      	bls.n	800b49a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	22ff      	movs	r2, #255	; 0xff
 800b480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b486:	b2da      	uxtb	r2, r3
 800b488:	8979      	ldrh	r1, [r7, #10]
 800b48a:	4b51      	ldr	r3, [pc, #324]	; (800b5d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 fe1e 	bl	800c0d4 <I2C_TransferConfig>
 800b498:	e06c      	b.n	800b574 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	8979      	ldrh	r1, [r7, #10]
 800b4ac:	4b48      	ldr	r3, [pc, #288]	; (800b5d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 fe0d 	bl	800c0d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b4ba:	e05b      	b.n	800b574 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	6a39      	ldr	r1, [r7, #32]
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f000 fcb9 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e07b      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d4:	781a      	ldrb	r2, [r3, #0]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f8:	3b01      	subs	r3, #1
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b504:	b29b      	uxth	r3, r3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d034      	beq.n	800b574 <HAL_I2C_Master_Transmit+0x184>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d130      	bne.n	800b574 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	2200      	movs	r2, #0
 800b51a:	2180      	movs	r1, #128	; 0x80
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 fc4b 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e04d      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b530:	b29b      	uxth	r3, r3
 800b532:	2bff      	cmp	r3, #255	; 0xff
 800b534:	d90e      	bls.n	800b554 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	22ff      	movs	r2, #255	; 0xff
 800b53a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b540:	b2da      	uxtb	r2, r3
 800b542:	8979      	ldrh	r1, [r7, #10]
 800b544:	2300      	movs	r3, #0
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f000 fdc1 	bl	800c0d4 <I2C_TransferConfig>
 800b552:	e00f      	b.n	800b574 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b558:	b29a      	uxth	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b562:	b2da      	uxtb	r2, r3
 800b564:	8979      	ldrh	r1, [r7, #10]
 800b566:	2300      	movs	r3, #0
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 fdb0 	bl	800c0d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b578:	b29b      	uxth	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d19e      	bne.n	800b4bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	6a39      	ldr	r1, [r7, #32]
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 fc98 	bl	800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d001      	beq.n	800b592 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	e01a      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2220      	movs	r2, #32
 800b598:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6859      	ldr	r1, [r3, #4]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <HAL_I2C_Master_Transmit+0x1e4>)
 800b5a6:	400b      	ands	r3, r1
 800b5a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e000      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b5c6:	2302      	movs	r3, #2
  }
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	80002000 	.word	0x80002000
 800b5d4:	fe00e800 	.word	0xfe00e800

0800b5d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	607a      	str	r2, [r7, #4]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	817b      	strh	r3, [r7, #10]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	f040 80db 	bne.w	800b7b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b600:	2b01      	cmp	r3, #1
 800b602:	d101      	bne.n	800b608 <HAL_I2C_Master_Receive+0x30>
 800b604:	2302      	movs	r3, #2
 800b606:	e0d4      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b610:	f7fc fe1a 	bl	8008248 <HAL_GetTick>
 800b614:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	2319      	movs	r3, #25
 800b61c:	2201      	movs	r2, #1
 800b61e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f000 fbc8 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e0bf      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2222      	movs	r2, #34	; 0x22
 800b636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2210      	movs	r2, #16
 800b63e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	893a      	ldrh	r2, [r7, #8]
 800b652:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b65e:	b29b      	uxth	r3, r3
 800b660:	2bff      	cmp	r3, #255	; 0xff
 800b662:	d90e      	bls.n	800b682 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	22ff      	movs	r2, #255	; 0xff
 800b668:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	8979      	ldrh	r1, [r7, #10]
 800b672:	4b52      	ldr	r3, [pc, #328]	; (800b7bc <HAL_I2C_Master_Receive+0x1e4>)
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 fd2a 	bl	800c0d4 <I2C_TransferConfig>
 800b680:	e06d      	b.n	800b75e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b686:	b29a      	uxth	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b690:	b2da      	uxtb	r2, r3
 800b692:	8979      	ldrh	r1, [r7, #10]
 800b694:	4b49      	ldr	r3, [pc, #292]	; (800b7bc <HAL_I2C_Master_Receive+0x1e4>)
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 fd19 	bl	800c0d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b6a2:	e05c      	b.n	800b75e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	6a39      	ldr	r1, [r7, #32]
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f000 fc41 	bl	800bf30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e07c      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d034      	beq.n	800b75e <HAL_I2C_Master_Receive+0x186>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d130      	bne.n	800b75e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	2200      	movs	r2, #0
 800b704:	2180      	movs	r1, #128	; 0x80
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 fb56 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e04d      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	2bff      	cmp	r3, #255	; 0xff
 800b71e:	d90e      	bls.n	800b73e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	22ff      	movs	r2, #255	; 0xff
 800b724:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	8979      	ldrh	r1, [r7, #10]
 800b72e:	2300      	movs	r3, #0
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 fccc 	bl	800c0d4 <I2C_TransferConfig>
 800b73c:	e00f      	b.n	800b75e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b742:	b29a      	uxth	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b74c:	b2da      	uxtb	r2, r3
 800b74e:	8979      	ldrh	r1, [r7, #10]
 800b750:	2300      	movs	r3, #0
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 fcbb 	bl	800c0d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b762:	b29b      	uxth	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d19d      	bne.n	800b6a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	6a39      	ldr	r1, [r7, #32]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 fba3 	bl	800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	e01a      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2220      	movs	r2, #32
 800b782:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6859      	ldr	r1, [r3, #4]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <HAL_I2C_Master_Receive+0x1e8>)
 800b790:	400b      	ands	r3, r1
 800b792:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2220      	movs	r2, #32
 800b798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	e000      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b7b0:	2302      	movs	r3, #2
  }
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3718      	adds	r7, #24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	80002400 	.word	0x80002400
 800b7c0:	fe00e800 	.word	0xfe00e800

0800b7c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b088      	sub	sp, #32
 800b7c8:	af02      	add	r7, sp, #8
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	4608      	mov	r0, r1
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	817b      	strh	r3, [r7, #10]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	813b      	strh	r3, [r7, #8]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b20      	cmp	r3, #32
 800b7e8:	f040 80f9 	bne.w	800b9de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <HAL_I2C_Mem_Write+0x34>
 800b7f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d105      	bne.n	800b804 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e0ed      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d101      	bne.n	800b812 <HAL_I2C_Mem_Write+0x4e>
 800b80e:	2302      	movs	r3, #2
 800b810:	e0e6      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b81a:	f7fc fd15 	bl	8008248 <HAL_GetTick>
 800b81e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	2319      	movs	r3, #25
 800b826:	2201      	movs	r2, #1
 800b828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 fac3 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	e0d1      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2221      	movs	r2, #33	; 0x21
 800b840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2240      	movs	r2, #64	; 0x40
 800b848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6a3a      	ldr	r2, [r7, #32]
 800b856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b85c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b864:	88f8      	ldrh	r0, [r7, #6]
 800b866:	893a      	ldrh	r2, [r7, #8]
 800b868:	8979      	ldrh	r1, [r7, #10]
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	4603      	mov	r3, r0
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 f9d3 	bl	800bc20 <I2C_RequestMemoryWrite>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d005      	beq.n	800b88c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	e0a9      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b890:	b29b      	uxth	r3, r3
 800b892:	2bff      	cmp	r3, #255	; 0xff
 800b894:	d90e      	bls.n	800b8b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	22ff      	movs	r2, #255	; 0xff
 800b89a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a0:	b2da      	uxtb	r2, r3
 800b8a2:	8979      	ldrh	r1, [r7, #10]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f000 fc11 	bl	800c0d4 <I2C_TransferConfig>
 800b8b2:	e00f      	b.n	800b8d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	8979      	ldrh	r1, [r7, #10]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 fc00 	bl	800c0d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 faad 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e07b      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	781a      	ldrb	r2, [r3, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b902:	b29b      	uxth	r3, r3
 800b904:	3b01      	subs	r3, #1
 800b906:	b29a      	uxth	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b910:	3b01      	subs	r3, #1
 800b912:	b29a      	uxth	r2, r3
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d034      	beq.n	800b98c <HAL_I2C_Mem_Write+0x1c8>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b926:	2b00      	cmp	r3, #0
 800b928:	d130      	bne.n	800b98c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	2200      	movs	r2, #0
 800b932:	2180      	movs	r1, #128	; 0x80
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f000 fa3f 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e04d      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b948:	b29b      	uxth	r3, r3
 800b94a:	2bff      	cmp	r3, #255	; 0xff
 800b94c:	d90e      	bls.n	800b96c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	22ff      	movs	r2, #255	; 0xff
 800b952:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	8979      	ldrh	r1, [r7, #10]
 800b95c:	2300      	movs	r3, #0
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 fbb5 	bl	800c0d4 <I2C_TransferConfig>
 800b96a:	e00f      	b.n	800b98c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b970:	b29a      	uxth	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	8979      	ldrh	r1, [r7, #10]
 800b97e:	2300      	movs	r3, #0
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 fba4 	bl	800c0d4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b990:	b29b      	uxth	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d19e      	bne.n	800b8d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 fa8c 	bl	800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e01a      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2220      	movs	r2, #32
 800b9b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6859      	ldr	r1, [r3, #4]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <HAL_I2C_Mem_Write+0x224>)
 800b9be:	400b      	ands	r3, r1
 800b9c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2220      	movs	r2, #32
 800b9c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	e000      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b9de:	2302      	movs	r3, #2
  }
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	fe00e800 	.word	0xfe00e800

0800b9ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	817b      	strh	r3, [r7, #10]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	813b      	strh	r3, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	f040 80fd 	bne.w	800bc0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <HAL_I2C_Mem_Read+0x34>
 800ba1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d105      	bne.n	800ba2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e0f1      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d101      	bne.n	800ba3a <HAL_I2C_Mem_Read+0x4e>
 800ba36:	2302      	movs	r3, #2
 800ba38:	e0ea      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ba42:	f7fc fc01 	bl	8008248 <HAL_GetTick>
 800ba46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	2319      	movs	r3, #25
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 f9af 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e0d5      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2222      	movs	r2, #34	; 0x22
 800ba68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2240      	movs	r2, #64	; 0x40
 800ba70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6a3a      	ldr	r2, [r7, #32]
 800ba7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ba8c:	88f8      	ldrh	r0, [r7, #6]
 800ba8e:	893a      	ldrh	r2, [r7, #8]
 800ba90:	8979      	ldrh	r1, [r7, #10]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f000 f913 	bl	800bcc8 <I2C_RequestMemoryRead>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d005      	beq.n	800bab4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e0ad      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bab8:	b29b      	uxth	r3, r3
 800baba:	2bff      	cmp	r3, #255	; 0xff
 800babc:	d90e      	bls.n	800badc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	22ff      	movs	r2, #255	; 0xff
 800bac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	8979      	ldrh	r1, [r7, #10]
 800bacc:	4b52      	ldr	r3, [pc, #328]	; (800bc18 <HAL_I2C_Mem_Read+0x22c>)
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 fafd 	bl	800c0d4 <I2C_TransferConfig>
 800bada:	e00f      	b.n	800bafc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baea:	b2da      	uxtb	r2, r3
 800baec:	8979      	ldrh	r1, [r7, #10]
 800baee:	4b4a      	ldr	r3, [pc, #296]	; (800bc18 <HAL_I2C_Mem_Read+0x22c>)
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 faec 	bl	800c0d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	2200      	movs	r2, #0
 800bb04:	2104      	movs	r1, #4
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f000 f956 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	e07c      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	b2d2      	uxtb	r2, r2
 800bb22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb32:	3b01      	subs	r3, #1
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	3b01      	subs	r3, #1
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d034      	beq.n	800bbbc <HAL_I2C_Mem_Read+0x1d0>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d130      	bne.n	800bbbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb60:	2200      	movs	r2, #0
 800bb62:	2180      	movs	r1, #128	; 0x80
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f927 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e04d      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	2bff      	cmp	r3, #255	; 0xff
 800bb7c:	d90e      	bls.n	800bb9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	22ff      	movs	r2, #255	; 0xff
 800bb82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	8979      	ldrh	r1, [r7, #10]
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 fa9d 	bl	800c0d4 <I2C_TransferConfig>
 800bb9a:	e00f      	b.n	800bbbc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbaa:	b2da      	uxtb	r2, r3
 800bbac:	8979      	ldrh	r1, [r7, #10]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 fa8c 	bl	800c0d4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d19a      	bne.n	800bafc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 f974 	bl	800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e01a      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2220      	movs	r2, #32
 800bbe0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6859      	ldr	r1, [r3, #4]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	4b0b      	ldr	r3, [pc, #44]	; (800bc1c <HAL_I2C_Mem_Read+0x230>)
 800bbee:	400b      	ands	r3, r1
 800bbf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2220      	movs	r2, #32
 800bbf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e000      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bc0e:	2302      	movs	r3, #2
  }
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3718      	adds	r7, #24
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	80002400 	.word	0x80002400
 800bc1c:	fe00e800 	.word	0xfe00e800

0800bc20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	4608      	mov	r0, r1
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	4603      	mov	r3, r0
 800bc30:	817b      	strh	r3, [r7, #10]
 800bc32:	460b      	mov	r3, r1
 800bc34:	813b      	strh	r3, [r7, #8]
 800bc36:	4613      	mov	r3, r2
 800bc38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bc3a:	88fb      	ldrh	r3, [r7, #6]
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	8979      	ldrh	r1, [r7, #10]
 800bc40:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <I2C_RequestMemoryWrite+0xa4>)
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 fa43 	bl	800c0d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc4e:	69fa      	ldr	r2, [r7, #28]
 800bc50:	69b9      	ldr	r1, [r7, #24]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 f8f0 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e02c      	b.n	800bcbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bc62:	88fb      	ldrh	r3, [r7, #6]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d105      	bne.n	800bc74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc68:	893b      	ldrh	r3, [r7, #8]
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	629a      	str	r2, [r3, #40]	; 0x28
 800bc72:	e015      	b.n	800bca0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bc74:	893b      	ldrh	r3, [r7, #8]
 800bc76:	0a1b      	lsrs	r3, r3, #8
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc82:	69fa      	ldr	r2, [r7, #28]
 800bc84:	69b9      	ldr	r1, [r7, #24]
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 f8d6 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e012      	b.n	800bcbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc96:	893b      	ldrh	r3, [r7, #8]
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	2200      	movs	r2, #0
 800bca8:	2180      	movs	r1, #128	; 0x80
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 f884 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e000      	b.n	800bcbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	80002000 	.word	0x80002000

0800bcc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	817b      	strh	r3, [r7, #10]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	813b      	strh	r3, [r7, #8]
 800bcde:	4613      	mov	r3, r2
 800bce0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bce2:	88fb      	ldrh	r3, [r7, #6]
 800bce4:	b2da      	uxtb	r2, r3
 800bce6:	8979      	ldrh	r1, [r7, #10]
 800bce8:	4b20      	ldr	r3, [pc, #128]	; (800bd6c <I2C_RequestMemoryRead+0xa4>)
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	2300      	movs	r3, #0
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f000 f9f0 	bl	800c0d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcf4:	69fa      	ldr	r2, [r7, #28]
 800bcf6:	69b9      	ldr	r1, [r7, #24]
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 f89d 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e02c      	b.n	800bd62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd08:	88fb      	ldrh	r3, [r7, #6]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d105      	bne.n	800bd1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd0e:	893b      	ldrh	r3, [r7, #8]
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	629a      	str	r2, [r3, #40]	; 0x28
 800bd18:	e015      	b.n	800bd46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd1a:	893b      	ldrh	r3, [r7, #8]
 800bd1c:	0a1b      	lsrs	r3, r3, #8
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd28:	69fa      	ldr	r2, [r7, #28]
 800bd2a:	69b9      	ldr	r1, [r7, #24]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 f883 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e012      	b.n	800bd62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd3c:	893b      	ldrh	r3, [r7, #8]
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	2140      	movs	r1, #64	; 0x40
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 f831 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e000      	b.n	800bd62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	80002000 	.word	0x80002000

0800bd70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	f003 0302 	and.w	r3, r3, #2
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d103      	bne.n	800bd8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d007      	beq.n	800bdac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	699a      	ldr	r2, [r3, #24]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f042 0201 	orr.w	r2, r2, #1
 800bdaa:	619a      	str	r2, [r3, #24]
  }
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	603b      	str	r3, [r7, #0]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdc8:	e022      	b.n	800be10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd0:	d01e      	beq.n	800be10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdd2:	f7fc fa39 	bl	8008248 <HAL_GetTick>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	683a      	ldr	r2, [r7, #0]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d302      	bcc.n	800bde8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d113      	bne.n	800be10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdec:	f043 0220 	orr.w	r2, r3, #32
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2220      	movs	r2, #32
 800bdf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e00f      	b.n	800be30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	699a      	ldr	r2, [r3, #24]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	4013      	ands	r3, r2
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	bf0c      	ite	eq
 800be20:	2301      	moveq	r3, #1
 800be22:	2300      	movne	r3, #0
 800be24:	b2db      	uxtb	r3, r3
 800be26:	461a      	mov	r2, r3
 800be28:	79fb      	ldrb	r3, [r7, #7]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d0cd      	beq.n	800bdca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800be44:	e02c      	b.n	800bea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	68b9      	ldr	r1, [r7, #8]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 f8dc 	bl	800c008 <I2C_IsAcknowledgeFailed>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e02a      	b.n	800beb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be60:	d01e      	beq.n	800bea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be62:	f7fc f9f1 	bl	8008248 <HAL_GetTick>
 800be66:	4602      	mov	r2, r0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d302      	bcc.n	800be78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d113      	bne.n	800bea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be7c:	f043 0220 	orr.w	r2, r3, #32
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2220      	movs	r2, #32
 800be88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e007      	b.n	800beb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	f003 0302 	and.w	r3, r3, #2
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d1cb      	bne.n	800be46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bec4:	e028      	b.n	800bf18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f000 f89c 	bl	800c008 <I2C_IsAcknowledgeFailed>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d001      	beq.n	800beda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e026      	b.n	800bf28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800beda:	f7fc f9b5 	bl	8008248 <HAL_GetTick>
 800bede:	4602      	mov	r2, r0
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d302      	bcc.n	800bef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d113      	bne.n	800bf18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef4:	f043 0220 	orr.w	r2, r3, #32
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2220      	movs	r2, #32
 800bf00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e007      	b.n	800bf28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	f003 0320 	and.w	r3, r3, #32
 800bf22:	2b20      	cmp	r3, #32
 800bf24:	d1cf      	bne.n	800bec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bf3c:	e055      	b.n	800bfea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	68b9      	ldr	r1, [r7, #8]
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f000 f860 	bl	800c008 <I2C_IsAcknowledgeFailed>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e053      	b.n	800bffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	f003 0320 	and.w	r3, r3, #32
 800bf5c:	2b20      	cmp	r3, #32
 800bf5e:	d129      	bne.n	800bfb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	f003 0304 	and.w	r3, r3, #4
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	d105      	bne.n	800bf7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	e03f      	b.n	800bffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	6859      	ldr	r1, [r3, #4]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	4b1d      	ldr	r3, [pc, #116]	; (800c004 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800bf8e:	400b      	ands	r3, r1
 800bf90:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2220      	movs	r2, #32
 800bf9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e022      	b.n	800bffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfb4:	f7fc f948 	bl	8008248 <HAL_GetTick>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d302      	bcc.n	800bfca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10f      	bne.n	800bfea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfce:	f043 0220 	orr.w	r2, r3, #32
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2220      	movs	r2, #32
 800bfda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e007      	b.n	800bffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	f003 0304 	and.w	r3, r3, #4
 800bff4:	2b04      	cmp	r3, #4
 800bff6:	d1a2      	bne.n	800bf3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	fe00e800 	.word	0xfe00e800

0800c008 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	f003 0310 	and.w	r3, r3, #16
 800c01e:	2b10      	cmp	r3, #16
 800c020:	d151      	bne.n	800c0c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c022:	e022      	b.n	800c06a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02a:	d01e      	beq.n	800c06a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c02c:	f7fc f90c 	bl	8008248 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d302      	bcc.n	800c042 <I2C_IsAcknowledgeFailed+0x3a>
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d113      	bne.n	800c06a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c046:	f043 0220 	orr.w	r2, r3, #32
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2220      	movs	r2, #32
 800c052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	e02e      	b.n	800c0c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	f003 0320 	and.w	r3, r3, #32
 800c074:	2b20      	cmp	r3, #32
 800c076:	d1d5      	bne.n	800c024 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2210      	movs	r2, #16
 800c07e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2220      	movs	r2, #32
 800c086:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f7ff fe71 	bl	800bd70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6859      	ldr	r1, [r3, #4]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	4b0d      	ldr	r3, [pc, #52]	; (800c0d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800c09a:	400b      	ands	r3, r1
 800c09c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0a2:	f043 0204 	orr.w	r2, r3, #4
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2220      	movs	r2, #32
 800c0ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e000      	b.n	800c0c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	fe00e800 	.word	0xfe00e800

0800c0d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	607b      	str	r3, [r7, #4]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	817b      	strh	r3, [r7, #10]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	0d5b      	lsrs	r3, r3, #21
 800c0f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <I2C_TransferConfig+0x58>)
 800c0f6:	430b      	orrs	r3, r1
 800c0f8:	43db      	mvns	r3, r3
 800c0fa:	ea02 0103 	and.w	r1, r2, r3
 800c0fe:	897b      	ldrh	r3, [r7, #10]
 800c100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c104:	7a7b      	ldrb	r3, [r7, #9]
 800c106:	041b      	lsls	r3, r3, #16
 800c108:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c10c:	431a      	orrs	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	431a      	orrs	r2, r3
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	431a      	orrs	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	430a      	orrs	r2, r1
 800c11c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c11e:	bf00      	nop
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	03ff63ff 	.word	0x03ff63ff

0800c130 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c140:	b2db      	uxtb	r3, r3
 800c142:	2b20      	cmp	r3, #32
 800c144:	d138      	bne.n	800c1b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d101      	bne.n	800c154 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c150:	2302      	movs	r3, #2
 800c152:	e032      	b.n	800c1ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2224      	movs	r2, #36	; 0x24
 800c160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f022 0201 	bic.w	r2, r2, #1
 800c172:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c182:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6819      	ldr	r1, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	430a      	orrs	r2, r1
 800c192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f042 0201 	orr.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	e000      	b.n	800c1ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c1b8:	2302      	movs	r3, #2
  }
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b085      	sub	sp, #20
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	d139      	bne.n	800c250 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d101      	bne.n	800c1ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	e033      	b.n	800c252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2224      	movs	r2, #36	; 0x24
 800c1f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f022 0201 	bic.w	r2, r2, #1
 800c208:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c218:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	021b      	lsls	r3, r3, #8
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	4313      	orrs	r3, r2
 800c222:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f042 0201 	orr.w	r2, r2, #1
 800c23a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2220      	movs	r2, #32
 800c240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	e000      	b.n	800c252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c250:	2302      	movs	r3, #2
  }
}
 800c252:	4618      	mov	r0, r3
 800c254:	3714      	adds	r7, #20
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
	...

0800c260 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c264:	4b05      	ldr	r3, [pc, #20]	; (800c27c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a04      	ldr	r2, [pc, #16]	; (800c27c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c26a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c26e:	6013      	str	r3, [r2, #0]
}
 800c270:	bf00      	nop
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	40007000 	.word	0x40007000

0800c280 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c28a:	4b23      	ldr	r3, [pc, #140]	; (800c318 <HAL_PWREx_EnableOverDrive+0x98>)
 800c28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28e:	4a22      	ldr	r2, [pc, #136]	; (800c318 <HAL_PWREx_EnableOverDrive+0x98>)
 800c290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c294:	6413      	str	r3, [r2, #64]	; 0x40
 800c296:	4b20      	ldr	r3, [pc, #128]	; (800c318 <HAL_PWREx_EnableOverDrive+0x98>)
 800c298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c29e:	603b      	str	r3, [r7, #0]
 800c2a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c2a2:	4b1e      	ldr	r3, [pc, #120]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a1d      	ldr	r2, [pc, #116]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c2ae:	f7fb ffcb 	bl	8008248 <HAL_GetTick>
 800c2b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c2b4:	e009      	b.n	800c2ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c2b6:	f7fb ffc7 	bl	8008248 <HAL_GetTick>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2c4:	d901      	bls.n	800c2ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e022      	b.n	800c310 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c2ca:	4b14      	ldr	r3, [pc, #80]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2d6:	d1ee      	bne.n	800c2b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c2d8:	4b10      	ldr	r3, [pc, #64]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a0f      	ldr	r2, [pc, #60]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c2e4:	f7fb ffb0 	bl	8008248 <HAL_GetTick>
 800c2e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c2ea:	e009      	b.n	800c300 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c2ec:	f7fb ffac 	bl	8008248 <HAL_GetTick>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2fa:	d901      	bls.n	800c300 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e007      	b.n	800c310 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c300:	4b06      	ldr	r3, [pc, #24]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c30c:	d1ee      	bne.n	800c2ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	40023800 	.word	0x40023800
 800c31c:	40007000 	.word	0x40007000

0800c320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c328:	2300      	movs	r3, #0
 800c32a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e29b      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 8087 	beq.w	800c452 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c344:	4b96      	ldr	r3, [pc, #600]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	f003 030c 	and.w	r3, r3, #12
 800c34c:	2b04      	cmp	r3, #4
 800c34e:	d00c      	beq.n	800c36a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c350:	4b93      	ldr	r3, [pc, #588]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	f003 030c 	and.w	r3, r3, #12
 800c358:	2b08      	cmp	r3, #8
 800c35a:	d112      	bne.n	800c382 <HAL_RCC_OscConfig+0x62>
 800c35c:	4b90      	ldr	r3, [pc, #576]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c368:	d10b      	bne.n	800c382 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c36a:	4b8d      	ldr	r3, [pc, #564]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c372:	2b00      	cmp	r3, #0
 800c374:	d06c      	beq.n	800c450 <HAL_RCC_OscConfig+0x130>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d168      	bne.n	800c450 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	e275      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c38a:	d106      	bne.n	800c39a <HAL_RCC_OscConfig+0x7a>
 800c38c:	4b84      	ldr	r3, [pc, #528]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a83      	ldr	r2, [pc, #524]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	e02e      	b.n	800c3f8 <HAL_RCC_OscConfig+0xd8>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10c      	bne.n	800c3bc <HAL_RCC_OscConfig+0x9c>
 800c3a2:	4b7f      	ldr	r3, [pc, #508]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a7e      	ldr	r2, [pc, #504]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	4b7c      	ldr	r3, [pc, #496]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a7b      	ldr	r2, [pc, #492]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3b8:	6013      	str	r3, [r2, #0]
 800c3ba:	e01d      	b.n	800c3f8 <HAL_RCC_OscConfig+0xd8>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3c4:	d10c      	bne.n	800c3e0 <HAL_RCC_OscConfig+0xc0>
 800c3c6:	4b76      	ldr	r3, [pc, #472]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a75      	ldr	r2, [pc, #468]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	4b73      	ldr	r3, [pc, #460]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a72      	ldr	r2, [pc, #456]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	e00b      	b.n	800c3f8 <HAL_RCC_OscConfig+0xd8>
 800c3e0:	4b6f      	ldr	r3, [pc, #444]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a6e      	ldr	r2, [pc, #440]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3ea:	6013      	str	r3, [r2, #0]
 800c3ec:	4b6c      	ldr	r3, [pc, #432]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a6b      	ldr	r2, [pc, #428]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d013      	beq.n	800c428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c400:	f7fb ff22 	bl	8008248 <HAL_GetTick>
 800c404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c406:	e008      	b.n	800c41a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c408:	f7fb ff1e 	bl	8008248 <HAL_GetTick>
 800c40c:	4602      	mov	r2, r0
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	2b64      	cmp	r3, #100	; 0x64
 800c414:	d901      	bls.n	800c41a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c416:	2303      	movs	r3, #3
 800c418:	e229      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c41a:	4b61      	ldr	r3, [pc, #388]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0f0      	beq.n	800c408 <HAL_RCC_OscConfig+0xe8>
 800c426:	e014      	b.n	800c452 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c428:	f7fb ff0e 	bl	8008248 <HAL_GetTick>
 800c42c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c42e:	e008      	b.n	800c442 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c430:	f7fb ff0a 	bl	8008248 <HAL_GetTick>
 800c434:	4602      	mov	r2, r0
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	2b64      	cmp	r3, #100	; 0x64
 800c43c:	d901      	bls.n	800c442 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c43e:	2303      	movs	r3, #3
 800c440:	e215      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c442:	4b57      	ldr	r3, [pc, #348]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1f0      	bne.n	800c430 <HAL_RCC_OscConfig+0x110>
 800c44e:	e000      	b.n	800c452 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 0302 	and.w	r3, r3, #2
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d069      	beq.n	800c532 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c45e:	4b50      	ldr	r3, [pc, #320]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	f003 030c 	and.w	r3, r3, #12
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00b      	beq.n	800c482 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c46a:	4b4d      	ldr	r3, [pc, #308]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	f003 030c 	and.w	r3, r3, #12
 800c472:	2b08      	cmp	r3, #8
 800c474:	d11c      	bne.n	800c4b0 <HAL_RCC_OscConfig+0x190>
 800c476:	4b4a      	ldr	r3, [pc, #296]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d116      	bne.n	800c4b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c482:	4b47      	ldr	r3, [pc, #284]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 0302 	and.w	r3, r3, #2
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d005      	beq.n	800c49a <HAL_RCC_OscConfig+0x17a>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d001      	beq.n	800c49a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c496:	2301      	movs	r3, #1
 800c498:	e1e9      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c49a:	4b41      	ldr	r3, [pc, #260]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	00db      	lsls	r3, r3, #3
 800c4a8:	493d      	ldr	r1, [pc, #244]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4ae:	e040      	b.n	800c532 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d023      	beq.n	800c500 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4b8:	4b39      	ldr	r3, [pc, #228]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a38      	ldr	r2, [pc, #224]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4be:	f043 0301 	orr.w	r3, r3, #1
 800c4c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4c4:	f7fb fec0 	bl	8008248 <HAL_GetTick>
 800c4c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4ca:	e008      	b.n	800c4de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4cc:	f7fb febc 	bl	8008248 <HAL_GetTick>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d901      	bls.n	800c4de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e1c7      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4de:	4b30      	ldr	r3, [pc, #192]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d0f0      	beq.n	800c4cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4ea:	4b2d      	ldr	r3, [pc, #180]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	4929      	ldr	r1, [pc, #164]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	600b      	str	r3, [r1, #0]
 800c4fe:	e018      	b.n	800c532 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c500:	4b27      	ldr	r3, [pc, #156]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a26      	ldr	r2, [pc, #152]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c506:	f023 0301 	bic.w	r3, r3, #1
 800c50a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c50c:	f7fb fe9c 	bl	8008248 <HAL_GetTick>
 800c510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c512:	e008      	b.n	800c526 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c514:	f7fb fe98 	bl	8008248 <HAL_GetTick>
 800c518:	4602      	mov	r2, r0
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d901      	bls.n	800c526 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c522:	2303      	movs	r3, #3
 800c524:	e1a3      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c526:	4b1e      	ldr	r3, [pc, #120]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1f0      	bne.n	800c514 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 0308 	and.w	r3, r3, #8
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d038      	beq.n	800c5b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d019      	beq.n	800c57a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c546:	4b16      	ldr	r3, [pc, #88]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c54a:	4a15      	ldr	r2, [pc, #84]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c54c:	f043 0301 	orr.w	r3, r3, #1
 800c550:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c552:	f7fb fe79 	bl	8008248 <HAL_GetTick>
 800c556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c558:	e008      	b.n	800c56c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c55a:	f7fb fe75 	bl	8008248 <HAL_GetTick>
 800c55e:	4602      	mov	r2, r0
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	2b02      	cmp	r3, #2
 800c566:	d901      	bls.n	800c56c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c568:	2303      	movs	r3, #3
 800c56a:	e180      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c56c:	4b0c      	ldr	r3, [pc, #48]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c56e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c570:	f003 0302 	and.w	r3, r3, #2
 800c574:	2b00      	cmp	r3, #0
 800c576:	d0f0      	beq.n	800c55a <HAL_RCC_OscConfig+0x23a>
 800c578:	e01a      	b.n	800c5b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c57a:	4b09      	ldr	r3, [pc, #36]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c57c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c57e:	4a08      	ldr	r2, [pc, #32]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c580:	f023 0301 	bic.w	r3, r3, #1
 800c584:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c586:	f7fb fe5f 	bl	8008248 <HAL_GetTick>
 800c58a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c58c:	e00a      	b.n	800c5a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c58e:	f7fb fe5b 	bl	8008248 <HAL_GetTick>
 800c592:	4602      	mov	r2, r0
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d903      	bls.n	800c5a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c59c:	2303      	movs	r3, #3
 800c59e:	e166      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c5a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5a4:	4b92      	ldr	r3, [pc, #584]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5a8:	f003 0302 	and.w	r3, r3, #2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1ee      	bne.n	800c58e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 80a4 	beq.w	800c706 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5be:	4b8c      	ldr	r3, [pc, #560]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10d      	bne.n	800c5e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5ca:	4b89      	ldr	r3, [pc, #548]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ce:	4a88      	ldr	r2, [pc, #544]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5d4:	6413      	str	r3, [r2, #64]	; 0x40
 800c5d6:	4b86      	ldr	r3, [pc, #536]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5de:	60bb      	str	r3, [r7, #8]
 800c5e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5e6:	4b83      	ldr	r3, [pc, #524]	; (800c7f4 <HAL_RCC_OscConfig+0x4d4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d118      	bne.n	800c624 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c5f2:	4b80      	ldr	r3, [pc, #512]	; (800c7f4 <HAL_RCC_OscConfig+0x4d4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a7f      	ldr	r2, [pc, #508]	; (800c7f4 <HAL_RCC_OscConfig+0x4d4>)
 800c5f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5fe:	f7fb fe23 	bl	8008248 <HAL_GetTick>
 800c602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c604:	e008      	b.n	800c618 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c606:	f7fb fe1f 	bl	8008248 <HAL_GetTick>
 800c60a:	4602      	mov	r2, r0
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	2b64      	cmp	r3, #100	; 0x64
 800c612:	d901      	bls.n	800c618 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c614:	2303      	movs	r3, #3
 800c616:	e12a      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c618:	4b76      	ldr	r3, [pc, #472]	; (800c7f4 <HAL_RCC_OscConfig+0x4d4>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c620:	2b00      	cmp	r3, #0
 800c622:	d0f0      	beq.n	800c606 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d106      	bne.n	800c63a <HAL_RCC_OscConfig+0x31a>
 800c62c:	4b70      	ldr	r3, [pc, #448]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c630:	4a6f      	ldr	r2, [pc, #444]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	6713      	str	r3, [r2, #112]	; 0x70
 800c638:	e02d      	b.n	800c696 <HAL_RCC_OscConfig+0x376>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10c      	bne.n	800c65c <HAL_RCC_OscConfig+0x33c>
 800c642:	4b6b      	ldr	r3, [pc, #428]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c646:	4a6a      	ldr	r2, [pc, #424]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c648:	f023 0301 	bic.w	r3, r3, #1
 800c64c:	6713      	str	r3, [r2, #112]	; 0x70
 800c64e:	4b68      	ldr	r3, [pc, #416]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c652:	4a67      	ldr	r2, [pc, #412]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c654:	f023 0304 	bic.w	r3, r3, #4
 800c658:	6713      	str	r3, [r2, #112]	; 0x70
 800c65a:	e01c      	b.n	800c696 <HAL_RCC_OscConfig+0x376>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	2b05      	cmp	r3, #5
 800c662:	d10c      	bne.n	800c67e <HAL_RCC_OscConfig+0x35e>
 800c664:	4b62      	ldr	r3, [pc, #392]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c668:	4a61      	ldr	r2, [pc, #388]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c66a:	f043 0304 	orr.w	r3, r3, #4
 800c66e:	6713      	str	r3, [r2, #112]	; 0x70
 800c670:	4b5f      	ldr	r3, [pc, #380]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c674:	4a5e      	ldr	r2, [pc, #376]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c676:	f043 0301 	orr.w	r3, r3, #1
 800c67a:	6713      	str	r3, [r2, #112]	; 0x70
 800c67c:	e00b      	b.n	800c696 <HAL_RCC_OscConfig+0x376>
 800c67e:	4b5c      	ldr	r3, [pc, #368]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c682:	4a5b      	ldr	r2, [pc, #364]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c684:	f023 0301 	bic.w	r3, r3, #1
 800c688:	6713      	str	r3, [r2, #112]	; 0x70
 800c68a:	4b59      	ldr	r3, [pc, #356]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68e:	4a58      	ldr	r2, [pc, #352]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c690:	f023 0304 	bic.w	r3, r3, #4
 800c694:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d015      	beq.n	800c6ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c69e:	f7fb fdd3 	bl	8008248 <HAL_GetTick>
 800c6a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6a4:	e00a      	b.n	800c6bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6a6:	f7fb fdcf 	bl	8008248 <HAL_GetTick>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d901      	bls.n	800c6bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	e0d8      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6bc:	4b4c      	ldr	r3, [pc, #304]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c0:	f003 0302 	and.w	r3, r3, #2
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0ee      	beq.n	800c6a6 <HAL_RCC_OscConfig+0x386>
 800c6c8:	e014      	b.n	800c6f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6ca:	f7fb fdbd 	bl	8008248 <HAL_GetTick>
 800c6ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6d0:	e00a      	b.n	800c6e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6d2:	f7fb fdb9 	bl	8008248 <HAL_GetTick>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d901      	bls.n	800c6e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c6e4:	2303      	movs	r3, #3
 800c6e6:	e0c2      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6e8:	4b41      	ldr	r3, [pc, #260]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1ee      	bne.n	800c6d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c6f4:	7dfb      	ldrb	r3, [r7, #23]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d105      	bne.n	800c706 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6fa:	4b3d      	ldr	r3, [pc, #244]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fe:	4a3c      	ldr	r2, [pc, #240]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c704:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 80ae 	beq.w	800c86c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c710:	4b37      	ldr	r3, [pc, #220]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	f003 030c 	and.w	r3, r3, #12
 800c718:	2b08      	cmp	r3, #8
 800c71a:	d06d      	beq.n	800c7f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	2b02      	cmp	r3, #2
 800c722:	d14b      	bne.n	800c7bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c724:	4b32      	ldr	r3, [pc, #200]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a31      	ldr	r2, [pc, #196]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c72a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c72e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c730:	f7fb fd8a 	bl	8008248 <HAL_GetTick>
 800c734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c736:	e008      	b.n	800c74a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c738:	f7fb fd86 	bl	8008248 <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b02      	cmp	r3, #2
 800c744:	d901      	bls.n	800c74a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e091      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c74a:	4b29      	ldr	r3, [pc, #164]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f0      	bne.n	800c738 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	69da      	ldr	r2, [r3, #28]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	431a      	orrs	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c764:	019b      	lsls	r3, r3, #6
 800c766:	431a      	orrs	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	3b01      	subs	r3, #1
 800c770:	041b      	lsls	r3, r3, #16
 800c772:	431a      	orrs	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	061b      	lsls	r3, r3, #24
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c780:	071b      	lsls	r3, r3, #28
 800c782:	491b      	ldr	r1, [pc, #108]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c784:	4313      	orrs	r3, r2
 800c786:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c788:	4b19      	ldr	r3, [pc, #100]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a18      	ldr	r2, [pc, #96]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c78e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c794:	f7fb fd58 	bl	8008248 <HAL_GetTick>
 800c798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c79a:	e008      	b.n	800c7ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c79c:	f7fb fd54 	bl	8008248 <HAL_GetTick>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d901      	bls.n	800c7ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e05f      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7ae:	4b10      	ldr	r3, [pc, #64]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0f0      	beq.n	800c79c <HAL_RCC_OscConfig+0x47c>
 800c7ba:	e057      	b.n	800c86c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7bc:	4b0c      	ldr	r3, [pc, #48]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a0b      	ldr	r2, [pc, #44]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c7c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7c8:	f7fb fd3e 	bl	8008248 <HAL_GetTick>
 800c7cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7ce:	e008      	b.n	800c7e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7d0:	f7fb fd3a 	bl	8008248 <HAL_GetTick>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	1ad3      	subs	r3, r2, r3
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d901      	bls.n	800c7e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	e045      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7e2:	4b03      	ldr	r3, [pc, #12]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1f0      	bne.n	800c7d0 <HAL_RCC_OscConfig+0x4b0>
 800c7ee:	e03d      	b.n	800c86c <HAL_RCC_OscConfig+0x54c>
 800c7f0:	40023800 	.word	0x40023800
 800c7f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c7f8:	4b1f      	ldr	r3, [pc, #124]	; (800c878 <HAL_RCC_OscConfig+0x558>)
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d030      	beq.n	800c868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c810:	429a      	cmp	r2, r3
 800c812:	d129      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c81e:	429a      	cmp	r2, r3
 800c820:	d122      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c828:	4013      	ands	r3, r2
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c82e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c830:	4293      	cmp	r3, r2
 800c832:	d119      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83e:	085b      	lsrs	r3, r3, #1
 800c840:	3b01      	subs	r3, #1
 800c842:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c844:	429a      	cmp	r2, r3
 800c846:	d10f      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c852:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c854:	429a      	cmp	r2, r3
 800c856:	d107      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c862:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c864:	429a      	cmp	r2, r3
 800c866:	d001      	beq.n	800c86c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e000      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	40023800 	.word	0x40023800

0800c87c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	e0d0      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c894:	4b6a      	ldr	r3, [pc, #424]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f003 030f 	and.w	r3, r3, #15
 800c89c:	683a      	ldr	r2, [r7, #0]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d910      	bls.n	800c8c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8a2:	4b67      	ldr	r3, [pc, #412]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f023 020f 	bic.w	r2, r3, #15
 800c8aa:	4965      	ldr	r1, [pc, #404]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8b2:	4b63      	ldr	r3, [pc, #396]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f003 030f 	and.w	r3, r3, #15
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d001      	beq.n	800c8c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e0b8      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d020      	beq.n	800c912 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 0304 	and.w	r3, r3, #4
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d005      	beq.n	800c8e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c8dc:	4b59      	ldr	r3, [pc, #356]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	4a58      	ldr	r2, [pc, #352]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c8e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c8e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0308 	and.w	r3, r3, #8
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d005      	beq.n	800c900 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c8f4:	4b53      	ldr	r3, [pc, #332]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	4a52      	ldr	r2, [pc, #328]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c8fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c8fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c900:	4b50      	ldr	r3, [pc, #320]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	494d      	ldr	r1, [pc, #308]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c90e:	4313      	orrs	r3, r2
 800c910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d040      	beq.n	800c9a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d107      	bne.n	800c936 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c926:	4b47      	ldr	r3, [pc, #284]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d115      	bne.n	800c95e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	e07f      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d107      	bne.n	800c94e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c93e:	4b41      	ldr	r3, [pc, #260]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c946:	2b00      	cmp	r3, #0
 800c948:	d109      	bne.n	800c95e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	e073      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c94e:	4b3d      	ldr	r3, [pc, #244]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0302 	and.w	r3, r3, #2
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e06b      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c95e:	4b39      	ldr	r3, [pc, #228]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f023 0203 	bic.w	r2, r3, #3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	4936      	ldr	r1, [pc, #216]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c96c:	4313      	orrs	r3, r2
 800c96e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c970:	f7fb fc6a 	bl	8008248 <HAL_GetTick>
 800c974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c976:	e00a      	b.n	800c98e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c978:	f7fb fc66 	bl	8008248 <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	f241 3288 	movw	r2, #5000	; 0x1388
 800c986:	4293      	cmp	r3, r2
 800c988:	d901      	bls.n	800c98e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c98a:	2303      	movs	r3, #3
 800c98c:	e053      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c98e:	4b2d      	ldr	r3, [pc, #180]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	f003 020c 	and.w	r2, r3, #12
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d1eb      	bne.n	800c978 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c9a0:	4b27      	ldr	r3, [pc, #156]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 030f 	and.w	r3, r3, #15
 800c9a8:	683a      	ldr	r2, [r7, #0]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d210      	bcs.n	800c9d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9ae:	4b24      	ldr	r3, [pc, #144]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f023 020f 	bic.w	r2, r3, #15
 800c9b6:	4922      	ldr	r1, [pc, #136]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9be:	4b20      	ldr	r3, [pc, #128]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 030f 	and.w	r3, r3, #15
 800c9c6:	683a      	ldr	r2, [r7, #0]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d001      	beq.n	800c9d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e032      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 0304 	and.w	r3, r3, #4
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d008      	beq.n	800c9ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c9dc:	4b19      	ldr	r3, [pc, #100]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	4916      	ldr	r1, [pc, #88]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f003 0308 	and.w	r3, r3, #8
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d009      	beq.n	800ca0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c9fa:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	00db      	lsls	r3, r3, #3
 800ca08:	490e      	ldr	r1, [pc, #56]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ca0e:	f000 f885 	bl	800cb1c <HAL_RCC_GetSysClockFreq>
 800ca12:	4601      	mov	r1, r0
 800ca14:	4b0b      	ldr	r3, [pc, #44]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	091b      	lsrs	r3, r3, #4
 800ca1a:	f003 030f 	and.w	r3, r3, #15
 800ca1e:	4a0a      	ldr	r2, [pc, #40]	; (800ca48 <HAL_RCC_ClockConfig+0x1cc>)
 800ca20:	5cd3      	ldrb	r3, [r2, r3]
 800ca22:	fa21 f303 	lsr.w	r3, r1, r3
 800ca26:	4a09      	ldr	r2, [pc, #36]	; (800ca4c <HAL_RCC_ClockConfig+0x1d0>)
 800ca28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ca2a:	4b09      	ldr	r3, [pc, #36]	; (800ca50 <HAL_RCC_ClockConfig+0x1d4>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fb fbc6 	bl	80081c0 <HAL_InitTick>

  return HAL_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	40023c00 	.word	0x40023c00
 800ca44:	40023800 	.word	0x40023800
 800ca48:	08022880 	.word	0x08022880
 800ca4c:	2000005c 	.word	0x2000005c
 800ca50:	20000060 	.word	0x20000060

0800ca54 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08c      	sub	sp, #48	; 0x30
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d127      	bne.n	800cab6 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800ca66:	4b2a      	ldr	r3, [pc, #168]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800ca68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6a:	4a29      	ldr	r2, [pc, #164]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800ca6c:	f043 0301 	orr.w	r3, r3, #1
 800ca70:	6313      	str	r3, [r2, #48]	; 0x30
 800ca72:	4b27      	ldr	r3, [pc, #156]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800ca74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	61bb      	str	r3, [r7, #24]
 800ca7c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800ca7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca84:	2302      	movs	r3, #2
 800ca86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ca90:	2300      	movs	r3, #0
 800ca92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ca94:	f107 031c 	add.w	r3, r7, #28
 800ca98:	4619      	mov	r1, r3
 800ca9a:	481e      	ldr	r0, [pc, #120]	; (800cb14 <HAL_RCC_MCOConfig+0xc0>)
 800ca9c:	f7fc fd18 	bl	80094d0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800caa0:	4b1b      	ldr	r3, [pc, #108]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800caa8:	68b9      	ldr	r1, [r7, #8]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	430b      	orrs	r3, r1
 800caae:	4918      	ldr	r1, [pc, #96]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cab0:	4313      	orrs	r3, r2
 800cab2:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800cab4:	e027      	b.n	800cb06 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800cab6:	4b16      	ldr	r3, [pc, #88]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caba:	4a15      	ldr	r2, [pc, #84]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cabc:	f043 0304 	orr.w	r3, r3, #4
 800cac0:	6313      	str	r3, [r2, #48]	; 0x30
 800cac2:	4b13      	ldr	r3, [pc, #76]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac6:	f003 0304 	and.w	r3, r3, #4
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800cace:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cad4:	2302      	movs	r3, #2
 800cad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cad8:	2303      	movs	r3, #3
 800cada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cadc:	2300      	movs	r3, #0
 800cade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800cae0:	2300      	movs	r3, #0
 800cae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800cae4:	f107 031c 	add.w	r3, r7, #28
 800cae8:	4619      	mov	r1, r3
 800caea:	480b      	ldr	r0, [pc, #44]	; (800cb18 <HAL_RCC_MCOConfig+0xc4>)
 800caec:	f7fc fcf0 	bl	80094d0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	00d9      	lsls	r1, r3, #3
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	430b      	orrs	r3, r1
 800cb00:	4903      	ldr	r1, [pc, #12]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cb02:	4313      	orrs	r3, r2
 800cb04:	608b      	str	r3, [r1, #8]
}
 800cb06:	bf00      	nop
 800cb08:	3730      	adds	r7, #48	; 0x30
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	40023800 	.word	0x40023800
 800cb14:	40020000 	.word	0x40020000
 800cb18:	40020800 	.word	0x40020800

0800cb1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb1e:	b085      	sub	sp, #20
 800cb20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	607b      	str	r3, [r7, #4]
 800cb26:	2300      	movs	r3, #0
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cb32:	4b50      	ldr	r3, [pc, #320]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f003 030c 	and.w	r3, r3, #12
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	d007      	beq.n	800cb4e <HAL_RCC_GetSysClockFreq+0x32>
 800cb3e:	2b08      	cmp	r3, #8
 800cb40:	d008      	beq.n	800cb54 <HAL_RCC_GetSysClockFreq+0x38>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f040 808d 	bne.w	800cc62 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cb48:	4b4b      	ldr	r3, [pc, #300]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cb4a:	60bb      	str	r3, [r7, #8]
      break;
 800cb4c:	e08c      	b.n	800cc68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cb4e:	4b4b      	ldr	r3, [pc, #300]	; (800cc7c <HAL_RCC_GetSysClockFreq+0x160>)
 800cb50:	60bb      	str	r3, [r7, #8]
      break;
 800cb52:	e089      	b.n	800cc68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cb54:	4b47      	ldr	r3, [pc, #284]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cb5e:	4b45      	ldr	r3, [pc, #276]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d023      	beq.n	800cbb2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb6a:	4b42      	ldr	r3, [pc, #264]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	099b      	lsrs	r3, r3, #6
 800cb70:	f04f 0400 	mov.w	r4, #0
 800cb74:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cb78:	f04f 0200 	mov.w	r2, #0
 800cb7c:	ea03 0501 	and.w	r5, r3, r1
 800cb80:	ea04 0602 	and.w	r6, r4, r2
 800cb84:	4a3d      	ldr	r2, [pc, #244]	; (800cc7c <HAL_RCC_GetSysClockFreq+0x160>)
 800cb86:	fb02 f106 	mul.w	r1, r2, r6
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	fb02 f205 	mul.w	r2, r2, r5
 800cb90:	440a      	add	r2, r1
 800cb92:	493a      	ldr	r1, [pc, #232]	; (800cc7c <HAL_RCC_GetSysClockFreq+0x160>)
 800cb94:	fba5 0101 	umull	r0, r1, r5, r1
 800cb98:	1853      	adds	r3, r2, r1
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f04f 0400 	mov.w	r4, #0
 800cba2:	461a      	mov	r2, r3
 800cba4:	4623      	mov	r3, r4
 800cba6:	f7f3 fd6f 	bl	8000688 <__aeabi_uldivmod>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	460c      	mov	r4, r1
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	e049      	b.n	800cc46 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cbb2:	4b30      	ldr	r3, [pc, #192]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	099b      	lsrs	r3, r3, #6
 800cbb8:	f04f 0400 	mov.w	r4, #0
 800cbbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cbc0:	f04f 0200 	mov.w	r2, #0
 800cbc4:	ea03 0501 	and.w	r5, r3, r1
 800cbc8:	ea04 0602 	and.w	r6, r4, r2
 800cbcc:	4629      	mov	r1, r5
 800cbce:	4632      	mov	r2, r6
 800cbd0:	f04f 0300 	mov.w	r3, #0
 800cbd4:	f04f 0400 	mov.w	r4, #0
 800cbd8:	0154      	lsls	r4, r2, #5
 800cbda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cbde:	014b      	lsls	r3, r1, #5
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4622      	mov	r2, r4
 800cbe4:	1b49      	subs	r1, r1, r5
 800cbe6:	eb62 0206 	sbc.w	r2, r2, r6
 800cbea:	f04f 0300 	mov.w	r3, #0
 800cbee:	f04f 0400 	mov.w	r4, #0
 800cbf2:	0194      	lsls	r4, r2, #6
 800cbf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cbf8:	018b      	lsls	r3, r1, #6
 800cbfa:	1a5b      	subs	r3, r3, r1
 800cbfc:	eb64 0402 	sbc.w	r4, r4, r2
 800cc00:	f04f 0100 	mov.w	r1, #0
 800cc04:	f04f 0200 	mov.w	r2, #0
 800cc08:	00e2      	lsls	r2, r4, #3
 800cc0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cc0e:	00d9      	lsls	r1, r3, #3
 800cc10:	460b      	mov	r3, r1
 800cc12:	4614      	mov	r4, r2
 800cc14:	195b      	adds	r3, r3, r5
 800cc16:	eb44 0406 	adc.w	r4, r4, r6
 800cc1a:	f04f 0100 	mov.w	r1, #0
 800cc1e:	f04f 0200 	mov.w	r2, #0
 800cc22:	02a2      	lsls	r2, r4, #10
 800cc24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cc28:	0299      	lsls	r1, r3, #10
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4614      	mov	r4, r2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	4621      	mov	r1, r4
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f04f 0400 	mov.w	r4, #0
 800cc38:	461a      	mov	r2, r3
 800cc3a:	4623      	mov	r3, r4
 800cc3c:	f7f3 fd24 	bl	8000688 <__aeabi_uldivmod>
 800cc40:	4603      	mov	r3, r0
 800cc42:	460c      	mov	r4, r1
 800cc44:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cc46:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	0c1b      	lsrs	r3, r3, #16
 800cc4c:	f003 0303 	and.w	r3, r3, #3
 800cc50:	3301      	adds	r3, #1
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc5e:	60bb      	str	r3, [r7, #8]
      break;
 800cc60:	e002      	b.n	800cc68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cc62:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cc64:	60bb      	str	r3, [r7, #8]
      break;
 800cc66:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cc68:	68bb      	ldr	r3, [r7, #8]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc72:	bf00      	nop
 800cc74:	40023800 	.word	0x40023800
 800cc78:	00f42400 	.word	0x00f42400
 800cc7c:	01312d00 	.word	0x01312d00

0800cc80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc80:	b480      	push	{r7}
 800cc82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc84:	4b03      	ldr	r3, [pc, #12]	; (800cc94 <HAL_RCC_GetHCLKFreq+0x14>)
 800cc86:	681b      	ldr	r3, [r3, #0]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	2000005c 	.word	0x2000005c

0800cc98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cc9c:	f7ff fff0 	bl	800cc80 <HAL_RCC_GetHCLKFreq>
 800cca0:	4601      	mov	r1, r0
 800cca2:	4b05      	ldr	r3, [pc, #20]	; (800ccb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	0a9b      	lsrs	r3, r3, #10
 800cca8:	f003 0307 	and.w	r3, r3, #7
 800ccac:	4a03      	ldr	r2, [pc, #12]	; (800ccbc <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccae:	5cd3      	ldrb	r3, [r2, r3]
 800ccb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	40023800 	.word	0x40023800
 800ccbc:	08022890 	.word	0x08022890

0800ccc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ccc4:	f7ff ffdc 	bl	800cc80 <HAL_RCC_GetHCLKFreq>
 800ccc8:	4601      	mov	r1, r0
 800ccca:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	0b5b      	lsrs	r3, r3, #13
 800ccd0:	f003 0307 	and.w	r3, r3, #7
 800ccd4:	4a03      	ldr	r2, [pc, #12]	; (800cce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ccd6:	5cd3      	ldrb	r3, [r2, r3]
 800ccd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	40023800 	.word	0x40023800
 800cce4:	08022890 	.word	0x08022890

0800cce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b088      	sub	sp, #32
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cd00:	2300      	movs	r3, #0
 800cd02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d012      	beq.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cd10:	4b69      	ldr	r3, [pc, #420]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	4a68      	ldr	r2, [pc, #416]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cd1a:	6093      	str	r3, [r2, #8]
 800cd1c:	4b66      	ldr	r3, [pc, #408]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd1e:	689a      	ldr	r2, [r3, #8]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd24:	4964      	ldr	r1, [pc, #400]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd26:	4313      	orrs	r3, r2
 800cd28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cd32:	2301      	movs	r3, #1
 800cd34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d017      	beq.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd42:	4b5d      	ldr	r3, [pc, #372]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd50:	4959      	ldr	r1, [pc, #356]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd52:	4313      	orrs	r3, r2
 800cd54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd60:	d101      	bne.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cd62:	2301      	movs	r3, #1
 800cd64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d017      	beq.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cd7e:	4b4e      	ldr	r3, [pc, #312]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8c:	494a      	ldr	r1, [pc, #296]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd9c:	d101      	bne.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 0320 	and.w	r3, r3, #32
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 808b 	beq.w	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cdcc:	4b3a      	ldr	r3, [pc, #232]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd0:	4a39      	ldr	r2, [pc, #228]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdd6:	6413      	str	r3, [r2, #64]	; 0x40
 800cdd8:	4b37      	ldr	r3, [pc, #220]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cde0:	60bb      	str	r3, [r7, #8]
 800cde2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cde4:	4b35      	ldr	r3, [pc, #212]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a34      	ldr	r2, [pc, #208]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cdea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdf0:	f7fb fa2a 	bl	8008248 <HAL_GetTick>
 800cdf4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cdf6:	e008      	b.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdf8:	f7fb fa26 	bl	8008248 <HAL_GetTick>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	2b64      	cmp	r3, #100	; 0x64
 800ce04:	d901      	bls.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	e38d      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce0a:	4b2c      	ldr	r3, [pc, #176]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d0f0      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ce16:	4b28      	ldr	r3, [pc, #160]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d035      	beq.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d02e      	beq.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ce34:	4b20      	ldr	r3, [pc, #128]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ce3e:	4b1e      	ldr	r3, [pc, #120]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce42:	4a1d      	ldr	r2, [pc, #116]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ce4a:	4b1b      	ldr	r3, [pc, #108]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce4e:	4a1a      	ldr	r2, [pc, #104]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ce56:	4a18      	ldr	r2, [pc, #96]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ce5c:	4b16      	ldr	r3, [pc, #88]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce60:	f003 0301 	and.w	r3, r3, #1
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d114      	bne.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce68:	f7fb f9ee 	bl	8008248 <HAL_GetTick>
 800ce6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce6e:	e00a      	b.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce70:	f7fb f9ea 	bl	8008248 <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d901      	bls.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ce82:	2303      	movs	r3, #3
 800ce84:	e34f      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce86:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8a:	f003 0302 	and.w	r3, r3, #2
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0ee      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce9e:	d111      	bne.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cea0:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ceac:	4b04      	ldr	r3, [pc, #16]	; (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ceae:	400b      	ands	r3, r1
 800ceb0:	4901      	ldr	r1, [pc, #4]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	608b      	str	r3, [r1, #8]
 800ceb6:	e00b      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ceb8:	40023800 	.word	0x40023800
 800cebc:	40007000 	.word	0x40007000
 800cec0:	0ffffcff 	.word	0x0ffffcff
 800cec4:	4bb3      	ldr	r3, [pc, #716]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	4ab2      	ldr	r2, [pc, #712]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ceca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cece:	6093      	str	r3, [r2, #8]
 800ced0:	4bb0      	ldr	r3, [pc, #704]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ced2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cedc:	49ad      	ldr	r1, [pc, #692]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cede:	4313      	orrs	r3, r2
 800cee0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0310 	and.w	r3, r3, #16
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d010      	beq.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ceee:	4ba9      	ldr	r3, [pc, #676]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cef4:	4aa7      	ldr	r2, [pc, #668]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cefa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cefe:	4ba5      	ldr	r3, [pc, #660]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf08:	49a2      	ldr	r1, [pc, #648]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00a      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf1c:	4b9d      	ldr	r3, [pc, #628]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf2a:	499a      	ldr	r1, [pc, #616]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00a      	beq.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf3e:	4b95      	ldr	r3, [pc, #596]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf4c:	4991      	ldr	r1, [pc, #580]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00a      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf60:	4b8c      	ldr	r3, [pc, #560]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf6e:	4989      	ldr	r1, [pc, #548]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf70:	4313      	orrs	r3, r2
 800cf72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00a      	beq.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf82:	4b84      	ldr	r3, [pc, #528]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf90:	4980      	ldr	r1, [pc, #512]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00a      	beq.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cfa4:	4b7b      	ldr	r3, [pc, #492]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfaa:	f023 0203 	bic.w	r2, r3, #3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb2:	4978      	ldr	r1, [pc, #480]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00a      	beq.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cfc6:	4b73      	ldr	r3, [pc, #460]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfcc:	f023 020c 	bic.w	r2, r3, #12
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfd4:	496f      	ldr	r1, [pc, #444]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00a      	beq.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cfe8:	4b6a      	ldr	r3, [pc, #424]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cff6:	4967      	ldr	r1, [pc, #412]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cff8:	4313      	orrs	r3, r2
 800cffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00a      	beq.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d00a:	4b62      	ldr	r3, [pc, #392]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d010:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d018:	495e      	ldr	r1, [pc, #376]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d01a:	4313      	orrs	r3, r2
 800d01c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00a      	beq.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d02c:	4b59      	ldr	r3, [pc, #356]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d03a:	4956      	ldr	r1, [pc, #344]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d03c:	4313      	orrs	r3, r2
 800d03e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00a      	beq.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d04e:	4b51      	ldr	r3, [pc, #324]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d054:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d05c:	494d      	ldr	r1, [pc, #308]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d05e:	4313      	orrs	r3, r2
 800d060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00a      	beq.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d070:	4b48      	ldr	r3, [pc, #288]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d076:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d07e:	4945      	ldr	r1, [pc, #276]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d080:	4313      	orrs	r3, r2
 800d082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00a      	beq.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d092:	4b40      	ldr	r3, [pc, #256]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d098:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0a0:	493c      	ldr	r1, [pc, #240]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00a      	beq.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d0b4:	4b37      	ldr	r3, [pc, #220]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0c2:	4934      	ldr	r1, [pc, #208]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d011      	beq.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d0d6:	4b2f      	ldr	r3, [pc, #188]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e4:	492b      	ldr	r1, [pc, #172]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0f4:	d101      	bne.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 0308 	and.w	r3, r3, #8
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d106:	2301      	movs	r3, #1
 800d108:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00a      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d116:	4b1f      	ldr	r3, [pc, #124]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d11c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d124:	491b      	ldr	r1, [pc, #108]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d126:	4313      	orrs	r3, r2
 800d128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00b      	beq.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d138:	4b16      	ldr	r3, [pc, #88]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d13e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d148:	4912      	ldr	r1, [pc, #72]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d14a:	4313      	orrs	r3, r2
 800d14c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d15c:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d162:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d16c:	4909      	ldr	r1, [pc, #36]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d16e:	4313      	orrs	r3, r2
 800d170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00f      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d180:	4b04      	ldr	r3, [pc, #16]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d186:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d190:	e002      	b.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800d192:	bf00      	nop
 800d194:	40023800 	.word	0x40023800
 800d198:	4985      	ldr	r1, [pc, #532]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d19a:	4313      	orrs	r3, r2
 800d19c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00b      	beq.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d1ac:	4b80      	ldr	r3, [pc, #512]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1bc:	497c      	ldr	r1, [pc, #496]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d005      	beq.n	800d1d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1d2:	f040 80d6 	bne.w	800d382 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d1d6:	4b76      	ldr	r3, [pc, #472]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a75      	ldr	r2, [pc, #468]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1e2:	f7fb f831 	bl	8008248 <HAL_GetTick>
 800d1e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1e8:	e008      	b.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d1ea:	f7fb f82d 	bl	8008248 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	2b64      	cmp	r3, #100	; 0x64
 800d1f6:	d901      	bls.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	e194      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1fc:	4b6c      	ldr	r3, [pc, #432]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1f0      	bne.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 0301 	and.w	r3, r3, #1
 800d210:	2b00      	cmp	r3, #0
 800d212:	d021      	beq.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d11d      	bne.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d21c:	4b64      	ldr	r3, [pc, #400]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d222:	0c1b      	lsrs	r3, r3, #16
 800d224:	f003 0303 	and.w	r3, r3, #3
 800d228:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d22a:	4b61      	ldr	r3, [pc, #388]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d230:	0e1b      	lsrs	r3, r3, #24
 800d232:	f003 030f 	and.w	r3, r3, #15
 800d236:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	019a      	lsls	r2, r3, #6
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	041b      	lsls	r3, r3, #16
 800d242:	431a      	orrs	r2, r3
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	061b      	lsls	r3, r3, #24
 800d248:	431a      	orrs	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	071b      	lsls	r3, r3, #28
 800d250:	4957      	ldr	r1, [pc, #348]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d252:	4313      	orrs	r3, r2
 800d254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d004      	beq.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d26c:	d00a      	beq.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d276:	2b00      	cmp	r3, #0
 800d278:	d02e      	beq.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d282:	d129      	bne.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d284:	4b4a      	ldr	r3, [pc, #296]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d28a:	0c1b      	lsrs	r3, r3, #16
 800d28c:	f003 0303 	and.w	r3, r3, #3
 800d290:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d292:	4b47      	ldr	r3, [pc, #284]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d298:	0f1b      	lsrs	r3, r3, #28
 800d29a:	f003 0307 	and.w	r3, r3, #7
 800d29e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	019a      	lsls	r2, r3, #6
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	041b      	lsls	r3, r3, #16
 800d2aa:	431a      	orrs	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	061b      	lsls	r3, r3, #24
 800d2b2:	431a      	orrs	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	071b      	lsls	r3, r3, #28
 800d2b8:	493d      	ldr	r1, [pc, #244]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d2c0:	4b3b      	ldr	r3, [pc, #236]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2c6:	f023 021f 	bic.w	r2, r3, #31
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	4937      	ldr	r1, [pc, #220]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d01d      	beq.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d2e4:	4b32      	ldr	r3, [pc, #200]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2ea:	0e1b      	lsrs	r3, r3, #24
 800d2ec:	f003 030f 	and.w	r3, r3, #15
 800d2f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d2f2:	4b2f      	ldr	r3, [pc, #188]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2f8:	0f1b      	lsrs	r3, r3, #28
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	019a      	lsls	r2, r3, #6
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	041b      	lsls	r3, r3, #16
 800d30c:	431a      	orrs	r2, r3
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	061b      	lsls	r3, r3, #24
 800d312:	431a      	orrs	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	071b      	lsls	r3, r3, #28
 800d318:	4925      	ldr	r1, [pc, #148]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d31a:	4313      	orrs	r3, r2
 800d31c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d011      	beq.n	800d350 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	019a      	lsls	r2, r3, #6
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	041b      	lsls	r3, r3, #16
 800d338:	431a      	orrs	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	061b      	lsls	r3, r3, #24
 800d340:	431a      	orrs	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	071b      	lsls	r3, r3, #28
 800d348:	4919      	ldr	r1, [pc, #100]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d34a:	4313      	orrs	r3, r2
 800d34c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d350:	4b17      	ldr	r3, [pc, #92]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a16      	ldr	r2, [pc, #88]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d356:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d35a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d35c:	f7fa ff74 	bl	8008248 <HAL_GetTick>
 800d360:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d362:	e008      	b.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d364:	f7fa ff70 	bl	8008248 <HAL_GetTick>
 800d368:	4602      	mov	r2, r0
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	2b64      	cmp	r3, #100	; 0x64
 800d370:	d901      	bls.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d372:	2303      	movs	r3, #3
 800d374:	e0d7      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d376:	4b0e      	ldr	r3, [pc, #56]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0f0      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	2b01      	cmp	r3, #1
 800d386:	f040 80cd 	bne.w	800d524 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d38a:	4b09      	ldr	r3, [pc, #36]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a08      	ldr	r2, [pc, #32]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d396:	f7fa ff57 	bl	8008248 <HAL_GetTick>
 800d39a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d39c:	e00a      	b.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d39e:	f7fa ff53 	bl	8008248 <HAL_GetTick>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	2b64      	cmp	r3, #100	; 0x64
 800d3aa:	d903      	bls.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e0ba      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d3b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3b4:	4b5e      	ldr	r3, [pc, #376]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3c0:	d0ed      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d009      	beq.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d02e      	beq.n	800d440 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d12a      	bne.n	800d440 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d3ea:	4b51      	ldr	r3, [pc, #324]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3f0:	0c1b      	lsrs	r3, r3, #16
 800d3f2:	f003 0303 	and.w	r3, r3, #3
 800d3f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d3f8:	4b4d      	ldr	r3, [pc, #308]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3fe:	0f1b      	lsrs	r3, r3, #28
 800d400:	f003 0307 	and.w	r3, r3, #7
 800d404:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	019a      	lsls	r2, r3, #6
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	041b      	lsls	r3, r3, #16
 800d410:	431a      	orrs	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	061b      	lsls	r3, r3, #24
 800d418:	431a      	orrs	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	071b      	lsls	r3, r3, #28
 800d41e:	4944      	ldr	r1, [pc, #272]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d420:	4313      	orrs	r3, r2
 800d422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d426:	4b42      	ldr	r3, [pc, #264]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d42c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d434:	3b01      	subs	r3, #1
 800d436:	021b      	lsls	r3, r3, #8
 800d438:	493d      	ldr	r1, [pc, #244]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d43a:	4313      	orrs	r3, r2
 800d43c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d022      	beq.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d454:	d11d      	bne.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d456:	4b36      	ldr	r3, [pc, #216]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d45c:	0e1b      	lsrs	r3, r3, #24
 800d45e:	f003 030f 	and.w	r3, r3, #15
 800d462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d464:	4b32      	ldr	r3, [pc, #200]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d46a:	0f1b      	lsrs	r3, r3, #28
 800d46c:	f003 0307 	and.w	r3, r3, #7
 800d470:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	695b      	ldr	r3, [r3, #20]
 800d476:	019a      	lsls	r2, r3, #6
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a1b      	ldr	r3, [r3, #32]
 800d47c:	041b      	lsls	r3, r3, #16
 800d47e:	431a      	orrs	r2, r3
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	061b      	lsls	r3, r3, #24
 800d484:	431a      	orrs	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	071b      	lsls	r3, r3, #28
 800d48a:	4929      	ldr	r1, [pc, #164]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d48c:	4313      	orrs	r3, r2
 800d48e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f003 0308 	and.w	r3, r3, #8
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d028      	beq.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d49e:	4b24      	ldr	r3, [pc, #144]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4a4:	0e1b      	lsrs	r3, r3, #24
 800d4a6:	f003 030f 	and.w	r3, r3, #15
 800d4aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d4ac:	4b20      	ldr	r3, [pc, #128]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b2:	0c1b      	lsrs	r3, r3, #16
 800d4b4:	f003 0303 	and.w	r3, r3, #3
 800d4b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	019a      	lsls	r2, r3, #6
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	041b      	lsls	r3, r3, #16
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	061b      	lsls	r3, r3, #24
 800d4ca:	431a      	orrs	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	69db      	ldr	r3, [r3, #28]
 800d4d0:	071b      	lsls	r3, r3, #28
 800d4d2:	4917      	ldr	r1, [pc, #92]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d4da:	4b15      	ldr	r3, [pc, #84]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	4911      	ldr	r1, [pc, #68]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d4f0:	4b0f      	ldr	r3, [pc, #60]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a0e      	ldr	r2, [pc, #56]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4fc:	f7fa fea4 	bl	8008248 <HAL_GetTick>
 800d500:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d502:	e008      	b.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d504:	f7fa fea0 	bl	8008248 <HAL_GetTick>
 800d508:	4602      	mov	r2, r0
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	2b64      	cmp	r3, #100	; 0x64
 800d510:	d901      	bls.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d512:	2303      	movs	r3, #3
 800d514:	e007      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d516:	4b06      	ldr	r3, [pc, #24]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d51e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d522:	d1ef      	bne.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3720      	adds	r7, #32
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	40023800 	.word	0x40023800

0800d534 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	e06b      	b.n	800d61e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	7f5b      	ldrb	r3, [r3, #29]
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d105      	bne.n	800d55c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7f9 ff20 	bl	800739c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2202      	movs	r2, #2
 800d560:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	22ca      	movs	r2, #202	; 0xca
 800d568:	625a      	str	r2, [r3, #36]	; 0x24
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2253      	movs	r2, #83	; 0x53
 800d570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 fa96 	bl	800daa4 <RTC_EnterInitMode>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d008      	beq.n	800d590 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	22ff      	movs	r2, #255	; 0xff
 800d584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2204      	movs	r2, #4
 800d58a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	e046      	b.n	800d61e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6899      	ldr	r1, [r3, #8]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4b23      	ldr	r3, [pc, #140]	; (800d628 <HAL_RTC_Init+0xf4>)
 800d59c:	400b      	ands	r3, r1
 800d59e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	6899      	ldr	r1, [r3, #8]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685a      	ldr	r2, [r3, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	431a      	orrs	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	695b      	ldr	r3, [r3, #20]
 800d5b4:	431a      	orrs	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	430a      	orrs	r2, r1
 800d5bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	68d2      	ldr	r2, [r2, #12]
 800d5c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6919      	ldr	r1, [r3, #16]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	041a      	lsls	r2, r3, #16
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	430a      	orrs	r2, r1
 800d5da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	68da      	ldr	r2, [r3, #12]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5ea:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f022 0208 	bic.w	r2, r2, #8
 800d5fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	699a      	ldr	r2, [r3, #24]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	430a      	orrs	r2, r1
 800d60c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	22ff      	movs	r2, #255	; 0xff
 800d614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d61c:	2300      	movs	r3, #0
  }
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	ff8fffbf 	.word	0xff8fffbf

0800d62c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d62c:	b590      	push	{r4, r7, lr}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d638:	2300      	movs	r3, #0
 800d63a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	7f1b      	ldrb	r3, [r3, #28]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d101      	bne.n	800d648 <HAL_RTC_SetTime+0x1c>
 800d644:	2302      	movs	r3, #2
 800d646:	e0a8      	b.n	800d79a <HAL_RTC_SetTime+0x16e>
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2201      	movs	r2, #1
 800d64c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2202      	movs	r2, #2
 800d652:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d126      	bne.n	800d6a8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	2200      	movs	r2, #0
 800d66c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	4618      	mov	r0, r3
 800d674:	f000 fa42 	bl	800dafc <RTC_ByteToBcd2>
 800d678:	4603      	mov	r3, r0
 800d67a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	785b      	ldrb	r3, [r3, #1]
 800d680:	4618      	mov	r0, r3
 800d682:	f000 fa3b 	bl	800dafc <RTC_ByteToBcd2>
 800d686:	4603      	mov	r3, r0
 800d688:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d68a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	789b      	ldrb	r3, [r3, #2]
 800d690:	4618      	mov	r0, r3
 800d692:	f000 fa33 	bl	800dafc <RTC_ByteToBcd2>
 800d696:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800d698:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	7b1b      	ldrb	r3, [r3, #12]
 800d6a0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	617b      	str	r3, [r7, #20]
 800d6a6:	e018      	b.n	800d6da <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d102      	bne.n	800d6bc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	785b      	ldrb	r3, [r3, #1]
 800d6c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d6c8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d6ce:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	7b1b      	ldrb	r3, [r3, #12]
 800d6d4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	22ca      	movs	r2, #202	; 0xca
 800d6e0:	625a      	str	r2, [r3, #36]	; 0x24
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2253      	movs	r2, #83	; 0x53
 800d6e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f000 f9da 	bl	800daa4 <RTC_EnterInitMode>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00b      	beq.n	800d70e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	22ff      	movs	r2, #255	; 0xff
 800d6fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2204      	movs	r2, #4
 800d702:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2200      	movs	r2, #0
 800d708:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d70a:	2301      	movs	r3, #1
 800d70c:	e045      	b.n	800d79a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	6979      	ldr	r1, [r7, #20]
 800d714:	4b23      	ldr	r3, [pc, #140]	; (800d7a4 <HAL_RTC_SetTime+0x178>)
 800d716:	400b      	ands	r3, r1
 800d718:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	689a      	ldr	r2, [r3, #8]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d728:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6899      	ldr	r1, [r3, #8]
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	691a      	ldr	r2, [r3, #16]
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	431a      	orrs	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	430a      	orrs	r2, r1
 800d740:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68da      	ldr	r2, [r3, #12]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d750:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f003 0320 	and.w	r3, r3, #32
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d111      	bne.n	800d784 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 f977 	bl	800da54 <HAL_RTC_WaitForSynchro>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00b      	beq.n	800d784 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	22ff      	movs	r2, #255	; 0xff
 800d772:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2204      	movs	r2, #4
 800d778:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2200      	movs	r2, #0
 800d77e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	e00a      	b.n	800d79a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	22ff      	movs	r2, #255	; 0xff
 800d78a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2201      	movs	r2, #1
 800d790:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d798:	2300      	movs	r3, #0
  }
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd90      	pop	{r4, r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	007f7f7f 	.word	0x007f7f7f

0800d7a8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	4b22      	ldr	r3, [pc, #136]	; (800d860 <HAL_RTC_GetTime+0xb8>)
 800d7d8:	4013      	ands	r3, r2
 800d7da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	0c1b      	lsrs	r3, r3, #16
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	0a1b      	lsrs	r3, r3, #8
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d804:	b2da      	uxtb	r2, r3
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	0c1b      	lsrs	r3, r3, #16
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d814:	b2da      	uxtb	r2, r3
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d11a      	bne.n	800d856 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	4618      	mov	r0, r3
 800d826:	f000 f987 	bl	800db38 <RTC_Bcd2ToByte>
 800d82a:	4603      	mov	r3, r0
 800d82c:	461a      	mov	r2, r3
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	785b      	ldrb	r3, [r3, #1]
 800d836:	4618      	mov	r0, r3
 800d838:	f000 f97e 	bl	800db38 <RTC_Bcd2ToByte>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	789b      	ldrb	r3, [r3, #2]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 f975 	bl	800db38 <RTC_Bcd2ToByte>
 800d84e:	4603      	mov	r3, r0
 800d850:	461a      	mov	r2, r3
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3718      	adds	r7, #24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	007f7f7f 	.word	0x007f7f7f

0800d864 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d864:	b590      	push	{r4, r7, lr}
 800d866:	b087      	sub	sp, #28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800d870:	2300      	movs	r3, #0
 800d872:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	7f1b      	ldrb	r3, [r3, #28]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d101      	bne.n	800d880 <HAL_RTC_SetDate+0x1c>
 800d87c:	2302      	movs	r3, #2
 800d87e:	e092      	b.n	800d9a6 <HAL_RTC_SetDate+0x142>
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2201      	movs	r2, #1
 800d884:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2202      	movs	r2, #2
 800d88a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d10e      	bne.n	800d8b0 <HAL_RTC_SetDate+0x4c>
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	785b      	ldrb	r3, [r3, #1]
 800d896:	f003 0310 	and.w	r3, r3, #16
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d008      	beq.n	800d8b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	785b      	ldrb	r3, [r3, #1]
 800d8a2:	f023 0310 	bic.w	r3, r3, #16
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	330a      	adds	r3, #10
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d11c      	bne.n	800d8f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	78db      	ldrb	r3, [r3, #3]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f91e 	bl	800dafc <RTC_ByteToBcd2>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	785b      	ldrb	r3, [r3, #1]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f000 f917 	bl	800dafc <RTC_ByteToBcd2>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d8d2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	789b      	ldrb	r3, [r3, #2]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 f90f 	bl	800dafc <RTC_ByteToBcd2>
 800d8de:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800d8e0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	617b      	str	r3, [r7, #20]
 800d8ee:	e00e      	b.n	800d90e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	78db      	ldrb	r3, [r3, #3]
 800d8f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	785b      	ldrb	r3, [r3, #1]
 800d8fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d8fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800d902:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800d90a:	4313      	orrs	r3, r2
 800d90c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	22ca      	movs	r2, #202	; 0xca
 800d914:	625a      	str	r2, [r3, #36]	; 0x24
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2253      	movs	r2, #83	; 0x53
 800d91c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f000 f8c0 	bl	800daa4 <RTC_EnterInitMode>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00b      	beq.n	800d942 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	22ff      	movs	r2, #255	; 0xff
 800d930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2204      	movs	r2, #4
 800d936:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e031      	b.n	800d9a6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	6979      	ldr	r1, [r7, #20]
 800d948:	4b19      	ldr	r3, [pc, #100]	; (800d9b0 <HAL_RTC_SetDate+0x14c>)
 800d94a:	400b      	ands	r3, r1
 800d94c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d95c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	f003 0320 	and.w	r3, r3, #32
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d111      	bne.n	800d990 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f000 f871 	bl	800da54 <HAL_RTC_WaitForSynchro>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00b      	beq.n	800d990 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	22ff      	movs	r2, #255	; 0xff
 800d97e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2204      	movs	r2, #4
 800d984:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2200      	movs	r2, #0
 800d98a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d98c:	2301      	movs	r3, #1
 800d98e:	e00a      	b.n	800d9a6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	22ff      	movs	r2, #255	; 0xff
 800d996:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2201      	movs	r2, #1
 800d99c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
  }
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	371c      	adds	r7, #28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd90      	pop	{r4, r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	00ffff3f 	.word	0x00ffff3f

0800d9b4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	685a      	ldr	r2, [r3, #4]
 800d9ca:	4b21      	ldr	r3, [pc, #132]	; (800da50 <HAL_RTC_GetDate+0x9c>)
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	0c1b      	lsrs	r3, r3, #16
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	0a1b      	lsrs	r3, r3, #8
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	f003 031f 	and.w	r3, r3, #31
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	0b5b      	lsrs	r3, r3, #13
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 0307 	and.w	r3, r3, #7
 800da02:	b2da      	uxtb	r2, r3
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d11a      	bne.n	800da44 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	78db      	ldrb	r3, [r3, #3]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f890 	bl	800db38 <RTC_Bcd2ToByte>
 800da18:	4603      	mov	r3, r0
 800da1a:	461a      	mov	r2, r3
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	785b      	ldrb	r3, [r3, #1]
 800da24:	4618      	mov	r0, r3
 800da26:	f000 f887 	bl	800db38 <RTC_Bcd2ToByte>
 800da2a:	4603      	mov	r3, r0
 800da2c:	461a      	mov	r2, r3
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	789b      	ldrb	r3, [r3, #2]
 800da36:	4618      	mov	r0, r3
 800da38:	f000 f87e 	bl	800db38 <RTC_Bcd2ToByte>
 800da3c:	4603      	mov	r3, r0
 800da3e:	461a      	mov	r2, r3
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	00ffff3f 	.word	0x00ffff3f

0800da54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68da      	ldr	r2, [r3, #12]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800da6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800da70:	f7fa fbea 	bl	8008248 <HAL_GetTick>
 800da74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800da76:	e009      	b.n	800da8c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800da78:	f7fa fbe6 	bl	8008248 <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da86:	d901      	bls.n	800da8c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800da88:	2303      	movs	r3, #3
 800da8a:	e007      	b.n	800da9c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	f003 0320 	and.w	r3, r3, #32
 800da96:	2b00      	cmp	r3, #0
 800da98:	d0ee      	beq.n	800da78 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800daac:	2300      	movs	r3, #0
 800daae:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d119      	bne.n	800daf2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f04f 32ff 	mov.w	r2, #4294967295
 800dac6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800dac8:	f7fa fbbe 	bl	8008248 <HAL_GetTick>
 800dacc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800dace:	e009      	b.n	800dae4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dad0:	f7fa fbba 	bl	8008248 <HAL_GetTick>
 800dad4:	4602      	mov	r2, r0
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dade:	d901      	bls.n	800dae4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800dae0:	2303      	movs	r3, #3
 800dae2:	e007      	b.n	800daf4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d0ee      	beq.n	800dad0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800db0a:	e005      	b.n	800db18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3301      	adds	r3, #1
 800db10:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800db12:	79fb      	ldrb	r3, [r7, #7]
 800db14:	3b0a      	subs	r3, #10
 800db16:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800db18:	79fb      	ldrb	r3, [r7, #7]
 800db1a:	2b09      	cmp	r3, #9
 800db1c:	d8f6      	bhi.n	800db0c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	b2db      	uxtb	r3, r3
 800db22:	011b      	lsls	r3, r3, #4
 800db24:	b2da      	uxtb	r2, r3
 800db26:	79fb      	ldrb	r3, [r7, #7]
 800db28:	4313      	orrs	r3, r2
 800db2a:	b2db      	uxtb	r3, r3
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	4603      	mov	r3, r0
 800db40:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800db42:	2300      	movs	r3, #0
 800db44:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	091b      	lsrs	r3, r3, #4
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	461a      	mov	r2, r3
 800db4e:	4613      	mov	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	005b      	lsls	r3, r3, #1
 800db56:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800db58:	79fb      	ldrb	r3, [r7, #7]
 800db5a:	f003 030f 	and.w	r3, r3, #15
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	b2db      	uxtb	r3, r3
 800db64:	4413      	add	r3, r2
 800db66:	b2db      	uxtb	r3, r3
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3714      	adds	r7, #20
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800db74:	b480      	push	{r7}
 800db76:	b087      	sub	sp, #28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3350      	adds	r3, #80	; 0x50
 800db8a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	4413      	add	r3, r2
 800db94:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	601a      	str	r2, [r3, #0]
}
 800db9c:	bf00      	nop
 800db9e:	371c      	adds	r7, #28
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d101      	bne.n	800dbba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e022      	b.n	800dc00 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d105      	bne.n	800dbd2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7f9 fbff 	bl	80073d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2203      	movs	r2, #3
 800dbd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 f814 	bl	800dc08 <HAL_SD_InitCard>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e00a      	b.n	800dc00 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dc08:	b5b0      	push	{r4, r5, r7, lr}
 800dc0a:	b08e      	sub	sp, #56	; 0x38
 800dc0c:	af04      	add	r7, sp, #16
 800dc0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800dc10:	2300      	movs	r3, #0
 800dc12:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800dc14:	2300      	movs	r3, #0
 800dc16:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800dc20:	2300      	movs	r3, #0
 800dc22:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800dc24:	2376      	movs	r3, #118	; 0x76
 800dc26:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681d      	ldr	r5, [r3, #0]
 800dc2c:	466c      	mov	r4, sp
 800dc2e:	f107 0314 	add.w	r3, r7, #20
 800dc32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc3a:	f107 0308 	add.w	r3, r7, #8
 800dc3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc40:	4628      	mov	r0, r5
 800dc42:	f004 fa29 	bl	8012098 <SDMMC_Init>
 800dc46:	4603      	mov	r3, r0
 800dc48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800dc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d001      	beq.n	800dc58 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	e03b      	b.n	800dcd0 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc66:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f004 fa5d 	bl	801212c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	685a      	ldr	r2, [r3, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc80:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f001 f8e8 	bl	800ee58 <SD_PowerON>
 800dc88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00b      	beq.n	800dca8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e013      	b.n	800dcd0 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f001 f807 	bl	800ecbc <SD_InitCard>
 800dcae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00b      	beq.n	800dcce <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc2:	6a3b      	ldr	r3, [r7, #32]
 800dcc4:	431a      	orrs	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e000      	b.n	800dcd0 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800dcce:	2300      	movs	r3, #0
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3728      	adds	r7, #40	; 0x28
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bdb0      	pop	{r4, r5, r7, pc}

0800dcd8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b092      	sub	sp, #72	; 0x48
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
 800dce4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dce6:	f7fa faaf 	bl	8008248 <HAL_GetTick>
 800dcea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d107      	bne.n	800dd0a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dd06:	2301      	movs	r3, #1
 800dd08:	e1d7      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	f040 81ca 	bne.w	800e0ac <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dd1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	441a      	add	r2, r3
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d907      	bls.n	800dd3c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd30:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e1be      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2203      	movs	r2, #3
 800dd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d002      	beq.n	800dd5a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	025b      	lsls	r3, r3, #9
 800dd58:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd62:	4618      	mov	r0, r3
 800dd64:	f004 fa76 	bl	8012254 <SDMMC_CmdBlockLength>
 800dd68:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00f      	beq.n	800dd90 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a9a      	ldr	r2, [pc, #616]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800dd76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd7e:	431a      	orrs	r2, r3
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2201      	movs	r2, #1
 800dd88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e194      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd90:	f04f 33ff 	mov.w	r3, #4294967295
 800dd94:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	025b      	lsls	r3, r3, #9
 800dd9a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800dd9c:	2390      	movs	r3, #144	; 0x90
 800dd9e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dda0:	2302      	movs	r3, #2
 800dda2:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f107 0214 	add.w	r2, r7, #20
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f004 fa20 	bl	80121fc <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d90a      	bls.n	800ddd8 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2202      	movs	r2, #2
 800ddc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f004 fa84 	bl	80122dc <SDMMC_CmdReadMultiBlock>
 800ddd4:	6478      	str	r0, [r7, #68]	; 0x44
 800ddd6:	e009      	b.n	800ddec <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2201      	movs	r2, #1
 800dddc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dde4:	4618      	mov	r0, r3
 800dde6:	f004 fa57 	bl	8012298 <SDMMC_CmdReadSingleBlock>
 800ddea:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d012      	beq.n	800de18 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a7a      	ldr	r2, [pc, #488]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800ddf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de00:	431a      	orrs	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2201      	movs	r2, #1
 800de0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800de14:	2301      	movs	r3, #1
 800de16:	e150      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800de1c:	e061      	b.n	800dee2 <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d03c      	beq.n	800dea6 <HAL_SD_ReadBlocks+0x1ce>
 800de2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d039      	beq.n	800dea6 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800de32:	2300      	movs	r3, #0
 800de34:	643b      	str	r3, [r7, #64]	; 0x40
 800de36:	e033      	b.n	800dea0 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f004 f957 	bl	80120f0 <SDMMC_ReadFIFO>
 800de42:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	b2da      	uxtb	r2, r3
 800de48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800de4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4e:	3301      	adds	r3, #1
 800de50:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800de52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de54:	3b01      	subs	r3, #1
 800de56:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800de58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5a:	0a1b      	lsrs	r3, r3, #8
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800de62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de64:	3301      	adds	r3, #1
 800de66:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800de68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de6a:	3b01      	subs	r3, #1
 800de6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800de6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de70:	0c1b      	lsrs	r3, r3, #16
 800de72:	b2da      	uxtb	r2, r3
 800de74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de76:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800de78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de7a:	3301      	adds	r3, #1
 800de7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800de7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de80:	3b01      	subs	r3, #1
 800de82:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	0e1b      	lsrs	r3, r3, #24
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800de8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de90:	3301      	adds	r3, #1
 800de92:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800de94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de96:	3b01      	subs	r3, #1
 800de98:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800de9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de9c:	3301      	adds	r3, #1
 800de9e:	643b      	str	r3, [r7, #64]	; 0x40
 800dea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea2:	2b07      	cmp	r3, #7
 800dea4:	d9c8      	bls.n	800de38 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800dea6:	f7fa f9cf 	bl	8008248 <HAL_GetTick>
 800deaa:	4602      	mov	r2, r0
 800deac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d902      	bls.n	800debc <HAL_SD_ReadBlocks+0x1e4>
 800deb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d112      	bne.n	800dee2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a47      	ldr	r2, [pc, #284]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800dec2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2200      	movs	r2, #0
 800dedc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800dede:	2303      	movs	r3, #3
 800dee0:	e0eb      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dee8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800deec:	2b00      	cmp	r3, #0
 800deee:	d096      	beq.n	800de1e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800defa:	2b00      	cmp	r3, #0
 800defc:	d022      	beq.n	800df44 <HAL_SD_ReadBlocks+0x26c>
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d91f      	bls.n	800df44 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df08:	2b03      	cmp	r3, #3
 800df0a:	d01b      	beq.n	800df44 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4618      	mov	r0, r3
 800df12:	f004 fa49 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800df16:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800df18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d012      	beq.n	800df44 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a2f      	ldr	r2, [pc, #188]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800df24:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df2c:	431a      	orrs	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2201      	movs	r2, #1
 800df36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2200      	movs	r2, #0
 800df3e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800df40:	2301      	movs	r3, #1
 800df42:	e0ba      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df4a:	f003 0308 	and.w	r3, r3, #8
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d012      	beq.n	800df78 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a22      	ldr	r2, [pc, #136]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800df58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5e:	f043 0208 	orr.w	r2, r3, #8
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2201      	movs	r2, #1
 800df6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2200      	movs	r2, #0
 800df72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800df74:	2301      	movs	r3, #1
 800df76:	e0a0      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7e:	f003 0302 	and.w	r3, r3, #2
 800df82:	2b00      	cmp	r3, #0
 800df84:	d012      	beq.n	800dfac <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a15      	ldr	r2, [pc, #84]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800df8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df92:	f043 0202 	orr.w	r2, r3, #2
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2201      	movs	r2, #1
 800df9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e086      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb2:	f003 0320 	and.w	r3, r3, #32
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d063      	beq.n	800e082 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a08      	ldr	r2, [pc, #32]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800dfc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc6:	f043 0220 	orr.w	r2, r3, #32
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e06c      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800dfe0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f004 f881 	bl	80120f0 <SDMMC_ReadFIFO>
 800dfee:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dff6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800dff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dffa:	3301      	adds	r3, #1
 800dffc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800dffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e000:	3b01      	subs	r3, #1
 800e002:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e006:	0a1b      	lsrs	r3, r3, #8
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e00c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e010:	3301      	adds	r3, #1
 800e012:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e016:	3b01      	subs	r3, #1
 800e018:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	0c1b      	lsrs	r3, r3, #16
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e022:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e026:	3301      	adds	r3, #1
 800e028:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02c:	3b01      	subs	r3, #1
 800e02e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	0e1b      	lsrs	r3, r3, #24
 800e034:	b2da      	uxtb	r2, r3
 800e036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e038:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03c:	3301      	adds	r3, #1
 800e03e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e042:	3b01      	subs	r3, #1
 800e044:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e046:	f7fa f8ff 	bl	8008248 <HAL_GetTick>
 800e04a:	4602      	mov	r2, r0
 800e04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e052:	429a      	cmp	r2, r3
 800e054:	d902      	bls.n	800e05c <HAL_SD_ReadBlocks+0x384>
 800e056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d112      	bne.n	800e082 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a18      	ldr	r2, [pc, #96]	; (800e0c4 <HAL_SD_ReadBlocks+0x3ec>)
 800e062:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e068:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e07e:	2301      	movs	r3, #1
 800e080:	e01b      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <HAL_SD_ReadBlocks+0x3be>
 800e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1a6      	bne.n	800dfe4 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f240 523a 	movw	r2, #1338	; 0x53a
 800e09e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	e006      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e0b8:	2301      	movs	r3, #1
  }
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3748      	adds	r7, #72	; 0x48
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	004005ff 	.word	0x004005ff

0800e0c8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b092      	sub	sp, #72	; 0x48
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e0d6:	f7fa f8b7 	bl	8008248 <HAL_GetTick>
 800e0da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d107      	bne.n	800e0fa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	e182      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b01      	cmp	r3, #1
 800e104:	f040 8175 	bne.w	800e3f2 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e10e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	441a      	add	r2, r3
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e118:	429a      	cmp	r2, r3
 800e11a:	d907      	bls.n	800e12c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e120:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	e169      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2203      	movs	r2, #3
 800e130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2200      	movs	r2, #0
 800e13a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e140:	2b01      	cmp	r3, #1
 800e142:	d002      	beq.n	800e14a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	025b      	lsls	r3, r3, #9
 800e148:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e152:	4618      	mov	r0, r3
 800e154:	f004 f87e 	bl	8012254 <SDMMC_CmdBlockLength>
 800e158:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800e15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00f      	beq.n	800e180 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a9c      	ldr	r2, [pc, #624]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e166:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e16e:	431a      	orrs	r2, r3
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e13f      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e180:	f04f 33ff 	mov.w	r3, #4294967295
 800e184:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	025b      	lsls	r3, r3, #9
 800e18a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e18c:	2390      	movs	r3, #144	; 0x90
 800e18e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e190:	2300      	movs	r3, #0
 800e192:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e194:	2300      	movs	r3, #0
 800e196:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800e198:	2301      	movs	r3, #1
 800e19a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f107 0218 	add.w	r2, r7, #24
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f004 f828 	bl	80121fc <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d90a      	bls.n	800e1c8 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2220      	movs	r2, #32
 800e1b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f004 f8d0 	bl	8012364 <SDMMC_CmdWriteMultiBlock>
 800e1c4:	6478      	str	r0, [r7, #68]	; 0x44
 800e1c6:	e009      	b.n	800e1dc <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2210      	movs	r2, #16
 800e1cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f004 f8a3 	bl	8012320 <SDMMC_CmdWriteSingleBlock>
 800e1da:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d012      	beq.n	800e208 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a7c      	ldr	r2, [pc, #496]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e1e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1f0:	431a      	orrs	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e204:	2301      	movs	r3, #1
 800e206:	e0fb      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e20c:	e065      	b.n	800e2da <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d040      	beq.n	800e29e <HAL_SD_WriteBlocks+0x1d6>
 800e21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d03d      	beq.n	800e29e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800e222:	2300      	movs	r3, #0
 800e224:	643b      	str	r3, [r7, #64]	; 0x40
 800e226:	e037      	b.n	800e298 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800e228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e230:	3301      	adds	r3, #1
 800e232:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e236:	3b01      	subs	r3, #1
 800e238:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800e23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	021a      	lsls	r2, r3, #8
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	4313      	orrs	r3, r2
 800e244:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e248:	3301      	adds	r3, #1
 800e24a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e24e:	3b01      	subs	r3, #1
 800e250:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800e252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	041a      	lsls	r2, r3, #16
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e260:	3301      	adds	r3, #1
 800e262:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e266:	3b01      	subs	r3, #1
 800e268:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	061a      	lsls	r2, r3, #24
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	4313      	orrs	r3, r2
 800e274:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e278:	3301      	adds	r3, #1
 800e27a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e27e:	3b01      	subs	r3, #1
 800e280:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f107 0214 	add.w	r2, r7, #20
 800e28a:	4611      	mov	r1, r2
 800e28c:	4618      	mov	r0, r3
 800e28e:	f003 ff3c 	bl	801210a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800e292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e294:	3301      	adds	r3, #1
 800e296:	643b      	str	r3, [r7, #64]	; 0x40
 800e298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e29a:	2b07      	cmp	r3, #7
 800e29c:	d9c4      	bls.n	800e228 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e29e:	f7f9 ffd3 	bl	8008248 <HAL_GetTick>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d902      	bls.n	800e2b4 <HAL_SD_WriteBlocks+0x1ec>
 800e2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d112      	bne.n	800e2da <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a47      	ldr	r2, [pc, #284]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e2ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c2:	431a      	orrs	r2, r3
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800e2d6:	2303      	movs	r3, #3
 800e2d8:	e092      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d092      	beq.n	800e20e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d022      	beq.n	800e33c <HAL_SD_WriteBlocks+0x274>
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d91f      	bls.n	800e33c <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e300:	2b03      	cmp	r3, #3
 800e302:	d01b      	beq.n	800e33c <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4618      	mov	r0, r3
 800e30a:	f004 f84d 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800e30e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800e310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e312:	2b00      	cmp	r3, #0
 800e314:	d012      	beq.n	800e33c <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a2f      	ldr	r2, [pc, #188]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e31c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e324:	431a      	orrs	r2, r3
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800e338:	2301      	movs	r3, #1
 800e33a:	e061      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e342:	f003 0308 	and.w	r3, r3, #8
 800e346:	2b00      	cmp	r3, #0
 800e348:	d012      	beq.n	800e370 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a22      	ldr	r2, [pc, #136]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e350:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e356:	f043 0208 	orr.w	r2, r3, #8
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2201      	movs	r2, #1
 800e362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e36c:	2301      	movs	r3, #1
 800e36e:	e047      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e376:	f003 0302 	and.w	r3, r3, #2
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d012      	beq.n	800e3a4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a15      	ldr	r2, [pc, #84]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e384:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38a:	f043 0202 	orr.w	r2, r3, #2
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2201      	movs	r2, #1
 800e396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e02d      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3aa:	f003 0310 	and.w	r3, r3, #16
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d014      	beq.n	800e3dc <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a08      	ldr	r2, [pc, #32]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e3b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3be:	f043 0210 	orr.w	r2, r3, #16
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e013      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e3d8:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f240 523a 	movw	r2, #1338	; 0x53a
 800e3e4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	e006      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
  }
}
 800e400:	4618      	mov	r0, r3
 800e402:	3748      	adds	r7, #72	; 0x48
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e414:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e41c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d008      	beq.n	800e436 <HAL_SD_IRQHandler+0x2e>
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f003 0308 	and.w	r3, r3, #8
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d003      	beq.n	800e436 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 ff28 	bl	800f284 <SD_Read_IT>
 800e434:	e153      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 808d 	beq.w	800e560 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e44e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	4ba3      	ldr	r3, [pc, #652]	; (800e6e8 <HAL_SD_IRQHandler+0x2e0>)
 800e45c:	400b      	ands	r3, r1
 800e45e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f022 0201 	bic.w	r2, r2, #1
 800e46e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f003 0308 	and.w	r3, r3, #8
 800e476:	2b00      	cmp	r3, #0
 800e478:	d039      	beq.n	800e4ee <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f003 0302 	and.w	r3, r3, #2
 800e480:	2b00      	cmp	r3, #0
 800e482:	d104      	bne.n	800e48e <HAL_SD_IRQHandler+0x86>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f003 0320 	and.w	r3, r3, #32
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d011      	beq.n	800e4b2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4618      	mov	r0, r3
 800e494:	f003 ff88 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800e498:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d008      	beq.n	800e4b2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	431a      	orrs	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f921 	bl	800e6f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f240 523a 	movw	r2, #1338	; 0x53a
 800e4ba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d104      	bne.n	800e4de <HAL_SD_IRQHandler+0xd6>
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f003 0302 	and.w	r3, r3, #2
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d003      	beq.n	800e4e6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f008 fa38 	bl	8016954 <HAL_SD_RxCpltCallback>
 800e4e4:	e0fb      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f008 fa2a 	bl	8016940 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e4ec:	e0f7      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 80f2 	beq.w	800e6de <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f003 0320 	and.w	r3, r3, #32
 800e500:	2b00      	cmp	r3, #0
 800e502:	d011      	beq.n	800e528 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4618      	mov	r0, r3
 800e50a:	f003 ff4d 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800e50e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d008      	beq.n	800e528 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	431a      	orrs	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f8e6 	bl	800e6f4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f040 80d5 	bne.w	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f003 0302 	and.w	r3, r3, #2
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 80cf 	bne.w	800e6de <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f022 0208 	bic.w	r2, r2, #8
 800e54e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f008 f9f1 	bl	8016940 <HAL_SD_TxCpltCallback>
}
 800e55e:	e0be      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d008      	beq.n	800e580 <HAL_SD_IRQHandler+0x178>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f003 0308 	and.w	r3, r3, #8
 800e574:	2b00      	cmp	r3, #0
 800e576:	d003      	beq.n	800e580 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fed4 	bl	800f326 <SD_Write_IT>
 800e57e:	e0ae      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e586:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f000 80a7 	beq.w	800e6de <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e596:	f003 0302 	and.w	r3, r3, #2
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d005      	beq.n	800e5aa <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a2:	f043 0202 	orr.w	r2, r3, #2
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b0:	f003 0308 	and.w	r3, r3, #8
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d005      	beq.n	800e5c4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5bc:	f043 0208 	orr.w	r2, r3, #8
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ca:	f003 0320 	and.w	r3, r3, #32
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d005      	beq.n	800e5de <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d6:	f043 0220 	orr.w	r2, r3, #32
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e4:	f003 0310 	and.w	r3, r3, #16
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d005      	beq.n	800e5f8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f0:	f043 0210 	orr.w	r2, r3, #16
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f240 523a 	movw	r2, #1338	; 0x53a
 800e600:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e610:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4618      	mov	r0, r3
 800e618:	f003 fec6 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800e61c:	4602      	mov	r2, r0
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e622:	431a      	orrs	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f003 0308 	and.w	r3, r3, #8
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00a      	beq.n	800e648 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 f857 	bl	800e6f4 <HAL_SD_ErrorCallback>
}
 800e646:	e04a      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d045      	beq.n	800e6de <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f003 0310 	and.w	r3, r3, #16
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d104      	bne.n	800e666 <HAL_SD_IRQHandler+0x25e>
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f003 0320 	and.w	r3, r3, #32
 800e662:	2b00      	cmp	r3, #0
 800e664:	d011      	beq.n	800e68a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e66a:	4a20      	ldr	r2, [pc, #128]	; (800e6ec <HAL_SD_IRQHandler+0x2e4>)
 800e66c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e672:	4618      	mov	r0, r3
 800e674:	f7fa f836 	bl	80086e4 <HAL_DMA_Abort_IT>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d02f      	beq.n	800e6de <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e682:	4618      	mov	r0, r3
 800e684:	f000 faac 	bl	800ebe0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e688:	e029      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d104      	bne.n	800e69e <HAL_SD_IRQHandler+0x296>
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f003 0302 	and.w	r3, r3, #2
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d011      	beq.n	800e6c2 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a2:	4a13      	ldr	r2, [pc, #76]	; (800e6f0 <HAL_SD_IRQHandler+0x2e8>)
 800e6a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fa f81a 	bl	80086e4 <HAL_DMA_Abort_IT>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d013      	beq.n	800e6de <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 fac7 	bl	800ec4e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e6c0:	e00d      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f008 f928 	bl	801692c <HAL_SD_AbortCallback>
}
 800e6dc:	e7ff      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e6de:	bf00      	nop
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	ffff3ec5 	.word	0xffff3ec5
 800e6ec:	0800ebe1 	.word	0x0800ebe1
 800e6f0:	0800ec4f 	.word	0x0800ec4f

0800e6f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e716:	0f9b      	lsrs	r3, r3, #30
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e722:	0e9b      	lsrs	r3, r3, #26
 800e724:	b2db      	uxtb	r3, r3
 800e726:	f003 030f 	and.w	r3, r3, #15
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e734:	0e1b      	lsrs	r3, r3, #24
 800e736:	b2db      	uxtb	r3, r3
 800e738:	f003 0303 	and.w	r3, r3, #3
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e746:	0c1b      	lsrs	r3, r3, #16
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e752:	0a1b      	lsrs	r3, r3, #8
 800e754:	b2da      	uxtb	r2, r3
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e768:	0d1b      	lsrs	r3, r3, #20
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e774:	0c1b      	lsrs	r3, r3, #16
 800e776:	b2db      	uxtb	r3, r3
 800e778:	f003 030f 	and.w	r3, r3, #15
 800e77c:	b2da      	uxtb	r2, r3
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e786:	0bdb      	lsrs	r3, r3, #15
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e798:	0b9b      	lsrs	r3, r3, #14
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	f003 0301 	and.w	r3, r3, #1
 800e7a0:	b2da      	uxtb	r2, r3
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7aa:	0b5b      	lsrs	r3, r3, #13
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	f003 0301 	and.w	r3, r3, #1
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7bc:	0b1b      	lsrs	r3, r3, #12
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d163      	bne.n	800e8a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7dc:	009a      	lsls	r2, r3, #2
 800e7de:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e7e8:	0f92      	lsrs	r2, r2, #30
 800e7ea:	431a      	orrs	r2, r3
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f4:	0edb      	lsrs	r3, r3, #27
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	f003 0307 	and.w	r3, r3, #7
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e806:	0e1b      	lsrs	r3, r3, #24
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	f003 0307 	and.w	r3, r3, #7
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e818:	0d5b      	lsrs	r3, r3, #21
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	f003 0307 	and.w	r3, r3, #7
 800e820:	b2da      	uxtb	r2, r3
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e82a:	0c9b      	lsrs	r3, r3, #18
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	f003 0307 	and.w	r3, r3, #7
 800e832:	b2da      	uxtb	r2, r3
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e83c:	0bdb      	lsrs	r3, r3, #15
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	f003 0307 	and.w	r3, r3, #7
 800e844:	b2da      	uxtb	r2, r3
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	691b      	ldr	r3, [r3, #16]
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	7e1b      	ldrb	r3, [r3, #24]
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	f003 0307 	and.w	r3, r3, #7
 800e85e:	3302      	adds	r3, #2
 800e860:	2201      	movs	r2, #1
 800e862:	fa02 f303 	lsl.w	r3, r2, r3
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e86a:	fb02 f203 	mul.w	r2, r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	7a1b      	ldrb	r3, [r3, #8]
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f003 030f 	and.w	r3, r3, #15
 800e87c:	2201      	movs	r2, #1
 800e87e:	409a      	lsls	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e88c:	0a52      	lsrs	r2, r2, #9
 800e88e:	fb02 f203 	mul.w	r2, r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e89c:	661a      	str	r2, [r3, #96]	; 0x60
 800e89e:	e031      	b.n	800e904 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d11d      	bne.n	800e8e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ac:	041b      	lsls	r3, r3, #16
 800e8ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b6:	0c1b      	lsrs	r3, r3, #16
 800e8b8:	431a      	orrs	r2, r3
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	029a      	lsls	r2, r3, #10
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	661a      	str	r2, [r3, #96]	; 0x60
 800e8e2:	e00f      	b.n	800e904 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a58      	ldr	r2, [pc, #352]	; (800ea4c <HAL_SD_GetCardCSD+0x344>)
 800e8ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e900:	2301      	movs	r3, #1
 800e902:	e09d      	b.n	800ea40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e908:	0b9b      	lsrs	r3, r3, #14
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	f003 0301 	and.w	r3, r3, #1
 800e910:	b2da      	uxtb	r2, r3
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e91a:	09db      	lsrs	r3, r3, #7
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e922:	b2da      	uxtb	r2, r3
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e932:	b2da      	uxtb	r2, r3
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e93c:	0fdb      	lsrs	r3, r3, #31
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e948:	0f5b      	lsrs	r3, r3, #29
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	f003 0303 	and.w	r3, r3, #3
 800e950:	b2da      	uxtb	r2, r3
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95a:	0e9b      	lsrs	r3, r3, #26
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	b2da      	uxtb	r2, r3
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e96c:	0d9b      	lsrs	r3, r3, #22
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	f003 030f 	and.w	r3, r3, #15
 800e974:	b2da      	uxtb	r2, r3
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e97e:	0d5b      	lsrs	r3, r3, #21
 800e980:	b2db      	uxtb	r3, r3
 800e982:	f003 0301 	and.w	r3, r3, #1
 800e986:	b2da      	uxtb	r2, r3
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2200      	movs	r2, #0
 800e992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e99a:	0c1b      	lsrs	r3, r3, #16
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ae:	0bdb      	lsrs	r3, r3, #15
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c2:	0b9b      	lsrs	r3, r3, #14
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d6:	0b5b      	lsrs	r3, r3, #13
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ea:	0b1b      	lsrs	r3, r3, #12
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9fe:	0a9b      	lsrs	r3, r3, #10
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	f003 0303 	and.w	r3, r3, #3
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea12:	0a1b      	lsrs	r3, r3, #8
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	f003 0303 	and.w	r3, r3, #3
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea26:	085b      	lsrs	r3, r3, #1
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea2e:	b2da      	uxtb	r2, r3
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	004005ff 	.word	0x004005ff

0800ea50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800eaa8:	b5b0      	push	{r4, r5, r7, lr}
 800eaaa:	b08e      	sub	sp, #56	; 0x38
 800eaac:	af04      	add	r7, sp, #16
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2203      	movs	r2, #3
 800eab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eabe:	2b03      	cmp	r3, #3
 800eac0:	d02e      	beq.n	800eb20 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eac8:	d106      	bne.n	800ead8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eace:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	639a      	str	r2, [r3, #56]	; 0x38
 800ead6:	e029      	b.n	800eb2c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eade:	d10a      	bne.n	800eaf6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f000 fa6f 	bl	800efc4 <SD_WideBus_Enable>
 800eae6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	431a      	orrs	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	639a      	str	r2, [r3, #56]	; 0x38
 800eaf4:	e01a      	b.n	800eb2c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10a      	bne.n	800eb12 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 faac 	bl	800f05a <SD_WideBus_Disable>
 800eb02:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	431a      	orrs	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	639a      	str	r2, [r3, #56]	; 0x38
 800eb10:	e00c      	b.n	800eb2c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	639a      	str	r2, [r3, #56]	; 0x38
 800eb1e:	e005      	b.n	800eb2c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d009      	beq.n	800eb48 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a18      	ldr	r2, [pc, #96]	; (800eb9c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800eb3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800eb44:	2301      	movs	r3, #1
 800eb46:	e024      	b.n	800eb92 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681d      	ldr	r5, [r3, #0]
 800eb6e:	466c      	mov	r4, sp
 800eb70:	f107 0318 	add.w	r3, r7, #24
 800eb74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eb7c:	f107 030c 	add.w	r3, r7, #12
 800eb80:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eb82:	4628      	mov	r0, r5
 800eb84:	f003 fa88 	bl	8012098 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3728      	adds	r7, #40	; 0x28
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bdb0      	pop	{r4, r5, r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	004005ff 	.word	0x004005ff

0800eba0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ebac:	f107 030c 	add.w	r3, r7, #12
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 f9de 	bl	800ef74 <SD_SendStatus>
 800ebb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d005      	beq.n	800ebcc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	431a      	orrs	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	0a5b      	lsrs	r3, r3, #9
 800ebd0:	f003 030f 	and.w	r3, r3, #15
 800ebd4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ebd6:	693b      	ldr	r3, [r7, #16]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f240 523a 	movw	r2, #1338	; 0x53a
 800ebf6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	f7ff ffd1 	bl	800eba0 <HAL_SD_GetCardState>
 800ebfe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	2b06      	cmp	r3, #6
 800ec12:	d002      	beq.n	800ec1a <SD_DMATxAbort+0x3a>
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	2b05      	cmp	r3, #5
 800ec18:	d10a      	bne.n	800ec30 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f003 fbc2 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800ec24:	4602      	mov	r2, r0
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec2a:	431a      	orrs	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d103      	bne.n	800ec40 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f007 fe77 	bl	801692c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ec3e:	e002      	b.n	800ec46 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f7ff fd57 	bl	800e6f4 <HAL_SD_ErrorCallback>
}
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec5a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f240 523a 	movw	r2, #1338	; 0x53a
 800ec64:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f7ff ff9a 	bl	800eba0 <HAL_SD_GetCardState>
 800ec6c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2201      	movs	r2, #1
 800ec72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	2b06      	cmp	r3, #6
 800ec80:	d002      	beq.n	800ec88 <SD_DMARxAbort+0x3a>
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	2b05      	cmp	r3, #5
 800ec86:	d10a      	bne.n	800ec9e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f003 fb8b 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800ec92:	4602      	mov	r2, r0
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec98:	431a      	orrs	r2, r3
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d103      	bne.n	800ecae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f007 fe40 	bl	801692c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ecac:	e002      	b.n	800ecb4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f7ff fd20 	bl	800e6f4 <HAL_SD_ErrorCallback>
}
 800ecb4:	bf00      	nop
 800ecb6:	3710      	adds	r7, #16
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ecbc:	b5b0      	push	{r4, r5, r7, lr}
 800ecbe:	b094      	sub	sp, #80	; 0x50
 800ecc0:	af04      	add	r7, sp, #16
 800ecc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4618      	mov	r0, r3
 800ecce:	f003 fa3c 	bl	801214a <SDMMC_GetPowerState>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d102      	bne.n	800ecde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ecd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ecdc:	e0b7      	b.n	800ee4e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ece2:	2b03      	cmp	r3, #3
 800ece4:	d02f      	beq.n	800ed46 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f003 fc67 	bl	80125be <SDMMC_CmdSendCID>
 800ecf0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ecf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d001      	beq.n	800ecfc <SD_InitCard+0x40>
    {
      return errorstate;
 800ecf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfa:	e0a8      	b.n	800ee4e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2100      	movs	r1, #0
 800ed02:	4618      	mov	r0, r3
 800ed04:	f003 fa67 	bl	80121d6 <SDMMC_GetResponse>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2104      	movs	r1, #4
 800ed14:	4618      	mov	r0, r3
 800ed16:	f003 fa5e 	bl	80121d6 <SDMMC_GetResponse>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2108      	movs	r1, #8
 800ed26:	4618      	mov	r0, r3
 800ed28:	f003 fa55 	bl	80121d6 <SDMMC_GetResponse>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	210c      	movs	r1, #12
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f003 fa4c 	bl	80121d6 <SDMMC_GetResponse>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed4a:	2b03      	cmp	r3, #3
 800ed4c:	d00d      	beq.n	800ed6a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f107 020e 	add.w	r2, r7, #14
 800ed56:	4611      	mov	r1, r2
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f003 fc6d 	bl	8012638 <SDMMC_CmdSetRelAdd>
 800ed5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <SD_InitCard+0xae>
    {
      return errorstate;
 800ed66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed68:	e071      	b.n	800ee4e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d036      	beq.n	800ede0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ed72:	89fb      	ldrh	r3, [r7, #14]
 800ed74:	461a      	mov	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed82:	041b      	lsls	r3, r3, #16
 800ed84:	4619      	mov	r1, r3
 800ed86:	4610      	mov	r0, r2
 800ed88:	f003 fc37 	bl	80125fa <SDMMC_CmdSendCSD>
 800ed8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ed94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed96:	e05a      	b.n	800ee4e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f003 fa19 	bl	80121d6 <SDMMC_GetResponse>
 800eda4:	4602      	mov	r2, r0
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2104      	movs	r1, #4
 800edb0:	4618      	mov	r0, r3
 800edb2:	f003 fa10 	bl	80121d6 <SDMMC_GetResponse>
 800edb6:	4602      	mov	r2, r0
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2108      	movs	r1, #8
 800edc2:	4618      	mov	r0, r3
 800edc4:	f003 fa07 	bl	80121d6 <SDMMC_GetResponse>
 800edc8:	4602      	mov	r2, r0
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	210c      	movs	r1, #12
 800edd4:	4618      	mov	r0, r3
 800edd6:	f003 f9fe 	bl	80121d6 <SDMMC_GetResponse>
 800edda:	4602      	mov	r2, r0
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2104      	movs	r1, #4
 800ede6:	4618      	mov	r0, r3
 800ede8:	f003 f9f5 	bl	80121d6 <SDMMC_GetResponse>
 800edec:	4603      	mov	r3, r0
 800edee:	0d1a      	lsrs	r2, r3, #20
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800edf4:	f107 0310 	add.w	r3, r7, #16
 800edf8:	4619      	mov	r1, r3
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f7ff fc84 	bl	800e708 <HAL_SD_GetCardCSD>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d002      	beq.n	800ee0c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ee0a:	e020      	b.n	800ee4e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6819      	ldr	r1, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee14:	041b      	lsls	r3, r3, #16
 800ee16:	f04f 0400 	mov.w	r4, #0
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	4623      	mov	r3, r4
 800ee1e:	4608      	mov	r0, r1
 800ee20:	f003 fae4 	bl	80123ec <SDMMC_CmdSelDesel>
 800ee24:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d001      	beq.n	800ee30 <SD_InitCard+0x174>
  {
    return errorstate;
 800ee2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee2e:	e00e      	b.n	800ee4e <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681d      	ldr	r5, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	466c      	mov	r4, sp
 800ee38:	f103 0210 	add.w	r2, r3, #16
 800ee3c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ee3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ee42:	3304      	adds	r3, #4
 800ee44:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee46:	4628      	mov	r0, r5
 800ee48:	f003 f926 	bl	8012098 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ee4c:	2300      	movs	r3, #0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3740      	adds	r7, #64	; 0x40
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ee58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ee60:	2300      	movs	r3, #0
 800ee62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ee64:	2300      	movs	r3, #0
 800ee66:	617b      	str	r3, [r7, #20]
 800ee68:	2300      	movs	r3, #0
 800ee6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f003 fade 	bl	8012432 <SDMMC_CmdGoIdleState>
 800ee76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d001      	beq.n	800ee82 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	e072      	b.n	800ef68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4618      	mov	r0, r3
 800ee88:	f003 faf1 	bl	801246e <SDMMC_CmdOperCond>
 800ee8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00d      	beq.n	800eeb0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f003 fac7 	bl	8012432 <SDMMC_CmdGoIdleState>
 800eea4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d004      	beq.n	800eeb6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	e05b      	b.n	800ef68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eeba:	2b01      	cmp	r3, #1
 800eebc:	d137      	bne.n	800ef2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2100      	movs	r1, #0
 800eec4:	4618      	mov	r0, r3
 800eec6:	f003 faf1 	bl	80124ac <SDMMC_CmdAppCommand>
 800eeca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d02d      	beq.n	800ef2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eed2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eed6:	e047      	b.n	800ef68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2100      	movs	r1, #0
 800eede:	4618      	mov	r0, r3
 800eee0:	f003 fae4 	bl	80124ac <SDMMC_CmdAppCommand>
 800eee4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d001      	beq.n	800eef0 <SD_PowerON+0x98>
    {
      return errorstate;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	e03b      	b.n	800ef68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	491e      	ldr	r1, [pc, #120]	; (800ef70 <SD_PowerON+0x118>)
 800eef6:	4618      	mov	r0, r3
 800eef8:	f003 fafa 	bl	80124f0 <SDMMC_CmdAppOperCommand>
 800eefc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ef04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ef08:	e02e      	b.n	800ef68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2100      	movs	r1, #0
 800ef10:	4618      	mov	r0, r3
 800ef12:	f003 f960 	bl	80121d6 <SDMMC_GetResponse>
 800ef16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	0fdb      	lsrs	r3, r3, #31
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d101      	bne.n	800ef24 <SD_PowerON+0xcc>
 800ef20:	2301      	movs	r3, #1
 800ef22:	e000      	b.n	800ef26 <SD_PowerON+0xce>
 800ef24:	2300      	movs	r3, #0
 800ef26:	613b      	str	r3, [r7, #16]

    count++;
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d802      	bhi.n	800ef3e <SD_PowerON+0xe6>
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d0cc      	beq.n	800eed8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d902      	bls.n	800ef4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ef48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ef4c:	e00c      	b.n	800ef68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d003      	beq.n	800ef60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	645a      	str	r2, [r3, #68]	; 0x44
 800ef5e:	e002      	b.n	800ef66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ef66:	2300      	movs	r3, #0
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	c1100000 	.word	0xc1100000

0800ef74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d102      	bne.n	800ef8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ef84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef88:	e018      	b.n	800efbc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef92:	041b      	lsls	r3, r3, #16
 800ef94:	4619      	mov	r1, r3
 800ef96:	4610      	mov	r0, r2
 800ef98:	f003 fb6f 	bl	801267a <SDMMC_CmdSendStatus>
 800ef9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d001      	beq.n	800efa8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	e009      	b.n	800efbc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2100      	movs	r1, #0
 800efae:	4618      	mov	r0, r3
 800efb0:	f003 f911 	bl	80121d6 <SDMMC_GetResponse>
 800efb4:	4602      	mov	r2, r0
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800efcc:	2300      	movs	r3, #0
 800efce:	60fb      	str	r3, [r7, #12]
 800efd0:	2300      	movs	r3, #0
 800efd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2100      	movs	r1, #0
 800efda:	4618      	mov	r0, r3
 800efdc:	f003 f8fb 	bl	80121d6 <SDMMC_GetResponse>
 800efe0:	4603      	mov	r3, r0
 800efe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800efea:	d102      	bne.n	800eff2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800efec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eff0:	e02f      	b.n	800f052 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eff2:	f107 030c 	add.w	r3, r7, #12
 800eff6:	4619      	mov	r1, r3
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 f879 	bl	800f0f0 <SD_FindSCR>
 800effe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	e023      	b.n	800f052 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f010:	2b00      	cmp	r3, #0
 800f012:	d01c      	beq.n	800f04e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f01c:	041b      	lsls	r3, r3, #16
 800f01e:	4619      	mov	r1, r3
 800f020:	4610      	mov	r0, r2
 800f022:	f003 fa43 	bl	80124ac <SDMMC_CmdAppCommand>
 800f026:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d001      	beq.n	800f032 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	e00f      	b.n	800f052 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2102      	movs	r1, #2
 800f038:	4618      	mov	r0, r3
 800f03a:	f003 fa7d 	bl	8012538 <SDMMC_CmdBusWidth>
 800f03e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	e003      	b.n	800f052 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f04a:	2300      	movs	r3, #0
 800f04c:	e001      	b.n	800f052 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f04e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f052:	4618      	mov	r0, r3
 800f054:	3718      	adds	r7, #24
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b086      	sub	sp, #24
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f062:	2300      	movs	r3, #0
 800f064:	60fb      	str	r3, [r7, #12]
 800f066:	2300      	movs	r3, #0
 800f068:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2100      	movs	r1, #0
 800f070:	4618      	mov	r0, r3
 800f072:	f003 f8b0 	bl	80121d6 <SDMMC_GetResponse>
 800f076:	4603      	mov	r3, r0
 800f078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f07c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f080:	d102      	bne.n	800f088 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f082:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f086:	e02f      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f088:	f107 030c 	add.w	r3, r7, #12
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f82e 	bl	800f0f0 <SD_FindSCR>
 800f094:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d001      	beq.n	800f0a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	e023      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d01c      	beq.n	800f0e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0b2:	041b      	lsls	r3, r3, #16
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	f003 f9f8 	bl	80124ac <SDMMC_CmdAppCommand>
 800f0bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	e00f      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f003 fa32 	bl	8012538 <SDMMC_CmdBusWidth>
 800f0d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	e003      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e001      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f0e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f0f0:	b590      	push	{r4, r7, lr}
 800f0f2:	b08f      	sub	sp, #60	; 0x3c
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f0fa:	f7f9 f8a5 	bl	8008248 <HAL_GetTick>
 800f0fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f100:	2300      	movs	r3, #0
 800f102:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f104:	2300      	movs	r3, #0
 800f106:	60bb      	str	r3, [r7, #8]
 800f108:	2300      	movs	r3, #0
 800f10a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2108      	movs	r1, #8
 800f116:	4618      	mov	r0, r3
 800f118:	f003 f89c 	bl	8012254 <SDMMC_CmdBlockLength>
 800f11c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f120:	2b00      	cmp	r3, #0
 800f122:	d001      	beq.n	800f128 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f126:	e0a9      	b.n	800f27c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f130:	041b      	lsls	r3, r3, #16
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	f003 f9b9 	bl	80124ac <SDMMC_CmdAppCommand>
 800f13a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d001      	beq.n	800f146 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f144:	e09a      	b.n	800f27c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f146:	f04f 33ff 	mov.w	r3, #4294967295
 800f14a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f14c:	2308      	movs	r3, #8
 800f14e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f150:	2330      	movs	r3, #48	; 0x30
 800f152:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f154:	2302      	movs	r3, #2
 800f156:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f158:	2300      	movs	r3, #0
 800f15a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f15c:	2301      	movs	r3, #1
 800f15e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f107 0210 	add.w	r2, r7, #16
 800f168:	4611      	mov	r1, r2
 800f16a:	4618      	mov	r0, r3
 800f16c:	f003 f846 	bl	80121fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4618      	mov	r0, r3
 800f176:	f003 fa01 	bl	801257c <SDMMC_CmdSendSCR>
 800f17a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d022      	beq.n	800f1c8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800f182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f184:	e07a      	b.n	800f27c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f18c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f190:	2b00      	cmp	r3, #0
 800f192:	d00e      	beq.n	800f1b2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6819      	ldr	r1, [r3, #0]
 800f198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	f107 0208 	add.w	r2, r7, #8
 800f1a0:	18d4      	adds	r4, r2, r3
 800f1a2:	4608      	mov	r0, r1
 800f1a4:	f002 ffa4 	bl	80120f0 <SDMMC_ReadFIFO>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	6023      	str	r3, [r4, #0]
      index++;
 800f1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f1b2:	f7f9 f849 	bl	8008248 <HAL_GetTick>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c0:	d102      	bne.n	800f1c8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f1c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f1c6:	e059      	b.n	800f27c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1ce:	f240 432a 	movw	r3, #1066	; 0x42a
 800f1d2:	4013      	ands	r3, r2
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d0d6      	beq.n	800f186 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1de:	f003 0308 	and.w	r3, r3, #8
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d005      	beq.n	800f1f2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2208      	movs	r2, #8
 800f1ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f1ee:	2308      	movs	r3, #8
 800f1f0:	e044      	b.n	800f27c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1f8:	f003 0302 	and.w	r3, r3, #2
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d005      	beq.n	800f20c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2202      	movs	r2, #2
 800f206:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f208:	2302      	movs	r3, #2
 800f20a:	e037      	b.n	800f27c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f212:	f003 0320 	and.w	r3, r3, #32
 800f216:	2b00      	cmp	r3, #0
 800f218:	d005      	beq.n	800f226 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2220      	movs	r2, #32
 800f220:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f222:	2320      	movs	r3, #32
 800f224:	e02a      	b.n	800f27c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f240 523a 	movw	r2, #1338	; 0x53a
 800f22e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	061a      	lsls	r2, r3, #24
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	021b      	lsls	r3, r3, #8
 800f238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f23c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	0a1b      	lsrs	r3, r3, #8
 800f242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f246:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	0e1b      	lsrs	r3, r3, #24
 800f24c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	601a      	str	r2, [r3, #0]
    scr++;
 800f252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f254:	3304      	adds	r3, #4
 800f256:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	061a      	lsls	r2, r3, #24
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	021b      	lsls	r3, r3, #8
 800f260:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f264:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	0a1b      	lsrs	r3, r3, #8
 800f26a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f26e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	0e1b      	lsrs	r3, r3, #24
 800f274:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f278:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	373c      	adds	r7, #60	; 0x3c
 800f280:	46bd      	mov	sp, r7
 800f282:	bd90      	pop	{r4, r7, pc}

0800f284 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f290:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f296:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d03f      	beq.n	800f31e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f29e:	2300      	movs	r3, #0
 800f2a0:	617b      	str	r3, [r7, #20]
 800f2a2:	e033      	b.n	800f30c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f002 ff21 	bl	80120f0 <SDMMC_ReadFIFO>
 800f2ae:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	b2da      	uxtb	r2, r3
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	0a1b      	lsrs	r3, r3, #8
 800f2c8:	b2da      	uxtb	r2, r3
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	0c1b      	lsrs	r3, r3, #16
 800f2de:	b2da      	uxtb	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	0e1b      	lsrs	r3, r3, #24
 800f2f4:	b2da      	uxtb	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	3b01      	subs	r3, #1
 800f304:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	3301      	adds	r3, #1
 800f30a:	617b      	str	r3, [r7, #20]
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	2b07      	cmp	r3, #7
 800f310:	d9c8      	bls.n	800f2a4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	68fa      	ldr	r2, [r7, #12]
 800f316:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	693a      	ldr	r2, [r7, #16]
 800f31c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f31e:	bf00      	nop
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b086      	sub	sp, #24
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a1b      	ldr	r3, [r3, #32]
 800f332:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f338:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d043      	beq.n	800f3c8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f340:	2300      	movs	r3, #0
 800f342:	617b      	str	r3, [r7, #20]
 800f344:	e037      	b.n	800f3b6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	3301      	adds	r3, #1
 800f350:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	3b01      	subs	r3, #1
 800f356:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	021a      	lsls	r2, r3, #8
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	4313      	orrs	r3, r2
 800f362:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	3301      	adds	r3, #1
 800f368:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	041a      	lsls	r2, r3, #16
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	4313      	orrs	r3, r2
 800f37a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3301      	adds	r3, #1
 800f380:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	3b01      	subs	r3, #1
 800f386:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	061a      	lsls	r2, r3, #24
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	4313      	orrs	r3, r2
 800f392:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	3301      	adds	r3, #1
 800f398:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f107 0208 	add.w	r2, r7, #8
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f002 fead 	bl	801210a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	617b      	str	r3, [r7, #20]
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	2b07      	cmp	r3, #7
 800f3ba:	d9c4      	bls.n	800f346 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	693a      	ldr	r2, [r7, #16]
 800f3c6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f3c8:	bf00      	nop
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d101      	bne.n	800f3e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e084      	b.n	800f4ec <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d106      	bne.n	800f402 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7f8 f891 	bl	8007524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2202      	movs	r2, #2
 800f406:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f418:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f422:	d902      	bls.n	800f42a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f424:	2300      	movs	r3, #0
 800f426:	60fb      	str	r3, [r7, #12]
 800f428:	e002      	b.n	800f430 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f42a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f42e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800f438:	d007      	beq.n	800f44a <HAL_SPI_Init+0x7a>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f442:	d002      	beq.n	800f44a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10b      	bne.n	800f46a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f45a:	d903      	bls.n	800f464 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2202      	movs	r2, #2
 800f460:	631a      	str	r2, [r3, #48]	; 0x30
 800f462:	e002      	b.n	800f46a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2201      	movs	r2, #1
 800f468:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	685a      	ldr	r2, [r3, #4]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	689b      	ldr	r3, [r3, #8]
 800f472:	431a      	orrs	r2, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	431a      	orrs	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	695b      	ldr	r3, [r3, #20]
 800f47e:	431a      	orrs	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	699b      	ldr	r3, [r3, #24]
 800f484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f488:	431a      	orrs	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	69db      	ldr	r3, [r3, #28]
 800f48e:	431a      	orrs	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6a1b      	ldr	r3, [r3, #32]
 800f494:	ea42 0103 	orr.w	r1, r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	699b      	ldr	r3, [r3, #24]
 800f4a8:	0c1b      	lsrs	r3, r3, #16
 800f4aa:	f003 0204 	and.w	r2, r3, #4
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b2:	431a      	orrs	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b8:	431a      	orrs	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	ea42 0103 	orr.w	r1, r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	430a      	orrs	r2, r1
 800f4ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	69da      	ldr	r2, [r3, #28]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f4da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3710      	adds	r7, #16
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b088      	sub	sp, #32
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	603b      	str	r3, [r7, #0]
 800f500:	4613      	mov	r3, r2
 800f502:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f504:	2300      	movs	r3, #0
 800f506:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d101      	bne.n	800f516 <HAL_SPI_Transmit+0x22>
 800f512:	2302      	movs	r3, #2
 800f514:	e150      	b.n	800f7b8 <HAL_SPI_Transmit+0x2c4>
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2201      	movs	r2, #1
 800f51a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f51e:	f7f8 fe93 	bl	8008248 <HAL_GetTick>
 800f522:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f524:	88fb      	ldrh	r3, [r7, #6]
 800f526:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	2b01      	cmp	r3, #1
 800f532:	d002      	beq.n	800f53a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f534:	2302      	movs	r3, #2
 800f536:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f538:	e135      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <HAL_SPI_Transmit+0x52>
 800f540:	88fb      	ldrh	r3, [r7, #6]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d102      	bne.n	800f54c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f546:	2301      	movs	r3, #1
 800f548:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f54a:	e12c      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2203      	movs	r2, #3
 800f550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2200      	movs	r2, #0
 800f558:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	88fa      	ldrh	r2, [r7, #6]
 800f564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	88fa      	ldrh	r2, [r7, #6]
 800f56a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2200      	movs	r2, #0
 800f570:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2200      	movs	r2, #0
 800f576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2200      	movs	r2, #0
 800f57e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2200      	movs	r2, #0
 800f58c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	689b      	ldr	r3, [r3, #8]
 800f592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f596:	d107      	bne.n	800f5a8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f5a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5b2:	2b40      	cmp	r3, #64	; 0x40
 800f5b4:	d007      	beq.n	800f5c6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f5c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f5ce:	d94b      	bls.n	800f668 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d002      	beq.n	800f5de <HAL_SPI_Transmit+0xea>
 800f5d8:	8afb      	ldrh	r3, [r7, #22]
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d13e      	bne.n	800f65c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5e2:	881a      	ldrh	r2, [r3, #0]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ee:	1c9a      	adds	r2, r3, #2
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	3b01      	subs	r3, #1
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f602:	e02b      	b.n	800f65c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f003 0302 	and.w	r3, r3, #2
 800f60e:	2b02      	cmp	r3, #2
 800f610:	d112      	bne.n	800f638 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f616:	881a      	ldrh	r2, [r3, #0]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f622:	1c9a      	adds	r2, r3, #2
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	3b01      	subs	r3, #1
 800f630:	b29a      	uxth	r2, r3
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f636:	e011      	b.n	800f65c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f638:	f7f8 fe06 	bl	8008248 <HAL_GetTick>
 800f63c:	4602      	mov	r2, r0
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	429a      	cmp	r2, r3
 800f646:	d803      	bhi.n	800f650 <HAL_SPI_Transmit+0x15c>
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f64e:	d102      	bne.n	800f656 <HAL_SPI_Transmit+0x162>
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d102      	bne.n	800f65c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800f656:	2303      	movs	r3, #3
 800f658:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f65a:	e0a4      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f660:	b29b      	uxth	r3, r3
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1ce      	bne.n	800f604 <HAL_SPI_Transmit+0x110>
 800f666:	e07c      	b.n	800f762 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d002      	beq.n	800f676 <HAL_SPI_Transmit+0x182>
 800f670:	8afb      	ldrh	r3, [r7, #22]
 800f672:	2b01      	cmp	r3, #1
 800f674:	d170      	bne.n	800f758 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d912      	bls.n	800f6a6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f684:	881a      	ldrh	r2, [r3, #0]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f690:	1c9a      	adds	r2, r3, #2
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	3b02      	subs	r3, #2
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f6a4:	e058      	b.n	800f758 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	330c      	adds	r3, #12
 800f6b0:	7812      	ldrb	r2, [r2, #0]
 800f6b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	b29a      	uxth	r2, r3
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800f6cc:	e044      	b.n	800f758 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	f003 0302 	and.w	r3, r3, #2
 800f6d8:	2b02      	cmp	r3, #2
 800f6da:	d12b      	bne.n	800f734 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d912      	bls.n	800f70c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ea:	881a      	ldrh	r2, [r3, #0]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6f6:	1c9a      	adds	r2, r3, #2
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f700:	b29b      	uxth	r3, r3
 800f702:	3b02      	subs	r3, #2
 800f704:	b29a      	uxth	r2, r3
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f70a:	e025      	b.n	800f758 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	330c      	adds	r3, #12
 800f716:	7812      	ldrb	r2, [r2, #0]
 800f718:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f71e:	1c5a      	adds	r2, r3, #1
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f728:	b29b      	uxth	r3, r3
 800f72a:	3b01      	subs	r3, #1
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f732:	e011      	b.n	800f758 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f734:	f7f8 fd88 	bl	8008248 <HAL_GetTick>
 800f738:	4602      	mov	r2, r0
 800f73a:	69bb      	ldr	r3, [r7, #24]
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	683a      	ldr	r2, [r7, #0]
 800f740:	429a      	cmp	r2, r3
 800f742:	d803      	bhi.n	800f74c <HAL_SPI_Transmit+0x258>
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f74a:	d102      	bne.n	800f752 <HAL_SPI_Transmit+0x25e>
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d102      	bne.n	800f758 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800f752:	2303      	movs	r3, #3
 800f754:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f756:	e026      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1b5      	bne.n	800f6ce <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f762:	69ba      	ldr	r2, [r7, #24]
 800f764:	6839      	ldr	r1, [r7, #0]
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f001 f8c7 	bl	80108fa <SPI_EndRxTxTransaction>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2220      	movs	r2, #32
 800f776:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d10a      	bne.n	800f796 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f780:	2300      	movs	r3, #0
 800f782:	613b      	str	r3, [r7, #16]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	613b      	str	r3, [r7, #16]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	613b      	str	r3, [r7, #16]
 800f794:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d002      	beq.n	800f7a4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	77fb      	strb	r3, [r7, #31]
 800f7a2:	e000      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800f7a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f7b6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3720      	adds	r7, #32
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b08a      	sub	sp, #40	; 0x28
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
 800f7cc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d101      	bne.n	800f7e6 <HAL_SPI_TransmitReceive+0x26>
 800f7e2:	2302      	movs	r3, #2
 800f7e4:	e1fb      	b.n	800fbde <HAL_SPI_TransmitReceive+0x41e>
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f7ee:	f7f8 fd2b 	bl	8008248 <HAL_GetTick>
 800f7f2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f7fa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f802:	887b      	ldrh	r3, [r7, #2]
 800f804:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f806:	887b      	ldrh	r3, [r7, #2]
 800f808:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f80a:	7efb      	ldrb	r3, [r7, #27]
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d00e      	beq.n	800f82e <HAL_SPI_TransmitReceive+0x6e>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f816:	d106      	bne.n	800f826 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d102      	bne.n	800f826 <HAL_SPI_TransmitReceive+0x66>
 800f820:	7efb      	ldrb	r3, [r7, #27]
 800f822:	2b04      	cmp	r3, #4
 800f824:	d003      	beq.n	800f82e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f826:	2302      	movs	r3, #2
 800f828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f82c:	e1cd      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d005      	beq.n	800f840 <HAL_SPI_TransmitReceive+0x80>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d002      	beq.n	800f840 <HAL_SPI_TransmitReceive+0x80>
 800f83a:	887b      	ldrh	r3, [r7, #2]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d103      	bne.n	800f848 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f840:	2301      	movs	r3, #1
 800f842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f846:	e1c0      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	2b04      	cmp	r3, #4
 800f852:	d003      	beq.n	800f85c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2205      	movs	r2, #5
 800f858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2200      	movs	r2, #0
 800f860:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	887a      	ldrh	r2, [r7, #2]
 800f86c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	887a      	ldrh	r2, [r7, #2]
 800f874:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	68ba      	ldr	r2, [r7, #8]
 800f87c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	887a      	ldrh	r2, [r7, #2]
 800f882:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	887a      	ldrh	r2, [r7, #2]
 800f888:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f89e:	d802      	bhi.n	800f8a6 <HAL_SPI_TransmitReceive+0xe6>
 800f8a0:	8a3b      	ldrh	r3, [r7, #16]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d908      	bls.n	800f8b8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f8b4:	605a      	str	r2, [r3, #4]
 800f8b6:	e007      	b.n	800f8c8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	685a      	ldr	r2, [r3, #4]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f8c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8d2:	2b40      	cmp	r3, #64	; 0x40
 800f8d4:	d007      	beq.n	800f8e6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f8e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f8ee:	d97c      	bls.n	800f9ea <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d002      	beq.n	800f8fe <HAL_SPI_TransmitReceive+0x13e>
 800f8f8:	8a7b      	ldrh	r3, [r7, #18]
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d169      	bne.n	800f9d2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f902:	881a      	ldrh	r2, [r3, #0]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f90e:	1c9a      	adds	r2, r3, #2
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f918:	b29b      	uxth	r3, r3
 800f91a:	3b01      	subs	r3, #1
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f922:	e056      	b.n	800f9d2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	f003 0302 	and.w	r3, r3, #2
 800f92e:	2b02      	cmp	r3, #2
 800f930:	d11b      	bne.n	800f96a <HAL_SPI_TransmitReceive+0x1aa>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f936:	b29b      	uxth	r3, r3
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d016      	beq.n	800f96a <HAL_SPI_TransmitReceive+0x1aa>
 800f93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d113      	bne.n	800f96a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f946:	881a      	ldrh	r2, [r3, #0]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f952:	1c9a      	adds	r2, r3, #2
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	3b01      	subs	r3, #1
 800f960:	b29a      	uxth	r2, r3
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f966:	2300      	movs	r3, #0
 800f968:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f003 0301 	and.w	r3, r3, #1
 800f974:	2b01      	cmp	r3, #1
 800f976:	d11c      	bne.n	800f9b2 <HAL_SPI_TransmitReceive+0x1f2>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f97e:	b29b      	uxth	r3, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	d016      	beq.n	800f9b2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68da      	ldr	r2, [r3, #12]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f98e:	b292      	uxth	r2, r2
 800f990:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f996:	1c9a      	adds	r2, r3, #2
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f9b2:	f7f8 fc49 	bl	8008248 <HAL_GetTick>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	69fb      	ldr	r3, [r7, #28]
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d807      	bhi.n	800f9d2 <HAL_SPI_TransmitReceive+0x212>
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c8:	d003      	beq.n	800f9d2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f9d0:	e0fb      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1a3      	bne.n	800f924 <HAL_SPI_TransmitReceive+0x164>
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d19d      	bne.n	800f924 <HAL_SPI_TransmitReceive+0x164>
 800f9e8:	e0df      	b.n	800fbaa <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d003      	beq.n	800f9fa <HAL_SPI_TransmitReceive+0x23a>
 800f9f2:	8a7b      	ldrh	r3, [r7, #18]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	f040 80cb 	bne.w	800fb90 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d912      	bls.n	800fa2a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa08:	881a      	ldrh	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa14:	1c9a      	adds	r2, r3, #2
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	3b02      	subs	r3, #2
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fa28:	e0b2      	b.n	800fb90 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	330c      	adds	r3, #12
 800fa34:	7812      	ldrb	r2, [r2, #0]
 800fa36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa3c:	1c5a      	adds	r2, r3, #1
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa50:	e09e      	b.n	800fb90 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	689b      	ldr	r3, [r3, #8]
 800fa58:	f003 0302 	and.w	r3, r3, #2
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	d134      	bne.n	800faca <HAL_SPI_TransmitReceive+0x30a>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d02f      	beq.n	800faca <HAL_SPI_TransmitReceive+0x30a>
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d12c      	bne.n	800faca <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d912      	bls.n	800faa0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa7e:	881a      	ldrh	r2, [r3, #0]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa8a:	1c9a      	adds	r2, r3, #2
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	3b02      	subs	r3, #2
 800fa98:	b29a      	uxth	r2, r3
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fa9e:	e012      	b.n	800fac6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	330c      	adds	r3, #12
 800faaa:	7812      	ldrb	r2, [r2, #0]
 800faac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	3b01      	subs	r3, #1
 800fac0:	b29a      	uxth	r2, r3
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fac6:	2300      	movs	r3, #0
 800fac8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	f003 0301 	and.w	r3, r3, #1
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d148      	bne.n	800fb6a <HAL_SPI_TransmitReceive+0x3aa>
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fade:	b29b      	uxth	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d042      	beq.n	800fb6a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800faea:	b29b      	uxth	r3, r3
 800faec:	2b01      	cmp	r3, #1
 800faee:	d923      	bls.n	800fb38 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	68da      	ldr	r2, [r3, #12]
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fafa:	b292      	uxth	r2, r2
 800fafc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb02:	1c9a      	adds	r2, r3, #2
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	3b02      	subs	r3, #2
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d81f      	bhi.n	800fb66 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	685a      	ldr	r2, [r3, #4]
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fb34:	605a      	str	r2, [r3, #4]
 800fb36:	e016      	b.n	800fb66 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f103 020c 	add.w	r2, r3, #12
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb44:	7812      	ldrb	r2, [r2, #0]
 800fb46:	b2d2      	uxtb	r2, r2
 800fb48:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb4e:	1c5a      	adds	r2, r3, #1
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	3b01      	subs	r3, #1
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fb66:	2301      	movs	r3, #1
 800fb68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fb6a:	f7f8 fb6d 	bl	8008248 <HAL_GetTick>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	1ad3      	subs	r3, r2, r3
 800fb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d803      	bhi.n	800fb82 <HAL_SPI_TransmitReceive+0x3c2>
 800fb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb80:	d102      	bne.n	800fb88 <HAL_SPI_TransmitReceive+0x3c8>
 800fb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d103      	bne.n	800fb90 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800fb88:	2303      	movs	r3, #3
 800fb8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800fb8e:	e01c      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	f47f af5b 	bne.w	800fa52 <HAL_SPI_TransmitReceive+0x292>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f47f af54 	bne.w	800fa52 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fbaa:	69fa      	ldr	r2, [r7, #28]
 800fbac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	f000 fea3 	bl	80108fa <SPI_EndRxTxTransaction>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d006      	beq.n	800fbc8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2220      	movs	r2, #32
 800fbc4:	661a      	str	r2, [r3, #96]	; 0x60
 800fbc6:	e000      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800fbc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800fbda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3728      	adds	r7, #40	; 0x28
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
	...

0800fbe8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b087      	sub	sp, #28
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	607a      	str	r2, [r7, #4]
 800fbf4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d101      	bne.n	800fc08 <HAL_SPI_TransmitReceive_IT+0x20>
 800fc04:	2302      	movs	r3, #2
 800fc06:	e091      	b.n	800fd2c <HAL_SPI_TransmitReceive_IT+0x144>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fc16:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fc1e:	7dbb      	ldrb	r3, [r7, #22]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d00d      	beq.n	800fc40 <HAL_SPI_TransmitReceive_IT+0x58>
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc2a:	d106      	bne.n	800fc3a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d102      	bne.n	800fc3a <HAL_SPI_TransmitReceive_IT+0x52>
 800fc34:	7dbb      	ldrb	r3, [r7, #22]
 800fc36:	2b04      	cmp	r3, #4
 800fc38:	d002      	beq.n	800fc40 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800fc3a:	2302      	movs	r3, #2
 800fc3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fc3e:	e070      	b.n	800fd22 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d005      	beq.n	800fc52 <HAL_SPI_TransmitReceive_IT+0x6a>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d002      	beq.n	800fc52 <HAL_SPI_TransmitReceive_IT+0x6a>
 800fc4c:	887b      	ldrh	r3, [r7, #2]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d102      	bne.n	800fc58 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800fc52:	2301      	movs	r3, #1
 800fc54:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fc56:	e064      	b.n	800fd22 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	2b04      	cmp	r3, #4
 800fc62:	d003      	beq.n	800fc6c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2205      	movs	r2, #5
 800fc68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	68ba      	ldr	r2, [r7, #8]
 800fc76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	887a      	ldrh	r2, [r7, #2]
 800fc7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	887a      	ldrh	r2, [r7, #2]
 800fc82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	887a      	ldrh	r2, [r7, #2]
 800fc8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	887a      	ldrh	r2, [r7, #2]
 800fc96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fca2:	d906      	bls.n	800fcb2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	4a24      	ldr	r2, [pc, #144]	; (800fd38 <HAL_SPI_TransmitReceive_IT+0x150>)
 800fca8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	4a23      	ldr	r2, [pc, #140]	; (800fd3c <HAL_SPI_TransmitReceive_IT+0x154>)
 800fcae:	651a      	str	r2, [r3, #80]	; 0x50
 800fcb0:	e005      	b.n	800fcbe <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	4a22      	ldr	r2, [pc, #136]	; (800fd40 <HAL_SPI_TransmitReceive_IT+0x158>)
 800fcb6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	4a22      	ldr	r2, [pc, #136]	; (800fd44 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800fcbc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fcc6:	d802      	bhi.n	800fcce <HAL_SPI_TransmitReceive_IT+0xe6>
 800fcc8:	887b      	ldrh	r3, [r7, #2]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d908      	bls.n	800fce0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	685a      	ldr	r2, [r3, #4]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fcdc:	605a      	str	r2, [r3, #4]
 800fcde:	e007      	b.n	800fcf0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	685a      	ldr	r2, [r3, #4]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fcee:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	685a      	ldr	r2, [r3, #4]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800fcfe:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd0a:	2b40      	cmp	r3, #64	; 0x40
 800fd0c:	d008      	beq.n	800fd20 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd1c:	601a      	str	r2, [r3, #0]
 800fd1e:	e000      	b.n	800fd22 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800fd20:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800fd2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	371c      	adds	r7, #28
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	080105d7 	.word	0x080105d7
 800fd3c:	0801063d 	.word	0x0801063d
 800fd40:	08010487 	.word	0x08010487
 800fd44:	08010545 	.word	0x08010545

0800fd48 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b086      	sub	sp, #24
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	607a      	str	r2, [r7, #4]
 800fd54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fd56:	2300      	movs	r3, #0
 800fd58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d101      	bne.n	800fd68 <HAL_SPI_TransmitReceive_DMA+0x20>
 800fd64:	2302      	movs	r3, #2
 800fd66:	e16c      	b.n	8010042 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fd76:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800fd7e:	7dbb      	ldrb	r3, [r7, #22]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d00d      	beq.n	800fda0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fd8a:	d106      	bne.n	800fd9a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d102      	bne.n	800fd9a <HAL_SPI_TransmitReceive_DMA+0x52>
 800fd94:	7dbb      	ldrb	r3, [r7, #22]
 800fd96:	2b04      	cmp	r3, #4
 800fd98:	d002      	beq.n	800fda0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800fd9a:	2302      	movs	r3, #2
 800fd9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fd9e:	e14b      	b.n	8010038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d005      	beq.n	800fdb2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d002      	beq.n	800fdb2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800fdac:	887b      	ldrh	r3, [r7, #2]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d102      	bne.n	800fdb8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fdb6:	e13f      	b.n	8010038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b04      	cmp	r3, #4
 800fdc2:	d003      	beq.n	800fdcc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2205      	movs	r2, #5
 800fdc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	68ba      	ldr	r2, [r7, #8]
 800fdd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	887a      	ldrh	r2, [r7, #2]
 800fddc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	887a      	ldrh	r2, [r7, #2]
 800fde2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	887a      	ldrh	r2, [r7, #2]
 800fdee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	887a      	ldrh	r2, [r7, #2]
 800fdf6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2200      	movs	r2, #0
 800fe04:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	685a      	ldr	r2, [r3, #4]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800fe14:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fe1e:	d908      	bls.n	800fe32 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	685a      	ldr	r2, [r3, #4]
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fe2e:	605a      	str	r2, [r3, #4]
 800fe30:	e06f      	b.n	800ff12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	685a      	ldr	r2, [r3, #4]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe40:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe46:	699b      	ldr	r3, [r3, #24]
 800fe48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe4c:	d126      	bne.n	800fe9c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800fe52:	f003 0301 	and.w	r3, r3, #1
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d10f      	bne.n	800fe7a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	685a      	ldr	r2, [r3, #4]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fe68:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	085b      	lsrs	r3, r3, #1
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fe78:	e010      	b.n	800fe9c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	685a      	ldr	r2, [r3, #4]
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fe88:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	085b      	lsrs	r3, r3, #1
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	3301      	adds	r3, #1
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fea0:	699b      	ldr	r3, [r3, #24]
 800fea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fea6:	d134      	bne.n	800ff12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800feb6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800febe:	b29b      	uxth	r3, r3
 800fec0:	f003 0301 	and.w	r3, r3, #1
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d111      	bne.n	800feec <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fed6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fede:	b29b      	uxth	r3, r3
 800fee0:	085b      	lsrs	r3, r3, #1
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800feea:	e012      	b.n	800ff12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	685a      	ldr	r2, [r3, #4]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fefa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	085b      	lsrs	r3, r3, #1
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	3301      	adds	r3, #1
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	2b04      	cmp	r3, #4
 800ff1c:	d108      	bne.n	800ff30 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff22:	4a4a      	ldr	r2, [pc, #296]	; (801004c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800ff24:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff2a:	4a49      	ldr	r2, [pc, #292]	; (8010050 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800ff2c:	63da      	str	r2, [r3, #60]	; 0x3c
 800ff2e:	e007      	b.n	800ff40 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff34:	4a47      	ldr	r2, [pc, #284]	; (8010054 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800ff36:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff3c:	4a46      	ldr	r2, [pc, #280]	; (8010058 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800ff3e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff44:	4a45      	ldr	r2, [pc, #276]	; (801005c <HAL_SPI_TransmitReceive_DMA+0x314>)
 800ff46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	330c      	adds	r3, #12
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff60:	461a      	mov	r2, r3
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	f7f8 fb5b 	bl	8008624 <HAL_DMA_Start_IT>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00c      	beq.n	800ff8e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff78:	f043 0210 	orr.w	r2, r3, #16
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ff80:	2301      	movs	r3, #1
 800ff82:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2201      	movs	r2, #1
 800ff88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ff8c:	e054      	b.n	8010038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f042 0201 	orr.w	r2, r2, #1
 800ff9c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffaa:	2200      	movs	r2, #0
 800ffac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffba:	2200      	movs	r2, #0
 800ffbc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	330c      	adds	r3, #12
 800ffce:	461a      	mov	r2, r3
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	f7f8 fb25 	bl	8008624 <HAL_DMA_Start_IT>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00c      	beq.n	800fffa <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ffe4:	f043 0210 	orr.w	r2, r3, #16
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ffec:	2301      	movs	r3, #1
 800ffee:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2201      	movs	r2, #1
 800fff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800fff8:	e01e      	b.n	8010038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010004:	2b40      	cmp	r3, #64	; 0x40
 8010006:	d007      	beq.n	8010018 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010016:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	685a      	ldr	r2, [r3, #4]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f042 0220 	orr.w	r2, r2, #32
 8010026:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	685a      	ldr	r2, [r3, #4]
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f042 0202 	orr.w	r2, r2, #2
 8010036:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010040:	7dfb      	ldrb	r3, [r7, #23]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3718      	adds	r7, #24
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	080103e5 	.word	0x080103e5
 8010050:	080102cd 	.word	0x080102cd
 8010054:	08010401 	.word	0x08010401
 8010058:	08010353 	.word	0x08010353
 801005c:	0801041d 	.word	0x0801041d

08010060 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b088      	sub	sp, #32
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	689b      	ldr	r3, [r3, #8]
 8010076:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	099b      	lsrs	r3, r3, #6
 801007c:	f003 0301 	and.w	r3, r3, #1
 8010080:	2b00      	cmp	r3, #0
 8010082:	d10f      	bne.n	80100a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801008a:	2b00      	cmp	r3, #0
 801008c:	d00a      	beq.n	80100a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	099b      	lsrs	r3, r3, #6
 8010092:	f003 0301 	and.w	r3, r3, #1
 8010096:	2b00      	cmp	r3, #0
 8010098:	d004      	beq.n	80100a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	4798      	blx	r3
    return;
 80100a2:	e0d8      	b.n	8010256 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	085b      	lsrs	r3, r3, #1
 80100a8:	f003 0301 	and.w	r3, r3, #1
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00a      	beq.n	80100c6 <HAL_SPI_IRQHandler+0x66>
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	09db      	lsrs	r3, r3, #7
 80100b4:	f003 0301 	and.w	r3, r3, #1
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d004      	beq.n	80100c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	4798      	blx	r3
    return;
 80100c4:	e0c7      	b.n	8010256 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	095b      	lsrs	r3, r3, #5
 80100ca:	f003 0301 	and.w	r3, r3, #1
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d10c      	bne.n	80100ec <HAL_SPI_IRQHandler+0x8c>
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	099b      	lsrs	r3, r3, #6
 80100d6:	f003 0301 	and.w	r3, r3, #1
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d106      	bne.n	80100ec <HAL_SPI_IRQHandler+0x8c>
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	0a1b      	lsrs	r3, r3, #8
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f000 80b5 	beq.w	8010256 <HAL_SPI_IRQHandler+0x1f6>
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	095b      	lsrs	r3, r3, #5
 80100f0:	f003 0301 	and.w	r3, r3, #1
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	f000 80ae 	beq.w	8010256 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	099b      	lsrs	r3, r3, #6
 80100fe:	f003 0301 	and.w	r3, r3, #1
 8010102:	2b00      	cmp	r3, #0
 8010104:	d023      	beq.n	801014e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801010c:	b2db      	uxtb	r3, r3
 801010e:	2b03      	cmp	r3, #3
 8010110:	d011      	beq.n	8010136 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010116:	f043 0204 	orr.w	r2, r3, #4
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801011e:	2300      	movs	r3, #0
 8010120:	617b      	str	r3, [r7, #20]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	617b      	str	r3, [r7, #20]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	617b      	str	r3, [r7, #20]
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	e00b      	b.n	801014e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010136:	2300      	movs	r3, #0
 8010138:	613b      	str	r3, [r7, #16]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	613b      	str	r3, [r7, #16]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	613b      	str	r3, [r7, #16]
 801014a:	693b      	ldr	r3, [r7, #16]
        return;
 801014c:	e083      	b.n	8010256 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801014e:	69bb      	ldr	r3, [r7, #24]
 8010150:	095b      	lsrs	r3, r3, #5
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	d014      	beq.n	8010184 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801015e:	f043 0201 	orr.w	r2, r3, #1
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010166:	2300      	movs	r3, #0
 8010168:	60fb      	str	r3, [r7, #12]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	60fb      	str	r3, [r7, #12]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010180:	601a      	str	r2, [r3, #0]
 8010182:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	0a1b      	lsrs	r3, r3, #8
 8010188:	f003 0301 	and.w	r3, r3, #1
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00c      	beq.n	80101aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010194:	f043 0208 	orr.w	r2, r3, #8
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801019c:	2300      	movs	r3, #0
 801019e:	60bb      	str	r3, [r7, #8]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	60bb      	str	r3, [r7, #8]
 80101a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d050      	beq.n	8010254 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	685a      	ldr	r2, [r3, #4]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80101c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2201      	movs	r2, #1
 80101c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	f003 0302 	and.w	r3, r3, #2
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d104      	bne.n	80101de <HAL_SPI_IRQHandler+0x17e>
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	f003 0301 	and.w	r3, r3, #1
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d034      	beq.n	8010248 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	685a      	ldr	r2, [r3, #4]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f022 0203 	bic.w	r2, r2, #3
 80101ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d011      	beq.n	801021a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101fa:	4a18      	ldr	r2, [pc, #96]	; (801025c <HAL_SPI_IRQHandler+0x1fc>)
 80101fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010202:	4618      	mov	r0, r3
 8010204:	f7f8 fa6e 	bl	80086e4 <HAL_DMA_Abort_IT>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d005      	beq.n	801021a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010212:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801021e:	2b00      	cmp	r3, #0
 8010220:	d016      	beq.n	8010250 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010226:	4a0d      	ldr	r2, [pc, #52]	; (801025c <HAL_SPI_IRQHandler+0x1fc>)
 8010228:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801022e:	4618      	mov	r0, r3
 8010230:	f7f8 fa58 	bl	80086e4 <HAL_DMA_Abort_IT>
 8010234:	4603      	mov	r3, r0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00a      	beq.n	8010250 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801023e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8010246:	e003      	b.n	8010250 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f000 f827 	bl	801029c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801024e:	e000      	b.n	8010252 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8010250:	bf00      	nop
    return;
 8010252:	bf00      	nop
 8010254:	bf00      	nop
  }
}
 8010256:	3720      	adds	r7, #32
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	0801045d 	.word	0x0801045d

08010260 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010268:	bf00      	nop
 801026a:	370c      	adds	r7, #12
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr

08010274 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 801027c:	bf00      	nop
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8010290:	bf00      	nop
 8010292:	370c      	adds	r7, #12
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80102a4:	bf00      	nop
 80102a6:	370c      	adds	r7, #12
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80102be:	b2db      	uxtb	r3, r3
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102d8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80102da:	f7f7 ffb5 	bl	8008248 <HAL_GetTick>
 80102de:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102ee:	d02a      	beq.n	8010346 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	685a      	ldr	r2, [r3, #4]
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f022 0220 	bic.w	r2, r2, #32
 80102fe:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	685a      	ldr	r2, [r3, #4]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	f022 0203 	bic.w	r2, r2, #3
 801030e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010310:	68ba      	ldr	r2, [r7, #8]
 8010312:	2164      	movs	r1, #100	; 0x64
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f000 fa98 	bl	801084a <SPI_EndRxTransaction>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d002      	beq.n	8010326 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2220      	movs	r2, #32
 8010324:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2201      	movs	r2, #1
 8010332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801033a:	2b00      	cmp	r3, #0
 801033c:	d003      	beq.n	8010346 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f7ff ffac 	bl	801029c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010344:	e002      	b.n	801034c <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8010346:	68f8      	ldr	r0, [r7, #12]
 8010348:	f7ff ff8a 	bl	8010260 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b084      	sub	sp, #16
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801035e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010360:	f7f7 ff72 	bl	8008248 <HAL_GetTick>
 8010364:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010374:	d030      	beq.n	80103d8 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	685a      	ldr	r2, [r3, #4]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f022 0220 	bic.w	r2, r2, #32
 8010384:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010386:	68ba      	ldr	r2, [r7, #8]
 8010388:	2164      	movs	r1, #100	; 0x64
 801038a:	68f8      	ldr	r0, [r7, #12]
 801038c:	f000 fab5 	bl	80108fa <SPI_EndRxTxTransaction>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d005      	beq.n	80103a2 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801039a:	f043 0220 	orr.w	r2, r3, #32
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	685a      	ldr	r2, [r3, #4]
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f022 0203 	bic.w	r2, r2, #3
 80103b0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2200      	movs	r2, #0
 80103bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2201      	movs	r2, #1
 80103c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d003      	beq.n	80103d8 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f7ff ff63 	bl	801029c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80103d6:	e002      	b.n	80103de <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f7f1 fa6d 	bl	80018b8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	f7ff ff3e 	bl	8010274 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80103f8:	bf00      	nop
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801040c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f7ff ff3a 	bl	8010288 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010414:	bf00      	nop
 8010416:	3710      	adds	r7, #16
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010428:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	685a      	ldr	r2, [r3, #4]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f022 0203 	bic.w	r2, r2, #3
 8010438:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801043e:	f043 0210 	orr.w	r2, r3, #16
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2201      	movs	r2, #1
 801044a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f7ff ff24 	bl	801029c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010454:	bf00      	nop
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010468:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2200      	movs	r2, #0
 801046e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2200      	movs	r2, #0
 8010476:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010478:	68f8      	ldr	r0, [r7, #12]
 801047a:	f7ff ff0f 	bl	801029c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801047e:	bf00      	nop
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010494:	b29b      	uxth	r3, r3
 8010496:	2b01      	cmp	r3, #1
 8010498:	d923      	bls.n	80104e2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	68da      	ldr	r2, [r3, #12]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104a4:	b292      	uxth	r2, r2
 80104a6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ac:	1c9a      	adds	r2, r3, #2
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	3b02      	subs	r3, #2
 80104bc:	b29a      	uxth	r2, r3
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d11f      	bne.n	8010510 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	685a      	ldr	r2, [r3, #4]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80104de:	605a      	str	r2, [r3, #4]
 80104e0:	e016      	b.n	8010510 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f103 020c 	add.w	r2, r3, #12
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ee:	7812      	ldrb	r2, [r2, #0]
 80104f0:	b2d2      	uxtb	r2, r2
 80104f2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f8:	1c5a      	adds	r2, r3, #1
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010504:	b29b      	uxth	r3, r3
 8010506:	3b01      	subs	r3, #1
 8010508:	b29a      	uxth	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010516:	b29b      	uxth	r3, r3
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10f      	bne.n	801053c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	685a      	ldr	r2, [r3, #4]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801052a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010530:	b29b      	uxth	r3, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d102      	bne.n	801053c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 fa25 	bl	8010986 <SPI_CloseRxTx_ISR>
    }
  }
}
 801053c:	bf00      	nop
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010550:	b29b      	uxth	r3, r3
 8010552:	2b01      	cmp	r3, #1
 8010554:	d912      	bls.n	801057c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801055a:	881a      	ldrh	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010566:	1c9a      	adds	r2, r3, #2
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010570:	b29b      	uxth	r3, r3
 8010572:	3b02      	subs	r3, #2
 8010574:	b29a      	uxth	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	87da      	strh	r2, [r3, #62]	; 0x3e
 801057a:	e012      	b.n	80105a2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	330c      	adds	r3, #12
 8010586:	7812      	ldrb	r2, [r2, #0]
 8010588:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801058e:	1c5a      	adds	r2, r3, #1
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010598:	b29b      	uxth	r3, r3
 801059a:	3b01      	subs	r3, #1
 801059c:	b29a      	uxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d110      	bne.n	80105ce <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	685a      	ldr	r2, [r3, #4]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80105ba:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d102      	bne.n	80105ce <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 f9dc 	bl	8010986 <SPI_CloseRxTx_ISR>
    }
  }
}
 80105ce:	bf00      	nop
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b082      	sub	sp, #8
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	68da      	ldr	r2, [r3, #12]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105e8:	b292      	uxth	r2, r2
 80105ea:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105f0:	1c9a      	adds	r2, r3, #2
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	3b01      	subs	r3, #1
 8010600:	b29a      	uxth	r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801060e:	b29b      	uxth	r3, r3
 8010610:	2b00      	cmp	r3, #0
 8010612:	d10f      	bne.n	8010634 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	685a      	ldr	r2, [r3, #4]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010622:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010628:	b29b      	uxth	r3, r3
 801062a:	2b00      	cmp	r3, #0
 801062c:	d102      	bne.n	8010634 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 f9a9 	bl	8010986 <SPI_CloseRxTx_ISR>
    }
  }
}
 8010634:	bf00      	nop
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010648:	881a      	ldrh	r2, [r3, #0]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010654:	1c9a      	adds	r2, r3, #2
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801065e:	b29b      	uxth	r3, r3
 8010660:	3b01      	subs	r3, #1
 8010662:	b29a      	uxth	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801066c:	b29b      	uxth	r3, r3
 801066e:	2b00      	cmp	r3, #0
 8010670:	d110      	bne.n	8010694 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	685a      	ldr	r2, [r3, #4]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010680:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010688:	b29b      	uxth	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d102      	bne.n	8010694 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 f979 	bl	8010986 <SPI_CloseRxTx_ISR>
    }
  }
}
 8010694:	bf00      	nop
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	603b      	str	r3, [r7, #0]
 80106a8:	4613      	mov	r3, r2
 80106aa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80106ac:	e04c      	b.n	8010748 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b4:	d048      	beq.n	8010748 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80106b6:	f7f7 fdc7 	bl	8008248 <HAL_GetTick>
 80106ba:	4602      	mov	r2, r0
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	1ad3      	subs	r3, r2, r3
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d902      	bls.n	80106cc <SPI_WaitFlagStateUntilTimeout+0x30>
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d13d      	bne.n	8010748 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	685a      	ldr	r2, [r3, #4]
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80106da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80106e4:	d111      	bne.n	801070a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	689b      	ldr	r3, [r3, #8]
 80106ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106ee:	d004      	beq.n	80106fa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106f8:	d107      	bne.n	801070a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010708:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801070e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010712:	d10f      	bne.n	8010734 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010722:	601a      	str	r2, [r3, #0]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010732:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2201      	movs	r2, #1
 8010738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2200      	movs	r2, #0
 8010740:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010744:	2303      	movs	r3, #3
 8010746:	e00f      	b.n	8010768 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	689a      	ldr	r2, [r3, #8]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	4013      	ands	r3, r2
 8010752:	68ba      	ldr	r2, [r7, #8]
 8010754:	429a      	cmp	r2, r3
 8010756:	bf0c      	ite	eq
 8010758:	2301      	moveq	r3, #1
 801075a:	2300      	movne	r3, #0
 801075c:	b2db      	uxtb	r3, r3
 801075e:	461a      	mov	r2, r3
 8010760:	79fb      	ldrb	r3, [r7, #7]
 8010762:	429a      	cmp	r2, r3
 8010764:	d1a3      	bne.n	80106ae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8010766:	2300      	movs	r3, #0
}
 8010768:	4618      	mov	r0, r3
 801076a:	3710      	adds	r7, #16
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 801077e:	e057      	b.n	8010830 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010786:	d106      	bne.n	8010796 <SPI_WaitFifoStateUntilTimeout+0x26>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d103      	bne.n	8010796 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	330c      	adds	r3, #12
 8010794:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801079c:	d048      	beq.n	8010830 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801079e:	f7f7 fd53 	bl	8008248 <HAL_GetTick>
 80107a2:	4602      	mov	r2, r0
 80107a4:	69bb      	ldr	r3, [r7, #24]
 80107a6:	1ad3      	subs	r3, r2, r3
 80107a8:	683a      	ldr	r2, [r7, #0]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d902      	bls.n	80107b4 <SPI_WaitFifoStateUntilTimeout+0x44>
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d13d      	bne.n	8010830 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	685a      	ldr	r2, [r3, #4]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80107c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80107cc:	d111      	bne.n	80107f2 <SPI_WaitFifoStateUntilTimeout+0x82>
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	689b      	ldr	r3, [r3, #8]
 80107d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80107d6:	d004      	beq.n	80107e2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	689b      	ldr	r3, [r3, #8]
 80107dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80107e0:	d107      	bne.n	80107f2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80107fa:	d10f      	bne.n	801081c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801080a:	601a      	str	r2, [r3, #0]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801081a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2201      	movs	r2, #1
 8010820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2200      	movs	r2, #0
 8010828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801082c:	2303      	movs	r3, #3
 801082e:	e008      	b.n	8010842 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	689a      	ldr	r2, [r3, #8]
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	4013      	ands	r3, r2
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	429a      	cmp	r2, r3
 801083e:	d19f      	bne.n	8010780 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8010840:	2300      	movs	r3, #0
}
 8010842:	4618      	mov	r0, r3
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801084a:	b580      	push	{r7, lr}
 801084c:	b086      	sub	sp, #24
 801084e:	af02      	add	r7, sp, #8
 8010850:	60f8      	str	r0, [r7, #12]
 8010852:	60b9      	str	r1, [r7, #8]
 8010854:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801085e:	d111      	bne.n	8010884 <SPI_EndRxTransaction+0x3a>
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	689b      	ldr	r3, [r3, #8]
 8010864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010868:	d004      	beq.n	8010874 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	689b      	ldr	r3, [r3, #8]
 801086e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010872:	d107      	bne.n	8010884 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010882:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	9300      	str	r3, [sp, #0]
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	2200      	movs	r2, #0
 801088c:	2180      	movs	r1, #128	; 0x80
 801088e:	68f8      	ldr	r0, [r7, #12]
 8010890:	f7ff ff04 	bl	801069c <SPI_WaitFlagStateUntilTimeout>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d007      	beq.n	80108aa <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801089e:	f043 0220 	orr.w	r2, r3, #32
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80108a6:	2303      	movs	r3, #3
 80108a8:	e023      	b.n	80108f2 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	685b      	ldr	r3, [r3, #4]
 80108ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80108b2:	d11d      	bne.n	80108f0 <SPI_EndRxTransaction+0xa6>
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108bc:	d004      	beq.n	80108c8 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108c6:	d113      	bne.n	80108f0 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f7ff ff4b 	bl	8010770 <SPI_WaitFifoStateUntilTimeout>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d007      	beq.n	80108f0 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80108e4:	f043 0220 	orr.w	r2, r3, #32
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80108ec:	2303      	movs	r3, #3
 80108ee:	e000      	b.n	80108f2 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80108f0:	2300      	movs	r3, #0
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b086      	sub	sp, #24
 80108fe:	af02      	add	r7, sp, #8
 8010900:	60f8      	str	r0, [r7, #12]
 8010902:	60b9      	str	r1, [r7, #8]
 8010904:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	9300      	str	r3, [sp, #0]
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	2200      	movs	r2, #0
 801090e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010912:	68f8      	ldr	r0, [r7, #12]
 8010914:	f7ff ff2c 	bl	8010770 <SPI_WaitFifoStateUntilTimeout>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d007      	beq.n	801092e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010922:	f043 0220 	orr.w	r2, r3, #32
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801092a:	2303      	movs	r3, #3
 801092c:	e027      	b.n	801097e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	2200      	movs	r2, #0
 8010936:	2180      	movs	r1, #128	; 0x80
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	f7ff feaf 	bl	801069c <SPI_WaitFlagStateUntilTimeout>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d007      	beq.n	8010954 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010948:	f043 0220 	orr.w	r2, r3, #32
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010950:	2303      	movs	r3, #3
 8010952:	e014      	b.n	801097e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	2200      	movs	r2, #0
 801095c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f7ff ff05 	bl	8010770 <SPI_WaitFifoStateUntilTimeout>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d007      	beq.n	801097c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010970:	f043 0220 	orr.w	r2, r3, #32
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010978:	2303      	movs	r3, #3
 801097a:	e000      	b.n	801097e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801097c:	2300      	movs	r3, #0
}
 801097e:	4618      	mov	r0, r3
 8010980:	3710      	adds	r7, #16
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b084      	sub	sp, #16
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801098e:	f7f7 fc5b 	bl	8008248 <HAL_GetTick>
 8010992:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	685a      	ldr	r2, [r3, #4]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f022 0220 	bic.w	r2, r2, #32
 80109a2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80109a4:	68fa      	ldr	r2, [r7, #12]
 80109a6:	2164      	movs	r1, #100	; 0x64
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff ffa6 	bl	80108fa <SPI_EndRxTxTransaction>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d005      	beq.n	80109c0 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109b8:	f043 0220 	orr.w	r2, r3, #32
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d115      	bne.n	80109f4 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	2b04      	cmp	r3, #4
 80109d2:	d107      	bne.n	80109e4 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2201      	movs	r2, #1
 80109d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f7ff fc3f 	bl	8010260 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80109e2:	e00e      	b.n	8010a02 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2201      	movs	r2, #1
 80109e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7f0 ff63 	bl	80018b8 <HAL_SPI_TxRxCpltCallback>
}
 80109f2:	e006      	b.n	8010a02 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2201      	movs	r2, #1
 80109f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f7ff fc4d 	bl	801029c <HAL_SPI_ErrorCallback>
}
 8010a02:	bf00      	nop
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	b082      	sub	sp, #8
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d101      	bne.n	8010a1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	e01d      	b.n	8010a58 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d106      	bne.n	8010a36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f7f6 fe99 	bl	8007768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2202      	movs	r2, #2
 8010a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	3304      	adds	r3, #4
 8010a46:	4619      	mov	r1, r3
 8010a48:	4610      	mov	r0, r2
 8010a4a:	f000 f8ed 	bl	8010c28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2201      	movs	r2, #1
 8010a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010a56:	2300      	movs	r3, #0
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b085      	sub	sp, #20
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2202      	movs	r2, #2
 8010a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	689a      	ldr	r2, [r3, #8]
 8010a76:	4b0e      	ldr	r3, [pc, #56]	; (8010ab0 <HAL_TIM_Base_Start+0x50>)
 8010a78:	4013      	ands	r3, r2
 8010a7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2b06      	cmp	r3, #6
 8010a80:	d00b      	beq.n	8010a9a <HAL_TIM_Base_Start+0x3a>
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a88:	d007      	beq.n	8010a9a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f042 0201 	orr.w	r2, r2, #1
 8010a98:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8010aa2:	2300      	movs	r3, #0
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3714      	adds	r7, #20
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr
 8010ab0:	00010007 	.word	0x00010007

08010ab4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d101      	bne.n	8010acc <HAL_TIM_ConfigClockSource+0x18>
 8010ac8:	2302      	movs	r3, #2
 8010aca:	e0a6      	b.n	8010c1a <HAL_TIM_ConfigClockSource+0x166>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2202      	movs	r2, #2
 8010ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010ae4:	68fa      	ldr	r2, [r7, #12]
 8010ae6:	4b4f      	ldr	r3, [pc, #316]	; (8010c24 <HAL_TIM_ConfigClockSource+0x170>)
 8010ae8:	4013      	ands	r3, r2
 8010aea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010af2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	68fa      	ldr	r2, [r7, #12]
 8010afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b40      	cmp	r3, #64	; 0x40
 8010b02:	d067      	beq.n	8010bd4 <HAL_TIM_ConfigClockSource+0x120>
 8010b04:	2b40      	cmp	r3, #64	; 0x40
 8010b06:	d80b      	bhi.n	8010b20 <HAL_TIM_ConfigClockSource+0x6c>
 8010b08:	2b10      	cmp	r3, #16
 8010b0a:	d073      	beq.n	8010bf4 <HAL_TIM_ConfigClockSource+0x140>
 8010b0c:	2b10      	cmp	r3, #16
 8010b0e:	d802      	bhi.n	8010b16 <HAL_TIM_ConfigClockSource+0x62>
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d06f      	beq.n	8010bf4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8010b14:	e078      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010b16:	2b20      	cmp	r3, #32
 8010b18:	d06c      	beq.n	8010bf4 <HAL_TIM_ConfigClockSource+0x140>
 8010b1a:	2b30      	cmp	r3, #48	; 0x30
 8010b1c:	d06a      	beq.n	8010bf4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8010b1e:	e073      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010b20:	2b70      	cmp	r3, #112	; 0x70
 8010b22:	d00d      	beq.n	8010b40 <HAL_TIM_ConfigClockSource+0x8c>
 8010b24:	2b70      	cmp	r3, #112	; 0x70
 8010b26:	d804      	bhi.n	8010b32 <HAL_TIM_ConfigClockSource+0x7e>
 8010b28:	2b50      	cmp	r3, #80	; 0x50
 8010b2a:	d033      	beq.n	8010b94 <HAL_TIM_ConfigClockSource+0xe0>
 8010b2c:	2b60      	cmp	r3, #96	; 0x60
 8010b2e:	d041      	beq.n	8010bb4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8010b30:	e06a      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b36:	d066      	beq.n	8010c06 <HAL_TIM_ConfigClockSource+0x152>
 8010b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b3c:	d017      	beq.n	8010b6e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8010b3e:	e063      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6818      	ldr	r0, [r3, #0]
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	6899      	ldr	r1, [r3, #8]
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	685a      	ldr	r2, [r3, #4]
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	f000 f984 	bl	8010e5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010b62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	609a      	str	r2, [r3, #8]
      break;
 8010b6c:	e04c      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6818      	ldr	r0, [r3, #0]
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	6899      	ldr	r1, [r3, #8]
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	685a      	ldr	r2, [r3, #4]
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	f000 f96d 	bl	8010e5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	689a      	ldr	r2, [r3, #8]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010b90:	609a      	str	r2, [r3, #8]
      break;
 8010b92:	e039      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6818      	ldr	r0, [r3, #0]
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	6859      	ldr	r1, [r3, #4]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	f000 f8e1 	bl	8010d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	2150      	movs	r1, #80	; 0x50
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 f93a 	bl	8010e26 <TIM_ITRx_SetConfig>
      break;
 8010bb2:	e029      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6818      	ldr	r0, [r3, #0]
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	6859      	ldr	r1, [r3, #4]
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	f000 f900 	bl	8010dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2160      	movs	r1, #96	; 0x60
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f000 f92a 	bl	8010e26 <TIM_ITRx_SetConfig>
      break;
 8010bd2:	e019      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6818      	ldr	r0, [r3, #0]
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	6859      	ldr	r1, [r3, #4]
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	68db      	ldr	r3, [r3, #12]
 8010be0:	461a      	mov	r2, r3
 8010be2:	f000 f8c1 	bl	8010d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2140      	movs	r1, #64	; 0x40
 8010bec:	4618      	mov	r0, r3
 8010bee:	f000 f91a 	bl	8010e26 <TIM_ITRx_SetConfig>
      break;
 8010bf2:	e009      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	4610      	mov	r0, r2
 8010c00:	f000 f911 	bl	8010e26 <TIM_ITRx_SetConfig>
      break;
 8010c04:	e000      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8010c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010c18:	2300      	movs	r3, #0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	fffeff88 	.word	0xfffeff88

08010c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	4a40      	ldr	r2, [pc, #256]	; (8010d3c <TIM_Base_SetConfig+0x114>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d013      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c46:	d00f      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	4a3d      	ldr	r2, [pc, #244]	; (8010d40 <TIM_Base_SetConfig+0x118>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d00b      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4a3c      	ldr	r2, [pc, #240]	; (8010d44 <TIM_Base_SetConfig+0x11c>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d007      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	4a3b      	ldr	r2, [pc, #236]	; (8010d48 <TIM_Base_SetConfig+0x120>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d003      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	4a3a      	ldr	r2, [pc, #232]	; (8010d4c <TIM_Base_SetConfig+0x124>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d108      	bne.n	8010c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	68fa      	ldr	r2, [r7, #12]
 8010c76:	4313      	orrs	r3, r2
 8010c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4a2f      	ldr	r2, [pc, #188]	; (8010d3c <TIM_Base_SetConfig+0x114>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d02b      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c88:	d027      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4a2c      	ldr	r2, [pc, #176]	; (8010d40 <TIM_Base_SetConfig+0x118>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d023      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	4a2b      	ldr	r2, [pc, #172]	; (8010d44 <TIM_Base_SetConfig+0x11c>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d01f      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	4a2a      	ldr	r2, [pc, #168]	; (8010d48 <TIM_Base_SetConfig+0x120>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d01b      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4a29      	ldr	r2, [pc, #164]	; (8010d4c <TIM_Base_SetConfig+0x124>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d017      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a28      	ldr	r2, [pc, #160]	; (8010d50 <TIM_Base_SetConfig+0x128>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d013      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4a27      	ldr	r2, [pc, #156]	; (8010d54 <TIM_Base_SetConfig+0x12c>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d00f      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4a26      	ldr	r2, [pc, #152]	; (8010d58 <TIM_Base_SetConfig+0x130>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d00b      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	4a25      	ldr	r2, [pc, #148]	; (8010d5c <TIM_Base_SetConfig+0x134>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d007      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4a24      	ldr	r2, [pc, #144]	; (8010d60 <TIM_Base_SetConfig+0x138>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d003      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	4a23      	ldr	r2, [pc, #140]	; (8010d64 <TIM_Base_SetConfig+0x13c>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d108      	bne.n	8010cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	68db      	ldr	r3, [r3, #12]
 8010ce6:	68fa      	ldr	r2, [r7, #12]
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	68fa      	ldr	r2, [r7, #12]
 8010cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	689a      	ldr	r2, [r3, #8]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	4a0a      	ldr	r2, [pc, #40]	; (8010d3c <TIM_Base_SetConfig+0x114>)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d003      	beq.n	8010d20 <TIM_Base_SetConfig+0xf8>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	4a0c      	ldr	r2, [pc, #48]	; (8010d4c <TIM_Base_SetConfig+0x124>)
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d103      	bne.n	8010d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	691a      	ldr	r2, [r3, #16]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	615a      	str	r2, [r3, #20]
}
 8010d2e:	bf00      	nop
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	40010000 	.word	0x40010000
 8010d40:	40000400 	.word	0x40000400
 8010d44:	40000800 	.word	0x40000800
 8010d48:	40000c00 	.word	0x40000c00
 8010d4c:	40010400 	.word	0x40010400
 8010d50:	40014000 	.word	0x40014000
 8010d54:	40014400 	.word	0x40014400
 8010d58:	40014800 	.word	0x40014800
 8010d5c:	40001800 	.word	0x40001800
 8010d60:	40001c00 	.word	0x40001c00
 8010d64:	40002000 	.word	0x40002000

08010d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b087      	sub	sp, #28
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	60b9      	str	r1, [r7, #8]
 8010d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	6a1b      	ldr	r3, [r3, #32]
 8010d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	6a1b      	ldr	r3, [r3, #32]
 8010d7e:	f023 0201 	bic.w	r2, r3, #1
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	699b      	ldr	r3, [r3, #24]
 8010d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	011b      	lsls	r3, r3, #4
 8010d98:	693a      	ldr	r2, [r7, #16]
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	f023 030a 	bic.w	r3, r3, #10
 8010da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010da6:	697a      	ldr	r2, [r7, #20]
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	4313      	orrs	r3, r2
 8010dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	693a      	ldr	r2, [r7, #16]
 8010db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	697a      	ldr	r2, [r7, #20]
 8010db8:	621a      	str	r2, [r3, #32]
}
 8010dba:	bf00      	nop
 8010dbc:	371c      	adds	r7, #28
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr

08010dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010dc6:	b480      	push	{r7}
 8010dc8:	b087      	sub	sp, #28
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	60f8      	str	r0, [r7, #12]
 8010dce:	60b9      	str	r1, [r7, #8]
 8010dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	6a1b      	ldr	r3, [r3, #32]
 8010dd6:	f023 0210 	bic.w	r2, r3, #16
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	699b      	ldr	r3, [r3, #24]
 8010de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6a1b      	ldr	r3, [r3, #32]
 8010de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	031b      	lsls	r3, r3, #12
 8010df6:	697a      	ldr	r2, [r7, #20]
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	011b      	lsls	r3, r3, #4
 8010e08:	693a      	ldr	r2, [r7, #16]
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	697a      	ldr	r2, [r7, #20]
 8010e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	693a      	ldr	r2, [r7, #16]
 8010e18:	621a      	str	r2, [r3, #32]
}
 8010e1a:	bf00      	nop
 8010e1c:	371c      	adds	r7, #28
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e24:	4770      	bx	lr

08010e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010e26:	b480      	push	{r7}
 8010e28:	b085      	sub	sp, #20
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010e3e:	683a      	ldr	r2, [r7, #0]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	4313      	orrs	r3, r2
 8010e44:	f043 0307 	orr.w	r3, r3, #7
 8010e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	68fa      	ldr	r2, [r7, #12]
 8010e4e:	609a      	str	r2, [r3, #8]
}
 8010e50:	bf00      	nop
 8010e52:	3714      	adds	r7, #20
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b087      	sub	sp, #28
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
 8010e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	689b      	ldr	r3, [r3, #8]
 8010e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	021a      	lsls	r2, r3, #8
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	431a      	orrs	r2, r3
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	4313      	orrs	r3, r2
 8010e84:	697a      	ldr	r2, [r7, #20]
 8010e86:	4313      	orrs	r3, r2
 8010e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	697a      	ldr	r2, [r7, #20]
 8010e8e:	609a      	str	r2, [r3, #8]
}
 8010e90:	bf00      	nop
 8010e92:	371c      	adds	r7, #28
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b085      	sub	sp, #20
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d101      	bne.n	8010eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010eb0:	2302      	movs	r3, #2
 8010eb2:	e06d      	b.n	8010f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2202      	movs	r2, #2
 8010ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	689b      	ldr	r3, [r3, #8]
 8010ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a30      	ldr	r2, [pc, #192]	; (8010f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d004      	beq.n	8010ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	4a2f      	ldr	r2, [pc, #188]	; (8010fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	d108      	bne.n	8010efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	68fa      	ldr	r2, [r7, #12]
 8010f08:	4313      	orrs	r3, r2
 8010f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	4a20      	ldr	r2, [pc, #128]	; (8010f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d022      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f26:	d01d      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a1d      	ldr	r2, [pc, #116]	; (8010fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d018      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4a1c      	ldr	r2, [pc, #112]	; (8010fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d013      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4a1a      	ldr	r2, [pc, #104]	; (8010fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d00e      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4a15      	ldr	r2, [pc, #84]	; (8010fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d009      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a16      	ldr	r2, [pc, #88]	; (8010fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d004      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4a15      	ldr	r2, [pc, #84]	; (8010fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d10c      	bne.n	8010f7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	68ba      	ldr	r2, [r7, #8]
 8010f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010f8e:	2300      	movs	r3, #0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3714      	adds	r7, #20
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	40010000 	.word	0x40010000
 8010fa0:	40010400 	.word	0x40010400
 8010fa4:	40000400 	.word	0x40000400
 8010fa8:	40000800 	.word	0x40000800
 8010fac:	40000c00 	.word	0x40000c00
 8010fb0:	40014000 	.word	0x40014000
 8010fb4:	40001800 	.word	0x40001800

08010fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	e040      	b.n	801104c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d106      	bne.n	8010fe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f7f6 fc20 	bl	8007820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2224      	movs	r2, #36	; 0x24
 8010fe4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f022 0201 	bic.w	r2, r2, #1
 8010ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 fb2c 	bl	8011654 <UART_SetConfig>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d101      	bne.n	8011006 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011002:	2301      	movs	r3, #1
 8011004:	e022      	b.n	801104c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801100a:	2b00      	cmp	r3, #0
 801100c:	d002      	beq.n	8011014 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f000 fdca 	bl	8011ba8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	689a      	ldr	r2, [r3, #8]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f042 0201 	orr.w	r2, r2, #1
 8011042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 fe51 	bl	8011cec <UART_CheckIdleState>
 801104a:	4603      	mov	r3, r0
}
 801104c:	4618      	mov	r0, r3
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b08a      	sub	sp, #40	; 0x28
 8011058:	af02      	add	r7, sp, #8
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	603b      	str	r3, [r7, #0]
 8011060:	4613      	mov	r3, r2
 8011062:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011068:	2b20      	cmp	r3, #32
 801106a:	d17f      	bne.n	801116c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d002      	beq.n	8011078 <HAL_UART_Transmit+0x24>
 8011072:	88fb      	ldrh	r3, [r7, #6]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d101      	bne.n	801107c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8011078:	2301      	movs	r3, #1
 801107a:	e078      	b.n	801116e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011082:	2b01      	cmp	r3, #1
 8011084:	d101      	bne.n	801108a <HAL_UART_Transmit+0x36>
 8011086:	2302      	movs	r3, #2
 8011088:	e071      	b.n	801116e <HAL_UART_Transmit+0x11a>
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2201      	movs	r2, #1
 801108e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2200      	movs	r2, #0
 8011096:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2221      	movs	r2, #33	; 0x21
 801109c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 801109e:	f7f7 f8d3 	bl	8008248 <HAL_GetTick>
 80110a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	88fa      	ldrh	r2, [r7, #6]
 80110a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	88fa      	ldrh	r2, [r7, #6]
 80110b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110bc:	d108      	bne.n	80110d0 <HAL_UART_Transmit+0x7c>
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	691b      	ldr	r3, [r3, #16]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d104      	bne.n	80110d0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80110c6:	2300      	movs	r3, #0
 80110c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	61bb      	str	r3, [r7, #24]
 80110ce:	e003      	b.n	80110d8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80110d4:	2300      	movs	r3, #0
 80110d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2200      	movs	r2, #0
 80110dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80110e0:	e02c      	b.n	801113c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	2200      	movs	r2, #0
 80110ea:	2180      	movs	r1, #128	; 0x80
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f000 fe42 	bl	8011d76 <UART_WaitOnFlagUntilTimeout>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d001      	beq.n	80110fc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80110f8:	2303      	movs	r3, #3
 80110fa:	e038      	b.n	801116e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d10b      	bne.n	801111a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011102:	69bb      	ldr	r3, [r7, #24]
 8011104:	881b      	ldrh	r3, [r3, #0]
 8011106:	461a      	mov	r2, r3
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011110:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	3302      	adds	r3, #2
 8011116:	61bb      	str	r3, [r7, #24]
 8011118:	e007      	b.n	801112a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	781a      	ldrb	r2, [r3, #0]
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	3301      	adds	r3, #1
 8011128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011130:	b29b      	uxth	r3, r3
 8011132:	3b01      	subs	r3, #1
 8011134:	b29a      	uxth	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011142:	b29b      	uxth	r3, r3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1cc      	bne.n	80110e2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	9300      	str	r3, [sp, #0]
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	2200      	movs	r2, #0
 8011150:	2140      	movs	r1, #64	; 0x40
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f000 fe0f 	bl	8011d76 <UART_WaitOnFlagUntilTimeout>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d001      	beq.n	8011162 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801115e:	2303      	movs	r3, #3
 8011160:	e005      	b.n	801116e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2220      	movs	r2, #32
 8011166:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8011168:	2300      	movs	r3, #0
 801116a:	e000      	b.n	801116e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 801116c:	2302      	movs	r3, #2
  }
}
 801116e:	4618      	mov	r0, r3
 8011170:	3720      	adds	r7, #32
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
	...

08011178 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	60b9      	str	r1, [r7, #8]
 8011182:	4613      	mov	r3, r2
 8011184:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118a:	2b20      	cmp	r3, #32
 801118c:	d164      	bne.n	8011258 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d002      	beq.n	801119a <HAL_UART_Transmit_DMA+0x22>
 8011194:	88fb      	ldrh	r3, [r7, #6]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d101      	bne.n	801119e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 801119a:	2301      	movs	r3, #1
 801119c:	e05d      	b.n	801125a <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d101      	bne.n	80111ac <HAL_UART_Transmit_DMA+0x34>
 80111a8:	2302      	movs	r3, #2
 80111aa:	e056      	b.n	801125a <HAL_UART_Transmit_DMA+0xe2>
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2201      	movs	r2, #1
 80111b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	68ba      	ldr	r2, [r7, #8]
 80111b8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	88fa      	ldrh	r2, [r7, #6]
 80111be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	88fa      	ldrh	r2, [r7, #6]
 80111c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2200      	movs	r2, #0
 80111ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2221      	movs	r2, #33	; 0x21
 80111d4:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d02a      	beq.n	8011234 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111e2:	4a20      	ldr	r2, [pc, #128]	; (8011264 <HAL_UART_Transmit_DMA+0xec>)
 80111e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111ea:	4a1f      	ldr	r2, [pc, #124]	; (8011268 <HAL_UART_Transmit_DMA+0xf0>)
 80111ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111f2:	4a1e      	ldr	r2, [pc, #120]	; (801126c <HAL_UART_Transmit_DMA+0xf4>)
 80111f4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111fa:	2200      	movs	r2, #0
 80111fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011206:	4619      	mov	r1, r3
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	3328      	adds	r3, #40	; 0x28
 801120e:	461a      	mov	r2, r3
 8011210:	88fb      	ldrh	r3, [r7, #6]
 8011212:	f7f7 fa07 	bl	8008624 <HAL_DMA_Start_IT>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d00b      	beq.n	8011234 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2210      	movs	r2, #16
 8011220:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	2200      	movs	r2, #0
 8011226:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2220      	movs	r2, #32
 801122e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8011230:	2301      	movs	r3, #1
 8011232:	e012      	b.n	801125a <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2240      	movs	r2, #64	; 0x40
 801123a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2200      	movs	r2, #0
 8011240:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	689a      	ldr	r2, [r3, #8]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011252:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8011254:	2300      	movs	r3, #0
 8011256:	e000      	b.n	801125a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8011258:	2302      	movs	r3, #2
  }
}
 801125a:	4618      	mov	r0, r3
 801125c:	3710      	adds	r7, #16
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	08011ed7 	.word	0x08011ed7
 8011268:	08011f27 	.word	0x08011f27
 801126c:	08011fc3 	.word	0x08011fc3

08011270 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	4613      	mov	r3, r2
 801127c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011282:	2b20      	cmp	r3, #32
 8011284:	d16c      	bne.n	8011360 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d002      	beq.n	8011292 <HAL_UART_Receive_DMA+0x22>
 801128c:	88fb      	ldrh	r3, [r7, #6]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d101      	bne.n	8011296 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8011292:	2301      	movs	r3, #1
 8011294:	e065      	b.n	8011362 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801129c:	2b01      	cmp	r3, #1
 801129e:	d101      	bne.n	80112a4 <HAL_UART_Receive_DMA+0x34>
 80112a0:	2302      	movs	r3, #2
 80112a2:	e05e      	b.n	8011362 <HAL_UART_Receive_DMA+0xf2>
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2201      	movs	r2, #1
 80112a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	88fa      	ldrh	r2, [r7, #6]
 80112b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2200      	movs	r2, #0
 80112be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2222      	movs	r2, #34	; 0x22
 80112c4:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d02a      	beq.n	8011324 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112d2:	4a26      	ldr	r2, [pc, #152]	; (801136c <HAL_UART_Receive_DMA+0xfc>)
 80112d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112da:	4a25      	ldr	r2, [pc, #148]	; (8011370 <HAL_UART_Receive_DMA+0x100>)
 80112dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112e2:	4a24      	ldr	r2, [pc, #144]	; (8011374 <HAL_UART_Receive_DMA+0x104>)
 80112e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ea:	2200      	movs	r2, #0
 80112ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	3324      	adds	r3, #36	; 0x24
 80112f8:	4619      	mov	r1, r3
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112fe:	461a      	mov	r2, r3
 8011300:	88fb      	ldrh	r3, [r7, #6]
 8011302:	f7f7 f98f 	bl	8008624 <HAL_DMA_Start_IT>
 8011306:	4603      	mov	r3, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00b      	beq.n	8011324 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2210      	movs	r2, #16
 8011310:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2220      	movs	r2, #32
 801131e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8011320:	2301      	movs	r3, #1
 8011322:	e01e      	b.n	8011362 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2200      	movs	r2, #0
 8011328:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801133a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	689a      	ldr	r2, [r3, #8]
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f042 0201 	orr.w	r2, r2, #1
 801134a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	689a      	ldr	r2, [r3, #8]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801135a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 801135c:	2300      	movs	r3, #0
 801135e:	e000      	b.n	8011362 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8011360:	2302      	movs	r3, #2
  }
}
 8011362:	4618      	mov	r0, r3
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	08011f43 	.word	0x08011f43
 8011370:	08011fa7 	.word	0x08011fa7
 8011374:	08011fc3 	.word	0x08011fc3

08011378 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b088      	sub	sp, #32
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	69db      	ldr	r3, [r3, #28]
 8011386:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011398:	69fa      	ldr	r2, [r7, #28]
 801139a:	f640 030f 	movw	r3, #2063	; 0x80f
 801139e:	4013      	ands	r3, r2
 80113a0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d113      	bne.n	80113d0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	f003 0320 	and.w	r3, r3, #32
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d00e      	beq.n	80113d0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	f003 0320 	and.w	r3, r3, #32
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d009      	beq.n	80113d0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f000 8114 	beq.w	80115ee <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	4798      	blx	r3
      }
      return;
 80113ce:	e10e      	b.n	80115ee <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	f000 80d6 	beq.w	8011584 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	f003 0301 	and.w	r3, r3, #1
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d105      	bne.n	80113ee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f000 80cb 	beq.w	8011584 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80113ee:	69fb      	ldr	r3, [r7, #28]
 80113f0:	f003 0301 	and.w	r3, r3, #1
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d00e      	beq.n	8011416 <HAL_UART_IRQHandler+0x9e>
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d009      	beq.n	8011416 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2201      	movs	r2, #1
 8011408:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801140e:	f043 0201 	orr.w	r2, r3, #1
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	f003 0302 	and.w	r3, r3, #2
 801141c:	2b00      	cmp	r3, #0
 801141e:	d00e      	beq.n	801143e <HAL_UART_IRQHandler+0xc6>
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	f003 0301 	and.w	r3, r3, #1
 8011426:	2b00      	cmp	r3, #0
 8011428:	d009      	beq.n	801143e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2202      	movs	r2, #2
 8011430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011436:	f043 0204 	orr.w	r2, r3, #4
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	f003 0304 	and.w	r3, r3, #4
 8011444:	2b00      	cmp	r3, #0
 8011446:	d00e      	beq.n	8011466 <HAL_UART_IRQHandler+0xee>
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	f003 0301 	and.w	r3, r3, #1
 801144e:	2b00      	cmp	r3, #0
 8011450:	d009      	beq.n	8011466 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2204      	movs	r2, #4
 8011458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801145e:	f043 0202 	orr.w	r2, r3, #2
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	f003 0308 	and.w	r3, r3, #8
 801146c:	2b00      	cmp	r3, #0
 801146e:	d013      	beq.n	8011498 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	f003 0320 	and.w	r3, r3, #32
 8011476:	2b00      	cmp	r3, #0
 8011478:	d104      	bne.n	8011484 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011480:	2b00      	cmp	r3, #0
 8011482:	d009      	beq.n	8011498 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2208      	movs	r2, #8
 801148a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011490:	f043 0208 	orr.w	r2, r3, #8
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00f      	beq.n	80114c2 <HAL_UART_IRQHandler+0x14a>
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00a      	beq.n	80114c2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114ba:	f043 0220 	orr.w	r2, r3, #32
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	f000 8093 	beq.w	80115f2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	f003 0320 	and.w	r3, r3, #32
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00c      	beq.n	80114f0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	f003 0320 	and.w	r3, r3, #32
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d007      	beq.n	80114f0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d003      	beq.n	80114f0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011500:	2b40      	cmp	r3, #64	; 0x40
 8011502:	d004      	beq.n	801150e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801150a:	2b00      	cmp	r3, #0
 801150c:	d031      	beq.n	8011572 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f000 fcc1 	bl	8011e96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	689b      	ldr	r3, [r3, #8]
 801151a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801151e:	2b40      	cmp	r3, #64	; 0x40
 8011520:	d123      	bne.n	801156a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	689a      	ldr	r2, [r3, #8]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011530:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011536:	2b00      	cmp	r3, #0
 8011538:	d013      	beq.n	8011562 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801153e:	4a30      	ldr	r2, [pc, #192]	; (8011600 <HAL_UART_IRQHandler+0x288>)
 8011540:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011546:	4618      	mov	r0, r3
 8011548:	f7f7 f8cc 	bl	80086e4 <HAL_DMA_Abort_IT>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d016      	beq.n	8011580 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801155c:	4610      	mov	r0, r2
 801155e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011560:	e00e      	b.n	8011580 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 f862 	bl	801162c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011568:	e00a      	b.n	8011580 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f000 f85e 	bl	801162c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011570:	e006      	b.n	8011580 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 f85a 	bl	801162c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2200      	movs	r2, #0
 801157c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 801157e:	e038      	b.n	80115f2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011580:	bf00      	nop
    return;
 8011582:	e036      	b.n	80115f2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801158a:	2b00      	cmp	r3, #0
 801158c:	d00d      	beq.n	80115aa <HAL_UART_IRQHandler+0x232>
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011594:	2b00      	cmp	r3, #0
 8011596:	d008      	beq.n	80115aa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80115a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 f84c 	bl	8011640 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80115a8:	e026      	b.n	80115f8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00d      	beq.n	80115d0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d008      	beq.n	80115d0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d017      	beq.n	80115f6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	4798      	blx	r3
    }
    return;
 80115ce:	e012      	b.n	80115f6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80115d0:	69fb      	ldr	r3, [r7, #28]
 80115d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00e      	beq.n	80115f8 <HAL_UART_IRQHandler+0x280>
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d009      	beq.n	80115f8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f000 fd3e 	bl	8012066 <UART_EndTransmit_IT>
    return;
 80115ea:	bf00      	nop
 80115ec:	e004      	b.n	80115f8 <HAL_UART_IRQHandler+0x280>
      return;
 80115ee:	bf00      	nop
 80115f0:	e002      	b.n	80115f8 <HAL_UART_IRQHandler+0x280>
    return;
 80115f2:	bf00      	nop
 80115f4:	e000      	b.n	80115f8 <HAL_UART_IRQHandler+0x280>
    return;
 80115f6:	bf00      	nop
  }

}
 80115f8:	3720      	adds	r7, #32
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	0801203b 	.word	0x0801203b

08011604 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801160c:	bf00      	nop
 801160e:	370c      	adds	r7, #12
 8011610:	46bd      	mov	sp, r7
 8011612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011616:	4770      	bx	lr

08011618 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011620:	bf00      	nop
 8011622:	370c      	adds	r7, #12
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011634:	bf00      	nop
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011648:	bf00      	nop
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b088      	sub	sp, #32
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 801165c:	2300      	movs	r3, #0
 801165e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8011660:	2300      	movs	r3, #0
 8011662:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	689a      	ldr	r2, [r3, #8]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	431a      	orrs	r2, r3
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	695b      	ldr	r3, [r3, #20]
 8011672:	431a      	orrs	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	69db      	ldr	r3, [r3, #28]
 8011678:	4313      	orrs	r3, r2
 801167a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	4bb1      	ldr	r3, [pc, #708]	; (8011948 <UART_SetConfig+0x2f4>)
 8011684:	4013      	ands	r3, r2
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	6812      	ldr	r2, [r2, #0]
 801168a:	6939      	ldr	r1, [r7, #16]
 801168c:	430b      	orrs	r3, r1
 801168e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	68da      	ldr	r2, [r3, #12]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	430a      	orrs	r2, r1
 80116a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	699b      	ldr	r3, [r3, #24]
 80116aa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6a1b      	ldr	r3, [r3, #32]
 80116b0:	693a      	ldr	r2, [r7, #16]
 80116b2:	4313      	orrs	r3, r2
 80116b4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	693a      	ldr	r2, [r7, #16]
 80116c6:	430a      	orrs	r2, r1
 80116c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	4a9f      	ldr	r2, [pc, #636]	; (801194c <UART_SetConfig+0x2f8>)
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d121      	bne.n	8011718 <UART_SetConfig+0xc4>
 80116d4:	4b9e      	ldr	r3, [pc, #632]	; (8011950 <UART_SetConfig+0x2fc>)
 80116d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116da:	f003 0303 	and.w	r3, r3, #3
 80116de:	2b03      	cmp	r3, #3
 80116e0:	d816      	bhi.n	8011710 <UART_SetConfig+0xbc>
 80116e2:	a201      	add	r2, pc, #4	; (adr r2, 80116e8 <UART_SetConfig+0x94>)
 80116e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e8:	080116f9 	.word	0x080116f9
 80116ec:	08011705 	.word	0x08011705
 80116f0:	080116ff 	.word	0x080116ff
 80116f4:	0801170b 	.word	0x0801170b
 80116f8:	2301      	movs	r3, #1
 80116fa:	77fb      	strb	r3, [r7, #31]
 80116fc:	e151      	b.n	80119a2 <UART_SetConfig+0x34e>
 80116fe:	2302      	movs	r3, #2
 8011700:	77fb      	strb	r3, [r7, #31]
 8011702:	e14e      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011704:	2304      	movs	r3, #4
 8011706:	77fb      	strb	r3, [r7, #31]
 8011708:	e14b      	b.n	80119a2 <UART_SetConfig+0x34e>
 801170a:	2308      	movs	r3, #8
 801170c:	77fb      	strb	r3, [r7, #31]
 801170e:	e148      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011710:	2310      	movs	r3, #16
 8011712:	77fb      	strb	r3, [r7, #31]
 8011714:	bf00      	nop
 8011716:	e144      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4a8d      	ldr	r2, [pc, #564]	; (8011954 <UART_SetConfig+0x300>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d134      	bne.n	801178c <UART_SetConfig+0x138>
 8011722:	4b8b      	ldr	r3, [pc, #556]	; (8011950 <UART_SetConfig+0x2fc>)
 8011724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011728:	f003 030c 	and.w	r3, r3, #12
 801172c:	2b0c      	cmp	r3, #12
 801172e:	d829      	bhi.n	8011784 <UART_SetConfig+0x130>
 8011730:	a201      	add	r2, pc, #4	; (adr r2, 8011738 <UART_SetConfig+0xe4>)
 8011732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011736:	bf00      	nop
 8011738:	0801176d 	.word	0x0801176d
 801173c:	08011785 	.word	0x08011785
 8011740:	08011785 	.word	0x08011785
 8011744:	08011785 	.word	0x08011785
 8011748:	08011779 	.word	0x08011779
 801174c:	08011785 	.word	0x08011785
 8011750:	08011785 	.word	0x08011785
 8011754:	08011785 	.word	0x08011785
 8011758:	08011773 	.word	0x08011773
 801175c:	08011785 	.word	0x08011785
 8011760:	08011785 	.word	0x08011785
 8011764:	08011785 	.word	0x08011785
 8011768:	0801177f 	.word	0x0801177f
 801176c:	2300      	movs	r3, #0
 801176e:	77fb      	strb	r3, [r7, #31]
 8011770:	e117      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011772:	2302      	movs	r3, #2
 8011774:	77fb      	strb	r3, [r7, #31]
 8011776:	e114      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011778:	2304      	movs	r3, #4
 801177a:	77fb      	strb	r3, [r7, #31]
 801177c:	e111      	b.n	80119a2 <UART_SetConfig+0x34e>
 801177e:	2308      	movs	r3, #8
 8011780:	77fb      	strb	r3, [r7, #31]
 8011782:	e10e      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011784:	2310      	movs	r3, #16
 8011786:	77fb      	strb	r3, [r7, #31]
 8011788:	bf00      	nop
 801178a:	e10a      	b.n	80119a2 <UART_SetConfig+0x34e>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4a71      	ldr	r2, [pc, #452]	; (8011958 <UART_SetConfig+0x304>)
 8011792:	4293      	cmp	r3, r2
 8011794:	d120      	bne.n	80117d8 <UART_SetConfig+0x184>
 8011796:	4b6e      	ldr	r3, [pc, #440]	; (8011950 <UART_SetConfig+0x2fc>)
 8011798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801179c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80117a0:	2b10      	cmp	r3, #16
 80117a2:	d00f      	beq.n	80117c4 <UART_SetConfig+0x170>
 80117a4:	2b10      	cmp	r3, #16
 80117a6:	d802      	bhi.n	80117ae <UART_SetConfig+0x15a>
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d005      	beq.n	80117b8 <UART_SetConfig+0x164>
 80117ac:	e010      	b.n	80117d0 <UART_SetConfig+0x17c>
 80117ae:	2b20      	cmp	r3, #32
 80117b0:	d005      	beq.n	80117be <UART_SetConfig+0x16a>
 80117b2:	2b30      	cmp	r3, #48	; 0x30
 80117b4:	d009      	beq.n	80117ca <UART_SetConfig+0x176>
 80117b6:	e00b      	b.n	80117d0 <UART_SetConfig+0x17c>
 80117b8:	2300      	movs	r3, #0
 80117ba:	77fb      	strb	r3, [r7, #31]
 80117bc:	e0f1      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117be:	2302      	movs	r3, #2
 80117c0:	77fb      	strb	r3, [r7, #31]
 80117c2:	e0ee      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117c4:	2304      	movs	r3, #4
 80117c6:	77fb      	strb	r3, [r7, #31]
 80117c8:	e0eb      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117ca:	2308      	movs	r3, #8
 80117cc:	77fb      	strb	r3, [r7, #31]
 80117ce:	e0e8      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117d0:	2310      	movs	r3, #16
 80117d2:	77fb      	strb	r3, [r7, #31]
 80117d4:	bf00      	nop
 80117d6:	e0e4      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	4a5f      	ldr	r2, [pc, #380]	; (801195c <UART_SetConfig+0x308>)
 80117de:	4293      	cmp	r3, r2
 80117e0:	d120      	bne.n	8011824 <UART_SetConfig+0x1d0>
 80117e2:	4b5b      	ldr	r3, [pc, #364]	; (8011950 <UART_SetConfig+0x2fc>)
 80117e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80117ec:	2b40      	cmp	r3, #64	; 0x40
 80117ee:	d00f      	beq.n	8011810 <UART_SetConfig+0x1bc>
 80117f0:	2b40      	cmp	r3, #64	; 0x40
 80117f2:	d802      	bhi.n	80117fa <UART_SetConfig+0x1a6>
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d005      	beq.n	8011804 <UART_SetConfig+0x1b0>
 80117f8:	e010      	b.n	801181c <UART_SetConfig+0x1c8>
 80117fa:	2b80      	cmp	r3, #128	; 0x80
 80117fc:	d005      	beq.n	801180a <UART_SetConfig+0x1b6>
 80117fe:	2bc0      	cmp	r3, #192	; 0xc0
 8011800:	d009      	beq.n	8011816 <UART_SetConfig+0x1c2>
 8011802:	e00b      	b.n	801181c <UART_SetConfig+0x1c8>
 8011804:	2300      	movs	r3, #0
 8011806:	77fb      	strb	r3, [r7, #31]
 8011808:	e0cb      	b.n	80119a2 <UART_SetConfig+0x34e>
 801180a:	2302      	movs	r3, #2
 801180c:	77fb      	strb	r3, [r7, #31]
 801180e:	e0c8      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011810:	2304      	movs	r3, #4
 8011812:	77fb      	strb	r3, [r7, #31]
 8011814:	e0c5      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011816:	2308      	movs	r3, #8
 8011818:	77fb      	strb	r3, [r7, #31]
 801181a:	e0c2      	b.n	80119a2 <UART_SetConfig+0x34e>
 801181c:	2310      	movs	r3, #16
 801181e:	77fb      	strb	r3, [r7, #31]
 8011820:	bf00      	nop
 8011822:	e0be      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4a4d      	ldr	r2, [pc, #308]	; (8011960 <UART_SetConfig+0x30c>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d124      	bne.n	8011878 <UART_SetConfig+0x224>
 801182e:	4b48      	ldr	r3, [pc, #288]	; (8011950 <UART_SetConfig+0x2fc>)
 8011830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801183c:	d012      	beq.n	8011864 <UART_SetConfig+0x210>
 801183e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011842:	d802      	bhi.n	801184a <UART_SetConfig+0x1f6>
 8011844:	2b00      	cmp	r3, #0
 8011846:	d007      	beq.n	8011858 <UART_SetConfig+0x204>
 8011848:	e012      	b.n	8011870 <UART_SetConfig+0x21c>
 801184a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801184e:	d006      	beq.n	801185e <UART_SetConfig+0x20a>
 8011850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011854:	d009      	beq.n	801186a <UART_SetConfig+0x216>
 8011856:	e00b      	b.n	8011870 <UART_SetConfig+0x21c>
 8011858:	2300      	movs	r3, #0
 801185a:	77fb      	strb	r3, [r7, #31]
 801185c:	e0a1      	b.n	80119a2 <UART_SetConfig+0x34e>
 801185e:	2302      	movs	r3, #2
 8011860:	77fb      	strb	r3, [r7, #31]
 8011862:	e09e      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011864:	2304      	movs	r3, #4
 8011866:	77fb      	strb	r3, [r7, #31]
 8011868:	e09b      	b.n	80119a2 <UART_SetConfig+0x34e>
 801186a:	2308      	movs	r3, #8
 801186c:	77fb      	strb	r3, [r7, #31]
 801186e:	e098      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011870:	2310      	movs	r3, #16
 8011872:	77fb      	strb	r3, [r7, #31]
 8011874:	bf00      	nop
 8011876:	e094      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	4a39      	ldr	r2, [pc, #228]	; (8011964 <UART_SetConfig+0x310>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d124      	bne.n	80118cc <UART_SetConfig+0x278>
 8011882:	4b33      	ldr	r3, [pc, #204]	; (8011950 <UART_SetConfig+0x2fc>)
 8011884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801188c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011890:	d012      	beq.n	80118b8 <UART_SetConfig+0x264>
 8011892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011896:	d802      	bhi.n	801189e <UART_SetConfig+0x24a>
 8011898:	2b00      	cmp	r3, #0
 801189a:	d007      	beq.n	80118ac <UART_SetConfig+0x258>
 801189c:	e012      	b.n	80118c4 <UART_SetConfig+0x270>
 801189e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80118a2:	d006      	beq.n	80118b2 <UART_SetConfig+0x25e>
 80118a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80118a8:	d009      	beq.n	80118be <UART_SetConfig+0x26a>
 80118aa:	e00b      	b.n	80118c4 <UART_SetConfig+0x270>
 80118ac:	2301      	movs	r3, #1
 80118ae:	77fb      	strb	r3, [r7, #31]
 80118b0:	e077      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118b2:	2302      	movs	r3, #2
 80118b4:	77fb      	strb	r3, [r7, #31]
 80118b6:	e074      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118b8:	2304      	movs	r3, #4
 80118ba:	77fb      	strb	r3, [r7, #31]
 80118bc:	e071      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118be:	2308      	movs	r3, #8
 80118c0:	77fb      	strb	r3, [r7, #31]
 80118c2:	e06e      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118c4:	2310      	movs	r3, #16
 80118c6:	77fb      	strb	r3, [r7, #31]
 80118c8:	bf00      	nop
 80118ca:	e06a      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	4a25      	ldr	r2, [pc, #148]	; (8011968 <UART_SetConfig+0x314>)
 80118d2:	4293      	cmp	r3, r2
 80118d4:	d124      	bne.n	8011920 <UART_SetConfig+0x2cc>
 80118d6:	4b1e      	ldr	r3, [pc, #120]	; (8011950 <UART_SetConfig+0x2fc>)
 80118d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118dc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80118e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118e4:	d012      	beq.n	801190c <UART_SetConfig+0x2b8>
 80118e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118ea:	d802      	bhi.n	80118f2 <UART_SetConfig+0x29e>
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d007      	beq.n	8011900 <UART_SetConfig+0x2ac>
 80118f0:	e012      	b.n	8011918 <UART_SetConfig+0x2c4>
 80118f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80118f6:	d006      	beq.n	8011906 <UART_SetConfig+0x2b2>
 80118f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80118fc:	d009      	beq.n	8011912 <UART_SetConfig+0x2be>
 80118fe:	e00b      	b.n	8011918 <UART_SetConfig+0x2c4>
 8011900:	2300      	movs	r3, #0
 8011902:	77fb      	strb	r3, [r7, #31]
 8011904:	e04d      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011906:	2302      	movs	r3, #2
 8011908:	77fb      	strb	r3, [r7, #31]
 801190a:	e04a      	b.n	80119a2 <UART_SetConfig+0x34e>
 801190c:	2304      	movs	r3, #4
 801190e:	77fb      	strb	r3, [r7, #31]
 8011910:	e047      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011912:	2308      	movs	r3, #8
 8011914:	77fb      	strb	r3, [r7, #31]
 8011916:	e044      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011918:	2310      	movs	r3, #16
 801191a:	77fb      	strb	r3, [r7, #31]
 801191c:	bf00      	nop
 801191e:	e040      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	4a11      	ldr	r2, [pc, #68]	; (801196c <UART_SetConfig+0x318>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d139      	bne.n	801199e <UART_SetConfig+0x34a>
 801192a:	4b09      	ldr	r3, [pc, #36]	; (8011950 <UART_SetConfig+0x2fc>)
 801192c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011938:	d027      	beq.n	801198a <UART_SetConfig+0x336>
 801193a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801193e:	d817      	bhi.n	8011970 <UART_SetConfig+0x31c>
 8011940:	2b00      	cmp	r3, #0
 8011942:	d01c      	beq.n	801197e <UART_SetConfig+0x32a>
 8011944:	e027      	b.n	8011996 <UART_SetConfig+0x342>
 8011946:	bf00      	nop
 8011948:	efff69f3 	.word	0xefff69f3
 801194c:	40011000 	.word	0x40011000
 8011950:	40023800 	.word	0x40023800
 8011954:	40004400 	.word	0x40004400
 8011958:	40004800 	.word	0x40004800
 801195c:	40004c00 	.word	0x40004c00
 8011960:	40005000 	.word	0x40005000
 8011964:	40011400 	.word	0x40011400
 8011968:	40007800 	.word	0x40007800
 801196c:	40007c00 	.word	0x40007c00
 8011970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011974:	d006      	beq.n	8011984 <UART_SetConfig+0x330>
 8011976:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801197a:	d009      	beq.n	8011990 <UART_SetConfig+0x33c>
 801197c:	e00b      	b.n	8011996 <UART_SetConfig+0x342>
 801197e:	2300      	movs	r3, #0
 8011980:	77fb      	strb	r3, [r7, #31]
 8011982:	e00e      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011984:	2302      	movs	r3, #2
 8011986:	77fb      	strb	r3, [r7, #31]
 8011988:	e00b      	b.n	80119a2 <UART_SetConfig+0x34e>
 801198a:	2304      	movs	r3, #4
 801198c:	77fb      	strb	r3, [r7, #31]
 801198e:	e008      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011990:	2308      	movs	r3, #8
 8011992:	77fb      	strb	r3, [r7, #31]
 8011994:	e005      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011996:	2310      	movs	r3, #16
 8011998:	77fb      	strb	r3, [r7, #31]
 801199a:	bf00      	nop
 801199c:	e001      	b.n	80119a2 <UART_SetConfig+0x34e>
 801199e:	2310      	movs	r3, #16
 80119a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	69db      	ldr	r3, [r3, #28]
 80119a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119aa:	d17f      	bne.n	8011aac <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80119ac:	7ffb      	ldrb	r3, [r7, #31]
 80119ae:	2b08      	cmp	r3, #8
 80119b0:	d85c      	bhi.n	8011a6c <UART_SetConfig+0x418>
 80119b2:	a201      	add	r2, pc, #4	; (adr r2, 80119b8 <UART_SetConfig+0x364>)
 80119b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b8:	080119dd 	.word	0x080119dd
 80119bc:	080119fd 	.word	0x080119fd
 80119c0:	08011a1d 	.word	0x08011a1d
 80119c4:	08011a6d 	.word	0x08011a6d
 80119c8:	08011a35 	.word	0x08011a35
 80119cc:	08011a6d 	.word	0x08011a6d
 80119d0:	08011a6d 	.word	0x08011a6d
 80119d4:	08011a6d 	.word	0x08011a6d
 80119d8:	08011a55 	.word	0x08011a55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80119dc:	f7fb f95c 	bl	800cc98 <HAL_RCC_GetPCLK1Freq>
 80119e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	005a      	lsls	r2, r3, #1
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	085b      	lsrs	r3, r3, #1
 80119ec:	441a      	add	r2, r3
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	61bb      	str	r3, [r7, #24]
        break;
 80119fa:	e03a      	b.n	8011a72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80119fc:	f7fb f960 	bl	800ccc0 <HAL_RCC_GetPCLK2Freq>
 8011a00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	005a      	lsls	r2, r3, #1
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	085b      	lsrs	r3, r3, #1
 8011a0c:	441a      	add	r2, r3
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	61bb      	str	r3, [r7, #24]
        break;
 8011a1a:	e02a      	b.n	8011a72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	085a      	lsrs	r2, r3, #1
 8011a22:	4b5f      	ldr	r3, [pc, #380]	; (8011ba0 <UART_SetConfig+0x54c>)
 8011a24:	4413      	add	r3, r2
 8011a26:	687a      	ldr	r2, [r7, #4]
 8011a28:	6852      	ldr	r2, [r2, #4]
 8011a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	61bb      	str	r3, [r7, #24]
        break;
 8011a32:	e01e      	b.n	8011a72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011a34:	f7fb f872 	bl	800cb1c <HAL_RCC_GetSysClockFreq>
 8011a38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	005a      	lsls	r2, r3, #1
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	085b      	lsrs	r3, r3, #1
 8011a44:	441a      	add	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	61bb      	str	r3, [r7, #24]
        break;
 8011a52:	e00e      	b.n	8011a72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	085b      	lsrs	r3, r3, #1
 8011a5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	61bb      	str	r3, [r7, #24]
        break;
 8011a6a:	e002      	b.n	8011a72 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	75fb      	strb	r3, [r7, #23]
        break;
 8011a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	2b0f      	cmp	r3, #15
 8011a76:	d916      	bls.n	8011aa6 <UART_SetConfig+0x452>
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a7e:	d212      	bcs.n	8011aa6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	f023 030f 	bic.w	r3, r3, #15
 8011a88:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	085b      	lsrs	r3, r3, #1
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	f003 0307 	and.w	r3, r3, #7
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	897b      	ldrh	r3, [r7, #10]
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	897a      	ldrh	r2, [r7, #10]
 8011aa2:	60da      	str	r2, [r3, #12]
 8011aa4:	e070      	b.n	8011b88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	75fb      	strb	r3, [r7, #23]
 8011aaa:	e06d      	b.n	8011b88 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8011aac:	7ffb      	ldrb	r3, [r7, #31]
 8011aae:	2b08      	cmp	r3, #8
 8011ab0:	d859      	bhi.n	8011b66 <UART_SetConfig+0x512>
 8011ab2:	a201      	add	r2, pc, #4	; (adr r2, 8011ab8 <UART_SetConfig+0x464>)
 8011ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ab8:	08011add 	.word	0x08011add
 8011abc:	08011afb 	.word	0x08011afb
 8011ac0:	08011b19 	.word	0x08011b19
 8011ac4:	08011b67 	.word	0x08011b67
 8011ac8:	08011b31 	.word	0x08011b31
 8011acc:	08011b67 	.word	0x08011b67
 8011ad0:	08011b67 	.word	0x08011b67
 8011ad4:	08011b67 	.word	0x08011b67
 8011ad8:	08011b4f 	.word	0x08011b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011adc:	f7fb f8dc 	bl	800cc98 <HAL_RCC_GetPCLK1Freq>
 8011ae0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	085a      	lsrs	r2, r3, #1
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	441a      	add	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	61bb      	str	r3, [r7, #24]
        break;
 8011af8:	e038      	b.n	8011b6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011afa:	f7fb f8e1 	bl	800ccc0 <HAL_RCC_GetPCLK2Freq>
 8011afe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	085a      	lsrs	r2, r3, #1
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	441a      	add	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	61bb      	str	r3, [r7, #24]
        break;
 8011b16:	e029      	b.n	8011b6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	085a      	lsrs	r2, r3, #1
 8011b1e:	4b21      	ldr	r3, [pc, #132]	; (8011ba4 <UART_SetConfig+0x550>)
 8011b20:	4413      	add	r3, r2
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	6852      	ldr	r2, [r2, #4]
 8011b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	61bb      	str	r3, [r7, #24]
        break;
 8011b2e:	e01d      	b.n	8011b6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011b30:	f7fa fff4 	bl	800cb1c <HAL_RCC_GetSysClockFreq>
 8011b34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	085a      	lsrs	r2, r3, #1
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	441a      	add	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	61bb      	str	r3, [r7, #24]
        break;
 8011b4c:	e00e      	b.n	8011b6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	085b      	lsrs	r3, r3, #1
 8011b54:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	61bb      	str	r3, [r7, #24]
        break;
 8011b64:	e002      	b.n	8011b6c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8011b66:	2301      	movs	r3, #1
 8011b68:	75fb      	strb	r3, [r7, #23]
        break;
 8011b6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	2b0f      	cmp	r3, #15
 8011b70:	d908      	bls.n	8011b84 <UART_SetConfig+0x530>
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b78:	d204      	bcs.n	8011b84 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	69ba      	ldr	r2, [r7, #24]
 8011b80:	60da      	str	r2, [r3, #12]
 8011b82:	e001      	b.n	8011b88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8011b84:	2301      	movs	r3, #1
 8011b86:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2200      	movs	r2, #0
 8011b92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8011b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3720      	adds	r7, #32
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	01e84800 	.word	0x01e84800
 8011ba4:	00f42400 	.word	0x00f42400

08011ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb4:	f003 0301 	and.w	r3, r3, #1
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00a      	beq.n	8011bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	430a      	orrs	r2, r1
 8011bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd6:	f003 0302 	and.w	r3, r3, #2
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d00a      	beq.n	8011bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	430a      	orrs	r2, r1
 8011bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf8:	f003 0304 	and.w	r3, r3, #4
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00a      	beq.n	8011c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	430a      	orrs	r2, r1
 8011c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c1a:	f003 0308 	and.w	r3, r3, #8
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d00a      	beq.n	8011c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	430a      	orrs	r2, r1
 8011c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c3c:	f003 0310 	and.w	r3, r3, #16
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00a      	beq.n	8011c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	689b      	ldr	r3, [r3, #8]
 8011c4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	430a      	orrs	r2, r1
 8011c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c5e:	f003 0320 	and.w	r3, r3, #32
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d00a      	beq.n	8011c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	689b      	ldr	r3, [r3, #8]
 8011c6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	430a      	orrs	r2, r1
 8011c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d01a      	beq.n	8011cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	430a      	orrs	r2, r1
 8011c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ca6:	d10a      	bne.n	8011cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	430a      	orrs	r2, r1
 8011cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d00a      	beq.n	8011ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	430a      	orrs	r2, r1
 8011cde:	605a      	str	r2, [r3, #4]
  }
}
 8011ce0:	bf00      	nop
 8011ce2:	370c      	adds	r7, #12
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b086      	sub	sp, #24
 8011cf0:	af02      	add	r7, sp, #8
 8011cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8011cfa:	f7f6 faa5 	bl	8008248 <HAL_GetTick>
 8011cfe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	f003 0308 	and.w	r3, r3, #8
 8011d0a:	2b08      	cmp	r3, #8
 8011d0c:	d10e      	bne.n	8011d2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2200      	movs	r2, #0
 8011d18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 f82a 	bl	8011d76 <UART_WaitOnFlagUntilTimeout>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d28:	2303      	movs	r3, #3
 8011d2a:	e020      	b.n	8011d6e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f003 0304 	and.w	r3, r3, #4
 8011d36:	2b04      	cmp	r3, #4
 8011d38:	d10e      	bne.n	8011d58 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011d3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	2200      	movs	r2, #0
 8011d44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f000 f814 	bl	8011d76 <UART_WaitOnFlagUntilTimeout>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d001      	beq.n	8011d58 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011d54:	2303      	movs	r3, #3
 8011d56:	e00a      	b.n	8011d6e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2220      	movs	r2, #32
 8011d5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2220      	movs	r2, #32
 8011d62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2200      	movs	r2, #0
 8011d68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b084      	sub	sp, #16
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	60f8      	str	r0, [r7, #12]
 8011d7e:	60b9      	str	r1, [r7, #8]
 8011d80:	603b      	str	r3, [r7, #0]
 8011d82:	4613      	mov	r3, r2
 8011d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d86:	e05d      	b.n	8011e44 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8e:	d059      	beq.n	8011e44 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d90:	f7f6 fa5a 	bl	8008248 <HAL_GetTick>
 8011d94:	4602      	mov	r2, r0
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	1ad3      	subs	r3, r2, r3
 8011d9a:	69ba      	ldr	r2, [r7, #24]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d302      	bcc.n	8011da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8011da0:	69bb      	ldr	r3, [r7, #24]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d11b      	bne.n	8011dde <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011db4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	689a      	ldr	r2, [r3, #8]
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f022 0201 	bic.w	r2, r2, #1
 8011dc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2220      	movs	r2, #32
 8011dca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2220      	movs	r2, #32
 8011dd0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8011dda:	2303      	movs	r3, #3
 8011ddc:	e042      	b.n	8011e64 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f003 0304 	and.w	r3, r3, #4
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d02b      	beq.n	8011e44 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	69db      	ldr	r3, [r3, #28]
 8011df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011dfa:	d123      	bne.n	8011e44 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e04:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011e14:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	689a      	ldr	r2, [r3, #8]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	f022 0201 	bic.w	r2, r2, #1
 8011e24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	2220      	movs	r2, #32
 8011e2a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2220      	movs	r2, #32
 8011e30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2220      	movs	r2, #32
 8011e36:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8011e40:	2303      	movs	r3, #3
 8011e42:	e00f      	b.n	8011e64 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	69da      	ldr	r2, [r3, #28]
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	68ba      	ldr	r2, [r7, #8]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	bf0c      	ite	eq
 8011e54:	2301      	moveq	r3, #1
 8011e56:	2300      	movne	r3, #0
 8011e58:	b2db      	uxtb	r3, r3
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	79fb      	ldrb	r3, [r7, #7]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d092      	beq.n	8011d88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011e62:	2300      	movs	r3, #0
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3710      	adds	r7, #16
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011e82:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2220      	movs	r2, #32
 8011e88:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011e8a:	bf00      	nop
 8011e8c:	370c      	adds	r7, #12
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e94:	4770      	bx	lr

08011e96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011e96:	b480      	push	{r7}
 8011e98:	b083      	sub	sp, #12
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	681a      	ldr	r2, [r3, #0]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011eac:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	689a      	ldr	r2, [r3, #8]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f022 0201 	bic.w	r2, r2, #1
 8011ebc:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2220      	movs	r2, #32
 8011ec2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8011eca:	bf00      	nop
 8011ecc:	370c      	adds	r7, #12
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011ed6:	b580      	push	{r7, lr}
 8011ed8:	b084      	sub	sp, #16
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ee2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	69db      	ldr	r3, [r3, #28]
 8011ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011eec:	d014      	beq.n	8011f18 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	689a      	ldr	r2, [r3, #8]
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011f04:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f14:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011f16:	e002      	b.n	8011f1e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8011f18:	68f8      	ldr	r0, [r7, #12]
 8011f1a:	f7f6 f829 	bl	8007f70 <HAL_UART_TxCpltCallback>
}
 8011f1e:	bf00      	nop
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011f26:	b580      	push	{r7, lr}
 8011f28:	b084      	sub	sp, #16
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	f7ff fb65 	bl	8011604 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f3a:	bf00      	nop
 8011f3c:	3710      	adds	r7, #16
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b084      	sub	sp, #16
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f4e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	69db      	ldr	r3, [r3, #28]
 8011f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f58:	d01e      	beq.n	8011f98 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011f70:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	689a      	ldr	r2, [r3, #8]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f022 0201 	bic.w	r2, r2, #1
 8011f80:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	689a      	ldr	r2, [r3, #8]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011f90:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2220      	movs	r2, #32
 8011f96:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f7f6 f88b 	bl	80080b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011f9e:	bf00      	nop
 8011fa0:	3710      	adds	r7, #16
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}

08011fa6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011fa6:	b580      	push	{r7, lr}
 8011fa8:	b084      	sub	sp, #16
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fb2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8011fb4:	68f8      	ldr	r0, [r7, #12]
 8011fb6:	f7ff fb2f 	bl	8011618 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011fba:	bf00      	nop
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b086      	sub	sp, #24
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fd4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	689b      	ldr	r3, [r3, #8]
 8011fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fe6:	2b80      	cmp	r3, #128	; 0x80
 8011fe8:	d109      	bne.n	8011ffe <UART_DMAError+0x3c>
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	2b21      	cmp	r3, #33	; 0x21
 8011fee:	d106      	bne.n	8011ffe <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8011ff8:	6978      	ldr	r0, [r7, #20]
 8011ffa:	f7ff ff37 	bl	8011e6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012008:	2b40      	cmp	r3, #64	; 0x40
 801200a:	d109      	bne.n	8012020 <UART_DMAError+0x5e>
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2b22      	cmp	r3, #34	; 0x22
 8012010:	d106      	bne.n	8012020 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	2200      	movs	r2, #0
 8012016:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 801201a:	6978      	ldr	r0, [r7, #20]
 801201c:	f7ff ff3b 	bl	8011e96 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012024:	f043 0210 	orr.w	r2, r3, #16
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801202c:	6978      	ldr	r0, [r7, #20]
 801202e:	f7ff fafd 	bl	801162c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012032:	bf00      	nop
 8012034:	3718      	adds	r7, #24
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}

0801203a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801203a:	b580      	push	{r7, lr}
 801203c:	b084      	sub	sp, #16
 801203e:	af00      	add	r7, sp, #0
 8012040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2200      	movs	r2, #0
 801204c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2200      	movs	r2, #0
 8012054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012058:	68f8      	ldr	r0, [r7, #12]
 801205a:	f7ff fae7 	bl	801162c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801205e:	bf00      	nop
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}

08012066 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012066:	b580      	push	{r7, lr}
 8012068:	b082      	sub	sp, #8
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801207c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2220      	movs	r2, #32
 8012082:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2200      	movs	r2, #0
 8012088:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7f5 ff70 	bl	8007f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012090:	bf00      	nop
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012098:	b084      	sub	sp, #16
 801209a:	b480      	push	{r7}
 801209c:	b085      	sub	sp, #20
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
 80120a2:	f107 001c 	add.w	r0, r7, #28
 80120a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80120aa:	2300      	movs	r3, #0
 80120ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80120ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80120b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80120b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80120b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80120b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80120b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80120ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80120bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80120be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80120c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80120c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80120c4:	68fa      	ldr	r2, [r7, #12]
 80120c6:	4313      	orrs	r3, r2
 80120c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	685a      	ldr	r2, [r3, #4]
 80120ce:	4b07      	ldr	r3, [pc, #28]	; (80120ec <SDMMC_Init+0x54>)
 80120d0:	4013      	ands	r3, r2
 80120d2:	68fa      	ldr	r2, [r7, #12]
 80120d4:	431a      	orrs	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80120da:	2300      	movs	r3, #0
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3714      	adds	r7, #20
 80120e0:	46bd      	mov	sp, r7
 80120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e6:	b004      	add	sp, #16
 80120e8:	4770      	bx	lr
 80120ea:	bf00      	nop
 80120ec:	ffff8100 	.word	0xffff8100

080120f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b083      	sub	sp, #12
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80120fe:	4618      	mov	r0, r3
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr

0801210a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 801210a:	b480      	push	{r7}
 801210c:	b083      	sub	sp, #12
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801211e:	2300      	movs	r3, #0
}
 8012120:	4618      	mov	r0, r3
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr

0801212c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2203      	movs	r2, #3
 8012138:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801213a:	2002      	movs	r0, #2
 801213c:	f7f6 f890 	bl	8008260 <HAL_Delay>
  
  return HAL_OK;
 8012140:	2300      	movs	r3, #0
}
 8012142:	4618      	mov	r0, r3
 8012144:	3708      	adds	r7, #8
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}

0801214a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 801214a:	b480      	push	{r7}
 801214c:	b083      	sub	sp, #12
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f003 0303 	and.w	r3, r3, #3
}
 801215a:	4618      	mov	r0, r3
 801215c:	370c      	adds	r7, #12
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr
	...

08012168 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012168:	b480      	push	{r7}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012172:	2300      	movs	r3, #0
 8012174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012186:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801218c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012192:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012194:	68fa      	ldr	r2, [r7, #12]
 8012196:	4313      	orrs	r3, r2
 8012198:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	68da      	ldr	r2, [r3, #12]
 801219e:	4b06      	ldr	r3, [pc, #24]	; (80121b8 <SDMMC_SendCommand+0x50>)
 80121a0:	4013      	ands	r3, r2
 80121a2:	68fa      	ldr	r2, [r7, #12]
 80121a4:	431a      	orrs	r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80121aa:	2300      	movs	r3, #0
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3714      	adds	r7, #20
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr
 80121b8:	fffff000 	.word	0xfffff000

080121bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	691b      	ldr	r3, [r3, #16]
 80121c8:	b2db      	uxtb	r3, r3
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	370c      	adds	r7, #12
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr

080121d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80121d6:	b480      	push	{r7}
 80121d8:	b085      	sub	sp, #20
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
 80121de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	3314      	adds	r3, #20
 80121e4:	461a      	mov	r2, r3
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	4413      	add	r3, r2
 80121ea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	681b      	ldr	r3, [r3, #0]
}  
 80121f0:	4618      	mov	r0, r3
 80121f2:	3714      	adds	r7, #20
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr

080121fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80121fc:	b480      	push	{r7}
 80121fe:	b085      	sub	sp, #20
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012206:	2300      	movs	r3, #0
 8012208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	685a      	ldr	r2, [r3, #4]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012222:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012228:	431a      	orrs	r2, r3
                       Data->DPSM);
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801222e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	4313      	orrs	r3, r2
 8012234:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801223a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	431a      	orrs	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012246:	2300      	movs	r3, #0

}
 8012248:	4618      	mov	r0, r3
 801224a:	3714      	adds	r7, #20
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b088      	sub	sp, #32
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012262:	2310      	movs	r3, #16
 8012264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012266:	2340      	movs	r3, #64	; 0x40
 8012268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801226a:	2300      	movs	r3, #0
 801226c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801226e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012272:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012274:	f107 0308 	add.w	r3, r7, #8
 8012278:	4619      	mov	r1, r3
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7ff ff74 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012280:	f241 3288 	movw	r2, #5000	; 0x1388
 8012284:	2110      	movs	r1, #16
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f000 fa42 	bl	8012710 <SDMMC_GetCmdResp1>
 801228c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801228e:	69fb      	ldr	r3, [r7, #28]
}
 8012290:	4618      	mov	r0, r3
 8012292:	3720      	adds	r7, #32
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}

08012298 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b088      	sub	sp, #32
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80122a6:	2311      	movs	r3, #17
 80122a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122aa:	2340      	movs	r3, #64	; 0x40
 80122ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122ae:	2300      	movs	r3, #0
 80122b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122b8:	f107 0308 	add.w	r3, r7, #8
 80122bc:	4619      	mov	r1, r3
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f7ff ff52 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80122c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80122c8:	2111      	movs	r1, #17
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 fa20 	bl	8012710 <SDMMC_GetCmdResp1>
 80122d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122d2:	69fb      	ldr	r3, [r7, #28]
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3720      	adds	r7, #32
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}

080122dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b088      	sub	sp, #32
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80122ea:	2312      	movs	r3, #18
 80122ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122ee:	2340      	movs	r3, #64	; 0x40
 80122f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122f2:	2300      	movs	r3, #0
 80122f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122fc:	f107 0308 	add.w	r3, r7, #8
 8012300:	4619      	mov	r1, r3
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f7ff ff30 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012308:	f241 3288 	movw	r2, #5000	; 0x1388
 801230c:	2112      	movs	r1, #18
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f000 f9fe 	bl	8012710 <SDMMC_GetCmdResp1>
 8012314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012316:	69fb      	ldr	r3, [r7, #28]
}
 8012318:	4618      	mov	r0, r3
 801231a:	3720      	adds	r7, #32
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b088      	sub	sp, #32
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801232e:	2318      	movs	r3, #24
 8012330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012332:	2340      	movs	r3, #64	; 0x40
 8012334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012336:	2300      	movs	r3, #0
 8012338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801233a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801233e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012340:	f107 0308 	add.w	r3, r7, #8
 8012344:	4619      	mov	r1, r3
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f7ff ff0e 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012350:	2118      	movs	r1, #24
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 f9dc 	bl	8012710 <SDMMC_GetCmdResp1>
 8012358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801235a:	69fb      	ldr	r3, [r7, #28]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3720      	adds	r7, #32
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b088      	sub	sp, #32
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012372:	2319      	movs	r3, #25
 8012374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012376:	2340      	movs	r3, #64	; 0x40
 8012378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801237a:	2300      	movs	r3, #0
 801237c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801237e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012382:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012384:	f107 0308 	add.w	r3, r7, #8
 8012388:	4619      	mov	r1, r3
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f7ff feec 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012390:	f241 3288 	movw	r2, #5000	; 0x1388
 8012394:	2119      	movs	r1, #25
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 f9ba 	bl	8012710 <SDMMC_GetCmdResp1>
 801239c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801239e:	69fb      	ldr	r3, [r7, #28]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3720      	adds	r7, #32
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b088      	sub	sp, #32
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80123b0:	2300      	movs	r3, #0
 80123b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80123b4:	230c      	movs	r3, #12
 80123b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123b8:	2340      	movs	r3, #64	; 0x40
 80123ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123bc:	2300      	movs	r3, #0
 80123be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123c6:	f107 0308 	add.w	r3, r7, #8
 80123ca:	4619      	mov	r1, r3
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7ff fecb 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80123d2:	4a05      	ldr	r2, [pc, #20]	; (80123e8 <SDMMC_CmdStopTransfer+0x40>)
 80123d4:	210c      	movs	r1, #12
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f000 f99a 	bl	8012710 <SDMMC_GetCmdResp1>
 80123dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123de:	69fb      	ldr	r3, [r7, #28]
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3720      	adds	r7, #32
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	05f5e100 	.word	0x05f5e100

080123ec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b08a      	sub	sp, #40	; 0x28
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80123fc:	2307      	movs	r3, #7
 80123fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012400:	2340      	movs	r3, #64	; 0x40
 8012402:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012404:	2300      	movs	r3, #0
 8012406:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801240c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801240e:	f107 0310 	add.w	r3, r7, #16
 8012412:	4619      	mov	r1, r3
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f7ff fea7 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801241a:	f241 3288 	movw	r2, #5000	; 0x1388
 801241e:	2107      	movs	r1, #7
 8012420:	68f8      	ldr	r0, [r7, #12]
 8012422:	f000 f975 	bl	8012710 <SDMMC_GetCmdResp1>
 8012426:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801242a:	4618      	mov	r0, r3
 801242c:	3728      	adds	r7, #40	; 0x28
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b088      	sub	sp, #32
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801243a:	2300      	movs	r3, #0
 801243c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801243e:	2300      	movs	r3, #0
 8012440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012442:	2300      	movs	r3, #0
 8012444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012446:	2300      	movs	r3, #0
 8012448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801244a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801244e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012450:	f107 0308 	add.w	r3, r7, #8
 8012454:	4619      	mov	r1, r3
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f7ff fe86 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 f92f 	bl	80126c0 <SDMMC_GetCmdError>
 8012462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012464:	69fb      	ldr	r3, [r7, #28]
}
 8012466:	4618      	mov	r0, r3
 8012468:	3720      	adds	r7, #32
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}

0801246e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801246e:	b580      	push	{r7, lr}
 8012470:	b088      	sub	sp, #32
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012476:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801247a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801247c:	2308      	movs	r3, #8
 801247e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012480:	2340      	movs	r3, #64	; 0x40
 8012482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012484:	2300      	movs	r3, #0
 8012486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801248c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801248e:	f107 0308 	add.w	r3, r7, #8
 8012492:	4619      	mov	r1, r3
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f7ff fe67 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 fb18 	bl	8012ad0 <SDMMC_GetCmdResp7>
 80124a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124a2:	69fb      	ldr	r3, [r7, #28]
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	3720      	adds	r7, #32
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b088      	sub	sp, #32
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80124ba:	2337      	movs	r3, #55	; 0x37
 80124bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124be:	2340      	movs	r3, #64	; 0x40
 80124c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124c2:	2300      	movs	r3, #0
 80124c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124cc:	f107 0308 	add.w	r3, r7, #8
 80124d0:	4619      	mov	r1, r3
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7ff fe48 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80124d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80124dc:	2137      	movs	r1, #55	; 0x37
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f000 f916 	bl	8012710 <SDMMC_GetCmdResp1>
 80124e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124e6:	69fb      	ldr	r3, [r7, #28]
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	3720      	adds	r7, #32
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}

080124f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b088      	sub	sp, #32
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80124fa:	683a      	ldr	r2, [r7, #0]
 80124fc:	4b0d      	ldr	r3, [pc, #52]	; (8012534 <SDMMC_CmdAppOperCommand+0x44>)
 80124fe:	4313      	orrs	r3, r2
 8012500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012502:	2329      	movs	r3, #41	; 0x29
 8012504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012506:	2340      	movs	r3, #64	; 0x40
 8012508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801250a:	2300      	movs	r3, #0
 801250c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801250e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012514:	f107 0308 	add.w	r3, r7, #8
 8012518:	4619      	mov	r1, r3
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7ff fe24 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f000 fa27 	bl	8012974 <SDMMC_GetCmdResp3>
 8012526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012528:	69fb      	ldr	r3, [r7, #28]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3720      	adds	r7, #32
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	80100000 	.word	0x80100000

08012538 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b088      	sub	sp, #32
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012546:	2306      	movs	r3, #6
 8012548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801254a:	2340      	movs	r3, #64	; 0x40
 801254c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801254e:	2300      	movs	r3, #0
 8012550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012558:	f107 0308 	add.w	r3, r7, #8
 801255c:	4619      	mov	r1, r3
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f7ff fe02 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012564:	f241 3288 	movw	r2, #5000	; 0x1388
 8012568:	2106      	movs	r1, #6
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f000 f8d0 	bl	8012710 <SDMMC_GetCmdResp1>
 8012570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012572:	69fb      	ldr	r3, [r7, #28]
}
 8012574:	4618      	mov	r0, r3
 8012576:	3720      	adds	r7, #32
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b088      	sub	sp, #32
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012584:	2300      	movs	r3, #0
 8012586:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012588:	2333      	movs	r3, #51	; 0x33
 801258a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801258c:	2340      	movs	r3, #64	; 0x40
 801258e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012590:	2300      	movs	r3, #0
 8012592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801259a:	f107 0308 	add.w	r3, r7, #8
 801259e:	4619      	mov	r1, r3
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7ff fde1 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80125a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80125aa:	2133      	movs	r1, #51	; 0x33
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f000 f8af 	bl	8012710 <SDMMC_GetCmdResp1>
 80125b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125b4:	69fb      	ldr	r3, [r7, #28]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3720      	adds	r7, #32
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}

080125be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80125be:	b580      	push	{r7, lr}
 80125c0:	b088      	sub	sp, #32
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80125c6:	2300      	movs	r3, #0
 80125c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80125ca:	2302      	movs	r3, #2
 80125cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80125ce:	23c0      	movs	r3, #192	; 0xc0
 80125d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125d2:	2300      	movs	r3, #0
 80125d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125dc:	f107 0308 	add.w	r3, r7, #8
 80125e0:	4619      	mov	r1, r3
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7ff fdc0 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 f97d 	bl	80128e8 <SDMMC_GetCmdResp2>
 80125ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125f0:	69fb      	ldr	r3, [r7, #28]
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3720      	adds	r7, #32
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b088      	sub	sp, #32
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
 8012602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012608:	2309      	movs	r3, #9
 801260a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801260c:	23c0      	movs	r3, #192	; 0xc0
 801260e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012610:	2300      	movs	r3, #0
 8012612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012618:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801261a:	f107 0308 	add.w	r3, r7, #8
 801261e:	4619      	mov	r1, r3
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7ff fda1 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f000 f95e 	bl	80128e8 <SDMMC_GetCmdResp2>
 801262c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801262e:	69fb      	ldr	r3, [r7, #28]
}
 8012630:	4618      	mov	r0, r3
 8012632:	3720      	adds	r7, #32
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b088      	sub	sp, #32
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012642:	2300      	movs	r3, #0
 8012644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012646:	2303      	movs	r3, #3
 8012648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801264a:	2340      	movs	r3, #64	; 0x40
 801264c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801264e:	2300      	movs	r3, #0
 8012650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012656:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012658:	f107 0308 	add.w	r3, r7, #8
 801265c:	4619      	mov	r1, r3
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f7ff fd82 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012664:	683a      	ldr	r2, [r7, #0]
 8012666:	2103      	movs	r1, #3
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f000 f9bd 	bl	80129e8 <SDMMC_GetCmdResp6>
 801266e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012670:	69fb      	ldr	r3, [r7, #28]
}
 8012672:	4618      	mov	r0, r3
 8012674:	3720      	adds	r7, #32
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}

0801267a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801267a:	b580      	push	{r7, lr}
 801267c:	b088      	sub	sp, #32
 801267e:	af00      	add	r7, sp, #0
 8012680:	6078      	str	r0, [r7, #4]
 8012682:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012688:	230d      	movs	r3, #13
 801268a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801268c:	2340      	movs	r3, #64	; 0x40
 801268e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012690:	2300      	movs	r3, #0
 8012692:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012698:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801269a:	f107 0308 	add.w	r3, r7, #8
 801269e:	4619      	mov	r1, r3
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7ff fd61 	bl	8012168 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80126a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80126aa:	210d      	movs	r1, #13
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 f82f 	bl	8012710 <SDMMC_GetCmdResp1>
 80126b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126b4:	69fb      	ldr	r3, [r7, #28]
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3720      	adds	r7, #32
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
	...

080126c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80126c0:	b490      	push	{r4, r7}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80126c8:	4b0f      	ldr	r3, [pc, #60]	; (8012708 <SDMMC_GetCmdError+0x48>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4a0f      	ldr	r2, [pc, #60]	; (801270c <SDMMC_GetCmdError+0x4c>)
 80126ce:	fba2 2303 	umull	r2, r3, r2, r3
 80126d2:	0a5b      	lsrs	r3, r3, #9
 80126d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80126d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80126dc:	4623      	mov	r3, r4
 80126de:	1e5c      	subs	r4, r3, #1
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d102      	bne.n	80126ea <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80126e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126e8:	e009      	b.n	80126fe <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d0f2      	beq.n	80126dc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	22c5      	movs	r2, #197	; 0xc5
 80126fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80126fc:	2300      	movs	r3, #0
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3708      	adds	r7, #8
 8012702:	46bd      	mov	sp, r7
 8012704:	bc90      	pop	{r4, r7}
 8012706:	4770      	bx	lr
 8012708:	2000005c 	.word	0x2000005c
 801270c:	10624dd3 	.word	0x10624dd3

08012710 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012710:	b590      	push	{r4, r7, lr}
 8012712:	b087      	sub	sp, #28
 8012714:	af00      	add	r7, sp, #0
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	460b      	mov	r3, r1
 801271a:	607a      	str	r2, [r7, #4]
 801271c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801271e:	4b6f      	ldr	r3, [pc, #444]	; (80128dc <SDMMC_GetCmdResp1+0x1cc>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	4a6f      	ldr	r2, [pc, #444]	; (80128e0 <SDMMC_GetCmdResp1+0x1d0>)
 8012724:	fba2 2303 	umull	r2, r3, r2, r3
 8012728:	0a5b      	lsrs	r3, r3, #9
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012730:	4623      	mov	r3, r4
 8012732:	1e5c      	subs	r4, r3, #1
 8012734:	2b00      	cmp	r3, #0
 8012736:	d102      	bne.n	801273e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801273c:	e0c9      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012742:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801274a:	2b00      	cmp	r3, #0
 801274c:	d0f0      	beq.n	8012730 <SDMMC_GetCmdResp1+0x20>
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1eb      	bne.n	8012730 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801275c:	f003 0304 	and.w	r3, r3, #4
 8012760:	2b00      	cmp	r3, #0
 8012762:	d004      	beq.n	801276e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2204      	movs	r2, #4
 8012768:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801276a:	2304      	movs	r3, #4
 801276c:	e0b1      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012772:	f003 0301 	and.w	r3, r3, #1
 8012776:	2b00      	cmp	r3, #0
 8012778:	d004      	beq.n	8012784 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	2201      	movs	r2, #1
 801277e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012780:	2301      	movs	r3, #1
 8012782:	e0a6      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	22c5      	movs	r2, #197	; 0xc5
 8012788:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801278a:	68f8      	ldr	r0, [r7, #12]
 801278c:	f7ff fd16 	bl	80121bc <SDMMC_GetCommandResponse>
 8012790:	4603      	mov	r3, r0
 8012792:	461a      	mov	r2, r3
 8012794:	7afb      	ldrb	r3, [r7, #11]
 8012796:	4293      	cmp	r3, r2
 8012798:	d001      	beq.n	801279e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801279a:	2301      	movs	r3, #1
 801279c:	e099      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801279e:	2100      	movs	r1, #0
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f7ff fd18 	bl	80121d6 <SDMMC_GetResponse>
 80127a6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80127a8:	693a      	ldr	r2, [r7, #16]
 80127aa:	4b4e      	ldr	r3, [pc, #312]	; (80128e4 <SDMMC_GetCmdResp1+0x1d4>)
 80127ac:	4013      	ands	r3, r2
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d101      	bne.n	80127b6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80127b2:	2300      	movs	r3, #0
 80127b4:	e08d      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	da02      	bge.n	80127c2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80127bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80127c0:	e087      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d001      	beq.n	80127d0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80127cc:	2340      	movs	r3, #64	; 0x40
 80127ce:	e080      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d001      	beq.n	80127de <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80127da:	2380      	movs	r3, #128	; 0x80
 80127dc:	e079      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d002      	beq.n	80127ee <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80127e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127ec:	e071      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d002      	beq.n	80127fe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80127f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127fc:	e069      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012804:	2b00      	cmp	r3, #0
 8012806:	d002      	beq.n	801280e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801280c:	e061      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012814:	2b00      	cmp	r3, #0
 8012816:	d002      	beq.n	801281e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801281c:	e059      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012824:	2b00      	cmp	r3, #0
 8012826:	d002      	beq.n	801282e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801282c:	e051      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012834:	2b00      	cmp	r3, #0
 8012836:	d002      	beq.n	801283e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801283c:	e049      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012844:	2b00      	cmp	r3, #0
 8012846:	d002      	beq.n	801284e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801284c:	e041      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012854:	2b00      	cmp	r3, #0
 8012856:	d002      	beq.n	801285e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8012858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801285c:	e039      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012864:	2b00      	cmp	r3, #0
 8012866:	d002      	beq.n	801286e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801286c:	e031      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012874:	2b00      	cmp	r3, #0
 8012876:	d002      	beq.n	801287e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012878:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801287c:	e029      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012884:	2b00      	cmp	r3, #0
 8012886:	d002      	beq.n	801288e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012888:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801288c:	e021      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012894:	2b00      	cmp	r3, #0
 8012896:	d002      	beq.n	801289e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801289c:	e019      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d002      	beq.n	80128ae <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80128a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80128ac:	e011      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d002      	beq.n	80128be <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80128b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80128bc:	e009      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	f003 0308 	and.w	r3, r3, #8
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d002      	beq.n	80128ce <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80128c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80128cc:	e001      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80128ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	371c      	adds	r7, #28
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd90      	pop	{r4, r7, pc}
 80128da:	bf00      	nop
 80128dc:	2000005c 	.word	0x2000005c
 80128e0:	10624dd3 	.word	0x10624dd3
 80128e4:	fdffe008 	.word	0xfdffe008

080128e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80128e8:	b490      	push	{r4, r7}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80128f0:	4b1e      	ldr	r3, [pc, #120]	; (801296c <SDMMC_GetCmdResp2+0x84>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4a1e      	ldr	r2, [pc, #120]	; (8012970 <SDMMC_GetCmdResp2+0x88>)
 80128f6:	fba2 2303 	umull	r2, r3, r2, r3
 80128fa:	0a5b      	lsrs	r3, r3, #9
 80128fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012900:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012904:	4623      	mov	r3, r4
 8012906:	1e5c      	subs	r4, r3, #1
 8012908:	2b00      	cmp	r3, #0
 801290a:	d102      	bne.n	8012912 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801290c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012910:	e026      	b.n	8012960 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012916:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801291e:	2b00      	cmp	r3, #0
 8012920:	d0f0      	beq.n	8012904 <SDMMC_GetCmdResp2+0x1c>
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012928:	2b00      	cmp	r3, #0
 801292a:	d1eb      	bne.n	8012904 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012930:	f003 0304 	and.w	r3, r3, #4
 8012934:	2b00      	cmp	r3, #0
 8012936:	d004      	beq.n	8012942 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2204      	movs	r2, #4
 801293c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801293e:	2304      	movs	r3, #4
 8012940:	e00e      	b.n	8012960 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	2b00      	cmp	r3, #0
 801294c:	d004      	beq.n	8012958 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2201      	movs	r2, #1
 8012952:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012954:	2301      	movs	r3, #1
 8012956:	e003      	b.n	8012960 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	22c5      	movs	r2, #197	; 0xc5
 801295c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	3710      	adds	r7, #16
 8012964:	46bd      	mov	sp, r7
 8012966:	bc90      	pop	{r4, r7}
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	2000005c 	.word	0x2000005c
 8012970:	10624dd3 	.word	0x10624dd3

08012974 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012974:	b490      	push	{r4, r7}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801297c:	4b18      	ldr	r3, [pc, #96]	; (80129e0 <SDMMC_GetCmdResp3+0x6c>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4a18      	ldr	r2, [pc, #96]	; (80129e4 <SDMMC_GetCmdResp3+0x70>)
 8012982:	fba2 2303 	umull	r2, r3, r2, r3
 8012986:	0a5b      	lsrs	r3, r3, #9
 8012988:	f241 3288 	movw	r2, #5000	; 0x1388
 801298c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012990:	4623      	mov	r3, r4
 8012992:	1e5c      	subs	r4, r3, #1
 8012994:	2b00      	cmp	r3, #0
 8012996:	d102      	bne.n	801299e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012998:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801299c:	e01b      	b.n	80129d6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d0f0      	beq.n	8012990 <SDMMC_GetCmdResp3+0x1c>
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d1eb      	bne.n	8012990 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129bc:	f003 0304 	and.w	r3, r3, #4
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d004      	beq.n	80129ce <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2204      	movs	r2, #4
 80129c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80129ca:	2304      	movs	r3, #4
 80129cc:	e003      	b.n	80129d6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	22c5      	movs	r2, #197	; 0xc5
 80129d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80129d4:	2300      	movs	r3, #0
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3710      	adds	r7, #16
 80129da:	46bd      	mov	sp, r7
 80129dc:	bc90      	pop	{r4, r7}
 80129de:	4770      	bx	lr
 80129e0:	2000005c 	.word	0x2000005c
 80129e4:	10624dd3 	.word	0x10624dd3

080129e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80129e8:	b590      	push	{r4, r7, lr}
 80129ea:	b087      	sub	sp, #28
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	460b      	mov	r3, r1
 80129f2:	607a      	str	r2, [r7, #4]
 80129f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80129f6:	4b34      	ldr	r3, [pc, #208]	; (8012ac8 <SDMMC_GetCmdResp6+0xe0>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	4a34      	ldr	r2, [pc, #208]	; (8012acc <SDMMC_GetCmdResp6+0xe4>)
 80129fc:	fba2 2303 	umull	r2, r3, r2, r3
 8012a00:	0a5b      	lsrs	r3, r3, #9
 8012a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a06:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012a0a:	4623      	mov	r3, r4
 8012a0c:	1e5c      	subs	r4, r3, #1
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d102      	bne.n	8012a18 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a16:	e052      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a1c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d0f0      	beq.n	8012a0a <SDMMC_GetCmdResp6+0x22>
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1eb      	bne.n	8012a0a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a36:	f003 0304 	and.w	r3, r3, #4
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d004      	beq.n	8012a48 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2204      	movs	r2, #4
 8012a42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a44:	2304      	movs	r3, #4
 8012a46:	e03a      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a4c:	f003 0301 	and.w	r3, r3, #1
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d004      	beq.n	8012a5e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	2201      	movs	r2, #1
 8012a58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e02f      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012a5e:	68f8      	ldr	r0, [r7, #12]
 8012a60:	f7ff fbac 	bl	80121bc <SDMMC_GetCommandResponse>
 8012a64:	4603      	mov	r3, r0
 8012a66:	461a      	mov	r2, r3
 8012a68:	7afb      	ldrb	r3, [r7, #11]
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d001      	beq.n	8012a72 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e025      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	22c5      	movs	r2, #197	; 0xc5
 8012a76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012a78:	2100      	movs	r1, #0
 8012a7a:	68f8      	ldr	r0, [r7, #12]
 8012a7c:	f7ff fbab 	bl	80121d6 <SDMMC_GetResponse>
 8012a80:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d106      	bne.n	8012a9a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	0c1b      	lsrs	r3, r3, #16
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012a96:	2300      	movs	r3, #0
 8012a98:	e011      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d002      	beq.n	8012aaa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012aa8:	e009      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d002      	beq.n	8012aba <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ab8:	e001      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	371c      	adds	r7, #28
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd90      	pop	{r4, r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	2000005c 	.word	0x2000005c
 8012acc:	10624dd3 	.word	0x10624dd3

08012ad0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012ad0:	b490      	push	{r4, r7}
 8012ad2:	b084      	sub	sp, #16
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012ad8:	4b21      	ldr	r3, [pc, #132]	; (8012b60 <SDMMC_GetCmdResp7+0x90>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4a21      	ldr	r2, [pc, #132]	; (8012b64 <SDMMC_GetCmdResp7+0x94>)
 8012ade:	fba2 2303 	umull	r2, r3, r2, r3
 8012ae2:	0a5b      	lsrs	r3, r3, #9
 8012ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ae8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012aec:	4623      	mov	r3, r4
 8012aee:	1e5c      	subs	r4, r3, #1
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d102      	bne.n	8012afa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012af8:	e02c      	b.n	8012b54 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012afe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d0f0      	beq.n	8012aec <SDMMC_GetCmdResp7+0x1c>
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d1eb      	bne.n	8012aec <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b18:	f003 0304 	and.w	r3, r3, #4
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d004      	beq.n	8012b2a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2204      	movs	r2, #4
 8012b24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b26:	2304      	movs	r3, #4
 8012b28:	e014      	b.n	8012b54 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b2e:	f003 0301 	and.w	r3, r3, #1
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d004      	beq.n	8012b40 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2201      	movs	r2, #1
 8012b3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	e009      	b.n	8012b54 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d002      	beq.n	8012b52 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2240      	movs	r2, #64	; 0x40
 8012b50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012b52:	2300      	movs	r3, #0
  
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3710      	adds	r7, #16
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bc90      	pop	{r4, r7}
 8012b5c:	4770      	bx	lr
 8012b5e:	bf00      	nop
 8012b60:	2000005c 	.word	0x2000005c
 8012b64:	10624dd3 	.word	0x10624dd3

08012b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012b68:	b084      	sub	sp, #16
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b084      	sub	sp, #16
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	6078      	str	r0, [r7, #4]
 8012b72:	f107 001c 	add.w	r0, r7, #28
 8012b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7c:	2b01      	cmp	r3, #1
 8012b7e:	d120      	bne.n	8012bc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	68da      	ldr	r2, [r3, #12]
 8012b90:	4b20      	ldr	r3, [pc, #128]	; (8012c14 <USB_CoreInit+0xac>)
 8012b92:	4013      	ands	r3, r2
 8012b94:	687a      	ldr	r2, [r7, #4]
 8012b96:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	68db      	ldr	r3, [r3, #12]
 8012b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ba6:	2b01      	cmp	r3, #1
 8012ba8:	d105      	bne.n	8012bb6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	f000 f942 	bl	8012e40 <USB_CoreReset>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	73fb      	strb	r3, [r7, #15]
 8012bc0:	e010      	b.n	8012be4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	68db      	ldr	r3, [r3, #12]
 8012bc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 f936 	bl	8012e40 <USB_CoreReset>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8012be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d10b      	bne.n	8012c02 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	689b      	ldr	r3, [r3, #8]
 8012bee:	f043 0206 	orr.w	r2, r3, #6
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	689b      	ldr	r3, [r3, #8]
 8012bfa:	f043 0220 	orr.w	r2, r3, #32
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3710      	adds	r7, #16
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012c0e:	b004      	add	sp, #16
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	ffbdffbf 	.word	0xffbdffbf

08012c18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	689b      	ldr	r3, [r3, #8]
 8012c24:	f043 0201 	orr.w	r2, r3, #1
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012c2c:	2300      	movs	r3, #0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	370c      	adds	r7, #12
 8012c32:	46bd      	mov	sp, r7
 8012c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c38:	4770      	bx	lr

08012c3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c3a:	b480      	push	{r7}
 8012c3c:	b083      	sub	sp, #12
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	689b      	ldr	r3, [r3, #8]
 8012c46:	f023 0201 	bic.w	r2, r3, #1
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012c4e:	2300      	movs	r3, #0
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	370c      	adds	r7, #12
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	460b      	mov	r3, r1
 8012c66:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	68db      	ldr	r3, [r3, #12]
 8012c6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012c74:	78fb      	ldrb	r3, [r7, #3]
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d106      	bne.n	8012c88 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	60da      	str	r2, [r3, #12]
 8012c86:	e00b      	b.n	8012ca0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8012c88:	78fb      	ldrb	r3, [r7, #3]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d106      	bne.n	8012c9c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	68db      	ldr	r3, [r3, #12]
 8012c92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	60da      	str	r2, [r3, #12]
 8012c9a:	e001      	b.n	8012ca0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e003      	b.n	8012ca8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8012ca0:	2032      	movs	r0, #50	; 0x32
 8012ca2:	f7f5 fadd 	bl	8008260 <HAL_Delay>

  return HAL_OK;
 8012ca6:	2300      	movs	r3, #0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b085      	sub	sp, #20
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	019b      	lsls	r3, r3, #6
 8012cc2:	f043 0220 	orr.w	r2, r3, #32
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	3301      	adds	r3, #1
 8012cce:	60fb      	str	r3, [r7, #12]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	4a09      	ldr	r2, [pc, #36]	; (8012cf8 <USB_FlushTxFifo+0x48>)
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d901      	bls.n	8012cdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012cd8:	2303      	movs	r3, #3
 8012cda:	e006      	b.n	8012cea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	691b      	ldr	r3, [r3, #16]
 8012ce0:	f003 0320 	and.w	r3, r3, #32
 8012ce4:	2b20      	cmp	r3, #32
 8012ce6:	d0f0      	beq.n	8012cca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012ce8:	2300      	movs	r3, #0
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3714      	adds	r7, #20
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop
 8012cf8:	00030d40 	.word	0x00030d40

08012cfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b085      	sub	sp, #20
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012d04:	2300      	movs	r3, #0
 8012d06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2210      	movs	r2, #16
 8012d0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	3301      	adds	r3, #1
 8012d12:	60fb      	str	r3, [r7, #12]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	4a09      	ldr	r2, [pc, #36]	; (8012d3c <USB_FlushRxFifo+0x40>)
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d901      	bls.n	8012d20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012d1c:	2303      	movs	r3, #3
 8012d1e:	e006      	b.n	8012d2e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	691b      	ldr	r3, [r3, #16]
 8012d24:	f003 0310 	and.w	r3, r3, #16
 8012d28:	2b10      	cmp	r3, #16
 8012d2a:	d0f0      	beq.n	8012d0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012d2c:	2300      	movs	r3, #0
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3714      	adds	r7, #20
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop
 8012d3c:	00030d40 	.word	0x00030d40

08012d40 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012d40:	b480      	push	{r7}
 8012d42:	b089      	sub	sp, #36	; 0x24
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	60f8      	str	r0, [r7, #12]
 8012d48:	60b9      	str	r1, [r7, #8]
 8012d4a:	4611      	mov	r1, r2
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	460b      	mov	r3, r1
 8012d50:	71fb      	strb	r3, [r7, #7]
 8012d52:	4613      	mov	r3, r2
 8012d54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012d5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d11a      	bne.n	8012d9c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012d66:	88bb      	ldrh	r3, [r7, #4]
 8012d68:	3303      	adds	r3, #3
 8012d6a:	089b      	lsrs	r3, r3, #2
 8012d6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012d6e:	2300      	movs	r3, #0
 8012d70:	61bb      	str	r3, [r7, #24]
 8012d72:	e00f      	b.n	8012d94 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012d74:	79fb      	ldrb	r3, [r7, #7]
 8012d76:	031a      	lsls	r2, r3, #12
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	4413      	add	r3, r2
 8012d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012d80:	461a      	mov	r2, r3
 8012d82:	69fb      	ldr	r3, [r7, #28]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012d88:	69fb      	ldr	r3, [r7, #28]
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	3301      	adds	r3, #1
 8012d92:	61bb      	str	r3, [r7, #24]
 8012d94:	69ba      	ldr	r2, [r7, #24]
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d3eb      	bcc.n	8012d74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012d9c:	2300      	movs	r3, #0
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3724      	adds	r7, #36	; 0x24
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr

08012daa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012daa:	b480      	push	{r7}
 8012dac:	b089      	sub	sp, #36	; 0x24
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	60f8      	str	r0, [r7, #12]
 8012db2:	60b9      	str	r1, [r7, #8]
 8012db4:	4613      	mov	r3, r2
 8012db6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012dc0:	88fb      	ldrh	r3, [r7, #6]
 8012dc2:	3303      	adds	r3, #3
 8012dc4:	089b      	lsrs	r3, r3, #2
 8012dc6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012dc8:	2300      	movs	r3, #0
 8012dca:	61bb      	str	r3, [r7, #24]
 8012dcc:	e00b      	b.n	8012de6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	601a      	str	r2, [r3, #0]
    pDest++;
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	3304      	adds	r3, #4
 8012dde:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012de0:	69bb      	ldr	r3, [r7, #24]
 8012de2:	3301      	adds	r3, #1
 8012de4:	61bb      	str	r3, [r7, #24]
 8012de6:	69ba      	ldr	r2, [r7, #24]
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d3ef      	bcc.n	8012dce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012dee:	69fb      	ldr	r3, [r7, #28]
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3724      	adds	r7, #36	; 0x24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr

08012dfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b085      	sub	sp, #20
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	695b      	ldr	r3, [r3, #20]
 8012e08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	699b      	ldr	r3, [r3, #24]
 8012e0e:	68fa      	ldr	r2, [r7, #12]
 8012e10:	4013      	ands	r3, r2
 8012e12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012e14:	68fb      	ldr	r3, [r7, #12]
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3714      	adds	r7, #20
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr

08012e22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012e22:	b480      	push	{r7}
 8012e24:	b083      	sub	sp, #12
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	695b      	ldr	r3, [r3, #20]
 8012e2e:	f003 0301 	and.w	r3, r3, #1
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	370c      	adds	r7, #12
 8012e36:	46bd      	mov	sp, r7
 8012e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3c:	4770      	bx	lr
	...

08012e40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b085      	sub	sp, #20
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	60fb      	str	r3, [r7, #12]
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	4a13      	ldr	r2, [pc, #76]	; (8012ea4 <USB_CoreReset+0x64>)
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d901      	bls.n	8012e5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	e01b      	b.n	8012e96 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	daf2      	bge.n	8012e4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012e66:	2300      	movs	r3, #0
 8012e68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	691b      	ldr	r3, [r3, #16]
 8012e6e:	f043 0201 	orr.w	r2, r3, #1
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	60fb      	str	r3, [r7, #12]
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	4a09      	ldr	r2, [pc, #36]	; (8012ea4 <USB_CoreReset+0x64>)
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d901      	bls.n	8012e88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012e84:	2303      	movs	r3, #3
 8012e86:	e006      	b.n	8012e96 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	691b      	ldr	r3, [r3, #16]
 8012e8c:	f003 0301 	and.w	r3, r3, #1
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	d0f0      	beq.n	8012e76 <USB_CoreReset+0x36>

  return HAL_OK;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3714      	adds	r7, #20
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	00030d40 	.word	0x00030d40

08012ea8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012ea8:	b084      	sub	sp, #16
 8012eaa:	b580      	push	{r7, lr}
 8012eac:	b084      	sub	sp, #16
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	6078      	str	r0, [r7, #4]
 8012eb2:	f107 001c 	add.w	r0, r7, #28
 8012eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ece:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d018      	beq.n	8012f14 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8012ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d10a      	bne.n	8012efe <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	68ba      	ldr	r2, [r7, #8]
 8012ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012ef6:	f043 0304 	orr.w	r3, r3, #4
 8012efa:	6013      	str	r3, [r2, #0]
 8012efc:	e014      	b.n	8012f28 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	68ba      	ldr	r2, [r7, #8]
 8012f08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f0c:	f023 0304 	bic.w	r3, r3, #4
 8012f10:	6013      	str	r3, [r2, #0]
 8012f12:	e009      	b.n	8012f28 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	68ba      	ldr	r2, [r7, #8]
 8012f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f22:	f023 0304 	bic.w	r3, r3, #4
 8012f26:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8012f28:	2110      	movs	r1, #16
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7ff fec0 	bl	8012cb0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7ff fee3 	bl	8012cfc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8012f36:	2300      	movs	r3, #0
 8012f38:	60fb      	str	r3, [r7, #12]
 8012f3a:	e015      	b.n	8012f68 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	015a      	lsls	r2, r3, #5
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	4413      	add	r3, r2
 8012f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f48:	461a      	mov	r2, r3
 8012f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f4e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	015a      	lsls	r2, r3, #5
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	4413      	add	r3, r2
 8012f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f5c:	461a      	mov	r2, r3
 8012f5e:	2300      	movs	r3, #0
 8012f60:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	3301      	adds	r3, #1
 8012f66:	60fb      	str	r3, [r7, #12]
 8012f68:	6a3b      	ldr	r3, [r7, #32]
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d3e5      	bcc.n	8012f3c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8012f70:	2101      	movs	r1, #1
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f000 f8ac 	bl	80130d0 <USB_DriveVbus>

  HAL_Delay(200U);
 8012f78:	20c8      	movs	r0, #200	; 0xc8
 8012f7a:	f7f5 f971 	bl	8008260 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2200      	movs	r2, #0
 8012f82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f04f 32ff 	mov.w	r2, #4294967295
 8012f8a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00b      	beq.n	8012fb0 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f9e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	4a14      	ldr	r2, [pc, #80]	; (8012ff4 <USB_HostInit+0x14c>)
 8012fa4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	4a13      	ldr	r2, [pc, #76]	; (8012ff8 <USB_HostInit+0x150>)
 8012faa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8012fae:	e009      	b.n	8012fc4 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2280      	movs	r2, #128	; 0x80
 8012fb4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	4a10      	ldr	r2, [pc, #64]	; (8012ffc <USB_HostInit+0x154>)
 8012fba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	4a10      	ldr	r2, [pc, #64]	; (8013000 <USB_HostInit+0x158>)
 8012fc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d105      	bne.n	8012fd6 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	699b      	ldr	r3, [r3, #24]
 8012fce:	f043 0210 	orr.w	r2, r3, #16
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	699a      	ldr	r2, [r3, #24]
 8012fda:	4b0a      	ldr	r3, [pc, #40]	; (8013004 <USB_HostInit+0x15c>)
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8012fe2:	2300      	movs	r3, #0
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012fee:	b004      	add	sp, #16
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	01000200 	.word	0x01000200
 8012ff8:	00e00300 	.word	0x00e00300
 8012ffc:	00600080 	.word	0x00600080
 8013000:	004000e0 	.word	0x004000e0
 8013004:	a3200008 	.word	0xa3200008

08013008 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8013008:	b480      	push	{r7}
 801300a:	b085      	sub	sp, #20
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	460b      	mov	r3, r1
 8013012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	68fa      	ldr	r2, [r7, #12]
 8013022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013026:	f023 0303 	bic.w	r3, r3, #3
 801302a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	78fb      	ldrb	r3, [r7, #3]
 8013036:	f003 0303 	and.w	r3, r3, #3
 801303a:	68f9      	ldr	r1, [r7, #12]
 801303c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013040:	4313      	orrs	r3, r2
 8013042:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8013044:	78fb      	ldrb	r3, [r7, #3]
 8013046:	2b01      	cmp	r3, #1
 8013048:	d107      	bne.n	801305a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013050:	461a      	mov	r2, r3
 8013052:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8013056:	6053      	str	r3, [r2, #4]
 8013058:	e009      	b.n	801306e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801305a:	78fb      	ldrb	r3, [r7, #3]
 801305c:	2b02      	cmp	r3, #2
 801305e:	d106      	bne.n	801306e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013066:	461a      	mov	r2, r3
 8013068:	f241 7370 	movw	r3, #6000	; 0x1770
 801306c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 801306e:	2300      	movs	r3, #0
}
 8013070:	4618      	mov	r0, r3
 8013072:	3714      	adds	r7, #20
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr

0801307c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8013088:	2300      	movs	r3, #0
 801308a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801309c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80130a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80130ac:	2064      	movs	r0, #100	; 0x64
 80130ae:	f7f5 f8d7 	bl	8008260 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	68fa      	ldr	r2, [r7, #12]
 80130b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80130ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80130be:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80130c0:	200a      	movs	r0, #10
 80130c2:	f7f5 f8cd 	bl	8008260 <HAL_Delay>

  return HAL_OK;
 80130c6:	2300      	movs	r3, #0
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	3710      	adds	r7, #16
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}

080130d0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80130d0:	b480      	push	{r7}
 80130d2:	b085      	sub	sp, #20
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	460b      	mov	r3, r1
 80130da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80130e0:	2300      	movs	r3, #0
 80130e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80130f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d109      	bne.n	8013114 <USB_DriveVbus+0x44>
 8013100:	78fb      	ldrb	r3, [r7, #3]
 8013102:	2b01      	cmp	r3, #1
 8013104:	d106      	bne.n	8013114 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	68fa      	ldr	r2, [r7, #12]
 801310a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801310e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013112:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801311e:	d109      	bne.n	8013134 <USB_DriveVbus+0x64>
 8013120:	78fb      	ldrb	r3, [r7, #3]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d106      	bne.n	8013134 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	68fa      	ldr	r2, [r7, #12]
 801312a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801312e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013132:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8013134:	2300      	movs	r3, #0
}
 8013136:	4618      	mov	r0, r3
 8013138:	3714      	adds	r7, #20
 801313a:	46bd      	mov	sp, r7
 801313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013140:	4770      	bx	lr

08013142 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013142:	b480      	push	{r7}
 8013144:	b085      	sub	sp, #20
 8013146:	af00      	add	r7, sp, #0
 8013148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801314e:	2300      	movs	r3, #0
 8013150:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	0c5b      	lsrs	r3, r3, #17
 8013160:	f003 0303 	and.w	r3, r3, #3
}
 8013164:	4618      	mov	r0, r3
 8013166:	3714      	adds	r7, #20
 8013168:	46bd      	mov	sp, r7
 801316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316e:	4770      	bx	lr

08013170 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8013170:	b480      	push	{r7}
 8013172:	b085      	sub	sp, #20
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013182:	689b      	ldr	r3, [r3, #8]
 8013184:	b29b      	uxth	r3, r3
}
 8013186:	4618      	mov	r0, r3
 8013188:	3714      	adds	r7, #20
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
	...

08013194 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8013194:	b480      	push	{r7}
 8013196:	b087      	sub	sp, #28
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	4608      	mov	r0, r1
 801319e:	4611      	mov	r1, r2
 80131a0:	461a      	mov	r2, r3
 80131a2:	4603      	mov	r3, r0
 80131a4:	70fb      	strb	r3, [r7, #3]
 80131a6:	460b      	mov	r3, r1
 80131a8:	70bb      	strb	r3, [r7, #2]
 80131aa:	4613      	mov	r3, r2
 80131ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80131ae:	2300      	movs	r3, #0
 80131b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80131b6:	78fb      	ldrb	r3, [r7, #3]
 80131b8:	015a      	lsls	r2, r3, #5
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	4413      	add	r3, r2
 80131be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80131c2:	461a      	mov	r2, r3
 80131c4:	f04f 33ff 	mov.w	r3, #4294967295
 80131c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80131ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80131ce:	2b03      	cmp	r3, #3
 80131d0:	d87e      	bhi.n	80132d0 <USB_HC_Init+0x13c>
 80131d2:	a201      	add	r2, pc, #4	; (adr r2, 80131d8 <USB_HC_Init+0x44>)
 80131d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131d8:	080131e9 	.word	0x080131e9
 80131dc:	08013293 	.word	0x08013293
 80131e0:	080131e9 	.word	0x080131e9
 80131e4:	08013255 	.word	0x08013255
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80131e8:	78fb      	ldrb	r3, [r7, #3]
 80131ea:	015a      	lsls	r2, r3, #5
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	4413      	add	r3, r2
 80131f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80131f4:	461a      	mov	r2, r3
 80131f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80131fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80131fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013200:	2b00      	cmp	r3, #0
 8013202:	da10      	bge.n	8013226 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013204:	78fb      	ldrb	r3, [r7, #3]
 8013206:	015a      	lsls	r2, r3, #5
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	4413      	add	r3, r2
 801320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	78fa      	ldrb	r2, [r7, #3]
 8013214:	0151      	lsls	r1, r2, #5
 8013216:	68ba      	ldr	r2, [r7, #8]
 8013218:	440a      	add	r2, r1
 801321a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013222:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8013224:	e057      	b.n	80132d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801322e:	2b00      	cmp	r3, #0
 8013230:	d051      	beq.n	80132d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8013232:	78fb      	ldrb	r3, [r7, #3]
 8013234:	015a      	lsls	r2, r3, #5
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	4413      	add	r3, r2
 801323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	78fa      	ldrb	r2, [r7, #3]
 8013242:	0151      	lsls	r1, r2, #5
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	440a      	add	r2, r1
 8013248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801324c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013250:	60d3      	str	r3, [r2, #12]
      break;
 8013252:	e040      	b.n	80132d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013254:	78fb      	ldrb	r3, [r7, #3]
 8013256:	015a      	lsls	r2, r3, #5
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	4413      	add	r3, r2
 801325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013260:	461a      	mov	r2, r3
 8013262:	f240 639d 	movw	r3, #1693	; 0x69d
 8013266:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8013268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801326c:	2b00      	cmp	r3, #0
 801326e:	da34      	bge.n	80132da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013270:	78fb      	ldrb	r3, [r7, #3]
 8013272:	015a      	lsls	r2, r3, #5
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	4413      	add	r3, r2
 8013278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	78fa      	ldrb	r2, [r7, #3]
 8013280:	0151      	lsls	r1, r2, #5
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	440a      	add	r2, r1
 8013286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801328a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801328e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8013290:	e023      	b.n	80132da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013292:	78fb      	ldrb	r3, [r7, #3]
 8013294:	015a      	lsls	r2, r3, #5
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	4413      	add	r3, r2
 801329a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801329e:	461a      	mov	r2, r3
 80132a0:	f240 2325 	movw	r3, #549	; 0x225
 80132a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80132a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	da17      	bge.n	80132de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80132ae:	78fb      	ldrb	r3, [r7, #3]
 80132b0:	015a      	lsls	r2, r3, #5
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	4413      	add	r3, r2
 80132b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	78fa      	ldrb	r2, [r7, #3]
 80132be:	0151      	lsls	r1, r2, #5
 80132c0:	68ba      	ldr	r2, [r7, #8]
 80132c2:	440a      	add	r2, r1
 80132c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80132c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80132cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80132ce:	e006      	b.n	80132de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
 80132d2:	75fb      	strb	r3, [r7, #23]
      break;
 80132d4:	e004      	b.n	80132e0 <USB_HC_Init+0x14c>
      break;
 80132d6:	bf00      	nop
 80132d8:	e002      	b.n	80132e0 <USB_HC_Init+0x14c>
      break;
 80132da:	bf00      	nop
 80132dc:	e000      	b.n	80132e0 <USB_HC_Init+0x14c>
      break;
 80132de:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80132e6:	699a      	ldr	r2, [r3, #24]
 80132e8:	78fb      	ldrb	r3, [r7, #3]
 80132ea:	f003 030f 	and.w	r3, r3, #15
 80132ee:	2101      	movs	r1, #1
 80132f0:	fa01 f303 	lsl.w	r3, r1, r3
 80132f4:	68b9      	ldr	r1, [r7, #8]
 80132f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80132fa:	4313      	orrs	r3, r2
 80132fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	699b      	ldr	r3, [r3, #24]
 8013302:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801330a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801330e:	2b00      	cmp	r3, #0
 8013310:	da03      	bge.n	801331a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8013312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013316:	613b      	str	r3, [r7, #16]
 8013318:	e001      	b.n	801331e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 801331a:	2300      	movs	r3, #0
 801331c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 801331e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013322:	2b02      	cmp	r3, #2
 8013324:	d103      	bne.n	801332e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8013326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801332a:	60fb      	str	r3, [r7, #12]
 801332c:	e001      	b.n	8013332 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801332e:	2300      	movs	r3, #0
 8013330:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013332:	787b      	ldrb	r3, [r7, #1]
 8013334:	059b      	lsls	r3, r3, #22
 8013336:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801333a:	78bb      	ldrb	r3, [r7, #2]
 801333c:	02db      	lsls	r3, r3, #11
 801333e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013342:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8013344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013348:	049b      	lsls	r3, r3, #18
 801334a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801334e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013350:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013352:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8013356:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801335c:	78fb      	ldrb	r3, [r7, #3]
 801335e:	0159      	lsls	r1, r3, #5
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	440b      	add	r3, r1
 8013364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013368:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801336e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8013370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013374:	2b03      	cmp	r3, #3
 8013376:	d10f      	bne.n	8013398 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8013378:	78fb      	ldrb	r3, [r7, #3]
 801337a:	015a      	lsls	r2, r3, #5
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	4413      	add	r3, r2
 8013380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	78fa      	ldrb	r2, [r7, #3]
 8013388:	0151      	lsls	r1, r2, #5
 801338a:	68ba      	ldr	r2, [r7, #8]
 801338c:	440a      	add	r2, r1
 801338e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013396:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8013398:	7dfb      	ldrb	r3, [r7, #23]
}
 801339a:	4618      	mov	r0, r3
 801339c:	371c      	adds	r7, #28
 801339e:	46bd      	mov	sp, r7
 80133a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop

080133a8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b08c      	sub	sp, #48	; 0x30
 80133ac:	af02      	add	r7, sp, #8
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	60b9      	str	r1, [r7, #8]
 80133b2:	4613      	mov	r3, r2
 80133b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	785b      	ldrb	r3, [r3, #1]
 80133be:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80133c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133c4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d028      	beq.n	8013424 <USB_HC_StartXfer+0x7c>
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	791b      	ldrb	r3, [r3, #4]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d124      	bne.n	8013424 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80133da:	79fb      	ldrb	r3, [r7, #7]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d10b      	bne.n	80133f8 <USB_HC_StartXfer+0x50>
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	795b      	ldrb	r3, [r3, #5]
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	d107      	bne.n	80133f8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	785b      	ldrb	r3, [r3, #1]
 80133ec:	4619      	mov	r1, r3
 80133ee:	68f8      	ldr	r0, [r7, #12]
 80133f0:	f000 fa2e 	bl	8013850 <USB_DoPing>
      return HAL_OK;
 80133f4:	2300      	movs	r3, #0
 80133f6:	e112      	b.n	801361e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d112      	bne.n	8013424 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80133fe:	69fb      	ldr	r3, [r7, #28]
 8013400:	015a      	lsls	r2, r3, #5
 8013402:	6a3b      	ldr	r3, [r7, #32]
 8013404:	4413      	add	r3, r2
 8013406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	69fa      	ldr	r2, [r7, #28]
 801340e:	0151      	lsls	r1, r2, #5
 8013410:	6a3a      	ldr	r2, [r7, #32]
 8013412:	440a      	add	r2, r1
 8013414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013418:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 801341c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	2200      	movs	r2, #0
 8013422:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	691b      	ldr	r3, [r3, #16]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d018      	beq.n	801345e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	691b      	ldr	r3, [r3, #16]
 8013430:	68ba      	ldr	r2, [r7, #8]
 8013432:	8912      	ldrh	r2, [r2, #8]
 8013434:	4413      	add	r3, r2
 8013436:	3b01      	subs	r3, #1
 8013438:	68ba      	ldr	r2, [r7, #8]
 801343a:	8912      	ldrh	r2, [r2, #8]
 801343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013440:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8013442:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013444:	8b7b      	ldrh	r3, [r7, #26]
 8013446:	429a      	cmp	r2, r3
 8013448:	d90b      	bls.n	8013462 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 801344a:	8b7b      	ldrh	r3, [r7, #26]
 801344c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 801344e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013450:	68ba      	ldr	r2, [r7, #8]
 8013452:	8912      	ldrh	r2, [r2, #8]
 8013454:	fb02 f203 	mul.w	r2, r2, r3
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	611a      	str	r2, [r3, #16]
 801345c:	e001      	b.n	8013462 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 801345e:	2301      	movs	r3, #1
 8013460:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	78db      	ldrb	r3, [r3, #3]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d006      	beq.n	8013478 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 801346a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801346c:	68ba      	ldr	r2, [r7, #8]
 801346e:	8912      	ldrh	r2, [r2, #8]
 8013470:	fb02 f203 	mul.w	r2, r2, r3
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	691b      	ldr	r3, [r3, #16]
 801347c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013480:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013482:	04d9      	lsls	r1, r3, #19
 8013484:	4b68      	ldr	r3, [pc, #416]	; (8013628 <USB_HC_StartXfer+0x280>)
 8013486:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8013488:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	7a9b      	ldrb	r3, [r3, #10]
 801348e:	075b      	lsls	r3, r3, #29
 8013490:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8013494:	69f9      	ldr	r1, [r7, #28]
 8013496:	0148      	lsls	r0, r1, #5
 8013498:	6a39      	ldr	r1, [r7, #32]
 801349a:	4401      	add	r1, r0
 801349c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80134a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80134a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80134a4:	79fb      	ldrb	r3, [r7, #7]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d009      	beq.n	80134be <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	68d9      	ldr	r1, [r3, #12]
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	015a      	lsls	r2, r3, #5
 80134b2:	6a3b      	ldr	r3, [r7, #32]
 80134b4:	4413      	add	r3, r2
 80134b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134ba:	460a      	mov	r2, r1
 80134bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80134be:	6a3b      	ldr	r3, [r7, #32]
 80134c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80134c4:	689b      	ldr	r3, [r3, #8]
 80134c6:	f003 0301 	and.w	r3, r3, #1
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	bf0c      	ite	eq
 80134ce:	2301      	moveq	r3, #1
 80134d0:	2300      	movne	r3, #0
 80134d2:	b2db      	uxtb	r3, r3
 80134d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80134d6:	69fb      	ldr	r3, [r7, #28]
 80134d8:	015a      	lsls	r2, r3, #5
 80134da:	6a3b      	ldr	r3, [r7, #32]
 80134dc:	4413      	add	r3, r2
 80134de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	69fa      	ldr	r2, [r7, #28]
 80134e6:	0151      	lsls	r1, r2, #5
 80134e8:	6a3a      	ldr	r2, [r7, #32]
 80134ea:	440a      	add	r2, r1
 80134ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80134f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80134f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	015a      	lsls	r2, r3, #5
 80134fa:	6a3b      	ldr	r3, [r7, #32]
 80134fc:	4413      	add	r3, r2
 80134fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	7e7b      	ldrb	r3, [r7, #25]
 8013506:	075b      	lsls	r3, r3, #29
 8013508:	69f9      	ldr	r1, [r7, #28]
 801350a:	0148      	lsls	r0, r1, #5
 801350c:	6a39      	ldr	r1, [r7, #32]
 801350e:	4401      	add	r1, r0
 8013510:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8013514:	4313      	orrs	r3, r2
 8013516:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	015a      	lsls	r2, r3, #5
 801351c:	6a3b      	ldr	r3, [r7, #32]
 801351e:	4413      	add	r3, r2
 8013520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	4a41      	ldr	r2, [pc, #260]	; (801362c <USB_HC_StartXfer+0x284>)
 8013528:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801352a:	4b40      	ldr	r3, [pc, #256]	; (801362c <USB_HC_StartXfer+0x284>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013532:	4a3e      	ldr	r2, [pc, #248]	; (801362c <USB_HC_StartXfer+0x284>)
 8013534:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	78db      	ldrb	r3, [r3, #3]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d006      	beq.n	801354c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 801353e:	4b3b      	ldr	r3, [pc, #236]	; (801362c <USB_HC_StartXfer+0x284>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013546:	4a39      	ldr	r2, [pc, #228]	; (801362c <USB_HC_StartXfer+0x284>)
 8013548:	6013      	str	r3, [r2, #0]
 801354a:	e005      	b.n	8013558 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801354c:	4b37      	ldr	r3, [pc, #220]	; (801362c <USB_HC_StartXfer+0x284>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013554:	4a35      	ldr	r2, [pc, #212]	; (801362c <USB_HC_StartXfer+0x284>)
 8013556:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8013558:	4b34      	ldr	r3, [pc, #208]	; (801362c <USB_HC_StartXfer+0x284>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013560:	4a32      	ldr	r2, [pc, #200]	; (801362c <USB_HC_StartXfer+0x284>)
 8013562:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8013564:	69fb      	ldr	r3, [r7, #28]
 8013566:	015a      	lsls	r2, r3, #5
 8013568:	6a3b      	ldr	r3, [r7, #32]
 801356a:	4413      	add	r3, r2
 801356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013570:	461a      	mov	r2, r3
 8013572:	4b2e      	ldr	r3, [pc, #184]	; (801362c <USB_HC_StartXfer+0x284>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8013578:	79fb      	ldrb	r3, [r7, #7]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d14e      	bne.n	801361c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	78db      	ldrb	r3, [r3, #3]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d14a      	bne.n	801361c <USB_HC_StartXfer+0x274>
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	691b      	ldr	r3, [r3, #16]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d046      	beq.n	801361c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	79db      	ldrb	r3, [r3, #7]
 8013592:	2b03      	cmp	r3, #3
 8013594:	d830      	bhi.n	80135f8 <USB_HC_StartXfer+0x250>
 8013596:	a201      	add	r2, pc, #4	; (adr r2, 801359c <USB_HC_StartXfer+0x1f4>)
 8013598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801359c:	080135ad 	.word	0x080135ad
 80135a0:	080135d1 	.word	0x080135d1
 80135a4:	080135ad 	.word	0x080135ad
 80135a8:	080135d1 	.word	0x080135d1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	691b      	ldr	r3, [r3, #16]
 80135b0:	3303      	adds	r3, #3
 80135b2:	089b      	lsrs	r3, r3, #2
 80135b4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80135b6:	8afa      	ldrh	r2, [r7, #22]
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135bc:	b29b      	uxth	r3, r3
 80135be:	429a      	cmp	r2, r3
 80135c0:	d91c      	bls.n	80135fc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	699b      	ldr	r3, [r3, #24]
 80135c6:	f043 0220 	orr.w	r2, r3, #32
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	619a      	str	r2, [r3, #24]
          }
          break;
 80135ce:	e015      	b.n	80135fc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	691b      	ldr	r3, [r3, #16]
 80135d4:	3303      	adds	r3, #3
 80135d6:	089b      	lsrs	r3, r3, #2
 80135d8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80135da:	8afa      	ldrh	r2, [r7, #22]
 80135dc:	6a3b      	ldr	r3, [r7, #32]
 80135de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80135e2:	691b      	ldr	r3, [r3, #16]
 80135e4:	b29b      	uxth	r3, r3
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d90a      	bls.n	8013600 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	699b      	ldr	r3, [r3, #24]
 80135ee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	619a      	str	r2, [r3, #24]
          }
          break;
 80135f6:	e003      	b.n	8013600 <USB_HC_StartXfer+0x258>

        default:
          break;
 80135f8:	bf00      	nop
 80135fa:	e002      	b.n	8013602 <USB_HC_StartXfer+0x25a>
          break;
 80135fc:	bf00      	nop
 80135fe:	e000      	b.n	8013602 <USB_HC_StartXfer+0x25a>
          break;
 8013600:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	68d9      	ldr	r1, [r3, #12]
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	785a      	ldrb	r2, [r3, #1]
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	691b      	ldr	r3, [r3, #16]
 801360e:	b298      	uxth	r0, r3
 8013610:	2300      	movs	r3, #0
 8013612:	9300      	str	r3, [sp, #0]
 8013614:	4603      	mov	r3, r0
 8013616:	68f8      	ldr	r0, [r7, #12]
 8013618:	f7ff fb92 	bl	8012d40 <USB_WritePacket>
    }
  }

  return HAL_OK;
 801361c:	2300      	movs	r3, #0
}
 801361e:	4618      	mov	r0, r3
 8013620:	3728      	adds	r7, #40	; 0x28
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	1ff80000 	.word	0x1ff80000
 801362c:	2000037c 	.word	0x2000037c

08013630 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013630:	b480      	push	{r7}
 8013632:	b085      	sub	sp, #20
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013642:	695b      	ldr	r3, [r3, #20]
 8013644:	b29b      	uxth	r3, r3
}
 8013646:	4618      	mov	r0, r3
 8013648:	3714      	adds	r7, #20
 801364a:	46bd      	mov	sp, r7
 801364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013650:	4770      	bx	lr

08013652 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8013652:	b480      	push	{r7}
 8013654:	b087      	sub	sp, #28
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
 801365a:	460b      	mov	r3, r1
 801365c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8013662:	78fb      	ldrb	r3, [r7, #3]
 8013664:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8013666:	2300      	movs	r3, #0
 8013668:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	015a      	lsls	r2, r3, #5
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	4413      	add	r3, r2
 8013672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	0c9b      	lsrs	r3, r3, #18
 801367a:	f003 0303 	and.w	r3, r3, #3
 801367e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d002      	beq.n	801368c <USB_HC_Halt+0x3a>
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	2b02      	cmp	r3, #2
 801368a:	d16c      	bne.n	8013766 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	015a      	lsls	r2, r3, #5
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	4413      	add	r3, r2
 8013694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	68fa      	ldr	r2, [r7, #12]
 801369c:	0151      	lsls	r1, r2, #5
 801369e:	693a      	ldr	r2, [r7, #16]
 80136a0:	440a      	add	r2, r1
 80136a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80136a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80136aa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d143      	bne.n	8013740 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	015a      	lsls	r2, r3, #5
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	4413      	add	r3, r2
 80136c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	68fa      	ldr	r2, [r7, #12]
 80136c8:	0151      	lsls	r1, r2, #5
 80136ca:	693a      	ldr	r2, [r7, #16]
 80136cc:	440a      	add	r2, r1
 80136ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80136d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	015a      	lsls	r2, r3, #5
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	4413      	add	r3, r2
 80136e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	68fa      	ldr	r2, [r7, #12]
 80136e8:	0151      	lsls	r1, r2, #5
 80136ea:	693a      	ldr	r2, [r7, #16]
 80136ec:	440a      	add	r2, r1
 80136ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80136f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80136f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	015a      	lsls	r2, r3, #5
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	4413      	add	r3, r2
 8013700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	68fa      	ldr	r2, [r7, #12]
 8013708:	0151      	lsls	r1, r2, #5
 801370a:	693a      	ldr	r2, [r7, #16]
 801370c:	440a      	add	r2, r1
 801370e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013716:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	3301      	adds	r3, #1
 801371c:	617b      	str	r3, [r7, #20]
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013724:	d81d      	bhi.n	8013762 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	015a      	lsls	r2, r3, #5
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	4413      	add	r3, r2
 801372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801373c:	d0ec      	beq.n	8013718 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801373e:	e080      	b.n	8013842 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	015a      	lsls	r2, r3, #5
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	4413      	add	r3, r2
 8013748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	68fa      	ldr	r2, [r7, #12]
 8013750:	0151      	lsls	r1, r2, #5
 8013752:	693a      	ldr	r2, [r7, #16]
 8013754:	440a      	add	r2, r1
 8013756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801375a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801375e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8013760:	e06f      	b.n	8013842 <USB_HC_Halt+0x1f0>
          break;
 8013762:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8013764:	e06d      	b.n	8013842 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	015a      	lsls	r2, r3, #5
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	4413      	add	r3, r2
 801376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	68fa      	ldr	r2, [r7, #12]
 8013776:	0151      	lsls	r1, r2, #5
 8013778:	693a      	ldr	r2, [r7, #16]
 801377a:	440a      	add	r2, r1
 801377c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013784:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801378c:	691b      	ldr	r3, [r3, #16]
 801378e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013792:	2b00      	cmp	r3, #0
 8013794:	d143      	bne.n	801381e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	015a      	lsls	r2, r3, #5
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	4413      	add	r3, r2
 801379e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	68fa      	ldr	r2, [r7, #12]
 80137a6:	0151      	lsls	r1, r2, #5
 80137a8:	693a      	ldr	r2, [r7, #16]
 80137aa:	440a      	add	r2, r1
 80137ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80137b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	015a      	lsls	r2, r3, #5
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	4413      	add	r3, r2
 80137be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	68fa      	ldr	r2, [r7, #12]
 80137c6:	0151      	lsls	r1, r2, #5
 80137c8:	693a      	ldr	r2, [r7, #16]
 80137ca:	440a      	add	r2, r1
 80137cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80137d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80137d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	015a      	lsls	r2, r3, #5
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	4413      	add	r3, r2
 80137de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	68fa      	ldr	r2, [r7, #12]
 80137e6:	0151      	lsls	r1, r2, #5
 80137e8:	693a      	ldr	r2, [r7, #16]
 80137ea:	440a      	add	r2, r1
 80137ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80137f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80137f4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	3301      	adds	r3, #1
 80137fa:	617b      	str	r3, [r7, #20]
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013802:	d81d      	bhi.n	8013840 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	015a      	lsls	r2, r3, #5
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	4413      	add	r3, r2
 801380c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801381a:	d0ec      	beq.n	80137f6 <USB_HC_Halt+0x1a4>
 801381c:	e011      	b.n	8013842 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	015a      	lsls	r2, r3, #5
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	4413      	add	r3, r2
 8013826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	0151      	lsls	r1, r2, #5
 8013830:	693a      	ldr	r2, [r7, #16]
 8013832:	440a      	add	r2, r1
 8013834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801383c:	6013      	str	r3, [r2, #0]
 801383e:	e000      	b.n	8013842 <USB_HC_Halt+0x1f0>
          break;
 8013840:	bf00      	nop
    }
  }

  return HAL_OK;
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	371c      	adds	r7, #28
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8013850:	b480      	push	{r7}
 8013852:	b087      	sub	sp, #28
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	460b      	mov	r3, r1
 801385a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8013860:	78fb      	ldrb	r3, [r7, #3]
 8013862:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8013864:	2301      	movs	r3, #1
 8013866:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	04da      	lsls	r2, r3, #19
 801386c:	4b15      	ldr	r3, [pc, #84]	; (80138c4 <USB_DoPing+0x74>)
 801386e:	4013      	ands	r3, r2
 8013870:	693a      	ldr	r2, [r7, #16]
 8013872:	0151      	lsls	r1, r2, #5
 8013874:	697a      	ldr	r2, [r7, #20]
 8013876:	440a      	add	r2, r1
 8013878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801387c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013880:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	015a      	lsls	r2, r3, #5
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	4413      	add	r3, r2
 801388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013898:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80138a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	015a      	lsls	r2, r3, #5
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	4413      	add	r3, r2
 80138aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138ae:	461a      	mov	r2, r3
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80138b4:	2300      	movs	r3, #0
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	371c      	adds	r7, #28
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop
 80138c4:	1ff80000 	.word	0x1ff80000

080138c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b086      	sub	sp, #24
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80138d4:	2300      	movs	r3, #0
 80138d6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f7ff f9ae 	bl	8012c3a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80138de:	2110      	movs	r1, #16
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f7ff f9e5 	bl	8012cb0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ff fa08 	bl	8012cfc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80138ec:	2300      	movs	r3, #0
 80138ee:	613b      	str	r3, [r7, #16]
 80138f0:	e01f      	b.n	8013932 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	015a      	lsls	r2, r3, #5
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	4413      	add	r3, r2
 80138fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013908:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013910:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013918:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	015a      	lsls	r2, r3, #5
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	4413      	add	r3, r2
 8013922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013926:	461a      	mov	r2, r3
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	3301      	adds	r3, #1
 8013930:	613b      	str	r3, [r7, #16]
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	2b0f      	cmp	r3, #15
 8013936:	d9dc      	bls.n	80138f2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8013938:	2300      	movs	r3, #0
 801393a:	613b      	str	r3, [r7, #16]
 801393c:	e034      	b.n	80139a8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	015a      	lsls	r2, r3, #5
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	4413      	add	r3, r2
 8013946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013954:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801395c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013964:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	015a      	lsls	r2, r3, #5
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	4413      	add	r3, r2
 801396e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013972:	461a      	mov	r2, r3
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	3301      	adds	r3, #1
 801397c:	617b      	str	r3, [r7, #20]
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013984:	d80c      	bhi.n	80139a0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	015a      	lsls	r2, r3, #5
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	4413      	add	r3, r2
 801398e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801399c:	d0ec      	beq.n	8013978 <USB_StopHost+0xb0>
 801399e:	e000      	b.n	80139a2 <USB_StopHost+0xda>
        break;
 80139a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80139a2:	693b      	ldr	r3, [r7, #16]
 80139a4:	3301      	adds	r3, #1
 80139a6:	613b      	str	r3, [r7, #16]
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	2b0f      	cmp	r3, #15
 80139ac:	d9c7      	bls.n	801393e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80139b4:	461a      	mov	r2, r3
 80139b6:	f04f 33ff 	mov.w	r3, #4294967295
 80139ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f04f 32ff 	mov.w	r2, #4294967295
 80139c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f7ff f927 	bl	8012c18 <USB_EnableGlobalInt>

  return HAL_OK;
 80139ca:	2300      	movs	r3, #0
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3718      	adds	r7, #24
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af02      	add	r7, sp, #8
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	4608      	mov	r0, r1
 80139de:	4611      	mov	r1, r2
 80139e0:	461a      	mov	r2, r3
 80139e2:	4603      	mov	r3, r0
 80139e4:	70fb      	strb	r3, [r7, #3]
 80139e6:	460b      	mov	r3, r1
 80139e8:	70bb      	strb	r3, [r7, #2]
 80139ea:	4613      	mov	r3, r2
 80139ec:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80139ee:	78fa      	ldrb	r2, [r7, #3]
 80139f0:	787b      	ldrb	r3, [r7, #1]
 80139f2:	4413      	add	r3, r2
 80139f4:	b2d8      	uxtb	r0, r3
 80139f6:	78ba      	ldrb	r2, [r7, #2]
 80139f8:	7c3b      	ldrb	r3, [r7, #16]
 80139fa:	4413      	add	r3, r2
 80139fc:	b2db      	uxtb	r3, r3
 80139fe:	78ba      	ldrb	r2, [r7, #2]
 8013a00:	78f9      	ldrb	r1, [r7, #3]
 8013a02:	9300      	str	r3, [sp, #0]
 8013a04:	4603      	mov	r3, r0
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f001 fb1d 	bl	8015046 <u8g2_IsIntersection>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d013      	beq.n	8013a3a <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8013a12:	e00e      	b.n	8013a32 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8013a14:	7878      	ldrb	r0, [r7, #1]
 8013a16:	78ba      	ldrb	r2, [r7, #2]
 8013a18:	78f9      	ldrb	r1, [r7, #3]
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	9300      	str	r3, [sp, #0]
 8013a1e:	4603      	mov	r3, r0
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f001 f864 	bl	8014aee <u8g2_DrawHVLine>
    y++;    
 8013a26:	78bb      	ldrb	r3, [r7, #2]
 8013a28:	3301      	adds	r3, #1
 8013a2a:	70bb      	strb	r3, [r7, #2]
    h--;
 8013a2c:	7c3b      	ldrb	r3, [r7, #16]
 8013a2e:	3b01      	subs	r3, #1
 8013a30:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8013a32:	7c3b      	ldrb	r3, [r7, #16]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d1ed      	bne.n	8013a14 <u8g2_DrawBox+0x40>
 8013a38:	e000      	b.n	8013a3c <u8g2_DrawBox+0x68>
    return;
 8013a3a:	bf00      	nop
  }
}
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}

08013a42 <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8013a42:	b580      	push	{r7, lr}
 8013a44:	b086      	sub	sp, #24
 8013a46:	af02      	add	r7, sp, #8
 8013a48:	6078      	str	r0, [r7, #4]
 8013a4a:	4608      	mov	r0, r1
 8013a4c:	4611      	mov	r1, r2
 8013a4e:	461a      	mov	r2, r3
 8013a50:	4603      	mov	r3, r0
 8013a52:	70fb      	strb	r3, [r7, #3]
 8013a54:	460b      	mov	r3, r1
 8013a56:	70bb      	strb	r3, [r7, #2]
 8013a58:	4613      	mov	r3, r2
 8013a5a:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8013a5c:	78fb      	ldrb	r3, [r7, #3]
 8013a5e:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8013a60:	78fa      	ldrb	r2, [r7, #3]
 8013a62:	787b      	ldrb	r3, [r7, #1]
 8013a64:	4413      	add	r3, r2
 8013a66:	b2d8      	uxtb	r0, r3
 8013a68:	78ba      	ldrb	r2, [r7, #2]
 8013a6a:	7e3b      	ldrb	r3, [r7, #24]
 8013a6c:	4413      	add	r3, r2
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	78ba      	ldrb	r2, [r7, #2]
 8013a72:	78f9      	ldrb	r1, [r7, #3]
 8013a74:	9300      	str	r3, [sp, #0]
 8013a76:	4603      	mov	r3, r0
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f001 fae4 	bl	8015046 <u8g2_IsIntersection>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d032      	beq.n	8013aea <u8g2_DrawFrame+0xa8>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8013a84:	7878      	ldrb	r0, [r7, #1]
 8013a86:	78ba      	ldrb	r2, [r7, #2]
 8013a88:	78f9      	ldrb	r1, [r7, #3]
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	9300      	str	r3, [sp, #0]
 8013a8e:	4603      	mov	r3, r0
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f001 f82c 	bl	8014aee <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8013a96:	7e38      	ldrb	r0, [r7, #24]
 8013a98:	78ba      	ldrb	r2, [r7, #2]
 8013a9a:	78f9      	ldrb	r1, [r7, #3]
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	9300      	str	r3, [sp, #0]
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f001 f823 	bl	8014aee <u8g2_DrawHVLine>
  x+=w;
 8013aa8:	78fa      	ldrb	r2, [r7, #3]
 8013aaa:	787b      	ldrb	r3, [r7, #1]
 8013aac:	4413      	add	r3, r2
 8013aae:	70fb      	strb	r3, [r7, #3]
  x--;
 8013ab0:	78fb      	ldrb	r3, [r7, #3]
 8013ab2:	3b01      	subs	r3, #1
 8013ab4:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8013ab6:	7e38      	ldrb	r0, [r7, #24]
 8013ab8:	78ba      	ldrb	r2, [r7, #2]
 8013aba:	78f9      	ldrb	r1, [r7, #3]
 8013abc:	2301      	movs	r3, #1
 8013abe:	9300      	str	r3, [sp, #0]
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f001 f813 	bl	8014aee <u8g2_DrawHVLine>
  y+=h;
 8013ac8:	78ba      	ldrb	r2, [r7, #2]
 8013aca:	7e3b      	ldrb	r3, [r7, #24]
 8013acc:	4413      	add	r3, r2
 8013ace:	70bb      	strb	r3, [r7, #2]
  y--;
 8013ad0:	78bb      	ldrb	r3, [r7, #2]
 8013ad2:	3b01      	subs	r3, #1
 8013ad4:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8013ad6:	7878      	ldrb	r0, [r7, #1]
 8013ad8:	78ba      	ldrb	r2, [r7, #2]
 8013ada:	7bf9      	ldrb	r1, [r7, #15]
 8013adc:	2300      	movs	r3, #0
 8013ade:	9300      	str	r3, [sp, #0]
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f001 f803 	bl	8014aee <u8g2_DrawHVLine>
 8013ae8:	e000      	b.n	8013aec <u8g2_DrawFrame+0xaa>
    return;
 8013aea:	bf00      	nop
}
 8013aec:	3710      	adds	r7, #16
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}

08013af2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8013af2:	b580      	push	{r7, lr}
 8013af4:	b084      	sub	sp, #16
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	7c1b      	ldrb	r3, [r3, #16]
 8013b00:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b08:	461a      	mov	r2, r3
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	fb02 f303 	mul.w	r3, r2, r3
 8013b10:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	00db      	lsls	r3, r3, #3
 8013b16:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b1c:	68fa      	ldr	r2, [r7, #12]
 8013b1e:	2100      	movs	r1, #0
 8013b20:	4618      	mov	r0, r3
 8013b22:	f00a fa9e 	bl	801e062 <memset>
}
 8013b26:	bf00      	nop
 8013b28:	3710      	adds	r7, #16
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}

08013b2e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b086      	sub	sp, #24
 8013b32:	af02      	add	r7, sp, #8
 8013b34:	6078      	str	r0, [r7, #4]
 8013b36:	460b      	mov	r3, r1
 8013b38:	70fb      	strb	r3, [r7, #3]
 8013b3a:	4613      	mov	r3, r2
 8013b3c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	7c1b      	ldrb	r3, [r3, #16]
 8013b44:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8013b46:	78fb      	ldrb	r3, [r7, #3]
 8013b48:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b4e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8013b50:	7bfb      	ldrb	r3, [r7, #15]
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	89ba      	ldrh	r2, [r7, #12]
 8013b56:	fb12 f303 	smulbb	r3, r2, r3
 8013b5a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8013b5c:	89bb      	ldrh	r3, [r7, #12]
 8013b5e:	00db      	lsls	r3, r3, #3
 8013b60:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8013b62:	89bb      	ldrh	r3, [r7, #12]
 8013b64:	68ba      	ldr	r2, [r7, #8]
 8013b66:	4413      	add	r3, r2
 8013b68:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8013b6a:	7bf9      	ldrb	r1, [r7, #15]
 8013b6c:	78ba      	ldrb	r2, [r7, #2]
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	460b      	mov	r3, r1
 8013b74:	2100      	movs	r1, #0
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f002 fc29 	bl	80163ce <u8x8_DrawTile>
}
 8013b7c:	bf00      	nop
 8013b7e:	3710      	adds	r7, #16
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b084      	sub	sp, #16
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b96:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013b9e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	7c5b      	ldrb	r3, [r3, #17]
 8013ba6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8013ba8:	7bba      	ldrb	r2, [r7, #14]
 8013baa:	7bfb      	ldrb	r3, [r7, #15]
 8013bac:	4619      	mov	r1, r3
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7ff ffbd 	bl	8013b2e <u8g2_send_tile_row>
    src_row++;
 8013bb4:	7bfb      	ldrb	r3, [r7, #15]
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8013bba:	7bbb      	ldrb	r3, [r7, #14]
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8013bc0:	7bfa      	ldrb	r2, [r7, #15]
 8013bc2:	7b7b      	ldrb	r3, [r7, #13]
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d203      	bcs.n	8013bd0 <u8g2_send_buffer+0x4c>
 8013bc8:	7bba      	ldrb	r2, [r7, #14]
 8013bca:	7b3b      	ldrb	r3, [r7, #12]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d3eb      	bcc.n	8013ba8 <u8g2_send_buffer+0x24>
}
 8013bd0:	bf00      	nop
 8013bd2:	3710      	adds	r7, #16
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f7ff ffcf 	bl	8013b84 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f002 fc64 	bl	80164b4 <u8x8_RefreshDisplay>
}
 8013bec:	bf00      	nop
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	78fa      	ldrb	r2, [r7, #3]
 8013c04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c16:	685b      	ldr	r3, [r3, #4]
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	4798      	blx	r3
}
 8013c1c:	bf00      	nop
 8013c1e:	3708      	adds	r7, #8
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d002      	beq.n	8013c3c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7ff ff5b 	bl	8013af2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f7ff ffd8 	bl	8013bf4 <u8g2_SetBufferCurrTileRow>
}
 8013c44:	bf00      	nop
 8013c46:	3708      	adds	r7, #8
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}

08013c4c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f7ff ff95 	bl	8013b84 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013c60:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8013c68:	7bfb      	ldrb	r3, [r7, #15]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	7c5b      	ldrb	r3, [r3, #17]
 8013c74:	7bfa      	ldrb	r2, [r7, #15]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	d304      	bcc.n	8013c84 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f002 fc1a 	bl	80164b4 <u8x8_RefreshDisplay>
    return 0;
 8013c80:	2300      	movs	r3, #0
 8013c82:	e00d      	b.n	8013ca0 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d002      	beq.n	8013c94 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7ff ff2f 	bl	8013af2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8013c94:	7bfb      	ldrb	r3, [r7, #15]
 8013c96:	4619      	mov	r1, r3
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f7ff ffab 	bl	8013bf4 <u8g2_SetBufferCurrTileRow>
  return 1;
 8013c9e:	2301      	movs	r3, #1
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3710      	adds	r7, #16
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <u8g2_UpdateDisplay>:
  }  
}

/* same as sendBuffer, but does not send the ePaper refresh message */
void u8g2_UpdateDisplay(u8g2_t *u8g2)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f7ff ff67 	bl	8013b84 <u8g2_send_buffer>
}
 8013cb6:	bf00      	nop
 8013cb8:	3708      	adds	r7, #8
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}

08013cbe <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8013cbe:	b580      	push	{r7, lr}
 8013cc0:	b082      	sub	sp, #8
 8013cc2:	af00      	add	r7, sp, #0
 8013cc4:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f7ff ffac 	bl	8013c24 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f7ff ffbd 	bl	8013c4c <u8g2_NextPage>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d1f9      	bne.n	8013ccc <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8013cd8:	2100      	movs	r1, #0
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7ff ff8a 	bl	8013bf4 <u8g2_SetBufferCurrTileRow>
}
 8013ce0:	bf00      	nop
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b083      	sub	sp, #12
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2208      	movs	r2, #8
 8013cf4:	701a      	strb	r2, [r3, #0]
  return buf;
 8013cf6:	4b03      	ldr	r3, [pc, #12]	; (8013d04 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	370c      	adds	r7, #12
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr
 8013d04:	20000380 	.word	0x20000380

08013d08 <u8g2_Setup_sh1106_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 f */
void u8g2_Setup_sh1106_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b088      	sub	sp, #32
 8013d0c:	af02      	add	r7, sp, #8
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
 8013d14:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	4a0b      	ldr	r2, [pc, #44]	; (8013d4c <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x44>)
 8013d1e:	490c      	ldr	r1, [pc, #48]	; (8013d50 <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x48>)
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f002 fc8f 	bl	8016644 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8013d26:	f107 0313 	add.w	r3, r7, #19
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7ff ffdc 	bl	8013ce8 <u8g2_m_16_8_f>
 8013d30:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8013d32:	7cfa      	ldrb	r2, [r7, #19]
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	9300      	str	r3, [sp, #0]
 8013d38:	4b06      	ldr	r3, [pc, #24]	; (8013d54 <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x4c>)
 8013d3a:	6979      	ldr	r1, [r7, #20]
 8013d3c:	68f8      	ldr	r0, [r7, #12]
 8013d3e:	f001 fe80 	bl	8015a42 <u8g2_SetupBuffer>
}
 8013d42:	bf00      	nop
 8013d44:	3718      	adds	r7, #24
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	080160bd 	.word	0x080160bd
 8013d50:	080162c9 	.word	0x080162c9
 8013d54:	080151c9 	.word	0x080151c9

08013d58 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	460b      	mov	r3, r1
 8013d62:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8013d64:	78fb      	ldrb	r3, [r7, #3]
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	4413      	add	r3, r2
 8013d6a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	781b      	ldrb	r3, [r3, #0]
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	370c      	adds	r7, #12
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr

08013d7c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b085      	sub	sp, #20
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	460b      	mov	r3, r1
 8013d86:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8013d88:	78fb      	ldrb	r3, [r7, #3]
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	4413      	add	r3, r2
 8013d8e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	781b      	ldrb	r3, [r3, #0]
 8013d94:	81fb      	strh	r3, [r7, #14]
    font++;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	3301      	adds	r3, #1
 8013d9a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8013d9c:	89fb      	ldrh	r3, [r7, #14]
 8013d9e:	021b      	lsls	r3, r3, #8
 8013da0:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	781b      	ldrb	r3, [r3, #0]
 8013da6:	b29a      	uxth	r2, r3
 8013da8:	89fb      	ldrh	r3, [r7, #14]
 8013daa:	4413      	add	r3, r2
 8013dac:	81fb      	strh	r3, [r7, #14]
    return pos;
 8013dae:	89fb      	ldrh	r3, [r7, #14]
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3714      	adds	r7, #20
 8013db4:	46bd      	mov	sp, r7
 8013db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dba:	4770      	bx	lr

08013dbc <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8013dc6:	2100      	movs	r1, #0
 8013dc8:	6838      	ldr	r0, [r7, #0]
 8013dca:	f7ff ffc5 	bl	8013d58 <u8g2_font_get_byte>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8013dd6:	2101      	movs	r1, #1
 8013dd8:	6838      	ldr	r0, [r7, #0]
 8013dda:	f7ff ffbd 	bl	8013d58 <u8g2_font_get_byte>
 8013dde:	4603      	mov	r3, r0
 8013de0:	461a      	mov	r2, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8013de6:	2102      	movs	r1, #2
 8013de8:	6838      	ldr	r0, [r7, #0]
 8013dea:	f7ff ffb5 	bl	8013d58 <u8g2_font_get_byte>
 8013dee:	4603      	mov	r3, r0
 8013df0:	461a      	mov	r2, r3
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8013df6:	2103      	movs	r1, #3
 8013df8:	6838      	ldr	r0, [r7, #0]
 8013dfa:	f7ff ffad 	bl	8013d58 <u8g2_font_get_byte>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	461a      	mov	r2, r3
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8013e06:	2104      	movs	r1, #4
 8013e08:	6838      	ldr	r0, [r7, #0]
 8013e0a:	f7ff ffa5 	bl	8013d58 <u8g2_font_get_byte>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	461a      	mov	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8013e16:	2105      	movs	r1, #5
 8013e18:	6838      	ldr	r0, [r7, #0]
 8013e1a:	f7ff ff9d 	bl	8013d58 <u8g2_font_get_byte>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	461a      	mov	r2, r3
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8013e26:	2106      	movs	r1, #6
 8013e28:	6838      	ldr	r0, [r7, #0]
 8013e2a:	f7ff ff95 	bl	8013d58 <u8g2_font_get_byte>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	461a      	mov	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8013e36:	2107      	movs	r1, #7
 8013e38:	6838      	ldr	r0, [r7, #0]
 8013e3a:	f7ff ff8d 	bl	8013d58 <u8g2_font_get_byte>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	461a      	mov	r2, r3
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8013e46:	2108      	movs	r1, #8
 8013e48:	6838      	ldr	r0, [r7, #0]
 8013e4a:	f7ff ff85 	bl	8013d58 <u8g2_font_get_byte>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	461a      	mov	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8013e56:	2109      	movs	r1, #9
 8013e58:	6838      	ldr	r0, [r7, #0]
 8013e5a:	f7ff ff7d 	bl	8013d58 <u8g2_font_get_byte>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	b25a      	sxtb	r2, r3
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8013e66:	210a      	movs	r1, #10
 8013e68:	6838      	ldr	r0, [r7, #0]
 8013e6a:	f7ff ff75 	bl	8013d58 <u8g2_font_get_byte>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	b25a      	sxtb	r2, r3
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8013e76:	210b      	movs	r1, #11
 8013e78:	6838      	ldr	r0, [r7, #0]
 8013e7a:	f7ff ff6d 	bl	8013d58 <u8g2_font_get_byte>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	b25a      	sxtb	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8013e86:	210c      	movs	r1, #12
 8013e88:	6838      	ldr	r0, [r7, #0]
 8013e8a:	f7ff ff65 	bl	8013d58 <u8g2_font_get_byte>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	b25a      	sxtb	r2, r3
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8013e96:	210d      	movs	r1, #13
 8013e98:	6838      	ldr	r0, [r7, #0]
 8013e9a:	f7ff ff5d 	bl	8013d58 <u8g2_font_get_byte>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	b25a      	sxtb	r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8013ea6:	210e      	movs	r1, #14
 8013ea8:	6838      	ldr	r0, [r7, #0]
 8013eaa:	f7ff ff55 	bl	8013d58 <u8g2_font_get_byte>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	b25a      	sxtb	r2, r3
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8013eb6:	210f      	movs	r1, #15
 8013eb8:	6838      	ldr	r0, [r7, #0]
 8013eba:	f7ff ff4d 	bl	8013d58 <u8g2_font_get_byte>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	b25a      	sxtb	r2, r3
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8013ec6:	2110      	movs	r1, #16
 8013ec8:	6838      	ldr	r0, [r7, #0]
 8013eca:	f7ff ff45 	bl	8013d58 <u8g2_font_get_byte>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	b25a      	sxtb	r2, r3
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8013ed6:	2111      	movs	r1, #17
 8013ed8:	6838      	ldr	r0, [r7, #0]
 8013eda:	f7ff ff4f 	bl	8013d7c <u8g2_font_get_word>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8013ee6:	2113      	movs	r1, #19
 8013ee8:	6838      	ldr	r0, [r7, #0]
 8013eea:	f7ff ff47 	bl	8013d7c <u8g2_font_get_word>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8013ef6:	2115      	movs	r1, #21
 8013ef8:	6838      	ldr	r0, [r7, #0]
 8013efa:	f7ff ff3f 	bl	8013d7c <u8g2_font_get_word>
 8013efe:	4603      	mov	r3, r0
 8013f00:	461a      	mov	r2, r3
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	82da      	strh	r2, [r3, #22]
#endif
}
 8013f06:	bf00      	nop
 8013f08:	3708      	adds	r7, #8
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}

08013f0e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8013f0e:	b480      	push	{r7}
 8013f10:	b085      	sub	sp, #20
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	6078      	str	r0, [r7, #4]
 8013f16:	460b      	mov	r3, r1
 8013f18:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	7a9b      	ldrb	r3, [r3, #10]
 8013f1e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8013f28:	7bfa      	ldrb	r2, [r7, #15]
 8013f2a:	7b7b      	ldrb	r3, [r7, #13]
 8013f2c:	fa42 f303 	asr.w	r3, r2, r3
 8013f30:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8013f32:	7b7b      	ldrb	r3, [r7, #13]
 8013f34:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8013f36:	7bba      	ldrb	r2, [r7, #14]
 8013f38:	78fb      	ldrb	r3, [r7, #3]
 8013f3a:	4413      	add	r3, r2
 8013f3c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8013f3e:	7bbb      	ldrb	r3, [r7, #14]
 8013f40:	2b07      	cmp	r3, #7
 8013f42:	d91a      	bls.n	8013f7a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8013f44:	2308      	movs	r3, #8
 8013f46:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8013f48:	7b3a      	ldrb	r2, [r7, #12]
 8013f4a:	7b7b      	ldrb	r3, [r7, #13]
 8013f4c:	1ad3      	subs	r3, r2, r3
 8013f4e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	1c5a      	adds	r2, r3, #1
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	461a      	mov	r2, r3
 8013f62:	7b3b      	ldrb	r3, [r7, #12]
 8013f64:	fa02 f303 	lsl.w	r3, r2, r3
 8013f68:	b25a      	sxtb	r2, r3
 8013f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f6e:	4313      	orrs	r3, r2
 8013f70:	b25b      	sxtb	r3, r3
 8013f72:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8013f74:	7bbb      	ldrb	r3, [r7, #14]
 8013f76:	3b08      	subs	r3, #8
 8013f78:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8013f7a:	78fb      	ldrb	r3, [r7, #3]
 8013f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f80:	fa02 f303 	lsl.w	r3, r2, r3
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	43db      	mvns	r3, r3
 8013f88:	b2da      	uxtb	r2, r3
 8013f8a:	7bfb      	ldrb	r3, [r7, #15]
 8013f8c:	4013      	ands	r3, r2
 8013f8e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	7bba      	ldrb	r2, [r7, #14]
 8013f94:	729a      	strb	r2, [r3, #10]
  return val;
 8013f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3714      	adds	r7, #20
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa2:	4770      	bx	lr

08013fa4 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b084      	sub	sp, #16
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	460b      	mov	r3, r1
 8013fae:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8013fb0:	78fb      	ldrb	r3, [r7, #3]
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f7ff ffaa 	bl	8013f0e <u8g2_font_decode_get_unsigned_bits>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8013fc2:	78fb      	ldrb	r3, [r7, #3]
 8013fc4:	3b01      	subs	r3, #1
 8013fc6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8013fc8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8013fcc:	78fb      	ldrb	r3, [r7, #3]
 8013fce:	fa02 f303 	lsl.w	r3, r2, r3
 8013fd2:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8013fd4:	7bfa      	ldrb	r2, [r7, #15]
 8013fd6:	7bbb      	ldrb	r3, [r7, #14]
 8013fd8:	1ad3      	subs	r3, r2, r3
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	73fb      	strb	r3, [r7, #15]
  return v;
 8013fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3710      	adds	r7, #16
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8013fea:	b490      	push	{r4, r7}
 8013fec:	b082      	sub	sp, #8
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	4604      	mov	r4, r0
 8013ff2:	4608      	mov	r0, r1
 8013ff4:	4611      	mov	r1, r2
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	4623      	mov	r3, r4
 8013ffa:	71fb      	strb	r3, [r7, #7]
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	71bb      	strb	r3, [r7, #6]
 8014000:	460b      	mov	r3, r1
 8014002:	717b      	strb	r3, [r7, #5]
 8014004:	4613      	mov	r3, r2
 8014006:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8014008:	793b      	ldrb	r3, [r7, #4]
 801400a:	2b01      	cmp	r3, #1
 801400c:	d008      	beq.n	8014020 <u8g2_add_vector_y+0x36>
 801400e:	2b02      	cmp	r3, #2
 8014010:	d00b      	beq.n	801402a <u8g2_add_vector_y+0x40>
 8014012:	2b00      	cmp	r3, #0
 8014014:	d10e      	bne.n	8014034 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8014016:	797a      	ldrb	r2, [r7, #5]
 8014018:	79fb      	ldrb	r3, [r7, #7]
 801401a:	4413      	add	r3, r2
 801401c:	71fb      	strb	r3, [r7, #7]
      break;
 801401e:	e00e      	b.n	801403e <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8014020:	79ba      	ldrb	r2, [r7, #6]
 8014022:	79fb      	ldrb	r3, [r7, #7]
 8014024:	4413      	add	r3, r2
 8014026:	71fb      	strb	r3, [r7, #7]
      break;
 8014028:	e009      	b.n	801403e <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 801402a:	797b      	ldrb	r3, [r7, #5]
 801402c:	79fa      	ldrb	r2, [r7, #7]
 801402e:	1ad3      	subs	r3, r2, r3
 8014030:	71fb      	strb	r3, [r7, #7]
      break;
 8014032:	e004      	b.n	801403e <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8014034:	79bb      	ldrb	r3, [r7, #6]
 8014036:	79fa      	ldrb	r2, [r7, #7]
 8014038:	1ad3      	subs	r3, r2, r3
 801403a:	71fb      	strb	r3, [r7, #7]
      break;      
 801403c:	bf00      	nop
  }
  return dy;
 801403e:	79fb      	ldrb	r3, [r7, #7]
}
 8014040:	4618      	mov	r0, r3
 8014042:	3708      	adds	r7, #8
 8014044:	46bd      	mov	sp, r7
 8014046:	bc90      	pop	{r4, r7}
 8014048:	4770      	bx	lr

0801404a <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 801404a:	b490      	push	{r4, r7}
 801404c:	b082      	sub	sp, #8
 801404e:	af00      	add	r7, sp, #0
 8014050:	4604      	mov	r4, r0
 8014052:	4608      	mov	r0, r1
 8014054:	4611      	mov	r1, r2
 8014056:	461a      	mov	r2, r3
 8014058:	4623      	mov	r3, r4
 801405a:	71fb      	strb	r3, [r7, #7]
 801405c:	4603      	mov	r3, r0
 801405e:	71bb      	strb	r3, [r7, #6]
 8014060:	460b      	mov	r3, r1
 8014062:	717b      	strb	r3, [r7, #5]
 8014064:	4613      	mov	r3, r2
 8014066:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8014068:	793b      	ldrb	r3, [r7, #4]
 801406a:	2b01      	cmp	r3, #1
 801406c:	d008      	beq.n	8014080 <u8g2_add_vector_x+0x36>
 801406e:	2b02      	cmp	r3, #2
 8014070:	d00b      	beq.n	801408a <u8g2_add_vector_x+0x40>
 8014072:	2b00      	cmp	r3, #0
 8014074:	d10e      	bne.n	8014094 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8014076:	79ba      	ldrb	r2, [r7, #6]
 8014078:	79fb      	ldrb	r3, [r7, #7]
 801407a:	4413      	add	r3, r2
 801407c:	71fb      	strb	r3, [r7, #7]
      break;
 801407e:	e00e      	b.n	801409e <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8014080:	797b      	ldrb	r3, [r7, #5]
 8014082:	79fa      	ldrb	r2, [r7, #7]
 8014084:	1ad3      	subs	r3, r2, r3
 8014086:	71fb      	strb	r3, [r7, #7]
      break;
 8014088:	e009      	b.n	801409e <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 801408a:	79bb      	ldrb	r3, [r7, #6]
 801408c:	79fa      	ldrb	r2, [r7, #7]
 801408e:	1ad3      	subs	r3, r2, r3
 8014090:	71fb      	strb	r3, [r7, #7]
      break;
 8014092:	e004      	b.n	801409e <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8014094:	797a      	ldrb	r2, [r7, #5]
 8014096:	79fb      	ldrb	r3, [r7, #7]
 8014098:	4413      	add	r3, r2
 801409a:	71fb      	strb	r3, [r7, #7]
      break;      
 801409c:	bf00      	nop
  }
  return dx;
 801409e:	79fb      	ldrb	r3, [r7, #7]
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3708      	adds	r7, #8
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bc90      	pop	{r4, r7}
 80140a8:	4770      	bx	lr

080140aa <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80140aa:	b580      	push	{r7, lr}
 80140ac:	b088      	sub	sp, #32
 80140ae:	af02      	add	r7, sp, #8
 80140b0:	6078      	str	r0, [r7, #4]
 80140b2:	460b      	mov	r3, r1
 80140b4:	70fb      	strb	r3, [r7, #3]
 80140b6:	4613      	mov	r3, r2
 80140b8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	3354      	adds	r3, #84	; 0x54
 80140be:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80140c0:	78fb      	ldrb	r3, [r7, #3]
 80140c2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80140ca:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80140d2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80140da:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80140dc:	7bfa      	ldrb	r2, [r7, #15]
 80140de:	7d7b      	ldrb	r3, [r7, #21]
 80140e0:	1ad3      	subs	r3, r2, r3
 80140e2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80140e4:	7bfb      	ldrb	r3, [r7, #15]
 80140e6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80140e8:	7dfa      	ldrb	r2, [r7, #23]
 80140ea:	7bfb      	ldrb	r3, [r7, #15]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d201      	bcs.n	80140f4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80140f0:	7dfb      	ldrb	r3, [r7, #23]
 80140f2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	791b      	ldrb	r3, [r3, #4]
 80140f8:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	795b      	ldrb	r3, [r3, #5]
 80140fe:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8014100:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8014104:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8014108:	693b      	ldr	r3, [r7, #16]
 801410a:	7b9b      	ldrb	r3, [r3, #14]
 801410c:	7bb8      	ldrb	r0, [r7, #14]
 801410e:	f7ff ff9c 	bl	801404a <u8g2_add_vector_x>
 8014112:	4603      	mov	r3, r0
 8014114:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8014116:	f997 1015 	ldrsb.w	r1, [r7, #21]
 801411a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	7b9b      	ldrb	r3, [r3, #14]
 8014122:	7b78      	ldrb	r0, [r7, #13]
 8014124:	f7ff ff61 	bl	8013fea <u8g2_add_vector_y>
 8014128:	4603      	mov	r3, r0
 801412a:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 801412c:	78bb      	ldrb	r3, [r7, #2]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d00f      	beq.n	8014152 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	7b1a      	ldrb	r2, [r3, #12]
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	7b9b      	ldrb	r3, [r3, #14]
 8014140:	7db8      	ldrb	r0, [r7, #22]
 8014142:	7b7a      	ldrb	r2, [r7, #13]
 8014144:	7bb9      	ldrb	r1, [r7, #14]
 8014146:	9300      	str	r3, [sp, #0]
 8014148:	4603      	mov	r3, r0
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 fccf 	bl	8014aee <u8g2_DrawHVLine>
 8014150:	e012      	b.n	8014178 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8014152:	693b      	ldr	r3, [r7, #16]
 8014154:	7adb      	ldrb	r3, [r3, #11]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d10e      	bne.n	8014178 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	7b5a      	ldrb	r2, [r3, #13]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	7b9b      	ldrb	r3, [r3, #14]
 8014168:	7db8      	ldrb	r0, [r7, #22]
 801416a:	7b7a      	ldrb	r2, [r7, #13]
 801416c:	7bb9      	ldrb	r1, [r7, #14]
 801416e:	9300      	str	r3, [sp, #0]
 8014170:	4603      	mov	r3, r0
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f000 fcbb 	bl	8014aee <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8014178:	7dfa      	ldrb	r2, [r7, #23]
 801417a:	7bfb      	ldrb	r3, [r7, #15]
 801417c:	429a      	cmp	r2, r3
 801417e:	d309      	bcc.n	8014194 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8014180:	7dfa      	ldrb	r2, [r7, #23]
 8014182:	7bfb      	ldrb	r3, [r7, #15]
 8014184:	1ad3      	subs	r3, r2, r3
 8014186:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8014188:	2300      	movs	r3, #0
 801418a:	757b      	strb	r3, [r7, #21]
    ly++;
 801418c:	7d3b      	ldrb	r3, [r7, #20]
 801418e:	3301      	adds	r3, #1
 8014190:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8014192:	e79f      	b.n	80140d4 <u8g2_font_decode_len+0x2a>
      break;
 8014194:	bf00      	nop
  }
  lx += cnt;
 8014196:	7d7a      	ldrb	r2, [r7, #21]
 8014198:	7dfb      	ldrb	r3, [r7, #23]
 801419a:	4413      	add	r3, r2
 801419c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 801419e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 80141a6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80141aa:	693b      	ldr	r3, [r7, #16]
 80141ac:	71da      	strb	r2, [r3, #7]
  
}
 80141ae:	bf00      	nop
 80141b0:	3718      	adds	r7, #24
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80141b6:	b580      	push	{r7, lr}
 80141b8:	b084      	sub	sp, #16
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
 80141be:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	3354      	adds	r3, #84	; 0x54
 80141c4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	683a      	ldr	r2, [r7, #0]
 80141ca:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2200      	movs	r2, #0
 80141d0:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80141d8:	4619      	mov	r1, r3
 80141da:	68f8      	ldr	r0, [r7, #12]
 80141dc:	f7ff fe97 	bl	8013f0e <u8g2_font_decode_get_unsigned_bits>
 80141e0:	4603      	mov	r3, r0
 80141e2:	b25a      	sxtb	r2, r3
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80141ee:	4619      	mov	r1, r3
 80141f0:	68f8      	ldr	r0, [r7, #12]
 80141f2:	f7ff fe8c 	bl	8013f0e <u8g2_font_decode_get_unsigned_bits>
 80141f6:	4603      	mov	r3, r0
 80141f8:	b25a      	sxtb	r2, r3
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	7b1b      	ldrb	r3, [r3, #12]
 801420c:	2b00      	cmp	r3, #0
 801420e:	bf0c      	ite	eq
 8014210:	2301      	moveq	r3, #1
 8014212:	2300      	movne	r3, #0
 8014214:	b2db      	uxtb	r3, r3
 8014216:	461a      	mov	r2, r3
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	735a      	strb	r2, [r3, #13]
}
 801421c:	bf00      	nop
 801421e:	3710      	adds	r7, #16
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b088      	sub	sp, #32
 8014228:	af02      	add	r7, sp, #8
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	3354      	adds	r3, #84	; 0x54
 8014232:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8014234:	6839      	ldr	r1, [r7, #0]
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f7ff ffbd 	bl	80141b6 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014242:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 801424a:	4619      	mov	r1, r3
 801424c:	6938      	ldr	r0, [r7, #16]
 801424e:	f7ff fea9 	bl	8013fa4 <u8g2_font_decode_get_signed_bits>
 8014252:	4603      	mov	r3, r0
 8014254:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801425c:	4619      	mov	r1, r3
 801425e:	6938      	ldr	r0, [r7, #16]
 8014260:	f7ff fea0 	bl	8013fa4 <u8g2_font_decode_get_signed_bits>
 8014264:	4603      	mov	r3, r0
 8014266:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801426e:	4619      	mov	r1, r3
 8014270:	6938      	ldr	r0, [r7, #16]
 8014272:	f7ff fe97 	bl	8013fa4 <u8g2_font_decode_get_signed_bits>
 8014276:	4603      	mov	r3, r0
 8014278:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014280:	2b00      	cmp	r3, #0
 8014282:	f340 80cf 	ble.w	8014424 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	7918      	ldrb	r0, [r3, #4]
 801428a:	7bfa      	ldrb	r2, [r7, #15]
 801428c:	7b7b      	ldrb	r3, [r7, #13]
 801428e:	4413      	add	r3, r2
 8014290:	b2db      	uxtb	r3, r3
 8014292:	425b      	negs	r3, r3
 8014294:	b2db      	uxtb	r3, r3
 8014296:	b25a      	sxtb	r2, r3
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	7b9b      	ldrb	r3, [r3, #14]
 801429c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80142a0:	f7ff fed3 	bl	801404a <u8g2_add_vector_x>
 80142a4:	4603      	mov	r3, r0
 80142a6:	461a      	mov	r2, r3
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	7958      	ldrb	r0, [r3, #5]
 80142b0:	7bfa      	ldrb	r2, [r7, #15]
 80142b2:	7b7b      	ldrb	r3, [r7, #13]
 80142b4:	4413      	add	r3, r2
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	425b      	negs	r3, r3
 80142ba:	b2db      	uxtb	r3, r3
 80142bc:	b25a      	sxtb	r2, r3
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	7b9b      	ldrb	r3, [r3, #14]
 80142c2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80142c6:	f7ff fe90 	bl	8013fea <u8g2_add_vector_y>
 80142ca:	4603      	mov	r3, r0
 80142cc:	461a      	mov	r2, r3
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80142d2:	693b      	ldr	r3, [r7, #16]
 80142d4:	791b      	ldrb	r3, [r3, #4]
 80142d6:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	795b      	ldrb	r3, [r3, #5]
 80142dc:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 80142de:	7dfb      	ldrb	r3, [r7, #23]
 80142e0:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 80142e2:	7d7b      	ldrb	r3, [r7, #21]
 80142e4:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	7b9b      	ldrb	r3, [r3, #14]
 80142ea:	2b03      	cmp	r3, #3
 80142ec:	d852      	bhi.n	8014394 <u8g2_font_decode_glyph+0x170>
 80142ee:	a201      	add	r2, pc, #4	; (adr r2, 80142f4 <u8g2_font_decode_glyph+0xd0>)
 80142f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f4:	08014305 	.word	0x08014305
 80142f8:	0801431d 	.word	0x0801431d
 80142fc:	08014341 	.word	0x08014341
 8014300:	08014371 	.word	0x08014371
      {
	case 0:
	    x1 += decode->glyph_width;
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801430a:	b2da      	uxtb	r2, r3
 801430c:	7dbb      	ldrb	r3, [r7, #22]
 801430e:	4413      	add	r3, r2
 8014310:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8014312:	7bfa      	ldrb	r2, [r7, #15]
 8014314:	7d3b      	ldrb	r3, [r7, #20]
 8014316:	4413      	add	r3, r2
 8014318:	753b      	strb	r3, [r7, #20]
	    break;
 801431a:	e03b      	b.n	8014394 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 801431c:	7bfb      	ldrb	r3, [r7, #15]
 801431e:	7dfa      	ldrb	r2, [r7, #23]
 8014320:	1ad3      	subs	r3, r2, r3
 8014322:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8014324:	7dfb      	ldrb	r3, [r7, #23]
 8014326:	3301      	adds	r3, #1
 8014328:	75fb      	strb	r3, [r7, #23]
	    x1++;
 801432a:	7dbb      	ldrb	r3, [r7, #22]
 801432c:	3301      	adds	r3, #1
 801432e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8014330:	693b      	ldr	r3, [r7, #16]
 8014332:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014336:	b2da      	uxtb	r2, r3
 8014338:	7d3b      	ldrb	r3, [r7, #20]
 801433a:	4413      	add	r3, r2
 801433c:	753b      	strb	r3, [r7, #20]
	    break;
 801433e:	e029      	b.n	8014394 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014346:	b2db      	uxtb	r3, r3
 8014348:	7dfa      	ldrb	r2, [r7, #23]
 801434a:	1ad3      	subs	r3, r2, r3
 801434c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 801434e:	7dfb      	ldrb	r3, [r7, #23]
 8014350:	3301      	adds	r3, #1
 8014352:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8014354:	7dbb      	ldrb	r3, [r7, #22]
 8014356:	3301      	adds	r3, #1
 8014358:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 801435a:	7bfb      	ldrb	r3, [r7, #15]
 801435c:	7d7a      	ldrb	r2, [r7, #21]
 801435e:	1ad3      	subs	r3, r2, r3
 8014360:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8014362:	7d7b      	ldrb	r3, [r7, #21]
 8014364:	3301      	adds	r3, #1
 8014366:	757b      	strb	r3, [r7, #21]
	    y1++;
 8014368:	7d3b      	ldrb	r3, [r7, #20]
 801436a:	3301      	adds	r3, #1
 801436c:	753b      	strb	r3, [r7, #20]
	    break;	  
 801436e:	e011      	b.n	8014394 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8014370:	7bfa      	ldrb	r2, [r7, #15]
 8014372:	7dbb      	ldrb	r3, [r7, #22]
 8014374:	4413      	add	r3, r2
 8014376:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8014378:	693b      	ldr	r3, [r7, #16]
 801437a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801437e:	b2db      	uxtb	r3, r3
 8014380:	7d7a      	ldrb	r2, [r7, #21]
 8014382:	1ad3      	subs	r3, r2, r3
 8014384:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8014386:	7d7b      	ldrb	r3, [r7, #21]
 8014388:	3301      	adds	r3, #1
 801438a:	757b      	strb	r3, [r7, #21]
	    y1++;
 801438c:	7d3b      	ldrb	r3, [r7, #20]
 801438e:	3301      	adds	r3, #1
 8014390:	753b      	strb	r3, [r7, #20]
	    break;	  
 8014392:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8014394:	7db8      	ldrb	r0, [r7, #22]
 8014396:	7d7a      	ldrb	r2, [r7, #21]
 8014398:	7df9      	ldrb	r1, [r7, #23]
 801439a:	7d3b      	ldrb	r3, [r7, #20]
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	4603      	mov	r3, r0
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f000 fe50 	bl	8015046 <u8g2_IsIntersection>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d102      	bne.n	80143b2 <u8g2_font_decode_glyph+0x18e>
	return d;
 80143ac:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80143b0:	e03a      	b.n	8014428 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	2200      	movs	r2, #0
 80143b6:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	2200      	movs	r2, #0
 80143bc:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80143c4:	4619      	mov	r1, r3
 80143c6:	6938      	ldr	r0, [r7, #16]
 80143c8:	f7ff fda1 	bl	8013f0e <u8g2_font_decode_get_unsigned_bits>
 80143cc:	4603      	mov	r3, r0
 80143ce:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80143d6:	4619      	mov	r1, r3
 80143d8:	6938      	ldr	r0, [r7, #16]
 80143da:	f7ff fd98 	bl	8013f0e <u8g2_font_decode_get_unsigned_bits>
 80143de:	4603      	mov	r3, r0
 80143e0:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80143e2:	7afb      	ldrb	r3, [r7, #11]
 80143e4:	2200      	movs	r2, #0
 80143e6:	4619      	mov	r1, r3
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f7ff fe5e 	bl	80140aa <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80143ee:	7abb      	ldrb	r3, [r7, #10]
 80143f0:	2201      	movs	r2, #1
 80143f2:	4619      	mov	r1, r3
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f7ff fe58 	bl	80140aa <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80143fa:	2101      	movs	r1, #1
 80143fc:	6938      	ldr	r0, [r7, #16]
 80143fe:	f7ff fd86 	bl	8013f0e <u8g2_font_decode_get_unsigned_bits>
 8014402:	4603      	mov	r3, r0
 8014404:	2b00      	cmp	r3, #0
 8014406:	d1ec      	bne.n	80143e2 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8014408:	693b      	ldr	r3, [r7, #16]
 801440a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801440e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014412:	429a      	cmp	r2, r3
 8014414:	dd00      	ble.n	8014418 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8014416:	e7d2      	b.n	80143be <u8g2_font_decode_glyph+0x19a>
	break;
 8014418:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	7b1a      	ldrb	r2, [r3, #12]
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8014424:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8014428:	4618      	mov	r0, r3
 801442a:	3718      	adds	r7, #24
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}

08014430 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b086      	sub	sp, #24
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	460b      	mov	r3, r1
 801443a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014440:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	3317      	adds	r3, #23
 8014446:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8014448:	887b      	ldrh	r3, [r7, #2]
 801444a:	2bff      	cmp	r3, #255	; 0xff
 801444c:	d82a      	bhi.n	80144a4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 801444e:	887b      	ldrh	r3, [r7, #2]
 8014450:	2b60      	cmp	r3, #96	; 0x60
 8014452:	d907      	bls.n	8014464 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 801445a:	461a      	mov	r2, r3
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	4413      	add	r3, r2
 8014460:	617b      	str	r3, [r7, #20]
 8014462:	e009      	b.n	8014478 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8014464:	887b      	ldrh	r3, [r7, #2]
 8014466:	2b40      	cmp	r3, #64	; 0x40
 8014468:	d906      	bls.n	8014478 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8014470:	461a      	mov	r2, r3
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	4413      	add	r3, r2
 8014476:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	3301      	adds	r3, #1
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d04e      	beq.n	8014520 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8014482:	697b      	ldr	r3, [r7, #20]
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	b29b      	uxth	r3, r3
 8014488:	887a      	ldrh	r2, [r7, #2]
 801448a:	429a      	cmp	r2, r3
 801448c:	d102      	bne.n	8014494 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	3302      	adds	r3, #2
 8014492:	e049      	b.n	8014528 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	3301      	adds	r3, #1
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	461a      	mov	r2, r3
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	4413      	add	r3, r2
 80144a0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80144a2:	e7e9      	b.n	8014478 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80144aa:	461a      	mov	r2, r3
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	4413      	add	r3, r2
 80144b0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80144b6:	2100      	movs	r1, #0
 80144b8:	6938      	ldr	r0, [r7, #16]
 80144ba:	f7ff fc5f 	bl	8013d7c <u8g2_font_get_word>
 80144be:	4603      	mov	r3, r0
 80144c0:	461a      	mov	r2, r3
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	4413      	add	r3, r2
 80144c6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80144c8:	2102      	movs	r1, #2
 80144ca:	6938      	ldr	r0, [r7, #16]
 80144cc:	f7ff fc56 	bl	8013d7c <u8g2_font_get_word>
 80144d0:	4603      	mov	r3, r0
 80144d2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	3304      	adds	r3, #4
 80144d8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80144da:	89fa      	ldrh	r2, [r7, #14]
 80144dc:	887b      	ldrh	r3, [r7, #2]
 80144de:	429a      	cmp	r2, r3
 80144e0:	d3e9      	bcc.n	80144b6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80144e2:	697b      	ldr	r3, [r7, #20]
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80144e8:	89fb      	ldrh	r3, [r7, #14]
 80144ea:	021b      	lsls	r3, r3, #8
 80144ec:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	3301      	adds	r3, #1
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	b29a      	uxth	r2, r3
 80144f6:	89fb      	ldrh	r3, [r7, #14]
 80144f8:	4313      	orrs	r3, r2
 80144fa:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80144fc:	89fb      	ldrh	r3, [r7, #14]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d010      	beq.n	8014524 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8014502:	89fa      	ldrh	r2, [r7, #14]
 8014504:	887b      	ldrh	r3, [r7, #2]
 8014506:	429a      	cmp	r2, r3
 8014508:	d102      	bne.n	8014510 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	3303      	adds	r3, #3
 801450e:	e00b      	b.n	8014528 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	3302      	adds	r3, #2
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	461a      	mov	r2, r3
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	4413      	add	r3, r2
 801451c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 801451e:	e7e0      	b.n	80144e2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8014520:	bf00      	nop
 8014522:	e000      	b.n	8014526 <u8g2_font_get_glyph_data+0xf6>
	break;
 8014524:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3718      	adds	r7, #24
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b084      	sub	sp, #16
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	4608      	mov	r0, r1
 801453a:	4611      	mov	r1, r2
 801453c:	461a      	mov	r2, r3
 801453e:	4603      	mov	r3, r0
 8014540:	70fb      	strb	r3, [r7, #3]
 8014542:	460b      	mov	r3, r1
 8014544:	70bb      	strb	r3, [r7, #2]
 8014546:	4613      	mov	r3, r2
 8014548:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 801454a:	2300      	movs	r3, #0
 801454c:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	78fa      	ldrb	r2, [r7, #3]
 8014552:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	78ba      	ldrb	r2, [r7, #2]
 801455a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 801455e:	883b      	ldrh	r3, [r7, #0]
 8014560:	4619      	mov	r1, r3
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f7ff ff64 	bl	8014430 <u8g2_font_get_glyph_data>
 8014568:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d005      	beq.n	801457c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8014570:	68b9      	ldr	r1, [r7, #8]
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f7ff fe56 	bl	8014224 <u8g2_font_decode_glyph>
 8014578:	4603      	mov	r3, r0
 801457a:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 801457c:	7bfb      	ldrb	r3, [r7, #15]
}
 801457e:	4618      	mov	r0, r3
 8014580:	3710      	adds	r7, #16
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}

08014586 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8014586:	b580      	push	{r7, lr}
 8014588:	b084      	sub	sp, #16
 801458a:	af00      	add	r7, sp, #0
 801458c:	6078      	str	r0, [r7, #4]
 801458e:	460b      	mov	r3, r1
 8014590:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8014592:	887b      	ldrh	r3, [r7, #2]
 8014594:	4619      	mov	r1, r3
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f7ff ff4a 	bl	8014430 <u8g2_font_get_glyph_data>
 801459c:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d101      	bne.n	80145a8 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 80145a4:	2300      	movs	r3, #0
 80145a6:	e027      	b.n	80145f8 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 80145a8:	68f9      	ldr	r1, [r7, #12]
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f7ff fe03 	bl	80141b6 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80145bc:	4619      	mov	r1, r3
 80145be:	4610      	mov	r0, r2
 80145c0:	f7ff fcf0 	bl	8013fa4 <u8g2_font_decode_get_signed_bits>
 80145c4:	4603      	mov	r3, r0
 80145c6:	461a      	mov	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80145da:	4619      	mov	r1, r3
 80145dc:	4610      	mov	r0, r2
 80145de:	f7ff fce1 	bl	8013fa4 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80145ee:	4619      	mov	r1, r3
 80145f0:	4610      	mov	r0, r2
 80145f2:	f7ff fcd7 	bl	8013fa4 <u8g2_font_decode_get_signed_bits>
 80145f6:	4603      	mov	r3, r0
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3710      	adds	r7, #16
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}

08014600 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8014600:	b480      	push	{r7}
 8014602:	b083      	sub	sp, #12
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	460b      	mov	r3, r1
 801460a:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	78fa      	ldrb	r2, [r7, #3]
 8014610:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8014614:	bf00      	nop
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	4608      	mov	r0, r1
 801462a:	4611      	mov	r1, r2
 801462c:	461a      	mov	r2, r3
 801462e:	4603      	mov	r3, r0
 8014630:	70fb      	strb	r3, [r7, #3]
 8014632:	460b      	mov	r3, r1
 8014634:	70bb      	strb	r3, [r7, #2]
 8014636:	4613      	mov	r3, r2
 8014638:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014640:	2b03      	cmp	r3, #3
 8014642:	d833      	bhi.n	80146ac <u8g2_DrawGlyph+0x8c>
 8014644:	a201      	add	r2, pc, #4	; (adr r2, 801464c <u8g2_DrawGlyph+0x2c>)
 8014646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801464a:	bf00      	nop
 801464c:	0801465d 	.word	0x0801465d
 8014650:	08014671 	.word	0x08014671
 8014654:	08014685 	.word	0x08014685
 8014658:	08014699 	.word	0x08014699
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	4798      	blx	r3
 8014664:	4603      	mov	r3, r0
 8014666:	461a      	mov	r2, r3
 8014668:	78bb      	ldrb	r3, [r7, #2]
 801466a:	4413      	add	r3, r2
 801466c:	70bb      	strb	r3, [r7, #2]
      break;
 801466e:	e01d      	b.n	80146ac <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	4798      	blx	r3
 8014678:	4603      	mov	r3, r0
 801467a:	461a      	mov	r2, r3
 801467c:	78fb      	ldrb	r3, [r7, #3]
 801467e:	1a9b      	subs	r3, r3, r2
 8014680:	70fb      	strb	r3, [r7, #3]
      break;
 8014682:	e013      	b.n	80146ac <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	4798      	blx	r3
 801468c:	4603      	mov	r3, r0
 801468e:	461a      	mov	r2, r3
 8014690:	78bb      	ldrb	r3, [r7, #2]
 8014692:	1a9b      	subs	r3, r3, r2
 8014694:	70bb      	strb	r3, [r7, #2]
      break;
 8014696:	e009      	b.n	80146ac <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	4798      	blx	r3
 80146a0:	4603      	mov	r3, r0
 80146a2:	461a      	mov	r2, r3
 80146a4:	78fb      	ldrb	r3, [r7, #3]
 80146a6:	4413      	add	r3, r2
 80146a8:	70fb      	strb	r3, [r7, #3]
      break;
 80146aa:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80146ac:	883b      	ldrh	r3, [r7, #0]
 80146ae:	78ba      	ldrb	r2, [r7, #2]
 80146b0:	78f9      	ldrb	r1, [r7, #3]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff ff3c 	bl	8014530 <u8g2_font_draw_glyph>
 80146b8:	4603      	mov	r3, r0
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3708      	adds	r7, #8
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop

080146c4 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b086      	sub	sp, #24
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	607b      	str	r3, [r7, #4]
 80146ce:	460b      	mov	r3, r1
 80146d0:	72fb      	strb	r3, [r7, #11]
 80146d2:	4613      	mov	r3, r2
 80146d4:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80146d6:	68f8      	ldr	r0, [r7, #12]
 80146d8:	f001 fb42 	bl	8015d60 <u8x8_utf8_init>
  sum = 0;
 80146dc:	2300      	movs	r3, #0
 80146de:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	687a      	ldr	r2, [r7, #4]
 80146e6:	7812      	ldrb	r2, [r2, #0]
 80146e8:	4611      	mov	r1, r2
 80146ea:	68f8      	ldr	r0, [r7, #12]
 80146ec:	4798      	blx	r3
 80146ee:	4603      	mov	r3, r0
 80146f0:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80146f2:	8abb      	ldrh	r3, [r7, #20]
 80146f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146f8:	4293      	cmp	r3, r2
 80146fa:	d038      	beq.n	801476e <u8g2_draw_string+0xaa>
      break;
    str++;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	3301      	adds	r3, #1
 8014700:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8014702:	8abb      	ldrh	r3, [r7, #20]
 8014704:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014708:	4293      	cmp	r3, r2
 801470a:	d0e9      	beq.n	80146e0 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 801470c:	8abb      	ldrh	r3, [r7, #20]
 801470e:	7aba      	ldrb	r2, [r7, #10]
 8014710:	7af9      	ldrb	r1, [r7, #11]
 8014712:	68f8      	ldr	r0, [r7, #12]
 8014714:	f7ff ff84 	bl	8014620 <u8g2_DrawGlyph>
 8014718:	4603      	mov	r3, r0
 801471a:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014722:	2b03      	cmp	r3, #3
 8014724:	d81e      	bhi.n	8014764 <u8g2_draw_string+0xa0>
 8014726:	a201      	add	r2, pc, #4	; (adr r2, 801472c <u8g2_draw_string+0x68>)
 8014728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801472c:	0801473d 	.word	0x0801473d
 8014730:	08014747 	.word	0x08014747
 8014734:	08014751 	.word	0x08014751
 8014738:	0801475b 	.word	0x0801475b
      {
	case 0:
	  x += delta;
 801473c:	7afa      	ldrb	r2, [r7, #11]
 801473e:	7cfb      	ldrb	r3, [r7, #19]
 8014740:	4413      	add	r3, r2
 8014742:	72fb      	strb	r3, [r7, #11]
	  break;
 8014744:	e00e      	b.n	8014764 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8014746:	7aba      	ldrb	r2, [r7, #10]
 8014748:	7cfb      	ldrb	r3, [r7, #19]
 801474a:	4413      	add	r3, r2
 801474c:	72bb      	strb	r3, [r7, #10]
	  break;
 801474e:	e009      	b.n	8014764 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8014750:	7afa      	ldrb	r2, [r7, #11]
 8014752:	7cfb      	ldrb	r3, [r7, #19]
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	72fb      	strb	r3, [r7, #11]
	  break;
 8014758:	e004      	b.n	8014764 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 801475a:	7aba      	ldrb	r2, [r7, #10]
 801475c:	7cfb      	ldrb	r3, [r7, #19]
 801475e:	1ad3      	subs	r3, r2, r3
 8014760:	72bb      	strb	r3, [r7, #10]
	  break;
 8014762:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8014764:	7dfa      	ldrb	r2, [r7, #23]
 8014766:	7cfb      	ldrb	r3, [r7, #19]
 8014768:	4413      	add	r3, r2
 801476a:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 801476c:	e7b8      	b.n	80146e0 <u8g2_draw_string+0x1c>
      break;
 801476e:	bf00      	nop
    }
  }
  return sum;
 8014770:	7dfb      	ldrb	r3, [r7, #23]
}
 8014772:	4618      	mov	r0, r3
 8014774:	3718      	adds	r7, #24
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop

0801477c <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	60f8      	str	r0, [r7, #12]
 8014784:	607b      	str	r3, [r7, #4]
 8014786:	460b      	mov	r3, r1
 8014788:	72fb      	strb	r3, [r7, #11]
 801478a:	4613      	mov	r3, r2
 801478c:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	4a06      	ldr	r2, [pc, #24]	; (80147ac <u8g2_DrawStr+0x30>)
 8014792:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8014794:	7aba      	ldrb	r2, [r7, #10]
 8014796:	7af9      	ldrb	r1, [r7, #11]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	68f8      	ldr	r0, [r7, #12]
 801479c:	f7ff ff92 	bl	80146c4 <u8g2_draw_string>
 80147a0:	4603      	mov	r3, r0
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3710      	adds	r7, #16
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}
 80147aa:	bf00      	nop
 80147ac:	08015d7d 	.word	0x08015d7d

080147b0 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b084      	sub	sp, #16
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	60f8      	str	r0, [r7, #12]
 80147b8:	607b      	str	r3, [r7, #4]
 80147ba:	460b      	mov	r3, r1
 80147bc:	72fb      	strb	r3, [r7, #11]
 80147be:	4613      	mov	r3, r2
 80147c0:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	4a06      	ldr	r2, [pc, #24]	; (80147e0 <u8g2_DrawUTF8+0x30>)
 80147c6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80147c8:	7aba      	ldrb	r2, [r7, #10]
 80147ca:	7af9      	ldrb	r1, [r7, #11]
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	68f8      	ldr	r0, [r7, #12]
 80147d0:	f7ff ff78 	bl	80146c4 <u8g2_draw_string>
 80147d4:	4603      	mov	r3, r0
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	08015dab 	.word	0x08015dab

080147e4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80147e4:	b480      	push	{r7}
 80147e6:	b083      	sub	sp, #12
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d05d      	beq.n	80148b0 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014812:	2b00      	cmp	r3, #0
 8014814:	d04d      	beq.n	80148b2 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801481c:	2b01      	cmp	r3, #1
 801481e:	d11c      	bne.n	801485a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 801482c:	429a      	cmp	r2, r3
 801482e:	da05      	bge.n	801483c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8014848:	429a      	cmp	r2, r3
 801484a:	dd32      	ble.n	80148b2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8014858:	e02b      	b.n	80148b2 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8014860:	461a      	mov	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8014868:	4619      	mov	r1, r3
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014870:	440b      	add	r3, r1
 8014872:	429a      	cmp	r2, r3
 8014874:	da0d      	bge.n	8014892 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801487c:	b2da      	uxtb	r2, r3
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014884:	b2db      	uxtb	r3, r3
 8014886:	4413      	add	r3, r2
 8014888:	b2db      	uxtb	r3, r3
 801488a:	b25a      	sxtb	r2, r3
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801489e:	429a      	cmp	r2, r3
 80148a0:	dd07      	ble.n	80148b2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80148ae:	e000      	b.n	80148b2 <u8g2_UpdateRefHeight+0xce>
    return;
 80148b0:	bf00      	nop
  }  
}
 80148b2:	370c      	adds	r7, #12
 80148b4:	46bd      	mov	sp, r7
 80148b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ba:	4770      	bx	lr

080148bc <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80148bc:	b480      	push	{r7}
 80148be:	b083      	sub	sp, #12
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
  return 0;
 80148c4:	2300      	movs	r3, #0
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	370c      	adds	r7, #12
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr
	...

080148d4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80148d4:	b480      	push	{r7}
 80148d6:	b083      	sub	sp, #12
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	4a04      	ldr	r2, [pc, #16]	; (80148f0 <u8g2_SetFontPosBaseline+0x1c>)
 80148e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80148e2:	bf00      	nop
 80148e4:	370c      	adds	r7, #12
 80148e6:	46bd      	mov	sp, r7
 80148e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ec:	4770      	bx	lr
 80148ee:	bf00      	nop
 80148f0:	080148bd 	.word	0x080148bd

080148f4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
 80148fc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014902:	683a      	ldr	r2, [r7, #0]
 8014904:	429a      	cmp	r2, r3
 8014906:	d00b      	beq.n	8014920 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	683a      	ldr	r2, [r7, #0]
 801490c:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	3364      	adds	r3, #100	; 0x64
 8014912:	6839      	ldr	r1, [r7, #0]
 8014914:	4618      	mov	r0, r3
 8014916:	f7ff fa51 	bl	8013dbc <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f7ff ff62 	bl	80147e4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8014920:	bf00      	nop
 8014922:	3708      	adds	r7, #8
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b084      	sub	sp, #16
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
 8014930:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2200      	movs	r2, #0
 8014936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f001 fa10 	bl	8015d60 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8014940:	2300      	movs	r3, #0
 8014942:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8014944:	2300      	movs	r3, #0
 8014946:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	683a      	ldr	r2, [r7, #0]
 801494e:	7812      	ldrb	r2, [r2, #0]
 8014950:	4611      	mov	r1, r2
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	4798      	blx	r3
 8014956:	4603      	mov	r3, r0
 8014958:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 801495a:	89bb      	ldrh	r3, [r7, #12]
 801495c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014960:	4293      	cmp	r3, r2
 8014962:	d013      	beq.n	801498c <u8g2_string_width+0x64>
      break;
    str++;
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	3301      	adds	r3, #1
 8014968:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 801496a:	89bb      	ldrh	r3, [r7, #12]
 801496c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014970:	4293      	cmp	r3, r2
 8014972:	d0e9      	beq.n	8014948 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8014974:	89bb      	ldrh	r3, [r7, #12]
 8014976:	4619      	mov	r1, r3
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f7ff fe04 	bl	8014586 <u8g2_GetGlyphWidth>
 801497e:	4603      	mov	r3, r0
 8014980:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8014982:	7bfa      	ldrb	r2, [r7, #15]
 8014984:	7bbb      	ldrb	r3, [r7, #14]
 8014986:	4413      	add	r3, r2
 8014988:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 801498a:	e7dd      	b.n	8014948 <u8g2_string_width+0x20>
      break;
 801498c:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8014994:	2b00      	cmp	r3, #0
 8014996:	d011      	beq.n	80149bc <u8g2_string_width+0x94>
  {
    w -= dx;
 8014998:	7bfa      	ldrb	r2, [r7, #15]
 801499a:	7bbb      	ldrb	r3, [r7, #14]
 801499c:	1ad3      	subs	r3, r2, r3
 801499e:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80149a6:	b2da      	uxtb	r2, r3
 80149a8:	7bfb      	ldrb	r3, [r7, #15]
 80149aa:	4413      	add	r3, r2
 80149ac:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80149b4:	b2da      	uxtb	r2, r3
 80149b6:	7bfb      	ldrb	r3, [r7, #15]
 80149b8:	4413      	add	r3, r2
 80149ba:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 80149bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3710      	adds	r7, #16
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
	...

080149c8 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b082      	sub	sp, #8
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	4a05      	ldr	r2, [pc, #20]	; (80149ec <u8g2_GetUTF8Width+0x24>)
 80149d6:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 80149d8:	6839      	ldr	r1, [r7, #0]
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f7ff ffa4 	bl	8014928 <u8g2_string_width>
 80149e0:	4603      	mov	r3, r0
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	08015dab 	.word	0x08015dab

080149f0 <u8g2_SetFontDirection>:



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 80149f0:	b480      	push	{r7}
 80149f2:	b083      	sub	sp, #12
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	460b      	mov	r3, r1
 80149fa:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	78fa      	ldrb	r2, [r7, #3]
 8014a00:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8014a04:	bf00      	nop
 8014a06:	370c      	adds	r7, #12
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr

08014a10 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8014a10:	b480      	push	{r7}
 8014a12:	b087      	sub	sp, #28
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	60f8      	str	r0, [r7, #12]
 8014a18:	60b9      	str	r1, [r7, #8]
 8014a1a:	4611      	mov	r1, r2
 8014a1c:	461a      	mov	r2, r3
 8014a1e:	460b      	mov	r3, r1
 8014a20:	71fb      	strb	r3, [r7, #7]
 8014a22:	4613      	mov	r3, r2
 8014a24:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8014a2c:	7dfb      	ldrb	r3, [r7, #23]
 8014a2e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	781a      	ldrb	r2, [r3, #0]
 8014a34:	7dbb      	ldrb	r3, [r7, #22]
 8014a36:	4413      	add	r3, r2
 8014a38:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8014a3a:	7dfa      	ldrb	r2, [r7, #23]
 8014a3c:	7dbb      	ldrb	r3, [r7, #22]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d90b      	bls.n	8014a5a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8014a42:	7dfa      	ldrb	r2, [r7, #23]
 8014a44:	79bb      	ldrb	r3, [r7, #6]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d205      	bcs.n	8014a56 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8014a4a:	79bb      	ldrb	r3, [r7, #6]
 8014a4c:	75bb      	strb	r3, [r7, #22]
      b--;
 8014a4e:	7dbb      	ldrb	r3, [r7, #22]
 8014a50:	3b01      	subs	r3, #1
 8014a52:	75bb      	strb	r3, [r7, #22]
 8014a54:	e001      	b.n	8014a5a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8014a56:	79fb      	ldrb	r3, [r7, #7]
 8014a58:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8014a5a:	7dfa      	ldrb	r2, [r7, #23]
 8014a5c:	79bb      	ldrb	r3, [r7, #6]
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d301      	bcc.n	8014a66 <u8g2_clip_intersection2+0x56>
    return 0;
 8014a62:	2300      	movs	r3, #0
 8014a64:	e01c      	b.n	8014aa0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8014a66:	7dba      	ldrb	r2, [r7, #22]
 8014a68:	79fb      	ldrb	r3, [r7, #7]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d801      	bhi.n	8014a72 <u8g2_clip_intersection2+0x62>
    return 0;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	e016      	b.n	8014aa0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8014a72:	7dfa      	ldrb	r2, [r7, #23]
 8014a74:	79fb      	ldrb	r3, [r7, #7]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d201      	bcs.n	8014a7e <u8g2_clip_intersection2+0x6e>
    a = c;
 8014a7a:	79fb      	ldrb	r3, [r7, #7]
 8014a7c:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8014a7e:	7dba      	ldrb	r2, [r7, #22]
 8014a80:	79bb      	ldrb	r3, [r7, #6]
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d901      	bls.n	8014a8a <u8g2_clip_intersection2+0x7a>
    b = d;
 8014a86:	79bb      	ldrb	r3, [r7, #6]
 8014a88:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	7dfa      	ldrb	r2, [r7, #23]
 8014a8e:	701a      	strb	r2, [r3, #0]
  b -= a;
 8014a90:	7dba      	ldrb	r2, [r7, #22]
 8014a92:	7dfb      	ldrb	r3, [r7, #23]
 8014a94:	1ad3      	subs	r3, r2, r3
 8014a96:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	7dba      	ldrb	r2, [r7, #22]
 8014a9c:	701a      	strb	r2, [r3, #0]
  return 1;
 8014a9e:	2301      	movs	r3, #1
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	371c      	adds	r7, #28
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aaa:	4770      	bx	lr

08014aac <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8014aac:	b590      	push	{r4, r7, lr}
 8014aae:	b085      	sub	sp, #20
 8014ab0:	af02      	add	r7, sp, #8
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	4608      	mov	r0, r1
 8014ab6:	4611      	mov	r1, r2
 8014ab8:	461a      	mov	r2, r3
 8014aba:	4603      	mov	r3, r0
 8014abc:	70fb      	strb	r3, [r7, #3]
 8014abe:	460b      	mov	r3, r1
 8014ac0:	70bb      	strb	r3, [r7, #2]
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014acc:	78ba      	ldrb	r2, [r7, #2]
 8014ace:	1ad3      	subs	r3, r2, r3
 8014ad0:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8014ad6:	7878      	ldrb	r0, [r7, #1]
 8014ad8:	78ba      	ldrb	r2, [r7, #2]
 8014ada:	78f9      	ldrb	r1, [r7, #3]
 8014adc:	7e3b      	ldrb	r3, [r7, #24]
 8014ade:	9300      	str	r3, [sp, #0]
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	47a0      	blx	r4
}
 8014ae6:	bf00      	nop
 8014ae8:	370c      	adds	r7, #12
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd90      	pop	{r4, r7, pc}

08014aee <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8014aee:	b590      	push	{r4, r7, lr}
 8014af0:	b085      	sub	sp, #20
 8014af2:	af02      	add	r7, sp, #8
 8014af4:	6078      	str	r0, [r7, #4]
 8014af6:	4608      	mov	r0, r1
 8014af8:	4611      	mov	r1, r2
 8014afa:	461a      	mov	r2, r3
 8014afc:	4603      	mov	r3, r0
 8014afe:	70fb      	strb	r3, [r7, #3]
 8014b00:	460b      	mov	r3, r1
 8014b02:	70bb      	strb	r3, [r7, #2]
 8014b04:	4613      	mov	r3, r2
 8014b06:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d06d      	beq.n	8014bee <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8014b12:	787b      	ldrb	r3, [r7, #1]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d06a      	beq.n	8014bee <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8014b18:	787b      	ldrb	r3, [r7, #1]
 8014b1a:	2b01      	cmp	r3, #1
 8014b1c:	d918      	bls.n	8014b50 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8014b1e:	7e3b      	ldrb	r3, [r7, #24]
 8014b20:	2b02      	cmp	r3, #2
 8014b22:	d109      	bne.n	8014b38 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8014b24:	78fa      	ldrb	r2, [r7, #3]
 8014b26:	787b      	ldrb	r3, [r7, #1]
 8014b28:	1ad3      	subs	r3, r2, r3
 8014b2a:	b2db      	uxtb	r3, r3
 8014b2c:	70fb      	strb	r3, [r7, #3]
	  x++;
 8014b2e:	78fb      	ldrb	r3, [r7, #3]
 8014b30:	3301      	adds	r3, #1
 8014b32:	b2db      	uxtb	r3, r3
 8014b34:	70fb      	strb	r3, [r7, #3]
 8014b36:	e00b      	b.n	8014b50 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8014b38:	7e3b      	ldrb	r3, [r7, #24]
 8014b3a:	2b03      	cmp	r3, #3
 8014b3c:	d108      	bne.n	8014b50 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8014b3e:	78ba      	ldrb	r2, [r7, #2]
 8014b40:	787b      	ldrb	r3, [r7, #1]
 8014b42:	1ad3      	subs	r3, r2, r3
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	70bb      	strb	r3, [r7, #2]
	  y++;
 8014b48:	78bb      	ldrb	r3, [r7, #2]
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	b2db      	uxtb	r3, r3
 8014b4e:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8014b50:	7e3b      	ldrb	r3, [r7, #24]
 8014b52:	f003 0301 	and.w	r3, r3, #1
 8014b56:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8014b58:	7e3b      	ldrb	r3, [r7, #24]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d119      	bne.n	8014b92 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8014b64:	78bb      	ldrb	r3, [r7, #2]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d838      	bhi.n	8014bdc <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014b70:	78bb      	ldrb	r3, [r7, #2]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d934      	bls.n	8014be0 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014b82:	1c79      	adds	r1, r7, #1
 8014b84:	1cf8      	adds	r0, r7, #3
 8014b86:	f7ff ff43 	bl	8014a10 <u8g2_clip_intersection2>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d119      	bne.n	8014bc4 <u8g2_DrawHVLine+0xd6>
	  return;
 8014b90:	e02d      	b.n	8014bee <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8014b98:	78fb      	ldrb	r3, [r7, #3]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d822      	bhi.n	8014be4 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8014ba4:	78fb      	ldrb	r3, [r7, #3]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d91e      	bls.n	8014be8 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014bb6:	1c79      	adds	r1, r7, #1
 8014bb8:	1cb8      	adds	r0, r7, #2
 8014bba:	f7ff ff29 	bl	8014a10 <u8g2_clip_intersection2>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d013      	beq.n	8014bec <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bc8:	689c      	ldr	r4, [r3, #8]
 8014bca:	78f9      	ldrb	r1, [r7, #3]
 8014bcc:	78ba      	ldrb	r2, [r7, #2]
 8014bce:	7878      	ldrb	r0, [r7, #1]
 8014bd0:	7e3b      	ldrb	r3, [r7, #24]
 8014bd2:	9300      	str	r3, [sp, #0]
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	47a0      	blx	r4
 8014bda:	e008      	b.n	8014bee <u8g2_DrawHVLine+0x100>
	  return;
 8014bdc:	bf00      	nop
 8014bde:	e006      	b.n	8014bee <u8g2_DrawHVLine+0x100>
	  return;
 8014be0:	bf00      	nop
 8014be2:	e004      	b.n	8014bee <u8g2_DrawHVLine+0x100>
	  return;
 8014be4:	bf00      	nop
 8014be6:	e002      	b.n	8014bee <u8g2_DrawHVLine+0x100>
	  return;
 8014be8:	bf00      	nop
 8014bea:	e000      	b.n	8014bee <u8g2_DrawHVLine+0x100>
	  return;
 8014bec:	bf00      	nop
    }
}
 8014bee:	370c      	adds	r7, #12
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd90      	pop	{r4, r7, pc}

08014bf4 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b084      	sub	sp, #16
 8014bf8:	af02      	add	r7, sp, #8
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	4608      	mov	r0, r1
 8014bfe:	4611      	mov	r1, r2
 8014c00:	461a      	mov	r2, r3
 8014c02:	4603      	mov	r3, r0
 8014c04:	70fb      	strb	r3, [r7, #3]
 8014c06:	460b      	mov	r3, r1
 8014c08:	70bb      	strb	r3, [r7, #2]
 8014c0a:	4613      	mov	r3, r2
 8014c0c:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8014c0e:	7878      	ldrb	r0, [r7, #1]
 8014c10:	78ba      	ldrb	r2, [r7, #2]
 8014c12:	78f9      	ldrb	r1, [r7, #3]
 8014c14:	2300      	movs	r3, #0
 8014c16:	9300      	str	r3, [sp, #0]
 8014c18:	4603      	mov	r3, r0
 8014c1a:	6878      	ldr	r0, [r7, #4]
 8014c1c:	f7ff ff67 	bl	8014aee <u8g2_DrawHVLine>
}
 8014c20:	bf00      	nop
 8014c22:	3708      	adds	r7, #8
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}

08014c28 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b084      	sub	sp, #16
 8014c2c:	af02      	add	r7, sp, #8
 8014c2e:	6078      	str	r0, [r7, #4]
 8014c30:	460b      	mov	r3, r1
 8014c32:	70fb      	strb	r3, [r7, #3]
 8014c34:	4613      	mov	r3, r2
 8014c36:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c3e:	78ba      	ldrb	r2, [r7, #2]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d31a      	bcc.n	8014c7a <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c4a:	78ba      	ldrb	r2, [r7, #2]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d216      	bcs.n	8014c7e <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014c56:	78fa      	ldrb	r2, [r7, #3]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d312      	bcc.n	8014c82 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014c62:	78fa      	ldrb	r2, [r7, #3]
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d20e      	bcs.n	8014c86 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8014c68:	78ba      	ldrb	r2, [r7, #2]
 8014c6a:	78f9      	ldrb	r1, [r7, #3]
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	9300      	str	r3, [sp, #0]
 8014c70:	2301      	movs	r3, #1
 8014c72:	6878      	ldr	r0, [r7, #4]
 8014c74:	f7ff ff3b 	bl	8014aee <u8g2_DrawHVLine>
 8014c78:	e006      	b.n	8014c88 <u8g2_DrawPixel+0x60>
    return;
 8014c7a:	bf00      	nop
 8014c7c:	e004      	b.n	8014c88 <u8g2_DrawPixel+0x60>
    return;
 8014c7e:	bf00      	nop
 8014c80:	e002      	b.n	8014c88 <u8g2_DrawPixel+0x60>
    return;
 8014c82:	bf00      	nop
 8014c84:	e000      	b.n	8014c88 <u8g2_DrawPixel+0x60>
    return;
 8014c86:	bf00      	nop
}
 8014c88:	3708      	adds	r7, #8
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}

08014c8e <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8014c8e:	b480      	push	{r7}
 8014c90:	b083      	sub	sp, #12
 8014c92:	af00      	add	r7, sp, #0
 8014c94:	6078      	str	r0, [r7, #4]
 8014c96:	460b      	mov	r3, r1
 8014c98:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	78fa      	ldrb	r2, [r7, #3]
 8014c9e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8014ca2:	78fb      	ldrb	r3, [r7, #3]
 8014ca4:	2b02      	cmp	r3, #2
 8014ca6:	d903      	bls.n	8014cb0 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2201      	movs	r2, #1
 8014cac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8014cb0:	bf00      	nop
 8014cb2:	370c      	adds	r7, #12
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cba:	4770      	bx	lr

08014cbc <u8g2_UserInterfaceInputValue32>:
  //return r;  
}


uint32_t u8g2_UserInterfaceInputValue32(u8g2_t *u8g2, const char *title, const char *pre, uint32_t *value, uint32_t lo, uint32_t hi, uint8_t digits, const char *post)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b08a      	sub	sp, #40	; 0x28
 8014cc0:	af02      	add	r7, sp, #8
 8014cc2:	60f8      	str	r0, [r7, #12]
 8014cc4:	60b9      	str	r1, [r7, #8]
 8014cc6:	607a      	str	r2, [r7, #4]
 8014cc8:	603b      	str	r3, [r7, #0]
  u8g2_uint_t pixel_height;
  u8g2_uint_t  y, yy;
  u8g2_uint_t  pixel_width;
  u8g2_uint_t  x, xx;

  uint8_t multiplier = 1;
 8014cca:	2301      	movs	r3, #1
 8014ccc:	777b      	strb	r3, [r7, #29]


  uint32_t local_value = *value;
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	61bb      	str	r3, [r7, #24]
  //uint8_t r; /* not used ??? */
  uint8_t event;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8014cd4:	2100      	movs	r1, #0
 8014cd6:	68f8      	ldr	r0, [r7, #12]
 8014cd8:	f7ff fe8a 	bl	80149f0 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 8014cdc:	68f8      	ldr	r0, [r7, #12]
 8014cde:	f7ff fdf9 	bl	80148d4 <u8g2_SetFontPosBaseline>

  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8014ce8:	75fb      	strb	r3, [r7, #23]
  line_height -= u8g2_GetDescent(u8g2);
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8014cf0:	b2db      	uxtb	r3, r3
 8014cf2:	7dfa      	ldrb	r2, [r7, #23]
 8014cf4:	1ad3      	subs	r3, r2, r3
 8014cf6:	75fb      	strb	r3, [r7, #23]


  /* calculate overall height of the input value box */
  height = 1;	/* value input line */
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	75bb      	strb	r3, [r7, #22]
  height += u8x8_GetStringLineCnt(title);
 8014cfc:	68b8      	ldr	r0, [r7, #8]
 8014cfe:	f001 fcbe 	bl	801667e <u8x8_GetStringLineCnt>
 8014d02:	4603      	mov	r3, r0
 8014d04:	461a      	mov	r2, r3
 8014d06:	7dbb      	ldrb	r3, [r7, #22]
 8014d08:	4413      	add	r3, r2
 8014d0a:	75bb      	strb	r3, [r7, #22]

  /* calculate the height in pixel */
  pixel_height = height;
 8014d0c:	7dbb      	ldrb	r3, [r7, #22]
 8014d0e:	757b      	strb	r3, [r7, #21]
  pixel_height *= line_height;
 8014d10:	7d7a      	ldrb	r2, [r7, #21]
 8014d12:	7dfb      	ldrb	r3, [r7, #23]
 8014d14:	fb12 f303 	smulbb	r3, r2, r3
 8014d18:	757b      	strb	r3, [r7, #21]


  /* calculate offset from top */
  y = 0;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	77fb      	strb	r3, [r7, #31]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)  )
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014d24:	7d7a      	ldrb	r2, [r7, #21]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d20a      	bcs.n	8014d40 <u8g2_UserInterfaceInputValue32+0x84>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014d30:	77fb      	strb	r3, [r7, #31]
    y -= pixel_height;
 8014d32:	7ffa      	ldrb	r2, [r7, #31]
 8014d34:	7d7b      	ldrb	r3, [r7, #21]
 8014d36:	1ad3      	subs	r3, r2, r3
 8014d38:	77fb      	strb	r3, [r7, #31]
    y /= 2;
 8014d3a:	7ffb      	ldrb	r3, [r7, #31]
 8014d3c:	085b      	lsrs	r3, r3, #1
 8014d3e:	77fb      	strb	r3, [r7, #31]
  }

  /* calculate offset from left for the label */
  x = 0;
 8014d40:	2300      	movs	r3, #0
 8014d42:	77bb      	strb	r3, [r7, #30]
  pixel_width = u8g2_GetUTF8Width(u8g2, pre);
 8014d44:	6879      	ldr	r1, [r7, #4]
 8014d46:	68f8      	ldr	r0, [r7, #12]
 8014d48:	f7ff fe3e 	bl	80149c8 <u8g2_GetUTF8Width>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, " ");
 8014d50:	49a0      	ldr	r1, [pc, #640]	; (8014fd4 <u8g2_UserInterfaceInputValue32+0x318>)
 8014d52:	68f8      	ldr	r0, [r7, #12]
 8014d54:	f7ff fe38 	bl	80149c8 <u8g2_GetUTF8Width>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	7d3b      	ldrb	r3, [r7, #20]
 8014d5e:	4413      	add	r3, r2
 8014d60:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 8014d62:	499d      	ldr	r1, [pc, #628]	; (8014fd8 <u8g2_UserInterfaceInputValue32+0x31c>)
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	f7ff fe2f 	bl	80149c8 <u8g2_GetUTF8Width>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	7d3b      	ldrb	r3, [r7, #20]
 8014d70:	4413      	add	r3, r2
 8014d72:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * 3;
 8014d74:	4999      	ldr	r1, [pc, #612]	; (8014fdc <u8g2_UserInterfaceInputValue32+0x320>)
 8014d76:	68f8      	ldr	r0, [r7, #12]
 8014d78:	f7ff fe26 	bl	80149c8 <u8g2_GetUTF8Width>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	461a      	mov	r2, r3
 8014d80:	4613      	mov	r3, r2
 8014d82:	005b      	lsls	r3, r3, #1
 8014d84:	4413      	add	r3, r2
 8014d86:	b2da      	uxtb	r2, r3
 8014d88:	7d3b      	ldrb	r3, [r7, #20]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 8014d8e:	4992      	ldr	r1, [pc, #584]	; (8014fd8 <u8g2_UserInterfaceInputValue32+0x31c>)
 8014d90:	68f8      	ldr	r0, [r7, #12]
 8014d92:	f7ff fe19 	bl	80149c8 <u8g2_GetUTF8Width>
 8014d96:	4603      	mov	r3, r0
 8014d98:	461a      	mov	r2, r3
 8014d9a:	7d3b      	ldrb	r3, [r7, #20]
 8014d9c:	4413      	add	r3, r2
 8014d9e:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
 8014da0:	498e      	ldr	r1, [pc, #568]	; (8014fdc <u8g2_UserInterfaceInputValue32+0x320>)
 8014da2:	68f8      	ldr	r0, [r7, #12]
 8014da4:	f7ff fe10 	bl	80149c8 <u8g2_GetUTF8Width>
 8014da8:	4603      	mov	r3, r0
 8014daa:	461a      	mov	r2, r3
 8014dac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014db0:	fb03 f302 	mul.w	r3, r3, r2
 8014db4:	b2da      	uxtb	r2, r3
 8014db6:	7d3b      	ldrb	r3, [r7, #20]
 8014db8:	4413      	add	r3, r2
 8014dba:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 8014dbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014dbe:	68f8      	ldr	r0, [r7, #12]
 8014dc0:	f7ff fe02 	bl	80149c8 <u8g2_GetUTF8Width>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	461a      	mov	r2, r3
 8014dc8:	7d3b      	ldrb	r3, [r7, #20]
 8014dca:	4413      	add	r3, r2
 8014dcc:	753b      	strb	r3, [r7, #20]
  if ( pixel_width < u8g2_GetDisplayWidth(u8g2) )
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014dd4:	7d3a      	ldrb	r2, [r7, #20]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d20a      	bcs.n	8014df0 <u8g2_UserInterfaceInputValue32+0x134>
  {
    x = u8g2_GetDisplayWidth(u8g2);
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014de0:	77bb      	strb	r3, [r7, #30]
    x -= pixel_width;
 8014de2:	7fba      	ldrb	r2, [r7, #30]
 8014de4:	7d3b      	ldrb	r3, [r7, #20]
 8014de6:	1ad3      	subs	r3, r2, r3
 8014de8:	77bb      	strb	r3, [r7, #30]
    x /= 2;
 8014dea:	7fbb      	ldrb	r3, [r7, #30]
 8014dec:	085b      	lsrs	r3, r3, #1
 8014dee:	77bb      	strb	r3, [r7, #30]
  }

  /* event loop */
  for(;;)
  {
    u8g2_FirstPage(u8g2);
 8014df0:	68f8      	ldr	r0, [r7, #12]
 8014df2:	f7fe ff17 	bl	8013c24 <u8g2_FirstPage>
    do
    {
      /* render */
      yy = y;
 8014df6:	7ffb      	ldrb	r3, [r7, #31]
 8014df8:	74fb      	strb	r3, [r7, #19]
      yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8014e00:	7cfa      	ldrb	r2, [r7, #19]
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	9301      	str	r3, [sp, #4]
 8014e06:	7dfb      	ldrb	r3, [r7, #23]
 8014e08:	9300      	str	r3, [sp, #0]
 8014e0a:	460b      	mov	r3, r1
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	68f8      	ldr	r0, [r7, #12]
 8014e10:	f000 fc71 	bl	80156f6 <u8g2_DrawUTF8Lines>
 8014e14:	4603      	mov	r3, r0
 8014e16:	461a      	mov	r2, r3
 8014e18:	7cfb      	ldrb	r3, [r7, #19]
 8014e1a:	4413      	add	r3, r2
 8014e1c:	74fb      	strb	r3, [r7, #19]
      xx = x;
 8014e1e:	7fbb      	ldrb	r3, [r7, #30]
 8014e20:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 8014e22:	7cfa      	ldrb	r2, [r7, #19]
 8014e24:	7cb9      	ldrb	r1, [r7, #18]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f7ff fcc1 	bl	80147b0 <u8g2_DrawUTF8>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	461a      	mov	r2, r3
 8014e32:	7cbb      	ldrb	r3, [r7, #18]
 8014e34:	4413      	add	r3, r2
 8014e36:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 8014e38:	7cfa      	ldrb	r2, [r7, #19]
 8014e3a:	7cb9      	ldrb	r1, [r7, #18]
 8014e3c:	4b65      	ldr	r3, [pc, #404]	; (8014fd4 <u8g2_UserInterfaceInputValue32+0x318>)
 8014e3e:	68f8      	ldr	r0, [r7, #12]
 8014e40:	f7ff fcb6 	bl	80147b0 <u8g2_DrawUTF8>
 8014e44:	4603      	mov	r3, r0
 8014e46:	461a      	mov	r2, r3
 8014e48:	7cbb      	ldrb	r3, [r7, #18]
 8014e4a:	4413      	add	r3, r2
 8014e4c:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, "x");
 8014e4e:	7cfa      	ldrb	r2, [r7, #19]
 8014e50:	7cb9      	ldrb	r1, [r7, #18]
 8014e52:	4b61      	ldr	r3, [pc, #388]	; (8014fd8 <u8g2_UserInterfaceInputValue32+0x31c>)
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f7ff fcab 	bl	80147b0 <u8g2_DrawUTF8>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	7cbb      	ldrb	r3, [r7, #18]
 8014e60:	4413      	add	r3, r2
 8014e62:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(multiplier, 3));
 8014e64:	7f7b      	ldrb	r3, [r7, #29]
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	2103      	movs	r1, #3
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f001 fc8e 	bl	801678c <u8x8_u16toa>
 8014e70:	4603      	mov	r3, r0
 8014e72:	7cfa      	ldrb	r2, [r7, #19]
 8014e74:	7cb9      	ldrb	r1, [r7, #18]
 8014e76:	68f8      	ldr	r0, [r7, #12]
 8014e78:	f7ff fc9a 	bl	80147b0 <u8g2_DrawUTF8>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	461a      	mov	r2, r3
 8014e80:	7cbb      	ldrb	r3, [r7, #18]
 8014e82:	4413      	add	r3, r2
 8014e84:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 8014e86:	7cfa      	ldrb	r2, [r7, #19]
 8014e88:	7cb9      	ldrb	r1, [r7, #18]
 8014e8a:	4b52      	ldr	r3, [pc, #328]	; (8014fd4 <u8g2_UserInterfaceInputValue32+0x318>)
 8014e8c:	68f8      	ldr	r0, [r7, #12]
 8014e8e:	f7ff fc8f 	bl	80147b0 <u8g2_DrawUTF8>
 8014e92:	4603      	mov	r3, r0
 8014e94:	461a      	mov	r2, r3
 8014e96:	7cbb      	ldrb	r3, [r7, #18]
 8014e98:	4413      	add	r3, r2
 8014e9a:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(local_value, digits));
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8014ea4:	4611      	mov	r1, r2
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f001 fc70 	bl	801678c <u8x8_u16toa>
 8014eac:	4603      	mov	r3, r0
 8014eae:	7cfa      	ldrb	r2, [r7, #19]
 8014eb0:	7cb9      	ldrb	r1, [r7, #18]
 8014eb2:	68f8      	ldr	r0, [r7, #12]
 8014eb4:	f7ff fc7c 	bl	80147b0 <u8g2_DrawUTF8>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	461a      	mov	r2, r3
 8014ebc:	7cbb      	ldrb	r3, [r7, #18]
 8014ebe:	4413      	add	r3, r2
 8014ec0:	74bb      	strb	r3, [r7, #18]
      u8g2_DrawUTF8(u8g2, xx, yy, post);
 8014ec2:	7cfa      	ldrb	r2, [r7, #19]
 8014ec4:	7cb9      	ldrb	r1, [r7, #18]
 8014ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f7ff fc71 	bl	80147b0 <u8g2_DrawUTF8>
    } while( u8g2_NextPage(u8g2) );
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	f7fe febc 	bl	8013c4c <u8g2_NextPage>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d18d      	bne.n	8014df6 <u8g2_UserInterfaceInputValue32+0x13a>
      return 0;
#endif

    for(;;)
    {
      event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 8014eda:	68f8      	ldr	r0, [r7, #12]
 8014edc:	f7ef fc8e 	bl	80047fc <u8x8_GetMenuEvent>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	747b      	strb	r3, [r7, #17]
      if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8014ee4:	7c7b      	ldrb	r3, [r7, #17]
 8014ee6:	2b50      	cmp	r3, #80	; 0x50
 8014ee8:	d106      	bne.n	8014ef8 <u8g2_UserInterfaceInputValue32+0x23c>
      {
    	  *value = local_value;
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	69ba      	ldr	r2, [r7, #24]
 8014eee:	601a      	str	r2, [r3, #0]
    	  multiplier = 1;
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	777b      	strb	r3, [r7, #29]
    	  return 1;
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	e068      	b.n	8014fca <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8014ef8:	7c7b      	ldrb	r3, [r7, #17]
 8014efa:	2b53      	cmp	r3, #83	; 0x53
 8014efc:	d101      	bne.n	8014f02 <u8g2_UserInterfaceInputValue32+0x246>
      {
    	  return 0;
 8014efe:	2300      	movs	r3, #0
 8014f00:	e063      	b.n	8014fca <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_UP )
 8014f02:	7c7b      	ldrb	r3, [r7, #17]
 8014f04:	2b54      	cmp	r3, #84	; 0x54
 8014f06:	d10b      	bne.n	8014f20 <u8g2_UserInterfaceInputValue32+0x264>
      {
    	  if ( local_value >= hi )
 8014f08:	69ba      	ldr	r2, [r7, #24]
 8014f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	d302      	bcc.n	8014f16 <u8g2_UserInterfaceInputValue32+0x25a>
    		  local_value = lo;
 8014f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f12:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value + 1*multiplier;
    	  break;
 8014f14:	e058      	b.n	8014fc8 <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value + 1*multiplier;
 8014f16:	7f7b      	ldrb	r3, [r7, #29]
 8014f18:	69ba      	ldr	r2, [r7, #24]
 8014f1a:	4413      	add	r3, r2
 8014f1c:	61bb      	str	r3, [r7, #24]
    	  break;
 8014f1e:	e053      	b.n	8014fc8 <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_DOWN )
 8014f20:	7c7b      	ldrb	r3, [r7, #17]
 8014f22:	2b55      	cmp	r3, #85	; 0x55
 8014f24:	d10b      	bne.n	8014f3e <u8g2_UserInterfaceInputValue32+0x282>
      {
    	  if ( local_value <= lo )
 8014f26:	69ba      	ldr	r2, [r7, #24]
 8014f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d802      	bhi.n	8014f34 <u8g2_UserInterfaceInputValue32+0x278>
    		  local_value = hi;
 8014f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f30:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value - 1*multiplier;
    	  break;
 8014f32:	e049      	b.n	8014fc8 <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value - 1*multiplier;
 8014f34:	7f7b      	ldrb	r3, [r7, #29]
 8014f36:	69ba      	ldr	r2, [r7, #24]
 8014f38:	1ad3      	subs	r3, r2, r3
 8014f3a:	61bb      	str	r3, [r7, #24]
    	  break;
 8014f3c:	e044      	b.n	8014fc8 <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_NEXT )
 8014f3e:	7c7b      	ldrb	r3, [r7, #17]
 8014f40:	2b51      	cmp	r3, #81	; 0x51
 8014f42:	d11d      	bne.n	8014f80 <u8g2_UserInterfaceInputValue32+0x2c4>
    	  if(multiplier >50)
    		  multiplier = 10;
    		*/
    	  //multiplier = multiplier%3 + 1;

    	  if(multiplier == 1)
 8014f44:	7f7b      	ldrb	r3, [r7, #29]
 8014f46:	2b01      	cmp	r3, #1
 8014f48:	d102      	bne.n	8014f50 <u8g2_UserInterfaceInputValue32+0x294>
    		  multiplier = 5;
 8014f4a:	2305      	movs	r3, #5
 8014f4c:	777b      	strb	r3, [r7, #29]
    	  else if(multiplier == 50)
    		  multiplier = 100;
    	  else if(multiplier == 100)
    		  multiplier = 1;

    	  break;
 8014f4e:	e038      	b.n	8014fc2 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 5)
 8014f50:	7f7b      	ldrb	r3, [r7, #29]
 8014f52:	2b05      	cmp	r3, #5
 8014f54:	d102      	bne.n	8014f5c <u8g2_UserInterfaceInputValue32+0x2a0>
    		  multiplier = 10;
 8014f56:	230a      	movs	r3, #10
 8014f58:	777b      	strb	r3, [r7, #29]
    	  break;
 8014f5a:	e032      	b.n	8014fc2 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 10)
 8014f5c:	7f7b      	ldrb	r3, [r7, #29]
 8014f5e:	2b0a      	cmp	r3, #10
 8014f60:	d102      	bne.n	8014f68 <u8g2_UserInterfaceInputValue32+0x2ac>
    		  multiplier = 50;
 8014f62:	2332      	movs	r3, #50	; 0x32
 8014f64:	777b      	strb	r3, [r7, #29]
    	  break;
 8014f66:	e02c      	b.n	8014fc2 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 50)
 8014f68:	7f7b      	ldrb	r3, [r7, #29]
 8014f6a:	2b32      	cmp	r3, #50	; 0x32
 8014f6c:	d102      	bne.n	8014f74 <u8g2_UserInterfaceInputValue32+0x2b8>
    		  multiplier = 100;
 8014f6e:	2364      	movs	r3, #100	; 0x64
 8014f70:	777b      	strb	r3, [r7, #29]
    	  break;
 8014f72:	e026      	b.n	8014fc2 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 100)
 8014f74:	7f7b      	ldrb	r3, [r7, #29]
 8014f76:	2b64      	cmp	r3, #100	; 0x64
 8014f78:	d123      	bne.n	8014fc2 <u8g2_UserInterfaceInputValue32+0x306>
    		  multiplier = 1;
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	777b      	strb	r3, [r7, #29]
    	  break;
 8014f7e:	e020      	b.n	8014fc2 <u8g2_UserInterfaceInputValue32+0x306>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_PREV )
 8014f80:	7c7b      	ldrb	r3, [r7, #17]
 8014f82:	2b52      	cmp	r3, #82	; 0x52
 8014f84:	d1a9      	bne.n	8014eda <u8g2_UserInterfaceInputValue32+0x21e>
    		  //multiplier = 2;
    		 // multiplier = multiplier%3 + 1;
    	  }
    	  */

    	  if(multiplier == 1)
 8014f86:	7f7b      	ldrb	r3, [r7, #29]
 8014f88:	2b01      	cmp	r3, #1
 8014f8a:	d102      	bne.n	8014f92 <u8g2_UserInterfaceInputValue32+0x2d6>
    		  multiplier = 100;
 8014f8c:	2364      	movs	r3, #100	; 0x64
 8014f8e:	777b      	strb	r3, [r7, #29]
    	  /*
    	  multiplier -=10;
    	  if(multiplier <=0)
    		  multiplier = 50;
    		*/
    	  break;
 8014f90:	e019      	b.n	8014fc6 <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 5)
 8014f92:	7f7b      	ldrb	r3, [r7, #29]
 8014f94:	2b05      	cmp	r3, #5
 8014f96:	d102      	bne.n	8014f9e <u8g2_UserInterfaceInputValue32+0x2e2>
    		  multiplier = 1;
 8014f98:	2301      	movs	r3, #1
 8014f9a:	777b      	strb	r3, [r7, #29]
    	  break;
 8014f9c:	e013      	b.n	8014fc6 <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 10)
 8014f9e:	7f7b      	ldrb	r3, [r7, #29]
 8014fa0:	2b0a      	cmp	r3, #10
 8014fa2:	d102      	bne.n	8014faa <u8g2_UserInterfaceInputValue32+0x2ee>
    		  multiplier = 5;
 8014fa4:	2305      	movs	r3, #5
 8014fa6:	777b      	strb	r3, [r7, #29]
    	  break;
 8014fa8:	e00d      	b.n	8014fc6 <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 50)
 8014faa:	7f7b      	ldrb	r3, [r7, #29]
 8014fac:	2b32      	cmp	r3, #50	; 0x32
 8014fae:	d102      	bne.n	8014fb6 <u8g2_UserInterfaceInputValue32+0x2fa>
    		  multiplier = 10;
 8014fb0:	230a      	movs	r3, #10
 8014fb2:	777b      	strb	r3, [r7, #29]
    	  break;
 8014fb4:	e007      	b.n	8014fc6 <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 100)
 8014fb6:	7f7b      	ldrb	r3, [r7, #29]
 8014fb8:	2b64      	cmp	r3, #100	; 0x64
 8014fba:	d104      	bne.n	8014fc6 <u8g2_UserInterfaceInputValue32+0x30a>
    		  multiplier = 50;
 8014fbc:	2332      	movs	r3, #50	; 0x32
 8014fbe:	777b      	strb	r3, [r7, #29]
    	  break;
 8014fc0:	e001      	b.n	8014fc6 <u8g2_UserInterfaceInputValue32+0x30a>
    	  break;
 8014fc2:	bf00      	nop
 8014fc4:	e714      	b.n	8014df0 <u8g2_UserInterfaceInputValue32+0x134>
    	  break;
 8014fc6:	bf00      	nop
    u8g2_FirstPage(u8g2);
 8014fc8:	e712      	b.n	8014df0 <u8g2_UserInterfaceInputValue32+0x134>
    }
  }

  /* never reached */
  //return r;
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3720      	adds	r7, #32
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	08022828 	.word	0x08022828
 8014fd8:	0802282c 	.word	0x0802282c
 8014fdc:	08022824 	.word	0x08022824

08014fe0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8014fe0:	b490      	push	{r4, r7}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	4608      	mov	r0, r1
 8014fea:	4611      	mov	r1, r2
 8014fec:	461a      	mov	r2, r3
 8014fee:	4623      	mov	r3, r4
 8014ff0:	71fb      	strb	r3, [r7, #7]
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	71bb      	strb	r3, [r7, #6]
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	717b      	strb	r3, [r7, #5]
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8014ffe:	797a      	ldrb	r2, [r7, #5]
 8015000:	79bb      	ldrb	r3, [r7, #6]
 8015002:	429a      	cmp	r2, r3
 8015004:	d20d      	bcs.n	8015022 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8015006:	793a      	ldrb	r2, [r7, #4]
 8015008:	79fb      	ldrb	r3, [r7, #7]
 801500a:	429a      	cmp	r2, r3
 801500c:	d901      	bls.n	8015012 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 801500e:	2301      	movs	r3, #1
 8015010:	e014      	b.n	801503c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8015012:	797a      	ldrb	r2, [r7, #5]
 8015014:	793b      	ldrb	r3, [r7, #4]
 8015016:	429a      	cmp	r2, r3
 8015018:	d901      	bls.n	801501e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 801501a:	2301      	movs	r3, #1
 801501c:	e00e      	b.n	801503c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 801501e:	2300      	movs	r3, #0
 8015020:	e00c      	b.n	801503c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8015022:	793a      	ldrb	r2, [r7, #4]
 8015024:	79fb      	ldrb	r3, [r7, #7]
 8015026:	429a      	cmp	r2, r3
 8015028:	d907      	bls.n	801503a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 801502a:	797a      	ldrb	r2, [r7, #5]
 801502c:	793b      	ldrb	r3, [r7, #4]
 801502e:	429a      	cmp	r2, r3
 8015030:	d901      	bls.n	8015036 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8015032:	2301      	movs	r3, #1
 8015034:	e002      	b.n	801503c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015036:	2300      	movs	r3, #0
 8015038:	e000      	b.n	801503c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 801503a:	2300      	movs	r3, #0
    }
  }
}
 801503c:	4618      	mov	r0, r3
 801503e:	3708      	adds	r7, #8
 8015040:	46bd      	mov	sp, r7
 8015042:	bc90      	pop	{r4, r7}
 8015044:	4770      	bx	lr

08015046 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8015046:	b580      	push	{r7, lr}
 8015048:	b082      	sub	sp, #8
 801504a:	af00      	add	r7, sp, #0
 801504c:	6078      	str	r0, [r7, #4]
 801504e:	4608      	mov	r0, r1
 8015050:	4611      	mov	r1, r2
 8015052:	461a      	mov	r2, r3
 8015054:	4603      	mov	r3, r0
 8015056:	70fb      	strb	r3, [r7, #3]
 8015058:	460b      	mov	r3, r1
 801505a:	70bb      	strb	r3, [r7, #2]
 801505c:	4613      	mov	r3, r2
 801505e:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 801506c:	7c3b      	ldrb	r3, [r7, #16]
 801506e:	78ba      	ldrb	r2, [r7, #2]
 8015070:	f7ff ffb6 	bl	8014fe0 <u8g2_is_intersection_decision_tree>
 8015074:	4603      	mov	r3, r0
 8015076:	2b00      	cmp	r3, #0
 8015078:	d101      	bne.n	801507e <u8g2_IsIntersection+0x38>
    return 0; 
 801507a:	2300      	movs	r3, #0
 801507c:	e00a      	b.n	8015094 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 801508a:	787b      	ldrb	r3, [r7, #1]
 801508c:	78fa      	ldrb	r2, [r7, #3]
 801508e:	f7ff ffa7 	bl	8014fe0 <u8g2_is_intersection_decision_tree>
 8015092:	4603      	mov	r3, r0
}
 8015094:	4618      	mov	r0, r3
 8015096:	3708      	adds	r7, #8
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	4608      	mov	r0, r1
 80150a6:	4611      	mov	r1, r2
 80150a8:	461a      	mov	r2, r3
 80150aa:	4603      	mov	r3, r0
 80150ac:	70fb      	strb	r3, [r7, #3]
 80150ae:	460b      	mov	r3, r1
 80150b0:	70bb      	strb	r3, [r7, #2]
 80150b2:	4613      	mov	r3, r2
 80150b4:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 80150b6:	2300      	movs	r3, #0
 80150b8:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 80150ba:	78fa      	ldrb	r2, [r7, #3]
 80150bc:	787b      	ldrb	r3, [r7, #1]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d904      	bls.n	80150cc <u8g2_DrawLine+0x30>
 80150c2:	78fa      	ldrb	r2, [r7, #3]
 80150c4:	787b      	ldrb	r3, [r7, #1]
 80150c6:	1ad3      	subs	r3, r2, r3
 80150c8:	737b      	strb	r3, [r7, #13]
 80150ca:	e003      	b.n	80150d4 <u8g2_DrawLine+0x38>
 80150cc:	787a      	ldrb	r2, [r7, #1]
 80150ce:	78fb      	ldrb	r3, [r7, #3]
 80150d0:	1ad3      	subs	r3, r2, r3
 80150d2:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80150d4:	78ba      	ldrb	r2, [r7, #2]
 80150d6:	7e3b      	ldrb	r3, [r7, #24]
 80150d8:	429a      	cmp	r2, r3
 80150da:	d904      	bls.n	80150e6 <u8g2_DrawLine+0x4a>
 80150dc:	78ba      	ldrb	r2, [r7, #2]
 80150de:	7e3b      	ldrb	r3, [r7, #24]
 80150e0:	1ad3      	subs	r3, r2, r3
 80150e2:	733b      	strb	r3, [r7, #12]
 80150e4:	e003      	b.n	80150ee <u8g2_DrawLine+0x52>
 80150e6:	7e3a      	ldrb	r2, [r7, #24]
 80150e8:	78bb      	ldrb	r3, [r7, #2]
 80150ea:	1ad3      	subs	r3, r2, r3
 80150ec:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 80150ee:	7b3a      	ldrb	r2, [r7, #12]
 80150f0:	7b7b      	ldrb	r3, [r7, #13]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d913      	bls.n	801511e <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 80150f6:	2301      	movs	r3, #1
 80150f8:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 80150fa:	7b7b      	ldrb	r3, [r7, #13]
 80150fc:	723b      	strb	r3, [r7, #8]
 80150fe:	7b3b      	ldrb	r3, [r7, #12]
 8015100:	737b      	strb	r3, [r7, #13]
 8015102:	7a3b      	ldrb	r3, [r7, #8]
 8015104:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 8015106:	78fb      	ldrb	r3, [r7, #3]
 8015108:	723b      	strb	r3, [r7, #8]
 801510a:	78bb      	ldrb	r3, [r7, #2]
 801510c:	70fb      	strb	r3, [r7, #3]
 801510e:	7a3b      	ldrb	r3, [r7, #8]
 8015110:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 8015112:	787b      	ldrb	r3, [r7, #1]
 8015114:	723b      	strb	r3, [r7, #8]
 8015116:	7e3b      	ldrb	r3, [r7, #24]
 8015118:	707b      	strb	r3, [r7, #1]
 801511a:	7a3b      	ldrb	r3, [r7, #8]
 801511c:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 801511e:	78fa      	ldrb	r2, [r7, #3]
 8015120:	787b      	ldrb	r3, [r7, #1]
 8015122:	429a      	cmp	r2, r3
 8015124:	d90b      	bls.n	801513e <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8015126:	78fb      	ldrb	r3, [r7, #3]
 8015128:	723b      	strb	r3, [r7, #8]
 801512a:	787b      	ldrb	r3, [r7, #1]
 801512c:	70fb      	strb	r3, [r7, #3]
 801512e:	7a3b      	ldrb	r3, [r7, #8]
 8015130:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 8015132:	78bb      	ldrb	r3, [r7, #2]
 8015134:	723b      	strb	r3, [r7, #8]
 8015136:	7e3b      	ldrb	r3, [r7, #24]
 8015138:	70bb      	strb	r3, [r7, #2]
 801513a:	7a3b      	ldrb	r3, [r7, #8]
 801513c:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 801513e:	7b7b      	ldrb	r3, [r7, #13]
 8015140:	085b      	lsrs	r3, r3, #1
 8015142:	b2db      	uxtb	r3, r3
 8015144:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8015146:	7e3a      	ldrb	r2, [r7, #24]
 8015148:	78bb      	ldrb	r3, [r7, #2]
 801514a:	429a      	cmp	r2, r3
 801514c:	d902      	bls.n	8015154 <u8g2_DrawLine+0xb8>
 801514e:	2301      	movs	r3, #1
 8015150:	72bb      	strb	r3, [r7, #10]
 8015152:	e001      	b.n	8015158 <u8g2_DrawLine+0xbc>
 8015154:	23ff      	movs	r3, #255	; 0xff
 8015156:	72bb      	strb	r3, [r7, #10]
  y = y1;
 8015158:	78bb      	ldrb	r3, [r7, #2]
 801515a:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 801515c:	787b      	ldrb	r3, [r7, #1]
 801515e:	2bff      	cmp	r3, #255	; 0xff
 8015160:	d102      	bne.n	8015168 <u8g2_DrawLine+0xcc>
    x2--;
 8015162:	787b      	ldrb	r3, [r7, #1]
 8015164:	3b01      	subs	r3, #1
 8015166:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 8015168:	78fb      	ldrb	r3, [r7, #3]
 801516a:	73fb      	strb	r3, [r7, #15]
 801516c:	e024      	b.n	80151b8 <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 801516e:	7a7b      	ldrb	r3, [r7, #9]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d106      	bne.n	8015182 <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 8015174:	7bba      	ldrb	r2, [r7, #14]
 8015176:	7bfb      	ldrb	r3, [r7, #15]
 8015178:	4619      	mov	r1, r3
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f7ff fd54 	bl	8014c28 <u8g2_DrawPixel>
 8015180:	e005      	b.n	801518e <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8015182:	7bfa      	ldrb	r2, [r7, #15]
 8015184:	7bbb      	ldrb	r3, [r7, #14]
 8015186:	4619      	mov	r1, r3
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f7ff fd4d 	bl	8014c28 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 801518e:	7afa      	ldrb	r2, [r7, #11]
 8015190:	7b3b      	ldrb	r3, [r7, #12]
 8015192:	1ad3      	subs	r3, r2, r3
 8015194:	b2db      	uxtb	r3, r3
 8015196:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 8015198:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801519c:	2b00      	cmp	r3, #0
 801519e:	da08      	bge.n	80151b2 <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 80151a0:	7aba      	ldrb	r2, [r7, #10]
 80151a2:	7bbb      	ldrb	r3, [r7, #14]
 80151a4:	4413      	add	r3, r2
 80151a6:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 80151a8:	7afa      	ldrb	r2, [r7, #11]
 80151aa:	7b7b      	ldrb	r3, [r7, #13]
 80151ac:	4413      	add	r3, r2
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 80151b2:	7bfb      	ldrb	r3, [r7, #15]
 80151b4:	3301      	adds	r3, #1
 80151b6:	73fb      	strb	r3, [r7, #15]
 80151b8:	7bfa      	ldrb	r2, [r7, #15]
 80151ba:	787b      	ldrb	r3, [r7, #1]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d9d6      	bls.n	801516e <u8g2_DrawLine+0xd2>
    }
  }
}
 80151c0:	bf00      	nop
 80151c2:	3710      	adds	r7, #16
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80151c8:	b480      	push	{r7}
 80151ca:	b087      	sub	sp, #28
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
 80151d0:	4608      	mov	r0, r1
 80151d2:	4611      	mov	r1, r2
 80151d4:	461a      	mov	r2, r3
 80151d6:	4603      	mov	r3, r0
 80151d8:	70fb      	strb	r3, [r7, #3]
 80151da:	460b      	mov	r3, r1
 80151dc:	70bb      	strb	r3, [r7, #2]
 80151de:	4613      	mov	r3, r2
 80151e0:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80151e2:	78bb      	ldrb	r3, [r7, #2]
 80151e4:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80151e6:	7cfb      	ldrb	r3, [r7, #19]
 80151e8:	f003 0307 	and.w	r3, r3, #7
 80151ec:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80151ee:	2301      	movs	r3, #1
 80151f0:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80151f2:	7c3a      	ldrb	r2, [r7, #16]
 80151f4:	7cfb      	ldrb	r3, [r7, #19]
 80151f6:	fa02 f303 	lsl.w	r3, r2, r3
 80151fa:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80151fc:	2300      	movs	r3, #0
 80151fe:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8015200:	2300      	movs	r3, #0
 8015202:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801520a:	2b01      	cmp	r3, #1
 801520c:	d801      	bhi.n	8015212 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 801520e:	7c3b      	ldrb	r3, [r7, #16]
 8015210:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8015218:	2b01      	cmp	r3, #1
 801521a:	d001      	beq.n	8015220 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 801521c:	7c3b      	ldrb	r3, [r7, #16]
 801521e:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8015220:	78bb      	ldrb	r3, [r7, #2]
 8015222:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8015224:	89fb      	ldrh	r3, [r7, #14]
 8015226:	f023 0307 	bic.w	r3, r3, #7
 801522a:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	7c1b      	ldrb	r3, [r3, #16]
 8015232:	b29b      	uxth	r3, r3
 8015234:	89fa      	ldrh	r2, [r7, #14]
 8015236:	fb12 f303 	smulbb	r3, r2, r3
 801523a:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015240:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8015242:	89fb      	ldrh	r3, [r7, #14]
 8015244:	697a      	ldr	r2, [r7, #20]
 8015246:	4413      	add	r3, r2
 8015248:	617b      	str	r3, [r7, #20]
  ptr += x;
 801524a:	78fb      	ldrb	r3, [r7, #3]
 801524c:	697a      	ldr	r2, [r7, #20]
 801524e:	4413      	add	r3, r2
 8015250:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8015252:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d117      	bne.n	801528a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 801525a:	697b      	ldr	r3, [r7, #20]
 801525c:	781a      	ldrb	r2, [r3, #0]
 801525e:	7cbb      	ldrb	r3, [r7, #18]
 8015260:	4313      	orrs	r3, r2
 8015262:	b2da      	uxtb	r2, r3
 8015264:	697b      	ldr	r3, [r7, #20]
 8015266:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	781a      	ldrb	r2, [r3, #0]
 801526c:	7c7b      	ldrb	r3, [r7, #17]
 801526e:	4053      	eors	r3, r2
 8015270:	b2da      	uxtb	r2, r3
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	701a      	strb	r2, [r3, #0]
	ptr++;
 8015276:	697b      	ldr	r3, [r7, #20]
 8015278:	3301      	adds	r3, #1
 801527a:	617b      	str	r3, [r7, #20]
	len--;
 801527c:	787b      	ldrb	r3, [r7, #1]
 801527e:	3b01      	subs	r3, #1
 8015280:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8015282:	787b      	ldrb	r3, [r7, #1]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d1e8      	bne.n	801525a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8015288:	e039      	b.n	80152fe <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	781a      	ldrb	r2, [r3, #0]
 801528e:	7cbb      	ldrb	r3, [r7, #18]
 8015290:	4313      	orrs	r3, r2
 8015292:	b2da      	uxtb	r2, r3
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	781a      	ldrb	r2, [r3, #0]
 801529c:	7c7b      	ldrb	r3, [r7, #17]
 801529e:	4053      	eors	r3, r2
 80152a0:	b2da      	uxtb	r2, r3
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80152a6:	7cfb      	ldrb	r3, [r7, #19]
 80152a8:	3301      	adds	r3, #1
 80152aa:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80152ac:	7cfb      	ldrb	r3, [r7, #19]
 80152ae:	f003 0307 	and.w	r3, r3, #7
 80152b2:	74fb      	strb	r3, [r7, #19]
      len--;
 80152b4:	787b      	ldrb	r3, [r7, #1]
 80152b6:	3b01      	subs	r3, #1
 80152b8:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80152ba:	7cfb      	ldrb	r3, [r7, #19]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d115      	bne.n	80152ec <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80152c6:	461a      	mov	r2, r3
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	4413      	add	r3, r2
 80152cc:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80152d4:	2b01      	cmp	r3, #1
 80152d6:	d801      	bhi.n	80152dc <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80152d8:	2301      	movs	r3, #1
 80152da:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80152e2:	2b01      	cmp	r3, #1
 80152e4:	d008      	beq.n	80152f8 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80152e6:	2301      	movs	r3, #1
 80152e8:	747b      	strb	r3, [r7, #17]
 80152ea:	e005      	b.n	80152f8 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80152ec:	7cbb      	ldrb	r3, [r7, #18]
 80152ee:	005b      	lsls	r3, r3, #1
 80152f0:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80152f2:	7c7b      	ldrb	r3, [r7, #17]
 80152f4:	005b      	lsls	r3, r3, #1
 80152f6:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80152f8:	787b      	ldrb	r3, [r7, #1]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d1c5      	bne.n	801528a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80152fe:	bf00      	nop
 8015300:	371c      	adds	r7, #28
 8015302:	46bd      	mov	sp, r7
 8015304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015308:	4770      	bx	lr

0801530a <u8g2_draw_button_line>:

#define SPACE_BETWEEN_BUTTONS_IN_PIXEL 6
#define SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL 3

uint8_t u8g2_draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 801530a:	b580      	push	{r7, lr}
 801530c:	b088      	sub	sp, #32
 801530e:	af04      	add	r7, sp, #16
 8015310:	6078      	str	r0, [r7, #4]
 8015312:	4608      	mov	r0, r1
 8015314:	4611      	mov	r1, r2
 8015316:	461a      	mov	r2, r3
 8015318:	4603      	mov	r3, r0
 801531a:	70fb      	strb	r3, [r7, #3]
 801531c:	460b      	mov	r3, r1
 801531e:	70bb      	strb	r3, [r7, #2]
 8015320:	4613      	mov	r3, r2
 8015322:	707b      	strb	r3, [r7, #1]
  uint8_t is_invert;
	
  u8g2_uint_t d;
  u8g2_uint_t x;
	
  cnt = u8x8_GetStringLineCnt(s);
 8015324:	69b8      	ldr	r0, [r7, #24]
 8015326:	f001 f9aa 	bl	801667e <u8x8_GetStringLineCnt>
 801532a:	4603      	mov	r3, r0
 801532c:	72bb      	strb	r3, [r7, #10]
  
	
  /* calculate the width of the button line */
  button_line_width = 0;
 801532e:	2300      	movs	r3, #0
 8015330:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8015332:	2300      	movs	r3, #0
 8015334:	73bb      	strb	r3, [r7, #14]
 8015336:	e011      	b.n	801535c <u8g2_draw_button_line+0x52>
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 8015338:	7bbb      	ldrb	r3, [r7, #14]
 801533a:	69b9      	ldr	r1, [r7, #24]
 801533c:	4618      	mov	r0, r3
 801533e:	f001 f9c1 	bl	80166c4 <u8x8_GetStringLineStart>
 8015342:	4603      	mov	r3, r0
 8015344:	4619      	mov	r1, r3
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7ff fb3e 	bl	80149c8 <u8g2_GetUTF8Width>
 801534c:	4603      	mov	r3, r0
 801534e:	461a      	mov	r2, r3
 8015350:	7bfb      	ldrb	r3, [r7, #15]
 8015352:	4413      	add	r3, r2
 8015354:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8015356:	7bbb      	ldrb	r3, [r7, #14]
 8015358:	3301      	adds	r3, #1
 801535a:	73bb      	strb	r3, [r7, #14]
 801535c:	7bba      	ldrb	r2, [r7, #14]
 801535e:	7abb      	ldrb	r3, [r7, #10]
 8015360:	429a      	cmp	r2, r3
 8015362:	d3e9      	bcc.n	8015338 <u8g2_draw_button_line+0x2e>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 8015364:	7abb      	ldrb	r3, [r7, #10]
 8015366:	461a      	mov	r2, r3
 8015368:	0052      	lsls	r2, r2, #1
 801536a:	4413      	add	r3, r2
 801536c:	005b      	lsls	r3, r3, #1
 801536e:	b2da      	uxtb	r2, r3
 8015370:	7bfb      	ldrb	r3, [r7, #15]
 8015372:	4413      	add	r3, r2
 8015374:	b2db      	uxtb	r3, r3
 8015376:	3b06      	subs	r3, #6
 8015378:	73fb      	strb	r3, [r7, #15]
  
  /* calculate the left offset */
  d = 0;
 801537a:	2300      	movs	r3, #0
 801537c:	733b      	strb	r3, [r7, #12]
  if ( button_line_width < w )
 801537e:	7bfa      	ldrb	r2, [r7, #15]
 8015380:	78bb      	ldrb	r3, [r7, #2]
 8015382:	429a      	cmp	r2, r3
 8015384:	d208      	bcs.n	8015398 <u8g2_draw_button_line+0x8e>
  {
    d = w;
 8015386:	78bb      	ldrb	r3, [r7, #2]
 8015388:	733b      	strb	r3, [r7, #12]
    d -= button_line_width;
 801538a:	7b3a      	ldrb	r2, [r7, #12]
 801538c:	7bfb      	ldrb	r3, [r7, #15]
 801538e:	1ad3      	subs	r3, r2, r3
 8015390:	733b      	strb	r3, [r7, #12]
    d /= 2;
 8015392:	7b3b      	ldrb	r3, [r7, #12]
 8015394:	085b      	lsrs	r3, r3, #1
 8015396:	733b      	strb	r3, [r7, #12]
  }
  
  /* draw the buttons */
  x = d;
 8015398:	7b3b      	ldrb	r3, [r7, #12]
 801539a:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 801539c:	2300      	movs	r3, #0
 801539e:	73bb      	strb	r3, [r7, #14]
 80153a0:	e02c      	b.n	80153fc <u8g2_draw_button_line+0xf2>
  {
    is_invert = 0;
 80153a2:	2300      	movs	r3, #0
 80153a4:	737b      	strb	r3, [r7, #13]
    if ( i == cursor )
 80153a6:	7bba      	ldrb	r2, [r7, #14]
 80153a8:	787b      	ldrb	r3, [r7, #1]
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d101      	bne.n	80153b2 <u8g2_draw_button_line+0xa8>
      is_invert = 1;
 80153ae:	2301      	movs	r3, #1
 80153b0:	737b      	strb	r3, [r7, #13]

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 80153b2:	7bbb      	ldrb	r3, [r7, #14]
 80153b4:	69b9      	ldr	r1, [r7, #24]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f001 f984 	bl	80166c4 <u8x8_GetStringLineStart>
 80153bc:	78fa      	ldrb	r2, [r7, #3]
 80153be:	7af9      	ldrb	r1, [r7, #11]
 80153c0:	7b7b      	ldrb	r3, [r7, #13]
 80153c2:	9302      	str	r3, [sp, #8]
 80153c4:	2301      	movs	r3, #1
 80153c6:	9301      	str	r3, [sp, #4]
 80153c8:	9000      	str	r0, [sp, #0]
 80153ca:	2300      	movs	r3, #0
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f000 f900 	bl	80155d2 <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 80153d2:	7bbb      	ldrb	r3, [r7, #14]
 80153d4:	69b9      	ldr	r1, [r7, #24]
 80153d6:	4618      	mov	r0, r3
 80153d8:	f001 f974 	bl	80166c4 <u8x8_GetStringLineStart>
 80153dc:	4603      	mov	r3, r0
 80153de:	4619      	mov	r1, r3
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f7ff faf1 	bl	80149c8 <u8g2_GetUTF8Width>
 80153e6:	4603      	mov	r3, r0
 80153e8:	461a      	mov	r2, r3
 80153ea:	7afb      	ldrb	r3, [r7, #11]
 80153ec:	4413      	add	r3, r2
 80153ee:	72fb      	strb	r3, [r7, #11]
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 80153f0:	7afb      	ldrb	r3, [r7, #11]
 80153f2:	3306      	adds	r3, #6
 80153f4:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 80153f6:	7bbb      	ldrb	r3, [r7, #14]
 80153f8:	3301      	adds	r3, #1
 80153fa:	73bb      	strb	r3, [r7, #14]
 80153fc:	7bba      	ldrb	r2, [r7, #14]
 80153fe:	7abb      	ldrb	r3, [r7, #10]
 8015400:	429a      	cmp	r2, r3
 8015402:	d3ce      	bcc.n	80153a2 <u8g2_draw_button_line+0x98>
  }
  
  /* return the number of buttons */
  return cnt;
 8015404:	7abb      	ldrb	r3, [r7, #10]
}
 8015406:	4618      	mov	r0, r3
 8015408:	3710      	adds	r7, #16
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}

0801540e <u8g2_UserInterfaceMessage>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
*/

uint8_t u8g2_UserInterfaceMessage(u8g2_t *u8g2, const char *title1, const char *title2, const char *title3, const char *buttons)
{
 801540e:	b580      	push	{r7, lr}
 8015410:	b08a      	sub	sp, #40	; 0x28
 8015412:	af04      	add	r7, sp, #16
 8015414:	60f8      	str	r0, [r7, #12]
 8015416:	60b9      	str	r1, [r7, #8]
 8015418:	607a      	str	r2, [r7, #4]
 801541a:	603b      	str	r3, [r7, #0]
  uint8_t height;
  uint8_t line_height;
  u8g2_uint_t pixel_height;
  u8g2_uint_t y, yy;
	
  uint8_t cursor = 0;
 801541c:	2300      	movs	r3, #0
 801541e:	753b      	strb	r3, [r7, #20]
  uint8_t button_cnt;
  uint8_t event;
	
  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8015420:	2100      	movs	r1, #0
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f7ff fae4 	bl	80149f0 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 8015428:	68f8      	ldr	r0, [r7, #12]
 801542a:	f7ff fa53 	bl	80148d4 <u8g2_SetFontPosBaseline>
	
	
  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015434:	74fb      	strb	r3, [r7, #19]
  line_height -= u8g2_GetDescent(u8g2);
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 801543c:	b2db      	uxtb	r3, r3
 801543e:	7cfa      	ldrb	r2, [r7, #19]
 8015440:	1ad3      	subs	r3, r2, r3
 8015442:	74fb      	strb	r3, [r7, #19]

  /* calculate overall height of the message box in lines*/
  height = 1;	/* button line */
 8015444:	2301      	movs	r3, #1
 8015446:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title1);
 8015448:	68b8      	ldr	r0, [r7, #8]
 801544a:	f001 f918 	bl	801667e <u8x8_GetStringLineCnt>
 801544e:	4603      	mov	r3, r0
 8015450:	461a      	mov	r2, r3
 8015452:	7dfb      	ldrb	r3, [r7, #23]
 8015454:	4413      	add	r3, r2
 8015456:	75fb      	strb	r3, [r7, #23]
  if ( title2 != NULL )
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d002      	beq.n	8015464 <u8g2_UserInterfaceMessage+0x56>
    height++;
 801545e:	7dfb      	ldrb	r3, [r7, #23]
 8015460:	3301      	adds	r3, #1
 8015462:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title3);
 8015464:	6838      	ldr	r0, [r7, #0]
 8015466:	f001 f90a 	bl	801667e <u8x8_GetStringLineCnt>
 801546a:	4603      	mov	r3, r0
 801546c:	461a      	mov	r2, r3
 801546e:	7dfb      	ldrb	r3, [r7, #23]
 8015470:	4413      	add	r3, r2
 8015472:	75fb      	strb	r3, [r7, #23]
  
  /* calculate the height in pixel */
  pixel_height = height;
 8015474:	7dfb      	ldrb	r3, [r7, #23]
 8015476:	74bb      	strb	r3, [r7, #18]
  pixel_height *= line_height;
 8015478:	7cba      	ldrb	r2, [r7, #18]
 801547a:	7cfb      	ldrb	r3, [r7, #19]
 801547c:	fb12 f303 	smulbb	r3, r2, r3
 8015480:	74bb      	strb	r3, [r7, #18]
  
  /* ... and add the space between the text and the buttons */
  pixel_height +=SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 8015482:	7cbb      	ldrb	r3, [r7, #18]
 8015484:	3303      	adds	r3, #3
 8015486:	74bb      	strb	r3, [r7, #18]
  
  /* calculate offset from top */
  y = 0;
 8015488:	2300      	movs	r3, #0
 801548a:	75bb      	strb	r3, [r7, #22]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)   )
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015492:	7cba      	ldrb	r2, [r7, #18]
 8015494:	429a      	cmp	r2, r3
 8015496:	d20a      	bcs.n	80154ae <u8g2_UserInterfaceMessage+0xa0>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801549e:	75bb      	strb	r3, [r7, #22]
    y -= pixel_height;
 80154a0:	7dba      	ldrb	r2, [r7, #22]
 80154a2:	7cbb      	ldrb	r3, [r7, #18]
 80154a4:	1ad3      	subs	r3, r2, r3
 80154a6:	75bb      	strb	r3, [r7, #22]
    y /= 2;
 80154a8:	7dbb      	ldrb	r3, [r7, #22]
 80154aa:	085b      	lsrs	r3, r3, #1
 80154ac:	75bb      	strb	r3, [r7, #22]
  }
  y += u8g2_GetAscent(u8g2);
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80154b4:	b2da      	uxtb	r2, r3
 80154b6:	7dbb      	ldrb	r3, [r7, #22]
 80154b8:	4413      	add	r3, r2
 80154ba:	75bb      	strb	r3, [r7, #22]

  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 80154bc:	68f8      	ldr	r0, [r7, #12]
 80154be:	f7fe fbb1 	bl	8013c24 <u8g2_FirstPage>
      do
      {
	  yy = y;
 80154c2:	7dbb      	ldrb	r3, [r7, #22]
 80154c4:	757b      	strb	r3, [r7, #21]
	  /* draw message box */
	  
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80154cc:	7d7a      	ldrb	r2, [r7, #21]
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	9301      	str	r3, [sp, #4]
 80154d2:	7cfb      	ldrb	r3, [r7, #19]
 80154d4:	9300      	str	r3, [sp, #0]
 80154d6:	460b      	mov	r3, r1
 80154d8:	2100      	movs	r1, #0
 80154da:	68f8      	ldr	r0, [r7, #12]
 80154dc:	f000 f90b 	bl	80156f6 <u8g2_DrawUTF8Lines>
 80154e0:	4603      	mov	r3, r0
 80154e2:	461a      	mov	r2, r3
 80154e4:	7d7b      	ldrb	r3, [r7, #21]
 80154e6:	4413      	add	r3, r2
 80154e8:	757b      	strb	r3, [r7, #21]
	  if ( title2 != NULL )
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d012      	beq.n	8015516 <u8g2_UserInterfaceMessage+0x108>
	  {
	    u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80154f6:	7d7a      	ldrb	r2, [r7, #21]
 80154f8:	2300      	movs	r3, #0
 80154fa:	9302      	str	r3, [sp, #8]
 80154fc:	2300      	movs	r3, #0
 80154fe:	9301      	str	r3, [sp, #4]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	9300      	str	r3, [sp, #0]
 8015504:	460b      	mov	r3, r1
 8015506:	2100      	movs	r1, #0
 8015508:	68f8      	ldr	r0, [r7, #12]
 801550a:	f000 f862 	bl	80155d2 <u8g2_DrawUTF8Line>
	    yy+=line_height;
 801550e:	7d7a      	ldrb	r2, [r7, #21]
 8015510:	7cfb      	ldrb	r3, [r7, #19]
 8015512:	4413      	add	r3, r2
 8015514:	757b      	strb	r3, [r7, #21]
	  }
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title3);
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 801551c:	7d7a      	ldrb	r2, [r7, #21]
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	9301      	str	r3, [sp, #4]
 8015522:	7cfb      	ldrb	r3, [r7, #19]
 8015524:	9300      	str	r3, [sp, #0]
 8015526:	460b      	mov	r3, r1
 8015528:	2100      	movs	r1, #0
 801552a:	68f8      	ldr	r0, [r7, #12]
 801552c:	f000 f8e3 	bl	80156f6 <u8g2_DrawUTF8Lines>
 8015530:	4603      	mov	r3, r0
 8015532:	461a      	mov	r2, r3
 8015534:	7d7b      	ldrb	r3, [r7, #21]
 8015536:	4413      	add	r3, r2
 8015538:	757b      	strb	r3, [r7, #21]
	  yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 801553a:	7d7b      	ldrb	r3, [r7, #21]
 801553c:	3303      	adds	r3, #3
 801553e:	757b      	strb	r3, [r7, #21]

	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8015546:	7d38      	ldrb	r0, [r7, #20]
 8015548:	7d79      	ldrb	r1, [r7, #21]
 801554a:	6a3b      	ldr	r3, [r7, #32]
 801554c:	9300      	str	r3, [sp, #0]
 801554e:	4603      	mov	r3, r0
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f7ff feda 	bl	801530a <u8g2_draw_button_line>
 8015556:	4603      	mov	r3, r0
 8015558:	747b      	strb	r3, [r7, #17]
	  
      } while( u8g2_NextPage(u8g2) );
 801555a:	68f8      	ldr	r0, [r7, #12]
 801555c:	f7fe fb76 	bl	8013c4c <u8g2_NextPage>
 8015560:	4603      	mov	r3, r0
 8015562:	2b00      	cmp	r3, #0
 8015564:	d1ad      	bne.n	80154c2 <u8g2_UserInterfaceMessage+0xb4>
      return 0;
#endif
	  
      for(;;)
      {
	    event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 8015566:	68f8      	ldr	r0, [r7, #12]
 8015568:	f7ef f948 	bl	80047fc <u8x8_GetMenuEvent>
 801556c:	4603      	mov	r3, r0
 801556e:	743b      	strb	r3, [r7, #16]
	    if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8015570:	7c3b      	ldrb	r3, [r7, #16]
 8015572:	2b50      	cmp	r3, #80	; 0x50
 8015574:	d103      	bne.n	801557e <u8g2_UserInterfaceMessage+0x170>
	      return cursor+1;
 8015576:	7d3b      	ldrb	r3, [r7, #20]
 8015578:	3301      	adds	r3, #1
 801557a:	b2db      	uxtb	r3, r3
 801557c:	e025      	b.n	80155ca <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 801557e:	7c3b      	ldrb	r3, [r7, #16]
 8015580:	2b53      	cmp	r3, #83	; 0x53
 8015582:	d101      	bne.n	8015588 <u8g2_UserInterfaceMessage+0x17a>
	      return 0;
 8015584:	2300      	movs	r3, #0
 8015586:	e020      	b.n	80155ca <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 8015588:	7c3b      	ldrb	r3, [r7, #16]
 801558a:	2b51      	cmp	r3, #81	; 0x51
 801558c:	d002      	beq.n	8015594 <u8g2_UserInterfaceMessage+0x186>
 801558e:	7c3b      	ldrb	r3, [r7, #16]
 8015590:	2b55      	cmp	r3, #85	; 0x55
 8015592:	d109      	bne.n	80155a8 <u8g2_UserInterfaceMessage+0x19a>
	    {
	      cursor++;
 8015594:	7d3b      	ldrb	r3, [r7, #20]
 8015596:	3301      	adds	r3, #1
 8015598:	753b      	strb	r3, [r7, #20]
	      if ( cursor >= button_cnt )
 801559a:	7d3a      	ldrb	r2, [r7, #20]
 801559c:	7c7b      	ldrb	r3, [r7, #17]
 801559e:	429a      	cmp	r2, r3
 80155a0:	d311      	bcc.n	80155c6 <u8g2_UserInterfaceMessage+0x1b8>
		cursor = 0;
 80155a2:	2300      	movs	r3, #0
 80155a4:	753b      	strb	r3, [r7, #20]
	      break;
 80155a6:	e00e      	b.n	80155c6 <u8g2_UserInterfaceMessage+0x1b8>
	    }
	    else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 80155a8:	7c3b      	ldrb	r3, [r7, #16]
 80155aa:	2b52      	cmp	r3, #82	; 0x52
 80155ac:	d002      	beq.n	80155b4 <u8g2_UserInterfaceMessage+0x1a6>
 80155ae:	7c3b      	ldrb	r3, [r7, #16]
 80155b0:	2b54      	cmp	r3, #84	; 0x54
 80155b2:	d1d8      	bne.n	8015566 <u8g2_UserInterfaceMessage+0x158>
	    {
	      if ( cursor == 0 )
 80155b4:	7d3b      	ldrb	r3, [r7, #20]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d101      	bne.n	80155be <u8g2_UserInterfaceMessage+0x1b0>
		cursor = button_cnt;
 80155ba:	7c7b      	ldrb	r3, [r7, #17]
 80155bc:	753b      	strb	r3, [r7, #20]
	      cursor--;
 80155be:	7d3b      	ldrb	r3, [r7, #20]
 80155c0:	3b01      	subs	r3, #1
 80155c2:	753b      	strb	r3, [r7, #20]
	      break;
 80155c4:	e000      	b.n	80155c8 <u8g2_UserInterfaceMessage+0x1ba>
	      break;
 80155c6:	bf00      	nop
      u8g2_FirstPage(u8g2);
 80155c8:	e778      	b.n	80154bc <u8g2_UserInterfaceMessage+0xae>
	    }    
      }
  }
  /* never reached */
  //return 0;
}
 80155ca:	4618      	mov	r0, r3
 80155cc:	3718      	adds	r7, #24
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}

080155d2 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 80155d2:	b580      	push	{r7, lr}
 80155d4:	b086      	sub	sp, #24
 80155d6:	af02      	add	r7, sp, #8
 80155d8:	6078      	str	r0, [r7, #4]
 80155da:	4608      	mov	r0, r1
 80155dc:	4611      	mov	r1, r2
 80155de:	461a      	mov	r2, r3
 80155e0:	4603      	mov	r3, r0
 80155e2:	70fb      	strb	r3, [r7, #3]
 80155e4:	460b      	mov	r3, r1
 80155e6:	70bb      	strb	r3, [r7, #2]
 80155e8:	4613      	mov	r3, r2
 80155ea:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 80155ec:	2100      	movs	r1, #0
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f7ff f9fe 	bl	80149f0 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155f8:	6878      	ldr	r0, [r7, #4]
 80155fa:	4798      	blx	r3
 80155fc:	4603      	mov	r3, r0
 80155fe:	461a      	mov	r2, r3
 8015600:	78bb      	ldrb	r3, [r7, #2]
 8015602:	4413      	add	r3, r2
 8015604:	70bb      	strb	r3, [r7, #2]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 8015606:	69b9      	ldr	r1, [r7, #24]
 8015608:	6878      	ldr	r0, [r7, #4]
 801560a:	f7ff f9dd 	bl	80149c8 <u8g2_GetUTF8Width>
 801560e:	4603      	mov	r3, r0
 8015610:	72bb      	strb	r3, [r7, #10]

  /* calculate delta d within the box */
  d = 0;
 8015612:	2300      	movs	r3, #0
 8015614:	73fb      	strb	r3, [r7, #15]
  if ( str_width < w )
 8015616:	7aba      	ldrb	r2, [r7, #10]
 8015618:	787b      	ldrb	r3, [r7, #1]
 801561a:	429a      	cmp	r2, r3
 801561c:	d209      	bcs.n	8015632 <u8g2_DrawUTF8Line+0x60>
  {
    d = w;
 801561e:	787b      	ldrb	r3, [r7, #1]
 8015620:	73fb      	strb	r3, [r7, #15]
    d -=str_width;
 8015622:	7bfa      	ldrb	r2, [r7, #15]
 8015624:	7abb      	ldrb	r3, [r7, #10]
 8015626:	1ad3      	subs	r3, r2, r3
 8015628:	73fb      	strb	r3, [r7, #15]
    d /= 2;
 801562a:	7bfb      	ldrb	r3, [r7, #15]
 801562c:	085b      	lsrs	r3, r3, #1
 801562e:	73fb      	strb	r3, [r7, #15]
 8015630:	e001      	b.n	8015636 <u8g2_DrawUTF8Line+0x64>
  }
  else
  {
    w = str_width;
 8015632:	7abb      	ldrb	r3, [r7, #10]
 8015634:	707b      	strb	r3, [r7, #1]
  }

  /* caluclate text box */
  fx = x;
 8015636:	78fb      	ldrb	r3, [r7, #3]
 8015638:	73bb      	strb	r3, [r7, #14]
  fy = y - u8g2_GetAscent(u8g2) ;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015640:	b2db      	uxtb	r3, r3
 8015642:	78ba      	ldrb	r2, [r7, #2]
 8015644:	1ad3      	subs	r3, r2, r3
 8015646:	737b      	strb	r3, [r7, #13]
  fw = w;
 8015648:	787b      	ldrb	r3, [r7, #1]
 801564a:	733b      	strb	r3, [r7, #12]
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015652:	b2da      	uxtb	r2, r3
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 801565a:	b2db      	uxtb	r3, r3
 801565c:	1ad3      	subs	r3, r2, r3
 801565e:	72fb      	strb	r3, [r7, #11]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 8015660:	2101      	movs	r1, #1
 8015662:	6878      	ldr	r0, [r7, #4]
 8015664:	f7ff fb13 	bl	8014c8e <u8g2_SetDrawColor>
  if ( is_invert )
 8015668:	f897 3020 	ldrb.w	r3, [r7, #32]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d021      	beq.n	80156b4 <u8g2_DrawUTF8Line+0xe2>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 8015670:	7b38      	ldrb	r0, [r7, #12]
 8015672:	7b7a      	ldrb	r2, [r7, #13]
 8015674:	7bb9      	ldrb	r1, [r7, #14]
 8015676:	7afb      	ldrb	r3, [r7, #11]
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	4603      	mov	r3, r0
 801567c:	6878      	ldr	r0, [r7, #4]
 801567e:	f7fe f9a9 	bl	80139d4 <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
 8015682:	e017      	b.n	80156b4 <u8g2_DrawUTF8Line+0xe2>
  {
    fx--;
 8015684:	7bbb      	ldrb	r3, [r7, #14]
 8015686:	3b01      	subs	r3, #1
 8015688:	73bb      	strb	r3, [r7, #14]
    fy--;
 801568a:	7b7b      	ldrb	r3, [r7, #13]
 801568c:	3b01      	subs	r3, #1
 801568e:	737b      	strb	r3, [r7, #13]
    fw +=2;
 8015690:	7b3b      	ldrb	r3, [r7, #12]
 8015692:	3302      	adds	r3, #2
 8015694:	733b      	strb	r3, [r7, #12]
    fh +=2;
 8015696:	7afb      	ldrb	r3, [r7, #11]
 8015698:	3302      	adds	r3, #2
 801569a:	72fb      	strb	r3, [r7, #11]
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 801569c:	7b38      	ldrb	r0, [r7, #12]
 801569e:	7b7a      	ldrb	r2, [r7, #13]
 80156a0:	7bb9      	ldrb	r1, [r7, #14]
 80156a2:	7afb      	ldrb	r3, [r7, #11]
 80156a4:	9300      	str	r3, [sp, #0]
 80156a6:	4603      	mov	r3, r0
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f7fe f9ca 	bl	8013a42 <u8g2_DrawFrame>
    border_size--;
 80156ae:	7f3b      	ldrb	r3, [r7, #28]
 80156b0:	3b01      	subs	r3, #1
 80156b2:	773b      	strb	r3, [r7, #28]
  while( border_size > 0 )
 80156b4:	7f3b      	ldrb	r3, [r7, #28]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d1e4      	bne.n	8015684 <u8g2_DrawUTF8Line+0xb2>
  }

  if ( is_invert )
 80156ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d004      	beq.n	80156cc <u8g2_DrawUTF8Line+0xfa>
  {
    u8g2_SetDrawColor(u8g2, 0);
 80156c2:	2100      	movs	r1, #0
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f7ff fae2 	bl	8014c8e <u8g2_SetDrawColor>
 80156ca:	e003      	b.n	80156d4 <u8g2_DrawUTF8Line+0x102>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 80156cc:	2101      	movs	r1, #1
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f7ff fadd 	bl	8014c8e <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 80156d4:	78fa      	ldrb	r2, [r7, #3]
 80156d6:	7bfb      	ldrb	r3, [r7, #15]
 80156d8:	4413      	add	r3, r2
 80156da:	b2d9      	uxtb	r1, r3
 80156dc:	78ba      	ldrb	r2, [r7, #2]
 80156de:	69bb      	ldr	r3, [r7, #24]
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7ff f865 	bl	80147b0 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 80156e6:	2101      	movs	r1, #1
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f7ff fad0 	bl	8014c8e <u8g2_SetDrawColor>

}
 80156ee:	bf00      	nop
 80156f0:	3710      	adds	r7, #16
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}

080156f6 <u8g2_DrawUTF8Lines>:
  lines can be centered with respect to "w"
  if s == NULL nothing is drawn and 0 is returned
  returns the number of lines in s multiplied with line_height
*/
u8g2_uint_t u8g2_DrawUTF8Lines(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t line_height, const char *s)
{
 80156f6:	b590      	push	{r4, r7, lr}
 80156f8:	b089      	sub	sp, #36	; 0x24
 80156fa:	af04      	add	r7, sp, #16
 80156fc:	6078      	str	r0, [r7, #4]
 80156fe:	4608      	mov	r0, r1
 8015700:	4611      	mov	r1, r2
 8015702:	461a      	mov	r2, r3
 8015704:	4603      	mov	r3, r0
 8015706:	70fb      	strb	r3, [r7, #3]
 8015708:	460b      	mov	r3, r1
 801570a:	70bb      	strb	r3, [r7, #2]
 801570c:	4613      	mov	r3, r2
 801570e:	707b      	strb	r3, [r7, #1]
  uint8_t i;
  uint8_t cnt;
  u8g2_uint_t yy = 0;
 8015710:	2300      	movs	r3, #0
 8015712:	73bb      	strb	r3, [r7, #14]
  cnt = u8x8_GetStringLineCnt(s);
 8015714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015716:	f000 ffb2 	bl	801667e <u8x8_GetStringLineCnt>
 801571a:	4603      	mov	r3, r0
 801571c:	737b      	strb	r3, [r7, #13]
  //printf("str=%s\n", s);
  //printf("cnt=%d, y=%d, line_height=%d\n", cnt, y, line_height);
  for( i = 0; i < cnt; i++ )
 801571e:	2300      	movs	r3, #0
 8015720:	73fb      	strb	r3, [r7, #15]
 8015722:	e01e      	b.n	8015762 <u8g2_DrawUTF8Lines+0x6c>
  {
    //printf("  i=%d, y=%d, line_height=%d\n", i, y, line_height);
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
 8015724:	7bfb      	ldrb	r3, [r7, #15]
 8015726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015728:	4618      	mov	r0, r3
 801572a:	f000 ffcb 	bl	80166c4 <u8x8_GetStringLineStart>
 801572e:	4604      	mov	r4, r0
 8015730:	7878      	ldrb	r0, [r7, #1]
 8015732:	78ba      	ldrb	r2, [r7, #2]
 8015734:	78f9      	ldrb	r1, [r7, #3]
 8015736:	2300      	movs	r3, #0
 8015738:	9302      	str	r3, [sp, #8]
 801573a:	2300      	movs	r3, #0
 801573c:	9301      	str	r3, [sp, #4]
 801573e:	9400      	str	r4, [sp, #0]
 8015740:	4603      	mov	r3, r0
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f7ff ff45 	bl	80155d2 <u8g2_DrawUTF8Line>
    y+=line_height;
 8015748:	78ba      	ldrb	r2, [r7, #2]
 801574a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801574e:	4413      	add	r3, r2
 8015750:	70bb      	strb	r3, [r7, #2]
    yy+=line_height;
 8015752:	7bba      	ldrb	r2, [r7, #14]
 8015754:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015758:	4413      	add	r3, r2
 801575a:	73bb      	strb	r3, [r7, #14]
  for( i = 0; i < cnt; i++ )
 801575c:	7bfb      	ldrb	r3, [r7, #15]
 801575e:	3301      	adds	r3, #1
 8015760:	73fb      	strb	r3, [r7, #15]
 8015762:	7bfa      	ldrb	r2, [r7, #15]
 8015764:	7b7b      	ldrb	r3, [r7, #13]
 8015766:	429a      	cmp	r2, r3
 8015768:	d3dc      	bcc.n	8015724 <u8g2_DrawUTF8Lines+0x2e>
  }
  return yy;
 801576a:	7bbb      	ldrb	r3, [r7, #14]
}
 801576c:	4618      	mov	r0, r3
 801576e:	3714      	adds	r7, #20
 8015770:	46bd      	mov	sp, r7
 8015772:	bd90      	pop	{r4, r7, pc}

08015774 <u8g2_draw_selection_list_line>:
  selection list with string line
  returns line height
*/
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b08a      	sub	sp, #40	; 0x28
 8015778:	af04      	add	r7, sp, #16
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	4611      	mov	r1, r2
 8015780:	461a      	mov	r2, r3
 8015782:	460b      	mov	r3, r1
 8015784:	71fb      	strb	r3, [r7, #7]
 8015786:	4613      	mov	r3, r2
 8015788:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t yy;
  uint8_t border_size = 0;
 801578a:	2300      	movs	r3, #0
 801578c:	75fb      	strb	r3, [r7, #23]
  uint8_t is_invert = 0;
 801578e:	2300      	movs	r3, #0
 8015790:	75bb      	strb	r3, [r7, #22]
	
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015798:	b2da      	uxtb	r2, r3
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	1ad3      	subs	r3, r2, r3
 80157a4:	b2db      	uxtb	r3, r3
 80157a6:	3301      	adds	r3, #1
 80157a8:	757b      	strb	r3, [r7, #21]

  /* calculate offset from display upper border */
  yy = idx;
 80157aa:	79bb      	ldrb	r3, [r7, #6]
 80157ac:	753b      	strb	r3, [r7, #20]
  yy -= u8sl->first_pos;
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	789b      	ldrb	r3, [r3, #2]
 80157b2:	7d3a      	ldrb	r2, [r7, #20]
 80157b4:	1ad3      	subs	r3, r2, r3
 80157b6:	753b      	strb	r3, [r7, #20]
  yy *= line_height;
 80157b8:	7d3a      	ldrb	r2, [r7, #20]
 80157ba:	7d7b      	ldrb	r3, [r7, #21]
 80157bc:	fb12 f303 	smulbb	r3, r2, r3
 80157c0:	753b      	strb	r3, [r7, #20]
  yy += y;
 80157c2:	7d3a      	ldrb	r2, [r7, #20]
 80157c4:	79fb      	ldrb	r3, [r7, #7]
 80157c6:	4413      	add	r3, r2
 80157c8:	753b      	strb	r3, [r7, #20]

  /* check whether this is the current cursor line */
  if ( idx == u8sl->current_pos )
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	78db      	ldrb	r3, [r3, #3]
 80157ce:	79ba      	ldrb	r2, [r7, #6]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d103      	bne.n	80157dc <u8g2_draw_selection_list_line+0x68>
  {
    border_size = MY_BORDER_SIZE;
 80157d4:	2301      	movs	r3, #1
 80157d6:	75fb      	strb	r3, [r7, #23]
    is_invert = 1;
 80157d8:	2301      	movs	r3, #1
 80157da:	75bb      	strb	r3, [r7, #22]
  }

  /* get the line from the array */
  s = u8x8_GetStringLineStart(idx, s);
 80157dc:	79bb      	ldrb	r3, [r7, #6]
 80157de:	6a39      	ldr	r1, [r7, #32]
 80157e0:	4618      	mov	r0, r3
 80157e2:	f000 ff6f 	bl	80166c4 <u8x8_GetStringLineStart>
 80157e6:	6238      	str	r0, [r7, #32]

  /* draw the line */
  if ( s == NULL )
 80157e8:	6a3b      	ldr	r3, [r7, #32]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d101      	bne.n	80157f2 <u8g2_draw_selection_list_line+0x7e>
    s = "";
 80157ee:	4b0c      	ldr	r3, [pc, #48]	; (8015820 <u8g2_draw_selection_list_line+0xac>)
 80157f0:	623b      	str	r3, [r7, #32]
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80157f8:	3b02      	subs	r3, #2
 80157fa:	b2d9      	uxtb	r1, r3
 80157fc:	79fa      	ldrb	r2, [r7, #7]
 80157fe:	7dbb      	ldrb	r3, [r7, #22]
 8015800:	9302      	str	r3, [sp, #8]
 8015802:	7dfb      	ldrb	r3, [r7, #23]
 8015804:	9301      	str	r3, [sp, #4]
 8015806:	6a3b      	ldr	r3, [r7, #32]
 8015808:	9300      	str	r3, [sp, #0]
 801580a:	460b      	mov	r3, r1
 801580c:	2101      	movs	r1, #1
 801580e:	68f8      	ldr	r0, [r7, #12]
 8015810:	f7ff fedf 	bl	80155d2 <u8g2_DrawUTF8Line>
  return line_height;
 8015814:	7d7b      	ldrb	r3, [r7, #21]
}
 8015816:	4618      	mov	r0, r3
 8015818:	3718      	adds	r7, #24
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	08022830 	.word	0x08022830

08015824 <u8g2_DrawSelectionList>:

void u8g2_DrawSelectionList(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, const char *s)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b088      	sub	sp, #32
 8015828:	af02      	add	r7, sp, #8
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	60b9      	str	r1, [r7, #8]
 801582e:	603b      	str	r3, [r7, #0]
 8015830:	4613      	mov	r3, r2
 8015832:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for( i = 0; i < u8sl->visible; i++ )
 8015834:	2300      	movs	r3, #0
 8015836:	75fb      	strb	r3, [r7, #23]
 8015838:	e014      	b.n	8015864 <u8g2_DrawSelectionList+0x40>
  {
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	789a      	ldrb	r2, [r3, #2]
 801583e:	7dfb      	ldrb	r3, [r7, #23]
 8015840:	4413      	add	r3, r2
 8015842:	b2d9      	uxtb	r1, r3
 8015844:	79fa      	ldrb	r2, [r7, #7]
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	9300      	str	r3, [sp, #0]
 801584a:	460b      	mov	r3, r1
 801584c:	68b9      	ldr	r1, [r7, #8]
 801584e:	68f8      	ldr	r0, [r7, #12]
 8015850:	f7ff ff90 	bl	8015774 <u8g2_draw_selection_list_line>
 8015854:	4603      	mov	r3, r0
 8015856:	461a      	mov	r2, r3
 8015858:	79fb      	ldrb	r3, [r7, #7]
 801585a:	4413      	add	r3, r2
 801585c:	71fb      	strb	r3, [r7, #7]
  for( i = 0; i < u8sl->visible; i++ )
 801585e:	7dfb      	ldrb	r3, [r7, #23]
 8015860:	3301      	adds	r3, #1
 8015862:	75fb      	strb	r3, [r7, #23]
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	7dfa      	ldrb	r2, [r7, #23]
 801586a:	429a      	cmp	r2, r3
 801586c:	d3e5      	bcc.n	801583a <u8g2_DrawSelectionList+0x16>
  }
}
 801586e:	bf00      	nop
 8015870:	3718      	adds	r7, #24
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}

08015876 <u8g2_UserInterfaceSelectionList>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
	
*/
uint8_t u8g2_UserInterfaceSelectionList(u8g2_t *u8g2, const char *title, uint8_t start_pos, const char *sl)
{
 8015876:	b580      	push	{r7, lr}
 8015878:	b08a      	sub	sp, #40	; 0x28
 801587a:	af02      	add	r7, sp, #8
 801587c:	60f8      	str	r0, [r7, #12]
 801587e:	60b9      	str	r1, [r7, #8]
 8015880:	603b      	str	r3, [r7, #0]
 8015882:	4613      	mov	r3, r2
 8015884:	71fb      	strb	r3, [r7, #7]
  u8sl_t u8sl;
  u8g2_uint_t yy;

  uint8_t event;

  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 801588c:	b2da      	uxtb	r2, r3
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8015894:	b2db      	uxtb	r3, r3
 8015896:	1ad3      	subs	r3, r2, r3
 8015898:	b2db      	uxtb	r3, r3
 801589a:	3301      	adds	r3, #1
 801589c:	77bb      	strb	r3, [r7, #30]

  uint8_t title_lines = u8x8_GetStringLineCnt(title);
 801589e:	68b8      	ldr	r0, [r7, #8]
 80158a0:	f000 feed 	bl	801667e <u8x8_GetStringLineCnt>
 80158a4:	4603      	mov	r3, r0
 80158a6:	777b      	strb	r3, [r7, #29]
  uint8_t display_lines;

  
  if ( start_pos > 0 )	/* issue 112 */
 80158a8:	79fb      	ldrb	r3, [r7, #7]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d002      	beq.n	80158b4 <u8g2_UserInterfaceSelectionList+0x3e>
    start_pos--;		/* issue 112 */
 80158ae:	79fb      	ldrb	r3, [r7, #7]
 80158b0:	3b01      	subs	r3, #1
 80158b2:	71fb      	strb	r3, [r7, #7]


  if ( title_lines > 0 )
 80158b4:	7f7b      	ldrb	r3, [r7, #29]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d00f      	beq.n	80158da <u8g2_UserInterfaceSelectionList+0x64>
  {
	display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80158c0:	1eda      	subs	r2, r3, #3
 80158c2:	7fbb      	ldrb	r3, [r7, #30]
 80158c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80158c8:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 80158ca:	7f3b      	ldrb	r3, [r7, #28]
 80158cc:	753b      	strb	r3, [r7, #20]
	u8sl.visible -= title_lines;
 80158ce:	7d3a      	ldrb	r2, [r7, #20]
 80158d0:	7f7b      	ldrb	r3, [r7, #29]
 80158d2:	1ad3      	subs	r3, r2, r3
 80158d4:	b2db      	uxtb	r3, r3
 80158d6:	753b      	strb	r3, [r7, #20]
 80158d8:	e008      	b.n	80158ec <u8g2_UserInterfaceSelectionList+0x76>
  }
  else
  {
	display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80158e0:	7fbb      	ldrb	r3, [r7, #30]
 80158e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80158e6:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 80158e8:	7f3b      	ldrb	r3, [r7, #28]
 80158ea:	753b      	strb	r3, [r7, #20]
  }

  u8sl.total = u8x8_GetStringLineCnt(sl);
 80158ec:	6838      	ldr	r0, [r7, #0]
 80158ee:	f000 fec6 	bl	801667e <u8x8_GetStringLineCnt>
 80158f2:	4603      	mov	r3, r0
 80158f4:	757b      	strb	r3, [r7, #21]
  u8sl.first_pos = 0;
 80158f6:	2300      	movs	r3, #0
 80158f8:	75bb      	strb	r3, [r7, #22]
  u8sl.current_pos = start_pos;
 80158fa:	79fb      	ldrb	r3, [r7, #7]
 80158fc:	75fb      	strb	r3, [r7, #23]

  if ( u8sl.current_pos >= u8sl.total )
 80158fe:	7dfa      	ldrb	r2, [r7, #23]
 8015900:	7d7b      	ldrb	r3, [r7, #21]
 8015902:	429a      	cmp	r2, r3
 8015904:	d303      	bcc.n	801590e <u8g2_UserInterfaceSelectionList+0x98>
    u8sl.current_pos = u8sl.total-1;
 8015906:	7d7b      	ldrb	r3, [r7, #21]
 8015908:	3b01      	subs	r3, #1
 801590a:	b2db      	uxtb	r3, r3
 801590c:	75fb      	strb	r3, [r7, #23]
  if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
 801590e:	7dbb      	ldrb	r3, [r7, #22]
 8015910:	461a      	mov	r2, r3
 8015912:	7d3b      	ldrb	r3, [r7, #20]
 8015914:	4413      	add	r3, r2
 8015916:	7dfa      	ldrb	r2, [r7, #23]
 8015918:	4293      	cmp	r3, r2
 801591a:	dc06      	bgt.n	801592a <u8g2_UserInterfaceSelectionList+0xb4>
    u8sl.first_pos = u8sl.current_pos-u8sl.visible+1;
 801591c:	7dfa      	ldrb	r2, [r7, #23]
 801591e:	7d3b      	ldrb	r3, [r7, #20]
 8015920:	1ad3      	subs	r3, r2, r3
 8015922:	b2db      	uxtb	r3, r3
 8015924:	3301      	adds	r3, #1
 8015926:	b2db      	uxtb	r3, r3
 8015928:	75bb      	strb	r3, [r7, #22]

  u8g2_SetFontPosBaseline(u8g2);
 801592a:	68f8      	ldr	r0, [r7, #12]
 801592c:	f7fe ffd2 	bl	80148d4 <u8g2_SetFontPosBaseline>
  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 8015930:	68f8      	ldr	r0, [r7, #12]
 8015932:	f7fe f977 	bl	8013c24 <u8g2_FirstPage>
      do
      {
        yy = u8g2_GetAscent(u8g2);
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 801593c:	77fb      	strb	r3, [r7, #31]
        if ( title_lines > 0 )
 801593e:	7f7b      	ldrb	r3, [r7, #29]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d027      	beq.n	8015994 <u8g2_UserInterfaceSelectionList+0x11e>
        {
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 801594a:	7ffa      	ldrb	r2, [r7, #31]
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	9301      	str	r3, [sp, #4]
 8015950:	7fbb      	ldrb	r3, [r7, #30]
 8015952:	9300      	str	r3, [sp, #0]
 8015954:	460b      	mov	r3, r1
 8015956:	2100      	movs	r1, #0
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f7ff fecc 	bl	80156f6 <u8g2_DrawUTF8Lines>
 801595e:	4603      	mov	r3, r0
 8015960:	461a      	mov	r2, r3
 8015962:	7ffb      	ldrb	r3, [r7, #31]
 8015964:	4413      	add	r3, r2
 8015966:	77fb      	strb	r3, [r7, #31]
		
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 8015968:	7ffa      	ldrb	r2, [r7, #31]
 801596a:	7fbb      	ldrb	r3, [r7, #30]
 801596c:	1ad3      	subs	r3, r2, r3
 801596e:	b2da      	uxtb	r2, r3
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8015976:	b2db      	uxtb	r3, r3
 8015978:	1ad3      	subs	r3, r2, r3
 801597a:	b2db      	uxtb	r3, r3
 801597c:	3301      	adds	r3, #1
 801597e:	b2da      	uxtb	r2, r3
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015986:	2100      	movs	r1, #0
 8015988:	68f8      	ldr	r0, [r7, #12]
 801598a:	f7ff f933 	bl	8014bf4 <u8g2_DrawHLine>
		
	  yy += 3;
 801598e:	7ffb      	ldrb	r3, [r7, #31]
 8015990:	3303      	adds	r3, #3
 8015992:	77fb      	strb	r3, [r7, #31]
        }
        u8g2_DrawSelectionList(u8g2, &u8sl, yy, sl);
 8015994:	7ffa      	ldrb	r2, [r7, #31]
 8015996:	f107 0114 	add.w	r1, r7, #20
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	68f8      	ldr	r0, [r7, #12]
 801599e:	f7ff ff41 	bl	8015824 <u8g2_DrawSelectionList>
      } while( u8g2_NextPage(u8g2) );
 80159a2:	68f8      	ldr	r0, [r7, #12]
 80159a4:	f7fe f952 	bl	8013c4c <u8g2_NextPage>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d1c3      	bne.n	8015936 <u8g2_UserInterfaceSelectionList+0xc0>
#endif


      for(;;)
      {
        event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 80159ae:	68f8      	ldr	r0, [r7, #12]
 80159b0:	f7ee ff24 	bl	80047fc <u8x8_GetMenuEvent>
 80159b4:	4603      	mov	r3, r0
 80159b6:	76fb      	strb	r3, [r7, #27]
        if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 80159b8:	7efb      	ldrb	r3, [r7, #27]
 80159ba:	2b50      	cmp	r3, #80	; 0x50
 80159bc:	d103      	bne.n	80159c6 <u8g2_UserInterfaceSelectionList+0x150>
          return u8sl.current_pos+1;		/* +1, issue 112 */
 80159be:	7dfb      	ldrb	r3, [r7, #23]
 80159c0:	3301      	adds	r3, #1
 80159c2:	b2db      	uxtb	r3, r3
 80159c4:	e01c      	b.n	8015a00 <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 80159c6:	7efb      	ldrb	r3, [r7, #27]
 80159c8:	2b53      	cmp	r3, #83	; 0x53
 80159ca:	d101      	bne.n	80159d0 <u8g2_UserInterfaceSelectionList+0x15a>
          return 0;				/* issue 112: return 0 instead of start_pos */
 80159cc:	2300      	movs	r3, #0
 80159ce:	e017      	b.n	8015a00 <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 80159d0:	7efb      	ldrb	r3, [r7, #27]
 80159d2:	2b51      	cmp	r3, #81	; 0x51
 80159d4:	d002      	beq.n	80159dc <u8g2_UserInterfaceSelectionList+0x166>
 80159d6:	7efb      	ldrb	r3, [r7, #27]
 80159d8:	2b55      	cmp	r3, #85	; 0x55
 80159da:	d105      	bne.n	80159e8 <u8g2_UserInterfaceSelectionList+0x172>
        {
          u8sl_Next(&u8sl);
 80159dc:	f107 0314 	add.w	r3, r7, #20
 80159e0:	4618      	mov	r0, r3
 80159e2:	f000 fd89 	bl	80164f8 <u8sl_Next>
          break;
 80159e6:	e00a      	b.n	80159fe <u8g2_UserInterfaceSelectionList+0x188>
        }
        else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 80159e8:	7efb      	ldrb	r3, [r7, #27]
 80159ea:	2b52      	cmp	r3, #82	; 0x52
 80159ec:	d002      	beq.n	80159f4 <u8g2_UserInterfaceSelectionList+0x17e>
 80159ee:	7efb      	ldrb	r3, [r7, #27]
 80159f0:	2b54      	cmp	r3, #84	; 0x54
 80159f2:	d1dc      	bne.n	80159ae <u8g2_UserInterfaceSelectionList+0x138>
        {
          u8sl_Prev(&u8sl);
 80159f4:	f107 0314 	add.w	r3, r7, #20
 80159f8:	4618      	mov	r0, r3
 80159fa:	f000 fdaf 	bl	801655c <u8sl_Prev>
      u8g2_FirstPage(u8g2);
 80159fe:	e797      	b.n	8015930 <u8g2_UserInterfaceSelectionList+0xba>
          break;
        }
      }
  }
}
 8015a00:	4618      	mov	r0, r3
 8015a02:	3720      	adds	r7, #32
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}

08015a08 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b082      	sub	sp, #8
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2200      	movs	r2, #0
 8015a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	22ff      	movs	r2, #255	; 0xff
 8015a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	22ff      	movs	r2, #255	; 0xff
 8015a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a34:	685b      	ldr	r3, [r3, #4]
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	4798      	blx	r3
}
 8015a3a:	bf00      	nop
 8015a3c:	3708      	adds	r7, #8
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}

08015a42 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8015a42:	b580      	push	{r7, lr}
 8015a44:	b084      	sub	sp, #16
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	60f8      	str	r0, [r7, #12]
 8015a4a:	60b9      	str	r1, [r7, #8]
 8015a4c:	603b      	str	r3, [r7, #0]
 8015a4e:	4613      	mov	r3, r2
 8015a50:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	2200      	movs	r2, #0
 8015a56:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	683a      	ldr	r2, [r7, #0]
 8015a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	68ba      	ldr	r2, [r7, #8]
 8015a62:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	79fa      	ldrb	r2, [r7, #7]
 8015a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	2200      	movs	r2, #0
 8015a78:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	2200      	movs	r2, #0
 8015a80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	2201      	movs	r2, #1
 8015a88:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	2201      	movs	r2, #1
 8015a90:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	69ba      	ldr	r2, [r7, #24]
 8015a98:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	68f8      	ldr	r0, [r7, #12]
 8015aa2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8015aa4:	68f8      	ldr	r0, [r7, #12]
 8015aa6:	f7ff ffaf 	bl	8015a08 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8015aaa:	68f8      	ldr	r0, [r7, #12]
 8015aac:	f7fe ff12 	bl	80148d4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8015ab8:	bf00      	nop
 8015aba:	3710      	adds	r7, #16
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}

08015ac0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	b085      	sub	sp, #20
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015ad4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8015ad6:	7bfb      	ldrb	r3, [r7, #15]
 8015ad8:	00db      	lsls	r3, r3, #3
 8015ada:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	7bfa      	ldrb	r2, [r7, #15]
 8015ae0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	7c1b      	ldrb	r3, [r3, #16]
 8015ae8:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
 8015aec:	2b1f      	cmp	r3, #31
 8015aee:	d901      	bls.n	8015af4 <u8g2_update_dimension_common+0x34>
    t = 31;
 8015af0:	231f      	movs	r3, #31
 8015af2:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8015af4:	7bfb      	ldrb	r3, [r7, #15]
 8015af6:	00db      	lsls	r3, r3, #3
 8015af8:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	7bfa      	ldrb	r2, [r7, #15]
 8015afe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015b08:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8015b0a:	7bfb      	ldrb	r3, [r7, #15]
 8015b0c:	00db      	lsls	r3, r3, #3
 8015b0e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	7bfa      	ldrb	r2, [r7, #15]
 8015b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015b1e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8015b20:	7bfb      	ldrb	r3, [r7, #15]
 8015b22:	687a      	ldr	r2, [r7, #4]
 8015b24:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8015b28:	4413      	add	r3, r2
 8015b2a:	68ba      	ldr	r2, [r7, #8]
 8015b2c:	7c52      	ldrb	r2, [r2, #17]
 8015b2e:	4293      	cmp	r3, r2
 8015b30:	dd06      	ble.n	8015b40 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	7c5a      	ldrb	r2, [r3, #17]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015b3c:	1ad3      	subs	r3, r2, r3
 8015b3e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8015b40:	7bfb      	ldrb	r3, [r7, #15]
 8015b42:	00db      	lsls	r3, r3, #3
 8015b44:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8015b64:	7bfb      	ldrb	r3, [r7, #15]
 8015b66:	4413      	add	r3, r2
 8015b68:	b2da      	uxtb	r2, r3
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	22f0      	movs	r2, #240	; 0xf0
 8015b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	8a9b      	ldrh	r3, [r3, #20]
 8015b7c:	2bf0      	cmp	r3, #240	; 0xf0
 8015b7e:	d805      	bhi.n	8015b8c <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	8a9b      	ldrh	r3, [r3, #20]
 8015b84:	b2da      	uxtb	r2, r3
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	8adb      	ldrh	r3, [r3, #22]
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8015b98:	bf00      	nop
 8015b9a:	3714      	adds	r7, #20
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba2:	4770      	bx	lr

08015ba4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b084      	sub	sp, #16
 8015ba8:	af02      	add	r7, sp, #8
 8015baa:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015bc4:	9300      	str	r3, [sp, #0]
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f7ff fa3c 	bl	8015046 <u8g2_IsIntersection>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d104      	bne.n	8015bde <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8015bdc:	e03b      	b.n	8015c56 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2201      	movs	r2, #1
 8015be2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d205      	bcs.n	8015c02 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d905      	bls.n	8015c1e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d205      	bcs.n	8015c3a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d905      	bls.n	8015c56 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8015c56:	bf00      	nop
 8015c58:	3708      	adds	r7, #8
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}

08015c5e <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8015c5e:	b580      	push	{r7, lr}
 8015c60:	b082      	sub	sp, #8
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f7ff ff2a 	bl	8015ac0 <u8g2_update_dimension_common>
}
 8015c6c:	bf00      	nop
 8015c6e:	3708      	adds	r7, #8
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}

08015c74 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2200      	movs	r2, #0
 8015c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2200      	movs	r2, #0
 8015c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d30a      	bcc.n	8015cbe <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015cb4:	1ad3      	subs	r3, r2, r3
 8015cb6:	b2da      	uxtb	r2, r3
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015cca:	1ad3      	subs	r3, r2, r3
 8015ccc:	b2da      	uxtb	r2, r3
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f7ff ff65 	bl	8015ba4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8015cda:	bf00      	nop
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015ce2:	b580      	push	{r7, lr}
 8015ce4:	b086      	sub	sp, #24
 8015ce6:	af02      	add	r7, sp, #8
 8015ce8:	6078      	str	r0, [r7, #4]
 8015cea:	4608      	mov	r0, r1
 8015cec:	4611      	mov	r1, r2
 8015cee:	461a      	mov	r2, r3
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	70fb      	strb	r3, [r7, #3]
 8015cf4:	460b      	mov	r3, r1
 8015cf6:	70bb      	strb	r3, [r7, #2]
 8015cf8:	4613      	mov	r3, r2
 8015cfa:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015d02:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8015d04:	7bba      	ldrb	r2, [r7, #14]
 8015d06:	78bb      	ldrb	r3, [r7, #2]
 8015d08:	1ad3      	subs	r3, r2, r3
 8015d0a:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015d12:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8015d14:	7bfa      	ldrb	r2, [r7, #15]
 8015d16:	78fb      	ldrb	r3, [r7, #3]
 8015d18:	1ad3      	subs	r3, r2, r3
 8015d1a:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8015d1c:	7e3b      	ldrb	r3, [r7, #24]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d107      	bne.n	8015d32 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8015d22:	7bbb      	ldrb	r3, [r7, #14]
 8015d24:	3b01      	subs	r3, #1
 8015d26:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8015d28:	7bfa      	ldrb	r2, [r7, #15]
 8015d2a:	787b      	ldrb	r3, [r7, #1]
 8015d2c:	1ad3      	subs	r3, r2, r3
 8015d2e:	73fb      	strb	r3, [r7, #15]
 8015d30:	e009      	b.n	8015d46 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8015d32:	7e3b      	ldrb	r3, [r7, #24]
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	d106      	bne.n	8015d46 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8015d38:	7bfb      	ldrb	r3, [r7, #15]
 8015d3a:	3b01      	subs	r3, #1
 8015d3c:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8015d3e:	7bba      	ldrb	r2, [r7, #14]
 8015d40:	787b      	ldrb	r3, [r7, #1]
 8015d42:	1ad3      	subs	r3, r2, r3
 8015d44:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8015d46:	7878      	ldrb	r0, [r7, #1]
 8015d48:	7bba      	ldrb	r2, [r7, #14]
 8015d4a:	7bf9      	ldrb	r1, [r7, #15]
 8015d4c:	7e3b      	ldrb	r3, [r7, #24]
 8015d4e:	9300      	str	r3, [sp, #0]
 8015d50:	4603      	mov	r3, r0
 8015d52:	6878      	ldr	r0, [r7, #4]
 8015d54:	f7fe feaa 	bl	8014aac <u8g2_draw_hv_line_2dir>
}
 8015d58:	bf00      	nop
 8015d5a:	3710      	adds	r7, #16
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}

08015d60 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8015d60:	b480      	push	{r7}
 8015d62:	b083      	sub	sp, #12
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8015d70:	bf00      	nop
 8015d72:	370c      	adds	r7, #12
 8015d74:	46bd      	mov	sp, r7
 8015d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7a:	4770      	bx	lr

08015d7c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8015d7c:	b480      	push	{r7}
 8015d7e:	b083      	sub	sp, #12
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	460b      	mov	r3, r1
 8015d86:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8015d88:	78fb      	ldrb	r3, [r7, #3]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d002      	beq.n	8015d94 <u8x8_ascii_next+0x18>
 8015d8e:	78fb      	ldrb	r3, [r7, #3]
 8015d90:	2b0a      	cmp	r3, #10
 8015d92:	d102      	bne.n	8015d9a <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8015d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d98:	e001      	b.n	8015d9e <u8x8_ascii_next+0x22>
  return b;
 8015d9a:	78fb      	ldrb	r3, [r7, #3]
 8015d9c:	b29b      	uxth	r3, r3
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	370c      	adds	r7, #12
 8015da2:	46bd      	mov	sp, r7
 8015da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da8:	4770      	bx	lr

08015daa <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8015daa:	b480      	push	{r7}
 8015dac:	b083      	sub	sp, #12
 8015dae:	af00      	add	r7, sp, #0
 8015db0:	6078      	str	r0, [r7, #4]
 8015db2:	460b      	mov	r3, r1
 8015db4:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8015db6:	78fb      	ldrb	r3, [r7, #3]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d002      	beq.n	8015dc2 <u8x8_utf8_next+0x18>
 8015dbc:	78fb      	ldrb	r3, [r7, #3]
 8015dbe:	2b0a      	cmp	r3, #10
 8015dc0:	d102      	bne.n	8015dc8 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8015dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015dc6:	e06e      	b.n	8015ea6 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d145      	bne.n	8015e5e <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8015dd2:	78fb      	ldrb	r3, [r7, #3]
 8015dd4:	2bfb      	cmp	r3, #251	; 0xfb
 8015dd6:	d908      	bls.n	8015dea <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2205      	movs	r2, #5
 8015ddc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8015de0:	78fb      	ldrb	r3, [r7, #3]
 8015de2:	f003 0301 	and.w	r3, r3, #1
 8015de6:	70fb      	strb	r3, [r7, #3]
 8015de8:	e032      	b.n	8015e50 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8015dea:	78fb      	ldrb	r3, [r7, #3]
 8015dec:	2bf7      	cmp	r3, #247	; 0xf7
 8015dee:	d908      	bls.n	8015e02 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2204      	movs	r2, #4
 8015df4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8015df8:	78fb      	ldrb	r3, [r7, #3]
 8015dfa:	f003 0303 	and.w	r3, r3, #3
 8015dfe:	70fb      	strb	r3, [r7, #3]
 8015e00:	e026      	b.n	8015e50 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8015e02:	78fb      	ldrb	r3, [r7, #3]
 8015e04:	2bef      	cmp	r3, #239	; 0xef
 8015e06:	d908      	bls.n	8015e1a <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	2203      	movs	r2, #3
 8015e0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8015e10:	78fb      	ldrb	r3, [r7, #3]
 8015e12:	f003 0307 	and.w	r3, r3, #7
 8015e16:	70fb      	strb	r3, [r7, #3]
 8015e18:	e01a      	b.n	8015e50 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8015e1a:	78fb      	ldrb	r3, [r7, #3]
 8015e1c:	2bdf      	cmp	r3, #223	; 0xdf
 8015e1e:	d908      	bls.n	8015e32 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2202      	movs	r2, #2
 8015e24:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8015e28:	78fb      	ldrb	r3, [r7, #3]
 8015e2a:	f003 030f 	and.w	r3, r3, #15
 8015e2e:	70fb      	strb	r3, [r7, #3]
 8015e30:	e00e      	b.n	8015e50 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8015e32:	78fb      	ldrb	r3, [r7, #3]
 8015e34:	2bbf      	cmp	r3, #191	; 0xbf
 8015e36:	d908      	bls.n	8015e4a <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2201      	movs	r2, #1
 8015e3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8015e40:	78fb      	ldrb	r3, [r7, #3]
 8015e42:	f003 031f 	and.w	r3, r3, #31
 8015e46:	70fb      	strb	r3, [r7, #3]
 8015e48:	e002      	b.n	8015e50 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8015e4a:	78fb      	ldrb	r3, [r7, #3]
 8015e4c:	b29b      	uxth	r3, r3
 8015e4e:	e02a      	b.n	8015ea6 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8015e50:	78fb      	ldrb	r3, [r7, #3]
 8015e52:	b29a      	uxth	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8015e58:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8015e5c:	e023      	b.n	8015ea6 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015e64:	3b01      	subs	r3, #1
 8015e66:	b2da      	uxtb	r2, r3
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	8c1b      	ldrh	r3, [r3, #32]
 8015e72:	019b      	lsls	r3, r3, #6
 8015e74:	b29a      	uxth	r2, r3
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8015e7a:	78fb      	ldrb	r3, [r7, #3]
 8015e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e80:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	8c1a      	ldrh	r2, [r3, #32]
 8015e86:	78fb      	ldrb	r3, [r7, #3]
 8015e88:	b29b      	uxth	r3, r3
 8015e8a:	4313      	orrs	r3, r2
 8015e8c:	b29a      	uxth	r2, r3
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d002      	beq.n	8015ea2 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8015e9c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8015ea0:	e001      	b.n	8015ea6 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	8c1b      	ldrh	r3, [r3, #32]
}
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	370c      	adds	r7, #12
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb0:	4770      	bx	lr

08015eb2 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8015eb2:	b590      	push	{r4, r7, lr}
 8015eb4:	b085      	sub	sp, #20
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	60f8      	str	r0, [r7, #12]
 8015eba:	460b      	mov	r3, r1
 8015ebc:	607a      	str	r2, [r7, #4]
 8015ebe:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	691c      	ldr	r4, [r3, #16]
 8015ec4:	7afa      	ldrb	r2, [r7, #11]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2117      	movs	r1, #23
 8015eca:	68f8      	ldr	r0, [r7, #12]
 8015ecc:	47a0      	blx	r4
 8015ece:	4603      	mov	r3, r0
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3714      	adds	r7, #20
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd90      	pop	{r4, r7, pc}

08015ed8 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b082      	sub	sp, #8
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
 8015ee0:	460b      	mov	r3, r1
 8015ee2:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8015ee4:	1cfb      	adds	r3, r7, #3
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	2101      	movs	r1, #1
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f7ff ffe1 	bl	8015eb2 <u8x8_byte_SendBytes>
 8015ef0:	4603      	mov	r3, r0
}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3708      	adds	r7, #8
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}

08015efa <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8015efa:	b590      	push	{r4, r7, lr}
 8015efc:	b083      	sub	sp, #12
 8015efe:	af00      	add	r7, sp, #0
 8015f00:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	691c      	ldr	r4, [r3, #16]
 8015f06:	2300      	movs	r3, #0
 8015f08:	2200      	movs	r2, #0
 8015f0a:	2118      	movs	r1, #24
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	47a0      	blx	r4
 8015f10:	4603      	mov	r3, r0
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	370c      	adds	r7, #12
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd90      	pop	{r4, r7, pc}

08015f1a <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8015f1a:	b590      	push	{r4, r7, lr}
 8015f1c:	b083      	sub	sp, #12
 8015f1e:	af00      	add	r7, sp, #0
 8015f20:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	691c      	ldr	r4, [r3, #16]
 8015f26:	2300      	movs	r3, #0
 8015f28:	2200      	movs	r2, #0
 8015f2a:	2119      	movs	r1, #25
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	47a0      	blx	r4
 8015f30:	4603      	mov	r3, r0
}
 8015f32:	4618      	mov	r0, r3
 8015f34:	370c      	adds	r7, #12
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bd90      	pop	{r4, r7, pc}

08015f3a <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8015f3a:	b590      	push	{r4, r7, lr}
 8015f3c:	b083      	sub	sp, #12
 8015f3e:	af00      	add	r7, sp, #0
 8015f40:	6078      	str	r0, [r7, #4]
 8015f42:	460b      	mov	r3, r1
 8015f44:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	68dc      	ldr	r4, [r3, #12]
 8015f4a:	78fa      	ldrb	r2, [r7, #3]
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	2115      	movs	r1, #21
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	47a0      	blx	r4
 8015f54:	4603      	mov	r3, r0
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	370c      	adds	r7, #12
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd90      	pop	{r4, r7, pc}

08015f5e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8015f5e:	b590      	push	{r4, r7, lr}
 8015f60:	b083      	sub	sp, #12
 8015f62:	af00      	add	r7, sp, #0
 8015f64:	6078      	str	r0, [r7, #4]
 8015f66:	460b      	mov	r3, r1
 8015f68:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	68dc      	ldr	r4, [r3, #12]
 8015f6e:	78fa      	ldrb	r2, [r7, #3]
 8015f70:	2300      	movs	r3, #0
 8015f72:	2116      	movs	r1, #22
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	47a0      	blx	r4
 8015f78:	4603      	mov	r3, r0
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	370c      	adds	r7, #12
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd90      	pop	{r4, r7, pc}

08015f82 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8015f82:	b590      	push	{r4, r7, lr}
 8015f84:	b085      	sub	sp, #20
 8015f86:	af00      	add	r7, sp, #0
 8015f88:	60f8      	str	r0, [r7, #12]
 8015f8a:	460b      	mov	r3, r1
 8015f8c:	607a      	str	r2, [r7, #4]
 8015f8e:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	68dc      	ldr	r4, [r3, #12]
 8015f94:	7afa      	ldrb	r2, [r7, #11]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	2117      	movs	r1, #23
 8015f9a:	68f8      	ldr	r0, [r7, #12]
 8015f9c:	47a0      	blx	r4
 8015f9e:	4603      	mov	r3, r0
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3714      	adds	r7, #20
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd90      	pop	{r4, r7, pc}

08015fa8 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8015fa8:	b590      	push	{r4, r7, lr}
 8015faa:	b083      	sub	sp, #12
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	68dc      	ldr	r4, [r3, #12]
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	2118      	movs	r1, #24
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	47a0      	blx	r4
 8015fbe:	4603      	mov	r3, r0
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	370c      	adds	r7, #12
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd90      	pop	{r4, r7, pc}

08015fc8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8015fc8:	b590      	push	{r4, r7, lr}
 8015fca:	b083      	sub	sp, #12
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	68dc      	ldr	r4, [r3, #12]
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	2119      	movs	r1, #25
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	47a0      	blx	r4
 8015fde:	4603      	mov	r3, r0
}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	370c      	adds	r7, #12
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd90      	pop	{r4, r7, pc}

08015fe8 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8015fe8:	b590      	push	{r4, r7, lr}
 8015fea:	b085      	sub	sp, #20
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
 8015ff0:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	73fb      	strb	r3, [r7, #15]
    data++;
 8015ff8:	683b      	ldr	r3, [r7, #0]
 8015ffa:	3301      	adds	r3, #1
 8015ffc:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8015ffe:	7bfb      	ldrb	r3, [r7, #15]
 8016000:	2b17      	cmp	r3, #23
 8016002:	d017      	beq.n	8016034 <u8x8_cad_SendSequence+0x4c>
 8016004:	2b17      	cmp	r3, #23
 8016006:	dc02      	bgt.n	801600e <u8x8_cad_SendSequence+0x26>
 8016008:	2b15      	cmp	r3, #21
 801600a:	db37      	blt.n	801607c <u8x8_cad_SendSequence+0x94>
 801600c:	e004      	b.n	8016018 <u8x8_cad_SendSequence+0x30>
 801600e:	2b19      	cmp	r3, #25
 8016010:	dd1e      	ble.n	8016050 <u8x8_cad_SendSequence+0x68>
 8016012:	2bfe      	cmp	r3, #254	; 0xfe
 8016014:	d024      	beq.n	8016060 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8016016:	e031      	b.n	801607c <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8016018:	683b      	ldr	r3, [r7, #0]
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	68dc      	ldr	r4, [r3, #12]
 8016022:	7bba      	ldrb	r2, [r7, #14]
 8016024:	7bf9      	ldrb	r1, [r7, #15]
 8016026:	2300      	movs	r3, #0
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	47a0      	blx	r4
	  data++;
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	3301      	adds	r3, #1
 8016030:	603b      	str	r3, [r7, #0]
	  break;
 8016032:	e022      	b.n	801607a <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8016034:	683b      	ldr	r3, [r7, #0]
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 801603a:	f107 030e 	add.w	r3, r7, #14
 801603e:	461a      	mov	r2, r3
 8016040:	2101      	movs	r1, #1
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f7ff ff9d 	bl	8015f82 <u8x8_cad_SendData>
	  data++;
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	3301      	adds	r3, #1
 801604c:	603b      	str	r3, [r7, #0]
	  break;
 801604e:	e014      	b.n	801607a <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	68dc      	ldr	r4, [r3, #12]
 8016054:	7bf9      	ldrb	r1, [r7, #15]
 8016056:	2300      	movs	r3, #0
 8016058:	2200      	movs	r2, #0
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	47a0      	blx	r4
	  break;
 801605e:	e00c      	b.n	801607a <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8016066:	7bbb      	ldrb	r3, [r7, #14]
 8016068:	461a      	mov	r2, r3
 801606a:	2129      	movs	r1, #41	; 0x29
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	f000 fa30 	bl	80164d2 <u8x8_gpio_call>
	  data++;
 8016072:	683b      	ldr	r3, [r7, #0]
 8016074:	3301      	adds	r3, #1
 8016076:	603b      	str	r3, [r7, #0]
	  break;
 8016078:	bf00      	nop
    cmd = *data;
 801607a:	e7ba      	b.n	8015ff2 <u8x8_cad_SendSequence+0xa>
	return;
 801607c:	bf00      	nop
    }
  }
}
 801607e:	3714      	adds	r7, #20
 8016080:	46bd      	mov	sp, r7
 8016082:	bd90      	pop	{r4, r7, pc}

08016084 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8016084:	b590      	push	{r4, r7, lr}
 8016086:	b085      	sub	sp, #20
 8016088:	af00      	add	r7, sp, #0
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	460b      	mov	r3, r1
 801608e:	607a      	str	r2, [r7, #4]
 8016090:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8016092:	68f8      	ldr	r0, [r7, #12]
 8016094:	f7ff ff31 	bl	8015efa <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8016098:	2140      	movs	r1, #64	; 0x40
 801609a:	68f8      	ldr	r0, [r7, #12]
 801609c:	f7ff ff1c 	bl	8015ed8 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	691c      	ldr	r4, [r3, #16]
 80160a4:	7afa      	ldrb	r2, [r7, #11]
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	2117      	movs	r1, #23
 80160aa:	68f8      	ldr	r0, [r7, #12]
 80160ac:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80160ae:	68f8      	ldr	r0, [r7, #12]
 80160b0:	f7ff ff33 	bl	8015f1a <u8x8_byte_EndTransfer>
}
 80160b4:	bf00      	nop
 80160b6:	3714      	adds	r7, #20
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd90      	pop	{r4, r7, pc}

080160bc <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80160bc:	b590      	push	{r4, r7, lr}
 80160be:	b087      	sub	sp, #28
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	60f8      	str	r0, [r7, #12]
 80160c4:	607b      	str	r3, [r7, #4]
 80160c6:	460b      	mov	r3, r1
 80160c8:	72fb      	strb	r3, [r7, #11]
 80160ca:	4613      	mov	r3, r2
 80160cc:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 80160ce:	7afb      	ldrb	r3, [r7, #11]
 80160d0:	3b14      	subs	r3, #20
 80160d2:	2b05      	cmp	r3, #5
 80160d4:	d848      	bhi.n	8016168 <u8x8_cad_ssd13xx_i2c+0xac>
 80160d6:	a201      	add	r2, pc, #4	; (adr r2, 80160dc <u8x8_cad_ssd13xx_i2c+0x20>)
 80160d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160dc:	08016145 	.word	0x08016145
 80160e0:	080160f5 	.word	0x080160f5
 80160e4:	080160f5 	.word	0x080160f5
 80160e8:	08016115 	.word	0x08016115
 80160ec:	0801616d 	.word	0x0801616d
 80160f0:	0801616d 	.word	0x0801616d
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	f7ff ff00 	bl	8015efa <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 80160fa:	2100      	movs	r1, #0
 80160fc:	68f8      	ldr	r0, [r7, #12]
 80160fe:	f7ff feeb 	bl	8015ed8 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8016102:	7abb      	ldrb	r3, [r7, #10]
 8016104:	4619      	mov	r1, r3
 8016106:	68f8      	ldr	r0, [r7, #12]
 8016108:	f7ff fee6 	bl	8015ed8 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 801610c:	68f8      	ldr	r0, [r7, #12]
 801610e:	f7ff ff04 	bl	8015f1a <u8x8_byte_EndTransfer>
      break;
 8016112:	e02c      	b.n	801616e <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	617b      	str	r3, [r7, #20]
      while( arg_int > 24 )
 8016118:	e00a      	b.n	8016130 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 801611a:	697a      	ldr	r2, [r7, #20]
 801611c:	2118      	movs	r1, #24
 801611e:	68f8      	ldr	r0, [r7, #12]
 8016120:	f7ff ffb0 	bl	8016084 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8016124:	7abb      	ldrb	r3, [r7, #10]
 8016126:	3b18      	subs	r3, #24
 8016128:	72bb      	strb	r3, [r7, #10]
	p+=24;
 801612a:	697b      	ldr	r3, [r7, #20]
 801612c:	3318      	adds	r3, #24
 801612e:	617b      	str	r3, [r7, #20]
      while( arg_int > 24 )
 8016130:	7abb      	ldrb	r3, [r7, #10]
 8016132:	2b18      	cmp	r3, #24
 8016134:	d8f1      	bhi.n	801611a <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8016136:	7abb      	ldrb	r3, [r7, #10]
 8016138:	697a      	ldr	r2, [r7, #20]
 801613a:	4619      	mov	r1, r3
 801613c:	68f8      	ldr	r0, [r7, #12]
 801613e:	f7ff ffa1 	bl	8016084 <u8x8_i2c_data_transfer>
      break;
 8016142:	e014      	b.n	801616e <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801614a:	2bff      	cmp	r3, #255	; 0xff
 801614c:	d103      	bne.n	8016156 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2278      	movs	r2, #120	; 0x78
 8016152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	691c      	ldr	r4, [r3, #16]
 801615a:	7aba      	ldrb	r2, [r7, #10]
 801615c:	7af9      	ldrb	r1, [r7, #11]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	68f8      	ldr	r0, [r7, #12]
 8016162:	47a0      	blx	r4
 8016164:	4603      	mov	r3, r0
 8016166:	e003      	b.n	8016170 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8016168:	2300      	movs	r3, #0
 801616a:	e001      	b.n	8016170 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 801616c:	bf00      	nop
  }
  return 1;
 801616e:	2301      	movs	r3, #1
}
 8016170:	4618      	mov	r0, r3
 8016172:	371c      	adds	r7, #28
 8016174:	46bd      	mov	sp, r7
 8016176:	bd90      	pop	{r4, r7, pc}

08016178 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b086      	sub	sp, #24
 801617c:	af00      	add	r7, sp, #0
 801617e:	60f8      	str	r0, [r7, #12]
 8016180:	607b      	str	r3, [r7, #4]
 8016182:	460b      	mov	r3, r1
 8016184:	72fb      	strb	r3, [r7, #11]
 8016186:	4613      	mov	r3, r2
 8016188:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 801618a:	7afb      	ldrb	r3, [r7, #11]
 801618c:	3b0b      	subs	r3, #11
 801618e:	2b04      	cmp	r3, #4
 8016190:	f200 808a 	bhi.w	80162a8 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8016194:	a201      	add	r2, pc, #4	; (adr r2, 801619c <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8016196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801619a:	bf00      	nop
 801619c:	080161b1 	.word	0x080161b1
 80161a0:	080162a9 	.word	0x080162a9
 80161a4:	080161cb 	.word	0x080161cb
 80161a8:	080161fd 	.word	0x080161fd
 80161ac:	0801621d 	.word	0x0801621d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80161b0:	7abb      	ldrb	r3, [r7, #10]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d104      	bne.n	80161c0 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80161b6:	4940      	ldr	r1, [pc, #256]	; (80162b8 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 80161b8:	68f8      	ldr	r0, [r7, #12]
 80161ba:	f7ff ff15 	bl	8015fe8 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80161be:	e075      	b.n	80162ac <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80161c0:	493e      	ldr	r1, [pc, #248]	; (80162bc <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80161c2:	68f8      	ldr	r0, [r7, #12]
 80161c4:	f7ff ff10 	bl	8015fe8 <u8x8_cad_SendSequence>
      break;
 80161c8:	e070      	b.n	80162ac <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80161ca:	7abb      	ldrb	r3, [r7, #10]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d10a      	bne.n	80161e6 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80161d0:	493b      	ldr	r1, [pc, #236]	; (80162c0 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80161d2:	68f8      	ldr	r0, [r7, #12]
 80161d4:	f7ff ff08 	bl	8015fe8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	7c9a      	ldrb	r2, [r3, #18]
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80161e4:	e062      	b.n	80162ac <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80161e6:	4937      	ldr	r1, [pc, #220]	; (80162c4 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80161e8:	68f8      	ldr	r0, [r7, #12]
 80161ea:	f7ff fefd 	bl	8015fe8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	7cda      	ldrb	r2, [r3, #19]
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80161fa:	e057      	b.n	80162ac <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80161fc:	68f8      	ldr	r0, [r7, #12]
 80161fe:	f7ff fed3 	bl	8015fa8 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8016202:	2181      	movs	r1, #129	; 0x81
 8016204:	68f8      	ldr	r0, [r7, #12]
 8016206:	f7ff fe98 	bl	8015f3a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 801620a:	7abb      	ldrb	r3, [r7, #10]
 801620c:	4619      	mov	r1, r3
 801620e:	68f8      	ldr	r0, [r7, #12]
 8016210:	f7ff fea5 	bl	8015f5e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8016214:	68f8      	ldr	r0, [r7, #12]
 8016216:	f7ff fed7 	bl	8015fc8 <u8x8_cad_EndTransfer>
      break;
 801621a:	e047      	b.n	80162ac <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 801621c:	68f8      	ldr	r0, [r7, #12]
 801621e:	f7ff fec3 	bl	8015fa8 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	795b      	ldrb	r3, [r3, #5]
 8016226:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8016228:	7dfb      	ldrb	r3, [r7, #23]
 801622a:	00db      	lsls	r3, r3, #3
 801622c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8016234:	7dfb      	ldrb	r3, [r7, #23]
 8016236:	4413      	add	r3, r2
 8016238:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 801623a:	2140      	movs	r1, #64	; 0x40
 801623c:	68f8      	ldr	r0, [r7, #12]
 801623e:	f7ff fe7c 	bl	8015f3a <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8016242:	7dfb      	ldrb	r3, [r7, #23]
 8016244:	091b      	lsrs	r3, r3, #4
 8016246:	b2db      	uxtb	r3, r3
 8016248:	f043 0310 	orr.w	r3, r3, #16
 801624c:	b2db      	uxtb	r3, r3
 801624e:	4619      	mov	r1, r3
 8016250:	68f8      	ldr	r0, [r7, #12]
 8016252:	f7ff fe72 	bl	8015f3a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8016256:	7dfb      	ldrb	r3, [r7, #23]
 8016258:	f003 030f 	and.w	r3, r3, #15
 801625c:	b2db      	uxtb	r3, r3
 801625e:	4619      	mov	r1, r3
 8016260:	68f8      	ldr	r0, [r7, #12]
 8016262:	f7ff fe7c 	bl	8015f5e <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	799b      	ldrb	r3, [r3, #6]
 801626a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 801626e:	b2db      	uxtb	r3, r3
 8016270:	4619      	mov	r1, r3
 8016272:	68f8      	ldr	r0, [r7, #12]
 8016274:	f7ff fe73 	bl	8015f5e <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	791b      	ldrb	r3, [r3, #4]
 801627c:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8016284:	7dbb      	ldrb	r3, [r7, #22]
 8016286:	00db      	lsls	r3, r3, #3
 8016288:	b2db      	uxtb	r3, r3
 801628a:	693a      	ldr	r2, [r7, #16]
 801628c:	4619      	mov	r1, r3
 801628e:	68f8      	ldr	r0, [r7, #12]
 8016290:	f7ff fe77 	bl	8015f82 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8016294:	7abb      	ldrb	r3, [r7, #10]
 8016296:	3b01      	subs	r3, #1
 8016298:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 801629a:	7abb      	ldrb	r3, [r7, #10]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d1eb      	bne.n	8016278 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80162a0:	68f8      	ldr	r0, [r7, #12]
 80162a2:	f7ff fe91 	bl	8015fc8 <u8x8_cad_EndTransfer>
      break;
 80162a6:	e001      	b.n	80162ac <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80162a8:	2300      	movs	r3, #0
 80162aa:	e000      	b.n	80162ae <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80162ac:	2301      	movs	r3, #1
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3718      	adds	r7, #24
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	08022eac 	.word	0x08022eac
 80162bc:	08022eb4 	.word	0x08022eb4
 80162c0:	08022ebc 	.word	0x08022ebc
 80162c4:	08022ec4 	.word	0x08022ec4

080162c8 <u8x8_d_sh1106_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	60f8      	str	r0, [r7, #12]
 80162d0:	607b      	str	r3, [r7, #4]
 80162d2:	460b      	mov	r3, r1
 80162d4:	72fb      	strb	r3, [r7, #11]
 80162d6:	4613      	mov	r3, r2
 80162d8:	72bb      	strb	r3, [r7, #10]
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80162da:	7aba      	ldrb	r2, [r7, #10]
 80162dc:	7af9      	ldrb	r1, [r7, #11]
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	68f8      	ldr	r0, [r7, #12]
 80162e2:	f7ff ff49 	bl	8016178 <u8x8_d_ssd1306_sh1106_generic>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d001      	beq.n	80162f0 <u8x8_d_sh1106_128x64_noname+0x28>
    return 1;
 80162ec:	2301      	movs	r3, #1
 80162ee:	e014      	b.n	801631a <u8x8_d_sh1106_128x64_noname+0x52>
  
  switch(msg)
 80162f0:	7afb      	ldrb	r3, [r7, #11]
 80162f2:	2b09      	cmp	r3, #9
 80162f4:	d009      	beq.n	801630a <u8x8_d_sh1106_128x64_noname+0x42>
 80162f6:	2b0a      	cmp	r3, #10
 80162f8:	d10c      	bne.n	8016314 <u8x8_d_sh1106_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80162fa:	68f8      	ldr	r0, [r7, #12]
 80162fc:	f000 f82a 	bl	8016354 <u8x8_d_helper_display_init>
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8016300:	4908      	ldr	r1, [pc, #32]	; (8016324 <u8x8_d_sh1106_128x64_noname+0x5c>)
 8016302:	68f8      	ldr	r0, [r7, #12]
 8016304:	f7ff fe70 	bl	8015fe8 <u8x8_cad_SendSequence>
      break;
 8016308:	e006      	b.n	8016318 <u8x8_d_sh1106_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
 801630a:	4907      	ldr	r1, [pc, #28]	; (8016328 <u8x8_d_sh1106_128x64_noname+0x60>)
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	f000 f80d 	bl	801632c <u8x8_d_helper_display_setup_memory>
      break;
 8016312:	e001      	b.n	8016318 <u8x8_d_sh1106_128x64_noname+0x50>
    default:
      return 0;
 8016314:	2300      	movs	r3, #0
 8016316:	e000      	b.n	801631a <u8x8_d_sh1106_128x64_noname+0x52>
  }
  return 1;
 8016318:	2301      	movs	r3, #1
    
}
 801631a:	4618      	mov	r0, r3
 801631c:	3710      	adds	r7, #16
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}
 8016322:	bf00      	nop
 8016324:	08022e74 	.word	0x08022e74
 8016328:	08022ecc 	.word	0x08022ecc

0801632c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 801632c:	b480      	push	{r7}
 801632e:	b083      	sub	sp, #12
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
 8016334:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	683a      	ldr	r2, [r7, #0]
 801633a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	7c9a      	ldrb	r2, [r3, #18]
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8016348:	bf00      	nop
 801634a:	370c      	adds	r7, #12
 801634c:	46bd      	mov	sp, r7
 801634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016352:	4770      	bx	lr

08016354 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8016354:	b590      	push	{r4, r7, lr}
 8016356:	b083      	sub	sp, #12
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	695c      	ldr	r4, [r3, #20]
 8016360:	2300      	movs	r3, #0
 8016362:	2200      	movs	r2, #0
 8016364:	2128      	movs	r1, #40	; 0x28
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	68dc      	ldr	r4, [r3, #12]
 801636e:	2300      	movs	r3, #0
 8016370:	2200      	movs	r2, #0
 8016372:	2114      	movs	r1, #20
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8016378:	2201      	movs	r2, #1
 801637a:	214b      	movs	r1, #75	; 0x4b
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f000 f8a8 	bl	80164d2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	791b      	ldrb	r3, [r3, #4]
 8016388:	461a      	mov	r2, r3
 801638a:	2129      	movs	r1, #41	; 0x29
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f000 f8a0 	bl	80164d2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8016392:	2200      	movs	r2, #0
 8016394:	214b      	movs	r1, #75	; 0x4b
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f000 f89b 	bl	80164d2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	791b      	ldrb	r3, [r3, #4]
 80163a2:	461a      	mov	r2, r3
 80163a4:	2129      	movs	r1, #41	; 0x29
 80163a6:	6878      	ldr	r0, [r7, #4]
 80163a8:	f000 f893 	bl	80164d2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80163ac:	2201      	movs	r2, #1
 80163ae:	214b      	movs	r1, #75	; 0x4b
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f000 f88e 	bl	80164d2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	795b      	ldrb	r3, [r3, #5]
 80163bc:	461a      	mov	r2, r3
 80163be:	2129      	movs	r1, #41	; 0x29
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f000 f886 	bl	80164d2 <u8x8_gpio_call>
}    
 80163c6:	bf00      	nop
 80163c8:	370c      	adds	r7, #12
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd90      	pop	{r4, r7, pc}

080163ce <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80163ce:	b590      	push	{r4, r7, lr}
 80163d0:	b085      	sub	sp, #20
 80163d2:	af00      	add	r7, sp, #0
 80163d4:	6078      	str	r0, [r7, #4]
 80163d6:	4608      	mov	r0, r1
 80163d8:	4611      	mov	r1, r2
 80163da:	461a      	mov	r2, r3
 80163dc:	4603      	mov	r3, r0
 80163de:	70fb      	strb	r3, [r7, #3]
 80163e0:	460b      	mov	r3, r1
 80163e2:	70bb      	strb	r3, [r7, #2]
 80163e4:	4613      	mov	r3, r2
 80163e6:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80163e8:	78fb      	ldrb	r3, [r7, #3]
 80163ea:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80163ec:	78bb      	ldrb	r3, [r7, #2]
 80163ee:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80163f0:	787b      	ldrb	r3, [r7, #1]
 80163f2:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80163f4:	6a3b      	ldr	r3, [r7, #32]
 80163f6:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	689c      	ldr	r4, [r3, #8]
 80163fc:	f107 0308 	add.w	r3, r7, #8
 8016400:	2201      	movs	r2, #1
 8016402:	210f      	movs	r1, #15
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	47a0      	blx	r4
 8016408:	4603      	mov	r3, r0
}
 801640a:	4618      	mov	r0, r3
 801640c:	3714      	adds	r7, #20
 801640e:	46bd      	mov	sp, r7
 8016410:	bd90      	pop	{r4, r7, pc}

08016412 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8016412:	b590      	push	{r4, r7, lr}
 8016414:	b083      	sub	sp, #12
 8016416:	af00      	add	r7, sp, #0
 8016418:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	689c      	ldr	r4, [r3, #8]
 801641e:	2300      	movs	r3, #0
 8016420:	2200      	movs	r2, #0
 8016422:	2109      	movs	r1, #9
 8016424:	6878      	ldr	r0, [r7, #4]
 8016426:	47a0      	blx	r4
}
 8016428:	bf00      	nop
 801642a:	370c      	adds	r7, #12
 801642c:	46bd      	mov	sp, r7
 801642e:	bd90      	pop	{r4, r7, pc}

08016430 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8016430:	b590      	push	{r4, r7, lr}
 8016432:	b083      	sub	sp, #12
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	689c      	ldr	r4, [r3, #8]
 801643c:	2300      	movs	r3, #0
 801643e:	2200      	movs	r2, #0
 8016440:	210a      	movs	r1, #10
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	47a0      	blx	r4
}
 8016446:	bf00      	nop
 8016448:	370c      	adds	r7, #12
 801644a:	46bd      	mov	sp, r7
 801644c:	bd90      	pop	{r4, r7, pc}

0801644e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 801644e:	b590      	push	{r4, r7, lr}
 8016450:	b083      	sub	sp, #12
 8016452:	af00      	add	r7, sp, #0
 8016454:	6078      	str	r0, [r7, #4]
 8016456:	460b      	mov	r3, r1
 8016458:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	689c      	ldr	r4, [r3, #8]
 801645e:	78fa      	ldrb	r2, [r7, #3]
 8016460:	2300      	movs	r3, #0
 8016462:	210b      	movs	r1, #11
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	47a0      	blx	r4
}
 8016468:	bf00      	nop
 801646a:	370c      	adds	r7, #12
 801646c:	46bd      	mov	sp, r7
 801646e:	bd90      	pop	{r4, r7, pc}

08016470 <u8x8_SetFlipMode>:

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
 8016470:	b590      	push	{r4, r7, lr}
 8016472:	b083      	sub	sp, #12
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	460b      	mov	r3, r1
 801647a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	689c      	ldr	r4, [r3, #8]
 8016480:	78fa      	ldrb	r2, [r7, #3]
 8016482:	2300      	movs	r3, #0
 8016484:	210d      	movs	r1, #13
 8016486:	6878      	ldr	r0, [r7, #4]
 8016488:	47a0      	blx	r4
}
 801648a:	bf00      	nop
 801648c:	370c      	adds	r7, #12
 801648e:	46bd      	mov	sp, r7
 8016490:	bd90      	pop	{r4, r7, pc}

08016492 <u8x8_SetContrast>:

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8016492:	b590      	push	{r4, r7, lr}
 8016494:	b083      	sub	sp, #12
 8016496:	af00      	add	r7, sp, #0
 8016498:	6078      	str	r0, [r7, #4]
 801649a:	460b      	mov	r3, r1
 801649c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	689c      	ldr	r4, [r3, #8]
 80164a2:	78fa      	ldrb	r2, [r7, #3]
 80164a4:	2300      	movs	r3, #0
 80164a6:	210e      	movs	r1, #14
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	47a0      	blx	r4
}
 80164ac:	bf00      	nop
 80164ae:	370c      	adds	r7, #12
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd90      	pop	{r4, r7, pc}

080164b4 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80164b4:	b590      	push	{r4, r7, lr}
 80164b6:	b083      	sub	sp, #12
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	689c      	ldr	r4, [r3, #8]
 80164c0:	2300      	movs	r3, #0
 80164c2:	2200      	movs	r2, #0
 80164c4:	2110      	movs	r1, #16
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	47a0      	blx	r4
}
 80164ca:	bf00      	nop
 80164cc:	370c      	adds	r7, #12
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd90      	pop	{r4, r7, pc}

080164d2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80164d2:	b590      	push	{r4, r7, lr}
 80164d4:	b083      	sub	sp, #12
 80164d6:	af00      	add	r7, sp, #0
 80164d8:	6078      	str	r0, [r7, #4]
 80164da:	460b      	mov	r3, r1
 80164dc:	70fb      	strb	r3, [r7, #3]
 80164de:	4613      	mov	r3, r2
 80164e0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	695c      	ldr	r4, [r3, #20]
 80164e6:	78ba      	ldrb	r2, [r7, #2]
 80164e8:	78f9      	ldrb	r1, [r7, #3]
 80164ea:	2300      	movs	r3, #0
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	47a0      	blx	r4
}
 80164f0:	bf00      	nop
 80164f2:	370c      	adds	r7, #12
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd90      	pop	{r4, r7, pc}

080164f8 <u8sl_Next>:

/*
  increase the cursor position
*/
void u8sl_Next(u8sl_t *u8sl)
{
 80164f8:	b480      	push	{r7}
 80164fa:	b083      	sub	sp, #12
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
  u8sl->current_pos++;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	78db      	ldrb	r3, [r3, #3]
 8016504:	3301      	adds	r3, #1
 8016506:	b2da      	uxtb	r2, r3
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	70da      	strb	r2, [r3, #3]
  if ( u8sl->current_pos >= u8sl->total )
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	78da      	ldrb	r2, [r3, #3]
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	785b      	ldrb	r3, [r3, #1]
 8016514:	429a      	cmp	r2, r3
 8016516:	d306      	bcc.n	8016526 <u8sl_Next+0x2e>
  {
    u8sl->current_pos = 0;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2200      	movs	r2, #0
 801651c:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2200      	movs	r2, #0
 8016522:	709a      	strb	r2, [r3, #2]
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
    {
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
    }
  }
}
 8016524:	e014      	b.n	8016550 <u8sl_Next+0x58>
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	789b      	ldrb	r3, [r3, #2]
 801652a:	461a      	mov	r2, r3
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	781b      	ldrb	r3, [r3, #0]
 8016530:	441a      	add	r2, r3
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	78db      	ldrb	r3, [r3, #3]
 8016536:	3301      	adds	r3, #1
 8016538:	429a      	cmp	r2, r3
 801653a:	dc09      	bgt.n	8016550 <u8sl_Next+0x58>
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	78da      	ldrb	r2, [r3, #3]
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	b2db      	uxtb	r3, r3
 8016548:	3301      	adds	r3, #1
 801654a:	b2da      	uxtb	r2, r3
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	709a      	strb	r2, [r3, #2]
}
 8016550:	bf00      	nop
 8016552:	370c      	adds	r7, #12
 8016554:	46bd      	mov	sp, r7
 8016556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655a:	4770      	bx	lr

0801655c <u8sl_Prev>:

void u8sl_Prev(u8sl_t *u8sl)
{
 801655c:	b480      	push	{r7}
 801655e:	b083      	sub	sp, #12
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  if ( u8sl->current_pos == 0 )
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	78db      	ldrb	r3, [r3, #3]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d117      	bne.n	801659c <u8sl_Prev+0x40>
  {
    u8sl->current_pos = u8sl->total - 1;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	785b      	ldrb	r3, [r3, #1]
 8016570:	3b01      	subs	r3, #1
 8016572:	b2da      	uxtb	r2, r3
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2200      	movs	r2, #0
 801657c:	709a      	strb	r2, [r3, #2]
    if ( u8sl->total > u8sl->visible )
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	785a      	ldrb	r2, [r3, #1]
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	429a      	cmp	r2, r3
 8016588:	d918      	bls.n	80165bc <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->total - u8sl->visible;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	785a      	ldrb	r2, [r3, #1]
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	1ad3      	subs	r3, r2, r3
 8016594:	b2da      	uxtb	r2, r3
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	709a      	strb	r2, [r3, #2]
  {
    u8sl->current_pos--;
    if ( u8sl->first_pos > u8sl->current_pos )
      u8sl->first_pos = u8sl->current_pos;
  }
}
 801659a:	e00f      	b.n	80165bc <u8sl_Prev+0x60>
    u8sl->current_pos--;
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	78db      	ldrb	r3, [r3, #3]
 80165a0:	3b01      	subs	r3, #1
 80165a2:	b2da      	uxtb	r2, r3
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	70da      	strb	r2, [r3, #3]
    if ( u8sl->first_pos > u8sl->current_pos )
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	789a      	ldrb	r2, [r3, #2]
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	78db      	ldrb	r3, [r3, #3]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d903      	bls.n	80165bc <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->current_pos;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	78da      	ldrb	r2, [r3, #3]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	709a      	strb	r2, [r3, #2]
}
 80165bc:	bf00      	nop
 80165be:	370c      	adds	r7, #12
 80165c0:	46bd      	mov	sp, r7
 80165c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c6:	4770      	bx	lr

080165c8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80165c8:	b480      	push	{r7}
 80165ca:	b085      	sub	sp, #20
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	607b      	str	r3, [r7, #4]
 80165d2:	460b      	mov	r3, r1
 80165d4:	72fb      	strb	r3, [r7, #11]
 80165d6:	4613      	mov	r3, r2
 80165d8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80165da:	2300      	movs	r3, #0
}
 80165dc:	4618      	mov	r0, r3
 80165de:	3714      	adds	r7, #20
 80165e0:	46bd      	mov	sp, r7
 80165e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e6:	4770      	bx	lr

080165e8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80165e8:	b480      	push	{r7}
 80165ea:	b083      	sub	sp, #12
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2200      	movs	r2, #0
 80165f4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	4a11      	ldr	r2, [pc, #68]	; (8016640 <u8x8_SetupDefaults+0x58>)
 80165fa:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	4a10      	ldr	r2, [pc, #64]	; (8016640 <u8x8_SetupDefaults+0x58>)
 8016600:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	4a0e      	ldr	r2, [pc, #56]	; (8016640 <u8x8_SetupDefaults+0x58>)
 8016606:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	4a0d      	ldr	r2, [pc, #52]	; (8016640 <u8x8_SetupDefaults+0x58>)
 801660c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	2200      	movs	r2, #0
 8016612:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2200      	movs	r2, #0
 801661a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2200      	movs	r2, #0
 8016622:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	22ff      	movs	r2, #255	; 0xff
 8016628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	22ff      	movs	r2, #255	; 0xff
 8016630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8016634:	bf00      	nop
 8016636:	370c      	adds	r7, #12
 8016638:	46bd      	mov	sp, r7
 801663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663e:	4770      	bx	lr
 8016640:	080165c9 	.word	0x080165c9

08016644 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b084      	sub	sp, #16
 8016648:	af00      	add	r7, sp, #0
 801664a:	60f8      	str	r0, [r7, #12]
 801664c:	60b9      	str	r1, [r7, #8]
 801664e:	607a      	str	r2, [r7, #4]
 8016650:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8016652:	68f8      	ldr	r0, [r7, #12]
 8016654:	f7ff ffc8 	bl	80165e8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	68ba      	ldr	r2, [r7, #8]
 801665c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	687a      	ldr	r2, [r7, #4]
 8016662:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	683a      	ldr	r2, [r7, #0]
 8016668:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	69ba      	ldr	r2, [r7, #24]
 801666e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8016670:	68f8      	ldr	r0, [r7, #12]
 8016672:	f7ff fece 	bl	8016412 <u8x8_SetupMemory>
}
 8016676:	bf00      	nop
 8016678:	3710      	adds	r7, #16
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}

0801667e <u8x8_GetStringLineCnt>:
*/

#include "u8x8.h"

uint8_t u8x8_GetStringLineCnt(const char *str)
{
 801667e:	b480      	push	{r7}
 8016680:	b085      	sub	sp, #20
 8016682:	af00      	add	r7, sp, #0
 8016684:	6078      	str	r0, [r7, #4]
  char e;
  uint8_t line_cnt = 1;
 8016686:	2301      	movs	r3, #1
 8016688:	73fb      	strb	r3, [r7, #15]
  if ( str == NULL )
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d101      	bne.n	8016694 <u8x8_GetStringLineCnt+0x16>
    return 0;
 8016690:	2300      	movs	r3, #0
 8016692:	e011      	b.n	80166b8 <u8x8_GetStringLineCnt+0x3a>
  for(;;)
  {
    e = *str;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	781b      	ldrb	r3, [r3, #0]
 8016698:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 801669a:	7bbb      	ldrb	r3, [r7, #14]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d009      	beq.n	80166b4 <u8x8_GetStringLineCnt+0x36>
      break;
    str++;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	3301      	adds	r3, #1
 80166a4:	607b      	str	r3, [r7, #4]
    if ( e == '\n' )
 80166a6:	7bbb      	ldrb	r3, [r7, #14]
 80166a8:	2b0a      	cmp	r3, #10
 80166aa:	d1f3      	bne.n	8016694 <u8x8_GetStringLineCnt+0x16>
      line_cnt++;
 80166ac:	7bfb      	ldrb	r3, [r7, #15]
 80166ae:	3301      	adds	r3, #1
 80166b0:	73fb      	strb	r3, [r7, #15]
    e = *str;
 80166b2:	e7ef      	b.n	8016694 <u8x8_GetStringLineCnt+0x16>
      break;
 80166b4:	bf00      	nop
  }
  return line_cnt;
 80166b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3714      	adds	r7, #20
 80166bc:	46bd      	mov	sp, r7
 80166be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c2:	4770      	bx	lr

080166c4 <u8x8_GetStringLineStart>:
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
 80166c4:	b480      	push	{r7}
 80166c6:	b085      	sub	sp, #20
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	4603      	mov	r3, r0
 80166cc:	6039      	str	r1, [r7, #0]
 80166ce:	71fb      	strb	r3, [r7, #7]
  char e;
  uint8_t line_cnt = 1;
 80166d0:	2301      	movs	r3, #1
 80166d2:	73fb      	strb	r3, [r7, #15]
  
  if ( line_idx == 0 )
 80166d4:	79fb      	ldrb	r3, [r7, #7]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d101      	bne.n	80166de <u8x8_GetStringLineStart+0x1a>
    return str;
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	e017      	b.n	801670e <u8x8_GetStringLineStart+0x4a>

  for(;;)
  {
    e = *str;
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	781b      	ldrb	r3, [r3, #0]
 80166e2:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 80166e4:	7bbb      	ldrb	r3, [r7, #14]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d00f      	beq.n	801670a <u8x8_GetStringLineStart+0x46>
      break;
    str++;
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	3301      	adds	r3, #1
 80166ee:	603b      	str	r3, [r7, #0]
    if ( e == '\n' )
 80166f0:	7bbb      	ldrb	r3, [r7, #14]
 80166f2:	2b0a      	cmp	r3, #10
 80166f4:	d1f3      	bne.n	80166de <u8x8_GetStringLineStart+0x1a>
    {
      if ( line_cnt == line_idx )
 80166f6:	7bfa      	ldrb	r2, [r7, #15]
 80166f8:	79fb      	ldrb	r3, [r7, #7]
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d101      	bne.n	8016702 <u8x8_GetStringLineStart+0x3e>
	return str;
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	e005      	b.n	801670e <u8x8_GetStringLineStart+0x4a>
      line_cnt++;
 8016702:	7bfb      	ldrb	r3, [r7, #15]
 8016704:	3301      	adds	r3, #1
 8016706:	73fb      	strb	r3, [r7, #15]
    e = *str;
 8016708:	e7e9      	b.n	80166de <u8x8_GetStringLineStart+0x1a>
      break;
 801670a:	bf00      	nop
    }
  }
  return NULL;	/* line not found */
 801670c:	2300      	movs	r3, #0
}
 801670e:	4618      	mov	r0, r3
 8016710:	3714      	adds	r7, #20
 8016712:	46bd      	mov	sp, r7
 8016714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016718:	4770      	bx	lr
	...

0801671c <u8x8_u16toap>:


#include "u8x8.h"

const char *u8x8_u16toap(char * dest, uint16_t v)
{
 801671c:	b480      	push	{r7}
 801671e:	b085      	sub	sp, #20
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	460b      	mov	r3, r1
 8016726:	807b      	strh	r3, [r7, #2]
  uint8_t pos;
  uint8_t d;
  uint16_t c;
  c = 10000;
 8016728:	f242 7310 	movw	r3, #10000	; 0x2710
 801672c:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 801672e:	2300      	movs	r3, #0
 8016730:	73fb      	strb	r3, [r7, #15]
 8016732:	e01b      	b.n	801676c <u8x8_u16toap+0x50>
  {
      d = '0';
 8016734:	2330      	movs	r3, #48	; 0x30
 8016736:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 8016738:	e006      	b.n	8016748 <u8x8_u16toap+0x2c>
      {
	v -= c;
 801673a:	887a      	ldrh	r2, [r7, #2]
 801673c:	89bb      	ldrh	r3, [r7, #12]
 801673e:	1ad3      	subs	r3, r2, r3
 8016740:	807b      	strh	r3, [r7, #2]
	d++;
 8016742:	7bbb      	ldrb	r3, [r7, #14]
 8016744:	3301      	adds	r3, #1
 8016746:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 8016748:	887a      	ldrh	r2, [r7, #2]
 801674a:	89bb      	ldrh	r3, [r7, #12]
 801674c:	429a      	cmp	r2, r3
 801674e:	d2f4      	bcs.n	801673a <u8x8_u16toap+0x1e>
      }
      dest[pos] = d;
 8016750:	7bfb      	ldrb	r3, [r7, #15]
 8016752:	687a      	ldr	r2, [r7, #4]
 8016754:	4413      	add	r3, r2
 8016756:	7bba      	ldrb	r2, [r7, #14]
 8016758:	701a      	strb	r2, [r3, #0]
      c /= 10;
 801675a:	89bb      	ldrh	r3, [r7, #12]
 801675c:	4a0a      	ldr	r2, [pc, #40]	; (8016788 <u8x8_u16toap+0x6c>)
 801675e:	fba2 2303 	umull	r2, r3, r2, r3
 8016762:	08db      	lsrs	r3, r3, #3
 8016764:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 8016766:	7bfb      	ldrb	r3, [r7, #15]
 8016768:	3301      	adds	r3, #1
 801676a:	73fb      	strb	r3, [r7, #15]
 801676c:	7bfb      	ldrb	r3, [r7, #15]
 801676e:	2b04      	cmp	r3, #4
 8016770:	d9e0      	bls.n	8016734 <u8x8_u16toap+0x18>
  }  
  dest[5] = '\0';
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	3305      	adds	r3, #5
 8016776:	2200      	movs	r2, #0
 8016778:	701a      	strb	r2, [r3, #0]
  return dest;
 801677a:	687b      	ldr	r3, [r7, #4]
}
 801677c:	4618      	mov	r0, r3
 801677e:	3714      	adds	r7, #20
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr
 8016788:	cccccccd 	.word	0xcccccccd

0801678c <u8x8_u16toa>:

/* v = value, d = number of digits */
const char *u8x8_u16toa(uint16_t v, uint8_t d)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	4603      	mov	r3, r0
 8016794:	460a      	mov	r2, r1
 8016796:	80fb      	strh	r3, [r7, #6]
 8016798:	4613      	mov	r3, r2
 801679a:	717b      	strb	r3, [r7, #5]
  static char buf[6];
  d = 5-d;
 801679c:	797b      	ldrb	r3, [r7, #5]
 801679e:	f1c3 0305 	rsb	r3, r3, #5
 80167a2:	717b      	strb	r3, [r7, #5]
  return u8x8_u16toap(buf, v) + d;
 80167a4:	88fb      	ldrh	r3, [r7, #6]
 80167a6:	4619      	mov	r1, r3
 80167a8:	4804      	ldr	r0, [pc, #16]	; (80167bc <u8x8_u16toa+0x30>)
 80167aa:	f7ff ffb7 	bl	801671c <u8x8_u16toap>
 80167ae:	4602      	mov	r2, r0
 80167b0:	797b      	ldrb	r3, [r7, #5]
 80167b2:	4413      	add	r3, r2
}
 80167b4:	4618      	mov	r0, r3
 80167b6:	3708      	adds	r7, #8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	20000780 	.word	0x20000780

080167c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80167c4:	490c      	ldr	r1, [pc, #48]	; (80167f8 <MX_FATFS_Init+0x38>)
 80167c6:	480d      	ldr	r0, [pc, #52]	; (80167fc <MX_FATFS_Init+0x3c>)
 80167c8:	f006 fffc 	bl	801d7c4 <FATFS_LinkDriver>
 80167cc:	4603      	mov	r3, r0
 80167ce:	461a      	mov	r2, r3
 80167d0:	4b0b      	ldr	r3, [pc, #44]	; (8016800 <MX_FATFS_Init+0x40>)
 80167d2:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80167d4:	490b      	ldr	r1, [pc, #44]	; (8016804 <MX_FATFS_Init+0x44>)
 80167d6:	480c      	ldr	r0, [pc, #48]	; (8016808 <MX_FATFS_Init+0x48>)
 80167d8:	f006 fff4 	bl	801d7c4 <FATFS_LinkDriver>
 80167dc:	4603      	mov	r3, r0
 80167de:	461a      	mov	r2, r3
 80167e0:	4b0a      	ldr	r3, [pc, #40]	; (801680c <MX_FATFS_Init+0x4c>)
 80167e2:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80167e4:	490a      	ldr	r1, [pc, #40]	; (8016810 <MX_FATFS_Init+0x50>)
 80167e6:	480b      	ldr	r0, [pc, #44]	; (8016814 <MX_FATFS_Init+0x54>)
 80167e8:	f006 ffec 	bl	801d7c4 <FATFS_LinkDriver>
 80167ec:	4603      	mov	r3, r0
 80167ee:	461a      	mov	r2, r3
 80167f0:	4b09      	ldr	r3, [pc, #36]	; (8016818 <MX_FATFS_Init+0x58>)
 80167f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80167f4:	bf00      	nop
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	200175b0 	.word	0x200175b0
 80167fc:	08022ee4 	.word	0x08022ee4
 8016800:	20019630 	.word	0x20019630
 8016804:	200185ec 	.word	0x200185ec
 8016808:	08022ef8 	.word	0x08022ef8
 801680c:	20019631 	.word	0x20019631
 8016810:	2001962c 	.word	0x2001962c
 8016814:	20000068 	.word	0x20000068
 8016818:	20019628 	.word	0x20019628

0801681c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801681c:	b480      	push	{r7}
 801681e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8016820:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8016822:	4618      	mov	r0, r3
 8016824:	46bd      	mov	sp, r7
 8016826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682a:	4770      	bx	lr

0801682c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8016832:	2300      	movs	r3, #0
 8016834:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8016836:	f000 f8a5 	bl	8016984 <BSP_SD_IsDetected>
 801683a:	4603      	mov	r3, r0
 801683c:	2b01      	cmp	r3, #1
 801683e:	d001      	beq.n	8016844 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8016840:	2302      	movs	r3, #2
 8016842:	e012      	b.n	801686a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8016844:	480b      	ldr	r0, [pc, #44]	; (8016874 <BSP_SD_Init+0x48>)
 8016846:	f7f7 f9af 	bl	800dba8 <HAL_SD_Init>
 801684a:	4603      	mov	r3, r0
 801684c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801684e:	79fb      	ldrb	r3, [r7, #7]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d109      	bne.n	8016868 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8016854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016858:	4806      	ldr	r0, [pc, #24]	; (8016874 <BSP_SD_Init+0x48>)
 801685a:	f7f8 f925 	bl	800eaa8 <HAL_SD_ConfigWideBusOperation>
 801685e:	4603      	mov	r3, r0
 8016860:	2b00      	cmp	r3, #0
 8016862:	d001      	beq.n	8016868 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8016864:	2301      	movs	r3, #1
 8016866:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8016868:	79fb      	ldrb	r3, [r7, #7]
}
 801686a:	4618      	mov	r0, r3
 801686c:	3708      	adds	r7, #8
 801686e:	46bd      	mov	sp, r7
 8016870:	bd80      	pop	{r7, pc}
 8016872:	bf00      	nop
 8016874:	20002b7c 	.word	0x20002b7c

08016878 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b088      	sub	sp, #32
 801687c:	af02      	add	r7, sp, #8
 801687e:	60f8      	str	r0, [r7, #12]
 8016880:	60b9      	str	r1, [r7, #8]
 8016882:	607a      	str	r2, [r7, #4]
 8016884:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8016886:	2300      	movs	r3, #0
 8016888:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	9300      	str	r3, [sp, #0]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	68ba      	ldr	r2, [r7, #8]
 8016892:	68f9      	ldr	r1, [r7, #12]
 8016894:	4806      	ldr	r0, [pc, #24]	; (80168b0 <BSP_SD_ReadBlocks+0x38>)
 8016896:	f7f7 fa1f 	bl	800dcd8 <HAL_SD_ReadBlocks>
 801689a:	4603      	mov	r3, r0
 801689c:	2b00      	cmp	r3, #0
 801689e:	d001      	beq.n	80168a4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80168a0:	2301      	movs	r3, #1
 80168a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80168a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3718      	adds	r7, #24
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}
 80168ae:	bf00      	nop
 80168b0:	20002b7c 	.word	0x20002b7c

080168b4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b088      	sub	sp, #32
 80168b8:	af02      	add	r7, sp, #8
 80168ba:	60f8      	str	r0, [r7, #12]
 80168bc:	60b9      	str	r1, [r7, #8]
 80168be:	607a      	str	r2, [r7, #4]
 80168c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80168c2:	2300      	movs	r3, #0
 80168c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80168c6:	683b      	ldr	r3, [r7, #0]
 80168c8:	9300      	str	r3, [sp, #0]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	68ba      	ldr	r2, [r7, #8]
 80168ce:	68f9      	ldr	r1, [r7, #12]
 80168d0:	4806      	ldr	r0, [pc, #24]	; (80168ec <BSP_SD_WriteBlocks+0x38>)
 80168d2:	f7f7 fbf9 	bl	800e0c8 <HAL_SD_WriteBlocks>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d001      	beq.n	80168e0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80168dc:	2301      	movs	r3, #1
 80168de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80168e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3718      	adds	r7, #24
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	20002b7c 	.word	0x20002b7c

080168f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80168f4:	4805      	ldr	r0, [pc, #20]	; (801690c <BSP_SD_GetCardState+0x1c>)
 80168f6:	f7f8 f953 	bl	800eba0 <HAL_SD_GetCardState>
 80168fa:	4603      	mov	r3, r0
 80168fc:	2b04      	cmp	r3, #4
 80168fe:	bf14      	ite	ne
 8016900:	2301      	movne	r3, #1
 8016902:	2300      	moveq	r3, #0
 8016904:	b2db      	uxtb	r3, r3
}
 8016906:	4618      	mov	r0, r3
 8016908:	bd80      	pop	{r7, pc}
 801690a:	bf00      	nop
 801690c:	20002b7c 	.word	0x20002b7c

08016910 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8016918:	6879      	ldr	r1, [r7, #4]
 801691a:	4803      	ldr	r0, [pc, #12]	; (8016928 <BSP_SD_GetCardInfo+0x18>)
 801691c:	f7f8 f898 	bl	800ea50 <HAL_SD_GetCardInfo>
}
 8016920:	bf00      	nop
 8016922:	3708      	adds	r7, #8
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}
 8016928:	20002b7c 	.word	0x20002b7c

0801692c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8016934:	f000 f818 	bl	8016968 <BSP_SD_AbortCallback>
}
 8016938:	bf00      	nop
 801693a:	3708      	adds	r7, #8
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b082      	sub	sp, #8
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8016948:	f7ea ffc6 	bl	80018d8 <BSP_SD_WriteCpltCallback>
}
 801694c:	bf00      	nop
 801694e:	3708      	adds	r7, #8
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801695c:	f000 f80b 	bl	8016976 <BSP_SD_ReadCpltCallback>
}
 8016960:	bf00      	nop
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8016968:	b480      	push	{r7}
 801696a:	af00      	add	r7, sp, #0

}
 801696c:	bf00      	nop
 801696e:	46bd      	mov	sp, r7
 8016970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016974:	4770      	bx	lr

08016976 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8016976:	b480      	push	{r7}
 8016978:	af00      	add	r7, sp, #0

}
 801697a:	bf00      	nop
 801697c:	46bd      	mov	sp, r7
 801697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016982:	4770      	bx	lr

08016984 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b082      	sub	sp, #8
 8016988:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801698a:	2301      	movs	r3, #1
 801698c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 801698e:	f000 f80b 	bl	80169a8 <BSP_PlatformIsDetected>
 8016992:	4603      	mov	r3, r0
 8016994:	2b00      	cmp	r3, #0
 8016996:	d101      	bne.n	801699c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8016998:	2300      	movs	r3, #0
 801699a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801699c:	79fb      	ldrb	r3, [r7, #7]
 801699e:	b2db      	uxtb	r3, r3
}
 80169a0:	4618      	mov	r0, r3
 80169a2:	3708      	adds	r7, #8
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}

080169a8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80169ae:	2301      	movs	r3, #1
 80169b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80169b2:	2101      	movs	r1, #1
 80169b4:	4806      	ldr	r0, [pc, #24]	; (80169d0 <BSP_PlatformIsDetected+0x28>)
 80169b6:	f7f2 ff35 	bl	8009824 <HAL_GPIO_ReadPin>
 80169ba:	4603      	mov	r3, r0
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d001      	beq.n	80169c4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80169c0:	2300      	movs	r3, #0
 80169c2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80169c4:	79fb      	ldrb	r3, [r7, #7]
}  
 80169c6:	4618      	mov	r0, r3
 80169c8:	3708      	adds	r7, #8
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	40020c00 	.word	0x40020c00

080169d4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	4603      	mov	r3, r0
 80169dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80169de:	4b0b      	ldr	r3, [pc, #44]	; (8016a0c <SD_CheckStatus+0x38>)
 80169e0:	2201      	movs	r2, #1
 80169e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80169e4:	f7ff ff84 	bl	80168f0 <BSP_SD_GetCardState>
 80169e8:	4603      	mov	r3, r0
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d107      	bne.n	80169fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80169ee:	4b07      	ldr	r3, [pc, #28]	; (8016a0c <SD_CheckStatus+0x38>)
 80169f0:	781b      	ldrb	r3, [r3, #0]
 80169f2:	b2db      	uxtb	r3, r3
 80169f4:	f023 0301 	bic.w	r3, r3, #1
 80169f8:	b2da      	uxtb	r2, r3
 80169fa:	4b04      	ldr	r3, [pc, #16]	; (8016a0c <SD_CheckStatus+0x38>)
 80169fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80169fe:	4b03      	ldr	r3, [pc, #12]	; (8016a0c <SD_CheckStatus+0x38>)
 8016a00:	781b      	ldrb	r3, [r3, #0]
 8016a02:	b2db      	uxtb	r3, r3
}
 8016a04:	4618      	mov	r0, r3
 8016a06:	3708      	adds	r7, #8
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}
 8016a0c:	20000065 	.word	0x20000065

08016a10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b082      	sub	sp, #8
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	4603      	mov	r3, r0
 8016a18:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8016a1a:	4b0b      	ldr	r3, [pc, #44]	; (8016a48 <SD_initialize+0x38>)
 8016a1c:	2201      	movs	r2, #1
 8016a1e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8016a20:	f7ff ff04 	bl	801682c <BSP_SD_Init>
 8016a24:	4603      	mov	r3, r0
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d107      	bne.n	8016a3a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8016a2a:	79fb      	ldrb	r3, [r7, #7]
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f7ff ffd1 	bl	80169d4 <SD_CheckStatus>
 8016a32:	4603      	mov	r3, r0
 8016a34:	461a      	mov	r2, r3
 8016a36:	4b04      	ldr	r3, [pc, #16]	; (8016a48 <SD_initialize+0x38>)
 8016a38:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8016a3a:	4b03      	ldr	r3, [pc, #12]	; (8016a48 <SD_initialize+0x38>)
 8016a3c:	781b      	ldrb	r3, [r3, #0]
 8016a3e:	b2db      	uxtb	r3, r3
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	3708      	adds	r7, #8
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	20000065 	.word	0x20000065

08016a4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b082      	sub	sp, #8
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	4603      	mov	r3, r0
 8016a54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8016a56:	79fb      	ldrb	r3, [r7, #7]
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7ff ffbb 	bl	80169d4 <SD_CheckStatus>
 8016a5e:	4603      	mov	r3, r0
}
 8016a60:	4618      	mov	r0, r3
 8016a62:	3708      	adds	r7, #8
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}

08016a68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b086      	sub	sp, #24
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	60b9      	str	r1, [r7, #8]
 8016a70:	607a      	str	r2, [r7, #4]
 8016a72:	603b      	str	r3, [r7, #0]
 8016a74:	4603      	mov	r3, r0
 8016a76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016a78:	2301      	movs	r3, #1
 8016a7a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8016a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a80:	683a      	ldr	r2, [r7, #0]
 8016a82:	6879      	ldr	r1, [r7, #4]
 8016a84:	68b8      	ldr	r0, [r7, #8]
 8016a86:	f7ff fef7 	bl	8016878 <BSP_SD_ReadBlocks>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d107      	bne.n	8016aa0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8016a90:	bf00      	nop
 8016a92:	f7ff ff2d 	bl	80168f0 <BSP_SD_GetCardState>
 8016a96:	4603      	mov	r3, r0
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d1fa      	bne.n	8016a92 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8016aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	3718      	adds	r7, #24
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd80      	pop	{r7, pc}

08016aaa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016aaa:	b580      	push	{r7, lr}
 8016aac:	b086      	sub	sp, #24
 8016aae:	af00      	add	r7, sp, #0
 8016ab0:	60b9      	str	r1, [r7, #8]
 8016ab2:	607a      	str	r2, [r7, #4]
 8016ab4:	603b      	str	r3, [r7, #0]
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016aba:	2301      	movs	r3, #1
 8016abc:	75fb      	strb	r3, [r7, #23]

  //if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count) == MSD_OK)
  if(BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT) == MSD_OK)
 8016abe:	f04f 33ff 	mov.w	r3, #4294967295
 8016ac2:	683a      	ldr	r2, [r7, #0]
 8016ac4:	6879      	ldr	r1, [r7, #4]
 8016ac6:	68b8      	ldr	r0, [r7, #8]
 8016ac8:	f7ff fef4 	bl	80168b4 <BSP_SD_WriteBlocks>
 8016acc:	4603      	mov	r3, r0
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d107      	bne.n	8016ae2 <SD_write+0x38>
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8016ad2:	bf00      	nop
 8016ad4:	f7ff ff0c 	bl	80168f0 <BSP_SD_GetCardState>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d1fa      	bne.n	8016ad4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8016ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	3718      	adds	r7, #24
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}

08016aec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b08c      	sub	sp, #48	; 0x30
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	4603      	mov	r3, r0
 8016af4:	603a      	str	r2, [r7, #0]
 8016af6:	71fb      	strb	r3, [r7, #7]
 8016af8:	460b      	mov	r3, r1
 8016afa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8016afc:	2301      	movs	r3, #1
 8016afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8016b02:	4b25      	ldr	r3, [pc, #148]	; (8016b98 <SD_ioctl+0xac>)
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	b2db      	uxtb	r3, r3
 8016b08:	f003 0301 	and.w	r3, r3, #1
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d001      	beq.n	8016b14 <SD_ioctl+0x28>
 8016b10:	2303      	movs	r3, #3
 8016b12:	e03c      	b.n	8016b8e <SD_ioctl+0xa2>

  switch (cmd)
 8016b14:	79bb      	ldrb	r3, [r7, #6]
 8016b16:	2b03      	cmp	r3, #3
 8016b18:	d834      	bhi.n	8016b84 <SD_ioctl+0x98>
 8016b1a:	a201      	add	r2, pc, #4	; (adr r2, 8016b20 <SD_ioctl+0x34>)
 8016b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b20:	08016b31 	.word	0x08016b31
 8016b24:	08016b39 	.word	0x08016b39
 8016b28:	08016b51 	.word	0x08016b51
 8016b2c:	08016b6b 	.word	0x08016b6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8016b30:	2300      	movs	r3, #0
 8016b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016b36:	e028      	b.n	8016b8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8016b38:	f107 030c 	add.w	r3, r7, #12
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7ff fee7 	bl	8016910 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8016b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016b4e:	e01c      	b.n	8016b8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016b50:	f107 030c 	add.w	r3, r7, #12
 8016b54:	4618      	mov	r0, r3
 8016b56:	f7ff fedb 	bl	8016910 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8016b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b5c:	b29a      	uxth	r2, r3
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8016b62:	2300      	movs	r3, #0
 8016b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016b68:	e00f      	b.n	8016b8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016b6a:	f107 030c 	add.w	r3, r7, #12
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f7ff fece 	bl	8016910 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8016b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b76:	0a5a      	lsrs	r2, r3, #9
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016b82:	e002      	b.n	8016b8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8016b84:	2304      	movs	r3, #4
 8016b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8016b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3730      	adds	r7, #48	; 0x30
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}
 8016b96:	bf00      	nop
 8016b98:	20000065 	.word	0x20000065

08016b9c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8016b9c:	b480      	push	{r7}
 8016b9e:	b083      	sub	sp, #12
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8016ba6:	2300      	movs	r3, #0
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	370c      	adds	r7, #12
 8016bac:	46bd      	mov	sp, r7
 8016bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb2:	4770      	bx	lr

08016bb4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b084      	sub	sp, #16
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	4603      	mov	r3, r0
 8016bbc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8016bbe:	2301      	movs	r3, #1
 8016bc0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8016bc2:	79fb      	ldrb	r3, [r7, #7]
 8016bc4:	4619      	mov	r1, r3
 8016bc6:	4808      	ldr	r0, [pc, #32]	; (8016be8 <USBH_status+0x34>)
 8016bc8:	f000 fe65 	bl	8017896 <USBH_MSC_UnitIsReady>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d002      	beq.n	8016bd8 <USBH_status+0x24>
  {
    res = RES_OK;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	73fb      	strb	r3, [r7, #15]
 8016bd6:	e001      	b.n	8016bdc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8016bd8:	2301      	movs	r3, #1
 8016bda:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8016bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bde:	4618      	mov	r0, r3
 8016be0:	3710      	adds	r7, #16
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}
 8016be6:	bf00      	nop
 8016be8:	2000821c 	.word	0x2000821c

08016bec <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b094      	sub	sp, #80	; 0x50
 8016bf0:	af02      	add	r7, sp, #8
 8016bf2:	60b9      	str	r1, [r7, #8]
 8016bf4:	607a      	str	r2, [r7, #4]
 8016bf6:	603b      	str	r3, [r7, #0]
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8016c02:	7bf9      	ldrb	r1, [r7, #15]
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	9300      	str	r3, [sp, #0]
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	687a      	ldr	r2, [r7, #4]
 8016c0c:	4812      	ldr	r0, [pc, #72]	; (8016c58 <USBH_read+0x6c>)
 8016c0e:	f000 fe8c 	bl	801792a <USBH_MSC_Read>
 8016c12:	4603      	mov	r3, r0
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d103      	bne.n	8016c20 <USBH_read+0x34>
  {
    res = RES_OK;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016c1e:	e015      	b.n	8016c4c <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8016c20:	f107 0210 	add.w	r2, r7, #16
 8016c24:	7bfb      	ldrb	r3, [r7, #15]
 8016c26:	4619      	mov	r1, r3
 8016c28:	480b      	ldr	r0, [pc, #44]	; (8016c58 <USBH_read+0x6c>)
 8016c2a:	f000 fe5a 	bl	80178e2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8016c2e:	7f7b      	ldrb	r3, [r7, #29]
 8016c30:	2b28      	cmp	r3, #40	; 0x28
 8016c32:	d003      	beq.n	8016c3c <USBH_read+0x50>
 8016c34:	2b3a      	cmp	r3, #58	; 0x3a
 8016c36:	d001      	beq.n	8016c3c <USBH_read+0x50>
 8016c38:	2b04      	cmp	r3, #4
 8016c3a:	d103      	bne.n	8016c44 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8016c3c:	2303      	movs	r3, #3
 8016c3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8016c42:	e003      	b.n	8016c4c <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8016c44:	2301      	movs	r3, #1
 8016c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8016c4a:	bf00      	nop
    }
  }

  return res;
 8016c4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3748      	adds	r7, #72	; 0x48
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}
 8016c58:	2000821c 	.word	0x2000821c

08016c5c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b094      	sub	sp, #80	; 0x50
 8016c60:	af02      	add	r7, sp, #8
 8016c62:	60b9      	str	r1, [r7, #8]
 8016c64:	607a      	str	r2, [r7, #4]
 8016c66:	603b      	str	r3, [r7, #0]
 8016c68:	4603      	mov	r3, r0
 8016c6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016c6c:	2301      	movs	r3, #1
 8016c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8016c72:	7bf9      	ldrb	r1, [r7, #15]
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	9300      	str	r3, [sp, #0]
 8016c78:	68bb      	ldr	r3, [r7, #8]
 8016c7a:	687a      	ldr	r2, [r7, #4]
 8016c7c:	4817      	ldr	r0, [pc, #92]	; (8016cdc <USBH_write+0x80>)
 8016c7e:	f000 febd 	bl	80179fc <USBH_MSC_Write>
 8016c82:	4603      	mov	r3, r0
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d103      	bne.n	8016c90 <USBH_write+0x34>
  {
    res = RES_OK;
 8016c88:	2300      	movs	r3, #0
 8016c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016c8e:	e01f      	b.n	8016cd0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8016c90:	f107 0210 	add.w	r2, r7, #16
 8016c94:	7bfb      	ldrb	r3, [r7, #15]
 8016c96:	4619      	mov	r1, r3
 8016c98:	4810      	ldr	r0, [pc, #64]	; (8016cdc <USBH_write+0x80>)
 8016c9a:	f000 fe22 	bl	80178e2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8016c9e:	7f7b      	ldrb	r3, [r7, #29]
 8016ca0:	2b27      	cmp	r3, #39	; 0x27
 8016ca2:	d009      	beq.n	8016cb8 <USBH_write+0x5c>
 8016ca4:	2b27      	cmp	r3, #39	; 0x27
 8016ca6:	dc02      	bgt.n	8016cae <USBH_write+0x52>
 8016ca8:	2b04      	cmp	r3, #4
 8016caa:	d009      	beq.n	8016cc0 <USBH_write+0x64>
 8016cac:	e00c      	b.n	8016cc8 <USBH_write+0x6c>
 8016cae:	2b28      	cmp	r3, #40	; 0x28
 8016cb0:	d006      	beq.n	8016cc0 <USBH_write+0x64>
 8016cb2:	2b3a      	cmp	r3, #58	; 0x3a
 8016cb4:	d004      	beq.n	8016cc0 <USBH_write+0x64>
 8016cb6:	e007      	b.n	8016cc8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8016cb8:	2302      	movs	r3, #2
 8016cba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8016cbe:	e007      	b.n	8016cd0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8016cc0:	2303      	movs	r3, #3
 8016cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8016cc6:	e003      	b.n	8016cd0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8016cc8:	2301      	movs	r3, #1
 8016cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8016cce:	bf00      	nop
    }
  }

  return res;
 8016cd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3748      	adds	r7, #72	; 0x48
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	2000821c 	.word	0x2000821c

08016ce0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b090      	sub	sp, #64	; 0x40
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	603a      	str	r2, [r7, #0]
 8016cea:	71fb      	strb	r3, [r7, #7]
 8016cec:	460b      	mov	r3, r1
 8016cee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8016cf6:	79bb      	ldrb	r3, [r7, #6]
 8016cf8:	2b03      	cmp	r3, #3
 8016cfa:	d852      	bhi.n	8016da2 <USBH_ioctl+0xc2>
 8016cfc:	a201      	add	r2, pc, #4	; (adr r2, 8016d04 <USBH_ioctl+0x24>)
 8016cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d02:	bf00      	nop
 8016d04:	08016d15 	.word	0x08016d15
 8016d08:	08016d1d 	.word	0x08016d1d
 8016d0c:	08016d47 	.word	0x08016d47
 8016d10:	08016d73 	.word	0x08016d73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8016d14:	2300      	movs	r3, #0
 8016d16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8016d1a:	e045      	b.n	8016da8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8016d1c:	f107 0208 	add.w	r2, r7, #8
 8016d20:	79fb      	ldrb	r3, [r7, #7]
 8016d22:	4619      	mov	r1, r3
 8016d24:	4823      	ldr	r0, [pc, #140]	; (8016db4 <USBH_ioctl+0xd4>)
 8016d26:	f000 fddc 	bl	80178e2 <USBH_MSC_GetLUNInfo>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d106      	bne.n	8016d3e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8016d30:	68fa      	ldr	r2, [r7, #12]
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8016d36:	2300      	movs	r3, #0
 8016d38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8016d3c:	e034      	b.n	8016da8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8016d3e:	2301      	movs	r3, #1
 8016d40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8016d44:	e030      	b.n	8016da8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8016d46:	f107 0208 	add.w	r2, r7, #8
 8016d4a:	79fb      	ldrb	r3, [r7, #7]
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	4819      	ldr	r0, [pc, #100]	; (8016db4 <USBH_ioctl+0xd4>)
 8016d50:	f000 fdc7 	bl	80178e2 <USBH_MSC_GetLUNInfo>
 8016d54:	4603      	mov	r3, r0
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d107      	bne.n	8016d6a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8016d5a:	8a3b      	ldrh	r3, [r7, #16]
 8016d5c:	461a      	mov	r2, r3
 8016d5e:	683b      	ldr	r3, [r7, #0]
 8016d60:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8016d62:	2300      	movs	r3, #0
 8016d64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8016d68:	e01e      	b.n	8016da8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8016d70:	e01a      	b.n	8016da8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8016d72:	f107 0208 	add.w	r2, r7, #8
 8016d76:	79fb      	ldrb	r3, [r7, #7]
 8016d78:	4619      	mov	r1, r3
 8016d7a:	480e      	ldr	r0, [pc, #56]	; (8016db4 <USBH_ioctl+0xd4>)
 8016d7c:	f000 fdb1 	bl	80178e2 <USBH_MSC_GetLUNInfo>
 8016d80:	4603      	mov	r3, r0
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d109      	bne.n	8016d9a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8016d86:	8a3b      	ldrh	r3, [r7, #16]
 8016d88:	0a5b      	lsrs	r3, r3, #9
 8016d8a:	b29b      	uxth	r3, r3
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8016d92:	2300      	movs	r3, #0
 8016d94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8016d98:	e006      	b.n	8016da8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8016d9a:	2301      	movs	r3, #1
 8016d9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8016da0:	e002      	b.n	8016da8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8016da2:	2304      	movs	r3, #4
 8016da4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8016da8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	3740      	adds	r7, #64	; 0x40
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}
 8016db4:	2000821c 	.word	0x2000821c

08016db8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b082      	sub	sp, #8
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
   // return Stat;
	SD_disk_initialize(pdrv);
 8016dc2:	79fb      	ldrb	r3, [r7, #7]
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7ea f9d1 	bl	800116c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8016dca:	bf00      	nop
 8016dcc:	4618      	mov	r0, r3
 8016dce:	3708      	adds	r7, #8
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}

08016dd4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	4603      	mov	r3, r0
 8016ddc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status(pdrv);
 8016dde:	79fb      	ldrb	r3, [r7, #7]
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7ea faad 	bl	8001340 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8016de6:	bf00      	nop
 8016de8:	4618      	mov	r0, r3
 8016dea:	3708      	adds	r7, #8
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b084      	sub	sp, #16
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	60b9      	str	r1, [r7, #8]
 8016df8:	607a      	str	r2, [r7, #4]
 8016dfa:	603b      	str	r3, [r7, #0]
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  //  return RES_OK;
	SD_disk_read(pdrv, buff, sector, count);
 8016e00:	7bf8      	ldrb	r0, [r7, #15]
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	687a      	ldr	r2, [r7, #4]
 8016e06:	68b9      	ldr	r1, [r7, #8]
 8016e08:	f7ea fab0 	bl	800136c <SD_disk_read>
  /* USER CODE END READ */
}
 8016e0c:	bf00      	nop
 8016e0e:	4618      	mov	r0, r3
 8016e10:	3710      	adds	r7, #16
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}

08016e16 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8016e16:	b580      	push	{r7, lr}
 8016e18:	b084      	sub	sp, #16
 8016e1a:	af00      	add	r7, sp, #0
 8016e1c:	60b9      	str	r1, [r7, #8]
 8016e1e:	607a      	str	r2, [r7, #4]
 8016e20:	603b      	str	r3, [r7, #0]
 8016e22:	4603      	mov	r3, r0
 8016e24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write(pdrv, buff, sector, count);
 8016e26:	7bf8      	ldrb	r0, [r7, #15]
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	687a      	ldr	r2, [r7, #4]
 8016e2c:	68b9      	ldr	r1, [r7, #8]
 8016e2e:	f7ea fb07 	bl	8001440 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8016e32:	bf00      	nop
 8016e34:	4618      	mov	r0, r3
 8016e36:	3710      	adds	r7, #16
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd80      	pop	{r7, pc}

08016e3c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b082      	sub	sp, #8
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	4603      	mov	r3, r0
 8016e44:	603a      	str	r2, [r7, #0]
 8016e46:	71fb      	strb	r3, [r7, #7]
 8016e48:	460b      	mov	r3, r1
 8016e4a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   // DRESULT res = RES_ERROR;
   // return res;
	SD_disk_ioctl(pdrv, cmd, buff);
 8016e4c:	79fb      	ldrb	r3, [r7, #7]
 8016e4e:	79b9      	ldrb	r1, [r7, #6]
 8016e50:	683a      	ldr	r2, [r7, #0]
 8016e52:	4618      	mov	r0, r3
 8016e54:	f7ea fb78 	bl	8001548 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8016e58:	bf00      	nop
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3708      	adds	r7, #8
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}

08016e62 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8016e62:	b590      	push	{r4, r7, lr}
 8016e64:	b089      	sub	sp, #36	; 0x24
 8016e66:	af04      	add	r7, sp, #16
 8016e68:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016e70:	7919      	ldrb	r1, [r3, #4]
 8016e72:	2350      	movs	r3, #80	; 0x50
 8016e74:	2206      	movs	r2, #6
 8016e76:	6878      	ldr	r0, [r7, #4]
 8016e78:	f001 fc4e 	bl	8018718 <USBH_FindInterface>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8016e80:	7bfb      	ldrb	r3, [r7, #15]
 8016e82:	2bff      	cmp	r3, #255	; 0xff
 8016e84:	d002      	beq.n	8016e8c <USBH_MSC_InterfaceInit+0x2a>
 8016e86:	7bfb      	ldrb	r3, [r7, #15]
 8016e88:	2b01      	cmp	r3, #1
 8016e8a:	d901      	bls.n	8016e90 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8016e8c:	2302      	movs	r3, #2
 8016e8e:	e0ef      	b.n	8017070 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8016e90:	7bfb      	ldrb	r3, [r7, #15]
 8016e92:	4619      	mov	r1, r3
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f001 fc23 	bl	80186e0 <USBH_SelectInterface>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8016e9e:	7bbb      	ldrb	r3, [r7, #14]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d001      	beq.n	8016ea8 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8016ea4:	2302      	movs	r3, #2
 8016ea6:	e0e3      	b.n	8017070 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8016eae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8016eb2:	f007 f8bb 	bl	801e02c <malloc>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016ec0:	69db      	ldr	r3, [r3, #28]
 8016ec2:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8016ec4:	68bb      	ldr	r3, [r7, #8]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d101      	bne.n	8016ece <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8016eca:	2302      	movs	r3, #2
 8016ecc:	e0d0      	b.n	8017070 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8016ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016ed2:	2100      	movs	r1, #0
 8016ed4:	68b8      	ldr	r0, [r7, #8]
 8016ed6:	f007 f8c4 	bl	801e062 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8016eda:	7bfb      	ldrb	r3, [r7, #15]
 8016edc:	687a      	ldr	r2, [r7, #4]
 8016ede:	211a      	movs	r1, #26
 8016ee0:	fb01 f303 	mul.w	r3, r1, r3
 8016ee4:	4413      	add	r3, r2
 8016ee6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8016eea:	781b      	ldrb	r3, [r3, #0]
 8016eec:	b25b      	sxtb	r3, r3
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	da16      	bge.n	8016f20 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8016ef2:	7bfb      	ldrb	r3, [r7, #15]
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	211a      	movs	r1, #26
 8016ef8:	fb01 f303 	mul.w	r3, r1, r3
 8016efc:	4413      	add	r3, r2
 8016efe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8016f02:	781a      	ldrb	r2, [r3, #0]
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8016f08:	7bfb      	ldrb	r3, [r7, #15]
 8016f0a:	687a      	ldr	r2, [r7, #4]
 8016f0c:	211a      	movs	r1, #26
 8016f0e:	fb01 f303 	mul.w	r3, r1, r3
 8016f12:	4413      	add	r3, r2
 8016f14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8016f18:	881a      	ldrh	r2, [r3, #0]
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	815a      	strh	r2, [r3, #10]
 8016f1e:	e015      	b.n	8016f4c <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8016f20:	7bfb      	ldrb	r3, [r7, #15]
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	211a      	movs	r1, #26
 8016f26:	fb01 f303 	mul.w	r3, r1, r3
 8016f2a:	4413      	add	r3, r2
 8016f2c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8016f30:	781a      	ldrb	r2, [r3, #0]
 8016f32:	68bb      	ldr	r3, [r7, #8]
 8016f34:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8016f36:	7bfb      	ldrb	r3, [r7, #15]
 8016f38:	687a      	ldr	r2, [r7, #4]
 8016f3a:	211a      	movs	r1, #26
 8016f3c:	fb01 f303 	mul.w	r3, r1, r3
 8016f40:	4413      	add	r3, r2
 8016f42:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8016f46:	881a      	ldrh	r2, [r3, #0]
 8016f48:	68bb      	ldr	r3, [r7, #8]
 8016f4a:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8016f4c:	7bfb      	ldrb	r3, [r7, #15]
 8016f4e:	687a      	ldr	r2, [r7, #4]
 8016f50:	211a      	movs	r1, #26
 8016f52:	fb01 f303 	mul.w	r3, r1, r3
 8016f56:	4413      	add	r3, r2
 8016f58:	f203 3356 	addw	r3, r3, #854	; 0x356
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	b25b      	sxtb	r3, r3
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	da16      	bge.n	8016f92 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8016f64:	7bfb      	ldrb	r3, [r7, #15]
 8016f66:	687a      	ldr	r2, [r7, #4]
 8016f68:	211a      	movs	r1, #26
 8016f6a:	fb01 f303 	mul.w	r3, r1, r3
 8016f6e:	4413      	add	r3, r2
 8016f70:	f203 3356 	addw	r3, r3, #854	; 0x356
 8016f74:	781a      	ldrb	r2, [r3, #0]
 8016f76:	68bb      	ldr	r3, [r7, #8]
 8016f78:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8016f7a:	7bfb      	ldrb	r3, [r7, #15]
 8016f7c:	687a      	ldr	r2, [r7, #4]
 8016f7e:	211a      	movs	r1, #26
 8016f80:	fb01 f303 	mul.w	r3, r1, r3
 8016f84:	4413      	add	r3, r2
 8016f86:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8016f8a:	881a      	ldrh	r2, [r3, #0]
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	815a      	strh	r2, [r3, #10]
 8016f90:	e015      	b.n	8016fbe <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8016f92:	7bfb      	ldrb	r3, [r7, #15]
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	211a      	movs	r1, #26
 8016f98:	fb01 f303 	mul.w	r3, r1, r3
 8016f9c:	4413      	add	r3, r2
 8016f9e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8016fa2:	781a      	ldrb	r2, [r3, #0]
 8016fa4:	68bb      	ldr	r3, [r7, #8]
 8016fa6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8016fa8:	7bfb      	ldrb	r3, [r7, #15]
 8016faa:	687a      	ldr	r2, [r7, #4]
 8016fac:	211a      	movs	r1, #26
 8016fae:	fb01 f303 	mul.w	r3, r1, r3
 8016fb2:	4413      	add	r3, r2
 8016fb4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8016fb8:	881a      	ldrh	r2, [r3, #0]
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8016fbe:	68bb      	ldr	r3, [r7, #8]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8016fc4:	68bb      	ldr	r3, [r7, #8]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8016fca:	68bb      	ldr	r3, [r7, #8]
 8016fcc:	2200      	movs	r2, #0
 8016fce:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	799b      	ldrb	r3, [r3, #6]
 8016fd4:	4619      	mov	r1, r3
 8016fd6:	6878      	ldr	r0, [r7, #4]
 8016fd8:	f002 fdc1 	bl	8019b5e <USBH_AllocPipe>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	461a      	mov	r2, r3
 8016fe0:	68bb      	ldr	r3, [r7, #8]
 8016fe2:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	79db      	ldrb	r3, [r3, #7]
 8016fe8:	4619      	mov	r1, r3
 8016fea:	6878      	ldr	r0, [r7, #4]
 8016fec:	f002 fdb7 	bl	8019b5e <USBH_AllocPipe>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8016ff8:	6878      	ldr	r0, [r7, #4]
 8016ffa:	f000 fda3 	bl	8017b44 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8016ffe:	68bb      	ldr	r3, [r7, #8]
 8017000:	7959      	ldrb	r1, [r3, #5]
 8017002:	68bb      	ldr	r3, [r7, #8]
 8017004:	7998      	ldrb	r0, [r3, #6]
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017012:	68ba      	ldr	r2, [r7, #8]
 8017014:	8912      	ldrh	r2, [r2, #8]
 8017016:	9202      	str	r2, [sp, #8]
 8017018:	2202      	movs	r2, #2
 801701a:	9201      	str	r2, [sp, #4]
 801701c:	9300      	str	r3, [sp, #0]
 801701e:	4623      	mov	r3, r4
 8017020:	4602      	mov	r2, r0
 8017022:	6878      	ldr	r0, [r7, #4]
 8017024:	f002 fd6c 	bl	8019b00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8017028:	68bb      	ldr	r3, [r7, #8]
 801702a:	7919      	ldrb	r1, [r3, #4]
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	79d8      	ldrb	r0, [r3, #7]
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801703c:	68ba      	ldr	r2, [r7, #8]
 801703e:	8952      	ldrh	r2, [r2, #10]
 8017040:	9202      	str	r2, [sp, #8]
 8017042:	2202      	movs	r2, #2
 8017044:	9201      	str	r2, [sp, #4]
 8017046:	9300      	str	r3, [sp, #0]
 8017048:	4623      	mov	r3, r4
 801704a:	4602      	mov	r2, r0
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f002 fd57 	bl	8019b00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8017052:	68bb      	ldr	r3, [r7, #8]
 8017054:	791b      	ldrb	r3, [r3, #4]
 8017056:	2200      	movs	r2, #0
 8017058:	4619      	mov	r1, r3
 801705a:	6878      	ldr	r0, [r7, #4]
 801705c:	f006 fefe 	bl	801de5c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8017060:	68bb      	ldr	r3, [r7, #8]
 8017062:	795b      	ldrb	r3, [r3, #5]
 8017064:	2200      	movs	r2, #0
 8017066:	4619      	mov	r1, r3
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f006 fef7 	bl	801de5c <USBH_LL_SetToggle>

  return USBH_OK;
 801706e:	2300      	movs	r3, #0
}
 8017070:	4618      	mov	r0, r3
 8017072:	3714      	adds	r7, #20
 8017074:	46bd      	mov	sp, r7
 8017076:	bd90      	pop	{r4, r7, pc}

08017078 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b084      	sub	sp, #16
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017086:	69db      	ldr	r3, [r3, #28]
 8017088:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	795b      	ldrb	r3, [r3, #5]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d00e      	beq.n	80170b0 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	795b      	ldrb	r3, [r3, #5]
 8017096:	4619      	mov	r1, r3
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f002 fd50 	bl	8019b3e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	795b      	ldrb	r3, [r3, #5]
 80170a2:	4619      	mov	r1, r3
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f002 fd7b 	bl	8019ba0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	2200      	movs	r2, #0
 80170ae:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	791b      	ldrb	r3, [r3, #4]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d00e      	beq.n	80170d6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	791b      	ldrb	r3, [r3, #4]
 80170bc:	4619      	mov	r1, r3
 80170be:	6878      	ldr	r0, [r7, #4]
 80170c0:	f002 fd3d 	bl	8019b3e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	791b      	ldrb	r3, [r3, #4]
 80170c8:	4619      	mov	r1, r3
 80170ca:	6878      	ldr	r0, [r7, #4]
 80170cc:	f002 fd68 	bl	8019ba0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	2200      	movs	r2, #0
 80170d4:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80170dc:	69db      	ldr	r3, [r3, #28]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d00b      	beq.n	80170fa <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80170e8:	69db      	ldr	r3, [r3, #28]
 80170ea:	4618      	mov	r0, r3
 80170ec:	f006 ffa6 	bl	801e03c <free>
    phost->pActiveClass->pData = 0U;
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80170f6:	2200      	movs	r2, #0
 80170f8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80170fa:	2300      	movs	r3, #0
}
 80170fc:	4618      	mov	r0, r3
 80170fe:	3710      	adds	r7, #16
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}

08017104 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b084      	sub	sp, #16
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017112:	69db      	ldr	r3, [r3, #28]
 8017114:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8017116:	2301      	movs	r3, #1
 8017118:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	7b9b      	ldrb	r3, [r3, #14]
 801711e:	2b02      	cmp	r3, #2
 8017120:	d004      	beq.n	801712c <USBH_MSC_ClassRequest+0x28>
 8017122:	2b03      	cmp	r3, #3
 8017124:	d03e      	beq.n	80171a4 <USBH_MSC_ClassRequest+0xa0>
 8017126:	2b00      	cmp	r3, #0
 8017128:	d000      	beq.n	801712c <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 801712a:	e04a      	b.n	80171c2 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	4619      	mov	r1, r3
 8017130:	6878      	ldr	r0, [r7, #4]
 8017132:	f000 fce9 	bl	8017b08 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8017136:	4603      	mov	r3, r0
 8017138:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 801713a:	7bfb      	ldrb	r3, [r7, #15]
 801713c:	2b03      	cmp	r3, #3
 801713e:	d104      	bne.n	801714a <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8017140:	68bb      	ldr	r3, [r7, #8]
 8017142:	2200      	movs	r2, #0
 8017144:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8017146:	2300      	movs	r3, #0
 8017148:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 801714a:	7bfb      	ldrb	r3, [r7, #15]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d135      	bne.n	80171bc <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8017150:	68bb      	ldr	r3, [r7, #8]
 8017152:	781b      	ldrb	r3, [r3, #0]
 8017154:	2b02      	cmp	r3, #2
 8017156:	d804      	bhi.n	8017162 <USBH_MSC_ClassRequest+0x5e>
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	3301      	adds	r3, #1
 801715e:	b2da      	uxtb	r2, r3
 8017160:	e000      	b.n	8017164 <USBH_MSC_ClassRequest+0x60>
 8017162:	2202      	movs	r2, #2
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8017168:	2300      	movs	r3, #0
 801716a:	73bb      	strb	r3, [r7, #14]
 801716c:	e014      	b.n	8017198 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 801716e:	7bbb      	ldrb	r3, [r7, #14]
 8017170:	68ba      	ldr	r2, [r7, #8]
 8017172:	2134      	movs	r1, #52	; 0x34
 8017174:	fb01 f303 	mul.w	r3, r1, r3
 8017178:	4413      	add	r3, r2
 801717a:	3392      	adds	r3, #146	; 0x92
 801717c:	2202      	movs	r2, #2
 801717e:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8017180:	7bbb      	ldrb	r3, [r7, #14]
 8017182:	68ba      	ldr	r2, [r7, #8]
 8017184:	2134      	movs	r1, #52	; 0x34
 8017186:	fb01 f303 	mul.w	r3, r1, r3
 801718a:	4413      	add	r3, r2
 801718c:	33c1      	adds	r3, #193	; 0xc1
 801718e:	2200      	movs	r2, #0
 8017190:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8017192:	7bbb      	ldrb	r3, [r7, #14]
 8017194:	3301      	adds	r3, #1
 8017196:	73bb      	strb	r3, [r7, #14]
 8017198:	68bb      	ldr	r3, [r7, #8]
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	7bba      	ldrb	r2, [r7, #14]
 801719e:	429a      	cmp	r2, r3
 80171a0:	d3e5      	bcc.n	801716e <USBH_MSC_ClassRequest+0x6a>
      break;
 80171a2:	e00b      	b.n	80171bc <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80171a4:	2100      	movs	r1, #0
 80171a6:	6878      	ldr	r0, [r7, #4]
 80171a8:	f002 f877 	bl	801929a <USBH_ClrFeature>
 80171ac:	4603      	mov	r3, r0
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d106      	bne.n	80171c0 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	7bda      	ldrb	r2, [r3, #15]
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	739a      	strb	r2, [r3, #14]
      break;
 80171ba:	e001      	b.n	80171c0 <USBH_MSC_ClassRequest+0xbc>
      break;
 80171bc:	bf00      	nop
 80171be:	e000      	b.n	80171c2 <USBH_MSC_ClassRequest+0xbe>
      break;
 80171c0:	bf00      	nop
  }

  return status;
 80171c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80171c4:	4618      	mov	r0, r3
 80171c6:	3710      	adds	r7, #16
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}

080171cc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b086      	sub	sp, #24
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80171da:	69db      	ldr	r3, [r3, #28]
 80171dc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80171de:	2301      	movs	r3, #1
 80171e0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80171e2:	2301      	movs	r3, #1
 80171e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80171e6:	2301      	movs	r3, #1
 80171e8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80171ea:	693b      	ldr	r3, [r7, #16]
 80171ec:	7b1b      	ldrb	r3, [r3, #12]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d003      	beq.n	80171fa <USBH_MSC_Process+0x2e>
 80171f2:	2b01      	cmp	r3, #1
 80171f4:	f000 8271 	beq.w	80176da <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80171f8:	e272      	b.n	80176e0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80171fa:	693b      	ldr	r3, [r7, #16]
 80171fc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8017200:	693b      	ldr	r3, [r7, #16]
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	b29b      	uxth	r3, r3
 8017206:	429a      	cmp	r2, r3
 8017208:	f080 824f 	bcs.w	80176aa <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 801720c:	693b      	ldr	r3, [r7, #16]
 801720e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017212:	4619      	mov	r1, r3
 8017214:	693a      	ldr	r2, [r7, #16]
 8017216:	2334      	movs	r3, #52	; 0x34
 8017218:	fb03 f301 	mul.w	r3, r3, r1
 801721c:	4413      	add	r3, r2
 801721e:	3391      	adds	r3, #145	; 0x91
 8017220:	2201      	movs	r2, #1
 8017222:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8017224:	693b      	ldr	r3, [r7, #16]
 8017226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801722a:	4619      	mov	r1, r3
 801722c:	693a      	ldr	r2, [r7, #16]
 801722e:	2334      	movs	r3, #52	; 0x34
 8017230:	fb03 f301 	mul.w	r3, r3, r1
 8017234:	4413      	add	r3, r2
 8017236:	3390      	adds	r3, #144	; 0x90
 8017238:	781b      	ldrb	r3, [r3, #0]
 801723a:	2b08      	cmp	r3, #8
 801723c:	f200 8243 	bhi.w	80176c6 <USBH_MSC_Process+0x4fa>
 8017240:	a201      	add	r2, pc, #4	; (adr r2, 8017248 <USBH_MSC_Process+0x7c>)
 8017242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017246:	bf00      	nop
 8017248:	0801726d 	.word	0x0801726d
 801724c:	080176c7 	.word	0x080176c7
 8017250:	08017335 	.word	0x08017335
 8017254:	080174b9 	.word	0x080174b9
 8017258:	08017293 	.word	0x08017293
 801725c:	08017585 	.word	0x08017585
 8017260:	080176c7 	.word	0x080176c7
 8017264:	080176c7 	.word	0x080176c7
 8017268:	08017699 	.word	0x08017699
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 801726c:	693b      	ldr	r3, [r7, #16]
 801726e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017272:	4619      	mov	r1, r3
 8017274:	693a      	ldr	r2, [r7, #16]
 8017276:	2334      	movs	r3, #52	; 0x34
 8017278:	fb03 f301 	mul.w	r3, r3, r1
 801727c:	4413      	add	r3, r2
 801727e:	3390      	adds	r3, #144	; 0x90
 8017280:	2204      	movs	r2, #4
 8017282:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 801728a:	693b      	ldr	r3, [r7, #16]
 801728c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8017290:	e222      	b.n	80176d8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8017292:	693b      	ldr	r3, [r7, #16]
 8017294:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017298:	b2d9      	uxtb	r1, r3
 801729a:	693b      	ldr	r3, [r7, #16]
 801729c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80172a0:	461a      	mov	r2, r3
 80172a2:	2334      	movs	r3, #52	; 0x34
 80172a4:	fb03 f302 	mul.w	r3, r3, r2
 80172a8:	3398      	adds	r3, #152	; 0x98
 80172aa:	693a      	ldr	r2, [r7, #16]
 80172ac:	4413      	add	r3, r2
 80172ae:	3307      	adds	r3, #7
 80172b0:	461a      	mov	r2, r3
 80172b2:	6878      	ldr	r0, [r7, #4]
 80172b4:	f000 ff68 	bl	8018188 <USBH_MSC_SCSI_Inquiry>
 80172b8:	4603      	mov	r3, r0
 80172ba:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80172bc:	7bfb      	ldrb	r3, [r7, #15]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d10b      	bne.n	80172da <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80172c8:	4619      	mov	r1, r3
 80172ca:	693a      	ldr	r2, [r7, #16]
 80172cc:	2334      	movs	r3, #52	; 0x34
 80172ce:	fb03 f301 	mul.w	r3, r3, r1
 80172d2:	4413      	add	r3, r2
 80172d4:	3390      	adds	r3, #144	; 0x90
 80172d6:	2202      	movs	r2, #2
 80172d8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80172da:	7bfb      	ldrb	r3, [r7, #15]
 80172dc:	2b02      	cmp	r3, #2
 80172de:	d10c      	bne.n	80172fa <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80172e0:	693b      	ldr	r3, [r7, #16]
 80172e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80172e6:	4619      	mov	r1, r3
 80172e8:	693a      	ldr	r2, [r7, #16]
 80172ea:	2334      	movs	r3, #52	; 0x34
 80172ec:	fb03 f301 	mul.w	r3, r3, r1
 80172f0:	4413      	add	r3, r2
 80172f2:	3390      	adds	r3, #144	; 0x90
 80172f4:	2205      	movs	r2, #5
 80172f6:	701a      	strb	r2, [r3, #0]
            break;
 80172f8:	e1e7      	b.n	80176ca <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80172fa:	7bfb      	ldrb	r3, [r7, #15]
 80172fc:	2b04      	cmp	r3, #4
 80172fe:	f040 81e4 	bne.w	80176ca <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8017302:	693b      	ldr	r3, [r7, #16]
 8017304:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017308:	4619      	mov	r1, r3
 801730a:	693a      	ldr	r2, [r7, #16]
 801730c:	2334      	movs	r3, #52	; 0x34
 801730e:	fb03 f301 	mul.w	r3, r3, r1
 8017312:	4413      	add	r3, r2
 8017314:	3390      	adds	r3, #144	; 0x90
 8017316:	2201      	movs	r2, #1
 8017318:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 801731a:	693b      	ldr	r3, [r7, #16]
 801731c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017320:	4619      	mov	r1, r3
 8017322:	693a      	ldr	r2, [r7, #16]
 8017324:	2334      	movs	r3, #52	; 0x34
 8017326:	fb03 f301 	mul.w	r3, r3, r1
 801732a:	4413      	add	r3, r2
 801732c:	3391      	adds	r3, #145	; 0x91
 801732e:	2202      	movs	r2, #2
 8017330:	701a      	strb	r2, [r3, #0]
            break;
 8017332:	e1ca      	b.n	80176ca <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8017334:	693b      	ldr	r3, [r7, #16]
 8017336:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801733a:	b2db      	uxtb	r3, r3
 801733c:	4619      	mov	r1, r3
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f000 fe64 	bl	801800c <USBH_MSC_SCSI_TestUnitReady>
 8017344:	4603      	mov	r3, r0
 8017346:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8017348:	7bbb      	ldrb	r3, [r7, #14]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d149      	bne.n	80173e2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017354:	4619      	mov	r1, r3
 8017356:	693a      	ldr	r2, [r7, #16]
 8017358:	2334      	movs	r3, #52	; 0x34
 801735a:	fb03 f301 	mul.w	r3, r3, r1
 801735e:	4413      	add	r3, r2
 8017360:	3392      	adds	r3, #146	; 0x92
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d00c      	beq.n	8017382 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8017368:	693b      	ldr	r3, [r7, #16]
 801736a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801736e:	4619      	mov	r1, r3
 8017370:	693a      	ldr	r2, [r7, #16]
 8017372:	2334      	movs	r3, #52	; 0x34
 8017374:	fb03 f301 	mul.w	r3, r3, r1
 8017378:	4413      	add	r3, r2
 801737a:	33c1      	adds	r3, #193	; 0xc1
 801737c:	2201      	movs	r2, #1
 801737e:	701a      	strb	r2, [r3, #0]
 8017380:	e00b      	b.n	801739a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8017382:	693b      	ldr	r3, [r7, #16]
 8017384:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017388:	4619      	mov	r1, r3
 801738a:	693a      	ldr	r2, [r7, #16]
 801738c:	2334      	movs	r3, #52	; 0x34
 801738e:	fb03 f301 	mul.w	r3, r3, r1
 8017392:	4413      	add	r3, r2
 8017394:	33c1      	adds	r3, #193	; 0xc1
 8017396:	2200      	movs	r2, #0
 8017398:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80173a0:	4619      	mov	r1, r3
 80173a2:	693a      	ldr	r2, [r7, #16]
 80173a4:	2334      	movs	r3, #52	; 0x34
 80173a6:	fb03 f301 	mul.w	r3, r3, r1
 80173aa:	4413      	add	r3, r2
 80173ac:	3390      	adds	r3, #144	; 0x90
 80173ae:	2203      	movs	r2, #3
 80173b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80173b2:	693b      	ldr	r3, [r7, #16]
 80173b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80173b8:	4619      	mov	r1, r3
 80173ba:	693a      	ldr	r2, [r7, #16]
 80173bc:	2334      	movs	r3, #52	; 0x34
 80173be:	fb03 f301 	mul.w	r3, r3, r1
 80173c2:	4413      	add	r3, r2
 80173c4:	3391      	adds	r3, #145	; 0x91
 80173c6:	2200      	movs	r2, #0
 80173c8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80173ca:	693b      	ldr	r3, [r7, #16]
 80173cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80173d0:	4619      	mov	r1, r3
 80173d2:	693a      	ldr	r2, [r7, #16]
 80173d4:	2334      	movs	r3, #52	; 0x34
 80173d6:	fb03 f301 	mul.w	r3, r3, r1
 80173da:	4413      	add	r3, r2
 80173dc:	3392      	adds	r3, #146	; 0x92
 80173de:	2200      	movs	r2, #0
 80173e0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80173e2:	7bbb      	ldrb	r3, [r7, #14]
 80173e4:	2b02      	cmp	r3, #2
 80173e6:	d14a      	bne.n	801747e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80173e8:	693b      	ldr	r3, [r7, #16]
 80173ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80173ee:	4619      	mov	r1, r3
 80173f0:	693a      	ldr	r2, [r7, #16]
 80173f2:	2334      	movs	r3, #52	; 0x34
 80173f4:	fb03 f301 	mul.w	r3, r3, r1
 80173f8:	4413      	add	r3, r2
 80173fa:	3392      	adds	r3, #146	; 0x92
 80173fc:	781b      	ldrb	r3, [r3, #0]
 80173fe:	2b02      	cmp	r3, #2
 8017400:	d00c      	beq.n	801741c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017408:	4619      	mov	r1, r3
 801740a:	693a      	ldr	r2, [r7, #16]
 801740c:	2334      	movs	r3, #52	; 0x34
 801740e:	fb03 f301 	mul.w	r3, r3, r1
 8017412:	4413      	add	r3, r2
 8017414:	33c1      	adds	r3, #193	; 0xc1
 8017416:	2201      	movs	r2, #1
 8017418:	701a      	strb	r2, [r3, #0]
 801741a:	e00b      	b.n	8017434 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 801741c:	693b      	ldr	r3, [r7, #16]
 801741e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017422:	4619      	mov	r1, r3
 8017424:	693a      	ldr	r2, [r7, #16]
 8017426:	2334      	movs	r3, #52	; 0x34
 8017428:	fb03 f301 	mul.w	r3, r3, r1
 801742c:	4413      	add	r3, r2
 801742e:	33c1      	adds	r3, #193	; 0xc1
 8017430:	2200      	movs	r2, #0
 8017432:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8017434:	693b      	ldr	r3, [r7, #16]
 8017436:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801743a:	4619      	mov	r1, r3
 801743c:	693a      	ldr	r2, [r7, #16]
 801743e:	2334      	movs	r3, #52	; 0x34
 8017440:	fb03 f301 	mul.w	r3, r3, r1
 8017444:	4413      	add	r3, r2
 8017446:	3390      	adds	r3, #144	; 0x90
 8017448:	2205      	movs	r2, #5
 801744a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 801744c:	693b      	ldr	r3, [r7, #16]
 801744e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017452:	4619      	mov	r1, r3
 8017454:	693a      	ldr	r2, [r7, #16]
 8017456:	2334      	movs	r3, #52	; 0x34
 8017458:	fb03 f301 	mul.w	r3, r3, r1
 801745c:	4413      	add	r3, r2
 801745e:	3391      	adds	r3, #145	; 0x91
 8017460:	2201      	movs	r2, #1
 8017462:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801746a:	4619      	mov	r1, r3
 801746c:	693a      	ldr	r2, [r7, #16]
 801746e:	2334      	movs	r3, #52	; 0x34
 8017470:	fb03 f301 	mul.w	r3, r3, r1
 8017474:	4413      	add	r3, r2
 8017476:	3392      	adds	r3, #146	; 0x92
 8017478:	2202      	movs	r2, #2
 801747a:	701a      	strb	r2, [r3, #0]
            break;
 801747c:	e127      	b.n	80176ce <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 801747e:	7bbb      	ldrb	r3, [r7, #14]
 8017480:	2b04      	cmp	r3, #4
 8017482:	f040 8124 	bne.w	80176ce <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8017486:	693b      	ldr	r3, [r7, #16]
 8017488:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801748c:	4619      	mov	r1, r3
 801748e:	693a      	ldr	r2, [r7, #16]
 8017490:	2334      	movs	r3, #52	; 0x34
 8017492:	fb03 f301 	mul.w	r3, r3, r1
 8017496:	4413      	add	r3, r2
 8017498:	3390      	adds	r3, #144	; 0x90
 801749a:	2201      	movs	r2, #1
 801749c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 801749e:	693b      	ldr	r3, [r7, #16]
 80174a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80174a4:	4619      	mov	r1, r3
 80174a6:	693a      	ldr	r2, [r7, #16]
 80174a8:	2334      	movs	r3, #52	; 0x34
 80174aa:	fb03 f301 	mul.w	r3, r3, r1
 80174ae:	4413      	add	r3, r2
 80174b0:	3391      	adds	r3, #145	; 0x91
 80174b2:	2202      	movs	r2, #2
 80174b4:	701a      	strb	r2, [r3, #0]
            break;
 80174b6:	e10a      	b.n	80176ce <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80174b8:	693b      	ldr	r3, [r7, #16]
 80174ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80174be:	b2d9      	uxtb	r1, r3
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80174c6:	461a      	mov	r2, r3
 80174c8:	2334      	movs	r3, #52	; 0x34
 80174ca:	fb03 f302 	mul.w	r3, r3, r2
 80174ce:	3390      	adds	r3, #144	; 0x90
 80174d0:	693a      	ldr	r2, [r7, #16]
 80174d2:	4413      	add	r3, r2
 80174d4:	3304      	adds	r3, #4
 80174d6:	461a      	mov	r2, r3
 80174d8:	6878      	ldr	r0, [r7, #4]
 80174da:	f000 fdda 	bl	8018092 <USBH_MSC_SCSI_ReadCapacity>
 80174de:	4603      	mov	r3, r0
 80174e0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80174e2:	7bfb      	ldrb	r3, [r7, #15]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d120      	bne.n	801752a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80174e8:	693b      	ldr	r3, [r7, #16]
 80174ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80174ee:	4619      	mov	r1, r3
 80174f0:	693a      	ldr	r2, [r7, #16]
 80174f2:	2334      	movs	r3, #52	; 0x34
 80174f4:	fb03 f301 	mul.w	r3, r3, r1
 80174f8:	4413      	add	r3, r2
 80174fa:	3390      	adds	r3, #144	; 0x90
 80174fc:	2201      	movs	r2, #1
 80174fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8017500:	693b      	ldr	r3, [r7, #16]
 8017502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017506:	4619      	mov	r1, r3
 8017508:	693a      	ldr	r2, [r7, #16]
 801750a:	2334      	movs	r3, #52	; 0x34
 801750c:	fb03 f301 	mul.w	r3, r3, r1
 8017510:	4413      	add	r3, r2
 8017512:	3391      	adds	r3, #145	; 0x91
 8017514:	2200      	movs	r2, #0
 8017516:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8017518:	693b      	ldr	r3, [r7, #16]
 801751a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801751e:	3301      	adds	r3, #1
 8017520:	b29a      	uxth	r2, r3
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8017528:	e0d3      	b.n	80176d2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 801752a:	7bfb      	ldrb	r3, [r7, #15]
 801752c:	2b02      	cmp	r3, #2
 801752e:	d10c      	bne.n	801754a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8017530:	693b      	ldr	r3, [r7, #16]
 8017532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017536:	4619      	mov	r1, r3
 8017538:	693a      	ldr	r2, [r7, #16]
 801753a:	2334      	movs	r3, #52	; 0x34
 801753c:	fb03 f301 	mul.w	r3, r3, r1
 8017540:	4413      	add	r3, r2
 8017542:	3390      	adds	r3, #144	; 0x90
 8017544:	2205      	movs	r2, #5
 8017546:	701a      	strb	r2, [r3, #0]
            break;
 8017548:	e0c3      	b.n	80176d2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 801754a:	7bfb      	ldrb	r3, [r7, #15]
 801754c:	2b04      	cmp	r3, #4
 801754e:	f040 80c0 	bne.w	80176d2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8017552:	693b      	ldr	r3, [r7, #16]
 8017554:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017558:	4619      	mov	r1, r3
 801755a:	693a      	ldr	r2, [r7, #16]
 801755c:	2334      	movs	r3, #52	; 0x34
 801755e:	fb03 f301 	mul.w	r3, r3, r1
 8017562:	4413      	add	r3, r2
 8017564:	3390      	adds	r3, #144	; 0x90
 8017566:	2201      	movs	r2, #1
 8017568:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017570:	4619      	mov	r1, r3
 8017572:	693a      	ldr	r2, [r7, #16]
 8017574:	2334      	movs	r3, #52	; 0x34
 8017576:	fb03 f301 	mul.w	r3, r3, r1
 801757a:	4413      	add	r3, r2
 801757c:	3391      	adds	r3, #145	; 0x91
 801757e:	2202      	movs	r2, #2
 8017580:	701a      	strb	r2, [r3, #0]
            break;
 8017582:	e0a6      	b.n	80176d2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8017584:	693b      	ldr	r3, [r7, #16]
 8017586:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801758a:	b2d9      	uxtb	r1, r3
 801758c:	693b      	ldr	r3, [r7, #16]
 801758e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017592:	461a      	mov	r2, r3
 8017594:	2334      	movs	r3, #52	; 0x34
 8017596:	fb03 f302 	mul.w	r3, r3, r2
 801759a:	3398      	adds	r3, #152	; 0x98
 801759c:	693a      	ldr	r2, [r7, #16]
 801759e:	4413      	add	r3, r2
 80175a0:	3304      	adds	r3, #4
 80175a2:	461a      	mov	r2, r3
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f000 fe94 	bl	80182d2 <USBH_MSC_SCSI_RequestSense>
 80175aa:	4603      	mov	r3, r0
 80175ac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80175ae:	7bfb      	ldrb	r3, [r7, #15]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d145      	bne.n	8017640 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80175b4:	693b      	ldr	r3, [r7, #16]
 80175b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80175ba:	4619      	mov	r1, r3
 80175bc:	693a      	ldr	r2, [r7, #16]
 80175be:	2334      	movs	r3, #52	; 0x34
 80175c0:	fb03 f301 	mul.w	r3, r3, r1
 80175c4:	4413      	add	r3, r2
 80175c6:	339c      	adds	r3, #156	; 0x9c
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	2b06      	cmp	r3, #6
 80175cc:	d00c      	beq.n	80175e8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80175d4:	4619      	mov	r1, r3
 80175d6:	693a      	ldr	r2, [r7, #16]
 80175d8:	2334      	movs	r3, #52	; 0x34
 80175da:	fb03 f301 	mul.w	r3, r3, r1
 80175de:	4413      	add	r3, r2
 80175e0:	339c      	adds	r3, #156	; 0x9c
 80175e2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80175e4:	2b02      	cmp	r3, #2
 80175e6:	d117      	bne.n	8017618 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80175ee:	693b      	ldr	r3, [r7, #16]
 80175f0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80175f4:	1ad3      	subs	r3, r2, r3
 80175f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80175fa:	4293      	cmp	r3, r2
 80175fc:	d80c      	bhi.n	8017618 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80175fe:	693b      	ldr	r3, [r7, #16]
 8017600:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017604:	4619      	mov	r1, r3
 8017606:	693a      	ldr	r2, [r7, #16]
 8017608:	2334      	movs	r3, #52	; 0x34
 801760a:	fb03 f301 	mul.w	r3, r3, r1
 801760e:	4413      	add	r3, r2
 8017610:	3390      	adds	r3, #144	; 0x90
 8017612:	2202      	movs	r2, #2
 8017614:	701a      	strb	r2, [r3, #0]
                  break;
 8017616:	e05f      	b.n	80176d8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801761e:	4619      	mov	r1, r3
 8017620:	693a      	ldr	r2, [r7, #16]
 8017622:	2334      	movs	r3, #52	; 0x34
 8017624:	fb03 f301 	mul.w	r3, r3, r1
 8017628:	4413      	add	r3, r2
 801762a:	3390      	adds	r3, #144	; 0x90
 801762c:	2201      	movs	r2, #1
 801762e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8017630:	693b      	ldr	r3, [r7, #16]
 8017632:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017636:	3301      	adds	r3, #1
 8017638:	b29a      	uxth	r2, r3
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8017640:	7bfb      	ldrb	r3, [r7, #15]
 8017642:	2b02      	cmp	r3, #2
 8017644:	d10c      	bne.n	8017660 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8017646:	693b      	ldr	r3, [r7, #16]
 8017648:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801764c:	4619      	mov	r1, r3
 801764e:	693a      	ldr	r2, [r7, #16]
 8017650:	2334      	movs	r3, #52	; 0x34
 8017652:	fb03 f301 	mul.w	r3, r3, r1
 8017656:	4413      	add	r3, r2
 8017658:	3390      	adds	r3, #144	; 0x90
 801765a:	2208      	movs	r2, #8
 801765c:	701a      	strb	r2, [r3, #0]
            break;
 801765e:	e03a      	b.n	80176d6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8017660:	7bfb      	ldrb	r3, [r7, #15]
 8017662:	2b04      	cmp	r3, #4
 8017664:	d137      	bne.n	80176d6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801766c:	4619      	mov	r1, r3
 801766e:	693a      	ldr	r2, [r7, #16]
 8017670:	2334      	movs	r3, #52	; 0x34
 8017672:	fb03 f301 	mul.w	r3, r3, r1
 8017676:	4413      	add	r3, r2
 8017678:	3390      	adds	r3, #144	; 0x90
 801767a:	2201      	movs	r2, #1
 801767c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017684:	4619      	mov	r1, r3
 8017686:	693a      	ldr	r2, [r7, #16]
 8017688:	2334      	movs	r3, #52	; 0x34
 801768a:	fb03 f301 	mul.w	r3, r3, r1
 801768e:	4413      	add	r3, r2
 8017690:	3391      	adds	r3, #145	; 0x91
 8017692:	2202      	movs	r2, #2
 8017694:	701a      	strb	r2, [r3, #0]
            break;
 8017696:	e01e      	b.n	80176d6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8017698:	693b      	ldr	r3, [r7, #16]
 801769a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801769e:	3301      	adds	r3, #1
 80176a0:	b29a      	uxth	r2, r3
 80176a2:	693b      	ldr	r3, [r7, #16]
 80176a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80176a8:	e016      	b.n	80176d8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80176aa:	693b      	ldr	r3, [r7, #16]
 80176ac:	2200      	movs	r2, #0
 80176ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80176b2:	693b      	ldr	r3, [r7, #16]
 80176b4:	2201      	movs	r2, #1
 80176b6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80176be:	2102      	movs	r1, #2
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	4798      	blx	r3
      break;
 80176c4:	e00c      	b.n	80176e0 <USBH_MSC_Process+0x514>
            break;
 80176c6:	bf00      	nop
 80176c8:	e00a      	b.n	80176e0 <USBH_MSC_Process+0x514>
            break;
 80176ca:	bf00      	nop
 80176cc:	e008      	b.n	80176e0 <USBH_MSC_Process+0x514>
            break;
 80176ce:	bf00      	nop
 80176d0:	e006      	b.n	80176e0 <USBH_MSC_Process+0x514>
            break;
 80176d2:	bf00      	nop
 80176d4:	e004      	b.n	80176e0 <USBH_MSC_Process+0x514>
            break;
 80176d6:	bf00      	nop
      break;
 80176d8:	e002      	b.n	80176e0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80176da:	2300      	movs	r3, #0
 80176dc:	75fb      	strb	r3, [r7, #23]
      break;
 80176de:	bf00      	nop
  }
  return error;
 80176e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	3718      	adds	r7, #24
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop

080176ec <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80176f4:	2300      	movs	r3, #0
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	370c      	adds	r7, #12
 80176fa:	46bd      	mov	sp, r7
 80176fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017700:	4770      	bx	lr

08017702 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8017702:	b580      	push	{r7, lr}
 8017704:	b088      	sub	sp, #32
 8017706:	af02      	add	r7, sp, #8
 8017708:	6078      	str	r0, [r7, #4]
 801770a:	460b      	mov	r3, r1
 801770c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017714:	69db      	ldr	r3, [r3, #28]
 8017716:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8017718:	2301      	movs	r3, #1
 801771a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 801771c:	2301      	movs	r3, #1
 801771e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8017720:	78fb      	ldrb	r3, [r7, #3]
 8017722:	693a      	ldr	r2, [r7, #16]
 8017724:	2134      	movs	r1, #52	; 0x34
 8017726:	fb01 f303 	mul.w	r3, r1, r3
 801772a:	4413      	add	r3, r2
 801772c:	3390      	adds	r3, #144	; 0x90
 801772e:	781b      	ldrb	r3, [r3, #0]
 8017730:	2b06      	cmp	r3, #6
 8017732:	d004      	beq.n	801773e <USBH_MSC_RdWrProcess+0x3c>
 8017734:	2b07      	cmp	r3, #7
 8017736:	d037      	beq.n	80177a8 <USBH_MSC_RdWrProcess+0xa6>
 8017738:	2b05      	cmp	r3, #5
 801773a:	d06a      	beq.n	8017812 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 801773c:	e0a6      	b.n	801788c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 801773e:	78f9      	ldrb	r1, [r7, #3]
 8017740:	2300      	movs	r3, #0
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	2300      	movs	r3, #0
 8017746:	2200      	movs	r2, #0
 8017748:	6878      	ldr	r0, [r7, #4]
 801774a:	f000 fea6 	bl	801849a <USBH_MSC_SCSI_Read>
 801774e:	4603      	mov	r3, r0
 8017750:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8017752:	7bfb      	ldrb	r3, [r7, #15]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d10b      	bne.n	8017770 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8017758:	78fb      	ldrb	r3, [r7, #3]
 801775a:	693a      	ldr	r2, [r7, #16]
 801775c:	2134      	movs	r1, #52	; 0x34
 801775e:	fb01 f303 	mul.w	r3, r1, r3
 8017762:	4413      	add	r3, r2
 8017764:	3390      	adds	r3, #144	; 0x90
 8017766:	2201      	movs	r2, #1
 8017768:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 801776a:	2300      	movs	r3, #0
 801776c:	75fb      	strb	r3, [r7, #23]
      break;
 801776e:	e088      	b.n	8017882 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8017770:	7bfb      	ldrb	r3, [r7, #15]
 8017772:	2b02      	cmp	r3, #2
 8017774:	d109      	bne.n	801778a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8017776:	78fb      	ldrb	r3, [r7, #3]
 8017778:	693a      	ldr	r2, [r7, #16]
 801777a:	2134      	movs	r1, #52	; 0x34
 801777c:	fb01 f303 	mul.w	r3, r1, r3
 8017780:	4413      	add	r3, r2
 8017782:	3390      	adds	r3, #144	; 0x90
 8017784:	2205      	movs	r2, #5
 8017786:	701a      	strb	r2, [r3, #0]
      break;
 8017788:	e07b      	b.n	8017882 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 801778a:	7bfb      	ldrb	r3, [r7, #15]
 801778c:	2b04      	cmp	r3, #4
 801778e:	d178      	bne.n	8017882 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8017790:	78fb      	ldrb	r3, [r7, #3]
 8017792:	693a      	ldr	r2, [r7, #16]
 8017794:	2134      	movs	r1, #52	; 0x34
 8017796:	fb01 f303 	mul.w	r3, r1, r3
 801779a:	4413      	add	r3, r2
 801779c:	3390      	adds	r3, #144	; 0x90
 801779e:	2208      	movs	r2, #8
 80177a0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80177a2:	2302      	movs	r3, #2
 80177a4:	75fb      	strb	r3, [r7, #23]
      break;
 80177a6:	e06c      	b.n	8017882 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80177a8:	78f9      	ldrb	r1, [r7, #3]
 80177aa:	2300      	movs	r3, #0
 80177ac:	9300      	str	r3, [sp, #0]
 80177ae:	2300      	movs	r3, #0
 80177b0:	2200      	movs	r2, #0
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f000 fe06 	bl	80183c4 <USBH_MSC_SCSI_Write>
 80177b8:	4603      	mov	r3, r0
 80177ba:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80177bc:	7bfb      	ldrb	r3, [r7, #15]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d10b      	bne.n	80177da <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80177c2:	78fb      	ldrb	r3, [r7, #3]
 80177c4:	693a      	ldr	r2, [r7, #16]
 80177c6:	2134      	movs	r1, #52	; 0x34
 80177c8:	fb01 f303 	mul.w	r3, r1, r3
 80177cc:	4413      	add	r3, r2
 80177ce:	3390      	adds	r3, #144	; 0x90
 80177d0:	2201      	movs	r2, #1
 80177d2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80177d4:	2300      	movs	r3, #0
 80177d6:	75fb      	strb	r3, [r7, #23]
      break;
 80177d8:	e055      	b.n	8017886 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80177da:	7bfb      	ldrb	r3, [r7, #15]
 80177dc:	2b02      	cmp	r3, #2
 80177de:	d109      	bne.n	80177f4 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80177e0:	78fb      	ldrb	r3, [r7, #3]
 80177e2:	693a      	ldr	r2, [r7, #16]
 80177e4:	2134      	movs	r1, #52	; 0x34
 80177e6:	fb01 f303 	mul.w	r3, r1, r3
 80177ea:	4413      	add	r3, r2
 80177ec:	3390      	adds	r3, #144	; 0x90
 80177ee:	2205      	movs	r2, #5
 80177f0:	701a      	strb	r2, [r3, #0]
      break;
 80177f2:	e048      	b.n	8017886 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80177f4:	7bfb      	ldrb	r3, [r7, #15]
 80177f6:	2b04      	cmp	r3, #4
 80177f8:	d145      	bne.n	8017886 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80177fa:	78fb      	ldrb	r3, [r7, #3]
 80177fc:	693a      	ldr	r2, [r7, #16]
 80177fe:	2134      	movs	r1, #52	; 0x34
 8017800:	fb01 f303 	mul.w	r3, r1, r3
 8017804:	4413      	add	r3, r2
 8017806:	3390      	adds	r3, #144	; 0x90
 8017808:	2208      	movs	r2, #8
 801780a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 801780c:	2302      	movs	r3, #2
 801780e:	75fb      	strb	r3, [r7, #23]
      break;
 8017810:	e039      	b.n	8017886 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8017812:	78fb      	ldrb	r3, [r7, #3]
 8017814:	2234      	movs	r2, #52	; 0x34
 8017816:	fb02 f303 	mul.w	r3, r2, r3
 801781a:	3398      	adds	r3, #152	; 0x98
 801781c:	693a      	ldr	r2, [r7, #16]
 801781e:	4413      	add	r3, r2
 8017820:	1d1a      	adds	r2, r3, #4
 8017822:	78fb      	ldrb	r3, [r7, #3]
 8017824:	4619      	mov	r1, r3
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	f000 fd53 	bl	80182d2 <USBH_MSC_SCSI_RequestSense>
 801782c:	4603      	mov	r3, r0
 801782e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8017830:	7bfb      	ldrb	r3, [r7, #15]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d113      	bne.n	801785e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8017836:	78fb      	ldrb	r3, [r7, #3]
 8017838:	693a      	ldr	r2, [r7, #16]
 801783a:	2134      	movs	r1, #52	; 0x34
 801783c:	fb01 f303 	mul.w	r3, r1, r3
 8017840:	4413      	add	r3, r2
 8017842:	3390      	adds	r3, #144	; 0x90
 8017844:	2201      	movs	r2, #1
 8017846:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8017848:	78fb      	ldrb	r3, [r7, #3]
 801784a:	693a      	ldr	r2, [r7, #16]
 801784c:	2134      	movs	r1, #52	; 0x34
 801784e:	fb01 f303 	mul.w	r3, r1, r3
 8017852:	4413      	add	r3, r2
 8017854:	3391      	adds	r3, #145	; 0x91
 8017856:	2202      	movs	r2, #2
 8017858:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 801785a:	2302      	movs	r3, #2
 801785c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 801785e:	7bfb      	ldrb	r3, [r7, #15]
 8017860:	2b02      	cmp	r3, #2
 8017862:	d012      	beq.n	801788a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8017864:	7bfb      	ldrb	r3, [r7, #15]
 8017866:	2b04      	cmp	r3, #4
 8017868:	d10f      	bne.n	801788a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 801786a:	78fb      	ldrb	r3, [r7, #3]
 801786c:	693a      	ldr	r2, [r7, #16]
 801786e:	2134      	movs	r1, #52	; 0x34
 8017870:	fb01 f303 	mul.w	r3, r1, r3
 8017874:	4413      	add	r3, r2
 8017876:	3390      	adds	r3, #144	; 0x90
 8017878:	2208      	movs	r2, #8
 801787a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 801787c:	2302      	movs	r3, #2
 801787e:	75fb      	strb	r3, [r7, #23]
      break;
 8017880:	e003      	b.n	801788a <USBH_MSC_RdWrProcess+0x188>
      break;
 8017882:	bf00      	nop
 8017884:	e002      	b.n	801788c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8017886:	bf00      	nop
 8017888:	e000      	b.n	801788c <USBH_MSC_RdWrProcess+0x18a>
      break;
 801788a:	bf00      	nop

  }
  return error;
 801788c:	7dfb      	ldrb	r3, [r7, #23]
}
 801788e:	4618      	mov	r0, r3
 8017890:	3718      	adds	r7, #24
 8017892:	46bd      	mov	sp, r7
 8017894:	bd80      	pop	{r7, pc}

08017896 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8017896:	b480      	push	{r7}
 8017898:	b085      	sub	sp, #20
 801789a:	af00      	add	r7, sp, #0
 801789c:	6078      	str	r0, [r7, #4]
 801789e:	460b      	mov	r3, r1
 80178a0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80178a8:	69db      	ldr	r3, [r3, #28]
 80178aa:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	781b      	ldrb	r3, [r3, #0]
 80178b0:	b2db      	uxtb	r3, r3
 80178b2:	2b0b      	cmp	r3, #11
 80178b4:	d10c      	bne.n	80178d0 <USBH_MSC_UnitIsReady+0x3a>
 80178b6:	78fb      	ldrb	r3, [r7, #3]
 80178b8:	68ba      	ldr	r2, [r7, #8]
 80178ba:	2134      	movs	r1, #52	; 0x34
 80178bc:	fb01 f303 	mul.w	r3, r1, r3
 80178c0:	4413      	add	r3, r2
 80178c2:	3391      	adds	r3, #145	; 0x91
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d102      	bne.n	80178d0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80178ca:	2301      	movs	r3, #1
 80178cc:	73fb      	strb	r3, [r7, #15]
 80178ce:	e001      	b.n	80178d4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80178d0:	2300      	movs	r3, #0
 80178d2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80178d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80178d6:	4618      	mov	r0, r3
 80178d8:	3714      	adds	r7, #20
 80178da:	46bd      	mov	sp, r7
 80178dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e0:	4770      	bx	lr

080178e2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80178e2:	b580      	push	{r7, lr}
 80178e4:	b086      	sub	sp, #24
 80178e6:	af00      	add	r7, sp, #0
 80178e8:	60f8      	str	r0, [r7, #12]
 80178ea:	460b      	mov	r3, r1
 80178ec:	607a      	str	r2, [r7, #4]
 80178ee:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80178f6:	69db      	ldr	r3, [r3, #28]
 80178f8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	781b      	ldrb	r3, [r3, #0]
 80178fe:	b2db      	uxtb	r3, r3
 8017900:	2b0b      	cmp	r3, #11
 8017902:	d10d      	bne.n	8017920 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8017904:	7afb      	ldrb	r3, [r7, #11]
 8017906:	2234      	movs	r2, #52	; 0x34
 8017908:	fb02 f303 	mul.w	r3, r2, r3
 801790c:	3390      	adds	r3, #144	; 0x90
 801790e:	697a      	ldr	r2, [r7, #20]
 8017910:	4413      	add	r3, r2
 8017912:	2234      	movs	r2, #52	; 0x34
 8017914:	4619      	mov	r1, r3
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f006 fb98 	bl	801e04c <memcpy>
    return USBH_OK;
 801791c:	2300      	movs	r3, #0
 801791e:	e000      	b.n	8017922 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8017920:	2302      	movs	r3, #2
  }
}
 8017922:	4618      	mov	r0, r3
 8017924:	3718      	adds	r7, #24
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}

0801792a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 801792a:	b580      	push	{r7, lr}
 801792c:	b088      	sub	sp, #32
 801792e:	af02      	add	r7, sp, #8
 8017930:	60f8      	str	r0, [r7, #12]
 8017932:	607a      	str	r2, [r7, #4]
 8017934:	603b      	str	r3, [r7, #0]
 8017936:	460b      	mov	r3, r1
 8017938:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017940:	69db      	ldr	r3, [r3, #28]
 8017942:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 801794a:	b2db      	uxtb	r3, r3
 801794c:	2b00      	cmp	r3, #0
 801794e:	d00e      	beq.n	801796e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8017956:	2b0b      	cmp	r3, #11
 8017958:	d109      	bne.n	801796e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 801795a:	7afb      	ldrb	r3, [r7, #11]
 801795c:	697a      	ldr	r2, [r7, #20]
 801795e:	2134      	movs	r1, #52	; 0x34
 8017960:	fb01 f303 	mul.w	r3, r1, r3
 8017964:	4413      	add	r3, r2
 8017966:	3390      	adds	r3, #144	; 0x90
 8017968:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 801796a:	2b01      	cmp	r3, #1
 801796c:	d001      	beq.n	8017972 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 801796e:	2302      	movs	r3, #2
 8017970:	e040      	b.n	80179f4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8017972:	697b      	ldr	r3, [r7, #20]
 8017974:	2206      	movs	r2, #6
 8017976:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8017978:	7afb      	ldrb	r3, [r7, #11]
 801797a:	697a      	ldr	r2, [r7, #20]
 801797c:	2134      	movs	r1, #52	; 0x34
 801797e:	fb01 f303 	mul.w	r3, r1, r3
 8017982:	4413      	add	r3, r2
 8017984:	3390      	adds	r3, #144	; 0x90
 8017986:	2206      	movs	r2, #6
 8017988:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 801798a:	7afb      	ldrb	r3, [r7, #11]
 801798c:	b29a      	uxth	r2, r3
 801798e:	697b      	ldr	r3, [r7, #20]
 8017990:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8017994:	7af9      	ldrb	r1, [r7, #11]
 8017996:	6a3b      	ldr	r3, [r7, #32]
 8017998:	9300      	str	r3, [sp, #0]
 801799a:	683b      	ldr	r3, [r7, #0]
 801799c:	687a      	ldr	r2, [r7, #4]
 801799e:	68f8      	ldr	r0, [r7, #12]
 80179a0:	f000 fd7b 	bl	801849a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80179aa:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80179ac:	e016      	b.n	80179dc <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80179b4:	693b      	ldr	r3, [r7, #16]
 80179b6:	1ad2      	subs	r2, r2, r3
 80179b8:	6a3b      	ldr	r3, [r7, #32]
 80179ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80179be:	fb01 f303 	mul.w	r3, r1, r3
 80179c2:	429a      	cmp	r2, r3
 80179c4:	d805      	bhi.n	80179d2 <USBH_MSC_Read+0xa8>
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80179cc:	b2db      	uxtb	r3, r3
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d104      	bne.n	80179dc <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	2201      	movs	r2, #1
 80179d6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80179d8:	2302      	movs	r3, #2
 80179da:	e00b      	b.n	80179f4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80179dc:	7afb      	ldrb	r3, [r7, #11]
 80179de:	4619      	mov	r1, r3
 80179e0:	68f8      	ldr	r0, [r7, #12]
 80179e2:	f7ff fe8e 	bl	8017702 <USBH_MSC_RdWrProcess>
 80179e6:	4603      	mov	r3, r0
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d0e0      	beq.n	80179ae <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80179ec:	697b      	ldr	r3, [r7, #20]
 80179ee:	2201      	movs	r2, #1
 80179f0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80179f2:	2300      	movs	r3, #0
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	3718      	adds	r7, #24
 80179f8:	46bd      	mov	sp, r7
 80179fa:	bd80      	pop	{r7, pc}

080179fc <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b088      	sub	sp, #32
 8017a00:	af02      	add	r7, sp, #8
 8017a02:	60f8      	str	r0, [r7, #12]
 8017a04:	607a      	str	r2, [r7, #4]
 8017a06:	603b      	str	r3, [r7, #0]
 8017a08:	460b      	mov	r3, r1
 8017a0a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017a12:	69db      	ldr	r3, [r3, #28]
 8017a14:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017a1c:	b2db      	uxtb	r3, r3
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d00e      	beq.n	8017a40 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	781b      	ldrb	r3, [r3, #0]
 8017a26:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8017a28:	2b0b      	cmp	r3, #11
 8017a2a:	d109      	bne.n	8017a40 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8017a2c:	7afb      	ldrb	r3, [r7, #11]
 8017a2e:	697a      	ldr	r2, [r7, #20]
 8017a30:	2134      	movs	r1, #52	; 0x34
 8017a32:	fb01 f303 	mul.w	r3, r1, r3
 8017a36:	4413      	add	r3, r2
 8017a38:	3390      	adds	r3, #144	; 0x90
 8017a3a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8017a3c:	2b01      	cmp	r3, #1
 8017a3e:	d001      	beq.n	8017a44 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8017a40:	2302      	movs	r3, #2
 8017a42:	e040      	b.n	8017ac6 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8017a44:	697b      	ldr	r3, [r7, #20]
 8017a46:	2207      	movs	r2, #7
 8017a48:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8017a4a:	7afb      	ldrb	r3, [r7, #11]
 8017a4c:	697a      	ldr	r2, [r7, #20]
 8017a4e:	2134      	movs	r1, #52	; 0x34
 8017a50:	fb01 f303 	mul.w	r3, r1, r3
 8017a54:	4413      	add	r3, r2
 8017a56:	3390      	adds	r3, #144	; 0x90
 8017a58:	2207      	movs	r2, #7
 8017a5a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8017a5c:	7afb      	ldrb	r3, [r7, #11]
 8017a5e:	b29a      	uxth	r2, r3
 8017a60:	697b      	ldr	r3, [r7, #20]
 8017a62:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8017a66:	7af9      	ldrb	r1, [r7, #11]
 8017a68:	6a3b      	ldr	r3, [r7, #32]
 8017a6a:	9300      	str	r3, [sp, #0]
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	687a      	ldr	r2, [r7, #4]
 8017a70:	68f8      	ldr	r0, [r7, #12]
 8017a72:	f000 fca7 	bl	80183c4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017a7c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8017a7e:	e016      	b.n	8017aae <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8017a86:	693b      	ldr	r3, [r7, #16]
 8017a88:	1ad2      	subs	r2, r2, r3
 8017a8a:	6a3b      	ldr	r3, [r7, #32]
 8017a8c:	f242 7110 	movw	r1, #10000	; 0x2710
 8017a90:	fb01 f303 	mul.w	r3, r1, r3
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d805      	bhi.n	8017aa4 <USBH_MSC_Write+0xa8>
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017a9e:	b2db      	uxtb	r3, r3
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d104      	bne.n	8017aae <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	2201      	movs	r2, #1
 8017aa8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8017aaa:	2302      	movs	r3, #2
 8017aac:	e00b      	b.n	8017ac6 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8017aae:	7afb      	ldrb	r3, [r7, #11]
 8017ab0:	4619      	mov	r1, r3
 8017ab2:	68f8      	ldr	r0, [r7, #12]
 8017ab4:	f7ff fe25 	bl	8017702 <USBH_MSC_RdWrProcess>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	2b01      	cmp	r3, #1
 8017abc:	d0e0      	beq.n	8017a80 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8017abe:	697b      	ldr	r3, [r7, #20]
 8017ac0:	2201      	movs	r2, #1
 8017ac2:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8017ac4:	2300      	movs	r3, #0
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3718      	adds	r7, #24
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}

08017ace <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8017ace:	b580      	push	{r7, lr}
 8017ad0:	b082      	sub	sp, #8
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	2221      	movs	r2, #33	; 0x21
 8017ada:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	22ff      	movs	r2, #255	; 0xff
 8017ae0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	2200      	movs	r2, #0
 8017aec:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	2200      	movs	r2, #0
 8017af2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8017af4:	2200      	movs	r2, #0
 8017af6:	2100      	movs	r1, #0
 8017af8:	6878      	ldr	r0, [r7, #4]
 8017afa:	f001 fdae 	bl	801965a <USBH_CtlReq>
 8017afe:	4603      	mov	r3, r0
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	3708      	adds	r7, #8
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}

08017b08 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b082      	sub	sp, #8
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
 8017b10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	22a1      	movs	r2, #161	; 0xa1
 8017b16:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	22fe      	movs	r2, #254	; 0xfe
 8017b1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2200      	movs	r2, #0
 8017b22:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	2200      	movs	r2, #0
 8017b28:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2201      	movs	r2, #1
 8017b2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8017b30:	2201      	movs	r2, #1
 8017b32:	6839      	ldr	r1, [r7, #0]
 8017b34:	6878      	ldr	r0, [r7, #4]
 8017b36:	f001 fd90 	bl	801965a <USBH_CtlReq>
 8017b3a:	4603      	mov	r3, r0
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3708      	adds	r7, #8
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}

08017b44 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8017b44:	b480      	push	{r7}
 8017b46:	b085      	sub	sp, #20
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017b52:	69db      	ldr	r3, [r3, #28]
 8017b54:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	4a09      	ldr	r2, [pc, #36]	; (8017b80 <USBH_MSC_BOT_Init+0x3c>)
 8017b5a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	4a09      	ldr	r2, [pc, #36]	; (8017b84 <USBH_MSC_BOT_Init+0x40>)
 8017b60:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	2201      	movs	r2, #1
 8017b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	2201      	movs	r2, #1
 8017b6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8017b72:	2300      	movs	r3, #0
}
 8017b74:	4618      	mov	r0, r3
 8017b76:	3714      	adds	r7, #20
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7e:	4770      	bx	lr
 8017b80:	43425355 	.word	0x43425355
 8017b84:	20304050 	.word	0x20304050

08017b88 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b088      	sub	sp, #32
 8017b8c:	af02      	add	r7, sp, #8
 8017b8e:	6078      	str	r0, [r7, #4]
 8017b90:	460b      	mov	r3, r1
 8017b92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8017b94:	2301      	movs	r3, #1
 8017b96:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8017b98:	2301      	movs	r3, #1
 8017b9a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017baa:	69db      	ldr	r3, [r3, #28]
 8017bac:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8017bb2:	693b      	ldr	r3, [r7, #16]
 8017bb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017bb8:	3b01      	subs	r3, #1
 8017bba:	2b0a      	cmp	r3, #10
 8017bbc:	f200 81a1 	bhi.w	8017f02 <USBH_MSC_BOT_Process+0x37a>
 8017bc0:	a201      	add	r2, pc, #4	; (adr r2, 8017bc8 <USBH_MSC_BOT_Process+0x40>)
 8017bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bc6:	bf00      	nop
 8017bc8:	08017bf5 	.word	0x08017bf5
 8017bcc:	08017c1f 	.word	0x08017c1f
 8017bd0:	08017c89 	.word	0x08017c89
 8017bd4:	08017ca7 	.word	0x08017ca7
 8017bd8:	08017d2b 	.word	0x08017d2b
 8017bdc:	08017d4f 	.word	0x08017d4f
 8017be0:	08017de9 	.word	0x08017de9
 8017be4:	08017e05 	.word	0x08017e05
 8017be8:	08017e57 	.word	0x08017e57
 8017bec:	08017e87 	.word	0x08017e87
 8017bf0:	08017ee9 	.word	0x08017ee9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	78fa      	ldrb	r2, [r7, #3]
 8017bf8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	2202      	movs	r2, #2
 8017c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	795a      	ldrb	r2, [r3, #5]
 8017c0e:	2301      	movs	r3, #1
 8017c10:	9300      	str	r3, [sp, #0]
 8017c12:	4613      	mov	r3, r2
 8017c14:	221f      	movs	r2, #31
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f001 ff2f 	bl	8019a7a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8017c1c:	e180      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8017c1e:	693b      	ldr	r3, [r7, #16]
 8017c20:	795b      	ldrb	r3, [r3, #5]
 8017c22:	4619      	mov	r1, r3
 8017c24:	6878      	ldr	r0, [r7, #4]
 8017c26:	f006 f8ef 	bl	801de08 <USBH_LL_GetURBState>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8017c2e:	7d3b      	ldrb	r3, [r7, #20]
 8017c30:	2b01      	cmp	r3, #1
 8017c32:	d118      	bne.n	8017c66 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8017c34:	693b      	ldr	r3, [r7, #16]
 8017c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d00f      	beq.n	8017c5c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8017c3c:	693b      	ldr	r3, [r7, #16]
 8017c3e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8017c42:	b25b      	sxtb	r3, r3
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	da04      	bge.n	8017c52 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8017c48:	693b      	ldr	r3, [r7, #16]
 8017c4a:	2203      	movs	r2, #3
 8017c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8017c50:	e159      	b.n	8017f06 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8017c52:	693b      	ldr	r3, [r7, #16]
 8017c54:	2205      	movs	r2, #5
 8017c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017c5a:	e154      	b.n	8017f06 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8017c5c:	693b      	ldr	r3, [r7, #16]
 8017c5e:	2207      	movs	r2, #7
 8017c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017c64:	e14f      	b.n	8017f06 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017c66:	7d3b      	ldrb	r3, [r7, #20]
 8017c68:	2b02      	cmp	r3, #2
 8017c6a:	d104      	bne.n	8017c76 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8017c6c:	693b      	ldr	r3, [r7, #16]
 8017c6e:	2201      	movs	r2, #1
 8017c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017c74:	e147      	b.n	8017f06 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8017c76:	7d3b      	ldrb	r3, [r7, #20]
 8017c78:	2b05      	cmp	r3, #5
 8017c7a:	f040 8144 	bne.w	8017f06 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8017c7e:	693b      	ldr	r3, [r7, #16]
 8017c80:	220a      	movs	r2, #10
 8017c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017c86:	e13e      	b.n	8017f06 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8017c88:	693b      	ldr	r3, [r7, #16]
 8017c8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	895a      	ldrh	r2, [r3, #10]
 8017c92:	693b      	ldr	r3, [r7, #16]
 8017c94:	791b      	ldrb	r3, [r3, #4]
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f001 ff14 	bl	8019ac4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8017c9c:	693b      	ldr	r3, [r7, #16]
 8017c9e:	2204      	movs	r2, #4
 8017ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8017ca4:	e13c      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8017ca6:	693b      	ldr	r3, [r7, #16]
 8017ca8:	791b      	ldrb	r3, [r3, #4]
 8017caa:	4619      	mov	r1, r3
 8017cac:	6878      	ldr	r0, [r7, #4]
 8017cae:	f006 f8ab 	bl	801de08 <USBH_LL_GetURBState>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8017cb6:	7d3b      	ldrb	r3, [r7, #20]
 8017cb8:	2b01      	cmp	r3, #1
 8017cba:	d12d      	bne.n	8017d18 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8017cbc:	693b      	ldr	r3, [r7, #16]
 8017cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017cc0:	693a      	ldr	r2, [r7, #16]
 8017cc2:	8952      	ldrh	r2, [r2, #10]
 8017cc4:	4293      	cmp	r3, r2
 8017cc6:	d910      	bls.n	8017cea <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8017cc8:	693b      	ldr	r3, [r7, #16]
 8017cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017cce:	693a      	ldr	r2, [r7, #16]
 8017cd0:	8952      	ldrh	r2, [r2, #10]
 8017cd2:	441a      	add	r2, r3
 8017cd4:	693b      	ldr	r3, [r7, #16]
 8017cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8017cda:	693b      	ldr	r3, [r7, #16]
 8017cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017cde:	693a      	ldr	r2, [r7, #16]
 8017ce0:	8952      	ldrh	r2, [r2, #10]
 8017ce2:	1a9a      	subs	r2, r3, r2
 8017ce4:	693b      	ldr	r3, [r7, #16]
 8017ce6:	65da      	str	r2, [r3, #92]	; 0x5c
 8017ce8:	e002      	b.n	8017cf0 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	2200      	movs	r2, #0
 8017cee:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8017cf0:	693b      	ldr	r3, [r7, #16]
 8017cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d00a      	beq.n	8017d0e <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8017cf8:	693b      	ldr	r3, [r7, #16]
 8017cfa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017cfe:	693b      	ldr	r3, [r7, #16]
 8017d00:	895a      	ldrh	r2, [r3, #10]
 8017d02:	693b      	ldr	r3, [r7, #16]
 8017d04:	791b      	ldrb	r3, [r3, #4]
 8017d06:	6878      	ldr	r0, [r7, #4]
 8017d08:	f001 fedc 	bl	8019ac4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8017d0c:	e0fd      	b.n	8017f0a <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	2207      	movs	r2, #7
 8017d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017d16:	e0f8      	b.n	8017f0a <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8017d18:	7d3b      	ldrb	r3, [r7, #20]
 8017d1a:	2b05      	cmp	r3, #5
 8017d1c:	f040 80f5 	bne.w	8017f0a <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8017d20:	693b      	ldr	r3, [r7, #16]
 8017d22:	2209      	movs	r2, #9
 8017d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017d28:	e0ef      	b.n	8017f0a <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8017d2a:	693b      	ldr	r3, [r7, #16]
 8017d2c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017d30:	693b      	ldr	r3, [r7, #16]
 8017d32:	891a      	ldrh	r2, [r3, #8]
 8017d34:	693b      	ldr	r3, [r7, #16]
 8017d36:	7958      	ldrb	r0, [r3, #5]
 8017d38:	2301      	movs	r3, #1
 8017d3a:	9300      	str	r3, [sp, #0]
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f001 fe9b 	bl	8019a7a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8017d44:	693b      	ldr	r3, [r7, #16]
 8017d46:	2206      	movs	r2, #6
 8017d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017d4c:	e0e8      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	795b      	ldrb	r3, [r3, #5]
 8017d52:	4619      	mov	r1, r3
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f006 f857 	bl	801de08 <USBH_LL_GetURBState>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8017d5e:	7d3b      	ldrb	r3, [r7, #20]
 8017d60:	2b01      	cmp	r3, #1
 8017d62:	d130      	bne.n	8017dc6 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8017d64:	693b      	ldr	r3, [r7, #16]
 8017d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d68:	693a      	ldr	r2, [r7, #16]
 8017d6a:	8912      	ldrh	r2, [r2, #8]
 8017d6c:	4293      	cmp	r3, r2
 8017d6e:	d910      	bls.n	8017d92 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017d76:	693a      	ldr	r2, [r7, #16]
 8017d78:	8912      	ldrh	r2, [r2, #8]
 8017d7a:	441a      	add	r2, r3
 8017d7c:	693b      	ldr	r3, [r7, #16]
 8017d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8017d82:	693b      	ldr	r3, [r7, #16]
 8017d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d86:	693a      	ldr	r2, [r7, #16]
 8017d88:	8912      	ldrh	r2, [r2, #8]
 8017d8a:	1a9a      	subs	r2, r3, r2
 8017d8c:	693b      	ldr	r3, [r7, #16]
 8017d8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8017d90:	e002      	b.n	8017d98 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8017d92:	693b      	ldr	r3, [r7, #16]
 8017d94:	2200      	movs	r2, #0
 8017d96:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d00d      	beq.n	8017dbc <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8017da0:	693b      	ldr	r3, [r7, #16]
 8017da2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017da6:	693b      	ldr	r3, [r7, #16]
 8017da8:	891a      	ldrh	r2, [r3, #8]
 8017daa:	693b      	ldr	r3, [r7, #16]
 8017dac:	7958      	ldrb	r0, [r3, #5]
 8017dae:	2301      	movs	r3, #1
 8017db0:	9300      	str	r3, [sp, #0]
 8017db2:	4603      	mov	r3, r0
 8017db4:	6878      	ldr	r0, [r7, #4]
 8017db6:	f001 fe60 	bl	8019a7a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8017dba:	e0a8      	b.n	8017f0e <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	2207      	movs	r2, #7
 8017dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017dc4:	e0a3      	b.n	8017f0e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017dc6:	7d3b      	ldrb	r3, [r7, #20]
 8017dc8:	2b02      	cmp	r3, #2
 8017dca:	d104      	bne.n	8017dd6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8017dcc:	693b      	ldr	r3, [r7, #16]
 8017dce:	2205      	movs	r2, #5
 8017dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017dd4:	e09b      	b.n	8017f0e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8017dd6:	7d3b      	ldrb	r3, [r7, #20]
 8017dd8:	2b05      	cmp	r3, #5
 8017dda:	f040 8098 	bne.w	8017f0e <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8017dde:	693b      	ldr	r3, [r7, #16]
 8017de0:	220a      	movs	r2, #10
 8017de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017de6:	e092      	b.n	8017f0e <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8017de8:	693b      	ldr	r3, [r7, #16]
 8017dea:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8017dee:	693b      	ldr	r3, [r7, #16]
 8017df0:	791b      	ldrb	r3, [r3, #4]
 8017df2:	220d      	movs	r2, #13
 8017df4:	6878      	ldr	r0, [r7, #4]
 8017df6:	f001 fe65 	bl	8019ac4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	2208      	movs	r2, #8
 8017dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017e02:	e08d      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8017e04:	693b      	ldr	r3, [r7, #16]
 8017e06:	791b      	ldrb	r3, [r3, #4]
 8017e08:	4619      	mov	r1, r3
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f005 fffc 	bl	801de08 <USBH_LL_GetURBState>
 8017e10:	4603      	mov	r3, r0
 8017e12:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8017e14:	7d3b      	ldrb	r3, [r7, #20]
 8017e16:	2b01      	cmp	r3, #1
 8017e18:	d115      	bne.n	8017e46 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8017e1a:	693b      	ldr	r3, [r7, #16]
 8017e1c:	2201      	movs	r2, #1
 8017e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8017e22:	693b      	ldr	r3, [r7, #16]
 8017e24:	2201      	movs	r2, #1
 8017e26:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8017e2a:	6878      	ldr	r0, [r7, #4]
 8017e2c:	f000 f8aa 	bl	8017f84 <USBH_MSC_DecodeCSW>
 8017e30:	4603      	mov	r3, r0
 8017e32:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8017e34:	7d7b      	ldrb	r3, [r7, #21]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d102      	bne.n	8017e40 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8017e3e:	e068      	b.n	8017f12 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8017e40:	2302      	movs	r3, #2
 8017e42:	75fb      	strb	r3, [r7, #23]
      break;
 8017e44:	e065      	b.n	8017f12 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8017e46:	7d3b      	ldrb	r3, [r7, #20]
 8017e48:	2b05      	cmp	r3, #5
 8017e4a:	d162      	bne.n	8017f12 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8017e4c:	693b      	ldr	r3, [r7, #16]
 8017e4e:	2209      	movs	r2, #9
 8017e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017e54:	e05d      	b.n	8017f12 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8017e56:	78fb      	ldrb	r3, [r7, #3]
 8017e58:	2200      	movs	r2, #0
 8017e5a:	4619      	mov	r1, r3
 8017e5c:	6878      	ldr	r0, [r7, #4]
 8017e5e:	f000 f865 	bl	8017f2c <USBH_MSC_BOT_Abort>
 8017e62:	4603      	mov	r3, r0
 8017e64:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8017e66:	7dbb      	ldrb	r3, [r7, #22]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d104      	bne.n	8017e76 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8017e6c:	693b      	ldr	r3, [r7, #16]
 8017e6e:	2207      	movs	r2, #7
 8017e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8017e74:	e04f      	b.n	8017f16 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8017e76:	7dbb      	ldrb	r3, [r7, #22]
 8017e78:	2b04      	cmp	r3, #4
 8017e7a:	d14c      	bne.n	8017f16 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8017e7c:	693b      	ldr	r3, [r7, #16]
 8017e7e:	220b      	movs	r2, #11
 8017e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017e84:	e047      	b.n	8017f16 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8017e86:	78fb      	ldrb	r3, [r7, #3]
 8017e88:	2201      	movs	r2, #1
 8017e8a:	4619      	mov	r1, r3
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f000 f84d 	bl	8017f2c <USBH_MSC_BOT_Abort>
 8017e92:	4603      	mov	r3, r0
 8017e94:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8017e96:	7dbb      	ldrb	r3, [r7, #22]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d11d      	bne.n	8017ed8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8017e9c:	693b      	ldr	r3, [r7, #16]
 8017e9e:	795b      	ldrb	r3, [r3, #5]
 8017ea0:	4619      	mov	r1, r3
 8017ea2:	6878      	ldr	r0, [r7, #4]
 8017ea4:	f006 f80d 	bl	801dec2 <USBH_LL_GetToggle>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8017eac:	693b      	ldr	r3, [r7, #16]
 8017eae:	7959      	ldrb	r1, [r3, #5]
 8017eb0:	7bfb      	ldrb	r3, [r7, #15]
 8017eb2:	f1c3 0301 	rsb	r3, r3, #1
 8017eb6:	b2db      	uxtb	r3, r3
 8017eb8:	461a      	mov	r2, r3
 8017eba:	6878      	ldr	r0, [r7, #4]
 8017ebc:	f005 ffce 	bl	801de5c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	791b      	ldrb	r3, [r3, #4]
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f005 ffc7 	bl	801de5c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8017ece:	693b      	ldr	r3, [r7, #16]
 8017ed0:	2209      	movs	r2, #9
 8017ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8017ed6:	e020      	b.n	8017f1a <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8017ed8:	7dbb      	ldrb	r3, [r7, #22]
 8017eda:	2b04      	cmp	r3, #4
 8017edc:	d11d      	bne.n	8017f1a <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8017ede:	693b      	ldr	r3, [r7, #16]
 8017ee0:	220b      	movs	r2, #11
 8017ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017ee6:	e018      	b.n	8017f1a <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8017ee8:	6878      	ldr	r0, [r7, #4]
 8017eea:	f7ff fdf0 	bl	8017ace <USBH_MSC_BOT_REQ_Reset>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8017ef2:	7dfb      	ldrb	r3, [r7, #23]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d112      	bne.n	8017f1e <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8017ef8:	693b      	ldr	r3, [r7, #16]
 8017efa:	2201      	movs	r2, #1
 8017efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8017f00:	e00d      	b.n	8017f1e <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8017f02:	bf00      	nop
 8017f04:	e00c      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>
      break;
 8017f06:	bf00      	nop
 8017f08:	e00a      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>
      break;
 8017f0a:	bf00      	nop
 8017f0c:	e008      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>
      break;
 8017f0e:	bf00      	nop
 8017f10:	e006      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>
      break;
 8017f12:	bf00      	nop
 8017f14:	e004      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>
      break;
 8017f16:	bf00      	nop
 8017f18:	e002      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>
      break;
 8017f1a:	bf00      	nop
 8017f1c:	e000      	b.n	8017f20 <USBH_MSC_BOT_Process+0x398>
      break;
 8017f1e:	bf00      	nop
  }
  return status;
 8017f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f22:	4618      	mov	r0, r3
 8017f24:	3718      	adds	r7, #24
 8017f26:	46bd      	mov	sp, r7
 8017f28:	bd80      	pop	{r7, pc}
 8017f2a:	bf00      	nop

08017f2c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b084      	sub	sp, #16
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
 8017f34:	460b      	mov	r3, r1
 8017f36:	70fb      	strb	r3, [r7, #3]
 8017f38:	4613      	mov	r3, r2
 8017f3a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8017f3c:	2302      	movs	r3, #2
 8017f3e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017f46:	69db      	ldr	r3, [r3, #28]
 8017f48:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8017f4a:	78bb      	ldrb	r3, [r7, #2]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d002      	beq.n	8017f56 <USBH_MSC_BOT_Abort+0x2a>
 8017f50:	2b01      	cmp	r3, #1
 8017f52:	d009      	beq.n	8017f68 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8017f54:	e011      	b.n	8017f7a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	79db      	ldrb	r3, [r3, #7]
 8017f5a:	4619      	mov	r1, r3
 8017f5c:	6878      	ldr	r0, [r7, #4]
 8017f5e:	f001 f99c 	bl	801929a <USBH_ClrFeature>
 8017f62:	4603      	mov	r3, r0
 8017f64:	73fb      	strb	r3, [r7, #15]
      break;
 8017f66:	e008      	b.n	8017f7a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8017f68:	68bb      	ldr	r3, [r7, #8]
 8017f6a:	799b      	ldrb	r3, [r3, #6]
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f001 f993 	bl	801929a <USBH_ClrFeature>
 8017f74:	4603      	mov	r3, r0
 8017f76:	73fb      	strb	r3, [r7, #15]
      break;
 8017f78:	bf00      	nop
  }
  return status;
 8017f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3710      	adds	r7, #16
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b084      	sub	sp, #16
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017f92:	69db      	ldr	r3, [r3, #28]
 8017f94:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8017f96:	2301      	movs	r3, #1
 8017f98:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	791b      	ldrb	r3, [r3, #4]
 8017f9e:	4619      	mov	r1, r3
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f005 fe9f 	bl	801dce4 <USBH_LL_GetLastXferSize>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	2b0d      	cmp	r3, #13
 8017faa:	d002      	beq.n	8017fb2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8017fac:	2302      	movs	r3, #2
 8017fae:	73fb      	strb	r3, [r7, #15]
 8017fb0:	e024      	b.n	8017ffc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8017fb2:	68bb      	ldr	r3, [r7, #8]
 8017fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017fb6:	4a14      	ldr	r2, [pc, #80]	; (8018008 <USBH_MSC_DecodeCSW+0x84>)
 8017fb8:	4293      	cmp	r3, r2
 8017fba:	d11d      	bne.n	8017ff8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8017fbc:	68bb      	ldr	r3, [r7, #8]
 8017fbe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8017fc0:	68bb      	ldr	r3, [r7, #8]
 8017fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	d119      	bne.n	8017ffc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8017fc8:	68bb      	ldr	r3, [r7, #8]
 8017fca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d102      	bne.n	8017fd8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	73fb      	strb	r3, [r7, #15]
 8017fd6:	e011      	b.n	8017ffc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8017fd8:	68bb      	ldr	r3, [r7, #8]
 8017fda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017fde:	2b01      	cmp	r3, #1
 8017fe0:	d102      	bne.n	8017fe8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8017fe2:	2301      	movs	r3, #1
 8017fe4:	73fb      	strb	r3, [r7, #15]
 8017fe6:	e009      	b.n	8017ffc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017fee:	2b02      	cmp	r3, #2
 8017ff0:	d104      	bne.n	8017ffc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8017ff2:	2302      	movs	r3, #2
 8017ff4:	73fb      	strb	r3, [r7, #15]
 8017ff6:	e001      	b.n	8017ffc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8017ff8:	2302      	movs	r3, #2
 8017ffa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8017ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ffe:	4618      	mov	r0, r3
 8018000:	3710      	adds	r7, #16
 8018002:	46bd      	mov	sp, r7
 8018004:	bd80      	pop	{r7, pc}
 8018006:	bf00      	nop
 8018008:	53425355 	.word	0x53425355

0801800c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 801800c:	b580      	push	{r7, lr}
 801800e:	b084      	sub	sp, #16
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
 8018014:	460b      	mov	r3, r1
 8018016:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8018018:	2302      	movs	r3, #2
 801801a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018022:	69db      	ldr	r3, [r3, #28]
 8018024:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801802c:	2b01      	cmp	r3, #1
 801802e:	d002      	beq.n	8018036 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8018030:	2b02      	cmp	r3, #2
 8018032:	d021      	beq.n	8018078 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8018034:	e028      	b.n	8018088 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8018036:	68bb      	ldr	r3, [r7, #8]
 8018038:	2200      	movs	r2, #0
 801803a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 801803c:	68bb      	ldr	r3, [r7, #8]
 801803e:	2200      	movs	r2, #0
 8018040:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8018044:	68bb      	ldr	r3, [r7, #8]
 8018046:	220a      	movs	r2, #10
 8018048:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 801804c:	68bb      	ldr	r3, [r7, #8]
 801804e:	3363      	adds	r3, #99	; 0x63
 8018050:	2210      	movs	r2, #16
 8018052:	2100      	movs	r1, #0
 8018054:	4618      	mov	r0, r3
 8018056:	f006 f804 	bl	801e062 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 801805a:	68bb      	ldr	r3, [r7, #8]
 801805c:	2200      	movs	r2, #0
 801805e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	2201      	movs	r2, #1
 8018066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801806a:	68bb      	ldr	r3, [r7, #8]
 801806c:	2202      	movs	r2, #2
 801806e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8018072:	2301      	movs	r3, #1
 8018074:	73fb      	strb	r3, [r7, #15]
      break;
 8018076:	e007      	b.n	8018088 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8018078:	78fb      	ldrb	r3, [r7, #3]
 801807a:	4619      	mov	r1, r3
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7ff fd83 	bl	8017b88 <USBH_MSC_BOT_Process>
 8018082:	4603      	mov	r3, r0
 8018084:	73fb      	strb	r3, [r7, #15]
      break;
 8018086:	bf00      	nop
  }

  return error;
 8018088:	7bfb      	ldrb	r3, [r7, #15]
}
 801808a:	4618      	mov	r0, r3
 801808c:	3710      	adds	r7, #16
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}

08018092 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8018092:	b580      	push	{r7, lr}
 8018094:	b086      	sub	sp, #24
 8018096:	af00      	add	r7, sp, #0
 8018098:	60f8      	str	r0, [r7, #12]
 801809a:	460b      	mov	r3, r1
 801809c:	607a      	str	r2, [r7, #4]
 801809e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80180a0:	2301      	movs	r3, #1
 80180a2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80180aa:	69db      	ldr	r3, [r3, #28]
 80180ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80180ae:	693b      	ldr	r3, [r7, #16]
 80180b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80180b4:	2b01      	cmp	r3, #1
 80180b6:	d002      	beq.n	80180be <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80180b8:	2b02      	cmp	r3, #2
 80180ba:	d027      	beq.n	801810c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80180bc:	e05f      	b.n	801817e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80180be:	693b      	ldr	r3, [r7, #16]
 80180c0:	2208      	movs	r2, #8
 80180c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80180c4:	693b      	ldr	r3, [r7, #16]
 80180c6:	2280      	movs	r2, #128	; 0x80
 80180c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80180cc:	693b      	ldr	r3, [r7, #16]
 80180ce:	220a      	movs	r2, #10
 80180d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80180d4:	693b      	ldr	r3, [r7, #16]
 80180d6:	3363      	adds	r3, #99	; 0x63
 80180d8:	2210      	movs	r2, #16
 80180da:	2100      	movs	r1, #0
 80180dc:	4618      	mov	r0, r3
 80180de:	f005 ffc0 	bl	801e062 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80180e2:	693b      	ldr	r3, [r7, #16]
 80180e4:	2225      	movs	r2, #37	; 0x25
 80180e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80180ea:	693b      	ldr	r3, [r7, #16]
 80180ec:	2201      	movs	r2, #1
 80180ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80180f2:	693b      	ldr	r3, [r7, #16]
 80180f4:	2202      	movs	r2, #2
 80180f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80180fa:	693b      	ldr	r3, [r7, #16]
 80180fc:	f103 0210 	add.w	r2, r3, #16
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8018106:	2301      	movs	r3, #1
 8018108:	75fb      	strb	r3, [r7, #23]
      break;
 801810a:	e038      	b.n	801817e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 801810c:	7afb      	ldrb	r3, [r7, #11]
 801810e:	4619      	mov	r1, r3
 8018110:	68f8      	ldr	r0, [r7, #12]
 8018112:	f7ff fd39 	bl	8017b88 <USBH_MSC_BOT_Process>
 8018116:	4603      	mov	r3, r0
 8018118:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 801811a:	7dfb      	ldrb	r3, [r7, #23]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d12d      	bne.n	801817c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8018120:	693b      	ldr	r3, [r7, #16]
 8018122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018126:	3303      	adds	r3, #3
 8018128:	781b      	ldrb	r3, [r3, #0]
 801812a:	461a      	mov	r2, r3
 801812c:	693b      	ldr	r3, [r7, #16]
 801812e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018132:	3302      	adds	r3, #2
 8018134:	781b      	ldrb	r3, [r3, #0]
 8018136:	021b      	lsls	r3, r3, #8
 8018138:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 801813a:	693b      	ldr	r3, [r7, #16]
 801813c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018140:	3301      	adds	r3, #1
 8018142:	781b      	ldrb	r3, [r3, #0]
 8018144:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8018146:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8018148:	693b      	ldr	r3, [r7, #16]
 801814a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801814e:	781b      	ldrb	r3, [r3, #0]
 8018150:	061b      	lsls	r3, r3, #24
 8018152:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8018158:	693b      	ldr	r3, [r7, #16]
 801815a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801815e:	3307      	adds	r3, #7
 8018160:	781b      	ldrb	r3, [r3, #0]
 8018162:	b29a      	uxth	r2, r3
 8018164:	693b      	ldr	r3, [r7, #16]
 8018166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801816a:	3306      	adds	r3, #6
 801816c:	781b      	ldrb	r3, [r3, #0]
 801816e:	b29b      	uxth	r3, r3
 8018170:	021b      	lsls	r3, r3, #8
 8018172:	b29b      	uxth	r3, r3
 8018174:	4313      	orrs	r3, r2
 8018176:	b29a      	uxth	r2, r3
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	809a      	strh	r2, [r3, #4]
      break;
 801817c:	bf00      	nop
  }

  return error;
 801817e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018180:	4618      	mov	r0, r3
 8018182:	3718      	adds	r7, #24
 8018184:	46bd      	mov	sp, r7
 8018186:	bd80      	pop	{r7, pc}

08018188 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b086      	sub	sp, #24
 801818c:	af00      	add	r7, sp, #0
 801818e:	60f8      	str	r0, [r7, #12]
 8018190:	460b      	mov	r3, r1
 8018192:	607a      	str	r2, [r7, #4]
 8018194:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8018196:	2302      	movs	r3, #2
 8018198:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80181a0:	69db      	ldr	r3, [r3, #28]
 80181a2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80181a4:	693b      	ldr	r3, [r7, #16]
 80181a6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80181aa:	2b01      	cmp	r3, #1
 80181ac:	d002      	beq.n	80181b4 <USBH_MSC_SCSI_Inquiry+0x2c>
 80181ae:	2b02      	cmp	r3, #2
 80181b0:	d03d      	beq.n	801822e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80181b2:	e089      	b.n	80182c8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80181b4:	693b      	ldr	r3, [r7, #16]
 80181b6:	2224      	movs	r2, #36	; 0x24
 80181b8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80181ba:	693b      	ldr	r3, [r7, #16]
 80181bc:	2280      	movs	r2, #128	; 0x80
 80181be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80181c2:	693b      	ldr	r3, [r7, #16]
 80181c4:	220a      	movs	r2, #10
 80181c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80181ca:	693b      	ldr	r3, [r7, #16]
 80181cc:	3363      	adds	r3, #99	; 0x63
 80181ce:	220a      	movs	r2, #10
 80181d0:	2100      	movs	r1, #0
 80181d2:	4618      	mov	r0, r3
 80181d4:	f005 ff45 	bl	801e062 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80181d8:	693b      	ldr	r3, [r7, #16]
 80181da:	2212      	movs	r2, #18
 80181dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80181e0:	7afb      	ldrb	r3, [r7, #11]
 80181e2:	015b      	lsls	r3, r3, #5
 80181e4:	b2da      	uxtb	r2, r3
 80181e6:	693b      	ldr	r3, [r7, #16]
 80181e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80181ec:	693b      	ldr	r3, [r7, #16]
 80181ee:	2200      	movs	r2, #0
 80181f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80181f4:	693b      	ldr	r3, [r7, #16]
 80181f6:	2200      	movs	r2, #0
 80181f8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80181fc:	693b      	ldr	r3, [r7, #16]
 80181fe:	2224      	movs	r2, #36	; 0x24
 8018200:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8018204:	693b      	ldr	r3, [r7, #16]
 8018206:	2200      	movs	r2, #0
 8018208:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 801820c:	693b      	ldr	r3, [r7, #16]
 801820e:	2201      	movs	r2, #1
 8018210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8018214:	693b      	ldr	r3, [r7, #16]
 8018216:	2202      	movs	r2, #2
 8018218:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	f103 0210 	add.w	r2, r3, #16
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8018228:	2301      	movs	r3, #1
 801822a:	75fb      	strb	r3, [r7, #23]
      break;
 801822c:	e04c      	b.n	80182c8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 801822e:	7afb      	ldrb	r3, [r7, #11]
 8018230:	4619      	mov	r1, r3
 8018232:	68f8      	ldr	r0, [r7, #12]
 8018234:	f7ff fca8 	bl	8017b88 <USBH_MSC_BOT_Process>
 8018238:	4603      	mov	r3, r0
 801823a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 801823c:	7dfb      	ldrb	r3, [r7, #23]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d141      	bne.n	80182c6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8018242:	2222      	movs	r2, #34	; 0x22
 8018244:	2100      	movs	r1, #0
 8018246:	6878      	ldr	r0, [r7, #4]
 8018248:	f005 ff0b 	bl	801e062 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 801824c:	693b      	ldr	r3, [r7, #16]
 801824e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018252:	781b      	ldrb	r3, [r3, #0]
 8018254:	f003 031f 	and.w	r3, r3, #31
 8018258:	b2da      	uxtb	r2, r3
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 801825e:	693b      	ldr	r3, [r7, #16]
 8018260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018264:	781b      	ldrb	r3, [r3, #0]
 8018266:	095b      	lsrs	r3, r3, #5
 8018268:	b2da      	uxtb	r2, r3
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 801826e:	693b      	ldr	r3, [r7, #16]
 8018270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018274:	3301      	adds	r3, #1
 8018276:	781b      	ldrb	r3, [r3, #0]
 8018278:	b25b      	sxtb	r3, r3
 801827a:	2b00      	cmp	r3, #0
 801827c:	da03      	bge.n	8018286 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	2201      	movs	r2, #1
 8018282:	709a      	strb	r2, [r3, #2]
 8018284:	e002      	b.n	801828c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	2200      	movs	r2, #0
 801828a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	1cd8      	adds	r0, r3, #3
 8018290:	693b      	ldr	r3, [r7, #16]
 8018292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018296:	3308      	adds	r3, #8
 8018298:	2208      	movs	r2, #8
 801829a:	4619      	mov	r1, r3
 801829c:	f005 fed6 	bl	801e04c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f103 000c 	add.w	r0, r3, #12
 80182a6:	693b      	ldr	r3, [r7, #16]
 80182a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80182ac:	3310      	adds	r3, #16
 80182ae:	2210      	movs	r2, #16
 80182b0:	4619      	mov	r1, r3
 80182b2:	f005 fecb 	bl	801e04c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	331d      	adds	r3, #29
 80182ba:	693a      	ldr	r2, [r7, #16]
 80182bc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80182c0:	3220      	adds	r2, #32
 80182c2:	6812      	ldr	r2, [r2, #0]
 80182c4:	601a      	str	r2, [r3, #0]
      break;
 80182c6:	bf00      	nop
  }

  return error;
 80182c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3718      	adds	r7, #24
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}

080182d2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80182d2:	b580      	push	{r7, lr}
 80182d4:	b086      	sub	sp, #24
 80182d6:	af00      	add	r7, sp, #0
 80182d8:	60f8      	str	r0, [r7, #12]
 80182da:	460b      	mov	r3, r1
 80182dc:	607a      	str	r2, [r7, #4]
 80182de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80182e0:	2302      	movs	r3, #2
 80182e2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80182ea:	69db      	ldr	r3, [r3, #28]
 80182ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80182ee:	693b      	ldr	r3, [r7, #16]
 80182f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80182f4:	2b01      	cmp	r3, #1
 80182f6:	d002      	beq.n	80182fe <USBH_MSC_SCSI_RequestSense+0x2c>
 80182f8:	2b02      	cmp	r3, #2
 80182fa:	d03d      	beq.n	8018378 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80182fc:	e05d      	b.n	80183ba <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80182fe:	693b      	ldr	r3, [r7, #16]
 8018300:	220e      	movs	r2, #14
 8018302:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8018304:	693b      	ldr	r3, [r7, #16]
 8018306:	2280      	movs	r2, #128	; 0x80
 8018308:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801830c:	693b      	ldr	r3, [r7, #16]
 801830e:	220a      	movs	r2, #10
 8018310:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8018314:	693b      	ldr	r3, [r7, #16]
 8018316:	3363      	adds	r3, #99	; 0x63
 8018318:	2210      	movs	r2, #16
 801831a:	2100      	movs	r1, #0
 801831c:	4618      	mov	r0, r3
 801831e:	f005 fea0 	bl	801e062 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8018322:	693b      	ldr	r3, [r7, #16]
 8018324:	2203      	movs	r2, #3
 8018326:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 801832a:	7afb      	ldrb	r3, [r7, #11]
 801832c:	015b      	lsls	r3, r3, #5
 801832e:	b2da      	uxtb	r2, r3
 8018330:	693b      	ldr	r3, [r7, #16]
 8018332:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8018336:	693b      	ldr	r3, [r7, #16]
 8018338:	2200      	movs	r2, #0
 801833a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 801833e:	693b      	ldr	r3, [r7, #16]
 8018340:	2200      	movs	r2, #0
 8018342:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8018346:	693b      	ldr	r3, [r7, #16]
 8018348:	220e      	movs	r2, #14
 801834a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 801834e:	693b      	ldr	r3, [r7, #16]
 8018350:	2200      	movs	r2, #0
 8018352:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8018356:	693b      	ldr	r3, [r7, #16]
 8018358:	2201      	movs	r2, #1
 801835a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801835e:	693b      	ldr	r3, [r7, #16]
 8018360:	2202      	movs	r2, #2
 8018362:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8018366:	693b      	ldr	r3, [r7, #16]
 8018368:	f103 0210 	add.w	r2, r3, #16
 801836c:	693b      	ldr	r3, [r7, #16]
 801836e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8018372:	2301      	movs	r3, #1
 8018374:	75fb      	strb	r3, [r7, #23]
      break;
 8018376:	e020      	b.n	80183ba <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8018378:	7afb      	ldrb	r3, [r7, #11]
 801837a:	4619      	mov	r1, r3
 801837c:	68f8      	ldr	r0, [r7, #12]
 801837e:	f7ff fc03 	bl	8017b88 <USBH_MSC_BOT_Process>
 8018382:	4603      	mov	r3, r0
 8018384:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8018386:	7dfb      	ldrb	r3, [r7, #23]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d115      	bne.n	80183b8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 801838c:	693b      	ldr	r3, [r7, #16]
 801838e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018392:	3302      	adds	r3, #2
 8018394:	781b      	ldrb	r3, [r3, #0]
 8018396:	f003 030f 	and.w	r3, r3, #15
 801839a:	b2da      	uxtb	r2, r3
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80183a0:	693b      	ldr	r3, [r7, #16]
 80183a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80183a6:	7b1a      	ldrb	r2, [r3, #12]
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80183ac:	693b      	ldr	r3, [r7, #16]
 80183ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80183b2:	7b5a      	ldrb	r2, [r3, #13]
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	709a      	strb	r2, [r3, #2]
      break;
 80183b8:	bf00      	nop
  }

  return error;
 80183ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80183bc:	4618      	mov	r0, r3
 80183be:	3718      	adds	r7, #24
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}

080183c4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b086      	sub	sp, #24
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	60f8      	str	r0, [r7, #12]
 80183cc:	607a      	str	r2, [r7, #4]
 80183ce:	603b      	str	r3, [r7, #0]
 80183d0:	460b      	mov	r3, r1
 80183d2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80183d4:	2302      	movs	r3, #2
 80183d6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80183de:	69db      	ldr	r3, [r3, #28]
 80183e0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80183e2:	693b      	ldr	r3, [r7, #16]
 80183e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80183e8:	2b01      	cmp	r3, #1
 80183ea:	d002      	beq.n	80183f2 <USBH_MSC_SCSI_Write+0x2e>
 80183ec:	2b02      	cmp	r3, #2
 80183ee:	d047      	beq.n	8018480 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80183f0:	e04e      	b.n	8018490 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80183f2:	693b      	ldr	r3, [r7, #16]
 80183f4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80183f8:	461a      	mov	r2, r3
 80183fa:	6a3b      	ldr	r3, [r7, #32]
 80183fc:	fb03 f202 	mul.w	r2, r3, r2
 8018400:	693b      	ldr	r3, [r7, #16]
 8018402:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8018404:	693b      	ldr	r3, [r7, #16]
 8018406:	2200      	movs	r2, #0
 8018408:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	220a      	movs	r2, #10
 8018410:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8018414:	693b      	ldr	r3, [r7, #16]
 8018416:	3363      	adds	r3, #99	; 0x63
 8018418:	2210      	movs	r2, #16
 801841a:	2100      	movs	r1, #0
 801841c:	4618      	mov	r0, r3
 801841e:	f005 fe20 	bl	801e062 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8018422:	693b      	ldr	r3, [r7, #16]
 8018424:	222a      	movs	r2, #42	; 0x2a
 8018426:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 801842a:	79fa      	ldrb	r2, [r7, #7]
 801842c:	693b      	ldr	r3, [r7, #16]
 801842e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8018432:	79ba      	ldrb	r2, [r7, #6]
 8018434:	693b      	ldr	r3, [r7, #16]
 8018436:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 801843a:	797a      	ldrb	r2, [r7, #5]
 801843c:	693b      	ldr	r3, [r7, #16]
 801843e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8018442:	1d3b      	adds	r3, r7, #4
 8018444:	781a      	ldrb	r2, [r3, #0]
 8018446:	693b      	ldr	r3, [r7, #16]
 8018448:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 801844c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8018450:	693b      	ldr	r3, [r7, #16]
 8018452:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8018456:	f107 0320 	add.w	r3, r7, #32
 801845a:	781a      	ldrb	r2, [r3, #0]
 801845c:	693b      	ldr	r3, [r7, #16]
 801845e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8018462:	693b      	ldr	r3, [r7, #16]
 8018464:	2201      	movs	r2, #1
 8018466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801846a:	693b      	ldr	r3, [r7, #16]
 801846c:	2202      	movs	r2, #2
 801846e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8018472:	693b      	ldr	r3, [r7, #16]
 8018474:	683a      	ldr	r2, [r7, #0]
 8018476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 801847a:	2301      	movs	r3, #1
 801847c:	75fb      	strb	r3, [r7, #23]
      break;
 801847e:	e007      	b.n	8018490 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8018480:	7afb      	ldrb	r3, [r7, #11]
 8018482:	4619      	mov	r1, r3
 8018484:	68f8      	ldr	r0, [r7, #12]
 8018486:	f7ff fb7f 	bl	8017b88 <USBH_MSC_BOT_Process>
 801848a:	4603      	mov	r3, r0
 801848c:	75fb      	strb	r3, [r7, #23]
      break;
 801848e:	bf00      	nop
  }

  return error;
 8018490:	7dfb      	ldrb	r3, [r7, #23]
}
 8018492:	4618      	mov	r0, r3
 8018494:	3718      	adds	r7, #24
 8018496:	46bd      	mov	sp, r7
 8018498:	bd80      	pop	{r7, pc}

0801849a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 801849a:	b580      	push	{r7, lr}
 801849c:	b086      	sub	sp, #24
 801849e:	af00      	add	r7, sp, #0
 80184a0:	60f8      	str	r0, [r7, #12]
 80184a2:	607a      	str	r2, [r7, #4]
 80184a4:	603b      	str	r3, [r7, #0]
 80184a6:	460b      	mov	r3, r1
 80184a8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80184aa:	2302      	movs	r3, #2
 80184ac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80184b4:	69db      	ldr	r3, [r3, #28]
 80184b6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80184b8:	693b      	ldr	r3, [r7, #16]
 80184ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80184be:	2b01      	cmp	r3, #1
 80184c0:	d002      	beq.n	80184c8 <USBH_MSC_SCSI_Read+0x2e>
 80184c2:	2b02      	cmp	r3, #2
 80184c4:	d047      	beq.n	8018556 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80184c6:	e04e      	b.n	8018566 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80184c8:	693b      	ldr	r3, [r7, #16]
 80184ca:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80184ce:	461a      	mov	r2, r3
 80184d0:	6a3b      	ldr	r3, [r7, #32]
 80184d2:	fb03 f202 	mul.w	r2, r3, r2
 80184d6:	693b      	ldr	r3, [r7, #16]
 80184d8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80184da:	693b      	ldr	r3, [r7, #16]
 80184dc:	2280      	movs	r2, #128	; 0x80
 80184de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	220a      	movs	r2, #10
 80184e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80184ea:	693b      	ldr	r3, [r7, #16]
 80184ec:	3363      	adds	r3, #99	; 0x63
 80184ee:	2210      	movs	r2, #16
 80184f0:	2100      	movs	r1, #0
 80184f2:	4618      	mov	r0, r3
 80184f4:	f005 fdb5 	bl	801e062 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80184f8:	693b      	ldr	r3, [r7, #16]
 80184fa:	2228      	movs	r2, #40	; 0x28
 80184fc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8018500:	79fa      	ldrb	r2, [r7, #7]
 8018502:	693b      	ldr	r3, [r7, #16]
 8018504:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8018508:	79ba      	ldrb	r2, [r7, #6]
 801850a:	693b      	ldr	r3, [r7, #16]
 801850c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8018510:	797a      	ldrb	r2, [r7, #5]
 8018512:	693b      	ldr	r3, [r7, #16]
 8018514:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8018518:	1d3b      	adds	r3, r7, #4
 801851a:	781a      	ldrb	r2, [r3, #0]
 801851c:	693b      	ldr	r3, [r7, #16]
 801851e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8018522:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8018526:	693b      	ldr	r3, [r7, #16]
 8018528:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 801852c:	f107 0320 	add.w	r3, r7, #32
 8018530:	781a      	ldrb	r2, [r3, #0]
 8018532:	693b      	ldr	r3, [r7, #16]
 8018534:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8018538:	693b      	ldr	r3, [r7, #16]
 801853a:	2201      	movs	r2, #1
 801853c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8018540:	693b      	ldr	r3, [r7, #16]
 8018542:	2202      	movs	r2, #2
 8018544:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8018548:	693b      	ldr	r3, [r7, #16]
 801854a:	683a      	ldr	r2, [r7, #0]
 801854c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8018550:	2301      	movs	r3, #1
 8018552:	75fb      	strb	r3, [r7, #23]
      break;
 8018554:	e007      	b.n	8018566 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8018556:	7afb      	ldrb	r3, [r7, #11]
 8018558:	4619      	mov	r1, r3
 801855a:	68f8      	ldr	r0, [r7, #12]
 801855c:	f7ff fb14 	bl	8017b88 <USBH_MSC_BOT_Process>
 8018560:	4603      	mov	r3, r0
 8018562:	75fb      	strb	r3, [r7, #23]
      break;
 8018564:	bf00      	nop
  }

  return error;
 8018566:	7dfb      	ldrb	r3, [r7, #23]
}
 8018568:	4618      	mov	r0, r3
 801856a:	3718      	adds	r7, #24
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}

08018570 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b084      	sub	sp, #16
 8018574:	af00      	add	r7, sp, #0
 8018576:	60f8      	str	r0, [r7, #12]
 8018578:	60b9      	str	r1, [r7, #8]
 801857a:	4613      	mov	r3, r2
 801857c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d101      	bne.n	8018588 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8018584:	2302      	movs	r3, #2
 8018586:	e029      	b.n	80185dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	79fa      	ldrb	r2, [r7, #7]
 801858c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	2200      	movs	r2, #0
 8018594:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	2200      	movs	r2, #0
 801859c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80185a0:	68f8      	ldr	r0, [r7, #12]
 80185a2:	f000 f81f 	bl	80185e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	2200      	movs	r2, #0
 80185aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	2200      	movs	r2, #0
 80185b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	2200      	movs	r2, #0
 80185ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	2200      	movs	r2, #0
 80185c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80185c6:	68bb      	ldr	r3, [r7, #8]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d003      	beq.n	80185d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	68ba      	ldr	r2, [r7, #8]
 80185d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80185d4:	68f8      	ldr	r0, [r7, #12]
 80185d6:	f005 fad3 	bl	801db80 <USBH_LL_Init>

  return USBH_OK;
 80185da:	2300      	movs	r3, #0
}
 80185dc:	4618      	mov	r0, r3
 80185de:	3710      	adds	r7, #16
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}

080185e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80185e4:	b480      	push	{r7}
 80185e6:	b085      	sub	sp, #20
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80185ec:	2300      	movs	r3, #0
 80185ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80185f0:	2300      	movs	r3, #0
 80185f2:	60fb      	str	r3, [r7, #12]
 80185f4:	e009      	b.n	801860a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80185f6:	687a      	ldr	r2, [r7, #4]
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	33e0      	adds	r3, #224	; 0xe0
 80185fc:	009b      	lsls	r3, r3, #2
 80185fe:	4413      	add	r3, r2
 8018600:	2200      	movs	r2, #0
 8018602:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	3301      	adds	r3, #1
 8018608:	60fb      	str	r3, [r7, #12]
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	2b0e      	cmp	r3, #14
 801860e:	d9f2      	bls.n	80185f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8018610:	2300      	movs	r3, #0
 8018612:	60fb      	str	r3, [r7, #12]
 8018614:	e009      	b.n	801862a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8018616:	687a      	ldr	r2, [r7, #4]
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	4413      	add	r3, r2
 801861c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8018620:	2200      	movs	r2, #0
 8018622:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	3301      	adds	r3, #1
 8018628:	60fb      	str	r3, [r7, #12]
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018630:	d3f1      	bcc.n	8018616 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	2200      	movs	r2, #0
 8018636:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	2200      	movs	r2, #0
 801863c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	2201      	movs	r2, #1
 8018642:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	2200      	movs	r2, #0
 8018648:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	2201      	movs	r2, #1
 8018650:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	2240      	movs	r2, #64	; 0x40
 8018656:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	2200      	movs	r2, #0
 801865c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	2200      	movs	r2, #0
 8018662:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	2201      	movs	r2, #1
 801866a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	2200      	movs	r2, #0
 8018672:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	2200      	movs	r2, #0
 801867a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 801867e:	2300      	movs	r3, #0
}
 8018680:	4618      	mov	r0, r3
 8018682:	3714      	adds	r7, #20
 8018684:	46bd      	mov	sp, r7
 8018686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868a:	4770      	bx	lr

0801868c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801868c:	b480      	push	{r7}
 801868e:	b085      	sub	sp, #20
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
 8018694:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8018696:	2300      	movs	r3, #0
 8018698:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801869a:	683b      	ldr	r3, [r7, #0]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d016      	beq.n	80186ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d10e      	bne.n	80186c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80186b0:	1c59      	adds	r1, r3, #1
 80186b2:	687a      	ldr	r2, [r7, #4]
 80186b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80186b8:	687a      	ldr	r2, [r7, #4]
 80186ba:	33de      	adds	r3, #222	; 0xde
 80186bc:	6839      	ldr	r1, [r7, #0]
 80186be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80186c2:	2300      	movs	r3, #0
 80186c4:	73fb      	strb	r3, [r7, #15]
 80186c6:	e004      	b.n	80186d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80186c8:	2302      	movs	r3, #2
 80186ca:	73fb      	strb	r3, [r7, #15]
 80186cc:	e001      	b.n	80186d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80186ce:	2302      	movs	r3, #2
 80186d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80186d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80186d4:	4618      	mov	r0, r3
 80186d6:	3714      	adds	r7, #20
 80186d8:	46bd      	mov	sp, r7
 80186da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186de:	4770      	bx	lr

080186e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80186e0:	b480      	push	{r7}
 80186e2:	b085      	sub	sp, #20
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
 80186e8:	460b      	mov	r3, r1
 80186ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80186ec:	2300      	movs	r3, #0
 80186ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80186f6:	78fa      	ldrb	r2, [r7, #3]
 80186f8:	429a      	cmp	r2, r3
 80186fa:	d204      	bcs.n	8018706 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	78fa      	ldrb	r2, [r7, #3]
 8018700:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8018704:	e001      	b.n	801870a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8018706:	2302      	movs	r3, #2
 8018708:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801870a:	7bfb      	ldrb	r3, [r7, #15]
}
 801870c:	4618      	mov	r0, r3
 801870e:	3714      	adds	r7, #20
 8018710:	46bd      	mov	sp, r7
 8018712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018716:	4770      	bx	lr

08018718 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8018718:	b480      	push	{r7}
 801871a:	b087      	sub	sp, #28
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	4608      	mov	r0, r1
 8018722:	4611      	mov	r1, r2
 8018724:	461a      	mov	r2, r3
 8018726:	4603      	mov	r3, r0
 8018728:	70fb      	strb	r3, [r7, #3]
 801872a:	460b      	mov	r3, r1
 801872c:	70bb      	strb	r3, [r7, #2]
 801872e:	4613      	mov	r3, r2
 8018730:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8018732:	2300      	movs	r3, #0
 8018734:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8018736:	2300      	movs	r3, #0
 8018738:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8018740:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8018742:	e025      	b.n	8018790 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8018744:	7dfb      	ldrb	r3, [r7, #23]
 8018746:	221a      	movs	r2, #26
 8018748:	fb02 f303 	mul.w	r3, r2, r3
 801874c:	3308      	adds	r3, #8
 801874e:	68fa      	ldr	r2, [r7, #12]
 8018750:	4413      	add	r3, r2
 8018752:	3302      	adds	r3, #2
 8018754:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8018756:	693b      	ldr	r3, [r7, #16]
 8018758:	795b      	ldrb	r3, [r3, #5]
 801875a:	78fa      	ldrb	r2, [r7, #3]
 801875c:	429a      	cmp	r2, r3
 801875e:	d002      	beq.n	8018766 <USBH_FindInterface+0x4e>
 8018760:	78fb      	ldrb	r3, [r7, #3]
 8018762:	2bff      	cmp	r3, #255	; 0xff
 8018764:	d111      	bne.n	801878a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8018766:	693b      	ldr	r3, [r7, #16]
 8018768:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801876a:	78ba      	ldrb	r2, [r7, #2]
 801876c:	429a      	cmp	r2, r3
 801876e:	d002      	beq.n	8018776 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8018770:	78bb      	ldrb	r3, [r7, #2]
 8018772:	2bff      	cmp	r3, #255	; 0xff
 8018774:	d109      	bne.n	801878a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8018776:	693b      	ldr	r3, [r7, #16]
 8018778:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801877a:	787a      	ldrb	r2, [r7, #1]
 801877c:	429a      	cmp	r2, r3
 801877e:	d002      	beq.n	8018786 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8018780:	787b      	ldrb	r3, [r7, #1]
 8018782:	2bff      	cmp	r3, #255	; 0xff
 8018784:	d101      	bne.n	801878a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8018786:	7dfb      	ldrb	r3, [r7, #23]
 8018788:	e006      	b.n	8018798 <USBH_FindInterface+0x80>
    }
    if_ix++;
 801878a:	7dfb      	ldrb	r3, [r7, #23]
 801878c:	3301      	adds	r3, #1
 801878e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8018790:	7dfb      	ldrb	r3, [r7, #23]
 8018792:	2b01      	cmp	r3, #1
 8018794:	d9d6      	bls.n	8018744 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8018796:	23ff      	movs	r3, #255	; 0xff
}
 8018798:	4618      	mov	r0, r3
 801879a:	371c      	adds	r7, #28
 801879c:	46bd      	mov	sp, r7
 801879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a2:	4770      	bx	lr

080187a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b082      	sub	sp, #8
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80187ac:	6878      	ldr	r0, [r7, #4]
 80187ae:	f005 fa23 	bl	801dbf8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80187b2:	2101      	movs	r1, #1
 80187b4:	6878      	ldr	r0, [r7, #4]
 80187b6:	f005 fb3a 	bl	801de2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80187ba:	2300      	movs	r3, #0
}
 80187bc:	4618      	mov	r0, r3
 80187be:	3708      	adds	r7, #8
 80187c0:	46bd      	mov	sp, r7
 80187c2:	bd80      	pop	{r7, pc}

080187c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b088      	sub	sp, #32
 80187c8:	af04      	add	r7, sp, #16
 80187ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80187cc:	2302      	movs	r3, #2
 80187ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80187d0:	2300      	movs	r3, #0
 80187d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80187da:	b2db      	uxtb	r3, r3
 80187dc:	2b01      	cmp	r3, #1
 80187de:	d102      	bne.n	80187e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	2203      	movs	r2, #3
 80187e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	781b      	ldrb	r3, [r3, #0]
 80187ea:	b2db      	uxtb	r3, r3
 80187ec:	2b0b      	cmp	r3, #11
 80187ee:	f200 81b3 	bhi.w	8018b58 <USBH_Process+0x394>
 80187f2:	a201      	add	r2, pc, #4	; (adr r2, 80187f8 <USBH_Process+0x34>)
 80187f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187f8:	08018829 	.word	0x08018829
 80187fc:	0801885b 	.word	0x0801885b
 8018800:	080188c3 	.word	0x080188c3
 8018804:	08018af3 	.word	0x08018af3
 8018808:	08018b59 	.word	0x08018b59
 801880c:	08018967 	.word	0x08018967
 8018810:	08018a99 	.word	0x08018a99
 8018814:	0801899d 	.word	0x0801899d
 8018818:	080189bd 	.word	0x080189bd
 801881c:	080189dd 	.word	0x080189dd
 8018820:	08018a0b 	.word	0x08018a0b
 8018824:	08018adb 	.word	0x08018adb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 801882e:	b2db      	uxtb	r3, r3
 8018830:	2b00      	cmp	r3, #0
 8018832:	f000 8193 	beq.w	8018b5c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2201      	movs	r2, #1
 801883a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 801883c:	20c8      	movs	r0, #200	; 0xc8
 801883e:	f005 fb73 	bl	801df28 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8018842:	6878      	ldr	r0, [r7, #4]
 8018844:	f005 fa33 	bl	801dcae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2200      	movs	r2, #0
 801884c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	2200      	movs	r2, #0
 8018854:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8018858:	e180      	b.n	8018b5c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8018860:	2b01      	cmp	r3, #1
 8018862:	d107      	bne.n	8018874 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2200      	movs	r2, #0
 8018868:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	2202      	movs	r2, #2
 8018870:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018872:	e182      	b.n	8018b7a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801887a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801887e:	d914      	bls.n	80188aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8018886:	3301      	adds	r3, #1
 8018888:	b2da      	uxtb	r2, r3
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8018896:	2b03      	cmp	r3, #3
 8018898:	d903      	bls.n	80188a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	220d      	movs	r2, #13
 801889e:	701a      	strb	r2, [r3, #0]
      break;
 80188a0:	e16b      	b.n	8018b7a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	2200      	movs	r2, #0
 80188a6:	701a      	strb	r2, [r3, #0]
      break;
 80188a8:	e167      	b.n	8018b7a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80188b0:	f103 020a 	add.w	r2, r3, #10
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80188ba:	200a      	movs	r0, #10
 80188bc:	f005 fb34 	bl	801df28 <USBH_Delay>
      break;
 80188c0:	e15b      	b.n	8018b7a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d005      	beq.n	80188d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80188d2:	2104      	movs	r1, #4
 80188d4:	6878      	ldr	r0, [r7, #4]
 80188d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80188d8:	2064      	movs	r0, #100	; 0x64
 80188da:	f005 fb25 	bl	801df28 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80188de:	6878      	ldr	r0, [r7, #4]
 80188e0:	f005 f9c0 	bl	801dc64 <USBH_LL_GetSpeed>
 80188e4:	4603      	mov	r3, r0
 80188e6:	461a      	mov	r2, r3
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	2205      	movs	r2, #5
 80188f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80188f4:	2100      	movs	r1, #0
 80188f6:	6878      	ldr	r0, [r7, #4]
 80188f8:	f001 f931 	bl	8019b5e <USBH_AllocPipe>
 80188fc:	4603      	mov	r3, r0
 80188fe:	461a      	mov	r2, r3
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8018904:	2180      	movs	r1, #128	; 0x80
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f001 f929 	bl	8019b5e <USBH_AllocPipe>
 801890c:	4603      	mov	r3, r0
 801890e:	461a      	mov	r2, r3
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	7919      	ldrb	r1, [r3, #4]
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8018924:	687a      	ldr	r2, [r7, #4]
 8018926:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8018928:	b292      	uxth	r2, r2
 801892a:	9202      	str	r2, [sp, #8]
 801892c:	2200      	movs	r2, #0
 801892e:	9201      	str	r2, [sp, #4]
 8018930:	9300      	str	r3, [sp, #0]
 8018932:	4603      	mov	r3, r0
 8018934:	2280      	movs	r2, #128	; 0x80
 8018936:	6878      	ldr	r0, [r7, #4]
 8018938:	f001 f8e2 	bl	8019b00 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	7959      	ldrb	r1, [r3, #5]
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801894c:	687a      	ldr	r2, [r7, #4]
 801894e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8018950:	b292      	uxth	r2, r2
 8018952:	9202      	str	r2, [sp, #8]
 8018954:	2200      	movs	r2, #0
 8018956:	9201      	str	r2, [sp, #4]
 8018958:	9300      	str	r3, [sp, #0]
 801895a:	4603      	mov	r3, r0
 801895c:	2200      	movs	r2, #0
 801895e:	6878      	ldr	r0, [r7, #4]
 8018960:	f001 f8ce 	bl	8019b00 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018964:	e109      	b.n	8018b7a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8018966:	6878      	ldr	r0, [r7, #4]
 8018968:	f000 f90c 	bl	8018b84 <USBH_HandleEnum>
 801896c:	4603      	mov	r3, r0
 801896e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8018970:	7bbb      	ldrb	r3, [r7, #14]
 8018972:	b2db      	uxtb	r3, r3
 8018974:	2b00      	cmp	r3, #0
 8018976:	f040 80f3 	bne.w	8018b60 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2200      	movs	r2, #0
 801897e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8018988:	2b01      	cmp	r3, #1
 801898a:	d103      	bne.n	8018994 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	2208      	movs	r2, #8
 8018990:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8018992:	e0e5      	b.n	8018b60 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	2207      	movs	r2, #7
 8018998:	701a      	strb	r2, [r3, #0]
      break;
 801899a:	e0e1      	b.n	8018b60 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	f000 80de 	beq.w	8018b64 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80189ae:	2101      	movs	r1, #1
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	2208      	movs	r2, #8
 80189b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80189ba:	e0d3      	b.n	8018b64 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80189c2:	b29b      	uxth	r3, r3
 80189c4:	4619      	mov	r1, r3
 80189c6:	6878      	ldr	r0, [r7, #4]
 80189c8:	f000 fc20 	bl	801920c <USBH_SetCfg>
 80189cc:	4603      	mov	r3, r0
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	f040 80ca 	bne.w	8018b68 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	2209      	movs	r2, #9
 80189d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80189da:	e0c5      	b.n	8018b68 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80189e2:	f003 0320 	and.w	r3, r3, #32
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d00b      	beq.n	8018a02 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80189ea:	2101      	movs	r1, #1
 80189ec:	6878      	ldr	r0, [r7, #4]
 80189ee:	f000 fc30 	bl	8019252 <USBH_SetFeature>
 80189f2:	4603      	mov	r3, r0
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	f040 80b9 	bne.w	8018b6c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	220a      	movs	r2, #10
 80189fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018a00:	e0b4      	b.n	8018b6c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	220a      	movs	r2, #10
 8018a06:	701a      	strb	r2, [r3, #0]
      break;
 8018a08:	e0b0      	b.n	8018b6c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	f000 80ad 	beq.w	8018b70 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	2200      	movs	r2, #0
 8018a1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8018a1e:	2300      	movs	r3, #0
 8018a20:	73fb      	strb	r3, [r7, #15]
 8018a22:	e016      	b.n	8018a52 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8018a24:	7bfa      	ldrb	r2, [r7, #15]
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	32de      	adds	r2, #222	; 0xde
 8018a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a2e:	791a      	ldrb	r2, [r3, #4]
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8018a36:	429a      	cmp	r2, r3
 8018a38:	d108      	bne.n	8018a4c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8018a3a:	7bfa      	ldrb	r2, [r7, #15]
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	32de      	adds	r2, #222	; 0xde
 8018a40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8018a4a:	e005      	b.n	8018a58 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8018a4c:	7bfb      	ldrb	r3, [r7, #15]
 8018a4e:	3301      	adds	r3, #1
 8018a50:	73fb      	strb	r3, [r7, #15]
 8018a52:	7bfb      	ldrb	r3, [r7, #15]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d0e5      	beq.n	8018a24 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d016      	beq.n	8018a90 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018a68:	689b      	ldr	r3, [r3, #8]
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	4798      	blx	r3
 8018a6e:	4603      	mov	r3, r0
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d109      	bne.n	8018a88 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	2206      	movs	r2, #6
 8018a78:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018a80:	2103      	movs	r1, #3
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018a86:	e073      	b.n	8018b70 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	220d      	movs	r2, #13
 8018a8c:	701a      	strb	r2, [r3, #0]
      break;
 8018a8e:	e06f      	b.n	8018b70 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	220d      	movs	r2, #13
 8018a94:	701a      	strb	r2, [r3, #0]
      break;
 8018a96:	e06b      	b.n	8018b70 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d017      	beq.n	8018ad2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018aa8:	691b      	ldr	r3, [r3, #16]
 8018aaa:	6878      	ldr	r0, [r7, #4]
 8018aac:	4798      	blx	r3
 8018aae:	4603      	mov	r3, r0
 8018ab0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8018ab2:	7bbb      	ldrb	r3, [r7, #14]
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d103      	bne.n	8018ac2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	220b      	movs	r2, #11
 8018abe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018ac0:	e058      	b.n	8018b74 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8018ac2:	7bbb      	ldrb	r3, [r7, #14]
 8018ac4:	b2db      	uxtb	r3, r3
 8018ac6:	2b02      	cmp	r3, #2
 8018ac8:	d154      	bne.n	8018b74 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	220d      	movs	r2, #13
 8018ace:	701a      	strb	r2, [r3, #0]
      break;
 8018ad0:	e050      	b.n	8018b74 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	220d      	movs	r2, #13
 8018ad6:	701a      	strb	r2, [r3, #0]
      break;
 8018ad8:	e04c      	b.n	8018b74 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d049      	beq.n	8018b78 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018aea:	695b      	ldr	r3, [r3, #20]
 8018aec:	6878      	ldr	r0, [r7, #4]
 8018aee:	4798      	blx	r3
      }
      break;
 8018af0:	e042      	b.n	8018b78 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	2200      	movs	r2, #0
 8018af6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8018afa:	6878      	ldr	r0, [r7, #4]
 8018afc:	f7ff fd72 	bl	80185e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d009      	beq.n	8018b1e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018b10:	68db      	ldr	r3, [r3, #12]
 8018b12:	6878      	ldr	r0, [r7, #4]
 8018b14:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d005      	beq.n	8018b34 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018b2e:	2105      	movs	r1, #5
 8018b30:	6878      	ldr	r0, [r7, #4]
 8018b32:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	2b01      	cmp	r3, #1
 8018b3e:	d107      	bne.n	8018b50 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	2200      	movs	r2, #0
 8018b44:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8018b48:	6878      	ldr	r0, [r7, #4]
 8018b4a:	f7ff fe2b 	bl	80187a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018b4e:	e014      	b.n	8018b7a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8018b50:	6878      	ldr	r0, [r7, #4]
 8018b52:	f005 f851 	bl	801dbf8 <USBH_LL_Start>
      break;
 8018b56:	e010      	b.n	8018b7a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8018b58:	bf00      	nop
 8018b5a:	e00e      	b.n	8018b7a <USBH_Process+0x3b6>
      break;
 8018b5c:	bf00      	nop
 8018b5e:	e00c      	b.n	8018b7a <USBH_Process+0x3b6>
      break;
 8018b60:	bf00      	nop
 8018b62:	e00a      	b.n	8018b7a <USBH_Process+0x3b6>
    break;
 8018b64:	bf00      	nop
 8018b66:	e008      	b.n	8018b7a <USBH_Process+0x3b6>
      break;
 8018b68:	bf00      	nop
 8018b6a:	e006      	b.n	8018b7a <USBH_Process+0x3b6>
      break;
 8018b6c:	bf00      	nop
 8018b6e:	e004      	b.n	8018b7a <USBH_Process+0x3b6>
      break;
 8018b70:	bf00      	nop
 8018b72:	e002      	b.n	8018b7a <USBH_Process+0x3b6>
      break;
 8018b74:	bf00      	nop
 8018b76:	e000      	b.n	8018b7a <USBH_Process+0x3b6>
      break;
 8018b78:	bf00      	nop
  }
  return USBH_OK;
 8018b7a:	2300      	movs	r3, #0
}
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	3710      	adds	r7, #16
 8018b80:	46bd      	mov	sp, r7
 8018b82:	bd80      	pop	{r7, pc}

08018b84 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b088      	sub	sp, #32
 8018b88:	af04      	add	r7, sp, #16
 8018b8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8018b90:	2301      	movs	r3, #1
 8018b92:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	785b      	ldrb	r3, [r3, #1]
 8018b98:	2b07      	cmp	r3, #7
 8018b9a:	f200 81c1 	bhi.w	8018f20 <USBH_HandleEnum+0x39c>
 8018b9e:	a201      	add	r2, pc, #4	; (adr r2, 8018ba4 <USBH_HandleEnum+0x20>)
 8018ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ba4:	08018bc5 	.word	0x08018bc5
 8018ba8:	08018c83 	.word	0x08018c83
 8018bac:	08018ced 	.word	0x08018ced
 8018bb0:	08018d7b 	.word	0x08018d7b
 8018bb4:	08018de5 	.word	0x08018de5
 8018bb8:	08018e55 	.word	0x08018e55
 8018bbc:	08018e9b 	.word	0x08018e9b
 8018bc0:	08018ee1 	.word	0x08018ee1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8018bc4:	2108      	movs	r1, #8
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f000 fa50 	bl	801906c <USBH_Get_DevDesc>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018bd0:	7bbb      	ldrb	r3, [r7, #14]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d130      	bne.n	8018c38 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2201      	movs	r2, #1
 8018be4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	7919      	ldrb	r1, [r3, #4]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8018bf6:	687a      	ldr	r2, [r7, #4]
 8018bf8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8018bfa:	b292      	uxth	r2, r2
 8018bfc:	9202      	str	r2, [sp, #8]
 8018bfe:	2200      	movs	r2, #0
 8018c00:	9201      	str	r2, [sp, #4]
 8018c02:	9300      	str	r3, [sp, #0]
 8018c04:	4603      	mov	r3, r0
 8018c06:	2280      	movs	r2, #128	; 0x80
 8018c08:	6878      	ldr	r0, [r7, #4]
 8018c0a:	f000 ff79 	bl	8019b00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	7959      	ldrb	r1, [r3, #5]
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8018c1e:	687a      	ldr	r2, [r7, #4]
 8018c20:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018c22:	b292      	uxth	r2, r2
 8018c24:	9202      	str	r2, [sp, #8]
 8018c26:	2200      	movs	r2, #0
 8018c28:	9201      	str	r2, [sp, #4]
 8018c2a:	9300      	str	r3, [sp, #0]
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	2200      	movs	r2, #0
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	f000 ff65 	bl	8019b00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8018c36:	e175      	b.n	8018f24 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018c38:	7bbb      	ldrb	r3, [r7, #14]
 8018c3a:	2b03      	cmp	r3, #3
 8018c3c:	f040 8172 	bne.w	8018f24 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018c46:	3301      	adds	r3, #1
 8018c48:	b2da      	uxtb	r2, r3
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018c56:	2b03      	cmp	r3, #3
 8018c58:	d903      	bls.n	8018c62 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	220d      	movs	r2, #13
 8018c5e:	701a      	strb	r2, [r3, #0]
      break;
 8018c60:	e160      	b.n	8018f24 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	795b      	ldrb	r3, [r3, #5]
 8018c66:	4619      	mov	r1, r3
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	f000 ff99 	bl	8019ba0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	791b      	ldrb	r3, [r3, #4]
 8018c72:	4619      	mov	r1, r3
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	f000 ff93 	bl	8019ba0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	701a      	strb	r2, [r3, #0]
      break;
 8018c80:	e150      	b.n	8018f24 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8018c82:	2112      	movs	r1, #18
 8018c84:	6878      	ldr	r0, [r7, #4]
 8018c86:	f000 f9f1 	bl	801906c <USBH_Get_DevDesc>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018c8e:	7bbb      	ldrb	r3, [r7, #14]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d103      	bne.n	8018c9c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	2202      	movs	r2, #2
 8018c98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8018c9a:	e145      	b.n	8018f28 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018c9c:	7bbb      	ldrb	r3, [r7, #14]
 8018c9e:	2b03      	cmp	r3, #3
 8018ca0:	f040 8142 	bne.w	8018f28 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018caa:	3301      	adds	r3, #1
 8018cac:	b2da      	uxtb	r2, r3
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018cba:	2b03      	cmp	r3, #3
 8018cbc:	d903      	bls.n	8018cc6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	220d      	movs	r2, #13
 8018cc2:	701a      	strb	r2, [r3, #0]
      break;
 8018cc4:	e130      	b.n	8018f28 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	795b      	ldrb	r3, [r3, #5]
 8018cca:	4619      	mov	r1, r3
 8018ccc:	6878      	ldr	r0, [r7, #4]
 8018cce:	f000 ff67 	bl	8019ba0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	791b      	ldrb	r3, [r3, #4]
 8018cd6:	4619      	mov	r1, r3
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f000 ff61 	bl	8019ba0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	2200      	movs	r2, #0
 8018ce2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2200      	movs	r2, #0
 8018ce8:	701a      	strb	r2, [r3, #0]
      break;
 8018cea:	e11d      	b.n	8018f28 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8018cec:	2101      	movs	r1, #1
 8018cee:	6878      	ldr	r0, [r7, #4]
 8018cf0:	f000 fa68 	bl	80191c4 <USBH_SetAddress>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018cf8:	7bbb      	ldrb	r3, [r7, #14]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d132      	bne.n	8018d64 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8018cfe:	2002      	movs	r0, #2
 8018d00:	f005 f912 	bl	801df28 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2201      	movs	r2, #1
 8018d08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2203      	movs	r2, #3
 8018d10:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	7919      	ldrb	r1, [r3, #4]
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8018d22:	687a      	ldr	r2, [r7, #4]
 8018d24:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8018d26:	b292      	uxth	r2, r2
 8018d28:	9202      	str	r2, [sp, #8]
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	9201      	str	r2, [sp, #4]
 8018d2e:	9300      	str	r3, [sp, #0]
 8018d30:	4603      	mov	r3, r0
 8018d32:	2280      	movs	r2, #128	; 0x80
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	f000 fee3 	bl	8019b00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	7959      	ldrb	r1, [r3, #5]
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8018d4a:	687a      	ldr	r2, [r7, #4]
 8018d4c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018d4e:	b292      	uxth	r2, r2
 8018d50:	9202      	str	r2, [sp, #8]
 8018d52:	2200      	movs	r2, #0
 8018d54:	9201      	str	r2, [sp, #4]
 8018d56:	9300      	str	r3, [sp, #0]
 8018d58:	4603      	mov	r3, r0
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	6878      	ldr	r0, [r7, #4]
 8018d5e:	f000 fecf 	bl	8019b00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8018d62:	e0e3      	b.n	8018f2c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018d64:	7bbb      	ldrb	r3, [r7, #14]
 8018d66:	2b03      	cmp	r3, #3
 8018d68:	f040 80e0 	bne.w	8018f2c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	220d      	movs	r2, #13
 8018d70:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	2200      	movs	r2, #0
 8018d76:	705a      	strb	r2, [r3, #1]
      break;
 8018d78:	e0d8      	b.n	8018f2c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8018d7a:	2109      	movs	r1, #9
 8018d7c:	6878      	ldr	r0, [r7, #4]
 8018d7e:	f000 f99d 	bl	80190bc <USBH_Get_CfgDesc>
 8018d82:	4603      	mov	r3, r0
 8018d84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018d86:	7bbb      	ldrb	r3, [r7, #14]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d103      	bne.n	8018d94 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2204      	movs	r2, #4
 8018d90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8018d92:	e0cd      	b.n	8018f30 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018d94:	7bbb      	ldrb	r3, [r7, #14]
 8018d96:	2b03      	cmp	r3, #3
 8018d98:	f040 80ca 	bne.w	8018f30 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018da2:	3301      	adds	r3, #1
 8018da4:	b2da      	uxtb	r2, r3
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018db2:	2b03      	cmp	r3, #3
 8018db4:	d903      	bls.n	8018dbe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	220d      	movs	r2, #13
 8018dba:	701a      	strb	r2, [r3, #0]
      break;
 8018dbc:	e0b8      	b.n	8018f30 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	795b      	ldrb	r3, [r3, #5]
 8018dc2:	4619      	mov	r1, r3
 8018dc4:	6878      	ldr	r0, [r7, #4]
 8018dc6:	f000 feeb 	bl	8019ba0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	791b      	ldrb	r3, [r3, #4]
 8018dce:	4619      	mov	r1, r3
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	f000 fee5 	bl	8019ba0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	2200      	movs	r2, #0
 8018dda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2200      	movs	r2, #0
 8018de0:	701a      	strb	r2, [r3, #0]
      break;
 8018de2:	e0a5      	b.n	8018f30 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8018dea:	4619      	mov	r1, r3
 8018dec:	6878      	ldr	r0, [r7, #4]
 8018dee:	f000 f965 	bl	80190bc <USBH_Get_CfgDesc>
 8018df2:	4603      	mov	r3, r0
 8018df4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018df6:	7bbb      	ldrb	r3, [r7, #14]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d103      	bne.n	8018e04 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	2205      	movs	r2, #5
 8018e00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8018e02:	e097      	b.n	8018f34 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018e04:	7bbb      	ldrb	r3, [r7, #14]
 8018e06:	2b03      	cmp	r3, #3
 8018e08:	f040 8094 	bne.w	8018f34 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018e12:	3301      	adds	r3, #1
 8018e14:	b2da      	uxtb	r2, r3
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018e22:	2b03      	cmp	r3, #3
 8018e24:	d903      	bls.n	8018e2e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	220d      	movs	r2, #13
 8018e2a:	701a      	strb	r2, [r3, #0]
      break;
 8018e2c:	e082      	b.n	8018f34 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	795b      	ldrb	r3, [r3, #5]
 8018e32:	4619      	mov	r1, r3
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f000 feb3 	bl	8019ba0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	791b      	ldrb	r3, [r3, #4]
 8018e3e:	4619      	mov	r1, r3
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	f000 fead 	bl	8019ba0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	2200      	movs	r2, #0
 8018e4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	2200      	movs	r2, #0
 8018e50:	701a      	strb	r2, [r3, #0]
      break;
 8018e52:	e06f      	b.n	8018f34 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d019      	beq.n	8018e92 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8018e6a:	23ff      	movs	r3, #255	; 0xff
 8018e6c:	6878      	ldr	r0, [r7, #4]
 8018e6e:	f000 f949 	bl	8019104 <USBH_Get_StringDesc>
 8018e72:	4603      	mov	r3, r0
 8018e74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8018e76:	7bbb      	ldrb	r3, [r7, #14]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d103      	bne.n	8018e84 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	2206      	movs	r2, #6
 8018e80:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8018e82:	e059      	b.n	8018f38 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018e84:	7bbb      	ldrb	r3, [r7, #14]
 8018e86:	2b03      	cmp	r3, #3
 8018e88:	d156      	bne.n	8018f38 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	2206      	movs	r2, #6
 8018e8e:	705a      	strb	r2, [r3, #1]
      break;
 8018e90:	e052      	b.n	8018f38 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	2206      	movs	r2, #6
 8018e96:	705a      	strb	r2, [r3, #1]
      break;
 8018e98:	e04e      	b.n	8018f38 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d019      	beq.n	8018ed8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8018eb0:	23ff      	movs	r3, #255	; 0xff
 8018eb2:	6878      	ldr	r0, [r7, #4]
 8018eb4:	f000 f926 	bl	8019104 <USBH_Get_StringDesc>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8018ebc:	7bbb      	ldrb	r3, [r7, #14]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d103      	bne.n	8018eca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	2207      	movs	r2, #7
 8018ec6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8018ec8:	e038      	b.n	8018f3c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018eca:	7bbb      	ldrb	r3, [r7, #14]
 8018ecc:	2b03      	cmp	r3, #3
 8018ece:	d135      	bne.n	8018f3c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	2207      	movs	r2, #7
 8018ed4:	705a      	strb	r2, [r3, #1]
      break;
 8018ed6:	e031      	b.n	8018f3c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	2207      	movs	r2, #7
 8018edc:	705a      	strb	r2, [r3, #1]
      break;
 8018ede:	e02d      	b.n	8018f3c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d017      	beq.n	8018f1a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8018ef6:	23ff      	movs	r3, #255	; 0xff
 8018ef8:	6878      	ldr	r0, [r7, #4]
 8018efa:	f000 f903 	bl	8019104 <USBH_Get_StringDesc>
 8018efe:	4603      	mov	r3, r0
 8018f00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8018f02:	7bbb      	ldrb	r3, [r7, #14]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d102      	bne.n	8018f0e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8018f08:	2300      	movs	r3, #0
 8018f0a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8018f0c:	e018      	b.n	8018f40 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018f0e:	7bbb      	ldrb	r3, [r7, #14]
 8018f10:	2b03      	cmp	r3, #3
 8018f12:	d115      	bne.n	8018f40 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8018f14:	2300      	movs	r3, #0
 8018f16:	73fb      	strb	r3, [r7, #15]
      break;
 8018f18:	e012      	b.n	8018f40 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8018f1e:	e00f      	b.n	8018f40 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8018f20:	bf00      	nop
 8018f22:	e00e      	b.n	8018f42 <USBH_HandleEnum+0x3be>
      break;
 8018f24:	bf00      	nop
 8018f26:	e00c      	b.n	8018f42 <USBH_HandleEnum+0x3be>
      break;
 8018f28:	bf00      	nop
 8018f2a:	e00a      	b.n	8018f42 <USBH_HandleEnum+0x3be>
      break;
 8018f2c:	bf00      	nop
 8018f2e:	e008      	b.n	8018f42 <USBH_HandleEnum+0x3be>
      break;
 8018f30:	bf00      	nop
 8018f32:	e006      	b.n	8018f42 <USBH_HandleEnum+0x3be>
      break;
 8018f34:	bf00      	nop
 8018f36:	e004      	b.n	8018f42 <USBH_HandleEnum+0x3be>
      break;
 8018f38:	bf00      	nop
 8018f3a:	e002      	b.n	8018f42 <USBH_HandleEnum+0x3be>
      break;
 8018f3c:	bf00      	nop
 8018f3e:	e000      	b.n	8018f42 <USBH_HandleEnum+0x3be>
      break;
 8018f40:	bf00      	nop
  }
  return Status;
 8018f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	3710      	adds	r7, #16
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}

08018f4c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8018f4c:	b480      	push	{r7}
 8018f4e:	b083      	sub	sp, #12
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	6078      	str	r0, [r7, #4]
 8018f54:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	683a      	ldr	r2, [r7, #0]
 8018f5a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8018f5e:	bf00      	nop
 8018f60:	370c      	adds	r7, #12
 8018f62:	46bd      	mov	sp, r7
 8018f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f68:	4770      	bx	lr

08018f6a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8018f6a:	b580      	push	{r7, lr}
 8018f6c:	b082      	sub	sp, #8
 8018f6e:	af00      	add	r7, sp, #0
 8018f70:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018f78:	1c5a      	adds	r2, r3, #1
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	f000 f804 	bl	8018f8e <USBH_HandleSof>
}
 8018f86:	bf00      	nop
 8018f88:	3708      	adds	r7, #8
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}

08018f8e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8018f8e:	b580      	push	{r7, lr}
 8018f90:	b082      	sub	sp, #8
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	781b      	ldrb	r3, [r3, #0]
 8018f9a:	b2db      	uxtb	r3, r3
 8018f9c:	2b0b      	cmp	r3, #11
 8018f9e:	d10a      	bne.n	8018fb6 <USBH_HandleSof+0x28>
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d005      	beq.n	8018fb6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018fb0:	699b      	ldr	r3, [r3, #24]
 8018fb2:	6878      	ldr	r0, [r7, #4]
 8018fb4:	4798      	blx	r3
  }
}
 8018fb6:	bf00      	nop
 8018fb8:	3708      	adds	r7, #8
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd80      	pop	{r7, pc}

08018fbe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8018fbe:	b480      	push	{r7}
 8018fc0:	b083      	sub	sp, #12
 8018fc2:	af00      	add	r7, sp, #0
 8018fc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	2201      	movs	r2, #1
 8018fca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8018fce:	bf00      	nop
}
 8018fd0:	370c      	adds	r7, #12
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd8:	4770      	bx	lr

08018fda <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8018fda:	b480      	push	{r7}
 8018fdc:	b083      	sub	sp, #12
 8018fde:	af00      	add	r7, sp, #0
 8018fe0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8018fea:	bf00      	nop
}
 8018fec:	370c      	adds	r7, #12
 8018fee:	46bd      	mov	sp, r7
 8018ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ff4:	4770      	bx	lr

08018ff6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8018ff6:	b480      	push	{r7}
 8018ff8:	b083      	sub	sp, #12
 8018ffa:	af00      	add	r7, sp, #0
 8018ffc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	2201      	movs	r2, #1
 8019002:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	2200      	movs	r2, #0
 801900a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	2200      	movs	r2, #0
 8019012:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8019016:	2300      	movs	r3, #0
}
 8019018:	4618      	mov	r0, r3
 801901a:	370c      	adds	r7, #12
 801901c:	46bd      	mov	sp, r7
 801901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019022:	4770      	bx	lr

08019024 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	2201      	movs	r2, #1
 8019030:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	2200      	movs	r2, #0
 8019038:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2200      	movs	r2, #0
 8019040:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8019044:	6878      	ldr	r0, [r7, #4]
 8019046:	f004 fdf2 	bl	801dc2e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	791b      	ldrb	r3, [r3, #4]
 801904e:	4619      	mov	r1, r3
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	f000 fda5 	bl	8019ba0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	795b      	ldrb	r3, [r3, #5]
 801905a:	4619      	mov	r1, r3
 801905c:	6878      	ldr	r0, [r7, #4]
 801905e:	f000 fd9f 	bl	8019ba0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8019062:	2300      	movs	r3, #0
}
 8019064:	4618      	mov	r0, r3
 8019066:	3708      	adds	r7, #8
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}

0801906c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 801906c:	b580      	push	{r7, lr}
 801906e:	b086      	sub	sp, #24
 8019070:	af02      	add	r7, sp, #8
 8019072:	6078      	str	r0, [r7, #4]
 8019074:	460b      	mov	r3, r1
 8019076:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 801907e:	78fb      	ldrb	r3, [r7, #3]
 8019080:	b29b      	uxth	r3, r3
 8019082:	9300      	str	r3, [sp, #0]
 8019084:	4613      	mov	r3, r2
 8019086:	f44f 7280 	mov.w	r2, #256	; 0x100
 801908a:	2100      	movs	r1, #0
 801908c:	6878      	ldr	r0, [r7, #4]
 801908e:	f000 f864 	bl	801915a <USBH_GetDescriptor>
 8019092:	4603      	mov	r3, r0
 8019094:	73fb      	strb	r3, [r7, #15]
 8019096:	7bfb      	ldrb	r3, [r7, #15]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d10a      	bne.n	80190b2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f203 3026 	addw	r0, r3, #806	; 0x326
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80190a8:	78fa      	ldrb	r2, [r7, #3]
 80190aa:	b292      	uxth	r2, r2
 80190ac:	4619      	mov	r1, r3
 80190ae:	f000 f918 	bl	80192e2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80190b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80190b4:	4618      	mov	r0, r3
 80190b6:	3710      	adds	r7, #16
 80190b8:	46bd      	mov	sp, r7
 80190ba:	bd80      	pop	{r7, pc}

080190bc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b086      	sub	sp, #24
 80190c0:	af02      	add	r7, sp, #8
 80190c2:	6078      	str	r0, [r7, #4]
 80190c4:	460b      	mov	r3, r1
 80190c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	331c      	adds	r3, #28
 80190cc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80190ce:	887b      	ldrh	r3, [r7, #2]
 80190d0:	9300      	str	r3, [sp, #0]
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80190d8:	2100      	movs	r1, #0
 80190da:	6878      	ldr	r0, [r7, #4]
 80190dc:	f000 f83d 	bl	801915a <USBH_GetDescriptor>
 80190e0:	4603      	mov	r3, r0
 80190e2:	72fb      	strb	r3, [r7, #11]
 80190e4:	7afb      	ldrb	r3, [r7, #11]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d107      	bne.n	80190fa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80190f0:	887a      	ldrh	r2, [r7, #2]
 80190f2:	68f9      	ldr	r1, [r7, #12]
 80190f4:	4618      	mov	r0, r3
 80190f6:	f000 f964 	bl	80193c2 <USBH_ParseCfgDesc>
  }

  return status;
 80190fa:	7afb      	ldrb	r3, [r7, #11]
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	3710      	adds	r7, #16
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}

08019104 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b088      	sub	sp, #32
 8019108:	af02      	add	r7, sp, #8
 801910a:	60f8      	str	r0, [r7, #12]
 801910c:	607a      	str	r2, [r7, #4]
 801910e:	461a      	mov	r2, r3
 8019110:	460b      	mov	r3, r1
 8019112:	72fb      	strb	r3, [r7, #11]
 8019114:	4613      	mov	r3, r2
 8019116:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8019118:	7afb      	ldrb	r3, [r7, #11]
 801911a:	b29b      	uxth	r3, r3
 801911c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8019120:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8019128:	893b      	ldrh	r3, [r7, #8]
 801912a:	9300      	str	r3, [sp, #0]
 801912c:	460b      	mov	r3, r1
 801912e:	2100      	movs	r1, #0
 8019130:	68f8      	ldr	r0, [r7, #12]
 8019132:	f000 f812 	bl	801915a <USBH_GetDescriptor>
 8019136:	4603      	mov	r3, r0
 8019138:	75fb      	strb	r3, [r7, #23]
 801913a:	7dfb      	ldrb	r3, [r7, #23]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d107      	bne.n	8019150 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8019146:	893a      	ldrh	r2, [r7, #8]
 8019148:	6879      	ldr	r1, [r7, #4]
 801914a:	4618      	mov	r0, r3
 801914c:	f000 fa37 	bl	80195be <USBH_ParseStringDesc>
  }

  return status;
 8019150:	7dfb      	ldrb	r3, [r7, #23]
}
 8019152:	4618      	mov	r0, r3
 8019154:	3718      	adds	r7, #24
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}

0801915a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801915a:	b580      	push	{r7, lr}
 801915c:	b084      	sub	sp, #16
 801915e:	af00      	add	r7, sp, #0
 8019160:	60f8      	str	r0, [r7, #12]
 8019162:	607b      	str	r3, [r7, #4]
 8019164:	460b      	mov	r3, r1
 8019166:	72fb      	strb	r3, [r7, #11]
 8019168:	4613      	mov	r3, r2
 801916a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	789b      	ldrb	r3, [r3, #2]
 8019170:	2b01      	cmp	r3, #1
 8019172:	d11c      	bne.n	80191ae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8019174:	7afb      	ldrb	r3, [r7, #11]
 8019176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801917a:	b2da      	uxtb	r2, r3
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	2206      	movs	r2, #6
 8019184:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	893a      	ldrh	r2, [r7, #8]
 801918a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 801918c:	893b      	ldrh	r3, [r7, #8]
 801918e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019196:	d104      	bne.n	80191a2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	f240 4209 	movw	r2, #1033	; 0x409
 801919e:	829a      	strh	r2, [r3, #20]
 80191a0:	e002      	b.n	80191a8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	2200      	movs	r2, #0
 80191a6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	8b3a      	ldrh	r2, [r7, #24]
 80191ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80191ae:	8b3b      	ldrh	r3, [r7, #24]
 80191b0:	461a      	mov	r2, r3
 80191b2:	6879      	ldr	r1, [r7, #4]
 80191b4:	68f8      	ldr	r0, [r7, #12]
 80191b6:	f000 fa50 	bl	801965a <USBH_CtlReq>
 80191ba:	4603      	mov	r3, r0
}
 80191bc:	4618      	mov	r0, r3
 80191be:	3710      	adds	r7, #16
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}

080191c4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b082      	sub	sp, #8
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	6078      	str	r0, [r7, #4]
 80191cc:	460b      	mov	r3, r1
 80191ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	789b      	ldrb	r3, [r3, #2]
 80191d4:	2b01      	cmp	r3, #1
 80191d6:	d10f      	bne.n	80191f8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	2200      	movs	r2, #0
 80191dc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	2205      	movs	r2, #5
 80191e2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80191e4:	78fb      	ldrb	r3, [r7, #3]
 80191e6:	b29a      	uxth	r2, r3
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	2200      	movs	r2, #0
 80191f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	2200      	movs	r2, #0
 80191f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80191f8:	2200      	movs	r2, #0
 80191fa:	2100      	movs	r1, #0
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f000 fa2c 	bl	801965a <USBH_CtlReq>
 8019202:	4603      	mov	r3, r0
}
 8019204:	4618      	mov	r0, r3
 8019206:	3708      	adds	r7, #8
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}

0801920c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b082      	sub	sp, #8
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
 8019214:	460b      	mov	r3, r1
 8019216:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	789b      	ldrb	r3, [r3, #2]
 801921c:	2b01      	cmp	r3, #1
 801921e:	d10e      	bne.n	801923e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	2200      	movs	r2, #0
 8019224:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	2209      	movs	r2, #9
 801922a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	887a      	ldrh	r2, [r7, #2]
 8019230:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	2200      	movs	r2, #0
 8019236:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	2200      	movs	r2, #0
 801923c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801923e:	2200      	movs	r2, #0
 8019240:	2100      	movs	r1, #0
 8019242:	6878      	ldr	r0, [r7, #4]
 8019244:	f000 fa09 	bl	801965a <USBH_CtlReq>
 8019248:	4603      	mov	r3, r0
}
 801924a:	4618      	mov	r0, r3
 801924c:	3708      	adds	r7, #8
 801924e:	46bd      	mov	sp, r7
 8019250:	bd80      	pop	{r7, pc}

08019252 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8019252:	b580      	push	{r7, lr}
 8019254:	b082      	sub	sp, #8
 8019256:	af00      	add	r7, sp, #0
 8019258:	6078      	str	r0, [r7, #4]
 801925a:	460b      	mov	r3, r1
 801925c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	789b      	ldrb	r3, [r3, #2]
 8019262:	2b01      	cmp	r3, #1
 8019264:	d10f      	bne.n	8019286 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	2200      	movs	r2, #0
 801926a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	2203      	movs	r2, #3
 8019270:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8019272:	78fb      	ldrb	r3, [r7, #3]
 8019274:	b29a      	uxth	r2, r3
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	2200      	movs	r2, #0
 801927e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	2200      	movs	r2, #0
 8019284:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8019286:	2200      	movs	r2, #0
 8019288:	2100      	movs	r1, #0
 801928a:	6878      	ldr	r0, [r7, #4]
 801928c:	f000 f9e5 	bl	801965a <USBH_CtlReq>
 8019290:	4603      	mov	r3, r0
}
 8019292:	4618      	mov	r0, r3
 8019294:	3708      	adds	r7, #8
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}

0801929a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801929a:	b580      	push	{r7, lr}
 801929c:	b082      	sub	sp, #8
 801929e:	af00      	add	r7, sp, #0
 80192a0:	6078      	str	r0, [r7, #4]
 80192a2:	460b      	mov	r3, r1
 80192a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	789b      	ldrb	r3, [r3, #2]
 80192aa:	2b01      	cmp	r3, #1
 80192ac:	d10f      	bne.n	80192ce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	2202      	movs	r2, #2
 80192b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	2201      	movs	r2, #1
 80192b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	2200      	movs	r2, #0
 80192be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80192c0:	78fb      	ldrb	r3, [r7, #3]
 80192c2:	b29a      	uxth	r2, r3
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	2200      	movs	r2, #0
 80192cc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80192ce:	2200      	movs	r2, #0
 80192d0:	2100      	movs	r1, #0
 80192d2:	6878      	ldr	r0, [r7, #4]
 80192d4:	f000 f9c1 	bl	801965a <USBH_CtlReq>
 80192d8:	4603      	mov	r3, r0
}
 80192da:	4618      	mov	r0, r3
 80192dc:	3708      	adds	r7, #8
 80192de:	46bd      	mov	sp, r7
 80192e0:	bd80      	pop	{r7, pc}

080192e2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80192e2:	b480      	push	{r7}
 80192e4:	b085      	sub	sp, #20
 80192e6:	af00      	add	r7, sp, #0
 80192e8:	60f8      	str	r0, [r7, #12]
 80192ea:	60b9      	str	r1, [r7, #8]
 80192ec:	4613      	mov	r3, r2
 80192ee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80192f0:	68bb      	ldr	r3, [r7, #8]
 80192f2:	781a      	ldrb	r2, [r3, #0]
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	785a      	ldrb	r2, [r3, #1]
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8019300:	68bb      	ldr	r3, [r7, #8]
 8019302:	3302      	adds	r3, #2
 8019304:	781b      	ldrb	r3, [r3, #0]
 8019306:	b29a      	uxth	r2, r3
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	3303      	adds	r3, #3
 801930c:	781b      	ldrb	r3, [r3, #0]
 801930e:	b29b      	uxth	r3, r3
 8019310:	021b      	lsls	r3, r3, #8
 8019312:	b29b      	uxth	r3, r3
 8019314:	4313      	orrs	r3, r2
 8019316:	b29a      	uxth	r2, r3
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 801931c:	68bb      	ldr	r3, [r7, #8]
 801931e:	791a      	ldrb	r2, [r3, #4]
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	795a      	ldrb	r2, [r3, #5]
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801932c:	68bb      	ldr	r3, [r7, #8]
 801932e:	799a      	ldrb	r2, [r3, #6]
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8019334:	68bb      	ldr	r3, [r7, #8]
 8019336:	79da      	ldrb	r2, [r3, #7]
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 801933c:	88fb      	ldrh	r3, [r7, #6]
 801933e:	2b08      	cmp	r3, #8
 8019340:	d939      	bls.n	80193b6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8019342:	68bb      	ldr	r3, [r7, #8]
 8019344:	3308      	adds	r3, #8
 8019346:	781b      	ldrb	r3, [r3, #0]
 8019348:	b29a      	uxth	r2, r3
 801934a:	68bb      	ldr	r3, [r7, #8]
 801934c:	3309      	adds	r3, #9
 801934e:	781b      	ldrb	r3, [r3, #0]
 8019350:	b29b      	uxth	r3, r3
 8019352:	021b      	lsls	r3, r3, #8
 8019354:	b29b      	uxth	r3, r3
 8019356:	4313      	orrs	r3, r2
 8019358:	b29a      	uxth	r2, r3
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801935e:	68bb      	ldr	r3, [r7, #8]
 8019360:	330a      	adds	r3, #10
 8019362:	781b      	ldrb	r3, [r3, #0]
 8019364:	b29a      	uxth	r2, r3
 8019366:	68bb      	ldr	r3, [r7, #8]
 8019368:	330b      	adds	r3, #11
 801936a:	781b      	ldrb	r3, [r3, #0]
 801936c:	b29b      	uxth	r3, r3
 801936e:	021b      	lsls	r3, r3, #8
 8019370:	b29b      	uxth	r3, r3
 8019372:	4313      	orrs	r3, r2
 8019374:	b29a      	uxth	r2, r3
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 801937a:	68bb      	ldr	r3, [r7, #8]
 801937c:	330c      	adds	r3, #12
 801937e:	781b      	ldrb	r3, [r3, #0]
 8019380:	b29a      	uxth	r2, r3
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	330d      	adds	r3, #13
 8019386:	781b      	ldrb	r3, [r3, #0]
 8019388:	b29b      	uxth	r3, r3
 801938a:	021b      	lsls	r3, r3, #8
 801938c:	b29b      	uxth	r3, r3
 801938e:	4313      	orrs	r3, r2
 8019390:	b29a      	uxth	r2, r3
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8019396:	68bb      	ldr	r3, [r7, #8]
 8019398:	7b9a      	ldrb	r2, [r3, #14]
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 801939e:	68bb      	ldr	r3, [r7, #8]
 80193a0:	7bda      	ldrb	r2, [r3, #15]
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80193a6:	68bb      	ldr	r3, [r7, #8]
 80193a8:	7c1a      	ldrb	r2, [r3, #16]
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80193ae:	68bb      	ldr	r3, [r7, #8]
 80193b0:	7c5a      	ldrb	r2, [r3, #17]
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	745a      	strb	r2, [r3, #17]
  }
}
 80193b6:	bf00      	nop
 80193b8:	3714      	adds	r7, #20
 80193ba:	46bd      	mov	sp, r7
 80193bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c0:	4770      	bx	lr

080193c2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80193c2:	b580      	push	{r7, lr}
 80193c4:	b08a      	sub	sp, #40	; 0x28
 80193c6:	af00      	add	r7, sp, #0
 80193c8:	60f8      	str	r0, [r7, #12]
 80193ca:	60b9      	str	r1, [r7, #8]
 80193cc:	4613      	mov	r3, r2
 80193ce:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80193d0:	68bb      	ldr	r3, [r7, #8]
 80193d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80193d4:	2300      	movs	r3, #0
 80193d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80193da:	2300      	movs	r3, #0
 80193dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80193e0:	68bb      	ldr	r3, [r7, #8]
 80193e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80193e4:	68bb      	ldr	r3, [r7, #8]
 80193e6:	781a      	ldrb	r2, [r3, #0]
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80193ec:	68bb      	ldr	r3, [r7, #8]
 80193ee:	785a      	ldrb	r2, [r3, #1]
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80193f4:	68bb      	ldr	r3, [r7, #8]
 80193f6:	3302      	adds	r3, #2
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	b29a      	uxth	r2, r3
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	3303      	adds	r3, #3
 8019400:	781b      	ldrb	r3, [r3, #0]
 8019402:	b29b      	uxth	r3, r3
 8019404:	021b      	lsls	r3, r3, #8
 8019406:	b29b      	uxth	r3, r3
 8019408:	4313      	orrs	r3, r2
 801940a:	b29a      	uxth	r2, r3
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8019410:	68bb      	ldr	r3, [r7, #8]
 8019412:	791a      	ldrb	r2, [r3, #4]
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8019418:	68bb      	ldr	r3, [r7, #8]
 801941a:	795a      	ldrb	r2, [r3, #5]
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	799a      	ldrb	r2, [r3, #6]
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8019428:	68bb      	ldr	r3, [r7, #8]
 801942a:	79da      	ldrb	r2, [r3, #7]
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8019430:	68bb      	ldr	r3, [r7, #8]
 8019432:	7a1a      	ldrb	r2, [r3, #8]
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8019438:	88fb      	ldrh	r3, [r7, #6]
 801943a:	2b09      	cmp	r3, #9
 801943c:	d95f      	bls.n	80194fe <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 801943e:	2309      	movs	r3, #9
 8019440:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8019442:	2300      	movs	r3, #0
 8019444:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8019446:	e051      	b.n	80194ec <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8019448:	f107 0316 	add.w	r3, r7, #22
 801944c:	4619      	mov	r1, r3
 801944e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019450:	f000 f8e8 	bl	8019624 <USBH_GetNextDesc>
 8019454:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8019456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019458:	785b      	ldrb	r3, [r3, #1]
 801945a:	2b04      	cmp	r3, #4
 801945c:	d146      	bne.n	80194ec <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801945e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019462:	221a      	movs	r2, #26
 8019464:	fb02 f303 	mul.w	r3, r2, r3
 8019468:	3308      	adds	r3, #8
 801946a:	68fa      	ldr	r2, [r7, #12]
 801946c:	4413      	add	r3, r2
 801946e:	3302      	adds	r3, #2
 8019470:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8019472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019474:	69f8      	ldr	r0, [r7, #28]
 8019476:	f000 f846 	bl	8019506 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801947a:	2300      	movs	r3, #0
 801947c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8019480:	2300      	movs	r3, #0
 8019482:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8019484:	e022      	b.n	80194cc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8019486:	f107 0316 	add.w	r3, r7, #22
 801948a:	4619      	mov	r1, r3
 801948c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801948e:	f000 f8c9 	bl	8019624 <USBH_GetNextDesc>
 8019492:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8019494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019496:	785b      	ldrb	r3, [r3, #1]
 8019498:	2b05      	cmp	r3, #5
 801949a:	d117      	bne.n	80194cc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801949c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80194a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80194a4:	3201      	adds	r2, #1
 80194a6:	00d2      	lsls	r2, r2, #3
 80194a8:	211a      	movs	r1, #26
 80194aa:	fb01 f303 	mul.w	r3, r1, r3
 80194ae:	4413      	add	r3, r2
 80194b0:	3308      	adds	r3, #8
 80194b2:	68fa      	ldr	r2, [r7, #12]
 80194b4:	4413      	add	r3, r2
 80194b6:	3304      	adds	r3, #4
 80194b8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80194ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80194bc:	69b8      	ldr	r0, [r7, #24]
 80194be:	f000 f851 	bl	8019564 <USBH_ParseEPDesc>
            ep_ix++;
 80194c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80194c6:	3301      	adds	r3, #1
 80194c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80194cc:	69fb      	ldr	r3, [r7, #28]
 80194ce:	791b      	ldrb	r3, [r3, #4]
 80194d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80194d4:	429a      	cmp	r2, r3
 80194d6:	d204      	bcs.n	80194e2 <USBH_ParseCfgDesc+0x120>
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	885a      	ldrh	r2, [r3, #2]
 80194dc:	8afb      	ldrh	r3, [r7, #22]
 80194de:	429a      	cmp	r2, r3
 80194e0:	d8d1      	bhi.n	8019486 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80194e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80194e6:	3301      	adds	r3, #1
 80194e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80194ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80194f0:	2b01      	cmp	r3, #1
 80194f2:	d804      	bhi.n	80194fe <USBH_ParseCfgDesc+0x13c>
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	885a      	ldrh	r2, [r3, #2]
 80194f8:	8afb      	ldrh	r3, [r7, #22]
 80194fa:	429a      	cmp	r2, r3
 80194fc:	d8a4      	bhi.n	8019448 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80194fe:	bf00      	nop
 8019500:	3728      	adds	r7, #40	; 0x28
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}

08019506 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8019506:	b480      	push	{r7}
 8019508:	b083      	sub	sp, #12
 801950a:	af00      	add	r7, sp, #0
 801950c:	6078      	str	r0, [r7, #4]
 801950e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8019510:	683b      	ldr	r3, [r7, #0]
 8019512:	781a      	ldrb	r2, [r3, #0]
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8019518:	683b      	ldr	r3, [r7, #0]
 801951a:	785a      	ldrb	r2, [r3, #1]
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8019520:	683b      	ldr	r3, [r7, #0]
 8019522:	789a      	ldrb	r2, [r3, #2]
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8019528:	683b      	ldr	r3, [r7, #0]
 801952a:	78da      	ldrb	r2, [r3, #3]
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	791a      	ldrb	r2, [r3, #4]
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	795a      	ldrb	r2, [r3, #5]
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	799a      	ldrb	r2, [r3, #6]
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	79da      	ldrb	r2, [r3, #7]
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	7a1a      	ldrb	r2, [r3, #8]
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	721a      	strb	r2, [r3, #8]
}
 8019558:	bf00      	nop
 801955a:	370c      	adds	r7, #12
 801955c:	46bd      	mov	sp, r7
 801955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019562:	4770      	bx	lr

08019564 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8019564:	b480      	push	{r7}
 8019566:	b083      	sub	sp, #12
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801956e:	683b      	ldr	r3, [r7, #0]
 8019570:	781a      	ldrb	r2, [r3, #0]
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	785a      	ldrb	r2, [r3, #1]
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801957e:	683b      	ldr	r3, [r7, #0]
 8019580:	789a      	ldrb	r2, [r3, #2]
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8019586:	683b      	ldr	r3, [r7, #0]
 8019588:	78da      	ldrb	r2, [r3, #3]
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	3304      	adds	r3, #4
 8019592:	781b      	ldrb	r3, [r3, #0]
 8019594:	b29a      	uxth	r2, r3
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	3305      	adds	r3, #5
 801959a:	781b      	ldrb	r3, [r3, #0]
 801959c:	b29b      	uxth	r3, r3
 801959e:	021b      	lsls	r3, r3, #8
 80195a0:	b29b      	uxth	r3, r3
 80195a2:	4313      	orrs	r3, r2
 80195a4:	b29a      	uxth	r2, r3
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	799a      	ldrb	r2, [r3, #6]
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	719a      	strb	r2, [r3, #6]
}
 80195b2:	bf00      	nop
 80195b4:	370c      	adds	r7, #12
 80195b6:	46bd      	mov	sp, r7
 80195b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195bc:	4770      	bx	lr

080195be <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80195be:	b480      	push	{r7}
 80195c0:	b087      	sub	sp, #28
 80195c2:	af00      	add	r7, sp, #0
 80195c4:	60f8      	str	r0, [r7, #12]
 80195c6:	60b9      	str	r1, [r7, #8]
 80195c8:	4613      	mov	r3, r2
 80195ca:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	3301      	adds	r3, #1
 80195d0:	781b      	ldrb	r3, [r3, #0]
 80195d2:	2b03      	cmp	r3, #3
 80195d4:	d120      	bne.n	8019618 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	781b      	ldrb	r3, [r3, #0]
 80195da:	1e9a      	subs	r2, r3, #2
 80195dc:	88fb      	ldrh	r3, [r7, #6]
 80195de:	4293      	cmp	r3, r2
 80195e0:	bf28      	it	cs
 80195e2:	4613      	movcs	r3, r2
 80195e4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	3302      	adds	r3, #2
 80195ea:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80195ec:	2300      	movs	r3, #0
 80195ee:	82fb      	strh	r3, [r7, #22]
 80195f0:	e00b      	b.n	801960a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80195f2:	8afb      	ldrh	r3, [r7, #22]
 80195f4:	68fa      	ldr	r2, [r7, #12]
 80195f6:	4413      	add	r3, r2
 80195f8:	781a      	ldrb	r2, [r3, #0]
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80195fe:	68bb      	ldr	r3, [r7, #8]
 8019600:	3301      	adds	r3, #1
 8019602:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8019604:	8afb      	ldrh	r3, [r7, #22]
 8019606:	3302      	adds	r3, #2
 8019608:	82fb      	strh	r3, [r7, #22]
 801960a:	8afa      	ldrh	r2, [r7, #22]
 801960c:	8abb      	ldrh	r3, [r7, #20]
 801960e:	429a      	cmp	r2, r3
 8019610:	d3ef      	bcc.n	80195f2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8019612:	68bb      	ldr	r3, [r7, #8]
 8019614:	2200      	movs	r2, #0
 8019616:	701a      	strb	r2, [r3, #0]
  }
}
 8019618:	bf00      	nop
 801961a:	371c      	adds	r7, #28
 801961c:	46bd      	mov	sp, r7
 801961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019622:	4770      	bx	lr

08019624 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8019624:	b480      	push	{r7}
 8019626:	b085      	sub	sp, #20
 8019628:	af00      	add	r7, sp, #0
 801962a:	6078      	str	r0, [r7, #4]
 801962c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801962e:	683b      	ldr	r3, [r7, #0]
 8019630:	881a      	ldrh	r2, [r3, #0]
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	781b      	ldrb	r3, [r3, #0]
 8019636:	b29b      	uxth	r3, r3
 8019638:	4413      	add	r3, r2
 801963a:	b29a      	uxth	r2, r3
 801963c:	683b      	ldr	r3, [r7, #0]
 801963e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	781b      	ldrb	r3, [r3, #0]
 8019644:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	4413      	add	r3, r2
 801964a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801964c:	68fb      	ldr	r3, [r7, #12]
}
 801964e:	4618      	mov	r0, r3
 8019650:	3714      	adds	r7, #20
 8019652:	46bd      	mov	sp, r7
 8019654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019658:	4770      	bx	lr

0801965a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801965a:	b580      	push	{r7, lr}
 801965c:	b086      	sub	sp, #24
 801965e:	af00      	add	r7, sp, #0
 8019660:	60f8      	str	r0, [r7, #12]
 8019662:	60b9      	str	r1, [r7, #8]
 8019664:	4613      	mov	r3, r2
 8019666:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8019668:	2301      	movs	r3, #1
 801966a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	789b      	ldrb	r3, [r3, #2]
 8019670:	2b01      	cmp	r3, #1
 8019672:	d002      	beq.n	801967a <USBH_CtlReq+0x20>
 8019674:	2b02      	cmp	r3, #2
 8019676:	d00f      	beq.n	8019698 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8019678:	e027      	b.n	80196ca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	68ba      	ldr	r2, [r7, #8]
 801967e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	88fa      	ldrh	r2, [r7, #6]
 8019684:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	2201      	movs	r2, #1
 801968a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	2202      	movs	r2, #2
 8019690:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8019692:	2301      	movs	r3, #1
 8019694:	75fb      	strb	r3, [r7, #23]
      break;
 8019696:	e018      	b.n	80196ca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8019698:	68f8      	ldr	r0, [r7, #12]
 801969a:	f000 f81b 	bl	80196d4 <USBH_HandleControl>
 801969e:	4603      	mov	r3, r0
 80196a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80196a2:	7dfb      	ldrb	r3, [r7, #23]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d002      	beq.n	80196ae <USBH_CtlReq+0x54>
 80196a8:	7dfb      	ldrb	r3, [r7, #23]
 80196aa:	2b03      	cmp	r3, #3
 80196ac:	d106      	bne.n	80196bc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	2201      	movs	r2, #1
 80196b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	2200      	movs	r2, #0
 80196b8:	761a      	strb	r2, [r3, #24]
      break;
 80196ba:	e005      	b.n	80196c8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80196bc:	7dfb      	ldrb	r3, [r7, #23]
 80196be:	2b02      	cmp	r3, #2
 80196c0:	d102      	bne.n	80196c8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	2201      	movs	r2, #1
 80196c6:	709a      	strb	r2, [r3, #2]
      break;
 80196c8:	bf00      	nop
  }
  return status;
 80196ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80196cc:	4618      	mov	r0, r3
 80196ce:	3718      	adds	r7, #24
 80196d0:	46bd      	mov	sp, r7
 80196d2:	bd80      	pop	{r7, pc}

080196d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b086      	sub	sp, #24
 80196d8:	af02      	add	r7, sp, #8
 80196da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80196dc:	2301      	movs	r3, #1
 80196de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80196e0:	2300      	movs	r3, #0
 80196e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	7e1b      	ldrb	r3, [r3, #24]
 80196e8:	3b01      	subs	r3, #1
 80196ea:	2b0a      	cmp	r3, #10
 80196ec:	f200 8158 	bhi.w	80199a0 <USBH_HandleControl+0x2cc>
 80196f0:	a201      	add	r2, pc, #4	; (adr r2, 80196f8 <USBH_HandleControl+0x24>)
 80196f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196f6:	bf00      	nop
 80196f8:	08019725 	.word	0x08019725
 80196fc:	0801973f 	.word	0x0801973f
 8019700:	080197a9 	.word	0x080197a9
 8019704:	080197cf 	.word	0x080197cf
 8019708:	08019807 	.word	0x08019807
 801970c:	08019833 	.word	0x08019833
 8019710:	08019885 	.word	0x08019885
 8019714:	080198a7 	.word	0x080198a7
 8019718:	080198e3 	.word	0x080198e3
 801971c:	0801990b 	.word	0x0801990b
 8019720:	08019949 	.word	0x08019949
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	f103 0110 	add.w	r1, r3, #16
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	795b      	ldrb	r3, [r3, #5]
 801972e:	461a      	mov	r2, r3
 8019730:	6878      	ldr	r0, [r7, #4]
 8019732:	f000 f945 	bl	80199c0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	2202      	movs	r2, #2
 801973a:	761a      	strb	r2, [r3, #24]
      break;
 801973c:	e13b      	b.n	80199b6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	795b      	ldrb	r3, [r3, #5]
 8019742:	4619      	mov	r1, r3
 8019744:	6878      	ldr	r0, [r7, #4]
 8019746:	f004 fb5f 	bl	801de08 <USBH_LL_GetURBState>
 801974a:	4603      	mov	r3, r0
 801974c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801974e:	7bbb      	ldrb	r3, [r7, #14]
 8019750:	2b01      	cmp	r3, #1
 8019752:	d11e      	bne.n	8019792 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	7c1b      	ldrb	r3, [r3, #16]
 8019758:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801975c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	8adb      	ldrh	r3, [r3, #22]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d00a      	beq.n	801977c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8019766:	7b7b      	ldrb	r3, [r7, #13]
 8019768:	2b80      	cmp	r3, #128	; 0x80
 801976a:	d103      	bne.n	8019774 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	2203      	movs	r2, #3
 8019770:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8019772:	e117      	b.n	80199a4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	2205      	movs	r2, #5
 8019778:	761a      	strb	r2, [r3, #24]
      break;
 801977a:	e113      	b.n	80199a4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 801977c:	7b7b      	ldrb	r3, [r7, #13]
 801977e:	2b80      	cmp	r3, #128	; 0x80
 8019780:	d103      	bne.n	801978a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	2209      	movs	r2, #9
 8019786:	761a      	strb	r2, [r3, #24]
      break;
 8019788:	e10c      	b.n	80199a4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	2207      	movs	r2, #7
 801978e:	761a      	strb	r2, [r3, #24]
      break;
 8019790:	e108      	b.n	80199a4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8019792:	7bbb      	ldrb	r3, [r7, #14]
 8019794:	2b04      	cmp	r3, #4
 8019796:	d003      	beq.n	80197a0 <USBH_HandleControl+0xcc>
 8019798:	7bbb      	ldrb	r3, [r7, #14]
 801979a:	2b02      	cmp	r3, #2
 801979c:	f040 8102 	bne.w	80199a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	220b      	movs	r2, #11
 80197a4:	761a      	strb	r2, [r3, #24]
      break;
 80197a6:	e0fd      	b.n	80199a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80197ae:	b29a      	uxth	r2, r3
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	6899      	ldr	r1, [r3, #8]
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	899a      	ldrh	r2, [r3, #12]
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	791b      	ldrb	r3, [r3, #4]
 80197c0:	6878      	ldr	r0, [r7, #4]
 80197c2:	f000 f93c 	bl	8019a3e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	2204      	movs	r2, #4
 80197ca:	761a      	strb	r2, [r3, #24]
      break;
 80197cc:	e0f3      	b.n	80199b6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	791b      	ldrb	r3, [r3, #4]
 80197d2:	4619      	mov	r1, r3
 80197d4:	6878      	ldr	r0, [r7, #4]
 80197d6:	f004 fb17 	bl	801de08 <USBH_LL_GetURBState>
 80197da:	4603      	mov	r3, r0
 80197dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80197de:	7bbb      	ldrb	r3, [r7, #14]
 80197e0:	2b01      	cmp	r3, #1
 80197e2:	d102      	bne.n	80197ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	2209      	movs	r2, #9
 80197e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80197ea:	7bbb      	ldrb	r3, [r7, #14]
 80197ec:	2b05      	cmp	r3, #5
 80197ee:	d102      	bne.n	80197f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80197f0:	2303      	movs	r3, #3
 80197f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80197f4:	e0d8      	b.n	80199a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80197f6:	7bbb      	ldrb	r3, [r7, #14]
 80197f8:	2b04      	cmp	r3, #4
 80197fa:	f040 80d5 	bne.w	80199a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	220b      	movs	r2, #11
 8019802:	761a      	strb	r2, [r3, #24]
      break;
 8019804:	e0d0      	b.n	80199a8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	6899      	ldr	r1, [r3, #8]
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	899a      	ldrh	r2, [r3, #12]
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	7958      	ldrb	r0, [r3, #5]
 8019812:	2301      	movs	r3, #1
 8019814:	9300      	str	r3, [sp, #0]
 8019816:	4603      	mov	r3, r0
 8019818:	6878      	ldr	r0, [r7, #4]
 801981a:	f000 f8eb 	bl	80199f4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019824:	b29a      	uxth	r2, r3
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	2206      	movs	r2, #6
 801982e:	761a      	strb	r2, [r3, #24]
      break;
 8019830:	e0c1      	b.n	80199b6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	795b      	ldrb	r3, [r3, #5]
 8019836:	4619      	mov	r1, r3
 8019838:	6878      	ldr	r0, [r7, #4]
 801983a:	f004 fae5 	bl	801de08 <USBH_LL_GetURBState>
 801983e:	4603      	mov	r3, r0
 8019840:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8019842:	7bbb      	ldrb	r3, [r7, #14]
 8019844:	2b01      	cmp	r3, #1
 8019846:	d103      	bne.n	8019850 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	2207      	movs	r2, #7
 801984c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801984e:	e0ad      	b.n	80199ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8019850:	7bbb      	ldrb	r3, [r7, #14]
 8019852:	2b05      	cmp	r3, #5
 8019854:	d105      	bne.n	8019862 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	220c      	movs	r2, #12
 801985a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801985c:	2303      	movs	r3, #3
 801985e:	73fb      	strb	r3, [r7, #15]
      break;
 8019860:	e0a4      	b.n	80199ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8019862:	7bbb      	ldrb	r3, [r7, #14]
 8019864:	2b02      	cmp	r3, #2
 8019866:	d103      	bne.n	8019870 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	2205      	movs	r2, #5
 801986c:	761a      	strb	r2, [r3, #24]
      break;
 801986e:	e09d      	b.n	80199ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8019870:	7bbb      	ldrb	r3, [r7, #14]
 8019872:	2b04      	cmp	r3, #4
 8019874:	f040 809a 	bne.w	80199ac <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	220b      	movs	r2, #11
 801987c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801987e:	2302      	movs	r3, #2
 8019880:	73fb      	strb	r3, [r7, #15]
      break;
 8019882:	e093      	b.n	80199ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	791b      	ldrb	r3, [r3, #4]
 8019888:	2200      	movs	r2, #0
 801988a:	2100      	movs	r1, #0
 801988c:	6878      	ldr	r0, [r7, #4]
 801988e:	f000 f8d6 	bl	8019a3e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019898:	b29a      	uxth	r2, r3
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	2208      	movs	r2, #8
 80198a2:	761a      	strb	r2, [r3, #24]

      break;
 80198a4:	e087      	b.n	80199b6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	791b      	ldrb	r3, [r3, #4]
 80198aa:	4619      	mov	r1, r3
 80198ac:	6878      	ldr	r0, [r7, #4]
 80198ae:	f004 faab 	bl	801de08 <USBH_LL_GetURBState>
 80198b2:	4603      	mov	r3, r0
 80198b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80198b6:	7bbb      	ldrb	r3, [r7, #14]
 80198b8:	2b01      	cmp	r3, #1
 80198ba:	d105      	bne.n	80198c8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	220d      	movs	r2, #13
 80198c0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80198c2:	2300      	movs	r3, #0
 80198c4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80198c6:	e073      	b.n	80199b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80198c8:	7bbb      	ldrb	r3, [r7, #14]
 80198ca:	2b04      	cmp	r3, #4
 80198cc:	d103      	bne.n	80198d6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	220b      	movs	r2, #11
 80198d2:	761a      	strb	r2, [r3, #24]
      break;
 80198d4:	e06c      	b.n	80199b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80198d6:	7bbb      	ldrb	r3, [r7, #14]
 80198d8:	2b05      	cmp	r3, #5
 80198da:	d169      	bne.n	80199b0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80198dc:	2303      	movs	r3, #3
 80198de:	73fb      	strb	r3, [r7, #15]
      break;
 80198e0:	e066      	b.n	80199b0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	795a      	ldrb	r2, [r3, #5]
 80198e6:	2301      	movs	r3, #1
 80198e8:	9300      	str	r3, [sp, #0]
 80198ea:	4613      	mov	r3, r2
 80198ec:	2200      	movs	r2, #0
 80198ee:	2100      	movs	r1, #0
 80198f0:	6878      	ldr	r0, [r7, #4]
 80198f2:	f000 f87f 	bl	80199f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80198fc:	b29a      	uxth	r2, r3
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	220a      	movs	r2, #10
 8019906:	761a      	strb	r2, [r3, #24]
      break;
 8019908:	e055      	b.n	80199b6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	795b      	ldrb	r3, [r3, #5]
 801990e:	4619      	mov	r1, r3
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	f004 fa79 	bl	801de08 <USBH_LL_GetURBState>
 8019916:	4603      	mov	r3, r0
 8019918:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801991a:	7bbb      	ldrb	r3, [r7, #14]
 801991c:	2b01      	cmp	r3, #1
 801991e:	d105      	bne.n	801992c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8019920:	2300      	movs	r3, #0
 8019922:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	220d      	movs	r2, #13
 8019928:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801992a:	e043      	b.n	80199b4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 801992c:	7bbb      	ldrb	r3, [r7, #14]
 801992e:	2b02      	cmp	r3, #2
 8019930:	d103      	bne.n	801993a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	2209      	movs	r2, #9
 8019936:	761a      	strb	r2, [r3, #24]
      break;
 8019938:	e03c      	b.n	80199b4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 801993a:	7bbb      	ldrb	r3, [r7, #14]
 801993c:	2b04      	cmp	r3, #4
 801993e:	d139      	bne.n	80199b4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	220b      	movs	r2, #11
 8019944:	761a      	strb	r2, [r3, #24]
      break;
 8019946:	e035      	b.n	80199b4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	7e5b      	ldrb	r3, [r3, #25]
 801994c:	3301      	adds	r3, #1
 801994e:	b2da      	uxtb	r2, r3
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	765a      	strb	r2, [r3, #25]
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	7e5b      	ldrb	r3, [r3, #25]
 8019958:	2b02      	cmp	r3, #2
 801995a:	d806      	bhi.n	801996a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2201      	movs	r2, #1
 8019960:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	2201      	movs	r2, #1
 8019966:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8019968:	e025      	b.n	80199b6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019970:	2106      	movs	r1, #6
 8019972:	6878      	ldr	r0, [r7, #4]
 8019974:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	2200      	movs	r2, #0
 801997a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	795b      	ldrb	r3, [r3, #5]
 8019980:	4619      	mov	r1, r3
 8019982:	6878      	ldr	r0, [r7, #4]
 8019984:	f000 f90c 	bl	8019ba0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	791b      	ldrb	r3, [r3, #4]
 801998c:	4619      	mov	r1, r3
 801998e:	6878      	ldr	r0, [r7, #4]
 8019990:	f000 f906 	bl	8019ba0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	2200      	movs	r2, #0
 8019998:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801999a:	2302      	movs	r3, #2
 801999c:	73fb      	strb	r3, [r7, #15]
      break;
 801999e:	e00a      	b.n	80199b6 <USBH_HandleControl+0x2e2>

    default:
      break;
 80199a0:	bf00      	nop
 80199a2:	e008      	b.n	80199b6 <USBH_HandleControl+0x2e2>
      break;
 80199a4:	bf00      	nop
 80199a6:	e006      	b.n	80199b6 <USBH_HandleControl+0x2e2>
      break;
 80199a8:	bf00      	nop
 80199aa:	e004      	b.n	80199b6 <USBH_HandleControl+0x2e2>
      break;
 80199ac:	bf00      	nop
 80199ae:	e002      	b.n	80199b6 <USBH_HandleControl+0x2e2>
      break;
 80199b0:	bf00      	nop
 80199b2:	e000      	b.n	80199b6 <USBH_HandleControl+0x2e2>
      break;
 80199b4:	bf00      	nop
  }

  return status;
 80199b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80199b8:	4618      	mov	r0, r3
 80199ba:	3710      	adds	r7, #16
 80199bc:	46bd      	mov	sp, r7
 80199be:	bd80      	pop	{r7, pc}

080199c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b088      	sub	sp, #32
 80199c4:	af04      	add	r7, sp, #16
 80199c6:	60f8      	str	r0, [r7, #12]
 80199c8:	60b9      	str	r1, [r7, #8]
 80199ca:	4613      	mov	r3, r2
 80199cc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80199ce:	79f9      	ldrb	r1, [r7, #7]
 80199d0:	2300      	movs	r3, #0
 80199d2:	9303      	str	r3, [sp, #12]
 80199d4:	2308      	movs	r3, #8
 80199d6:	9302      	str	r3, [sp, #8]
 80199d8:	68bb      	ldr	r3, [r7, #8]
 80199da:	9301      	str	r3, [sp, #4]
 80199dc:	2300      	movs	r3, #0
 80199de:	9300      	str	r3, [sp, #0]
 80199e0:	2300      	movs	r3, #0
 80199e2:	2200      	movs	r2, #0
 80199e4:	68f8      	ldr	r0, [r7, #12]
 80199e6:	f004 f9de 	bl	801dda6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80199ea:	2300      	movs	r3, #0
}
 80199ec:	4618      	mov	r0, r3
 80199ee:	3710      	adds	r7, #16
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bd80      	pop	{r7, pc}

080199f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80199f4:	b580      	push	{r7, lr}
 80199f6:	b088      	sub	sp, #32
 80199f8:	af04      	add	r7, sp, #16
 80199fa:	60f8      	str	r0, [r7, #12]
 80199fc:	60b9      	str	r1, [r7, #8]
 80199fe:	4611      	mov	r1, r2
 8019a00:	461a      	mov	r2, r3
 8019a02:	460b      	mov	r3, r1
 8019a04:	80fb      	strh	r3, [r7, #6]
 8019a06:	4613      	mov	r3, r2
 8019a08:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d001      	beq.n	8019a18 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8019a14:	2300      	movs	r3, #0
 8019a16:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8019a18:	7979      	ldrb	r1, [r7, #5]
 8019a1a:	7e3b      	ldrb	r3, [r7, #24]
 8019a1c:	9303      	str	r3, [sp, #12]
 8019a1e:	88fb      	ldrh	r3, [r7, #6]
 8019a20:	9302      	str	r3, [sp, #8]
 8019a22:	68bb      	ldr	r3, [r7, #8]
 8019a24:	9301      	str	r3, [sp, #4]
 8019a26:	2301      	movs	r3, #1
 8019a28:	9300      	str	r3, [sp, #0]
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	68f8      	ldr	r0, [r7, #12]
 8019a30:	f004 f9b9 	bl	801dda6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8019a34:	2300      	movs	r3, #0
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	3710      	adds	r7, #16
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	bd80      	pop	{r7, pc}

08019a3e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8019a3e:	b580      	push	{r7, lr}
 8019a40:	b088      	sub	sp, #32
 8019a42:	af04      	add	r7, sp, #16
 8019a44:	60f8      	str	r0, [r7, #12]
 8019a46:	60b9      	str	r1, [r7, #8]
 8019a48:	4611      	mov	r1, r2
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	460b      	mov	r3, r1
 8019a4e:	80fb      	strh	r3, [r7, #6]
 8019a50:	4613      	mov	r3, r2
 8019a52:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8019a54:	7979      	ldrb	r1, [r7, #5]
 8019a56:	2300      	movs	r3, #0
 8019a58:	9303      	str	r3, [sp, #12]
 8019a5a:	88fb      	ldrh	r3, [r7, #6]
 8019a5c:	9302      	str	r3, [sp, #8]
 8019a5e:	68bb      	ldr	r3, [r7, #8]
 8019a60:	9301      	str	r3, [sp, #4]
 8019a62:	2301      	movs	r3, #1
 8019a64:	9300      	str	r3, [sp, #0]
 8019a66:	2300      	movs	r3, #0
 8019a68:	2201      	movs	r2, #1
 8019a6a:	68f8      	ldr	r0, [r7, #12]
 8019a6c:	f004 f99b 	bl	801dda6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8019a70:	2300      	movs	r3, #0

}
 8019a72:	4618      	mov	r0, r3
 8019a74:	3710      	adds	r7, #16
 8019a76:	46bd      	mov	sp, r7
 8019a78:	bd80      	pop	{r7, pc}

08019a7a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8019a7a:	b580      	push	{r7, lr}
 8019a7c:	b088      	sub	sp, #32
 8019a7e:	af04      	add	r7, sp, #16
 8019a80:	60f8      	str	r0, [r7, #12]
 8019a82:	60b9      	str	r1, [r7, #8]
 8019a84:	4611      	mov	r1, r2
 8019a86:	461a      	mov	r2, r3
 8019a88:	460b      	mov	r3, r1
 8019a8a:	80fb      	strh	r3, [r7, #6]
 8019a8c:	4613      	mov	r3, r2
 8019a8e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d001      	beq.n	8019a9e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8019a9a:	2300      	movs	r3, #0
 8019a9c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8019a9e:	7979      	ldrb	r1, [r7, #5]
 8019aa0:	7e3b      	ldrb	r3, [r7, #24]
 8019aa2:	9303      	str	r3, [sp, #12]
 8019aa4:	88fb      	ldrh	r3, [r7, #6]
 8019aa6:	9302      	str	r3, [sp, #8]
 8019aa8:	68bb      	ldr	r3, [r7, #8]
 8019aaa:	9301      	str	r3, [sp, #4]
 8019aac:	2301      	movs	r3, #1
 8019aae:	9300      	str	r3, [sp, #0]
 8019ab0:	2302      	movs	r3, #2
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	68f8      	ldr	r0, [r7, #12]
 8019ab6:	f004 f976 	bl	801dda6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8019aba:	2300      	movs	r3, #0
}
 8019abc:	4618      	mov	r0, r3
 8019abe:	3710      	adds	r7, #16
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	bd80      	pop	{r7, pc}

08019ac4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b088      	sub	sp, #32
 8019ac8:	af04      	add	r7, sp, #16
 8019aca:	60f8      	str	r0, [r7, #12]
 8019acc:	60b9      	str	r1, [r7, #8]
 8019ace:	4611      	mov	r1, r2
 8019ad0:	461a      	mov	r2, r3
 8019ad2:	460b      	mov	r3, r1
 8019ad4:	80fb      	strh	r3, [r7, #6]
 8019ad6:	4613      	mov	r3, r2
 8019ad8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8019ada:	7979      	ldrb	r1, [r7, #5]
 8019adc:	2300      	movs	r3, #0
 8019ade:	9303      	str	r3, [sp, #12]
 8019ae0:	88fb      	ldrh	r3, [r7, #6]
 8019ae2:	9302      	str	r3, [sp, #8]
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	9301      	str	r3, [sp, #4]
 8019ae8:	2301      	movs	r3, #1
 8019aea:	9300      	str	r3, [sp, #0]
 8019aec:	2302      	movs	r3, #2
 8019aee:	2201      	movs	r2, #1
 8019af0:	68f8      	ldr	r0, [r7, #12]
 8019af2:	f004 f958 	bl	801dda6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8019af6:	2300      	movs	r3, #0
}
 8019af8:	4618      	mov	r0, r3
 8019afa:	3710      	adds	r7, #16
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}

08019b00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b086      	sub	sp, #24
 8019b04:	af04      	add	r7, sp, #16
 8019b06:	6078      	str	r0, [r7, #4]
 8019b08:	4608      	mov	r0, r1
 8019b0a:	4611      	mov	r1, r2
 8019b0c:	461a      	mov	r2, r3
 8019b0e:	4603      	mov	r3, r0
 8019b10:	70fb      	strb	r3, [r7, #3]
 8019b12:	460b      	mov	r3, r1
 8019b14:	70bb      	strb	r3, [r7, #2]
 8019b16:	4613      	mov	r3, r2
 8019b18:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8019b1a:	7878      	ldrb	r0, [r7, #1]
 8019b1c:	78ba      	ldrb	r2, [r7, #2]
 8019b1e:	78f9      	ldrb	r1, [r7, #3]
 8019b20:	8b3b      	ldrh	r3, [r7, #24]
 8019b22:	9302      	str	r3, [sp, #8]
 8019b24:	7d3b      	ldrb	r3, [r7, #20]
 8019b26:	9301      	str	r3, [sp, #4]
 8019b28:	7c3b      	ldrb	r3, [r7, #16]
 8019b2a:	9300      	str	r3, [sp, #0]
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	6878      	ldr	r0, [r7, #4]
 8019b30:	f004 f8eb 	bl	801dd0a <USBH_LL_OpenPipe>

  return USBH_OK;
 8019b34:	2300      	movs	r3, #0
}
 8019b36:	4618      	mov	r0, r3
 8019b38:	3708      	adds	r7, #8
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	bd80      	pop	{r7, pc}

08019b3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8019b3e:	b580      	push	{r7, lr}
 8019b40:	b082      	sub	sp, #8
 8019b42:	af00      	add	r7, sp, #0
 8019b44:	6078      	str	r0, [r7, #4]
 8019b46:	460b      	mov	r3, r1
 8019b48:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8019b4a:	78fb      	ldrb	r3, [r7, #3]
 8019b4c:	4619      	mov	r1, r3
 8019b4e:	6878      	ldr	r0, [r7, #4]
 8019b50:	f004 f90a 	bl	801dd68 <USBH_LL_ClosePipe>

  return USBH_OK;
 8019b54:	2300      	movs	r3, #0
}
 8019b56:	4618      	mov	r0, r3
 8019b58:	3708      	adds	r7, #8
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}

08019b5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8019b5e:	b580      	push	{r7, lr}
 8019b60:	b084      	sub	sp, #16
 8019b62:	af00      	add	r7, sp, #0
 8019b64:	6078      	str	r0, [r7, #4]
 8019b66:	460b      	mov	r3, r1
 8019b68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	f000 f836 	bl	8019bdc <USBH_GetFreePipe>
 8019b70:	4603      	mov	r3, r0
 8019b72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8019b74:	89fb      	ldrh	r3, [r7, #14]
 8019b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b7a:	4293      	cmp	r3, r2
 8019b7c:	d00a      	beq.n	8019b94 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8019b7e:	78fa      	ldrb	r2, [r7, #3]
 8019b80:	89fb      	ldrh	r3, [r7, #14]
 8019b82:	f003 030f 	and.w	r3, r3, #15
 8019b86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019b8a:	6879      	ldr	r1, [r7, #4]
 8019b8c:	33e0      	adds	r3, #224	; 0xe0
 8019b8e:	009b      	lsls	r3, r3, #2
 8019b90:	440b      	add	r3, r1
 8019b92:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8019b94:	89fb      	ldrh	r3, [r7, #14]
 8019b96:	b2db      	uxtb	r3, r3
}
 8019b98:	4618      	mov	r0, r3
 8019b9a:	3710      	adds	r7, #16
 8019b9c:	46bd      	mov	sp, r7
 8019b9e:	bd80      	pop	{r7, pc}

08019ba0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8019ba0:	b480      	push	{r7}
 8019ba2:	b083      	sub	sp, #12
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	6078      	str	r0, [r7, #4]
 8019ba8:	460b      	mov	r3, r1
 8019baa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8019bac:	78fb      	ldrb	r3, [r7, #3]
 8019bae:	2b0a      	cmp	r3, #10
 8019bb0:	d80d      	bhi.n	8019bce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8019bb2:	78fb      	ldrb	r3, [r7, #3]
 8019bb4:	687a      	ldr	r2, [r7, #4]
 8019bb6:	33e0      	adds	r3, #224	; 0xe0
 8019bb8:	009b      	lsls	r3, r3, #2
 8019bba:	4413      	add	r3, r2
 8019bbc:	685a      	ldr	r2, [r3, #4]
 8019bbe:	78fb      	ldrb	r3, [r7, #3]
 8019bc0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8019bc4:	6879      	ldr	r1, [r7, #4]
 8019bc6:	33e0      	adds	r3, #224	; 0xe0
 8019bc8:	009b      	lsls	r3, r3, #2
 8019bca:	440b      	add	r3, r1
 8019bcc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8019bce:	2300      	movs	r3, #0
}
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	370c      	adds	r7, #12
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bda:	4770      	bx	lr

08019bdc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8019bdc:	b480      	push	{r7}
 8019bde:	b085      	sub	sp, #20
 8019be0:	af00      	add	r7, sp, #0
 8019be2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8019be4:	2300      	movs	r3, #0
 8019be6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8019be8:	2300      	movs	r3, #0
 8019bea:	73fb      	strb	r3, [r7, #15]
 8019bec:	e00f      	b.n	8019c0e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8019bee:	7bfb      	ldrb	r3, [r7, #15]
 8019bf0:	687a      	ldr	r2, [r7, #4]
 8019bf2:	33e0      	adds	r3, #224	; 0xe0
 8019bf4:	009b      	lsls	r3, r3, #2
 8019bf6:	4413      	add	r3, r2
 8019bf8:	685b      	ldr	r3, [r3, #4]
 8019bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d102      	bne.n	8019c08 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8019c02:	7bfb      	ldrb	r3, [r7, #15]
 8019c04:	b29b      	uxth	r3, r3
 8019c06:	e007      	b.n	8019c18 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8019c08:	7bfb      	ldrb	r3, [r7, #15]
 8019c0a:	3301      	adds	r3, #1
 8019c0c:	73fb      	strb	r3, [r7, #15]
 8019c0e:	7bfb      	ldrb	r3, [r7, #15]
 8019c10:	2b0a      	cmp	r3, #10
 8019c12:	d9ec      	bls.n	8019bee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8019c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3714      	adds	r7, #20
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c22:	4770      	bx	lr

08019c24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b084      	sub	sp, #16
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8019c2e:	79fb      	ldrb	r3, [r7, #7]
 8019c30:	4a08      	ldr	r2, [pc, #32]	; (8019c54 <disk_status+0x30>)
 8019c32:	009b      	lsls	r3, r3, #2
 8019c34:	4413      	add	r3, r2
 8019c36:	685b      	ldr	r3, [r3, #4]
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	79fa      	ldrb	r2, [r7, #7]
 8019c3c:	4905      	ldr	r1, [pc, #20]	; (8019c54 <disk_status+0x30>)
 8019c3e:	440a      	add	r2, r1
 8019c40:	7c12      	ldrb	r2, [r2, #16]
 8019c42:	4610      	mov	r0, r2
 8019c44:	4798      	blx	r3
 8019c46:	4603      	mov	r3, r0
 8019c48:	73fb      	strb	r3, [r7, #15]
  return stat;
 8019c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	3710      	adds	r7, #16
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bd80      	pop	{r7, pc}
 8019c54:	200009b8 	.word	0x200009b8

08019c58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b084      	sub	sp, #16
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	4603      	mov	r3, r0
 8019c60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8019c62:	2300      	movs	r3, #0
 8019c64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8019c66:	79fb      	ldrb	r3, [r7, #7]
 8019c68:	4a0d      	ldr	r2, [pc, #52]	; (8019ca0 <disk_initialize+0x48>)
 8019c6a:	5cd3      	ldrb	r3, [r2, r3]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d111      	bne.n	8019c94 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8019c70:	79fb      	ldrb	r3, [r7, #7]
 8019c72:	4a0b      	ldr	r2, [pc, #44]	; (8019ca0 <disk_initialize+0x48>)
 8019c74:	2101      	movs	r1, #1
 8019c76:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8019c78:	79fb      	ldrb	r3, [r7, #7]
 8019c7a:	4a09      	ldr	r2, [pc, #36]	; (8019ca0 <disk_initialize+0x48>)
 8019c7c:	009b      	lsls	r3, r3, #2
 8019c7e:	4413      	add	r3, r2
 8019c80:	685b      	ldr	r3, [r3, #4]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	79fa      	ldrb	r2, [r7, #7]
 8019c86:	4906      	ldr	r1, [pc, #24]	; (8019ca0 <disk_initialize+0x48>)
 8019c88:	440a      	add	r2, r1
 8019c8a:	7c12      	ldrb	r2, [r2, #16]
 8019c8c:	4610      	mov	r0, r2
 8019c8e:	4798      	blx	r3
 8019c90:	4603      	mov	r3, r0
 8019c92:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8019c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c96:	4618      	mov	r0, r3
 8019c98:	3710      	adds	r7, #16
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}
 8019c9e:	bf00      	nop
 8019ca0:	200009b8 	.word	0x200009b8

08019ca4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8019ca4:	b590      	push	{r4, r7, lr}
 8019ca6:	b087      	sub	sp, #28
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	60b9      	str	r1, [r7, #8]
 8019cac:	607a      	str	r2, [r7, #4]
 8019cae:	603b      	str	r3, [r7, #0]
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8019cb4:	7bfb      	ldrb	r3, [r7, #15]
 8019cb6:	4a0a      	ldr	r2, [pc, #40]	; (8019ce0 <disk_read+0x3c>)
 8019cb8:	009b      	lsls	r3, r3, #2
 8019cba:	4413      	add	r3, r2
 8019cbc:	685b      	ldr	r3, [r3, #4]
 8019cbe:	689c      	ldr	r4, [r3, #8]
 8019cc0:	7bfb      	ldrb	r3, [r7, #15]
 8019cc2:	4a07      	ldr	r2, [pc, #28]	; (8019ce0 <disk_read+0x3c>)
 8019cc4:	4413      	add	r3, r2
 8019cc6:	7c18      	ldrb	r0, [r3, #16]
 8019cc8:	683b      	ldr	r3, [r7, #0]
 8019cca:	687a      	ldr	r2, [r7, #4]
 8019ccc:	68b9      	ldr	r1, [r7, #8]
 8019cce:	47a0      	blx	r4
 8019cd0:	4603      	mov	r3, r0
 8019cd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8019cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	371c      	adds	r7, #28
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd90      	pop	{r4, r7, pc}
 8019cde:	bf00      	nop
 8019ce0:	200009b8 	.word	0x200009b8

08019ce4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8019ce4:	b590      	push	{r4, r7, lr}
 8019ce6:	b087      	sub	sp, #28
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	60b9      	str	r1, [r7, #8]
 8019cec:	607a      	str	r2, [r7, #4]
 8019cee:	603b      	str	r3, [r7, #0]
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8019cf4:	7bfb      	ldrb	r3, [r7, #15]
 8019cf6:	4a0a      	ldr	r2, [pc, #40]	; (8019d20 <disk_write+0x3c>)
 8019cf8:	009b      	lsls	r3, r3, #2
 8019cfa:	4413      	add	r3, r2
 8019cfc:	685b      	ldr	r3, [r3, #4]
 8019cfe:	68dc      	ldr	r4, [r3, #12]
 8019d00:	7bfb      	ldrb	r3, [r7, #15]
 8019d02:	4a07      	ldr	r2, [pc, #28]	; (8019d20 <disk_write+0x3c>)
 8019d04:	4413      	add	r3, r2
 8019d06:	7c18      	ldrb	r0, [r3, #16]
 8019d08:	683b      	ldr	r3, [r7, #0]
 8019d0a:	687a      	ldr	r2, [r7, #4]
 8019d0c:	68b9      	ldr	r1, [r7, #8]
 8019d0e:	47a0      	blx	r4
 8019d10:	4603      	mov	r3, r0
 8019d12:	75fb      	strb	r3, [r7, #23]
  return res;
 8019d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d16:	4618      	mov	r0, r3
 8019d18:	371c      	adds	r7, #28
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	bd90      	pop	{r4, r7, pc}
 8019d1e:	bf00      	nop
 8019d20:	200009b8 	.word	0x200009b8

08019d24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b084      	sub	sp, #16
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	603a      	str	r2, [r7, #0]
 8019d2e:	71fb      	strb	r3, [r7, #7]
 8019d30:	460b      	mov	r3, r1
 8019d32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8019d34:	79fb      	ldrb	r3, [r7, #7]
 8019d36:	4a09      	ldr	r2, [pc, #36]	; (8019d5c <disk_ioctl+0x38>)
 8019d38:	009b      	lsls	r3, r3, #2
 8019d3a:	4413      	add	r3, r2
 8019d3c:	685b      	ldr	r3, [r3, #4]
 8019d3e:	691b      	ldr	r3, [r3, #16]
 8019d40:	79fa      	ldrb	r2, [r7, #7]
 8019d42:	4906      	ldr	r1, [pc, #24]	; (8019d5c <disk_ioctl+0x38>)
 8019d44:	440a      	add	r2, r1
 8019d46:	7c10      	ldrb	r0, [r2, #16]
 8019d48:	79b9      	ldrb	r1, [r7, #6]
 8019d4a:	683a      	ldr	r2, [r7, #0]
 8019d4c:	4798      	blx	r3
 8019d4e:	4603      	mov	r3, r0
 8019d50:	73fb      	strb	r3, [r7, #15]
  return res;
 8019d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	3710      	adds	r7, #16
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}
 8019d5c:	200009b8 	.word	0x200009b8

08019d60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8019d60:	b480      	push	{r7}
 8019d62:	b085      	sub	sp, #20
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	3301      	adds	r3, #1
 8019d6c:	781b      	ldrb	r3, [r3, #0]
 8019d6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8019d70:	89fb      	ldrh	r3, [r7, #14]
 8019d72:	021b      	lsls	r3, r3, #8
 8019d74:	b21a      	sxth	r2, r3
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	781b      	ldrb	r3, [r3, #0]
 8019d7a:	b21b      	sxth	r3, r3
 8019d7c:	4313      	orrs	r3, r2
 8019d7e:	b21b      	sxth	r3, r3
 8019d80:	81fb      	strh	r3, [r7, #14]
	return rv;
 8019d82:	89fb      	ldrh	r3, [r7, #14]
}
 8019d84:	4618      	mov	r0, r3
 8019d86:	3714      	adds	r7, #20
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d8e:	4770      	bx	lr

08019d90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8019d90:	b480      	push	{r7}
 8019d92:	b085      	sub	sp, #20
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	3303      	adds	r3, #3
 8019d9c:	781b      	ldrb	r3, [r3, #0]
 8019d9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	021b      	lsls	r3, r3, #8
 8019da4:	687a      	ldr	r2, [r7, #4]
 8019da6:	3202      	adds	r2, #2
 8019da8:	7812      	ldrb	r2, [r2, #0]
 8019daa:	4313      	orrs	r3, r2
 8019dac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	021b      	lsls	r3, r3, #8
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	3201      	adds	r2, #1
 8019db6:	7812      	ldrb	r2, [r2, #0]
 8019db8:	4313      	orrs	r3, r2
 8019dba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	021b      	lsls	r3, r3, #8
 8019dc0:	687a      	ldr	r2, [r7, #4]
 8019dc2:	7812      	ldrb	r2, [r2, #0]
 8019dc4:	4313      	orrs	r3, r2
 8019dc6:	60fb      	str	r3, [r7, #12]
	return rv;
 8019dc8:	68fb      	ldr	r3, [r7, #12]
}
 8019dca:	4618      	mov	r0, r3
 8019dcc:	3714      	adds	r7, #20
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd4:	4770      	bx	lr

08019dd6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8019dd6:	b480      	push	{r7}
 8019dd8:	b083      	sub	sp, #12
 8019dda:	af00      	add	r7, sp, #0
 8019ddc:	6078      	str	r0, [r7, #4]
 8019dde:	460b      	mov	r3, r1
 8019de0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	1c5a      	adds	r2, r3, #1
 8019de6:	607a      	str	r2, [r7, #4]
 8019de8:	887a      	ldrh	r2, [r7, #2]
 8019dea:	b2d2      	uxtb	r2, r2
 8019dec:	701a      	strb	r2, [r3, #0]
 8019dee:	887b      	ldrh	r3, [r7, #2]
 8019df0:	0a1b      	lsrs	r3, r3, #8
 8019df2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	1c5a      	adds	r2, r3, #1
 8019df8:	607a      	str	r2, [r7, #4]
 8019dfa:	887a      	ldrh	r2, [r7, #2]
 8019dfc:	b2d2      	uxtb	r2, r2
 8019dfe:	701a      	strb	r2, [r3, #0]
}
 8019e00:	bf00      	nop
 8019e02:	370c      	adds	r7, #12
 8019e04:	46bd      	mov	sp, r7
 8019e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0a:	4770      	bx	lr

08019e0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8019e0c:	b480      	push	{r7}
 8019e0e:	b083      	sub	sp, #12
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
 8019e14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	1c5a      	adds	r2, r3, #1
 8019e1a:	607a      	str	r2, [r7, #4]
 8019e1c:	683a      	ldr	r2, [r7, #0]
 8019e1e:	b2d2      	uxtb	r2, r2
 8019e20:	701a      	strb	r2, [r3, #0]
 8019e22:	683b      	ldr	r3, [r7, #0]
 8019e24:	0a1b      	lsrs	r3, r3, #8
 8019e26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	1c5a      	adds	r2, r3, #1
 8019e2c:	607a      	str	r2, [r7, #4]
 8019e2e:	683a      	ldr	r2, [r7, #0]
 8019e30:	b2d2      	uxtb	r2, r2
 8019e32:	701a      	strb	r2, [r3, #0]
 8019e34:	683b      	ldr	r3, [r7, #0]
 8019e36:	0a1b      	lsrs	r3, r3, #8
 8019e38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	1c5a      	adds	r2, r3, #1
 8019e3e:	607a      	str	r2, [r7, #4]
 8019e40:	683a      	ldr	r2, [r7, #0]
 8019e42:	b2d2      	uxtb	r2, r2
 8019e44:	701a      	strb	r2, [r3, #0]
 8019e46:	683b      	ldr	r3, [r7, #0]
 8019e48:	0a1b      	lsrs	r3, r3, #8
 8019e4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	1c5a      	adds	r2, r3, #1
 8019e50:	607a      	str	r2, [r7, #4]
 8019e52:	683a      	ldr	r2, [r7, #0]
 8019e54:	b2d2      	uxtb	r2, r2
 8019e56:	701a      	strb	r2, [r3, #0]
}
 8019e58:	bf00      	nop
 8019e5a:	370c      	adds	r7, #12
 8019e5c:	46bd      	mov	sp, r7
 8019e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e62:	4770      	bx	lr

08019e64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8019e64:	b480      	push	{r7}
 8019e66:	b087      	sub	sp, #28
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	60f8      	str	r0, [r7, #12]
 8019e6c:	60b9      	str	r1, [r7, #8]
 8019e6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8019e74:	68bb      	ldr	r3, [r7, #8]
 8019e76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d00d      	beq.n	8019e9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8019e7e:	693a      	ldr	r2, [r7, #16]
 8019e80:	1c53      	adds	r3, r2, #1
 8019e82:	613b      	str	r3, [r7, #16]
 8019e84:	697b      	ldr	r3, [r7, #20]
 8019e86:	1c59      	adds	r1, r3, #1
 8019e88:	6179      	str	r1, [r7, #20]
 8019e8a:	7812      	ldrb	r2, [r2, #0]
 8019e8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	3b01      	subs	r3, #1
 8019e92:	607b      	str	r3, [r7, #4]
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d1f1      	bne.n	8019e7e <mem_cpy+0x1a>
	}
}
 8019e9a:	bf00      	nop
 8019e9c:	371c      	adds	r7, #28
 8019e9e:	46bd      	mov	sp, r7
 8019ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea4:	4770      	bx	lr

08019ea6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8019ea6:	b480      	push	{r7}
 8019ea8:	b087      	sub	sp, #28
 8019eaa:	af00      	add	r7, sp, #0
 8019eac:	60f8      	str	r0, [r7, #12]
 8019eae:	60b9      	str	r1, [r7, #8]
 8019eb0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8019eb6:	697b      	ldr	r3, [r7, #20]
 8019eb8:	1c5a      	adds	r2, r3, #1
 8019eba:	617a      	str	r2, [r7, #20]
 8019ebc:	68ba      	ldr	r2, [r7, #8]
 8019ebe:	b2d2      	uxtb	r2, r2
 8019ec0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	3b01      	subs	r3, #1
 8019ec6:	607b      	str	r3, [r7, #4]
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d1f3      	bne.n	8019eb6 <mem_set+0x10>
}
 8019ece:	bf00      	nop
 8019ed0:	371c      	adds	r7, #28
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed8:	4770      	bx	lr

08019eda <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8019eda:	b480      	push	{r7}
 8019edc:	b089      	sub	sp, #36	; 0x24
 8019ede:	af00      	add	r7, sp, #0
 8019ee0:	60f8      	str	r0, [r7, #12]
 8019ee2:	60b9      	str	r1, [r7, #8]
 8019ee4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	61fb      	str	r3, [r7, #28]
 8019eea:	68bb      	ldr	r3, [r7, #8]
 8019eec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8019eee:	2300      	movs	r3, #0
 8019ef0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8019ef2:	69fb      	ldr	r3, [r7, #28]
 8019ef4:	1c5a      	adds	r2, r3, #1
 8019ef6:	61fa      	str	r2, [r7, #28]
 8019ef8:	781b      	ldrb	r3, [r3, #0]
 8019efa:	4619      	mov	r1, r3
 8019efc:	69bb      	ldr	r3, [r7, #24]
 8019efe:	1c5a      	adds	r2, r3, #1
 8019f00:	61ba      	str	r2, [r7, #24]
 8019f02:	781b      	ldrb	r3, [r3, #0]
 8019f04:	1acb      	subs	r3, r1, r3
 8019f06:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	3b01      	subs	r3, #1
 8019f0c:	607b      	str	r3, [r7, #4]
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d002      	beq.n	8019f1a <mem_cmp+0x40>
 8019f14:	697b      	ldr	r3, [r7, #20]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d0eb      	beq.n	8019ef2 <mem_cmp+0x18>

	return r;
 8019f1a:	697b      	ldr	r3, [r7, #20]
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3724      	adds	r7, #36	; 0x24
 8019f20:	46bd      	mov	sp, r7
 8019f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f26:	4770      	bx	lr

08019f28 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8019f28:	b480      	push	{r7}
 8019f2a:	b083      	sub	sp, #12
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
 8019f30:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8019f32:	e002      	b.n	8019f3a <chk_chr+0x12>
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	3301      	adds	r3, #1
 8019f38:	607b      	str	r3, [r7, #4]
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	781b      	ldrb	r3, [r3, #0]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d005      	beq.n	8019f4e <chk_chr+0x26>
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	781b      	ldrb	r3, [r3, #0]
 8019f46:	461a      	mov	r2, r3
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	4293      	cmp	r3, r2
 8019f4c:	d1f2      	bne.n	8019f34 <chk_chr+0xc>
	return *str;
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	781b      	ldrb	r3, [r3, #0]
}
 8019f52:	4618      	mov	r0, r3
 8019f54:	370c      	adds	r7, #12
 8019f56:	46bd      	mov	sp, r7
 8019f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f5c:	4770      	bx	lr
	...

08019f60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8019f60:	b480      	push	{r7}
 8019f62:	b085      	sub	sp, #20
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
 8019f68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	60bb      	str	r3, [r7, #8]
 8019f6e:	68bb      	ldr	r3, [r7, #8]
 8019f70:	60fb      	str	r3, [r7, #12]
 8019f72:	e029      	b.n	8019fc8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8019f74:	4a27      	ldr	r2, [pc, #156]	; (801a014 <chk_lock+0xb4>)
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	011b      	lsls	r3, r3, #4
 8019f7a:	4413      	add	r3, r2
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d01d      	beq.n	8019fbe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8019f82:	4a24      	ldr	r2, [pc, #144]	; (801a014 <chk_lock+0xb4>)
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	011b      	lsls	r3, r3, #4
 8019f88:	4413      	add	r3, r2
 8019f8a:	681a      	ldr	r2, [r3, #0]
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	429a      	cmp	r2, r3
 8019f92:	d116      	bne.n	8019fc2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8019f94:	4a1f      	ldr	r2, [pc, #124]	; (801a014 <chk_lock+0xb4>)
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	011b      	lsls	r3, r3, #4
 8019f9a:	4413      	add	r3, r2
 8019f9c:	3304      	adds	r3, #4
 8019f9e:	681a      	ldr	r2, [r3, #0]
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8019fa4:	429a      	cmp	r2, r3
 8019fa6:	d10c      	bne.n	8019fc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8019fa8:	4a1a      	ldr	r2, [pc, #104]	; (801a014 <chk_lock+0xb4>)
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	011b      	lsls	r3, r3, #4
 8019fae:	4413      	add	r3, r2
 8019fb0:	3308      	adds	r3, #8
 8019fb2:	681a      	ldr	r2, [r3, #0]
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8019fb8:	429a      	cmp	r2, r3
 8019fba:	d102      	bne.n	8019fc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8019fbc:	e007      	b.n	8019fce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8019fbe:	2301      	movs	r3, #1
 8019fc0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	60fb      	str	r3, [r7, #12]
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	2b01      	cmp	r3, #1
 8019fcc:	d9d2      	bls.n	8019f74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	2b02      	cmp	r3, #2
 8019fd2:	d109      	bne.n	8019fe8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8019fd4:	68bb      	ldr	r3, [r7, #8]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d102      	bne.n	8019fe0 <chk_lock+0x80>
 8019fda:	683b      	ldr	r3, [r7, #0]
 8019fdc:	2b02      	cmp	r3, #2
 8019fde:	d101      	bne.n	8019fe4 <chk_lock+0x84>
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	e010      	b.n	801a006 <chk_lock+0xa6>
 8019fe4:	2312      	movs	r3, #18
 8019fe6:	e00e      	b.n	801a006 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8019fe8:	683b      	ldr	r3, [r7, #0]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d108      	bne.n	801a000 <chk_lock+0xa0>
 8019fee:	4a09      	ldr	r2, [pc, #36]	; (801a014 <chk_lock+0xb4>)
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	011b      	lsls	r3, r3, #4
 8019ff4:	4413      	add	r3, r2
 8019ff6:	330c      	adds	r3, #12
 8019ff8:	881b      	ldrh	r3, [r3, #0]
 8019ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019ffe:	d101      	bne.n	801a004 <chk_lock+0xa4>
 801a000:	2310      	movs	r3, #16
 801a002:	e000      	b.n	801a006 <chk_lock+0xa6>
 801a004:	2300      	movs	r3, #0
}
 801a006:	4618      	mov	r0, r3
 801a008:	3714      	adds	r7, #20
 801a00a:	46bd      	mov	sp, r7
 801a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a010:	4770      	bx	lr
 801a012:	bf00      	nop
 801a014:	20000798 	.word	0x20000798

0801a018 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801a018:	b480      	push	{r7}
 801a01a:	b083      	sub	sp, #12
 801a01c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a01e:	2300      	movs	r3, #0
 801a020:	607b      	str	r3, [r7, #4]
 801a022:	e002      	b.n	801a02a <enq_lock+0x12>
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	3301      	adds	r3, #1
 801a028:	607b      	str	r3, [r7, #4]
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	2b01      	cmp	r3, #1
 801a02e:	d806      	bhi.n	801a03e <enq_lock+0x26>
 801a030:	4a09      	ldr	r2, [pc, #36]	; (801a058 <enq_lock+0x40>)
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	011b      	lsls	r3, r3, #4
 801a036:	4413      	add	r3, r2
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d1f2      	bne.n	801a024 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	2b02      	cmp	r3, #2
 801a042:	bf14      	ite	ne
 801a044:	2301      	movne	r3, #1
 801a046:	2300      	moveq	r3, #0
 801a048:	b2db      	uxtb	r3, r3
}
 801a04a:	4618      	mov	r0, r3
 801a04c:	370c      	adds	r7, #12
 801a04e:	46bd      	mov	sp, r7
 801a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a054:	4770      	bx	lr
 801a056:	bf00      	nop
 801a058:	20000798 	.word	0x20000798

0801a05c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a05c:	b480      	push	{r7}
 801a05e:	b085      	sub	sp, #20
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
 801a064:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a066:	2300      	movs	r3, #0
 801a068:	60fb      	str	r3, [r7, #12]
 801a06a:	e01f      	b.n	801a0ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801a06c:	4a41      	ldr	r2, [pc, #260]	; (801a174 <inc_lock+0x118>)
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	011b      	lsls	r3, r3, #4
 801a072:	4413      	add	r3, r2
 801a074:	681a      	ldr	r2, [r3, #0]
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	429a      	cmp	r2, r3
 801a07c:	d113      	bne.n	801a0a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801a07e:	4a3d      	ldr	r2, [pc, #244]	; (801a174 <inc_lock+0x118>)
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	011b      	lsls	r3, r3, #4
 801a084:	4413      	add	r3, r2
 801a086:	3304      	adds	r3, #4
 801a088:	681a      	ldr	r2, [r3, #0]
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801a08e:	429a      	cmp	r2, r3
 801a090:	d109      	bne.n	801a0a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801a092:	4a38      	ldr	r2, [pc, #224]	; (801a174 <inc_lock+0x118>)
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	011b      	lsls	r3, r3, #4
 801a098:	4413      	add	r3, r2
 801a09a:	3308      	adds	r3, #8
 801a09c:	681a      	ldr	r2, [r3, #0]
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801a0a2:	429a      	cmp	r2, r3
 801a0a4:	d006      	beq.n	801a0b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	3301      	adds	r3, #1
 801a0aa:	60fb      	str	r3, [r7, #12]
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	2b01      	cmp	r3, #1
 801a0b0:	d9dc      	bls.n	801a06c <inc_lock+0x10>
 801a0b2:	e000      	b.n	801a0b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801a0b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	2b02      	cmp	r3, #2
 801a0ba:	d132      	bne.n	801a122 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a0bc:	2300      	movs	r3, #0
 801a0be:	60fb      	str	r3, [r7, #12]
 801a0c0:	e002      	b.n	801a0c8 <inc_lock+0x6c>
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	60fb      	str	r3, [r7, #12]
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	2b01      	cmp	r3, #1
 801a0cc:	d806      	bhi.n	801a0dc <inc_lock+0x80>
 801a0ce:	4a29      	ldr	r2, [pc, #164]	; (801a174 <inc_lock+0x118>)
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	011b      	lsls	r3, r3, #4
 801a0d4:	4413      	add	r3, r2
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d1f2      	bne.n	801a0c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	2b02      	cmp	r3, #2
 801a0e0:	d101      	bne.n	801a0e6 <inc_lock+0x8a>
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	e040      	b.n	801a168 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	681a      	ldr	r2, [r3, #0]
 801a0ea:	4922      	ldr	r1, [pc, #136]	; (801a174 <inc_lock+0x118>)
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	011b      	lsls	r3, r3, #4
 801a0f0:	440b      	add	r3, r1
 801a0f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	689a      	ldr	r2, [r3, #8]
 801a0f8:	491e      	ldr	r1, [pc, #120]	; (801a174 <inc_lock+0x118>)
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	011b      	lsls	r3, r3, #4
 801a0fe:	440b      	add	r3, r1
 801a100:	3304      	adds	r3, #4
 801a102:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	695a      	ldr	r2, [r3, #20]
 801a108:	491a      	ldr	r1, [pc, #104]	; (801a174 <inc_lock+0x118>)
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	011b      	lsls	r3, r3, #4
 801a10e:	440b      	add	r3, r1
 801a110:	3308      	adds	r3, #8
 801a112:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801a114:	4a17      	ldr	r2, [pc, #92]	; (801a174 <inc_lock+0x118>)
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	011b      	lsls	r3, r3, #4
 801a11a:	4413      	add	r3, r2
 801a11c:	330c      	adds	r3, #12
 801a11e:	2200      	movs	r2, #0
 801a120:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d009      	beq.n	801a13c <inc_lock+0xe0>
 801a128:	4a12      	ldr	r2, [pc, #72]	; (801a174 <inc_lock+0x118>)
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	011b      	lsls	r3, r3, #4
 801a12e:	4413      	add	r3, r2
 801a130:	330c      	adds	r3, #12
 801a132:	881b      	ldrh	r3, [r3, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d001      	beq.n	801a13c <inc_lock+0xe0>
 801a138:	2300      	movs	r3, #0
 801a13a:	e015      	b.n	801a168 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801a13c:	683b      	ldr	r3, [r7, #0]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d108      	bne.n	801a154 <inc_lock+0xf8>
 801a142:	4a0c      	ldr	r2, [pc, #48]	; (801a174 <inc_lock+0x118>)
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	011b      	lsls	r3, r3, #4
 801a148:	4413      	add	r3, r2
 801a14a:	330c      	adds	r3, #12
 801a14c:	881b      	ldrh	r3, [r3, #0]
 801a14e:	3301      	adds	r3, #1
 801a150:	b29a      	uxth	r2, r3
 801a152:	e001      	b.n	801a158 <inc_lock+0xfc>
 801a154:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a158:	4906      	ldr	r1, [pc, #24]	; (801a174 <inc_lock+0x118>)
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	011b      	lsls	r3, r3, #4
 801a15e:	440b      	add	r3, r1
 801a160:	330c      	adds	r3, #12
 801a162:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	3301      	adds	r3, #1
}
 801a168:	4618      	mov	r0, r3
 801a16a:	3714      	adds	r7, #20
 801a16c:	46bd      	mov	sp, r7
 801a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a172:	4770      	bx	lr
 801a174:	20000798 	.word	0x20000798

0801a178 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801a178:	b480      	push	{r7}
 801a17a:	b085      	sub	sp, #20
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	3b01      	subs	r3, #1
 801a184:	607b      	str	r3, [r7, #4]
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	2b01      	cmp	r3, #1
 801a18a:	d825      	bhi.n	801a1d8 <dec_lock+0x60>
		n = Files[i].ctr;
 801a18c:	4a17      	ldr	r2, [pc, #92]	; (801a1ec <dec_lock+0x74>)
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	011b      	lsls	r3, r3, #4
 801a192:	4413      	add	r3, r2
 801a194:	330c      	adds	r3, #12
 801a196:	881b      	ldrh	r3, [r3, #0]
 801a198:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801a19a:	89fb      	ldrh	r3, [r7, #14]
 801a19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a1a0:	d101      	bne.n	801a1a6 <dec_lock+0x2e>
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801a1a6:	89fb      	ldrh	r3, [r7, #14]
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d002      	beq.n	801a1b2 <dec_lock+0x3a>
 801a1ac:	89fb      	ldrh	r3, [r7, #14]
 801a1ae:	3b01      	subs	r3, #1
 801a1b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801a1b2:	4a0e      	ldr	r2, [pc, #56]	; (801a1ec <dec_lock+0x74>)
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	011b      	lsls	r3, r3, #4
 801a1b8:	4413      	add	r3, r2
 801a1ba:	330c      	adds	r3, #12
 801a1bc:	89fa      	ldrh	r2, [r7, #14]
 801a1be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801a1c0:	89fb      	ldrh	r3, [r7, #14]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d105      	bne.n	801a1d2 <dec_lock+0x5a>
 801a1c6:	4a09      	ldr	r2, [pc, #36]	; (801a1ec <dec_lock+0x74>)
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	011b      	lsls	r3, r3, #4
 801a1cc:	4413      	add	r3, r2
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	737b      	strb	r3, [r7, #13]
 801a1d6:	e001      	b.n	801a1dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801a1d8:	2302      	movs	r3, #2
 801a1da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801a1dc:	7b7b      	ldrb	r3, [r7, #13]
}
 801a1de:	4618      	mov	r0, r3
 801a1e0:	3714      	adds	r7, #20
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e8:	4770      	bx	lr
 801a1ea:	bf00      	nop
 801a1ec:	20000798 	.word	0x20000798

0801a1f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801a1f0:	b480      	push	{r7}
 801a1f2:	b085      	sub	sp, #20
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	60fb      	str	r3, [r7, #12]
 801a1fc:	e010      	b.n	801a220 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a1fe:	4a0d      	ldr	r2, [pc, #52]	; (801a234 <clear_lock+0x44>)
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	011b      	lsls	r3, r3, #4
 801a204:	4413      	add	r3, r2
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	687a      	ldr	r2, [r7, #4]
 801a20a:	429a      	cmp	r2, r3
 801a20c:	d105      	bne.n	801a21a <clear_lock+0x2a>
 801a20e:	4a09      	ldr	r2, [pc, #36]	; (801a234 <clear_lock+0x44>)
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	011b      	lsls	r3, r3, #4
 801a214:	4413      	add	r3, r2
 801a216:	2200      	movs	r2, #0
 801a218:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	3301      	adds	r3, #1
 801a21e:	60fb      	str	r3, [r7, #12]
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	2b01      	cmp	r3, #1
 801a224:	d9eb      	bls.n	801a1fe <clear_lock+0xe>
	}
}
 801a226:	bf00      	nop
 801a228:	3714      	adds	r7, #20
 801a22a:	46bd      	mov	sp, r7
 801a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a230:	4770      	bx	lr
 801a232:	bf00      	nop
 801a234:	20000798 	.word	0x20000798

0801a238 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b086      	sub	sp, #24
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801a240:	2300      	movs	r3, #0
 801a242:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	78db      	ldrb	r3, [r3, #3]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d034      	beq.n	801a2b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a250:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	7858      	ldrb	r0, [r3, #1]
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a25c:	2301      	movs	r3, #1
 801a25e:	697a      	ldr	r2, [r7, #20]
 801a260:	f7ff fd40 	bl	8019ce4 <disk_write>
 801a264:	4603      	mov	r3, r0
 801a266:	2b00      	cmp	r3, #0
 801a268:	d002      	beq.n	801a270 <sync_window+0x38>
			res = FR_DISK_ERR;
 801a26a:	2301      	movs	r3, #1
 801a26c:	73fb      	strb	r3, [r7, #15]
 801a26e:	e022      	b.n	801a2b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	2200      	movs	r2, #0
 801a274:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a27a:	697a      	ldr	r2, [r7, #20]
 801a27c:	1ad2      	subs	r2, r2, r3
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	6a1b      	ldr	r3, [r3, #32]
 801a282:	429a      	cmp	r2, r3
 801a284:	d217      	bcs.n	801a2b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	789b      	ldrb	r3, [r3, #2]
 801a28a:	613b      	str	r3, [r7, #16]
 801a28c:	e010      	b.n	801a2b0 <sync_window+0x78>
					wsect += fs->fsize;
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	6a1b      	ldr	r3, [r3, #32]
 801a292:	697a      	ldr	r2, [r7, #20]
 801a294:	4413      	add	r3, r2
 801a296:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	7858      	ldrb	r0, [r3, #1]
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a2a2:	2301      	movs	r3, #1
 801a2a4:	697a      	ldr	r2, [r7, #20]
 801a2a6:	f7ff fd1d 	bl	8019ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a2aa:	693b      	ldr	r3, [r7, #16]
 801a2ac:	3b01      	subs	r3, #1
 801a2ae:	613b      	str	r3, [r7, #16]
 801a2b0:	693b      	ldr	r3, [r7, #16]
 801a2b2:	2b01      	cmp	r3, #1
 801a2b4:	d8eb      	bhi.n	801a28e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801a2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	3718      	adds	r7, #24
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd80      	pop	{r7, pc}

0801a2c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b084      	sub	sp, #16
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
 801a2c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2d2:	683a      	ldr	r2, [r7, #0]
 801a2d4:	429a      	cmp	r2, r3
 801a2d6:	d01b      	beq.n	801a310 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801a2d8:	6878      	ldr	r0, [r7, #4]
 801a2da:	f7ff ffad 	bl	801a238 <sync_window>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801a2e2:	7bfb      	ldrb	r3, [r7, #15]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d113      	bne.n	801a310 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	7858      	ldrb	r0, [r3, #1]
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a2f2:	2301      	movs	r3, #1
 801a2f4:	683a      	ldr	r2, [r7, #0]
 801a2f6:	f7ff fcd5 	bl	8019ca4 <disk_read>
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d004      	beq.n	801a30a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801a300:	f04f 33ff 	mov.w	r3, #4294967295
 801a304:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801a306:	2301      	movs	r3, #1
 801a308:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	683a      	ldr	r2, [r7, #0]
 801a30e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801a310:	7bfb      	ldrb	r3, [r7, #15]
}
 801a312:	4618      	mov	r0, r3
 801a314:	3710      	adds	r7, #16
 801a316:	46bd      	mov	sp, r7
 801a318:	bd80      	pop	{r7, pc}
	...

0801a31c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b084      	sub	sp, #16
 801a320:	af00      	add	r7, sp, #0
 801a322:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801a324:	6878      	ldr	r0, [r7, #4]
 801a326:	f7ff ff87 	bl	801a238 <sync_window>
 801a32a:	4603      	mov	r3, r0
 801a32c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801a32e:	7bfb      	ldrb	r3, [r7, #15]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d159      	bne.n	801a3e8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	781b      	ldrb	r3, [r3, #0]
 801a338:	2b03      	cmp	r3, #3
 801a33a:	d149      	bne.n	801a3d0 <sync_fs+0xb4>
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	791b      	ldrb	r3, [r3, #4]
 801a340:	2b01      	cmp	r3, #1
 801a342:	d145      	bne.n	801a3d0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	899b      	ldrh	r3, [r3, #12]
 801a34e:	461a      	mov	r2, r3
 801a350:	2100      	movs	r1, #0
 801a352:	f7ff fda8 	bl	8019ea6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	3338      	adds	r3, #56	; 0x38
 801a35a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a35e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801a362:	4618      	mov	r0, r3
 801a364:	f7ff fd37 	bl	8019dd6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	3338      	adds	r3, #56	; 0x38
 801a36c:	4921      	ldr	r1, [pc, #132]	; (801a3f4 <sync_fs+0xd8>)
 801a36e:	4618      	mov	r0, r3
 801a370:	f7ff fd4c 	bl	8019e0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	3338      	adds	r3, #56	; 0x38
 801a378:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801a37c:	491e      	ldr	r1, [pc, #120]	; (801a3f8 <sync_fs+0xdc>)
 801a37e:	4618      	mov	r0, r3
 801a380:	f7ff fd44 	bl	8019e0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	3338      	adds	r3, #56	; 0x38
 801a388:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	699b      	ldr	r3, [r3, #24]
 801a390:	4619      	mov	r1, r3
 801a392:	4610      	mov	r0, r2
 801a394:	f7ff fd3a 	bl	8019e0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	3338      	adds	r3, #56	; 0x38
 801a39c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	695b      	ldr	r3, [r3, #20]
 801a3a4:	4619      	mov	r1, r3
 801a3a6:	4610      	mov	r0, r2
 801a3a8:	f7ff fd30 	bl	8019e0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3b0:	1c5a      	adds	r2, r3, #1
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	7858      	ldrb	r0, [r3, #1]
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	f7ff fc8d 	bl	8019ce4 <disk_write>
			fs->fsi_flag = 0;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	785b      	ldrb	r3, [r3, #1]
 801a3d4:	2200      	movs	r2, #0
 801a3d6:	2100      	movs	r1, #0
 801a3d8:	4618      	mov	r0, r3
 801a3da:	f7ff fca3 	bl	8019d24 <disk_ioctl>
 801a3de:	4603      	mov	r3, r0
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d001      	beq.n	801a3e8 <sync_fs+0xcc>
 801a3e4:	2301      	movs	r3, #1
 801a3e6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801a3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	3710      	adds	r7, #16
 801a3ee:	46bd      	mov	sp, r7
 801a3f0:	bd80      	pop	{r7, pc}
 801a3f2:	bf00      	nop
 801a3f4:	41615252 	.word	0x41615252
 801a3f8:	61417272 	.word	0x61417272

0801a3fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801a3fc:	b480      	push	{r7}
 801a3fe:	b083      	sub	sp, #12
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
 801a404:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801a406:	683b      	ldr	r3, [r7, #0]
 801a408:	3b02      	subs	r3, #2
 801a40a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	69db      	ldr	r3, [r3, #28]
 801a410:	3b02      	subs	r3, #2
 801a412:	683a      	ldr	r2, [r7, #0]
 801a414:	429a      	cmp	r2, r3
 801a416:	d301      	bcc.n	801a41c <clust2sect+0x20>
 801a418:	2300      	movs	r3, #0
 801a41a:	e008      	b.n	801a42e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	895b      	ldrh	r3, [r3, #10]
 801a420:	461a      	mov	r2, r3
 801a422:	683b      	ldr	r3, [r7, #0]
 801a424:	fb03 f202 	mul.w	r2, r3, r2
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a42c:	4413      	add	r3, r2
}
 801a42e:	4618      	mov	r0, r3
 801a430:	370c      	adds	r7, #12
 801a432:	46bd      	mov	sp, r7
 801a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a438:	4770      	bx	lr

0801a43a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801a43a:	b580      	push	{r7, lr}
 801a43c:	b086      	sub	sp, #24
 801a43e:	af00      	add	r7, sp, #0
 801a440:	6078      	str	r0, [r7, #4]
 801a442:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801a44a:	683b      	ldr	r3, [r7, #0]
 801a44c:	2b01      	cmp	r3, #1
 801a44e:	d904      	bls.n	801a45a <get_fat+0x20>
 801a450:	693b      	ldr	r3, [r7, #16]
 801a452:	69db      	ldr	r3, [r3, #28]
 801a454:	683a      	ldr	r2, [r7, #0]
 801a456:	429a      	cmp	r2, r3
 801a458:	d302      	bcc.n	801a460 <get_fat+0x26>
		val = 1;	/* Internal error */
 801a45a:	2301      	movs	r3, #1
 801a45c:	617b      	str	r3, [r7, #20]
 801a45e:	e0b7      	b.n	801a5d0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801a460:	f04f 33ff 	mov.w	r3, #4294967295
 801a464:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801a466:	693b      	ldr	r3, [r7, #16]
 801a468:	781b      	ldrb	r3, [r3, #0]
 801a46a:	2b02      	cmp	r3, #2
 801a46c:	d05a      	beq.n	801a524 <get_fat+0xea>
 801a46e:	2b03      	cmp	r3, #3
 801a470:	d07d      	beq.n	801a56e <get_fat+0x134>
 801a472:	2b01      	cmp	r3, #1
 801a474:	f040 80a2 	bne.w	801a5bc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801a478:	683b      	ldr	r3, [r7, #0]
 801a47a:	60fb      	str	r3, [r7, #12]
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	085b      	lsrs	r3, r3, #1
 801a480:	68fa      	ldr	r2, [r7, #12]
 801a482:	4413      	add	r3, r2
 801a484:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a486:	693b      	ldr	r3, [r7, #16]
 801a488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a48a:	693b      	ldr	r3, [r7, #16]
 801a48c:	899b      	ldrh	r3, [r3, #12]
 801a48e:	4619      	mov	r1, r3
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	fbb3 f3f1 	udiv	r3, r3, r1
 801a496:	4413      	add	r3, r2
 801a498:	4619      	mov	r1, r3
 801a49a:	6938      	ldr	r0, [r7, #16]
 801a49c:	f7ff ff10 	bl	801a2c0 <move_window>
 801a4a0:	4603      	mov	r3, r0
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	f040 808d 	bne.w	801a5c2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	1c5a      	adds	r2, r3, #1
 801a4ac:	60fa      	str	r2, [r7, #12]
 801a4ae:	693a      	ldr	r2, [r7, #16]
 801a4b0:	8992      	ldrh	r2, [r2, #12]
 801a4b2:	fbb3 f1f2 	udiv	r1, r3, r2
 801a4b6:	fb02 f201 	mul.w	r2, r2, r1
 801a4ba:	1a9b      	subs	r3, r3, r2
 801a4bc:	693a      	ldr	r2, [r7, #16]
 801a4be:	4413      	add	r3, r2
 801a4c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a4c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a4c6:	693b      	ldr	r3, [r7, #16]
 801a4c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a4ca:	693b      	ldr	r3, [r7, #16]
 801a4cc:	899b      	ldrh	r3, [r3, #12]
 801a4ce:	4619      	mov	r1, r3
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a4d6:	4413      	add	r3, r2
 801a4d8:	4619      	mov	r1, r3
 801a4da:	6938      	ldr	r0, [r7, #16]
 801a4dc:	f7ff fef0 	bl	801a2c0 <move_window>
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d16f      	bne.n	801a5c6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801a4e6:	693b      	ldr	r3, [r7, #16]
 801a4e8:	899b      	ldrh	r3, [r3, #12]
 801a4ea:	461a      	mov	r2, r3
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	fbb3 f1f2 	udiv	r1, r3, r2
 801a4f2:	fb02 f201 	mul.w	r2, r2, r1
 801a4f6:	1a9b      	subs	r3, r3, r2
 801a4f8:	693a      	ldr	r2, [r7, #16]
 801a4fa:	4413      	add	r3, r2
 801a4fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a500:	021b      	lsls	r3, r3, #8
 801a502:	461a      	mov	r2, r3
 801a504:	68bb      	ldr	r3, [r7, #8]
 801a506:	4313      	orrs	r3, r2
 801a508:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801a50a:	683b      	ldr	r3, [r7, #0]
 801a50c:	f003 0301 	and.w	r3, r3, #1
 801a510:	2b00      	cmp	r3, #0
 801a512:	d002      	beq.n	801a51a <get_fat+0xe0>
 801a514:	68bb      	ldr	r3, [r7, #8]
 801a516:	091b      	lsrs	r3, r3, #4
 801a518:	e002      	b.n	801a520 <get_fat+0xe6>
 801a51a:	68bb      	ldr	r3, [r7, #8]
 801a51c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a520:	617b      	str	r3, [r7, #20]
			break;
 801a522:	e055      	b.n	801a5d0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801a524:	693b      	ldr	r3, [r7, #16]
 801a526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a528:	693b      	ldr	r3, [r7, #16]
 801a52a:	899b      	ldrh	r3, [r3, #12]
 801a52c:	085b      	lsrs	r3, r3, #1
 801a52e:	b29b      	uxth	r3, r3
 801a530:	4619      	mov	r1, r3
 801a532:	683b      	ldr	r3, [r7, #0]
 801a534:	fbb3 f3f1 	udiv	r3, r3, r1
 801a538:	4413      	add	r3, r2
 801a53a:	4619      	mov	r1, r3
 801a53c:	6938      	ldr	r0, [r7, #16]
 801a53e:	f7ff febf 	bl	801a2c0 <move_window>
 801a542:	4603      	mov	r3, r0
 801a544:	2b00      	cmp	r3, #0
 801a546:	d140      	bne.n	801a5ca <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801a548:	693b      	ldr	r3, [r7, #16]
 801a54a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a54e:	683b      	ldr	r3, [r7, #0]
 801a550:	005b      	lsls	r3, r3, #1
 801a552:	693a      	ldr	r2, [r7, #16]
 801a554:	8992      	ldrh	r2, [r2, #12]
 801a556:	fbb3 f0f2 	udiv	r0, r3, r2
 801a55a:	fb02 f200 	mul.w	r2, r2, r0
 801a55e:	1a9b      	subs	r3, r3, r2
 801a560:	440b      	add	r3, r1
 801a562:	4618      	mov	r0, r3
 801a564:	f7ff fbfc 	bl	8019d60 <ld_word>
 801a568:	4603      	mov	r3, r0
 801a56a:	617b      	str	r3, [r7, #20]
			break;
 801a56c:	e030      	b.n	801a5d0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801a56e:	693b      	ldr	r3, [r7, #16]
 801a570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a572:	693b      	ldr	r3, [r7, #16]
 801a574:	899b      	ldrh	r3, [r3, #12]
 801a576:	089b      	lsrs	r3, r3, #2
 801a578:	b29b      	uxth	r3, r3
 801a57a:	4619      	mov	r1, r3
 801a57c:	683b      	ldr	r3, [r7, #0]
 801a57e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a582:	4413      	add	r3, r2
 801a584:	4619      	mov	r1, r3
 801a586:	6938      	ldr	r0, [r7, #16]
 801a588:	f7ff fe9a 	bl	801a2c0 <move_window>
 801a58c:	4603      	mov	r3, r0
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d11d      	bne.n	801a5ce <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801a592:	693b      	ldr	r3, [r7, #16]
 801a594:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a598:	683b      	ldr	r3, [r7, #0]
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	693a      	ldr	r2, [r7, #16]
 801a59e:	8992      	ldrh	r2, [r2, #12]
 801a5a0:	fbb3 f0f2 	udiv	r0, r3, r2
 801a5a4:	fb02 f200 	mul.w	r2, r2, r0
 801a5a8:	1a9b      	subs	r3, r3, r2
 801a5aa:	440b      	add	r3, r1
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f7ff fbef 	bl	8019d90 <ld_dword>
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801a5b8:	617b      	str	r3, [r7, #20]
			break;
 801a5ba:	e009      	b.n	801a5d0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801a5bc:	2301      	movs	r3, #1
 801a5be:	617b      	str	r3, [r7, #20]
 801a5c0:	e006      	b.n	801a5d0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a5c2:	bf00      	nop
 801a5c4:	e004      	b.n	801a5d0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a5c6:	bf00      	nop
 801a5c8:	e002      	b.n	801a5d0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801a5ca:	bf00      	nop
 801a5cc:	e000      	b.n	801a5d0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801a5ce:	bf00      	nop
		}
	}

	return val;
 801a5d0:	697b      	ldr	r3, [r7, #20]
}
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	3718      	adds	r7, #24
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	bd80      	pop	{r7, pc}

0801a5da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801a5da:	b590      	push	{r4, r7, lr}
 801a5dc:	b089      	sub	sp, #36	; 0x24
 801a5de:	af00      	add	r7, sp, #0
 801a5e0:	60f8      	str	r0, [r7, #12]
 801a5e2:	60b9      	str	r1, [r7, #8]
 801a5e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801a5e6:	2302      	movs	r3, #2
 801a5e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801a5ea:	68bb      	ldr	r3, [r7, #8]
 801a5ec:	2b01      	cmp	r3, #1
 801a5ee:	f240 8106 	bls.w	801a7fe <put_fat+0x224>
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	69db      	ldr	r3, [r3, #28]
 801a5f6:	68ba      	ldr	r2, [r7, #8]
 801a5f8:	429a      	cmp	r2, r3
 801a5fa:	f080 8100 	bcs.w	801a7fe <put_fat+0x224>
		switch (fs->fs_type) {
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	781b      	ldrb	r3, [r3, #0]
 801a602:	2b02      	cmp	r3, #2
 801a604:	f000 8088 	beq.w	801a718 <put_fat+0x13e>
 801a608:	2b03      	cmp	r3, #3
 801a60a:	f000 80b0 	beq.w	801a76e <put_fat+0x194>
 801a60e:	2b01      	cmp	r3, #1
 801a610:	f040 80f5 	bne.w	801a7fe <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	61bb      	str	r3, [r7, #24]
 801a618:	69bb      	ldr	r3, [r7, #24]
 801a61a:	085b      	lsrs	r3, r3, #1
 801a61c:	69ba      	ldr	r2, [r7, #24]
 801a61e:	4413      	add	r3, r2
 801a620:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	899b      	ldrh	r3, [r3, #12]
 801a62a:	4619      	mov	r1, r3
 801a62c:	69bb      	ldr	r3, [r7, #24]
 801a62e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a632:	4413      	add	r3, r2
 801a634:	4619      	mov	r1, r3
 801a636:	68f8      	ldr	r0, [r7, #12]
 801a638:	f7ff fe42 	bl	801a2c0 <move_window>
 801a63c:	4603      	mov	r3, r0
 801a63e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a640:	7ffb      	ldrb	r3, [r7, #31]
 801a642:	2b00      	cmp	r3, #0
 801a644:	f040 80d4 	bne.w	801a7f0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a64e:	69bb      	ldr	r3, [r7, #24]
 801a650:	1c5a      	adds	r2, r3, #1
 801a652:	61ba      	str	r2, [r7, #24]
 801a654:	68fa      	ldr	r2, [r7, #12]
 801a656:	8992      	ldrh	r2, [r2, #12]
 801a658:	fbb3 f0f2 	udiv	r0, r3, r2
 801a65c:	fb02 f200 	mul.w	r2, r2, r0
 801a660:	1a9b      	subs	r3, r3, r2
 801a662:	440b      	add	r3, r1
 801a664:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	f003 0301 	and.w	r3, r3, #1
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d00d      	beq.n	801a68c <put_fat+0xb2>
 801a670:	697b      	ldr	r3, [r7, #20]
 801a672:	781b      	ldrb	r3, [r3, #0]
 801a674:	b25b      	sxtb	r3, r3
 801a676:	f003 030f 	and.w	r3, r3, #15
 801a67a:	b25a      	sxtb	r2, r3
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	b2db      	uxtb	r3, r3
 801a680:	011b      	lsls	r3, r3, #4
 801a682:	b25b      	sxtb	r3, r3
 801a684:	4313      	orrs	r3, r2
 801a686:	b25b      	sxtb	r3, r3
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	e001      	b.n	801a690 <put_fat+0xb6>
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	b2db      	uxtb	r3, r3
 801a690:	697a      	ldr	r2, [r7, #20]
 801a692:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	2201      	movs	r2, #1
 801a698:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	899b      	ldrh	r3, [r3, #12]
 801a6a2:	4619      	mov	r1, r3
 801a6a4:	69bb      	ldr	r3, [r7, #24]
 801a6a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a6aa:	4413      	add	r3, r2
 801a6ac:	4619      	mov	r1, r3
 801a6ae:	68f8      	ldr	r0, [r7, #12]
 801a6b0:	f7ff fe06 	bl	801a2c0 <move_window>
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a6b8:	7ffb      	ldrb	r3, [r7, #31]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	f040 809a 	bne.w	801a7f4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	899b      	ldrh	r3, [r3, #12]
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	69bb      	ldr	r3, [r7, #24]
 801a6ce:	fbb3 f0f2 	udiv	r0, r3, r2
 801a6d2:	fb02 f200 	mul.w	r2, r2, r0
 801a6d6:	1a9b      	subs	r3, r3, r2
 801a6d8:	440b      	add	r3, r1
 801a6da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801a6dc:	68bb      	ldr	r3, [r7, #8]
 801a6de:	f003 0301 	and.w	r3, r3, #1
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d003      	beq.n	801a6ee <put_fat+0x114>
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	091b      	lsrs	r3, r3, #4
 801a6ea:	b2db      	uxtb	r3, r3
 801a6ec:	e00e      	b.n	801a70c <put_fat+0x132>
 801a6ee:	697b      	ldr	r3, [r7, #20]
 801a6f0:	781b      	ldrb	r3, [r3, #0]
 801a6f2:	b25b      	sxtb	r3, r3
 801a6f4:	f023 030f 	bic.w	r3, r3, #15
 801a6f8:	b25a      	sxtb	r2, r3
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	0a1b      	lsrs	r3, r3, #8
 801a6fe:	b25b      	sxtb	r3, r3
 801a700:	f003 030f 	and.w	r3, r3, #15
 801a704:	b25b      	sxtb	r3, r3
 801a706:	4313      	orrs	r3, r2
 801a708:	b25b      	sxtb	r3, r3
 801a70a:	b2db      	uxtb	r3, r3
 801a70c:	697a      	ldr	r2, [r7, #20]
 801a70e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	2201      	movs	r2, #1
 801a714:	70da      	strb	r2, [r3, #3]
			break;
 801a716:	e072      	b.n	801a7fe <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	899b      	ldrh	r3, [r3, #12]
 801a720:	085b      	lsrs	r3, r3, #1
 801a722:	b29b      	uxth	r3, r3
 801a724:	4619      	mov	r1, r3
 801a726:	68bb      	ldr	r3, [r7, #8]
 801a728:	fbb3 f3f1 	udiv	r3, r3, r1
 801a72c:	4413      	add	r3, r2
 801a72e:	4619      	mov	r1, r3
 801a730:	68f8      	ldr	r0, [r7, #12]
 801a732:	f7ff fdc5 	bl	801a2c0 <move_window>
 801a736:	4603      	mov	r3, r0
 801a738:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a73a:	7ffb      	ldrb	r3, [r7, #31]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d15b      	bne.n	801a7f8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a746:	68bb      	ldr	r3, [r7, #8]
 801a748:	005b      	lsls	r3, r3, #1
 801a74a:	68fa      	ldr	r2, [r7, #12]
 801a74c:	8992      	ldrh	r2, [r2, #12]
 801a74e:	fbb3 f0f2 	udiv	r0, r3, r2
 801a752:	fb02 f200 	mul.w	r2, r2, r0
 801a756:	1a9b      	subs	r3, r3, r2
 801a758:	440b      	add	r3, r1
 801a75a:	687a      	ldr	r2, [r7, #4]
 801a75c:	b292      	uxth	r2, r2
 801a75e:	4611      	mov	r1, r2
 801a760:	4618      	mov	r0, r3
 801a762:	f7ff fb38 	bl	8019dd6 <st_word>
			fs->wflag = 1;
 801a766:	68fb      	ldr	r3, [r7, #12]
 801a768:	2201      	movs	r2, #1
 801a76a:	70da      	strb	r2, [r3, #3]
			break;
 801a76c:	e047      	b.n	801a7fe <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	899b      	ldrh	r3, [r3, #12]
 801a776:	089b      	lsrs	r3, r3, #2
 801a778:	b29b      	uxth	r3, r3
 801a77a:	4619      	mov	r1, r3
 801a77c:	68bb      	ldr	r3, [r7, #8]
 801a77e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a782:	4413      	add	r3, r2
 801a784:	4619      	mov	r1, r3
 801a786:	68f8      	ldr	r0, [r7, #12]
 801a788:	f7ff fd9a 	bl	801a2c0 <move_window>
 801a78c:	4603      	mov	r3, r0
 801a78e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a790:	7ffb      	ldrb	r3, [r7, #31]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d132      	bne.n	801a7fc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a7a2:	68bb      	ldr	r3, [r7, #8]
 801a7a4:	009b      	lsls	r3, r3, #2
 801a7a6:	68fa      	ldr	r2, [r7, #12]
 801a7a8:	8992      	ldrh	r2, [r2, #12]
 801a7aa:	fbb3 f0f2 	udiv	r0, r3, r2
 801a7ae:	fb02 f200 	mul.w	r2, r2, r0
 801a7b2:	1a9b      	subs	r3, r3, r2
 801a7b4:	440b      	add	r3, r1
 801a7b6:	4618      	mov	r0, r3
 801a7b8:	f7ff faea 	bl	8019d90 <ld_dword>
 801a7bc:	4603      	mov	r3, r0
 801a7be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a7c2:	4323      	orrs	r3, r4
 801a7c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a7cc:	68bb      	ldr	r3, [r7, #8]
 801a7ce:	009b      	lsls	r3, r3, #2
 801a7d0:	68fa      	ldr	r2, [r7, #12]
 801a7d2:	8992      	ldrh	r2, [r2, #12]
 801a7d4:	fbb3 f0f2 	udiv	r0, r3, r2
 801a7d8:	fb02 f200 	mul.w	r2, r2, r0
 801a7dc:	1a9b      	subs	r3, r3, r2
 801a7de:	440b      	add	r3, r1
 801a7e0:	6879      	ldr	r1, [r7, #4]
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f7ff fb12 	bl	8019e0c <st_dword>
			fs->wflag = 1;
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	2201      	movs	r2, #1
 801a7ec:	70da      	strb	r2, [r3, #3]
			break;
 801a7ee:	e006      	b.n	801a7fe <put_fat+0x224>
			if (res != FR_OK) break;
 801a7f0:	bf00      	nop
 801a7f2:	e004      	b.n	801a7fe <put_fat+0x224>
			if (res != FR_OK) break;
 801a7f4:	bf00      	nop
 801a7f6:	e002      	b.n	801a7fe <put_fat+0x224>
			if (res != FR_OK) break;
 801a7f8:	bf00      	nop
 801a7fa:	e000      	b.n	801a7fe <put_fat+0x224>
			if (res != FR_OK) break;
 801a7fc:	bf00      	nop
		}
	}
	return res;
 801a7fe:	7ffb      	ldrb	r3, [r7, #31]
}
 801a800:	4618      	mov	r0, r3
 801a802:	3724      	adds	r7, #36	; 0x24
 801a804:	46bd      	mov	sp, r7
 801a806:	bd90      	pop	{r4, r7, pc}

0801a808 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801a808:	b580      	push	{r7, lr}
 801a80a:	b088      	sub	sp, #32
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	60f8      	str	r0, [r7, #12]
 801a810:	60b9      	str	r1, [r7, #8]
 801a812:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801a814:	2300      	movs	r3, #0
 801a816:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801a81e:	68bb      	ldr	r3, [r7, #8]
 801a820:	2b01      	cmp	r3, #1
 801a822:	d904      	bls.n	801a82e <remove_chain+0x26>
 801a824:	69bb      	ldr	r3, [r7, #24]
 801a826:	69db      	ldr	r3, [r3, #28]
 801a828:	68ba      	ldr	r2, [r7, #8]
 801a82a:	429a      	cmp	r2, r3
 801a82c:	d301      	bcc.n	801a832 <remove_chain+0x2a>
 801a82e:	2302      	movs	r3, #2
 801a830:	e04b      	b.n	801a8ca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	2b00      	cmp	r3, #0
 801a836:	d00c      	beq.n	801a852 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801a838:	f04f 32ff 	mov.w	r2, #4294967295
 801a83c:	6879      	ldr	r1, [r7, #4]
 801a83e:	69b8      	ldr	r0, [r7, #24]
 801a840:	f7ff fecb 	bl	801a5da <put_fat>
 801a844:	4603      	mov	r3, r0
 801a846:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801a848:	7ffb      	ldrb	r3, [r7, #31]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d001      	beq.n	801a852 <remove_chain+0x4a>
 801a84e:	7ffb      	ldrb	r3, [r7, #31]
 801a850:	e03b      	b.n	801a8ca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801a852:	68b9      	ldr	r1, [r7, #8]
 801a854:	68f8      	ldr	r0, [r7, #12]
 801a856:	f7ff fdf0 	bl	801a43a <get_fat>
 801a85a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801a85c:	697b      	ldr	r3, [r7, #20]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d031      	beq.n	801a8c6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801a862:	697b      	ldr	r3, [r7, #20]
 801a864:	2b01      	cmp	r3, #1
 801a866:	d101      	bne.n	801a86c <remove_chain+0x64>
 801a868:	2302      	movs	r3, #2
 801a86a:	e02e      	b.n	801a8ca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801a86c:	697b      	ldr	r3, [r7, #20]
 801a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a872:	d101      	bne.n	801a878 <remove_chain+0x70>
 801a874:	2301      	movs	r3, #1
 801a876:	e028      	b.n	801a8ca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801a878:	2200      	movs	r2, #0
 801a87a:	68b9      	ldr	r1, [r7, #8]
 801a87c:	69b8      	ldr	r0, [r7, #24]
 801a87e:	f7ff feac 	bl	801a5da <put_fat>
 801a882:	4603      	mov	r3, r0
 801a884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801a886:	7ffb      	ldrb	r3, [r7, #31]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d001      	beq.n	801a890 <remove_chain+0x88>
 801a88c:	7ffb      	ldrb	r3, [r7, #31]
 801a88e:	e01c      	b.n	801a8ca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801a890:	69bb      	ldr	r3, [r7, #24]
 801a892:	699a      	ldr	r2, [r3, #24]
 801a894:	69bb      	ldr	r3, [r7, #24]
 801a896:	69db      	ldr	r3, [r3, #28]
 801a898:	3b02      	subs	r3, #2
 801a89a:	429a      	cmp	r2, r3
 801a89c:	d20b      	bcs.n	801a8b6 <remove_chain+0xae>
			fs->free_clst++;
 801a89e:	69bb      	ldr	r3, [r7, #24]
 801a8a0:	699b      	ldr	r3, [r3, #24]
 801a8a2:	1c5a      	adds	r2, r3, #1
 801a8a4:	69bb      	ldr	r3, [r7, #24]
 801a8a6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801a8a8:	69bb      	ldr	r3, [r7, #24]
 801a8aa:	791b      	ldrb	r3, [r3, #4]
 801a8ac:	f043 0301 	orr.w	r3, r3, #1
 801a8b0:	b2da      	uxtb	r2, r3
 801a8b2:	69bb      	ldr	r3, [r7, #24]
 801a8b4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801a8b6:	697b      	ldr	r3, [r7, #20]
 801a8b8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801a8ba:	69bb      	ldr	r3, [r7, #24]
 801a8bc:	69db      	ldr	r3, [r3, #28]
 801a8be:	68ba      	ldr	r2, [r7, #8]
 801a8c0:	429a      	cmp	r2, r3
 801a8c2:	d3c6      	bcc.n	801a852 <remove_chain+0x4a>
 801a8c4:	e000      	b.n	801a8c8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801a8c6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801a8c8:	2300      	movs	r3, #0
}
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	3720      	adds	r7, #32
 801a8ce:	46bd      	mov	sp, r7
 801a8d0:	bd80      	pop	{r7, pc}

0801a8d2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801a8d2:	b580      	push	{r7, lr}
 801a8d4:	b088      	sub	sp, #32
 801a8d6:	af00      	add	r7, sp, #0
 801a8d8:	6078      	str	r0, [r7, #4]
 801a8da:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801a8e2:	683b      	ldr	r3, [r7, #0]
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d10d      	bne.n	801a904 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801a8e8:	693b      	ldr	r3, [r7, #16]
 801a8ea:	695b      	ldr	r3, [r3, #20]
 801a8ec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801a8ee:	69bb      	ldr	r3, [r7, #24]
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d004      	beq.n	801a8fe <create_chain+0x2c>
 801a8f4:	693b      	ldr	r3, [r7, #16]
 801a8f6:	69db      	ldr	r3, [r3, #28]
 801a8f8:	69ba      	ldr	r2, [r7, #24]
 801a8fa:	429a      	cmp	r2, r3
 801a8fc:	d31b      	bcc.n	801a936 <create_chain+0x64>
 801a8fe:	2301      	movs	r3, #1
 801a900:	61bb      	str	r3, [r7, #24]
 801a902:	e018      	b.n	801a936 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801a904:	6839      	ldr	r1, [r7, #0]
 801a906:	6878      	ldr	r0, [r7, #4]
 801a908:	f7ff fd97 	bl	801a43a <get_fat>
 801a90c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	2b01      	cmp	r3, #1
 801a912:	d801      	bhi.n	801a918 <create_chain+0x46>
 801a914:	2301      	movs	r3, #1
 801a916:	e070      	b.n	801a9fa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a91e:	d101      	bne.n	801a924 <create_chain+0x52>
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	e06a      	b.n	801a9fa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801a924:	693b      	ldr	r3, [r7, #16]
 801a926:	69db      	ldr	r3, [r3, #28]
 801a928:	68fa      	ldr	r2, [r7, #12]
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d201      	bcs.n	801a932 <create_chain+0x60>
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	e063      	b.n	801a9fa <create_chain+0x128>
		scl = clst;
 801a932:	683b      	ldr	r3, [r7, #0]
 801a934:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801a936:	69bb      	ldr	r3, [r7, #24]
 801a938:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801a93a:	69fb      	ldr	r3, [r7, #28]
 801a93c:	3301      	adds	r3, #1
 801a93e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801a940:	693b      	ldr	r3, [r7, #16]
 801a942:	69db      	ldr	r3, [r3, #28]
 801a944:	69fa      	ldr	r2, [r7, #28]
 801a946:	429a      	cmp	r2, r3
 801a948:	d307      	bcc.n	801a95a <create_chain+0x88>
				ncl = 2;
 801a94a:	2302      	movs	r3, #2
 801a94c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801a94e:	69fa      	ldr	r2, [r7, #28]
 801a950:	69bb      	ldr	r3, [r7, #24]
 801a952:	429a      	cmp	r2, r3
 801a954:	d901      	bls.n	801a95a <create_chain+0x88>
 801a956:	2300      	movs	r3, #0
 801a958:	e04f      	b.n	801a9fa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801a95a:	69f9      	ldr	r1, [r7, #28]
 801a95c:	6878      	ldr	r0, [r7, #4]
 801a95e:	f7ff fd6c 	bl	801a43a <get_fat>
 801a962:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d00e      	beq.n	801a988 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	2b01      	cmp	r3, #1
 801a96e:	d003      	beq.n	801a978 <create_chain+0xa6>
 801a970:	68fb      	ldr	r3, [r7, #12]
 801a972:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a976:	d101      	bne.n	801a97c <create_chain+0xaa>
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	e03e      	b.n	801a9fa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801a97c:	69fa      	ldr	r2, [r7, #28]
 801a97e:	69bb      	ldr	r3, [r7, #24]
 801a980:	429a      	cmp	r2, r3
 801a982:	d1da      	bne.n	801a93a <create_chain+0x68>
 801a984:	2300      	movs	r3, #0
 801a986:	e038      	b.n	801a9fa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801a988:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801a98a:	f04f 32ff 	mov.w	r2, #4294967295
 801a98e:	69f9      	ldr	r1, [r7, #28]
 801a990:	6938      	ldr	r0, [r7, #16]
 801a992:	f7ff fe22 	bl	801a5da <put_fat>
 801a996:	4603      	mov	r3, r0
 801a998:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801a99a:	7dfb      	ldrb	r3, [r7, #23]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d109      	bne.n	801a9b4 <create_chain+0xe2>
 801a9a0:	683b      	ldr	r3, [r7, #0]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d006      	beq.n	801a9b4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801a9a6:	69fa      	ldr	r2, [r7, #28]
 801a9a8:	6839      	ldr	r1, [r7, #0]
 801a9aa:	6938      	ldr	r0, [r7, #16]
 801a9ac:	f7ff fe15 	bl	801a5da <put_fat>
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801a9b4:	7dfb      	ldrb	r3, [r7, #23]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d116      	bne.n	801a9e8 <create_chain+0x116>
		fs->last_clst = ncl;
 801a9ba:	693b      	ldr	r3, [r7, #16]
 801a9bc:	69fa      	ldr	r2, [r7, #28]
 801a9be:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801a9c0:	693b      	ldr	r3, [r7, #16]
 801a9c2:	699a      	ldr	r2, [r3, #24]
 801a9c4:	693b      	ldr	r3, [r7, #16]
 801a9c6:	69db      	ldr	r3, [r3, #28]
 801a9c8:	3b02      	subs	r3, #2
 801a9ca:	429a      	cmp	r2, r3
 801a9cc:	d804      	bhi.n	801a9d8 <create_chain+0x106>
 801a9ce:	693b      	ldr	r3, [r7, #16]
 801a9d0:	699b      	ldr	r3, [r3, #24]
 801a9d2:	1e5a      	subs	r2, r3, #1
 801a9d4:	693b      	ldr	r3, [r7, #16]
 801a9d6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801a9d8:	693b      	ldr	r3, [r7, #16]
 801a9da:	791b      	ldrb	r3, [r3, #4]
 801a9dc:	f043 0301 	orr.w	r3, r3, #1
 801a9e0:	b2da      	uxtb	r2, r3
 801a9e2:	693b      	ldr	r3, [r7, #16]
 801a9e4:	711a      	strb	r2, [r3, #4]
 801a9e6:	e007      	b.n	801a9f8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801a9e8:	7dfb      	ldrb	r3, [r7, #23]
 801a9ea:	2b01      	cmp	r3, #1
 801a9ec:	d102      	bne.n	801a9f4 <create_chain+0x122>
 801a9ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a9f2:	e000      	b.n	801a9f6 <create_chain+0x124>
 801a9f4:	2301      	movs	r3, #1
 801a9f6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801a9f8:	69fb      	ldr	r3, [r7, #28]
}
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	3720      	adds	r7, #32
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}

0801aa02 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801aa02:	b480      	push	{r7}
 801aa04:	b087      	sub	sp, #28
 801aa06:	af00      	add	r7, sp, #0
 801aa08:	6078      	str	r0, [r7, #4]
 801aa0a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa16:	3304      	adds	r3, #4
 801aa18:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	899b      	ldrh	r3, [r3, #12]
 801aa1e:	461a      	mov	r2, r3
 801aa20:	683b      	ldr	r3, [r7, #0]
 801aa22:	fbb3 f3f2 	udiv	r3, r3, r2
 801aa26:	68fa      	ldr	r2, [r7, #12]
 801aa28:	8952      	ldrh	r2, [r2, #10]
 801aa2a:	fbb3 f3f2 	udiv	r3, r3, r2
 801aa2e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801aa30:	693b      	ldr	r3, [r7, #16]
 801aa32:	1d1a      	adds	r2, r3, #4
 801aa34:	613a      	str	r2, [r7, #16]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801aa3a:	68bb      	ldr	r3, [r7, #8]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d101      	bne.n	801aa44 <clmt_clust+0x42>
 801aa40:	2300      	movs	r3, #0
 801aa42:	e010      	b.n	801aa66 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801aa44:	697a      	ldr	r2, [r7, #20]
 801aa46:	68bb      	ldr	r3, [r7, #8]
 801aa48:	429a      	cmp	r2, r3
 801aa4a:	d307      	bcc.n	801aa5c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801aa4c:	697a      	ldr	r2, [r7, #20]
 801aa4e:	68bb      	ldr	r3, [r7, #8]
 801aa50:	1ad3      	subs	r3, r2, r3
 801aa52:	617b      	str	r3, [r7, #20]
 801aa54:	693b      	ldr	r3, [r7, #16]
 801aa56:	3304      	adds	r3, #4
 801aa58:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801aa5a:	e7e9      	b.n	801aa30 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801aa5c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801aa5e:	693b      	ldr	r3, [r7, #16]
 801aa60:	681a      	ldr	r2, [r3, #0]
 801aa62:	697b      	ldr	r3, [r7, #20]
 801aa64:	4413      	add	r3, r2
}
 801aa66:	4618      	mov	r0, r3
 801aa68:	371c      	adds	r7, #28
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa70:	4770      	bx	lr

0801aa72 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801aa72:	b580      	push	{r7, lr}
 801aa74:	b086      	sub	sp, #24
 801aa76:	af00      	add	r7, sp, #0
 801aa78:	6078      	str	r0, [r7, #4]
 801aa7a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801aa82:	683b      	ldr	r3, [r7, #0]
 801aa84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801aa88:	d204      	bcs.n	801aa94 <dir_sdi+0x22>
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	f003 031f 	and.w	r3, r3, #31
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d001      	beq.n	801aa98 <dir_sdi+0x26>
		return FR_INT_ERR;
 801aa94:	2302      	movs	r3, #2
 801aa96:	e071      	b.n	801ab7c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	683a      	ldr	r2, [r7, #0]
 801aa9c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	689b      	ldr	r3, [r3, #8]
 801aaa2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801aaa4:	697b      	ldr	r3, [r7, #20]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d106      	bne.n	801aab8 <dir_sdi+0x46>
 801aaaa:	693b      	ldr	r3, [r7, #16]
 801aaac:	781b      	ldrb	r3, [r3, #0]
 801aaae:	2b02      	cmp	r3, #2
 801aab0:	d902      	bls.n	801aab8 <dir_sdi+0x46>
		clst = fs->dirbase;
 801aab2:	693b      	ldr	r3, [r7, #16]
 801aab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aab6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801aab8:	697b      	ldr	r3, [r7, #20]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d10c      	bne.n	801aad8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801aabe:	683b      	ldr	r3, [r7, #0]
 801aac0:	095b      	lsrs	r3, r3, #5
 801aac2:	693a      	ldr	r2, [r7, #16]
 801aac4:	8912      	ldrh	r2, [r2, #8]
 801aac6:	4293      	cmp	r3, r2
 801aac8:	d301      	bcc.n	801aace <dir_sdi+0x5c>
 801aaca:	2302      	movs	r3, #2
 801aacc:	e056      	b.n	801ab7c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801aace:	693b      	ldr	r3, [r7, #16]
 801aad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	61da      	str	r2, [r3, #28]
 801aad6:	e02d      	b.n	801ab34 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801aad8:	693b      	ldr	r3, [r7, #16]
 801aada:	895b      	ldrh	r3, [r3, #10]
 801aadc:	461a      	mov	r2, r3
 801aade:	693b      	ldr	r3, [r7, #16]
 801aae0:	899b      	ldrh	r3, [r3, #12]
 801aae2:	fb03 f302 	mul.w	r3, r3, r2
 801aae6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801aae8:	e019      	b.n	801ab1e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	6979      	ldr	r1, [r7, #20]
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f7ff fca3 	bl	801a43a <get_fat>
 801aaf4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801aaf6:	697b      	ldr	r3, [r7, #20]
 801aaf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aafc:	d101      	bne.n	801ab02 <dir_sdi+0x90>
 801aafe:	2301      	movs	r3, #1
 801ab00:	e03c      	b.n	801ab7c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801ab02:	697b      	ldr	r3, [r7, #20]
 801ab04:	2b01      	cmp	r3, #1
 801ab06:	d904      	bls.n	801ab12 <dir_sdi+0xa0>
 801ab08:	693b      	ldr	r3, [r7, #16]
 801ab0a:	69db      	ldr	r3, [r3, #28]
 801ab0c:	697a      	ldr	r2, [r7, #20]
 801ab0e:	429a      	cmp	r2, r3
 801ab10:	d301      	bcc.n	801ab16 <dir_sdi+0xa4>
 801ab12:	2302      	movs	r3, #2
 801ab14:	e032      	b.n	801ab7c <dir_sdi+0x10a>
			ofs -= csz;
 801ab16:	683a      	ldr	r2, [r7, #0]
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	1ad3      	subs	r3, r2, r3
 801ab1c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801ab1e:	683a      	ldr	r2, [r7, #0]
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	429a      	cmp	r2, r3
 801ab24:	d2e1      	bcs.n	801aaea <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801ab26:	6979      	ldr	r1, [r7, #20]
 801ab28:	6938      	ldr	r0, [r7, #16]
 801ab2a:	f7ff fc67 	bl	801a3fc <clust2sect>
 801ab2e:	4602      	mov	r2, r0
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	697a      	ldr	r2, [r7, #20]
 801ab38:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	69db      	ldr	r3, [r3, #28]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d101      	bne.n	801ab46 <dir_sdi+0xd4>
 801ab42:	2302      	movs	r3, #2
 801ab44:	e01a      	b.n	801ab7c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	69da      	ldr	r2, [r3, #28]
 801ab4a:	693b      	ldr	r3, [r7, #16]
 801ab4c:	899b      	ldrh	r3, [r3, #12]
 801ab4e:	4619      	mov	r1, r3
 801ab50:	683b      	ldr	r3, [r7, #0]
 801ab52:	fbb3 f3f1 	udiv	r3, r3, r1
 801ab56:	441a      	add	r2, r3
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801ab5c:	693b      	ldr	r3, [r7, #16]
 801ab5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801ab62:	693b      	ldr	r3, [r7, #16]
 801ab64:	899b      	ldrh	r3, [r3, #12]
 801ab66:	461a      	mov	r2, r3
 801ab68:	683b      	ldr	r3, [r7, #0]
 801ab6a:	fbb3 f0f2 	udiv	r0, r3, r2
 801ab6e:	fb02 f200 	mul.w	r2, r2, r0
 801ab72:	1a9b      	subs	r3, r3, r2
 801ab74:	18ca      	adds	r2, r1, r3
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801ab7a:	2300      	movs	r3, #0
}
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	3718      	adds	r7, #24
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd80      	pop	{r7, pc}

0801ab84 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b086      	sub	sp, #24
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
 801ab8c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	695b      	ldr	r3, [r3, #20]
 801ab98:	3320      	adds	r3, #32
 801ab9a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	69db      	ldr	r3, [r3, #28]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d003      	beq.n	801abac <dir_next+0x28>
 801aba4:	68bb      	ldr	r3, [r7, #8]
 801aba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801abaa:	d301      	bcc.n	801abb0 <dir_next+0x2c>
 801abac:	2304      	movs	r3, #4
 801abae:	e0bb      	b.n	801ad28 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	899b      	ldrh	r3, [r3, #12]
 801abb4:	461a      	mov	r2, r3
 801abb6:	68bb      	ldr	r3, [r7, #8]
 801abb8:	fbb3 f1f2 	udiv	r1, r3, r2
 801abbc:	fb02 f201 	mul.w	r2, r2, r1
 801abc0:	1a9b      	subs	r3, r3, r2
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	f040 809d 	bne.w	801ad02 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	69db      	ldr	r3, [r3, #28]
 801abcc:	1c5a      	adds	r2, r3, #1
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	699b      	ldr	r3, [r3, #24]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d10b      	bne.n	801abf2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801abda:	68bb      	ldr	r3, [r7, #8]
 801abdc:	095b      	lsrs	r3, r3, #5
 801abde:	68fa      	ldr	r2, [r7, #12]
 801abe0:	8912      	ldrh	r2, [r2, #8]
 801abe2:	4293      	cmp	r3, r2
 801abe4:	f0c0 808d 	bcc.w	801ad02 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	2200      	movs	r2, #0
 801abec:	61da      	str	r2, [r3, #28]
 801abee:	2304      	movs	r3, #4
 801abf0:	e09a      	b.n	801ad28 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	899b      	ldrh	r3, [r3, #12]
 801abf6:	461a      	mov	r2, r3
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	fbb3 f3f2 	udiv	r3, r3, r2
 801abfe:	68fa      	ldr	r2, [r7, #12]
 801ac00:	8952      	ldrh	r2, [r2, #10]
 801ac02:	3a01      	subs	r2, #1
 801ac04:	4013      	ands	r3, r2
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d17b      	bne.n	801ad02 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801ac0a:	687a      	ldr	r2, [r7, #4]
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	699b      	ldr	r3, [r3, #24]
 801ac10:	4619      	mov	r1, r3
 801ac12:	4610      	mov	r0, r2
 801ac14:	f7ff fc11 	bl	801a43a <get_fat>
 801ac18:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801ac1a:	697b      	ldr	r3, [r7, #20]
 801ac1c:	2b01      	cmp	r3, #1
 801ac1e:	d801      	bhi.n	801ac24 <dir_next+0xa0>
 801ac20:	2302      	movs	r3, #2
 801ac22:	e081      	b.n	801ad28 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801ac24:	697b      	ldr	r3, [r7, #20]
 801ac26:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac2a:	d101      	bne.n	801ac30 <dir_next+0xac>
 801ac2c:	2301      	movs	r3, #1
 801ac2e:	e07b      	b.n	801ad28 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	69db      	ldr	r3, [r3, #28]
 801ac34:	697a      	ldr	r2, [r7, #20]
 801ac36:	429a      	cmp	r2, r3
 801ac38:	d359      	bcc.n	801acee <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801ac3a:	683b      	ldr	r3, [r7, #0]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d104      	bne.n	801ac4a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	2200      	movs	r2, #0
 801ac44:	61da      	str	r2, [r3, #28]
 801ac46:	2304      	movs	r3, #4
 801ac48:	e06e      	b.n	801ad28 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801ac4a:	687a      	ldr	r2, [r7, #4]
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	699b      	ldr	r3, [r3, #24]
 801ac50:	4619      	mov	r1, r3
 801ac52:	4610      	mov	r0, r2
 801ac54:	f7ff fe3d 	bl	801a8d2 <create_chain>
 801ac58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801ac5a:	697b      	ldr	r3, [r7, #20]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d101      	bne.n	801ac64 <dir_next+0xe0>
 801ac60:	2307      	movs	r3, #7
 801ac62:	e061      	b.n	801ad28 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801ac64:	697b      	ldr	r3, [r7, #20]
 801ac66:	2b01      	cmp	r3, #1
 801ac68:	d101      	bne.n	801ac6e <dir_next+0xea>
 801ac6a:	2302      	movs	r3, #2
 801ac6c:	e05c      	b.n	801ad28 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801ac6e:	697b      	ldr	r3, [r7, #20]
 801ac70:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac74:	d101      	bne.n	801ac7a <dir_next+0xf6>
 801ac76:	2301      	movs	r3, #1
 801ac78:	e056      	b.n	801ad28 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801ac7a:	68f8      	ldr	r0, [r7, #12]
 801ac7c:	f7ff fadc 	bl	801a238 <sync_window>
 801ac80:	4603      	mov	r3, r0
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d001      	beq.n	801ac8a <dir_next+0x106>
 801ac86:	2301      	movs	r3, #1
 801ac88:	e04e      	b.n	801ad28 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	899b      	ldrh	r3, [r3, #12]
 801ac94:	461a      	mov	r2, r3
 801ac96:	2100      	movs	r1, #0
 801ac98:	f7ff f905 	bl	8019ea6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	613b      	str	r3, [r7, #16]
 801aca0:	6979      	ldr	r1, [r7, #20]
 801aca2:	68f8      	ldr	r0, [r7, #12]
 801aca4:	f7ff fbaa 	bl	801a3fc <clust2sect>
 801aca8:	4602      	mov	r2, r0
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	635a      	str	r2, [r3, #52]	; 0x34
 801acae:	e012      	b.n	801acd6 <dir_next+0x152>
						fs->wflag = 1;
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	2201      	movs	r2, #1
 801acb4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801acb6:	68f8      	ldr	r0, [r7, #12]
 801acb8:	f7ff fabe 	bl	801a238 <sync_window>
 801acbc:	4603      	mov	r3, r0
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d001      	beq.n	801acc6 <dir_next+0x142>
 801acc2:	2301      	movs	r3, #1
 801acc4:	e030      	b.n	801ad28 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801acc6:	693b      	ldr	r3, [r7, #16]
 801acc8:	3301      	adds	r3, #1
 801acca:	613b      	str	r3, [r7, #16]
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801acd0:	1c5a      	adds	r2, r3, #1
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	635a      	str	r2, [r3, #52]	; 0x34
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	895b      	ldrh	r3, [r3, #10]
 801acda:	461a      	mov	r2, r3
 801acdc:	693b      	ldr	r3, [r7, #16]
 801acde:	4293      	cmp	r3, r2
 801ace0:	d3e6      	bcc.n	801acb0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ace6:	693b      	ldr	r3, [r7, #16]
 801ace8:	1ad2      	subs	r2, r2, r3
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	697a      	ldr	r2, [r7, #20]
 801acf2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801acf4:	6979      	ldr	r1, [r7, #20]
 801acf6:	68f8      	ldr	r0, [r7, #12]
 801acf8:	f7ff fb80 	bl	801a3fc <clust2sect>
 801acfc:	4602      	mov	r2, r0
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	68ba      	ldr	r2, [r7, #8]
 801ad06:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	899b      	ldrh	r3, [r3, #12]
 801ad12:	461a      	mov	r2, r3
 801ad14:	68bb      	ldr	r3, [r7, #8]
 801ad16:	fbb3 f0f2 	udiv	r0, r3, r2
 801ad1a:	fb02 f200 	mul.w	r2, r2, r0
 801ad1e:	1a9b      	subs	r3, r3, r2
 801ad20:	18ca      	adds	r2, r1, r3
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801ad26:	2300      	movs	r3, #0
}
 801ad28:	4618      	mov	r0, r3
 801ad2a:	3718      	adds	r7, #24
 801ad2c:	46bd      	mov	sp, r7
 801ad2e:	bd80      	pop	{r7, pc}

0801ad30 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801ad30:	b580      	push	{r7, lr}
 801ad32:	b086      	sub	sp, #24
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	6078      	str	r0, [r7, #4]
 801ad38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801ad40:	2100      	movs	r1, #0
 801ad42:	6878      	ldr	r0, [r7, #4]
 801ad44:	f7ff fe95 	bl	801aa72 <dir_sdi>
 801ad48:	4603      	mov	r3, r0
 801ad4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801ad4c:	7dfb      	ldrb	r3, [r7, #23]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d12b      	bne.n	801adaa <dir_alloc+0x7a>
		n = 0;
 801ad52:	2300      	movs	r3, #0
 801ad54:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	69db      	ldr	r3, [r3, #28]
 801ad5a:	4619      	mov	r1, r3
 801ad5c:	68f8      	ldr	r0, [r7, #12]
 801ad5e:	f7ff faaf 	bl	801a2c0 <move_window>
 801ad62:	4603      	mov	r3, r0
 801ad64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ad66:	7dfb      	ldrb	r3, [r7, #23]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d11d      	bne.n	801ada8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	6a1b      	ldr	r3, [r3, #32]
 801ad70:	781b      	ldrb	r3, [r3, #0]
 801ad72:	2be5      	cmp	r3, #229	; 0xe5
 801ad74:	d004      	beq.n	801ad80 <dir_alloc+0x50>
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	6a1b      	ldr	r3, [r3, #32]
 801ad7a:	781b      	ldrb	r3, [r3, #0]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d107      	bne.n	801ad90 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801ad80:	693b      	ldr	r3, [r7, #16]
 801ad82:	3301      	adds	r3, #1
 801ad84:	613b      	str	r3, [r7, #16]
 801ad86:	693a      	ldr	r2, [r7, #16]
 801ad88:	683b      	ldr	r3, [r7, #0]
 801ad8a:	429a      	cmp	r2, r3
 801ad8c:	d102      	bne.n	801ad94 <dir_alloc+0x64>
 801ad8e:	e00c      	b.n	801adaa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801ad90:	2300      	movs	r3, #0
 801ad92:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801ad94:	2101      	movs	r1, #1
 801ad96:	6878      	ldr	r0, [r7, #4]
 801ad98:	f7ff fef4 	bl	801ab84 <dir_next>
 801ad9c:	4603      	mov	r3, r0
 801ad9e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801ada0:	7dfb      	ldrb	r3, [r7, #23]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d0d7      	beq.n	801ad56 <dir_alloc+0x26>
 801ada6:	e000      	b.n	801adaa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801ada8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801adaa:	7dfb      	ldrb	r3, [r7, #23]
 801adac:	2b04      	cmp	r3, #4
 801adae:	d101      	bne.n	801adb4 <dir_alloc+0x84>
 801adb0:	2307      	movs	r3, #7
 801adb2:	75fb      	strb	r3, [r7, #23]
	return res;
 801adb4:	7dfb      	ldrb	r3, [r7, #23]
}
 801adb6:	4618      	mov	r0, r3
 801adb8:	3718      	adds	r7, #24
 801adba:	46bd      	mov	sp, r7
 801adbc:	bd80      	pop	{r7, pc}

0801adbe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801adbe:	b580      	push	{r7, lr}
 801adc0:	b084      	sub	sp, #16
 801adc2:	af00      	add	r7, sp, #0
 801adc4:	6078      	str	r0, [r7, #4]
 801adc6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801adc8:	683b      	ldr	r3, [r7, #0]
 801adca:	331a      	adds	r3, #26
 801adcc:	4618      	mov	r0, r3
 801adce:	f7fe ffc7 	bl	8019d60 <ld_word>
 801add2:	4603      	mov	r3, r0
 801add4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	781b      	ldrb	r3, [r3, #0]
 801adda:	2b03      	cmp	r3, #3
 801addc:	d109      	bne.n	801adf2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801adde:	683b      	ldr	r3, [r7, #0]
 801ade0:	3314      	adds	r3, #20
 801ade2:	4618      	mov	r0, r3
 801ade4:	f7fe ffbc 	bl	8019d60 <ld_word>
 801ade8:	4603      	mov	r3, r0
 801adea:	041b      	lsls	r3, r3, #16
 801adec:	68fa      	ldr	r2, [r7, #12]
 801adee:	4313      	orrs	r3, r2
 801adf0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801adf2:	68fb      	ldr	r3, [r7, #12]
}
 801adf4:	4618      	mov	r0, r3
 801adf6:	3710      	adds	r7, #16
 801adf8:	46bd      	mov	sp, r7
 801adfa:	bd80      	pop	{r7, pc}

0801adfc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b084      	sub	sp, #16
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	60f8      	str	r0, [r7, #12]
 801ae04:	60b9      	str	r1, [r7, #8]
 801ae06:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801ae08:	68bb      	ldr	r3, [r7, #8]
 801ae0a:	331a      	adds	r3, #26
 801ae0c:	687a      	ldr	r2, [r7, #4]
 801ae0e:	b292      	uxth	r2, r2
 801ae10:	4611      	mov	r1, r2
 801ae12:	4618      	mov	r0, r3
 801ae14:	f7fe ffdf 	bl	8019dd6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	781b      	ldrb	r3, [r3, #0]
 801ae1c:	2b03      	cmp	r3, #3
 801ae1e:	d109      	bne.n	801ae34 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801ae20:	68bb      	ldr	r3, [r7, #8]
 801ae22:	f103 0214 	add.w	r2, r3, #20
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	0c1b      	lsrs	r3, r3, #16
 801ae2a:	b29b      	uxth	r3, r3
 801ae2c:	4619      	mov	r1, r3
 801ae2e:	4610      	mov	r0, r2
 801ae30:	f7fe ffd1 	bl	8019dd6 <st_word>
	}
}
 801ae34:	bf00      	nop
 801ae36:	3710      	adds	r7, #16
 801ae38:	46bd      	mov	sp, r7
 801ae3a:	bd80      	pop	{r7, pc}

0801ae3c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801ae3c:	b590      	push	{r4, r7, lr}
 801ae3e:	b087      	sub	sp, #28
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
 801ae44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801ae46:	683b      	ldr	r3, [r7, #0]
 801ae48:	331a      	adds	r3, #26
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	f7fe ff88 	bl	8019d60 <ld_word>
 801ae50:	4603      	mov	r3, r0
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d001      	beq.n	801ae5a <cmp_lfn+0x1e>
 801ae56:	2300      	movs	r3, #0
 801ae58:	e059      	b.n	801af0e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	781b      	ldrb	r3, [r3, #0]
 801ae5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ae62:	1e5a      	subs	r2, r3, #1
 801ae64:	4613      	mov	r3, r2
 801ae66:	005b      	lsls	r3, r3, #1
 801ae68:	4413      	add	r3, r2
 801ae6a:	009b      	lsls	r3, r3, #2
 801ae6c:	4413      	add	r3, r2
 801ae6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801ae70:	2301      	movs	r3, #1
 801ae72:	81fb      	strh	r3, [r7, #14]
 801ae74:	2300      	movs	r3, #0
 801ae76:	613b      	str	r3, [r7, #16]
 801ae78:	e033      	b.n	801aee2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801ae7a:	4a27      	ldr	r2, [pc, #156]	; (801af18 <cmp_lfn+0xdc>)
 801ae7c:	693b      	ldr	r3, [r7, #16]
 801ae7e:	4413      	add	r3, r2
 801ae80:	781b      	ldrb	r3, [r3, #0]
 801ae82:	461a      	mov	r2, r3
 801ae84:	683b      	ldr	r3, [r7, #0]
 801ae86:	4413      	add	r3, r2
 801ae88:	4618      	mov	r0, r3
 801ae8a:	f7fe ff69 	bl	8019d60 <ld_word>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801ae92:	89fb      	ldrh	r3, [r7, #14]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d01a      	beq.n	801aece <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801ae98:	697b      	ldr	r3, [r7, #20]
 801ae9a:	2bfe      	cmp	r3, #254	; 0xfe
 801ae9c:	d812      	bhi.n	801aec4 <cmp_lfn+0x88>
 801ae9e:	89bb      	ldrh	r3, [r7, #12]
 801aea0:	4618      	mov	r0, r3
 801aea2:	f002 fcdb 	bl	801d85c <ff_wtoupper>
 801aea6:	4603      	mov	r3, r0
 801aea8:	461c      	mov	r4, r3
 801aeaa:	697b      	ldr	r3, [r7, #20]
 801aeac:	1c5a      	adds	r2, r3, #1
 801aeae:	617a      	str	r2, [r7, #20]
 801aeb0:	005b      	lsls	r3, r3, #1
 801aeb2:	687a      	ldr	r2, [r7, #4]
 801aeb4:	4413      	add	r3, r2
 801aeb6:	881b      	ldrh	r3, [r3, #0]
 801aeb8:	4618      	mov	r0, r3
 801aeba:	f002 fccf 	bl	801d85c <ff_wtoupper>
 801aebe:	4603      	mov	r3, r0
 801aec0:	429c      	cmp	r4, r3
 801aec2:	d001      	beq.n	801aec8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801aec4:	2300      	movs	r3, #0
 801aec6:	e022      	b.n	801af0e <cmp_lfn+0xd2>
			}
			wc = uc;
 801aec8:	89bb      	ldrh	r3, [r7, #12]
 801aeca:	81fb      	strh	r3, [r7, #14]
 801aecc:	e006      	b.n	801aedc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801aece:	89bb      	ldrh	r3, [r7, #12]
 801aed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aed4:	4293      	cmp	r3, r2
 801aed6:	d001      	beq.n	801aedc <cmp_lfn+0xa0>
 801aed8:	2300      	movs	r3, #0
 801aeda:	e018      	b.n	801af0e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801aedc:	693b      	ldr	r3, [r7, #16]
 801aede:	3301      	adds	r3, #1
 801aee0:	613b      	str	r3, [r7, #16]
 801aee2:	693b      	ldr	r3, [r7, #16]
 801aee4:	2b0c      	cmp	r3, #12
 801aee6:	d9c8      	bls.n	801ae7a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801aee8:	683b      	ldr	r3, [r7, #0]
 801aeea:	781b      	ldrb	r3, [r3, #0]
 801aeec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d00b      	beq.n	801af0c <cmp_lfn+0xd0>
 801aef4:	89fb      	ldrh	r3, [r7, #14]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d008      	beq.n	801af0c <cmp_lfn+0xd0>
 801aefa:	697b      	ldr	r3, [r7, #20]
 801aefc:	005b      	lsls	r3, r3, #1
 801aefe:	687a      	ldr	r2, [r7, #4]
 801af00:	4413      	add	r3, r2
 801af02:	881b      	ldrh	r3, [r3, #0]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d001      	beq.n	801af0c <cmp_lfn+0xd0>
 801af08:	2300      	movs	r3, #0
 801af0a:	e000      	b.n	801af0e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801af0c:	2301      	movs	r3, #1
}
 801af0e:	4618      	mov	r0, r3
 801af10:	371c      	adds	r7, #28
 801af12:	46bd      	mov	sp, r7
 801af14:	bd90      	pop	{r4, r7, pc}
 801af16:	bf00      	nop
 801af18:	08022f8c 	.word	0x08022f8c

0801af1c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b086      	sub	sp, #24
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
 801af24:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801af26:	683b      	ldr	r3, [r7, #0]
 801af28:	331a      	adds	r3, #26
 801af2a:	4618      	mov	r0, r3
 801af2c:	f7fe ff18 	bl	8019d60 <ld_word>
 801af30:	4603      	mov	r3, r0
 801af32:	2b00      	cmp	r3, #0
 801af34:	d001      	beq.n	801af3a <pick_lfn+0x1e>
 801af36:	2300      	movs	r3, #0
 801af38:	e04d      	b.n	801afd6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801af3a:	683b      	ldr	r3, [r7, #0]
 801af3c:	781b      	ldrb	r3, [r3, #0]
 801af3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801af42:	1e5a      	subs	r2, r3, #1
 801af44:	4613      	mov	r3, r2
 801af46:	005b      	lsls	r3, r3, #1
 801af48:	4413      	add	r3, r2
 801af4a:	009b      	lsls	r3, r3, #2
 801af4c:	4413      	add	r3, r2
 801af4e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801af50:	2301      	movs	r3, #1
 801af52:	81fb      	strh	r3, [r7, #14]
 801af54:	2300      	movs	r3, #0
 801af56:	613b      	str	r3, [r7, #16]
 801af58:	e028      	b.n	801afac <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801af5a:	4a21      	ldr	r2, [pc, #132]	; (801afe0 <pick_lfn+0xc4>)
 801af5c:	693b      	ldr	r3, [r7, #16]
 801af5e:	4413      	add	r3, r2
 801af60:	781b      	ldrb	r3, [r3, #0]
 801af62:	461a      	mov	r2, r3
 801af64:	683b      	ldr	r3, [r7, #0]
 801af66:	4413      	add	r3, r2
 801af68:	4618      	mov	r0, r3
 801af6a:	f7fe fef9 	bl	8019d60 <ld_word>
 801af6e:	4603      	mov	r3, r0
 801af70:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801af72:	89fb      	ldrh	r3, [r7, #14]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d00f      	beq.n	801af98 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801af78:	697b      	ldr	r3, [r7, #20]
 801af7a:	2bfe      	cmp	r3, #254	; 0xfe
 801af7c:	d901      	bls.n	801af82 <pick_lfn+0x66>
 801af7e:	2300      	movs	r3, #0
 801af80:	e029      	b.n	801afd6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801af82:	89bb      	ldrh	r3, [r7, #12]
 801af84:	81fb      	strh	r3, [r7, #14]
 801af86:	697b      	ldr	r3, [r7, #20]
 801af88:	1c5a      	adds	r2, r3, #1
 801af8a:	617a      	str	r2, [r7, #20]
 801af8c:	005b      	lsls	r3, r3, #1
 801af8e:	687a      	ldr	r2, [r7, #4]
 801af90:	4413      	add	r3, r2
 801af92:	89fa      	ldrh	r2, [r7, #14]
 801af94:	801a      	strh	r2, [r3, #0]
 801af96:	e006      	b.n	801afa6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801af98:	89bb      	ldrh	r3, [r7, #12]
 801af9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af9e:	4293      	cmp	r3, r2
 801afa0:	d001      	beq.n	801afa6 <pick_lfn+0x8a>
 801afa2:	2300      	movs	r3, #0
 801afa4:	e017      	b.n	801afd6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801afa6:	693b      	ldr	r3, [r7, #16]
 801afa8:	3301      	adds	r3, #1
 801afaa:	613b      	str	r3, [r7, #16]
 801afac:	693b      	ldr	r3, [r7, #16]
 801afae:	2b0c      	cmp	r3, #12
 801afb0:	d9d3      	bls.n	801af5a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801afb2:	683b      	ldr	r3, [r7, #0]
 801afb4:	781b      	ldrb	r3, [r3, #0]
 801afb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d00a      	beq.n	801afd4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801afbe:	697b      	ldr	r3, [r7, #20]
 801afc0:	2bfe      	cmp	r3, #254	; 0xfe
 801afc2:	d901      	bls.n	801afc8 <pick_lfn+0xac>
 801afc4:	2300      	movs	r3, #0
 801afc6:	e006      	b.n	801afd6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801afc8:	697b      	ldr	r3, [r7, #20]
 801afca:	005b      	lsls	r3, r3, #1
 801afcc:	687a      	ldr	r2, [r7, #4]
 801afce:	4413      	add	r3, r2
 801afd0:	2200      	movs	r2, #0
 801afd2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801afd4:	2301      	movs	r3, #1
}
 801afd6:	4618      	mov	r0, r3
 801afd8:	3718      	adds	r7, #24
 801afda:	46bd      	mov	sp, r7
 801afdc:	bd80      	pop	{r7, pc}
 801afde:	bf00      	nop
 801afe0:	08022f8c 	.word	0x08022f8c

0801afe4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b088      	sub	sp, #32
 801afe8:	af00      	add	r7, sp, #0
 801afea:	60f8      	str	r0, [r7, #12]
 801afec:	60b9      	str	r1, [r7, #8]
 801afee:	4611      	mov	r1, r2
 801aff0:	461a      	mov	r2, r3
 801aff2:	460b      	mov	r3, r1
 801aff4:	71fb      	strb	r3, [r7, #7]
 801aff6:	4613      	mov	r3, r2
 801aff8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801affa:	68bb      	ldr	r3, [r7, #8]
 801affc:	330d      	adds	r3, #13
 801affe:	79ba      	ldrb	r2, [r7, #6]
 801b000:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801b002:	68bb      	ldr	r3, [r7, #8]
 801b004:	330b      	adds	r3, #11
 801b006:	220f      	movs	r2, #15
 801b008:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801b00a:	68bb      	ldr	r3, [r7, #8]
 801b00c:	330c      	adds	r3, #12
 801b00e:	2200      	movs	r2, #0
 801b010:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801b012:	68bb      	ldr	r3, [r7, #8]
 801b014:	331a      	adds	r3, #26
 801b016:	2100      	movs	r1, #0
 801b018:	4618      	mov	r0, r3
 801b01a:	f7fe fedc 	bl	8019dd6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801b01e:	79fb      	ldrb	r3, [r7, #7]
 801b020:	1e5a      	subs	r2, r3, #1
 801b022:	4613      	mov	r3, r2
 801b024:	005b      	lsls	r3, r3, #1
 801b026:	4413      	add	r3, r2
 801b028:	009b      	lsls	r3, r3, #2
 801b02a:	4413      	add	r3, r2
 801b02c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801b02e:	2300      	movs	r3, #0
 801b030:	82fb      	strh	r3, [r7, #22]
 801b032:	2300      	movs	r3, #0
 801b034:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b036:	8afb      	ldrh	r3, [r7, #22]
 801b038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b03c:	4293      	cmp	r3, r2
 801b03e:	d007      	beq.n	801b050 <put_lfn+0x6c>
 801b040:	69fb      	ldr	r3, [r7, #28]
 801b042:	1c5a      	adds	r2, r3, #1
 801b044:	61fa      	str	r2, [r7, #28]
 801b046:	005b      	lsls	r3, r3, #1
 801b048:	68fa      	ldr	r2, [r7, #12]
 801b04a:	4413      	add	r3, r2
 801b04c:	881b      	ldrh	r3, [r3, #0]
 801b04e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801b050:	4a17      	ldr	r2, [pc, #92]	; (801b0b0 <put_lfn+0xcc>)
 801b052:	69bb      	ldr	r3, [r7, #24]
 801b054:	4413      	add	r3, r2
 801b056:	781b      	ldrb	r3, [r3, #0]
 801b058:	461a      	mov	r2, r3
 801b05a:	68bb      	ldr	r3, [r7, #8]
 801b05c:	4413      	add	r3, r2
 801b05e:	8afa      	ldrh	r2, [r7, #22]
 801b060:	4611      	mov	r1, r2
 801b062:	4618      	mov	r0, r3
 801b064:	f7fe feb7 	bl	8019dd6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b068:	8afb      	ldrh	r3, [r7, #22]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d102      	bne.n	801b074 <put_lfn+0x90>
 801b06e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b072:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801b074:	69bb      	ldr	r3, [r7, #24]
 801b076:	3301      	adds	r3, #1
 801b078:	61bb      	str	r3, [r7, #24]
 801b07a:	69bb      	ldr	r3, [r7, #24]
 801b07c:	2b0c      	cmp	r3, #12
 801b07e:	d9da      	bls.n	801b036 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801b080:	8afb      	ldrh	r3, [r7, #22]
 801b082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b086:	4293      	cmp	r3, r2
 801b088:	d006      	beq.n	801b098 <put_lfn+0xb4>
 801b08a:	69fb      	ldr	r3, [r7, #28]
 801b08c:	005b      	lsls	r3, r3, #1
 801b08e:	68fa      	ldr	r2, [r7, #12]
 801b090:	4413      	add	r3, r2
 801b092:	881b      	ldrh	r3, [r3, #0]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d103      	bne.n	801b0a0 <put_lfn+0xbc>
 801b098:	79fb      	ldrb	r3, [r7, #7]
 801b09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b09e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801b0a0:	68bb      	ldr	r3, [r7, #8]
 801b0a2:	79fa      	ldrb	r2, [r7, #7]
 801b0a4:	701a      	strb	r2, [r3, #0]
}
 801b0a6:	bf00      	nop
 801b0a8:	3720      	adds	r7, #32
 801b0aa:	46bd      	mov	sp, r7
 801b0ac:	bd80      	pop	{r7, pc}
 801b0ae:	bf00      	nop
 801b0b0:	08022f8c 	.word	0x08022f8c

0801b0b4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b08c      	sub	sp, #48	; 0x30
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	60f8      	str	r0, [r7, #12]
 801b0bc:	60b9      	str	r1, [r7, #8]
 801b0be:	607a      	str	r2, [r7, #4]
 801b0c0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801b0c2:	220b      	movs	r2, #11
 801b0c4:	68b9      	ldr	r1, [r7, #8]
 801b0c6:	68f8      	ldr	r0, [r7, #12]
 801b0c8:	f7fe fecc 	bl	8019e64 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801b0cc:	683b      	ldr	r3, [r7, #0]
 801b0ce:	2b05      	cmp	r3, #5
 801b0d0:	d929      	bls.n	801b126 <gen_numname+0x72>
		sr = seq;
 801b0d2:	683b      	ldr	r3, [r7, #0]
 801b0d4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801b0d6:	e020      	b.n	801b11a <gen_numname+0x66>
			wc = *lfn++;
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	1c9a      	adds	r2, r3, #2
 801b0dc:	607a      	str	r2, [r7, #4]
 801b0de:	881b      	ldrh	r3, [r3, #0]
 801b0e0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	62bb      	str	r3, [r7, #40]	; 0x28
 801b0e6:	e015      	b.n	801b114 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801b0e8:	69fb      	ldr	r3, [r7, #28]
 801b0ea:	005a      	lsls	r2, r3, #1
 801b0ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b0ee:	f003 0301 	and.w	r3, r3, #1
 801b0f2:	4413      	add	r3, r2
 801b0f4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801b0f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b0f8:	085b      	lsrs	r3, r3, #1
 801b0fa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801b0fc:	69fb      	ldr	r3, [r7, #28]
 801b0fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b102:	2b00      	cmp	r3, #0
 801b104:	d003      	beq.n	801b10e <gen_numname+0x5a>
 801b106:	69fa      	ldr	r2, [r7, #28]
 801b108:	4b31      	ldr	r3, [pc, #196]	; (801b1d0 <gen_numname+0x11c>)
 801b10a:	4053      	eors	r3, r2
 801b10c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b110:	3301      	adds	r3, #1
 801b112:	62bb      	str	r3, [r7, #40]	; 0x28
 801b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b116:	2b0f      	cmp	r3, #15
 801b118:	d9e6      	bls.n	801b0e8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	881b      	ldrh	r3, [r3, #0]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d1da      	bne.n	801b0d8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801b122:	69fb      	ldr	r3, [r7, #28]
 801b124:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801b126:	2307      	movs	r3, #7
 801b128:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801b12a:	683b      	ldr	r3, [r7, #0]
 801b12c:	b2db      	uxtb	r3, r3
 801b12e:	f003 030f 	and.w	r3, r3, #15
 801b132:	b2db      	uxtb	r3, r3
 801b134:	3330      	adds	r3, #48	; 0x30
 801b136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801b13a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b13e:	2b39      	cmp	r3, #57	; 0x39
 801b140:	d904      	bls.n	801b14c <gen_numname+0x98>
 801b142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b146:	3307      	adds	r3, #7
 801b148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b14e:	1e5a      	subs	r2, r3, #1
 801b150:	62ba      	str	r2, [r7, #40]	; 0x28
 801b152:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b156:	4413      	add	r3, r2
 801b158:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b15c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801b160:	683b      	ldr	r3, [r7, #0]
 801b162:	091b      	lsrs	r3, r3, #4
 801b164:	603b      	str	r3, [r7, #0]
	} while (seq);
 801b166:	683b      	ldr	r3, [r7, #0]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d1de      	bne.n	801b12a <gen_numname+0x76>
	ns[i] = '~';
 801b16c:	f107 0214 	add.w	r2, r7, #20
 801b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b172:	4413      	add	r3, r2
 801b174:	227e      	movs	r2, #126	; 0x7e
 801b176:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b178:	2300      	movs	r3, #0
 801b17a:	627b      	str	r3, [r7, #36]	; 0x24
 801b17c:	e002      	b.n	801b184 <gen_numname+0xd0>
 801b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b180:	3301      	adds	r3, #1
 801b182:	627b      	str	r3, [r7, #36]	; 0x24
 801b184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b188:	429a      	cmp	r2, r3
 801b18a:	d205      	bcs.n	801b198 <gen_numname+0xe4>
 801b18c:	68fa      	ldr	r2, [r7, #12]
 801b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b190:	4413      	add	r3, r2
 801b192:	781b      	ldrb	r3, [r3, #0]
 801b194:	2b20      	cmp	r3, #32
 801b196:	d1f2      	bne.n	801b17e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b19a:	2b07      	cmp	r3, #7
 801b19c:	d808      	bhi.n	801b1b0 <gen_numname+0xfc>
 801b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1a0:	1c5a      	adds	r2, r3, #1
 801b1a2:	62ba      	str	r2, [r7, #40]	; 0x28
 801b1a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b1a8:	4413      	add	r3, r2
 801b1aa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801b1ae:	e000      	b.n	801b1b2 <gen_numname+0xfe>
 801b1b0:	2120      	movs	r1, #32
 801b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b4:	1c5a      	adds	r2, r3, #1
 801b1b6:	627a      	str	r2, [r7, #36]	; 0x24
 801b1b8:	68fa      	ldr	r2, [r7, #12]
 801b1ba:	4413      	add	r3, r2
 801b1bc:	460a      	mov	r2, r1
 801b1be:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1c2:	2b07      	cmp	r3, #7
 801b1c4:	d9e8      	bls.n	801b198 <gen_numname+0xe4>
}
 801b1c6:	bf00      	nop
 801b1c8:	3730      	adds	r7, #48	; 0x30
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	bd80      	pop	{r7, pc}
 801b1ce:	bf00      	nop
 801b1d0:	00011021 	.word	0x00011021

0801b1d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801b1d4:	b480      	push	{r7}
 801b1d6:	b085      	sub	sp, #20
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801b1dc:	2300      	movs	r3, #0
 801b1de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801b1e0:	230b      	movs	r3, #11
 801b1e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801b1e4:	7bfb      	ldrb	r3, [r7, #15]
 801b1e6:	b2da      	uxtb	r2, r3
 801b1e8:	0852      	lsrs	r2, r2, #1
 801b1ea:	01db      	lsls	r3, r3, #7
 801b1ec:	4313      	orrs	r3, r2
 801b1ee:	b2da      	uxtb	r2, r3
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	1c59      	adds	r1, r3, #1
 801b1f4:	6079      	str	r1, [r7, #4]
 801b1f6:	781b      	ldrb	r3, [r3, #0]
 801b1f8:	4413      	add	r3, r2
 801b1fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801b1fc:	68bb      	ldr	r3, [r7, #8]
 801b1fe:	3b01      	subs	r3, #1
 801b200:	60bb      	str	r3, [r7, #8]
 801b202:	68bb      	ldr	r3, [r7, #8]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d1ed      	bne.n	801b1e4 <sum_sfn+0x10>
	return sum;
 801b208:	7bfb      	ldrb	r3, [r7, #15]
}
 801b20a:	4618      	mov	r0, r3
 801b20c:	3714      	adds	r7, #20
 801b20e:	46bd      	mov	sp, r7
 801b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b214:	4770      	bx	lr

0801b216 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801b216:	b580      	push	{r7, lr}
 801b218:	b086      	sub	sp, #24
 801b21a:	af00      	add	r7, sp, #0
 801b21c:	6078      	str	r0, [r7, #4]
 801b21e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801b220:	2304      	movs	r3, #4
 801b222:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801b22a:	23ff      	movs	r3, #255	; 0xff
 801b22c:	757b      	strb	r3, [r7, #21]
 801b22e:	23ff      	movs	r3, #255	; 0xff
 801b230:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801b232:	e081      	b.n	801b338 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	69db      	ldr	r3, [r3, #28]
 801b238:	4619      	mov	r1, r3
 801b23a:	6938      	ldr	r0, [r7, #16]
 801b23c:	f7ff f840 	bl	801a2c0 <move_window>
 801b240:	4603      	mov	r3, r0
 801b242:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b244:	7dfb      	ldrb	r3, [r7, #23]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d17c      	bne.n	801b344 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	6a1b      	ldr	r3, [r3, #32]
 801b24e:	781b      	ldrb	r3, [r3, #0]
 801b250:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801b252:	7dbb      	ldrb	r3, [r7, #22]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d102      	bne.n	801b25e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801b258:	2304      	movs	r3, #4
 801b25a:	75fb      	strb	r3, [r7, #23]
 801b25c:	e077      	b.n	801b34e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	6a1b      	ldr	r3, [r3, #32]
 801b262:	330b      	adds	r3, #11
 801b264:	781b      	ldrb	r3, [r3, #0]
 801b266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b26a:	73fb      	strb	r3, [r7, #15]
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	7bfa      	ldrb	r2, [r7, #15]
 801b270:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801b272:	7dbb      	ldrb	r3, [r7, #22]
 801b274:	2be5      	cmp	r3, #229	; 0xe5
 801b276:	d00e      	beq.n	801b296 <dir_read+0x80>
 801b278:	7dbb      	ldrb	r3, [r7, #22]
 801b27a:	2b2e      	cmp	r3, #46	; 0x2e
 801b27c:	d00b      	beq.n	801b296 <dir_read+0x80>
 801b27e:	7bfb      	ldrb	r3, [r7, #15]
 801b280:	f023 0320 	bic.w	r3, r3, #32
 801b284:	2b08      	cmp	r3, #8
 801b286:	bf0c      	ite	eq
 801b288:	2301      	moveq	r3, #1
 801b28a:	2300      	movne	r3, #0
 801b28c:	b2db      	uxtb	r3, r3
 801b28e:	461a      	mov	r2, r3
 801b290:	683b      	ldr	r3, [r7, #0]
 801b292:	4293      	cmp	r3, r2
 801b294:	d002      	beq.n	801b29c <dir_read+0x86>
				ord = 0xFF;
 801b296:	23ff      	movs	r3, #255	; 0xff
 801b298:	757b      	strb	r3, [r7, #21]
 801b29a:	e044      	b.n	801b326 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801b29c:	7bfb      	ldrb	r3, [r7, #15]
 801b29e:	2b0f      	cmp	r3, #15
 801b2a0:	d12f      	bne.n	801b302 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801b2a2:	7dbb      	ldrb	r3, [r7, #22]
 801b2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d00d      	beq.n	801b2c8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	6a1b      	ldr	r3, [r3, #32]
 801b2b0:	7b5b      	ldrb	r3, [r3, #13]
 801b2b2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801b2b4:	7dbb      	ldrb	r3, [r7, #22]
 801b2b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b2ba:	75bb      	strb	r3, [r7, #22]
 801b2bc:	7dbb      	ldrb	r3, [r7, #22]
 801b2be:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	695a      	ldr	r2, [r3, #20]
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801b2c8:	7dba      	ldrb	r2, [r7, #22]
 801b2ca:	7d7b      	ldrb	r3, [r7, #21]
 801b2cc:	429a      	cmp	r2, r3
 801b2ce:	d115      	bne.n	801b2fc <dir_read+0xe6>
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	6a1b      	ldr	r3, [r3, #32]
 801b2d4:	330d      	adds	r3, #13
 801b2d6:	781b      	ldrb	r3, [r3, #0]
 801b2d8:	7d3a      	ldrb	r2, [r7, #20]
 801b2da:	429a      	cmp	r2, r3
 801b2dc:	d10e      	bne.n	801b2fc <dir_read+0xe6>
 801b2de:	693b      	ldr	r3, [r7, #16]
 801b2e0:	691a      	ldr	r2, [r3, #16]
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	6a1b      	ldr	r3, [r3, #32]
 801b2e6:	4619      	mov	r1, r3
 801b2e8:	4610      	mov	r0, r2
 801b2ea:	f7ff fe17 	bl	801af1c <pick_lfn>
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d003      	beq.n	801b2fc <dir_read+0xe6>
 801b2f4:	7d7b      	ldrb	r3, [r7, #21]
 801b2f6:	3b01      	subs	r3, #1
 801b2f8:	b2db      	uxtb	r3, r3
 801b2fa:	e000      	b.n	801b2fe <dir_read+0xe8>
 801b2fc:	23ff      	movs	r3, #255	; 0xff
 801b2fe:	757b      	strb	r3, [r7, #21]
 801b300:	e011      	b.n	801b326 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801b302:	7d7b      	ldrb	r3, [r7, #21]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d109      	bne.n	801b31c <dir_read+0x106>
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	6a1b      	ldr	r3, [r3, #32]
 801b30c:	4618      	mov	r0, r3
 801b30e:	f7ff ff61 	bl	801b1d4 <sum_sfn>
 801b312:	4603      	mov	r3, r0
 801b314:	461a      	mov	r2, r3
 801b316:	7d3b      	ldrb	r3, [r7, #20]
 801b318:	4293      	cmp	r3, r2
 801b31a:	d015      	beq.n	801b348 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	f04f 32ff 	mov.w	r2, #4294967295
 801b322:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 801b324:	e010      	b.n	801b348 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801b326:	2100      	movs	r1, #0
 801b328:	6878      	ldr	r0, [r7, #4]
 801b32a:	f7ff fc2b 	bl	801ab84 <dir_next>
 801b32e:	4603      	mov	r3, r0
 801b330:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b332:	7dfb      	ldrb	r3, [r7, #23]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d109      	bne.n	801b34c <dir_read+0x136>
	while (dp->sect) {
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	69db      	ldr	r3, [r3, #28]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	f47f af79 	bne.w	801b234 <dir_read+0x1e>
 801b342:	e004      	b.n	801b34e <dir_read+0x138>
		if (res != FR_OK) break;
 801b344:	bf00      	nop
 801b346:	e002      	b.n	801b34e <dir_read+0x138>
					break;
 801b348:	bf00      	nop
 801b34a:	e000      	b.n	801b34e <dir_read+0x138>
		if (res != FR_OK) break;
 801b34c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801b34e:	7dfb      	ldrb	r3, [r7, #23]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d002      	beq.n	801b35a <dir_read+0x144>
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	2200      	movs	r2, #0
 801b358:	61da      	str	r2, [r3, #28]
	return res;
 801b35a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b35c:	4618      	mov	r0, r3
 801b35e:	3718      	adds	r7, #24
 801b360:	46bd      	mov	sp, r7
 801b362:	bd80      	pop	{r7, pc}

0801b364 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801b364:	b580      	push	{r7, lr}
 801b366:	b086      	sub	sp, #24
 801b368:	af00      	add	r7, sp, #0
 801b36a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801b372:	2100      	movs	r1, #0
 801b374:	6878      	ldr	r0, [r7, #4]
 801b376:	f7ff fb7c 	bl	801aa72 <dir_sdi>
 801b37a:	4603      	mov	r3, r0
 801b37c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801b37e:	7dfb      	ldrb	r3, [r7, #23]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d001      	beq.n	801b388 <dir_find+0x24>
 801b384:	7dfb      	ldrb	r3, [r7, #23]
 801b386:	e0a9      	b.n	801b4dc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801b388:	23ff      	movs	r3, #255	; 0xff
 801b38a:	753b      	strb	r3, [r7, #20]
 801b38c:	7d3b      	ldrb	r3, [r7, #20]
 801b38e:	757b      	strb	r3, [r7, #21]
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	f04f 32ff 	mov.w	r2, #4294967295
 801b396:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	69db      	ldr	r3, [r3, #28]
 801b39c:	4619      	mov	r1, r3
 801b39e:	6938      	ldr	r0, [r7, #16]
 801b3a0:	f7fe ff8e 	bl	801a2c0 <move_window>
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b3a8:	7dfb      	ldrb	r3, [r7, #23]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	f040 8090 	bne.w	801b4d0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	6a1b      	ldr	r3, [r3, #32]
 801b3b4:	781b      	ldrb	r3, [r3, #0]
 801b3b6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801b3b8:	7dbb      	ldrb	r3, [r7, #22]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d102      	bne.n	801b3c4 <dir_find+0x60>
 801b3be:	2304      	movs	r3, #4
 801b3c0:	75fb      	strb	r3, [r7, #23]
 801b3c2:	e08a      	b.n	801b4da <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	6a1b      	ldr	r3, [r3, #32]
 801b3c8:	330b      	adds	r3, #11
 801b3ca:	781b      	ldrb	r3, [r3, #0]
 801b3cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b3d0:	73fb      	strb	r3, [r7, #15]
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	7bfa      	ldrb	r2, [r7, #15]
 801b3d6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801b3d8:	7dbb      	ldrb	r3, [r7, #22]
 801b3da:	2be5      	cmp	r3, #229	; 0xe5
 801b3dc:	d007      	beq.n	801b3ee <dir_find+0x8a>
 801b3de:	7bfb      	ldrb	r3, [r7, #15]
 801b3e0:	f003 0308 	and.w	r3, r3, #8
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d009      	beq.n	801b3fc <dir_find+0x98>
 801b3e8:	7bfb      	ldrb	r3, [r7, #15]
 801b3ea:	2b0f      	cmp	r3, #15
 801b3ec:	d006      	beq.n	801b3fc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801b3ee:	23ff      	movs	r3, #255	; 0xff
 801b3f0:	757b      	strb	r3, [r7, #21]
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 801b3f8:	631a      	str	r2, [r3, #48]	; 0x30
 801b3fa:	e05e      	b.n	801b4ba <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801b3fc:	7bfb      	ldrb	r3, [r7, #15]
 801b3fe:	2b0f      	cmp	r3, #15
 801b400:	d136      	bne.n	801b470 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d154      	bne.n	801b4ba <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801b410:	7dbb      	ldrb	r3, [r7, #22]
 801b412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b416:	2b00      	cmp	r3, #0
 801b418:	d00d      	beq.n	801b436 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	6a1b      	ldr	r3, [r3, #32]
 801b41e:	7b5b      	ldrb	r3, [r3, #13]
 801b420:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801b422:	7dbb      	ldrb	r3, [r7, #22]
 801b424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b428:	75bb      	strb	r3, [r7, #22]
 801b42a:	7dbb      	ldrb	r3, [r7, #22]
 801b42c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	695a      	ldr	r2, [r3, #20]
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801b436:	7dba      	ldrb	r2, [r7, #22]
 801b438:	7d7b      	ldrb	r3, [r7, #21]
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d115      	bne.n	801b46a <dir_find+0x106>
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	6a1b      	ldr	r3, [r3, #32]
 801b442:	330d      	adds	r3, #13
 801b444:	781b      	ldrb	r3, [r3, #0]
 801b446:	7d3a      	ldrb	r2, [r7, #20]
 801b448:	429a      	cmp	r2, r3
 801b44a:	d10e      	bne.n	801b46a <dir_find+0x106>
 801b44c:	693b      	ldr	r3, [r7, #16]
 801b44e:	691a      	ldr	r2, [r3, #16]
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	6a1b      	ldr	r3, [r3, #32]
 801b454:	4619      	mov	r1, r3
 801b456:	4610      	mov	r0, r2
 801b458:	f7ff fcf0 	bl	801ae3c <cmp_lfn>
 801b45c:	4603      	mov	r3, r0
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d003      	beq.n	801b46a <dir_find+0x106>
 801b462:	7d7b      	ldrb	r3, [r7, #21]
 801b464:	3b01      	subs	r3, #1
 801b466:	b2db      	uxtb	r3, r3
 801b468:	e000      	b.n	801b46c <dir_find+0x108>
 801b46a:	23ff      	movs	r3, #255	; 0xff
 801b46c:	757b      	strb	r3, [r7, #21]
 801b46e:	e024      	b.n	801b4ba <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801b470:	7d7b      	ldrb	r3, [r7, #21]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d109      	bne.n	801b48a <dir_find+0x126>
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	6a1b      	ldr	r3, [r3, #32]
 801b47a:	4618      	mov	r0, r3
 801b47c:	f7ff feaa 	bl	801b1d4 <sum_sfn>
 801b480:	4603      	mov	r3, r0
 801b482:	461a      	mov	r2, r3
 801b484:	7d3b      	ldrb	r3, [r7, #20]
 801b486:	4293      	cmp	r3, r2
 801b488:	d024      	beq.n	801b4d4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b490:	f003 0301 	and.w	r3, r3, #1
 801b494:	2b00      	cmp	r3, #0
 801b496:	d10a      	bne.n	801b4ae <dir_find+0x14a>
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	6a18      	ldr	r0, [r3, #32]
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	3324      	adds	r3, #36	; 0x24
 801b4a0:	220b      	movs	r2, #11
 801b4a2:	4619      	mov	r1, r3
 801b4a4:	f7fe fd19 	bl	8019eda <mem_cmp>
 801b4a8:	4603      	mov	r3, r0
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d014      	beq.n	801b4d8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801b4ae:	23ff      	movs	r3, #255	; 0xff
 801b4b0:	757b      	strb	r3, [r7, #21]
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	f04f 32ff 	mov.w	r2, #4294967295
 801b4b8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801b4ba:	2100      	movs	r1, #0
 801b4bc:	6878      	ldr	r0, [r7, #4]
 801b4be:	f7ff fb61 	bl	801ab84 <dir_next>
 801b4c2:	4603      	mov	r3, r0
 801b4c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801b4c6:	7dfb      	ldrb	r3, [r7, #23]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	f43f af65 	beq.w	801b398 <dir_find+0x34>
 801b4ce:	e004      	b.n	801b4da <dir_find+0x176>
		if (res != FR_OK) break;
 801b4d0:	bf00      	nop
 801b4d2:	e002      	b.n	801b4da <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801b4d4:	bf00      	nop
 801b4d6:	e000      	b.n	801b4da <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801b4d8:	bf00      	nop

	return res;
 801b4da:	7dfb      	ldrb	r3, [r7, #23]
}
 801b4dc:	4618      	mov	r0, r3
 801b4de:	3718      	adds	r7, #24
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	bd80      	pop	{r7, pc}

0801b4e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801b4e4:	b580      	push	{r7, lr}
 801b4e6:	b08c      	sub	sp, #48	; 0x30
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b4f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d001      	beq.n	801b504 <dir_register+0x20>
 801b500:	2306      	movs	r3, #6
 801b502:	e0e0      	b.n	801b6c6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801b504:	2300      	movs	r3, #0
 801b506:	627b      	str	r3, [r7, #36]	; 0x24
 801b508:	e002      	b.n	801b510 <dir_register+0x2c>
 801b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b50c:	3301      	adds	r3, #1
 801b50e:	627b      	str	r3, [r7, #36]	; 0x24
 801b510:	69fb      	ldr	r3, [r7, #28]
 801b512:	691a      	ldr	r2, [r3, #16]
 801b514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b516:	005b      	lsls	r3, r3, #1
 801b518:	4413      	add	r3, r2
 801b51a:	881b      	ldrh	r3, [r3, #0]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d1f4      	bne.n	801b50a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801b526:	f107 030c 	add.w	r3, r7, #12
 801b52a:	220c      	movs	r2, #12
 801b52c:	4618      	mov	r0, r3
 801b52e:	f7fe fc99 	bl	8019e64 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801b532:	7dfb      	ldrb	r3, [r7, #23]
 801b534:	f003 0301 	and.w	r3, r3, #1
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d032      	beq.n	801b5a2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	2240      	movs	r2, #64	; 0x40
 801b540:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801b544:	2301      	movs	r3, #1
 801b546:	62bb      	str	r3, [r7, #40]	; 0x28
 801b548:	e016      	b.n	801b578 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801b550:	69fb      	ldr	r3, [r7, #28]
 801b552:	691a      	ldr	r2, [r3, #16]
 801b554:	f107 010c 	add.w	r1, r7, #12
 801b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b55a:	f7ff fdab 	bl	801b0b4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801b55e:	6878      	ldr	r0, [r7, #4]
 801b560:	f7ff ff00 	bl	801b364 <dir_find>
 801b564:	4603      	mov	r3, r0
 801b566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801b56a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d106      	bne.n	801b580 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801b572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b574:	3301      	adds	r3, #1
 801b576:	62bb      	str	r3, [r7, #40]	; 0x28
 801b578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b57a:	2b63      	cmp	r3, #99	; 0x63
 801b57c:	d9e5      	bls.n	801b54a <dir_register+0x66>
 801b57e:	e000      	b.n	801b582 <dir_register+0x9e>
			if (res != FR_OK) break;
 801b580:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b584:	2b64      	cmp	r3, #100	; 0x64
 801b586:	d101      	bne.n	801b58c <dir_register+0xa8>
 801b588:	2307      	movs	r3, #7
 801b58a:	e09c      	b.n	801b6c6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801b58c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b590:	2b04      	cmp	r3, #4
 801b592:	d002      	beq.n	801b59a <dir_register+0xb6>
 801b594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b598:	e095      	b.n	801b6c6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801b59a:	7dfa      	ldrb	r2, [r7, #23]
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801b5a2:	7dfb      	ldrb	r3, [r7, #23]
 801b5a4:	f003 0302 	and.w	r3, r3, #2
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d007      	beq.n	801b5bc <dir_register+0xd8>
 801b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5ae:	330c      	adds	r3, #12
 801b5b0:	4a47      	ldr	r2, [pc, #284]	; (801b6d0 <dir_register+0x1ec>)
 801b5b2:	fba2 2303 	umull	r2, r3, r2, r3
 801b5b6:	089b      	lsrs	r3, r3, #2
 801b5b8:	3301      	adds	r3, #1
 801b5ba:	e000      	b.n	801b5be <dir_register+0xda>
 801b5bc:	2301      	movs	r3, #1
 801b5be:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801b5c0:	6a39      	ldr	r1, [r7, #32]
 801b5c2:	6878      	ldr	r0, [r7, #4]
 801b5c4:	f7ff fbb4 	bl	801ad30 <dir_alloc>
 801b5c8:	4603      	mov	r3, r0
 801b5ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801b5ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d148      	bne.n	801b668 <dir_register+0x184>
 801b5d6:	6a3b      	ldr	r3, [r7, #32]
 801b5d8:	3b01      	subs	r3, #1
 801b5da:	623b      	str	r3, [r7, #32]
 801b5dc:	6a3b      	ldr	r3, [r7, #32]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d042      	beq.n	801b668 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	695a      	ldr	r2, [r3, #20]
 801b5e6:	6a3b      	ldr	r3, [r7, #32]
 801b5e8:	015b      	lsls	r3, r3, #5
 801b5ea:	1ad3      	subs	r3, r2, r3
 801b5ec:	4619      	mov	r1, r3
 801b5ee:	6878      	ldr	r0, [r7, #4]
 801b5f0:	f7ff fa3f 	bl	801aa72 <dir_sdi>
 801b5f4:	4603      	mov	r3, r0
 801b5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801b5fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d132      	bne.n	801b668 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	3324      	adds	r3, #36	; 0x24
 801b606:	4618      	mov	r0, r3
 801b608:	f7ff fde4 	bl	801b1d4 <sum_sfn>
 801b60c:	4603      	mov	r3, r0
 801b60e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	69db      	ldr	r3, [r3, #28]
 801b614:	4619      	mov	r1, r3
 801b616:	69f8      	ldr	r0, [r7, #28]
 801b618:	f7fe fe52 	bl	801a2c0 <move_window>
 801b61c:	4603      	mov	r3, r0
 801b61e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801b622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b626:	2b00      	cmp	r3, #0
 801b628:	d11d      	bne.n	801b666 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801b62a:	69fb      	ldr	r3, [r7, #28]
 801b62c:	6918      	ldr	r0, [r3, #16]
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	6a19      	ldr	r1, [r3, #32]
 801b632:	6a3b      	ldr	r3, [r7, #32]
 801b634:	b2da      	uxtb	r2, r3
 801b636:	7efb      	ldrb	r3, [r7, #27]
 801b638:	f7ff fcd4 	bl	801afe4 <put_lfn>
				fs->wflag = 1;
 801b63c:	69fb      	ldr	r3, [r7, #28]
 801b63e:	2201      	movs	r2, #1
 801b640:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801b642:	2100      	movs	r1, #0
 801b644:	6878      	ldr	r0, [r7, #4]
 801b646:	f7ff fa9d 	bl	801ab84 <dir_next>
 801b64a:	4603      	mov	r3, r0
 801b64c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801b650:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b654:	2b00      	cmp	r3, #0
 801b656:	d107      	bne.n	801b668 <dir_register+0x184>
 801b658:	6a3b      	ldr	r3, [r7, #32]
 801b65a:	3b01      	subs	r3, #1
 801b65c:	623b      	str	r3, [r7, #32]
 801b65e:	6a3b      	ldr	r3, [r7, #32]
 801b660:	2b00      	cmp	r3, #0
 801b662:	d1d5      	bne.n	801b610 <dir_register+0x12c>
 801b664:	e000      	b.n	801b668 <dir_register+0x184>
				if (res != FR_OK) break;
 801b666:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801b668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d128      	bne.n	801b6c2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	69db      	ldr	r3, [r3, #28]
 801b674:	4619      	mov	r1, r3
 801b676:	69f8      	ldr	r0, [r7, #28]
 801b678:	f7fe fe22 	bl	801a2c0 <move_window>
 801b67c:	4603      	mov	r3, r0
 801b67e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801b682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b686:	2b00      	cmp	r3, #0
 801b688:	d11b      	bne.n	801b6c2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	6a1b      	ldr	r3, [r3, #32]
 801b68e:	2220      	movs	r2, #32
 801b690:	2100      	movs	r1, #0
 801b692:	4618      	mov	r0, r3
 801b694:	f7fe fc07 	bl	8019ea6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	6a18      	ldr	r0, [r3, #32]
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	3324      	adds	r3, #36	; 0x24
 801b6a0:	220b      	movs	r2, #11
 801b6a2:	4619      	mov	r1, r3
 801b6a4:	f7fe fbde 	bl	8019e64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	6a1b      	ldr	r3, [r3, #32]
 801b6b2:	330c      	adds	r3, #12
 801b6b4:	f002 0218 	and.w	r2, r2, #24
 801b6b8:	b2d2      	uxtb	r2, r2
 801b6ba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801b6bc:	69fb      	ldr	r3, [r7, #28]
 801b6be:	2201      	movs	r2, #1
 801b6c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801b6c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	3730      	adds	r7, #48	; 0x30
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	bd80      	pop	{r7, pc}
 801b6ce:	bf00      	nop
 801b6d0:	4ec4ec4f 	.word	0x4ec4ec4f

0801b6d4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b086      	sub	sp, #24
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	695b      	ldr	r3, [r3, #20]
 801b6e6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b6f0:	d007      	beq.n	801b702 <dir_remove+0x2e>
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6f6:	4619      	mov	r1, r3
 801b6f8:	6878      	ldr	r0, [r7, #4]
 801b6fa:	f7ff f9ba 	bl	801aa72 <dir_sdi>
 801b6fe:	4603      	mov	r3, r0
 801b700:	e000      	b.n	801b704 <dir_remove+0x30>
 801b702:	2300      	movs	r3, #0
 801b704:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b706:	7dfb      	ldrb	r3, [r7, #23]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d128      	bne.n	801b75e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	69db      	ldr	r3, [r3, #28]
 801b710:	4619      	mov	r1, r3
 801b712:	6938      	ldr	r0, [r7, #16]
 801b714:	f7fe fdd4 	bl	801a2c0 <move_window>
 801b718:	4603      	mov	r3, r0
 801b71a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b71c:	7dfb      	ldrb	r3, [r7, #23]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d115      	bne.n	801b74e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	6a1b      	ldr	r3, [r3, #32]
 801b726:	22e5      	movs	r2, #229	; 0xe5
 801b728:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801b72a:	693b      	ldr	r3, [r7, #16]
 801b72c:	2201      	movs	r2, #1
 801b72e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	695b      	ldr	r3, [r3, #20]
 801b734:	68fa      	ldr	r2, [r7, #12]
 801b736:	429a      	cmp	r2, r3
 801b738:	d90b      	bls.n	801b752 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801b73a:	2100      	movs	r1, #0
 801b73c:	6878      	ldr	r0, [r7, #4]
 801b73e:	f7ff fa21 	bl	801ab84 <dir_next>
 801b742:	4603      	mov	r3, r0
 801b744:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801b746:	7dfb      	ldrb	r3, [r7, #23]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d0df      	beq.n	801b70c <dir_remove+0x38>
 801b74c:	e002      	b.n	801b754 <dir_remove+0x80>
			if (res != FR_OK) break;
 801b74e:	bf00      	nop
 801b750:	e000      	b.n	801b754 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801b752:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801b754:	7dfb      	ldrb	r3, [r7, #23]
 801b756:	2b04      	cmp	r3, #4
 801b758:	d101      	bne.n	801b75e <dir_remove+0x8a>
 801b75a:	2302      	movs	r3, #2
 801b75c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801b75e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b760:	4618      	mov	r0, r3
 801b762:	3718      	adds	r7, #24
 801b764:	46bd      	mov	sp, r7
 801b766:	bd80      	pop	{r7, pc}

0801b768 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801b768:	b580      	push	{r7, lr}
 801b76a:	b088      	sub	sp, #32
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
 801b770:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801b778:	683b      	ldr	r3, [r7, #0]
 801b77a:	2200      	movs	r2, #0
 801b77c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	69db      	ldr	r3, [r3, #28]
 801b782:	2b00      	cmp	r3, #0
 801b784:	f000 80c9 	beq.w	801b91a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b790:	d032      	beq.n	801b7f8 <get_fileinfo+0x90>
			i = j = 0;
 801b792:	2300      	movs	r3, #0
 801b794:	61bb      	str	r3, [r7, #24]
 801b796:	69bb      	ldr	r3, [r7, #24]
 801b798:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801b79a:	e01b      	b.n	801b7d4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801b79c:	89fb      	ldrh	r3, [r7, #14]
 801b79e:	2100      	movs	r1, #0
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f002 f81f 	bl	801d7e4 <ff_convert>
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801b7aa:	89fb      	ldrh	r3, [r7, #14]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d102      	bne.n	801b7b6 <get_fileinfo+0x4e>
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	61fb      	str	r3, [r7, #28]
 801b7b4:	e01a      	b.n	801b7ec <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801b7b6:	69fb      	ldr	r3, [r7, #28]
 801b7b8:	2bfe      	cmp	r3, #254	; 0xfe
 801b7ba:	d902      	bls.n	801b7c2 <get_fileinfo+0x5a>
 801b7bc:	2300      	movs	r3, #0
 801b7be:	61fb      	str	r3, [r7, #28]
 801b7c0:	e014      	b.n	801b7ec <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801b7c2:	69fb      	ldr	r3, [r7, #28]
 801b7c4:	1c5a      	adds	r2, r3, #1
 801b7c6:	61fa      	str	r2, [r7, #28]
 801b7c8:	89fa      	ldrh	r2, [r7, #14]
 801b7ca:	b2d1      	uxtb	r1, r2
 801b7cc:	683a      	ldr	r2, [r7, #0]
 801b7ce:	4413      	add	r3, r2
 801b7d0:	460a      	mov	r2, r1
 801b7d2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801b7d4:	693b      	ldr	r3, [r7, #16]
 801b7d6:	691a      	ldr	r2, [r3, #16]
 801b7d8:	69bb      	ldr	r3, [r7, #24]
 801b7da:	1c59      	adds	r1, r3, #1
 801b7dc:	61b9      	str	r1, [r7, #24]
 801b7de:	005b      	lsls	r3, r3, #1
 801b7e0:	4413      	add	r3, r2
 801b7e2:	881b      	ldrh	r3, [r3, #0]
 801b7e4:	81fb      	strh	r3, [r7, #14]
 801b7e6:	89fb      	ldrh	r3, [r7, #14]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d1d7      	bne.n	801b79c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801b7ec:	683a      	ldr	r2, [r7, #0]
 801b7ee:	69fb      	ldr	r3, [r7, #28]
 801b7f0:	4413      	add	r3, r2
 801b7f2:	3316      	adds	r3, #22
 801b7f4:	2200      	movs	r2, #0
 801b7f6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	61bb      	str	r3, [r7, #24]
 801b7fc:	69bb      	ldr	r3, [r7, #24]
 801b7fe:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801b800:	683a      	ldr	r2, [r7, #0]
 801b802:	69fb      	ldr	r3, [r7, #28]
 801b804:	4413      	add	r3, r2
 801b806:	3316      	adds	r3, #22
 801b808:	781b      	ldrb	r3, [r3, #0]
 801b80a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801b80c:	e04c      	b.n	801b8a8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	6a1a      	ldr	r2, [r3, #32]
 801b812:	69fb      	ldr	r3, [r7, #28]
 801b814:	1c59      	adds	r1, r3, #1
 801b816:	61f9      	str	r1, [r7, #28]
 801b818:	4413      	add	r3, r2
 801b81a:	781b      	ldrb	r3, [r3, #0]
 801b81c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801b81e:	7dfb      	ldrb	r3, [r7, #23]
 801b820:	2b20      	cmp	r3, #32
 801b822:	d100      	bne.n	801b826 <get_fileinfo+0xbe>
 801b824:	e040      	b.n	801b8a8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801b826:	7dfb      	ldrb	r3, [r7, #23]
 801b828:	2b05      	cmp	r3, #5
 801b82a:	d101      	bne.n	801b830 <get_fileinfo+0xc8>
 801b82c:	23e5      	movs	r3, #229	; 0xe5
 801b82e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801b830:	69fb      	ldr	r3, [r7, #28]
 801b832:	2b09      	cmp	r3, #9
 801b834:	d10f      	bne.n	801b856 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801b836:	89bb      	ldrh	r3, [r7, #12]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d105      	bne.n	801b848 <get_fileinfo+0xe0>
 801b83c:	683a      	ldr	r2, [r7, #0]
 801b83e:	69bb      	ldr	r3, [r7, #24]
 801b840:	4413      	add	r3, r2
 801b842:	3316      	adds	r3, #22
 801b844:	222e      	movs	r2, #46	; 0x2e
 801b846:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801b848:	69bb      	ldr	r3, [r7, #24]
 801b84a:	1c5a      	adds	r2, r3, #1
 801b84c:	61ba      	str	r2, [r7, #24]
 801b84e:	683a      	ldr	r2, [r7, #0]
 801b850:	4413      	add	r3, r2
 801b852:	222e      	movs	r2, #46	; 0x2e
 801b854:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801b856:	683a      	ldr	r2, [r7, #0]
 801b858:	69bb      	ldr	r3, [r7, #24]
 801b85a:	4413      	add	r3, r2
 801b85c:	3309      	adds	r3, #9
 801b85e:	7dfa      	ldrb	r2, [r7, #23]
 801b860:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801b862:	89bb      	ldrh	r3, [r7, #12]
 801b864:	2b00      	cmp	r3, #0
 801b866:	d11c      	bne.n	801b8a2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801b868:	7dfb      	ldrb	r3, [r7, #23]
 801b86a:	2b40      	cmp	r3, #64	; 0x40
 801b86c:	d913      	bls.n	801b896 <get_fileinfo+0x12e>
 801b86e:	7dfb      	ldrb	r3, [r7, #23]
 801b870:	2b5a      	cmp	r3, #90	; 0x5a
 801b872:	d810      	bhi.n	801b896 <get_fileinfo+0x12e>
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	6a1b      	ldr	r3, [r3, #32]
 801b878:	330c      	adds	r3, #12
 801b87a:	781b      	ldrb	r3, [r3, #0]
 801b87c:	461a      	mov	r2, r3
 801b87e:	69fb      	ldr	r3, [r7, #28]
 801b880:	2b08      	cmp	r3, #8
 801b882:	d901      	bls.n	801b888 <get_fileinfo+0x120>
 801b884:	2310      	movs	r3, #16
 801b886:	e000      	b.n	801b88a <get_fileinfo+0x122>
 801b888:	2308      	movs	r3, #8
 801b88a:	4013      	ands	r3, r2
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d002      	beq.n	801b896 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 801b890:	7dfb      	ldrb	r3, [r7, #23]
 801b892:	3320      	adds	r3, #32
 801b894:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801b896:	683a      	ldr	r2, [r7, #0]
 801b898:	69bb      	ldr	r3, [r7, #24]
 801b89a:	4413      	add	r3, r2
 801b89c:	3316      	adds	r3, #22
 801b89e:	7dfa      	ldrb	r2, [r7, #23]
 801b8a0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801b8a2:	69bb      	ldr	r3, [r7, #24]
 801b8a4:	3301      	adds	r3, #1
 801b8a6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 801b8a8:	69fb      	ldr	r3, [r7, #28]
 801b8aa:	2b0a      	cmp	r3, #10
 801b8ac:	d9af      	bls.n	801b80e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801b8ae:	89bb      	ldrh	r3, [r7, #12]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d10d      	bne.n	801b8d0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801b8b4:	683a      	ldr	r2, [r7, #0]
 801b8b6:	69bb      	ldr	r3, [r7, #24]
 801b8b8:	4413      	add	r3, r2
 801b8ba:	3316      	adds	r3, #22
 801b8bc:	2200      	movs	r2, #0
 801b8be:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	6a1b      	ldr	r3, [r3, #32]
 801b8c4:	330c      	adds	r3, #12
 801b8c6:	781b      	ldrb	r3, [r3, #0]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d101      	bne.n	801b8d0 <get_fileinfo+0x168>
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801b8d0:	683a      	ldr	r2, [r7, #0]
 801b8d2:	69bb      	ldr	r3, [r7, #24]
 801b8d4:	4413      	add	r3, r2
 801b8d6:	3309      	adds	r3, #9
 801b8d8:	2200      	movs	r2, #0
 801b8da:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	6a1b      	ldr	r3, [r3, #32]
 801b8e0:	7ada      	ldrb	r2, [r3, #11]
 801b8e2:	683b      	ldr	r3, [r7, #0]
 801b8e4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	6a1b      	ldr	r3, [r3, #32]
 801b8ea:	331c      	adds	r3, #28
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	f7fe fa4f 	bl	8019d90 <ld_dword>
 801b8f2:	4602      	mov	r2, r0
 801b8f4:	683b      	ldr	r3, [r7, #0]
 801b8f6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	6a1b      	ldr	r3, [r3, #32]
 801b8fc:	3316      	adds	r3, #22
 801b8fe:	4618      	mov	r0, r3
 801b900:	f7fe fa46 	bl	8019d90 <ld_dword>
 801b904:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801b906:	68bb      	ldr	r3, [r7, #8]
 801b908:	b29a      	uxth	r2, r3
 801b90a:	683b      	ldr	r3, [r7, #0]
 801b90c:	80da      	strh	r2, [r3, #6]
 801b90e:	68bb      	ldr	r3, [r7, #8]
 801b910:	0c1b      	lsrs	r3, r3, #16
 801b912:	b29a      	uxth	r2, r3
 801b914:	683b      	ldr	r3, [r7, #0]
 801b916:	809a      	strh	r2, [r3, #4]
 801b918:	e000      	b.n	801b91c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801b91a:	bf00      	nop
}
 801b91c:	3720      	adds	r7, #32
 801b91e:	46bd      	mov	sp, r7
 801b920:	bd80      	pop	{r7, pc}
	...

0801b924 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801b924:	b580      	push	{r7, lr}
 801b926:	b08a      	sub	sp, #40	; 0x28
 801b928:	af00      	add	r7, sp, #0
 801b92a:	6078      	str	r0, [r7, #4]
 801b92c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801b92e:	683b      	ldr	r3, [r7, #0]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	613b      	str	r3, [r7, #16]
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	691b      	ldr	r3, [r3, #16]
 801b93a:	60fb      	str	r3, [r7, #12]
 801b93c:	2300      	movs	r3, #0
 801b93e:	617b      	str	r3, [r7, #20]
 801b940:	697b      	ldr	r3, [r7, #20]
 801b942:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801b944:	69bb      	ldr	r3, [r7, #24]
 801b946:	1c5a      	adds	r2, r3, #1
 801b948:	61ba      	str	r2, [r7, #24]
 801b94a:	693a      	ldr	r2, [r7, #16]
 801b94c:	4413      	add	r3, r2
 801b94e:	781b      	ldrb	r3, [r3, #0]
 801b950:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801b952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b954:	2b1f      	cmp	r3, #31
 801b956:	d940      	bls.n	801b9da <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801b958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b95a:	2b2f      	cmp	r3, #47	; 0x2f
 801b95c:	d006      	beq.n	801b96c <create_name+0x48>
 801b95e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b960:	2b5c      	cmp	r3, #92	; 0x5c
 801b962:	d110      	bne.n	801b986 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801b964:	e002      	b.n	801b96c <create_name+0x48>
 801b966:	69bb      	ldr	r3, [r7, #24]
 801b968:	3301      	adds	r3, #1
 801b96a:	61bb      	str	r3, [r7, #24]
 801b96c:	693a      	ldr	r2, [r7, #16]
 801b96e:	69bb      	ldr	r3, [r7, #24]
 801b970:	4413      	add	r3, r2
 801b972:	781b      	ldrb	r3, [r3, #0]
 801b974:	2b2f      	cmp	r3, #47	; 0x2f
 801b976:	d0f6      	beq.n	801b966 <create_name+0x42>
 801b978:	693a      	ldr	r2, [r7, #16]
 801b97a:	69bb      	ldr	r3, [r7, #24]
 801b97c:	4413      	add	r3, r2
 801b97e:	781b      	ldrb	r3, [r3, #0]
 801b980:	2b5c      	cmp	r3, #92	; 0x5c
 801b982:	d0f0      	beq.n	801b966 <create_name+0x42>
			break;
 801b984:	e02a      	b.n	801b9dc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801b986:	697b      	ldr	r3, [r7, #20]
 801b988:	2bfe      	cmp	r3, #254	; 0xfe
 801b98a:	d901      	bls.n	801b990 <create_name+0x6c>
 801b98c:	2306      	movs	r3, #6
 801b98e:	e177      	b.n	801bc80 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801b990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b992:	b2db      	uxtb	r3, r3
 801b994:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801b996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b998:	2101      	movs	r1, #1
 801b99a:	4618      	mov	r0, r3
 801b99c:	f001 ff22 	bl	801d7e4 <ff_convert>
 801b9a0:	4603      	mov	r3, r0
 801b9a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801b9a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d101      	bne.n	801b9ae <create_name+0x8a>
 801b9aa:	2306      	movs	r3, #6
 801b9ac:	e168      	b.n	801bc80 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801b9ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b9b0:	2b7f      	cmp	r3, #127	; 0x7f
 801b9b2:	d809      	bhi.n	801b9c8 <create_name+0xa4>
 801b9b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b9b6:	4619      	mov	r1, r3
 801b9b8:	48b3      	ldr	r0, [pc, #716]	; (801bc88 <create_name+0x364>)
 801b9ba:	f7fe fab5 	bl	8019f28 <chk_chr>
 801b9be:	4603      	mov	r3, r0
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d001      	beq.n	801b9c8 <create_name+0xa4>
 801b9c4:	2306      	movs	r3, #6
 801b9c6:	e15b      	b.n	801bc80 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801b9c8:	697b      	ldr	r3, [r7, #20]
 801b9ca:	1c5a      	adds	r2, r3, #1
 801b9cc:	617a      	str	r2, [r7, #20]
 801b9ce:	005b      	lsls	r3, r3, #1
 801b9d0:	68fa      	ldr	r2, [r7, #12]
 801b9d2:	4413      	add	r3, r2
 801b9d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b9d6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801b9d8:	e7b4      	b.n	801b944 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801b9da:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801b9dc:	693a      	ldr	r2, [r7, #16]
 801b9de:	69bb      	ldr	r3, [r7, #24]
 801b9e0:	441a      	add	r2, r3
 801b9e2:	683b      	ldr	r3, [r7, #0]
 801b9e4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801b9e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b9e8:	2b1f      	cmp	r3, #31
 801b9ea:	d801      	bhi.n	801b9f0 <create_name+0xcc>
 801b9ec:	2304      	movs	r3, #4
 801b9ee:	e000      	b.n	801b9f2 <create_name+0xce>
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801b9f6:	e011      	b.n	801ba1c <create_name+0xf8>
		w = lfn[di - 1];
 801b9f8:	697a      	ldr	r2, [r7, #20]
 801b9fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b9fe:	4413      	add	r3, r2
 801ba00:	005b      	lsls	r3, r3, #1
 801ba02:	68fa      	ldr	r2, [r7, #12]
 801ba04:	4413      	add	r3, r2
 801ba06:	881b      	ldrh	r3, [r3, #0]
 801ba08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801ba0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ba0c:	2b20      	cmp	r3, #32
 801ba0e:	d002      	beq.n	801ba16 <create_name+0xf2>
 801ba10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ba12:	2b2e      	cmp	r3, #46	; 0x2e
 801ba14:	d106      	bne.n	801ba24 <create_name+0x100>
		di--;
 801ba16:	697b      	ldr	r3, [r7, #20]
 801ba18:	3b01      	subs	r3, #1
 801ba1a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ba1c:	697b      	ldr	r3, [r7, #20]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d1ea      	bne.n	801b9f8 <create_name+0xd4>
 801ba22:	e000      	b.n	801ba26 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801ba24:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801ba26:	697b      	ldr	r3, [r7, #20]
 801ba28:	005b      	lsls	r3, r3, #1
 801ba2a:	68fa      	ldr	r2, [r7, #12]
 801ba2c:	4413      	add	r3, r2
 801ba2e:	2200      	movs	r2, #0
 801ba30:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801ba32:	697b      	ldr	r3, [r7, #20]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d101      	bne.n	801ba3c <create_name+0x118>
 801ba38:	2306      	movs	r3, #6
 801ba3a:	e121      	b.n	801bc80 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	3324      	adds	r3, #36	; 0x24
 801ba40:	220b      	movs	r2, #11
 801ba42:	2120      	movs	r1, #32
 801ba44:	4618      	mov	r0, r3
 801ba46:	f7fe fa2e 	bl	8019ea6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	61bb      	str	r3, [r7, #24]
 801ba4e:	e002      	b.n	801ba56 <create_name+0x132>
 801ba50:	69bb      	ldr	r3, [r7, #24]
 801ba52:	3301      	adds	r3, #1
 801ba54:	61bb      	str	r3, [r7, #24]
 801ba56:	69bb      	ldr	r3, [r7, #24]
 801ba58:	005b      	lsls	r3, r3, #1
 801ba5a:	68fa      	ldr	r2, [r7, #12]
 801ba5c:	4413      	add	r3, r2
 801ba5e:	881b      	ldrh	r3, [r3, #0]
 801ba60:	2b20      	cmp	r3, #32
 801ba62:	d0f5      	beq.n	801ba50 <create_name+0x12c>
 801ba64:	69bb      	ldr	r3, [r7, #24]
 801ba66:	005b      	lsls	r3, r3, #1
 801ba68:	68fa      	ldr	r2, [r7, #12]
 801ba6a:	4413      	add	r3, r2
 801ba6c:	881b      	ldrh	r3, [r3, #0]
 801ba6e:	2b2e      	cmp	r3, #46	; 0x2e
 801ba70:	d0ee      	beq.n	801ba50 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801ba72:	69bb      	ldr	r3, [r7, #24]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d009      	beq.n	801ba8c <create_name+0x168>
 801ba78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba7c:	f043 0303 	orr.w	r3, r3, #3
 801ba80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801ba84:	e002      	b.n	801ba8c <create_name+0x168>
 801ba86:	697b      	ldr	r3, [r7, #20]
 801ba88:	3b01      	subs	r3, #1
 801ba8a:	617b      	str	r3, [r7, #20]
 801ba8c:	697b      	ldr	r3, [r7, #20]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d009      	beq.n	801baa6 <create_name+0x182>
 801ba92:	697a      	ldr	r2, [r7, #20]
 801ba94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ba98:	4413      	add	r3, r2
 801ba9a:	005b      	lsls	r3, r3, #1
 801ba9c:	68fa      	ldr	r2, [r7, #12]
 801ba9e:	4413      	add	r3, r2
 801baa0:	881b      	ldrh	r3, [r3, #0]
 801baa2:	2b2e      	cmp	r3, #46	; 0x2e
 801baa4:	d1ef      	bne.n	801ba86 <create_name+0x162>

	i = b = 0; ni = 8;
 801baa6:	2300      	movs	r3, #0
 801baa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801baac:	2300      	movs	r3, #0
 801baae:	623b      	str	r3, [r7, #32]
 801bab0:	2308      	movs	r3, #8
 801bab2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801bab4:	69bb      	ldr	r3, [r7, #24]
 801bab6:	1c5a      	adds	r2, r3, #1
 801bab8:	61ba      	str	r2, [r7, #24]
 801baba:	005b      	lsls	r3, r3, #1
 801babc:	68fa      	ldr	r2, [r7, #12]
 801babe:	4413      	add	r3, r2
 801bac0:	881b      	ldrh	r3, [r3, #0]
 801bac2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801bac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	f000 8090 	beq.w	801bbec <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801bacc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bace:	2b20      	cmp	r3, #32
 801bad0:	d006      	beq.n	801bae0 <create_name+0x1bc>
 801bad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bad4:	2b2e      	cmp	r3, #46	; 0x2e
 801bad6:	d10a      	bne.n	801baee <create_name+0x1ca>
 801bad8:	69ba      	ldr	r2, [r7, #24]
 801bada:	697b      	ldr	r3, [r7, #20]
 801badc:	429a      	cmp	r2, r3
 801bade:	d006      	beq.n	801baee <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801bae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bae4:	f043 0303 	orr.w	r3, r3, #3
 801bae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801baec:	e07d      	b.n	801bbea <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801baee:	6a3a      	ldr	r2, [r7, #32]
 801baf0:	69fb      	ldr	r3, [r7, #28]
 801baf2:	429a      	cmp	r2, r3
 801baf4:	d203      	bcs.n	801bafe <create_name+0x1da>
 801baf6:	69ba      	ldr	r2, [r7, #24]
 801baf8:	697b      	ldr	r3, [r7, #20]
 801bafa:	429a      	cmp	r2, r3
 801bafc:	d123      	bne.n	801bb46 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801bafe:	69fb      	ldr	r3, [r7, #28]
 801bb00:	2b0b      	cmp	r3, #11
 801bb02:	d106      	bne.n	801bb12 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801bb04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb08:	f043 0303 	orr.w	r3, r3, #3
 801bb0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bb10:	e06f      	b.n	801bbf2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801bb12:	69ba      	ldr	r2, [r7, #24]
 801bb14:	697b      	ldr	r3, [r7, #20]
 801bb16:	429a      	cmp	r2, r3
 801bb18:	d005      	beq.n	801bb26 <create_name+0x202>
 801bb1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb1e:	f043 0303 	orr.w	r3, r3, #3
 801bb22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801bb26:	69ba      	ldr	r2, [r7, #24]
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	429a      	cmp	r2, r3
 801bb2c:	d860      	bhi.n	801bbf0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	61bb      	str	r3, [r7, #24]
 801bb32:	2308      	movs	r3, #8
 801bb34:	623b      	str	r3, [r7, #32]
 801bb36:	230b      	movs	r3, #11
 801bb38:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801bb3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bb3e:	009b      	lsls	r3, r3, #2
 801bb40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801bb44:	e051      	b.n	801bbea <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801bb46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb48:	2b7f      	cmp	r3, #127	; 0x7f
 801bb4a:	d914      	bls.n	801bb76 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801bb4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb4e:	2100      	movs	r1, #0
 801bb50:	4618      	mov	r0, r3
 801bb52:	f001 fe47 	bl	801d7e4 <ff_convert>
 801bb56:	4603      	mov	r3, r0
 801bb58:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801bb5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d004      	beq.n	801bb6a <create_name+0x246>
 801bb60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb62:	3b80      	subs	r3, #128	; 0x80
 801bb64:	4a49      	ldr	r2, [pc, #292]	; (801bc8c <create_name+0x368>)
 801bb66:	5cd3      	ldrb	r3, [r2, r3]
 801bb68:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801bb6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb6e:	f043 0302 	orr.w	r3, r3, #2
 801bb72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801bb76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d007      	beq.n	801bb8c <create_name+0x268>
 801bb7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb7e:	4619      	mov	r1, r3
 801bb80:	4843      	ldr	r0, [pc, #268]	; (801bc90 <create_name+0x36c>)
 801bb82:	f7fe f9d1 	bl	8019f28 <chk_chr>
 801bb86:	4603      	mov	r3, r0
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d008      	beq.n	801bb9e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801bb8c:	235f      	movs	r3, #95	; 0x5f
 801bb8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 801bb90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb94:	f043 0303 	orr.w	r3, r3, #3
 801bb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bb9c:	e01b      	b.n	801bbd6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801bb9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bba0:	2b40      	cmp	r3, #64	; 0x40
 801bba2:	d909      	bls.n	801bbb8 <create_name+0x294>
 801bba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bba6:	2b5a      	cmp	r3, #90	; 0x5a
 801bba8:	d806      	bhi.n	801bbb8 <create_name+0x294>
					b |= 2;
 801bbaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bbae:	f043 0302 	orr.w	r3, r3, #2
 801bbb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801bbb6:	e00e      	b.n	801bbd6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801bbb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bbba:	2b60      	cmp	r3, #96	; 0x60
 801bbbc:	d90b      	bls.n	801bbd6 <create_name+0x2b2>
 801bbbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bbc0:	2b7a      	cmp	r3, #122	; 0x7a
 801bbc2:	d808      	bhi.n	801bbd6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801bbc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bbc8:	f043 0301 	orr.w	r3, r3, #1
 801bbcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801bbd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bbd2:	3b20      	subs	r3, #32
 801bbd4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801bbd6:	6a3b      	ldr	r3, [r7, #32]
 801bbd8:	1c5a      	adds	r2, r3, #1
 801bbda:	623a      	str	r2, [r7, #32]
 801bbdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bbde:	b2d1      	uxtb	r1, r2
 801bbe0:	687a      	ldr	r2, [r7, #4]
 801bbe2:	4413      	add	r3, r2
 801bbe4:	460a      	mov	r2, r1
 801bbe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801bbea:	e763      	b.n	801bab4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801bbec:	bf00      	nop
 801bbee:	e000      	b.n	801bbf2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801bbf0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bbf8:	2be5      	cmp	r3, #229	; 0xe5
 801bbfa:	d103      	bne.n	801bc04 <create_name+0x2e0>
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	2205      	movs	r2, #5
 801bc00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801bc04:	69fb      	ldr	r3, [r7, #28]
 801bc06:	2b08      	cmp	r3, #8
 801bc08:	d104      	bne.n	801bc14 <create_name+0x2f0>
 801bc0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bc0e:	009b      	lsls	r3, r3, #2
 801bc10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801bc14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bc18:	f003 030c 	and.w	r3, r3, #12
 801bc1c:	2b0c      	cmp	r3, #12
 801bc1e:	d005      	beq.n	801bc2c <create_name+0x308>
 801bc20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bc24:	f003 0303 	and.w	r3, r3, #3
 801bc28:	2b03      	cmp	r3, #3
 801bc2a:	d105      	bne.n	801bc38 <create_name+0x314>
 801bc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc30:	f043 0302 	orr.w	r3, r3, #2
 801bc34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801bc38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc3c:	f003 0302 	and.w	r3, r3, #2
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d117      	bne.n	801bc74 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801bc44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bc48:	f003 0303 	and.w	r3, r3, #3
 801bc4c:	2b01      	cmp	r3, #1
 801bc4e:	d105      	bne.n	801bc5c <create_name+0x338>
 801bc50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc54:	f043 0310 	orr.w	r3, r3, #16
 801bc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801bc5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bc60:	f003 030c 	and.w	r3, r3, #12
 801bc64:	2b04      	cmp	r3, #4
 801bc66:	d105      	bne.n	801bc74 <create_name+0x350>
 801bc68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc6c:	f043 0308 	orr.w	r3, r3, #8
 801bc70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801bc7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801bc7e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801bc80:	4618      	mov	r0, r3
 801bc82:	3728      	adds	r7, #40	; 0x28
 801bc84:	46bd      	mov	sp, r7
 801bc86:	bd80      	pop	{r7, pc}
 801bc88:	08022838 	.word	0x08022838
 801bc8c:	08022f0c 	.word	0x08022f0c
 801bc90:	08022844 	.word	0x08022844

0801bc94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801bc94:	b580      	push	{r7, lr}
 801bc96:	b086      	sub	sp, #24
 801bc98:	af00      	add	r7, sp, #0
 801bc9a:	6078      	str	r0, [r7, #4]
 801bc9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801bca2:	693b      	ldr	r3, [r7, #16]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801bca8:	e002      	b.n	801bcb0 <follow_path+0x1c>
 801bcaa:	683b      	ldr	r3, [r7, #0]
 801bcac:	3301      	adds	r3, #1
 801bcae:	603b      	str	r3, [r7, #0]
 801bcb0:	683b      	ldr	r3, [r7, #0]
 801bcb2:	781b      	ldrb	r3, [r3, #0]
 801bcb4:	2b2f      	cmp	r3, #47	; 0x2f
 801bcb6:	d0f8      	beq.n	801bcaa <follow_path+0x16>
 801bcb8:	683b      	ldr	r3, [r7, #0]
 801bcba:	781b      	ldrb	r3, [r3, #0]
 801bcbc:	2b5c      	cmp	r3, #92	; 0x5c
 801bcbe:	d0f4      	beq.n	801bcaa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801bcc0:	693b      	ldr	r3, [r7, #16]
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801bcc6:	683b      	ldr	r3, [r7, #0]
 801bcc8:	781b      	ldrb	r3, [r3, #0]
 801bcca:	2b1f      	cmp	r3, #31
 801bccc:	d80a      	bhi.n	801bce4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	2280      	movs	r2, #128	; 0x80
 801bcd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801bcd6:	2100      	movs	r1, #0
 801bcd8:	6878      	ldr	r0, [r7, #4]
 801bcda:	f7fe feca 	bl	801aa72 <dir_sdi>
 801bcde:	4603      	mov	r3, r0
 801bce0:	75fb      	strb	r3, [r7, #23]
 801bce2:	e048      	b.n	801bd76 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801bce4:	463b      	mov	r3, r7
 801bce6:	4619      	mov	r1, r3
 801bce8:	6878      	ldr	r0, [r7, #4]
 801bcea:	f7ff fe1b 	bl	801b924 <create_name>
 801bcee:	4603      	mov	r3, r0
 801bcf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bcf2:	7dfb      	ldrb	r3, [r7, #23]
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d139      	bne.n	801bd6c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801bcf8:	6878      	ldr	r0, [r7, #4]
 801bcfa:	f7ff fb33 	bl	801b364 <dir_find>
 801bcfe:	4603      	mov	r3, r0
 801bd00:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801bd08:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801bd0a:	7dfb      	ldrb	r3, [r7, #23]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d00a      	beq.n	801bd26 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801bd10:	7dfb      	ldrb	r3, [r7, #23]
 801bd12:	2b04      	cmp	r3, #4
 801bd14:	d12c      	bne.n	801bd70 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801bd16:	7afb      	ldrb	r3, [r7, #11]
 801bd18:	f003 0304 	and.w	r3, r3, #4
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d127      	bne.n	801bd70 <follow_path+0xdc>
 801bd20:	2305      	movs	r3, #5
 801bd22:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801bd24:	e024      	b.n	801bd70 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801bd26:	7afb      	ldrb	r3, [r7, #11]
 801bd28:	f003 0304 	and.w	r3, r3, #4
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d121      	bne.n	801bd74 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801bd30:	693b      	ldr	r3, [r7, #16]
 801bd32:	799b      	ldrb	r3, [r3, #6]
 801bd34:	f003 0310 	and.w	r3, r3, #16
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d102      	bne.n	801bd42 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801bd3c:	2305      	movs	r3, #5
 801bd3e:	75fb      	strb	r3, [r7, #23]
 801bd40:	e019      	b.n	801bd76 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801bd42:	68fb      	ldr	r3, [r7, #12]
 801bd44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	695b      	ldr	r3, [r3, #20]
 801bd4c:	68fa      	ldr	r2, [r7, #12]
 801bd4e:	8992      	ldrh	r2, [r2, #12]
 801bd50:	fbb3 f0f2 	udiv	r0, r3, r2
 801bd54:	fb02 f200 	mul.w	r2, r2, r0
 801bd58:	1a9b      	subs	r3, r3, r2
 801bd5a:	440b      	add	r3, r1
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	68f8      	ldr	r0, [r7, #12]
 801bd60:	f7ff f82d 	bl	801adbe <ld_clust>
 801bd64:	4602      	mov	r2, r0
 801bd66:	693b      	ldr	r3, [r7, #16]
 801bd68:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801bd6a:	e7bb      	b.n	801bce4 <follow_path+0x50>
			if (res != FR_OK) break;
 801bd6c:	bf00      	nop
 801bd6e:	e002      	b.n	801bd76 <follow_path+0xe2>
				break;
 801bd70:	bf00      	nop
 801bd72:	e000      	b.n	801bd76 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801bd74:	bf00      	nop
			}
		}
	}

	return res;
 801bd76:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd78:	4618      	mov	r0, r3
 801bd7a:	3718      	adds	r7, #24
 801bd7c:	46bd      	mov	sp, r7
 801bd7e:	bd80      	pop	{r7, pc}

0801bd80 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801bd80:	b480      	push	{r7}
 801bd82:	b087      	sub	sp, #28
 801bd84:	af00      	add	r7, sp, #0
 801bd86:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801bd88:	f04f 33ff 	mov.w	r3, #4294967295
 801bd8c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d031      	beq.n	801bdfa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	617b      	str	r3, [r7, #20]
 801bd9c:	e002      	b.n	801bda4 <get_ldnumber+0x24>
 801bd9e:	697b      	ldr	r3, [r7, #20]
 801bda0:	3301      	adds	r3, #1
 801bda2:	617b      	str	r3, [r7, #20]
 801bda4:	697b      	ldr	r3, [r7, #20]
 801bda6:	781b      	ldrb	r3, [r3, #0]
 801bda8:	2b1f      	cmp	r3, #31
 801bdaa:	d903      	bls.n	801bdb4 <get_ldnumber+0x34>
 801bdac:	697b      	ldr	r3, [r7, #20]
 801bdae:	781b      	ldrb	r3, [r3, #0]
 801bdb0:	2b3a      	cmp	r3, #58	; 0x3a
 801bdb2:	d1f4      	bne.n	801bd9e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801bdb4:	697b      	ldr	r3, [r7, #20]
 801bdb6:	781b      	ldrb	r3, [r3, #0]
 801bdb8:	2b3a      	cmp	r3, #58	; 0x3a
 801bdba:	d11c      	bne.n	801bdf6 <get_ldnumber+0x76>
			tp = *path;
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	1c5a      	adds	r2, r3, #1
 801bdc6:	60fa      	str	r2, [r7, #12]
 801bdc8:	781b      	ldrb	r3, [r3, #0]
 801bdca:	3b30      	subs	r3, #48	; 0x30
 801bdcc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801bdce:	68bb      	ldr	r3, [r7, #8]
 801bdd0:	2b09      	cmp	r3, #9
 801bdd2:	d80e      	bhi.n	801bdf2 <get_ldnumber+0x72>
 801bdd4:	68fa      	ldr	r2, [r7, #12]
 801bdd6:	697b      	ldr	r3, [r7, #20]
 801bdd8:	429a      	cmp	r2, r3
 801bdda:	d10a      	bne.n	801bdf2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801bddc:	68bb      	ldr	r3, [r7, #8]
 801bdde:	2b02      	cmp	r3, #2
 801bde0:	d807      	bhi.n	801bdf2 <get_ldnumber+0x72>
					vol = (int)i;
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801bde6:	697b      	ldr	r3, [r7, #20]
 801bde8:	3301      	adds	r3, #1
 801bdea:	617b      	str	r3, [r7, #20]
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	697a      	ldr	r2, [r7, #20]
 801bdf0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801bdf2:	693b      	ldr	r3, [r7, #16]
 801bdf4:	e002      	b.n	801bdfc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801bdf6:	2300      	movs	r3, #0
 801bdf8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801bdfa:	693b      	ldr	r3, [r7, #16]
}
 801bdfc:	4618      	mov	r0, r3
 801bdfe:	371c      	adds	r7, #28
 801be00:	46bd      	mov	sp, r7
 801be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be06:	4770      	bx	lr

0801be08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b082      	sub	sp, #8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
 801be10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	2200      	movs	r2, #0
 801be16:	70da      	strb	r2, [r3, #3]
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	f04f 32ff 	mov.w	r2, #4294967295
 801be1e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801be20:	6839      	ldr	r1, [r7, #0]
 801be22:	6878      	ldr	r0, [r7, #4]
 801be24:	f7fe fa4c 	bl	801a2c0 <move_window>
 801be28:	4603      	mov	r3, r0
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d001      	beq.n	801be32 <check_fs+0x2a>
 801be2e:	2304      	movs	r3, #4
 801be30:	e038      	b.n	801bea4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	3338      	adds	r3, #56	; 0x38
 801be36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801be3a:	4618      	mov	r0, r3
 801be3c:	f7fd ff90 	bl	8019d60 <ld_word>
 801be40:	4603      	mov	r3, r0
 801be42:	461a      	mov	r2, r3
 801be44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801be48:	429a      	cmp	r2, r3
 801be4a:	d001      	beq.n	801be50 <check_fs+0x48>
 801be4c:	2303      	movs	r3, #3
 801be4e:	e029      	b.n	801bea4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801be56:	2be9      	cmp	r3, #233	; 0xe9
 801be58:	d009      	beq.n	801be6e <check_fs+0x66>
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801be60:	2beb      	cmp	r3, #235	; 0xeb
 801be62:	d11e      	bne.n	801bea2 <check_fs+0x9a>
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801be6a:	2b90      	cmp	r3, #144	; 0x90
 801be6c:	d119      	bne.n	801bea2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	3338      	adds	r3, #56	; 0x38
 801be72:	3336      	adds	r3, #54	; 0x36
 801be74:	4618      	mov	r0, r3
 801be76:	f7fd ff8b 	bl	8019d90 <ld_dword>
 801be7a:	4603      	mov	r3, r0
 801be7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801be80:	4a0a      	ldr	r2, [pc, #40]	; (801beac <check_fs+0xa4>)
 801be82:	4293      	cmp	r3, r2
 801be84:	d101      	bne.n	801be8a <check_fs+0x82>
 801be86:	2300      	movs	r3, #0
 801be88:	e00c      	b.n	801bea4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	3338      	adds	r3, #56	; 0x38
 801be8e:	3352      	adds	r3, #82	; 0x52
 801be90:	4618      	mov	r0, r3
 801be92:	f7fd ff7d 	bl	8019d90 <ld_dword>
 801be96:	4602      	mov	r2, r0
 801be98:	4b05      	ldr	r3, [pc, #20]	; (801beb0 <check_fs+0xa8>)
 801be9a:	429a      	cmp	r2, r3
 801be9c:	d101      	bne.n	801bea2 <check_fs+0x9a>
 801be9e:	2300      	movs	r3, #0
 801bea0:	e000      	b.n	801bea4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801bea2:	2302      	movs	r3, #2
}
 801bea4:	4618      	mov	r0, r3
 801bea6:	3708      	adds	r7, #8
 801bea8:	46bd      	mov	sp, r7
 801beaa:	bd80      	pop	{r7, pc}
 801beac:	00544146 	.word	0x00544146
 801beb0:	33544146 	.word	0x33544146

0801beb4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801beb4:	b580      	push	{r7, lr}
 801beb6:	b096      	sub	sp, #88	; 0x58
 801beb8:	af00      	add	r7, sp, #0
 801beba:	60f8      	str	r0, [r7, #12]
 801bebc:	60b9      	str	r1, [r7, #8]
 801bebe:	4613      	mov	r3, r2
 801bec0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801bec2:	68bb      	ldr	r3, [r7, #8]
 801bec4:	2200      	movs	r2, #0
 801bec6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801bec8:	68f8      	ldr	r0, [r7, #12]
 801beca:	f7ff ff59 	bl	801bd80 <get_ldnumber>
 801bece:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801bed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	da01      	bge.n	801beda <find_volume+0x26>
 801bed6:	230b      	movs	r3, #11
 801bed8:	e268      	b.n	801c3ac <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801beda:	4ab0      	ldr	r2, [pc, #704]	; (801c19c <find_volume+0x2e8>)
 801bedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bee2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d101      	bne.n	801beee <find_volume+0x3a>
 801beea:	230c      	movs	r3, #12
 801beec:	e25e      	b.n	801c3ac <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801beee:	68bb      	ldr	r3, [r7, #8]
 801bef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bef2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801bef4:	79fb      	ldrb	r3, [r7, #7]
 801bef6:	f023 0301 	bic.w	r3, r3, #1
 801befa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801befe:	781b      	ldrb	r3, [r3, #0]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d01a      	beq.n	801bf3a <find_volume+0x86>
		stat = disk_status(fs->drv);
 801bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf06:	785b      	ldrb	r3, [r3, #1]
 801bf08:	4618      	mov	r0, r3
 801bf0a:	f7fd fe8b 	bl	8019c24 <disk_status>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801bf14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bf18:	f003 0301 	and.w	r3, r3, #1
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d10c      	bne.n	801bf3a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801bf20:	79fb      	ldrb	r3, [r7, #7]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d007      	beq.n	801bf36 <find_volume+0x82>
 801bf26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bf2a:	f003 0304 	and.w	r3, r3, #4
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	d001      	beq.n	801bf36 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801bf32:	230a      	movs	r3, #10
 801bf34:	e23a      	b.n	801c3ac <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801bf36:	2300      	movs	r3, #0
 801bf38:	e238      	b.n	801c3ac <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf3c:	2200      	movs	r2, #0
 801bf3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801bf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf42:	b2da      	uxtb	r2, r3
 801bf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf4a:	785b      	ldrb	r3, [r3, #1]
 801bf4c:	4618      	mov	r0, r3
 801bf4e:	f7fd fe83 	bl	8019c58 <disk_initialize>
 801bf52:	4603      	mov	r3, r0
 801bf54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801bf58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bf5c:	f003 0301 	and.w	r3, r3, #1
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d001      	beq.n	801bf68 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801bf64:	2303      	movs	r3, #3
 801bf66:	e221      	b.n	801c3ac <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801bf68:	79fb      	ldrb	r3, [r7, #7]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d007      	beq.n	801bf7e <find_volume+0xca>
 801bf6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bf72:	f003 0304 	and.w	r3, r3, #4
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d001      	beq.n	801bf7e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801bf7a:	230a      	movs	r3, #10
 801bf7c:	e216      	b.n	801c3ac <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801bf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf80:	7858      	ldrb	r0, [r3, #1]
 801bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf84:	330c      	adds	r3, #12
 801bf86:	461a      	mov	r2, r3
 801bf88:	2102      	movs	r1, #2
 801bf8a:	f7fd fecb 	bl	8019d24 <disk_ioctl>
 801bf8e:	4603      	mov	r3, r0
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d001      	beq.n	801bf98 <find_volume+0xe4>
 801bf94:	2301      	movs	r3, #1
 801bf96:	e209      	b.n	801c3ac <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801bf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf9a:	899b      	ldrh	r3, [r3, #12]
 801bf9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bfa0:	d80d      	bhi.n	801bfbe <find_volume+0x10a>
 801bfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfa4:	899b      	ldrh	r3, [r3, #12]
 801bfa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bfaa:	d308      	bcc.n	801bfbe <find_volume+0x10a>
 801bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfae:	899b      	ldrh	r3, [r3, #12]
 801bfb0:	461a      	mov	r2, r3
 801bfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfb4:	899b      	ldrh	r3, [r3, #12]
 801bfb6:	3b01      	subs	r3, #1
 801bfb8:	4013      	ands	r3, r2
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d001      	beq.n	801bfc2 <find_volume+0x10e>
 801bfbe:	2301      	movs	r3, #1
 801bfc0:	e1f4      	b.n	801c3ac <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801bfc2:	2300      	movs	r3, #0
 801bfc4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801bfc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801bfc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801bfca:	f7ff ff1d 	bl	801be08 <check_fs>
 801bfce:	4603      	mov	r3, r0
 801bfd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801bfd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bfd8:	2b02      	cmp	r3, #2
 801bfda:	d14b      	bne.n	801c074 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801bfdc:	2300      	movs	r3, #0
 801bfde:	643b      	str	r3, [r7, #64]	; 0x40
 801bfe0:	e01f      	b.n	801c022 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfe4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801bfe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bfea:	011b      	lsls	r3, r3, #4
 801bfec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801bff0:	4413      	add	r3, r2
 801bff2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bff6:	3304      	adds	r3, #4
 801bff8:	781b      	ldrb	r3, [r3, #0]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d006      	beq.n	801c00c <find_volume+0x158>
 801bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c000:	3308      	adds	r3, #8
 801c002:	4618      	mov	r0, r3
 801c004:	f7fd fec4 	bl	8019d90 <ld_dword>
 801c008:	4602      	mov	r2, r0
 801c00a:	e000      	b.n	801c00e <find_volume+0x15a>
 801c00c:	2200      	movs	r2, #0
 801c00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c010:	009b      	lsls	r3, r3, #2
 801c012:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c016:	440b      	add	r3, r1
 801c018:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c01e:	3301      	adds	r3, #1
 801c020:	643b      	str	r3, [r7, #64]	; 0x40
 801c022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c024:	2b03      	cmp	r3, #3
 801c026:	d9dc      	bls.n	801bfe2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801c028:	2300      	movs	r3, #0
 801c02a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801c02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d002      	beq.n	801c038 <find_volume+0x184>
 801c032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c034:	3b01      	subs	r3, #1
 801c036:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801c038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c03a:	009b      	lsls	r3, r3, #2
 801c03c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801c040:	4413      	add	r3, r2
 801c042:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c046:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801c048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d005      	beq.n	801c05a <find_volume+0x1a6>
 801c04e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c050:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c052:	f7ff fed9 	bl	801be08 <check_fs>
 801c056:	4603      	mov	r3, r0
 801c058:	e000      	b.n	801c05c <find_volume+0x1a8>
 801c05a:	2303      	movs	r3, #3
 801c05c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c060:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c064:	2b01      	cmp	r3, #1
 801c066:	d905      	bls.n	801c074 <find_volume+0x1c0>
 801c068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c06a:	3301      	adds	r3, #1
 801c06c:	643b      	str	r3, [r7, #64]	; 0x40
 801c06e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c070:	2b03      	cmp	r3, #3
 801c072:	d9e1      	bls.n	801c038 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c074:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c078:	2b04      	cmp	r3, #4
 801c07a:	d101      	bne.n	801c080 <find_volume+0x1cc>
 801c07c:	2301      	movs	r3, #1
 801c07e:	e195      	b.n	801c3ac <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c084:	2b01      	cmp	r3, #1
 801c086:	d901      	bls.n	801c08c <find_volume+0x1d8>
 801c088:	230d      	movs	r3, #13
 801c08a:	e18f      	b.n	801c3ac <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c08e:	3338      	adds	r3, #56	; 0x38
 801c090:	330b      	adds	r3, #11
 801c092:	4618      	mov	r0, r3
 801c094:	f7fd fe64 	bl	8019d60 <ld_word>
 801c098:	4603      	mov	r3, r0
 801c09a:	461a      	mov	r2, r3
 801c09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c09e:	899b      	ldrh	r3, [r3, #12]
 801c0a0:	429a      	cmp	r2, r3
 801c0a2:	d001      	beq.n	801c0a8 <find_volume+0x1f4>
 801c0a4:	230d      	movs	r3, #13
 801c0a6:	e181      	b.n	801c3ac <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0aa:	3338      	adds	r3, #56	; 0x38
 801c0ac:	3316      	adds	r3, #22
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	f7fd fe56 	bl	8019d60 <ld_word>
 801c0b4:	4603      	mov	r3, r0
 801c0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c0b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d106      	bne.n	801c0cc <find_volume+0x218>
 801c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0c0:	3338      	adds	r3, #56	; 0x38
 801c0c2:	3324      	adds	r3, #36	; 0x24
 801c0c4:	4618      	mov	r0, r3
 801c0c6:	f7fd fe63 	bl	8019d90 <ld_dword>
 801c0ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c0d0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0d4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801c0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0de:	789b      	ldrb	r3, [r3, #2]
 801c0e0:	2b01      	cmp	r3, #1
 801c0e2:	d005      	beq.n	801c0f0 <find_volume+0x23c>
 801c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0e6:	789b      	ldrb	r3, [r3, #2]
 801c0e8:	2b02      	cmp	r3, #2
 801c0ea:	d001      	beq.n	801c0f0 <find_volume+0x23c>
 801c0ec:	230d      	movs	r3, #13
 801c0ee:	e15d      	b.n	801c3ac <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0f2:	789b      	ldrb	r3, [r3, #2]
 801c0f4:	461a      	mov	r2, r3
 801c0f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c0f8:	fb02 f303 	mul.w	r3, r2, r3
 801c0fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801c104:	b29a      	uxth	r2, r3
 801c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c108:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c10c:	895b      	ldrh	r3, [r3, #10]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d008      	beq.n	801c124 <find_volume+0x270>
 801c112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c114:	895b      	ldrh	r3, [r3, #10]
 801c116:	461a      	mov	r2, r3
 801c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c11a:	895b      	ldrh	r3, [r3, #10]
 801c11c:	3b01      	subs	r3, #1
 801c11e:	4013      	ands	r3, r2
 801c120:	2b00      	cmp	r3, #0
 801c122:	d001      	beq.n	801c128 <find_volume+0x274>
 801c124:	230d      	movs	r3, #13
 801c126:	e141      	b.n	801c3ac <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c12a:	3338      	adds	r3, #56	; 0x38
 801c12c:	3311      	adds	r3, #17
 801c12e:	4618      	mov	r0, r3
 801c130:	f7fd fe16 	bl	8019d60 <ld_word>
 801c134:	4603      	mov	r3, r0
 801c136:	461a      	mov	r2, r3
 801c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c13a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c13e:	891b      	ldrh	r3, [r3, #8]
 801c140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c142:	8992      	ldrh	r2, [r2, #12]
 801c144:	0952      	lsrs	r2, r2, #5
 801c146:	b292      	uxth	r2, r2
 801c148:	fbb3 f1f2 	udiv	r1, r3, r2
 801c14c:	fb02 f201 	mul.w	r2, r2, r1
 801c150:	1a9b      	subs	r3, r3, r2
 801c152:	b29b      	uxth	r3, r3
 801c154:	2b00      	cmp	r3, #0
 801c156:	d001      	beq.n	801c15c <find_volume+0x2a8>
 801c158:	230d      	movs	r3, #13
 801c15a:	e127      	b.n	801c3ac <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c15e:	3338      	adds	r3, #56	; 0x38
 801c160:	3313      	adds	r3, #19
 801c162:	4618      	mov	r0, r3
 801c164:	f7fd fdfc 	bl	8019d60 <ld_word>
 801c168:	4603      	mov	r3, r0
 801c16a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d106      	bne.n	801c180 <find_volume+0x2cc>
 801c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c174:	3338      	adds	r3, #56	; 0x38
 801c176:	3320      	adds	r3, #32
 801c178:	4618      	mov	r0, r3
 801c17a:	f7fd fe09 	bl	8019d90 <ld_dword>
 801c17e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c182:	3338      	adds	r3, #56	; 0x38
 801c184:	330e      	adds	r3, #14
 801c186:	4618      	mov	r0, r3
 801c188:	f7fd fdea 	bl	8019d60 <ld_word>
 801c18c:	4603      	mov	r3, r0
 801c18e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c190:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c192:	2b00      	cmp	r3, #0
 801c194:	d104      	bne.n	801c1a0 <find_volume+0x2ec>
 801c196:	230d      	movs	r3, #13
 801c198:	e108      	b.n	801c3ac <find_volume+0x4f8>
 801c19a:	bf00      	nop
 801c19c:	20000788 	.word	0x20000788

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c1a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1a4:	4413      	add	r3, r2
 801c1a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1a8:	8911      	ldrh	r1, [r2, #8]
 801c1aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1ac:	8992      	ldrh	r2, [r2, #12]
 801c1ae:	0952      	lsrs	r2, r2, #5
 801c1b0:	b292      	uxth	r2, r2
 801c1b2:	fbb1 f2f2 	udiv	r2, r1, r2
 801c1b6:	b292      	uxth	r2, r2
 801c1b8:	4413      	add	r3, r2
 801c1ba:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c1bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1c0:	429a      	cmp	r2, r3
 801c1c2:	d201      	bcs.n	801c1c8 <find_volume+0x314>
 801c1c4:	230d      	movs	r3, #13
 801c1c6:	e0f1      	b.n	801c3ac <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c1c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1cc:	1ad3      	subs	r3, r2, r3
 801c1ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1d0:	8952      	ldrh	r2, [r2, #10]
 801c1d2:	fbb3 f3f2 	udiv	r3, r3, r2
 801c1d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d101      	bne.n	801c1e2 <find_volume+0x32e>
 801c1de:	230d      	movs	r3, #13
 801c1e0:	e0e4      	b.n	801c3ac <find_volume+0x4f8>
		fmt = FS_FAT32;
 801c1e2:	2303      	movs	r3, #3
 801c1e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1ea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801c1ee:	4293      	cmp	r3, r2
 801c1f0:	d802      	bhi.n	801c1f8 <find_volume+0x344>
 801c1f2:	2302      	movs	r3, #2
 801c1f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 801c1fe:	4293      	cmp	r3, r2
 801c200:	d802      	bhi.n	801c208 <find_volume+0x354>
 801c202:	2301      	movs	r3, #1
 801c204:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c20a:	1c9a      	adds	r2, r3, #2
 801c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c20e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c212:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c214:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c216:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c21a:	441a      	add	r2, r3
 801c21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c21e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801c220:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c224:	441a      	add	r2, r3
 801c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c228:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801c22a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c22e:	2b03      	cmp	r3, #3
 801c230:	d11e      	bne.n	801c270 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c234:	3338      	adds	r3, #56	; 0x38
 801c236:	332a      	adds	r3, #42	; 0x2a
 801c238:	4618      	mov	r0, r3
 801c23a:	f7fd fd91 	bl	8019d60 <ld_word>
 801c23e:	4603      	mov	r3, r0
 801c240:	2b00      	cmp	r3, #0
 801c242:	d001      	beq.n	801c248 <find_volume+0x394>
 801c244:	230d      	movs	r3, #13
 801c246:	e0b1      	b.n	801c3ac <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c24a:	891b      	ldrh	r3, [r3, #8]
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d001      	beq.n	801c254 <find_volume+0x3a0>
 801c250:	230d      	movs	r3, #13
 801c252:	e0ab      	b.n	801c3ac <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c256:	3338      	adds	r3, #56	; 0x38
 801c258:	332c      	adds	r3, #44	; 0x2c
 801c25a:	4618      	mov	r0, r3
 801c25c:	f7fd fd98 	bl	8019d90 <ld_dword>
 801c260:	4602      	mov	r2, r0
 801c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c264:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801c266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c268:	69db      	ldr	r3, [r3, #28]
 801c26a:	009b      	lsls	r3, r3, #2
 801c26c:	647b      	str	r3, [r7, #68]	; 0x44
 801c26e:	e01f      	b.n	801c2b0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c272:	891b      	ldrh	r3, [r3, #8]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d101      	bne.n	801c27c <find_volume+0x3c8>
 801c278:	230d      	movs	r3, #13
 801c27a:	e097      	b.n	801c3ac <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c27e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c282:	441a      	add	r2, r3
 801c284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c286:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801c288:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c28c:	2b02      	cmp	r3, #2
 801c28e:	d103      	bne.n	801c298 <find_volume+0x3e4>
 801c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c292:	69db      	ldr	r3, [r3, #28]
 801c294:	005b      	lsls	r3, r3, #1
 801c296:	e00a      	b.n	801c2ae <find_volume+0x3fa>
 801c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c29a:	69da      	ldr	r2, [r3, #28]
 801c29c:	4613      	mov	r3, r2
 801c29e:	005b      	lsls	r3, r3, #1
 801c2a0:	4413      	add	r3, r2
 801c2a2:	085a      	lsrs	r2, r3, #1
 801c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2a6:	69db      	ldr	r3, [r3, #28]
 801c2a8:	f003 0301 	and.w	r3, r3, #1
 801c2ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801c2ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2b2:	6a1a      	ldr	r2, [r3, #32]
 801c2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2b6:	899b      	ldrh	r3, [r3, #12]
 801c2b8:	4619      	mov	r1, r3
 801c2ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c2bc:	440b      	add	r3, r1
 801c2be:	3b01      	subs	r3, #1
 801c2c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c2c2:	8989      	ldrh	r1, [r1, #12]
 801c2c4:	fbb3 f3f1 	udiv	r3, r3, r1
 801c2c8:	429a      	cmp	r2, r3
 801c2ca:	d201      	bcs.n	801c2d0 <find_volume+0x41c>
 801c2cc:	230d      	movs	r3, #13
 801c2ce:	e06d      	b.n	801c3ac <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2d2:	f04f 32ff 	mov.w	r2, #4294967295
 801c2d6:	619a      	str	r2, [r3, #24]
 801c2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2da:	699a      	ldr	r2, [r3, #24]
 801c2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2de:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801c2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2e2:	2280      	movs	r2, #128	; 0x80
 801c2e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801c2e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c2ea:	2b03      	cmp	r3, #3
 801c2ec:	d149      	bne.n	801c382 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2f0:	3338      	adds	r3, #56	; 0x38
 801c2f2:	3330      	adds	r3, #48	; 0x30
 801c2f4:	4618      	mov	r0, r3
 801c2f6:	f7fd fd33 	bl	8019d60 <ld_word>
 801c2fa:	4603      	mov	r3, r0
 801c2fc:	2b01      	cmp	r3, #1
 801c2fe:	d140      	bne.n	801c382 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801c300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c302:	3301      	adds	r3, #1
 801c304:	4619      	mov	r1, r3
 801c306:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c308:	f7fd ffda 	bl	801a2c0 <move_window>
 801c30c:	4603      	mov	r3, r0
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d137      	bne.n	801c382 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801c312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c314:	2200      	movs	r2, #0
 801c316:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c31a:	3338      	adds	r3, #56	; 0x38
 801c31c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c320:	4618      	mov	r0, r3
 801c322:	f7fd fd1d 	bl	8019d60 <ld_word>
 801c326:	4603      	mov	r3, r0
 801c328:	461a      	mov	r2, r3
 801c32a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801c32e:	429a      	cmp	r2, r3
 801c330:	d127      	bne.n	801c382 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c334:	3338      	adds	r3, #56	; 0x38
 801c336:	4618      	mov	r0, r3
 801c338:	f7fd fd2a 	bl	8019d90 <ld_dword>
 801c33c:	4602      	mov	r2, r0
 801c33e:	4b1d      	ldr	r3, [pc, #116]	; (801c3b4 <find_volume+0x500>)
 801c340:	429a      	cmp	r2, r3
 801c342:	d11e      	bne.n	801c382 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c346:	3338      	adds	r3, #56	; 0x38
 801c348:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801c34c:	4618      	mov	r0, r3
 801c34e:	f7fd fd1f 	bl	8019d90 <ld_dword>
 801c352:	4602      	mov	r2, r0
 801c354:	4b18      	ldr	r3, [pc, #96]	; (801c3b8 <find_volume+0x504>)
 801c356:	429a      	cmp	r2, r3
 801c358:	d113      	bne.n	801c382 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801c35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c35c:	3338      	adds	r3, #56	; 0x38
 801c35e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801c362:	4618      	mov	r0, r3
 801c364:	f7fd fd14 	bl	8019d90 <ld_dword>
 801c368:	4602      	mov	r2, r0
 801c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c36c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c370:	3338      	adds	r3, #56	; 0x38
 801c372:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801c376:	4618      	mov	r0, r3
 801c378:	f7fd fd0a 	bl	8019d90 <ld_dword>
 801c37c:	4602      	mov	r2, r0
 801c37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c380:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801c382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c384:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801c388:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801c38a:	4b0c      	ldr	r3, [pc, #48]	; (801c3bc <find_volume+0x508>)
 801c38c:	881b      	ldrh	r3, [r3, #0]
 801c38e:	3301      	adds	r3, #1
 801c390:	b29a      	uxth	r2, r3
 801c392:	4b0a      	ldr	r3, [pc, #40]	; (801c3bc <find_volume+0x508>)
 801c394:	801a      	strh	r2, [r3, #0]
 801c396:	4b09      	ldr	r3, [pc, #36]	; (801c3bc <find_volume+0x508>)
 801c398:	881a      	ldrh	r2, [r3, #0]
 801c39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c39c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3a0:	4a07      	ldr	r2, [pc, #28]	; (801c3c0 <find_volume+0x50c>)
 801c3a2:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801c3a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c3a6:	f7fd ff23 	bl	801a1f0 <clear_lock>
#endif
	return FR_OK;
 801c3aa:	2300      	movs	r3, #0
}
 801c3ac:	4618      	mov	r0, r3
 801c3ae:	3758      	adds	r7, #88	; 0x58
 801c3b0:	46bd      	mov	sp, r7
 801c3b2:	bd80      	pop	{r7, pc}
 801c3b4:	41615252 	.word	0x41615252
 801c3b8:	61417272 	.word	0x61417272
 801c3bc:	20000794 	.word	0x20000794
 801c3c0:	200007b8 	.word	0x200007b8

0801c3c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801c3c4:	b580      	push	{r7, lr}
 801c3c6:	b084      	sub	sp, #16
 801c3c8:	af00      	add	r7, sp, #0
 801c3ca:	6078      	str	r0, [r7, #4]
 801c3cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801c3ce:	2309      	movs	r3, #9
 801c3d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d01c      	beq.n	801c412 <validate+0x4e>
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d018      	beq.n	801c412 <validate+0x4e>
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	681b      	ldr	r3, [r3, #0]
 801c3e4:	781b      	ldrb	r3, [r3, #0]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d013      	beq.n	801c412 <validate+0x4e>
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	889a      	ldrh	r2, [r3, #4]
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	88db      	ldrh	r3, [r3, #6]
 801c3f4:	429a      	cmp	r2, r3
 801c3f6:	d10c      	bne.n	801c412 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	785b      	ldrb	r3, [r3, #1]
 801c3fe:	4618      	mov	r0, r3
 801c400:	f7fd fc10 	bl	8019c24 <disk_status>
 801c404:	4603      	mov	r3, r0
 801c406:	f003 0301 	and.w	r3, r3, #1
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d101      	bne.n	801c412 <validate+0x4e>
			res = FR_OK;
 801c40e:	2300      	movs	r3, #0
 801c410:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801c412:	7bfb      	ldrb	r3, [r7, #15]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d102      	bne.n	801c41e <validate+0x5a>
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	e000      	b.n	801c420 <validate+0x5c>
 801c41e:	2300      	movs	r3, #0
 801c420:	683a      	ldr	r2, [r7, #0]
 801c422:	6013      	str	r3, [r2, #0]
	return res;
 801c424:	7bfb      	ldrb	r3, [r7, #15]
}
 801c426:	4618      	mov	r0, r3
 801c428:	3710      	adds	r7, #16
 801c42a:	46bd      	mov	sp, r7
 801c42c:	bd80      	pop	{r7, pc}
	...

0801c430 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801c430:	b580      	push	{r7, lr}
 801c432:	b088      	sub	sp, #32
 801c434:	af00      	add	r7, sp, #0
 801c436:	60f8      	str	r0, [r7, #12]
 801c438:	60b9      	str	r1, [r7, #8]
 801c43a:	4613      	mov	r3, r2
 801c43c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801c43e:	68bb      	ldr	r3, [r7, #8]
 801c440:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801c442:	f107 0310 	add.w	r3, r7, #16
 801c446:	4618      	mov	r0, r3
 801c448:	f7ff fc9a 	bl	801bd80 <get_ldnumber>
 801c44c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801c44e:	69fb      	ldr	r3, [r7, #28]
 801c450:	2b00      	cmp	r3, #0
 801c452:	da01      	bge.n	801c458 <f_mount+0x28>
 801c454:	230b      	movs	r3, #11
 801c456:	e02b      	b.n	801c4b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801c458:	4a17      	ldr	r2, [pc, #92]	; (801c4b8 <f_mount+0x88>)
 801c45a:	69fb      	ldr	r3, [r7, #28]
 801c45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c460:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801c462:	69bb      	ldr	r3, [r7, #24]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d005      	beq.n	801c474 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801c468:	69b8      	ldr	r0, [r7, #24]
 801c46a:	f7fd fec1 	bl	801a1f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801c46e:	69bb      	ldr	r3, [r7, #24]
 801c470:	2200      	movs	r2, #0
 801c472:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d002      	beq.n	801c480 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	2200      	movs	r2, #0
 801c47e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801c480:	68fa      	ldr	r2, [r7, #12]
 801c482:	490d      	ldr	r1, [pc, #52]	; (801c4b8 <f_mount+0x88>)
 801c484:	69fb      	ldr	r3, [r7, #28]
 801c486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d002      	beq.n	801c496 <f_mount+0x66>
 801c490:	79fb      	ldrb	r3, [r7, #7]
 801c492:	2b01      	cmp	r3, #1
 801c494:	d001      	beq.n	801c49a <f_mount+0x6a>
 801c496:	2300      	movs	r3, #0
 801c498:	e00a      	b.n	801c4b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c49a:	f107 010c 	add.w	r1, r7, #12
 801c49e:	f107 0308 	add.w	r3, r7, #8
 801c4a2:	2200      	movs	r2, #0
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	f7ff fd05 	bl	801beb4 <find_volume>
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801c4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	3720      	adds	r7, #32
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	20000788 	.word	0x20000788

0801c4bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b09a      	sub	sp, #104	; 0x68
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	60f8      	str	r0, [r7, #12]
 801c4c4:	60b9      	str	r1, [r7, #8]
 801c4c6:	4613      	mov	r3, r2
 801c4c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d101      	bne.n	801c4d4 <f_open+0x18>
 801c4d0:	2309      	movs	r3, #9
 801c4d2:	e1bb      	b.n	801c84c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801c4d4:	79fb      	ldrb	r3, [r7, #7]
 801c4d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c4da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801c4dc:	79fa      	ldrb	r2, [r7, #7]
 801c4de:	f107 0114 	add.w	r1, r7, #20
 801c4e2:	f107 0308 	add.w	r3, r7, #8
 801c4e6:	4618      	mov	r0, r3
 801c4e8:	f7ff fce4 	bl	801beb4 <find_volume>
 801c4ec:	4603      	mov	r3, r0
 801c4ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801c4f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	f040 819f 	bne.w	801c83a <f_open+0x37e>
		dj.obj.fs = fs;
 801c4fc:	697b      	ldr	r3, [r7, #20]
 801c4fe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801c500:	68ba      	ldr	r2, [r7, #8]
 801c502:	f107 0318 	add.w	r3, r7, #24
 801c506:	4611      	mov	r1, r2
 801c508:	4618      	mov	r0, r3
 801c50a:	f7ff fbc3 	bl	801bc94 <follow_path>
 801c50e:	4603      	mov	r3, r0
 801c510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801c514:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d11a      	bne.n	801c552 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801c51c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801c520:	b25b      	sxtb	r3, r3
 801c522:	2b00      	cmp	r3, #0
 801c524:	da03      	bge.n	801c52e <f_open+0x72>
				res = FR_INVALID_NAME;
 801c526:	2306      	movs	r3, #6
 801c528:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c52c:	e011      	b.n	801c552 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c52e:	79fb      	ldrb	r3, [r7, #7]
 801c530:	f023 0301 	bic.w	r3, r3, #1
 801c534:	2b00      	cmp	r3, #0
 801c536:	bf14      	ite	ne
 801c538:	2301      	movne	r3, #1
 801c53a:	2300      	moveq	r3, #0
 801c53c:	b2db      	uxtb	r3, r3
 801c53e:	461a      	mov	r2, r3
 801c540:	f107 0318 	add.w	r3, r7, #24
 801c544:	4611      	mov	r1, r2
 801c546:	4618      	mov	r0, r3
 801c548:	f7fd fd0a 	bl	8019f60 <chk_lock>
 801c54c:	4603      	mov	r3, r0
 801c54e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c552:	79fb      	ldrb	r3, [r7, #7]
 801c554:	f003 031c 	and.w	r3, r3, #28
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d07f      	beq.n	801c65c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801c55c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c560:	2b00      	cmp	r3, #0
 801c562:	d017      	beq.n	801c594 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801c564:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c568:	2b04      	cmp	r3, #4
 801c56a:	d10e      	bne.n	801c58a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c56c:	f7fd fd54 	bl	801a018 <enq_lock>
 801c570:	4603      	mov	r3, r0
 801c572:	2b00      	cmp	r3, #0
 801c574:	d006      	beq.n	801c584 <f_open+0xc8>
 801c576:	f107 0318 	add.w	r3, r7, #24
 801c57a:	4618      	mov	r0, r3
 801c57c:	f7fe ffb2 	bl	801b4e4 <dir_register>
 801c580:	4603      	mov	r3, r0
 801c582:	e000      	b.n	801c586 <f_open+0xca>
 801c584:	2312      	movs	r3, #18
 801c586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801c58a:	79fb      	ldrb	r3, [r7, #7]
 801c58c:	f043 0308 	orr.w	r3, r3, #8
 801c590:	71fb      	strb	r3, [r7, #7]
 801c592:	e010      	b.n	801c5b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801c594:	7fbb      	ldrb	r3, [r7, #30]
 801c596:	f003 0311 	and.w	r3, r3, #17
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d003      	beq.n	801c5a6 <f_open+0xea>
					res = FR_DENIED;
 801c59e:	2307      	movs	r3, #7
 801c5a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c5a4:	e007      	b.n	801c5b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801c5a6:	79fb      	ldrb	r3, [r7, #7]
 801c5a8:	f003 0304 	and.w	r3, r3, #4
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d002      	beq.n	801c5b6 <f_open+0xfa>
 801c5b0:	2308      	movs	r3, #8
 801c5b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c5b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d168      	bne.n	801c690 <f_open+0x1d4>
 801c5be:	79fb      	ldrb	r3, [r7, #7]
 801c5c0:	f003 0308 	and.w	r3, r3, #8
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d063      	beq.n	801c690 <f_open+0x1d4>
				dw = GET_FATTIME();
 801c5c8:	f7fa f928 	bl	801681c <get_fattime>
 801c5cc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801c5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5d0:	330e      	adds	r3, #14
 801c5d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c5d4:	4618      	mov	r0, r3
 801c5d6:	f7fd fc19 	bl	8019e0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5dc:	3316      	adds	r3, #22
 801c5de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	f7fd fc13 	bl	8019e0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5e8:	330b      	adds	r3, #11
 801c5ea:	2220      	movs	r2, #32
 801c5ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c5ee:	697b      	ldr	r3, [r7, #20]
 801c5f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c5f2:	4611      	mov	r1, r2
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	f7fe fbe2 	bl	801adbe <ld_clust>
 801c5fa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801c5fc:	697b      	ldr	r3, [r7, #20]
 801c5fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c600:	2200      	movs	r2, #0
 801c602:	4618      	mov	r0, r3
 801c604:	f7fe fbfa 	bl	801adfc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c60a:	331c      	adds	r3, #28
 801c60c:	2100      	movs	r1, #0
 801c60e:	4618      	mov	r0, r3
 801c610:	f7fd fbfc 	bl	8019e0c <st_dword>
					fs->wflag = 1;
 801c614:	697b      	ldr	r3, [r7, #20]
 801c616:	2201      	movs	r2, #1
 801c618:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801c61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d037      	beq.n	801c690 <f_open+0x1d4>
						dw = fs->winsect;
 801c620:	697b      	ldr	r3, [r7, #20]
 801c622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c624:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801c626:	f107 0318 	add.w	r3, r7, #24
 801c62a:	2200      	movs	r2, #0
 801c62c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c62e:	4618      	mov	r0, r3
 801c630:	f7fe f8ea 	bl	801a808 <remove_chain>
 801c634:	4603      	mov	r3, r0
 801c636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801c63a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d126      	bne.n	801c690 <f_open+0x1d4>
							res = move_window(fs, dw);
 801c642:	697b      	ldr	r3, [r7, #20]
 801c644:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c646:	4618      	mov	r0, r3
 801c648:	f7fd fe3a 	bl	801a2c0 <move_window>
 801c64c:	4603      	mov	r3, r0
 801c64e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c652:	697b      	ldr	r3, [r7, #20]
 801c654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c656:	3a01      	subs	r2, #1
 801c658:	615a      	str	r2, [r3, #20]
 801c65a:	e019      	b.n	801c690 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801c65c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c660:	2b00      	cmp	r3, #0
 801c662:	d115      	bne.n	801c690 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801c664:	7fbb      	ldrb	r3, [r7, #30]
 801c666:	f003 0310 	and.w	r3, r3, #16
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d003      	beq.n	801c676 <f_open+0x1ba>
					res = FR_NO_FILE;
 801c66e:	2304      	movs	r3, #4
 801c670:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c674:	e00c      	b.n	801c690 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801c676:	79fb      	ldrb	r3, [r7, #7]
 801c678:	f003 0302 	and.w	r3, r3, #2
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d007      	beq.n	801c690 <f_open+0x1d4>
 801c680:	7fbb      	ldrb	r3, [r7, #30]
 801c682:	f003 0301 	and.w	r3, r3, #1
 801c686:	2b00      	cmp	r3, #0
 801c688:	d002      	beq.n	801c690 <f_open+0x1d4>
						res = FR_DENIED;
 801c68a:	2307      	movs	r3, #7
 801c68c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801c690:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c694:	2b00      	cmp	r3, #0
 801c696:	d128      	bne.n	801c6ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801c698:	79fb      	ldrb	r3, [r7, #7]
 801c69a:	f003 0308 	and.w	r3, r3, #8
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d003      	beq.n	801c6aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801c6a2:	79fb      	ldrb	r3, [r7, #7]
 801c6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c6a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801c6aa:	697b      	ldr	r3, [r7, #20]
 801c6ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801c6b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c6b8:	79fb      	ldrb	r3, [r7, #7]
 801c6ba:	f023 0301 	bic.w	r3, r3, #1
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	bf14      	ite	ne
 801c6c2:	2301      	movne	r3, #1
 801c6c4:	2300      	moveq	r3, #0
 801c6c6:	b2db      	uxtb	r3, r3
 801c6c8:	461a      	mov	r2, r3
 801c6ca:	f107 0318 	add.w	r3, r7, #24
 801c6ce:	4611      	mov	r1, r2
 801c6d0:	4618      	mov	r0, r3
 801c6d2:	f7fd fcc3 	bl	801a05c <inc_lock>
 801c6d6:	4602      	mov	r2, r0
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	691b      	ldr	r3, [r3, #16]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d102      	bne.n	801c6ea <f_open+0x22e>
 801c6e4:	2302      	movs	r3, #2
 801c6e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801c6ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	f040 80a3 	bne.w	801c83a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801c6f4:	697b      	ldr	r3, [r7, #20]
 801c6f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c6f8:	4611      	mov	r1, r2
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	f7fe fb5f 	bl	801adbe <ld_clust>
 801c700:	4602      	mov	r2, r0
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801c706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c708:	331c      	adds	r3, #28
 801c70a:	4618      	mov	r0, r3
 801c70c:	f7fd fb40 	bl	8019d90 <ld_dword>
 801c710:	4602      	mov	r2, r0
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	2200      	movs	r2, #0
 801c71a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801c71c:	697a      	ldr	r2, [r7, #20]
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801c722:	697b      	ldr	r3, [r7, #20]
 801c724:	88da      	ldrh	r2, [r3, #6]
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	79fa      	ldrb	r2, [r7, #7]
 801c72e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	2200      	movs	r2, #0
 801c734:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	2200      	movs	r2, #0
 801c73a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	2200      	movs	r2, #0
 801c740:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	3330      	adds	r3, #48	; 0x30
 801c746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801c74a:	2100      	movs	r1, #0
 801c74c:	4618      	mov	r0, r3
 801c74e:	f7fd fbaa 	bl	8019ea6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801c752:	79fb      	ldrb	r3, [r7, #7]
 801c754:	f003 0320 	and.w	r3, r3, #32
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d06e      	beq.n	801c83a <f_open+0x37e>
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	68db      	ldr	r3, [r3, #12]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d06a      	beq.n	801c83a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	68da      	ldr	r2, [r3, #12]
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801c76c:	697b      	ldr	r3, [r7, #20]
 801c76e:	895b      	ldrh	r3, [r3, #10]
 801c770:	461a      	mov	r2, r3
 801c772:	697b      	ldr	r3, [r7, #20]
 801c774:	899b      	ldrh	r3, [r3, #12]
 801c776:	fb03 f302 	mul.w	r3, r3, r2
 801c77a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	689b      	ldr	r3, [r3, #8]
 801c780:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	68db      	ldr	r3, [r3, #12]
 801c786:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c788:	e016      	b.n	801c7b8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c78e:	4618      	mov	r0, r3
 801c790:	f7fd fe53 	bl	801a43a <get_fat>
 801c794:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801c796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c798:	2b01      	cmp	r3, #1
 801c79a:	d802      	bhi.n	801c7a2 <f_open+0x2e6>
 801c79c:	2302      	movs	r3, #2
 801c79e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801c7a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c7a8:	d102      	bne.n	801c7b0 <f_open+0x2f4>
 801c7aa:	2301      	movs	r3, #1
 801c7ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c7b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c7b4:	1ad3      	subs	r3, r2, r3
 801c7b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c7b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d103      	bne.n	801c7c8 <f_open+0x30c>
 801c7c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c7c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c7c4:	429a      	cmp	r2, r3
 801c7c6:	d8e0      	bhi.n	801c78a <f_open+0x2ce>
				}
				fp->clust = clst;
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c7cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801c7ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d131      	bne.n	801c83a <f_open+0x37e>
 801c7d6:	697b      	ldr	r3, [r7, #20]
 801c7d8:	899b      	ldrh	r3, [r3, #12]
 801c7da:	461a      	mov	r2, r3
 801c7dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c7de:	fbb3 f1f2 	udiv	r1, r3, r2
 801c7e2:	fb02 f201 	mul.w	r2, r2, r1
 801c7e6:	1a9b      	subs	r3, r3, r2
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d026      	beq.n	801c83a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801c7ec:	697b      	ldr	r3, [r7, #20]
 801c7ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c7f0:	4618      	mov	r0, r3
 801c7f2:	f7fd fe03 	bl	801a3fc <clust2sect>
 801c7f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d103      	bne.n	801c806 <f_open+0x34a>
						res = FR_INT_ERR;
 801c7fe:	2302      	movs	r3, #2
 801c800:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c804:	e019      	b.n	801c83a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801c806:	697b      	ldr	r3, [r7, #20]
 801c808:	899b      	ldrh	r3, [r3, #12]
 801c80a:	461a      	mov	r2, r3
 801c80c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c80e:	fbb3 f2f2 	udiv	r2, r3, r2
 801c812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c814:	441a      	add	r2, r3
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801c81a:	697b      	ldr	r3, [r7, #20]
 801c81c:	7858      	ldrb	r0, [r3, #1]
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	6a1a      	ldr	r2, [r3, #32]
 801c828:	2301      	movs	r3, #1
 801c82a:	f7fd fa3b 	bl	8019ca4 <disk_read>
 801c82e:	4603      	mov	r3, r0
 801c830:	2b00      	cmp	r3, #0
 801c832:	d002      	beq.n	801c83a <f_open+0x37e>
 801c834:	2301      	movs	r3, #1
 801c836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c83a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d002      	beq.n	801c848 <f_open+0x38c>
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	2200      	movs	r2, #0
 801c846:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801c848:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801c84c:	4618      	mov	r0, r3
 801c84e:	3768      	adds	r7, #104	; 0x68
 801c850:	46bd      	mov	sp, r7
 801c852:	bd80      	pop	{r7, pc}

0801c854 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801c854:	b580      	push	{r7, lr}
 801c856:	b08c      	sub	sp, #48	; 0x30
 801c858:	af00      	add	r7, sp, #0
 801c85a:	60f8      	str	r0, [r7, #12]
 801c85c:	60b9      	str	r1, [r7, #8]
 801c85e:	607a      	str	r2, [r7, #4]
 801c860:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801c862:	68bb      	ldr	r3, [r7, #8]
 801c864:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801c866:	683b      	ldr	r3, [r7, #0]
 801c868:	2200      	movs	r2, #0
 801c86a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	f107 0210 	add.w	r2, r7, #16
 801c872:	4611      	mov	r1, r2
 801c874:	4618      	mov	r0, r3
 801c876:	f7ff fda5 	bl	801c3c4 <validate>
 801c87a:	4603      	mov	r3, r0
 801c87c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801c880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c884:	2b00      	cmp	r3, #0
 801c886:	d107      	bne.n	801c898 <f_write+0x44>
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	7d5b      	ldrb	r3, [r3, #21]
 801c88c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801c890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c894:	2b00      	cmp	r3, #0
 801c896:	d002      	beq.n	801c89e <f_write+0x4a>
 801c898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c89c:	e16a      	b.n	801cb74 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	7d1b      	ldrb	r3, [r3, #20]
 801c8a2:	f003 0302 	and.w	r3, r3, #2
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d101      	bne.n	801c8ae <f_write+0x5a>
 801c8aa:	2307      	movs	r3, #7
 801c8ac:	e162      	b.n	801cb74 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	699a      	ldr	r2, [r3, #24]
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	441a      	add	r2, r3
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	699b      	ldr	r3, [r3, #24]
 801c8ba:	429a      	cmp	r2, r3
 801c8bc:	f080 814c 	bcs.w	801cb58 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	699b      	ldr	r3, [r3, #24]
 801c8c4:	43db      	mvns	r3, r3
 801c8c6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801c8c8:	e146      	b.n	801cb58 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	699b      	ldr	r3, [r3, #24]
 801c8ce:	693a      	ldr	r2, [r7, #16]
 801c8d0:	8992      	ldrh	r2, [r2, #12]
 801c8d2:	fbb3 f1f2 	udiv	r1, r3, r2
 801c8d6:	fb02 f201 	mul.w	r2, r2, r1
 801c8da:	1a9b      	subs	r3, r3, r2
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	f040 80f1 	bne.w	801cac4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	699b      	ldr	r3, [r3, #24]
 801c8e6:	693a      	ldr	r2, [r7, #16]
 801c8e8:	8992      	ldrh	r2, [r2, #12]
 801c8ea:	fbb3 f3f2 	udiv	r3, r3, r2
 801c8ee:	693a      	ldr	r2, [r7, #16]
 801c8f0:	8952      	ldrh	r2, [r2, #10]
 801c8f2:	3a01      	subs	r2, #1
 801c8f4:	4013      	ands	r3, r2
 801c8f6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801c8f8:	69bb      	ldr	r3, [r7, #24]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d143      	bne.n	801c986 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	699b      	ldr	r3, [r3, #24]
 801c902:	2b00      	cmp	r3, #0
 801c904:	d10c      	bne.n	801c920 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	689b      	ldr	r3, [r3, #8]
 801c90a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801c90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d11a      	bne.n	801c948 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	2100      	movs	r1, #0
 801c916:	4618      	mov	r0, r3
 801c918:	f7fd ffdb 	bl	801a8d2 <create_chain>
 801c91c:	62b8      	str	r0, [r7, #40]	; 0x28
 801c91e:	e013      	b.n	801c948 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c924:	2b00      	cmp	r3, #0
 801c926:	d007      	beq.n	801c938 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	699b      	ldr	r3, [r3, #24]
 801c92c:	4619      	mov	r1, r3
 801c92e:	68f8      	ldr	r0, [r7, #12]
 801c930:	f7fe f867 	bl	801aa02 <clmt_clust>
 801c934:	62b8      	str	r0, [r7, #40]	; 0x28
 801c936:	e007      	b.n	801c948 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801c938:	68fa      	ldr	r2, [r7, #12]
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	69db      	ldr	r3, [r3, #28]
 801c93e:	4619      	mov	r1, r3
 801c940:	4610      	mov	r0, r2
 801c942:	f7fd ffc6 	bl	801a8d2 <create_chain>
 801c946:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	f000 8109 	beq.w	801cb62 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c952:	2b01      	cmp	r3, #1
 801c954:	d104      	bne.n	801c960 <f_write+0x10c>
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	2202      	movs	r2, #2
 801c95a:	755a      	strb	r2, [r3, #21]
 801c95c:	2302      	movs	r3, #2
 801c95e:	e109      	b.n	801cb74 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c962:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c966:	d104      	bne.n	801c972 <f_write+0x11e>
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	2201      	movs	r2, #1
 801c96c:	755a      	strb	r2, [r3, #21]
 801c96e:	2301      	movs	r3, #1
 801c970:	e100      	b.n	801cb74 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c976:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	689b      	ldr	r3, [r3, #8]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d102      	bne.n	801c986 <f_write+0x132>
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c984:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	7d1b      	ldrb	r3, [r3, #20]
 801c98a:	b25b      	sxtb	r3, r3
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	da18      	bge.n	801c9c2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c990:	693b      	ldr	r3, [r7, #16]
 801c992:	7858      	ldrb	r0, [r3, #1]
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	6a1a      	ldr	r2, [r3, #32]
 801c99e:	2301      	movs	r3, #1
 801c9a0:	f7fd f9a0 	bl	8019ce4 <disk_write>
 801c9a4:	4603      	mov	r3, r0
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d004      	beq.n	801c9b4 <f_write+0x160>
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	2201      	movs	r2, #1
 801c9ae:	755a      	strb	r2, [r3, #21]
 801c9b0:	2301      	movs	r3, #1
 801c9b2:	e0df      	b.n	801cb74 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	7d1b      	ldrb	r3, [r3, #20]
 801c9b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c9bc:	b2da      	uxtb	r2, r3
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801c9c2:	693a      	ldr	r2, [r7, #16]
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	69db      	ldr	r3, [r3, #28]
 801c9c8:	4619      	mov	r1, r3
 801c9ca:	4610      	mov	r0, r2
 801c9cc:	f7fd fd16 	bl	801a3fc <clust2sect>
 801c9d0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c9d2:	697b      	ldr	r3, [r7, #20]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d104      	bne.n	801c9e2 <f_write+0x18e>
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	2202      	movs	r2, #2
 801c9dc:	755a      	strb	r2, [r3, #21]
 801c9de:	2302      	movs	r3, #2
 801c9e0:	e0c8      	b.n	801cb74 <f_write+0x320>
			sect += csect;
 801c9e2:	697a      	ldr	r2, [r7, #20]
 801c9e4:	69bb      	ldr	r3, [r7, #24]
 801c9e6:	4413      	add	r3, r2
 801c9e8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801c9ea:	693b      	ldr	r3, [r7, #16]
 801c9ec:	899b      	ldrh	r3, [r3, #12]
 801c9ee:	461a      	mov	r2, r3
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 801c9f6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801c9f8:	6a3b      	ldr	r3, [r7, #32]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d043      	beq.n	801ca86 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c9fe:	69ba      	ldr	r2, [r7, #24]
 801ca00:	6a3b      	ldr	r3, [r7, #32]
 801ca02:	4413      	add	r3, r2
 801ca04:	693a      	ldr	r2, [r7, #16]
 801ca06:	8952      	ldrh	r2, [r2, #10]
 801ca08:	4293      	cmp	r3, r2
 801ca0a:	d905      	bls.n	801ca18 <f_write+0x1c4>
					cc = fs->csize - csect;
 801ca0c:	693b      	ldr	r3, [r7, #16]
 801ca0e:	895b      	ldrh	r3, [r3, #10]
 801ca10:	461a      	mov	r2, r3
 801ca12:	69bb      	ldr	r3, [r7, #24]
 801ca14:	1ad3      	subs	r3, r2, r3
 801ca16:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ca18:	693b      	ldr	r3, [r7, #16]
 801ca1a:	7858      	ldrb	r0, [r3, #1]
 801ca1c:	6a3b      	ldr	r3, [r7, #32]
 801ca1e:	697a      	ldr	r2, [r7, #20]
 801ca20:	69f9      	ldr	r1, [r7, #28]
 801ca22:	f7fd f95f 	bl	8019ce4 <disk_write>
 801ca26:	4603      	mov	r3, r0
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d004      	beq.n	801ca36 <f_write+0x1e2>
 801ca2c:	68fb      	ldr	r3, [r7, #12]
 801ca2e:	2201      	movs	r2, #1
 801ca30:	755a      	strb	r2, [r3, #21]
 801ca32:	2301      	movs	r3, #1
 801ca34:	e09e      	b.n	801cb74 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	6a1a      	ldr	r2, [r3, #32]
 801ca3a:	697b      	ldr	r3, [r7, #20]
 801ca3c:	1ad3      	subs	r3, r2, r3
 801ca3e:	6a3a      	ldr	r2, [r7, #32]
 801ca40:	429a      	cmp	r2, r3
 801ca42:	d918      	bls.n	801ca76 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	6a1a      	ldr	r2, [r3, #32]
 801ca4e:	697b      	ldr	r3, [r7, #20]
 801ca50:	1ad3      	subs	r3, r2, r3
 801ca52:	693a      	ldr	r2, [r7, #16]
 801ca54:	8992      	ldrh	r2, [r2, #12]
 801ca56:	fb02 f303 	mul.w	r3, r2, r3
 801ca5a:	69fa      	ldr	r2, [r7, #28]
 801ca5c:	18d1      	adds	r1, r2, r3
 801ca5e:	693b      	ldr	r3, [r7, #16]
 801ca60:	899b      	ldrh	r3, [r3, #12]
 801ca62:	461a      	mov	r2, r3
 801ca64:	f7fd f9fe 	bl	8019e64 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	7d1b      	ldrb	r3, [r3, #20]
 801ca6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ca70:	b2da      	uxtb	r2, r3
 801ca72:	68fb      	ldr	r3, [r7, #12]
 801ca74:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801ca76:	693b      	ldr	r3, [r7, #16]
 801ca78:	899b      	ldrh	r3, [r3, #12]
 801ca7a:	461a      	mov	r2, r3
 801ca7c:	6a3b      	ldr	r3, [r7, #32]
 801ca7e:	fb02 f303 	mul.w	r3, r2, r3
 801ca82:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801ca84:	e04b      	b.n	801cb1e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	6a1b      	ldr	r3, [r3, #32]
 801ca8a:	697a      	ldr	r2, [r7, #20]
 801ca8c:	429a      	cmp	r2, r3
 801ca8e:	d016      	beq.n	801cabe <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	699a      	ldr	r2, [r3, #24]
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801ca98:	429a      	cmp	r2, r3
 801ca9a:	d210      	bcs.n	801cabe <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801ca9c:	693b      	ldr	r3, [r7, #16]
 801ca9e:	7858      	ldrb	r0, [r3, #1]
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801caa6:	2301      	movs	r3, #1
 801caa8:	697a      	ldr	r2, [r7, #20]
 801caaa:	f7fd f8fb 	bl	8019ca4 <disk_read>
 801caae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d004      	beq.n	801cabe <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	2201      	movs	r2, #1
 801cab8:	755a      	strb	r2, [r3, #21]
 801caba:	2301      	movs	r3, #1
 801cabc:	e05a      	b.n	801cb74 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	697a      	ldr	r2, [r7, #20]
 801cac2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801cac4:	693b      	ldr	r3, [r7, #16]
 801cac6:	899b      	ldrh	r3, [r3, #12]
 801cac8:	4618      	mov	r0, r3
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	699b      	ldr	r3, [r3, #24]
 801cace:	693a      	ldr	r2, [r7, #16]
 801cad0:	8992      	ldrh	r2, [r2, #12]
 801cad2:	fbb3 f1f2 	udiv	r1, r3, r2
 801cad6:	fb02 f201 	mul.w	r2, r2, r1
 801cada:	1a9b      	subs	r3, r3, r2
 801cadc:	1ac3      	subs	r3, r0, r3
 801cade:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801cae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	429a      	cmp	r2, r3
 801cae6:	d901      	bls.n	801caec <f_write+0x298>
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	699b      	ldr	r3, [r3, #24]
 801caf6:	693a      	ldr	r2, [r7, #16]
 801caf8:	8992      	ldrh	r2, [r2, #12]
 801cafa:	fbb3 f0f2 	udiv	r0, r3, r2
 801cafe:	fb02 f200 	mul.w	r2, r2, r0
 801cb02:	1a9b      	subs	r3, r3, r2
 801cb04:	440b      	add	r3, r1
 801cb06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb08:	69f9      	ldr	r1, [r7, #28]
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	f7fd f9aa 	bl	8019e64 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	7d1b      	ldrb	r3, [r3, #20]
 801cb14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801cb18:	b2da      	uxtb	r2, r3
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801cb1e:	69fa      	ldr	r2, [r7, #28]
 801cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb22:	4413      	add	r3, r2
 801cb24:	61fb      	str	r3, [r7, #28]
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	699a      	ldr	r2, [r3, #24]
 801cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb2c:	441a      	add	r2, r3
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	619a      	str	r2, [r3, #24]
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	68da      	ldr	r2, [r3, #12]
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	699b      	ldr	r3, [r3, #24]
 801cb3a:	429a      	cmp	r2, r3
 801cb3c:	bf38      	it	cc
 801cb3e:	461a      	movcc	r2, r3
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	60da      	str	r2, [r3, #12]
 801cb44:	683b      	ldr	r3, [r7, #0]
 801cb46:	681a      	ldr	r2, [r3, #0]
 801cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb4a:	441a      	add	r2, r3
 801cb4c:	683b      	ldr	r3, [r7, #0]
 801cb4e:	601a      	str	r2, [r3, #0]
 801cb50:	687a      	ldr	r2, [r7, #4]
 801cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb54:	1ad3      	subs	r3, r2, r3
 801cb56:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	f47f aeb5 	bne.w	801c8ca <f_write+0x76>
 801cb60:	e000      	b.n	801cb64 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801cb62:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	7d1b      	ldrb	r3, [r3, #20]
 801cb68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb6c:	b2da      	uxtb	r2, r3
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801cb72:	2300      	movs	r3, #0
}
 801cb74:	4618      	mov	r0, r3
 801cb76:	3730      	adds	r7, #48	; 0x30
 801cb78:	46bd      	mov	sp, r7
 801cb7a:	bd80      	pop	{r7, pc}

0801cb7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801cb7c:	b580      	push	{r7, lr}
 801cb7e:	b086      	sub	sp, #24
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	f107 0208 	add.w	r2, r7, #8
 801cb8a:	4611      	mov	r1, r2
 801cb8c:	4618      	mov	r0, r3
 801cb8e:	f7ff fc19 	bl	801c3c4 <validate>
 801cb92:	4603      	mov	r3, r0
 801cb94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801cb96:	7dfb      	ldrb	r3, [r7, #23]
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d168      	bne.n	801cc6e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	7d1b      	ldrb	r3, [r3, #20]
 801cba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d062      	beq.n	801cc6e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	7d1b      	ldrb	r3, [r3, #20]
 801cbac:	b25b      	sxtb	r3, r3
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	da15      	bge.n	801cbde <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801cbb2:	68bb      	ldr	r3, [r7, #8]
 801cbb4:	7858      	ldrb	r0, [r3, #1]
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	6a1a      	ldr	r2, [r3, #32]
 801cbc0:	2301      	movs	r3, #1
 801cbc2:	f7fd f88f 	bl	8019ce4 <disk_write>
 801cbc6:	4603      	mov	r3, r0
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d001      	beq.n	801cbd0 <f_sync+0x54>
 801cbcc:	2301      	movs	r3, #1
 801cbce:	e04f      	b.n	801cc70 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	7d1b      	ldrb	r3, [r3, #20]
 801cbd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cbd8:	b2da      	uxtb	r2, r3
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801cbde:	f7f9 fe1d 	bl	801681c <get_fattime>
 801cbe2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801cbe4:	68ba      	ldr	r2, [r7, #8]
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbea:	4619      	mov	r1, r3
 801cbec:	4610      	mov	r0, r2
 801cbee:	f7fd fb67 	bl	801a2c0 <move_window>
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801cbf6:	7dfb      	ldrb	r3, [r7, #23]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d138      	bne.n	801cc6e <f_sync+0xf2>
					dir = fp->dir_ptr;
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	330b      	adds	r3, #11
 801cc06:	781a      	ldrb	r2, [r3, #0]
 801cc08:	68fb      	ldr	r3, [r7, #12]
 801cc0a:	330b      	adds	r3, #11
 801cc0c:	f042 0220 	orr.w	r2, r2, #32
 801cc10:	b2d2      	uxtb	r2, r2
 801cc12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	6818      	ldr	r0, [r3, #0]
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	689b      	ldr	r3, [r3, #8]
 801cc1c:	461a      	mov	r2, r3
 801cc1e:	68f9      	ldr	r1, [r7, #12]
 801cc20:	f7fe f8ec 	bl	801adfc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801cc24:	68fb      	ldr	r3, [r7, #12]
 801cc26:	f103 021c 	add.w	r2, r3, #28
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	68db      	ldr	r3, [r3, #12]
 801cc2e:	4619      	mov	r1, r3
 801cc30:	4610      	mov	r0, r2
 801cc32:	f7fd f8eb 	bl	8019e0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	3316      	adds	r3, #22
 801cc3a:	6939      	ldr	r1, [r7, #16]
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	f7fd f8e5 	bl	8019e0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	3312      	adds	r3, #18
 801cc46:	2100      	movs	r1, #0
 801cc48:	4618      	mov	r0, r3
 801cc4a:	f7fd f8c4 	bl	8019dd6 <st_word>
					fs->wflag = 1;
 801cc4e:	68bb      	ldr	r3, [r7, #8]
 801cc50:	2201      	movs	r2, #1
 801cc52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801cc54:	68bb      	ldr	r3, [r7, #8]
 801cc56:	4618      	mov	r0, r3
 801cc58:	f7fd fb60 	bl	801a31c <sync_fs>
 801cc5c:	4603      	mov	r3, r0
 801cc5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	7d1b      	ldrb	r3, [r3, #20]
 801cc64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801cc68:	b2da      	uxtb	r2, r3
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801cc6e:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc70:	4618      	mov	r0, r3
 801cc72:	3718      	adds	r7, #24
 801cc74:	46bd      	mov	sp, r7
 801cc76:	bd80      	pop	{r7, pc}

0801cc78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	b084      	sub	sp, #16
 801cc7c:	af00      	add	r7, sp, #0
 801cc7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801cc80:	6878      	ldr	r0, [r7, #4]
 801cc82:	f7ff ff7b 	bl	801cb7c <f_sync>
 801cc86:	4603      	mov	r3, r0
 801cc88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801cc8a:	7bfb      	ldrb	r3, [r7, #15]
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d118      	bne.n	801ccc2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	f107 0208 	add.w	r2, r7, #8
 801cc96:	4611      	mov	r1, r2
 801cc98:	4618      	mov	r0, r3
 801cc9a:	f7ff fb93 	bl	801c3c4 <validate>
 801cc9e:	4603      	mov	r3, r0
 801cca0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801cca2:	7bfb      	ldrb	r3, [r7, #15]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d10c      	bne.n	801ccc2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	691b      	ldr	r3, [r3, #16]
 801ccac:	4618      	mov	r0, r3
 801ccae:	f7fd fa63 	bl	801a178 <dec_lock>
 801ccb2:	4603      	mov	r3, r0
 801ccb4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801ccb6:	7bfb      	ldrb	r3, [r7, #15]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d102      	bne.n	801ccc2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	2200      	movs	r2, #0
 801ccc0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801ccc2:	7bfb      	ldrb	r3, [r7, #15]
}
 801ccc4:	4618      	mov	r0, r3
 801ccc6:	3710      	adds	r7, #16
 801ccc8:	46bd      	mov	sp, r7
 801ccca:	bd80      	pop	{r7, pc}

0801cccc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801cccc:	b580      	push	{r7, lr}
 801ccce:	b090      	sub	sp, #64	; 0x40
 801ccd0:	af00      	add	r7, sp, #0
 801ccd2:	6078      	str	r0, [r7, #4]
 801ccd4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	f107 0208 	add.w	r2, r7, #8
 801ccdc:	4611      	mov	r1, r2
 801ccde:	4618      	mov	r0, r3
 801cce0:	f7ff fb70 	bl	801c3c4 <validate>
 801cce4:	4603      	mov	r3, r0
 801cce6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801ccea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d103      	bne.n	801ccfa <f_lseek+0x2e>
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	7d5b      	ldrb	r3, [r3, #21]
 801ccf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801ccfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d002      	beq.n	801cd08 <f_lseek+0x3c>
 801cd02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801cd06:	e201      	b.n	801d10c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	f000 80d9 	beq.w	801cec4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801cd12:	683b      	ldr	r3, [r7, #0]
 801cd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd18:	d15a      	bne.n	801cdd0 <f_lseek+0x104>
			tbl = fp->cltbl;
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd1e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd22:	1d1a      	adds	r2, r3, #4
 801cd24:	627a      	str	r2, [r7, #36]	; 0x24
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	617b      	str	r3, [r7, #20]
 801cd2a:	2302      	movs	r3, #2
 801cd2c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	689b      	ldr	r3, [r3, #8]
 801cd32:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d03a      	beq.n	801cdb0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd3c:	613b      	str	r3, [r7, #16]
 801cd3e:	2300      	movs	r3, #0
 801cd40:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd44:	3302      	adds	r3, #2
 801cd46:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd4a:	60fb      	str	r3, [r7, #12]
 801cd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd4e:	3301      	adds	r3, #1
 801cd50:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cd56:	4618      	mov	r0, r3
 801cd58:	f7fd fb6f 	bl	801a43a <get_fat>
 801cd5c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd60:	2b01      	cmp	r3, #1
 801cd62:	d804      	bhi.n	801cd6e <f_lseek+0xa2>
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	2202      	movs	r2, #2
 801cd68:	755a      	strb	r2, [r3, #21]
 801cd6a:	2302      	movs	r3, #2
 801cd6c:	e1ce      	b.n	801d10c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd74:	d104      	bne.n	801cd80 <f_lseek+0xb4>
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	2201      	movs	r2, #1
 801cd7a:	755a      	strb	r2, [r3, #21]
 801cd7c:	2301      	movs	r3, #1
 801cd7e:	e1c5      	b.n	801d10c <f_lseek+0x440>
					} while (cl == pcl + 1);
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	3301      	adds	r3, #1
 801cd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cd86:	429a      	cmp	r2, r3
 801cd88:	d0de      	beq.n	801cd48 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801cd8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cd8c:	697b      	ldr	r3, [r7, #20]
 801cd8e:	429a      	cmp	r2, r3
 801cd90:	d809      	bhi.n	801cda6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd94:	1d1a      	adds	r2, r3, #4
 801cd96:	627a      	str	r2, [r7, #36]	; 0x24
 801cd98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd9a:	601a      	str	r2, [r3, #0]
 801cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd9e:	1d1a      	adds	r2, r3, #4
 801cda0:	627a      	str	r2, [r7, #36]	; 0x24
 801cda2:	693a      	ldr	r2, [r7, #16]
 801cda4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801cda6:	68bb      	ldr	r3, [r7, #8]
 801cda8:	69db      	ldr	r3, [r3, #28]
 801cdaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cdac:	429a      	cmp	r2, r3
 801cdae:	d3c4      	bcc.n	801cd3a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cdb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cdb6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801cdb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cdba:	697b      	ldr	r3, [r7, #20]
 801cdbc:	429a      	cmp	r2, r3
 801cdbe:	d803      	bhi.n	801cdc8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	601a      	str	r2, [r3, #0]
 801cdc6:	e19f      	b.n	801d108 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801cdc8:	2311      	movs	r3, #17
 801cdca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801cdce:	e19b      	b.n	801d108 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	68db      	ldr	r3, [r3, #12]
 801cdd4:	683a      	ldr	r2, [r7, #0]
 801cdd6:	429a      	cmp	r2, r3
 801cdd8:	d902      	bls.n	801cde0 <f_lseek+0x114>
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	68db      	ldr	r3, [r3, #12]
 801cdde:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	683a      	ldr	r2, [r7, #0]
 801cde4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801cde6:	683b      	ldr	r3, [r7, #0]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	f000 818d 	beq.w	801d108 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	3b01      	subs	r3, #1
 801cdf2:	4619      	mov	r1, r3
 801cdf4:	6878      	ldr	r0, [r7, #4]
 801cdf6:	f7fd fe04 	bl	801aa02 <clmt_clust>
 801cdfa:	4602      	mov	r2, r0
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801ce00:	68ba      	ldr	r2, [r7, #8]
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	69db      	ldr	r3, [r3, #28]
 801ce06:	4619      	mov	r1, r3
 801ce08:	4610      	mov	r0, r2
 801ce0a:	f7fd faf7 	bl	801a3fc <clust2sect>
 801ce0e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801ce10:	69bb      	ldr	r3, [r7, #24]
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d104      	bne.n	801ce20 <f_lseek+0x154>
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	2202      	movs	r2, #2
 801ce1a:	755a      	strb	r2, [r3, #21]
 801ce1c:	2302      	movs	r3, #2
 801ce1e:	e175      	b.n	801d10c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801ce20:	683b      	ldr	r3, [r7, #0]
 801ce22:	3b01      	subs	r3, #1
 801ce24:	68ba      	ldr	r2, [r7, #8]
 801ce26:	8992      	ldrh	r2, [r2, #12]
 801ce28:	fbb3 f3f2 	udiv	r3, r3, r2
 801ce2c:	68ba      	ldr	r2, [r7, #8]
 801ce2e:	8952      	ldrh	r2, [r2, #10]
 801ce30:	3a01      	subs	r2, #1
 801ce32:	4013      	ands	r3, r2
 801ce34:	69ba      	ldr	r2, [r7, #24]
 801ce36:	4413      	add	r3, r2
 801ce38:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	699b      	ldr	r3, [r3, #24]
 801ce3e:	68ba      	ldr	r2, [r7, #8]
 801ce40:	8992      	ldrh	r2, [r2, #12]
 801ce42:	fbb3 f1f2 	udiv	r1, r3, r2
 801ce46:	fb02 f201 	mul.w	r2, r2, r1
 801ce4a:	1a9b      	subs	r3, r3, r2
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	f000 815b 	beq.w	801d108 <f_lseek+0x43c>
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	6a1b      	ldr	r3, [r3, #32]
 801ce56:	69ba      	ldr	r2, [r7, #24]
 801ce58:	429a      	cmp	r2, r3
 801ce5a:	f000 8155 	beq.w	801d108 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	7d1b      	ldrb	r3, [r3, #20]
 801ce62:	b25b      	sxtb	r3, r3
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	da18      	bge.n	801ce9a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ce68:	68bb      	ldr	r3, [r7, #8]
 801ce6a:	7858      	ldrb	r0, [r3, #1]
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	6a1a      	ldr	r2, [r3, #32]
 801ce76:	2301      	movs	r3, #1
 801ce78:	f7fc ff34 	bl	8019ce4 <disk_write>
 801ce7c:	4603      	mov	r3, r0
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d004      	beq.n	801ce8c <f_lseek+0x1c0>
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	2201      	movs	r2, #1
 801ce86:	755a      	strb	r2, [r3, #21]
 801ce88:	2301      	movs	r3, #1
 801ce8a:	e13f      	b.n	801d10c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	7d1b      	ldrb	r3, [r3, #20]
 801ce90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ce94:	b2da      	uxtb	r2, r3
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801ce9a:	68bb      	ldr	r3, [r7, #8]
 801ce9c:	7858      	ldrb	r0, [r3, #1]
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cea4:	2301      	movs	r3, #1
 801cea6:	69ba      	ldr	r2, [r7, #24]
 801cea8:	f7fc fefc 	bl	8019ca4 <disk_read>
 801ceac:	4603      	mov	r3, r0
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d004      	beq.n	801cebc <f_lseek+0x1f0>
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	2201      	movs	r2, #1
 801ceb6:	755a      	strb	r2, [r3, #21]
 801ceb8:	2301      	movs	r3, #1
 801ceba:	e127      	b.n	801d10c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	69ba      	ldr	r2, [r7, #24]
 801cec0:	621a      	str	r2, [r3, #32]
 801cec2:	e121      	b.n	801d108 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	68db      	ldr	r3, [r3, #12]
 801cec8:	683a      	ldr	r2, [r7, #0]
 801ceca:	429a      	cmp	r2, r3
 801cecc:	d908      	bls.n	801cee0 <f_lseek+0x214>
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	7d1b      	ldrb	r3, [r3, #20]
 801ced2:	f003 0302 	and.w	r3, r3, #2
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d102      	bne.n	801cee0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	68db      	ldr	r3, [r3, #12]
 801cede:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	699b      	ldr	r3, [r3, #24]
 801cee4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801cee6:	2300      	movs	r3, #0
 801cee8:	637b      	str	r3, [r7, #52]	; 0x34
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ceee:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801cef0:	683b      	ldr	r3, [r7, #0]
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	f000 80b5 	beq.w	801d062 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801cef8:	68bb      	ldr	r3, [r7, #8]
 801cefa:	895b      	ldrh	r3, [r3, #10]
 801cefc:	461a      	mov	r2, r3
 801cefe:	68bb      	ldr	r3, [r7, #8]
 801cf00:	899b      	ldrh	r3, [r3, #12]
 801cf02:	fb03 f302 	mul.w	r3, r3, r2
 801cf06:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801cf08:	6a3b      	ldr	r3, [r7, #32]
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d01b      	beq.n	801cf46 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801cf0e:	683b      	ldr	r3, [r7, #0]
 801cf10:	1e5a      	subs	r2, r3, #1
 801cf12:	69fb      	ldr	r3, [r7, #28]
 801cf14:	fbb2 f2f3 	udiv	r2, r2, r3
 801cf18:	6a3b      	ldr	r3, [r7, #32]
 801cf1a:	1e59      	subs	r1, r3, #1
 801cf1c:	69fb      	ldr	r3, [r7, #28]
 801cf1e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801cf22:	429a      	cmp	r2, r3
 801cf24:	d30f      	bcc.n	801cf46 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801cf26:	6a3b      	ldr	r3, [r7, #32]
 801cf28:	1e5a      	subs	r2, r3, #1
 801cf2a:	69fb      	ldr	r3, [r7, #28]
 801cf2c:	425b      	negs	r3, r3
 801cf2e:	401a      	ands	r2, r3
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	699b      	ldr	r3, [r3, #24]
 801cf38:	683a      	ldr	r2, [r7, #0]
 801cf3a:	1ad3      	subs	r3, r2, r3
 801cf3c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	69db      	ldr	r3, [r3, #28]
 801cf42:	63bb      	str	r3, [r7, #56]	; 0x38
 801cf44:	e022      	b.n	801cf8c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	689b      	ldr	r3, [r3, #8]
 801cf4a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801cf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d119      	bne.n	801cf86 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	2100      	movs	r1, #0
 801cf56:	4618      	mov	r0, r3
 801cf58:	f7fd fcbb 	bl	801a8d2 <create_chain>
 801cf5c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801cf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf60:	2b01      	cmp	r3, #1
 801cf62:	d104      	bne.n	801cf6e <f_lseek+0x2a2>
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	2202      	movs	r2, #2
 801cf68:	755a      	strb	r2, [r3, #21]
 801cf6a:	2302      	movs	r3, #2
 801cf6c:	e0ce      	b.n	801d10c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801cf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf74:	d104      	bne.n	801cf80 <f_lseek+0x2b4>
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	2201      	movs	r2, #1
 801cf7a:	755a      	strb	r2, [r3, #21]
 801cf7c:	2301      	movs	r3, #1
 801cf7e:	e0c5      	b.n	801d10c <f_lseek+0x440>
					fp->obj.sclust = clst;
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cf84:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cf8a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801cf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d067      	beq.n	801d062 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801cf92:	e03a      	b.n	801d00a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801cf94:	683a      	ldr	r2, [r7, #0]
 801cf96:	69fb      	ldr	r3, [r7, #28]
 801cf98:	1ad3      	subs	r3, r2, r3
 801cf9a:	603b      	str	r3, [r7, #0]
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	699a      	ldr	r2, [r3, #24]
 801cfa0:	69fb      	ldr	r3, [r7, #28]
 801cfa2:	441a      	add	r2, r3
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	7d1b      	ldrb	r3, [r3, #20]
 801cfac:	f003 0302 	and.w	r3, r3, #2
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d00b      	beq.n	801cfcc <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cfb8:	4618      	mov	r0, r3
 801cfba:	f7fd fc8a 	bl	801a8d2 <create_chain>
 801cfbe:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d108      	bne.n	801cfd8 <f_lseek+0x30c>
							ofs = 0; break;
 801cfc6:	2300      	movs	r3, #0
 801cfc8:	603b      	str	r3, [r7, #0]
 801cfca:	e022      	b.n	801d012 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	f7fd fa32 	bl	801a43a <get_fat>
 801cfd6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cfde:	d104      	bne.n	801cfea <f_lseek+0x31e>
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	2201      	movs	r2, #1
 801cfe4:	755a      	strb	r2, [r3, #21]
 801cfe6:	2301      	movs	r3, #1
 801cfe8:	e090      	b.n	801d10c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfec:	2b01      	cmp	r3, #1
 801cfee:	d904      	bls.n	801cffa <f_lseek+0x32e>
 801cff0:	68bb      	ldr	r3, [r7, #8]
 801cff2:	69db      	ldr	r3, [r3, #28]
 801cff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cff6:	429a      	cmp	r2, r3
 801cff8:	d304      	bcc.n	801d004 <f_lseek+0x338>
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	2202      	movs	r2, #2
 801cffe:	755a      	strb	r2, [r3, #21]
 801d000:	2302      	movs	r3, #2
 801d002:	e083      	b.n	801d10c <f_lseek+0x440>
					fp->clust = clst;
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d008:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801d00a:	683a      	ldr	r2, [r7, #0]
 801d00c:	69fb      	ldr	r3, [r7, #28]
 801d00e:	429a      	cmp	r2, r3
 801d010:	d8c0      	bhi.n	801cf94 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	699a      	ldr	r2, [r3, #24]
 801d016:	683b      	ldr	r3, [r7, #0]
 801d018:	441a      	add	r2, r3
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801d01e:	68bb      	ldr	r3, [r7, #8]
 801d020:	899b      	ldrh	r3, [r3, #12]
 801d022:	461a      	mov	r2, r3
 801d024:	683b      	ldr	r3, [r7, #0]
 801d026:	fbb3 f1f2 	udiv	r1, r3, r2
 801d02a:	fb02 f201 	mul.w	r2, r2, r1
 801d02e:	1a9b      	subs	r3, r3, r2
 801d030:	2b00      	cmp	r3, #0
 801d032:	d016      	beq.n	801d062 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801d034:	68bb      	ldr	r3, [r7, #8]
 801d036:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d038:	4618      	mov	r0, r3
 801d03a:	f7fd f9df 	bl	801a3fc <clust2sect>
 801d03e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801d040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d042:	2b00      	cmp	r3, #0
 801d044:	d104      	bne.n	801d050 <f_lseek+0x384>
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	2202      	movs	r2, #2
 801d04a:	755a      	strb	r2, [r3, #21]
 801d04c:	2302      	movs	r3, #2
 801d04e:	e05d      	b.n	801d10c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801d050:	68bb      	ldr	r3, [r7, #8]
 801d052:	899b      	ldrh	r3, [r3, #12]
 801d054:	461a      	mov	r2, r3
 801d056:	683b      	ldr	r3, [r7, #0]
 801d058:	fbb3 f3f2 	udiv	r3, r3, r2
 801d05c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d05e:	4413      	add	r3, r2
 801d060:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	699a      	ldr	r2, [r3, #24]
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	68db      	ldr	r3, [r3, #12]
 801d06a:	429a      	cmp	r2, r3
 801d06c:	d90a      	bls.n	801d084 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	699a      	ldr	r2, [r3, #24]
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	7d1b      	ldrb	r3, [r3, #20]
 801d07a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d07e:	b2da      	uxtb	r2, r3
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	699b      	ldr	r3, [r3, #24]
 801d088:	68ba      	ldr	r2, [r7, #8]
 801d08a:	8992      	ldrh	r2, [r2, #12]
 801d08c:	fbb3 f1f2 	udiv	r1, r3, r2
 801d090:	fb02 f201 	mul.w	r2, r2, r1
 801d094:	1a9b      	subs	r3, r3, r2
 801d096:	2b00      	cmp	r3, #0
 801d098:	d036      	beq.n	801d108 <f_lseek+0x43c>
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	6a1b      	ldr	r3, [r3, #32]
 801d09e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d0a0:	429a      	cmp	r2, r3
 801d0a2:	d031      	beq.n	801d108 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	7d1b      	ldrb	r3, [r3, #20]
 801d0a8:	b25b      	sxtb	r3, r3
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	da18      	bge.n	801d0e0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d0ae:	68bb      	ldr	r3, [r7, #8]
 801d0b0:	7858      	ldrb	r0, [r3, #1]
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	6a1a      	ldr	r2, [r3, #32]
 801d0bc:	2301      	movs	r3, #1
 801d0be:	f7fc fe11 	bl	8019ce4 <disk_write>
 801d0c2:	4603      	mov	r3, r0
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d004      	beq.n	801d0d2 <f_lseek+0x406>
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	2201      	movs	r2, #1
 801d0cc:	755a      	strb	r2, [r3, #21]
 801d0ce:	2301      	movs	r3, #1
 801d0d0:	e01c      	b.n	801d10c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	7d1b      	ldrb	r3, [r3, #20]
 801d0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d0da:	b2da      	uxtb	r2, r3
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801d0e0:	68bb      	ldr	r3, [r7, #8]
 801d0e2:	7858      	ldrb	r0, [r3, #1]
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d0ea:	2301      	movs	r3, #1
 801d0ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d0ee:	f7fc fdd9 	bl	8019ca4 <disk_read>
 801d0f2:	4603      	mov	r3, r0
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d004      	beq.n	801d102 <f_lseek+0x436>
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	2201      	movs	r2, #1
 801d0fc:	755a      	strb	r2, [r3, #21]
 801d0fe:	2301      	movs	r3, #1
 801d100:	e004      	b.n	801d10c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d106:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801d108:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801d10c:	4618      	mov	r0, r3
 801d10e:	3740      	adds	r7, #64	; 0x40
 801d110:	46bd      	mov	sp, r7
 801d112:	bd80      	pop	{r7, pc}

0801d114 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801d114:	b580      	push	{r7, lr}
 801d116:	b086      	sub	sp, #24
 801d118:	af00      	add	r7, sp, #0
 801d11a:	6078      	str	r0, [r7, #4]
 801d11c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d101      	bne.n	801d128 <f_opendir+0x14>
 801d124:	2309      	movs	r3, #9
 801d126:	e064      	b.n	801d1f2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801d12c:	f107 010c 	add.w	r1, r7, #12
 801d130:	463b      	mov	r3, r7
 801d132:	2200      	movs	r2, #0
 801d134:	4618      	mov	r0, r3
 801d136:	f7fe febd 	bl	801beb4 <find_volume>
 801d13a:	4603      	mov	r3, r0
 801d13c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d13e:	7dfb      	ldrb	r3, [r7, #23]
 801d140:	2b00      	cmp	r3, #0
 801d142:	d14f      	bne.n	801d1e4 <f_opendir+0xd0>
		obj->fs = fs;
 801d144:	68fa      	ldr	r2, [r7, #12]
 801d146:	693b      	ldr	r3, [r7, #16]
 801d148:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801d14a:	683b      	ldr	r3, [r7, #0]
 801d14c:	4619      	mov	r1, r3
 801d14e:	6878      	ldr	r0, [r7, #4]
 801d150:	f7fe fda0 	bl	801bc94 <follow_path>
 801d154:	4603      	mov	r3, r0
 801d156:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801d158:	7dfb      	ldrb	r3, [r7, #23]
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d13d      	bne.n	801d1da <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801d164:	b25b      	sxtb	r3, r3
 801d166:	2b00      	cmp	r3, #0
 801d168:	db12      	blt.n	801d190 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801d16a:	693b      	ldr	r3, [r7, #16]
 801d16c:	799b      	ldrb	r3, [r3, #6]
 801d16e:	f003 0310 	and.w	r3, r3, #16
 801d172:	2b00      	cmp	r3, #0
 801d174:	d00a      	beq.n	801d18c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801d176:	68fa      	ldr	r2, [r7, #12]
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	6a1b      	ldr	r3, [r3, #32]
 801d17c:	4619      	mov	r1, r3
 801d17e:	4610      	mov	r0, r2
 801d180:	f7fd fe1d 	bl	801adbe <ld_clust>
 801d184:	4602      	mov	r2, r0
 801d186:	693b      	ldr	r3, [r7, #16]
 801d188:	609a      	str	r2, [r3, #8]
 801d18a:	e001      	b.n	801d190 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801d18c:	2305      	movs	r3, #5
 801d18e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801d190:	7dfb      	ldrb	r3, [r7, #23]
 801d192:	2b00      	cmp	r3, #0
 801d194:	d121      	bne.n	801d1da <f_opendir+0xc6>
				obj->id = fs->id;
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	88da      	ldrh	r2, [r3, #6]
 801d19a:	693b      	ldr	r3, [r7, #16]
 801d19c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801d19e:	2100      	movs	r1, #0
 801d1a0:	6878      	ldr	r0, [r7, #4]
 801d1a2:	f7fd fc66 	bl	801aa72 <dir_sdi>
 801d1a6:	4603      	mov	r3, r0
 801d1a8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801d1aa:	7dfb      	ldrb	r3, [r7, #23]
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	d114      	bne.n	801d1da <f_opendir+0xc6>
					if (obj->sclust) {
 801d1b0:	693b      	ldr	r3, [r7, #16]
 801d1b2:	689b      	ldr	r3, [r3, #8]
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d00d      	beq.n	801d1d4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801d1b8:	2100      	movs	r1, #0
 801d1ba:	6878      	ldr	r0, [r7, #4]
 801d1bc:	f7fc ff4e 	bl	801a05c <inc_lock>
 801d1c0:	4602      	mov	r2, r0
 801d1c2:	693b      	ldr	r3, [r7, #16]
 801d1c4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801d1c6:	693b      	ldr	r3, [r7, #16]
 801d1c8:	691b      	ldr	r3, [r3, #16]
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d105      	bne.n	801d1da <f_opendir+0xc6>
 801d1ce:	2312      	movs	r3, #18
 801d1d0:	75fb      	strb	r3, [r7, #23]
 801d1d2:	e002      	b.n	801d1da <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801d1d4:	693b      	ldr	r3, [r7, #16]
 801d1d6:	2200      	movs	r2, #0
 801d1d8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801d1da:	7dfb      	ldrb	r3, [r7, #23]
 801d1dc:	2b04      	cmp	r3, #4
 801d1de:	d101      	bne.n	801d1e4 <f_opendir+0xd0>
 801d1e0:	2305      	movs	r3, #5
 801d1e2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d1e4:	7dfb      	ldrb	r3, [r7, #23]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d002      	beq.n	801d1f0 <f_opendir+0xdc>
 801d1ea:	693b      	ldr	r3, [r7, #16]
 801d1ec:	2200      	movs	r2, #0
 801d1ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	3718      	adds	r7, #24
 801d1f6:	46bd      	mov	sp, r7
 801d1f8:	bd80      	pop	{r7, pc}

0801d1fa <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801d1fa:	b580      	push	{r7, lr}
 801d1fc:	b084      	sub	sp, #16
 801d1fe:	af00      	add	r7, sp, #0
 801d200:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	f107 0208 	add.w	r2, r7, #8
 801d208:	4611      	mov	r1, r2
 801d20a:	4618      	mov	r0, r3
 801d20c:	f7ff f8da 	bl	801c3c4 <validate>
 801d210:	4603      	mov	r3, r0
 801d212:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d214:	7bfb      	ldrb	r3, [r7, #15]
 801d216:	2b00      	cmp	r3, #0
 801d218:	d110      	bne.n	801d23c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	691b      	ldr	r3, [r3, #16]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d006      	beq.n	801d230 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	691b      	ldr	r3, [r3, #16]
 801d226:	4618      	mov	r0, r3
 801d228:	f7fc ffa6 	bl	801a178 <dec_lock>
 801d22c:	4603      	mov	r3, r0
 801d22e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801d230:	7bfb      	ldrb	r3, [r7, #15]
 801d232:	2b00      	cmp	r3, #0
 801d234:	d102      	bne.n	801d23c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	2200      	movs	r2, #0
 801d23a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801d23c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d23e:	4618      	mov	r0, r3
 801d240:	3710      	adds	r7, #16
 801d242:	46bd      	mov	sp, r7
 801d244:	bd80      	pop	{r7, pc}

0801d246 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d246:	b580      	push	{r7, lr}
 801d248:	b084      	sub	sp, #16
 801d24a:	af00      	add	r7, sp, #0
 801d24c:	6078      	str	r0, [r7, #4]
 801d24e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	f107 0208 	add.w	r2, r7, #8
 801d256:	4611      	mov	r1, r2
 801d258:	4618      	mov	r0, r3
 801d25a:	f7ff f8b3 	bl	801c3c4 <validate>
 801d25e:	4603      	mov	r3, r0
 801d260:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d262:	7bfb      	ldrb	r3, [r7, #15]
 801d264:	2b00      	cmp	r3, #0
 801d266:	d126      	bne.n	801d2b6 <f_readdir+0x70>
		if (!fno) {
 801d268:	683b      	ldr	r3, [r7, #0]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d106      	bne.n	801d27c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801d26e:	2100      	movs	r1, #0
 801d270:	6878      	ldr	r0, [r7, #4]
 801d272:	f7fd fbfe 	bl	801aa72 <dir_sdi>
 801d276:	4603      	mov	r3, r0
 801d278:	73fb      	strb	r3, [r7, #15]
 801d27a:	e01c      	b.n	801d2b6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801d27c:	2100      	movs	r1, #0
 801d27e:	6878      	ldr	r0, [r7, #4]
 801d280:	f7fd ffc9 	bl	801b216 <dir_read>
 801d284:	4603      	mov	r3, r0
 801d286:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801d288:	7bfb      	ldrb	r3, [r7, #15]
 801d28a:	2b04      	cmp	r3, #4
 801d28c:	d101      	bne.n	801d292 <f_readdir+0x4c>
 801d28e:	2300      	movs	r3, #0
 801d290:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801d292:	7bfb      	ldrb	r3, [r7, #15]
 801d294:	2b00      	cmp	r3, #0
 801d296:	d10e      	bne.n	801d2b6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801d298:	6839      	ldr	r1, [r7, #0]
 801d29a:	6878      	ldr	r0, [r7, #4]
 801d29c:	f7fe fa64 	bl	801b768 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801d2a0:	2100      	movs	r1, #0
 801d2a2:	6878      	ldr	r0, [r7, #4]
 801d2a4:	f7fd fc6e 	bl	801ab84 <dir_next>
 801d2a8:	4603      	mov	r3, r0
 801d2aa:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801d2ac:	7bfb      	ldrb	r3, [r7, #15]
 801d2ae:	2b04      	cmp	r3, #4
 801d2b0:	d101      	bne.n	801d2b6 <f_readdir+0x70>
 801d2b2:	2300      	movs	r3, #0
 801d2b4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801d2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	3710      	adds	r7, #16
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	bd80      	pop	{r7, pc}

0801d2c0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d2c0:	b580      	push	{r7, lr}
 801d2c2:	b090      	sub	sp, #64	; 0x40
 801d2c4:	af00      	add	r7, sp, #0
 801d2c6:	6078      	str	r0, [r7, #4]
 801d2c8:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801d2ca:	f107 0108 	add.w	r1, r7, #8
 801d2ce:	1d3b      	adds	r3, r7, #4
 801d2d0:	2200      	movs	r2, #0
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	f7fe fdee 	bl	801beb4 <find_volume>
 801d2d8:	4603      	mov	r3, r0
 801d2da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801d2de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d11f      	bne.n	801d326 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d2e6:	687a      	ldr	r2, [r7, #4]
 801d2e8:	f107 0308 	add.w	r3, r7, #8
 801d2ec:	4611      	mov	r1, r2
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	f7fe fcd0 	bl	801bc94 <follow_path>
 801d2f4:	4603      	mov	r3, r0
 801d2f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801d2fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d111      	bne.n	801d326 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801d302:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d306:	b25b      	sxtb	r3, r3
 801d308:	2b00      	cmp	r3, #0
 801d30a:	da03      	bge.n	801d314 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801d30c:	2306      	movs	r3, #6
 801d30e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801d312:	e008      	b.n	801d326 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801d314:	683b      	ldr	r3, [r7, #0]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d005      	beq.n	801d326 <f_stat+0x66>
 801d31a:	f107 0308 	add.w	r3, r7, #8
 801d31e:	6839      	ldr	r1, [r7, #0]
 801d320:	4618      	mov	r0, r3
 801d322:	f7fe fa21 	bl	801b768 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801d326:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801d32a:	4618      	mov	r0, r3
 801d32c:	3740      	adds	r7, #64	; 0x40
 801d32e:	46bd      	mov	sp, r7
 801d330:	bd80      	pop	{r7, pc}

0801d332 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801d332:	b580      	push	{r7, lr}
 801d334:	b092      	sub	sp, #72	; 0x48
 801d336:	af00      	add	r7, sp, #0
 801d338:	60f8      	str	r0, [r7, #12]
 801d33a:	60b9      	str	r1, [r7, #8]
 801d33c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801d33e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801d342:	f107 030c 	add.w	r3, r7, #12
 801d346:	2200      	movs	r2, #0
 801d348:	4618      	mov	r0, r3
 801d34a:	f7fe fdb3 	bl	801beb4 <find_volume>
 801d34e:	4603      	mov	r3, r0
 801d350:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801d354:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d358:	2b00      	cmp	r3, #0
 801d35a:	f040 8099 	bne.w	801d490 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801d35e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d366:	699a      	ldr	r2, [r3, #24]
 801d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d36a:	69db      	ldr	r3, [r3, #28]
 801d36c:	3b02      	subs	r3, #2
 801d36e:	429a      	cmp	r2, r3
 801d370:	d804      	bhi.n	801d37c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801d372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d374:	699a      	ldr	r2, [r3, #24]
 801d376:	68bb      	ldr	r3, [r7, #8]
 801d378:	601a      	str	r2, [r3, #0]
 801d37a:	e089      	b.n	801d490 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801d37c:	2300      	movs	r3, #0
 801d37e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801d380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d382:	781b      	ldrb	r3, [r3, #0]
 801d384:	2b01      	cmp	r3, #1
 801d386:	d128      	bne.n	801d3da <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801d388:	2302      	movs	r3, #2
 801d38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d38e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801d390:	f107 0314 	add.w	r3, r7, #20
 801d394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d396:	4618      	mov	r0, r3
 801d398:	f7fd f84f 	bl	801a43a <get_fat>
 801d39c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801d39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3a4:	d103      	bne.n	801d3ae <f_getfree+0x7c>
 801d3a6:	2301      	movs	r3, #1
 801d3a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801d3ac:	e063      	b.n	801d476 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3b0:	2b01      	cmp	r3, #1
 801d3b2:	d103      	bne.n	801d3bc <f_getfree+0x8a>
 801d3b4:	2302      	movs	r3, #2
 801d3b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801d3ba:	e05c      	b.n	801d476 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d102      	bne.n	801d3c8 <f_getfree+0x96>
 801d3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d3c4:	3301      	adds	r3, #1
 801d3c6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 801d3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d3ca:	3301      	adds	r3, #1
 801d3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3d0:	69db      	ldr	r3, [r3, #28]
 801d3d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d3d4:	429a      	cmp	r2, r3
 801d3d6:	d3db      	bcc.n	801d390 <f_getfree+0x5e>
 801d3d8:	e04d      	b.n	801d476 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801d3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3dc:	69db      	ldr	r3, [r3, #28]
 801d3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3e4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	637b      	str	r3, [r7, #52]	; 0x34
 801d3ea:	2300      	movs	r3, #0
 801d3ec:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801d3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d113      	bne.n	801d41c <f_getfree+0xea>
							res = move_window(fs, sect++);
 801d3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3f8:	1c5a      	adds	r2, r3, #1
 801d3fa:	63ba      	str	r2, [r7, #56]	; 0x38
 801d3fc:	4619      	mov	r1, r3
 801d3fe:	f7fc ff5f 	bl	801a2c0 <move_window>
 801d402:	4603      	mov	r3, r0
 801d404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801d408:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d131      	bne.n	801d474 <f_getfree+0x142>
							p = fs->win;
 801d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d412:	3338      	adds	r3, #56	; 0x38
 801d414:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 801d416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d418:	899b      	ldrh	r3, [r3, #12]
 801d41a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801d41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d41e:	781b      	ldrb	r3, [r3, #0]
 801d420:	2b02      	cmp	r3, #2
 801d422:	d10f      	bne.n	801d444 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801d424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d426:	f7fc fc9b 	bl	8019d60 <ld_word>
 801d42a:	4603      	mov	r3, r0
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d102      	bne.n	801d436 <f_getfree+0x104>
 801d430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d432:	3301      	adds	r3, #1
 801d434:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d438:	3302      	adds	r3, #2
 801d43a:	633b      	str	r3, [r7, #48]	; 0x30
 801d43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d43e:	3b02      	subs	r3, #2
 801d440:	637b      	str	r3, [r7, #52]	; 0x34
 801d442:	e010      	b.n	801d466 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801d444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d446:	f7fc fca3 	bl	8019d90 <ld_dword>
 801d44a:	4603      	mov	r3, r0
 801d44c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801d450:	2b00      	cmp	r3, #0
 801d452:	d102      	bne.n	801d45a <f_getfree+0x128>
 801d454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d456:	3301      	adds	r3, #1
 801d458:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801d45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d45c:	3304      	adds	r3, #4
 801d45e:	633b      	str	r3, [r7, #48]	; 0x30
 801d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d462:	3b04      	subs	r3, #4
 801d464:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801d466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d468:	3b01      	subs	r3, #1
 801d46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d46e:	2b00      	cmp	r3, #0
 801d470:	d1bd      	bne.n	801d3ee <f_getfree+0xbc>
 801d472:	e000      	b.n	801d476 <f_getfree+0x144>
							if (res != FR_OK) break;
 801d474:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801d476:	68bb      	ldr	r3, [r7, #8]
 801d478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d47a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d47e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d480:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801d482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d484:	791a      	ldrb	r2, [r3, #4]
 801d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d488:	f042 0201 	orr.w	r2, r2, #1
 801d48c:	b2d2      	uxtb	r2, r2
 801d48e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801d490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801d494:	4618      	mov	r0, r3
 801d496:	3748      	adds	r7, #72	; 0x48
 801d498:	46bd      	mov	sp, r7
 801d49a:	bd80      	pop	{r7, pc}

0801d49c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d49c:	b580      	push	{r7, lr}
 801d49e:	b0a0      	sub	sp, #128	; 0x80
 801d4a0:	af00      	add	r7, sp, #0
 801d4a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d4a4:	2300      	movs	r3, #0
 801d4a6:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d4a8:	f107 010c 	add.w	r1, r7, #12
 801d4ac:	1d3b      	adds	r3, r7, #4
 801d4ae:	2202      	movs	r2, #2
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	f7fe fcff 	bl	801beb4 <find_volume>
 801d4b6:	4603      	mov	r3, r0
 801d4b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 801d4c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	f040 808e 	bne.w	801d5e6 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d4ca:	687a      	ldr	r2, [r7, #4]
 801d4cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d4d0:	4611      	mov	r1, r2
 801d4d2:	4618      	mov	r0, r3
 801d4d4:	f7fe fbde 	bl	801bc94 <follow_path>
 801d4d8:	4603      	mov	r3, r0
 801d4da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d4de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d108      	bne.n	801d4f8 <f_unlink+0x5c>
 801d4e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d4ea:	2102      	movs	r1, #2
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	f7fc fd37 	bl	8019f60 <chk_lock>
 801d4f2:	4603      	mov	r3, r0
 801d4f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801d4f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d172      	bne.n	801d5e6 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801d500:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d504:	b25b      	sxtb	r3, r3
 801d506:	2b00      	cmp	r3, #0
 801d508:	da03      	bge.n	801d512 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801d50a:	2306      	movs	r3, #6
 801d50c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d510:	e008      	b.n	801d524 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801d512:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801d516:	f003 0301 	and.w	r3, r3, #1
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d002      	beq.n	801d524 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801d51e:	2307      	movs	r3, #7
 801d520:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 801d524:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d134      	bne.n	801d596 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d530:	4611      	mov	r1, r2
 801d532:	4618      	mov	r0, r3
 801d534:	f7fd fc43 	bl	801adbe <ld_clust>
 801d538:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801d53a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801d53e:	f003 0310 	and.w	r3, r3, #16
 801d542:	2b00      	cmp	r3, #0
 801d544:	d027      	beq.n	801d596 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801d54a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d54c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801d54e:	f107 0310 	add.w	r3, r7, #16
 801d552:	2100      	movs	r1, #0
 801d554:	4618      	mov	r0, r3
 801d556:	f7fd fa8c 	bl	801aa72 <dir_sdi>
 801d55a:	4603      	mov	r3, r0
 801d55c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 801d560:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d564:	2b00      	cmp	r3, #0
 801d566:	d116      	bne.n	801d596 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801d568:	f107 0310 	add.w	r3, r7, #16
 801d56c:	2100      	movs	r1, #0
 801d56e:	4618      	mov	r0, r3
 801d570:	f7fd fe51 	bl	801b216 <dir_read>
 801d574:	4603      	mov	r3, r0
 801d576:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801d57a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d102      	bne.n	801d588 <f_unlink+0xec>
 801d582:	2307      	movs	r3, #7
 801d584:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801d588:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d58c:	2b04      	cmp	r3, #4
 801d58e:	d102      	bne.n	801d596 <f_unlink+0xfa>
 801d590:	2300      	movs	r3, #0
 801d592:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801d596:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d123      	bne.n	801d5e6 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801d59e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d5a2:	4618      	mov	r0, r3
 801d5a4:	f7fe f896 	bl	801b6d4 <dir_remove>
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801d5ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d10c      	bne.n	801d5d0 <f_unlink+0x134>
 801d5b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d009      	beq.n	801d5d0 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801d5bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d5c0:	2200      	movs	r2, #0
 801d5c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	f7fd f91f 	bl	801a808 <remove_chain>
 801d5ca:	4603      	mov	r3, r0
 801d5cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801d5d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d106      	bne.n	801d5e6 <f_unlink+0x14a>
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	4618      	mov	r0, r3
 801d5dc:	f7fc fe9e 	bl	801a31c <sync_fs>
 801d5e0:	4603      	mov	r3, r0
 801d5e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801d5e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	3780      	adds	r7, #128	; 0x80
 801d5ee:	46bd      	mov	sp, r7
 801d5f0:	bd80      	pop	{r7, pc}

0801d5f2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801d5f2:	b580      	push	{r7, lr}
 801d5f4:	b084      	sub	sp, #16
 801d5f6:	af00      	add	r7, sp, #0
 801d5f8:	6078      	str	r0, [r7, #4]
 801d5fa:	460b      	mov	r3, r1
 801d5fc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801d5fe:	78fb      	ldrb	r3, [r7, #3]
 801d600:	2b0a      	cmp	r3, #10
 801d602:	d103      	bne.n	801d60c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801d604:	210d      	movs	r1, #13
 801d606:	6878      	ldr	r0, [r7, #4]
 801d608:	f7ff fff3 	bl	801d5f2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	685b      	ldr	r3, [r3, #4]
 801d610:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	2b00      	cmp	r3, #0
 801d616:	db25      	blt.n	801d664 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	1c5a      	adds	r2, r3, #1
 801d61c:	60fa      	str	r2, [r7, #12]
 801d61e:	687a      	ldr	r2, [r7, #4]
 801d620:	4413      	add	r3, r2
 801d622:	78fa      	ldrb	r2, [r7, #3]
 801d624:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	2b3c      	cmp	r3, #60	; 0x3c
 801d62a:	dd12      	ble.n	801d652 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	6818      	ldr	r0, [r3, #0]
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	f103 010c 	add.w	r1, r3, #12
 801d636:	68fa      	ldr	r2, [r7, #12]
 801d638:	f107 0308 	add.w	r3, r7, #8
 801d63c:	f7ff f90a 	bl	801c854 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801d640:	68ba      	ldr	r2, [r7, #8]
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	429a      	cmp	r2, r3
 801d646:	d101      	bne.n	801d64c <putc_bfd+0x5a>
 801d648:	2300      	movs	r3, #0
 801d64a:	e001      	b.n	801d650 <putc_bfd+0x5e>
 801d64c:	f04f 33ff 	mov.w	r3, #4294967295
 801d650:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	68fa      	ldr	r2, [r7, #12]
 801d656:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	689b      	ldr	r3, [r3, #8]
 801d65c:	1c5a      	adds	r2, r3, #1
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	609a      	str	r2, [r3, #8]
 801d662:	e000      	b.n	801d666 <putc_bfd+0x74>
	if (i < 0) return;
 801d664:	bf00      	nop
}
 801d666:	3710      	adds	r7, #16
 801d668:	46bd      	mov	sp, r7
 801d66a:	bd80      	pop	{r7, pc}

0801d66c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801d66c:	b580      	push	{r7, lr}
 801d66e:	b084      	sub	sp, #16
 801d670:	af00      	add	r7, sp, #0
 801d672:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	685b      	ldr	r3, [r3, #4]
 801d678:	2b00      	cmp	r3, #0
 801d67a:	db17      	blt.n	801d6ac <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	6818      	ldr	r0, [r3, #0]
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	f103 010c 	add.w	r1, r3, #12
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	685b      	ldr	r3, [r3, #4]
 801d68a:	461a      	mov	r2, r3
 801d68c:	f107 030c 	add.w	r3, r7, #12
 801d690:	f7ff f8e0 	bl	801c854 <f_write>
 801d694:	4603      	mov	r3, r0
 801d696:	2b00      	cmp	r3, #0
 801d698:	d108      	bne.n	801d6ac <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	685b      	ldr	r3, [r3, #4]
 801d69e:	461a      	mov	r2, r3
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	429a      	cmp	r2, r3
 801d6a4:	d102      	bne.n	801d6ac <putc_flush+0x40>
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	689b      	ldr	r3, [r3, #8]
 801d6aa:	e001      	b.n	801d6b0 <putc_flush+0x44>
	return EOF;
 801d6ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d6b0:	4618      	mov	r0, r3
 801d6b2:	3710      	adds	r7, #16
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	bd80      	pop	{r7, pc}

0801d6b8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801d6b8:	b480      	push	{r7}
 801d6ba:	b083      	sub	sp, #12
 801d6bc:	af00      	add	r7, sp, #0
 801d6be:	6078      	str	r0, [r7, #4]
 801d6c0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	683a      	ldr	r2, [r7, #0]
 801d6c6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801d6c8:	687b      	ldr	r3, [r7, #4]
 801d6ca:	2200      	movs	r2, #0
 801d6cc:	605a      	str	r2, [r3, #4]
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	685a      	ldr	r2, [r3, #4]
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	609a      	str	r2, [r3, #8]
}
 801d6d6:	bf00      	nop
 801d6d8:	370c      	adds	r7, #12
 801d6da:	46bd      	mov	sp, r7
 801d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6e0:	4770      	bx	lr

0801d6e2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801d6e2:	b580      	push	{r7, lr}
 801d6e4:	b096      	sub	sp, #88	; 0x58
 801d6e6:	af00      	add	r7, sp, #0
 801d6e8:	6078      	str	r0, [r7, #4]
 801d6ea:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801d6ec:	f107 030c 	add.w	r3, r7, #12
 801d6f0:	6839      	ldr	r1, [r7, #0]
 801d6f2:	4618      	mov	r0, r3
 801d6f4:	f7ff ffe0 	bl	801d6b8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801d6f8:	e009      	b.n	801d70e <f_puts+0x2c>
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	1c5a      	adds	r2, r3, #1
 801d6fe:	607a      	str	r2, [r7, #4]
 801d700:	781a      	ldrb	r2, [r3, #0]
 801d702:	f107 030c 	add.w	r3, r7, #12
 801d706:	4611      	mov	r1, r2
 801d708:	4618      	mov	r0, r3
 801d70a:	f7ff ff72 	bl	801d5f2 <putc_bfd>
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	781b      	ldrb	r3, [r3, #0]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d1f1      	bne.n	801d6fa <f_puts+0x18>
	return putc_flush(&pb);
 801d716:	f107 030c 	add.w	r3, r7, #12
 801d71a:	4618      	mov	r0, r3
 801d71c:	f7ff ffa6 	bl	801d66c <putc_flush>
 801d720:	4603      	mov	r3, r0
}
 801d722:	4618      	mov	r0, r3
 801d724:	3758      	adds	r7, #88	; 0x58
 801d726:	46bd      	mov	sp, r7
 801d728:	bd80      	pop	{r7, pc}
	...

0801d72c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d72c:	b480      	push	{r7}
 801d72e:	b087      	sub	sp, #28
 801d730:	af00      	add	r7, sp, #0
 801d732:	60f8      	str	r0, [r7, #12]
 801d734:	60b9      	str	r1, [r7, #8]
 801d736:	4613      	mov	r3, r2
 801d738:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d73a:	2301      	movs	r3, #1
 801d73c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d73e:	2300      	movs	r3, #0
 801d740:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d742:	4b1f      	ldr	r3, [pc, #124]	; (801d7c0 <FATFS_LinkDriverEx+0x94>)
 801d744:	7cdb      	ldrb	r3, [r3, #19]
 801d746:	b2db      	uxtb	r3, r3
 801d748:	2b02      	cmp	r3, #2
 801d74a:	d831      	bhi.n	801d7b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d74c:	4b1c      	ldr	r3, [pc, #112]	; (801d7c0 <FATFS_LinkDriverEx+0x94>)
 801d74e:	7cdb      	ldrb	r3, [r3, #19]
 801d750:	b2db      	uxtb	r3, r3
 801d752:	461a      	mov	r2, r3
 801d754:	4b1a      	ldr	r3, [pc, #104]	; (801d7c0 <FATFS_LinkDriverEx+0x94>)
 801d756:	2100      	movs	r1, #0
 801d758:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d75a:	4b19      	ldr	r3, [pc, #100]	; (801d7c0 <FATFS_LinkDriverEx+0x94>)
 801d75c:	7cdb      	ldrb	r3, [r3, #19]
 801d75e:	b2db      	uxtb	r3, r3
 801d760:	4a17      	ldr	r2, [pc, #92]	; (801d7c0 <FATFS_LinkDriverEx+0x94>)
 801d762:	009b      	lsls	r3, r3, #2
 801d764:	4413      	add	r3, r2
 801d766:	68fa      	ldr	r2, [r7, #12]
 801d768:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d76a:	4b15      	ldr	r3, [pc, #84]	; (801d7c0 <FATFS_LinkDriverEx+0x94>)
 801d76c:	7cdb      	ldrb	r3, [r3, #19]
 801d76e:	b2db      	uxtb	r3, r3
 801d770:	461a      	mov	r2, r3
 801d772:	4b13      	ldr	r3, [pc, #76]	; (801d7c0 <FATFS_LinkDriverEx+0x94>)
 801d774:	4413      	add	r3, r2
 801d776:	79fa      	ldrb	r2, [r7, #7]
 801d778:	741a      	strb	r2, [r3, #16]
    DiskNum = disk.nbr++;
 801d77a:	4b11      	ldr	r3, [pc, #68]	; (801d7c0 <FATFS_LinkDriverEx+0x94>)
 801d77c:	7cdb      	ldrb	r3, [r3, #19]
 801d77e:	b2db      	uxtb	r3, r3
 801d780:	1c5a      	adds	r2, r3, #1
 801d782:	b2d1      	uxtb	r1, r2
 801d784:	4a0e      	ldr	r2, [pc, #56]	; (801d7c0 <FATFS_LinkDriverEx+0x94>)
 801d786:	74d1      	strb	r1, [r2, #19]
 801d788:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d78a:	7dbb      	ldrb	r3, [r7, #22]
 801d78c:	3330      	adds	r3, #48	; 0x30
 801d78e:	b2da      	uxtb	r2, r3
 801d790:	68bb      	ldr	r3, [r7, #8]
 801d792:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d794:	68bb      	ldr	r3, [r7, #8]
 801d796:	3301      	adds	r3, #1
 801d798:	223a      	movs	r2, #58	; 0x3a
 801d79a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d79c:	68bb      	ldr	r3, [r7, #8]
 801d79e:	3302      	adds	r3, #2
 801d7a0:	222f      	movs	r2, #47	; 0x2f
 801d7a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d7a4:	68bb      	ldr	r3, [r7, #8]
 801d7a6:	3303      	adds	r3, #3
 801d7a8:	2200      	movs	r2, #0
 801d7aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d7ac:	2300      	movs	r3, #0
 801d7ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d7b0:	7dfb      	ldrb	r3, [r7, #23]
}
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	371c      	adds	r7, #28
 801d7b6:	46bd      	mov	sp, r7
 801d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7bc:	4770      	bx	lr
 801d7be:	bf00      	nop
 801d7c0:	200009b8 	.word	0x200009b8

0801d7c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d7c4:	b580      	push	{r7, lr}
 801d7c6:	b082      	sub	sp, #8
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	6078      	str	r0, [r7, #4]
 801d7cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d7ce:	2200      	movs	r2, #0
 801d7d0:	6839      	ldr	r1, [r7, #0]
 801d7d2:	6878      	ldr	r0, [r7, #4]
 801d7d4:	f7ff ffaa 	bl	801d72c <FATFS_LinkDriverEx>
 801d7d8:	4603      	mov	r3, r0
}
 801d7da:	4618      	mov	r0, r3
 801d7dc:	3708      	adds	r7, #8
 801d7de:	46bd      	mov	sp, r7
 801d7e0:	bd80      	pop	{r7, pc}
	...

0801d7e4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801d7e4:	b480      	push	{r7}
 801d7e6:	b085      	sub	sp, #20
 801d7e8:	af00      	add	r7, sp, #0
 801d7ea:	4603      	mov	r3, r0
 801d7ec:	6039      	str	r1, [r7, #0]
 801d7ee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801d7f0:	88fb      	ldrh	r3, [r7, #6]
 801d7f2:	2b7f      	cmp	r3, #127	; 0x7f
 801d7f4:	d802      	bhi.n	801d7fc <ff_convert+0x18>
		c = chr;
 801d7f6:	88fb      	ldrh	r3, [r7, #6]
 801d7f8:	81fb      	strh	r3, [r7, #14]
 801d7fa:	e025      	b.n	801d848 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801d7fc:	683b      	ldr	r3, [r7, #0]
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d00b      	beq.n	801d81a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d802:	88fb      	ldrh	r3, [r7, #6]
 801d804:	2bff      	cmp	r3, #255	; 0xff
 801d806:	d805      	bhi.n	801d814 <ff_convert+0x30>
 801d808:	88fb      	ldrh	r3, [r7, #6]
 801d80a:	3b80      	subs	r3, #128	; 0x80
 801d80c:	4a12      	ldr	r2, [pc, #72]	; (801d858 <ff_convert+0x74>)
 801d80e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d812:	e000      	b.n	801d816 <ff_convert+0x32>
 801d814:	2300      	movs	r3, #0
 801d816:	81fb      	strh	r3, [r7, #14]
 801d818:	e016      	b.n	801d848 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801d81a:	2300      	movs	r3, #0
 801d81c:	81fb      	strh	r3, [r7, #14]
 801d81e:	e009      	b.n	801d834 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801d820:	89fb      	ldrh	r3, [r7, #14]
 801d822:	4a0d      	ldr	r2, [pc, #52]	; (801d858 <ff_convert+0x74>)
 801d824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d828:	88fa      	ldrh	r2, [r7, #6]
 801d82a:	429a      	cmp	r2, r3
 801d82c:	d006      	beq.n	801d83c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801d82e:	89fb      	ldrh	r3, [r7, #14]
 801d830:	3301      	adds	r3, #1
 801d832:	81fb      	strh	r3, [r7, #14]
 801d834:	89fb      	ldrh	r3, [r7, #14]
 801d836:	2b7f      	cmp	r3, #127	; 0x7f
 801d838:	d9f2      	bls.n	801d820 <ff_convert+0x3c>
 801d83a:	e000      	b.n	801d83e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801d83c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801d83e:	89fb      	ldrh	r3, [r7, #14]
 801d840:	3380      	adds	r3, #128	; 0x80
 801d842:	b29b      	uxth	r3, r3
 801d844:	b2db      	uxtb	r3, r3
 801d846:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801d848:	89fb      	ldrh	r3, [r7, #14]
}
 801d84a:	4618      	mov	r0, r3
 801d84c:	3714      	adds	r7, #20
 801d84e:	46bd      	mov	sp, r7
 801d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d854:	4770      	bx	lr
 801d856:	bf00      	nop
 801d858:	08022f9c 	.word	0x08022f9c

0801d85c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801d85c:	b480      	push	{r7}
 801d85e:	b087      	sub	sp, #28
 801d860:	af00      	add	r7, sp, #0
 801d862:	4603      	mov	r3, r0
 801d864:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801d866:	88fb      	ldrh	r3, [r7, #6]
 801d868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d86c:	d201      	bcs.n	801d872 <ff_wtoupper+0x16>
 801d86e:	4b3e      	ldr	r3, [pc, #248]	; (801d968 <ff_wtoupper+0x10c>)
 801d870:	e000      	b.n	801d874 <ff_wtoupper+0x18>
 801d872:	4b3e      	ldr	r3, [pc, #248]	; (801d96c <ff_wtoupper+0x110>)
 801d874:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801d876:	697b      	ldr	r3, [r7, #20]
 801d878:	1c9a      	adds	r2, r3, #2
 801d87a:	617a      	str	r2, [r7, #20]
 801d87c:	881b      	ldrh	r3, [r3, #0]
 801d87e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801d880:	8a7b      	ldrh	r3, [r7, #18]
 801d882:	2b00      	cmp	r3, #0
 801d884:	d068      	beq.n	801d958 <ff_wtoupper+0xfc>
 801d886:	88fa      	ldrh	r2, [r7, #6]
 801d888:	8a7b      	ldrh	r3, [r7, #18]
 801d88a:	429a      	cmp	r2, r3
 801d88c:	d364      	bcc.n	801d958 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801d88e:	697b      	ldr	r3, [r7, #20]
 801d890:	1c9a      	adds	r2, r3, #2
 801d892:	617a      	str	r2, [r7, #20]
 801d894:	881b      	ldrh	r3, [r3, #0]
 801d896:	823b      	strh	r3, [r7, #16]
 801d898:	8a3b      	ldrh	r3, [r7, #16]
 801d89a:	0a1b      	lsrs	r3, r3, #8
 801d89c:	81fb      	strh	r3, [r7, #14]
 801d89e:	8a3b      	ldrh	r3, [r7, #16]
 801d8a0:	b2db      	uxtb	r3, r3
 801d8a2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801d8a4:	88fa      	ldrh	r2, [r7, #6]
 801d8a6:	8a79      	ldrh	r1, [r7, #18]
 801d8a8:	8a3b      	ldrh	r3, [r7, #16]
 801d8aa:	440b      	add	r3, r1
 801d8ac:	429a      	cmp	r2, r3
 801d8ae:	da49      	bge.n	801d944 <ff_wtoupper+0xe8>
			switch (cmd) {
 801d8b0:	89fb      	ldrh	r3, [r7, #14]
 801d8b2:	2b08      	cmp	r3, #8
 801d8b4:	d84f      	bhi.n	801d956 <ff_wtoupper+0xfa>
 801d8b6:	a201      	add	r2, pc, #4	; (adr r2, 801d8bc <ff_wtoupper+0x60>)
 801d8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d8bc:	0801d8e1 	.word	0x0801d8e1
 801d8c0:	0801d8f3 	.word	0x0801d8f3
 801d8c4:	0801d909 	.word	0x0801d909
 801d8c8:	0801d911 	.word	0x0801d911
 801d8cc:	0801d919 	.word	0x0801d919
 801d8d0:	0801d921 	.word	0x0801d921
 801d8d4:	0801d929 	.word	0x0801d929
 801d8d8:	0801d931 	.word	0x0801d931
 801d8dc:	0801d939 	.word	0x0801d939
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801d8e0:	88fa      	ldrh	r2, [r7, #6]
 801d8e2:	8a7b      	ldrh	r3, [r7, #18]
 801d8e4:	1ad3      	subs	r3, r2, r3
 801d8e6:	005b      	lsls	r3, r3, #1
 801d8e8:	697a      	ldr	r2, [r7, #20]
 801d8ea:	4413      	add	r3, r2
 801d8ec:	881b      	ldrh	r3, [r3, #0]
 801d8ee:	80fb      	strh	r3, [r7, #6]
 801d8f0:	e027      	b.n	801d942 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801d8f2:	88fa      	ldrh	r2, [r7, #6]
 801d8f4:	8a7b      	ldrh	r3, [r7, #18]
 801d8f6:	1ad3      	subs	r3, r2, r3
 801d8f8:	b29b      	uxth	r3, r3
 801d8fa:	f003 0301 	and.w	r3, r3, #1
 801d8fe:	b29b      	uxth	r3, r3
 801d900:	88fa      	ldrh	r2, [r7, #6]
 801d902:	1ad3      	subs	r3, r2, r3
 801d904:	80fb      	strh	r3, [r7, #6]
 801d906:	e01c      	b.n	801d942 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801d908:	88fb      	ldrh	r3, [r7, #6]
 801d90a:	3b10      	subs	r3, #16
 801d90c:	80fb      	strh	r3, [r7, #6]
 801d90e:	e018      	b.n	801d942 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801d910:	88fb      	ldrh	r3, [r7, #6]
 801d912:	3b20      	subs	r3, #32
 801d914:	80fb      	strh	r3, [r7, #6]
 801d916:	e014      	b.n	801d942 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801d918:	88fb      	ldrh	r3, [r7, #6]
 801d91a:	3b30      	subs	r3, #48	; 0x30
 801d91c:	80fb      	strh	r3, [r7, #6]
 801d91e:	e010      	b.n	801d942 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801d920:	88fb      	ldrh	r3, [r7, #6]
 801d922:	3b1a      	subs	r3, #26
 801d924:	80fb      	strh	r3, [r7, #6]
 801d926:	e00c      	b.n	801d942 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801d928:	88fb      	ldrh	r3, [r7, #6]
 801d92a:	3308      	adds	r3, #8
 801d92c:	80fb      	strh	r3, [r7, #6]
 801d92e:	e008      	b.n	801d942 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801d930:	88fb      	ldrh	r3, [r7, #6]
 801d932:	3b50      	subs	r3, #80	; 0x50
 801d934:	80fb      	strh	r3, [r7, #6]
 801d936:	e004      	b.n	801d942 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801d938:	88fb      	ldrh	r3, [r7, #6]
 801d93a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801d93e:	80fb      	strh	r3, [r7, #6]
 801d940:	bf00      	nop
			}
			break;
 801d942:	e008      	b.n	801d956 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801d944:	89fb      	ldrh	r3, [r7, #14]
 801d946:	2b00      	cmp	r3, #0
 801d948:	d195      	bne.n	801d876 <ff_wtoupper+0x1a>
 801d94a:	8a3b      	ldrh	r3, [r7, #16]
 801d94c:	005b      	lsls	r3, r3, #1
 801d94e:	697a      	ldr	r2, [r7, #20]
 801d950:	4413      	add	r3, r2
 801d952:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801d954:	e78f      	b.n	801d876 <ff_wtoupper+0x1a>
			break;
 801d956:	bf00      	nop
	}

	return chr;
 801d958:	88fb      	ldrh	r3, [r7, #6]
}
 801d95a:	4618      	mov	r0, r3
 801d95c:	371c      	adds	r7, #28
 801d95e:	46bd      	mov	sp, r7
 801d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d964:	4770      	bx	lr
 801d966:	bf00      	nop
 801d968:	0802309c 	.word	0x0802309c
 801d96c:	08023290 	.word	0x08023290

0801d970 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801d974:	2201      	movs	r2, #1
 801d976:	490e      	ldr	r1, [pc, #56]	; (801d9b0 <MX_USB_HOST_Init+0x40>)
 801d978:	480e      	ldr	r0, [pc, #56]	; (801d9b4 <MX_USB_HOST_Init+0x44>)
 801d97a:	f7fa fdf9 	bl	8018570 <USBH_Init>
 801d97e:	4603      	mov	r3, r0
 801d980:	2b00      	cmp	r3, #0
 801d982:	d001      	beq.n	801d988 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801d984:	f7e9 f9c0 	bl	8006d08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 801d988:	490b      	ldr	r1, [pc, #44]	; (801d9b8 <MX_USB_HOST_Init+0x48>)
 801d98a:	480a      	ldr	r0, [pc, #40]	; (801d9b4 <MX_USB_HOST_Init+0x44>)
 801d98c:	f7fa fe7e 	bl	801868c <USBH_RegisterClass>
 801d990:	4603      	mov	r3, r0
 801d992:	2b00      	cmp	r3, #0
 801d994:	d001      	beq.n	801d99a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801d996:	f7e9 f9b7 	bl	8006d08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801d99a:	4806      	ldr	r0, [pc, #24]	; (801d9b4 <MX_USB_HOST_Init+0x44>)
 801d99c:	f7fa ff02 	bl	80187a4 <USBH_Start>
 801d9a0:	4603      	mov	r3, r0
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d001      	beq.n	801d9aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801d9a6:	f7e9 f9af 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801d9aa:	bf00      	nop
 801d9ac:	bd80      	pop	{r7, pc}
 801d9ae:	bf00      	nop
 801d9b0:	0801d9d1 	.word	0x0801d9d1
 801d9b4:	2000821c 	.word	0x2000821c
 801d9b8:	2000007c 	.word	0x2000007c

0801d9bc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801d9bc:	b580      	push	{r7, lr}
 801d9be:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801d9c0:	4802      	ldr	r0, [pc, #8]	; (801d9cc <MX_USB_HOST_Process+0x10>)
 801d9c2:	f7fa feff 	bl	80187c4 <USBH_Process>
}
 801d9c6:	bf00      	nop
 801d9c8:	bd80      	pop	{r7, pc}
 801d9ca:	bf00      	nop
 801d9cc:	2000821c 	.word	0x2000821c

0801d9d0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801d9d0:	b480      	push	{r7}
 801d9d2:	b083      	sub	sp, #12
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	6078      	str	r0, [r7, #4]
 801d9d8:	460b      	mov	r3, r1
 801d9da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801d9dc:	78fb      	ldrb	r3, [r7, #3]
 801d9de:	3b01      	subs	r3, #1
 801d9e0:	2b04      	cmp	r3, #4
 801d9e2:	d819      	bhi.n	801da18 <USBH_UserProcess+0x48>
 801d9e4:	a201      	add	r2, pc, #4	; (adr r2, 801d9ec <USBH_UserProcess+0x1c>)
 801d9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d9ea:	bf00      	nop
 801d9ec:	0801da19 	.word	0x0801da19
 801d9f0:	0801da09 	.word	0x0801da09
 801d9f4:	0801da19 	.word	0x0801da19
 801d9f8:	0801da11 	.word	0x0801da11
 801d9fc:	0801da01 	.word	0x0801da01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801da00:	4b09      	ldr	r3, [pc, #36]	; (801da28 <USBH_UserProcess+0x58>)
 801da02:	2203      	movs	r2, #3
 801da04:	701a      	strb	r2, [r3, #0]
  break;
 801da06:	e008      	b.n	801da1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801da08:	4b07      	ldr	r3, [pc, #28]	; (801da28 <USBH_UserProcess+0x58>)
 801da0a:	2202      	movs	r2, #2
 801da0c:	701a      	strb	r2, [r3, #0]
  break;
 801da0e:	e004      	b.n	801da1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801da10:	4b05      	ldr	r3, [pc, #20]	; (801da28 <USBH_UserProcess+0x58>)
 801da12:	2201      	movs	r2, #1
 801da14:	701a      	strb	r2, [r3, #0]
  break;
 801da16:	e000      	b.n	801da1a <USBH_UserProcess+0x4a>

  default:
  break;
 801da18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801da1a:	bf00      	nop
 801da1c:	370c      	adds	r7, #12
 801da1e:	46bd      	mov	sp, r7
 801da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da24:	4770      	bx	lr
 801da26:	bf00      	nop
 801da28:	200009cc 	.word	0x200009cc

0801da2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b08a      	sub	sp, #40	; 0x28
 801da30:	af00      	add	r7, sp, #0
 801da32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801da34:	f107 0314 	add.w	r3, r7, #20
 801da38:	2200      	movs	r2, #0
 801da3a:	601a      	str	r2, [r3, #0]
 801da3c:	605a      	str	r2, [r3, #4]
 801da3e:	609a      	str	r2, [r3, #8]
 801da40:	60da      	str	r2, [r3, #12]
 801da42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801da4c:	d13c      	bne.n	801dac8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801da4e:	4b20      	ldr	r3, [pc, #128]	; (801dad0 <HAL_HCD_MspInit+0xa4>)
 801da50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da52:	4a1f      	ldr	r2, [pc, #124]	; (801dad0 <HAL_HCD_MspInit+0xa4>)
 801da54:	f043 0301 	orr.w	r3, r3, #1
 801da58:	6313      	str	r3, [r2, #48]	; 0x30
 801da5a:	4b1d      	ldr	r3, [pc, #116]	; (801dad0 <HAL_HCD_MspInit+0xa4>)
 801da5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da5e:	f003 0301 	and.w	r3, r3, #1
 801da62:	613b      	str	r3, [r7, #16]
 801da64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801da66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801da6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801da6c:	2302      	movs	r3, #2
 801da6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801da70:	2300      	movs	r3, #0
 801da72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801da74:	2303      	movs	r3, #3
 801da76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801da78:	230a      	movs	r3, #10
 801da7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801da7c:	f107 0314 	add.w	r3, r7, #20
 801da80:	4619      	mov	r1, r3
 801da82:	4814      	ldr	r0, [pc, #80]	; (801dad4 <HAL_HCD_MspInit+0xa8>)
 801da84:	f7eb fd24 	bl	80094d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801da88:	4b11      	ldr	r3, [pc, #68]	; (801dad0 <HAL_HCD_MspInit+0xa4>)
 801da8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da8c:	4a10      	ldr	r2, [pc, #64]	; (801dad0 <HAL_HCD_MspInit+0xa4>)
 801da8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801da92:	6353      	str	r3, [r2, #52]	; 0x34
 801da94:	4b0e      	ldr	r3, [pc, #56]	; (801dad0 <HAL_HCD_MspInit+0xa4>)
 801da96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801da9c:	60fb      	str	r3, [r7, #12]
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	4b0b      	ldr	r3, [pc, #44]	; (801dad0 <HAL_HCD_MspInit+0xa4>)
 801daa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801daa4:	4a0a      	ldr	r2, [pc, #40]	; (801dad0 <HAL_HCD_MspInit+0xa4>)
 801daa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801daaa:	6453      	str	r3, [r2, #68]	; 0x44
 801daac:	4b08      	ldr	r3, [pc, #32]	; (801dad0 <HAL_HCD_MspInit+0xa4>)
 801daae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801dab4:	60bb      	str	r3, [r7, #8]
 801dab6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801dab8:	2200      	movs	r2, #0
 801daba:	2100      	movs	r1, #0
 801dabc:	2043      	movs	r0, #67	; 0x43
 801dabe:	f7ea fccc 	bl	800845a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801dac2:	2043      	movs	r0, #67	; 0x43
 801dac4:	f7ea fce5 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801dac8:	bf00      	nop
 801daca:	3728      	adds	r7, #40	; 0x28
 801dacc:	46bd      	mov	sp, r7
 801dace:	bd80      	pop	{r7, pc}
 801dad0:	40023800 	.word	0x40023800
 801dad4:	40020000 	.word	0x40020000

0801dad8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801dad8:	b580      	push	{r7, lr}
 801dada:	b082      	sub	sp, #8
 801dadc:	af00      	add	r7, sp, #0
 801dade:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dae6:	4618      	mov	r0, r3
 801dae8:	f7fb fa3f 	bl	8018f6a <USBH_LL_IncTimer>
}
 801daec:	bf00      	nop
 801daee:	3708      	adds	r7, #8
 801daf0:	46bd      	mov	sp, r7
 801daf2:	bd80      	pop	{r7, pc}

0801daf4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801daf4:	b580      	push	{r7, lr}
 801daf6:	b082      	sub	sp, #8
 801daf8:	af00      	add	r7, sp, #0
 801dafa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801db02:	4618      	mov	r0, r3
 801db04:	f7fb fa77 	bl	8018ff6 <USBH_LL_Connect>
}
 801db08:	bf00      	nop
 801db0a:	3708      	adds	r7, #8
 801db0c:	46bd      	mov	sp, r7
 801db0e:	bd80      	pop	{r7, pc}

0801db10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801db10:	b580      	push	{r7, lr}
 801db12:	b082      	sub	sp, #8
 801db14:	af00      	add	r7, sp, #0
 801db16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801db1e:	4618      	mov	r0, r3
 801db20:	f7fb fa80 	bl	8019024 <USBH_LL_Disconnect>
}
 801db24:	bf00      	nop
 801db26:	3708      	adds	r7, #8
 801db28:	46bd      	mov	sp, r7
 801db2a:	bd80      	pop	{r7, pc}

0801db2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801db2c:	b480      	push	{r7}
 801db2e:	b083      	sub	sp, #12
 801db30:	af00      	add	r7, sp, #0
 801db32:	6078      	str	r0, [r7, #4]
 801db34:	460b      	mov	r3, r1
 801db36:	70fb      	strb	r3, [r7, #3]
 801db38:	4613      	mov	r3, r2
 801db3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801db3c:	bf00      	nop
 801db3e:	370c      	adds	r7, #12
 801db40:	46bd      	mov	sp, r7
 801db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db46:	4770      	bx	lr

0801db48 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801db48:	b580      	push	{r7, lr}
 801db4a:	b082      	sub	sp, #8
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801db56:	4618      	mov	r0, r3
 801db58:	f7fb fa31 	bl	8018fbe <USBH_LL_PortEnabled>
} 
 801db5c:	bf00      	nop
 801db5e:	3708      	adds	r7, #8
 801db60:	46bd      	mov	sp, r7
 801db62:	bd80      	pop	{r7, pc}

0801db64 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801db64:	b580      	push	{r7, lr}
 801db66:	b082      	sub	sp, #8
 801db68:	af00      	add	r7, sp, #0
 801db6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801db72:	4618      	mov	r0, r3
 801db74:	f7fb fa31 	bl	8018fda <USBH_LL_PortDisabled>
} 
 801db78:	bf00      	nop
 801db7a:	3708      	adds	r7, #8
 801db7c:	46bd      	mov	sp, r7
 801db7e:	bd80      	pop	{r7, pc}

0801db80 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801db80:	b580      	push	{r7, lr}
 801db82:	b082      	sub	sp, #8
 801db84:	af00      	add	r7, sp, #0
 801db86:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801db8e:	2b01      	cmp	r3, #1
 801db90:	d12a      	bne.n	801dbe8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801db92:	4a18      	ldr	r2, [pc, #96]	; (801dbf4 <USBH_LL_Init+0x74>)
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	4a15      	ldr	r2, [pc, #84]	; (801dbf4 <USBH_LL_Init+0x74>)
 801db9e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801dba2:	4b14      	ldr	r3, [pc, #80]	; (801dbf4 <USBH_LL_Init+0x74>)
 801dba4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801dba8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801dbaa:	4b12      	ldr	r3, [pc, #72]	; (801dbf4 <USBH_LL_Init+0x74>)
 801dbac:	2208      	movs	r2, #8
 801dbae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801dbb0:	4b10      	ldr	r3, [pc, #64]	; (801dbf4 <USBH_LL_Init+0x74>)
 801dbb2:	2201      	movs	r2, #1
 801dbb4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801dbb6:	4b0f      	ldr	r3, [pc, #60]	; (801dbf4 <USBH_LL_Init+0x74>)
 801dbb8:	2200      	movs	r2, #0
 801dbba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801dbbc:	4b0d      	ldr	r3, [pc, #52]	; (801dbf4 <USBH_LL_Init+0x74>)
 801dbbe:	2202      	movs	r2, #2
 801dbc0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801dbc2:	4b0c      	ldr	r3, [pc, #48]	; (801dbf4 <USBH_LL_Init+0x74>)
 801dbc4:	2200      	movs	r2, #0
 801dbc6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801dbc8:	480a      	ldr	r0, [pc, #40]	; (801dbf4 <USBH_LL_Init+0x74>)
 801dbca:	f7eb fe8f 	bl	80098ec <HAL_HCD_Init>
 801dbce:	4603      	mov	r3, r0
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d001      	beq.n	801dbd8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801dbd4:	f7e9 f898 	bl	8006d08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801dbd8:	4806      	ldr	r0, [pc, #24]	; (801dbf4 <USBH_LL_Init+0x74>)
 801dbda:	f7ec fa93 	bl	800a104 <HAL_HCD_GetCurrentFrame>
 801dbde:	4603      	mov	r3, r0
 801dbe0:	4619      	mov	r1, r3
 801dbe2:	6878      	ldr	r0, [r7, #4]
 801dbe4:	f7fb f9b2 	bl	8018f4c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801dbe8:	2300      	movs	r3, #0
}
 801dbea:	4618      	mov	r0, r3
 801dbec:	3708      	adds	r7, #8
 801dbee:	46bd      	mov	sp, r7
 801dbf0:	bd80      	pop	{r7, pc}
 801dbf2:	bf00      	nop
 801dbf4:	20019634 	.word	0x20019634

0801dbf8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801dbf8:	b580      	push	{r7, lr}
 801dbfa:	b084      	sub	sp, #16
 801dbfc:	af00      	add	r7, sp, #0
 801dbfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc00:	2300      	movs	r3, #0
 801dc02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801dc04:	2300      	movs	r3, #0
 801dc06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dc0e:	4618      	mov	r0, r3
 801dc10:	f7ec fa00 	bl	800a014 <HAL_HCD_Start>
 801dc14:	4603      	mov	r3, r0
 801dc16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801dc18:	7bfb      	ldrb	r3, [r7, #15]
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	f000 f990 	bl	801df40 <USBH_Get_USB_Status>
 801dc20:	4603      	mov	r3, r0
 801dc22:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801dc24:	7bbb      	ldrb	r3, [r7, #14]
}
 801dc26:	4618      	mov	r0, r3
 801dc28:	3710      	adds	r7, #16
 801dc2a:	46bd      	mov	sp, r7
 801dc2c:	bd80      	pop	{r7, pc}

0801dc2e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801dc2e:	b580      	push	{r7, lr}
 801dc30:	b084      	sub	sp, #16
 801dc32:	af00      	add	r7, sp, #0
 801dc34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc36:	2300      	movs	r3, #0
 801dc38:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801dc3a:	2300      	movs	r3, #0
 801dc3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dc44:	4618      	mov	r0, r3
 801dc46:	f7ec fa08 	bl	800a05a <HAL_HCD_Stop>
 801dc4a:	4603      	mov	r3, r0
 801dc4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801dc4e:	7bfb      	ldrb	r3, [r7, #15]
 801dc50:	4618      	mov	r0, r3
 801dc52:	f000 f975 	bl	801df40 <USBH_Get_USB_Status>
 801dc56:	4603      	mov	r3, r0
 801dc58:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801dc5a:	7bbb      	ldrb	r3, [r7, #14]
}
 801dc5c:	4618      	mov	r0, r3
 801dc5e:	3710      	adds	r7, #16
 801dc60:	46bd      	mov	sp, r7
 801dc62:	bd80      	pop	{r7, pc}

0801dc64 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801dc64:	b580      	push	{r7, lr}
 801dc66:	b084      	sub	sp, #16
 801dc68:	af00      	add	r7, sp, #0
 801dc6a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801dc6c:	2301      	movs	r3, #1
 801dc6e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dc76:	4618      	mov	r0, r3
 801dc78:	f7ec fa52 	bl	800a120 <HAL_HCD_GetCurrentSpeed>
 801dc7c:	4603      	mov	r3, r0
 801dc7e:	2b01      	cmp	r3, #1
 801dc80:	d007      	beq.n	801dc92 <USBH_LL_GetSpeed+0x2e>
 801dc82:	2b01      	cmp	r3, #1
 801dc84:	d302      	bcc.n	801dc8c <USBH_LL_GetSpeed+0x28>
 801dc86:	2b02      	cmp	r3, #2
 801dc88:	d006      	beq.n	801dc98 <USBH_LL_GetSpeed+0x34>
 801dc8a:	e008      	b.n	801dc9e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801dc8c:	2300      	movs	r3, #0
 801dc8e:	73fb      	strb	r3, [r7, #15]
    break;
 801dc90:	e008      	b.n	801dca4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801dc92:	2301      	movs	r3, #1
 801dc94:	73fb      	strb	r3, [r7, #15]
    break;
 801dc96:	e005      	b.n	801dca4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 801dc98:	2302      	movs	r3, #2
 801dc9a:	73fb      	strb	r3, [r7, #15]
    break;
 801dc9c:	e002      	b.n	801dca4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801dc9e:	2301      	movs	r3, #1
 801dca0:	73fb      	strb	r3, [r7, #15]
    break;
 801dca2:	bf00      	nop
  }
  return  speed;
 801dca4:	7bfb      	ldrb	r3, [r7, #15]
}
 801dca6:	4618      	mov	r0, r3
 801dca8:	3710      	adds	r7, #16
 801dcaa:	46bd      	mov	sp, r7
 801dcac:	bd80      	pop	{r7, pc}

0801dcae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801dcae:	b580      	push	{r7, lr}
 801dcb0:	b084      	sub	sp, #16
 801dcb2:	af00      	add	r7, sp, #0
 801dcb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dcb6:	2300      	movs	r3, #0
 801dcb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801dcba:	2300      	movs	r3, #0
 801dcbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	f7ec f9e5 	bl	800a094 <HAL_HCD_ResetPort>
 801dcca:	4603      	mov	r3, r0
 801dccc:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801dcce:	7bfb      	ldrb	r3, [r7, #15]
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	f000 f935 	bl	801df40 <USBH_Get_USB_Status>
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801dcda:	7bbb      	ldrb	r3, [r7, #14]
}
 801dcdc:	4618      	mov	r0, r3
 801dcde:	3710      	adds	r7, #16
 801dce0:	46bd      	mov	sp, r7
 801dce2:	bd80      	pop	{r7, pc}

0801dce4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801dce4:	b580      	push	{r7, lr}
 801dce6:	b082      	sub	sp, #8
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	6078      	str	r0, [r7, #4]
 801dcec:	460b      	mov	r3, r1
 801dcee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dcf6:	78fa      	ldrb	r2, [r7, #3]
 801dcf8:	4611      	mov	r1, r2
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	f7ec f9ed 	bl	800a0da <HAL_HCD_HC_GetXferCount>
 801dd00:	4603      	mov	r3, r0
}
 801dd02:	4618      	mov	r0, r3
 801dd04:	3708      	adds	r7, #8
 801dd06:	46bd      	mov	sp, r7
 801dd08:	bd80      	pop	{r7, pc}

0801dd0a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801dd0a:	b590      	push	{r4, r7, lr}
 801dd0c:	b089      	sub	sp, #36	; 0x24
 801dd0e:	af04      	add	r7, sp, #16
 801dd10:	6078      	str	r0, [r7, #4]
 801dd12:	4608      	mov	r0, r1
 801dd14:	4611      	mov	r1, r2
 801dd16:	461a      	mov	r2, r3
 801dd18:	4603      	mov	r3, r0
 801dd1a:	70fb      	strb	r3, [r7, #3]
 801dd1c:	460b      	mov	r3, r1
 801dd1e:	70bb      	strb	r3, [r7, #2]
 801dd20:	4613      	mov	r3, r2
 801dd22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd24:	2300      	movs	r3, #0
 801dd26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801dd28:	2300      	movs	r3, #0
 801dd2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801dd32:	787c      	ldrb	r4, [r7, #1]
 801dd34:	78ba      	ldrb	r2, [r7, #2]
 801dd36:	78f9      	ldrb	r1, [r7, #3]
 801dd38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dd3a:	9302      	str	r3, [sp, #8]
 801dd3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801dd40:	9301      	str	r3, [sp, #4]
 801dd42:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dd46:	9300      	str	r3, [sp, #0]
 801dd48:	4623      	mov	r3, r4
 801dd4a:	f7eb fe31 	bl	80099b0 <HAL_HCD_HC_Init>
 801dd4e:	4603      	mov	r3, r0
 801dd50:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801dd52:	7bfb      	ldrb	r3, [r7, #15]
 801dd54:	4618      	mov	r0, r3
 801dd56:	f000 f8f3 	bl	801df40 <USBH_Get_USB_Status>
 801dd5a:	4603      	mov	r3, r0
 801dd5c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801dd5e:	7bbb      	ldrb	r3, [r7, #14]
}
 801dd60:	4618      	mov	r0, r3
 801dd62:	3714      	adds	r7, #20
 801dd64:	46bd      	mov	sp, r7
 801dd66:	bd90      	pop	{r4, r7, pc}

0801dd68 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	b084      	sub	sp, #16
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	6078      	str	r0, [r7, #4]
 801dd70:	460b      	mov	r3, r1
 801dd72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd74:	2300      	movs	r3, #0
 801dd76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801dd78:	2300      	movs	r3, #0
 801dd7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dd82:	78fa      	ldrb	r2, [r7, #3]
 801dd84:	4611      	mov	r1, r2
 801dd86:	4618      	mov	r0, r3
 801dd88:	f7eb feaa 	bl	8009ae0 <HAL_HCD_HC_Halt>
 801dd8c:	4603      	mov	r3, r0
 801dd8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801dd90:	7bfb      	ldrb	r3, [r7, #15]
 801dd92:	4618      	mov	r0, r3
 801dd94:	f000 f8d4 	bl	801df40 <USBH_Get_USB_Status>
 801dd98:	4603      	mov	r3, r0
 801dd9a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801dd9c:	7bbb      	ldrb	r3, [r7, #14]
}
 801dd9e:	4618      	mov	r0, r3
 801dda0:	3710      	adds	r7, #16
 801dda2:	46bd      	mov	sp, r7
 801dda4:	bd80      	pop	{r7, pc}

0801dda6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801dda6:	b590      	push	{r4, r7, lr}
 801dda8:	b089      	sub	sp, #36	; 0x24
 801ddaa:	af04      	add	r7, sp, #16
 801ddac:	6078      	str	r0, [r7, #4]
 801ddae:	4608      	mov	r0, r1
 801ddb0:	4611      	mov	r1, r2
 801ddb2:	461a      	mov	r2, r3
 801ddb4:	4603      	mov	r3, r0
 801ddb6:	70fb      	strb	r3, [r7, #3]
 801ddb8:	460b      	mov	r3, r1
 801ddba:	70bb      	strb	r3, [r7, #2]
 801ddbc:	4613      	mov	r3, r2
 801ddbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ddc0:	2300      	movs	r3, #0
 801ddc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ddc4:	2300      	movs	r3, #0
 801ddc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801ddce:	787c      	ldrb	r4, [r7, #1]
 801ddd0:	78ba      	ldrb	r2, [r7, #2]
 801ddd2:	78f9      	ldrb	r1, [r7, #3]
 801ddd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ddd8:	9303      	str	r3, [sp, #12]
 801ddda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dddc:	9302      	str	r3, [sp, #8]
 801ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dde0:	9301      	str	r3, [sp, #4]
 801dde2:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dde6:	9300      	str	r3, [sp, #0]
 801dde8:	4623      	mov	r3, r4
 801ddea:	f7eb fe9d 	bl	8009b28 <HAL_HCD_HC_SubmitRequest>
 801ddee:	4603      	mov	r3, r0
 801ddf0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801ddf2:	7bfb      	ldrb	r3, [r7, #15]
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	f000 f8a3 	bl	801df40 <USBH_Get_USB_Status>
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801ddfe:	7bbb      	ldrb	r3, [r7, #14]
}
 801de00:	4618      	mov	r0, r3
 801de02:	3714      	adds	r7, #20
 801de04:	46bd      	mov	sp, r7
 801de06:	bd90      	pop	{r4, r7, pc}

0801de08 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801de08:	b580      	push	{r7, lr}
 801de0a:	b082      	sub	sp, #8
 801de0c:	af00      	add	r7, sp, #0
 801de0e:	6078      	str	r0, [r7, #4]
 801de10:	460b      	mov	r3, r1
 801de12:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801de1a:	78fa      	ldrb	r2, [r7, #3]
 801de1c:	4611      	mov	r1, r2
 801de1e:	4618      	mov	r0, r3
 801de20:	f7ec f946 	bl	800a0b0 <HAL_HCD_HC_GetURBState>
 801de24:	4603      	mov	r3, r0
}
 801de26:	4618      	mov	r0, r3
 801de28:	3708      	adds	r7, #8
 801de2a:	46bd      	mov	sp, r7
 801de2c:	bd80      	pop	{r7, pc}

0801de2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801de2e:	b580      	push	{r7, lr}
 801de30:	b082      	sub	sp, #8
 801de32:	af00      	add	r7, sp, #0
 801de34:	6078      	str	r0, [r7, #4]
 801de36:	460b      	mov	r3, r1
 801de38:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801de40:	2b01      	cmp	r3, #1
 801de42:	d103      	bne.n	801de4c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801de44:	78fb      	ldrb	r3, [r7, #3]
 801de46:	4618      	mov	r0, r3
 801de48:	f000 f8a6 	bl	801df98 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801de4c:	20c8      	movs	r0, #200	; 0xc8
 801de4e:	f7ea fa07 	bl	8008260 <HAL_Delay>
  return USBH_OK;
 801de52:	2300      	movs	r3, #0
}
 801de54:	4618      	mov	r0, r3
 801de56:	3708      	adds	r7, #8
 801de58:	46bd      	mov	sp, r7
 801de5a:	bd80      	pop	{r7, pc}

0801de5c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801de5c:	b480      	push	{r7}
 801de5e:	b085      	sub	sp, #20
 801de60:	af00      	add	r7, sp, #0
 801de62:	6078      	str	r0, [r7, #4]
 801de64:	460b      	mov	r3, r1
 801de66:	70fb      	strb	r3, [r7, #3]
 801de68:	4613      	mov	r3, r2
 801de6a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801de72:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801de74:	78fa      	ldrb	r2, [r7, #3]
 801de76:	68f9      	ldr	r1, [r7, #12]
 801de78:	4613      	mov	r3, r2
 801de7a:	009b      	lsls	r3, r3, #2
 801de7c:	4413      	add	r3, r2
 801de7e:	00db      	lsls	r3, r3, #3
 801de80:	440b      	add	r3, r1
 801de82:	333b      	adds	r3, #59	; 0x3b
 801de84:	781b      	ldrb	r3, [r3, #0]
 801de86:	2b00      	cmp	r3, #0
 801de88:	d00a      	beq.n	801dea0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801de8a:	78fa      	ldrb	r2, [r7, #3]
 801de8c:	68f9      	ldr	r1, [r7, #12]
 801de8e:	4613      	mov	r3, r2
 801de90:	009b      	lsls	r3, r3, #2
 801de92:	4413      	add	r3, r2
 801de94:	00db      	lsls	r3, r3, #3
 801de96:	440b      	add	r3, r1
 801de98:	3350      	adds	r3, #80	; 0x50
 801de9a:	78ba      	ldrb	r2, [r7, #2]
 801de9c:	701a      	strb	r2, [r3, #0]
 801de9e:	e009      	b.n	801deb4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801dea0:	78fa      	ldrb	r2, [r7, #3]
 801dea2:	68f9      	ldr	r1, [r7, #12]
 801dea4:	4613      	mov	r3, r2
 801dea6:	009b      	lsls	r3, r3, #2
 801dea8:	4413      	add	r3, r2
 801deaa:	00db      	lsls	r3, r3, #3
 801deac:	440b      	add	r3, r1
 801deae:	3351      	adds	r3, #81	; 0x51
 801deb0:	78ba      	ldrb	r2, [r7, #2]
 801deb2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801deb4:	2300      	movs	r3, #0
}
 801deb6:	4618      	mov	r0, r3
 801deb8:	3714      	adds	r7, #20
 801deba:	46bd      	mov	sp, r7
 801debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dec0:	4770      	bx	lr

0801dec2 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801dec2:	b480      	push	{r7}
 801dec4:	b085      	sub	sp, #20
 801dec6:	af00      	add	r7, sp, #0
 801dec8:	6078      	str	r0, [r7, #4]
 801deca:	460b      	mov	r3, r1
 801decc:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801dece:	2300      	movs	r3, #0
 801ded0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ded8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801deda:	78fa      	ldrb	r2, [r7, #3]
 801dedc:	68b9      	ldr	r1, [r7, #8]
 801dede:	4613      	mov	r3, r2
 801dee0:	009b      	lsls	r3, r3, #2
 801dee2:	4413      	add	r3, r2
 801dee4:	00db      	lsls	r3, r3, #3
 801dee6:	440b      	add	r3, r1
 801dee8:	333b      	adds	r3, #59	; 0x3b
 801deea:	781b      	ldrb	r3, [r3, #0]
 801deec:	2b00      	cmp	r3, #0
 801deee:	d00a      	beq.n	801df06 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801def0:	78fa      	ldrb	r2, [r7, #3]
 801def2:	68b9      	ldr	r1, [r7, #8]
 801def4:	4613      	mov	r3, r2
 801def6:	009b      	lsls	r3, r3, #2
 801def8:	4413      	add	r3, r2
 801defa:	00db      	lsls	r3, r3, #3
 801defc:	440b      	add	r3, r1
 801defe:	3350      	adds	r3, #80	; 0x50
 801df00:	781b      	ldrb	r3, [r3, #0]
 801df02:	73fb      	strb	r3, [r7, #15]
 801df04:	e009      	b.n	801df1a <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801df06:	78fa      	ldrb	r2, [r7, #3]
 801df08:	68b9      	ldr	r1, [r7, #8]
 801df0a:	4613      	mov	r3, r2
 801df0c:	009b      	lsls	r3, r3, #2
 801df0e:	4413      	add	r3, r2
 801df10:	00db      	lsls	r3, r3, #3
 801df12:	440b      	add	r3, r1
 801df14:	3351      	adds	r3, #81	; 0x51
 801df16:	781b      	ldrb	r3, [r3, #0]
 801df18:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801df1a:	7bfb      	ldrb	r3, [r7, #15]
}
 801df1c:	4618      	mov	r0, r3
 801df1e:	3714      	adds	r7, #20
 801df20:	46bd      	mov	sp, r7
 801df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df26:	4770      	bx	lr

0801df28 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801df28:	b580      	push	{r7, lr}
 801df2a:	b082      	sub	sp, #8
 801df2c:	af00      	add	r7, sp, #0
 801df2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801df30:	6878      	ldr	r0, [r7, #4]
 801df32:	f7ea f995 	bl	8008260 <HAL_Delay>
}
 801df36:	bf00      	nop
 801df38:	3708      	adds	r7, #8
 801df3a:	46bd      	mov	sp, r7
 801df3c:	bd80      	pop	{r7, pc}
	...

0801df40 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801df40:	b480      	push	{r7}
 801df42:	b085      	sub	sp, #20
 801df44:	af00      	add	r7, sp, #0
 801df46:	4603      	mov	r3, r0
 801df48:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801df4a:	2300      	movs	r3, #0
 801df4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801df4e:	79fb      	ldrb	r3, [r7, #7]
 801df50:	2b03      	cmp	r3, #3
 801df52:	d817      	bhi.n	801df84 <USBH_Get_USB_Status+0x44>
 801df54:	a201      	add	r2, pc, #4	; (adr r2, 801df5c <USBH_Get_USB_Status+0x1c>)
 801df56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df5a:	bf00      	nop
 801df5c:	0801df6d 	.word	0x0801df6d
 801df60:	0801df73 	.word	0x0801df73
 801df64:	0801df79 	.word	0x0801df79
 801df68:	0801df7f 	.word	0x0801df7f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801df6c:	2300      	movs	r3, #0
 801df6e:	73fb      	strb	r3, [r7, #15]
    break;
 801df70:	e00b      	b.n	801df8a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801df72:	2302      	movs	r3, #2
 801df74:	73fb      	strb	r3, [r7, #15]
    break;
 801df76:	e008      	b.n	801df8a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801df78:	2301      	movs	r3, #1
 801df7a:	73fb      	strb	r3, [r7, #15]
    break;
 801df7c:	e005      	b.n	801df8a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801df7e:	2302      	movs	r3, #2
 801df80:	73fb      	strb	r3, [r7, #15]
    break;
 801df82:	e002      	b.n	801df8a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801df84:	2302      	movs	r3, #2
 801df86:	73fb      	strb	r3, [r7, #15]
    break;
 801df88:	bf00      	nop
  }
  return usb_status;
 801df8a:	7bfb      	ldrb	r3, [r7, #15]
}
 801df8c:	4618      	mov	r0, r3
 801df8e:	3714      	adds	r7, #20
 801df90:	46bd      	mov	sp, r7
 801df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df96:	4770      	bx	lr

0801df98 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 801df98:	b580      	push	{r7, lr}
 801df9a:	b084      	sub	sp, #16
 801df9c:	af00      	add	r7, sp, #0
 801df9e:	4603      	mov	r3, r0
 801dfa0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 801dfa2:	79fb      	ldrb	r3, [r7, #7]
 801dfa4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801dfa6:	79fb      	ldrb	r3, [r7, #7]
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d102      	bne.n	801dfb2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 801dfac:	2301      	movs	r3, #1
 801dfae:	73fb      	strb	r3, [r7, #15]
 801dfb0:	e001      	b.n	801dfb6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801dfb2:	2300      	movs	r3, #0
 801dfb4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,(GPIO_PinState)data);
 801dfb6:	7bfb      	ldrb	r3, [r7, #15]
 801dfb8:	461a      	mov	r2, r3
 801dfba:	f44f 7100 	mov.w	r1, #512	; 0x200
 801dfbe:	4803      	ldr	r0, [pc, #12]	; (801dfcc <MX_DriverVbusFS+0x34>)
 801dfc0:	f7eb fc48 	bl	8009854 <HAL_GPIO_WritePin>
}
 801dfc4:	bf00      	nop
 801dfc6:	3710      	adds	r7, #16
 801dfc8:	46bd      	mov	sp, r7
 801dfca:	bd80      	pop	{r7, pc}
 801dfcc:	40020000 	.word	0x40020000

0801dfd0 <atoi>:
 801dfd0:	220a      	movs	r2, #10
 801dfd2:	2100      	movs	r1, #0
 801dfd4:	f000 bddc 	b.w	801eb90 <strtol>

0801dfd8 <__errno>:
 801dfd8:	4b01      	ldr	r3, [pc, #4]	; (801dfe0 <__errno+0x8>)
 801dfda:	6818      	ldr	r0, [r3, #0]
 801dfdc:	4770      	bx	lr
 801dfde:	bf00      	nop
 801dfe0:	2000009c 	.word	0x2000009c

0801dfe4 <__libc_init_array>:
 801dfe4:	b570      	push	{r4, r5, r6, lr}
 801dfe6:	4e0d      	ldr	r6, [pc, #52]	; (801e01c <__libc_init_array+0x38>)
 801dfe8:	4c0d      	ldr	r4, [pc, #52]	; (801e020 <__libc_init_array+0x3c>)
 801dfea:	1ba4      	subs	r4, r4, r6
 801dfec:	10a4      	asrs	r4, r4, #2
 801dfee:	2500      	movs	r5, #0
 801dff0:	42a5      	cmp	r5, r4
 801dff2:	d109      	bne.n	801e008 <__libc_init_array+0x24>
 801dff4:	4e0b      	ldr	r6, [pc, #44]	; (801e024 <__libc_init_array+0x40>)
 801dff6:	4c0c      	ldr	r4, [pc, #48]	; (801e028 <__libc_init_array+0x44>)
 801dff8:	f002 f870 	bl	80200dc <_init>
 801dffc:	1ba4      	subs	r4, r4, r6
 801dffe:	10a4      	asrs	r4, r4, #2
 801e000:	2500      	movs	r5, #0
 801e002:	42a5      	cmp	r5, r4
 801e004:	d105      	bne.n	801e012 <__libc_init_array+0x2e>
 801e006:	bd70      	pop	{r4, r5, r6, pc}
 801e008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e00c:	4798      	blx	r3
 801e00e:	3501      	adds	r5, #1
 801e010:	e7ee      	b.n	801dff0 <__libc_init_array+0xc>
 801e012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e016:	4798      	blx	r3
 801e018:	3501      	adds	r5, #1
 801e01a:	e7f2      	b.n	801e002 <__libc_init_array+0x1e>
 801e01c:	08023618 	.word	0x08023618
 801e020:	08023618 	.word	0x08023618
 801e024:	08023618 	.word	0x08023618
 801e028:	0802361c 	.word	0x0802361c

0801e02c <malloc>:
 801e02c:	4b02      	ldr	r3, [pc, #8]	; (801e038 <malloc+0xc>)
 801e02e:	4601      	mov	r1, r0
 801e030:	6818      	ldr	r0, [r3, #0]
 801e032:	f000 b86d 	b.w	801e110 <_malloc_r>
 801e036:	bf00      	nop
 801e038:	2000009c 	.word	0x2000009c

0801e03c <free>:
 801e03c:	4b02      	ldr	r3, [pc, #8]	; (801e048 <free+0xc>)
 801e03e:	4601      	mov	r1, r0
 801e040:	6818      	ldr	r0, [r3, #0]
 801e042:	f000 b817 	b.w	801e074 <_free_r>
 801e046:	bf00      	nop
 801e048:	2000009c 	.word	0x2000009c

0801e04c <memcpy>:
 801e04c:	b510      	push	{r4, lr}
 801e04e:	1e43      	subs	r3, r0, #1
 801e050:	440a      	add	r2, r1
 801e052:	4291      	cmp	r1, r2
 801e054:	d100      	bne.n	801e058 <memcpy+0xc>
 801e056:	bd10      	pop	{r4, pc}
 801e058:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e05c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e060:	e7f7      	b.n	801e052 <memcpy+0x6>

0801e062 <memset>:
 801e062:	4402      	add	r2, r0
 801e064:	4603      	mov	r3, r0
 801e066:	4293      	cmp	r3, r2
 801e068:	d100      	bne.n	801e06c <memset+0xa>
 801e06a:	4770      	bx	lr
 801e06c:	f803 1b01 	strb.w	r1, [r3], #1
 801e070:	e7f9      	b.n	801e066 <memset+0x4>
	...

0801e074 <_free_r>:
 801e074:	b538      	push	{r3, r4, r5, lr}
 801e076:	4605      	mov	r5, r0
 801e078:	2900      	cmp	r1, #0
 801e07a:	d045      	beq.n	801e108 <_free_r+0x94>
 801e07c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e080:	1f0c      	subs	r4, r1, #4
 801e082:	2b00      	cmp	r3, #0
 801e084:	bfb8      	it	lt
 801e086:	18e4      	addlt	r4, r4, r3
 801e088:	f001 fb96 	bl	801f7b8 <__malloc_lock>
 801e08c:	4a1f      	ldr	r2, [pc, #124]	; (801e10c <_free_r+0x98>)
 801e08e:	6813      	ldr	r3, [r2, #0]
 801e090:	4610      	mov	r0, r2
 801e092:	b933      	cbnz	r3, 801e0a2 <_free_r+0x2e>
 801e094:	6063      	str	r3, [r4, #4]
 801e096:	6014      	str	r4, [r2, #0]
 801e098:	4628      	mov	r0, r5
 801e09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e09e:	f001 bb8c 	b.w	801f7ba <__malloc_unlock>
 801e0a2:	42a3      	cmp	r3, r4
 801e0a4:	d90c      	bls.n	801e0c0 <_free_r+0x4c>
 801e0a6:	6821      	ldr	r1, [r4, #0]
 801e0a8:	1862      	adds	r2, r4, r1
 801e0aa:	4293      	cmp	r3, r2
 801e0ac:	bf04      	itt	eq
 801e0ae:	681a      	ldreq	r2, [r3, #0]
 801e0b0:	685b      	ldreq	r3, [r3, #4]
 801e0b2:	6063      	str	r3, [r4, #4]
 801e0b4:	bf04      	itt	eq
 801e0b6:	1852      	addeq	r2, r2, r1
 801e0b8:	6022      	streq	r2, [r4, #0]
 801e0ba:	6004      	str	r4, [r0, #0]
 801e0bc:	e7ec      	b.n	801e098 <_free_r+0x24>
 801e0be:	4613      	mov	r3, r2
 801e0c0:	685a      	ldr	r2, [r3, #4]
 801e0c2:	b10a      	cbz	r2, 801e0c8 <_free_r+0x54>
 801e0c4:	42a2      	cmp	r2, r4
 801e0c6:	d9fa      	bls.n	801e0be <_free_r+0x4a>
 801e0c8:	6819      	ldr	r1, [r3, #0]
 801e0ca:	1858      	adds	r0, r3, r1
 801e0cc:	42a0      	cmp	r0, r4
 801e0ce:	d10b      	bne.n	801e0e8 <_free_r+0x74>
 801e0d0:	6820      	ldr	r0, [r4, #0]
 801e0d2:	4401      	add	r1, r0
 801e0d4:	1858      	adds	r0, r3, r1
 801e0d6:	4282      	cmp	r2, r0
 801e0d8:	6019      	str	r1, [r3, #0]
 801e0da:	d1dd      	bne.n	801e098 <_free_r+0x24>
 801e0dc:	6810      	ldr	r0, [r2, #0]
 801e0de:	6852      	ldr	r2, [r2, #4]
 801e0e0:	605a      	str	r2, [r3, #4]
 801e0e2:	4401      	add	r1, r0
 801e0e4:	6019      	str	r1, [r3, #0]
 801e0e6:	e7d7      	b.n	801e098 <_free_r+0x24>
 801e0e8:	d902      	bls.n	801e0f0 <_free_r+0x7c>
 801e0ea:	230c      	movs	r3, #12
 801e0ec:	602b      	str	r3, [r5, #0]
 801e0ee:	e7d3      	b.n	801e098 <_free_r+0x24>
 801e0f0:	6820      	ldr	r0, [r4, #0]
 801e0f2:	1821      	adds	r1, r4, r0
 801e0f4:	428a      	cmp	r2, r1
 801e0f6:	bf04      	itt	eq
 801e0f8:	6811      	ldreq	r1, [r2, #0]
 801e0fa:	6852      	ldreq	r2, [r2, #4]
 801e0fc:	6062      	str	r2, [r4, #4]
 801e0fe:	bf04      	itt	eq
 801e100:	1809      	addeq	r1, r1, r0
 801e102:	6021      	streq	r1, [r4, #0]
 801e104:	605c      	str	r4, [r3, #4]
 801e106:	e7c7      	b.n	801e098 <_free_r+0x24>
 801e108:	bd38      	pop	{r3, r4, r5, pc}
 801e10a:	bf00      	nop
 801e10c:	200009d0 	.word	0x200009d0

0801e110 <_malloc_r>:
 801e110:	b570      	push	{r4, r5, r6, lr}
 801e112:	1ccd      	adds	r5, r1, #3
 801e114:	f025 0503 	bic.w	r5, r5, #3
 801e118:	3508      	adds	r5, #8
 801e11a:	2d0c      	cmp	r5, #12
 801e11c:	bf38      	it	cc
 801e11e:	250c      	movcc	r5, #12
 801e120:	2d00      	cmp	r5, #0
 801e122:	4606      	mov	r6, r0
 801e124:	db01      	blt.n	801e12a <_malloc_r+0x1a>
 801e126:	42a9      	cmp	r1, r5
 801e128:	d903      	bls.n	801e132 <_malloc_r+0x22>
 801e12a:	230c      	movs	r3, #12
 801e12c:	6033      	str	r3, [r6, #0]
 801e12e:	2000      	movs	r0, #0
 801e130:	bd70      	pop	{r4, r5, r6, pc}
 801e132:	f001 fb41 	bl	801f7b8 <__malloc_lock>
 801e136:	4a21      	ldr	r2, [pc, #132]	; (801e1bc <_malloc_r+0xac>)
 801e138:	6814      	ldr	r4, [r2, #0]
 801e13a:	4621      	mov	r1, r4
 801e13c:	b991      	cbnz	r1, 801e164 <_malloc_r+0x54>
 801e13e:	4c20      	ldr	r4, [pc, #128]	; (801e1c0 <_malloc_r+0xb0>)
 801e140:	6823      	ldr	r3, [r4, #0]
 801e142:	b91b      	cbnz	r3, 801e14c <_malloc_r+0x3c>
 801e144:	4630      	mov	r0, r6
 801e146:	f000 fc77 	bl	801ea38 <_sbrk_r>
 801e14a:	6020      	str	r0, [r4, #0]
 801e14c:	4629      	mov	r1, r5
 801e14e:	4630      	mov	r0, r6
 801e150:	f000 fc72 	bl	801ea38 <_sbrk_r>
 801e154:	1c43      	adds	r3, r0, #1
 801e156:	d124      	bne.n	801e1a2 <_malloc_r+0x92>
 801e158:	230c      	movs	r3, #12
 801e15a:	6033      	str	r3, [r6, #0]
 801e15c:	4630      	mov	r0, r6
 801e15e:	f001 fb2c 	bl	801f7ba <__malloc_unlock>
 801e162:	e7e4      	b.n	801e12e <_malloc_r+0x1e>
 801e164:	680b      	ldr	r3, [r1, #0]
 801e166:	1b5b      	subs	r3, r3, r5
 801e168:	d418      	bmi.n	801e19c <_malloc_r+0x8c>
 801e16a:	2b0b      	cmp	r3, #11
 801e16c:	d90f      	bls.n	801e18e <_malloc_r+0x7e>
 801e16e:	600b      	str	r3, [r1, #0]
 801e170:	50cd      	str	r5, [r1, r3]
 801e172:	18cc      	adds	r4, r1, r3
 801e174:	4630      	mov	r0, r6
 801e176:	f001 fb20 	bl	801f7ba <__malloc_unlock>
 801e17a:	f104 000b 	add.w	r0, r4, #11
 801e17e:	1d23      	adds	r3, r4, #4
 801e180:	f020 0007 	bic.w	r0, r0, #7
 801e184:	1ac3      	subs	r3, r0, r3
 801e186:	d0d3      	beq.n	801e130 <_malloc_r+0x20>
 801e188:	425a      	negs	r2, r3
 801e18a:	50e2      	str	r2, [r4, r3]
 801e18c:	e7d0      	b.n	801e130 <_malloc_r+0x20>
 801e18e:	428c      	cmp	r4, r1
 801e190:	684b      	ldr	r3, [r1, #4]
 801e192:	bf16      	itet	ne
 801e194:	6063      	strne	r3, [r4, #4]
 801e196:	6013      	streq	r3, [r2, #0]
 801e198:	460c      	movne	r4, r1
 801e19a:	e7eb      	b.n	801e174 <_malloc_r+0x64>
 801e19c:	460c      	mov	r4, r1
 801e19e:	6849      	ldr	r1, [r1, #4]
 801e1a0:	e7cc      	b.n	801e13c <_malloc_r+0x2c>
 801e1a2:	1cc4      	adds	r4, r0, #3
 801e1a4:	f024 0403 	bic.w	r4, r4, #3
 801e1a8:	42a0      	cmp	r0, r4
 801e1aa:	d005      	beq.n	801e1b8 <_malloc_r+0xa8>
 801e1ac:	1a21      	subs	r1, r4, r0
 801e1ae:	4630      	mov	r0, r6
 801e1b0:	f000 fc42 	bl	801ea38 <_sbrk_r>
 801e1b4:	3001      	adds	r0, #1
 801e1b6:	d0cf      	beq.n	801e158 <_malloc_r+0x48>
 801e1b8:	6025      	str	r5, [r4, #0]
 801e1ba:	e7db      	b.n	801e174 <_malloc_r+0x64>
 801e1bc:	200009d0 	.word	0x200009d0
 801e1c0:	200009d4 	.word	0x200009d4

0801e1c4 <__cvt>:
 801e1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1c6:	ed2d 8b02 	vpush	{d8}
 801e1ca:	eeb0 8b40 	vmov.f64	d8, d0
 801e1ce:	b085      	sub	sp, #20
 801e1d0:	4617      	mov	r7, r2
 801e1d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e1d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e1d6:	ee18 2a90 	vmov	r2, s17
 801e1da:	f025 0520 	bic.w	r5, r5, #32
 801e1de:	2a00      	cmp	r2, #0
 801e1e0:	bfb6      	itet	lt
 801e1e2:	222d      	movlt	r2, #45	; 0x2d
 801e1e4:	2200      	movge	r2, #0
 801e1e6:	eeb1 8b40 	vneglt.f64	d8, d0
 801e1ea:	2d46      	cmp	r5, #70	; 0x46
 801e1ec:	460c      	mov	r4, r1
 801e1ee:	701a      	strb	r2, [r3, #0]
 801e1f0:	d004      	beq.n	801e1fc <__cvt+0x38>
 801e1f2:	2d45      	cmp	r5, #69	; 0x45
 801e1f4:	d100      	bne.n	801e1f8 <__cvt+0x34>
 801e1f6:	3401      	adds	r4, #1
 801e1f8:	2102      	movs	r1, #2
 801e1fa:	e000      	b.n	801e1fe <__cvt+0x3a>
 801e1fc:	2103      	movs	r1, #3
 801e1fe:	ab03      	add	r3, sp, #12
 801e200:	9301      	str	r3, [sp, #4]
 801e202:	ab02      	add	r3, sp, #8
 801e204:	9300      	str	r3, [sp, #0]
 801e206:	4622      	mov	r2, r4
 801e208:	4633      	mov	r3, r6
 801e20a:	eeb0 0b48 	vmov.f64	d0, d8
 801e20e:	f000 fd63 	bl	801ecd8 <_dtoa_r>
 801e212:	2d47      	cmp	r5, #71	; 0x47
 801e214:	d101      	bne.n	801e21a <__cvt+0x56>
 801e216:	07fb      	lsls	r3, r7, #31
 801e218:	d51e      	bpl.n	801e258 <__cvt+0x94>
 801e21a:	2d46      	cmp	r5, #70	; 0x46
 801e21c:	eb00 0304 	add.w	r3, r0, r4
 801e220:	d10c      	bne.n	801e23c <__cvt+0x78>
 801e222:	7802      	ldrb	r2, [r0, #0]
 801e224:	2a30      	cmp	r2, #48	; 0x30
 801e226:	d107      	bne.n	801e238 <__cvt+0x74>
 801e228:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e230:	bf1c      	itt	ne
 801e232:	f1c4 0401 	rsbne	r4, r4, #1
 801e236:	6034      	strne	r4, [r6, #0]
 801e238:	6832      	ldr	r2, [r6, #0]
 801e23a:	4413      	add	r3, r2
 801e23c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e244:	d007      	beq.n	801e256 <__cvt+0x92>
 801e246:	2130      	movs	r1, #48	; 0x30
 801e248:	9a03      	ldr	r2, [sp, #12]
 801e24a:	429a      	cmp	r2, r3
 801e24c:	d204      	bcs.n	801e258 <__cvt+0x94>
 801e24e:	1c54      	adds	r4, r2, #1
 801e250:	9403      	str	r4, [sp, #12]
 801e252:	7011      	strb	r1, [r2, #0]
 801e254:	e7f8      	b.n	801e248 <__cvt+0x84>
 801e256:	9303      	str	r3, [sp, #12]
 801e258:	9b03      	ldr	r3, [sp, #12]
 801e25a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e25c:	1a1b      	subs	r3, r3, r0
 801e25e:	6013      	str	r3, [r2, #0]
 801e260:	b005      	add	sp, #20
 801e262:	ecbd 8b02 	vpop	{d8}
 801e266:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e268 <__exponent>:
 801e268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e26a:	2900      	cmp	r1, #0
 801e26c:	4604      	mov	r4, r0
 801e26e:	bfba      	itte	lt
 801e270:	4249      	neglt	r1, r1
 801e272:	232d      	movlt	r3, #45	; 0x2d
 801e274:	232b      	movge	r3, #43	; 0x2b
 801e276:	2909      	cmp	r1, #9
 801e278:	f804 2b02 	strb.w	r2, [r4], #2
 801e27c:	7043      	strb	r3, [r0, #1]
 801e27e:	dd20      	ble.n	801e2c2 <__exponent+0x5a>
 801e280:	f10d 0307 	add.w	r3, sp, #7
 801e284:	461f      	mov	r7, r3
 801e286:	260a      	movs	r6, #10
 801e288:	fb91 f5f6 	sdiv	r5, r1, r6
 801e28c:	fb06 1115 	mls	r1, r6, r5, r1
 801e290:	3130      	adds	r1, #48	; 0x30
 801e292:	2d09      	cmp	r5, #9
 801e294:	f803 1c01 	strb.w	r1, [r3, #-1]
 801e298:	f103 32ff 	add.w	r2, r3, #4294967295
 801e29c:	4629      	mov	r1, r5
 801e29e:	dc09      	bgt.n	801e2b4 <__exponent+0x4c>
 801e2a0:	3130      	adds	r1, #48	; 0x30
 801e2a2:	3b02      	subs	r3, #2
 801e2a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 801e2a8:	42bb      	cmp	r3, r7
 801e2aa:	4622      	mov	r2, r4
 801e2ac:	d304      	bcc.n	801e2b8 <__exponent+0x50>
 801e2ae:	1a10      	subs	r0, r2, r0
 801e2b0:	b003      	add	sp, #12
 801e2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2b4:	4613      	mov	r3, r2
 801e2b6:	e7e7      	b.n	801e288 <__exponent+0x20>
 801e2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e2bc:	f804 2b01 	strb.w	r2, [r4], #1
 801e2c0:	e7f2      	b.n	801e2a8 <__exponent+0x40>
 801e2c2:	2330      	movs	r3, #48	; 0x30
 801e2c4:	4419      	add	r1, r3
 801e2c6:	7083      	strb	r3, [r0, #2]
 801e2c8:	1d02      	adds	r2, r0, #4
 801e2ca:	70c1      	strb	r1, [r0, #3]
 801e2cc:	e7ef      	b.n	801e2ae <__exponent+0x46>
	...

0801e2d0 <_printf_float>:
 801e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2d4:	b08d      	sub	sp, #52	; 0x34
 801e2d6:	460c      	mov	r4, r1
 801e2d8:	4616      	mov	r6, r2
 801e2da:	461f      	mov	r7, r3
 801e2dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e2e0:	4605      	mov	r5, r0
 801e2e2:	f001 fa49 	bl	801f778 <_localeconv_r>
 801e2e6:	f8d0 b000 	ldr.w	fp, [r0]
 801e2ea:	4658      	mov	r0, fp
 801e2ec:	f7e1 ffb2 	bl	8000254 <strlen>
 801e2f0:	2300      	movs	r3, #0
 801e2f2:	930a      	str	r3, [sp, #40]	; 0x28
 801e2f4:	f8d8 3000 	ldr.w	r3, [r8]
 801e2f8:	9005      	str	r0, [sp, #20]
 801e2fa:	3307      	adds	r3, #7
 801e2fc:	f023 0307 	bic.w	r3, r3, #7
 801e300:	f103 0108 	add.w	r1, r3, #8
 801e304:	f894 9018 	ldrb.w	r9, [r4, #24]
 801e308:	6822      	ldr	r2, [r4, #0]
 801e30a:	f8c8 1000 	str.w	r1, [r8]
 801e30e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e312:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801e316:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801e5a0 <_printf_float+0x2d0>
 801e31a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801e31e:	eeb0 6bc0 	vabs.f64	d6, d0
 801e322:	eeb4 6b47 	vcmp.f64	d6, d7
 801e326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e32a:	dd24      	ble.n	801e376 <_printf_float+0xa6>
 801e32c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e334:	d502      	bpl.n	801e33c <_printf_float+0x6c>
 801e336:	232d      	movs	r3, #45	; 0x2d
 801e338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e33c:	499a      	ldr	r1, [pc, #616]	; (801e5a8 <_printf_float+0x2d8>)
 801e33e:	4b9b      	ldr	r3, [pc, #620]	; (801e5ac <_printf_float+0x2dc>)
 801e340:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801e344:	bf8c      	ite	hi
 801e346:	4688      	movhi	r8, r1
 801e348:	4698      	movls	r8, r3
 801e34a:	f022 0204 	bic.w	r2, r2, #4
 801e34e:	2303      	movs	r3, #3
 801e350:	6123      	str	r3, [r4, #16]
 801e352:	6022      	str	r2, [r4, #0]
 801e354:	f04f 0a00 	mov.w	sl, #0
 801e358:	9700      	str	r7, [sp, #0]
 801e35a:	4633      	mov	r3, r6
 801e35c:	aa0b      	add	r2, sp, #44	; 0x2c
 801e35e:	4621      	mov	r1, r4
 801e360:	4628      	mov	r0, r5
 801e362:	f000 f9e1 	bl	801e728 <_printf_common>
 801e366:	3001      	adds	r0, #1
 801e368:	f040 8089 	bne.w	801e47e <_printf_float+0x1ae>
 801e36c:	f04f 30ff 	mov.w	r0, #4294967295
 801e370:	b00d      	add	sp, #52	; 0x34
 801e372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e376:	eeb4 0b40 	vcmp.f64	d0, d0
 801e37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e37e:	d702      	bvc.n	801e386 <_printf_float+0xb6>
 801e380:	498b      	ldr	r1, [pc, #556]	; (801e5b0 <_printf_float+0x2e0>)
 801e382:	4b8c      	ldr	r3, [pc, #560]	; (801e5b4 <_printf_float+0x2e4>)
 801e384:	e7dc      	b.n	801e340 <_printf_float+0x70>
 801e386:	6861      	ldr	r1, [r4, #4]
 801e388:	1c4b      	adds	r3, r1, #1
 801e38a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e38e:	ab0a      	add	r3, sp, #40	; 0x28
 801e390:	a809      	add	r0, sp, #36	; 0x24
 801e392:	d13b      	bne.n	801e40c <_printf_float+0x13c>
 801e394:	2106      	movs	r1, #6
 801e396:	6061      	str	r1, [r4, #4]
 801e398:	f04f 0c00 	mov.w	ip, #0
 801e39c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e3a0:	e9cd 0900 	strd	r0, r9, [sp]
 801e3a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e3a8:	6022      	str	r2, [r4, #0]
 801e3aa:	6861      	ldr	r1, [r4, #4]
 801e3ac:	4628      	mov	r0, r5
 801e3ae:	f7ff ff09 	bl	801e1c4 <__cvt>
 801e3b2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801e3b6:	2b47      	cmp	r3, #71	; 0x47
 801e3b8:	4680      	mov	r8, r0
 801e3ba:	d109      	bne.n	801e3d0 <_printf_float+0x100>
 801e3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3be:	1cd8      	adds	r0, r3, #3
 801e3c0:	db02      	blt.n	801e3c8 <_printf_float+0xf8>
 801e3c2:	6862      	ldr	r2, [r4, #4]
 801e3c4:	4293      	cmp	r3, r2
 801e3c6:	dd47      	ble.n	801e458 <_printf_float+0x188>
 801e3c8:	f1a9 0902 	sub.w	r9, r9, #2
 801e3cc:	fa5f f989 	uxtb.w	r9, r9
 801e3d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e3d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e3d6:	d824      	bhi.n	801e422 <_printf_float+0x152>
 801e3d8:	3901      	subs	r1, #1
 801e3da:	464a      	mov	r2, r9
 801e3dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e3e0:	9109      	str	r1, [sp, #36]	; 0x24
 801e3e2:	f7ff ff41 	bl	801e268 <__exponent>
 801e3e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e3e8:	1813      	adds	r3, r2, r0
 801e3ea:	2a01      	cmp	r2, #1
 801e3ec:	4682      	mov	sl, r0
 801e3ee:	6123      	str	r3, [r4, #16]
 801e3f0:	dc02      	bgt.n	801e3f8 <_printf_float+0x128>
 801e3f2:	6822      	ldr	r2, [r4, #0]
 801e3f4:	07d1      	lsls	r1, r2, #31
 801e3f6:	d501      	bpl.n	801e3fc <_printf_float+0x12c>
 801e3f8:	3301      	adds	r3, #1
 801e3fa:	6123      	str	r3, [r4, #16]
 801e3fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e400:	2b00      	cmp	r3, #0
 801e402:	d0a9      	beq.n	801e358 <_printf_float+0x88>
 801e404:	232d      	movs	r3, #45	; 0x2d
 801e406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e40a:	e7a5      	b.n	801e358 <_printf_float+0x88>
 801e40c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801e410:	f000 8178 	beq.w	801e704 <_printf_float+0x434>
 801e414:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801e418:	d1be      	bne.n	801e398 <_printf_float+0xc8>
 801e41a:	2900      	cmp	r1, #0
 801e41c:	d1bc      	bne.n	801e398 <_printf_float+0xc8>
 801e41e:	2101      	movs	r1, #1
 801e420:	e7b9      	b.n	801e396 <_printf_float+0xc6>
 801e422:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801e426:	d119      	bne.n	801e45c <_printf_float+0x18c>
 801e428:	2900      	cmp	r1, #0
 801e42a:	6863      	ldr	r3, [r4, #4]
 801e42c:	dd0c      	ble.n	801e448 <_printf_float+0x178>
 801e42e:	6121      	str	r1, [r4, #16]
 801e430:	b913      	cbnz	r3, 801e438 <_printf_float+0x168>
 801e432:	6822      	ldr	r2, [r4, #0]
 801e434:	07d2      	lsls	r2, r2, #31
 801e436:	d502      	bpl.n	801e43e <_printf_float+0x16e>
 801e438:	3301      	adds	r3, #1
 801e43a:	440b      	add	r3, r1
 801e43c:	6123      	str	r3, [r4, #16]
 801e43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e440:	65a3      	str	r3, [r4, #88]	; 0x58
 801e442:	f04f 0a00 	mov.w	sl, #0
 801e446:	e7d9      	b.n	801e3fc <_printf_float+0x12c>
 801e448:	b913      	cbnz	r3, 801e450 <_printf_float+0x180>
 801e44a:	6822      	ldr	r2, [r4, #0]
 801e44c:	07d0      	lsls	r0, r2, #31
 801e44e:	d501      	bpl.n	801e454 <_printf_float+0x184>
 801e450:	3302      	adds	r3, #2
 801e452:	e7f3      	b.n	801e43c <_printf_float+0x16c>
 801e454:	2301      	movs	r3, #1
 801e456:	e7f1      	b.n	801e43c <_printf_float+0x16c>
 801e458:	f04f 0967 	mov.w	r9, #103	; 0x67
 801e45c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801e460:	4293      	cmp	r3, r2
 801e462:	db05      	blt.n	801e470 <_printf_float+0x1a0>
 801e464:	6822      	ldr	r2, [r4, #0]
 801e466:	6123      	str	r3, [r4, #16]
 801e468:	07d1      	lsls	r1, r2, #31
 801e46a:	d5e8      	bpl.n	801e43e <_printf_float+0x16e>
 801e46c:	3301      	adds	r3, #1
 801e46e:	e7e5      	b.n	801e43c <_printf_float+0x16c>
 801e470:	2b00      	cmp	r3, #0
 801e472:	bfd4      	ite	le
 801e474:	f1c3 0302 	rsble	r3, r3, #2
 801e478:	2301      	movgt	r3, #1
 801e47a:	4413      	add	r3, r2
 801e47c:	e7de      	b.n	801e43c <_printf_float+0x16c>
 801e47e:	6823      	ldr	r3, [r4, #0]
 801e480:	055a      	lsls	r2, r3, #21
 801e482:	d407      	bmi.n	801e494 <_printf_float+0x1c4>
 801e484:	6923      	ldr	r3, [r4, #16]
 801e486:	4642      	mov	r2, r8
 801e488:	4631      	mov	r1, r6
 801e48a:	4628      	mov	r0, r5
 801e48c:	47b8      	blx	r7
 801e48e:	3001      	adds	r0, #1
 801e490:	d12a      	bne.n	801e4e8 <_printf_float+0x218>
 801e492:	e76b      	b.n	801e36c <_printf_float+0x9c>
 801e494:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e498:	f240 80de 	bls.w	801e658 <_printf_float+0x388>
 801e49c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e4a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4a8:	d133      	bne.n	801e512 <_printf_float+0x242>
 801e4aa:	2301      	movs	r3, #1
 801e4ac:	4a42      	ldr	r2, [pc, #264]	; (801e5b8 <_printf_float+0x2e8>)
 801e4ae:	4631      	mov	r1, r6
 801e4b0:	4628      	mov	r0, r5
 801e4b2:	47b8      	blx	r7
 801e4b4:	3001      	adds	r0, #1
 801e4b6:	f43f af59 	beq.w	801e36c <_printf_float+0x9c>
 801e4ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e4be:	429a      	cmp	r2, r3
 801e4c0:	db02      	blt.n	801e4c8 <_printf_float+0x1f8>
 801e4c2:	6823      	ldr	r3, [r4, #0]
 801e4c4:	07d8      	lsls	r0, r3, #31
 801e4c6:	d50f      	bpl.n	801e4e8 <_printf_float+0x218>
 801e4c8:	9b05      	ldr	r3, [sp, #20]
 801e4ca:	465a      	mov	r2, fp
 801e4cc:	4631      	mov	r1, r6
 801e4ce:	4628      	mov	r0, r5
 801e4d0:	47b8      	blx	r7
 801e4d2:	3001      	adds	r0, #1
 801e4d4:	f43f af4a 	beq.w	801e36c <_printf_float+0x9c>
 801e4d8:	f04f 0800 	mov.w	r8, #0
 801e4dc:	f104 091a 	add.w	r9, r4, #26
 801e4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4e2:	3b01      	subs	r3, #1
 801e4e4:	4543      	cmp	r3, r8
 801e4e6:	dc09      	bgt.n	801e4fc <_printf_float+0x22c>
 801e4e8:	6823      	ldr	r3, [r4, #0]
 801e4ea:	079b      	lsls	r3, r3, #30
 801e4ec:	f100 8105 	bmi.w	801e6fa <_printf_float+0x42a>
 801e4f0:	68e0      	ldr	r0, [r4, #12]
 801e4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e4f4:	4298      	cmp	r0, r3
 801e4f6:	bfb8      	it	lt
 801e4f8:	4618      	movlt	r0, r3
 801e4fa:	e739      	b.n	801e370 <_printf_float+0xa0>
 801e4fc:	2301      	movs	r3, #1
 801e4fe:	464a      	mov	r2, r9
 801e500:	4631      	mov	r1, r6
 801e502:	4628      	mov	r0, r5
 801e504:	47b8      	blx	r7
 801e506:	3001      	adds	r0, #1
 801e508:	f43f af30 	beq.w	801e36c <_printf_float+0x9c>
 801e50c:	f108 0801 	add.w	r8, r8, #1
 801e510:	e7e6      	b.n	801e4e0 <_printf_float+0x210>
 801e512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e514:	2b00      	cmp	r3, #0
 801e516:	dc2b      	bgt.n	801e570 <_printf_float+0x2a0>
 801e518:	2301      	movs	r3, #1
 801e51a:	4a27      	ldr	r2, [pc, #156]	; (801e5b8 <_printf_float+0x2e8>)
 801e51c:	4631      	mov	r1, r6
 801e51e:	4628      	mov	r0, r5
 801e520:	47b8      	blx	r7
 801e522:	3001      	adds	r0, #1
 801e524:	f43f af22 	beq.w	801e36c <_printf_float+0x9c>
 801e528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e52a:	b923      	cbnz	r3, 801e536 <_printf_float+0x266>
 801e52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e52e:	b913      	cbnz	r3, 801e536 <_printf_float+0x266>
 801e530:	6823      	ldr	r3, [r4, #0]
 801e532:	07d9      	lsls	r1, r3, #31
 801e534:	d5d8      	bpl.n	801e4e8 <_printf_float+0x218>
 801e536:	9b05      	ldr	r3, [sp, #20]
 801e538:	465a      	mov	r2, fp
 801e53a:	4631      	mov	r1, r6
 801e53c:	4628      	mov	r0, r5
 801e53e:	47b8      	blx	r7
 801e540:	3001      	adds	r0, #1
 801e542:	f43f af13 	beq.w	801e36c <_printf_float+0x9c>
 801e546:	f04f 0900 	mov.w	r9, #0
 801e54a:	f104 0a1a 	add.w	sl, r4, #26
 801e54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e550:	425b      	negs	r3, r3
 801e552:	454b      	cmp	r3, r9
 801e554:	dc01      	bgt.n	801e55a <_printf_float+0x28a>
 801e556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e558:	e795      	b.n	801e486 <_printf_float+0x1b6>
 801e55a:	2301      	movs	r3, #1
 801e55c:	4652      	mov	r2, sl
 801e55e:	4631      	mov	r1, r6
 801e560:	4628      	mov	r0, r5
 801e562:	47b8      	blx	r7
 801e564:	3001      	adds	r0, #1
 801e566:	f43f af01 	beq.w	801e36c <_printf_float+0x9c>
 801e56a:	f109 0901 	add.w	r9, r9, #1
 801e56e:	e7ee      	b.n	801e54e <_printf_float+0x27e>
 801e570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e574:	429a      	cmp	r2, r3
 801e576:	bfa8      	it	ge
 801e578:	461a      	movge	r2, r3
 801e57a:	2a00      	cmp	r2, #0
 801e57c:	4691      	mov	r9, r2
 801e57e:	dd07      	ble.n	801e590 <_printf_float+0x2c0>
 801e580:	4613      	mov	r3, r2
 801e582:	4631      	mov	r1, r6
 801e584:	4642      	mov	r2, r8
 801e586:	4628      	mov	r0, r5
 801e588:	47b8      	blx	r7
 801e58a:	3001      	adds	r0, #1
 801e58c:	f43f aeee 	beq.w	801e36c <_printf_float+0x9c>
 801e590:	f104 031a 	add.w	r3, r4, #26
 801e594:	f04f 0a00 	mov.w	sl, #0
 801e598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e59c:	9307      	str	r3, [sp, #28]
 801e59e:	e017      	b.n	801e5d0 <_printf_float+0x300>
 801e5a0:	ffffffff 	.word	0xffffffff
 801e5a4:	7fefffff 	.word	0x7fefffff
 801e5a8:	08023350 	.word	0x08023350
 801e5ac:	0802334c 	.word	0x0802334c
 801e5b0:	08023358 	.word	0x08023358
 801e5b4:	08023354 	.word	0x08023354
 801e5b8:	0802335c 	.word	0x0802335c
 801e5bc:	2301      	movs	r3, #1
 801e5be:	9a07      	ldr	r2, [sp, #28]
 801e5c0:	4631      	mov	r1, r6
 801e5c2:	4628      	mov	r0, r5
 801e5c4:	47b8      	blx	r7
 801e5c6:	3001      	adds	r0, #1
 801e5c8:	f43f aed0 	beq.w	801e36c <_printf_float+0x9c>
 801e5cc:	f10a 0a01 	add.w	sl, sl, #1
 801e5d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e5d2:	9306      	str	r3, [sp, #24]
 801e5d4:	eba3 0309 	sub.w	r3, r3, r9
 801e5d8:	4553      	cmp	r3, sl
 801e5da:	dcef      	bgt.n	801e5bc <_printf_float+0x2ec>
 801e5dc:	9b06      	ldr	r3, [sp, #24]
 801e5de:	4498      	add	r8, r3
 801e5e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e5e4:	429a      	cmp	r2, r3
 801e5e6:	db15      	blt.n	801e614 <_printf_float+0x344>
 801e5e8:	6823      	ldr	r3, [r4, #0]
 801e5ea:	07da      	lsls	r2, r3, #31
 801e5ec:	d412      	bmi.n	801e614 <_printf_float+0x344>
 801e5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5f0:	9a06      	ldr	r2, [sp, #24]
 801e5f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e5f4:	1a9a      	subs	r2, r3, r2
 801e5f6:	eba3 0a01 	sub.w	sl, r3, r1
 801e5fa:	4592      	cmp	sl, r2
 801e5fc:	bfa8      	it	ge
 801e5fe:	4692      	movge	sl, r2
 801e600:	f1ba 0f00 	cmp.w	sl, #0
 801e604:	dc0e      	bgt.n	801e624 <_printf_float+0x354>
 801e606:	f04f 0800 	mov.w	r8, #0
 801e60a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e60e:	f104 091a 	add.w	r9, r4, #26
 801e612:	e019      	b.n	801e648 <_printf_float+0x378>
 801e614:	9b05      	ldr	r3, [sp, #20]
 801e616:	465a      	mov	r2, fp
 801e618:	4631      	mov	r1, r6
 801e61a:	4628      	mov	r0, r5
 801e61c:	47b8      	blx	r7
 801e61e:	3001      	adds	r0, #1
 801e620:	d1e5      	bne.n	801e5ee <_printf_float+0x31e>
 801e622:	e6a3      	b.n	801e36c <_printf_float+0x9c>
 801e624:	4653      	mov	r3, sl
 801e626:	4642      	mov	r2, r8
 801e628:	4631      	mov	r1, r6
 801e62a:	4628      	mov	r0, r5
 801e62c:	47b8      	blx	r7
 801e62e:	3001      	adds	r0, #1
 801e630:	d1e9      	bne.n	801e606 <_printf_float+0x336>
 801e632:	e69b      	b.n	801e36c <_printf_float+0x9c>
 801e634:	2301      	movs	r3, #1
 801e636:	464a      	mov	r2, r9
 801e638:	4631      	mov	r1, r6
 801e63a:	4628      	mov	r0, r5
 801e63c:	47b8      	blx	r7
 801e63e:	3001      	adds	r0, #1
 801e640:	f43f ae94 	beq.w	801e36c <_printf_float+0x9c>
 801e644:	f108 0801 	add.w	r8, r8, #1
 801e648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e64c:	1a9b      	subs	r3, r3, r2
 801e64e:	eba3 030a 	sub.w	r3, r3, sl
 801e652:	4543      	cmp	r3, r8
 801e654:	dcee      	bgt.n	801e634 <_printf_float+0x364>
 801e656:	e747      	b.n	801e4e8 <_printf_float+0x218>
 801e658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e65a:	2a01      	cmp	r2, #1
 801e65c:	dc01      	bgt.n	801e662 <_printf_float+0x392>
 801e65e:	07db      	lsls	r3, r3, #31
 801e660:	d539      	bpl.n	801e6d6 <_printf_float+0x406>
 801e662:	2301      	movs	r3, #1
 801e664:	4642      	mov	r2, r8
 801e666:	4631      	mov	r1, r6
 801e668:	4628      	mov	r0, r5
 801e66a:	47b8      	blx	r7
 801e66c:	3001      	adds	r0, #1
 801e66e:	f43f ae7d 	beq.w	801e36c <_printf_float+0x9c>
 801e672:	9b05      	ldr	r3, [sp, #20]
 801e674:	465a      	mov	r2, fp
 801e676:	4631      	mov	r1, r6
 801e678:	4628      	mov	r0, r5
 801e67a:	47b8      	blx	r7
 801e67c:	3001      	adds	r0, #1
 801e67e:	f108 0801 	add.w	r8, r8, #1
 801e682:	f43f ae73 	beq.w	801e36c <_printf_float+0x9c>
 801e686:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e68c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e694:	f103 33ff 	add.w	r3, r3, #4294967295
 801e698:	d018      	beq.n	801e6cc <_printf_float+0x3fc>
 801e69a:	4642      	mov	r2, r8
 801e69c:	4631      	mov	r1, r6
 801e69e:	4628      	mov	r0, r5
 801e6a0:	47b8      	blx	r7
 801e6a2:	3001      	adds	r0, #1
 801e6a4:	d10e      	bne.n	801e6c4 <_printf_float+0x3f4>
 801e6a6:	e661      	b.n	801e36c <_printf_float+0x9c>
 801e6a8:	2301      	movs	r3, #1
 801e6aa:	464a      	mov	r2, r9
 801e6ac:	4631      	mov	r1, r6
 801e6ae:	4628      	mov	r0, r5
 801e6b0:	47b8      	blx	r7
 801e6b2:	3001      	adds	r0, #1
 801e6b4:	f43f ae5a 	beq.w	801e36c <_printf_float+0x9c>
 801e6b8:	f108 0801 	add.w	r8, r8, #1
 801e6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6be:	3b01      	subs	r3, #1
 801e6c0:	4543      	cmp	r3, r8
 801e6c2:	dcf1      	bgt.n	801e6a8 <_printf_float+0x3d8>
 801e6c4:	4653      	mov	r3, sl
 801e6c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e6ca:	e6dd      	b.n	801e488 <_printf_float+0x1b8>
 801e6cc:	f04f 0800 	mov.w	r8, #0
 801e6d0:	f104 091a 	add.w	r9, r4, #26
 801e6d4:	e7f2      	b.n	801e6bc <_printf_float+0x3ec>
 801e6d6:	2301      	movs	r3, #1
 801e6d8:	e7df      	b.n	801e69a <_printf_float+0x3ca>
 801e6da:	2301      	movs	r3, #1
 801e6dc:	464a      	mov	r2, r9
 801e6de:	4631      	mov	r1, r6
 801e6e0:	4628      	mov	r0, r5
 801e6e2:	47b8      	blx	r7
 801e6e4:	3001      	adds	r0, #1
 801e6e6:	f43f ae41 	beq.w	801e36c <_printf_float+0x9c>
 801e6ea:	f108 0801 	add.w	r8, r8, #1
 801e6ee:	68e3      	ldr	r3, [r4, #12]
 801e6f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e6f2:	1a9b      	subs	r3, r3, r2
 801e6f4:	4543      	cmp	r3, r8
 801e6f6:	dcf0      	bgt.n	801e6da <_printf_float+0x40a>
 801e6f8:	e6fa      	b.n	801e4f0 <_printf_float+0x220>
 801e6fa:	f04f 0800 	mov.w	r8, #0
 801e6fe:	f104 0919 	add.w	r9, r4, #25
 801e702:	e7f4      	b.n	801e6ee <_printf_float+0x41e>
 801e704:	2900      	cmp	r1, #0
 801e706:	f43f ae8a 	beq.w	801e41e <_printf_float+0x14e>
 801e70a:	f04f 0c00 	mov.w	ip, #0
 801e70e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e712:	e9cd 0900 	strd	r0, r9, [sp]
 801e716:	6022      	str	r2, [r4, #0]
 801e718:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e71c:	4628      	mov	r0, r5
 801e71e:	f7ff fd51 	bl	801e1c4 <__cvt>
 801e722:	4680      	mov	r8, r0
 801e724:	e64a      	b.n	801e3bc <_printf_float+0xec>
 801e726:	bf00      	nop

0801e728 <_printf_common>:
 801e728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e72c:	4691      	mov	r9, r2
 801e72e:	461f      	mov	r7, r3
 801e730:	688a      	ldr	r2, [r1, #8]
 801e732:	690b      	ldr	r3, [r1, #16]
 801e734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e738:	4293      	cmp	r3, r2
 801e73a:	bfb8      	it	lt
 801e73c:	4613      	movlt	r3, r2
 801e73e:	f8c9 3000 	str.w	r3, [r9]
 801e742:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e746:	4606      	mov	r6, r0
 801e748:	460c      	mov	r4, r1
 801e74a:	b112      	cbz	r2, 801e752 <_printf_common+0x2a>
 801e74c:	3301      	adds	r3, #1
 801e74e:	f8c9 3000 	str.w	r3, [r9]
 801e752:	6823      	ldr	r3, [r4, #0]
 801e754:	0699      	lsls	r1, r3, #26
 801e756:	bf42      	ittt	mi
 801e758:	f8d9 3000 	ldrmi.w	r3, [r9]
 801e75c:	3302      	addmi	r3, #2
 801e75e:	f8c9 3000 	strmi.w	r3, [r9]
 801e762:	6825      	ldr	r5, [r4, #0]
 801e764:	f015 0506 	ands.w	r5, r5, #6
 801e768:	d107      	bne.n	801e77a <_printf_common+0x52>
 801e76a:	f104 0a19 	add.w	sl, r4, #25
 801e76e:	68e3      	ldr	r3, [r4, #12]
 801e770:	f8d9 2000 	ldr.w	r2, [r9]
 801e774:	1a9b      	subs	r3, r3, r2
 801e776:	42ab      	cmp	r3, r5
 801e778:	dc28      	bgt.n	801e7cc <_printf_common+0xa4>
 801e77a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801e77e:	6822      	ldr	r2, [r4, #0]
 801e780:	3300      	adds	r3, #0
 801e782:	bf18      	it	ne
 801e784:	2301      	movne	r3, #1
 801e786:	0692      	lsls	r2, r2, #26
 801e788:	d42d      	bmi.n	801e7e6 <_printf_common+0xbe>
 801e78a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e78e:	4639      	mov	r1, r7
 801e790:	4630      	mov	r0, r6
 801e792:	47c0      	blx	r8
 801e794:	3001      	adds	r0, #1
 801e796:	d020      	beq.n	801e7da <_printf_common+0xb2>
 801e798:	6823      	ldr	r3, [r4, #0]
 801e79a:	68e5      	ldr	r5, [r4, #12]
 801e79c:	f8d9 2000 	ldr.w	r2, [r9]
 801e7a0:	f003 0306 	and.w	r3, r3, #6
 801e7a4:	2b04      	cmp	r3, #4
 801e7a6:	bf08      	it	eq
 801e7a8:	1aad      	subeq	r5, r5, r2
 801e7aa:	68a3      	ldr	r3, [r4, #8]
 801e7ac:	6922      	ldr	r2, [r4, #16]
 801e7ae:	bf0c      	ite	eq
 801e7b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e7b4:	2500      	movne	r5, #0
 801e7b6:	4293      	cmp	r3, r2
 801e7b8:	bfc4      	itt	gt
 801e7ba:	1a9b      	subgt	r3, r3, r2
 801e7bc:	18ed      	addgt	r5, r5, r3
 801e7be:	f04f 0900 	mov.w	r9, #0
 801e7c2:	341a      	adds	r4, #26
 801e7c4:	454d      	cmp	r5, r9
 801e7c6:	d11a      	bne.n	801e7fe <_printf_common+0xd6>
 801e7c8:	2000      	movs	r0, #0
 801e7ca:	e008      	b.n	801e7de <_printf_common+0xb6>
 801e7cc:	2301      	movs	r3, #1
 801e7ce:	4652      	mov	r2, sl
 801e7d0:	4639      	mov	r1, r7
 801e7d2:	4630      	mov	r0, r6
 801e7d4:	47c0      	blx	r8
 801e7d6:	3001      	adds	r0, #1
 801e7d8:	d103      	bne.n	801e7e2 <_printf_common+0xba>
 801e7da:	f04f 30ff 	mov.w	r0, #4294967295
 801e7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7e2:	3501      	adds	r5, #1
 801e7e4:	e7c3      	b.n	801e76e <_printf_common+0x46>
 801e7e6:	18e1      	adds	r1, r4, r3
 801e7e8:	1c5a      	adds	r2, r3, #1
 801e7ea:	2030      	movs	r0, #48	; 0x30
 801e7ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e7f0:	4422      	add	r2, r4
 801e7f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e7f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e7fa:	3302      	adds	r3, #2
 801e7fc:	e7c5      	b.n	801e78a <_printf_common+0x62>
 801e7fe:	2301      	movs	r3, #1
 801e800:	4622      	mov	r2, r4
 801e802:	4639      	mov	r1, r7
 801e804:	4630      	mov	r0, r6
 801e806:	47c0      	blx	r8
 801e808:	3001      	adds	r0, #1
 801e80a:	d0e6      	beq.n	801e7da <_printf_common+0xb2>
 801e80c:	f109 0901 	add.w	r9, r9, #1
 801e810:	e7d8      	b.n	801e7c4 <_printf_common+0x9c>
	...

0801e814 <_printf_i>:
 801e814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e818:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801e81c:	460c      	mov	r4, r1
 801e81e:	7e09      	ldrb	r1, [r1, #24]
 801e820:	b085      	sub	sp, #20
 801e822:	296e      	cmp	r1, #110	; 0x6e
 801e824:	4617      	mov	r7, r2
 801e826:	4606      	mov	r6, r0
 801e828:	4698      	mov	r8, r3
 801e82a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e82c:	f000 80b3 	beq.w	801e996 <_printf_i+0x182>
 801e830:	d822      	bhi.n	801e878 <_printf_i+0x64>
 801e832:	2963      	cmp	r1, #99	; 0x63
 801e834:	d036      	beq.n	801e8a4 <_printf_i+0x90>
 801e836:	d80a      	bhi.n	801e84e <_printf_i+0x3a>
 801e838:	2900      	cmp	r1, #0
 801e83a:	f000 80b9 	beq.w	801e9b0 <_printf_i+0x19c>
 801e83e:	2958      	cmp	r1, #88	; 0x58
 801e840:	f000 8083 	beq.w	801e94a <_printf_i+0x136>
 801e844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e848:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801e84c:	e032      	b.n	801e8b4 <_printf_i+0xa0>
 801e84e:	2964      	cmp	r1, #100	; 0x64
 801e850:	d001      	beq.n	801e856 <_printf_i+0x42>
 801e852:	2969      	cmp	r1, #105	; 0x69
 801e854:	d1f6      	bne.n	801e844 <_printf_i+0x30>
 801e856:	6820      	ldr	r0, [r4, #0]
 801e858:	6813      	ldr	r3, [r2, #0]
 801e85a:	0605      	lsls	r5, r0, #24
 801e85c:	f103 0104 	add.w	r1, r3, #4
 801e860:	d52a      	bpl.n	801e8b8 <_printf_i+0xa4>
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	6011      	str	r1, [r2, #0]
 801e866:	2b00      	cmp	r3, #0
 801e868:	da03      	bge.n	801e872 <_printf_i+0x5e>
 801e86a:	222d      	movs	r2, #45	; 0x2d
 801e86c:	425b      	negs	r3, r3
 801e86e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e872:	486f      	ldr	r0, [pc, #444]	; (801ea30 <_printf_i+0x21c>)
 801e874:	220a      	movs	r2, #10
 801e876:	e039      	b.n	801e8ec <_printf_i+0xd8>
 801e878:	2973      	cmp	r1, #115	; 0x73
 801e87a:	f000 809d 	beq.w	801e9b8 <_printf_i+0x1a4>
 801e87e:	d808      	bhi.n	801e892 <_printf_i+0x7e>
 801e880:	296f      	cmp	r1, #111	; 0x6f
 801e882:	d020      	beq.n	801e8c6 <_printf_i+0xb2>
 801e884:	2970      	cmp	r1, #112	; 0x70
 801e886:	d1dd      	bne.n	801e844 <_printf_i+0x30>
 801e888:	6823      	ldr	r3, [r4, #0]
 801e88a:	f043 0320 	orr.w	r3, r3, #32
 801e88e:	6023      	str	r3, [r4, #0]
 801e890:	e003      	b.n	801e89a <_printf_i+0x86>
 801e892:	2975      	cmp	r1, #117	; 0x75
 801e894:	d017      	beq.n	801e8c6 <_printf_i+0xb2>
 801e896:	2978      	cmp	r1, #120	; 0x78
 801e898:	d1d4      	bne.n	801e844 <_printf_i+0x30>
 801e89a:	2378      	movs	r3, #120	; 0x78
 801e89c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e8a0:	4864      	ldr	r0, [pc, #400]	; (801ea34 <_printf_i+0x220>)
 801e8a2:	e055      	b.n	801e950 <_printf_i+0x13c>
 801e8a4:	6813      	ldr	r3, [r2, #0]
 801e8a6:	1d19      	adds	r1, r3, #4
 801e8a8:	681b      	ldr	r3, [r3, #0]
 801e8aa:	6011      	str	r1, [r2, #0]
 801e8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e8b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e8b4:	2301      	movs	r3, #1
 801e8b6:	e08c      	b.n	801e9d2 <_printf_i+0x1be>
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	6011      	str	r1, [r2, #0]
 801e8bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e8c0:	bf18      	it	ne
 801e8c2:	b21b      	sxthne	r3, r3
 801e8c4:	e7cf      	b.n	801e866 <_printf_i+0x52>
 801e8c6:	6813      	ldr	r3, [r2, #0]
 801e8c8:	6825      	ldr	r5, [r4, #0]
 801e8ca:	1d18      	adds	r0, r3, #4
 801e8cc:	6010      	str	r0, [r2, #0]
 801e8ce:	0628      	lsls	r0, r5, #24
 801e8d0:	d501      	bpl.n	801e8d6 <_printf_i+0xc2>
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	e002      	b.n	801e8dc <_printf_i+0xc8>
 801e8d6:	0668      	lsls	r0, r5, #25
 801e8d8:	d5fb      	bpl.n	801e8d2 <_printf_i+0xbe>
 801e8da:	881b      	ldrh	r3, [r3, #0]
 801e8dc:	4854      	ldr	r0, [pc, #336]	; (801ea30 <_printf_i+0x21c>)
 801e8de:	296f      	cmp	r1, #111	; 0x6f
 801e8e0:	bf14      	ite	ne
 801e8e2:	220a      	movne	r2, #10
 801e8e4:	2208      	moveq	r2, #8
 801e8e6:	2100      	movs	r1, #0
 801e8e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e8ec:	6865      	ldr	r5, [r4, #4]
 801e8ee:	60a5      	str	r5, [r4, #8]
 801e8f0:	2d00      	cmp	r5, #0
 801e8f2:	f2c0 8095 	blt.w	801ea20 <_printf_i+0x20c>
 801e8f6:	6821      	ldr	r1, [r4, #0]
 801e8f8:	f021 0104 	bic.w	r1, r1, #4
 801e8fc:	6021      	str	r1, [r4, #0]
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	d13d      	bne.n	801e97e <_printf_i+0x16a>
 801e902:	2d00      	cmp	r5, #0
 801e904:	f040 808e 	bne.w	801ea24 <_printf_i+0x210>
 801e908:	4665      	mov	r5, ip
 801e90a:	2a08      	cmp	r2, #8
 801e90c:	d10b      	bne.n	801e926 <_printf_i+0x112>
 801e90e:	6823      	ldr	r3, [r4, #0]
 801e910:	07db      	lsls	r3, r3, #31
 801e912:	d508      	bpl.n	801e926 <_printf_i+0x112>
 801e914:	6923      	ldr	r3, [r4, #16]
 801e916:	6862      	ldr	r2, [r4, #4]
 801e918:	429a      	cmp	r2, r3
 801e91a:	bfde      	ittt	le
 801e91c:	2330      	movle	r3, #48	; 0x30
 801e91e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e922:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e926:	ebac 0305 	sub.w	r3, ip, r5
 801e92a:	6123      	str	r3, [r4, #16]
 801e92c:	f8cd 8000 	str.w	r8, [sp]
 801e930:	463b      	mov	r3, r7
 801e932:	aa03      	add	r2, sp, #12
 801e934:	4621      	mov	r1, r4
 801e936:	4630      	mov	r0, r6
 801e938:	f7ff fef6 	bl	801e728 <_printf_common>
 801e93c:	3001      	adds	r0, #1
 801e93e:	d14d      	bne.n	801e9dc <_printf_i+0x1c8>
 801e940:	f04f 30ff 	mov.w	r0, #4294967295
 801e944:	b005      	add	sp, #20
 801e946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e94a:	4839      	ldr	r0, [pc, #228]	; (801ea30 <_printf_i+0x21c>)
 801e94c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801e950:	6813      	ldr	r3, [r2, #0]
 801e952:	6821      	ldr	r1, [r4, #0]
 801e954:	1d1d      	adds	r5, r3, #4
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	6015      	str	r5, [r2, #0]
 801e95a:	060a      	lsls	r2, r1, #24
 801e95c:	d50b      	bpl.n	801e976 <_printf_i+0x162>
 801e95e:	07ca      	lsls	r2, r1, #31
 801e960:	bf44      	itt	mi
 801e962:	f041 0120 	orrmi.w	r1, r1, #32
 801e966:	6021      	strmi	r1, [r4, #0]
 801e968:	b91b      	cbnz	r3, 801e972 <_printf_i+0x15e>
 801e96a:	6822      	ldr	r2, [r4, #0]
 801e96c:	f022 0220 	bic.w	r2, r2, #32
 801e970:	6022      	str	r2, [r4, #0]
 801e972:	2210      	movs	r2, #16
 801e974:	e7b7      	b.n	801e8e6 <_printf_i+0xd2>
 801e976:	064d      	lsls	r5, r1, #25
 801e978:	bf48      	it	mi
 801e97a:	b29b      	uxthmi	r3, r3
 801e97c:	e7ef      	b.n	801e95e <_printf_i+0x14a>
 801e97e:	4665      	mov	r5, ip
 801e980:	fbb3 f1f2 	udiv	r1, r3, r2
 801e984:	fb02 3311 	mls	r3, r2, r1, r3
 801e988:	5cc3      	ldrb	r3, [r0, r3]
 801e98a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801e98e:	460b      	mov	r3, r1
 801e990:	2900      	cmp	r1, #0
 801e992:	d1f5      	bne.n	801e980 <_printf_i+0x16c>
 801e994:	e7b9      	b.n	801e90a <_printf_i+0xf6>
 801e996:	6813      	ldr	r3, [r2, #0]
 801e998:	6825      	ldr	r5, [r4, #0]
 801e99a:	6961      	ldr	r1, [r4, #20]
 801e99c:	1d18      	adds	r0, r3, #4
 801e99e:	6010      	str	r0, [r2, #0]
 801e9a0:	0628      	lsls	r0, r5, #24
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	d501      	bpl.n	801e9aa <_printf_i+0x196>
 801e9a6:	6019      	str	r1, [r3, #0]
 801e9a8:	e002      	b.n	801e9b0 <_printf_i+0x19c>
 801e9aa:	066a      	lsls	r2, r5, #25
 801e9ac:	d5fb      	bpl.n	801e9a6 <_printf_i+0x192>
 801e9ae:	8019      	strh	r1, [r3, #0]
 801e9b0:	2300      	movs	r3, #0
 801e9b2:	6123      	str	r3, [r4, #16]
 801e9b4:	4665      	mov	r5, ip
 801e9b6:	e7b9      	b.n	801e92c <_printf_i+0x118>
 801e9b8:	6813      	ldr	r3, [r2, #0]
 801e9ba:	1d19      	adds	r1, r3, #4
 801e9bc:	6011      	str	r1, [r2, #0]
 801e9be:	681d      	ldr	r5, [r3, #0]
 801e9c0:	6862      	ldr	r2, [r4, #4]
 801e9c2:	2100      	movs	r1, #0
 801e9c4:	4628      	mov	r0, r5
 801e9c6:	f7e1 fc53 	bl	8000270 <memchr>
 801e9ca:	b108      	cbz	r0, 801e9d0 <_printf_i+0x1bc>
 801e9cc:	1b40      	subs	r0, r0, r5
 801e9ce:	6060      	str	r0, [r4, #4]
 801e9d0:	6863      	ldr	r3, [r4, #4]
 801e9d2:	6123      	str	r3, [r4, #16]
 801e9d4:	2300      	movs	r3, #0
 801e9d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e9da:	e7a7      	b.n	801e92c <_printf_i+0x118>
 801e9dc:	6923      	ldr	r3, [r4, #16]
 801e9de:	462a      	mov	r2, r5
 801e9e0:	4639      	mov	r1, r7
 801e9e2:	4630      	mov	r0, r6
 801e9e4:	47c0      	blx	r8
 801e9e6:	3001      	adds	r0, #1
 801e9e8:	d0aa      	beq.n	801e940 <_printf_i+0x12c>
 801e9ea:	6823      	ldr	r3, [r4, #0]
 801e9ec:	079b      	lsls	r3, r3, #30
 801e9ee:	d413      	bmi.n	801ea18 <_printf_i+0x204>
 801e9f0:	68e0      	ldr	r0, [r4, #12]
 801e9f2:	9b03      	ldr	r3, [sp, #12]
 801e9f4:	4298      	cmp	r0, r3
 801e9f6:	bfb8      	it	lt
 801e9f8:	4618      	movlt	r0, r3
 801e9fa:	e7a3      	b.n	801e944 <_printf_i+0x130>
 801e9fc:	2301      	movs	r3, #1
 801e9fe:	464a      	mov	r2, r9
 801ea00:	4639      	mov	r1, r7
 801ea02:	4630      	mov	r0, r6
 801ea04:	47c0      	blx	r8
 801ea06:	3001      	adds	r0, #1
 801ea08:	d09a      	beq.n	801e940 <_printf_i+0x12c>
 801ea0a:	3501      	adds	r5, #1
 801ea0c:	68e3      	ldr	r3, [r4, #12]
 801ea0e:	9a03      	ldr	r2, [sp, #12]
 801ea10:	1a9b      	subs	r3, r3, r2
 801ea12:	42ab      	cmp	r3, r5
 801ea14:	dcf2      	bgt.n	801e9fc <_printf_i+0x1e8>
 801ea16:	e7eb      	b.n	801e9f0 <_printf_i+0x1dc>
 801ea18:	2500      	movs	r5, #0
 801ea1a:	f104 0919 	add.w	r9, r4, #25
 801ea1e:	e7f5      	b.n	801ea0c <_printf_i+0x1f8>
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	d1ac      	bne.n	801e97e <_printf_i+0x16a>
 801ea24:	7803      	ldrb	r3, [r0, #0]
 801ea26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ea2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ea2e:	e76c      	b.n	801e90a <_printf_i+0xf6>
 801ea30:	0802335e 	.word	0x0802335e
 801ea34:	0802336f 	.word	0x0802336f

0801ea38 <_sbrk_r>:
 801ea38:	b538      	push	{r3, r4, r5, lr}
 801ea3a:	4c06      	ldr	r4, [pc, #24]	; (801ea54 <_sbrk_r+0x1c>)
 801ea3c:	2300      	movs	r3, #0
 801ea3e:	4605      	mov	r5, r0
 801ea40:	4608      	mov	r0, r1
 801ea42:	6023      	str	r3, [r4, #0]
 801ea44:	f7e9 f992 	bl	8007d6c <_sbrk>
 801ea48:	1c43      	adds	r3, r0, #1
 801ea4a:	d102      	bne.n	801ea52 <_sbrk_r+0x1a>
 801ea4c:	6823      	ldr	r3, [r4, #0]
 801ea4e:	b103      	cbz	r3, 801ea52 <_sbrk_r+0x1a>
 801ea50:	602b      	str	r3, [r5, #0]
 801ea52:	bd38      	pop	{r3, r4, r5, pc}
 801ea54:	200198f8 	.word	0x200198f8

0801ea58 <siprintf>:
 801ea58:	b40e      	push	{r1, r2, r3}
 801ea5a:	b500      	push	{lr}
 801ea5c:	b09c      	sub	sp, #112	; 0x70
 801ea5e:	ab1d      	add	r3, sp, #116	; 0x74
 801ea60:	9002      	str	r0, [sp, #8]
 801ea62:	9006      	str	r0, [sp, #24]
 801ea64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ea68:	4809      	ldr	r0, [pc, #36]	; (801ea90 <siprintf+0x38>)
 801ea6a:	9107      	str	r1, [sp, #28]
 801ea6c:	9104      	str	r1, [sp, #16]
 801ea6e:	4909      	ldr	r1, [pc, #36]	; (801ea94 <siprintf+0x3c>)
 801ea70:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea74:	9105      	str	r1, [sp, #20]
 801ea76:	6800      	ldr	r0, [r0, #0]
 801ea78:	9301      	str	r3, [sp, #4]
 801ea7a:	a902      	add	r1, sp, #8
 801ea7c:	f001 f9e2 	bl	801fe44 <_svfiprintf_r>
 801ea80:	9b02      	ldr	r3, [sp, #8]
 801ea82:	2200      	movs	r2, #0
 801ea84:	701a      	strb	r2, [r3, #0]
 801ea86:	b01c      	add	sp, #112	; 0x70
 801ea88:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea8c:	b003      	add	sp, #12
 801ea8e:	4770      	bx	lr
 801ea90:	2000009c 	.word	0x2000009c
 801ea94:	ffff0208 	.word	0xffff0208

0801ea98 <_strtol_l.isra.0>:
 801ea98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea9c:	4680      	mov	r8, r0
 801ea9e:	4689      	mov	r9, r1
 801eaa0:	4692      	mov	sl, r2
 801eaa2:	461e      	mov	r6, r3
 801eaa4:	460f      	mov	r7, r1
 801eaa6:	463d      	mov	r5, r7
 801eaa8:	9808      	ldr	r0, [sp, #32]
 801eaaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801eaae:	f000 fe5f 	bl	801f770 <__locale_ctype_ptr_l>
 801eab2:	4420      	add	r0, r4
 801eab4:	7843      	ldrb	r3, [r0, #1]
 801eab6:	f013 0308 	ands.w	r3, r3, #8
 801eaba:	d132      	bne.n	801eb22 <_strtol_l.isra.0+0x8a>
 801eabc:	2c2d      	cmp	r4, #45	; 0x2d
 801eabe:	d132      	bne.n	801eb26 <_strtol_l.isra.0+0x8e>
 801eac0:	787c      	ldrb	r4, [r7, #1]
 801eac2:	1cbd      	adds	r5, r7, #2
 801eac4:	2201      	movs	r2, #1
 801eac6:	2e00      	cmp	r6, #0
 801eac8:	d05d      	beq.n	801eb86 <_strtol_l.isra.0+0xee>
 801eaca:	2e10      	cmp	r6, #16
 801eacc:	d109      	bne.n	801eae2 <_strtol_l.isra.0+0x4a>
 801eace:	2c30      	cmp	r4, #48	; 0x30
 801ead0:	d107      	bne.n	801eae2 <_strtol_l.isra.0+0x4a>
 801ead2:	782b      	ldrb	r3, [r5, #0]
 801ead4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ead8:	2b58      	cmp	r3, #88	; 0x58
 801eada:	d14f      	bne.n	801eb7c <_strtol_l.isra.0+0xe4>
 801eadc:	786c      	ldrb	r4, [r5, #1]
 801eade:	2610      	movs	r6, #16
 801eae0:	3502      	adds	r5, #2
 801eae2:	2a00      	cmp	r2, #0
 801eae4:	bf14      	ite	ne
 801eae6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801eaea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801eaee:	2700      	movs	r7, #0
 801eaf0:	fbb1 fcf6 	udiv	ip, r1, r6
 801eaf4:	4638      	mov	r0, r7
 801eaf6:	fb06 1e1c 	mls	lr, r6, ip, r1
 801eafa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801eafe:	2b09      	cmp	r3, #9
 801eb00:	d817      	bhi.n	801eb32 <_strtol_l.isra.0+0x9a>
 801eb02:	461c      	mov	r4, r3
 801eb04:	42a6      	cmp	r6, r4
 801eb06:	dd23      	ble.n	801eb50 <_strtol_l.isra.0+0xb8>
 801eb08:	1c7b      	adds	r3, r7, #1
 801eb0a:	d007      	beq.n	801eb1c <_strtol_l.isra.0+0x84>
 801eb0c:	4584      	cmp	ip, r0
 801eb0e:	d31c      	bcc.n	801eb4a <_strtol_l.isra.0+0xb2>
 801eb10:	d101      	bne.n	801eb16 <_strtol_l.isra.0+0x7e>
 801eb12:	45a6      	cmp	lr, r4
 801eb14:	db19      	blt.n	801eb4a <_strtol_l.isra.0+0xb2>
 801eb16:	fb00 4006 	mla	r0, r0, r6, r4
 801eb1a:	2701      	movs	r7, #1
 801eb1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801eb20:	e7eb      	b.n	801eafa <_strtol_l.isra.0+0x62>
 801eb22:	462f      	mov	r7, r5
 801eb24:	e7bf      	b.n	801eaa6 <_strtol_l.isra.0+0xe>
 801eb26:	2c2b      	cmp	r4, #43	; 0x2b
 801eb28:	bf04      	itt	eq
 801eb2a:	1cbd      	addeq	r5, r7, #2
 801eb2c:	787c      	ldrbeq	r4, [r7, #1]
 801eb2e:	461a      	mov	r2, r3
 801eb30:	e7c9      	b.n	801eac6 <_strtol_l.isra.0+0x2e>
 801eb32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801eb36:	2b19      	cmp	r3, #25
 801eb38:	d801      	bhi.n	801eb3e <_strtol_l.isra.0+0xa6>
 801eb3a:	3c37      	subs	r4, #55	; 0x37
 801eb3c:	e7e2      	b.n	801eb04 <_strtol_l.isra.0+0x6c>
 801eb3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801eb42:	2b19      	cmp	r3, #25
 801eb44:	d804      	bhi.n	801eb50 <_strtol_l.isra.0+0xb8>
 801eb46:	3c57      	subs	r4, #87	; 0x57
 801eb48:	e7dc      	b.n	801eb04 <_strtol_l.isra.0+0x6c>
 801eb4a:	f04f 37ff 	mov.w	r7, #4294967295
 801eb4e:	e7e5      	b.n	801eb1c <_strtol_l.isra.0+0x84>
 801eb50:	1c7b      	adds	r3, r7, #1
 801eb52:	d108      	bne.n	801eb66 <_strtol_l.isra.0+0xce>
 801eb54:	2322      	movs	r3, #34	; 0x22
 801eb56:	f8c8 3000 	str.w	r3, [r8]
 801eb5a:	4608      	mov	r0, r1
 801eb5c:	f1ba 0f00 	cmp.w	sl, #0
 801eb60:	d107      	bne.n	801eb72 <_strtol_l.isra.0+0xda>
 801eb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb66:	b102      	cbz	r2, 801eb6a <_strtol_l.isra.0+0xd2>
 801eb68:	4240      	negs	r0, r0
 801eb6a:	f1ba 0f00 	cmp.w	sl, #0
 801eb6e:	d0f8      	beq.n	801eb62 <_strtol_l.isra.0+0xca>
 801eb70:	b10f      	cbz	r7, 801eb76 <_strtol_l.isra.0+0xde>
 801eb72:	f105 39ff 	add.w	r9, r5, #4294967295
 801eb76:	f8ca 9000 	str.w	r9, [sl]
 801eb7a:	e7f2      	b.n	801eb62 <_strtol_l.isra.0+0xca>
 801eb7c:	2430      	movs	r4, #48	; 0x30
 801eb7e:	2e00      	cmp	r6, #0
 801eb80:	d1af      	bne.n	801eae2 <_strtol_l.isra.0+0x4a>
 801eb82:	2608      	movs	r6, #8
 801eb84:	e7ad      	b.n	801eae2 <_strtol_l.isra.0+0x4a>
 801eb86:	2c30      	cmp	r4, #48	; 0x30
 801eb88:	d0a3      	beq.n	801ead2 <_strtol_l.isra.0+0x3a>
 801eb8a:	260a      	movs	r6, #10
 801eb8c:	e7a9      	b.n	801eae2 <_strtol_l.isra.0+0x4a>
	...

0801eb90 <strtol>:
 801eb90:	4b08      	ldr	r3, [pc, #32]	; (801ebb4 <strtol+0x24>)
 801eb92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eb94:	681c      	ldr	r4, [r3, #0]
 801eb96:	4d08      	ldr	r5, [pc, #32]	; (801ebb8 <strtol+0x28>)
 801eb98:	6a23      	ldr	r3, [r4, #32]
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	bf08      	it	eq
 801eb9e:	462b      	moveq	r3, r5
 801eba0:	9300      	str	r3, [sp, #0]
 801eba2:	4613      	mov	r3, r2
 801eba4:	460a      	mov	r2, r1
 801eba6:	4601      	mov	r1, r0
 801eba8:	4620      	mov	r0, r4
 801ebaa:	f7ff ff75 	bl	801ea98 <_strtol_l.isra.0>
 801ebae:	b003      	add	sp, #12
 801ebb0:	bd30      	pop	{r4, r5, pc}
 801ebb2:	bf00      	nop
 801ebb4:	2000009c 	.word	0x2000009c
 801ebb8:	20000100 	.word	0x20000100

0801ebbc <quorem>:
 801ebbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebc0:	6903      	ldr	r3, [r0, #16]
 801ebc2:	690c      	ldr	r4, [r1, #16]
 801ebc4:	42a3      	cmp	r3, r4
 801ebc6:	4680      	mov	r8, r0
 801ebc8:	f2c0 8082 	blt.w	801ecd0 <quorem+0x114>
 801ebcc:	3c01      	subs	r4, #1
 801ebce:	f101 0714 	add.w	r7, r1, #20
 801ebd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801ebd6:	f100 0614 	add.w	r6, r0, #20
 801ebda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801ebde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801ebe2:	eb06 030c 	add.w	r3, r6, ip
 801ebe6:	3501      	adds	r5, #1
 801ebe8:	eb07 090c 	add.w	r9, r7, ip
 801ebec:	9301      	str	r3, [sp, #4]
 801ebee:	fbb0 f5f5 	udiv	r5, r0, r5
 801ebf2:	b395      	cbz	r5, 801ec5a <quorem+0x9e>
 801ebf4:	f04f 0a00 	mov.w	sl, #0
 801ebf8:	4638      	mov	r0, r7
 801ebfa:	46b6      	mov	lr, r6
 801ebfc:	46d3      	mov	fp, sl
 801ebfe:	f850 2b04 	ldr.w	r2, [r0], #4
 801ec02:	b293      	uxth	r3, r2
 801ec04:	fb05 a303 	mla	r3, r5, r3, sl
 801ec08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ec0c:	b29b      	uxth	r3, r3
 801ec0e:	ebab 0303 	sub.w	r3, fp, r3
 801ec12:	0c12      	lsrs	r2, r2, #16
 801ec14:	f8de b000 	ldr.w	fp, [lr]
 801ec18:	fb05 a202 	mla	r2, r5, r2, sl
 801ec1c:	fa13 f38b 	uxtah	r3, r3, fp
 801ec20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801ec24:	fa1f fb82 	uxth.w	fp, r2
 801ec28:	f8de 2000 	ldr.w	r2, [lr]
 801ec2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801ec30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ec34:	b29b      	uxth	r3, r3
 801ec36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ec3a:	4581      	cmp	r9, r0
 801ec3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801ec40:	f84e 3b04 	str.w	r3, [lr], #4
 801ec44:	d2db      	bcs.n	801ebfe <quorem+0x42>
 801ec46:	f856 300c 	ldr.w	r3, [r6, ip]
 801ec4a:	b933      	cbnz	r3, 801ec5a <quorem+0x9e>
 801ec4c:	9b01      	ldr	r3, [sp, #4]
 801ec4e:	3b04      	subs	r3, #4
 801ec50:	429e      	cmp	r6, r3
 801ec52:	461a      	mov	r2, r3
 801ec54:	d330      	bcc.n	801ecb8 <quorem+0xfc>
 801ec56:	f8c8 4010 	str.w	r4, [r8, #16]
 801ec5a:	4640      	mov	r0, r8
 801ec5c:	f000 ffc4 	bl	801fbe8 <__mcmp>
 801ec60:	2800      	cmp	r0, #0
 801ec62:	db25      	blt.n	801ecb0 <quorem+0xf4>
 801ec64:	3501      	adds	r5, #1
 801ec66:	4630      	mov	r0, r6
 801ec68:	f04f 0c00 	mov.w	ip, #0
 801ec6c:	f857 2b04 	ldr.w	r2, [r7], #4
 801ec70:	f8d0 e000 	ldr.w	lr, [r0]
 801ec74:	b293      	uxth	r3, r2
 801ec76:	ebac 0303 	sub.w	r3, ip, r3
 801ec7a:	0c12      	lsrs	r2, r2, #16
 801ec7c:	fa13 f38e 	uxtah	r3, r3, lr
 801ec80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ec84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ec88:	b29b      	uxth	r3, r3
 801ec8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ec8e:	45b9      	cmp	r9, r7
 801ec90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ec94:	f840 3b04 	str.w	r3, [r0], #4
 801ec98:	d2e8      	bcs.n	801ec6c <quorem+0xb0>
 801ec9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801ec9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801eca2:	b92a      	cbnz	r2, 801ecb0 <quorem+0xf4>
 801eca4:	3b04      	subs	r3, #4
 801eca6:	429e      	cmp	r6, r3
 801eca8:	461a      	mov	r2, r3
 801ecaa:	d30b      	bcc.n	801ecc4 <quorem+0x108>
 801ecac:	f8c8 4010 	str.w	r4, [r8, #16]
 801ecb0:	4628      	mov	r0, r5
 801ecb2:	b003      	add	sp, #12
 801ecb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecb8:	6812      	ldr	r2, [r2, #0]
 801ecba:	3b04      	subs	r3, #4
 801ecbc:	2a00      	cmp	r2, #0
 801ecbe:	d1ca      	bne.n	801ec56 <quorem+0x9a>
 801ecc0:	3c01      	subs	r4, #1
 801ecc2:	e7c5      	b.n	801ec50 <quorem+0x94>
 801ecc4:	6812      	ldr	r2, [r2, #0]
 801ecc6:	3b04      	subs	r3, #4
 801ecc8:	2a00      	cmp	r2, #0
 801ecca:	d1ef      	bne.n	801ecac <quorem+0xf0>
 801eccc:	3c01      	subs	r4, #1
 801ecce:	e7ea      	b.n	801eca6 <quorem+0xea>
 801ecd0:	2000      	movs	r0, #0
 801ecd2:	e7ee      	b.n	801ecb2 <quorem+0xf6>
 801ecd4:	0000      	movs	r0, r0
	...

0801ecd8 <_dtoa_r>:
 801ecd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecdc:	ec57 6b10 	vmov	r6, r7, d0
 801ece0:	b095      	sub	sp, #84	; 0x54
 801ece2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ece4:	9108      	str	r1, [sp, #32]
 801ece6:	4604      	mov	r4, r0
 801ece8:	920a      	str	r2, [sp, #40]	; 0x28
 801ecea:	9311      	str	r3, [sp, #68]	; 0x44
 801ecec:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801ecf0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ecf4:	b93d      	cbnz	r5, 801ed06 <_dtoa_r+0x2e>
 801ecf6:	2010      	movs	r0, #16
 801ecf8:	f7ff f998 	bl	801e02c <malloc>
 801ecfc:	6260      	str	r0, [r4, #36]	; 0x24
 801ecfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ed02:	6005      	str	r5, [r0, #0]
 801ed04:	60c5      	str	r5, [r0, #12]
 801ed06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ed08:	6819      	ldr	r1, [r3, #0]
 801ed0a:	b151      	cbz	r1, 801ed22 <_dtoa_r+0x4a>
 801ed0c:	685a      	ldr	r2, [r3, #4]
 801ed0e:	604a      	str	r2, [r1, #4]
 801ed10:	2301      	movs	r3, #1
 801ed12:	4093      	lsls	r3, r2
 801ed14:	608b      	str	r3, [r1, #8]
 801ed16:	4620      	mov	r0, r4
 801ed18:	f000 fd84 	bl	801f824 <_Bfree>
 801ed1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ed1e:	2200      	movs	r2, #0
 801ed20:	601a      	str	r2, [r3, #0]
 801ed22:	1e3b      	subs	r3, r7, #0
 801ed24:	bfb9      	ittee	lt
 801ed26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ed2a:	9303      	strlt	r3, [sp, #12]
 801ed2c:	2300      	movge	r3, #0
 801ed2e:	f8c8 3000 	strge.w	r3, [r8]
 801ed32:	9d03      	ldr	r5, [sp, #12]
 801ed34:	4bac      	ldr	r3, [pc, #688]	; (801efe8 <_dtoa_r+0x310>)
 801ed36:	bfbc      	itt	lt
 801ed38:	2201      	movlt	r2, #1
 801ed3a:	f8c8 2000 	strlt.w	r2, [r8]
 801ed3e:	43ab      	bics	r3, r5
 801ed40:	d11b      	bne.n	801ed7a <_dtoa_r+0xa2>
 801ed42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed44:	f242 730f 	movw	r3, #9999	; 0x270f
 801ed48:	6013      	str	r3, [r2, #0]
 801ed4a:	9b02      	ldr	r3, [sp, #8]
 801ed4c:	b923      	cbnz	r3, 801ed58 <_dtoa_r+0x80>
 801ed4e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801ed52:	2d00      	cmp	r5, #0
 801ed54:	f000 84dd 	beq.w	801f712 <_dtoa_r+0xa3a>
 801ed58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ed5a:	b953      	cbnz	r3, 801ed72 <_dtoa_r+0x9a>
 801ed5c:	4ba3      	ldr	r3, [pc, #652]	; (801efec <_dtoa_r+0x314>)
 801ed5e:	e020      	b.n	801eda2 <_dtoa_r+0xca>
 801ed60:	4ba3      	ldr	r3, [pc, #652]	; (801eff0 <_dtoa_r+0x318>)
 801ed62:	9304      	str	r3, [sp, #16]
 801ed64:	3308      	adds	r3, #8
 801ed66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ed68:	6013      	str	r3, [r2, #0]
 801ed6a:	9804      	ldr	r0, [sp, #16]
 801ed6c:	b015      	add	sp, #84	; 0x54
 801ed6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed72:	4b9e      	ldr	r3, [pc, #632]	; (801efec <_dtoa_r+0x314>)
 801ed74:	9304      	str	r3, [sp, #16]
 801ed76:	3303      	adds	r3, #3
 801ed78:	e7f5      	b.n	801ed66 <_dtoa_r+0x8e>
 801ed7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ed7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ed82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed86:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ed8a:	d10c      	bne.n	801eda6 <_dtoa_r+0xce>
 801ed8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed8e:	2301      	movs	r3, #1
 801ed90:	6013      	str	r3, [r2, #0]
 801ed92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	f000 84b9 	beq.w	801f70c <_dtoa_r+0xa34>
 801ed9a:	4b96      	ldr	r3, [pc, #600]	; (801eff4 <_dtoa_r+0x31c>)
 801ed9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ed9e:	6013      	str	r3, [r2, #0]
 801eda0:	3b01      	subs	r3, #1
 801eda2:	9304      	str	r3, [sp, #16]
 801eda4:	e7e1      	b.n	801ed6a <_dtoa_r+0x92>
 801eda6:	a913      	add	r1, sp, #76	; 0x4c
 801eda8:	aa12      	add	r2, sp, #72	; 0x48
 801edaa:	ed9d 0b04 	vldr	d0, [sp, #16]
 801edae:	4620      	mov	r0, r4
 801edb0:	f000 ff91 	bl	801fcd6 <__d2b>
 801edb4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801edb8:	9001      	str	r0, [sp, #4]
 801edba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801edbc:	2e00      	cmp	r6, #0
 801edbe:	d046      	beq.n	801ee4e <_dtoa_r+0x176>
 801edc0:	9805      	ldr	r0, [sp, #20]
 801edc2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801edc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801edca:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801edce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801edd2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801edd6:	2700      	movs	r7, #0
 801edd8:	ee07 aa90 	vmov	s15, sl
 801eddc:	ec43 2b16 	vmov	d6, r2, r3
 801ede0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801ede4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801efd0 <_dtoa_r+0x2f8>
 801ede8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801edec:	ee36 7b47 	vsub.f64	d7, d6, d7
 801edf0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801efd8 <_dtoa_r+0x300>
 801edf4:	eea7 6b04 	vfma.f64	d6, d7, d4
 801edf8:	eeb0 7b46 	vmov.f64	d7, d6
 801edfc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801efe0 <_dtoa_r+0x308>
 801ee00:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ee04:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801ee08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ee0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee10:	ee16 ba90 	vmov	fp, s13
 801ee14:	d508      	bpl.n	801ee28 <_dtoa_r+0x150>
 801ee16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ee1a:	eeb4 6b47 	vcmp.f64	d6, d7
 801ee1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee22:	bf18      	it	ne
 801ee24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801ee28:	f1bb 0f16 	cmp.w	fp, #22
 801ee2c:	d834      	bhi.n	801ee98 <_dtoa_r+0x1c0>
 801ee2e:	4b72      	ldr	r3, [pc, #456]	; (801eff8 <_dtoa_r+0x320>)
 801ee30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ee34:	ed93 7b00 	vldr	d7, [r3]
 801ee38:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ee3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ee40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee44:	dd01      	ble.n	801ee4a <_dtoa_r+0x172>
 801ee46:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ee4a:	2300      	movs	r3, #0
 801ee4c:	e025      	b.n	801ee9a <_dtoa_r+0x1c2>
 801ee4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ee50:	eb01 0a03 	add.w	sl, r1, r3
 801ee54:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801ee58:	2b20      	cmp	r3, #32
 801ee5a:	dd17      	ble.n	801ee8c <_dtoa_r+0x1b4>
 801ee5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801ee60:	9a02      	ldr	r2, [sp, #8]
 801ee62:	409d      	lsls	r5, r3
 801ee64:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801ee68:	fa22 f303 	lsr.w	r3, r2, r3
 801ee6c:	432b      	orrs	r3, r5
 801ee6e:	ee07 3a90 	vmov	s15, r3
 801ee72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ee76:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ee7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ee7e:	9805      	ldr	r0, [sp, #20]
 801ee80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ee84:	2701      	movs	r7, #1
 801ee86:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801ee8a:	e7a5      	b.n	801edd8 <_dtoa_r+0x100>
 801ee8c:	9a02      	ldr	r2, [sp, #8]
 801ee8e:	f1c3 0320 	rsb	r3, r3, #32
 801ee92:	fa02 f303 	lsl.w	r3, r2, r3
 801ee96:	e7ea      	b.n	801ee6e <_dtoa_r+0x196>
 801ee98:	2301      	movs	r3, #1
 801ee9a:	eba1 0a0a 	sub.w	sl, r1, sl
 801ee9e:	9310      	str	r3, [sp, #64]	; 0x40
 801eea0:	f1ba 0301 	subs.w	r3, sl, #1
 801eea4:	9307      	str	r3, [sp, #28]
 801eea6:	bf43      	ittte	mi
 801eea8:	2300      	movmi	r3, #0
 801eeaa:	f1ca 0a01 	rsbmi	sl, sl, #1
 801eeae:	9307      	strmi	r3, [sp, #28]
 801eeb0:	f04f 0a00 	movpl.w	sl, #0
 801eeb4:	f1bb 0f00 	cmp.w	fp, #0
 801eeb8:	db19      	blt.n	801eeee <_dtoa_r+0x216>
 801eeba:	9b07      	ldr	r3, [sp, #28]
 801eebc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801eec0:	445b      	add	r3, fp
 801eec2:	9307      	str	r3, [sp, #28]
 801eec4:	f04f 0800 	mov.w	r8, #0
 801eec8:	9b08      	ldr	r3, [sp, #32]
 801eeca:	2b09      	cmp	r3, #9
 801eecc:	d866      	bhi.n	801ef9c <_dtoa_r+0x2c4>
 801eece:	2b05      	cmp	r3, #5
 801eed0:	bfc4      	itt	gt
 801eed2:	3b04      	subgt	r3, #4
 801eed4:	9308      	strgt	r3, [sp, #32]
 801eed6:	9b08      	ldr	r3, [sp, #32]
 801eed8:	f1a3 0302 	sub.w	r3, r3, #2
 801eedc:	bfcc      	ite	gt
 801eede:	2500      	movgt	r5, #0
 801eee0:	2501      	movle	r5, #1
 801eee2:	2b03      	cmp	r3, #3
 801eee4:	d866      	bhi.n	801efb4 <_dtoa_r+0x2dc>
 801eee6:	e8df f003 	tbb	[pc, r3]
 801eeea:	5755      	.short	0x5755
 801eeec:	4909      	.short	0x4909
 801eeee:	2300      	movs	r3, #0
 801eef0:	ebaa 0a0b 	sub.w	sl, sl, fp
 801eef4:	f1cb 0800 	rsb	r8, fp, #0
 801eef8:	930b      	str	r3, [sp, #44]	; 0x2c
 801eefa:	e7e5      	b.n	801eec8 <_dtoa_r+0x1f0>
 801eefc:	2301      	movs	r3, #1
 801eefe:	9309      	str	r3, [sp, #36]	; 0x24
 801ef00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	dd59      	ble.n	801efba <_dtoa_r+0x2e2>
 801ef06:	9306      	str	r3, [sp, #24]
 801ef08:	4699      	mov	r9, r3
 801ef0a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ef0c:	2200      	movs	r2, #0
 801ef0e:	6072      	str	r2, [r6, #4]
 801ef10:	2204      	movs	r2, #4
 801ef12:	f102 0014 	add.w	r0, r2, #20
 801ef16:	4298      	cmp	r0, r3
 801ef18:	6871      	ldr	r1, [r6, #4]
 801ef1a:	d953      	bls.n	801efc4 <_dtoa_r+0x2ec>
 801ef1c:	4620      	mov	r0, r4
 801ef1e:	f000 fc4d 	bl	801f7bc <_Balloc>
 801ef22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ef24:	6030      	str	r0, [r6, #0]
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	9304      	str	r3, [sp, #16]
 801ef2a:	f1b9 0f0e 	cmp.w	r9, #14
 801ef2e:	f200 80c2 	bhi.w	801f0b6 <_dtoa_r+0x3de>
 801ef32:	2d00      	cmp	r5, #0
 801ef34:	f000 80bf 	beq.w	801f0b6 <_dtoa_r+0x3de>
 801ef38:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ef3c:	f1bb 0f00 	cmp.w	fp, #0
 801ef40:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801ef44:	f340 80e6 	ble.w	801f114 <_dtoa_r+0x43c>
 801ef48:	4a2b      	ldr	r2, [pc, #172]	; (801eff8 <_dtoa_r+0x320>)
 801ef4a:	f00b 030f 	and.w	r3, fp, #15
 801ef4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ef52:	ed93 7b00 	vldr	d7, [r3]
 801ef56:	ea4f 132b 	mov.w	r3, fp, asr #4
 801ef5a:	06da      	lsls	r2, r3, #27
 801ef5c:	f140 80d8 	bpl.w	801f110 <_dtoa_r+0x438>
 801ef60:	4a26      	ldr	r2, [pc, #152]	; (801effc <_dtoa_r+0x324>)
 801ef62:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801ef66:	ed92 6b08 	vldr	d6, [r2, #32]
 801ef6a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801ef6e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ef72:	f003 030f 	and.w	r3, r3, #15
 801ef76:	2203      	movs	r2, #3
 801ef78:	4920      	ldr	r1, [pc, #128]	; (801effc <_dtoa_r+0x324>)
 801ef7a:	e04a      	b.n	801f012 <_dtoa_r+0x33a>
 801ef7c:	2301      	movs	r3, #1
 801ef7e:	9309      	str	r3, [sp, #36]	; 0x24
 801ef80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef82:	445b      	add	r3, fp
 801ef84:	f103 0901 	add.w	r9, r3, #1
 801ef88:	9306      	str	r3, [sp, #24]
 801ef8a:	464b      	mov	r3, r9
 801ef8c:	2b01      	cmp	r3, #1
 801ef8e:	bfb8      	it	lt
 801ef90:	2301      	movlt	r3, #1
 801ef92:	e7ba      	b.n	801ef0a <_dtoa_r+0x232>
 801ef94:	2300      	movs	r3, #0
 801ef96:	e7b2      	b.n	801eefe <_dtoa_r+0x226>
 801ef98:	2300      	movs	r3, #0
 801ef9a:	e7f0      	b.n	801ef7e <_dtoa_r+0x2a6>
 801ef9c:	2501      	movs	r5, #1
 801ef9e:	2300      	movs	r3, #0
 801efa0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801efa4:	f04f 33ff 	mov.w	r3, #4294967295
 801efa8:	9306      	str	r3, [sp, #24]
 801efaa:	4699      	mov	r9, r3
 801efac:	2200      	movs	r2, #0
 801efae:	2312      	movs	r3, #18
 801efb0:	920a      	str	r2, [sp, #40]	; 0x28
 801efb2:	e7aa      	b.n	801ef0a <_dtoa_r+0x232>
 801efb4:	2301      	movs	r3, #1
 801efb6:	9309      	str	r3, [sp, #36]	; 0x24
 801efb8:	e7f4      	b.n	801efa4 <_dtoa_r+0x2cc>
 801efba:	2301      	movs	r3, #1
 801efbc:	9306      	str	r3, [sp, #24]
 801efbe:	4699      	mov	r9, r3
 801efc0:	461a      	mov	r2, r3
 801efc2:	e7f5      	b.n	801efb0 <_dtoa_r+0x2d8>
 801efc4:	3101      	adds	r1, #1
 801efc6:	6071      	str	r1, [r6, #4]
 801efc8:	0052      	lsls	r2, r2, #1
 801efca:	e7a2      	b.n	801ef12 <_dtoa_r+0x23a>
 801efcc:	f3af 8000 	nop.w
 801efd0:	636f4361 	.word	0x636f4361
 801efd4:	3fd287a7 	.word	0x3fd287a7
 801efd8:	8b60c8b3 	.word	0x8b60c8b3
 801efdc:	3fc68a28 	.word	0x3fc68a28
 801efe0:	509f79fb 	.word	0x509f79fb
 801efe4:	3fd34413 	.word	0x3fd34413
 801efe8:	7ff00000 	.word	0x7ff00000
 801efec:	08023389 	.word	0x08023389
 801eff0:	08023380 	.word	0x08023380
 801eff4:	0802335d 	.word	0x0802335d
 801eff8:	08023428 	.word	0x08023428
 801effc:	08023400 	.word	0x08023400
 801f000:	07de      	lsls	r6, r3, #31
 801f002:	d504      	bpl.n	801f00e <_dtoa_r+0x336>
 801f004:	ed91 6b00 	vldr	d6, [r1]
 801f008:	3201      	adds	r2, #1
 801f00a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f00e:	105b      	asrs	r3, r3, #1
 801f010:	3108      	adds	r1, #8
 801f012:	2b00      	cmp	r3, #0
 801f014:	d1f4      	bne.n	801f000 <_dtoa_r+0x328>
 801f016:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f01a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801f01e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f022:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f024:	2b00      	cmp	r3, #0
 801f026:	f000 80a7 	beq.w	801f178 <_dtoa_r+0x4a0>
 801f02a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801f02e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f032:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f03a:	f140 809d 	bpl.w	801f178 <_dtoa_r+0x4a0>
 801f03e:	f1b9 0f00 	cmp.w	r9, #0
 801f042:	f000 8099 	beq.w	801f178 <_dtoa_r+0x4a0>
 801f046:	9b06      	ldr	r3, [sp, #24]
 801f048:	2b00      	cmp	r3, #0
 801f04a:	dd30      	ble.n	801f0ae <_dtoa_r+0x3d6>
 801f04c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801f050:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f054:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f058:	9d06      	ldr	r5, [sp, #24]
 801f05a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801f05e:	3201      	adds	r2, #1
 801f060:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f064:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801f068:	ee07 2a90 	vmov	s15, r2
 801f06c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f070:	eea7 5b06 	vfma.f64	d5, d7, d6
 801f074:	ed8d 5b02 	vstr	d5, [sp, #8]
 801f078:	9a03      	ldr	r2, [sp, #12]
 801f07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f07e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801f082:	2d00      	cmp	r5, #0
 801f084:	d17b      	bne.n	801f17e <_dtoa_r+0x4a6>
 801f086:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f08a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f08e:	ec41 0b17 	vmov	d7, r0, r1
 801f092:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f09a:	f300 8253 	bgt.w	801f544 <_dtoa_r+0x86c>
 801f09e:	eeb1 7b47 	vneg.f64	d7, d7
 801f0a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0aa:	f100 8249 	bmi.w	801f540 <_dtoa_r+0x868>
 801f0ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801f0b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f0b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f0b8:	2b00      	cmp	r3, #0
 801f0ba:	f2c0 8119 	blt.w	801f2f0 <_dtoa_r+0x618>
 801f0be:	f1bb 0f0e 	cmp.w	fp, #14
 801f0c2:	f300 8115 	bgt.w	801f2f0 <_dtoa_r+0x618>
 801f0c6:	4bc3      	ldr	r3, [pc, #780]	; (801f3d4 <_dtoa_r+0x6fc>)
 801f0c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f0cc:	ed93 6b00 	vldr	d6, [r3]
 801f0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	f280 80ba 	bge.w	801f24c <_dtoa_r+0x574>
 801f0d8:	f1b9 0f00 	cmp.w	r9, #0
 801f0dc:	f300 80b6 	bgt.w	801f24c <_dtoa_r+0x574>
 801f0e0:	f040 822d 	bne.w	801f53e <_dtoa_r+0x866>
 801f0e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f0e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f0ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f0f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0f8:	464d      	mov	r5, r9
 801f0fa:	464f      	mov	r7, r9
 801f0fc:	f280 8204 	bge.w	801f508 <_dtoa_r+0x830>
 801f100:	9b04      	ldr	r3, [sp, #16]
 801f102:	9a04      	ldr	r2, [sp, #16]
 801f104:	1c5e      	adds	r6, r3, #1
 801f106:	2331      	movs	r3, #49	; 0x31
 801f108:	7013      	strb	r3, [r2, #0]
 801f10a:	f10b 0b01 	add.w	fp, fp, #1
 801f10e:	e1ff      	b.n	801f510 <_dtoa_r+0x838>
 801f110:	2202      	movs	r2, #2
 801f112:	e731      	b.n	801ef78 <_dtoa_r+0x2a0>
 801f114:	d02e      	beq.n	801f174 <_dtoa_r+0x49c>
 801f116:	f1cb 0300 	rsb	r3, fp, #0
 801f11a:	4aae      	ldr	r2, [pc, #696]	; (801f3d4 <_dtoa_r+0x6fc>)
 801f11c:	f003 010f 	and.w	r1, r3, #15
 801f120:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801f124:	ed92 7b00 	vldr	d7, [r2]
 801f128:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801f12c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f130:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f134:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f138:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f13c:	49a6      	ldr	r1, [pc, #664]	; (801f3d8 <_dtoa_r+0x700>)
 801f13e:	111b      	asrs	r3, r3, #4
 801f140:	2000      	movs	r0, #0
 801f142:	2202      	movs	r2, #2
 801f144:	b93b      	cbnz	r3, 801f156 <_dtoa_r+0x47e>
 801f146:	2800      	cmp	r0, #0
 801f148:	f43f af6b 	beq.w	801f022 <_dtoa_r+0x34a>
 801f14c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f154:	e765      	b.n	801f022 <_dtoa_r+0x34a>
 801f156:	07dd      	lsls	r5, r3, #31
 801f158:	d509      	bpl.n	801f16e <_dtoa_r+0x496>
 801f15a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801f15e:	ed91 7b00 	vldr	d7, [r1]
 801f162:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f166:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f16a:	3201      	adds	r2, #1
 801f16c:	2001      	movs	r0, #1
 801f16e:	105b      	asrs	r3, r3, #1
 801f170:	3108      	adds	r1, #8
 801f172:	e7e7      	b.n	801f144 <_dtoa_r+0x46c>
 801f174:	2202      	movs	r2, #2
 801f176:	e754      	b.n	801f022 <_dtoa_r+0x34a>
 801f178:	465b      	mov	r3, fp
 801f17a:	464d      	mov	r5, r9
 801f17c:	e770      	b.n	801f060 <_dtoa_r+0x388>
 801f17e:	4a95      	ldr	r2, [pc, #596]	; (801f3d4 <_dtoa_r+0x6fc>)
 801f180:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801f184:	ed12 4b02 	vldr	d4, [r2, #-8]
 801f188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f18a:	ec41 0b17 	vmov	d7, r0, r1
 801f18e:	b35a      	cbz	r2, 801f1e8 <_dtoa_r+0x510>
 801f190:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801f194:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801f198:	9e04      	ldr	r6, [sp, #16]
 801f19a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801f19e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f1a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f1a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f1aa:	ee14 2a90 	vmov	r2, s9
 801f1ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f1b2:	3230      	adds	r2, #48	; 0x30
 801f1b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f1b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1c0:	f806 2b01 	strb.w	r2, [r6], #1
 801f1c4:	d43b      	bmi.n	801f23e <_dtoa_r+0x566>
 801f1c6:	ee32 5b46 	vsub.f64	d5, d2, d6
 801f1ca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801f1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1d2:	d472      	bmi.n	801f2ba <_dtoa_r+0x5e2>
 801f1d4:	9a04      	ldr	r2, [sp, #16]
 801f1d6:	1ab2      	subs	r2, r6, r2
 801f1d8:	4295      	cmp	r5, r2
 801f1da:	f77f af68 	ble.w	801f0ae <_dtoa_r+0x3d6>
 801f1de:	ee27 7b03 	vmul.f64	d7, d7, d3
 801f1e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f1e6:	e7de      	b.n	801f1a6 <_dtoa_r+0x4ce>
 801f1e8:	9a04      	ldr	r2, [sp, #16]
 801f1ea:	ee24 7b07 	vmul.f64	d7, d4, d7
 801f1ee:	1956      	adds	r6, r2, r5
 801f1f0:	4611      	mov	r1, r2
 801f1f2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f1f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f1fa:	ee14 2a90 	vmov	r2, s9
 801f1fe:	3230      	adds	r2, #48	; 0x30
 801f200:	f801 2b01 	strb.w	r2, [r1], #1
 801f204:	42b1      	cmp	r1, r6
 801f206:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f20a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f20e:	d11a      	bne.n	801f246 <_dtoa_r+0x56e>
 801f210:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801f214:	ee37 4b05 	vadd.f64	d4, d7, d5
 801f218:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801f21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f220:	dc4b      	bgt.n	801f2ba <_dtoa_r+0x5e2>
 801f222:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f226:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f22e:	f57f af3e 	bpl.w	801f0ae <_dtoa_r+0x3d6>
 801f232:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f236:	2a30      	cmp	r2, #48	; 0x30
 801f238:	f106 31ff 	add.w	r1, r6, #4294967295
 801f23c:	d001      	beq.n	801f242 <_dtoa_r+0x56a>
 801f23e:	469b      	mov	fp, r3
 801f240:	e02a      	b.n	801f298 <_dtoa_r+0x5c0>
 801f242:	460e      	mov	r6, r1
 801f244:	e7f5      	b.n	801f232 <_dtoa_r+0x55a>
 801f246:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f24a:	e7d4      	b.n	801f1f6 <_dtoa_r+0x51e>
 801f24c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f250:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801f254:	9e04      	ldr	r6, [sp, #16]
 801f256:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801f25a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801f25e:	ee15 3a10 	vmov	r3, s10
 801f262:	3330      	adds	r3, #48	; 0x30
 801f264:	f806 3b01 	strb.w	r3, [r6], #1
 801f268:	9b04      	ldr	r3, [sp, #16]
 801f26a:	1af3      	subs	r3, r6, r3
 801f26c:	4599      	cmp	r9, r3
 801f26e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801f272:	eea3 7b46 	vfms.f64	d7, d3, d6
 801f276:	d133      	bne.n	801f2e0 <_dtoa_r+0x608>
 801f278:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f27c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f284:	dc18      	bgt.n	801f2b8 <_dtoa_r+0x5e0>
 801f286:	eeb4 7b46 	vcmp.f64	d7, d6
 801f28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f28e:	d103      	bne.n	801f298 <_dtoa_r+0x5c0>
 801f290:	ee15 3a10 	vmov	r3, s10
 801f294:	07db      	lsls	r3, r3, #31
 801f296:	d40f      	bmi.n	801f2b8 <_dtoa_r+0x5e0>
 801f298:	9901      	ldr	r1, [sp, #4]
 801f29a:	4620      	mov	r0, r4
 801f29c:	f000 fac2 	bl	801f824 <_Bfree>
 801f2a0:	2300      	movs	r3, #0
 801f2a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f2a4:	7033      	strb	r3, [r6, #0]
 801f2a6:	f10b 0301 	add.w	r3, fp, #1
 801f2aa:	6013      	str	r3, [r2, #0]
 801f2ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	f43f ad5b 	beq.w	801ed6a <_dtoa_r+0x92>
 801f2b4:	601e      	str	r6, [r3, #0]
 801f2b6:	e558      	b.n	801ed6a <_dtoa_r+0x92>
 801f2b8:	465b      	mov	r3, fp
 801f2ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f2be:	2939      	cmp	r1, #57	; 0x39
 801f2c0:	f106 32ff 	add.w	r2, r6, #4294967295
 801f2c4:	d106      	bne.n	801f2d4 <_dtoa_r+0x5fc>
 801f2c6:	9904      	ldr	r1, [sp, #16]
 801f2c8:	4291      	cmp	r1, r2
 801f2ca:	d107      	bne.n	801f2dc <_dtoa_r+0x604>
 801f2cc:	2230      	movs	r2, #48	; 0x30
 801f2ce:	700a      	strb	r2, [r1, #0]
 801f2d0:	3301      	adds	r3, #1
 801f2d2:	460a      	mov	r2, r1
 801f2d4:	7811      	ldrb	r1, [r2, #0]
 801f2d6:	3101      	adds	r1, #1
 801f2d8:	7011      	strb	r1, [r2, #0]
 801f2da:	e7b0      	b.n	801f23e <_dtoa_r+0x566>
 801f2dc:	4616      	mov	r6, r2
 801f2de:	e7ec      	b.n	801f2ba <_dtoa_r+0x5e2>
 801f2e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 801f2e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2ec:	d1b3      	bne.n	801f256 <_dtoa_r+0x57e>
 801f2ee:	e7d3      	b.n	801f298 <_dtoa_r+0x5c0>
 801f2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2f2:	2a00      	cmp	r2, #0
 801f2f4:	f000 808d 	beq.w	801f412 <_dtoa_r+0x73a>
 801f2f8:	9a08      	ldr	r2, [sp, #32]
 801f2fa:	2a01      	cmp	r2, #1
 801f2fc:	dc72      	bgt.n	801f3e4 <_dtoa_r+0x70c>
 801f2fe:	2f00      	cmp	r7, #0
 801f300:	d06c      	beq.n	801f3dc <_dtoa_r+0x704>
 801f302:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f306:	4645      	mov	r5, r8
 801f308:	4656      	mov	r6, sl
 801f30a:	9a07      	ldr	r2, [sp, #28]
 801f30c:	2101      	movs	r1, #1
 801f30e:	441a      	add	r2, r3
 801f310:	4620      	mov	r0, r4
 801f312:	449a      	add	sl, r3
 801f314:	9207      	str	r2, [sp, #28]
 801f316:	f000 fb25 	bl	801f964 <__i2b>
 801f31a:	4607      	mov	r7, r0
 801f31c:	2e00      	cmp	r6, #0
 801f31e:	dd0b      	ble.n	801f338 <_dtoa_r+0x660>
 801f320:	9b07      	ldr	r3, [sp, #28]
 801f322:	2b00      	cmp	r3, #0
 801f324:	dd08      	ble.n	801f338 <_dtoa_r+0x660>
 801f326:	42b3      	cmp	r3, r6
 801f328:	9a07      	ldr	r2, [sp, #28]
 801f32a:	bfa8      	it	ge
 801f32c:	4633      	movge	r3, r6
 801f32e:	ebaa 0a03 	sub.w	sl, sl, r3
 801f332:	1af6      	subs	r6, r6, r3
 801f334:	1ad3      	subs	r3, r2, r3
 801f336:	9307      	str	r3, [sp, #28]
 801f338:	f1b8 0f00 	cmp.w	r8, #0
 801f33c:	d01d      	beq.n	801f37a <_dtoa_r+0x6a2>
 801f33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f340:	2b00      	cmp	r3, #0
 801f342:	d06a      	beq.n	801f41a <_dtoa_r+0x742>
 801f344:	b18d      	cbz	r5, 801f36a <_dtoa_r+0x692>
 801f346:	4639      	mov	r1, r7
 801f348:	462a      	mov	r2, r5
 801f34a:	4620      	mov	r0, r4
 801f34c:	f000 fbaa 	bl	801faa4 <__pow5mult>
 801f350:	9a01      	ldr	r2, [sp, #4]
 801f352:	4601      	mov	r1, r0
 801f354:	4607      	mov	r7, r0
 801f356:	4620      	mov	r0, r4
 801f358:	f000 fb0d 	bl	801f976 <__multiply>
 801f35c:	9901      	ldr	r1, [sp, #4]
 801f35e:	900c      	str	r0, [sp, #48]	; 0x30
 801f360:	4620      	mov	r0, r4
 801f362:	f000 fa5f 	bl	801f824 <_Bfree>
 801f366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f368:	9301      	str	r3, [sp, #4]
 801f36a:	ebb8 0205 	subs.w	r2, r8, r5
 801f36e:	d004      	beq.n	801f37a <_dtoa_r+0x6a2>
 801f370:	9901      	ldr	r1, [sp, #4]
 801f372:	4620      	mov	r0, r4
 801f374:	f000 fb96 	bl	801faa4 <__pow5mult>
 801f378:	9001      	str	r0, [sp, #4]
 801f37a:	2101      	movs	r1, #1
 801f37c:	4620      	mov	r0, r4
 801f37e:	f000 faf1 	bl	801f964 <__i2b>
 801f382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f384:	4605      	mov	r5, r0
 801f386:	2b00      	cmp	r3, #0
 801f388:	f000 81ca 	beq.w	801f720 <_dtoa_r+0xa48>
 801f38c:	461a      	mov	r2, r3
 801f38e:	4601      	mov	r1, r0
 801f390:	4620      	mov	r0, r4
 801f392:	f000 fb87 	bl	801faa4 <__pow5mult>
 801f396:	9b08      	ldr	r3, [sp, #32]
 801f398:	2b01      	cmp	r3, #1
 801f39a:	4605      	mov	r5, r0
 801f39c:	dc44      	bgt.n	801f428 <_dtoa_r+0x750>
 801f39e:	9b02      	ldr	r3, [sp, #8]
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d13c      	bne.n	801f41e <_dtoa_r+0x746>
 801f3a4:	9b03      	ldr	r3, [sp, #12]
 801f3a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d137      	bne.n	801f41e <_dtoa_r+0x746>
 801f3ae:	9b03      	ldr	r3, [sp, #12]
 801f3b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f3b4:	0d1b      	lsrs	r3, r3, #20
 801f3b6:	051b      	lsls	r3, r3, #20
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	d033      	beq.n	801f424 <_dtoa_r+0x74c>
 801f3bc:	9b07      	ldr	r3, [sp, #28]
 801f3be:	3301      	adds	r3, #1
 801f3c0:	f10a 0a01 	add.w	sl, sl, #1
 801f3c4:	9307      	str	r3, [sp, #28]
 801f3c6:	f04f 0801 	mov.w	r8, #1
 801f3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f3cc:	bb73      	cbnz	r3, 801f42c <_dtoa_r+0x754>
 801f3ce:	2001      	movs	r0, #1
 801f3d0:	e034      	b.n	801f43c <_dtoa_r+0x764>
 801f3d2:	bf00      	nop
 801f3d4:	08023428 	.word	0x08023428
 801f3d8:	08023400 	.word	0x08023400
 801f3dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f3de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f3e2:	e790      	b.n	801f306 <_dtoa_r+0x62e>
 801f3e4:	f109 35ff 	add.w	r5, r9, #4294967295
 801f3e8:	45a8      	cmp	r8, r5
 801f3ea:	bfbf      	itttt	lt
 801f3ec:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801f3ee:	eba5 0808 	sublt.w	r8, r5, r8
 801f3f2:	4443      	addlt	r3, r8
 801f3f4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801f3f6:	bfb6      	itet	lt
 801f3f8:	46a8      	movlt	r8, r5
 801f3fa:	eba8 0505 	subge.w	r5, r8, r5
 801f3fe:	2500      	movlt	r5, #0
 801f400:	f1b9 0f00 	cmp.w	r9, #0
 801f404:	bfb9      	ittee	lt
 801f406:	ebaa 0609 	sublt.w	r6, sl, r9
 801f40a:	2300      	movlt	r3, #0
 801f40c:	4656      	movge	r6, sl
 801f40e:	464b      	movge	r3, r9
 801f410:	e77b      	b.n	801f30a <_dtoa_r+0x632>
 801f412:	4645      	mov	r5, r8
 801f414:	4656      	mov	r6, sl
 801f416:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f418:	e780      	b.n	801f31c <_dtoa_r+0x644>
 801f41a:	4642      	mov	r2, r8
 801f41c:	e7a8      	b.n	801f370 <_dtoa_r+0x698>
 801f41e:	f04f 0800 	mov.w	r8, #0
 801f422:	e7d2      	b.n	801f3ca <_dtoa_r+0x6f2>
 801f424:	4698      	mov	r8, r3
 801f426:	e7d0      	b.n	801f3ca <_dtoa_r+0x6f2>
 801f428:	f04f 0800 	mov.w	r8, #0
 801f42c:	692b      	ldr	r3, [r5, #16]
 801f42e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801f432:	6918      	ldr	r0, [r3, #16]
 801f434:	f000 fa48 	bl	801f8c8 <__hi0bits>
 801f438:	f1c0 0020 	rsb	r0, r0, #32
 801f43c:	9b07      	ldr	r3, [sp, #28]
 801f43e:	4418      	add	r0, r3
 801f440:	f010 001f 	ands.w	r0, r0, #31
 801f444:	d047      	beq.n	801f4d6 <_dtoa_r+0x7fe>
 801f446:	f1c0 0320 	rsb	r3, r0, #32
 801f44a:	2b04      	cmp	r3, #4
 801f44c:	dd3b      	ble.n	801f4c6 <_dtoa_r+0x7ee>
 801f44e:	9b07      	ldr	r3, [sp, #28]
 801f450:	f1c0 001c 	rsb	r0, r0, #28
 801f454:	4482      	add	sl, r0
 801f456:	4406      	add	r6, r0
 801f458:	4403      	add	r3, r0
 801f45a:	9307      	str	r3, [sp, #28]
 801f45c:	f1ba 0f00 	cmp.w	sl, #0
 801f460:	dd05      	ble.n	801f46e <_dtoa_r+0x796>
 801f462:	4652      	mov	r2, sl
 801f464:	9901      	ldr	r1, [sp, #4]
 801f466:	4620      	mov	r0, r4
 801f468:	f000 fb6a 	bl	801fb40 <__lshift>
 801f46c:	9001      	str	r0, [sp, #4]
 801f46e:	9b07      	ldr	r3, [sp, #28]
 801f470:	2b00      	cmp	r3, #0
 801f472:	dd05      	ble.n	801f480 <_dtoa_r+0x7a8>
 801f474:	4629      	mov	r1, r5
 801f476:	461a      	mov	r2, r3
 801f478:	4620      	mov	r0, r4
 801f47a:	f000 fb61 	bl	801fb40 <__lshift>
 801f47e:	4605      	mov	r5, r0
 801f480:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f482:	b353      	cbz	r3, 801f4da <_dtoa_r+0x802>
 801f484:	4629      	mov	r1, r5
 801f486:	9801      	ldr	r0, [sp, #4]
 801f488:	f000 fbae 	bl	801fbe8 <__mcmp>
 801f48c:	2800      	cmp	r0, #0
 801f48e:	da24      	bge.n	801f4da <_dtoa_r+0x802>
 801f490:	2300      	movs	r3, #0
 801f492:	220a      	movs	r2, #10
 801f494:	9901      	ldr	r1, [sp, #4]
 801f496:	4620      	mov	r0, r4
 801f498:	f000 f9db 	bl	801f852 <__multadd>
 801f49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f49e:	9001      	str	r0, [sp, #4]
 801f4a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	f000 8142 	beq.w	801f72e <_dtoa_r+0xa56>
 801f4aa:	2300      	movs	r3, #0
 801f4ac:	4639      	mov	r1, r7
 801f4ae:	220a      	movs	r2, #10
 801f4b0:	4620      	mov	r0, r4
 801f4b2:	f000 f9ce 	bl	801f852 <__multadd>
 801f4b6:	9b06      	ldr	r3, [sp, #24]
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	4607      	mov	r7, r0
 801f4bc:	dc4b      	bgt.n	801f556 <_dtoa_r+0x87e>
 801f4be:	9b08      	ldr	r3, [sp, #32]
 801f4c0:	2b02      	cmp	r3, #2
 801f4c2:	dd48      	ble.n	801f556 <_dtoa_r+0x87e>
 801f4c4:	e011      	b.n	801f4ea <_dtoa_r+0x812>
 801f4c6:	d0c9      	beq.n	801f45c <_dtoa_r+0x784>
 801f4c8:	9a07      	ldr	r2, [sp, #28]
 801f4ca:	331c      	adds	r3, #28
 801f4cc:	441a      	add	r2, r3
 801f4ce:	449a      	add	sl, r3
 801f4d0:	441e      	add	r6, r3
 801f4d2:	4613      	mov	r3, r2
 801f4d4:	e7c1      	b.n	801f45a <_dtoa_r+0x782>
 801f4d6:	4603      	mov	r3, r0
 801f4d8:	e7f6      	b.n	801f4c8 <_dtoa_r+0x7f0>
 801f4da:	f1b9 0f00 	cmp.w	r9, #0
 801f4de:	dc34      	bgt.n	801f54a <_dtoa_r+0x872>
 801f4e0:	9b08      	ldr	r3, [sp, #32]
 801f4e2:	2b02      	cmp	r3, #2
 801f4e4:	dd31      	ble.n	801f54a <_dtoa_r+0x872>
 801f4e6:	f8cd 9018 	str.w	r9, [sp, #24]
 801f4ea:	9b06      	ldr	r3, [sp, #24]
 801f4ec:	b963      	cbnz	r3, 801f508 <_dtoa_r+0x830>
 801f4ee:	4629      	mov	r1, r5
 801f4f0:	2205      	movs	r2, #5
 801f4f2:	4620      	mov	r0, r4
 801f4f4:	f000 f9ad 	bl	801f852 <__multadd>
 801f4f8:	4601      	mov	r1, r0
 801f4fa:	4605      	mov	r5, r0
 801f4fc:	9801      	ldr	r0, [sp, #4]
 801f4fe:	f000 fb73 	bl	801fbe8 <__mcmp>
 801f502:	2800      	cmp	r0, #0
 801f504:	f73f adfc 	bgt.w	801f100 <_dtoa_r+0x428>
 801f508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f50a:	9e04      	ldr	r6, [sp, #16]
 801f50c:	ea6f 0b03 	mvn.w	fp, r3
 801f510:	f04f 0900 	mov.w	r9, #0
 801f514:	4629      	mov	r1, r5
 801f516:	4620      	mov	r0, r4
 801f518:	f000 f984 	bl	801f824 <_Bfree>
 801f51c:	2f00      	cmp	r7, #0
 801f51e:	f43f aebb 	beq.w	801f298 <_dtoa_r+0x5c0>
 801f522:	f1b9 0f00 	cmp.w	r9, #0
 801f526:	d005      	beq.n	801f534 <_dtoa_r+0x85c>
 801f528:	45b9      	cmp	r9, r7
 801f52a:	d003      	beq.n	801f534 <_dtoa_r+0x85c>
 801f52c:	4649      	mov	r1, r9
 801f52e:	4620      	mov	r0, r4
 801f530:	f000 f978 	bl	801f824 <_Bfree>
 801f534:	4639      	mov	r1, r7
 801f536:	4620      	mov	r0, r4
 801f538:	f000 f974 	bl	801f824 <_Bfree>
 801f53c:	e6ac      	b.n	801f298 <_dtoa_r+0x5c0>
 801f53e:	2500      	movs	r5, #0
 801f540:	462f      	mov	r7, r5
 801f542:	e7e1      	b.n	801f508 <_dtoa_r+0x830>
 801f544:	469b      	mov	fp, r3
 801f546:	462f      	mov	r7, r5
 801f548:	e5da      	b.n	801f100 <_dtoa_r+0x428>
 801f54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f54c:	f8cd 9018 	str.w	r9, [sp, #24]
 801f550:	2b00      	cmp	r3, #0
 801f552:	f000 80f3 	beq.w	801f73c <_dtoa_r+0xa64>
 801f556:	2e00      	cmp	r6, #0
 801f558:	dd05      	ble.n	801f566 <_dtoa_r+0x88e>
 801f55a:	4639      	mov	r1, r7
 801f55c:	4632      	mov	r2, r6
 801f55e:	4620      	mov	r0, r4
 801f560:	f000 faee 	bl	801fb40 <__lshift>
 801f564:	4607      	mov	r7, r0
 801f566:	f1b8 0f00 	cmp.w	r8, #0
 801f56a:	d04c      	beq.n	801f606 <_dtoa_r+0x92e>
 801f56c:	6879      	ldr	r1, [r7, #4]
 801f56e:	4620      	mov	r0, r4
 801f570:	f000 f924 	bl	801f7bc <_Balloc>
 801f574:	693a      	ldr	r2, [r7, #16]
 801f576:	3202      	adds	r2, #2
 801f578:	4606      	mov	r6, r0
 801f57a:	0092      	lsls	r2, r2, #2
 801f57c:	f107 010c 	add.w	r1, r7, #12
 801f580:	300c      	adds	r0, #12
 801f582:	f7fe fd63 	bl	801e04c <memcpy>
 801f586:	2201      	movs	r2, #1
 801f588:	4631      	mov	r1, r6
 801f58a:	4620      	mov	r0, r4
 801f58c:	f000 fad8 	bl	801fb40 <__lshift>
 801f590:	9b02      	ldr	r3, [sp, #8]
 801f592:	f8dd a010 	ldr.w	sl, [sp, #16]
 801f596:	f003 0301 	and.w	r3, r3, #1
 801f59a:	46b9      	mov	r9, r7
 801f59c:	9307      	str	r3, [sp, #28]
 801f59e:	4607      	mov	r7, r0
 801f5a0:	4629      	mov	r1, r5
 801f5a2:	9801      	ldr	r0, [sp, #4]
 801f5a4:	f7ff fb0a 	bl	801ebbc <quorem>
 801f5a8:	4649      	mov	r1, r9
 801f5aa:	4606      	mov	r6, r0
 801f5ac:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801f5b0:	9801      	ldr	r0, [sp, #4]
 801f5b2:	f000 fb19 	bl	801fbe8 <__mcmp>
 801f5b6:	463a      	mov	r2, r7
 801f5b8:	9002      	str	r0, [sp, #8]
 801f5ba:	4629      	mov	r1, r5
 801f5bc:	4620      	mov	r0, r4
 801f5be:	f000 fb2d 	bl	801fc1c <__mdiff>
 801f5c2:	68c3      	ldr	r3, [r0, #12]
 801f5c4:	4602      	mov	r2, r0
 801f5c6:	bb03      	cbnz	r3, 801f60a <_dtoa_r+0x932>
 801f5c8:	4601      	mov	r1, r0
 801f5ca:	9009      	str	r0, [sp, #36]	; 0x24
 801f5cc:	9801      	ldr	r0, [sp, #4]
 801f5ce:	f000 fb0b 	bl	801fbe8 <__mcmp>
 801f5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f5d4:	4603      	mov	r3, r0
 801f5d6:	4611      	mov	r1, r2
 801f5d8:	4620      	mov	r0, r4
 801f5da:	9309      	str	r3, [sp, #36]	; 0x24
 801f5dc:	f000 f922 	bl	801f824 <_Bfree>
 801f5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5e2:	b9a3      	cbnz	r3, 801f60e <_dtoa_r+0x936>
 801f5e4:	9a08      	ldr	r2, [sp, #32]
 801f5e6:	b992      	cbnz	r2, 801f60e <_dtoa_r+0x936>
 801f5e8:	9a07      	ldr	r2, [sp, #28]
 801f5ea:	b982      	cbnz	r2, 801f60e <_dtoa_r+0x936>
 801f5ec:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801f5f0:	d029      	beq.n	801f646 <_dtoa_r+0x96e>
 801f5f2:	9b02      	ldr	r3, [sp, #8]
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	dd01      	ble.n	801f5fc <_dtoa_r+0x924>
 801f5f8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801f5fc:	f10a 0601 	add.w	r6, sl, #1
 801f600:	f88a 8000 	strb.w	r8, [sl]
 801f604:	e786      	b.n	801f514 <_dtoa_r+0x83c>
 801f606:	4638      	mov	r0, r7
 801f608:	e7c2      	b.n	801f590 <_dtoa_r+0x8b8>
 801f60a:	2301      	movs	r3, #1
 801f60c:	e7e3      	b.n	801f5d6 <_dtoa_r+0x8fe>
 801f60e:	9a02      	ldr	r2, [sp, #8]
 801f610:	2a00      	cmp	r2, #0
 801f612:	db04      	blt.n	801f61e <_dtoa_r+0x946>
 801f614:	d124      	bne.n	801f660 <_dtoa_r+0x988>
 801f616:	9a08      	ldr	r2, [sp, #32]
 801f618:	bb12      	cbnz	r2, 801f660 <_dtoa_r+0x988>
 801f61a:	9a07      	ldr	r2, [sp, #28]
 801f61c:	bb02      	cbnz	r2, 801f660 <_dtoa_r+0x988>
 801f61e:	2b00      	cmp	r3, #0
 801f620:	ddec      	ble.n	801f5fc <_dtoa_r+0x924>
 801f622:	2201      	movs	r2, #1
 801f624:	9901      	ldr	r1, [sp, #4]
 801f626:	4620      	mov	r0, r4
 801f628:	f000 fa8a 	bl	801fb40 <__lshift>
 801f62c:	4629      	mov	r1, r5
 801f62e:	9001      	str	r0, [sp, #4]
 801f630:	f000 fada 	bl	801fbe8 <__mcmp>
 801f634:	2800      	cmp	r0, #0
 801f636:	dc03      	bgt.n	801f640 <_dtoa_r+0x968>
 801f638:	d1e0      	bne.n	801f5fc <_dtoa_r+0x924>
 801f63a:	f018 0f01 	tst.w	r8, #1
 801f63e:	d0dd      	beq.n	801f5fc <_dtoa_r+0x924>
 801f640:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801f644:	d1d8      	bne.n	801f5f8 <_dtoa_r+0x920>
 801f646:	2339      	movs	r3, #57	; 0x39
 801f648:	f10a 0601 	add.w	r6, sl, #1
 801f64c:	f88a 3000 	strb.w	r3, [sl]
 801f650:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f654:	2b39      	cmp	r3, #57	; 0x39
 801f656:	f106 32ff 	add.w	r2, r6, #4294967295
 801f65a:	d04c      	beq.n	801f6f6 <_dtoa_r+0xa1e>
 801f65c:	3301      	adds	r3, #1
 801f65e:	e051      	b.n	801f704 <_dtoa_r+0xa2c>
 801f660:	2b00      	cmp	r3, #0
 801f662:	f10a 0601 	add.w	r6, sl, #1
 801f666:	dd05      	ble.n	801f674 <_dtoa_r+0x99c>
 801f668:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801f66c:	d0eb      	beq.n	801f646 <_dtoa_r+0x96e>
 801f66e:	f108 0801 	add.w	r8, r8, #1
 801f672:	e7c5      	b.n	801f600 <_dtoa_r+0x928>
 801f674:	9b04      	ldr	r3, [sp, #16]
 801f676:	9a06      	ldr	r2, [sp, #24]
 801f678:	f806 8c01 	strb.w	r8, [r6, #-1]
 801f67c:	1af3      	subs	r3, r6, r3
 801f67e:	4293      	cmp	r3, r2
 801f680:	d021      	beq.n	801f6c6 <_dtoa_r+0x9ee>
 801f682:	2300      	movs	r3, #0
 801f684:	220a      	movs	r2, #10
 801f686:	9901      	ldr	r1, [sp, #4]
 801f688:	4620      	mov	r0, r4
 801f68a:	f000 f8e2 	bl	801f852 <__multadd>
 801f68e:	45b9      	cmp	r9, r7
 801f690:	9001      	str	r0, [sp, #4]
 801f692:	f04f 0300 	mov.w	r3, #0
 801f696:	f04f 020a 	mov.w	r2, #10
 801f69a:	4649      	mov	r1, r9
 801f69c:	4620      	mov	r0, r4
 801f69e:	d105      	bne.n	801f6ac <_dtoa_r+0x9d4>
 801f6a0:	f000 f8d7 	bl	801f852 <__multadd>
 801f6a4:	4681      	mov	r9, r0
 801f6a6:	4607      	mov	r7, r0
 801f6a8:	46b2      	mov	sl, r6
 801f6aa:	e779      	b.n	801f5a0 <_dtoa_r+0x8c8>
 801f6ac:	f000 f8d1 	bl	801f852 <__multadd>
 801f6b0:	4639      	mov	r1, r7
 801f6b2:	4681      	mov	r9, r0
 801f6b4:	2300      	movs	r3, #0
 801f6b6:	220a      	movs	r2, #10
 801f6b8:	4620      	mov	r0, r4
 801f6ba:	f000 f8ca 	bl	801f852 <__multadd>
 801f6be:	4607      	mov	r7, r0
 801f6c0:	e7f2      	b.n	801f6a8 <_dtoa_r+0x9d0>
 801f6c2:	f04f 0900 	mov.w	r9, #0
 801f6c6:	2201      	movs	r2, #1
 801f6c8:	9901      	ldr	r1, [sp, #4]
 801f6ca:	4620      	mov	r0, r4
 801f6cc:	f000 fa38 	bl	801fb40 <__lshift>
 801f6d0:	4629      	mov	r1, r5
 801f6d2:	9001      	str	r0, [sp, #4]
 801f6d4:	f000 fa88 	bl	801fbe8 <__mcmp>
 801f6d8:	2800      	cmp	r0, #0
 801f6da:	dcb9      	bgt.n	801f650 <_dtoa_r+0x978>
 801f6dc:	d102      	bne.n	801f6e4 <_dtoa_r+0xa0c>
 801f6de:	f018 0f01 	tst.w	r8, #1
 801f6e2:	d1b5      	bne.n	801f650 <_dtoa_r+0x978>
 801f6e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f6e8:	2b30      	cmp	r3, #48	; 0x30
 801f6ea:	f106 32ff 	add.w	r2, r6, #4294967295
 801f6ee:	f47f af11 	bne.w	801f514 <_dtoa_r+0x83c>
 801f6f2:	4616      	mov	r6, r2
 801f6f4:	e7f6      	b.n	801f6e4 <_dtoa_r+0xa0c>
 801f6f6:	9b04      	ldr	r3, [sp, #16]
 801f6f8:	4293      	cmp	r3, r2
 801f6fa:	d105      	bne.n	801f708 <_dtoa_r+0xa30>
 801f6fc:	9a04      	ldr	r2, [sp, #16]
 801f6fe:	f10b 0b01 	add.w	fp, fp, #1
 801f702:	2331      	movs	r3, #49	; 0x31
 801f704:	7013      	strb	r3, [r2, #0]
 801f706:	e705      	b.n	801f514 <_dtoa_r+0x83c>
 801f708:	4616      	mov	r6, r2
 801f70a:	e7a1      	b.n	801f650 <_dtoa_r+0x978>
 801f70c:	4b16      	ldr	r3, [pc, #88]	; (801f768 <_dtoa_r+0xa90>)
 801f70e:	f7ff bb48 	b.w	801eda2 <_dtoa_r+0xca>
 801f712:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f714:	2b00      	cmp	r3, #0
 801f716:	f47f ab23 	bne.w	801ed60 <_dtoa_r+0x88>
 801f71a:	4b14      	ldr	r3, [pc, #80]	; (801f76c <_dtoa_r+0xa94>)
 801f71c:	f7ff bb41 	b.w	801eda2 <_dtoa_r+0xca>
 801f720:	9b08      	ldr	r3, [sp, #32]
 801f722:	2b01      	cmp	r3, #1
 801f724:	f77f ae3b 	ble.w	801f39e <_dtoa_r+0x6c6>
 801f728:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801f72c:	e64f      	b.n	801f3ce <_dtoa_r+0x6f6>
 801f72e:	9b06      	ldr	r3, [sp, #24]
 801f730:	2b00      	cmp	r3, #0
 801f732:	dc03      	bgt.n	801f73c <_dtoa_r+0xa64>
 801f734:	9b08      	ldr	r3, [sp, #32]
 801f736:	2b02      	cmp	r3, #2
 801f738:	f73f aed7 	bgt.w	801f4ea <_dtoa_r+0x812>
 801f73c:	9e04      	ldr	r6, [sp, #16]
 801f73e:	9801      	ldr	r0, [sp, #4]
 801f740:	4629      	mov	r1, r5
 801f742:	f7ff fa3b 	bl	801ebbc <quorem>
 801f746:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801f74a:	f806 8b01 	strb.w	r8, [r6], #1
 801f74e:	9b04      	ldr	r3, [sp, #16]
 801f750:	9a06      	ldr	r2, [sp, #24]
 801f752:	1af3      	subs	r3, r6, r3
 801f754:	429a      	cmp	r2, r3
 801f756:	ddb4      	ble.n	801f6c2 <_dtoa_r+0x9ea>
 801f758:	2300      	movs	r3, #0
 801f75a:	220a      	movs	r2, #10
 801f75c:	9901      	ldr	r1, [sp, #4]
 801f75e:	4620      	mov	r0, r4
 801f760:	f000 f877 	bl	801f852 <__multadd>
 801f764:	9001      	str	r0, [sp, #4]
 801f766:	e7ea      	b.n	801f73e <_dtoa_r+0xa66>
 801f768:	0802335c 	.word	0x0802335c
 801f76c:	08023380 	.word	0x08023380

0801f770 <__locale_ctype_ptr_l>:
 801f770:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801f774:	4770      	bx	lr
	...

0801f778 <_localeconv_r>:
 801f778:	4b04      	ldr	r3, [pc, #16]	; (801f78c <_localeconv_r+0x14>)
 801f77a:	681b      	ldr	r3, [r3, #0]
 801f77c:	6a18      	ldr	r0, [r3, #32]
 801f77e:	4b04      	ldr	r3, [pc, #16]	; (801f790 <_localeconv_r+0x18>)
 801f780:	2800      	cmp	r0, #0
 801f782:	bf08      	it	eq
 801f784:	4618      	moveq	r0, r3
 801f786:	30f0      	adds	r0, #240	; 0xf0
 801f788:	4770      	bx	lr
 801f78a:	bf00      	nop
 801f78c:	2000009c 	.word	0x2000009c
 801f790:	20000100 	.word	0x20000100

0801f794 <__ascii_mbtowc>:
 801f794:	b082      	sub	sp, #8
 801f796:	b901      	cbnz	r1, 801f79a <__ascii_mbtowc+0x6>
 801f798:	a901      	add	r1, sp, #4
 801f79a:	b142      	cbz	r2, 801f7ae <__ascii_mbtowc+0x1a>
 801f79c:	b14b      	cbz	r3, 801f7b2 <__ascii_mbtowc+0x1e>
 801f79e:	7813      	ldrb	r3, [r2, #0]
 801f7a0:	600b      	str	r3, [r1, #0]
 801f7a2:	7812      	ldrb	r2, [r2, #0]
 801f7a4:	1c10      	adds	r0, r2, #0
 801f7a6:	bf18      	it	ne
 801f7a8:	2001      	movne	r0, #1
 801f7aa:	b002      	add	sp, #8
 801f7ac:	4770      	bx	lr
 801f7ae:	4610      	mov	r0, r2
 801f7b0:	e7fb      	b.n	801f7aa <__ascii_mbtowc+0x16>
 801f7b2:	f06f 0001 	mvn.w	r0, #1
 801f7b6:	e7f8      	b.n	801f7aa <__ascii_mbtowc+0x16>

0801f7b8 <__malloc_lock>:
 801f7b8:	4770      	bx	lr

0801f7ba <__malloc_unlock>:
 801f7ba:	4770      	bx	lr

0801f7bc <_Balloc>:
 801f7bc:	b570      	push	{r4, r5, r6, lr}
 801f7be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801f7c0:	4604      	mov	r4, r0
 801f7c2:	460e      	mov	r6, r1
 801f7c4:	b93d      	cbnz	r5, 801f7d6 <_Balloc+0x1a>
 801f7c6:	2010      	movs	r0, #16
 801f7c8:	f7fe fc30 	bl	801e02c <malloc>
 801f7cc:	6260      	str	r0, [r4, #36]	; 0x24
 801f7ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801f7d2:	6005      	str	r5, [r0, #0]
 801f7d4:	60c5      	str	r5, [r0, #12]
 801f7d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801f7d8:	68eb      	ldr	r3, [r5, #12]
 801f7da:	b183      	cbz	r3, 801f7fe <_Balloc+0x42>
 801f7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f7de:	68db      	ldr	r3, [r3, #12]
 801f7e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f7e4:	b9b8      	cbnz	r0, 801f816 <_Balloc+0x5a>
 801f7e6:	2101      	movs	r1, #1
 801f7e8:	fa01 f506 	lsl.w	r5, r1, r6
 801f7ec:	1d6a      	adds	r2, r5, #5
 801f7ee:	0092      	lsls	r2, r2, #2
 801f7f0:	4620      	mov	r0, r4
 801f7f2:	f000 fabf 	bl	801fd74 <_calloc_r>
 801f7f6:	b160      	cbz	r0, 801f812 <_Balloc+0x56>
 801f7f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801f7fc:	e00e      	b.n	801f81c <_Balloc+0x60>
 801f7fe:	2221      	movs	r2, #33	; 0x21
 801f800:	2104      	movs	r1, #4
 801f802:	4620      	mov	r0, r4
 801f804:	f000 fab6 	bl	801fd74 <_calloc_r>
 801f808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f80a:	60e8      	str	r0, [r5, #12]
 801f80c:	68db      	ldr	r3, [r3, #12]
 801f80e:	2b00      	cmp	r3, #0
 801f810:	d1e4      	bne.n	801f7dc <_Balloc+0x20>
 801f812:	2000      	movs	r0, #0
 801f814:	bd70      	pop	{r4, r5, r6, pc}
 801f816:	6802      	ldr	r2, [r0, #0]
 801f818:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801f81c:	2300      	movs	r3, #0
 801f81e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f822:	e7f7      	b.n	801f814 <_Balloc+0x58>

0801f824 <_Bfree>:
 801f824:	b570      	push	{r4, r5, r6, lr}
 801f826:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801f828:	4606      	mov	r6, r0
 801f82a:	460d      	mov	r5, r1
 801f82c:	b93c      	cbnz	r4, 801f83e <_Bfree+0x1a>
 801f82e:	2010      	movs	r0, #16
 801f830:	f7fe fbfc 	bl	801e02c <malloc>
 801f834:	6270      	str	r0, [r6, #36]	; 0x24
 801f836:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f83a:	6004      	str	r4, [r0, #0]
 801f83c:	60c4      	str	r4, [r0, #12]
 801f83e:	b13d      	cbz	r5, 801f850 <_Bfree+0x2c>
 801f840:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801f842:	686a      	ldr	r2, [r5, #4]
 801f844:	68db      	ldr	r3, [r3, #12]
 801f846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f84a:	6029      	str	r1, [r5, #0]
 801f84c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801f850:	bd70      	pop	{r4, r5, r6, pc}

0801f852 <__multadd>:
 801f852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f856:	690d      	ldr	r5, [r1, #16]
 801f858:	461f      	mov	r7, r3
 801f85a:	4606      	mov	r6, r0
 801f85c:	460c      	mov	r4, r1
 801f85e:	f101 0c14 	add.w	ip, r1, #20
 801f862:	2300      	movs	r3, #0
 801f864:	f8dc 0000 	ldr.w	r0, [ip]
 801f868:	b281      	uxth	r1, r0
 801f86a:	fb02 7101 	mla	r1, r2, r1, r7
 801f86e:	0c0f      	lsrs	r7, r1, #16
 801f870:	0c00      	lsrs	r0, r0, #16
 801f872:	fb02 7000 	mla	r0, r2, r0, r7
 801f876:	b289      	uxth	r1, r1
 801f878:	3301      	adds	r3, #1
 801f87a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801f87e:	429d      	cmp	r5, r3
 801f880:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801f884:	f84c 1b04 	str.w	r1, [ip], #4
 801f888:	dcec      	bgt.n	801f864 <__multadd+0x12>
 801f88a:	b1d7      	cbz	r7, 801f8c2 <__multadd+0x70>
 801f88c:	68a3      	ldr	r3, [r4, #8]
 801f88e:	42ab      	cmp	r3, r5
 801f890:	dc12      	bgt.n	801f8b8 <__multadd+0x66>
 801f892:	6861      	ldr	r1, [r4, #4]
 801f894:	4630      	mov	r0, r6
 801f896:	3101      	adds	r1, #1
 801f898:	f7ff ff90 	bl	801f7bc <_Balloc>
 801f89c:	6922      	ldr	r2, [r4, #16]
 801f89e:	3202      	adds	r2, #2
 801f8a0:	f104 010c 	add.w	r1, r4, #12
 801f8a4:	4680      	mov	r8, r0
 801f8a6:	0092      	lsls	r2, r2, #2
 801f8a8:	300c      	adds	r0, #12
 801f8aa:	f7fe fbcf 	bl	801e04c <memcpy>
 801f8ae:	4621      	mov	r1, r4
 801f8b0:	4630      	mov	r0, r6
 801f8b2:	f7ff ffb7 	bl	801f824 <_Bfree>
 801f8b6:	4644      	mov	r4, r8
 801f8b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f8bc:	3501      	adds	r5, #1
 801f8be:	615f      	str	r7, [r3, #20]
 801f8c0:	6125      	str	r5, [r4, #16]
 801f8c2:	4620      	mov	r0, r4
 801f8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f8c8 <__hi0bits>:
 801f8c8:	0c02      	lsrs	r2, r0, #16
 801f8ca:	0412      	lsls	r2, r2, #16
 801f8cc:	4603      	mov	r3, r0
 801f8ce:	b9b2      	cbnz	r2, 801f8fe <__hi0bits+0x36>
 801f8d0:	0403      	lsls	r3, r0, #16
 801f8d2:	2010      	movs	r0, #16
 801f8d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801f8d8:	bf04      	itt	eq
 801f8da:	021b      	lsleq	r3, r3, #8
 801f8dc:	3008      	addeq	r0, #8
 801f8de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801f8e2:	bf04      	itt	eq
 801f8e4:	011b      	lsleq	r3, r3, #4
 801f8e6:	3004      	addeq	r0, #4
 801f8e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801f8ec:	bf04      	itt	eq
 801f8ee:	009b      	lsleq	r3, r3, #2
 801f8f0:	3002      	addeq	r0, #2
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	db06      	blt.n	801f904 <__hi0bits+0x3c>
 801f8f6:	005b      	lsls	r3, r3, #1
 801f8f8:	d503      	bpl.n	801f902 <__hi0bits+0x3a>
 801f8fa:	3001      	adds	r0, #1
 801f8fc:	4770      	bx	lr
 801f8fe:	2000      	movs	r0, #0
 801f900:	e7e8      	b.n	801f8d4 <__hi0bits+0xc>
 801f902:	2020      	movs	r0, #32
 801f904:	4770      	bx	lr

0801f906 <__lo0bits>:
 801f906:	6803      	ldr	r3, [r0, #0]
 801f908:	f013 0207 	ands.w	r2, r3, #7
 801f90c:	4601      	mov	r1, r0
 801f90e:	d00b      	beq.n	801f928 <__lo0bits+0x22>
 801f910:	07da      	lsls	r2, r3, #31
 801f912:	d423      	bmi.n	801f95c <__lo0bits+0x56>
 801f914:	0798      	lsls	r0, r3, #30
 801f916:	bf49      	itett	mi
 801f918:	085b      	lsrmi	r3, r3, #1
 801f91a:	089b      	lsrpl	r3, r3, #2
 801f91c:	2001      	movmi	r0, #1
 801f91e:	600b      	strmi	r3, [r1, #0]
 801f920:	bf5c      	itt	pl
 801f922:	600b      	strpl	r3, [r1, #0]
 801f924:	2002      	movpl	r0, #2
 801f926:	4770      	bx	lr
 801f928:	b298      	uxth	r0, r3
 801f92a:	b9a8      	cbnz	r0, 801f958 <__lo0bits+0x52>
 801f92c:	0c1b      	lsrs	r3, r3, #16
 801f92e:	2010      	movs	r0, #16
 801f930:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f934:	bf04      	itt	eq
 801f936:	0a1b      	lsreq	r3, r3, #8
 801f938:	3008      	addeq	r0, #8
 801f93a:	071a      	lsls	r2, r3, #28
 801f93c:	bf04      	itt	eq
 801f93e:	091b      	lsreq	r3, r3, #4
 801f940:	3004      	addeq	r0, #4
 801f942:	079a      	lsls	r2, r3, #30
 801f944:	bf04      	itt	eq
 801f946:	089b      	lsreq	r3, r3, #2
 801f948:	3002      	addeq	r0, #2
 801f94a:	07da      	lsls	r2, r3, #31
 801f94c:	d402      	bmi.n	801f954 <__lo0bits+0x4e>
 801f94e:	085b      	lsrs	r3, r3, #1
 801f950:	d006      	beq.n	801f960 <__lo0bits+0x5a>
 801f952:	3001      	adds	r0, #1
 801f954:	600b      	str	r3, [r1, #0]
 801f956:	4770      	bx	lr
 801f958:	4610      	mov	r0, r2
 801f95a:	e7e9      	b.n	801f930 <__lo0bits+0x2a>
 801f95c:	2000      	movs	r0, #0
 801f95e:	4770      	bx	lr
 801f960:	2020      	movs	r0, #32
 801f962:	4770      	bx	lr

0801f964 <__i2b>:
 801f964:	b510      	push	{r4, lr}
 801f966:	460c      	mov	r4, r1
 801f968:	2101      	movs	r1, #1
 801f96a:	f7ff ff27 	bl	801f7bc <_Balloc>
 801f96e:	2201      	movs	r2, #1
 801f970:	6144      	str	r4, [r0, #20]
 801f972:	6102      	str	r2, [r0, #16]
 801f974:	bd10      	pop	{r4, pc}

0801f976 <__multiply>:
 801f976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f97a:	4614      	mov	r4, r2
 801f97c:	690a      	ldr	r2, [r1, #16]
 801f97e:	6923      	ldr	r3, [r4, #16]
 801f980:	429a      	cmp	r2, r3
 801f982:	bfb8      	it	lt
 801f984:	460b      	movlt	r3, r1
 801f986:	4688      	mov	r8, r1
 801f988:	bfbc      	itt	lt
 801f98a:	46a0      	movlt	r8, r4
 801f98c:	461c      	movlt	r4, r3
 801f98e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f992:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f996:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f99a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f99e:	eb07 0609 	add.w	r6, r7, r9
 801f9a2:	42b3      	cmp	r3, r6
 801f9a4:	bfb8      	it	lt
 801f9a6:	3101      	addlt	r1, #1
 801f9a8:	f7ff ff08 	bl	801f7bc <_Balloc>
 801f9ac:	f100 0514 	add.w	r5, r0, #20
 801f9b0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801f9b4:	462b      	mov	r3, r5
 801f9b6:	2200      	movs	r2, #0
 801f9b8:	4573      	cmp	r3, lr
 801f9ba:	d316      	bcc.n	801f9ea <__multiply+0x74>
 801f9bc:	f104 0214 	add.w	r2, r4, #20
 801f9c0:	f108 0114 	add.w	r1, r8, #20
 801f9c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801f9c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801f9cc:	9300      	str	r3, [sp, #0]
 801f9ce:	9b00      	ldr	r3, [sp, #0]
 801f9d0:	9201      	str	r2, [sp, #4]
 801f9d2:	4293      	cmp	r3, r2
 801f9d4:	d80c      	bhi.n	801f9f0 <__multiply+0x7a>
 801f9d6:	2e00      	cmp	r6, #0
 801f9d8:	dd03      	ble.n	801f9e2 <__multiply+0x6c>
 801f9da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d05d      	beq.n	801fa9e <__multiply+0x128>
 801f9e2:	6106      	str	r6, [r0, #16]
 801f9e4:	b003      	add	sp, #12
 801f9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9ea:	f843 2b04 	str.w	r2, [r3], #4
 801f9ee:	e7e3      	b.n	801f9b8 <__multiply+0x42>
 801f9f0:	f8b2 b000 	ldrh.w	fp, [r2]
 801f9f4:	f1bb 0f00 	cmp.w	fp, #0
 801f9f8:	d023      	beq.n	801fa42 <__multiply+0xcc>
 801f9fa:	4689      	mov	r9, r1
 801f9fc:	46ac      	mov	ip, r5
 801f9fe:	f04f 0800 	mov.w	r8, #0
 801fa02:	f859 4b04 	ldr.w	r4, [r9], #4
 801fa06:	f8dc a000 	ldr.w	sl, [ip]
 801fa0a:	b2a3      	uxth	r3, r4
 801fa0c:	fa1f fa8a 	uxth.w	sl, sl
 801fa10:	fb0b a303 	mla	r3, fp, r3, sl
 801fa14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801fa18:	f8dc 4000 	ldr.w	r4, [ip]
 801fa1c:	4443      	add	r3, r8
 801fa1e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801fa22:	fb0b 840a 	mla	r4, fp, sl, r8
 801fa26:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801fa2a:	46e2      	mov	sl, ip
 801fa2c:	b29b      	uxth	r3, r3
 801fa2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801fa32:	454f      	cmp	r7, r9
 801fa34:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801fa38:	f84a 3b04 	str.w	r3, [sl], #4
 801fa3c:	d82b      	bhi.n	801fa96 <__multiply+0x120>
 801fa3e:	f8cc 8004 	str.w	r8, [ip, #4]
 801fa42:	9b01      	ldr	r3, [sp, #4]
 801fa44:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801fa48:	3204      	adds	r2, #4
 801fa4a:	f1ba 0f00 	cmp.w	sl, #0
 801fa4e:	d020      	beq.n	801fa92 <__multiply+0x11c>
 801fa50:	682b      	ldr	r3, [r5, #0]
 801fa52:	4689      	mov	r9, r1
 801fa54:	46a8      	mov	r8, r5
 801fa56:	f04f 0b00 	mov.w	fp, #0
 801fa5a:	f8b9 c000 	ldrh.w	ip, [r9]
 801fa5e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801fa62:	fb0a 440c 	mla	r4, sl, ip, r4
 801fa66:	445c      	add	r4, fp
 801fa68:	46c4      	mov	ip, r8
 801fa6a:	b29b      	uxth	r3, r3
 801fa6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801fa70:	f84c 3b04 	str.w	r3, [ip], #4
 801fa74:	f859 3b04 	ldr.w	r3, [r9], #4
 801fa78:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801fa7c:	0c1b      	lsrs	r3, r3, #16
 801fa7e:	fb0a b303 	mla	r3, sl, r3, fp
 801fa82:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801fa86:	454f      	cmp	r7, r9
 801fa88:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801fa8c:	d805      	bhi.n	801fa9a <__multiply+0x124>
 801fa8e:	f8c8 3004 	str.w	r3, [r8, #4]
 801fa92:	3504      	adds	r5, #4
 801fa94:	e79b      	b.n	801f9ce <__multiply+0x58>
 801fa96:	46d4      	mov	ip, sl
 801fa98:	e7b3      	b.n	801fa02 <__multiply+0x8c>
 801fa9a:	46e0      	mov	r8, ip
 801fa9c:	e7dd      	b.n	801fa5a <__multiply+0xe4>
 801fa9e:	3e01      	subs	r6, #1
 801faa0:	e799      	b.n	801f9d6 <__multiply+0x60>
	...

0801faa4 <__pow5mult>:
 801faa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801faa8:	4615      	mov	r5, r2
 801faaa:	f012 0203 	ands.w	r2, r2, #3
 801faae:	4606      	mov	r6, r0
 801fab0:	460f      	mov	r7, r1
 801fab2:	d007      	beq.n	801fac4 <__pow5mult+0x20>
 801fab4:	3a01      	subs	r2, #1
 801fab6:	4c21      	ldr	r4, [pc, #132]	; (801fb3c <__pow5mult+0x98>)
 801fab8:	2300      	movs	r3, #0
 801faba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fabe:	f7ff fec8 	bl	801f852 <__multadd>
 801fac2:	4607      	mov	r7, r0
 801fac4:	10ad      	asrs	r5, r5, #2
 801fac6:	d035      	beq.n	801fb34 <__pow5mult+0x90>
 801fac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801faca:	b93c      	cbnz	r4, 801fadc <__pow5mult+0x38>
 801facc:	2010      	movs	r0, #16
 801face:	f7fe faad 	bl	801e02c <malloc>
 801fad2:	6270      	str	r0, [r6, #36]	; 0x24
 801fad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fad8:	6004      	str	r4, [r0, #0]
 801fada:	60c4      	str	r4, [r0, #12]
 801fadc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801fae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fae4:	b94c      	cbnz	r4, 801fafa <__pow5mult+0x56>
 801fae6:	f240 2171 	movw	r1, #625	; 0x271
 801faea:	4630      	mov	r0, r6
 801faec:	f7ff ff3a 	bl	801f964 <__i2b>
 801faf0:	2300      	movs	r3, #0
 801faf2:	f8c8 0008 	str.w	r0, [r8, #8]
 801faf6:	4604      	mov	r4, r0
 801faf8:	6003      	str	r3, [r0, #0]
 801fafa:	f04f 0800 	mov.w	r8, #0
 801fafe:	07eb      	lsls	r3, r5, #31
 801fb00:	d50a      	bpl.n	801fb18 <__pow5mult+0x74>
 801fb02:	4639      	mov	r1, r7
 801fb04:	4622      	mov	r2, r4
 801fb06:	4630      	mov	r0, r6
 801fb08:	f7ff ff35 	bl	801f976 <__multiply>
 801fb0c:	4639      	mov	r1, r7
 801fb0e:	4681      	mov	r9, r0
 801fb10:	4630      	mov	r0, r6
 801fb12:	f7ff fe87 	bl	801f824 <_Bfree>
 801fb16:	464f      	mov	r7, r9
 801fb18:	106d      	asrs	r5, r5, #1
 801fb1a:	d00b      	beq.n	801fb34 <__pow5mult+0x90>
 801fb1c:	6820      	ldr	r0, [r4, #0]
 801fb1e:	b938      	cbnz	r0, 801fb30 <__pow5mult+0x8c>
 801fb20:	4622      	mov	r2, r4
 801fb22:	4621      	mov	r1, r4
 801fb24:	4630      	mov	r0, r6
 801fb26:	f7ff ff26 	bl	801f976 <__multiply>
 801fb2a:	6020      	str	r0, [r4, #0]
 801fb2c:	f8c0 8000 	str.w	r8, [r0]
 801fb30:	4604      	mov	r4, r0
 801fb32:	e7e4      	b.n	801fafe <__pow5mult+0x5a>
 801fb34:	4638      	mov	r0, r7
 801fb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb3a:	bf00      	nop
 801fb3c:	080234f0 	.word	0x080234f0

0801fb40 <__lshift>:
 801fb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fb44:	460c      	mov	r4, r1
 801fb46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fb4a:	6923      	ldr	r3, [r4, #16]
 801fb4c:	6849      	ldr	r1, [r1, #4]
 801fb4e:	eb0a 0903 	add.w	r9, sl, r3
 801fb52:	68a3      	ldr	r3, [r4, #8]
 801fb54:	4607      	mov	r7, r0
 801fb56:	4616      	mov	r6, r2
 801fb58:	f109 0501 	add.w	r5, r9, #1
 801fb5c:	42ab      	cmp	r3, r5
 801fb5e:	db32      	blt.n	801fbc6 <__lshift+0x86>
 801fb60:	4638      	mov	r0, r7
 801fb62:	f7ff fe2b 	bl	801f7bc <_Balloc>
 801fb66:	2300      	movs	r3, #0
 801fb68:	4680      	mov	r8, r0
 801fb6a:	f100 0114 	add.w	r1, r0, #20
 801fb6e:	461a      	mov	r2, r3
 801fb70:	4553      	cmp	r3, sl
 801fb72:	db2b      	blt.n	801fbcc <__lshift+0x8c>
 801fb74:	6920      	ldr	r0, [r4, #16]
 801fb76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fb7a:	f104 0314 	add.w	r3, r4, #20
 801fb7e:	f016 021f 	ands.w	r2, r6, #31
 801fb82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fb86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fb8a:	d025      	beq.n	801fbd8 <__lshift+0x98>
 801fb8c:	f1c2 0e20 	rsb	lr, r2, #32
 801fb90:	2000      	movs	r0, #0
 801fb92:	681e      	ldr	r6, [r3, #0]
 801fb94:	468a      	mov	sl, r1
 801fb96:	4096      	lsls	r6, r2
 801fb98:	4330      	orrs	r0, r6
 801fb9a:	f84a 0b04 	str.w	r0, [sl], #4
 801fb9e:	f853 0b04 	ldr.w	r0, [r3], #4
 801fba2:	459c      	cmp	ip, r3
 801fba4:	fa20 f00e 	lsr.w	r0, r0, lr
 801fba8:	d814      	bhi.n	801fbd4 <__lshift+0x94>
 801fbaa:	6048      	str	r0, [r1, #4]
 801fbac:	b108      	cbz	r0, 801fbb2 <__lshift+0x72>
 801fbae:	f109 0502 	add.w	r5, r9, #2
 801fbb2:	3d01      	subs	r5, #1
 801fbb4:	4638      	mov	r0, r7
 801fbb6:	f8c8 5010 	str.w	r5, [r8, #16]
 801fbba:	4621      	mov	r1, r4
 801fbbc:	f7ff fe32 	bl	801f824 <_Bfree>
 801fbc0:	4640      	mov	r0, r8
 801fbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbc6:	3101      	adds	r1, #1
 801fbc8:	005b      	lsls	r3, r3, #1
 801fbca:	e7c7      	b.n	801fb5c <__lshift+0x1c>
 801fbcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801fbd0:	3301      	adds	r3, #1
 801fbd2:	e7cd      	b.n	801fb70 <__lshift+0x30>
 801fbd4:	4651      	mov	r1, sl
 801fbd6:	e7dc      	b.n	801fb92 <__lshift+0x52>
 801fbd8:	3904      	subs	r1, #4
 801fbda:	f853 2b04 	ldr.w	r2, [r3], #4
 801fbde:	f841 2f04 	str.w	r2, [r1, #4]!
 801fbe2:	459c      	cmp	ip, r3
 801fbe4:	d8f9      	bhi.n	801fbda <__lshift+0x9a>
 801fbe6:	e7e4      	b.n	801fbb2 <__lshift+0x72>

0801fbe8 <__mcmp>:
 801fbe8:	6903      	ldr	r3, [r0, #16]
 801fbea:	690a      	ldr	r2, [r1, #16]
 801fbec:	1a9b      	subs	r3, r3, r2
 801fbee:	b530      	push	{r4, r5, lr}
 801fbf0:	d10c      	bne.n	801fc0c <__mcmp+0x24>
 801fbf2:	0092      	lsls	r2, r2, #2
 801fbf4:	3014      	adds	r0, #20
 801fbf6:	3114      	adds	r1, #20
 801fbf8:	1884      	adds	r4, r0, r2
 801fbfa:	4411      	add	r1, r2
 801fbfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801fc00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801fc04:	4295      	cmp	r5, r2
 801fc06:	d003      	beq.n	801fc10 <__mcmp+0x28>
 801fc08:	d305      	bcc.n	801fc16 <__mcmp+0x2e>
 801fc0a:	2301      	movs	r3, #1
 801fc0c:	4618      	mov	r0, r3
 801fc0e:	bd30      	pop	{r4, r5, pc}
 801fc10:	42a0      	cmp	r0, r4
 801fc12:	d3f3      	bcc.n	801fbfc <__mcmp+0x14>
 801fc14:	e7fa      	b.n	801fc0c <__mcmp+0x24>
 801fc16:	f04f 33ff 	mov.w	r3, #4294967295
 801fc1a:	e7f7      	b.n	801fc0c <__mcmp+0x24>

0801fc1c <__mdiff>:
 801fc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc20:	460d      	mov	r5, r1
 801fc22:	4607      	mov	r7, r0
 801fc24:	4611      	mov	r1, r2
 801fc26:	4628      	mov	r0, r5
 801fc28:	4614      	mov	r4, r2
 801fc2a:	f7ff ffdd 	bl	801fbe8 <__mcmp>
 801fc2e:	1e06      	subs	r6, r0, #0
 801fc30:	d108      	bne.n	801fc44 <__mdiff+0x28>
 801fc32:	4631      	mov	r1, r6
 801fc34:	4638      	mov	r0, r7
 801fc36:	f7ff fdc1 	bl	801f7bc <_Balloc>
 801fc3a:	2301      	movs	r3, #1
 801fc3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801fc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc44:	bfa4      	itt	ge
 801fc46:	4623      	movge	r3, r4
 801fc48:	462c      	movge	r4, r5
 801fc4a:	4638      	mov	r0, r7
 801fc4c:	6861      	ldr	r1, [r4, #4]
 801fc4e:	bfa6      	itte	ge
 801fc50:	461d      	movge	r5, r3
 801fc52:	2600      	movge	r6, #0
 801fc54:	2601      	movlt	r6, #1
 801fc56:	f7ff fdb1 	bl	801f7bc <_Balloc>
 801fc5a:	692b      	ldr	r3, [r5, #16]
 801fc5c:	60c6      	str	r6, [r0, #12]
 801fc5e:	6926      	ldr	r6, [r4, #16]
 801fc60:	f105 0914 	add.w	r9, r5, #20
 801fc64:	f104 0214 	add.w	r2, r4, #20
 801fc68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801fc6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801fc70:	f100 0514 	add.w	r5, r0, #20
 801fc74:	f04f 0e00 	mov.w	lr, #0
 801fc78:	f852 ab04 	ldr.w	sl, [r2], #4
 801fc7c:	f859 4b04 	ldr.w	r4, [r9], #4
 801fc80:	fa1e f18a 	uxtah	r1, lr, sl
 801fc84:	b2a3      	uxth	r3, r4
 801fc86:	1ac9      	subs	r1, r1, r3
 801fc88:	0c23      	lsrs	r3, r4, #16
 801fc8a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801fc8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801fc92:	b289      	uxth	r1, r1
 801fc94:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801fc98:	45c8      	cmp	r8, r9
 801fc9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801fc9e:	4694      	mov	ip, r2
 801fca0:	f845 3b04 	str.w	r3, [r5], #4
 801fca4:	d8e8      	bhi.n	801fc78 <__mdiff+0x5c>
 801fca6:	45bc      	cmp	ip, r7
 801fca8:	d304      	bcc.n	801fcb4 <__mdiff+0x98>
 801fcaa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801fcae:	b183      	cbz	r3, 801fcd2 <__mdiff+0xb6>
 801fcb0:	6106      	str	r6, [r0, #16]
 801fcb2:	e7c5      	b.n	801fc40 <__mdiff+0x24>
 801fcb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 801fcb8:	fa1e f381 	uxtah	r3, lr, r1
 801fcbc:	141a      	asrs	r2, r3, #16
 801fcbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801fcc2:	b29b      	uxth	r3, r3
 801fcc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fcc8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801fccc:	f845 3b04 	str.w	r3, [r5], #4
 801fcd0:	e7e9      	b.n	801fca6 <__mdiff+0x8a>
 801fcd2:	3e01      	subs	r6, #1
 801fcd4:	e7e9      	b.n	801fcaa <__mdiff+0x8e>

0801fcd6 <__d2b>:
 801fcd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fcda:	460e      	mov	r6, r1
 801fcdc:	2101      	movs	r1, #1
 801fcde:	ec59 8b10 	vmov	r8, r9, d0
 801fce2:	4615      	mov	r5, r2
 801fce4:	f7ff fd6a 	bl	801f7bc <_Balloc>
 801fce8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801fcec:	4607      	mov	r7, r0
 801fcee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fcf2:	bb34      	cbnz	r4, 801fd42 <__d2b+0x6c>
 801fcf4:	9301      	str	r3, [sp, #4]
 801fcf6:	f1b8 0300 	subs.w	r3, r8, #0
 801fcfa:	d027      	beq.n	801fd4c <__d2b+0x76>
 801fcfc:	a802      	add	r0, sp, #8
 801fcfe:	f840 3d08 	str.w	r3, [r0, #-8]!
 801fd02:	f7ff fe00 	bl	801f906 <__lo0bits>
 801fd06:	9900      	ldr	r1, [sp, #0]
 801fd08:	b1f0      	cbz	r0, 801fd48 <__d2b+0x72>
 801fd0a:	9a01      	ldr	r2, [sp, #4]
 801fd0c:	f1c0 0320 	rsb	r3, r0, #32
 801fd10:	fa02 f303 	lsl.w	r3, r2, r3
 801fd14:	430b      	orrs	r3, r1
 801fd16:	40c2      	lsrs	r2, r0
 801fd18:	617b      	str	r3, [r7, #20]
 801fd1a:	9201      	str	r2, [sp, #4]
 801fd1c:	9b01      	ldr	r3, [sp, #4]
 801fd1e:	61bb      	str	r3, [r7, #24]
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	bf14      	ite	ne
 801fd24:	2102      	movne	r1, #2
 801fd26:	2101      	moveq	r1, #1
 801fd28:	6139      	str	r1, [r7, #16]
 801fd2a:	b1c4      	cbz	r4, 801fd5e <__d2b+0x88>
 801fd2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801fd30:	4404      	add	r4, r0
 801fd32:	6034      	str	r4, [r6, #0]
 801fd34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fd38:	6028      	str	r0, [r5, #0]
 801fd3a:	4638      	mov	r0, r7
 801fd3c:	b003      	add	sp, #12
 801fd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fd42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fd46:	e7d5      	b.n	801fcf4 <__d2b+0x1e>
 801fd48:	6179      	str	r1, [r7, #20]
 801fd4a:	e7e7      	b.n	801fd1c <__d2b+0x46>
 801fd4c:	a801      	add	r0, sp, #4
 801fd4e:	f7ff fdda 	bl	801f906 <__lo0bits>
 801fd52:	9b01      	ldr	r3, [sp, #4]
 801fd54:	617b      	str	r3, [r7, #20]
 801fd56:	2101      	movs	r1, #1
 801fd58:	6139      	str	r1, [r7, #16]
 801fd5a:	3020      	adds	r0, #32
 801fd5c:	e7e5      	b.n	801fd2a <__d2b+0x54>
 801fd5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801fd62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801fd66:	6030      	str	r0, [r6, #0]
 801fd68:	6918      	ldr	r0, [r3, #16]
 801fd6a:	f7ff fdad 	bl	801f8c8 <__hi0bits>
 801fd6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801fd72:	e7e1      	b.n	801fd38 <__d2b+0x62>

0801fd74 <_calloc_r>:
 801fd74:	b538      	push	{r3, r4, r5, lr}
 801fd76:	fb02 f401 	mul.w	r4, r2, r1
 801fd7a:	4621      	mov	r1, r4
 801fd7c:	f7fe f9c8 	bl	801e110 <_malloc_r>
 801fd80:	4605      	mov	r5, r0
 801fd82:	b118      	cbz	r0, 801fd8c <_calloc_r+0x18>
 801fd84:	4622      	mov	r2, r4
 801fd86:	2100      	movs	r1, #0
 801fd88:	f7fe f96b 	bl	801e062 <memset>
 801fd8c:	4628      	mov	r0, r5
 801fd8e:	bd38      	pop	{r3, r4, r5, pc}

0801fd90 <__ssputs_r>:
 801fd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd94:	688e      	ldr	r6, [r1, #8]
 801fd96:	429e      	cmp	r6, r3
 801fd98:	4682      	mov	sl, r0
 801fd9a:	460c      	mov	r4, r1
 801fd9c:	4690      	mov	r8, r2
 801fd9e:	4699      	mov	r9, r3
 801fda0:	d837      	bhi.n	801fe12 <__ssputs_r+0x82>
 801fda2:	898a      	ldrh	r2, [r1, #12]
 801fda4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fda8:	d031      	beq.n	801fe0e <__ssputs_r+0x7e>
 801fdaa:	6825      	ldr	r5, [r4, #0]
 801fdac:	6909      	ldr	r1, [r1, #16]
 801fdae:	1a6f      	subs	r7, r5, r1
 801fdb0:	6965      	ldr	r5, [r4, #20]
 801fdb2:	2302      	movs	r3, #2
 801fdb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fdb8:	fb95 f5f3 	sdiv	r5, r5, r3
 801fdbc:	f109 0301 	add.w	r3, r9, #1
 801fdc0:	443b      	add	r3, r7
 801fdc2:	429d      	cmp	r5, r3
 801fdc4:	bf38      	it	cc
 801fdc6:	461d      	movcc	r5, r3
 801fdc8:	0553      	lsls	r3, r2, #21
 801fdca:	d530      	bpl.n	801fe2e <__ssputs_r+0x9e>
 801fdcc:	4629      	mov	r1, r5
 801fdce:	f7fe f99f 	bl	801e110 <_malloc_r>
 801fdd2:	4606      	mov	r6, r0
 801fdd4:	b950      	cbnz	r0, 801fdec <__ssputs_r+0x5c>
 801fdd6:	230c      	movs	r3, #12
 801fdd8:	f8ca 3000 	str.w	r3, [sl]
 801fddc:	89a3      	ldrh	r3, [r4, #12]
 801fdde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fde2:	81a3      	strh	r3, [r4, #12]
 801fde4:	f04f 30ff 	mov.w	r0, #4294967295
 801fde8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fdec:	463a      	mov	r2, r7
 801fdee:	6921      	ldr	r1, [r4, #16]
 801fdf0:	f7fe f92c 	bl	801e04c <memcpy>
 801fdf4:	89a3      	ldrh	r3, [r4, #12]
 801fdf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fdfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fdfe:	81a3      	strh	r3, [r4, #12]
 801fe00:	6126      	str	r6, [r4, #16]
 801fe02:	6165      	str	r5, [r4, #20]
 801fe04:	443e      	add	r6, r7
 801fe06:	1bed      	subs	r5, r5, r7
 801fe08:	6026      	str	r6, [r4, #0]
 801fe0a:	60a5      	str	r5, [r4, #8]
 801fe0c:	464e      	mov	r6, r9
 801fe0e:	454e      	cmp	r6, r9
 801fe10:	d900      	bls.n	801fe14 <__ssputs_r+0x84>
 801fe12:	464e      	mov	r6, r9
 801fe14:	4632      	mov	r2, r6
 801fe16:	4641      	mov	r1, r8
 801fe18:	6820      	ldr	r0, [r4, #0]
 801fe1a:	f000 f918 	bl	802004e <memmove>
 801fe1e:	68a3      	ldr	r3, [r4, #8]
 801fe20:	1b9b      	subs	r3, r3, r6
 801fe22:	60a3      	str	r3, [r4, #8]
 801fe24:	6823      	ldr	r3, [r4, #0]
 801fe26:	441e      	add	r6, r3
 801fe28:	6026      	str	r6, [r4, #0]
 801fe2a:	2000      	movs	r0, #0
 801fe2c:	e7dc      	b.n	801fde8 <__ssputs_r+0x58>
 801fe2e:	462a      	mov	r2, r5
 801fe30:	f000 f926 	bl	8020080 <_realloc_r>
 801fe34:	4606      	mov	r6, r0
 801fe36:	2800      	cmp	r0, #0
 801fe38:	d1e2      	bne.n	801fe00 <__ssputs_r+0x70>
 801fe3a:	6921      	ldr	r1, [r4, #16]
 801fe3c:	4650      	mov	r0, sl
 801fe3e:	f7fe f919 	bl	801e074 <_free_r>
 801fe42:	e7c8      	b.n	801fdd6 <__ssputs_r+0x46>

0801fe44 <_svfiprintf_r>:
 801fe44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe48:	461d      	mov	r5, r3
 801fe4a:	898b      	ldrh	r3, [r1, #12]
 801fe4c:	061f      	lsls	r7, r3, #24
 801fe4e:	b09d      	sub	sp, #116	; 0x74
 801fe50:	4680      	mov	r8, r0
 801fe52:	460c      	mov	r4, r1
 801fe54:	4616      	mov	r6, r2
 801fe56:	d50f      	bpl.n	801fe78 <_svfiprintf_r+0x34>
 801fe58:	690b      	ldr	r3, [r1, #16]
 801fe5a:	b96b      	cbnz	r3, 801fe78 <_svfiprintf_r+0x34>
 801fe5c:	2140      	movs	r1, #64	; 0x40
 801fe5e:	f7fe f957 	bl	801e110 <_malloc_r>
 801fe62:	6020      	str	r0, [r4, #0]
 801fe64:	6120      	str	r0, [r4, #16]
 801fe66:	b928      	cbnz	r0, 801fe74 <_svfiprintf_r+0x30>
 801fe68:	230c      	movs	r3, #12
 801fe6a:	f8c8 3000 	str.w	r3, [r8]
 801fe6e:	f04f 30ff 	mov.w	r0, #4294967295
 801fe72:	e0c8      	b.n	8020006 <_svfiprintf_r+0x1c2>
 801fe74:	2340      	movs	r3, #64	; 0x40
 801fe76:	6163      	str	r3, [r4, #20]
 801fe78:	2300      	movs	r3, #0
 801fe7a:	9309      	str	r3, [sp, #36]	; 0x24
 801fe7c:	2320      	movs	r3, #32
 801fe7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fe82:	2330      	movs	r3, #48	; 0x30
 801fe84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fe88:	9503      	str	r5, [sp, #12]
 801fe8a:	f04f 0b01 	mov.w	fp, #1
 801fe8e:	4637      	mov	r7, r6
 801fe90:	463d      	mov	r5, r7
 801fe92:	f815 3b01 	ldrb.w	r3, [r5], #1
 801fe96:	b10b      	cbz	r3, 801fe9c <_svfiprintf_r+0x58>
 801fe98:	2b25      	cmp	r3, #37	; 0x25
 801fe9a:	d13e      	bne.n	801ff1a <_svfiprintf_r+0xd6>
 801fe9c:	ebb7 0a06 	subs.w	sl, r7, r6
 801fea0:	d00b      	beq.n	801feba <_svfiprintf_r+0x76>
 801fea2:	4653      	mov	r3, sl
 801fea4:	4632      	mov	r2, r6
 801fea6:	4621      	mov	r1, r4
 801fea8:	4640      	mov	r0, r8
 801feaa:	f7ff ff71 	bl	801fd90 <__ssputs_r>
 801feae:	3001      	adds	r0, #1
 801feb0:	f000 80a4 	beq.w	801fffc <_svfiprintf_r+0x1b8>
 801feb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801feb6:	4453      	add	r3, sl
 801feb8:	9309      	str	r3, [sp, #36]	; 0x24
 801feba:	783b      	ldrb	r3, [r7, #0]
 801febc:	2b00      	cmp	r3, #0
 801febe:	f000 809d 	beq.w	801fffc <_svfiprintf_r+0x1b8>
 801fec2:	2300      	movs	r3, #0
 801fec4:	f04f 32ff 	mov.w	r2, #4294967295
 801fec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fecc:	9304      	str	r3, [sp, #16]
 801fece:	9307      	str	r3, [sp, #28]
 801fed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fed4:	931a      	str	r3, [sp, #104]	; 0x68
 801fed6:	462f      	mov	r7, r5
 801fed8:	2205      	movs	r2, #5
 801feda:	f817 1b01 	ldrb.w	r1, [r7], #1
 801fede:	4850      	ldr	r0, [pc, #320]	; (8020020 <_svfiprintf_r+0x1dc>)
 801fee0:	f7e0 f9c6 	bl	8000270 <memchr>
 801fee4:	9b04      	ldr	r3, [sp, #16]
 801fee6:	b9d0      	cbnz	r0, 801ff1e <_svfiprintf_r+0xda>
 801fee8:	06d9      	lsls	r1, r3, #27
 801feea:	bf44      	itt	mi
 801feec:	2220      	movmi	r2, #32
 801feee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801fef2:	071a      	lsls	r2, r3, #28
 801fef4:	bf44      	itt	mi
 801fef6:	222b      	movmi	r2, #43	; 0x2b
 801fef8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801fefc:	782a      	ldrb	r2, [r5, #0]
 801fefe:	2a2a      	cmp	r2, #42	; 0x2a
 801ff00:	d015      	beq.n	801ff2e <_svfiprintf_r+0xea>
 801ff02:	9a07      	ldr	r2, [sp, #28]
 801ff04:	462f      	mov	r7, r5
 801ff06:	2000      	movs	r0, #0
 801ff08:	250a      	movs	r5, #10
 801ff0a:	4639      	mov	r1, r7
 801ff0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ff10:	3b30      	subs	r3, #48	; 0x30
 801ff12:	2b09      	cmp	r3, #9
 801ff14:	d94d      	bls.n	801ffb2 <_svfiprintf_r+0x16e>
 801ff16:	b1b8      	cbz	r0, 801ff48 <_svfiprintf_r+0x104>
 801ff18:	e00f      	b.n	801ff3a <_svfiprintf_r+0xf6>
 801ff1a:	462f      	mov	r7, r5
 801ff1c:	e7b8      	b.n	801fe90 <_svfiprintf_r+0x4c>
 801ff1e:	4a40      	ldr	r2, [pc, #256]	; (8020020 <_svfiprintf_r+0x1dc>)
 801ff20:	1a80      	subs	r0, r0, r2
 801ff22:	fa0b f000 	lsl.w	r0, fp, r0
 801ff26:	4318      	orrs	r0, r3
 801ff28:	9004      	str	r0, [sp, #16]
 801ff2a:	463d      	mov	r5, r7
 801ff2c:	e7d3      	b.n	801fed6 <_svfiprintf_r+0x92>
 801ff2e:	9a03      	ldr	r2, [sp, #12]
 801ff30:	1d11      	adds	r1, r2, #4
 801ff32:	6812      	ldr	r2, [r2, #0]
 801ff34:	9103      	str	r1, [sp, #12]
 801ff36:	2a00      	cmp	r2, #0
 801ff38:	db01      	blt.n	801ff3e <_svfiprintf_r+0xfa>
 801ff3a:	9207      	str	r2, [sp, #28]
 801ff3c:	e004      	b.n	801ff48 <_svfiprintf_r+0x104>
 801ff3e:	4252      	negs	r2, r2
 801ff40:	f043 0302 	orr.w	r3, r3, #2
 801ff44:	9207      	str	r2, [sp, #28]
 801ff46:	9304      	str	r3, [sp, #16]
 801ff48:	783b      	ldrb	r3, [r7, #0]
 801ff4a:	2b2e      	cmp	r3, #46	; 0x2e
 801ff4c:	d10c      	bne.n	801ff68 <_svfiprintf_r+0x124>
 801ff4e:	787b      	ldrb	r3, [r7, #1]
 801ff50:	2b2a      	cmp	r3, #42	; 0x2a
 801ff52:	d133      	bne.n	801ffbc <_svfiprintf_r+0x178>
 801ff54:	9b03      	ldr	r3, [sp, #12]
 801ff56:	1d1a      	adds	r2, r3, #4
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	9203      	str	r2, [sp, #12]
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	bfb8      	it	lt
 801ff60:	f04f 33ff 	movlt.w	r3, #4294967295
 801ff64:	3702      	adds	r7, #2
 801ff66:	9305      	str	r3, [sp, #20]
 801ff68:	4d2e      	ldr	r5, [pc, #184]	; (8020024 <_svfiprintf_r+0x1e0>)
 801ff6a:	7839      	ldrb	r1, [r7, #0]
 801ff6c:	2203      	movs	r2, #3
 801ff6e:	4628      	mov	r0, r5
 801ff70:	f7e0 f97e 	bl	8000270 <memchr>
 801ff74:	b138      	cbz	r0, 801ff86 <_svfiprintf_r+0x142>
 801ff76:	2340      	movs	r3, #64	; 0x40
 801ff78:	1b40      	subs	r0, r0, r5
 801ff7a:	fa03 f000 	lsl.w	r0, r3, r0
 801ff7e:	9b04      	ldr	r3, [sp, #16]
 801ff80:	4303      	orrs	r3, r0
 801ff82:	3701      	adds	r7, #1
 801ff84:	9304      	str	r3, [sp, #16]
 801ff86:	7839      	ldrb	r1, [r7, #0]
 801ff88:	4827      	ldr	r0, [pc, #156]	; (8020028 <_svfiprintf_r+0x1e4>)
 801ff8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ff8e:	2206      	movs	r2, #6
 801ff90:	1c7e      	adds	r6, r7, #1
 801ff92:	f7e0 f96d 	bl	8000270 <memchr>
 801ff96:	2800      	cmp	r0, #0
 801ff98:	d038      	beq.n	802000c <_svfiprintf_r+0x1c8>
 801ff9a:	4b24      	ldr	r3, [pc, #144]	; (802002c <_svfiprintf_r+0x1e8>)
 801ff9c:	bb13      	cbnz	r3, 801ffe4 <_svfiprintf_r+0x1a0>
 801ff9e:	9b03      	ldr	r3, [sp, #12]
 801ffa0:	3307      	adds	r3, #7
 801ffa2:	f023 0307 	bic.w	r3, r3, #7
 801ffa6:	3308      	adds	r3, #8
 801ffa8:	9303      	str	r3, [sp, #12]
 801ffaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffac:	444b      	add	r3, r9
 801ffae:	9309      	str	r3, [sp, #36]	; 0x24
 801ffb0:	e76d      	b.n	801fe8e <_svfiprintf_r+0x4a>
 801ffb2:	fb05 3202 	mla	r2, r5, r2, r3
 801ffb6:	2001      	movs	r0, #1
 801ffb8:	460f      	mov	r7, r1
 801ffba:	e7a6      	b.n	801ff0a <_svfiprintf_r+0xc6>
 801ffbc:	2300      	movs	r3, #0
 801ffbe:	3701      	adds	r7, #1
 801ffc0:	9305      	str	r3, [sp, #20]
 801ffc2:	4619      	mov	r1, r3
 801ffc4:	250a      	movs	r5, #10
 801ffc6:	4638      	mov	r0, r7
 801ffc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ffcc:	3a30      	subs	r2, #48	; 0x30
 801ffce:	2a09      	cmp	r2, #9
 801ffd0:	d903      	bls.n	801ffda <_svfiprintf_r+0x196>
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	d0c8      	beq.n	801ff68 <_svfiprintf_r+0x124>
 801ffd6:	9105      	str	r1, [sp, #20]
 801ffd8:	e7c6      	b.n	801ff68 <_svfiprintf_r+0x124>
 801ffda:	fb05 2101 	mla	r1, r5, r1, r2
 801ffde:	2301      	movs	r3, #1
 801ffe0:	4607      	mov	r7, r0
 801ffe2:	e7f0      	b.n	801ffc6 <_svfiprintf_r+0x182>
 801ffe4:	ab03      	add	r3, sp, #12
 801ffe6:	9300      	str	r3, [sp, #0]
 801ffe8:	4622      	mov	r2, r4
 801ffea:	4b11      	ldr	r3, [pc, #68]	; (8020030 <_svfiprintf_r+0x1ec>)
 801ffec:	a904      	add	r1, sp, #16
 801ffee:	4640      	mov	r0, r8
 801fff0:	f7fe f96e 	bl	801e2d0 <_printf_float>
 801fff4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801fff8:	4681      	mov	r9, r0
 801fffa:	d1d6      	bne.n	801ffaa <_svfiprintf_r+0x166>
 801fffc:	89a3      	ldrh	r3, [r4, #12]
 801fffe:	065b      	lsls	r3, r3, #25
 8020000:	f53f af35 	bmi.w	801fe6e <_svfiprintf_r+0x2a>
 8020004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020006:	b01d      	add	sp, #116	; 0x74
 8020008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802000c:	ab03      	add	r3, sp, #12
 802000e:	9300      	str	r3, [sp, #0]
 8020010:	4622      	mov	r2, r4
 8020012:	4b07      	ldr	r3, [pc, #28]	; (8020030 <_svfiprintf_r+0x1ec>)
 8020014:	a904      	add	r1, sp, #16
 8020016:	4640      	mov	r0, r8
 8020018:	f7fe fbfc 	bl	801e814 <_printf_i>
 802001c:	e7ea      	b.n	801fff4 <_svfiprintf_r+0x1b0>
 802001e:	bf00      	nop
 8020020:	080234fc 	.word	0x080234fc
 8020024:	08023502 	.word	0x08023502
 8020028:	08023506 	.word	0x08023506
 802002c:	0801e2d1 	.word	0x0801e2d1
 8020030:	0801fd91 	.word	0x0801fd91

08020034 <__ascii_wctomb>:
 8020034:	b149      	cbz	r1, 802004a <__ascii_wctomb+0x16>
 8020036:	2aff      	cmp	r2, #255	; 0xff
 8020038:	bf85      	ittet	hi
 802003a:	238a      	movhi	r3, #138	; 0x8a
 802003c:	6003      	strhi	r3, [r0, #0]
 802003e:	700a      	strbls	r2, [r1, #0]
 8020040:	f04f 30ff 	movhi.w	r0, #4294967295
 8020044:	bf98      	it	ls
 8020046:	2001      	movls	r0, #1
 8020048:	4770      	bx	lr
 802004a:	4608      	mov	r0, r1
 802004c:	4770      	bx	lr

0802004e <memmove>:
 802004e:	4288      	cmp	r0, r1
 8020050:	b510      	push	{r4, lr}
 8020052:	eb01 0302 	add.w	r3, r1, r2
 8020056:	d807      	bhi.n	8020068 <memmove+0x1a>
 8020058:	1e42      	subs	r2, r0, #1
 802005a:	4299      	cmp	r1, r3
 802005c:	d00a      	beq.n	8020074 <memmove+0x26>
 802005e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020062:	f802 4f01 	strb.w	r4, [r2, #1]!
 8020066:	e7f8      	b.n	802005a <memmove+0xc>
 8020068:	4283      	cmp	r3, r0
 802006a:	d9f5      	bls.n	8020058 <memmove+0xa>
 802006c:	1881      	adds	r1, r0, r2
 802006e:	1ad2      	subs	r2, r2, r3
 8020070:	42d3      	cmn	r3, r2
 8020072:	d100      	bne.n	8020076 <memmove+0x28>
 8020074:	bd10      	pop	{r4, pc}
 8020076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802007a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802007e:	e7f7      	b.n	8020070 <memmove+0x22>

08020080 <_realloc_r>:
 8020080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020082:	4607      	mov	r7, r0
 8020084:	4614      	mov	r4, r2
 8020086:	460e      	mov	r6, r1
 8020088:	b921      	cbnz	r1, 8020094 <_realloc_r+0x14>
 802008a:	4611      	mov	r1, r2
 802008c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020090:	f7fe b83e 	b.w	801e110 <_malloc_r>
 8020094:	b922      	cbnz	r2, 80200a0 <_realloc_r+0x20>
 8020096:	f7fd ffed 	bl	801e074 <_free_r>
 802009a:	4625      	mov	r5, r4
 802009c:	4628      	mov	r0, r5
 802009e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80200a0:	f000 f814 	bl	80200cc <_malloc_usable_size_r>
 80200a4:	42a0      	cmp	r0, r4
 80200a6:	d20f      	bcs.n	80200c8 <_realloc_r+0x48>
 80200a8:	4621      	mov	r1, r4
 80200aa:	4638      	mov	r0, r7
 80200ac:	f7fe f830 	bl	801e110 <_malloc_r>
 80200b0:	4605      	mov	r5, r0
 80200b2:	2800      	cmp	r0, #0
 80200b4:	d0f2      	beq.n	802009c <_realloc_r+0x1c>
 80200b6:	4631      	mov	r1, r6
 80200b8:	4622      	mov	r2, r4
 80200ba:	f7fd ffc7 	bl	801e04c <memcpy>
 80200be:	4631      	mov	r1, r6
 80200c0:	4638      	mov	r0, r7
 80200c2:	f7fd ffd7 	bl	801e074 <_free_r>
 80200c6:	e7e9      	b.n	802009c <_realloc_r+0x1c>
 80200c8:	4635      	mov	r5, r6
 80200ca:	e7e7      	b.n	802009c <_realloc_r+0x1c>

080200cc <_malloc_usable_size_r>:
 80200cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80200d0:	1f18      	subs	r0, r3, #4
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	bfbc      	itt	lt
 80200d6:	580b      	ldrlt	r3, [r1, r0]
 80200d8:	18c0      	addlt	r0, r0, r3
 80200da:	4770      	bx	lr

080200dc <_init>:
 80200dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200de:	bf00      	nop
 80200e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80200e2:	bc08      	pop	{r3}
 80200e4:	469e      	mov	lr, r3
 80200e6:	4770      	bx	lr

080200e8 <_fini>:
 80200e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200ea:	bf00      	nop
 80200ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80200ee:	bc08      	pop	{r3}
 80200f0:	469e      	mov	lr, r3
 80200f2:	4770      	bx	lr

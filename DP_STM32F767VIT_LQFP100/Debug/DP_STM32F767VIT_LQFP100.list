
DP_STM32F767VIT_LQFP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020e7c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003644  08021080  08021080  00031080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080246c4  080246c4  0004026c  2**0
                  CONTENTS
  4 .ARM          00000008  080246c4  080246c4  000346c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080246cc  080246cc  0004026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080246cc  080246cc  000346cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080246d0  080246d0  000346d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  080246d4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019ad8  20000270  08024940  00040270  2**3
                  ALLOC
 10 ._user_heap_stack 00024000  20019d48  08024940  00049d48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000d2a2c  00000000  00000000  0004029a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000aba3  00000000  00000000  00112cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004ab0  00000000  00000000  0011d870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004630  00000000  00000000  00122320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000377d7  00000000  00000000  00126950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000492e7  00000000  00000000  0015e127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00132c17  00000000  00000000  001a740e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002da025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014ef0  00000000  00000000  002da078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000270 	.word	0x20000270
 800021c:	00000000 	.word	0x00000000
 8000220:	08021064 	.word	0x08021064

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000274 	.word	0x20000274
 800023c:	08021064 	.word	0x08021064

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b98e 	b.w	80009bc <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f826 	bl	80006f8 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006e8 <__aeabi_d2ulz+0x30>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006f0 <__aeabi_d2ulz+0x38>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d8:	ee16 1a10 	vmov	r1, s12
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	00000000 	.word	0x00000000
 80006ec:	3df00000 	.word	0x3df00000
 80006f0:	00000000 	.word	0x00000000
 80006f4:	41f00000 	.word	0x41f00000

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9d08      	ldr	r5, [sp, #32]
 80006fe:	4604      	mov	r4, r0
 8000700:	468c      	mov	ip, r1
 8000702:	2b00      	cmp	r3, #0
 8000704:	f040 8083 	bne.w	800080e <__udivmoddi4+0x116>
 8000708:	428a      	cmp	r2, r1
 800070a:	4617      	mov	r7, r2
 800070c:	d947      	bls.n	800079e <__udivmoddi4+0xa6>
 800070e:	fab2 f282 	clz	r2, r2
 8000712:	b142      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000714:	f1c2 0020 	rsb	r0, r2, #32
 8000718:	fa24 f000 	lsr.w	r0, r4, r0
 800071c:	4091      	lsls	r1, r2
 800071e:	4097      	lsls	r7, r2
 8000720:	ea40 0c01 	orr.w	ip, r0, r1
 8000724:	4094      	lsls	r4, r2
 8000726:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbbc f6f8 	udiv	r6, ip, r8
 8000730:	fa1f fe87 	uxth.w	lr, r7
 8000734:	fb08 c116 	mls	r1, r8, r6, ip
 8000738:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800073c:	fb06 f10e 	mul.w	r1, r6, lr
 8000740:	4299      	cmp	r1, r3
 8000742:	d909      	bls.n	8000758 <__udivmoddi4+0x60>
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	f106 30ff 	add.w	r0, r6, #4294967295
 800074a:	f080 8119 	bcs.w	8000980 <__udivmoddi4+0x288>
 800074e:	4299      	cmp	r1, r3
 8000750:	f240 8116 	bls.w	8000980 <__udivmoddi4+0x288>
 8000754:	3e02      	subs	r6, #2
 8000756:	443b      	add	r3, r7
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	b2a4      	uxth	r4, r4
 800075c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000760:	fb08 3310 	mls	r3, r8, r0, r3
 8000764:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000768:	fb00 fe0e 	mul.w	lr, r0, lr
 800076c:	45a6      	cmp	lr, r4
 800076e:	d909      	bls.n	8000784 <__udivmoddi4+0x8c>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f100 33ff 	add.w	r3, r0, #4294967295
 8000776:	f080 8105 	bcs.w	8000984 <__udivmoddi4+0x28c>
 800077a:	45a6      	cmp	lr, r4
 800077c:	f240 8102 	bls.w	8000984 <__udivmoddi4+0x28c>
 8000780:	3802      	subs	r0, #2
 8000782:	443c      	add	r4, r7
 8000784:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000788:	eba4 040e 	sub.w	r4, r4, lr
 800078c:	2600      	movs	r6, #0
 800078e:	b11d      	cbz	r5, 8000798 <__udivmoddi4+0xa0>
 8000790:	40d4      	lsrs	r4, r2
 8000792:	2300      	movs	r3, #0
 8000794:	e9c5 4300 	strd	r4, r3, [r5]
 8000798:	4631      	mov	r1, r6
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	b902      	cbnz	r2, 80007a2 <__udivmoddi4+0xaa>
 80007a0:	deff      	udf	#255	; 0xff
 80007a2:	fab2 f282 	clz	r2, r2
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d150      	bne.n	800084c <__udivmoddi4+0x154>
 80007aa:	1bcb      	subs	r3, r1, r7
 80007ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007b0:	fa1f f887 	uxth.w	r8, r7
 80007b4:	2601      	movs	r6, #1
 80007b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ba:	0c21      	lsrs	r1, r4, #16
 80007bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007c4:	fb08 f30c 	mul.w	r3, r8, ip
 80007c8:	428b      	cmp	r3, r1
 80007ca:	d907      	bls.n	80007dc <__udivmoddi4+0xe4>
 80007cc:	1879      	adds	r1, r7, r1
 80007ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007d2:	d202      	bcs.n	80007da <__udivmoddi4+0xe2>
 80007d4:	428b      	cmp	r3, r1
 80007d6:	f200 80e9 	bhi.w	80009ac <__udivmoddi4+0x2b4>
 80007da:	4684      	mov	ip, r0
 80007dc:	1ac9      	subs	r1, r1, r3
 80007de:	b2a3      	uxth	r3, r4
 80007e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007ec:	fb08 f800 	mul.w	r8, r8, r0
 80007f0:	45a0      	cmp	r8, r4
 80007f2:	d907      	bls.n	8000804 <__udivmoddi4+0x10c>
 80007f4:	193c      	adds	r4, r7, r4
 80007f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007fa:	d202      	bcs.n	8000802 <__udivmoddi4+0x10a>
 80007fc:	45a0      	cmp	r8, r4
 80007fe:	f200 80d9 	bhi.w	80009b4 <__udivmoddi4+0x2bc>
 8000802:	4618      	mov	r0, r3
 8000804:	eba4 0408 	sub.w	r4, r4, r8
 8000808:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800080c:	e7bf      	b.n	800078e <__udivmoddi4+0x96>
 800080e:	428b      	cmp	r3, r1
 8000810:	d909      	bls.n	8000826 <__udivmoddi4+0x12e>
 8000812:	2d00      	cmp	r5, #0
 8000814:	f000 80b1 	beq.w	800097a <__udivmoddi4+0x282>
 8000818:	2600      	movs	r6, #0
 800081a:	e9c5 0100 	strd	r0, r1, [r5]
 800081e:	4630      	mov	r0, r6
 8000820:	4631      	mov	r1, r6
 8000822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000826:	fab3 f683 	clz	r6, r3
 800082a:	2e00      	cmp	r6, #0
 800082c:	d14a      	bne.n	80008c4 <__udivmoddi4+0x1cc>
 800082e:	428b      	cmp	r3, r1
 8000830:	d302      	bcc.n	8000838 <__udivmoddi4+0x140>
 8000832:	4282      	cmp	r2, r0
 8000834:	f200 80b8 	bhi.w	80009a8 <__udivmoddi4+0x2b0>
 8000838:	1a84      	subs	r4, r0, r2
 800083a:	eb61 0103 	sbc.w	r1, r1, r3
 800083e:	2001      	movs	r0, #1
 8000840:	468c      	mov	ip, r1
 8000842:	2d00      	cmp	r5, #0
 8000844:	d0a8      	beq.n	8000798 <__udivmoddi4+0xa0>
 8000846:	e9c5 4c00 	strd	r4, ip, [r5]
 800084a:	e7a5      	b.n	8000798 <__udivmoddi4+0xa0>
 800084c:	f1c2 0320 	rsb	r3, r2, #32
 8000850:	fa20 f603 	lsr.w	r6, r0, r3
 8000854:	4097      	lsls	r7, r2
 8000856:	fa01 f002 	lsl.w	r0, r1, r2
 800085a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800085e:	40d9      	lsrs	r1, r3
 8000860:	4330      	orrs	r0, r6
 8000862:	0c03      	lsrs	r3, r0, #16
 8000864:	fbb1 f6fe 	udiv	r6, r1, lr
 8000868:	fa1f f887 	uxth.w	r8, r7
 800086c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000870:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000874:	fb06 f108 	mul.w	r1, r6, r8
 8000878:	4299      	cmp	r1, r3
 800087a:	fa04 f402 	lsl.w	r4, r4, r2
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x19c>
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	f106 3cff 	add.w	ip, r6, #4294967295
 8000886:	f080 808d 	bcs.w	80009a4 <__udivmoddi4+0x2ac>
 800088a:	4299      	cmp	r1, r3
 800088c:	f240 808a 	bls.w	80009a4 <__udivmoddi4+0x2ac>
 8000890:	3e02      	subs	r6, #2
 8000892:	443b      	add	r3, r7
 8000894:	1a5b      	subs	r3, r3, r1
 8000896:	b281      	uxth	r1, r0
 8000898:	fbb3 f0fe 	udiv	r0, r3, lr
 800089c:	fb0e 3310 	mls	r3, lr, r0, r3
 80008a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a4:	fb00 f308 	mul.w	r3, r0, r8
 80008a8:	428b      	cmp	r3, r1
 80008aa:	d907      	bls.n	80008bc <__udivmoddi4+0x1c4>
 80008ac:	1879      	adds	r1, r7, r1
 80008ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80008b2:	d273      	bcs.n	800099c <__udivmoddi4+0x2a4>
 80008b4:	428b      	cmp	r3, r1
 80008b6:	d971      	bls.n	800099c <__udivmoddi4+0x2a4>
 80008b8:	3802      	subs	r0, #2
 80008ba:	4439      	add	r1, r7
 80008bc:	1acb      	subs	r3, r1, r3
 80008be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008c2:	e778      	b.n	80007b6 <__udivmoddi4+0xbe>
 80008c4:	f1c6 0c20 	rsb	ip, r6, #32
 80008c8:	fa03 f406 	lsl.w	r4, r3, r6
 80008cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008d0:	431c      	orrs	r4, r3
 80008d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008d6:	fa01 f306 	lsl.w	r3, r1, r6
 80008da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008de:	fa21 f10c 	lsr.w	r1, r1, ip
 80008e2:	431f      	orrs	r7, r3
 80008e4:	0c3b      	lsrs	r3, r7, #16
 80008e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ea:	fa1f f884 	uxth.w	r8, r4
 80008ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80008f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008f6:	fb09 fa08 	mul.w	sl, r9, r8
 80008fa:	458a      	cmp	sl, r1
 80008fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000900:	fa00 f306 	lsl.w	r3, r0, r6
 8000904:	d908      	bls.n	8000918 <__udivmoddi4+0x220>
 8000906:	1861      	adds	r1, r4, r1
 8000908:	f109 30ff 	add.w	r0, r9, #4294967295
 800090c:	d248      	bcs.n	80009a0 <__udivmoddi4+0x2a8>
 800090e:	458a      	cmp	sl, r1
 8000910:	d946      	bls.n	80009a0 <__udivmoddi4+0x2a8>
 8000912:	f1a9 0902 	sub.w	r9, r9, #2
 8000916:	4421      	add	r1, r4
 8000918:	eba1 010a 	sub.w	r1, r1, sl
 800091c:	b2bf      	uxth	r7, r7
 800091e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000922:	fb0e 1110 	mls	r1, lr, r0, r1
 8000926:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800092a:	fb00 f808 	mul.w	r8, r0, r8
 800092e:	45b8      	cmp	r8, r7
 8000930:	d907      	bls.n	8000942 <__udivmoddi4+0x24a>
 8000932:	19e7      	adds	r7, r4, r7
 8000934:	f100 31ff 	add.w	r1, r0, #4294967295
 8000938:	d22e      	bcs.n	8000998 <__udivmoddi4+0x2a0>
 800093a:	45b8      	cmp	r8, r7
 800093c:	d92c      	bls.n	8000998 <__udivmoddi4+0x2a0>
 800093e:	3802      	subs	r0, #2
 8000940:	4427      	add	r7, r4
 8000942:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000946:	eba7 0708 	sub.w	r7, r7, r8
 800094a:	fba0 8902 	umull	r8, r9, r0, r2
 800094e:	454f      	cmp	r7, r9
 8000950:	46c6      	mov	lr, r8
 8000952:	4649      	mov	r1, r9
 8000954:	d31a      	bcc.n	800098c <__udivmoddi4+0x294>
 8000956:	d017      	beq.n	8000988 <__udivmoddi4+0x290>
 8000958:	b15d      	cbz	r5, 8000972 <__udivmoddi4+0x27a>
 800095a:	ebb3 020e 	subs.w	r2, r3, lr
 800095e:	eb67 0701 	sbc.w	r7, r7, r1
 8000962:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000966:	40f2      	lsrs	r2, r6
 8000968:	ea4c 0202 	orr.w	r2, ip, r2
 800096c:	40f7      	lsrs	r7, r6
 800096e:	e9c5 2700 	strd	r2, r7, [r5]
 8000972:	2600      	movs	r6, #0
 8000974:	4631      	mov	r1, r6
 8000976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097a:	462e      	mov	r6, r5
 800097c:	4628      	mov	r0, r5
 800097e:	e70b      	b.n	8000798 <__udivmoddi4+0xa0>
 8000980:	4606      	mov	r6, r0
 8000982:	e6e9      	b.n	8000758 <__udivmoddi4+0x60>
 8000984:	4618      	mov	r0, r3
 8000986:	e6fd      	b.n	8000784 <__udivmoddi4+0x8c>
 8000988:	4543      	cmp	r3, r8
 800098a:	d2e5      	bcs.n	8000958 <__udivmoddi4+0x260>
 800098c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000990:	eb69 0104 	sbc.w	r1, r9, r4
 8000994:	3801      	subs	r0, #1
 8000996:	e7df      	b.n	8000958 <__udivmoddi4+0x260>
 8000998:	4608      	mov	r0, r1
 800099a:	e7d2      	b.n	8000942 <__udivmoddi4+0x24a>
 800099c:	4660      	mov	r0, ip
 800099e:	e78d      	b.n	80008bc <__udivmoddi4+0x1c4>
 80009a0:	4681      	mov	r9, r0
 80009a2:	e7b9      	b.n	8000918 <__udivmoddi4+0x220>
 80009a4:	4666      	mov	r6, ip
 80009a6:	e775      	b.n	8000894 <__udivmoddi4+0x19c>
 80009a8:	4630      	mov	r0, r6
 80009aa:	e74a      	b.n	8000842 <__udivmoddi4+0x14a>
 80009ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b0:	4439      	add	r1, r7
 80009b2:	e713      	b.n	80007dc <__udivmoddi4+0xe4>
 80009b4:	3802      	subs	r0, #2
 80009b6:	443c      	add	r4, r7
 80009b8:	e724      	b.n	8000804 <__udivmoddi4+0x10c>
 80009ba:	bf00      	nop

080009bc <__aeabi_idiv0>:
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fc43 	bl	8000254 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <Send_Uart+0x28>)
 80009da:	f010 fc25 	bl	8011228 <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20011dec 	.word	0x20011dec

080009ec <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <Mount_SD+0x38>)
 80009fa:	f01b fe97 	bl	801c72c <f_mount>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <Mount_SD+0x3c>)
 8000a04:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <Mount_SD+0x3c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <Mount_SD+0x2a>
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <Mount_SD+0x40>)
 8000a10:	f7ff ffd6 	bl	80009c0 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000a14:	e002      	b.n	8000a1c <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <Mount_SD+0x44>)
 8000a18:	f7ff ffd2 	bl	80009c0 <Send_Uart>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20001f78 	.word	0x20001f78
 8000a28:	20001e50 	.word	0x20001e50
 8000a2c:	08021080 	.word	0x08021080
 8000a30:	080210a4 	.word	0x080210a4

08000a34 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2000      	movs	r0, #0
 8000a42:	f01b fe73 	bl	801c72c <f_mount>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <Unmount_SD+0x38>)
 8000a4c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <Unmount_SD+0x38>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d103      	bne.n	8000a5e <Unmount_SD+0x2a>
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <Unmount_SD+0x3c>)
 8000a58:	f7ff ffb2 	bl	80009c0 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000a5c:	e002      	b.n	8000a64 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <Unmount_SD+0x40>)
 8000a60:	f7ff ffae 	bl	80009c0 <Send_Uart>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20001e50 	.word	0x20001e50
 8000a70:	080210c8 	.word	0x080210c8
 8000a74:	080210f0 	.word	0x080210f0

08000a78 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 8000a7e:	2014      	movs	r0, #20
 8000a80:	f01d fc52 	bl	801e328 <malloc>
 8000a84:	4603      	mov	r3, r0
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8000a88:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <Format_SD+0xb4>)
 8000a8a:	4929      	ldr	r1, [pc, #164]	; (8000b30 <Format_SD+0xb8>)
 8000a8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a8e:	f01e f96d 	bl	801ed6c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000a92:	463b      	mov	r3, r7
 8000a94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a96:	4618      	mov	r0, r3
 8000a98:	f01c fcba 	bl	801d410 <f_opendir>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <Format_SD+0xbc>)
 8000aa2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <Format_SD+0xbc>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d136      	bne.n	8000b1a <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000aac:	463b      	mov	r3, r7
 8000aae:	4922      	ldr	r1, [pc, #136]	; (8000b38 <Format_SD+0xc0>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f01c fd46 	bl	801d542 <f_readdir>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <Format_SD+0xbc>)
 8000abc:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <Format_SD+0xbc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d125      	bne.n	8000b12 <Format_SD+0x9a>
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <Format_SD+0xc0>)
 8000ac8:	7d9b      	ldrb	r3, [r3, #22]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d021      	beq.n	8000b12 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <Format_SD+0xc0>)
 8000ad0:	7a1b      	ldrb	r3, [r3, #8]
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d011      	beq.n	8000afe <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000ada:	4918      	ldr	r1, [pc, #96]	; (8000b3c <Format_SD+0xc4>)
 8000adc:	4818      	ldr	r0, [pc, #96]	; (8000b40 <Format_SD+0xc8>)
 8000ade:	f7ff fbaf 	bl	8000240 <strcmp>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d012      	beq.n	8000b0e <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 8000ae8:	4814      	ldr	r0, [pc, #80]	; (8000b3c <Format_SD+0xc4>)
 8000aea:	f01c fe55 	bl	801d798 <f_unlink>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <Format_SD+0xbc>)
 8000af4:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <Format_SD+0xbc>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	e7d6      	b.n	8000aac <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <Format_SD+0xc4>)
 8000b00:	f01c fe4a 	bl	801d798 <f_unlink>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <Format_SD+0xbc>)
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	e7ce      	b.n	8000aac <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000b0e:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000b10:	e7cc      	b.n	8000aac <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8000b12:	463b      	mov	r3, r7
 8000b14:	4618      	mov	r0, r3
 8000b16:	f01c fcee 	bl	801d4f6 <f_closedir>
    }
    free(path);
 8000b1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b1c:	f01d fc0c 	bl	801e338 <free>
    return fresult;
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <Format_SD+0xbc>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3738      	adds	r7, #56	; 0x38
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	08021144 	.word	0x08021144
 8000b30:	08021114 	.word	0x08021114
 8000b34:	20001e50 	.word	0x20001e50
 8000b38:	20001e5c 	.word	0x20001e5c
 8000b3c:	20001e72 	.word	0x20001e72
 8000b40:	08021118 	.word	0x08021118

08000b44 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000b4e:	494d      	ldr	r1, [pc, #308]	; (8000c84 <Write_File+0x140>)
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f01c fd33 	bl	801d5bc <f_stat>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	; (8000c88 <Write_File+0x144>)
 8000b5c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000b5e:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <Write_File+0x144>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d012      	beq.n	8000b8c <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000b66:	2064      	movs	r0, #100	; 0x64
 8000b68:	f01d fbde 	bl	801e328 <malloc>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4946      	ldr	r1, [pc, #280]	; (8000c8c <Write_File+0x148>)
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f01e f8f9 	bl	801ed6c <siprintf>
		Send_Uart (buf);
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff ff20 	bl	80009c0 <Send_Uart>
	    free(buf);
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f01d fbd9 	bl	801e338 <free>
	    return fresult;
 8000b86:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <Write_File+0x144>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	e077      	b.n	8000c7c <Write_File+0x138>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_EXISTING | FA_WRITE);
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	483f      	ldr	r0, [pc, #252]	; (8000c90 <Write_File+0x14c>)
 8000b92:	f01b fe11 	bl	801c7b8 <f_open>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <Write_File+0x144>)
 8000b9c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <Write_File+0x144>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d015      	beq.n	8000bd2 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000ba6:	2064      	movs	r0, #100	; 0x64
 8000ba8:	f01d fbbe 	bl	801e328 <malloc>
 8000bac:	4603      	mov	r3, r0
 8000bae:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <Write_File+0x144>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4936      	ldr	r1, [pc, #216]	; (8000c94 <Write_File+0x150>)
 8000bba:	6938      	ldr	r0, [r7, #16]
 8000bbc:	f01e f8d6 	bl	801ed6c <siprintf>
	    	Send_Uart(buf);
 8000bc0:	6938      	ldr	r0, [r7, #16]
 8000bc2:	f7ff fefd 	bl	80009c0 <Send_Uart>
	        free(buf);
 8000bc6:	6938      	ldr	r0, [r7, #16]
 8000bc8:	f01d fbb6 	bl	801e338 <free>
	        return fresult;
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <Write_File+0x144>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	e054      	b.n	8000c7c <Write_File+0x138>
	    }

	    else
	    {
	    	fresult = f_write(&fil, data, strlen(data), &bw);
 8000bd2:	6838      	ldr	r0, [r7, #0]
 8000bd4:	f7ff fb3e 	bl	8000254 <strlen>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <Write_File+0x154>)
 8000bdc:	6839      	ldr	r1, [r7, #0]
 8000bde:	482c      	ldr	r0, [pc, #176]	; (8000c90 <Write_File+0x14c>)
 8000be0:	f01b ffb6 	bl	801cb50 <f_write>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <Write_File+0x144>)
 8000bea:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <Write_File+0x144>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d012      	beq.n	8000c1a <Write_File+0xd6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000bf4:	2064      	movs	r0, #100	; 0x64
 8000bf6:	f01d fb97 	bl	801e328 <malloc>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	61fb      	str	r3, [r7, #28]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <Write_File+0x144>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4925      	ldr	r1, [pc, #148]	; (8000c9c <Write_File+0x158>)
 8000c08:	69f8      	ldr	r0, [r7, #28]
 8000c0a:	f01e f8af 	bl	801ed6c <siprintf>
	    		Send_Uart(buf);
 8000c0e:	69f8      	ldr	r0, [r7, #28]
 8000c10:	f7ff fed6 	bl	80009c0 <Send_Uart>
	    		free(buf);
 8000c14:	69f8      	ldr	r0, [r7, #28]
 8000c16:	f01d fb8f 	bl	801e338 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&fil);
 8000c1a:	481d      	ldr	r0, [pc, #116]	; (8000c90 <Write_File+0x14c>)
 8000c1c:	f01c f9aa 	bl	801cf74 <f_close>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <Write_File+0x144>)
 8000c26:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <Write_File+0x144>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d013      	beq.n	8000c58 <Write_File+0x114>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f01d fb79 	bl	801e328 <malloc>
 8000c36:	4603      	mov	r3, r0
 8000c38:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <Write_File+0x144>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4917      	ldr	r1, [pc, #92]	; (8000ca0 <Write_File+0x15c>)
 8000c44:	6978      	ldr	r0, [r7, #20]
 8000c46:	f01e f891 	bl	801ed6c <siprintf>
	    		Send_Uart(buf);
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff feb8 	bl	80009c0 <Send_Uart>
	    		free(buf);
 8000c50:	6978      	ldr	r0, [r7, #20]
 8000c52:	f01d fb71 	bl	801e338 <free>
 8000c56:	e00f      	b.n	8000c78 <Write_File+0x134>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000c58:	2064      	movs	r0, #100	; 0x64
 8000c5a:	f01d fb65 	bl	801e328 <malloc>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n", name);
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	490f      	ldr	r1, [pc, #60]	; (8000ca4 <Write_File+0x160>)
 8000c66:	69b8      	ldr	r0, [r7, #24]
 8000c68:	f01e f880 	bl	801ed6c <siprintf>
	    		Send_Uart(buf);
 8000c6c:	69b8      	ldr	r0, [r7, #24]
 8000c6e:	f7ff fea7 	bl	80009c0 <Send_Uart>
	    		free(buf);
 8000c72:	69b8      	ldr	r0, [r7, #24]
 8000c74:	f01d fb60 	bl	801e338 <free>
	    	}
	    }
	    return fresult;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <Write_File+0x144>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20001e5c 	.word	0x20001e5c
 8000c88:	20001e50 	.word	0x20001e50
 8000c8c:	08021148 	.word	0x08021148
 8000c90:	20000e20 	.word	0x20000e20
 8000c94:	08021168 	.word	0x08021168
 8000c98:	20000e18 	.word	0x20000e18
 8000c9c:	08021190 	.word	0x08021190
 8000ca0:	080211c4 	.word	0x080211c4
 8000ca4:	080211fc 	.word	0x080211fc

08000ca8 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000cb0:	4943      	ldr	r1, [pc, #268]	; (8000dc0 <Create_File+0x118>)
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f01c fc82 	bl	801d5bc <f_stat>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <Create_File+0x11c>)
 8000cbe:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000cc0:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <Create_File+0x11c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d112      	bne.n	8000cee <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000cc8:	2064      	movs	r0, #100	; 0x64
 8000cca:	f01d fb2d 	bl	801e328 <malloc>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	493c      	ldr	r1, [pc, #240]	; (8000dc8 <Create_File+0x120>)
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f01e f848 	bl	801ed6c <siprintf>
		Send_Uart(buf);
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff fe6f 	bl	80009c0 <Send_Uart>
		free(buf);
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f01d fb28 	bl	801e338 <free>
	    return fresult;
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <Create_File+0x11c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	e063      	b.n	8000db6 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000cee:	220b      	movs	r2, #11
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4836      	ldr	r0, [pc, #216]	; (8000dcc <Create_File+0x124>)
 8000cf4:	f01b fd60 	bl	801c7b8 <f_open>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <Create_File+0x11c>)
 8000cfe:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <Create_File+0x11c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d015      	beq.n	8000d34 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000d08:	2064      	movs	r0, #100	; 0x64
 8000d0a:	f01d fb0d 	bl	801e328 <malloc>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <Create_File+0x11c>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	492d      	ldr	r1, [pc, #180]	; (8000dd0 <Create_File+0x128>)
 8000d1c:	6938      	ldr	r0, [r7, #16]
 8000d1e:	f01e f825 	bl	801ed6c <siprintf>
			Send_Uart(buf);
 8000d22:	6938      	ldr	r0, [r7, #16]
 8000d24:	f7ff fe4c 	bl	80009c0 <Send_Uart>
			free(buf);
 8000d28:	6938      	ldr	r0, [r7, #16]
 8000d2a:	f01d fb05 	bl	801e338 <free>
		    return fresult;
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <Create_File+0x11c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	e040      	b.n	8000db6 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000d34:	2064      	movs	r0, #100	; 0x64
 8000d36:	f01d faf7 	bl	801e328 <malloc>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4924      	ldr	r1, [pc, #144]	; (8000dd4 <Create_File+0x12c>)
 8000d42:	69f8      	ldr	r0, [r7, #28]
 8000d44:	f01e f812 	bl	801ed6c <siprintf>
			Send_Uart(buf);
 8000d48:	69f8      	ldr	r0, [r7, #28]
 8000d4a:	f7ff fe39 	bl	80009c0 <Send_Uart>
			free(buf);
 8000d4e:	69f8      	ldr	r0, [r7, #28]
 8000d50:	f01d faf2 	bl	801e338 <free>
		}

		fresult = f_close(&fil);
 8000d54:	481d      	ldr	r0, [pc, #116]	; (8000dcc <Create_File+0x124>)
 8000d56:	f01c f90d 	bl	801cf74 <f_close>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <Create_File+0x11c>)
 8000d60:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <Create_File+0x11c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d013      	beq.n	8000d92 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000d6a:	2064      	movs	r0, #100	; 0x64
 8000d6c:	f01d fadc 	bl	801e328 <malloc>
 8000d70:	4603      	mov	r3, r0
 8000d72:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <Create_File+0x11c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4916      	ldr	r1, [pc, #88]	; (8000dd8 <Create_File+0x130>)
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f01d fff4 	bl	801ed6c <siprintf>
			Send_Uart(buf);
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	f7ff fe1b 	bl	80009c0 <Send_Uart>
			free(buf);
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f01d fad4 	bl	801e338 <free>
 8000d90:	e00f      	b.n	8000db2 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000d92:	2064      	movs	r0, #100	; 0x64
 8000d94:	f01d fac8 	bl	801e328 <malloc>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	490f      	ldr	r1, [pc, #60]	; (8000ddc <Create_File+0x134>)
 8000da0:	69b8      	ldr	r0, [r7, #24]
 8000da2:	f01d ffe3 	bl	801ed6c <siprintf>
			Send_Uart(buf);
 8000da6:	69b8      	ldr	r0, [r7, #24]
 8000da8:	f7ff fe0a 	bl	80009c0 <Send_Uart>
			free(buf);
 8000dac:	69b8      	ldr	r0, [r7, #24]
 8000dae:	f01d fac3 	bl	801e338 <free>
		}
	}
    return fresult;
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <Create_File+0x11c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20001e5c 	.word	0x20001e5c
 8000dc4:	20001e50 	.word	0x20001e50
 8000dc8:	080212c0 	.word	0x080212c0
 8000dcc:	20000e20 	.word	0x20000e20
 8000dd0:	080212f8 	.word	0x080212f8
 8000dd4:	08021320 	.word	0x08021320
 8000dd8:	08021360 	.word	0x08021360
 8000ddc:	080212a0 	.word	0x080212a0

08000de0 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <SELECT+0x14>)
 8000dea:	f008 fe0d 	bl	8009a08 <HAL_GPIO_WritePin>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <DESELECT+0x14>)
 8000e02:	f008 fe01 	bl	8009a08 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]

  //isWaitingForData = 1;

  while (HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY);
 8000e1a:	bf00      	nop
 8000e1c:	4808      	ldr	r0, [pc, #32]	; (8000e40 <SPI_TxByte+0x30>)
 8000e1e:	f00f fb25 	bl	801046c <HAL_SPI_GetState>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d1f9      	bne.n	8000e1c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi4, &data, 1, SPI_TIMEOUT);		// default
 8000e28:	1df9      	adds	r1, r7, #7
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <SPI_TxByte+0x30>)
 8000e32:	f00e fc3d 	bl	800f6b0 <HAL_SPI_Transmit>

  //HAL_SPI_Transmit_DMA(&hspi4, &data, 1);
 // while(isWaitingForData == 1);


}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200059bc 	.word	0x200059bc

08000e44 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000e4a:	23ff      	movs	r3, #255	; 0xff
 8000e4c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71bb      	strb	r3, [r7, #6]
  
  //isWaitingForData = 1;

  while ((HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY));
 8000e52:	bf00      	nop
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <SPI_RxByte+0x38>)
 8000e56:	f00f fb09 	bl	801046c <HAL_SPI_GetState>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d1f9      	bne.n	8000e54 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi4, &dummy, &data, 1, SPI_TIMEOUT);		// default
 8000e60:	1dba      	adds	r2, r7, #6
 8000e62:	1df9      	adds	r1, r7, #7
 8000e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <SPI_RxByte+0x38>)
 8000e6e:	f00e fd85 	bl	800f97c <HAL_SPI_TransmitReceive>
  
  //HAL_SPI_TransmitReceive_DMA(&hspi4, &dummy, &data, 1);
  //while(isWaitingForData == 1);

  return data;
 8000e72:	79bb      	ldrb	r3, [r7, #6]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200059bc 	.word	0x200059bc

08000e80 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000e88:	f7ff ffdc 	bl	8000e44 <SPI_RxByte>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	701a      	strb	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <SD_ReadyWait+0x34>)
 8000ea4:	2232      	movs	r2, #50	; 0x32
 8000ea6:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000ea8:	f7ff ffcc 	bl	8000e44 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000eac:	f7ff ffca 	bl	8000e44 <SPI_RxByte>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2bff      	cmp	r3, #255	; 0xff
 8000eb8:	d004      	beq.n	8000ec4 <SD_ReadyWait+0x28>
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SD_ReadyWait+0x34>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f3      	bne.n	8000eac <SD_ReadyWait+0x10>
  
  return res;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20014951 	.word	0x20014951

08000ed4 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000eda:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ede:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000ee0:	f7ff ff8a 	bl	8000df8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	e005      	b.n	8000ef6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000eea:	20ff      	movs	r0, #255	; 0xff
 8000eec:	f7ff ff90 	bl	8000e10 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	2b09      	cmp	r3, #9
 8000efa:	ddf6      	ble.n	8000eea <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000efc:	f7ff ff70 	bl	8000de0 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000f14:	2395      	movs	r3, #149	; 0x95
 8000f16:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e009      	b.n	8000f32 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000f1e:	1d3a      	adds	r2, r7, #4
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff72 	bl	8000e10 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	ddf2      	ble.n	8000f1e <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000f38:	e002      	b.n	8000f40 <SD_PowerOn+0x6c>
  {
    Count--;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000f40:	f7ff ff80 	bl	8000e44 <SPI_RxByte>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d002      	beq.n	8000f50 <SD_PowerOn+0x7c>
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f4      	bne.n	8000f3a <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000f50:	f7ff ff52 	bl	8000df8 <DESELECT>
  SPI_TxByte(0XFF);
 8000f54:	20ff      	movs	r0, #255	; 0xff
 8000f56:	f7ff ff5b 	bl	8000e10 <SPI_TxByte>
  
  PowerFlag = 1;
 8000f5a:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <SD_PowerOn+0x94>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000028d 	.word	0x2000028d

08000f6c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <SD_PowerOff+0x14>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	2000028d 	.word	0x2000028d

08000f84 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <SD_CheckPower+0x14>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000028d 	.word	0x2000028d

08000f9c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <SD_RxDataBlock+0x68>)
 8000fa8:	220a      	movs	r2, #10
 8000faa:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000fac:	f7ff ff4a 	bl	8000e44 <SPI_RxByte>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2bff      	cmp	r3, #255	; 0xff
 8000fb8:	d104      	bne.n	8000fc4 <SD_RxDataBlock+0x28>
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <SD_RxDataBlock+0x68>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f3      	bne.n	8000fac <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2bfe      	cmp	r3, #254	; 0xfe
 8000fc8:	d001      	beq.n	8000fce <SD_RxDataBlock+0x32>
    return FALSE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e016      	b.n	8000ffc <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff53 	bl	8000e80 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff4d 	bl	8000e80 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1ed      	bne.n	8000fce <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000ff2:	f7ff ff27 	bl	8000e44 <SPI_RxByte>
  SPI_RxByte();
 8000ff6:	f7ff ff25 	bl	8000e44 <SPI_RxByte>
  
  return TRUE;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20014950 	.word	0x20014950

08001008 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001018:	f7ff ff40 	bl	8000e9c <SD_ReadyWait>
 800101c:	4603      	mov	r3, r0
 800101e:	2bff      	cmp	r3, #255	; 0xff
 8001020:	d001      	beq.n	8001026 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001022:	2300      	movs	r3, #0
 8001024:	e040      	b.n	80010a8 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fef1 	bl	8000e10 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	2bfd      	cmp	r3, #253	; 0xfd
 8001032:	d031      	beq.n	8001098 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fee5 	bl	8000e10 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fede 	bl	8000e10 <SPI_TxByte>
    } while (--wc);
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	3b01      	subs	r3, #1
 8001058:	73bb      	strb	r3, [r7, #14]
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1eb      	bne.n	8001038 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001060:	f7ff fef0 	bl	8000e44 <SPI_RxByte>
    SPI_RxByte();
 8001064:	f7ff feee 	bl	8000e44 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001068:	e00b      	b.n	8001082 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800106a:	f7ff feeb 	bl	8000e44 <SPI_RxByte>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	2b05      	cmp	r3, #5
 800107a:	d006      	beq.n	800108a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800107c:	7b7b      	ldrb	r3, [r7, #13]
 800107e:	3301      	adds	r3, #1
 8001080:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001082:	7b7b      	ldrb	r3, [r7, #13]
 8001084:	2b40      	cmp	r3, #64	; 0x40
 8001086:	d9f0      	bls.n	800106a <SD_TxDataBlock+0x62>
 8001088:	e000      	b.n	800108c <SD_TxDataBlock+0x84>
        break;
 800108a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800108c:	bf00      	nop
 800108e:	f7ff fed9 	bl	8000e44 <SPI_RxByte>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0fa      	beq.n	800108e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	2b05      	cmp	r3, #5
 80010a0:	d101      	bne.n	80010a6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80010bc:	f7ff feee 	bl	8000e9c <SD_ReadyWait>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2bff      	cmp	r3, #255	; 0xff
 80010c4:	d001      	beq.n	80010ca <SD_SendCmd+0x1a>
    return 0xFF;
 80010c6:	23ff      	movs	r3, #255	; 0xff
 80010c8:	e040      	b.n	800114c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fe9f 	bl	8000e10 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	0e1b      	lsrs	r3, r3, #24
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fe99 	bl	8000e10 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	0c1b      	lsrs	r3, r3, #16
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fe93 	bl	8000e10 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fe8d 	bl	8000e10 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fe88 	bl	8000e10 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b40      	cmp	r3, #64	; 0x40
 8001108:	d101      	bne.n	800110e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800110a:	2395      	movs	r3, #149	; 0x95
 800110c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b48      	cmp	r3, #72	; 0x48
 8001112:	d101      	bne.n	8001118 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001114:	2387      	movs	r3, #135	; 0x87
 8001116:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fe78 	bl	8000e10 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b4c      	cmp	r3, #76	; 0x4c
 8001124:	d101      	bne.n	800112a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001126:	f7ff fe8d 	bl	8000e44 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800112a:	230a      	movs	r3, #10
 800112c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800112e:	f7ff fe89 	bl	8000e44 <SPI_RxByte>
 8001132:	4603      	mov	r3, r0
 8001134:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001136:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800113a:	2b00      	cmp	r3, #0
 800113c:	da05      	bge.n	800114a <SD_SendCmd+0x9a>
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	3b01      	subs	r3, #1
 8001142:	73bb      	strb	r3, [r7, #14]
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f1      	bne.n	800112e <SD_SendCmd+0x7e>
  
  return res;
 800114a:	7b7b      	ldrb	r3, [r7, #13]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001164:	2301      	movs	r3, #1
 8001166:	e0d5      	b.n	8001314 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001168:	4b6c      	ldr	r3, [pc, #432]	; (800131c <SD_disk_initialize+0x1c8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <SD_disk_initialize+0x2a>
    return Stat;        
 8001176:	4b69      	ldr	r3, [pc, #420]	; (800131c <SD_disk_initialize+0x1c8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	e0ca      	b.n	8001314 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800117e:	f7ff fea9 	bl	8000ed4 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001182:	f7ff fe2d 	bl	8000de0 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800118a:	2100      	movs	r1, #0
 800118c:	2040      	movs	r0, #64	; 0x40
 800118e:	f7ff ff8f 	bl	80010b0 <SD_SendCmd>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 80a5 	bne.w	80012e4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800119a:	4b61      	ldr	r3, [pc, #388]	; (8001320 <SD_disk_initialize+0x1cc>)
 800119c:	2264      	movs	r2, #100	; 0x64
 800119e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80011a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011a4:	2048      	movs	r0, #72	; 0x48
 80011a6:	f7ff ff83 	bl	80010b0 <SD_SendCmd>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d158      	bne.n	8001262 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e00c      	b.n	80011d0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80011b6:	7bfc      	ldrb	r4, [r7, #15]
 80011b8:	f7ff fe44 	bl	8000e44 <SPI_RxByte>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4423      	add	r3, r4
 80011c6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	3301      	adds	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d9ef      	bls.n	80011b6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80011d6:	7abb      	ldrb	r3, [r7, #10]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	f040 8083 	bne.w	80012e4 <SD_disk_initialize+0x190>
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	2baa      	cmp	r3, #170	; 0xaa
 80011e2:	d17f      	bne.n	80012e4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80011e4:	2100      	movs	r1, #0
 80011e6:	2077      	movs	r0, #119	; 0x77
 80011e8:	f7ff ff62 	bl	80010b0 <SD_SendCmd>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d807      	bhi.n	8001202 <SD_disk_initialize+0xae>
 80011f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011f6:	2069      	movs	r0, #105	; 0x69
 80011f8:	f7ff ff5a 	bl	80010b0 <SD_SendCmd>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <SD_disk_initialize+0x1cc>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1eb      	bne.n	80011e4 <SD_disk_initialize+0x90>
 800120c:	e000      	b.n	8001210 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800120e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001210:	4b43      	ldr	r3, [pc, #268]	; (8001320 <SD_disk_initialize+0x1cc>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d064      	beq.n	80012e4 <SD_disk_initialize+0x190>
 800121a:	2100      	movs	r1, #0
 800121c:	207a      	movs	r0, #122	; 0x7a
 800121e:	f7ff ff47 	bl	80010b0 <SD_SendCmd>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d15d      	bne.n	80012e4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e00c      	b.n	8001248 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800122e:	7bfc      	ldrb	r4, [r7, #15]
 8001230:	f7ff fe08 	bl	8000e44 <SPI_RxByte>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4423      	add	r3, r4
 800123e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	3301      	adds	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d9ef      	bls.n	800122e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800124e:	7a3b      	ldrb	r3, [r7, #8]
 8001250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SD_disk_initialize+0x108>
 8001258:	2306      	movs	r3, #6
 800125a:	e000      	b.n	800125e <SD_disk_initialize+0x10a>
 800125c:	2302      	movs	r3, #2
 800125e:	73bb      	strb	r3, [r7, #14]
 8001260:	e040      	b.n	80012e4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001262:	2100      	movs	r1, #0
 8001264:	2077      	movs	r0, #119	; 0x77
 8001266:	f7ff ff23 	bl	80010b0 <SD_SendCmd>
 800126a:	4603      	mov	r3, r0
 800126c:	2b01      	cmp	r3, #1
 800126e:	d808      	bhi.n	8001282 <SD_disk_initialize+0x12e>
 8001270:	2100      	movs	r1, #0
 8001272:	2069      	movs	r0, #105	; 0x69
 8001274:	f7ff ff1c 	bl	80010b0 <SD_SendCmd>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d801      	bhi.n	8001282 <SD_disk_initialize+0x12e>
 800127e:	2302      	movs	r3, #2
 8001280:	e000      	b.n	8001284 <SD_disk_initialize+0x130>
 8001282:	2301      	movs	r3, #1
 8001284:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d10e      	bne.n	80012aa <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800128c:	2100      	movs	r1, #0
 800128e:	2077      	movs	r0, #119	; 0x77
 8001290:	f7ff ff0e 	bl	80010b0 <SD_SendCmd>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d80e      	bhi.n	80012b8 <SD_disk_initialize+0x164>
 800129a:	2100      	movs	r1, #0
 800129c:	2069      	movs	r0, #105	; 0x69
 800129e:	f7ff ff07 	bl	80010b0 <SD_SendCmd>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d107      	bne.n	80012b8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80012a8:	e00d      	b.n	80012c6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80012aa:	2100      	movs	r1, #0
 80012ac:	2041      	movs	r0, #65	; 0x41
 80012ae:	f7ff feff 	bl	80010b0 <SD_SendCmd>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <SD_disk_initialize+0x1cc>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e1      	bne.n	8001286 <SD_disk_initialize+0x132>
 80012c2:	e000      	b.n	80012c6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80012c4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <SD_disk_initialize+0x1cc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <SD_disk_initialize+0x18c>
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	2050      	movs	r0, #80	; 0x50
 80012d6:	f7ff feeb 	bl	80010b0 <SD_SendCmd>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80012e4:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <SD_disk_initialize+0x1d0>)
 80012e6:	7bbb      	ldrb	r3, [r7, #14]
 80012e8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80012ea:	f7ff fd85 	bl	8000df8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80012ee:	f7ff fda9 	bl	8000e44 <SPI_RxByte>
  
  if (type) 
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <SD_disk_initialize+0x1c8>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SD_disk_initialize+0x1c8>)
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e001      	b.n	800130e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800130a:	f7ff fe2f 	bl	8000f6c <SD_PowerOff>
  }
  
  return Stat;
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <SD_disk_initialize+0x1c8>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2db      	uxtb	r3, r3
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	20014950 	.word	0x20014950
 8001324:	2000028c 	.word	0x2000028c

08001328 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001338:	2301      	movs	r3, #1
 800133a:	e002      	b.n	8001342 <SD_disk_status+0x1a>
  
  return Stat;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SD_disk_status+0x28>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000000 	.word	0x20000000

08001354 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <SD_disk_read+0x1c>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <SD_disk_read+0x20>
    return RES_PARERR;
 8001370:	2304      	movs	r3, #4
 8001372:	e051      	b.n	8001418 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <SD_disk_read+0xcc>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001382:	2303      	movs	r3, #3
 8001384:	e048      	b.n	8001418 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <SD_disk_read+0xd0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	025b      	lsls	r3, r3, #9
 8001396:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001398:	f7ff fd22 	bl	8000de0 <SELECT>
  
  if (count == 1) 
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d111      	bne.n	80013c6 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	2051      	movs	r0, #81	; 0x51
 80013a6:	f7ff fe83 	bl	80010b0 <SD_SendCmd>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d129      	bne.n	8001404 <SD_disk_read+0xb0>
 80013b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f7ff fdf1 	bl	8000f9c <SD_RxDataBlock>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d021      	beq.n	8001404 <SD_disk_read+0xb0>
      count = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	e01e      	b.n	8001404 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	2052      	movs	r0, #82	; 0x52
 80013ca:	f7ff fe71 	bl	80010b0 <SD_SendCmd>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d117      	bne.n	8001404 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80013d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d8:	68b8      	ldr	r0, [r7, #8]
 80013da:	f7ff fddf 	bl	8000f9c <SD_RxDataBlock>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00a      	beq.n	80013fa <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013ea:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1ed      	bne.n	80013d4 <SD_disk_read+0x80>
 80013f8:	e000      	b.n	80013fc <SD_disk_read+0xa8>
          break;
 80013fa:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80013fc:	2100      	movs	r1, #0
 80013fe:	204c      	movs	r0, #76	; 0x4c
 8001400:	f7ff fe56 	bl	80010b0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001404:	f7ff fcf8 	bl	8000df8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001408:	f7ff fd1c 	bl	8000e44 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000000 	.word	0x20000000
 8001424:	2000028c 	.word	0x2000028c

08001428 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	4603      	mov	r3, r0
 8001436:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <SD_disk_write+0x1c>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <SD_disk_write+0x20>
    return RES_PARERR;
 8001444:	2304      	movs	r3, #4
 8001446:	e06b      	b.n	8001520 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001448:	4b37      	ldr	r3, [pc, #220]	; (8001528 <SD_disk_write+0x100>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001456:	2303      	movs	r3, #3
 8001458:	e062      	b.n	8001520 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <SD_disk_write+0x100>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001468:	2302      	movs	r3, #2
 800146a:	e059      	b.n	8001520 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <SD_disk_write+0x104>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800147e:	f7ff fcaf 	bl	8000de0 <SELECT>
  
  if (count == 1) 
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d110      	bne.n	80014aa <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	2058      	movs	r0, #88	; 0x58
 800148c:	f7ff fe10 	bl	80010b0 <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d13a      	bne.n	800150c <SD_disk_write+0xe4>
 8001496:	21fe      	movs	r1, #254	; 0xfe
 8001498:	68b8      	ldr	r0, [r7, #8]
 800149a:	f7ff fdb5 	bl	8001008 <SD_TxDataBlock>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d033      	beq.n	800150c <SD_disk_write+0xe4>
      count = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	e030      	b.n	800150c <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <SD_disk_write+0x104>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80014b6:	2100      	movs	r1, #0
 80014b8:	2077      	movs	r0, #119	; 0x77
 80014ba:	f7ff fdf9 	bl	80010b0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	2057      	movs	r0, #87	; 0x57
 80014c2:	f7ff fdf5 	bl	80010b0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	2059      	movs	r0, #89	; 0x59
 80014ca:	f7ff fdf1 	bl	80010b0 <SD_SendCmd>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d11b      	bne.n	800150c <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80014d4:	21fc      	movs	r1, #252	; 0xfc
 80014d6:	68b8      	ldr	r0, [r7, #8]
 80014d8:	f7ff fd96 	bl	8001008 <SD_TxDataBlock>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00a      	beq.n	80014f8 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014e8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ee      	bne.n	80014d4 <SD_disk_write+0xac>
 80014f6:	e000      	b.n	80014fa <SD_disk_write+0xd2>
          break;
 80014f8:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80014fa:	21fd      	movs	r1, #253	; 0xfd
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff fd83 	bl	8001008 <SD_TxDataBlock>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <SD_disk_write+0xe4>
      {        
        count = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 800150c:	f7ff fc74 	bl	8000df8 <DESELECT>
  SPI_RxByte();
 8001510:	f7ff fc98 	bl	8000e44 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	bf14      	ite	ne
 800151a:	2301      	movne	r3, #1
 800151c:	2300      	moveq	r3, #0
 800151e:	b2db      	uxtb	r3, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	2000028c 	.word	0x2000028c

08001530 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b08b      	sub	sp, #44	; 0x2c
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	603a      	str	r2, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	460b      	mov	r3, r1
 800153e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800154a:	2304      	movs	r3, #4
 800154c:	e11b      	b.n	8001786 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	2b05      	cmp	r3, #5
 8001558:	d129      	bne.n	80015ae <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d017      	beq.n	8001592 <SD_disk_ioctl+0x62>
 8001562:	2b02      	cmp	r3, #2
 8001564:	dc1f      	bgt.n	80015a6 <SD_disk_ioctl+0x76>
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <SD_disk_ioctl+0x40>
 800156a:	2b01      	cmp	r3, #1
 800156c:	d00b      	beq.n	8001586 <SD_disk_ioctl+0x56>
 800156e:	e01a      	b.n	80015a6 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001570:	f7ff fd08 	bl	8000f84 <SD_CheckPower>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800157a:	f7ff fcf7 	bl	8000f6c <SD_PowerOff>
      res = RES_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001584:	e0fd      	b.n	8001782 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001586:	f7ff fca5 	bl	8000ed4 <SD_PowerOn>
      res = RES_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001590:	e0f7      	b.n	8001782 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	1c5c      	adds	r4, r3, #1
 8001596:	f7ff fcf5 	bl	8000f84 <SD_CheckPower>
 800159a:	4603      	mov	r3, r0
 800159c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015a4:	e0ed      	b.n	8001782 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80015a6:	2304      	movs	r3, #4
 80015a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015ac:	e0e9      	b.n	8001782 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80015ae:	4b78      	ldr	r3, [pc, #480]	; (8001790 <SD_disk_ioctl+0x260>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0e2      	b.n	8001786 <SD_disk_ioctl+0x256>
    
    SELECT();
 80015c0:	f7ff fc0e 	bl	8000de0 <SELECT>
    
    switch (ctrl) 
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	2b0d      	cmp	r3, #13
 80015c8:	f200 80cc 	bhi.w	8001764 <SD_disk_ioctl+0x234>
 80015cc:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <SD_disk_ioctl+0xa4>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	080016cf 	.word	0x080016cf
 80015d8:	0800160d 	.word	0x0800160d
 80015dc:	080016bf 	.word	0x080016bf
 80015e0:	08001765 	.word	0x08001765
 80015e4:	08001765 	.word	0x08001765
 80015e8:	08001765 	.word	0x08001765
 80015ec:	08001765 	.word	0x08001765
 80015f0:	08001765 	.word	0x08001765
 80015f4:	08001765 	.word	0x08001765
 80015f8:	08001765 	.word	0x08001765
 80015fc:	08001765 	.word	0x08001765
 8001600:	080016e1 	.word	0x080016e1
 8001604:	08001705 	.word	0x08001705
 8001608:	08001729 	.word	0x08001729
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800160c:	2100      	movs	r1, #0
 800160e:	2049      	movs	r0, #73	; 0x49
 8001610:	f7ff fd4e 	bl	80010b0 <SD_SendCmd>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 80a8 	bne.w	800176c <SD_disk_ioctl+0x23c>
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2110      	movs	r1, #16
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fcba 	bl	8000f9c <SD_RxDataBlock>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 809e 	beq.w	800176c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001630:	7b3b      	ldrb	r3, [r7, #12]
 8001632:	099b      	lsrs	r3, r3, #6
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10e      	bne.n	8001658 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800163a:	7d7b      	ldrb	r3, [r7, #21]
 800163c:	b29a      	uxth	r2, r3
 800163e:	7d3b      	ldrb	r3, [r7, #20]
 8001640:	b29b      	uxth	r3, r3
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b29b      	uxth	r3, r3
 8001646:	4413      	add	r3, r2
 8001648:	b29b      	uxth	r3, r3
 800164a:	3301      	adds	r3, #1
 800164c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800164e:	8bfb      	ldrh	r3, [r7, #30]
 8001650:	029a      	lsls	r2, r3, #10
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e02e      	b.n	80016b6 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001658:	7c7b      	ldrb	r3, [r7, #17]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	b2da      	uxtb	r2, r3
 8001660:	7dbb      	ldrb	r3, [r7, #22]
 8001662:	09db      	lsrs	r3, r3, #7
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4413      	add	r3, r2
 8001668:	b2da      	uxtb	r2, r3
 800166a:	7d7b      	ldrb	r3, [r7, #21]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 0306 	and.w	r3, r3, #6
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3302      	adds	r3, #2
 800167c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001680:	7d3b      	ldrb	r3, [r7, #20]
 8001682:	099b      	lsrs	r3, r3, #6
 8001684:	b2db      	uxtb	r3, r3
 8001686:	b29a      	uxth	r2, r3
 8001688:	7cfb      	ldrb	r3, [r7, #19]
 800168a:	b29b      	uxth	r3, r3
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	b29b      	uxth	r3, r3
 8001690:	4413      	add	r3, r2
 8001692:	b29a      	uxth	r2, r3
 8001694:	7cbb      	ldrb	r3, [r7, #18]
 8001696:	029b      	lsls	r3, r3, #10
 8001698:	b29b      	uxth	r3, r3
 800169a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80016a8:	8bfa      	ldrh	r2, [r7, #30]
 80016aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016ae:	3b09      	subs	r3, #9
 80016b0:	409a      	lsls	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80016bc:	e056      	b.n	800176c <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016cc:	e055      	b.n	800177a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80016ce:	f7ff fbe5 	bl	8000e9c <SD_ReadyWait>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2bff      	cmp	r3, #255	; 0xff
 80016d6:	d14b      	bne.n	8001770 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016de:	e047      	b.n	8001770 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80016e0:	2100      	movs	r1, #0
 80016e2:	2049      	movs	r0, #73	; 0x49
 80016e4:	f7ff fce4 	bl	80010b0 <SD_SendCmd>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d142      	bne.n	8001774 <SD_disk_ioctl+0x244>
 80016ee:	2110      	movs	r1, #16
 80016f0:	6a38      	ldr	r0, [r7, #32]
 80016f2:	f7ff fc53 	bl	8000f9c <SD_RxDataBlock>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d03b      	beq.n	8001774 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001702:	e037      	b.n	8001774 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001704:	2100      	movs	r1, #0
 8001706:	204a      	movs	r0, #74	; 0x4a
 8001708:	f7ff fcd2 	bl	80010b0 <SD_SendCmd>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d132      	bne.n	8001778 <SD_disk_ioctl+0x248>
 8001712:	2110      	movs	r1, #16
 8001714:	6a38      	ldr	r0, [r7, #32]
 8001716:	f7ff fc41 	bl	8000f9c <SD_RxDataBlock>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d02b      	beq.n	8001778 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001726:	e027      	b.n	8001778 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001728:	2100      	movs	r1, #0
 800172a:	207a      	movs	r0, #122	; 0x7a
 800172c:	f7ff fcc0 	bl	80010b0 <SD_SendCmd>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d116      	bne.n	8001764 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800173c:	e00b      	b.n	8001756 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800173e:	6a3c      	ldr	r4, [r7, #32]
 8001740:	1c63      	adds	r3, r4, #1
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	f7ff fb7e 	bl	8000e44 <SPI_RxByte>
 8001748:	4603      	mov	r3, r0
 800174a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800174c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001750:	3301      	adds	r3, #1
 8001752:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800175a:	2b03      	cmp	r3, #3
 800175c:	d9ef      	bls.n	800173e <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001764:	2304      	movs	r3, #4
 8001766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800176a:	e006      	b.n	800177a <SD_disk_ioctl+0x24a>
      break;
 800176c:	bf00      	nop
 800176e:	e004      	b.n	800177a <SD_disk_ioctl+0x24a>
      break;
 8001770:	bf00      	nop
 8001772:	e002      	b.n	800177a <SD_disk_ioctl+0x24a>
      break;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <SD_disk_ioctl+0x24a>
      break;
 8001778:	bf00      	nop
    }
    
    DESELECT();
 800177a:	f7ff fb3d 	bl	8000df8 <DESELECT>
    SPI_RxByte();
 800177e:	f7ff fb61 	bl	8000e44 <SPI_RxByte>
  }
  
  return res;
 8001782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001786:	4618      	mov	r0, r3
 8001788:	372c      	adds	r7, #44	; 0x2c
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	20000000 	.word	0x20000000

08001794 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001798:	f3bf 8f4f 	dsb	sy
}
 800179c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800179e:	f3bf 8f6f 	isb	sy
}
 80017a2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <SCB_EnableICache+0x48>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80017ac:	f3bf 8f4f 	dsb	sy
}
 80017b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017b2:	f3bf 8f6f 	isb	sy
}
 80017b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <SCB_EnableICache+0x48>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <SCB_EnableICache+0x48>)
 80017be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017c4:	f3bf 8f4f 	dsb	sy
}
 80017c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017ca:	f3bf 8f6f 	isb	sy
}
 80017ce:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <SCB_EnableDCache+0x84>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017ee:	f3bf 8f4f 	dsb	sy
}
 80017f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <SCB_EnableDCache+0x84>)
 80017f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017fa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	0b5b      	lsrs	r3, r3, #13
 8001800:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001804:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800180e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001818:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800181e:	4911      	ldr	r1, [pc, #68]	; (8001864 <SCB_EnableDCache+0x84>)
 8001820:	4313      	orrs	r3, r2
 8001822:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	60ba      	str	r2, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ef      	bne.n	8001810 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1e5a      	subs	r2, r3, #1
 8001834:	60fa      	str	r2, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1e5      	bne.n	8001806 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800183a:	f3bf 8f4f 	dsb	sy
}
 800183e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <SCB_EnableDCache+0x84>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <SCB_EnableDCache+0x84>)
 8001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800184c:	f3bf 8f4f 	dsb	sy
}
 8001850:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001852:	f3bf 8f6f 	isb	sy
}
 8001856:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800187a:	2320      	movs	r3, #32
 800187c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800187e:	f3bf 8f4f 	dsb	sy
}
 8001882:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8001884:	e00b      	b.n	800189e <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <SCB_CleanDCache_by_Addr+0x54>)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4413      	add	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	dcf0      	bgt.n	8001886 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80018a4:	f3bf 8f4f 	dsb	sy
}
 80018a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018aa:	f3bf 8f6f 	isb	sy
}
 80018ae:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80018b0:	bf00      	nop
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <HAL_SPI_TxRxCpltCallback>:
/* USER CODE BEGIN 0 */



//void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

	isWaitingForData = 0;
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_SPI_TxRxCpltCallback+0x1c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]

}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000001 	.word	0x20000001

080018e0 <BSP_SD_WriteCpltCallback>:


void BSP_SD_WriteCpltCallback(void){
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0


	isReadyForNext = 1;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <BSP_SD_WriteCpltCallback+0x14>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]

}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20000002 	.word	0x20000002

080018f8 <HAL_GPIO_EXTI_Callback>:
}*/



// user button instrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ADC_RSV_PIN) {
			isAdcDone = 1;
	}
	*/

	if( ( __HAL_TIM_GET_COUNTER(&htim5) - previousButtonPress ) >=  buttonPressInterval ){
 8001902:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x160>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001908:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x164>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	1ad2      	subs	r2, r2, r3
 800190e:	4b54      	ldr	r3, [pc, #336]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x168>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	f0c0 808f 	bcc.w	8001a36 <HAL_GPIO_EXTI_Callback+0x13e>
		previousButtonPress += ( ( __HAL_TIM_GET_COUNTER(&htim5) ) - previousButtonPress );
 8001918:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x160>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191e:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x164>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1ad2      	subs	r2, r2, r3
 8001924:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x164>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4413      	add	r3, r2
 800192a:	4a4c      	ldr	r2, [pc, #304]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x164>)
 800192c:	6013      	str	r3, [r2, #0]


	if (GPIO_Pin == BUTTON_MEASURE_PIN) {
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d14e      	bne.n	80019d2 <HAL_GPIO_EXTI_Callback+0xda>

		if (isMeasuring == 0) {
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d125      	bne.n	800198a <HAL_GPIO_EXTI_Callback+0x92>

			if( settings.powerSourceEnableMode == 1 ){
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x170>)
 8001940:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10a      	bne.n	800195e <HAL_GPIO_EXTI_Callback+0x66>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	2110      	movs	r1, #16
 800194c:	4847      	ldr	r0, [pc, #284]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x174>)
 800194e:	f008 f85b 	bl	8009a08 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001958:	4845      	ldr	r0, [pc, #276]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x178>)
 800195a:	f008 f855 	bl	8009a08 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 1;
				  //send_uart3("Power Source: ENABLED\n");
			 }

			//isLoggingToConsole = 1;
			if(settings.isTriggerActive == 0)
 800195e:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x170>)
 8001960:	7b5b      	ldrb	r3, [r3, #13]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_GPIO_EXTI_Callback+0x74>
				isMeasuring = 1;
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 1;
 800196c:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x17c>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 0;
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x180>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197e:	483f      	ldr	r0, [pc, #252]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x184>)
 8001980:	f008 f842 	bl	8009a08 <HAL_GPIO_WritePin>
			buzzerOn();
 8001984:	f000 f88a 	bl	8001a9c <buzzerOn>
 8001988:	e023      	b.n	80019d2 <HAL_GPIO_EXTI_Callback+0xda>

		} else {


			if( settings.powerSourceEnableMode == 1){
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x170>)
 800198c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10a      	bne.n	80019aa <HAL_GPIO_EXTI_Callback+0xb2>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2110      	movs	r1, #16
 8001998:	4834      	ldr	r0, [pc, #208]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x174>)
 800199a:	f008 f835 	bl	8009a08 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a4:	4832      	ldr	r0, [pc, #200]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x178>)
 80019a6:	f008 f82f 	bl	8009a08 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 0;
				  //send_uart3("Power Source: DISABLED\n");
			 }

			isMeasuring = 0;
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x16c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
			isTriggered = 0;
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x188>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 0;
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x17c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 1;
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x180>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c8:	482c      	ldr	r0, [pc, #176]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x184>)
 80019ca:	f008 f81d 	bl	8009a08 <HAL_GPIO_WritePin>
			buzzerOff();
 80019ce:	f000 f86c 	bl	8001aaa <buzzerOff>
		}

	}
	if (GPIO_Pin == ADC_ALARM_PIN && settings.isTriggerActive == 1) {
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	2b04      	cmp	r3, #4
		//isMeasuring = 1;

	}

	if(GPIO_Pin == BUTTON_ENTER_PIN){
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019dc:	d103      	bne.n	80019e6 <HAL_GPIO_EXTI_Callback+0xee>

		isEnterTriggered = 1;
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x18c>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
		//isEnterTriggered = 0;

	}


}
 80019e4:	e033      	b.n	8001a4e <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_ESC_PIN){
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ec:	d103      	bne.n	80019f6 <HAL_GPIO_EXTI_Callback+0xfe>
		isEscTriggered = 1;
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x190>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
}
 80019f4:	e02b      	b.n	8001a4e <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_UP_PIN){
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fc:	d103      	bne.n	8001a06 <HAL_GPIO_EXTI_Callback+0x10e>
		isUpTriggered = 1;
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x194>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
}
 8001a04:	e023      	b.n	8001a4e <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_DOWN_PIN){
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a0c:	d103      	bne.n	8001a16 <HAL_GPIO_EXTI_Callback+0x11e>
		isDownTriggered = 1;
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x198>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
}
 8001a14:	e01b      	b.n	8001a4e <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_LEFT_PIN){
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a1c:	d103      	bne.n	8001a26 <HAL_GPIO_EXTI_Callback+0x12e>
		isLeftTriggered = 1;
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
}
 8001a24:	e013      	b.n	8001a4e <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_RIGHT_PIN){
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2c:	d10f      	bne.n	8001a4e <HAL_GPIO_EXTI_Callback+0x156>
		isRightTriggered = 1;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
}
 8001a34:	e00b      	b.n	8001a4e <HAL_GPIO_EXTI_Callback+0x156>
		isDownTriggered = 0;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x198>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
		isUpTriggered = 0;
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x194>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
		isLeftTriggered = 0;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		isRightTriggered = 0;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20011f98 	.word	0x20011f98
 8001a5c:	2000031c 	.word	0x2000031c
 8001a60:	20000004 	.word	0x20000004
 8001a64:	20000322 	.word	0x20000322
 8001a68:	20000018 	.word	0x20000018
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	20000320 	.word	0x20000320
 8001a78:	20000321 	.word	0x20000321
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	20000314 	.word	0x20000314
 8001a84:	20000315 	.word	0x20000315
 8001a88:	20000316 	.word	0x20000316
 8001a8c:	20000317 	.word	0x20000317
 8001a90:	20000318 	.word	0x20000318
 8001a94:	20000319 	.word	0x20000319
 8001a98:	2000031a 	.word	0x2000031a

08001a9c <buzzerOn>:

// Enable buzzer
void buzzerOn(){
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
	//htim1.Instance->CCR1 = 75;
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <buzzerOff>:

// Disable buzzer
void buzzerOff(){
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <send_uart>:

/* to send the data to the uart */
void send_uart(char *string) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7fe fbc7 	bl	8000254 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	81fb      	strh	r3, [r7, #14]

	SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
 8001aca:	89fb      	ldrh	r3, [r7, #14]
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff feca 	bl	8001868 <SCB_CleanDCache_by_Addr>

	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking

	//isReadyForNext = 0;
	HAL_UART_Transmit_DMA(&huart6, (uint8_t*) string, len);
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <send_uart+0x30>)
 8001adc:	f00f fc36 	bl	801134c <HAL_UART_Transmit_DMA>
	//while(isReadyForNext == 0);

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20011dec 	.word	0x20011dec

08001aec <send_uart2>:

void send_uart2(char *string) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7fe fbad 	bl	8000254 <strlen>
 8001afa:	4603      	mov	r3, r0
 8001afc:	81fb      	strh	r3, [r7, #14]

	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);

	UARTAddToTxBuff2(string, len);
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f006 fa74 	bl	8007ff0 <UARTAddToTxBuff2>

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <send_uart3>:

void send_uart3(char *string) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7fe fb9b 	bl	8000254 <strlen>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	81fb      	strh	r3, [r7, #14]

	//SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
	//HAL_UART_Transmit_DMA(&huart3, (uint8_t*) string, len);
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);
	UARTAddToTxBuff(string, len);
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	4619      	mov	r1, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f006 fa4e 	bl	8007fc8 <UARTAddToTxBuff>

}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <bufclear>:
	return i;
}

/* to clear buffer */
void bufclear(void)  // clear buffer
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	e007      	b.n	8001b50 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b40:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <bufclear+0x34>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b56:	dbf3      	blt.n	8001b40 <bufclear+0xc>
	}
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20003040 	.word	0x20003040

08001b6c <microDelay>:

// 1us base delay function
void microDelay(uint16_t delay) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <microDelay+0x30>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8001b7e:	bf00      	nop
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <microDelay+0x30>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3f9      	bcc.n	8001b80 <microDelay+0x14>

}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20011f58 	.word	0x20011f58

08001ba0 <eepromReadEEPROM>:


HAL_StatusTypeDef eepromReadEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af04      	add	r7, sp, #16
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	80fb      	strh	r3, [r7, #6]
 8001bac:	4613      	mov	r3, r2
 8001bae:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8001bb8:	e03b      	b.n	8001c32 <eepromReadEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 8001bba:	88ba      	ldrh	r2, [r7, #4]
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	2b3f      	cmp	r3, #63	; 0x3f
 8001bc6:	d918      	bls.n	8001bfa <eepromReadEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <eepromReadEEPROM+0xac>)
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	89fb      	ldrh	r3, [r7, #14]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b299      	uxth	r1, r3
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	2232      	movs	r2, #50	; 0x32
 8001bdc:	9202      	str	r2, [sp, #8]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	9201      	str	r2, [sp, #4]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2302      	movs	r3, #2
 8001be6:	460a      	mov	r2, r1
 8001be8:	21a0      	movs	r1, #160	; 0xa0
 8001bea:	f009 ffdb 	bl	800bba4 <HAL_I2C_Mem_Read>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	3340      	adds	r3, #64	; 0x40
 8001bf6:	81fb      	strh	r3, [r7, #14]
 8001bf8:	e018      	b.n	8001c2c <eepromReadEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <eepromReadEEPROM+0xac>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	88fa      	ldrh	r2, [r7, #6]
 8001c00:	89fb      	ldrh	r3, [r7, #14]
 8001c02:	4413      	add	r3, r2
 8001c04:	b299      	uxth	r1, r3
 8001c06:	89fb      	ldrh	r3, [r7, #14]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2232      	movs	r2, #50	; 0x32
 8001c0e:	9202      	str	r2, [sp, #8]
 8001c10:	897a      	ldrh	r2, [r7, #10]
 8001c12:	9201      	str	r2, [sp, #4]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2302      	movs	r3, #2
 8001c18:	460a      	mov	r2, r1
 8001c1a:	21a0      	movs	r1, #160	; 0xa0
 8001c1c:	f009 ffc2 	bl	800bba4 <HAL_I2C_Mem_Read>
 8001c20:	4603      	mov	r3, r0
 8001c22:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 8001c24:	89fa      	ldrh	r2, [r7, #14]
 8001c26:	897b      	ldrh	r3, [r7, #10]
 8001c28:	4413      	add	r3, r2
 8001c2a:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE / 2);
 8001c2c:	2005      	movs	r0, #5
 8001c2e:	f006 fbed 	bl	800840c <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 8001c32:	89fa      	ldrh	r2, [r7, #14]
 8001c34:	88bb      	ldrh	r3, [r7, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d202      	bcs.n	8001c40 <eepromReadEEPROM+0xa0>
 8001c3a:	7b7b      	ldrb	r3, [r7, #13]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0bc      	beq.n	8001bba <eepromReadEEPROM+0x1a>
	}
	return Result;
 8001c40:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000010 	.word	0x20000010

08001c50 <eepromWriteEEPROM>:

HAL_StatusTypeDef eepromWriteEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	80fb      	strh	r3, [r7, #6]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8001c68:	e03b      	b.n	8001ce2 <eepromWriteEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 8001c6a:	88ba      	ldrh	r2, [r7, #4]
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 8001c72:	897b      	ldrh	r3, [r7, #10]
 8001c74:	2b3f      	cmp	r3, #63	; 0x3f
 8001c76:	d918      	bls.n	8001caa <eepromWriteEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <eepromWriteEEPROM+0xac>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	88fa      	ldrh	r2, [r7, #6]
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	4413      	add	r3, r2
 8001c82:	b299      	uxth	r1, r3
 8001c84:	89fb      	ldrh	r3, [r7, #14]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	2232      	movs	r2, #50	; 0x32
 8001c8c:	9202      	str	r2, [sp, #8]
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	9201      	str	r2, [sp, #4]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2302      	movs	r3, #2
 8001c96:	460a      	mov	r2, r1
 8001c98:	21a0      	movs	r1, #160	; 0xa0
 8001c9a:	f009 fe6f 	bl	800b97c <HAL_I2C_Mem_Write>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 8001ca2:	89fb      	ldrh	r3, [r7, #14]
 8001ca4:	3340      	adds	r3, #64	; 0x40
 8001ca6:	81fb      	strh	r3, [r7, #14]
 8001ca8:	e018      	b.n	8001cdc <eepromWriteEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <eepromWriteEEPROM+0xac>)
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	88fa      	ldrh	r2, [r7, #6]
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b299      	uxth	r1, r3
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	2232      	movs	r2, #50	; 0x32
 8001cbe:	9202      	str	r2, [sp, #8]
 8001cc0:	897a      	ldrh	r2, [r7, #10]
 8001cc2:	9201      	str	r2, [sp, #4]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	460a      	mov	r2, r1
 8001cca:	21a0      	movs	r1, #160	; 0xa0
 8001ccc:	f009 fe56 	bl	800b97c <HAL_I2C_Mem_Write>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 8001cd4:	89fa      	ldrh	r2, [r7, #14]
 8001cd6:	897b      	ldrh	r3, [r7, #10]
 8001cd8:	4413      	add	r3, r2
 8001cda:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE);
 8001cdc:	200a      	movs	r0, #10
 8001cde:	f006 fb95 	bl	800840c <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 8001ce2:	89fa      	ldrh	r2, [r7, #14]
 8001ce4:	88bb      	ldrh	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d202      	bcs.n	8001cf0 <eepromWriteEEPROM+0xa0>
 8001cea:	7b7b      	ldrb	r3, [r7, #13]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0bc      	beq.n	8001c6a <eepromWriteEEPROM+0x1a>
	}
	return Result;
 8001cf0:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000010 	.word	0x20000010

08001d00 <writeEEPROM_AT24>:
	uint8_t isLoggingToEthernet;
	//double ADC_RESOLUTION;

};*/

void writeEEPROM_AT24(){
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	466b      	mov	r3, sp
 8001d08:	461d      	mov	r5, r3

	uint8_t dataLength = 36;
 8001d0a:	2324      	movs	r3, #36	; 0x24
 8001d0c:	75fb      	strb	r3, [r7, #23]
	uint8_t dataBuffer [dataLength];
 8001d0e:	7dfc      	ldrb	r4, [r7, #23]
 8001d10:	4623      	mov	r3, r4
 8001d12:	3b01      	subs	r3, #1
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	b2e0      	uxtb	r0, r4
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	00cb      	lsls	r3, r1, #3
 8001d26:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d2a:	00c2      	lsls	r2, r0, #3
 8001d2c:	b2e0      	uxtb	r0, r4
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	00cb      	lsls	r3, r1, #3
 8001d3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d40:	00c2      	lsls	r2, r0, #3
 8001d42:	4623      	mov	r3, r4
 8001d44:	3307      	adds	r3, #7
 8001d46:	08db      	lsrs	r3, r3, #3
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	ebad 0d03 	sub.w	sp, sp, r3
 8001d4e:	466b      	mov	r3, sp
 8001d50:	3300      	adds	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
	uint64_t buffer64 = 0;
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9c7 2300 	strd	r2, r3, [r7]


	dataBuffer[0] = settings.isLoggingToConsole;
 8001d60:	4ba3      	ldr	r3, [pc, #652]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	701a      	strb	r2, [r3, #0]
	dataBuffer[1] = settings.isLoggingToSD;
 8001d68:	4ba1      	ldr	r3, [pc, #644]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001d6a:	785a      	ldrb	r2, [r3, #1]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	705a      	strb	r2, [r3, #1]
	dataBuffer[2] = settings.measuringInterval>>24;
 8001d70:	4b9f      	ldr	r3, [pc, #636]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	0e1b      	lsrs	r3, r3, #24
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	709a      	strb	r2, [r3, #2]
	dataBuffer[3] = settings.measuringInterval>>16;
 8001d7c:	4b9c      	ldr	r3, [pc, #624]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	70da      	strb	r2, [r3, #3]
	dataBuffer[4] = settings.measuringInterval>>8;
 8001d88:	4b99      	ldr	r3, [pc, #612]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	711a      	strb	r2, [r3, #4]
	dataBuffer[5] = settings.measuringInterval;
 8001d94:	4b96      	ldr	r3, [pc, #600]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	715a      	strb	r2, [r3, #5]
	dataBuffer[6] = settings.samplingInterval>>24;
 8001d9e:	4b94      	ldr	r3, [pc, #592]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0e1b      	lsrs	r3, r3, #24
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	719a      	strb	r2, [r3, #6]
	dataBuffer[7] = settings.samplingInterval>>16;
 8001daa:	4b91      	ldr	r3, [pc, #580]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0c1b      	lsrs	r3, r3, #16
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	71da      	strb	r2, [r3, #7]
	dataBuffer[8] = settings.samplingInterval>>8;
 8001db6:	4b8e      	ldr	r3, [pc, #568]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	721a      	strb	r2, [r3, #8]
	dataBuffer[9] = settings.samplingInterval;
 8001dc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	725a      	strb	r2, [r3, #9]
	dataBuffer[10] = settings.isAveraging;
 8001dcc:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001dce:	7b1a      	ldrb	r2, [r3, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	729a      	strb	r2, [r3, #10]
	dataBuffer[11] = settings.isTriggerActive;
 8001dd4:	4b86      	ldr	r3, [pc, #536]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001dd6:	7b5a      	ldrb	r2, [r3, #13]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	72da      	strb	r2, [r3, #11]

	buffer64 = settings.triggerLevel*1000000000;
 8001ddc:	4b84      	ldr	r3, [pc, #528]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001dde:	ed93 7b04 	vldr	d7, [r3, #16]
 8001de2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001fe8 <writeEEPROM_AT24+0x2e8>
 8001de6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dea:	ec51 0b17 	vmov	r0, r1, d7
 8001dee:	f7fe fc63 	bl	80006b8 <__aeabi_d2ulz>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	e9c7 2300 	strd	r2, r3, [r7]
	dataBuffer[12] = buffer64>>56;
 8001dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	0e0a      	lsrs	r2, r1, #24
 8001e08:	2300      	movs	r3, #0
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	731a      	strb	r2, [r3, #12]
	dataBuffer[13] = buffer64>>48;
 8001e10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	0c0a      	lsrs	r2, r1, #16
 8001e1e:	2300      	movs	r3, #0
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	735a      	strb	r2, [r3, #13]
	dataBuffer[14] = buffer64>>40;
 8001e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	0a0a      	lsrs	r2, r1, #8
 8001e34:	2300      	movs	r3, #0
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	739a      	strb	r2, [r3, #14]
	dataBuffer[15] = buffer64>>32;
 8001e3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	000a      	movs	r2, r1
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	73da      	strb	r2, [r3, #15]
	dataBuffer[16] = buffer64>>24;
 8001e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	0e02      	lsrs	r2, r0, #24
 8001e60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e64:	0e0b      	lsrs	r3, r1, #24
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	741a      	strb	r2, [r3, #16]
	dataBuffer[17] = buffer64>>16;
 8001e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	0c02      	lsrs	r2, r0, #16
 8001e7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e7e:	0c0b      	lsrs	r3, r1, #16
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	745a      	strb	r2, [r3, #17]
	dataBuffer[18] = buffer64>>8;
 8001e86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	0a02      	lsrs	r2, r0, #8
 8001e94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001e98:	0a0b      	lsrs	r3, r1, #8
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	749a      	strb	r2, [r3, #18]
	dataBuffer[19] = buffer64;
 8001ea0:	783a      	ldrb	r2, [r7, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	74da      	strb	r2, [r3, #19]

	buffer64 = settings.lastOffsetValue*1000000000;
 8001ea6:	4b52      	ldr	r3, [pc, #328]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001ea8:	ed93 7b06 	vldr	d7, [r3, #24]
 8001eac:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001fe8 <writeEEPROM_AT24+0x2e8>
 8001eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001eb4:	ec51 0b17 	vmov	r0, r1, d7
 8001eb8:	f7fe fbfe 	bl	80006b8 <__aeabi_d2ulz>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	e9c7 2300 	strd	r2, r3, [r7]
	dataBuffer[20] = buffer64>>56;
 8001ec4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	0e0a      	lsrs	r2, r1, #24
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	751a      	strb	r2, [r3, #20]
	dataBuffer[21] = buffer64>>48;
 8001eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	0c0a      	lsrs	r2, r1, #16
 8001ee8:	2300      	movs	r3, #0
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	755a      	strb	r2, [r3, #21]
	dataBuffer[22] = buffer64>>40;
 8001ef0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	0a0a      	lsrs	r2, r1, #8
 8001efe:	2300      	movs	r3, #0
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	759a      	strb	r2, [r3, #22]
	dataBuffer[23] = buffer64>>32;
 8001f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	000a      	movs	r2, r1
 8001f14:	2300      	movs	r3, #0
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	75da      	strb	r2, [r3, #23]
	dataBuffer[24] = buffer64>>24;
 8001f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	0e02      	lsrs	r2, r0, #24
 8001f2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f2e:	0e0b      	lsrs	r3, r1, #24
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	761a      	strb	r2, [r3, #24]
	dataBuffer[25] = buffer64>>16;
 8001f36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	0c02      	lsrs	r2, r0, #16
 8001f44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f48:	0c0b      	lsrs	r3, r1, #16
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	765a      	strb	r2, [r3, #25]
	dataBuffer[26] = buffer64>>8;
 8001f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	0a02      	lsrs	r2, r0, #8
 8001f5e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f62:	0a0b      	lsrs	r3, r1, #8
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	769a      	strb	r2, [r3, #26]
	dataBuffer[27] = buffer64;
 8001f6a:	783a      	ldrb	r2, [r7, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	76da      	strb	r2, [r3, #27]

	dataBuffer[28] = settings.powerSourceVoltage>>8;
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001f72:	8c1b      	ldrh	r3, [r3, #32]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	771a      	strb	r2, [r3, #28]
	dataBuffer[29] = settings.powerSourceVoltage;
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001f80:	8c1b      	ldrh	r3, [r3, #32]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	775a      	strb	r2, [r3, #29]

	dataBuffer[30] = settings.powerSourceCurrent>>8;
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001f8a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	779a      	strb	r2, [r3, #30]
	dataBuffer[31] = settings.powerSourceCurrent;
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001f98:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	77da      	strb	r2, [r3, #31]

	dataBuffer[32] = settings.powerSourceEnable;
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001fa2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f883 2020 	strb.w	r2, [r3, #32]
	dataBuffer[33] = settings.powerSourceEnableMode;
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001fae:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	dataBuffer[34] = settings.isLoggingToUSB;
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001fba:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dataBuffer[35] = settings.isLoggingToEthernet;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <writeEEPROM_AT24+0x2f0>)
 8001fc6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	//at24_HAL_WriteBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, dataLength);
	eepromWriteEEPROM(0, &dataBuffer, dataLength);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	7dfa      	ldrb	r2, [r7, #23]
 8001fd4:	b292      	uxth	r2, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff fe39 	bl	8001c50 <eepromWriteEEPROM>
 8001fde:	46ad      	mov	sp, r5


}
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	41cdcd65 	.word	0x41cdcd65
 8001ff0:	20000018 	.word	0x20000018
 8001ff4:	00000000 	.word	0x00000000

08001ff8 <readEEPROM_AT24>:

void readEEPROM_AT24(){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b096      	sub	sp, #88	; 0x58
 8001ffc:	af00      	add	r7, sp, #0

	uint8_t buffer8 = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t buffer32 = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t buffer16 = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint64_t buffer64 = 0;
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	uint8_t dataBuffer [64];

	//at24_HAL_ReadBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, 12);
	eepromReadEEPROM( 0, &dataBuffer, 64);
 800201a:	463b      	mov	r3, r7
 800201c:	2240      	movs	r2, #64	; 0x40
 800201e:	4619      	mov	r1, r3
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fdbd 	bl	8001ba0 <eepromReadEEPROM>

	settings.isLoggingToConsole = dataBuffer[0];
 8002026:	783a      	ldrb	r2, [r7, #0]
 8002028:	4b75      	ldr	r3, [pc, #468]	; (8002200 <readEEPROM_AT24+0x208>)
 800202a:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = dataBuffer[1];
 800202c:	787a      	ldrb	r2, [r7, #1]
 800202e:	4b74      	ldr	r3, [pc, #464]	; (8002200 <readEEPROM_AT24+0x208>)
 8002030:	705a      	strb	r2, [r3, #1]

	buffer32 = dataBuffer[5] | dataBuffer[4] << 8 | dataBuffer[3] << 16 | dataBuffer[2] << 24;
 8002032:	797b      	ldrb	r3, [r7, #5]
 8002034:	461a      	mov	r2, r3
 8002036:	793b      	ldrb	r3, [r7, #4]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	431a      	orrs	r2, r3
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	431a      	orrs	r2, r3
 8002042:	78bb      	ldrb	r3, [r7, #2]
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	4313      	orrs	r3, r2
 8002048:	653b      	str	r3, [r7, #80]	; 0x50
	settings.measuringInterval = buffer32;
 800204a:	4a6d      	ldr	r2, [pc, #436]	; (8002200 <readEEPROM_AT24+0x208>)
 800204c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204e:	6053      	str	r3, [r2, #4]

	buffer32 = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	653b      	str	r3, [r7, #80]	; 0x50
	buffer32 = dataBuffer[9] | dataBuffer[8] << 8 | dataBuffer[7] << 16 | dataBuffer[6] << 24;
 8002054:	7a7b      	ldrb	r3, [r7, #9]
 8002056:	461a      	mov	r2, r3
 8002058:	7a3b      	ldrb	r3, [r7, #8]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	431a      	orrs	r2, r3
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	79bb      	ldrb	r3, [r7, #6]
 8002066:	061b      	lsls	r3, r3, #24
 8002068:	4313      	orrs	r3, r2
 800206a:	653b      	str	r3, [r7, #80]	; 0x50
	settings.samplingInterval = buffer32;
 800206c:	4a64      	ldr	r2, [pc, #400]	; (8002200 <readEEPROM_AT24+0x208>)
 800206e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002070:	6093      	str	r3, [r2, #8]

	settings.isAveraging = dataBuffer[10];
 8002072:	7aba      	ldrb	r2, [r7, #10]
 8002074:	4b62      	ldr	r3, [pc, #392]	; (8002200 <readEEPROM_AT24+0x208>)
 8002076:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = dataBuffer[11];
 8002078:	7afa      	ldrb	r2, [r7, #11]
 800207a:	4b61      	ldr	r3, [pc, #388]	; (8002200 <readEEPROM_AT24+0x208>)
 800207c:	735a      	strb	r2, [r3, #13]

	buffer64 = 0;
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	buffer64 = dataBuffer[19] | dataBuffer[18] << 8 | dataBuffer[17] << 16 | dataBuffer[16] << 24 | dataBuffer[15] << 32 | dataBuffer[14] << 40 | dataBuffer[13] << 48 | dataBuffer[12] << 56;
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	461a      	mov	r2, r3
 800208e:	7cbb      	ldrb	r3, [r7, #18]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	431a      	orrs	r2, r3
 8002094:	7c7b      	ldrb	r3, [r7, #17]
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	431a      	orrs	r2, r3
 800209a:	7c3b      	ldrb	r3, [r7, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	431a      	orrs	r2, r3
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	4619      	mov	r1, r3
 80020a4:	2320      	movs	r3, #32
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	431a      	orrs	r2, r3
 80020ac:	7bbb      	ldrb	r3, [r7, #14]
 80020ae:	4619      	mov	r1, r3
 80020b0:	2328      	movs	r3, #40	; 0x28
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	431a      	orrs	r2, r3
 80020b8:	7b7b      	ldrb	r3, [r7, #13]
 80020ba:	4619      	mov	r1, r3
 80020bc:	2330      	movs	r3, #48	; 0x30
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	431a      	orrs	r2, r3
 80020c4:	7b3b      	ldrb	r3, [r7, #12]
 80020c6:	4619      	mov	r1, r3
 80020c8:	2338      	movs	r3, #56	; 0x38
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	4313      	orrs	r3, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	settings.triggerLevel = buffer64;
 80020da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80020de:	f7fe fa9d 	bl	800061c <__aeabi_ul2d>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4946      	ldr	r1, [pc, #280]	; (8002200 <readEEPROM_AT24+0x208>)
 80020e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	settings.triggerLevel /= 1000000000;
 80020ec:	4b44      	ldr	r3, [pc, #272]	; (8002200 <readEEPROM_AT24+0x208>)
 80020ee:	ed93 6b04 	vldr	d6, [r3, #16]
 80020f2:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80021f8 <readEEPROM_AT24+0x200>
 80020f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <readEEPROM_AT24+0x208>)
 80020fc:	ed83 7b04 	vstr	d7, [r3, #16]

	buffer64 = 0;
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	buffer64 = dataBuffer[27] | dataBuffer[26] << 8 | dataBuffer[25] << 16 | dataBuffer[24] << 24 | dataBuffer[23] << 32 | dataBuffer[22] << 40 | dataBuffer[21] << 48 | dataBuffer[20] << 56;
 800210c:	7efb      	ldrb	r3, [r7, #27]
 800210e:	461a      	mov	r2, r3
 8002110:	7ebb      	ldrb	r3, [r7, #26]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	431a      	orrs	r2, r3
 8002116:	7e7b      	ldrb	r3, [r7, #25]
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	7e3b      	ldrb	r3, [r7, #24]
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	431a      	orrs	r2, r3
 8002122:	7dfb      	ldrb	r3, [r7, #23]
 8002124:	4619      	mov	r1, r3
 8002126:	2320      	movs	r3, #32
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	431a      	orrs	r2, r3
 800212e:	7dbb      	ldrb	r3, [r7, #22]
 8002130:	4619      	mov	r1, r3
 8002132:	2328      	movs	r3, #40	; 0x28
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	7d7b      	ldrb	r3, [r7, #21]
 800213c:	4619      	mov	r1, r3
 800213e:	2330      	movs	r3, #48	; 0x30
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	431a      	orrs	r2, r3
 8002146:	7d3b      	ldrb	r3, [r7, #20]
 8002148:	4619      	mov	r1, r3
 800214a:	2338      	movs	r3, #56	; 0x38
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	461a      	mov	r2, r3
 8002154:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002158:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	settings.lastOffsetValue = buffer64;
 800215c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002160:	f7fe fa5c 	bl	800061c <__aeabi_ul2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4925      	ldr	r1, [pc, #148]	; (8002200 <readEEPROM_AT24+0x208>)
 800216a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	settings.lastOffsetValue /= 1000000000;
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <readEEPROM_AT24+0x208>)
 8002170:	ed93 6b06 	vldr	d6, [r3, #24]
 8002174:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80021f8 <readEEPROM_AT24+0x200>
 8002178:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800217c:	4b20      	ldr	r3, [pc, #128]	; (8002200 <readEEPROM_AT24+0x208>)
 800217e:	ed83 7b06 	vstr	d7, [r3, #24]

	buffer16 = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[29] | dataBuffer[28] << 8;
 8002188:	7f7b      	ldrb	r3, [r7, #29]
 800218a:	b21a      	sxth	r2, r3
 800218c:	7f3b      	ldrb	r3, [r7, #28]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceVoltage = buffer16;
 800219a:	4a19      	ldr	r2, [pc, #100]	; (8002200 <readEEPROM_AT24+0x208>)
 800219c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021a0:	8413      	strh	r3, [r2, #32]

	buffer16 = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[31] | dataBuffer[30] << 8;
 80021a8:	7ffb      	ldrb	r3, [r7, #31]
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	7fbb      	ldrb	r3, [r7, #30]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceCurrent = buffer16;
 80021ba:	4a11      	ldr	r2, [pc, #68]	; (8002200 <readEEPROM_AT24+0x208>)
 80021bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021c0:	8453      	strh	r3, [r2, #34]	; 0x22

	settings.powerSourceEnable = dataBuffer[32];
 80021c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <readEEPROM_AT24+0x208>)
 80021c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = dataBuffer[33];
 80021cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <readEEPROM_AT24+0x208>)
 80021d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	settings.isLoggingToUSB = dataBuffer[34];
 80021d6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <readEEPROM_AT24+0x208>)
 80021dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = dataBuffer[35];
 80021e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <readEEPROM_AT24+0x208>)
 80021e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27



}
 80021ea:	bf00      	nop
 80021ec:	3758      	adds	r7, #88	; 0x58
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	f3af 8000 	nop.w
 80021f8:	00000000 	.word	0x00000000
 80021fc:	41cdcd65 	.word	0x41cdcd65
 8002200:	20000018 	.word	0x20000018
 8002204:	00000000 	.word	0x00000000

08002208 <initEEPROM>:

void initEEPROM (){
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

	settings.isLoggingToConsole = 1;
 800220c:	4b20      	ldr	r3, [pc, #128]	; (8002290 <initEEPROM+0x88>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = 0;
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <initEEPROM+0x88>)
 8002214:	2200      	movs	r2, #0
 8002216:	705a      	strb	r2, [r3, #1]
	settings.isLoggingToUSB = 0;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <initEEPROM+0x88>)
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = 0;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <initEEPROM+0x88>)
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	settings.measuringInterval = 5;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <initEEPROM+0x88>)
 800222a:	2205      	movs	r2, #5
 800222c:	605a      	str	r2, [r3, #4]
	settings.samplingInterval = 100;
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <initEEPROM+0x88>)
 8002230:	2264      	movs	r2, #100	; 0x64
 8002232:	609a      	str	r2, [r3, #8]
	settings.isAveraging = 0;
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <initEEPROM+0x88>)
 8002236:	2200      	movs	r2, #0
 8002238:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = 0;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <initEEPROM+0x88>)
 800223c:	2200      	movs	r2, #0
 800223e:	735a      	strb	r2, [r3, #13]
	settings.triggerLevel = 0.0001;
 8002240:	4913      	ldr	r1, [pc, #76]	; (8002290 <initEEPROM+0x88>)
 8002242:	a311      	add	r3, pc, #68	; (adr r3, 8002288 <initEEPROM+0x80>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	e9c1 2304 	strd	r2, r3, [r1, #16]
	settings.lastOffsetValue = 0.0;
 800224c:	4910      	ldr	r1, [pc, #64]	; (8002290 <initEEPROM+0x88>)
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	e9c1 2306 	strd	r2, r3, [r1, #24]
	settings.powerSourceVoltage = 2500;
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <initEEPROM+0x88>)
 800225c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002260:	841a      	strh	r2, [r3, #32]
	settings.powerSourceCurrent = 250;
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <initEEPROM+0x88>)
 8002264:	22fa      	movs	r2, #250	; 0xfa
 8002266:	845a      	strh	r2, [r3, #34]	; 0x22
	settings.powerSourceEnable = 1;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <initEEPROM+0x88>)
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = 0;
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <initEEPROM+0x88>)
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//eepromSaveObject(settings.isAveraging, 1);


}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	f3af 8000 	nop.w
 8002288:	eb1c432d 	.word	0xeb1c432d
 800228c:	3f1a36e2 	.word	0x3f1a36e2
 8002290:	20000018 	.word	0x20000018
 8002294:	00000000 	.word	0x00000000

08002298 <setPotenciomenters>:
 * // Pot A = Voltage control, Pot B = current limit control
	uint8_t i2cWiperAdressPotA = 0x18;
	uint8_t i2cWiperAdressPotB = 0x4E;
 *
 */
void setPotenciomenters(){
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af02      	add	r7, sp, #8

	uint8_t temp8 = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	double tempDouble = 0;
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double tempDouble2 = 0;
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 80022bc:	4b64      	ldr	r3, [pc, #400]	; (8002450 <setPotenciomenters+0x1b8>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 80022c4:	4b62      	ldr	r3, [pc, #392]	; (8002450 <setPotenciomenters+0x1b8>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	73bb      	strb	r3, [r7, #14]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 80022d4:	4b5f      	ldr	r3, [pc, #380]	; (8002454 <setPotenciomenters+0x1bc>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	737b      	strb	r3, [r7, #13]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 80022dc:	4b5d      	ldr	r3, [pc, #372]	; (8002454 <setPotenciomenters+0x1bc>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	733b      	strb	r3, [r7, #12]

	/*Voltage settings*/
	tempDouble2 = settings.powerSourceVoltage;
 80022ec:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <setPotenciomenters+0x1c0>)
 80022ee:	8c1b      	ldrh	r3, [r3, #32]
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80022f8:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( (tempDouble2 / 1000) / ( VOLTAGE_SENSE_CURRENT * LT3045_NUMBER ) ) - 4700;
 80022fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8002300:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8002428 <setPotenciomenters+0x190>
 8002304:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002308:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8002430 <setPotenciomenters+0x198>
 800230c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002310:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002438 <setPotenciomenters+0x1a0>
 8002314:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002318:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_A_RESOLUTION;
 800231c:	4b4f      	ldr	r3, [pc, #316]	; (800245c <setPotenciomenters+0x1c4>)
 800231e:	ed93 6b00 	vldr	d6, [r3]
 8002322:	ed97 5b06 	vldr	d5, [r7, #24]
 8002326:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800232a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800232e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002332:	793b      	ldrb	r3, [r7, #4]
 8002334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8002338:	4b49      	ldr	r3, [pc, #292]	; (8002460 <setPotenciomenters+0x1c8>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 800233e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002342:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8002346:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800234a:	33fe      	adds	r3, #254	; 0xfe
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <setPotenciomenters+0x1c8>)
 8002350:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 8002352:	4b43      	ldr	r3, [pc, #268]	; (8002460 <setPotenciomenters+0x1c8>)
 8002354:	2200      	movs	r2, #0
 8002356:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	b299      	uxth	r1, r3
 800235c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2302      	movs	r3, #2
 8002364:	4a3e      	ldr	r2, [pc, #248]	; (8002460 <setPotenciomenters+0x1c8>)
 8002366:	483f      	ldr	r0, [pc, #252]	; (8002464 <setPotenciomenters+0x1cc>)
 8002368:	f009 f91e 	bl	800b5a8 <HAL_I2C_Master_Transmit>

	/*Current settings*/
	temp8 = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tempDouble = 0;
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tempDouble2 = 0;
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	e9c7 2304 	strd	r2, r3, [r7, #16]

	HAL_Delay(100);
 800238a:	2064      	movs	r0, #100	; 0x64
 800238c:	f006 f83e 	bl	800840c <HAL_Delay>

	tempDouble2 = settings.powerSourceCurrent;
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <setPotenciomenters+0x1c0>)
 8002392:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002394:	ee07 3a90 	vmov	s15, r3
 8002398:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800239c:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( 150 / tempDouble2 ) * 1000;
 80023a0:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8002440 <setPotenciomenters+0x1a8>
 80023a4:	ed97 6b04 	vldr	d6, [r7, #16]
 80023a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023ac:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002428 <setPotenciomenters+0x190>
 80023b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023b4:	ed87 7b06 	vstr	d7, [r7, #24]
	tempDouble *= LT3045_NUMBER;
	tempDouble -= 330; /// by design 330 ohm inserted
 80023b8:	ed97 7b06 	vldr	d7, [r7, #24]
 80023bc:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8002448 <setPotenciomenters+0x1b0>
 80023c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023c4:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_B_RESOLUTION;
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <setPotenciomenters+0x1d0>)
 80023ca:	ed93 6b00 	vldr	d6, [r3]
 80023ce:	ed97 5b06 	vldr	d5, [r7, #24]
 80023d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023da:	edc7 7a01 	vstr	s15, [r7, #4]
 80023de:	793b      	ldrb	r3, [r7, #4]
 80023e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80023e4:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <setPotenciomenters+0x1c8>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 80023ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ee:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80023f2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80023f6:	33fe      	adds	r3, #254	; 0xfe
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <setPotenciomenters+0x1c8>)
 80023fc:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <setPotenciomenters+0x1c8>)
 8002400:	2200      	movs	r2, #0
 8002402:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrB, &i2cDataToWrite, 2, 1000);
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	b299      	uxth	r1, r3
 8002408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2302      	movs	r3, #2
 8002410:	4a13      	ldr	r2, [pc, #76]	; (8002460 <setPotenciomenters+0x1c8>)
 8002412:	4814      	ldr	r0, [pc, #80]	; (8002464 <setPotenciomenters+0x1cc>)
 8002414:	f009 f8c8 	bl	800b5a8 <HAL_I2C_Master_Transmit>


	HAL_Delay(100);
 8002418:	2064      	movs	r0, #100	; 0x64
 800241a:	f005 fff7 	bl	800840c <HAL_Delay>

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	00000000 	.word	0x00000000
 800242c:	408f4000 	.word	0x408f4000
 8002430:	eb1c432d 	.word	0xeb1c432d
 8002434:	3f1a36e2 	.word	0x3f1a36e2
 8002438:	00000000 	.word	0x00000000
 800243c:	40b25c00 	.word	0x40b25c00
 8002440:	00000000 	.word	0x00000000
 8002444:	4062c000 	.word	0x4062c000
 8002448:	00000000 	.word	0x00000000
 800244c:	4074a000 	.word	0x4074a000
 8002450:	20000058 	.word	0x20000058
 8002454:	20000059 	.word	0x20000059
 8002458:	20000018 	.word	0x20000018
 800245c:	20000048 	.word	0x20000048
 8002460:	20011eac 	.word	0x20011eac
 8002464:	20007568 	.word	0x20007568
 8002468:	20000050 	.word	0x20000050

0800246c <readPotenciometers>:

void readPotenciometers(){
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af02      	add	r7, sp, #8

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <readPotenciometers+0xe8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	71fb      	strb	r3, [r7, #7]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 800247a:	4b36      	ldr	r3, [pc, #216]	; (8002554 <readPotenciometers+0xe8>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	b25b      	sxtb	r3, r3
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	b25b      	sxtb	r3, r3
 8002488:	71bb      	strb	r3, [r7, #6]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <readPotenciometers+0xec>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	717b      	strb	r3, [r7, #5]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <readPotenciometers+0xec>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	b25b      	sxtb	r3, r3
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	713b      	strb	r3, [r7, #4]

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <readPotenciometers+0xf0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 80024a8:	4b2c      	ldr	r3, [pc, #176]	; (800255c <readPotenciometers+0xf0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0x00;
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <readPotenciometers+0xf0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	b299      	uxth	r1, r3
 80024b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	2301      	movs	r3, #1
 80024c0:	4a26      	ldr	r2, [pc, #152]	; (800255c <readPotenciometers+0xf0>)
 80024c2:	4827      	ldr	r0, [pc, #156]	; (8002560 <readPotenciometers+0xf4>)
 80024c4:	f009 f870 	bl	800b5a8 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrA, &i2cDataToRead, 1, 1000);
 80024c8:	79bb      	ldrb	r3, [r7, #6]
 80024ca:	b299      	uxth	r1, r3
 80024cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	4a23      	ldr	r2, [pc, #140]	; (8002564 <readPotenciometers+0xf8>)
 80024d6:	4822      	ldr	r0, [pc, #136]	; (8002560 <readPotenciometers+0xf4>)
 80024d8:	f009 f95a 	bl	800b790 <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot A - Voltage Control - read value: %d\n", i2cDataToRead[0]);
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <readPotenciometers+0xf8>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4921      	ldr	r1, [pc, #132]	; (8002568 <readPotenciometers+0xfc>)
 80024e4:	4821      	ldr	r0, [pc, #132]	; (800256c <readPotenciometers+0x100>)
 80024e6:	f01c fc41 	bl	801ed6c <siprintf>
	send_uart3(uartBufferTx);
 80024ea:	4820      	ldr	r0, [pc, #128]	; (800256c <readPotenciometers+0x100>)
 80024ec:	f7ff fb10 	bl	8001b10 <send_uart3>

	HAL_Delay(100);
 80024f0:	2064      	movs	r0, #100	; 0x64
 80024f2:	f005 ff8b 	bl	800840c <HAL_Delay>

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <readPotenciometers+0xf0>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <readPotenciometers+0xf0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <readPotenciometers+0xf0>)
 8002504:	2200      	movs	r2, #0
 8002506:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrB, &i2cDataToWrite, 1, 1000);
 8002508:	793b      	ldrb	r3, [r7, #4]
 800250a:	b299      	uxth	r1, r3
 800250c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2301      	movs	r3, #1
 8002514:	4a11      	ldr	r2, [pc, #68]	; (800255c <readPotenciometers+0xf0>)
 8002516:	4812      	ldr	r0, [pc, #72]	; (8002560 <readPotenciometers+0xf4>)
 8002518:	f009 f846 	bl	800b5a8 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrB, &i2cDataToRead, 1, 1000);
 800251c:	793b      	ldrb	r3, [r7, #4]
 800251e:	b299      	uxth	r1, r3
 8002520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2301      	movs	r3, #1
 8002528:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <readPotenciometers+0xf8>)
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <readPotenciometers+0xf4>)
 800252c:	f009 f930 	bl	800b790 <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot B - Current Control - read value: %d\n", i2cDataToRead[0]);
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <readPotenciometers+0xf8>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	490e      	ldr	r1, [pc, #56]	; (8002570 <readPotenciometers+0x104>)
 8002538:	480c      	ldr	r0, [pc, #48]	; (800256c <readPotenciometers+0x100>)
 800253a:	f01c fc17 	bl	801ed6c <siprintf>
	send_uart3(uartBufferTx);
 800253e:	480b      	ldr	r0, [pc, #44]	; (800256c <readPotenciometers+0x100>)
 8002540:	f7ff fae6 	bl	8001b10 <send_uart3>

	HAL_Delay(100);
 8002544:	2064      	movs	r0, #100	; 0x64
 8002546:	f005 ff61 	bl	800840c <HAL_Delay>


}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000058 	.word	0x20000058
 8002558:	20000059 	.word	0x20000059
 800255c:	20011eac 	.word	0x20011eac
 8002560:	20007568 	.word	0x20007568
 8002564:	200075c8 	.word	0x200075c8
 8002568:	08021498 	.word	0x08021498
 800256c:	20011e6c 	.word	0x20011e6c
 8002570:	080214c4 	.word	0x080214c4

08002574 <saveToSD>:
#endif

}

// logging to SD card
void saveToSD (char *string){
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]


	if(startOfMeasurement == 1){
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <saveToSD+0xf8>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d119      	bne.n	80025b8 <saveToSD+0x44>
		// file name format "20YYMMDD_HHMM" example "20200120_1022"
		sprintf(loggingFileName, "20%2d%2d%2d_%2d%2d.txt", Date.Year, Date.Month, Date.Date, Time.Hours,Time.Minutes);
		//uint8_t len = strlen(loggingFileName);
	*/
		/* Mount SD Card */
		fresult = f_mount(&fs, "", 0);
 8002584:	2200      	movs	r2, #0
 8002586:	493a      	ldr	r1, [pc, #232]	; (8002670 <saveToSD+0xfc>)
 8002588:	483a      	ldr	r0, [pc, #232]	; (8002674 <saveToSD+0x100>)
 800258a:	f01a f8cf 	bl	801c72c <f_mount>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <saveToSD+0x104>)
 8002594:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 8002596:	4b38      	ldr	r3, [pc, #224]	; (8002678 <saveToSD+0x104>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <saveToSD+0x3e>
			isMeasuring = 0;
 800259e:	4b37      	ldr	r3, [pc, #220]	; (800267c <saveToSD+0x108>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
			send_uart("!!! Sampling stopped !!!\n");
 80025a4:	4836      	ldr	r0, [pc, #216]	; (8002680 <saveToSD+0x10c>)
 80025a6:	f7ff fa87 	bl	8001ab8 <send_uart>

			//#ifdef DEBUG
				return send_uart("!!! ERROR: mounting SD CARD !!!\n");
 80025aa:	4836      	ldr	r0, [pc, #216]	; (8002684 <saveToSD+0x110>)
 80025ac:	f7ff fa84 	bl	8001ab8 <send_uart>
 80025b0:	e058      	b.n	8002664 <saveToSD+0xf0>
			//#endif
		} else {
			#ifdef DEBUG
				send_uart("SD CARD mounted successfully...\n");
 80025b2:	4835      	ldr	r0, [pc, #212]	; (8002688 <saveToSD+0x114>)
 80025b4:	f7ff fa80 	bl	8001ab8 <send_uart>
		startOfMeasurement == 0;

	}

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 80025b8:	4a34      	ldr	r2, [pc, #208]	; (800268c <saveToSD+0x118>)
 80025ba:	4935      	ldr	r1, [pc, #212]	; (8002690 <saveToSD+0x11c>)
 80025bc:	482c      	ldr	r0, [pc, #176]	; (8002670 <saveToSD+0xfc>)
 80025be:	f01b f836 	bl	801d62e <f_getfree>


	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80025c2:	4b32      	ldr	r3, [pc, #200]	; (800268c <saveToSD+0x118>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	895b      	ldrh	r3, [r3, #10]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b31      	ldr	r3, [pc, #196]	; (8002690 <saveToSD+0x11c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fb03 f302 	mul.w	r3, r3, r2
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025da:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80025de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025e6:	ee17 2a90 	vmov	r2, s15
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <saveToSD+0x120>)
 80025ec:	601a      	str	r2, [r3, #0]

	#ifdef DEBUG
		bufclear();
 80025ee:	f7ff faa1 	bl	8001b34 <bufclear>
		sprintf(buffer, "SD CARD Free Space: \t%lu\n", free_space);
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <saveToSD+0x120>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4927      	ldr	r1, [pc, #156]	; (8002698 <saveToSD+0x124>)
 80025fa:	4828      	ldr	r0, [pc, #160]	; (800269c <saveToSD+0x128>)
 80025fc:	f01c fbb6 	bl	801ed6c <siprintf>
		send_uart(buffer);
 8002600:	4826      	ldr	r0, [pc, #152]	; (800269c <saveToSD+0x128>)
 8002602:	f7ff fa59 	bl	8001ab8 <send_uart>
	#endif

	if( free_space < strlen(string) ){
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fd fe24 	bl	8000254 <strlen>
 800260c:	4602      	mov	r2, r0
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <saveToSD+0x120>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d909      	bls.n	800262a <saveToSD+0xb6>
		isMeasuring = 0;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <saveToSD+0x108>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
		send_uart("!!! Sampling stopped !!!\n");
 800261c:	4818      	ldr	r0, [pc, #96]	; (8002680 <saveToSD+0x10c>)
 800261e:	f7ff fa4b 	bl	8001ab8 <send_uart>

		return send_uart("!!! ERROR: SD card capacity !!!\n");
 8002622:	481f      	ldr	r0, [pc, #124]	; (80026a0 <saveToSD+0x12c>)
 8002624:	f7ff fa48 	bl	8001ab8 <send_uart>
 8002628:	e01c      	b.n	8002664 <saveToSD+0xf0>

	}


	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&fil, loggingFileName,	FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800262a:	2213      	movs	r2, #19
 800262c:	491d      	ldr	r1, [pc, #116]	; (80026a4 <saveToSD+0x130>)
 800262e:	481e      	ldr	r0, [pc, #120]	; (80026a8 <saveToSD+0x134>)
 8002630:	f01a f8c2 	bl	801c7b8 <f_open>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <saveToSD+0x104>)
 800263a:	701a      	strb	r2, [r3, #0]

	/* Move to offset to the end of the file */
	fresult = f_lseek(&fil, &fil.fptr);
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <saveToSD+0x138>)
 800263e:	4619      	mov	r1, r3
 8002640:	4819      	ldr	r0, [pc, #100]	; (80026a8 <saveToSD+0x134>)
 8002642:	f01a fcc1 	bl	801cfc8 <f_lseek>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <saveToSD+0x104>)
 800264c:	701a      	strb	r2, [r3, #0]

	/* write the string to the file */
	fresult = f_puts(string, &fil);
 800264e:	4916      	ldr	r1, [pc, #88]	; (80026a8 <saveToSD+0x134>)
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f01b f9c3 	bl	801d9dc <f_puts>
 8002656:	4603      	mov	r3, r0
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <saveToSD+0x104>)
 800265c:	701a      	strb	r2, [r3, #0]

	/* Close file */
	f_close(&fil);
 800265e:	4812      	ldr	r0, [pc, #72]	; (80026a8 <saveToSD+0x134>)
 8002660:	f01a fc88 	bl	801cf74 <f_close>
	//bufclear();




}
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000320 	.word	0x20000320
 8002670:	080214f0 	.word	0x080214f0
 8002674:	20001f78 	.word	0x20001f78
 8002678:	20001e50 	.word	0x20001e50
 800267c:	20000322 	.word	0x20000322
 8002680:	080216e0 	.word	0x080216e0
 8002684:	080216fc 	.word	0x080216fc
 8002688:	08021514 	.word	0x08021514
 800268c:	20000e1c 	.word	0x20000e1c
 8002690:	20001e58 	.word	0x20001e58
 8002694:	20001e54 	.word	0x20001e54
 8002698:	08021554 	.word	0x08021554
 800269c:	20003040 	.word	0x20003040
 80026a0:	08021720 	.word	0x08021720
 80026a4:	20005794 	.word	0x20005794
 80026a8:	20000e20 	.word	0x20000e20
 80026ac:	20000e38 	.word	0x20000e38

080026b0 <setRangeNA>:


// function to set selected range ON/OFF
// ON --> selection = 1
// OFF --> selection = 0
void setRangeNA(uint8_t selection){
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]

	if(selection){
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00c      	beq.n	80026da <setRangeNA+0x2a>
		// nA range ON
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);
		// NA_TRANS port E pin 1 HIGH
		GPIOE->ODR |= (1<<1);
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <setRangeNA+0x50>)
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <setRangeNA+0x50>)
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	6153      	str	r3, [r2, #20]
		// AS4 port E pin 3 LOW
		GPIOE->ODR &= ~(1<<3);
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <setRangeNA+0x50>)
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <setRangeNA+0x50>)
 80026d2:	f023 0308 	bic.w	r3, r3, #8
 80026d6:	6153      	str	r3, [r2, #20]
		// AS4 port E pin 3 HIGH
		GPIOE->ODR |= (1<<3);

	}

}
 80026d8:	e00b      	b.n	80026f2 <setRangeNA+0x42>
		GPIOE->ODR &= ~(1<<1);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <setRangeNA+0x50>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <setRangeNA+0x50>)
 80026e0:	f023 0302 	bic.w	r3, r3, #2
 80026e4:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= (1<<3);
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <setRangeNA+0x50>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4a05      	ldr	r2, [pc, #20]	; (8002700 <setRangeNA+0x50>)
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	6153      	str	r3, [r2, #20]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <setRangeUA>:

void setRangeUA (uint8_t selection){
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]

	if(selection){
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00c      	beq.n	800272e <setRangeUA+0x2a>
		// uA range ON
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_RESET);
		// UA_TRANS port E pin 0 HIGH
		GPIOE->ODR |= (1<<0);
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <setRangeUA+0x50>)
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <setRangeUA+0x50>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6153      	str	r3, [r2, #20]
		// AS3 port E pin 5 LOW
		GPIOE->ODR &= ~(1<<5);
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <setRangeUA+0x50>)
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <setRangeUA+0x50>)
 8002726:	f023 0320 	bic.w	r3, r3, #32
 800272a:	6153      	str	r3, [r2, #20]
		GPIOE->ODR &= ~(1<<0);
		// AS3 port E pin 5 HIGH
		GPIOE->ODR |= (1<<5);

	}
}
 800272c:	e00b      	b.n	8002746 <setRangeUA+0x42>
		GPIOE->ODR &= ~(1<<0);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <setRangeUA+0x50>)
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <setRangeUA+0x50>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= (1<<5);
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <setRangeUA+0x50>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <setRangeUA+0x50>)
 8002740:	f043 0320 	orr.w	r3, r3, #32
 8002744:	6153      	str	r3, [r2, #20]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000

08002758 <setRangeMA>:

void setRangeMA (uint8_t selection){
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]

	if(selection){
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <setRangeMA+0x2a>
		// mA range ON
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_RESET);
		// MA_TRANS port B pin 9 HIGH
		GPIOB->ODR |= (1<<9);
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <setRangeMA+0x50>)
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <setRangeMA+0x50>)
 800276e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002772:	6153      	str	r3, [r2, #20]
		// AS2 port E pin 4 LOW
		GPIOE->ODR &= ~(1<<4);
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <setRangeMA+0x54>)
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <setRangeMA+0x54>)
 800277a:	f023 0310 	bic.w	r3, r3, #16
 800277e:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<9);
		// AS2 port E pin 4 HIGH
		GPIOE->ODR |= (1<<4);

	}
}
 8002780:	e00b      	b.n	800279a <setRangeMA+0x42>
		GPIOB->ODR &= ~(1<<9);
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <setRangeMA+0x50>)
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <setRangeMA+0x50>)
 8002788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800278c:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= (1<<4);
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <setRangeMA+0x54>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	4a06      	ldr	r2, [pc, #24]	; (80027ac <setRangeMA+0x54>)
 8002794:	f043 0310 	orr.w	r3, r3, #16
 8002798:	6153      	str	r3, [r2, #20]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40021000 	.word	0x40021000

080027b0 <change_range>:


// simple range changing , no linear regression, based on measured value and hard limits
void change_range(float measuredValue) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	ed87 0a01 	vstr	s0, [r7, #4]

	// change from nA to uA
	if (currentRange == 0 & measuredValue >= RANGE_UPPER_LIMIT_NA) {
 80027ba:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <change_range+0x140>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf0c      	ite	eq
 80027c2:	2301      	moveq	r3, #1
 80027c4:	2300      	movne	r3, #0
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80027d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	bfac      	ite	ge
 80027da:	2301      	movge	r3, #1
 80027dc:	2300      	movlt	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4013      	ands	r3, r2
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <change_range+0x50>
		currentRange = 1;
 80027e8:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <change_range+0x140>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]

		setRangeNA(0);
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7ff ff5e 	bl	80026b0 <setRangeNA>
		setRangeUA(1);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f7ff ff85 	bl	8002704 <setRangeUA>
		setRangeMA(0);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7ff ffac 	bl	8002758 <setRangeMA>
		*/

	}

	// change from uA to mA
	if (currentRange == 1 & measuredValue >= RANGE_UPPER_LIMIT_UA) {
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <change_range+0x140>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b01      	cmp	r3, #1
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2da      	uxtb	r2, r3
 800280e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002812:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281e:	bfac      	ite	ge
 8002820:	2301      	movge	r3, #1
 8002822:	2300      	movlt	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	4013      	ands	r3, r2
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00c      	beq.n	8002848 <change_range+0x98>
	//else if (currentRange == 1 & measuredValue >= RANGE_UPPER_LIMIT_UA) {
		currentRange = 2;
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <change_range+0x140>)
 8002830:	2202      	movs	r2, #2
 8002832:	701a      	strb	r2, [r3, #0]

		setRangeNA(0);
 8002834:	2000      	movs	r0, #0
 8002836:	f7ff ff3b 	bl	80026b0 <setRangeNA>
		setRangeUA(0);
 800283a:	2000      	movs	r0, #0
 800283c:	f7ff ff62 	bl	8002704 <setRangeUA>
		setRangeMA(1);
 8002840:	2001      	movs	r0, #1
 8002842:	f7ff ff89 	bl	8002758 <setRangeMA>
	 HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);

	 }
	 */

}
 8002846:	e04a      	b.n	80028de <change_range+0x12e>
	else if (currentRange == 2 & measuredValue <= RANGE_LOWER_LIMIT_MA) {
 8002848:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <change_range+0x140>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2da      	uxtb	r2, r3
 8002856:	edd7 7a01 	vldr	s15, [r7, #4]
 800285a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800285e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80028e8 <change_range+0x138>
 8002862:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	bf94      	ite	ls
 800286c:	2301      	movls	r3, #1
 800286e:	2300      	movhi	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4013      	ands	r3, r2
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00c      	beq.n	8002894 <change_range+0xe4>
		currentRange = 1;
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <change_range+0x140>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
		setRangeNA(0);
 8002880:	2000      	movs	r0, #0
 8002882:	f7ff ff15 	bl	80026b0 <setRangeNA>
		setRangeUA(1);
 8002886:	2001      	movs	r0, #1
 8002888:	f7ff ff3c 	bl	8002704 <setRangeUA>
		setRangeMA(0);
 800288c:	2000      	movs	r0, #0
 800288e:	f7ff ff63 	bl	8002758 <setRangeMA>
}
 8002892:	e024      	b.n	80028de <change_range+0x12e>
	else if (currentRange == 1 & measuredValue <= RANGE_LOWER_LIMIT_UA) {
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <change_range+0x140>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028aa:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80028e8 <change_range+0x138>
 80028ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	4013      	ands	r3, r2
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <change_range+0x12e>
		currentRange = 0;
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <change_range+0x140>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
		setRangeNA(1);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7ff feef 	bl	80026b0 <setRangeNA>
		setRangeUA(0);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7ff ff16 	bl	8002704 <setRangeUA>
		setRangeMA(0);
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff ff3d 	bl	8002758 <setRangeMA>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80028ec:	3f50624d 	.word	0x3f50624d
 80028f0:	20000344 	.word	0x20000344

080028f4 <adc_write_data>:
	 }
	 */

}

void adc_write_data(uint8_t command, uint8_t regAdrr, uint8_t dataValueMS, uint8_t dataValueLS){
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4604      	mov	r4, r0
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4623      	mov	r3, r4
 8002904:	71fb      	strb	r3, [r7, #7]
 8002906:	4603      	mov	r3, r0
 8002908:	71bb      	strb	r3, [r7, #6]
 800290a:	460b      	mov	r3, r1
 800290c:	717b      	strb	r3, [r7, #5]
 800290e:	4613      	mov	r3, r2
 8002910:	713b      	strb	r3, [r7, #4]

	isWaitingForData = 1;
 8002912:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <adc_write_data+0xbc>)
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]

	uint8_t bufferTx [4];
	uint8_t bufferRx [4];

	bufferTx [0] = command;				// write 8 bit command word
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	733b      	strb	r3, [r7, #12]
	bufferTx [1] = regAdrr;				// write 8 bit register address
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	737b      	strb	r3, [r7, #13]
	bufferTx [2] = dataValueMS;			// 16 bit register value --> 8 MSB bit into register
 8002920:	797b      	ldrb	r3, [r7, #5]
 8002922:	73bb      	strb	r3, [r7, #14]
	bufferTx [3] = dataValueLS;			// 16 bit register value --> 8 LSB bit into register
 8002924:	793b      	ldrb	r3, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]

	// to GPI LOW
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	4821      	ldr	r0, [pc, #132]	; (80029b4 <adc_write_data+0xc0>)
 800292e:	f007 f86b 	bl	8009a08 <HAL_GPIO_WritePin>
	microDelay(50);
 8002932:	2032      	movs	r0, #50	; 0x32
 8002934:	f7ff f91a 	bl	8001b6c <microDelay>

	HAL_SPI_TransmitReceive_IT(&hspi1, bufferTx, bufferRx, 4);
 8002938:	f107 0208 	add.w	r2, r7, #8
 800293c:	f107 010c 	add.w	r1, r7, #12
 8002940:	2304      	movs	r3, #4
 8002942:	481d      	ldr	r0, [pc, #116]	; (80029b8 <adc_write_data+0xc4>)
 8002944:	f00d fa2e 	bl	800fda4 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, bufferTx, bufferRx, 4);

	while (isWaitingForData > 0);
 8002948:	bf00      	nop
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <adc_write_data+0xbc>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1fb      	bne.n	800294a <adc_write_data+0x56>

	microDelay(50);
 8002952:	2032      	movs	r0, #50	; 0x32
 8002954:	f7ff f90a 	bl	8001b6c <microDelay>
	// to GPI HIGH
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002958:	2201      	movs	r2, #1
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	4815      	ldr	r0, [pc, #84]	; (80029b4 <adc_write_data+0xc0>)
 800295e:	f007 f853 	bl	8009a08 <HAL_GPIO_WritePin>

	microDelay(50);
 8002962:	2032      	movs	r0, #50	; 0x32
 8002964:	f7ff f902 	bl	8001b6c <microDelay>

	// to GPI LOW
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002968:	2200      	movs	r2, #0
 800296a:	2140      	movs	r1, #64	; 0x40
 800296c:	4811      	ldr	r0, [pc, #68]	; (80029b4 <adc_write_data+0xc0>)
 800296e:	f007 f84b 	bl	8009a08 <HAL_GPIO_WritePin>
	microDelay(50);
 8002972:	2032      	movs	r0, #50	; 0x32
 8002974:	f7ff f8fa 	bl	8001b6c <microDelay>

	HAL_SPI_TransmitReceive_IT(&hspi1, bufferTx, bufferRx, 4);
 8002978:	f107 0208 	add.w	r2, r7, #8
 800297c:	f107 010c 	add.w	r1, r7, #12
 8002980:	2304      	movs	r3, #4
 8002982:	480d      	ldr	r0, [pc, #52]	; (80029b8 <adc_write_data+0xc4>)
 8002984:	f00d fa0e 	bl	800fda4 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, bufferTx, bufferRx, 4);

	while (isWaitingForData > 0);
 8002988:	bf00      	nop
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <adc_write_data+0xbc>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1fb      	bne.n	800298a <adc_write_data+0x96>

	microDelay(50);
 8002992:	2032      	movs	r0, #50	; 0x32
 8002994:	f7ff f8ea 	bl	8001b6c <microDelay>
	// to GPI HIGH
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <adc_write_data+0xc0>)
 800299e:	f007 f833 	bl	8009a08 <HAL_GPIO_WritePin>

	microDelay(50);
 80029a2:	2032      	movs	r0, #50	; 0x32
 80029a4:	f7ff f8e2 	bl	8001b6c <microDelay>


}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd90      	pop	{r4, r7, pc}
 80029b0:	20000001 	.word	0x20000001
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	200057b8 	.word	0x200057b8

080029bc <adc_config>:

// sequence to config ADC after reset or power up
uint8_t adc_config() {
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <adc_config+0x1c>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]

	// SETTING ADC PGA AND WORKING RANGE
	adc_write_data(ADC_WRITE, ADC_RANGE_SEL_REG, 0x0, ADC_RANGE_UNIDIR_125REF_INT_REF);
 80029c6:	230b      	movs	r3, #11
 80029c8:	2200      	movs	r2, #0
 80029ca:	2114      	movs	r1, #20
 80029cc:	20d0      	movs	r0, #208	; 0xd0
 80029ce:	f7ff ff91 	bl	80028f4 <adc_write_data>
	returnValue = HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
*/

}
 80029d2:	bf00      	nop
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000001 	.word	0x20000001

080029dc <adc_compensateOffset>:

	send_uart3("ADC resetted\n");

}

void adc_compensateOffset(){
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0

	double result = 0;
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t offsetSamples = 500;
 80029ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029f2:	807b      	strh	r3, [r7, #2]

	HAL_Delay(50);
 80029f4:	2032      	movs	r0, #50	; 0x32
 80029f6:	f005 fd09 	bl	800840c <HAL_Delay>

	// stabilize components anf flush buffer
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 80029fa:	2300      	movs	r3, #0
 80029fc:	71fb      	strb	r3, [r7, #7]
 80029fe:	e007      	b.n	8002a10 <adc_compensateOffset+0x34>
		adc_sample();
 8002a00:	f000 f862 	bl	8002ac8 <adc_sample>
		//result += previousValues[SAMPLES-1];
		microDelay(100);
 8002a04:	2064      	movs	r0, #100	; 0x64
 8002a06:	f7ff f8b1 	bl	8001b6c <microDelay>
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	71fb      	strb	r3, [r7, #7]
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	4925      	ldr	r1, [pc, #148]	; (8002aac <adc_compensateOffset+0xd0>)
 8002a18:	fba1 1303 	umull	r1, r3, r1, r3
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d3ed      	bcc.n	8002a00 <adc_compensateOffset+0x24>
	}

	for(uint16_t i = 0; i < offsetSamples; i++){
 8002a24:	2300      	movs	r3, #0
 8002a26:	80bb      	strh	r3, [r7, #4]
 8002a28:	e021      	b.n	8002a6e <adc_compensateOffset+0x92>
		adc_sample();
 8002a2a:	f000 f84d 	bl	8002ac8 <adc_sample>
		//result += measuredValue; //previousValues[SAMPLES-1];
		result += previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <adc_compensateOffset+0xd4>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	f103 0109 	add.w	r1, r3, #9
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <adc_compensateOffset+0xd8>)
 8002a38:	fb83 2301 	smull	r2, r3, r3, r1
 8002a3c:	109a      	asrs	r2, r3, #2
 8002a3e:	17cb      	asrs	r3, r1, #31
 8002a40:	1ad2      	subs	r2, r2, r3
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	1aca      	subs	r2, r1, r3
 8002a4c:	491a      	ldr	r1, [pc, #104]	; (8002ab8 <adc_compensateOffset+0xdc>)
 8002a4e:	00d3      	lsls	r3, r2, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	ed93 7b00 	vldr	d7, [r3]
 8002a56:	ed97 6b02 	vldr	d6, [r7, #8]
 8002a5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a5e:	ed87 7b02 	vstr	d7, [r7, #8]
		microDelay(50);
 8002a62:	2032      	movs	r0, #50	; 0x32
 8002a64:	f7ff f882 	bl	8001b6c <microDelay>
	for(uint16_t i = 0; i < offsetSamples; i++){
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	80bb      	strh	r3, [r7, #4]
 8002a6e:	88ba      	ldrh	r2, [r7, #4]
 8002a70:	887b      	ldrh	r3, [r7, #2]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3d9      	bcc.n	8002a2a <adc_compensateOffset+0x4e>
	}

	settings.lastOffsetValue = result / offsetSamples;
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002a80:	ed97 5b02 	vldr	d5, [r7, #8]
 8002a84:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <adc_compensateOffset+0xe0>)
 8002a8a:	ed83 7b06 	vstr	d7, [r3, #24]

	sprintf(uartBufferTx, "ADC offset: %.12f\n", settings.lastOffsetValue);
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <adc_compensateOffset+0xe0>)
 8002a90:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a94:	490a      	ldr	r1, [pc, #40]	; (8002ac0 <adc_compensateOffset+0xe4>)
 8002a96:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <adc_compensateOffset+0xe8>)
 8002a98:	f01c f968 	bl	801ed6c <siprintf>
	send_uart3(uartBufferTx);
 8002a9c:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <adc_compensateOffset+0xe8>)
 8002a9e:	f7ff f837 	bl	8001b10 <send_uart3>


}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	cccccccd 	.word	0xcccccccd
 8002ab0:	20000345 	.word	0x20000345
 8002ab4:	66666667 	.word	0x66666667
 8002ab8:	2000ccc0 	.word	0x2000ccc0
 8002abc:	20000018 	.word	0x20000018
 8002ac0:	08021754 	.word	0x08021754
 8002ac4:	20011e6c 	.word	0x20011e6c

08002ac8 <adc_sample>:


}

// NEW ADC TI ADS8910 18bit, 1Msps, differencial
void adc_sample() {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 8002ace:	4b76      	ldr	r3, [pc, #472]	; (8002ca8 <adc_sample+0x1e0>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
	uint32_t receivedValue = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	607b      	str	r3, [r7, #4]
	isAdcDone = 0;
 8002ad8:	4b74      	ldr	r3, [pc, #464]	; (8002cac <adc_sample+0x1e4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]

	// dummy data to clock data out of ADC = No operation command
	spiDataTx[0] = 0x00;	// 0000 1000
 8002ade:	4b74      	ldr	r3, [pc, #464]	; (8002cb0 <adc_sample+0x1e8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
	spiDataTx[1] = 0x00;	// 0000 0000
 8002ae4:	4b72      	ldr	r3, [pc, #456]	; (8002cb0 <adc_sample+0x1e8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	705a      	strb	r2, [r3, #1]
	spiDataTx[2] = 0x00;	// 0000 0000
 8002aea:	4b71      	ldr	r3, [pc, #452]	; (8002cb0 <adc_sample+0x1e8>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	709a      	strb	r2, [r3, #2]

	// starting conversion
	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_SET);
	// CONV port B pin 5
	// SET HIGH
	GPIOB->ODR |= (1<<5);
 8002af0:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <adc_sample+0x1ec>)
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	4a6f      	ldr	r2, [pc, #444]	; (8002cb4 <adc_sample+0x1ec>)
 8002af6:	f043 0320 	orr.w	r3, r3, #32
 8002afa:	6153      	str	r3, [r2, #20]
	//microDelay(1);

	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
	// CONV port B pin 5
	// SET LOW
	GPIOB->ODR &= ~(1<<5);
 8002afc:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <adc_sample+0x1ec>)
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	4a6c      	ldr	r2, [pc, #432]	; (8002cb4 <adc_sample+0x1ec>)
 8002b02:	f023 0320 	bic.w	r3, r3, #32
 8002b06:	6153      	str	r3, [r2, #20]

	// RVS port D pin 5 check for transition LOW-->HIGH
	//while( (GPIOD->IDR & 0x20) != 1);
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8002b08:	bf00      	nop
 8002b0a:	2120      	movs	r1, #32
 8002b0c:	486a      	ldr	r0, [pc, #424]	; (8002cb8 <adc_sample+0x1f0>)
 8002b0e:	f006 ff63 	bl	80099d8 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d1f8      	bne.n	8002b0a <adc_sample+0x42>
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002b18:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <adc_sample+0x1f0>)
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	4a66      	ldr	r2, [pc, #408]	; (8002cb8 <adc_sample+0x1f0>)
 8002b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b22:	6153      	str	r3, [r2, #20]

	//HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8002b24:	2303      	movs	r3, #3
 8002b26:	4a65      	ldr	r2, [pc, #404]	; (8002cbc <adc_sample+0x1f4>)
 8002b28:	4961      	ldr	r1, [pc, #388]	; (8002cb0 <adc_sample+0x1e8>)
 8002b2a:	4865      	ldr	r0, [pc, #404]	; (8002cc0 <adc_sample+0x1f8>)
 8002b2c:	f00d f9ea 	bl	800ff04 <HAL_SPI_TransmitReceive_DMA>
	//HAL_SPI_TransmitReceive_IT(&hspi1, spiDataTx, spiDataRx, 4);
	//HAL_SPI_Receive_DMA(&hspi1, spiDataRx, 4);

	while (isWaitingForData > 0);
 8002b30:	bf00      	nop
 8002b32:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <adc_sample+0x1e0>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1fb      	bne.n	8002b32 <adc_sample+0x6a>

	// to CS HIGH
 	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 	// CS port D pin 6
 	// SET HIGH
 	GPIOD->ODR |= (1<<6);
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	; (8002cb8 <adc_sample+0x1f0>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	; (8002cb8 <adc_sample+0x1f0>)
 8002b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b44:	6153      	str	r3, [r2, #20]

	//shifting received byte data into final value
 	// ADS8690  // ADS8910
	receivedValue = (spiDataRx[2] >> 6) | (spiDataRx[1] << 2)	| (spiDataRx[0] << 10);
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <adc_sample+0x1f4>)
 8002b48:	789b      	ldrb	r3, [r3, #2]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b5a      	ldr	r3, [pc, #360]	; (8002cbc <adc_sample+0x1f4>)
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	431a      	orrs	r2, r3
 8002b58:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <adc_sample+0x1f4>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	029b      	lsls	r3, r3, #10
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	607b      	str	r3, [r7, #4]

	measuredValue = receivedValue;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b6c:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <adc_sample+0x1fc>)
 8002b6e:	ed83 7b00 	vstr	d7, [r3]

	if(receivedValue <= 131071){
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b78:	d228      	bcs.n	8002bcc <adc_sample+0x104>
		measuredValue = receivedValue;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b84:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <adc_sample+0x1fc>)
 8002b86:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = (measuredValue * ADC_RESOLUTION);
 8002b8a:	4b4e      	ldr	r3, [pc, #312]	; (8002cc4 <adc_sample+0x1fc>)
 8002b8c:	ed93 6b00 	vldr	d6, [r3]
 8002b90:	4b4d      	ldr	r3, [pc, #308]	; (8002cc8 <adc_sample+0x200>)
 8002b92:	ed93 7b00 	vldr	d7, [r3]
 8002b96:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b9a:	4b4a      	ldr	r3, [pc, #296]	; (8002cc4 <adc_sample+0x1fc>)
 8002b9c:	ed83 7b00 	vstr	d7, [r3]
		// adding bidirectional offset value
		//measuredValue = measuredValue - (ADC_REF_VALUE * ADC_PGA*ADC_BIDIRECTIONAL);
		// shifting from mV to V value
		measuredValue /= 1000;
 8002ba0:	4b48      	ldr	r3, [pc, #288]	; (8002cc4 <adc_sample+0x1fc>)
 8002ba2:	ed93 6b00 	vldr	d6, [r3]
 8002ba6:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002c98 <adc_sample+0x1d0>
 8002baa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bae:	4b45      	ldr	r3, [pc, #276]	; (8002cc4 <adc_sample+0x1fc>)
 8002bb0:	ed83 7b00 	vstr	d7, [r3]
		//measuredValue *=2.186;
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 8002bb4:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <adc_sample+0x1fc>)
 8002bb6:	ed93 6b00 	vldr	d6, [r3]
 8002bba:	4b44      	ldr	r3, [pc, #272]	; (8002ccc <adc_sample+0x204>)
 8002bbc:	ed93 7b06 	vldr	d7, [r3, #24]
 8002bc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bc4:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <adc_sample+0x1fc>)
 8002bc6:	ed83 7b00 	vstr	d7, [r3]
 8002bca:	e033      	b.n	8002c34 <adc_sample+0x16c>
	}
	else{
		measuredValue = receivedValue - 0x1FFFF;
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <adc_sample+0x208>)
 8002bd0:	4413      	add	r3, r2
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002bda:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <adc_sample+0x1fc>)
 8002bdc:	ed83 7b00 	vstr	d7, [r3]

		measuredValue = measuredValue * ADC_RESOLUTION; //(-ADC_REF_VALUE + temp);
 8002be0:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <adc_sample+0x1fc>)
 8002be2:	ed93 6b00 	vldr	d6, [r3]
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <adc_sample+0x200>)
 8002be8:	ed93 7b00 	vldr	d7, [r3]
 8002bec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bf0:	4b34      	ldr	r3, [pc, #208]	; (8002cc4 <adc_sample+0x1fc>)
 8002bf2:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = measuredValue - ADC_REF_VALUE;
 8002bf6:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <adc_sample+0x1fc>)
 8002bf8:	ed93 7b00 	vldr	d7, [r3]
 8002bfc:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002ca0 <adc_sample+0x1d8>
 8002c00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c04:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <adc_sample+0x1fc>)
 8002c06:	ed83 7b00 	vstr	d7, [r3]
		// shifting from mV to V value
		measuredValue /= 1000;
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <adc_sample+0x1fc>)
 8002c0c:	ed93 6b00 	vldr	d6, [r3]
 8002c10:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002c98 <adc_sample+0x1d0>
 8002c14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <adc_sample+0x1fc>)
 8002c1a:	ed83 7b00 	vstr	d7, [r3]
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 8002c1e:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <adc_sample+0x1fc>)
 8002c20:	ed93 6b00 	vldr	d6, [r3]
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <adc_sample+0x204>)
 8002c26:	ed93 7b06 	vldr	d7, [r3, #24]
 8002c2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <adc_sample+0x1fc>)
 8002c30:	ed83 7b00 	vstr	d7, [r3]
	}
*/

	// change range filling values
	//previousValues[SAMPLES - 1] = measuredValue;
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <adc_sample+0x20c>)
 8002c36:	781a      	ldrb	r2, [r3, #0]
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <adc_sample+0x210>)
 8002c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3e:	08d9      	lsrs	r1, r3, #3
 8002c40:	460b      	mov	r3, r1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <adc_sample+0x1fc>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	4821      	ldr	r0, [pc, #132]	; (8002cdc <adc_sample+0x214>)
 8002c56:	00c9      	lsls	r1, r1, #3
 8002c58:	4401      	add	r1, r0
 8002c5a:	e9c1 2300 	strd	r2, r3, [r1]
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <adc_sample+0x20c>)
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <adc_sample+0x210>)
 8002c64:	fba3 1302 	umull	r1, r3, r3, r2
 8002c68:	08d9      	lsrs	r1, r3, #3
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <adc_sample+0x218>)
 8002c7a:	7819      	ldrb	r1, [r3, #0]
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <adc_sample+0x21c>)
 8002c7e:	5499      	strb	r1, [r3, r2]
	currentValuePosition++;
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <adc_sample+0x20c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <adc_sample+0x20c>)
 8002c8a:	701a      	strb	r2, [r3, #0]


}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	f3af 8000 	nop.w
 8002c98:	00000000 	.word	0x00000000
 8002c9c:	408f4000 	.word	0x408f4000
 8002ca0:	00000000 	.word	0x00000000
 8002ca4:	40b38800 	.word	0x40b38800
 8002ca8:	20000001 	.word	0x20000001
 8002cac:	20000323 	.word	0x20000323
 8002cb0:	200059b0 	.word	0x200059b0
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40020c00 	.word	0x40020c00
 8002cbc:	2000dd14 	.word	0x2000dd14
 8002cc0:	200057b8 	.word	0x200057b8
 8002cc4:	20000348 	.word	0x20000348
 8002cc8:	20000040 	.word	0x20000040
 8002ccc:	20000018 	.word	0x20000018
 8002cd0:	fffe0001 	.word	0xfffe0001
 8002cd4:	20000345 	.word	0x20000345
 8002cd8:	cccccccd 	.word	0xcccccccd
 8002cdc:	2000ccc0 	.word	0x2000ccc0
 8002ce0:	20000344 	.word	0x20000344
 8002ce4:	200075b8 	.word	0x200075b8

08002ce8 <adc_sample_ads8691>:


// OLD ADC TI ADS8691 18bit, 1Msps, with buffer, single ended
void adc_sample_ads8691() {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <adc_sample_ads8691+0x160>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
	uint32_t receivedValue = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
	isAdcDone = 0;
 8002cf8:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <adc_sample_ads8691+0x164>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]

	// dummy data to clock data out of ADC = No operation command
	spiDataTx[0] = 0x00;	// 0000 1000
 8002cfe:	4b54      	ldr	r3, [pc, #336]	; (8002e50 <adc_sample_ads8691+0x168>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
	spiDataTx[1] = 0x00;	// 0000 0000
 8002d04:	4b52      	ldr	r3, [pc, #328]	; (8002e50 <adc_sample_ads8691+0x168>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	705a      	strb	r2, [r3, #1]
	spiDataTx[2] = 0x00;	// 0000 0000
 8002d0a:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <adc_sample_ads8691+0x168>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	709a      	strb	r2, [r3, #2]
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <adc_sample_ads8691+0x16c>)
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4a4f      	ldr	r2, [pc, #316]	; (8002e54 <adc_sample_ads8691+0x16c>)
 8002d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1a:	6153      	str	r3, [r2, #20]

	// to CS HIGH
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
	// CS port D pin 6
	// SET HIGH
	GPIOD->ODR |= (1<<6);
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <adc_sample_ads8691+0x16c>)
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <adc_sample_ads8691+0x16c>)
 8002d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d26:	6153      	str	r3, [r2, #20]

	// RVS port D pin 5 check for transition LOW-->HIGH
	//while( (GPIOD->IDR & 0x20) != 1);
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8002d28:	bf00      	nop
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	4849      	ldr	r0, [pc, #292]	; (8002e54 <adc_sample_ads8691+0x16c>)
 8002d2e:	f006 fe53 	bl	80099d8 <HAL_GPIO_ReadPin>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d1f8      	bne.n	8002d2a <adc_sample_ads8691+0x42>
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002d38:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <adc_sample_ads8691+0x16c>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4a45      	ldr	r2, [pc, #276]	; (8002e54 <adc_sample_ads8691+0x16c>)
 8002d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d42:	6153      	str	r3, [r2, #20]

	//HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8002d44:	2303      	movs	r3, #3
 8002d46:	4a44      	ldr	r2, [pc, #272]	; (8002e58 <adc_sample_ads8691+0x170>)
 8002d48:	4941      	ldr	r1, [pc, #260]	; (8002e50 <adc_sample_ads8691+0x168>)
 8002d4a:	4844      	ldr	r0, [pc, #272]	; (8002e5c <adc_sample_ads8691+0x174>)
 8002d4c:	f00d f8da 	bl	800ff04 <HAL_SPI_TransmitReceive_DMA>
	//HAL_SPI_TransmitReceive_IT(&hspi1, spiDataTx, spiDataRx, 4);
	//HAL_SPI_Receive_DMA(&hspi1, spiDataRx, 4);

	while (isWaitingForData > 0);
 8002d50:	bf00      	nop
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <adc_sample_ads8691+0x160>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1fb      	bne.n	8002d52 <adc_sample_ads8691+0x6a>

	// to CS HIGH
 	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 	// CS port D pin 6
 	// SET HIGH
 	GPIOD->ODR |= (1<<6);
 8002d5a:	4b3e      	ldr	r3, [pc, #248]	; (8002e54 <adc_sample_ads8691+0x16c>)
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4a3d      	ldr	r2, [pc, #244]	; (8002e54 <adc_sample_ads8691+0x16c>)
 8002d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d64:	6153      	str	r3, [r2, #20]

	//shifting received byte data into final value
 	// ADS8690  // ADS8910
	receivedValue = (spiDataRx[2] >> 6) | (spiDataRx[1] << 2)	| (spiDataRx[0] << 10);
 8002d66:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <adc_sample_ads8691+0x170>)
 8002d68:	789b      	ldrb	r3, [r3, #2]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <adc_sample_ads8691+0x170>)
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	431a      	orrs	r2, r3
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <adc_sample_ads8691+0x170>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	029b      	lsls	r3, r3, #10
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	607b      	str	r3, [r7, #4]

	measuredValue = receivedValue;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d8c:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002d8e:	ed83 7b00 	vstr	d7, [r3]
	//measuredValue = (measuredValue * (0.09375));
	measuredValue = (measuredValue * ADC_RESOLUTION);
 8002d92:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002d94:	ed93 6b00 	vldr	d6, [r3]
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <adc_sample_ads8691+0x17c>)
 8002d9a:	ed93 7b00 	vldr	d7, [r3]
 8002d9e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002da2:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002da4:	ed83 7b00 	vstr	d7, [r3]
	//measuredValue = ( measuredValue * ( (ADC_REF_VALUE*ADC_PGA*2) / ADC_SCALE ) );

	// adding bidirectional offset value
	measuredValue = measuredValue - (ADC_REF_VALUE * ADC_PGA*ADC_BIDIRECTIONAL);
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	492c      	ldr	r1, [pc, #176]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002db0:	e9c1 2300 	strd	r2, r3, [r1]
	// shifting from mV to V value
	measuredValue /= 1000;
 8002db4:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002db6:	ed93 6b00 	vldr	d6, [r3]
 8002dba:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002e40 <adc_sample_ads8691+0x158>
 8002dbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002dc2:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002dc4:	ed83 7b00 	vstr	d7, [r3]
	// adding measured DC offset value
	measuredValue -= settings.lastOffsetValue;
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002dca:	ed93 6b00 	vldr	d6, [r3]
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <adc_sample_ads8691+0x180>)
 8002dd0:	ed93 7b06 	vldr	d7, [r3, #24]
 8002dd4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002dda:	ed83 7b00 	vstr	d7, [r3]
	}
*/

	// change range filling values
	//previousValues[SAMPLES - 1] = measuredValue;
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <adc_sample_ads8691+0x184>)
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <adc_sample_ads8691+0x188>)
 8002de4:	fba3 1302 	umull	r1, r3, r3, r2
 8002de8:	08d9      	lsrs	r1, r3, #3
 8002dea:	460b      	mov	r3, r1
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <adc_sample_ads8691+0x178>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	481d      	ldr	r0, [pc, #116]	; (8002e74 <adc_sample_ads8691+0x18c>)
 8002e00:	00c9      	lsls	r1, r1, #3
 8002e02:	4401      	add	r1, r0
 8002e04:	e9c1 2300 	strd	r2, r3, [r1]
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <adc_sample_ads8691+0x184>)
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <adc_sample_ads8691+0x188>)
 8002e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e12:	08d9      	lsrs	r1, r3, #3
 8002e14:	460b      	mov	r3, r1
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <adc_sample_ads8691+0x190>)
 8002e24:	7819      	ldrb	r1, [r3, #0]
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <adc_sample_ads8691+0x194>)
 8002e28:	5499      	strb	r1, [r3, r2]
	currentValuePosition++;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <adc_sample_ads8691+0x184>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <adc_sample_ads8691+0x184>)
 8002e34:	701a      	strb	r2, [r3, #0]


}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	00000000 	.word	0x00000000
 8002e44:	408f4000 	.word	0x408f4000
 8002e48:	20000001 	.word	0x20000001
 8002e4c:	20000323 	.word	0x20000323
 8002e50:	200059b0 	.word	0x200059b0
 8002e54:	40020c00 	.word	0x40020c00
 8002e58:	2000dd14 	.word	0x2000dd14
 8002e5c:	200057b8 	.word	0x200057b8
 8002e60:	20000348 	.word	0x20000348
 8002e64:	20000040 	.word	0x20000040
 8002e68:	20000018 	.word	0x20000018
 8002e6c:	20000345 	.word	0x20000345
 8002e70:	cccccccd 	.word	0xcccccccd
 8002e74:	2000ccc0 	.word	0x2000ccc0
 8002e78:	20000344 	.word	0x20000344
 8002e7c:	200075b8 	.word	0x200075b8

08002e80 <ranges>:

void ranges() {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
		//check_range_linear(previousValues[SAMPLES - 1], b);
		check_range_linear(previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES], b);
	}
	else{

		if(rangeMode == 4){
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <ranges+0xe0>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d11a      	bne.n	8002ec2 <ranges+0x42>
			change_range((float)previousValues[ (currentValuePosition + SAMPLES - 1)%SAMPLES]);
 8002e8c:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <ranges+0xe4>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	f103 0109 	add.w	r1, r3, #9
 8002e94:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <ranges+0xe8>)
 8002e96:	fb83 2301 	smull	r2, r3, r3, r1
 8002e9a:	109a      	asrs	r2, r3, #2
 8002e9c:	17cb      	asrs	r3, r1, #31
 8002e9e:	1ad2      	subs	r2, r2, r3
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	1aca      	subs	r2, r1, r3
 8002eaa:	4930      	ldr	r1, [pc, #192]	; (8002f6c <ranges+0xec>)
 8002eac:	00d3      	lsls	r3, r2, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	ed93 7b00 	vldr	d7, [r3]
 8002eb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	f7ff fc78 	bl	80027b0 <change_range>


	//change_range((float)previousValues[ (currentValuePosition + SAMPLES - 1)%SAMPLES]);


}
 8002ec0:	e04c      	b.n	8002f5c <ranges+0xdc>
		else if(rangeMode == 0){
 8002ec2:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <ranges+0xe0>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <ranges+0x64>
			currentRange = 0;
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <ranges+0xf0>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
			setRangeNA(1);
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f7ff fbed 	bl	80026b0 <setRangeNA>
			setRangeUA(0);
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7ff fc14 	bl	8002704 <setRangeUA>
			setRangeMA(0);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7ff fc3b 	bl	8002758 <setRangeMA>
}
 8002ee2:	e03b      	b.n	8002f5c <ranges+0xdc>
		else if(rangeMode == 1){
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <ranges+0xe0>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d10c      	bne.n	8002f06 <ranges+0x86>
			currentRange = 1;
 8002eec:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <ranges+0xf0>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
			setRangeNA(0);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7ff fbdc 	bl	80026b0 <setRangeNA>
			setRangeUA(1);
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f7ff fc03 	bl	8002704 <setRangeUA>
			setRangeMA(0);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7ff fc2a 	bl	8002758 <setRangeMA>
}
 8002f04:	e02a      	b.n	8002f5c <ranges+0xdc>
		else if(rangeMode == 2){
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <ranges+0xe0>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d10c      	bne.n	8002f28 <ranges+0xa8>
			currentRange = 2;
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <ranges+0xf0>)
 8002f10:	2202      	movs	r2, #2
 8002f12:	701a      	strb	r2, [r3, #0]
			setRangeNA(0);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7ff fbcb 	bl	80026b0 <setRangeNA>
			setRangeUA(0);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7ff fbf2 	bl	8002704 <setRangeUA>
			setRangeMA(1);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f7ff fc19 	bl	8002758 <setRangeMA>
}
 8002f26:	e019      	b.n	8002f5c <ranges+0xdc>
			change_range((float)previousValues[ (currentValuePosition + SAMPLES - 1)%SAMPLES]);
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <ranges+0xe4>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	f103 0109 	add.w	r1, r3, #9
 8002f30:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <ranges+0xe8>)
 8002f32:	fb83 2301 	smull	r2, r3, r3, r1
 8002f36:	109a      	asrs	r2, r3, #2
 8002f38:	17cb      	asrs	r3, r1, #31
 8002f3a:	1ad2      	subs	r2, r2, r3
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	1aca      	subs	r2, r1, r3
 8002f46:	4909      	ldr	r1, [pc, #36]	; (8002f6c <ranges+0xec>)
 8002f48:	00d3      	lsls	r3, r2, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	ed93 7b00 	vldr	d7, [r3]
 8002f50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f54:	eeb0 0a67 	vmov.f32	s0, s15
 8002f58:	f7ff fc2a 	bl	80027b0 <change_range>
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	20000345 	.word	0x20000345
 8002f68:	66666667 	.word	0x66666667
 8002f6c:	2000ccc0 	.word	0x2000ccc0
 8002f70:	20000344 	.word	0x20000344
 8002f74:	00000000 	.word	0x00000000

08002f78 <previousValueToCurrent>:

// convert measured voltage and its range to final current value
double previousValueToCurrent (uint8_t index){
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]

	// nA
	if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 0){
 8002f82:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <previousValueToCurrent+0x170>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	f103 020a 	add.w	r2, r3, #10
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	1ad1      	subs	r1, r2, r3
 8002f8e:	4b57      	ldr	r3, [pc, #348]	; (80030ec <previousValueToCurrent+0x174>)
 8002f90:	fb83 2301 	smull	r2, r3, r3, r1
 8002f94:	109a      	asrs	r2, r3, #2
 8002f96:	17cb      	asrs	r3, r1, #31
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	1aca      	subs	r2, r1, r3
 8002fa4:	4b52      	ldr	r3, [pc, #328]	; (80030f0 <previousValueToCurrent+0x178>)
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11a      	bne.n	8002fe2 <previousValueToCurrent+0x6a>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000000);
 8002fac:	4b4e      	ldr	r3, [pc, #312]	; (80030e8 <previousValueToCurrent+0x170>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	f103 020a 	add.w	r2, r3, #10
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	1ad1      	subs	r1, r2, r3
 8002fb8:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <previousValueToCurrent+0x174>)
 8002fba:	fb83 2301 	smull	r2, r3, r3, r1
 8002fbe:	109a      	asrs	r2, r3, #2
 8002fc0:	17cb      	asrs	r3, r1, #31
 8002fc2:	1ad2      	subs	r2, r2, r3
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	1aca      	subs	r2, r1, r3
 8002fce:	4949      	ldr	r1, [pc, #292]	; (80030f4 <previousValueToCurrent+0x17c>)
 8002fd0:	00d3      	lsls	r3, r2, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	ed93 6b00 	vldr	d6, [r3]
 8002fd8:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 80030d8 <previousValueToCurrent+0x160>
 8002fdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002fe0:	e071      	b.n	80030c6 <previousValueToCurrent+0x14e>
	}
	// uA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 1){
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <previousValueToCurrent+0x170>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	f103 020a 	add.w	r2, r3, #10
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	1ad1      	subs	r1, r2, r3
 8002fee:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <previousValueToCurrent+0x174>)
 8002ff0:	fb83 2301 	smull	r2, r3, r3, r1
 8002ff4:	109a      	asrs	r2, r3, #2
 8002ff6:	17cb      	asrs	r3, r1, #31
 8002ff8:	1ad2      	subs	r2, r2, r3
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	1aca      	subs	r2, r1, r3
 8003004:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <previousValueToCurrent+0x178>)
 8003006:	5c9b      	ldrb	r3, [r3, r2]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d11a      	bne.n	8003042 <previousValueToCurrent+0xca>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000);
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <previousValueToCurrent+0x170>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	f103 020a 	add.w	r2, r3, #10
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	1ad1      	subs	r1, r2, r3
 8003018:	4b34      	ldr	r3, [pc, #208]	; (80030ec <previousValueToCurrent+0x174>)
 800301a:	fb83 2301 	smull	r2, r3, r3, r1
 800301e:	109a      	asrs	r2, r3, #2
 8003020:	17cb      	asrs	r3, r1, #31
 8003022:	1ad2      	subs	r2, r2, r3
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	1aca      	subs	r2, r1, r3
 800302e:	4931      	ldr	r1, [pc, #196]	; (80030f4 <previousValueToCurrent+0x17c>)
 8003030:	00d3      	lsls	r3, r2, #3
 8003032:	440b      	add	r3, r1
 8003034:	ed93 6b00 	vldr	d6, [r3]
 8003038:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80030e0 <previousValueToCurrent+0x168>
 800303c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003040:	e041      	b.n	80030c6 <previousValueToCurrent+0x14e>
	}
	// mA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 2){
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <previousValueToCurrent+0x170>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	f103 020a 	add.w	r2, r3, #10
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	1ad1      	subs	r1, r2, r3
 800304e:	4b27      	ldr	r3, [pc, #156]	; (80030ec <previousValueToCurrent+0x174>)
 8003050:	fb83 2301 	smull	r2, r3, r3, r1
 8003054:	109a      	asrs	r2, r3, #2
 8003056:	17cb      	asrs	r3, r1, #31
 8003058:	1ad2      	subs	r2, r2, r3
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	1aca      	subs	r2, r1, r3
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <previousValueToCurrent+0x178>)
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d116      	bne.n	800309a <previousValueToCurrent+0x122>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <previousValueToCurrent+0x170>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f103 020a 	add.w	r2, r3, #10
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	1ad1      	subs	r1, r2, r3
 8003078:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <previousValueToCurrent+0x174>)
 800307a:	fb83 2301 	smull	r2, r3, r3, r1
 800307e:	109a      	asrs	r2, r3, #2
 8003080:	17cb      	asrs	r3, r1, #31
 8003082:	1ad2      	subs	r2, r2, r3
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	1aca      	subs	r2, r1, r3
 800308e:	4919      	ldr	r1, [pc, #100]	; (80030f4 <previousValueToCurrent+0x17c>)
 8003090:	00d3      	lsls	r3, r2, #3
 8003092:	440b      	add	r3, r1
 8003094:	ed93 7b00 	vldr	d7, [r3]
 8003098:	e015      	b.n	80030c6 <previousValueToCurrent+0x14e>
	}
	else{
		// leaving as is indicating error during operation
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <previousValueToCurrent+0x170>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	f103 020a 	add.w	r2, r3, #10
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	1ad1      	subs	r1, r2, r3
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <previousValueToCurrent+0x174>)
 80030a8:	fb83 2301 	smull	r2, r3, r3, r1
 80030ac:	109a      	asrs	r2, r3, #2
 80030ae:	17cb      	asrs	r3, r1, #31
 80030b0:	1ad2      	subs	r2, r2, r3
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	1aca      	subs	r2, r1, r3
 80030bc:	490d      	ldr	r1, [pc, #52]	; (80030f4 <previousValueToCurrent+0x17c>)
 80030be:	00d3      	lsls	r3, r2, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	ed93 7b00 	vldr	d7, [r3]
	}

	return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);


}
 80030c6:	eeb0 0b47 	vmov.f64	d0, d7
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	f3af 8000 	nop.w
 80030d8:	00000000 	.word	0x00000000
 80030dc:	412e8480 	.word	0x412e8480
 80030e0:	00000000 	.word	0x00000000
 80030e4:	408f4000 	.word	0x408f4000
 80030e8:	20000345 	.word	0x20000345
 80030ec:	66666667 	.word	0x66666667
 80030f0:	200075b8 	.word	0x200075b8
 80030f4:	2000ccc0 	.word	0x2000ccc0

080030f8 <averaging>:

double averaging (){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0

	double resultValue = 0;
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(settings.isAveraging == 1){
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <averaging+0xa4>)
 800310c:	7b1b      	ldrb	r3, [r3, #12]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d136      	bne.n	8003180 <averaging+0x88>

		if(settings.samplingInterval >= 100){
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <averaging+0xa4>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b63      	cmp	r3, #99	; 0x63
 8003118:	d916      	bls.n	8003148 <averaging+0x50>

			for (uint8_t i = 1;  i < 4; i++)
 800311a:	2301      	movs	r3, #1
 800311c:	71fb      	strb	r3, [r7, #7]
 800311e:	e008      	b.n	8003132 <averaging+0x3a>
				//resultValue += previousValues[SAMPLES - i];
				//resultValue += previousValues[(currentValuePosition + SAMPLES - i)%SAMPLES];
				resultValue = previousValueToCurrent((uint8_t)i);
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff28 	bl	8002f78 <previousValueToCurrent>
 8003128:	ed87 0b02 	vstr	d0, [r7, #8]
			for (uint8_t i = 1;  i < 4; i++)
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	3301      	adds	r3, #1
 8003130:	71fb      	strb	r3, [r7, #7]
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d9f3      	bls.n	8003120 <averaging+0x28>

			resultValue /= 3;
 8003138:	ed97 6b02 	vldr	d6, [r7, #8]
 800313c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003140:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003144:	ed87 7b02 	vstr	d7, [r7, #8]

		}
		if(settings.samplingInterval >= 200){
 8003148:	4b14      	ldr	r3, [pc, #80]	; (800319c <averaging+0xa4>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2bc7      	cmp	r3, #199	; 0xc7
 800314e:	d91c      	bls.n	800318a <averaging+0x92>

			for (uint8_t i = 1;  i < 7; i++)
 8003150:	2301      	movs	r3, #1
 8003152:	71bb      	strb	r3, [r7, #6]
 8003154:	e008      	b.n	8003168 <averaging+0x70>
				//resultValue += previousValues[SAMPLES - i];
				//resultValue += previousValues[(currentValuePosition + SAMPLES - i)%SAMPLES];
				resultValue = previousValueToCurrent((uint8_t)i);
 8003156:	79bb      	ldrb	r3, [r7, #6]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff0d 	bl	8002f78 <previousValueToCurrent>
 800315e:	ed87 0b02 	vstr	d0, [r7, #8]
			for (uint8_t i = 1;  i < 7; i++)
 8003162:	79bb      	ldrb	r3, [r7, #6]
 8003164:	3301      	adds	r3, #1
 8003166:	71bb      	strb	r3, [r7, #6]
 8003168:	79bb      	ldrb	r3, [r7, #6]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d9f3      	bls.n	8003156 <averaging+0x5e>

			resultValue /= 6;
 800316e:	ed97 6b02 	vldr	d6, [r7, #8]
 8003172:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003176:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800317a:	ed87 7b02 	vstr	d7, [r7, #8]
 800317e:	e004      	b.n	800318a <averaging+0x92>
	}
	else{

		//resultValue = previousValues[SAMPLES-1];
		//resultValue = previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
		resultValue = previousValueToCurrent((uint8_t)1);
 8003180:	2001      	movs	r0, #1
 8003182:	f7ff fef9 	bl	8002f78 <previousValueToCurrent>
 8003186:	ed87 0b02 	vstr	d0, [r7, #8]
	}


	return resultValue;
 800318a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800318e:	ec43 2b17 	vmov	d7, r2, r3



}
 8003192:	eeb0 0b47 	vmov.f64	d0, d7
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000018 	.word	0x20000018

080031a0 <triggerMenu>:


// program will check every measuring period if sample value is greater or equal to trigger level
// and also if trigger menu is activated plus if it was activated before --> if all check in it then starts measurement
// TODO - possibly implement HW trigger (ADC8691) allows settings High and Low + hysteresis values and send interrupt when exceeding values
void triggerMenu(){
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0

	//if(previousValues[SAMPLES-1] >= triggerLevel && isTriggered == 0 && isTriggerActive == 1){
	if(averaging() >= settings.triggerLevel && isTriggered == 0 && settings.isTriggerActive == 1){
 80031a4:	f7ff ffa8 	bl	80030f8 <averaging>
 80031a8:	eeb0 6b40 	vmov.f64	d6, d0
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <triggerMenu+0x40>)
 80031ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80031b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	da00      	bge.n	80031be <triggerMenu+0x1e>
		isMeasuring = 1;

	}


}
 80031bc:	e00d      	b.n	80031da <triggerMenu+0x3a>
	if(averaging() >= settings.triggerLevel && isTriggered == 0 && settings.isTriggerActive == 1){
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <triggerMenu+0x44>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <triggerMenu+0x3a>
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <triggerMenu+0x40>)
 80031c8:	7b5b      	ldrb	r3, [r3, #13]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d105      	bne.n	80031da <triggerMenu+0x3a>
		isTriggered = 1;
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <triggerMenu+0x44>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
		isMeasuring = 1;
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <triggerMenu+0x48>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000018 	.word	0x20000018
 80031e4:	20000314 	.word	0x20000314
 80031e8:	20000322 	.word	0x20000322

080031ec <decimalToHex>:

// convert 1 Byte decimal value to 1 byte hex value
uint8_t decimalToHex(uint8_t decimal){
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]

	uint8_t highValue = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
	uint8_t lowValue = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73bb      	strb	r3, [r7, #14]
	uint8_t result = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	737b      	strb	r3, [r7, #13]

	lowValue = decimal%16;
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	73bb      	strb	r3, [r7, #14]

	while(decimal >=16){
 800320a:	e005      	b.n	8003218 <decimalToHex+0x2c>
		highValue++;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	3301      	adds	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
		decimal -=16;
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	3b10      	subs	r3, #16
 8003216:	71fb      	strb	r3, [r7, #7]
	while(decimal >=16){
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	d8f6      	bhi.n	800320c <decimalToHex+0x20>
	}

	result = lowValue | highValue << 4;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	b25a      	sxtb	r2, r3
 8003224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003228:	4313      	orrs	r3, r2
 800322a:	b25b      	sxtb	r3, r3
 800322c:	737b      	strb	r3, [r7, #13]

	return result;
 800322e:	7b7b      	ldrb	r3, [r7, #13]


}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <convertInputToInt>:
	return 999;


}*/

uint16_t convertInputToInt (uint8_t expectedLength, uint8_t *inputWord){
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	71fb      	strb	r3, [r7, #7]

	uint8_t inputLen = strlen(inputWord);
 8003248:	6838      	ldr	r0, [r7, #0]
 800324a:	f7fd f803 	bl	8000254 <strlen>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]

	if (expectedLength + 2 >= inputLen) {
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	429a      	cmp	r2, r3
 800325a:	db05      	blt.n	8003268 <convertInputToInt+0x2c>
		return atoi(inputWord);
 800325c:	6838      	ldr	r0, [r7, #0]
 800325e:	f01b f835 	bl	801e2cc <atoi>
 8003262:	4603      	mov	r3, r0
 8003264:	b29b      	uxth	r3, r3
 8003266:	e001      	b.n	800326c <convertInputToInt+0x30>
	} else {
		//send_uart("\nERR-Command length mismatch\n");
		return 999;
 8003268:	f240 33e7 	movw	r3, #999	; 0x3e7

	return 999;



}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <flushUart>:



}*/

void flushUart(){
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0

	uint8_t dummy = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	71fb      	strb	r3, [r7, #7]

	while(UART_RX_AVAILABLE_BYTE() > 0)
 800327e:	e004      	b.n	800328a <flushUart+0x16>
		UART_RX_Read(&dummy, 1);
 8003280:	1dfb      	adds	r3, r7, #7
 8003282:	2101      	movs	r1, #1
 8003284:	4618      	mov	r0, r3
 8003286:	f005 f80b 	bl	80082a0 <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 800328a:	f005 f81d 	bl	80082c8 <UART_RX_AVAILABLE_BYTE>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f5      	bne.n	8003280 <flushUart+0xc>

}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <printSettingsValues>:

void printSettingsValues(){
 80032a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032a4:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 80032a8:	af0e      	add	r7, sp, #56	; 0x38

	//send_uart("\nSettings\n");
	uint8_t txBuffer [1024];
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
			" Trigger level [A]: %1.12f\n Offset value [mV]: %1.12f\n Power source - Voltage [mV]: %d\n Power source - Current limit [mA]: %d\n Power source enabled: %d\n Power source enable mode: %d\n",
			settings.isLoggingToConsole,
 80032aa:	4b28      	ldr	r3, [pc, #160]	; (800334c <printSettingsValues+0xac>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032ae:	469c      	mov	ip, r3
			settings.isLoggingToSD,
 80032b0:	4b26      	ldr	r3, [pc, #152]	; (800334c <printSettingsValues+0xac>)
 80032b2:	785b      	ldrb	r3, [r3, #1]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032b4:	469e      	mov	lr, r3
			settings.isLoggingToUSB,
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <printSettingsValues+0xac>)
 80032b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032bc:	617b      	str	r3, [r7, #20]
			settings.isLoggingToEthernet,
 80032be:	4b23      	ldr	r3, [pc, #140]	; (800334c <printSettingsValues+0xac>)
 80032c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b21      	ldr	r3, [pc, #132]	; (800334c <printSettingsValues+0xac>)
 80032c8:	6859      	ldr	r1, [r3, #4]
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <printSettingsValues+0xac>)
 80032cc:	689e      	ldr	r6, [r3, #8]
			settings.measuringInterval,
			settings.samplingInterval,
			settings.isAveraging,
 80032ce:	4b1f      	ldr	r3, [pc, #124]	; (800334c <printSettingsValues+0xac>)
 80032d0:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032d2:	60fb      	str	r3, [r7, #12]
			settings.isTriggerActive,
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <printSettingsValues+0xac>)
 80032d6:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <printSettingsValues+0xac>)
 80032dc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <printSettingsValues+0xac>)
 80032e2:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
			settings.triggerLevel,
			settings.lastOffsetValue,
			settings.powerSourceVoltage,
 80032e6:	4b19      	ldr	r3, [pc, #100]	; (800334c <printSettingsValues+0xac>)
 80032e8:	8c1b      	ldrh	r3, [r3, #32]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032ea:	607b      	str	r3, [r7, #4]
			settings.powerSourceCurrent,
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <printSettingsValues+0xac>)
 80032ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032f0:	603b      	str	r3, [r7, #0]
			settings.powerSourceEnable,
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <printSettingsValues+0xac>)
 80032f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032f8:	461a      	mov	r2, r3
			settings.powerSourceEnableMode);
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <printSettingsValues+0xac>)
 80032fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8003300:	f107 0018 	add.w	r0, r7, #24
 8003304:	930d      	str	r3, [sp, #52]	; 0x34
 8003306:	920c      	str	r2, [sp, #48]	; 0x30
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	920b      	str	r2, [sp, #44]	; 0x2c
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	920a      	str	r2, [sp, #40]	; 0x28
 8003310:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003314:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	9205      	str	r2, [sp, #20]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	9204      	str	r2, [sp, #16]
 8003320:	9603      	str	r6, [sp, #12]
 8003322:	9102      	str	r1, [sp, #8]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	9201      	str	r2, [sp, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	4673      	mov	r3, lr
 800332e:	4662      	mov	r2, ip
 8003330:	4907      	ldr	r1, [pc, #28]	; (8003350 <printSettingsValues+0xb0>)
 8003332:	f01b fd1b 	bl	801ed6c <siprintf>
	send_uart3(txBuffer);
 8003336:	f107 0318 	add.w	r3, r7, #24
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fbe8 	bl	8001b10 <send_uart3>



}
 8003340:	bf00      	nop
 8003342:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 8003346:	46bd      	mov	sp, r7
 8003348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800334c:	20000018 	.word	0x20000018
 8003350:	08021768 	.word	0x08021768

08003354 <printLastMeasuredValues>:


void printLastMeasuredValues(){
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b09d      	sub	sp, #116	; 0x74
 8003358:	af02      	add	r7, sp, #8

	uint8_t txBuffer [100];

	send_uart3("\nLast measured values\n");
 800335a:	481b      	ldr	r0, [pc, #108]	; (80033c8 <printLastMeasuredValues+0x74>)
 800335c:	f7fe fbd8 	bl	8001b10 <send_uart3>
	sprintf(txBuffer, "Buffer contains: %d samples\n", SAMPLES);
 8003360:	463b      	mov	r3, r7
 8003362:	220a      	movs	r2, #10
 8003364:	4919      	ldr	r1, [pc, #100]	; (80033cc <printLastMeasuredValues+0x78>)
 8003366:	4618      	mov	r0, r3
 8003368:	f01b fd00 	bl	801ed6c <siprintf>
	send_uart3(txBuffer);
 800336c:	463b      	mov	r3, r7
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe fbce 	bl	8001b10 <send_uart3>

	for(uint8_t i = SAMPLES; i > 0; i--){
 8003374:	230a      	movs	r3, #10
 8003376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800337a:	e01b      	b.n	80033b4 <printLastMeasuredValues+0x60>
		sprintf(txBuffer,"Measured value %3d [A]: %1.12f\n", (i+SAMPLES-1%SAMPLES), previousValueToCurrent(i));
 800337c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003380:	f103 0409 	add.w	r4, r3, #9
 8003384:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fdf5 	bl	8002f78 <previousValueToCurrent>
 800338e:	eeb0 7b40 	vmov.f64	d7, d0
 8003392:	463b      	mov	r3, r7
 8003394:	ed8d 7b00 	vstr	d7, [sp]
 8003398:	4622      	mov	r2, r4
 800339a:	490d      	ldr	r1, [pc, #52]	; (80033d0 <printLastMeasuredValues+0x7c>)
 800339c:	4618      	mov	r0, r3
 800339e:	f01b fce5 	bl	801ed6c <siprintf>
		send_uart3(txBuffer);
 80033a2:	463b      	mov	r3, r7
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe fbb3 	bl	8001b10 <send_uart3>
	for(uint8_t i = SAMPLES; i > 0; i--){
 80033aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033ae:	3b01      	subs	r3, #1
 80033b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80033b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1df      	bne.n	800337c <printLastMeasuredValues+0x28>


	}
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	376c      	adds	r7, #108	; 0x6c
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd90      	pop	{r4, r7, pc}
 80033c6:	bf00      	nop
 80033c8:	0802190c 	.word	0x0802190c
 80033cc:	08021924 	.word	0x08021924
 80033d0:	08021944 	.word	0x08021944

080033d4 <printCurrentTimeDate>:

void printCurrentTimeDate(){
 80033d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d6:	b0c5      	sub	sp, #276	; 0x114
 80033d8:	af04      	add	r7, sp, #16

	uint8_t txBuffer [250];

	/* Get the RTC current Time and Date */
	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80033da:	2200      	movs	r2, #0
 80033dc:	4917      	ldr	r1, [pc, #92]	; (800343c <printCurrentTimeDate+0x68>)
 80033de:	4818      	ldr	r0, [pc, #96]	; (8003440 <printCurrentTimeDate+0x6c>)
 80033e0:	f00a fac2 	bl	800d968 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80033e4:	2200      	movs	r2, #0
 80033e6:	4917      	ldr	r1, [pc, #92]	; (8003444 <printCurrentTimeDate+0x70>)
 80033e8:	4815      	ldr	r0, [pc, #84]	; (8003440 <printCurrentTimeDate+0x6c>)
 80033ea:	f00a fbc3 	bl	800db74 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	/* Display date Format: dd-mm-yy */
	sprintf(txBuffer,"Time [hh:mm:ss] and Date [dd-mm-yy]\n %02d:%02d:%02d_%02d-%02d-%2d\n",Time.Hours, Time.Minutes, Time.Seconds, Date.Date, Date.Month, 2000 + Date.Year);
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <printCurrentTimeDate+0x68>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461d      	mov	r5, r3
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <printCurrentTimeDate+0x68>)
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	461e      	mov	r6, r3
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <printCurrentTimeDate+0x68>)
 80033fc:	789b      	ldrb	r3, [r3, #2]
 80033fe:	461a      	mov	r2, r3
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <printCurrentTimeDate+0x70>)
 8003402:	789b      	ldrb	r3, [r3, #2]
 8003404:	4619      	mov	r1, r3
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <printCurrentTimeDate+0x70>)
 8003408:	785b      	ldrb	r3, [r3, #1]
 800340a:	461c      	mov	r4, r3
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <printCurrentTimeDate+0x70>)
 800340e:	78db      	ldrb	r3, [r3, #3]
 8003410:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003414:	1d38      	adds	r0, r7, #4
 8003416:	9303      	str	r3, [sp, #12]
 8003418:	9402      	str	r4, [sp, #8]
 800341a:	9101      	str	r1, [sp, #4]
 800341c:	9200      	str	r2, [sp, #0]
 800341e:	4633      	mov	r3, r6
 8003420:	462a      	mov	r2, r5
 8003422:	4909      	ldr	r1, [pc, #36]	; (8003448 <printCurrentTimeDate+0x74>)
 8003424:	f01b fca2 	bl	801ed6c <siprintf>

	send_uart3(txBuffer);
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fb70 	bl	8001b10 <send_uart3>

}
 8003430:	bf00      	nop
 8003432:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8003436:	46bd      	mov	sp, r7
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800343a:	bf00      	nop
 800343c:	20008c44 	.word	0x20008c44
 8003440:	20003440 	.word	0x20003440
 8003444:	200072a0 	.word	0x200072a0
 8003448:	08021964 	.word	0x08021964

0800344c <getConsoleInput>:

}*/

// function to read defined number of chars from uart ring buffer
// if timeout value will be 0 then it will act as blocking function waiting for atleast 1 char otherwise it will wait for defined number of chars or timeout
uint8_t getConsoleInput(uint8_t *buffer, uint8_t commandLength, uint32_t timeoutValue){
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	460b      	mov	r3, r1
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	72fb      	strb	r3, [r7, #11]

	// set flags
	//isWaitingForData = 1;
	uint32_t consoleInputTime = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
	// reset timer
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 800345e:	4b3c      	ldr	r3, [pc, #240]	; (8003550 <getConsoleInput+0x104>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
	// null buffer
	for(uint8_t i = 0; i < 10; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e007      	b.n	800347c <getConsoleInput+0x30>
		buffer[i] = 0;
 800346c:	7ffb      	ldrb	r3, [r7, #31]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4413      	add	r3, r2
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 10; i++)
 8003476:	7ffb      	ldrb	r3, [r7, #31]
 8003478:	3301      	adds	r3, #1
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	7ffb      	ldrb	r3, [r7, #31]
 800347e:	2b09      	cmp	r3, #9
 8003480:	d9f4      	bls.n	800346c <getConsoleInput+0x20>
	// blocking and timeout
	if(timeoutValue > 1){
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d929      	bls.n	80034dc <getConsoleInput+0x90>

		while (UART_RX_AVAILABLE_BYTE() < 1	&& __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue);
 8003488:	bf00      	nop
 800348a:	f004 ff1d 	bl	80082c8 <UART_RX_AVAILABLE_BYTE>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <getConsoleInput+0x54>
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <getConsoleInput+0x104>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d8f4      	bhi.n	800348a <getConsoleInput+0x3e>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80034a0:	f004 ff12 	bl	80082c8 <UART_RX_AVAILABLE_BYTE>
 80034a4:	4603      	mov	r3, r0
 80034a6:	757b      	strb	r3, [r7, #21]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80034a8:	4b29      	ldr	r3, [pc, #164]	; (8003550 <getConsoleInput+0x104>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	61bb      	str	r3, [r7, #24]

		UART_RX_Read(buffer, commandLength + 2);
 80034b0:	7afb      	ldrb	r3, [r7, #11]
 80034b2:	3302      	adds	r3, #2
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f004 fef1 	bl	80082a0 <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 80034be:	f7ff fed9 	bl	8003274 <flushUart>
		//while(isWaitingForData == 1 && __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue );

		//consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);

		// timeout report
		if (UART_RX_AVAILABLE_BYTE() < 1 || consoleInputTime > timeoutValue) {
 80034c2:	f004 ff01 	bl	80082c8 <UART_RX_AVAILABLE_BYTE>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <getConsoleInput+0x88>
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d901      	bls.n	80034d8 <getConsoleInput+0x8c>
			return 99;
 80034d4:	2363      	movs	r3, #99	; 0x63
 80034d6:	e036      	b.n	8003546 <getConsoleInput+0xfa>
		}

		return 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	e034      	b.n	8003546 <getConsoleInput+0xfa>

		// blocking, no timeout
	} else if(timeoutValue == 1) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d118      	bne.n	8003514 <getConsoleInput+0xc8>
		 return 99;
		 }

		 return 0;
		 */
		while(UART_RX_AVAILABLE_BYTE() < 1);
 80034e2:	bf00      	nop
 80034e4:	f004 fef0 	bl	80082c8 <UART_RX_AVAILABLE_BYTE>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0fa      	beq.n	80034e4 <getConsoleInput+0x98>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80034ee:	f004 feeb 	bl	80082c8 <UART_RX_AVAILABLE_BYTE>
 80034f2:	4603      	mov	r3, r0
 80034f4:	75bb      	strb	r3, [r7, #22]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80034f6:	4b16      	ldr	r3, [pc, #88]	; (8003550 <getConsoleInput+0x104>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	61bb      	str	r3, [r7, #24]
		UART_RX_Read(buffer, commandLength + 2);
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	3302      	adds	r3, #2
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f004 feca 	bl	80082a0 <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 800350c:	f7ff feb2 	bl	8003274 <flushUart>

		return 0;
 8003510:	2300      	movs	r3, #0
 8003512:	e018      	b.n	8003546 <getConsoleInput+0xfa>


	}
	// non blocking, no timeout
	else{
		if (UART_RX_AVAILABLE_BYTE() > 0) {
 8003514:	f004 fed8 	bl	80082c8 <UART_RX_AVAILABLE_BYTE>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <getConsoleInput+0xf8>
			uint8_t byte = UART_RX_AVAILABLE_BYTE();
 800351e:	f004 fed3 	bl	80082c8 <UART_RX_AVAILABLE_BYTE>
 8003522:	4603      	mov	r3, r0
 8003524:	75fb      	strb	r3, [r7, #23]
			//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
			consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <getConsoleInput+0x104>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	61bb      	str	r3, [r7, #24]

			UART_RX_Read(buffer, commandLength + 2);
 800352e:	7afb      	ldrb	r3, [r7, #11]
 8003530:	3302      	adds	r3, #2
 8003532:	b2db      	uxtb	r3, r3
 8003534:	4619      	mov	r1, r3
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f004 feb2 	bl	80082a0 <UART_RX_Read>
			//send_uart(dataToRead);
			flushUart();
 800353c:	f7ff fe9a 	bl	8003274 <flushUart>

		} else
			return 99;

		return 0;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <getConsoleInput+0xfa>
			return 99;
 8003544:	2363      	movs	r3, #99	; 0x63
	}

	return 0;


}
 8003546:	4618      	mov	r0, r3
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2000dd18 	.word	0x2000dd18

08003554 <consoleMeasuringInterface>:
*		[206] *Set trigger threshold
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

void consoleMeasuringInterface(){
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	; 0x38
 8003558:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nMeasuring settings menu\n[201] Show measuring settings menu\n[202] Set measuring period\n[203] Set sampling period\n[204] Enable averaging function\n[205]Enable trigger function\n[206] Set trigger threshold\n"
 800355e:	489c      	ldr	r0, [pc, #624]	; (80037d0 <consoleMeasuringInterface+0x27c>)
 8003560:	f7fe fad6 	bl	8001b10 <send_uart3>
			"[888] Go to Main menu\n[999] Go to Main menu\n");

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8003564:	2201      	movs	r2, #1
 8003566:	2103      	movs	r1, #3
 8003568:	489a      	ldr	r0, [pc, #616]	; (80037d4 <consoleMeasuringInterface+0x280>)
 800356a:	f7ff ff6f 	bl	800344c <getConsoleInput>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 8003574:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003578:	2b63      	cmp	r3, #99	; 0x63
 800357a:	f000 8125 	beq.w	80037c8 <consoleMeasuringInterface+0x274>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 800357e:	4995      	ldr	r1, [pc, #596]	; (80037d4 <consoleMeasuringInterface+0x280>)
 8003580:	2003      	movs	r0, #3
 8003582:	f7ff fe5b 	bl	800323c <convertInputToInt>
 8003586:	4603      	mov	r3, r0
 8003588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800358c:	4293      	cmp	r3, r2
 800358e:	f000 810e 	beq.w	80037ae <consoleMeasuringInterface+0x25a>
 8003592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003596:	f280 8111 	bge.w	80037bc <consoleMeasuringInterface+0x268>
 800359a:	2bce      	cmp	r3, #206	; 0xce
 800359c:	dc16      	bgt.n	80035cc <consoleMeasuringInterface+0x78>
 800359e:	2bc9      	cmp	r3, #201	; 0xc9
 80035a0:	f2c0 810c 	blt.w	80037bc <consoleMeasuringInterface+0x268>
 80035a4:	3bc9      	subs	r3, #201	; 0xc9
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	f200 8108 	bhi.w	80037bc <consoleMeasuringInterface+0x268>
 80035ac:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <consoleMeasuringInterface+0x60>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035d7 	.word	0x080035d7
 80035b8:	080035dd 	.word	0x080035dd
 80035bc:	08003639 	.word	0x08003639
 80035c0:	08003695 	.word	0x08003695
 80035c4:	080036e3 	.word	0x080036e3
 80035c8:	08003731 	.word	0x08003731
 80035cc:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 80035d0:	f000 80e6 	beq.w	80037a0 <consoleMeasuringInterface+0x24c>
 80035d4:	e0f2      	b.n	80037bc <consoleMeasuringInterface+0x268>
		// show measuring settings menu
		case 201:
			return consoleMeasuringInterface();
 80035d6:	f7ff ffbd 	bl	8003554 <consoleMeasuringInterface>
 80035da:	e0f6      	b.n	80037ca <consoleMeasuringInterface+0x276>
			break;
		// set measuring period
		case 202:
			temp16 = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired measuring interval in us (anywhere between 1us - 1000000us/1sec) or enter 0 to exit without change\n");
 80035e0:	487d      	ldr	r0, [pc, #500]	; (80037d8 <consoleMeasuringInterface+0x284>)
 80035e2:	f7fe fa95 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80035e6:	2201      	movs	r2, #1
 80035e8:	210a      	movs	r1, #10
 80035ea:	487a      	ldr	r0, [pc, #488]	; (80037d4 <consoleMeasuringInterface+0x280>)
 80035ec:	f7ff ff2e 	bl	800344c <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80035f0:	4978      	ldr	r1, [pc, #480]	; (80037d4 <consoleMeasuringInterface+0x280>)
 80035f2:	200a      	movs	r0, #10
 80035f4:	f7ff fe22 	bl	800323c <convertInputToInt>
 80035f8:	4603      	mov	r3, r0
 80035fa:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 1000000){
 80035fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <consoleMeasuringInterface+0xca>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 8003602:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003604:	463b      	mov	r3, r7
 8003606:	4975      	ldr	r1, [pc, #468]	; (80037dc <consoleMeasuringInterface+0x288>)
 8003608:	4618      	mov	r0, r3
 800360a:	f01b fbaf 	bl	801ed6c <siprintf>
				send_uart3(tempBuf);
 800360e:	463b      	mov	r3, r7
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe fa7d 	bl	8001b10 <send_uart3>
				settings.measuringInterval = temp16;
 8003616:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003618:	4a71      	ldr	r2, [pc, #452]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 800361a:	6053      	str	r3, [r2, #4]
 800361c:	e009      	b.n	8003632 <consoleMeasuringInterface+0xde>
			}
			else if(temp16 == 0){
 800361e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <consoleMeasuringInterface+0xd8>
				send_uart3("\nMeasuring period: UNCHANGED\n");
 8003624:	486f      	ldr	r0, [pc, #444]	; (80037e4 <consoleMeasuringInterface+0x290>)
 8003626:	f7fe fa73 	bl	8001b10 <send_uart3>
 800362a:	e002      	b.n	8003632 <consoleMeasuringInterface+0xde>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 800362c:	486e      	ldr	r0, [pc, #440]	; (80037e8 <consoleMeasuringInterface+0x294>)
 800362e:	f7fe fa6f 	bl	8001b10 <send_uart3>
			}
			return consoleMeasuringInterface();
 8003632:	f7ff ff8f 	bl	8003554 <consoleMeasuringInterface>
 8003636:	e0c8      	b.n	80037ca <consoleMeasuringInterface+0x276>
			break;
		// set sampling period
		case 203:
			temp16 = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired sampling interval in us (anywhere between 1us - 10000000us/10sec) or enter 0 to exit without change\n");
 800363c:	486b      	ldr	r0, [pc, #428]	; (80037ec <consoleMeasuringInterface+0x298>)
 800363e:	f7fe fa67 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003642:	2201      	movs	r2, #1
 8003644:	210a      	movs	r1, #10
 8003646:	4863      	ldr	r0, [pc, #396]	; (80037d4 <consoleMeasuringInterface+0x280>)
 8003648:	f7ff ff00 	bl	800344c <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 800364c:	4961      	ldr	r1, [pc, #388]	; (80037d4 <consoleMeasuringInterface+0x280>)
 800364e:	200a      	movs	r0, #10
 8003650:	f7ff fdf4 	bl	800323c <convertInputToInt>
 8003654:	4603      	mov	r3, r0
 8003656:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 10000000){
 8003658:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <consoleMeasuringInterface+0x126>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 800365e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003660:	463b      	mov	r3, r7
 8003662:	495e      	ldr	r1, [pc, #376]	; (80037dc <consoleMeasuringInterface+0x288>)
 8003664:	4618      	mov	r0, r3
 8003666:	f01b fb81 	bl	801ed6c <siprintf>
				send_uart3(tempBuf);
 800366a:	463b      	mov	r3, r7
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fa4f 	bl	8001b10 <send_uart3>
				settings.samplingInterval = temp16;
 8003672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003674:	4a5a      	ldr	r2, [pc, #360]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 8003676:	6093      	str	r3, [r2, #8]
 8003678:	e009      	b.n	800368e <consoleMeasuringInterface+0x13a>
			}
			else if(temp16 == 0){
 800367a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <consoleMeasuringInterface+0x134>
				send_uart3("\nSampling period: UNCHANGED\n");
 8003680:	485b      	ldr	r0, [pc, #364]	; (80037f0 <consoleMeasuringInterface+0x29c>)
 8003682:	f7fe fa45 	bl	8001b10 <send_uart3>
 8003686:	e002      	b.n	800368e <consoleMeasuringInterface+0x13a>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8003688:	4857      	ldr	r0, [pc, #348]	; (80037e8 <consoleMeasuringInterface+0x294>)
 800368a:	f7fe fa41 	bl	8001b10 <send_uart3>
			}
			return consoleMeasuringInterface();
 800368e:	f7ff ff61 	bl	8003554 <consoleMeasuringInterface>
 8003692:	e09a      	b.n	80037ca <consoleMeasuringInterface+0x276>
			break;
		// enable averaging
		case 204:
			send_uart3("\nDo you want to enable averaging function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 8003694:	4857      	ldr	r0, [pc, #348]	; (80037f4 <consoleMeasuringInterface+0x2a0>)
 8003696:	f7fe fa3b 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 800369a:	2201      	movs	r2, #1
 800369c:	2101      	movs	r1, #1
 800369e:	484d      	ldr	r0, [pc, #308]	; (80037d4 <consoleMeasuringInterface+0x280>)
 80036a0:	f7ff fed4 	bl	800344c <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 80036a4:	494b      	ldr	r1, [pc, #300]	; (80037d4 <consoleMeasuringInterface+0x280>)
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7ff fdc8 	bl	800323c <convertInputToInt>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d002      	beq.n	80036b8 <consoleMeasuringInterface+0x164>
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d007      	beq.n	80036c6 <consoleMeasuringInterface+0x172>
 80036b6:	e00d      	b.n	80036d4 <consoleMeasuringInterface+0x180>
			case 1:
				settings.isAveraging = 1;
 80036b8:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: ENABLED\n");
 80036be:	484e      	ldr	r0, [pc, #312]	; (80037f8 <consoleMeasuringInterface+0x2a4>)
 80036c0:	f7fe fa26 	bl	8001b10 <send_uart3>
				break;
 80036c4:	e00a      	b.n	80036dc <consoleMeasuringInterface+0x188>
			case 2:
				settings.isAveraging = 0;
 80036c6:	4b46      	ldr	r3, [pc, #280]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: DISABLED\n");
 80036cc:	484b      	ldr	r0, [pc, #300]	; (80037fc <consoleMeasuringInterface+0x2a8>)
 80036ce:	f7fe fa1f 	bl	8001b10 <send_uart3>
				break;
 80036d2:	e003      	b.n	80036dc <consoleMeasuringInterface+0x188>
			default:
				send_uart3("\nAVERAGING FUNCTION: NO CHANGE\n");
 80036d4:	484a      	ldr	r0, [pc, #296]	; (8003800 <consoleMeasuringInterface+0x2ac>)
 80036d6:	f7fe fa1b 	bl	8001b10 <send_uart3>
				break;
 80036da:	bf00      	nop
			}
			return consoleMeasuringInterface();
 80036dc:	f7ff ff3a 	bl	8003554 <consoleMeasuringInterface>
 80036e0:	e073      	b.n	80037ca <consoleMeasuringInterface+0x276>
			break;
		// enable trigger
		case 205:
			send_uart3("\nDo you want to enable trigger function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 80036e2:	4848      	ldr	r0, [pc, #288]	; (8003804 <consoleMeasuringInterface+0x2b0>)
 80036e4:	f7fe fa14 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 80036e8:	2201      	movs	r2, #1
 80036ea:	2101      	movs	r1, #1
 80036ec:	4839      	ldr	r0, [pc, #228]	; (80037d4 <consoleMeasuringInterface+0x280>)
 80036ee:	f7ff fead 	bl	800344c <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 80036f2:	4938      	ldr	r1, [pc, #224]	; (80037d4 <consoleMeasuringInterface+0x280>)
 80036f4:	2001      	movs	r0, #1
 80036f6:	f7ff fda1 	bl	800323c <convertInputToInt>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d002      	beq.n	8003706 <consoleMeasuringInterface+0x1b2>
 8003700:	2b02      	cmp	r3, #2
 8003702:	d007      	beq.n	8003714 <consoleMeasuringInterface+0x1c0>
 8003704:	e00d      	b.n	8003722 <consoleMeasuringInterface+0x1ce>
			case 1:
				settings.isTriggerActive = 1;
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 8003708:	2201      	movs	r2, #1
 800370a:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER FUNCTION: ENABLED\n");
 800370c:	483e      	ldr	r0, [pc, #248]	; (8003808 <consoleMeasuringInterface+0x2b4>)
 800370e:	f7fe f9ff 	bl	8001b10 <send_uart3>
				break;
 8003712:	e00a      	b.n	800372a <consoleMeasuringInterface+0x1d6>
			case 2:
				settings.isTriggerActive = 0;
 8003714:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 8003716:	2200      	movs	r2, #0
 8003718:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER: DISABLED\n");
 800371a:	483c      	ldr	r0, [pc, #240]	; (800380c <consoleMeasuringInterface+0x2b8>)
 800371c:	f7fe f9f8 	bl	8001b10 <send_uart3>
				break;
 8003720:	e003      	b.n	800372a <consoleMeasuringInterface+0x1d6>
			default:
				send_uart3("\nTRIGGER: NO CHANGE\n");
 8003722:	483b      	ldr	r0, [pc, #236]	; (8003810 <consoleMeasuringInterface+0x2bc>)
 8003724:	f7fe f9f4 	bl	8001b10 <send_uart3>
				break;
 8003728:	bf00      	nop
			}
			return consoleMeasuringInterface();
 800372a:	f7ff ff13 	bl	8003554 <consoleMeasuringInterface>
 800372e:	e04c      	b.n	80037ca <consoleMeasuringInterface+0x276>
			break;
		// set trigger level
		case 206:
			temp16 = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired trigger menu threashold in multiples of nA (anywhere between 5nA - 4A) or enter 0 to exit without change\n");
 8003734:	4837      	ldr	r0, [pc, #220]	; (8003814 <consoleMeasuringInterface+0x2c0>)
 8003736:	f7fe f9eb 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 800373a:	2201      	movs	r2, #1
 800373c:	210a      	movs	r1, #10
 800373e:	4825      	ldr	r0, [pc, #148]	; (80037d4 <consoleMeasuringInterface+0x280>)
 8003740:	f7ff fe84 	bl	800344c <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8003744:	4923      	ldr	r1, [pc, #140]	; (80037d4 <consoleMeasuringInterface+0x280>)
 8003746:	200a      	movs	r0, #10
 8003748:	f7ff fd78 	bl	800323c <convertInputToInt>
 800374c:	4603      	mov	r3, r0
 800374e:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 5 & temp16 <= 4000000){
 8003750:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003752:	2b04      	cmp	r3, #4
 8003754:	d917      	bls.n	8003786 <consoleMeasuringInterface+0x232>
				uint8_t tempBuf [50];
				settings.samplingInterval = temp16;
 8003756:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 800375a:	6093      	str	r3, [r2, #8]
				settings.samplingInterval /= 1000000000;
 800375c:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	0a5b      	lsrs	r3, r3, #9
 8003762:	4a2d      	ldr	r2, [pc, #180]	; (8003818 <consoleMeasuringInterface+0x2c4>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	09db      	lsrs	r3, r3, #7
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 800376c:	6093      	str	r3, [r2, #8]
				sprintf(tempBuf,"New entered value is: %1.12f A\n", settings.samplingInterval);
 800376e:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <consoleMeasuringInterface+0x28c>)
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	463b      	mov	r3, r7
 8003774:	4929      	ldr	r1, [pc, #164]	; (800381c <consoleMeasuringInterface+0x2c8>)
 8003776:	4618      	mov	r0, r3
 8003778:	f01b faf8 	bl	801ed6c <siprintf>
				send_uart3(tempBuf);
 800377c:	463b      	mov	r3, r7
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe f9c6 	bl	8001b10 <send_uart3>
 8003784:	e009      	b.n	800379a <consoleMeasuringInterface+0x246>

			}
			else if(temp16 == 0){
 8003786:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <consoleMeasuringInterface+0x240>
				send_uart3("\nSampling period: UNCHANGED\n");
 800378c:	4818      	ldr	r0, [pc, #96]	; (80037f0 <consoleMeasuringInterface+0x29c>)
 800378e:	f7fe f9bf 	bl	8001b10 <send_uart3>
 8003792:	e002      	b.n	800379a <consoleMeasuringInterface+0x246>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8003794:	4814      	ldr	r0, [pc, #80]	; (80037e8 <consoleMeasuringInterface+0x294>)
 8003796:	f7fe f9bb 	bl	8001b10 <send_uart3>
			}
			return consoleMeasuringInterface();
 800379a:	f7ff fedb 	bl	8003554 <consoleMeasuringInterface>
 800379e:	e014      	b.n	80037ca <consoleMeasuringInterface+0x276>
			break;

			// main menu + print main menu structure
		case 888:
			send_uart3("\nGoing back to Main menu\n");
 80037a0:	481f      	ldr	r0, [pc, #124]	; (8003820 <consoleMeasuringInterface+0x2cc>)
 80037a2:	f7fe f9b5 	bl	8001b10 <send_uart3>
			return consoleInterface(123);
 80037a6:	207b      	movs	r0, #123	; 0x7b
 80037a8:	f000 fe1a 	bl	80043e0 <consoleInterface>
 80037ac:	e00d      	b.n	80037ca <consoleMeasuringInterface+0x276>
			break;
		// main menu + print main menu structure
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 80037ae:	481c      	ldr	r0, [pc, #112]	; (8003820 <consoleMeasuringInterface+0x2cc>)
 80037b0:	f7fe f9ae 	bl	8001b10 <send_uart3>
			return consoleInterface(123);
 80037b4:	207b      	movs	r0, #123	; 0x7b
 80037b6:	f000 fe13 	bl	80043e0 <consoleInterface>
 80037ba:	e006      	b.n	80037ca <consoleMeasuringInterface+0x276>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 80037bc:	4819      	ldr	r0, [pc, #100]	; (8003824 <consoleMeasuringInterface+0x2d0>)
 80037be:	f7fe f9a7 	bl	8001b10 <send_uart3>
			return consoleMeasuringInterface();
 80037c2:	f7ff fec7 	bl	8003554 <consoleMeasuringInterface>
 80037c6:	e000      	b.n	80037ca <consoleMeasuringInterface+0x276>
		return;
 80037c8:	bf00      	nop
			break;
	}

	return consoleMeasuringInterface();

}
 80037ca:	3738      	adds	r7, #56	; 0x38
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	080219a8 	.word	0x080219a8
 80037d4:	20008c38 	.word	0x20008c38
 80037d8:	08021aa0 	.word	0x08021aa0
 80037dc:	08021b14 	.word	0x08021b14
 80037e0:	20000018 	.word	0x20000018
 80037e4:	08021b34 	.word	0x08021b34
 80037e8:	08021b54 	.word	0x08021b54
 80037ec:	08021b74 	.word	0x08021b74
 80037f0:	08021be8 	.word	0x08021be8
 80037f4:	08021c08 	.word	0x08021c08
 80037f8:	08021c70 	.word	0x08021c70
 80037fc:	08021c90 	.word	0x08021c90
 8003800:	08021cb0 	.word	0x08021cb0
 8003804:	08021cd0 	.word	0x08021cd0
 8003808:	08021d34 	.word	0x08021d34
 800380c:	08021d50 	.word	0x08021d50
 8003810:	08021d64 	.word	0x08021d64
 8003814:	08021d7c 	.word	0x08021d7c
 8003818:	00044b83 	.word	0x00044b83
 800381c:	08021df8 	.word	0x08021df8
 8003820:	08021e18 	.word	0x08021e18
 8003824:	08021e34 	.word	0x08021e34

08003828 <consoleRTCSettings>:
*		[888] *Go to Device settings menu
*		[999] *Go to main menu
*/

// menu for setting RTC clock
void consoleRTCSettings(){
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	; 0x38
 800382c:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	86fb      	strh	r3, [r7, #54]	; 0x36
	// print menu structure
	send_uart3("\nRTC settings menu\n[302] Show RTC settings menu\n[321] Show current time and date\n[322] Set Time - Hours, Minutes\n[323] Set Date - Day\n[324] Set Date - Month\n[325] Set Date - Year\n"
 8003832:	48c4      	ldr	r0, [pc, #784]	; (8003b44 <consoleRTCSettings+0x31c>)
 8003834:	f7fe f96c 	bl	8001b10 <send_uart3>
			"[888] Go to Device settings menu\n[999] Go to Main menu\n");

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8003838:	2200      	movs	r2, #0
 800383a:	49c3      	ldr	r1, [pc, #780]	; (8003b48 <consoleRTCSettings+0x320>)
 800383c:	48c3      	ldr	r0, [pc, #780]	; (8003b4c <consoleRTCSettings+0x324>)
 800383e:	f00a f893 	bl	800d968 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8003842:	2200      	movs	r2, #0
 8003844:	49c2      	ldr	r1, [pc, #776]	; (8003b50 <consoleRTCSettings+0x328>)
 8003846:	48c1      	ldr	r0, [pc, #772]	; (8003b4c <consoleRTCSettings+0x324>)
 8003848:	f00a f994 	bl	800db74 <HAL_RTC_GetDate>

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 800384c:	2201      	movs	r2, #1
 800384e:	2103      	movs	r1, #3
 8003850:	48c0      	ldr	r0, [pc, #768]	; (8003b54 <consoleRTCSettings+0x32c>)
 8003852:	f7ff fdfb 	bl	800344c <getConsoleInput>
 8003856:	4603      	mov	r3, r0
 8003858:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 800385c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003860:	2b63      	cmp	r3, #99	; 0x63
 8003862:	f000 8336 	beq.w	8003ed2 <consoleRTCSettings+0x6aa>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 8003866:	49bb      	ldr	r1, [pc, #748]	; (8003b54 <consoleRTCSettings+0x32c>)
 8003868:	2003      	movs	r0, #3
 800386a:	f7ff fce7 	bl	800323c <convertInputToInt>
 800386e:	4603      	mov	r3, r0
 8003870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003874:	4293      	cmp	r3, r2
 8003876:	f000 831f 	beq.w	8003eb8 <consoleRTCSettings+0x690>
 800387a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800387e:	f280 8322 	bge.w	8003ec6 <consoleRTCSettings+0x69e>
 8003882:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8003886:	da3b      	bge.n	8003900 <consoleRTCSettings+0xd8>
 8003888:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800388c:	f2c0 831b 	blt.w	8003ec6 <consoleRTCSettings+0x69e>
 8003890:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8003894:	2b17      	cmp	r3, #23
 8003896:	f200 8316 	bhi.w	8003ec6 <consoleRTCSettings+0x69e>
 800389a:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <consoleRTCSettings+0x78>)
 800389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a0:	0800390b 	.word	0x0800390b
 80038a4:	08003ec7 	.word	0x08003ec7
 80038a8:	08003ec7 	.word	0x08003ec7
 80038ac:	08003ec7 	.word	0x08003ec7
 80038b0:	08003ec7 	.word	0x08003ec7
 80038b4:	08003ec7 	.word	0x08003ec7
 80038b8:	08003ec7 	.word	0x08003ec7
 80038bc:	08003ec7 	.word	0x08003ec7
 80038c0:	08003ec7 	.word	0x08003ec7
 80038c4:	08003ec7 	.word	0x08003ec7
 80038c8:	08003ec7 	.word	0x08003ec7
 80038cc:	08003ec7 	.word	0x08003ec7
 80038d0:	08003ec7 	.word	0x08003ec7
 80038d4:	08003ec7 	.word	0x08003ec7
 80038d8:	08003ec7 	.word	0x08003ec7
 80038dc:	08003ec7 	.word	0x08003ec7
 80038e0:	08003ec7 	.word	0x08003ec7
 80038e4:	08003ec7 	.word	0x08003ec7
 80038e8:	08003ec7 	.word	0x08003ec7
 80038ec:	08003911 	.word	0x08003911
 80038f0:	0800391b 	.word	0x0800391b
 80038f4:	08003a1f 	.word	0x08003a1f
 80038f8:	08003ab7 	.word	0x08003ab7
 80038fc:	08003dc5 	.word	0x08003dc5
 8003900:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8003904:	f000 82ac 	beq.w	8003e60 <consoleRTCSettings+0x638>
 8003908:	e2dd      	b.n	8003ec6 <consoleRTCSettings+0x69e>
		// show rtc settings menu
		case 302:
			return consoleRTCSettings();
 800390a:	f7ff ff8d 	bl	8003828 <consoleRTCSettings>
 800390e:	e2e1      	b.n	8003ed4 <consoleRTCSettings+0x6ac>
			break;
		// show current time and date
		case 321:
			printCurrentTimeDate();
 8003910:	f7ff fd60 	bl	80033d4 <printCurrentTimeDate>
			return consoleRTCSettings();
 8003914:	f7ff ff88 	bl	8003828 <consoleRTCSettings>
 8003918:	e2dc      	b.n	8003ed4 <consoleRTCSettings+0x6ac>
			break;
		// set time - hours, minutes
		case 322:
			temp16 = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter time, first hours in 24h format then when prompted minutes and finally seconds\n\n ENTER hours\n");
 800391e:	488e      	ldr	r0, [pc, #568]	; (8003b58 <consoleRTCSettings+0x330>)
 8003920:	f7fe f8f6 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003924:	2201      	movs	r2, #1
 8003926:	210a      	movs	r1, #10
 8003928:	488a      	ldr	r0, [pc, #552]	; (8003b54 <consoleRTCSettings+0x32c>)
 800392a:	f7ff fd8f 	bl	800344c <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 800392e:	4989      	ldr	r1, [pc, #548]	; (8003b54 <consoleRTCSettings+0x32c>)
 8003930:	200a      	movs	r0, #10
 8003932:	f7ff fc83 	bl	800323c <convertInputToInt>
 8003936:	4603      	mov	r3, r0
 8003938:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 0 & temp16 <= 24){
 800393a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800393c:	2b18      	cmp	r3, #24
 800393e:	d868      	bhi.n	8003a12 <consoleRTCSettings+0x1ea>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered time - hours: %d\n", temp16);
 8003940:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003942:	463b      	mov	r3, r7
 8003944:	4985      	ldr	r1, [pc, #532]	; (8003b5c <consoleRTCSettings+0x334>)
 8003946:	4618      	mov	r0, r3
 8003948:	f01b fa10 	bl	801ed6c <siprintf>
				send_uart3(tempBuf);
 800394c:	463b      	mov	r3, r7
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe f8de 	bl	8001b10 <send_uart3>
				Time.Hours = temp16;
 8003954:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003956:	b2da      	uxtb	r2, r3
 8003958:	4b7b      	ldr	r3, [pc, #492]	; (8003b48 <consoleRTCSettings+0x320>)
 800395a:	701a      	strb	r2, [r3, #0]

				temp16 = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	86fb      	strh	r3, [r7, #54]	; 0x36
				send_uart3("\n ENTER minutes\n");
 8003960:	487f      	ldr	r0, [pc, #508]	; (8003b60 <consoleRTCSettings+0x338>)
 8003962:	f7fe f8d5 	bl	8001b10 <send_uart3>
				getConsoleInput(&inputData, 10, 1);
 8003966:	2201      	movs	r2, #1
 8003968:	210a      	movs	r1, #10
 800396a:	487a      	ldr	r0, [pc, #488]	; (8003b54 <consoleRTCSettings+0x32c>)
 800396c:	f7ff fd6e 	bl	800344c <getConsoleInput>
				temp16 = convertInputToInt(10, &inputData);
 8003970:	4978      	ldr	r1, [pc, #480]	; (8003b54 <consoleRTCSettings+0x32c>)
 8003972:	200a      	movs	r0, #10
 8003974:	f7ff fc62 	bl	800323c <convertInputToInt>
 8003978:	4603      	mov	r3, r0
 800397a:	86fb      	strh	r3, [r7, #54]	; 0x36
				if(temp16 >= 0 & temp16 <= 60){
 800397c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800397e:	2b3c      	cmp	r3, #60	; 0x3c
 8003980:	d84a      	bhi.n	8003a18 <consoleRTCSettings+0x1f0>
					sprintf(tempBuf,"  Entered time - minutes: %d\n", temp16);
 8003982:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003984:	463b      	mov	r3, r7
 8003986:	4977      	ldr	r1, [pc, #476]	; (8003b64 <consoleRTCSettings+0x33c>)
 8003988:	4618      	mov	r0, r3
 800398a:	f01b f9ef 	bl	801ed6c <siprintf>
					send_uart3(tempBuf);
 800398e:	463b      	mov	r3, r7
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe f8bd 	bl	8001b10 <send_uart3>
					Time.Minutes = temp16;
 8003996:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4b6b      	ldr	r3, [pc, #428]	; (8003b48 <consoleRTCSettings+0x320>)
 800399c:	705a      	strb	r2, [r3, #1]

					temp16 = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	86fb      	strh	r3, [r7, #54]	; 0x36
					send_uart3("\n ENTER seconds\n");
 80039a2:	4871      	ldr	r0, [pc, #452]	; (8003b68 <consoleRTCSettings+0x340>)
 80039a4:	f7fe f8b4 	bl	8001b10 <send_uart3>
					getConsoleInput(&inputData, 10, 1);
 80039a8:	2201      	movs	r2, #1
 80039aa:	210a      	movs	r1, #10
 80039ac:	4869      	ldr	r0, [pc, #420]	; (8003b54 <consoleRTCSettings+0x32c>)
 80039ae:	f7ff fd4d 	bl	800344c <getConsoleInput>
					temp16 = convertInputToInt(10, &inputData);
 80039b2:	4968      	ldr	r1, [pc, #416]	; (8003b54 <consoleRTCSettings+0x32c>)
 80039b4:	200a      	movs	r0, #10
 80039b6:	f7ff fc41 	bl	800323c <convertInputToInt>
 80039ba:	4603      	mov	r3, r0
 80039bc:	86fb      	strh	r3, [r7, #54]	; 0x36
					if(temp16 >= 0 & temp16 <= 60){
 80039be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039c0:	2b3c      	cmp	r3, #60	; 0x3c
 80039c2:	d829      	bhi.n	8003a18 <consoleRTCSettings+0x1f0>
						sprintf(tempBuf,"  Entered time - seconds: %d\n", temp16);
 80039c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80039c6:	463b      	mov	r3, r7
 80039c8:	4968      	ldr	r1, [pc, #416]	; (8003b6c <consoleRTCSettings+0x344>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f01b f9ce 	bl	801ed6c <siprintf>
						send_uart3(tempBuf);
 80039d0:	463b      	mov	r3, r7
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe f89c 	bl	8001b10 <send_uart3>
						Time.Seconds = temp16;
 80039d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b5a      	ldr	r3, [pc, #360]	; (8003b48 <consoleRTCSettings+0x320>)
 80039de:	709a      	strb	r2, [r3, #2]

						Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80039e0:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <consoleRTCSettings+0x320>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	611a      	str	r2, [r3, #16]
						Time.StoreOperation = RTC_STOREOPERATION_RESET;
 80039e6:	4b58      	ldr	r3, [pc, #352]	; (8003b48 <consoleRTCSettings+0x320>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	615a      	str	r2, [r3, #20]
						if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 80039ec:	2200      	movs	r2, #0
 80039ee:	4956      	ldr	r1, [pc, #344]	; (8003b48 <consoleRTCSettings+0x320>)
 80039f0:	4856      	ldr	r0, [pc, #344]	; (8003b4c <consoleRTCSettings+0x324>)
 80039f2:	f009 fefb 	bl	800d7ec <HAL_RTC_SetTime>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <consoleRTCSettings+0x1dc>
						{
							send_uart3("ERROR - SAVING TIME\n");
 80039fc:	485c      	ldr	r0, [pc, #368]	; (8003b70 <consoleRTCSettings+0x348>)
 80039fe:	f7fe f887 	bl	8001b10 <send_uart3>
 8003a02:	e009      	b.n	8003a18 <consoleRTCSettings+0x1f0>
						}
						else
							HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003a04:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4850      	ldr	r0, [pc, #320]	; (8003b4c <consoleRTCSettings+0x324>)
 8003a0c:	f00a f992 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
 8003a10:	e002      	b.n	8003a18 <consoleRTCSettings+0x1f0>
					}
				}
			}
			else{
				send_uart3("\nEntered value if out of range\n Time not set");
 8003a12:	4858      	ldr	r0, [pc, #352]	; (8003b74 <consoleRTCSettings+0x34c>)
 8003a14:	f7fe f87c 	bl	8001b10 <send_uart3>
			}
			return consoleRTCSettings();
 8003a18:	f7ff ff06 	bl	8003828 <consoleRTCSettings>
 8003a1c:	e25a      	b.n	8003ed4 <consoleRTCSettings+0x6ac>
			break;
		// set date - day
		case 323:
			temp16 = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - day in format from 1 to 31\n");
 8003a22:	4855      	ldr	r0, [pc, #340]	; (8003b78 <consoleRTCSettings+0x350>)
 8003a24:	f7fe f874 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003a28:	2201      	movs	r2, #1
 8003a2a:	210a      	movs	r1, #10
 8003a2c:	4849      	ldr	r0, [pc, #292]	; (8003b54 <consoleRTCSettings+0x32c>)
 8003a2e:	f7ff fd0d 	bl	800344c <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8003a32:	4948      	ldr	r1, [pc, #288]	; (8003b54 <consoleRTCSettings+0x32c>)
 8003a34:	200a      	movs	r0, #10
 8003a36:	f7ff fc01 	bl	800323c <convertInputToInt>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 8003a3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a4c:	2b1f      	cmp	r3, #31
 8003a4e:	bf94      	ite	ls
 8003a50:	2301      	movls	r3, #1
 8003a52:	2300      	movhi	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	4013      	ands	r3, r2
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d025      	beq.n	8003aaa <consoleRTCSettings+0x282>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered day: %d\n", temp16);
 8003a5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003a60:	463b      	mov	r3, r7
 8003a62:	4946      	ldr	r1, [pc, #280]	; (8003b7c <consoleRTCSettings+0x354>)
 8003a64:	4618      	mov	r0, r3
 8003a66:	f01b f981 	bl	801ed6c <siprintf>
				send_uart3(tempBuf);
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe f84f 	bl	8001b10 <send_uart3>
				Date.Date = decimalToHex((uint8_t)temp16);
 8003a72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fbb8 	bl	80031ec <decimalToHex>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <consoleRTCSettings+0x328>)
 8003a82:	709a      	strb	r2, [r3, #2]
				//Date.Date = temp16;
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003a84:	2200      	movs	r2, #0
 8003a86:	4932      	ldr	r1, [pc, #200]	; (8003b50 <consoleRTCSettings+0x328>)
 8003a88:	4830      	ldr	r0, [pc, #192]	; (8003b4c <consoleRTCSettings+0x324>)
 8003a8a:	f009 ffcb 	bl	800da24 <HAL_RTC_SetDate>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <consoleRTCSettings+0x274>
				{
					send_uart3("ERROR - SAVING DATE\n");
 8003a94:	483a      	ldr	r0, [pc, #232]	; (8003b80 <consoleRTCSettings+0x358>)
 8003a96:	f7fe f83b 	bl	8001b10 <send_uart3>
 8003a9a:	e009      	b.n	8003ab0 <consoleRTCSettings+0x288>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003a9c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	482a      	ldr	r0, [pc, #168]	; (8003b4c <consoleRTCSettings+0x324>)
 8003aa4:	f00a f946 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
 8003aa8:	e002      	b.n	8003ab0 <consoleRTCSettings+0x288>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8003aaa:	4836      	ldr	r0, [pc, #216]	; (8003b84 <consoleRTCSettings+0x35c>)
 8003aac:	f7fe f830 	bl	8001b10 <send_uart3>
			}
			return consoleRTCSettings();
 8003ab0:	f7ff feba 	bl	8003828 <consoleRTCSettings>
 8003ab4:	e20e      	b.n	8003ed4 <consoleRTCSettings+0x6ac>
			break;
		// set date - month
		case 324:
			send_uart3("\nEnter number corresponding to month(1 - January, 2 - February, ...)\n");
 8003ab6:	4834      	ldr	r0, [pc, #208]	; (8003b88 <consoleRTCSettings+0x360>)
 8003ab8:	f7fe f82a 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003abc:	2201      	movs	r2, #1
 8003abe:	210a      	movs	r1, #10
 8003ac0:	4824      	ldr	r0, [pc, #144]	; (8003b54 <consoleRTCSettings+0x32c>)
 8003ac2:	f7ff fcc3 	bl	800344c <getConsoleInput>
			switch (convertInputToInt(10, &inputData)) {
 8003ac6:	4923      	ldr	r1, [pc, #140]	; (8003b54 <consoleRTCSettings+0x32c>)
 8003ac8:	200a      	movs	r0, #10
 8003aca:	f7ff fbb7 	bl	800323c <convertInputToInt>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	2b0b      	cmp	r3, #11
 8003ad4:	f200 816f 	bhi.w	8003db6 <consoleRTCSettings+0x58e>
 8003ad8:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <consoleRTCSettings+0x2b8>)
 8003ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ade:	bf00      	nop
 8003ae0:	08003b11 	.word	0x08003b11
 8003ae4:	08003b91 	.word	0x08003b91
 8003ae8:	08003bc3 	.word	0x08003bc3
 8003aec:	08003bf5 	.word	0x08003bf5
 8003af0:	08003c27 	.word	0x08003c27
 8003af4:	08003c59 	.word	0x08003c59
 8003af8:	08003c8b 	.word	0x08003c8b
 8003afc:	08003cbd 	.word	0x08003cbd
 8003b00:	08003cef 	.word	0x08003cef
 8003b04:	08003d21 	.word	0x08003d21
 8003b08:	08003d53 	.word	0x08003d53
 8003b0c:	08003d85 	.word	0x08003d85
				case 1:
					Date.Month = RTC_MONTH_JANUARY;
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <consoleRTCSettings+0x328>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: January / 1\n");
 8003b16:	481d      	ldr	r0, [pc, #116]	; (8003b8c <consoleRTCSettings+0x364>)
 8003b18:	f7fd fffa 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	490c      	ldr	r1, [pc, #48]	; (8003b50 <consoleRTCSettings+0x328>)
 8003b20:	480a      	ldr	r0, [pc, #40]	; (8003b4c <consoleRTCSettings+0x324>)
 8003b22:	f009 ff7f 	bl	800da24 <HAL_RTC_SetDate>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <consoleRTCSettings+0x30c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003b2c:	4814      	ldr	r0, [pc, #80]	; (8003b80 <consoleRTCSettings+0x358>)
 8003b2e:	f7fd ffef 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003b32:	e144      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003b34:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4804      	ldr	r0, [pc, #16]	; (8003b4c <consoleRTCSettings+0x324>)
 8003b3c:	f00a f8fa 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003b40:	e13d      	b.n	8003dbe <consoleRTCSettings+0x596>
 8003b42:	bf00      	nop
 8003b44:	08021e4c 	.word	0x08021e4c
 8003b48:	20008c44 	.word	0x20008c44
 8003b4c:	20003440 	.word	0x20003440
 8003b50:	200072a0 	.word	0x200072a0
 8003b54:	20008c38 	.word	0x20008c38
 8003b58:	08021f38 	.word	0x08021f38
 8003b5c:	08021fa0 	.word	0x08021fa0
 8003b60:	08021fbc 	.word	0x08021fbc
 8003b64:	08021fd0 	.word	0x08021fd0
 8003b68:	08021ff0 	.word	0x08021ff0
 8003b6c:	08022004 	.word	0x08022004
 8003b70:	08022024 	.word	0x08022024
 8003b74:	0802203c 	.word	0x0802203c
 8003b78:	0802206c 	.word	0x0802206c
 8003b7c:	08022098 	.word	0x08022098
 8003b80:	080220ac 	.word	0x080220ac
 8003b84:	080220c4 	.word	0x080220c4
 8003b88:	080220f4 	.word	0x080220f4
 8003b8c:	0802213c 	.word	0x0802213c
				case 2:
					Date.Month = RTC_MONTH_FEBRUARY;
 8003b90:	4bb6      	ldr	r3, [pc, #728]	; (8003e6c <consoleRTCSettings+0x644>)
 8003b92:	2202      	movs	r2, #2
 8003b94:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: February / 2\n");
 8003b96:	48b6      	ldr	r0, [pc, #728]	; (8003e70 <consoleRTCSettings+0x648>)
 8003b98:	f7fd ffba 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	49b3      	ldr	r1, [pc, #716]	; (8003e6c <consoleRTCSettings+0x644>)
 8003ba0:	48b4      	ldr	r0, [pc, #720]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003ba2:	f009 ff3f 	bl	800da24 <HAL_RTC_SetDate>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <consoleRTCSettings+0x38c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003bac:	48b2      	ldr	r0, [pc, #712]	; (8003e78 <consoleRTCSettings+0x650>)
 8003bae:	f7fd ffaf 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003bb2:	e104      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003bb4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003bb8:	2101      	movs	r1, #1
 8003bba:	48ae      	ldr	r0, [pc, #696]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003bbc:	f00a f8ba 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003bc0:	e0fd      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 3:
					Date.Month = RTC_MONTH_MARCH;
 8003bc2:	4baa      	ldr	r3, [pc, #680]	; (8003e6c <consoleRTCSettings+0x644>)
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: March / 3\n");
 8003bc8:	48ac      	ldr	r0, [pc, #688]	; (8003e7c <consoleRTCSettings+0x654>)
 8003bca:	f7fd ffa1 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	49a6      	ldr	r1, [pc, #664]	; (8003e6c <consoleRTCSettings+0x644>)
 8003bd2:	48a8      	ldr	r0, [pc, #672]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003bd4:	f009 ff26 	bl	800da24 <HAL_RTC_SetDate>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <consoleRTCSettings+0x3be>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003bde:	48a6      	ldr	r0, [pc, #664]	; (8003e78 <consoleRTCSettings+0x650>)
 8003be0:	f7fd ff96 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003be4:	e0eb      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003be6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003bea:	2101      	movs	r1, #1
 8003bec:	48a1      	ldr	r0, [pc, #644]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003bee:	f00a f8a1 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003bf2:	e0e4      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 4:
					Date.Month = RTC_MONTH_APRIL;
 8003bf4:	4b9d      	ldr	r3, [pc, #628]	; (8003e6c <consoleRTCSettings+0x644>)
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: April / 4\n");
 8003bfa:	48a1      	ldr	r0, [pc, #644]	; (8003e80 <consoleRTCSettings+0x658>)
 8003bfc:	f7fd ff88 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c00:	2200      	movs	r2, #0
 8003c02:	499a      	ldr	r1, [pc, #616]	; (8003e6c <consoleRTCSettings+0x644>)
 8003c04:	489b      	ldr	r0, [pc, #620]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003c06:	f009 ff0d 	bl	800da24 <HAL_RTC_SetDate>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <consoleRTCSettings+0x3f0>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003c10:	4899      	ldr	r0, [pc, #612]	; (8003e78 <consoleRTCSettings+0x650>)
 8003c12:	f7fd ff7d 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003c16:	e0d2      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003c18:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4895      	ldr	r0, [pc, #596]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003c20:	f00a f888 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003c24:	e0cb      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 5:
					Date.Month = RTC_MONTH_MAY;
 8003c26:	4b91      	ldr	r3, [pc, #580]	; (8003e6c <consoleRTCSettings+0x644>)
 8003c28:	2205      	movs	r2, #5
 8003c2a:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: May / 5\n");
 8003c2c:	4895      	ldr	r0, [pc, #596]	; (8003e84 <consoleRTCSettings+0x65c>)
 8003c2e:	f7fd ff6f 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c32:	2200      	movs	r2, #0
 8003c34:	498d      	ldr	r1, [pc, #564]	; (8003e6c <consoleRTCSettings+0x644>)
 8003c36:	488f      	ldr	r0, [pc, #572]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003c38:	f009 fef4 	bl	800da24 <HAL_RTC_SetDate>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <consoleRTCSettings+0x422>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003c42:	488d      	ldr	r0, [pc, #564]	; (8003e78 <consoleRTCSettings+0x650>)
 8003c44:	f7fd ff64 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003c48:	e0b9      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003c4a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4888      	ldr	r0, [pc, #544]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003c52:	f00a f86f 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003c56:	e0b2      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 6:
					Date.Month = RTC_MONTH_JUNE;
 8003c58:	4b84      	ldr	r3, [pc, #528]	; (8003e6c <consoleRTCSettings+0x644>)
 8003c5a:	2206      	movs	r2, #6
 8003c5c:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: June / 6\n");
 8003c5e:	488a      	ldr	r0, [pc, #552]	; (8003e88 <consoleRTCSettings+0x660>)
 8003c60:	f7fd ff56 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c64:	2200      	movs	r2, #0
 8003c66:	4981      	ldr	r1, [pc, #516]	; (8003e6c <consoleRTCSettings+0x644>)
 8003c68:	4882      	ldr	r0, [pc, #520]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003c6a:	f009 fedb 	bl	800da24 <HAL_RTC_SetDate>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <consoleRTCSettings+0x454>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003c74:	4880      	ldr	r0, [pc, #512]	; (8003e78 <consoleRTCSettings+0x650>)
 8003c76:	f7fd ff4b 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003c7a:	e0a0      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003c7c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003c80:	2101      	movs	r1, #1
 8003c82:	487c      	ldr	r0, [pc, #496]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003c84:	f00a f856 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003c88:	e099      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 7:
					Date.Month = RTC_MONTH_JULY;
 8003c8a:	4b78      	ldr	r3, [pc, #480]	; (8003e6c <consoleRTCSettings+0x644>)
 8003c8c:	2207      	movs	r2, #7
 8003c8e:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: July / 7\n");
 8003c90:	487e      	ldr	r0, [pc, #504]	; (8003e8c <consoleRTCSettings+0x664>)
 8003c92:	f7fd ff3d 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c96:	2200      	movs	r2, #0
 8003c98:	4974      	ldr	r1, [pc, #464]	; (8003e6c <consoleRTCSettings+0x644>)
 8003c9a:	4876      	ldr	r0, [pc, #472]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003c9c:	f009 fec2 	bl	800da24 <HAL_RTC_SetDate>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <consoleRTCSettings+0x486>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003ca6:	4874      	ldr	r0, [pc, #464]	; (8003e78 <consoleRTCSettings+0x650>)
 8003ca8:	f7fd ff32 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003cac:	e087      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003cae:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	486f      	ldr	r0, [pc, #444]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003cb6:	f00a f83d 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003cba:	e080      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 8:
					Date.Month = RTC_MONTH_AUGUST;
 8003cbc:	4b6b      	ldr	r3, [pc, #428]	; (8003e6c <consoleRTCSettings+0x644>)
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: August / 8\n");
 8003cc2:	4873      	ldr	r0, [pc, #460]	; (8003e90 <consoleRTCSettings+0x668>)
 8003cc4:	f7fd ff24 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4968      	ldr	r1, [pc, #416]	; (8003e6c <consoleRTCSettings+0x644>)
 8003ccc:	4869      	ldr	r0, [pc, #420]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003cce:	f009 fea9 	bl	800da24 <HAL_RTC_SetDate>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <consoleRTCSettings+0x4b8>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003cd8:	4867      	ldr	r0, [pc, #412]	; (8003e78 <consoleRTCSettings+0x650>)
 8003cda:	f7fd ff19 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003cde:	e06e      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003ce0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4863      	ldr	r0, [pc, #396]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003ce8:	f00a f824 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003cec:	e067      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 9:
					Date.Month = RTC_MONTH_SEPTEMBER;
 8003cee:	4b5f      	ldr	r3, [pc, #380]	; (8003e6c <consoleRTCSettings+0x644>)
 8003cf0:	2209      	movs	r2, #9
 8003cf2:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: September / 9\n");
 8003cf4:	4867      	ldr	r0, [pc, #412]	; (8003e94 <consoleRTCSettings+0x66c>)
 8003cf6:	f7fd ff0b 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	495b      	ldr	r1, [pc, #364]	; (8003e6c <consoleRTCSettings+0x644>)
 8003cfe:	485d      	ldr	r0, [pc, #372]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003d00:	f009 fe90 	bl	800da24 <HAL_RTC_SetDate>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <consoleRTCSettings+0x4ea>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003d0a:	485b      	ldr	r0, [pc, #364]	; (8003e78 <consoleRTCSettings+0x650>)
 8003d0c:	f7fd ff00 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003d10:	e055      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003d12:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003d16:	2101      	movs	r1, #1
 8003d18:	4856      	ldr	r0, [pc, #344]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003d1a:	f00a f80b 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003d1e:	e04e      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 10:
					Date.Month = RTC_MONTH_OCTOBER;
 8003d20:	4b52      	ldr	r3, [pc, #328]	; (8003e6c <consoleRTCSettings+0x644>)
 8003d22:	2210      	movs	r2, #16
 8003d24:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: October / 10\n");
 8003d26:	485c      	ldr	r0, [pc, #368]	; (8003e98 <consoleRTCSettings+0x670>)
 8003d28:	f7fd fef2 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	494f      	ldr	r1, [pc, #316]	; (8003e6c <consoleRTCSettings+0x644>)
 8003d30:	4850      	ldr	r0, [pc, #320]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003d32:	f009 fe77 	bl	800da24 <HAL_RTC_SetDate>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <consoleRTCSettings+0x51c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003d3c:	484e      	ldr	r0, [pc, #312]	; (8003e78 <consoleRTCSettings+0x650>)
 8003d3e:	f7fd fee7 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003d42:	e03c      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003d44:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003d48:	2101      	movs	r1, #1
 8003d4a:	484a      	ldr	r0, [pc, #296]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003d4c:	f009 fff2 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003d50:	e035      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 11:
					Date.Month = RTC_MONTH_NOVEMBER;
 8003d52:	4b46      	ldr	r3, [pc, #280]	; (8003e6c <consoleRTCSettings+0x644>)
 8003d54:	2211      	movs	r2, #17
 8003d56:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: November / 11\n");
 8003d58:	4850      	ldr	r0, [pc, #320]	; (8003e9c <consoleRTCSettings+0x674>)
 8003d5a:	f7fd fed9 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4942      	ldr	r1, [pc, #264]	; (8003e6c <consoleRTCSettings+0x644>)
 8003d62:	4844      	ldr	r0, [pc, #272]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003d64:	f009 fe5e 	bl	800da24 <HAL_RTC_SetDate>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <consoleRTCSettings+0x54e>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003d6e:	4842      	ldr	r0, [pc, #264]	; (8003e78 <consoleRTCSettings+0x650>)
 8003d70:	f7fd fece 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003d74:	e023      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003d76:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	483d      	ldr	r0, [pc, #244]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003d7e:	f009 ffd9 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003d82:	e01c      	b.n	8003dbe <consoleRTCSettings+0x596>
				case 12:
					Date.Month = RTC_MONTH_DECEMBER;
 8003d84:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <consoleRTCSettings+0x644>)
 8003d86:	2212      	movs	r2, #18
 8003d88:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: December / 12\n");
 8003d8a:	4845      	ldr	r0, [pc, #276]	; (8003ea0 <consoleRTCSettings+0x678>)
 8003d8c:	f7fd fec0 	bl	8001b10 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003d90:	2200      	movs	r2, #0
 8003d92:	4936      	ldr	r1, [pc, #216]	; (8003e6c <consoleRTCSettings+0x644>)
 8003d94:	4837      	ldr	r0, [pc, #220]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003d96:	f009 fe45 	bl	800da24 <HAL_RTC_SetDate>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <consoleRTCSettings+0x580>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003da0:	4835      	ldr	r0, [pc, #212]	; (8003e78 <consoleRTCSettings+0x650>)
 8003da2:	f7fd feb5 	bl	8001b10 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003da6:	e00a      	b.n	8003dbe <consoleRTCSettings+0x596>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003da8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003dac:	2101      	movs	r1, #1
 8003dae:	4831      	ldr	r0, [pc, #196]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003db0:	f009 ffc0 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
					break;
 8003db4:	e003      	b.n	8003dbe <consoleRTCSettings+0x596>
				default:
					send_uart3("\nEntered value if out of range\n Date not set");
 8003db6:	483b      	ldr	r0, [pc, #236]	; (8003ea4 <consoleRTCSettings+0x67c>)
 8003db8:	f7fd feaa 	bl	8001b10 <send_uart3>
					break;
 8003dbc:	bf00      	nop
			}
			return consoleRTCSettings();
 8003dbe:	f7ff fd33 	bl	8003828 <consoleRTCSettings>
 8003dc2:	e087      	b.n	8003ed4 <consoleRTCSettings+0x6ac>
			break;
		// set date - year
		case 325:
			temp16 = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - year in format of last 2 digits (ex. 2020 means entering 20)\n");
 8003dc8:	4837      	ldr	r0, [pc, #220]	; (8003ea8 <consoleRTCSettings+0x680>)
 8003dca:	f7fd fea1 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003dce:	2201      	movs	r2, #1
 8003dd0:	210a      	movs	r1, #10
 8003dd2:	4836      	ldr	r0, [pc, #216]	; (8003eac <consoleRTCSettings+0x684>)
 8003dd4:	f7ff fb3a 	bl	800344c <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8003dd8:	4934      	ldr	r1, [pc, #208]	; (8003eac <consoleRTCSettings+0x684>)
 8003dda:	200a      	movs	r0, #10
 8003ddc:	f7ff fa2e 	bl	800323c <convertInputToInt>
 8003de0:	4603      	mov	r3, r0
 8003de2:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 8003de4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003df2:	2b1f      	cmp	r3, #31
 8003df4:	bf94      	ite	ls
 8003df6:	2301      	movls	r3, #1
 8003df8:	2300      	movhi	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d027      	beq.n	8003e54 <consoleRTCSettings+0x62c>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered year: %d\n", 2000 + temp16);
 8003e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e06:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003e0a:	463b      	mov	r3, r7
 8003e0c:	4928      	ldr	r1, [pc, #160]	; (8003eb0 <consoleRTCSettings+0x688>)
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f01a ffac 	bl	801ed6c <siprintf>
				send_uart3(tempBuf);
 8003e14:	463b      	mov	r3, r7
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd fe7a 	bl	8001b10 <send_uart3>
				Date.Year = decimalToHex((uint8_t)temp16);
 8003e1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff f9e3 	bl	80031ec <decimalToHex>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <consoleRTCSettings+0x644>)
 8003e2c:	70da      	strb	r2, [r3, #3]
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <consoleRTCSettings+0x644>)
 8003e32:	4810      	ldr	r0, [pc, #64]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003e34:	f009 fdf6 	bl	800da24 <HAL_RTC_SetDate>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <consoleRTCSettings+0x61e>
				{
					send_uart3("ERROR - SAVING DATE\n");
 8003e3e:	480e      	ldr	r0, [pc, #56]	; (8003e78 <consoleRTCSettings+0x650>)
 8003e40:	f7fd fe66 	bl	8001b10 <send_uart3>
 8003e44:	e009      	b.n	8003e5a <consoleRTCSettings+0x632>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003e46:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4809      	ldr	r0, [pc, #36]	; (8003e74 <consoleRTCSettings+0x64c>)
 8003e4e:	f009 ff71 	bl	800dd34 <HAL_RTCEx_BKUPWrite>
 8003e52:	e002      	b.n	8003e5a <consoleRTCSettings+0x632>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8003e54:	4813      	ldr	r0, [pc, #76]	; (8003ea4 <consoleRTCSettings+0x67c>)
 8003e56:	f7fd fe5b 	bl	8001b10 <send_uart3>
			}
			return consoleRTCSettings();
 8003e5a:	f7ff fce5 	bl	8003828 <consoleRTCSettings>
 8003e5e:	e039      	b.n	8003ed4 <consoleRTCSettings+0x6ac>
			break;

		// device settings menu
		case 888:
			send_uart3("\nGoing back to Device settings menu\n");
 8003e60:	4814      	ldr	r0, [pc, #80]	; (8003eb4 <consoleRTCSettings+0x68c>)
 8003e62:	f7fd fe55 	bl	8001b10 <send_uart3>
			return consoleDeviceInterface();
 8003e66:	f000 f83d 	bl	8003ee4 <consoleDeviceInterface>
 8003e6a:	e033      	b.n	8003ed4 <consoleRTCSettings+0x6ac>
 8003e6c:	200072a0 	.word	0x200072a0
 8003e70:	08022158 	.word	0x08022158
 8003e74:	20003440 	.word	0x20003440
 8003e78:	080220ac 	.word	0x080220ac
 8003e7c:	08022178 	.word	0x08022178
 8003e80:	08022194 	.word	0x08022194
 8003e84:	080221b0 	.word	0x080221b0
 8003e88:	080221c8 	.word	0x080221c8
 8003e8c:	080221e4 	.word	0x080221e4
 8003e90:	08022200 	.word	0x08022200
 8003e94:	0802221c 	.word	0x0802221c
 8003e98:	0802223c 	.word	0x0802223c
 8003e9c:	0802225c 	.word	0x0802225c
 8003ea0:	0802227c 	.word	0x0802227c
 8003ea4:	080220c4 	.word	0x080220c4
 8003ea8:	0802229c 	.word	0x0802229c
 8003eac:	20008c38 	.word	0x20008c38
 8003eb0:	080222e8 	.word	0x080222e8
 8003eb4:	080222fc 	.word	0x080222fc
			break;
		// main menu
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 8003eb8:	4808      	ldr	r0, [pc, #32]	; (8003edc <consoleRTCSettings+0x6b4>)
 8003eba:	f7fd fe29 	bl	8001b10 <send_uart3>
			return consoleInterface(123);
 8003ebe:	207b      	movs	r0, #123	; 0x7b
 8003ec0:	f000 fa8e 	bl	80043e0 <consoleInterface>
 8003ec4:	e006      	b.n	8003ed4 <consoleRTCSettings+0x6ac>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 8003ec6:	4806      	ldr	r0, [pc, #24]	; (8003ee0 <consoleRTCSettings+0x6b8>)
 8003ec8:	f7fd fe22 	bl	8001b10 <send_uart3>
			return consoleRTCSettings();
 8003ecc:	f7ff fcac 	bl	8003828 <consoleRTCSettings>
 8003ed0:	e000      	b.n	8003ed4 <consoleRTCSettings+0x6ac>
		return;
 8003ed2:	bf00      	nop


	return consoleRTCSettings();


}
 8003ed4:	3738      	adds	r7, #56	; 0x38
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	08021e18 	.word	0x08021e18
 8003ee0:	08021e34 	.word	0x08021e34

08003ee4 <consoleDeviceInterface>:
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

// subfunction to hanhle console inputs for device settings menu
void consoleDeviceInterface(){
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08e      	sub	sp, #56	; 0x38
 8003ee8:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 8003eee:	48a9      	ldr	r0, [pc, #676]	; (8004194 <consoleDeviceInterface+0x2b0>)
 8003ef0:	f7fd fe0e 	bl	8001b10 <send_uart3>
			"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");


	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	2103      	movs	r1, #3
 8003ef8:	48a7      	ldr	r0, [pc, #668]	; (8004198 <consoleDeviceInterface+0x2b4>)
 8003efa:	f7ff faa7 	bl	800344c <getConsoleInput>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if(stateFlag == 99){
 8003f04:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003f08:	2b63      	cmp	r3, #99	; 0x63
 8003f0a:	f000 823e 	beq.w	800438a <consoleDeviceInterface+0x4a6>
		return;
	}

	switch(convertInputToInt(3, inputData)){
 8003f0e:	49a2      	ldr	r1, [pc, #648]	; (8004198 <consoleDeviceInterface+0x2b4>)
 8003f10:	2003      	movs	r0, #3
 8003f12:	f7ff f993 	bl	800323c <convertInputToInt>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003f1c:	dc24      	bgt.n	8003f68 <consoleDeviceInterface+0x84>
 8003f1e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003f22:	f340 822c 	ble.w	800437e <consoleDeviceInterface+0x49a>
 8003f26:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8003f2a:	2b0b      	cmp	r3, #11
 8003f2c:	f200 8227 	bhi.w	800437e <consoleDeviceInterface+0x49a>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <consoleDeviceInterface+0x54>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f73 	.word	0x08003f73
 8003f3c:	08003f7f 	.word	0x08003f7f
 8003f40:	08003f85 	.word	0x08003f85
 8003f44:	08004023 	.word	0x08004023
 8003f48:	0800402f 	.word	0x0800402f
 8003f4c:	0800403b 	.word	0x0800403b
 8003f50:	08004099 	.word	0x08004099
 8003f54:	080040fd 	.word	0x080040fd
 8003f58:	0800410f 	.word	0x0800410f
 8003f5c:	080041f5 	.word	0x080041f5
 8003f60:	08004273 	.word	0x08004273
 8003f64:	080042f1 	.word	0x080042f1
 8003f68:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8003f6c:	f000 8200 	beq.w	8004370 <consoleDeviceInterface+0x48c>
 8003f70:	e205      	b.n	800437e <consoleDeviceInterface+0x49a>
		// show device settings menu
		case 301:
			send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 8003f72:	4888      	ldr	r0, [pc, #544]	; (8004194 <consoleDeviceInterface+0x2b0>)
 8003f74:	f7fd fdcc 	bl	8001b10 <send_uart3>
						"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");
			return consoleDeviceInterface();
 8003f78:	f7ff ffb4 	bl	8003ee4 <consoleDeviceInterface>
 8003f7c:	e206      	b.n	800438c <consoleDeviceInterface+0x4a8>
			break;
		// go to RTC settings submenu
		case 302:
			return consoleRTCSettings();
 8003f7e:	f7ff fc53 	bl	8003828 <consoleRTCSettings>
 8003f82:	e203      	b.n	800438c <consoleDeviceInterface+0x4a8>
			break;
		// choose storing method
		case 303:
			send_uart3("\nChoose storing method\n\n 1 - COM port\n 2 - SD Card\n 3 - USB Flash Drive\n 0 - Exit, no change\n");
 8003f84:	4885      	ldr	r0, [pc, #532]	; (800419c <consoleDeviceInterface+0x2b8>)
 8003f86:	f7fd fdc3 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4882      	ldr	r0, [pc, #520]	; (8004198 <consoleDeviceInterface+0x2b4>)
 8003f90:	f7ff fa5c 	bl	800344c <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003f94:	4980      	ldr	r1, [pc, #512]	; (8004198 <consoleDeviceInterface+0x2b4>)
 8003f96:	2001      	movs	r0, #1
 8003f98:	f7ff f950 	bl	800323c <convertInputToInt>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d838      	bhi.n	8004014 <consoleDeviceInterface+0x130>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <consoleDeviceInterface+0xc4>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	0800400d 	.word	0x0800400d
 8003fac:	08003fb9 	.word	0x08003fb9
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003ff1 	.word	0x08003ff1
			case 1:
				settings.isLoggingToConsole = 1;
 8003fb8:	4b79      	ldr	r3, [pc, #484]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 8003fbe:	4b78      	ldr	r3, [pc, #480]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 8003fc4:	4b76      	ldr	r3, [pc, #472]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: COM port\n");
 8003fcc:	4875      	ldr	r0, [pc, #468]	; (80041a4 <consoleDeviceInterface+0x2c0>)
 8003fce:	f7fd fd9f 	bl	8001b10 <send_uart3>
				break;
 8003fd2:	e023      	b.n	800401c <consoleDeviceInterface+0x138>
			case 2:
				settings.isLoggingToConsole = 0;
 8003fd4:	4b72      	ldr	r3, [pc, #456]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 1;
 8003fda:	4b71      	ldr	r3, [pc, #452]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 8003fe0:	4b6f      	ldr	r3, [pc, #444]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: SD Card\n");
 8003fe8:	486f      	ldr	r0, [pc, #444]	; (80041a8 <consoleDeviceInterface+0x2c4>)
 8003fea:	f7fd fd91 	bl	8001b10 <send_uart3>
				break;
 8003fee:	e015      	b.n	800401c <consoleDeviceInterface+0x138>
			case 3:
				settings.isLoggingToConsole = 0;
 8003ff0:	4b6b      	ldr	r3, [pc, #428]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 8003ff6:	4b6a      	ldr	r3, [pc, #424]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 1;
 8003ffc:	4b68      	ldr	r3, [pc, #416]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				//isLoggingToConsole = 1;
				//isLoggingToSD = 1;
				send_uart3("\nStoring method: USB Flash Drive\n");
 8004004:	4869      	ldr	r0, [pc, #420]	; (80041ac <consoleDeviceInterface+0x2c8>)
 8004006:	f7fd fd83 	bl	8001b10 <send_uart3>
				break;
 800400a:	e007      	b.n	800401c <consoleDeviceInterface+0x138>
			case 0:
				send_uart3("\nStoring method: UNCHANGED\n");
 800400c:	4868      	ldr	r0, [pc, #416]	; (80041b0 <consoleDeviceInterface+0x2cc>)
 800400e:	f7fd fd7f 	bl	8001b10 <send_uart3>
				break;
 8004012:	e003      	b.n	800401c <consoleDeviceInterface+0x138>
			default:
				send_uart3("\nStoring method: UNDEFINED\n");
 8004014:	4867      	ldr	r0, [pc, #412]	; (80041b4 <consoleDeviceInterface+0x2d0>)
 8004016:	f7fd fd7b 	bl	8001b10 <send_uart3>
				break;
 800401a:	bf00      	nop
			}
			return consoleDeviceInterface();
 800401c:	f7ff ff62 	bl	8003ee4 <consoleDeviceInterface>
 8004020:	e1b4      	b.n	800438c <consoleDeviceInterface+0x4a8>
			break;
		// check SD card
		case 304:
			send_uart3("\nChecking SD card\n");
 8004022:	4865      	ldr	r0, [pc, #404]	; (80041b8 <consoleDeviceInterface+0x2d4>)
 8004024:	f7fd fd74 	bl	8001b10 <send_uart3>

			return consoleDeviceInterface();
 8004028:	f7ff ff5c 	bl	8003ee4 <consoleDeviceInterface>
 800402c:	e1ae      	b.n	800438c <consoleDeviceInterface+0x4a8>
			break;
		// check USB flash drive
		case 305:
			send_uart3("\nChecking USB flash drive\n");
 800402e:	4863      	ldr	r0, [pc, #396]	; (80041bc <consoleDeviceInterface+0x2d8>)
 8004030:	f7fd fd6e 	bl	8001b10 <send_uart3>

			return consoleDeviceInterface();
 8004034:	f7ff ff56 	bl	8003ee4 <consoleDeviceInterface>
 8004038:	e1a8      	b.n	800438c <consoleDeviceInterface+0x4a8>
			break;
		// perform DC offset calibration
		case 306:
			send_uart3("\nDo you really want to perform offset calibration (You will lose previous DC offset calibration value)\n 1 - YES, PERFORM CALIBRATION\n 2 - NO, I DONT WANT TO\n"
 800403a:	4861      	ldr	r0, [pc, #388]	; (80041c0 <consoleDeviceInterface+0x2dc>)
 800403c:	f7fd fd68 	bl	8001b10 <send_uart3>
					" !! BEFORE YOU ANSWER !!\n UNPLUG all measured devices from device (inc. measuring plugs) and then start procedure)\n");
			getConsoleInput(&inputData, 1, 1);
 8004040:	2201      	movs	r2, #1
 8004042:	2101      	movs	r1, #1
 8004044:	4854      	ldr	r0, [pc, #336]	; (8004198 <consoleDeviceInterface+0x2b4>)
 8004046:	f7ff fa01 	bl	800344c <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 800404a:	4953      	ldr	r1, [pc, #332]	; (8004198 <consoleDeviceInterface+0x2b4>)
 800404c:	2001      	movs	r0, #1
 800404e:	f7ff f8f5 	bl	800323c <convertInputToInt>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d002      	beq.n	800405e <consoleDeviceInterface+0x17a>
 8004058:	2b02      	cmp	r3, #2
 800405a:	d012      	beq.n	8004082 <consoleDeviceInterface+0x19e>
 800405c:	e015      	b.n	800408a <consoleDeviceInterface+0x1a6>
			case 1:
				send_uart3("\nOffset calibration - started\n");
 800405e:	4859      	ldr	r0, [pc, #356]	; (80041c4 <consoleDeviceInterface+0x2e0>)
 8004060:	f7fd fd56 	bl	8001b10 <send_uart3>
				adc_compensateOffset();
 8004064:	f7fe fcba 	bl	80029dc <adc_compensateOffset>
				send_uart3("\nOffset calibration - finished\n");
 8004068:	4857      	ldr	r0, [pc, #348]	; (80041c8 <consoleDeviceInterface+0x2e4>)
 800406a:	f7fd fd51 	bl	8001b10 <send_uart3>
				writeEEPROM_AT24();
 800406e:	f7fd fe47 	bl	8001d00 <writeEEPROM_AT24>
				microDelay(5);
 8004072:	2005      	movs	r0, #5
 8004074:	f7fd fd7a 	bl	8001b6c <microDelay>
				readEEPROM_AT24();
 8004078:	f7fd ffbe 	bl	8001ff8 <readEEPROM_AT24>
				printSettingsValues();
 800407c:	f7ff f910 	bl	80032a0 <printSettingsValues>
				break;
 8004080:	e007      	b.n	8004092 <consoleDeviceInterface+0x1ae>
			case 2:
				send_uart3("\nOffset value: UNCHANGED\n");
 8004082:	4852      	ldr	r0, [pc, #328]	; (80041cc <consoleDeviceInterface+0x2e8>)
 8004084:	f7fd fd44 	bl	8001b10 <send_uart3>
				break;
 8004088:	e003      	b.n	8004092 <consoleDeviceInterface+0x1ae>
			default:
				send_uart3("\nOffset value: UNCHANGED\n");
 800408a:	4850      	ldr	r0, [pc, #320]	; (80041cc <consoleDeviceInterface+0x2e8>)
 800408c:	f7fd fd40 	bl	8001b10 <send_uart3>
				break;
 8004090:	bf00      	nop
			}

			return consoleDeviceInterface();
 8004092:	f7ff ff27 	bl	8003ee4 <consoleDeviceInterface>
 8004096:	e179      	b.n	800438c <consoleDeviceInterface+0x4a8>
			break;
		// zero DC offset value / disable calibration
		case 307:
			send_uart3("\nDo you really want to zero offset calibration value (You will lose DC offset calibration)\n 1 - YES, ZERO DC OFFSET\n 2 - NO, I DONT WANT TO\n");
 8004098:	484d      	ldr	r0, [pc, #308]	; (80041d0 <consoleDeviceInterface+0x2ec>)
 800409a:	f7fd fd39 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 800409e:	2201      	movs	r2, #1
 80040a0:	2101      	movs	r1, #1
 80040a2:	483d      	ldr	r0, [pc, #244]	; (8004198 <consoleDeviceInterface+0x2b4>)
 80040a4:	f7ff f9d2 	bl	800344c <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 80040a8:	493b      	ldr	r1, [pc, #236]	; (8004198 <consoleDeviceInterface+0x2b4>)
 80040aa:	2001      	movs	r0, #1
 80040ac:	f7ff f8c6 	bl	800323c <convertInputToInt>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d002      	beq.n	80040bc <consoleDeviceInterface+0x1d8>
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d014      	beq.n	80040e4 <consoleDeviceInterface+0x200>
 80040ba:	e017      	b.n	80040ec <consoleDeviceInterface+0x208>
			case 1:
				settings.lastOffsetValue = 0.0;
 80040bc:	4938      	ldr	r1, [pc, #224]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
				writeEEPROM_AT24();
 80040ca:	f7fd fe19 	bl	8001d00 <writeEEPROM_AT24>
				microDelay(5);
 80040ce:	2005      	movs	r0, #5
 80040d0:	f7fd fd4c 	bl	8001b6c <microDelay>
				readEEPROM_AT24();
 80040d4:	f7fd ff90 	bl	8001ff8 <readEEPROM_AT24>
				printSettingsValues();
 80040d8:	f7ff f8e2 	bl	80032a0 <printSettingsValues>
				send_uart3("\nDC offset value: ZEROED\n");
 80040dc:	483d      	ldr	r0, [pc, #244]	; (80041d4 <consoleDeviceInterface+0x2f0>)
 80040de:	f7fd fd17 	bl	8001b10 <send_uart3>
				break;
 80040e2:	e007      	b.n	80040f4 <consoleDeviceInterface+0x210>
			case 2:
				send_uart3("\nDC offset value: UNCHANGED\n");
 80040e4:	483c      	ldr	r0, [pc, #240]	; (80041d8 <consoleDeviceInterface+0x2f4>)
 80040e6:	f7fd fd13 	bl	8001b10 <send_uart3>
				break;
 80040ea:	e003      	b.n	80040f4 <consoleDeviceInterface+0x210>
			default:
				send_uart3("\nDC offset value: UNCHANGED\n");
 80040ec:	483a      	ldr	r0, [pc, #232]	; (80041d8 <consoleDeviceInterface+0x2f4>)
 80040ee:	f7fd fd0f 	bl	8001b10 <send_uart3>
				break;
 80040f2:	bf00      	nop
			}
			break;
 80040f4:	bf00      	nop
			send_uart3("\nUNDEFINED SELECTION\n");
			return consoleDeviceInterface();
			break;
	}

	return consoleDeviceInterface();
 80040f6:	f7ff fef5 	bl	8003ee4 <consoleDeviceInterface>
 80040fa:	e147      	b.n	800438c <consoleDeviceInterface+0x4a8>
			send_uart3("\nDevice selfcheck - started\n");
 80040fc:	4837      	ldr	r0, [pc, #220]	; (80041dc <consoleDeviceInterface+0x2f8>)
 80040fe:	f7fd fd07 	bl	8001b10 <send_uart3>
			send_uart3("\nDevice selfcheck - finished\n");
 8004102:	4837      	ldr	r0, [pc, #220]	; (80041e0 <consoleDeviceInterface+0x2fc>)
 8004104:	f7fd fd04 	bl	8001b10 <send_uart3>
			return consoleDeviceInterface();
 8004108:	f7ff feec 	bl	8003ee4 <consoleDeviceInterface>
 800410c:	e13e      	b.n	800438c <consoleDeviceInterface+0x4a8>
			temp16 = settings.powerSourceVoltage;
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 8004110:	8c1b      	ldrh	r3, [r3, #32]
 8004112:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source voltage in mV (anywhere between 500 mV - 5500 mV) or enter 0 to exit without change\n");
 8004114:	4833      	ldr	r0, [pc, #204]	; (80041e4 <consoleDeviceInterface+0x300>)
 8004116:	f7fd fcfb 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 800411a:	2201      	movs	r2, #1
 800411c:	210a      	movs	r1, #10
 800411e:	481e      	ldr	r0, [pc, #120]	; (8004198 <consoleDeviceInterface+0x2b4>)
 8004120:	f7ff f994 	bl	800344c <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8004124:	491c      	ldr	r1, [pc, #112]	; (8004198 <consoleDeviceInterface+0x2b4>)
 8004126:	200a      	movs	r0, #10
 8004128:	f7ff f888 	bl	800323c <convertInputToInt>
 800412c:	4603      	mov	r3, r0
 800412e:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 500 & temp16 <= 5500){
 8004130:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004132:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004136:	4293      	cmp	r3, r2
 8004138:	bf8c      	ite	hi
 800413a:	2301      	movhi	r3, #1
 800413c:	2300      	movls	r3, #0
 800413e:	b2da      	uxtb	r2, r3
 8004140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004142:	f241 517c 	movw	r1, #5500	; 0x157c
 8004146:	428b      	cmp	r3, r1
 8004148:	bf94      	ite	ls
 800414a:	2301      	movls	r3, #1
 800414c:	2300      	movhi	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4013      	ands	r3, r2
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00f      	beq.n	8004178 <consoleDeviceInterface+0x294>
				sprintf(tempBuf,"New entered value is: %d mV\n", temp16);
 8004158:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800415a:	463b      	mov	r3, r7
 800415c:	4922      	ldr	r1, [pc, #136]	; (80041e8 <consoleDeviceInterface+0x304>)
 800415e:	4618      	mov	r0, r3
 8004160:	f01a fe04 	bl	801ed6c <siprintf>
				send_uart3(tempBuf);
 8004164:	463b      	mov	r3, r7
 8004166:	4618      	mov	r0, r3
 8004168:	f7fd fcd2 	bl	8001b10 <send_uart3>
				settings.powerSourceVoltage = temp16;
 800416c:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <consoleDeviceInterface+0x2bc>)
 800416e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004170:	8413      	strh	r3, [r2, #32]
				setPotenciomenters();
 8004172:	f7fe f891 	bl	8002298 <setPotenciomenters>
 8004176:	e009      	b.n	800418c <consoleDeviceInterface+0x2a8>
			else if(temp16 == 0){
 8004178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <consoleDeviceInterface+0x2a2>
				send_uart3("\nPower source - Voltage: UNCHANGED\n");
 800417e:	481b      	ldr	r0, [pc, #108]	; (80041ec <consoleDeviceInterface+0x308>)
 8004180:	f7fd fcc6 	bl	8001b10 <send_uart3>
 8004184:	e002      	b.n	800418c <consoleDeviceInterface+0x2a8>
				send_uart3("\nEntered value if out of range\n");
 8004186:	481a      	ldr	r0, [pc, #104]	; (80041f0 <consoleDeviceInterface+0x30c>)
 8004188:	f7fd fcc2 	bl	8001b10 <send_uart3>
			return consoleDeviceInterface();
 800418c:	f7ff feaa 	bl	8003ee4 <consoleDeviceInterface>
 8004190:	e0fc      	b.n	800438c <consoleDeviceInterface+0x4a8>
 8004192:	bf00      	nop
 8004194:	08022324 	.word	0x08022324
 8004198:	20008c38 	.word	0x20008c38
 800419c:	080224dc 	.word	0x080224dc
 80041a0:	20000018 	.word	0x20000018
 80041a4:	0802253c 	.word	0x0802253c
 80041a8:	08022558 	.word	0x08022558
 80041ac:	08022574 	.word	0x08022574
 80041b0:	08022598 	.word	0x08022598
 80041b4:	080225b4 	.word	0x080225b4
 80041b8:	080225d0 	.word	0x080225d0
 80041bc:	080225e4 	.word	0x080225e4
 80041c0:	08022600 	.word	0x08022600
 80041c4:	08022714 	.word	0x08022714
 80041c8:	08022734 	.word	0x08022734
 80041cc:	08022754 	.word	0x08022754
 80041d0:	08022770 	.word	0x08022770
 80041d4:	08022800 	.word	0x08022800
 80041d8:	0802281c 	.word	0x0802281c
 80041dc:	0802283c 	.word	0x0802283c
 80041e0:	0802285c 	.word	0x0802285c
 80041e4:	0802287c 	.word	0x0802287c
 80041e8:	080228f0 	.word	0x080228f0
 80041ec:	08022910 	.word	0x08022910
 80041f0:	08021b54 	.word	0x08021b54
			temp16 = settings.powerSourceCurrent;
 80041f4:	4b67      	ldr	r3, [pc, #412]	; (8004394 <consoleDeviceInterface+0x4b0>)
 80041f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80041f8:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source current limit in mA (anywhere between 10 mA - 500 mA) or enter 0 to exit without change\n");
 80041fa:	4867      	ldr	r0, [pc, #412]	; (8004398 <consoleDeviceInterface+0x4b4>)
 80041fc:	f7fd fc88 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8004200:	2201      	movs	r2, #1
 8004202:	210a      	movs	r1, #10
 8004204:	4865      	ldr	r0, [pc, #404]	; (800439c <consoleDeviceInterface+0x4b8>)
 8004206:	f7ff f921 	bl	800344c <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 800420a:	4964      	ldr	r1, [pc, #400]	; (800439c <consoleDeviceInterface+0x4b8>)
 800420c:	200a      	movs	r0, #10
 800420e:	f7ff f815 	bl	800323c <convertInputToInt>
 8004212:	4603      	mov	r3, r0
 8004214:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 10 & temp16 <= 500){
 8004216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004218:	2b09      	cmp	r3, #9
 800421a:	bf8c      	ite	hi
 800421c:	2301      	movhi	r3, #1
 800421e:	2300      	movls	r3, #0
 8004220:	b2da      	uxtb	r2, r3
 8004222:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004224:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004228:	bf94      	ite	ls
 800422a:	2301      	movls	r3, #1
 800422c:	2300      	movhi	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	4013      	ands	r3, r2
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00f      	beq.n	8004258 <consoleDeviceInterface+0x374>
				sprintf(tempBuf,"New entered value is: %d mA\n", temp16);
 8004238:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800423a:	463b      	mov	r3, r7
 800423c:	4958      	ldr	r1, [pc, #352]	; (80043a0 <consoleDeviceInterface+0x4bc>)
 800423e:	4618      	mov	r0, r3
 8004240:	f01a fd94 	bl	801ed6c <siprintf>
				send_uart3(tempBuf);
 8004244:	463b      	mov	r3, r7
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd fc62 	bl	8001b10 <send_uart3>
				settings.powerSourceCurrent = temp16;
 800424c:	4a51      	ldr	r2, [pc, #324]	; (8004394 <consoleDeviceInterface+0x4b0>)
 800424e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004250:	8453      	strh	r3, [r2, #34]	; 0x22
				setPotenciomenters();
 8004252:	f7fe f821 	bl	8002298 <setPotenciomenters>
 8004256:	e009      	b.n	800426c <consoleDeviceInterface+0x388>
			else if(temp16 == 0){
 8004258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <consoleDeviceInterface+0x382>
				send_uart3("\nPower source - Current: UNCHANGED\n");
 800425e:	4851      	ldr	r0, [pc, #324]	; (80043a4 <consoleDeviceInterface+0x4c0>)
 8004260:	f7fd fc56 	bl	8001b10 <send_uart3>
 8004264:	e002      	b.n	800426c <consoleDeviceInterface+0x388>
				send_uart3("\nEntered value if out of range\n");
 8004266:	4850      	ldr	r0, [pc, #320]	; (80043a8 <consoleDeviceInterface+0x4c4>)
 8004268:	f7fd fc52 	bl	8001b10 <send_uart3>
			return consoleDeviceInterface();
 800426c:	f7ff fe3a 	bl	8003ee4 <consoleDeviceInterface>
 8004270:	e08c      	b.n	800438c <consoleDeviceInterface+0x4a8>
			send_uart3("\nDo you want to enable power source\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n");
 8004272:	484e      	ldr	r0, [pc, #312]	; (80043ac <consoleDeviceInterface+0x4c8>)
 8004274:	f7fd fc4c 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8004278:	2201      	movs	r2, #1
 800427a:	2101      	movs	r1, #1
 800427c:	4847      	ldr	r0, [pc, #284]	; (800439c <consoleDeviceInterface+0x4b8>)
 800427e:	f7ff f8e5 	bl	800344c <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8004282:	4946      	ldr	r1, [pc, #280]	; (800439c <consoleDeviceInterface+0x4b8>)
 8004284:	2001      	movs	r0, #1
 8004286:	f7fe ffd9 	bl	800323c <convertInputToInt>
 800428a:	4603      	mov	r3, r0
 800428c:	2b01      	cmp	r3, #1
 800428e:	d002      	beq.n	8004296 <consoleDeviceInterface+0x3b2>
 8004290:	2b02      	cmp	r3, #2
 8004292:	d013      	beq.n	80042bc <consoleDeviceInterface+0x3d8>
 8004294:	e025      	b.n	80042e2 <consoleDeviceInterface+0x3fe>
				settings.powerSourceEnable = 1;
 8004296:	4b3f      	ldr	r3, [pc, #252]	; (8004394 <consoleDeviceInterface+0x4b0>)
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 800429e:	2201      	movs	r2, #1
 80042a0:	2110      	movs	r1, #16
 80042a2:	4843      	ldr	r0, [pc, #268]	; (80043b0 <consoleDeviceInterface+0x4cc>)
 80042a4:	f005 fbb0 	bl	8009a08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 80042a8:	2201      	movs	r2, #1
 80042aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042ae:	4841      	ldr	r0, [pc, #260]	; (80043b4 <consoleDeviceInterface+0x4d0>)
 80042b0:	f005 fbaa 	bl	8009a08 <HAL_GPIO_WritePin>
				send_uart3("\nPower source: ENABLED\n");
 80042b4:	4840      	ldr	r0, [pc, #256]	; (80043b8 <consoleDeviceInterface+0x4d4>)
 80042b6:	f7fd fc2b 	bl	8001b10 <send_uart3>
				break;
 80042ba:	e016      	b.n	80042ea <consoleDeviceInterface+0x406>
				settings.powerSourceEnable = 0;
 80042bc:	4b35      	ldr	r3, [pc, #212]	; (8004394 <consoleDeviceInterface+0x4b0>)
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				send_uart3("\nPower source: DISABLED\n");
 80042c4:	483d      	ldr	r0, [pc, #244]	; (80043bc <consoleDeviceInterface+0x4d8>)
 80042c6:	f7fd fc23 	bl	8001b10 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2110      	movs	r1, #16
 80042ce:	4838      	ldr	r0, [pc, #224]	; (80043b0 <consoleDeviceInterface+0x4cc>)
 80042d0:	f005 fb9a 	bl	8009a08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 80042d4:	2200      	movs	r2, #0
 80042d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042da:	4836      	ldr	r0, [pc, #216]	; (80043b4 <consoleDeviceInterface+0x4d0>)
 80042dc:	f005 fb94 	bl	8009a08 <HAL_GPIO_WritePin>
				break;
 80042e0:	e003      	b.n	80042ea <consoleDeviceInterface+0x406>
				send_uart3("\nPower source: NO CHANGE\n");
 80042e2:	4837      	ldr	r0, [pc, #220]	; (80043c0 <consoleDeviceInterface+0x4dc>)
 80042e4:	f7fd fc14 	bl	8001b10 <send_uart3>
				break;
 80042e8:	bf00      	nop
			return consoleDeviceInterface();
 80042ea:	f7ff fdfb 	bl	8003ee4 <consoleDeviceInterface>
 80042ee:	e04d      	b.n	800438c <consoleDeviceInterface+0x4a8>
			send_uart3("\nChoose behaviour of power source\n 1 - Enable when starting measuring\n 2 - Enable when starting device\n 3 - Leave to user (manually enable/disable)\n 4 - Exit without change\n");
 80042f0:	4834      	ldr	r0, [pc, #208]	; (80043c4 <consoleDeviceInterface+0x4e0>)
 80042f2:	f7fd fc0d 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 80042f6:	2201      	movs	r2, #1
 80042f8:	2101      	movs	r1, #1
 80042fa:	4828      	ldr	r0, [pc, #160]	; (800439c <consoleDeviceInterface+0x4b8>)
 80042fc:	f7ff f8a6 	bl	800344c <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8004300:	4926      	ldr	r1, [pc, #152]	; (800439c <consoleDeviceInterface+0x4b8>)
 8004302:	2001      	movs	r0, #1
 8004304:	f7fe ff9a 	bl	800323c <convertInputToInt>
 8004308:	4603      	mov	r3, r0
 800430a:	2b03      	cmp	r3, #3
 800430c:	d021      	beq.n	8004352 <consoleDeviceInterface+0x46e>
 800430e:	2b03      	cmp	r3, #3
 8004310:	dc27      	bgt.n	8004362 <consoleDeviceInterface+0x47e>
 8004312:	2b01      	cmp	r3, #1
 8004314:	d002      	beq.n	800431c <consoleDeviceInterface+0x438>
 8004316:	2b02      	cmp	r3, #2
 8004318:	d008      	beq.n	800432c <consoleDeviceInterface+0x448>
 800431a:	e022      	b.n	8004362 <consoleDeviceInterface+0x47e>
				settings.powerSourceEnableMode = 1;
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <consoleDeviceInterface+0x4b0>)
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting measuring\n");
 8004324:	4828      	ldr	r0, [pc, #160]	; (80043c8 <consoleDeviceInterface+0x4e4>)
 8004326:	f7fd fbf3 	bl	8001b10 <send_uart3>
				break;
 800432a:	e01e      	b.n	800436a <consoleDeviceInterface+0x486>
				settings.powerSourceEnableMode = 2;
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <consoleDeviceInterface+0x4b0>)
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting device\n");
 8004334:	4825      	ldr	r0, [pc, #148]	; (80043cc <consoleDeviceInterface+0x4e8>)
 8004336:	f7fd fbeb 	bl	8001b10 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 800433a:	2201      	movs	r2, #1
 800433c:	2110      	movs	r1, #16
 800433e:	481c      	ldr	r0, [pc, #112]	; (80043b0 <consoleDeviceInterface+0x4cc>)
 8004340:	f005 fb62 	bl	8009a08 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8004344:	2201      	movs	r2, #1
 8004346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800434a:	481a      	ldr	r0, [pc, #104]	; (80043b4 <consoleDeviceInterface+0x4d0>)
 800434c:	f005 fb5c 	bl	8009a08 <HAL_GPIO_WritePin>
				break;
 8004350:	e00b      	b.n	800436a <consoleDeviceInterface+0x486>
				settings.powerSourceEnableMode = 0;
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <consoleDeviceInterface+0x4b0>)
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable by user\n");
 800435a:	481d      	ldr	r0, [pc, #116]	; (80043d0 <consoleDeviceInterface+0x4ec>)
 800435c:	f7fd fbd8 	bl	8001b10 <send_uart3>
				break;
 8004360:	e003      	b.n	800436a <consoleDeviceInterface+0x486>
				send_uart3("\nPower source enable mode: NO CHANGE\n");
 8004362:	481c      	ldr	r0, [pc, #112]	; (80043d4 <consoleDeviceInterface+0x4f0>)
 8004364:	f7fd fbd4 	bl	8001b10 <send_uart3>
				break;
 8004368:	bf00      	nop
			return consoleDeviceInterface();
 800436a:	f7ff fdbb 	bl	8003ee4 <consoleDeviceInterface>
 800436e:	e00d      	b.n	800438c <consoleDeviceInterface+0x4a8>
			send_uart3("\nGoing back to Main menu\n");
 8004370:	4819      	ldr	r0, [pc, #100]	; (80043d8 <consoleDeviceInterface+0x4f4>)
 8004372:	f7fd fbcd 	bl	8001b10 <send_uart3>
			return consoleInterface(123);
 8004376:	207b      	movs	r0, #123	; 0x7b
 8004378:	f000 f832 	bl	80043e0 <consoleInterface>
 800437c:	e006      	b.n	800438c <consoleDeviceInterface+0x4a8>
			send_uart3("\nUNDEFINED SELECTION\n");
 800437e:	4817      	ldr	r0, [pc, #92]	; (80043dc <consoleDeviceInterface+0x4f8>)
 8004380:	f7fd fbc6 	bl	8001b10 <send_uart3>
			return consoleDeviceInterface();
 8004384:	f7ff fdae 	bl	8003ee4 <consoleDeviceInterface>
 8004388:	e000      	b.n	800438c <consoleDeviceInterface+0x4a8>
		return;
 800438a:	bf00      	nop


}
 800438c:	3738      	adds	r7, #56	; 0x38
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000018 	.word	0x20000018
 8004398:	08022934 	.word	0x08022934
 800439c:	20008c38 	.word	0x20008c38
 80043a0:	080229ac 	.word	0x080229ac
 80043a4:	080229cc 	.word	0x080229cc
 80043a8:	08021b54 	.word	0x08021b54
 80043ac:	080229f0 	.word	0x080229f0
 80043b0:	40020000 	.word	0x40020000
 80043b4:	40020400 	.word	0x40020400
 80043b8:	08022a38 	.word	0x08022a38
 80043bc:	08022a50 	.word	0x08022a50
 80043c0:	08022a6c 	.word	0x08022a6c
 80043c4:	08022a88 	.word	0x08022a88
 80043c8:	08022b38 	.word	0x08022b38
 80043cc:	08022b74 	.word	0x08022b74
 80043d0:	08022bac 	.word	0x08022bac
 80043d4:	08022bd8 	.word	0x08022bd8
 80043d8:	08021e18 	.word	0x08021e18
 80043dc:	08021e34 	.word	0x08021e34

080043e0 <consoleInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void consoleInterface(uint8_t flag){
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	71fb      	strb	r3, [r7, #7]

	uint8_t stateFlag = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]

	if(flag == 0){
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10d      	bne.n	8004410 <consoleInterface+0x30>
		HAL_UART_Receive_IT(&huart6, inputData, 3);
		while(isWaitingForData == 1);
		*/
		//send_uart("flag0");
		//microDelay(50);
		microDelay(1);
 80043f4:	2001      	movs	r0, #1
 80043f6:	f7fd fbb9 	bl	8001b6c <microDelay>
		return;
	}


	// get input command
	stateFlag = getConsoleInput(inputData, 3, 0);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2103      	movs	r1, #3
 80043fe:	486c      	ldr	r0, [pc, #432]	; (80045b0 <consoleInterface+0x1d0>)
 8004400:	f7ff f824 	bl	800344c <getConsoleInput>
 8004404:	4603      	mov	r3, r0
 8004406:	73fb      	strb	r3, [r7, #15]

	// timeout or no data handler
	if(stateFlag == 99){
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b63      	cmp	r3, #99	; 0x63
 800440c:	d10b      	bne.n	8004426 <consoleInterface+0x46>
		return;
 800440e:	e0cc      	b.n	80045aa <consoleInterface+0x1ca>
	else if(flag == 11){
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	2b0b      	cmp	r3, #11
 8004414:	d103      	bne.n	800441e <consoleInterface+0x3e>
		send_uart3("Input timeout");
 8004416:	4867      	ldr	r0, [pc, #412]	; (80045b4 <consoleInterface+0x1d4>)
 8004418:	f7fd fb7a 	bl	8001b10 <send_uart3>
		return;
 800441c:	e0c5      	b.n	80045aa <consoleInterface+0x1ca>
		send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 800441e:	4866      	ldr	r0, [pc, #408]	; (80045b8 <consoleInterface+0x1d8>)
 8004420:	f7fd fb76 	bl	8001b10 <send_uart3>
		return;
 8004424:	e0c1      	b.n	80045aa <consoleInterface+0x1ca>
	}

	switch(convertInputToInt(3, inputData)){
 8004426:	4962      	ldr	r1, [pc, #392]	; (80045b0 <consoleInterface+0x1d0>)
 8004428:	2003      	movs	r0, #3
 800442a:	f7fe ff07 	bl	800323c <convertInputToInt>
 800442e:	4603      	mov	r3, r0
 8004430:	f240 122d 	movw	r2, #301	; 0x12d
 8004434:	4293      	cmp	r3, r2
 8004436:	d033      	beq.n	80044a0 <consoleInterface+0xc0>
 8004438:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800443c:	f280 80ae 	bge.w	800459c <consoleInterface+0x1bc>
 8004440:	2b6f      	cmp	r3, #111	; 0x6f
 8004442:	dc23      	bgt.n	800448c <consoleInterface+0xac>
 8004444:	2b63      	cmp	r3, #99	; 0x63
 8004446:	f2c0 80a9 	blt.w	800459c <consoleInterface+0x1bc>
 800444a:	3b63      	subs	r3, #99	; 0x63
 800444c:	2b0c      	cmp	r3, #12
 800444e:	f200 80a5 	bhi.w	800459c <consoleInterface+0x1bc>
 8004452:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <consoleInterface+0x78>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	0800458f 	.word	0x0800458f
 800445c:	0800459d 	.word	0x0800459d
 8004460:	08004493 	.word	0x08004493
 8004464:	080044a7 	.word	0x080044a7
 8004468:	080044ad 	.word	0x080044ad
 800446c:	080044b3 	.word	0x080044b3
 8004470:	080044c3 	.word	0x080044c3
 8004474:	080044dd 	.word	0x080044dd
 8004478:	0800459d 	.word	0x0800459d
 800447c:	0800459d 	.word	0x0800459d
 8004480:	0800459d 	.word	0x0800459d
 8004484:	0800459d 	.word	0x0800459d
 8004488:	08004531 	.word	0x08004531
 800448c:	2bc9      	cmp	r3, #201	; 0xc9
 800448e:	d004      	beq.n	800449a <consoleInterface+0xba>
 8004490:	e084      	b.n	800459c <consoleInterface+0x1bc>
	//switch (convertInputToInt(3, &getConsoleInput(3))){
	//switch (convertInputToInt(3, &inputData)) {
		// Show default menu
		case 101:
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8004492:	4849      	ldr	r0, [pc, #292]	; (80045b8 <consoleInterface+0x1d8>)
 8004494:	f7fd fb3c 	bl	8001b10 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 8004498:	e087      	b.n	80045aa <consoleInterface+0x1ca>
		// Show measuring settings menu
		case 201:
			consoleMeasuringInterface();
 800449a:	f7ff f85b 	bl	8003554 <consoleMeasuringInterface>
			break;
 800449e:	e084      	b.n	80045aa <consoleInterface+0x1ca>
		// Show device settings menu
		case 301:
			consoleDeviceInterface();
 80044a0:	f7ff fd20 	bl	8003ee4 <consoleDeviceInterface>
			break;
 80044a4:	e081      	b.n	80045aa <consoleInterface+0x1ca>
		// Show current settings
		case 102:
			printSettingsValues();
 80044a6:	f7fe fefb 	bl	80032a0 <printSettingsValues>
			break;
 80044aa:	e07e      	b.n	80045aa <consoleInterface+0x1ca>
		// show last measured values
		case 103:
			printLastMeasuredValues();
 80044ac:	f7fe ff52 	bl	8003354 <printLastMeasuredValues>
			break;
 80044b0:	e07b      	b.n	80045aa <consoleInterface+0x1ca>
		// read EEPROM
		case 104:
			readEEPROM_AT24();
 80044b2:	f7fd fda1 	bl	8001ff8 <readEEPROM_AT24>
			printSettingsValues();
 80044b6:	f7fe fef3 	bl	80032a0 <printSettingsValues>
			send_uart3("\n EEPROM read\n");
 80044ba:	4840      	ldr	r0, [pc, #256]	; (80045bc <consoleInterface+0x1dc>)
 80044bc:	f7fd fb28 	bl	8001b10 <send_uart3>
			break;
 80044c0:	e073      	b.n	80045aa <consoleInterface+0x1ca>
		// write EEPROM
		case 105:
			writeEEPROM_AT24();
 80044c2:	f7fd fc1d 	bl	8001d00 <writeEEPROM_AT24>
			microDelay(5);
 80044c6:	2005      	movs	r0, #5
 80044c8:	f7fd fb50 	bl	8001b6c <microDelay>
			readEEPROM_AT24();
 80044cc:	f7fd fd94 	bl	8001ff8 <readEEPROM_AT24>
			printSettingsValues();
 80044d0:	f7fe fee6 	bl	80032a0 <printSettingsValues>
			send_uart3("\n EEPROM written and read back\n");
 80044d4:	483a      	ldr	r0, [pc, #232]	; (80045c0 <consoleInterface+0x1e0>)
 80044d6:	f7fd fb1b 	bl	8001b10 <send_uart3>
			break;
 80044da:	e066      	b.n	80045aa <consoleInterface+0x1ca>
		// initialize EEPROM
		case 106:
			send_uart3("\nDou you really want to initialize EEPROM (You will lose all user settings)?\n\n1 - YES, INIT AND SAVE\n2 - NO, I DONT WANT TO\n");
 80044dc:	4839      	ldr	r0, [pc, #228]	; (80045c4 <consoleInterface+0x1e4>)
 80044de:	f7fd fb17 	bl	8001b10 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 80044e2:	2201      	movs	r2, #1
 80044e4:	2101      	movs	r1, #1
 80044e6:	4832      	ldr	r0, [pc, #200]	; (80045b0 <consoleInterface+0x1d0>)
 80044e8:	f7fe ffb0 	bl	800344c <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 80044ec:	4930      	ldr	r1, [pc, #192]	; (80045b0 <consoleInterface+0x1d0>)
 80044ee:	2001      	movs	r0, #1
 80044f0:	f7fe fea4 	bl	800323c <convertInputToInt>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d002      	beq.n	8004500 <consoleInterface+0x120>
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d00f      	beq.n	800451e <consoleInterface+0x13e>
 80044fe:	e012      	b.n	8004526 <consoleInterface+0x146>
			case 1:
				initEEPROM();
 8004500:	f7fd fe82 	bl	8002208 <initEEPROM>
				writeEEPROM_AT24();
 8004504:	f7fd fbfc 	bl	8001d00 <writeEEPROM_AT24>
				microDelay(5);
 8004508:	2005      	movs	r0, #5
 800450a:	f7fd fb2f 	bl	8001b6c <microDelay>
				readEEPROM_AT24();
 800450e:	f7fd fd73 	bl	8001ff8 <readEEPROM_AT24>
				printSettingsValues();
 8004512:	f7fe fec5 	bl	80032a0 <printSettingsValues>
				send_uart3("\n\nEEPROM INITIALIZED\n");
 8004516:	482c      	ldr	r0, [pc, #176]	; (80045c8 <consoleInterface+0x1e8>)
 8004518:	f7fd fafa 	bl	8001b10 <send_uart3>
				break;
 800451c:	e007      	b.n	800452e <consoleInterface+0x14e>
			case 2:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 800451e:	482b      	ldr	r0, [pc, #172]	; (80045cc <consoleInterface+0x1ec>)
 8004520:	f7fd faf6 	bl	8001b10 <send_uart3>
				break;
 8004524:	e003      	b.n	800452e <consoleInterface+0x14e>
			default:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 8004526:	4829      	ldr	r0, [pc, #164]	; (80045cc <consoleInterface+0x1ec>)
 8004528:	f7fd faf2 	bl	8001b10 <send_uart3>
				break;
 800452c:	bf00      	nop
			}
			break;
 800452e:	e03c      	b.n	80045aa <consoleInterface+0x1ca>
		// start measuring
		case 111:
			send_uart3("\n Measuring - started\n");
 8004530:	4827      	ldr	r0, [pc, #156]	; (80045d0 <consoleInterface+0x1f0>)
 8004532:	f7fd faed 	bl	8001b10 <send_uart3>
			if (isMeasuring == 0) {
 8004536:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <consoleInterface+0x1f4>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d113      	bne.n	8004568 <consoleInterface+0x188>
				//isLoggingToConsole = 1;
				if (settings.isTriggerActive == 0)
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <consoleInterface+0x1f8>)
 8004542:	7b5b      	ldrb	r3, [r3, #13]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <consoleInterface+0x16e>
					isMeasuring = 1;
 8004548:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <consoleInterface+0x1f4>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 1;
 800454e:	4b23      	ldr	r3, [pc, #140]	; (80045dc <consoleInterface+0x1fc>)
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 0;
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <consoleInterface+0x200>)
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 800455a:	2201      	movs	r2, #1
 800455c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004560:	4820      	ldr	r0, [pc, #128]	; (80045e4 <consoleInterface+0x204>)
 8004562:	f005 fa51 	bl	8009a08 <HAL_GPIO_WritePin>
				startOfMeasurement = 0;
				endOfMeasurement = 1;

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
			}
			break;
 8004566:	e020      	b.n	80045aa <consoleInterface+0x1ca>
				isMeasuring = 0;
 8004568:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <consoleInterface+0x1f4>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
				isTriggered = 0;
 800456e:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <consoleInterface+0x208>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 0;
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <consoleInterface+0x1fc>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 1;
 800457a:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <consoleInterface+0x200>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8004580:	2200      	movs	r2, #0
 8004582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004586:	4817      	ldr	r0, [pc, #92]	; (80045e4 <consoleInterface+0x204>)
 8004588:	f005 fa3e 	bl	8009a08 <HAL_GPIO_WritePin>
			break;
 800458c:	e00d      	b.n	80045aa <consoleInterface+0x1ca>
		// timeout error output
		case 99:
			send_uart3("\nERR-Input timeout\n");
 800458e:	4817      	ldr	r0, [pc, #92]	; (80045ec <consoleInterface+0x20c>)
 8004590:	f7fd fabe 	bl	8001b10 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8004594:	4808      	ldr	r0, [pc, #32]	; (80045b8 <consoleInterface+0x1d8>)
 8004596:	f7fd fabb 	bl	8001b10 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 800459a:	e006      	b.n	80045aa <consoleInterface+0x1ca>
		// all outher input combination output
		default:
			send_uart3("\nERR-Invalid input\n");
 800459c:	4814      	ldr	r0, [pc, #80]	; (80045f0 <consoleInterface+0x210>)
 800459e:	f7fd fab7 	bl	8001b10 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 80045a2:	4805      	ldr	r0, [pc, #20]	; (80045b8 <consoleInterface+0x1d8>)
 80045a4:	f7fd fab4 	bl	8001b10 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 80045a8:	bf00      	nop





}
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20008c38 	.word	0x20008c38
 80045b4:	08022c00 	.word	0x08022c00
 80045b8:	08022c10 	.word	0x08022c10
 80045bc:	08022cf4 	.word	0x08022cf4
 80045c0:	08022d04 	.word	0x08022d04
 80045c4:	08022d24 	.word	0x08022d24
 80045c8:	08022da4 	.word	0x08022da4
 80045cc:	08022dbc 	.word	0x08022dbc
 80045d0:	08022dd8 	.word	0x08022dd8
 80045d4:	20000322 	.word	0x20000322
 80045d8:	20000018 	.word	0x20000018
 80045dc:	20000320 	.word	0x20000320
 80045e0:	20000321 	.word	0x20000321
 80045e4:	40021000 	.word	0x40021000
 80045e8:	20000314 	.word	0x20000314
 80045ec:	08022df0 	.word	0x08022df0
 80045f0:	08022e04 	.word	0x08022e04

080045f4 <u8x8_stm32_gpio_and_delay>:

}



uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr){
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	72fb      	strb	r3, [r7, #11]
 8004602:	4613      	mov	r3, r2
 8004604:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 8004606:	7afb      	ldrb	r3, [r7, #11]
 8004608:	3b28      	subs	r3, #40	; 0x28
 800460a:	2b2d      	cmp	r3, #45	; 0x2d
 800460c:	f200 80a3 	bhi.w	8004756 <u8x8_stm32_gpio_and_delay+0x162>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <u8x8_stm32_gpio_and_delay+0x24>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	080046d1 	.word	0x080046d1
 800461c:	080046d9 	.word	0x080046d9
 8004620:	08004757 	.word	0x08004757
 8004624:	08004757 	.word	0x08004757
 8004628:	08004757 	.word	0x08004757
 800462c:	08004757 	.word	0x08004757
 8004630:	08004757 	.word	0x08004757
 8004634:	08004757 	.word	0x08004757
 8004638:	08004757 	.word	0x08004757
 800463c:	08004757 	.word	0x08004757
 8004640:	08004757 	.word	0x08004757
 8004644:	08004757 	.word	0x08004757
 8004648:	08004757 	.word	0x08004757
 800464c:	08004757 	.word	0x08004757
 8004650:	08004757 	.word	0x08004757
 8004654:	08004757 	.word	0x08004757
 8004658:	08004757 	.word	0x08004757
 800465c:	08004757 	.word	0x08004757
 8004660:	08004757 	.word	0x08004757
 8004664:	08004757 	.word	0x08004757
 8004668:	08004757 	.word	0x08004757
 800466c:	08004757 	.word	0x08004757
 8004670:	08004757 	.word	0x08004757
 8004674:	08004757 	.word	0x08004757
 8004678:	08004757 	.word	0x08004757
 800467c:	08004757 	.word	0x08004757
 8004680:	08004757 	.word	0x08004757
 8004684:	08004757 	.word	0x08004757
 8004688:	08004757 	.word	0x08004757
 800468c:	08004757 	.word	0x08004757
 8004690:	08004757 	.word	0x08004757
 8004694:	08004757 	.word	0x08004757
 8004698:	08004757 	.word	0x08004757
 800469c:	08004757 	.word	0x08004757
 80046a0:	08004761 	.word	0x08004761
 80046a4:	080046e3 	.word	0x080046e3
 80046a8:	08004757 	.word	0x08004757
 80046ac:	08004757 	.word	0x08004757
 80046b0:	08004757 	.word	0x08004757
 80046b4:	08004757 	.word	0x08004757
 80046b8:	0800470f 	.word	0x0800470f
 80046bc:	0800471b 	.word	0x0800471b
 80046c0:	08004727 	.word	0x08004727
 80046c4:	0800474b 	.word	0x0800474b
 80046c8:	08004733 	.word	0x08004733
 80046cc:	0800473f 	.word	0x0800473f
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f003 fe9b 	bl	800840c <HAL_Delay>
    break;
 80046d6:	e044      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 80046d8:	7abb      	ldrb	r3, [r7, #10]
 80046da:	4618      	mov	r0, r3
 80046dc:	f003 fe96 	bl	800840c <HAL_Delay>
    //microDelay(arg_int*10);
    break;
 80046e0:	e03f      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
    //HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
	//HAL_Delay(1);
    break;
  case U8X8_MSG_GPIO_RESET:
    //HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
	isDownTriggered=0;
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <u8x8_stm32_gpio_and_delay+0x178>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
	isEnterTriggered=0;
 80046e8:	4b21      	ldr	r3, [pc, #132]	; (8004770 <u8x8_stm32_gpio_and_delay+0x17c>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
	isEscTriggered=0;
 80046ee:	4b21      	ldr	r3, [pc, #132]	; (8004774 <u8x8_stm32_gpio_and_delay+0x180>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
	isUpTriggered=0;
 80046f4:	4b20      	ldr	r3, [pc, #128]	; (8004778 <u8x8_stm32_gpio_and_delay+0x184>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
	isLeftTriggered=0;
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <u8x8_stm32_gpio_and_delay+0x188>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
	isRightTriggered=0;
 8004700:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <u8x8_stm32_gpio_and_delay+0x18c>)
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
	microDelay(1);
 8004706:	2001      	movs	r0, #1
 8004708:	f7fd fa30 	bl	8001b6c <microDelay>
	//HAL_Delay(1);
	break;
 800470c:	e029      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_SELECT:
	u8x8_SetGPIOResult(u8x8, isEnterTriggered);
 800470e:	4b18      	ldr	r3, [pc, #96]	; (8004770 <u8x8_stm32_gpio_and_delay+0x17c>)
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
	break;
 8004718:	e023      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_NEXT:
	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <u8x8_stm32_gpio_and_delay+0x184>)
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 8004724:	e01d      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_PREV:
	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 8004726:	4b11      	ldr	r3, [pc, #68]	; (800476c <u8x8_stm32_gpio_and_delay+0x178>)
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 8004730:	e017      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_UP:
  	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 8004732:	4b11      	ldr	r3, [pc, #68]	; (8004778 <u8x8_stm32_gpio_and_delay+0x184>)
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 800473c:	e011      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_DOWN:
  	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <u8x8_stm32_gpio_and_delay+0x178>)
 8004740:	781a      	ldrb	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 8004748:	e00b      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_HOME:
	u8x8_SetGPIOResult(u8x8, isEscTriggered);
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <u8x8_stm32_gpio_and_delay+0x180>)
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN));
	break;
 8004754:	e005      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
  default:
	u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 800475e:	e000      	b.n	8004762 <u8x8_stm32_gpio_and_delay+0x16e>
    break;
 8004760:	bf00      	nop
  }

  return 1;
 8004762:	2301      	movs	r3, #1
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000318 	.word	0x20000318
 8004770:	20000315 	.word	0x20000315
 8004774:	20000316 	.word	0x20000316
 8004778:	20000317 	.word	0x20000317
 800477c:	20000319 	.word	0x20000319
 8004780:	2000031a 	.word	0x2000031a

08004784 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	72fb      	strb	r3, [r7, #11]
 8004792:	4613      	mov	r3, r2
 8004794:	72bb      	strb	r3, [r7, #10]
  static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
  static uint8_t buf_idx;
  uint8_t *data;

  switch(msg)
 8004796:	7afb      	ldrb	r3, [r7, #11]
 8004798:	3b14      	subs	r3, #20
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d861      	bhi.n	8004862 <u8x8_byte_i2c+0xde>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <u8x8_byte_i2c+0x20>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	08004809 	.word	0x08004809
 80047a8:	08004863 	.word	0x08004863
 80047ac:	08004863 	.word	0x08004863
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	0800483b 	.word	0x0800483b
 80047b8:	08004843 	.word	0x08004843
 80047bc:	08004863 	.word	0x08004863
 80047c0:	08004863 	.word	0x08004863
 80047c4:	08004863 	.word	0x08004863
 80047c8:	08004863 	.word	0x08004863
 80047cc:	08004863 	.word	0x08004863
 80047d0:	08004863 	.word	0x08004863
 80047d4:	08004867 	.word	0x08004867
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	617b      	str	r3, [r7, #20]
      while( arg_int > 0 )
 80047dc:	e010      	b.n	8004800 <u8x8_byte_i2c+0x7c>
      {
    	  buffer[buf_idx++] = *data;
 80047de:	4b25      	ldr	r3, [pc, #148]	; (8004874 <u8x8_byte_i2c+0xf0>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	b2d1      	uxtb	r1, r2
 80047e6:	4a23      	ldr	r2, [pc, #140]	; (8004874 <u8x8_byte_i2c+0xf0>)
 80047e8:	7011      	strb	r1, [r2, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	7819      	ldrb	r1, [r3, #0]
 80047f0:	4b21      	ldr	r3, [pc, #132]	; (8004878 <u8x8_byte_i2c+0xf4>)
 80047f2:	5499      	strb	r1, [r3, r2]
    	  data++;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3301      	adds	r3, #1
 80047f8:	617b      	str	r3, [r7, #20]
    	  arg_int--;
 80047fa:	7abb      	ldrb	r3, [r7, #10]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8004800:	7abb      	ldrb	r3, [r7, #10]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1eb      	bne.n	80047de <u8x8_byte_i2c+0x5a>
      }
      break;
 8004806:	e02f      	b.n	8004868 <u8x8_byte_i2c+0xe4>
    case U8X8_MSG_BYTE_INIT:
      /* add your custom code to init i2c subsystem */
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 8004808:	2201      	movs	r2, #1
 800480a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800480e:	481b      	ldr	r0, [pc, #108]	; (800487c <u8x8_byte_i2c+0xf8>)
 8004810:	f005 f8fa 	bl	8009a08 <HAL_GPIO_WritePin>
    	// Hardware display reset
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_RESET);
 8004814:	2200      	movs	r2, #0
 8004816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800481a:	4818      	ldr	r0, [pc, #96]	; (800487c <u8x8_byte_i2c+0xf8>)
 800481c:	f005 f8f4 	bl	8009a08 <HAL_GPIO_WritePin>
    	HAL_Delay(1);	// The minimum reset "L" pulse width (tRW) is 1us at VDD=3.3V and 2us at VDD=1.8V
 8004820:	2001      	movs	r0, #1
 8004822:	f003 fdf3 	bl	800840c <HAL_Delay>
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 8004826:	2201      	movs	r2, #1
 8004828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800482c:	4813      	ldr	r0, [pc, #76]	; (800487c <u8x8_byte_i2c+0xf8>)
 800482e:	f005 f8eb 	bl	8009a08 <HAL_GPIO_WritePin>
    	HAL_Delay(2); // The maximum reset duration (tR) is 1us at VDD=3.3V and 2us at VDD=1.8V
 8004832:	2002      	movs	r0, #2
 8004834:	f003 fdea 	bl	800840c <HAL_Delay>
      break;
 8004838:	e016      	b.n	8004868 <u8x8_byte_i2c+0xe4>
    case U8X8_MSG_BYTE_SET_DC:
      /* ignored for i2c */
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      buf_idx = 0;
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <u8x8_byte_i2c+0xf0>)
 800483c:	2200      	movs	r2, #0
 800483e:	701a      	strb	r2, [r3, #0]
      //buffer[buf_idx++] = 0;
      break;
 8004840:	e012      	b.n	8004868 <u8x8_byte_i2c+0xe4>
    case U8X8_MSG_BYTE_END_TRANSFER:
      //i2c_transfer(u8x8_GetI2CAddress(u8x8) >> 1, buf_idx, buffer);
      //HAL_I2C_Master_Transmit(&hi2c4, i2cDeviceAddress, (uint8_t *) arg_ptr, arg_int, 1000);
      //HAL_I2C_Master_Transmit(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 1000);
      HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 5);
 8004842:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <u8x8_byte_i2c+0xfc>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b299      	uxth	r1, r3
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <u8x8_byte_i2c+0xf0>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	2205      	movs	r2, #5
 8004850:	9200      	str	r2, [sp, #0]
 8004852:	4a09      	ldr	r2, [pc, #36]	; (8004878 <u8x8_byte_i2c+0xf4>)
 8004854:	480b      	ldr	r0, [pc, #44]	; (8004884 <u8x8_byte_i2c+0x100>)
 8004856:	f006 fea7 	bl	800b5a8 <HAL_I2C_Master_Transmit>
      //HAL_I2C_Master_Transmit_DMA(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx);
      microDelay(1);
 800485a:	2001      	movs	r0, #1
 800485c:	f7fd f986 	bl	8001b6c <microDelay>
      break;
 8004860:	e002      	b.n	8004868 <u8x8_byte_i2c+0xe4>
    default:
      return 0;
 8004862:	2300      	movs	r3, #0
 8004864:	e001      	b.n	800486a <u8x8_byte_i2c+0xe6>
      break;
 8004866:	bf00      	nop
  }
  return 1;
 8004868:	2301      	movs	r3, #1
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000350 	.word	0x20000350
 8004878:	20000354 	.word	0x20000354
 800487c:	40020000 	.word	0x40020000
 8004880:	2000005a 	.word	0x2000005a
 8004884:	200074bc 	.word	0x200074bc

08004888 <u8x8_GetMenuEvent>:
}
*/


uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]

  HAL_Delay(5);
 8004894:	2005      	movs	r0, #5
 8004896:	f003 fdb9 	bl	800840c <HAL_Delay>

  if(isEnterTriggered == 1){
 800489a:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <u8x8_GetMenuEvent+0x13c>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d113      	bne.n	80048ca <u8x8_GetMenuEvent+0x42>
	  //isEnterTriggered = 0;
	  isDownTriggered = 0;
 80048a2:	4b49      	ldr	r3, [pc, #292]	; (80049c8 <u8x8_GetMenuEvent+0x140>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 80048a8:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <u8x8_GetMenuEvent+0x13c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 80048ae:	4b47      	ldr	r3, [pc, #284]	; (80049cc <u8x8_GetMenuEvent+0x144>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 80048b4:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <u8x8_GetMenuEvent+0x148>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 80048ba:	4b46      	ldr	r3, [pc, #280]	; (80049d4 <u8x8_GetMenuEvent+0x14c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 80048c0:	4b45      	ldr	r3, [pc, #276]	; (80049d8 <u8x8_GetMenuEvent+0x150>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_SELECT;
 80048c6:	2350      	movs	r3, #80	; 0x50
 80048c8:	e078      	b.n	80049bc <u8x8_GetMenuEvent+0x134>

  }
  else if(isEscTriggered == 1){
 80048ca:	4b40      	ldr	r3, [pc, #256]	; (80049cc <u8x8_GetMenuEvent+0x144>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d113      	bne.n	80048fa <u8x8_GetMenuEvent+0x72>
	  //isEscTriggered = 0;
	  isDownTriggered = 0;
 80048d2:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <u8x8_GetMenuEvent+0x140>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 80048d8:	4b3a      	ldr	r3, [pc, #232]	; (80049c4 <u8x8_GetMenuEvent+0x13c>)
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 80048de:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <u8x8_GetMenuEvent+0x144>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 80048e4:	4b3a      	ldr	r3, [pc, #232]	; (80049d0 <u8x8_GetMenuEvent+0x148>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 80048ea:	4b3a      	ldr	r3, [pc, #232]	; (80049d4 <u8x8_GetMenuEvent+0x14c>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 80048f0:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <u8x8_GetMenuEvent+0x150>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_HOME;
 80048f6:	2353      	movs	r3, #83	; 0x53
 80048f8:	e060      	b.n	80049bc <u8x8_GetMenuEvent+0x134>

  }
  else if(isLeftTriggered== 1){
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <u8x8_GetMenuEvent+0x14c>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d113      	bne.n	800492a <u8x8_GetMenuEvent+0xa2>
  	  //isLeftTriggered = 0;
	  isDownTriggered = 0;
 8004902:	4b31      	ldr	r3, [pc, #196]	; (80049c8 <u8x8_GetMenuEvent+0x140>)
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8004908:	4b2e      	ldr	r3, [pc, #184]	; (80049c4 <u8x8_GetMenuEvent+0x13c>)
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 800490e:	4b2f      	ldr	r3, [pc, #188]	; (80049cc <u8x8_GetMenuEvent+0x144>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004914:	4b2e      	ldr	r3, [pc, #184]	; (80049d0 <u8x8_GetMenuEvent+0x148>)
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800491a:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <u8x8_GetMenuEvent+0x14c>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <u8x8_GetMenuEvent+0x150>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_PREV;
 8004926:	2352      	movs	r3, #82	; 0x52
 8004928:	e048      	b.n	80049bc <u8x8_GetMenuEvent+0x134>

  }
  else if(isRightTriggered == 1){
 800492a:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <u8x8_GetMenuEvent+0x150>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d113      	bne.n	800495a <u8x8_GetMenuEvent+0xd2>
  	  //isRightTriggered = 0;
	  isDownTriggered = 0;
 8004932:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <u8x8_GetMenuEvent+0x140>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8004938:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <u8x8_GetMenuEvent+0x13c>)
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 800493e:	4b23      	ldr	r3, [pc, #140]	; (80049cc <u8x8_GetMenuEvent+0x144>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004944:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <u8x8_GetMenuEvent+0x148>)
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800494a:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <u8x8_GetMenuEvent+0x14c>)
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <u8x8_GetMenuEvent+0x150>)
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_NEXT;
 8004956:	2351      	movs	r3, #81	; 0x51
 8004958:	e030      	b.n	80049bc <u8x8_GetMenuEvent+0x134>
	  return U8X8_MSG_GPIO_MENU_PREV;
  }
  else if(HAL_GPIO_ReadPin(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET){
  	  return U8X8_MSG_GPIO_MENU_NEXT;
  }*/
  else if(isUpTriggered == 1){
 800495a:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <u8x8_GetMenuEvent+0x148>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d113      	bne.n	800498a <u8x8_GetMenuEvent+0x102>
	  //isUpTriggered = 0;
	  isDownTriggered = 0;
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <u8x8_GetMenuEvent+0x140>)
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <u8x8_GetMenuEvent+0x13c>)
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <u8x8_GetMenuEvent+0x144>)
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004974:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <u8x8_GetMenuEvent+0x148>)
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <u8x8_GetMenuEvent+0x14c>)
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <u8x8_GetMenuEvent+0x150>)
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_UP;
 8004986:	2354      	movs	r3, #84	; 0x54
 8004988:	e018      	b.n	80049bc <u8x8_GetMenuEvent+0x134>

  }
  else if(isDownTriggered == 1){
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <u8x8_GetMenuEvent+0x140>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d113      	bne.n	80049ba <u8x8_GetMenuEvent+0x132>
	  //isDownTriggered = 0;
	  isDownTriggered = 0;
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <u8x8_GetMenuEvent+0x140>)
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <u8x8_GetMenuEvent+0x13c>)
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <u8x8_GetMenuEvent+0x144>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <u8x8_GetMenuEvent+0x148>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <u8x8_GetMenuEvent+0x14c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <u8x8_GetMenuEvent+0x150>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_DOWN;
 80049b6:	2355      	movs	r3, #85	; 0x55
 80049b8:	e000      	b.n	80049bc <u8x8_GetMenuEvent+0x134>

  }
  else{
	  return 0;
 80049ba:	2300      	movs	r3, #0
  }



  return result_msg;
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20000315 	.word	0x20000315
 80049c8:	20000318 	.word	0x20000318
 80049cc:	20000316 	.word	0x20000316
 80049d0:	20000317 	.word	0x20000317
 80049d4:	20000319 	.word	0x20000319
 80049d8:	2000031a 	.word	0x2000031a

080049dc <screenInfoPanel>:



}

void screenInfoPanel(){
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af02      	add	r7, sp, #8
	//u8g2_ClearDisplay(&u8g2);
	//u8g2_SetFontMode(&u8g2, 1);
	//u8g2_SetFontDirection(&u8g2, 0);
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf

	u8g2_ClearBuffer(&u8g2);
 80049e2:	4853      	ldr	r0, [pc, #332]	; (8004b30 <screenInfoPanel+0x154>)
 80049e4:	f00f f971 	bl	8013cca <u8g2_ClearBuffer>

	u8g2_DrawStr(&u8g2, 15 , 7, "InfoPanel");
 80049e8:	4b52      	ldr	r3, [pc, #328]	; (8004b34 <screenInfoPanel+0x158>)
 80049ea:	2207      	movs	r2, #7
 80049ec:	210f      	movs	r1, #15
 80049ee:	4850      	ldr	r0, [pc, #320]	; (8004b30 <screenInfoPanel+0x154>)
 80049f0:	f00f ffb6 	bl	8014960 <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 70 , 7, "Range: Auto");
	u8g2_DrawStr(&u8g2, 70 , 7, "Range: ");
 80049f4:	4b50      	ldr	r3, [pc, #320]	; (8004b38 <screenInfoPanel+0x15c>)
 80049f6:	2207      	movs	r2, #7
 80049f8:	2146      	movs	r1, #70	; 0x46
 80049fa:	484d      	ldr	r0, [pc, #308]	; (8004b30 <screenInfoPanel+0x154>)
 80049fc:	f00f ffb0 	bl	8014960 <u8g2_DrawStr>
	if(rangeMode == 0)
 8004a00:	4b4e      	ldr	r3, [pc, #312]	; (8004b3c <screenInfoPanel+0x160>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <screenInfoPanel+0x3a>
		u8g2_DrawStr(&u8g2, 98 , 7, "nA");
 8004a08:	4b4d      	ldr	r3, [pc, #308]	; (8004b40 <screenInfoPanel+0x164>)
 8004a0a:	2207      	movs	r2, #7
 8004a0c:	2162      	movs	r1, #98	; 0x62
 8004a0e:	4848      	ldr	r0, [pc, #288]	; (8004b30 <screenInfoPanel+0x154>)
 8004a10:	f00f ffa6 	bl	8014960 <u8g2_DrawStr>
 8004a14:	e01b      	b.n	8004a4e <screenInfoPanel+0x72>
	else if(rangeMode == 1)
 8004a16:	4b49      	ldr	r3, [pc, #292]	; (8004b3c <screenInfoPanel+0x160>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d106      	bne.n	8004a2c <screenInfoPanel+0x50>
		u8g2_DrawStr(&u8g2, 98 , 7, "uA");
 8004a1e:	4b49      	ldr	r3, [pc, #292]	; (8004b44 <screenInfoPanel+0x168>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	2162      	movs	r1, #98	; 0x62
 8004a24:	4842      	ldr	r0, [pc, #264]	; (8004b30 <screenInfoPanel+0x154>)
 8004a26:	f00f ff9b 	bl	8014960 <u8g2_DrawStr>
 8004a2a:	e010      	b.n	8004a4e <screenInfoPanel+0x72>
	else if(rangeMode == 2)
 8004a2c:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <screenInfoPanel+0x160>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d106      	bne.n	8004a42 <screenInfoPanel+0x66>
		u8g2_DrawStr(&u8g2, 98 , 7, "mA");
 8004a34:	4b44      	ldr	r3, [pc, #272]	; (8004b48 <screenInfoPanel+0x16c>)
 8004a36:	2207      	movs	r2, #7
 8004a38:	2162      	movs	r1, #98	; 0x62
 8004a3a:	483d      	ldr	r0, [pc, #244]	; (8004b30 <screenInfoPanel+0x154>)
 8004a3c:	f00f ff90 	bl	8014960 <u8g2_DrawStr>
 8004a40:	e005      	b.n	8004a4e <screenInfoPanel+0x72>
	else
		u8g2_DrawStr(&u8g2, 98 , 7, "Auto");
 8004a42:	4b42      	ldr	r3, [pc, #264]	; (8004b4c <screenInfoPanel+0x170>)
 8004a44:	2207      	movs	r2, #7
 8004a46:	2162      	movs	r1, #98	; 0x62
 8004a48:	4839      	ldr	r0, [pc, #228]	; (8004b30 <screenInfoPanel+0x154>)
 8004a4a:	f00f ff89 	bl	8014960 <u8g2_DrawStr>

	//u8g2_DrawGlyph(u8g2, x, y, encoding)
	u8g2_DrawLine(&u8g2, 0, 10, 128, 10);
 8004a4e:	230a      	movs	r3, #10
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	220a      	movs	r2, #10
 8004a56:	2100      	movs	r1, #0
 8004a58:	4835      	ldr	r0, [pc, #212]	; (8004b30 <screenInfoPanel+0x154>)
 8004a5a:	f010 fc11 	bl	8015280 <u8g2_DrawLine>
	u8g2_DrawLine(&u8g2, 64, 0, 64, 10);
 8004a5e:	230a      	movs	r3, #10
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	2340      	movs	r3, #64	; 0x40
 8004a64:	2200      	movs	r2, #0
 8004a66:	2140      	movs	r1, #64	; 0x40
 8004a68:	4831      	ldr	r0, [pc, #196]	; (8004b30 <screenInfoPanel+0x154>)
 8004a6a:	f010 fc09 	bl	8015280 <u8g2_DrawLine>

	sprintf(buffer, "OUT voltage [mV]: %d", settings.powerSourceVoltage);
 8004a6e:	4b38      	ldr	r3, [pc, #224]	; (8004b50 <screenInfoPanel+0x174>)
 8004a70:	8c1b      	ldrh	r3, [r3, #32]
 8004a72:	461a      	mov	r2, r3
 8004a74:	4937      	ldr	r1, [pc, #220]	; (8004b54 <screenInfoPanel+0x178>)
 8004a76:	4838      	ldr	r0, [pc, #224]	; (8004b58 <screenInfoPanel+0x17c>)
 8004a78:	f01a f978 	bl	801ed6c <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 20, buffer);
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <screenInfoPanel+0x17c>)
 8004a7e:	2214      	movs	r2, #20
 8004a80:	210a      	movs	r1, #10
 8004a82:	482b      	ldr	r0, [pc, #172]	; (8004b30 <screenInfoPanel+0x154>)
 8004a84:	f00f ff6c 	bl	8014960 <u8g2_DrawStr>
	sprintf(buffer, "OUT current limit [mA]: %d", settings.powerSourceCurrent);
 8004a88:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <screenInfoPanel+0x174>)
 8004a8a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4933      	ldr	r1, [pc, #204]	; (8004b5c <screenInfoPanel+0x180>)
 8004a90:	4831      	ldr	r0, [pc, #196]	; (8004b58 <screenInfoPanel+0x17c>)
 8004a92:	f01a f96b 	bl	801ed6c <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 30, buffer);
 8004a96:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <screenInfoPanel+0x17c>)
 8004a98:	221e      	movs	r2, #30
 8004a9a:	210a      	movs	r1, #10
 8004a9c:	4824      	ldr	r0, [pc, #144]	; (8004b30 <screenInfoPanel+0x154>)
 8004a9e:	f00f ff5f 	bl	8014960 <u8g2_DrawStr>
	sprintf(buffer, "Sampling interval [us]: %d", settings.samplingInterval);
 8004aa2:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <screenInfoPanel+0x174>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	492d      	ldr	r1, [pc, #180]	; (8004b60 <screenInfoPanel+0x184>)
 8004aaa:	482b      	ldr	r0, [pc, #172]	; (8004b58 <screenInfoPanel+0x17c>)
 8004aac:	f01a f95e 	bl	801ed6c <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 40, buffer);
 8004ab0:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <screenInfoPanel+0x17c>)
 8004ab2:	2228      	movs	r2, #40	; 0x28
 8004ab4:	210a      	movs	r1, #10
 8004ab6:	481e      	ldr	r0, [pc, #120]	; (8004b30 <screenInfoPanel+0x154>)
 8004ab8:	f00f ff52 	bl	8014960 <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: NA");
	u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: ");
 8004abc:	4b29      	ldr	r3, [pc, #164]	; (8004b64 <screenInfoPanel+0x188>)
 8004abe:	2232      	movs	r2, #50	; 0x32
 8004ac0:	210a      	movs	r1, #10
 8004ac2:	481b      	ldr	r0, [pc, #108]	; (8004b30 <screenInfoPanel+0x154>)
 8004ac4:	f00f ff4c 	bl	8014960 <u8g2_DrawStr>
	if(settings.isLoggingToConsole == 1)
 8004ac8:	4b21      	ldr	r3, [pc, #132]	; (8004b50 <screenInfoPanel+0x174>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d106      	bne.n	8004ade <screenInfoPanel+0x102>
		u8g2_DrawStr(&u8g2, 74 , 50, "PC");
 8004ad0:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <screenInfoPanel+0x18c>)
 8004ad2:	2232      	movs	r2, #50	; 0x32
 8004ad4:	214a      	movs	r1, #74	; 0x4a
 8004ad6:	4816      	ldr	r0, [pc, #88]	; (8004b30 <screenInfoPanel+0x154>)
 8004ad8:	f00f ff42 	bl	8014960 <u8g2_DrawStr>
 8004adc:	e021      	b.n	8004b22 <screenInfoPanel+0x146>
	else if(settings.isLoggingToSD == 1)
 8004ade:	4b1c      	ldr	r3, [pc, #112]	; (8004b50 <screenInfoPanel+0x174>)
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d106      	bne.n	8004af4 <screenInfoPanel+0x118>
		u8g2_DrawStr(&u8g2, 74 , 50, "SD");
 8004ae6:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <screenInfoPanel+0x190>)
 8004ae8:	2232      	movs	r2, #50	; 0x32
 8004aea:	214a      	movs	r1, #74	; 0x4a
 8004aec:	4810      	ldr	r0, [pc, #64]	; (8004b30 <screenInfoPanel+0x154>)
 8004aee:	f00f ff37 	bl	8014960 <u8g2_DrawStr>
 8004af2:	e016      	b.n	8004b22 <screenInfoPanel+0x146>
	else if(settings.isLoggingToUSB == 1)
 8004af4:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <screenInfoPanel+0x174>)
 8004af6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d106      	bne.n	8004b0c <screenInfoPanel+0x130>
		u8g2_DrawStr(&u8g2, 74 , 50, "USB");
 8004afe:	4b1c      	ldr	r3, [pc, #112]	; (8004b70 <screenInfoPanel+0x194>)
 8004b00:	2232      	movs	r2, #50	; 0x32
 8004b02:	214a      	movs	r1, #74	; 0x4a
 8004b04:	480a      	ldr	r0, [pc, #40]	; (8004b30 <screenInfoPanel+0x154>)
 8004b06:	f00f ff2b 	bl	8014960 <u8g2_DrawStr>
 8004b0a:	e00a      	b.n	8004b22 <screenInfoPanel+0x146>
	else if(settings.isLoggingToEthernet == 1)
 8004b0c:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <screenInfoPanel+0x174>)
 8004b0e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d105      	bne.n	8004b22 <screenInfoPanel+0x146>
		u8g2_DrawStr(&u8g2, 74 , 50, "Eth");
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <screenInfoPanel+0x198>)
 8004b18:	2232      	movs	r2, #50	; 0x32
 8004b1a:	214a      	movs	r1, #74	; 0x4a
 8004b1c:	4804      	ldr	r0, [pc, #16]	; (8004b30 <screenInfoPanel+0x154>)
 8004b1e:	f00f ff1f 	bl	8014960 <u8g2_DrawStr>

	u8g2_SendBuffer(&u8g2);
 8004b22:	4803      	ldr	r0, [pc, #12]	; (8004b30 <screenInfoPanel+0x154>)
 8004b24:	f00f f944 	bl	8013db0 <u8g2_SendBuffer>
	//HAL_Delay(50);



}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000290 	.word	0x20000290
 8004b34:	08022ea8 	.word	0x08022ea8
 8004b38:	08022eb4 	.word	0x08022eb4
 8004b3c:	2000000c 	.word	0x2000000c
 8004b40:	08022ebc 	.word	0x08022ebc
 8004b44:	08022ec0 	.word	0x08022ec0
 8004b48:	08022ec4 	.word	0x08022ec4
 8004b4c:	08022ec8 	.word	0x08022ec8
 8004b50:	20000018 	.word	0x20000018
 8004b54:	08022ed0 	.word	0x08022ed0
 8004b58:	20003040 	.word	0x20003040
 8004b5c:	08022ee8 	.word	0x08022ee8
 8004b60:	08022f04 	.word	0x08022f04
 8004b64:	08022f20 	.word	0x08022f20
 8004b68:	08022f34 	.word	0x08022f34
 8004b6c:	08022f38 	.word	0x08022f38
 8004b70:	08022f3c 	.word	0x08022f3c
 8004b74:	08022f40 	.word	0x08022f40

08004b78 <screenDeviceSettings>:
 *		[312] *Behaviour mode of power source - DIF SUBMENU
 *		[888] *Go to main menu
 *		[999] *Go to main menu
*/

void screenDeviceSettings(){
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af02      	add	r7, sp, #8
	sprintf(buffer, "Test uint32: %d", settings.samplingInterval);
	send_uart(buffer);
	HAL_Delay(10000);
	*/

	u8g2_ClearDisplay(&u8g2);
 8004b7e:	48c0      	ldr	r0, [pc, #768]	; (8004e80 <screenDeviceSettings+0x308>)
 8004b80:	f00f f989 	bl	8013e96 <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8004b84:	48be      	ldr	r0, [pc, #760]	; (8004e80 <screenDeviceSettings+0x308>)
 8004b86:	f00f f8a0 	bl	8013cca <u8g2_ClearBuffer>

	uint32_t temp32 = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Device menu", 1,"Storing method\nCheck SD card\nCheck USB drive\nOffset calibration\nNull offset\nBack to Main")) {
 8004b8e:	4bbd      	ldr	r3, [pc, #756]	; (8004e84 <screenDeviceSettings+0x30c>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	49bd      	ldr	r1, [pc, #756]	; (8004e88 <screenDeviceSettings+0x310>)
 8004b94:	48ba      	ldr	r0, [pc, #744]	; (8004e80 <screenDeviceSettings+0x308>)
 8004b96:	f010 ff61 	bl	8015a5c <u8g2_UserInterfaceSelectionList>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	f200 8166 	bhi.w	8004e6e <screenDeviceSettings+0x2f6>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <screenDeviceSettings+0x30>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bc1 	.word	0x08004bc1
 8004bac:	08004bcd 	.word	0x08004bcd
 8004bb0:	08004d31 	.word	0x08004d31
 8004bb4:	08004d5d 	.word	0x08004d5d
 8004bb8:	08004d89 	.word	0x08004d89
 8004bbc:	08004df7 	.word	0x08004df7
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 8004bc0:	4bb2      	ldr	r3, [pc, #712]	; (8004e8c <screenDeviceSettings+0x314>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004bc6:	f000 fe5d 	bl	8005884 <screenInterface>
 8004bca:	e155      	b.n	8004e78 <screenDeviceSettings+0x300>
	// storing method
	case 1:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Storing method", 1,"COM port\nSD Card\nUSB Drive\nEthernet\nExit");
 8004bcc:	4bb0      	ldr	r3, [pc, #704]	; (8004e90 <screenDeviceSettings+0x318>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	49b0      	ldr	r1, [pc, #704]	; (8004e94 <screenDeviceSettings+0x31c>)
 8004bd2:	48ab      	ldr	r0, [pc, #684]	; (8004e80 <screenDeviceSettings+0x308>)
 8004bd4:	f010 ff42 	bl	8015a5c <u8g2_UserInterfaceSelectionList>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	607b      	str	r3, [r7, #4]
		if (temp32 == 1) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d121      	bne.n	8004c26 <screenDeviceSettings+0xae>
			u8g2_ClearDisplay(&u8g2);
 8004be2:	48a7      	ldr	r0, [pc, #668]	; (8004e80 <screenDeviceSettings+0x308>)
 8004be4:	f00f f957 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004be8:	48a5      	ldr	r0, [pc, #660]	; (8004e80 <screenDeviceSettings+0x308>)
 8004bea:	f00f f86e 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: COM Port");
 8004bee:	4baa      	ldr	r3, [pc, #680]	; (8004e98 <screenDeviceSettings+0x320>)
 8004bf0:	2223      	movs	r2, #35	; 0x23
 8004bf2:	2114      	movs	r1, #20
 8004bf4:	48a2      	ldr	r0, [pc, #648]	; (8004e80 <screenDeviceSettings+0x308>)
 8004bf6:	f00f feb3 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004bfa:	48a1      	ldr	r0, [pc, #644]	; (8004e80 <screenDeviceSettings+0x308>)
 8004bfc:	f00f f8d8 	bl	8013db0 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 1;
 8004c00:	4ba6      	ldr	r3, [pc, #664]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8004c06:	4ba5      	ldr	r3, [pc, #660]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8004c0c:	4ba3      	ldr	r3, [pc, #652]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8004c14:	4ba1      	ldr	r3, [pc, #644]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 8004c1c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004c20:	f003 fbf4 	bl	800840c <HAL_Delay>
 8004c24:	e081      	b.n	8004d2a <screenDeviceSettings+0x1b2>
		} else if (temp32 == 2) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d121      	bne.n	8004c70 <screenDeviceSettings+0xf8>
			u8g2_ClearDisplay(&u8g2);
 8004c2c:	4894      	ldr	r0, [pc, #592]	; (8004e80 <screenDeviceSettings+0x308>)
 8004c2e:	f00f f932 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004c32:	4893      	ldr	r0, [pc, #588]	; (8004e80 <screenDeviceSettings+0x308>)
 8004c34:	f00f f849 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: SD Card");
 8004c38:	4b99      	ldr	r3, [pc, #612]	; (8004ea0 <screenDeviceSettings+0x328>)
 8004c3a:	2223      	movs	r2, #35	; 0x23
 8004c3c:	2114      	movs	r1, #20
 8004c3e:	4890      	ldr	r0, [pc, #576]	; (8004e80 <screenDeviceSettings+0x308>)
 8004c40:	f00f fe8e 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004c44:	488e      	ldr	r0, [pc, #568]	; (8004e80 <screenDeviceSettings+0x308>)
 8004c46:	f00f f8b3 	bl	8013db0 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8004c4a:	4b94      	ldr	r3, [pc, #592]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 1;
 8004c50:	4b92      	ldr	r3, [pc, #584]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8004c56:	4b91      	ldr	r3, [pc, #580]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8004c5e:	4b8f      	ldr	r3, [pc, #572]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 8004c66:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004c6a:	f003 fbcf 	bl	800840c <HAL_Delay>
 8004c6e:	e05c      	b.n	8004d2a <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d121      	bne.n	8004cba <screenDeviceSettings+0x142>
			u8g2_ClearDisplay(&u8g2);
 8004c76:	4882      	ldr	r0, [pc, #520]	; (8004e80 <screenDeviceSettings+0x308>)
 8004c78:	f00f f90d 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004c7c:	4880      	ldr	r0, [pc, #512]	; (8004e80 <screenDeviceSettings+0x308>)
 8004c7e:	f00f f824 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: USB Drive");
 8004c82:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <screenDeviceSettings+0x32c>)
 8004c84:	2223      	movs	r2, #35	; 0x23
 8004c86:	2114      	movs	r1, #20
 8004c88:	487d      	ldr	r0, [pc, #500]	; (8004e80 <screenDeviceSettings+0x308>)
 8004c8a:	f00f fe69 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004c8e:	487c      	ldr	r0, [pc, #496]	; (8004e80 <screenDeviceSettings+0x308>)
 8004c90:	f00f f88e 	bl	8013db0 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8004c94:	4b81      	ldr	r3, [pc, #516]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8004c9a:	4b80      	ldr	r3, [pc, #512]	; (8004e9c <screenDeviceSettings+0x324>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 1;
 8004ca0:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <screenDeviceSettings+0x324>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8004ca8:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <screenDeviceSettings+0x324>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 8004cb0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004cb4:	f003 fbaa 	bl	800840c <HAL_Delay>
 8004cb8:	e037      	b.n	8004d2a <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d121      	bne.n	8004d04 <screenDeviceSettings+0x18c>
			u8g2_ClearDisplay(&u8g2);
 8004cc0:	486f      	ldr	r0, [pc, #444]	; (8004e80 <screenDeviceSettings+0x308>)
 8004cc2:	f00f f8e8 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004cc6:	486e      	ldr	r0, [pc, #440]	; (8004e80 <screenDeviceSettings+0x308>)
 8004cc8:	f00e ffff 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: Ethernet");
 8004ccc:	4b76      	ldr	r3, [pc, #472]	; (8004ea8 <screenDeviceSettings+0x330>)
 8004cce:	2223      	movs	r2, #35	; 0x23
 8004cd0:	2114      	movs	r1, #20
 8004cd2:	486b      	ldr	r0, [pc, #428]	; (8004e80 <screenDeviceSettings+0x308>)
 8004cd4:	f00f fe44 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004cd8:	4869      	ldr	r0, [pc, #420]	; (8004e80 <screenDeviceSettings+0x308>)
 8004cda:	f00f f869 	bl	8013db0 <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8004cde:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <screenDeviceSettings+0x324>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8004ce4:	4b6d      	ldr	r3, [pc, #436]	; (8004e9c <screenDeviceSettings+0x324>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8004cea:	4b6c      	ldr	r3, [pc, #432]	; (8004e9c <screenDeviceSettings+0x324>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 1;
 8004cf2:	4b6a      	ldr	r3, [pc, #424]	; (8004e9c <screenDeviceSettings+0x324>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 8004cfa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004cfe:	f003 fb85 	bl	800840c <HAL_Delay>
 8004d02:	e012      	b.n	8004d2a <screenDeviceSettings+0x1b2>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004d04:	485e      	ldr	r0, [pc, #376]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d06:	f00f f8c6 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004d0a:	485d      	ldr	r0, [pc, #372]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d0c:	f00e ffdd 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: UNCHANGED");
 8004d10:	4b66      	ldr	r3, [pc, #408]	; (8004eac <screenDeviceSettings+0x334>)
 8004d12:	2223      	movs	r2, #35	; 0x23
 8004d14:	2114      	movs	r1, #20
 8004d16:	485a      	ldr	r0, [pc, #360]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d18:	f00f fe22 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004d1c:	4858      	ldr	r0, [pc, #352]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d1e:	f00f f847 	bl	8013db0 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004d22:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004d26:	f003 fb71 	bl	800840c <HAL_Delay>
		}
		return screenDeviceSettings();
 8004d2a:	f7ff ff25 	bl	8004b78 <screenDeviceSettings>
 8004d2e:	e0a3      	b.n	8004e78 <screenDeviceSettings+0x300>
		break;
	// check sd card
	case 2:
		u8g2_ClearDisplay(&u8g2);
 8004d30:	4853      	ldr	r0, [pc, #332]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d32:	f00f f8b0 	bl	8013e96 <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 8004d36:	4852      	ldr	r0, [pc, #328]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d38:	f00e ffc7 	bl	8013cca <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "SD CARD: OK");
 8004d3c:	4b5c      	ldr	r3, [pc, #368]	; (8004eb0 <screenDeviceSettings+0x338>)
 8004d3e:	2223      	movs	r2, #35	; 0x23
 8004d40:	2114      	movs	r1, #20
 8004d42:	484f      	ldr	r0, [pc, #316]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d44:	f00f fe0c 	bl	8014960 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8004d48:	484d      	ldr	r0, [pc, #308]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d4a:	f00f f831 	bl	8013db0 <u8g2_SendBuffer>
		HAL_Delay(1500);
 8004d4e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004d52:	f003 fb5b 	bl	800840c <HAL_Delay>
		return screenDeviceSettings();
 8004d56:	f7ff ff0f 	bl	8004b78 <screenDeviceSettings>
 8004d5a:	e08d      	b.n	8004e78 <screenDeviceSettings+0x300>
		break;
	// check usb flash drive
	case 3:
		u8g2_ClearDisplay(&u8g2);
 8004d5c:	4848      	ldr	r0, [pc, #288]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d5e:	f00f f89a 	bl	8013e96 <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 8004d62:	4847      	ldr	r0, [pc, #284]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d64:	f00e ffb1 	bl	8013cca <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "USB DRIVE: OK");
 8004d68:	4b52      	ldr	r3, [pc, #328]	; (8004eb4 <screenDeviceSettings+0x33c>)
 8004d6a:	2223      	movs	r2, #35	; 0x23
 8004d6c:	2114      	movs	r1, #20
 8004d6e:	4844      	ldr	r0, [pc, #272]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d70:	f00f fdf6 	bl	8014960 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8004d74:	4842      	ldr	r0, [pc, #264]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d76:	f00f f81b 	bl	8013db0 <u8g2_SendBuffer>
		HAL_Delay(1500);
 8004d7a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004d7e:	f003 fb45 	bl	800840c <HAL_Delay>
		return screenDeviceSettings();
 8004d82:	f7ff fef9 	bl	8004b78 <screenDeviceSettings>
 8004d86:	e077      	b.n	8004e78 <screenDeviceSettings+0x300>
		break;
	// perform zero offset calibration
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Offset calibration", NULL, NULL," YES \n NO ") == 1) {
 8004d88:	4b4b      	ldr	r3, [pc, #300]	; (8004eb8 <screenDeviceSettings+0x340>)
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2200      	movs	r2, #0
 8004d90:	494a      	ldr	r1, [pc, #296]	; (8004ebc <screenDeviceSettings+0x344>)
 8004d92:	483b      	ldr	r0, [pc, #236]	; (8004e80 <screenDeviceSettings+0x308>)
 8004d94:	f010 fc2e 	bl	80155f4 <u8g2_UserInterfaceMessage>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d115      	bne.n	8004dca <screenDeviceSettings+0x252>
			adc_compensateOffset();
 8004d9e:	f7fd fe1d 	bl	80029dc <adc_compensateOffset>
			u8g2_ClearDisplay(&u8g2);
 8004da2:	4837      	ldr	r0, [pc, #220]	; (8004e80 <screenDeviceSettings+0x308>)
 8004da4:	f00f f877 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004da8:	4835      	ldr	r0, [pc, #212]	; (8004e80 <screenDeviceSettings+0x308>)
 8004daa:	f00e ff8e 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: CALIBRATED");
 8004dae:	4b44      	ldr	r3, [pc, #272]	; (8004ec0 <screenDeviceSettings+0x348>)
 8004db0:	2223      	movs	r2, #35	; 0x23
 8004db2:	2114      	movs	r1, #20
 8004db4:	4832      	ldr	r0, [pc, #200]	; (8004e80 <screenDeviceSettings+0x308>)
 8004db6:	f00f fdd3 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004dba:	4831      	ldr	r0, [pc, #196]	; (8004e80 <screenDeviceSettings+0x308>)
 8004dbc:	f00e fff8 	bl	8013db0 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004dc0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004dc4:	f003 fb22 	bl	800840c <HAL_Delay>
 8004dc8:	e012      	b.n	8004df0 <screenDeviceSettings+0x278>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004dca:	482d      	ldr	r0, [pc, #180]	; (8004e80 <screenDeviceSettings+0x308>)
 8004dcc:	f00f f863 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004dd0:	482b      	ldr	r0, [pc, #172]	; (8004e80 <screenDeviceSettings+0x308>)
 8004dd2:	f00e ff7a 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 8004dd6:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <screenDeviceSettings+0x34c>)
 8004dd8:	2223      	movs	r2, #35	; 0x23
 8004dda:	210f      	movs	r1, #15
 8004ddc:	4828      	ldr	r0, [pc, #160]	; (8004e80 <screenDeviceSettings+0x308>)
 8004dde:	f00f fdbf 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004de2:	4827      	ldr	r0, [pc, #156]	; (8004e80 <screenDeviceSettings+0x308>)
 8004de4:	f00e ffe4 	bl	8013db0 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004de8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004dec:	f003 fb0e 	bl	800840c <HAL_Delay>
		}
		return screenDeviceSettings();
 8004df0:	f7ff fec2 	bl	8004b78 <screenDeviceSettings>
 8004df4:	e040      	b.n	8004e78 <screenDeviceSettings+0x300>
		break;
	// zero offset value
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Zero offset value", NULL, NULL," YES \n NO ") == 1) {
 8004df6:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <screenDeviceSettings+0x340>)
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4932      	ldr	r1, [pc, #200]	; (8004ec8 <screenDeviceSettings+0x350>)
 8004e00:	481f      	ldr	r0, [pc, #124]	; (8004e80 <screenDeviceSettings+0x308>)
 8004e02:	f010 fbf7 	bl	80155f4 <u8g2_UserInterfaceMessage>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d11a      	bne.n	8004e42 <screenDeviceSettings+0x2ca>
			u8g2_ClearDisplay(&u8g2);
 8004e0c:	481c      	ldr	r0, [pc, #112]	; (8004e80 <screenDeviceSettings+0x308>)
 8004e0e:	f00f f842 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004e12:	481b      	ldr	r0, [pc, #108]	; (8004e80 <screenDeviceSettings+0x308>)
 8004e14:	f00e ff59 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: ZEROED");
 8004e18:	4b2c      	ldr	r3, [pc, #176]	; (8004ecc <screenDeviceSettings+0x354>)
 8004e1a:	2223      	movs	r2, #35	; 0x23
 8004e1c:	2114      	movs	r1, #20
 8004e1e:	4818      	ldr	r0, [pc, #96]	; (8004e80 <screenDeviceSettings+0x308>)
 8004e20:	f00f fd9e 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004e24:	4816      	ldr	r0, [pc, #88]	; (8004e80 <screenDeviceSettings+0x308>)
 8004e26:	f00e ffc3 	bl	8013db0 <u8g2_SendBuffer>
			settings.lastOffsetValue = 0.0;
 8004e2a:	491c      	ldr	r1, [pc, #112]	; (8004e9c <screenDeviceSettings+0x324>)
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9c1 2306 	strd	r2, r3, [r1, #24]
			HAL_Delay(1500);
 8004e38:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004e3c:	f003 fae6 	bl	800840c <HAL_Delay>
 8004e40:	e012      	b.n	8004e68 <screenDeviceSettings+0x2f0>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004e42:	480f      	ldr	r0, [pc, #60]	; (8004e80 <screenDeviceSettings+0x308>)
 8004e44:	f00f f827 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004e48:	480d      	ldr	r0, [pc, #52]	; (8004e80 <screenDeviceSettings+0x308>)
 8004e4a:	f00e ff3e 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 8004e4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <screenDeviceSettings+0x34c>)
 8004e50:	2223      	movs	r2, #35	; 0x23
 8004e52:	210f      	movs	r1, #15
 8004e54:	480a      	ldr	r0, [pc, #40]	; (8004e80 <screenDeviceSettings+0x308>)
 8004e56:	f00f fd83 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004e5a:	4809      	ldr	r0, [pc, #36]	; (8004e80 <screenDeviceSettings+0x308>)
 8004e5c:	f00e ffa8 	bl	8013db0 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004e60:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004e64:	f003 fad2 	bl	800840c <HAL_Delay>
		}
		return screenDeviceSettings();
 8004e68:	f7ff fe86 	bl	8004b78 <screenDeviceSettings>
 8004e6c:	e004      	b.n	8004e78 <screenDeviceSettings+0x300>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 8004e6e:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <screenDeviceSettings+0x314>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004e74:	f000 fd06 	bl	8005884 <screenInterface>

	}



}
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000290 	.word	0x20000290
 8004e84:	08022f44 	.word	0x08022f44
 8004e88:	08022fa0 	.word	0x08022fa0
 8004e8c:	20000315 	.word	0x20000315
 8004e90:	08022fac 	.word	0x08022fac
 8004e94:	08022fd8 	.word	0x08022fd8
 8004e98:	08022fe8 	.word	0x08022fe8
 8004e9c:	20000018 	.word	0x20000018
 8004ea0:	08023000 	.word	0x08023000
 8004ea4:	08023018 	.word	0x08023018
 8004ea8:	08023030 	.word	0x08023030
 8004eac:	08023048 	.word	0x08023048
 8004eb0:	08023060 	.word	0x08023060
 8004eb4:	0802306c 	.word	0x0802306c
 8004eb8:	08023090 	.word	0x08023090
 8004ebc:	0802307c 	.word	0x0802307c
 8004ec0:	0802309c 	.word	0x0802309c
 8004ec4:	080230b0 	.word	0x080230b0
 8004ec8:	080230c4 	.word	0x080230c4
 8004ecc:	080230d8 	.word	0x080230d8

08004ed0 <screenMeasuringSettings>:
 *		[205] *Enabling trigger menu
 *		[206] *Set trigger threshold
 *		[888] *Go to main menu
 *		[999] *Go to main menu
 */
void screenMeasuringSettings(){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 8004ed6:	487c      	ldr	r0, [pc, #496]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004ed8:	f00e ffdd 	bl	8013e96 <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8004edc:	487a      	ldr	r0, [pc, #488]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004ede:	f00e fef4 	bl	8013cca <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 20, 35, "Measuring Settings");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/

	uint32_t temp32 = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]

	switch(u8g2_UserInterfaceSelectionList(&u8g2, "Measuring menu", 1, "Current settings\nMeasuring period\nSampling period\nEnable averaging\nEnable trigger\nTrigger threshold\nBack to Main")){
 8004ee6:	4b79      	ldr	r3, [pc, #484]	; (80050cc <screenMeasuringSettings+0x1fc>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	4979      	ldr	r1, [pc, #484]	; (80050d0 <screenMeasuringSettings+0x200>)
 8004eec:	4876      	ldr	r0, [pc, #472]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004eee:	f010 fdb5 	bl	8015a5c <u8g2_UserInterfaceSelectionList>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b06      	cmp	r3, #6
 8004ef6:	f200 80d9 	bhi.w	80050ac <screenMeasuringSettings+0x1dc>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <screenMeasuringSettings+0x30>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f2f 	.word	0x08004f2f
 8004f0c:	08004f51 	.word	0x08004f51
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08004feb 	.word	0x08004feb
 8004f18:	08005061 	.word	0x08005061
	case 0:
		isEnterTriggered = 1;
 8004f1c:	4b6d      	ldr	r3, [pc, #436]	; (80050d4 <screenMeasuringSettings+0x204>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004f22:	f000 fcaf 	bl	8005884 <screenInterface>
 8004f26:	e0c6      	b.n	80050b6 <screenMeasuringSettings+0x1e6>

	// current settings
	case 1:
		screenInfoPanel();
 8004f28:	f7ff fd58 	bl	80049dc <screenInfoPanel>
		break;
 8004f2c:	e0c3      	b.n	80050b6 <screenMeasuringSettings+0x1e6>
	// measuring period
	case 2:
		u8g2_UserInterfaceInputValue32(&u8g2, "Measuring period", "", &settings.measuringInterval, 1, 100000, 5, " us");
 8004f2e:	4b6a      	ldr	r3, [pc, #424]	; (80050d8 <screenMeasuringSettings+0x208>)
 8004f30:	9303      	str	r3, [sp, #12]
 8004f32:	2305      	movs	r3, #5
 8004f34:	9302      	str	r3, [sp, #8]
 8004f36:	4b69      	ldr	r3, [pc, #420]	; (80050dc <screenMeasuringSettings+0x20c>)
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	4b68      	ldr	r3, [pc, #416]	; (80050e0 <screenMeasuringSettings+0x210>)
 8004f40:	4a68      	ldr	r2, [pc, #416]	; (80050e4 <screenMeasuringSettings+0x214>)
 8004f42:	4969      	ldr	r1, [pc, #420]	; (80050e8 <screenMeasuringSettings+0x218>)
 8004f44:	4860      	ldr	r0, [pc, #384]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004f46:	f00f ffab 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8004f4a:	f7ff ffc1 	bl	8004ed0 <screenMeasuringSettings>
 8004f4e:	e0b2      	b.n	80050b6 <screenMeasuringSettings+0x1e6>
		break;
	// sampling period
	case 3:
		u8g2_UserInterfaceInputValue32(&u8g2, "Sampling period", "", &settings.samplingInterval, 1, 50000, 5, " us");
 8004f50:	4b61      	ldr	r3, [pc, #388]	; (80050d8 <screenMeasuringSettings+0x208>)
 8004f52:	9303      	str	r3, [sp, #12]
 8004f54:	2305      	movs	r3, #5
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	2301      	movs	r3, #1
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	4b62      	ldr	r3, [pc, #392]	; (80050ec <screenMeasuringSettings+0x21c>)
 8004f64:	4a5f      	ldr	r2, [pc, #380]	; (80050e4 <screenMeasuringSettings+0x214>)
 8004f66:	4962      	ldr	r1, [pc, #392]	; (80050f0 <screenMeasuringSettings+0x220>)
 8004f68:	4857      	ldr	r0, [pc, #348]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004f6a:	f00f ff99 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8004f6e:	f7ff ffaf 	bl	8004ed0 <screenMeasuringSettings>
 8004f72:	e0a0      	b.n	80050b6 <screenMeasuringSettings+0x1e6>
		break;
	// enable averaging
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable averaging function", NULL, NULL," YES \n NO ") == 1) {
 8004f74:	4b5f      	ldr	r3, [pc, #380]	; (80050f4 <screenMeasuringSettings+0x224>)
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	495e      	ldr	r1, [pc, #376]	; (80050f8 <screenMeasuringSettings+0x228>)
 8004f7e:	4852      	ldr	r0, [pc, #328]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004f80:	f010 fb38 	bl	80155f4 <u8g2_UserInterfaceMessage>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d116      	bne.n	8004fb8 <screenMeasuringSettings+0xe8>
			u8g2_ClearDisplay(&u8g2);
 8004f8a:	484f      	ldr	r0, [pc, #316]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004f8c:	f00e ff83 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004f90:	484d      	ldr	r0, [pc, #308]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004f92:	f00e fe9a 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "AVERAGING: ENABLED");
 8004f96:	4b59      	ldr	r3, [pc, #356]	; (80050fc <screenMeasuringSettings+0x22c>)
 8004f98:	2223      	movs	r2, #35	; 0x23
 8004f9a:	2114      	movs	r1, #20
 8004f9c:	484a      	ldr	r0, [pc, #296]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004f9e:	f00f fcdf 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004fa2:	4849      	ldr	r0, [pc, #292]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004fa4:	f00e ff04 	bl	8013db0 <u8g2_SendBuffer>
			settings.isAveraging = 1;
 8004fa8:	4b55      	ldr	r3, [pc, #340]	; (8005100 <screenMeasuringSettings+0x230>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8004fae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004fb2:	f003 fa2b 	bl	800840c <HAL_Delay>
 8004fb6:	e015      	b.n	8004fe4 <screenMeasuringSettings+0x114>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 8004fb8:	4843      	ldr	r0, [pc, #268]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004fba:	f00e ff6c 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004fbe:	4842      	ldr	r0, [pc, #264]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004fc0:	f00e fe83 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "AVERAGING: DISABLED");
 8004fc4:	4b4f      	ldr	r3, [pc, #316]	; (8005104 <screenMeasuringSettings+0x234>)
 8004fc6:	2223      	movs	r2, #35	; 0x23
 8004fc8:	210f      	movs	r1, #15
 8004fca:	483f      	ldr	r0, [pc, #252]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004fcc:	f00f fcc8 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004fd0:	483d      	ldr	r0, [pc, #244]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004fd2:	f00e feed 	bl	8013db0 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 8004fd6:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <screenMeasuringSettings+0x230>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8004fdc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004fe0:	f003 fa14 	bl	800840c <HAL_Delay>
		}
		return screenMeasuringSettings();
 8004fe4:	f7ff ff74 	bl	8004ed0 <screenMeasuringSettings>
 8004fe8:	e065      	b.n	80050b6 <screenMeasuringSettings+0x1e6>
		break;
	// enable trigger
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable trigger function", NULL, NULL," YES \n NO ") == 1) {
 8004fea:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <screenMeasuringSettings+0x224>)
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4945      	ldr	r1, [pc, #276]	; (8005108 <screenMeasuringSettings+0x238>)
 8004ff4:	4834      	ldr	r0, [pc, #208]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8004ff6:	f010 fafd 	bl	80155f4 <u8g2_UserInterfaceMessage>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d116      	bne.n	800502e <screenMeasuringSettings+0x15e>
			u8g2_ClearDisplay(&u8g2);
 8005000:	4831      	ldr	r0, [pc, #196]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8005002:	f00e ff48 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005006:	4830      	ldr	r0, [pc, #192]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8005008:	f00e fe5f 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TRIGGER: ENABLED");
 800500c:	4b3f      	ldr	r3, [pc, #252]	; (800510c <screenMeasuringSettings+0x23c>)
 800500e:	2223      	movs	r2, #35	; 0x23
 8005010:	2114      	movs	r1, #20
 8005012:	482d      	ldr	r0, [pc, #180]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8005014:	f00f fca4 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005018:	482b      	ldr	r0, [pc, #172]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 800501a:	f00e fec9 	bl	8013db0 <u8g2_SendBuffer>
			settings.isTriggerActive = 1;
 800501e:	4b38      	ldr	r3, [pc, #224]	; (8005100 <screenMeasuringSettings+0x230>)
 8005020:	2201      	movs	r2, #1
 8005022:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8005024:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005028:	f003 f9f0 	bl	800840c <HAL_Delay>
 800502c:	e015      	b.n	800505a <screenMeasuringSettings+0x18a>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 800502e:	4826      	ldr	r0, [pc, #152]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8005030:	f00e ff31 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005034:	4824      	ldr	r0, [pc, #144]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8005036:	f00e fe48 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "TRIGGER: DISABLED");
 800503a:	4b35      	ldr	r3, [pc, #212]	; (8005110 <screenMeasuringSettings+0x240>)
 800503c:	2223      	movs	r2, #35	; 0x23
 800503e:	210f      	movs	r1, #15
 8005040:	4821      	ldr	r0, [pc, #132]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8005042:	f00f fc8d 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005046:	4820      	ldr	r0, [pc, #128]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8005048:	f00e feb2 	bl	8013db0 <u8g2_SendBuffer>
			settings.isTriggerActive = 0;
 800504c:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <screenMeasuringSettings+0x230>)
 800504e:	2200      	movs	r2, #0
 8005050:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8005052:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005056:	f003 f9d9 	bl	800840c <HAL_Delay>
		}
		return screenMeasuringSettings();
 800505a:	f7ff ff39 	bl	8004ed0 <screenMeasuringSettings>
 800505e:	e02a      	b.n	80050b6 <screenMeasuringSettings+0x1e6>
		break;
	// trigger level
	case 6:
		u8g2_UserInterfaceInputValue32(&u8g2, "Trigger level", "x100 nA", &temp32, 1, 10000000, 5, " nA");
 8005060:	1d3b      	adds	r3, r7, #4
 8005062:	4a2c      	ldr	r2, [pc, #176]	; (8005114 <screenMeasuringSettings+0x244>)
 8005064:	9203      	str	r2, [sp, #12]
 8005066:	2205      	movs	r2, #5
 8005068:	9202      	str	r2, [sp, #8]
 800506a:	4a2b      	ldr	r2, [pc, #172]	; (8005118 <screenMeasuringSettings+0x248>)
 800506c:	9201      	str	r2, [sp, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	9200      	str	r2, [sp, #0]
 8005072:	4a2a      	ldr	r2, [pc, #168]	; (800511c <screenMeasuringSettings+0x24c>)
 8005074:	492a      	ldr	r1, [pc, #168]	; (8005120 <screenMeasuringSettings+0x250>)
 8005076:	4814      	ldr	r0, [pc, #80]	; (80050c8 <screenMeasuringSettings+0x1f8>)
 8005078:	f00f ff12 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
		settings.triggerLevel = temp32*100;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2264      	movs	r2, #100	; 0x64
 8005080:	fb02 f303 	mul.w	r3, r2, r3
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800508c:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <screenMeasuringSettings+0x230>)
 800508e:	ed83 7b04 	vstr	d7, [r3, #16]
		settings.triggerLevel /= 10000000;
 8005092:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <screenMeasuringSettings+0x230>)
 8005094:	ed93 6b04 	vldr	d6, [r3, #16]
 8005098:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80050c0 <screenMeasuringSettings+0x1f0>
 800509c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80050a0:	4b17      	ldr	r3, [pc, #92]	; (8005100 <screenMeasuringSettings+0x230>)
 80050a2:	ed83 7b04 	vstr	d7, [r3, #16]
		return screenMeasuringSettings();
 80050a6:	f7ff ff13 	bl	8004ed0 <screenMeasuringSettings>
 80050aa:	e004      	b.n	80050b6 <screenMeasuringSettings+0x1e6>
		break;
	default:
		isEnterTriggered = 1;
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <screenMeasuringSettings+0x204>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80050b2:	f000 fbe7 	bl	8005884 <screenInterface>
		break;

	}


}
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	f3af 8000 	nop.w
 80050c0:	00000000 	.word	0x00000000
 80050c4:	416312d0 	.word	0x416312d0
 80050c8:	20000290 	.word	0x20000290
 80050cc:	080230e8 	.word	0x080230e8
 80050d0:	0802315c 	.word	0x0802315c
 80050d4:	20000315 	.word	0x20000315
 80050d8:	08023180 	.word	0x08023180
 80050dc:	000186a0 	.word	0x000186a0
 80050e0:	2000001c 	.word	0x2000001c
 80050e4:	080214f0 	.word	0x080214f0
 80050e8:	0802316c 	.word	0x0802316c
 80050ec:	20000020 	.word	0x20000020
 80050f0:	08023184 	.word	0x08023184
 80050f4:	08023090 	.word	0x08023090
 80050f8:	08023194 	.word	0x08023194
 80050fc:	080231b0 	.word	0x080231b0
 8005100:	20000018 	.word	0x20000018
 8005104:	080231c4 	.word	0x080231c4
 8005108:	080231d8 	.word	0x080231d8
 800510c:	080231f0 	.word	0x080231f0
 8005110:	08023204 	.word	0x08023204
 8005114:	08023230 	.word	0x08023230
 8005118:	00989680 	.word	0x00989680
 800511c:	08023218 	.word	0x08023218
 8005120:	08023220 	.word	0x08023220

08005124 <screenPowerSourceControl>:
*		[310] *Adjust current limit for power source
*		[311] *Enable power source
*		[312] *Behaviour mode of power source
*/

void screenPowerSourceControl(){
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af04      	add	r7, sp, #16
	u8g2_ClearBuffer(&u8g2);
	u8g2_DrawStr(&u8g2, 15, 35, "Power Source Control");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/
	u8g2_ClearDisplay(&u8g2);
 800512a:	4891      	ldr	r0, [pc, #580]	; (8005370 <screenPowerSourceControl+0x24c>)
 800512c:	f00e feb3 	bl	8013e96 <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8005130:	488f      	ldr	r0, [pc, #572]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005132:	f00e fdca 	bl	8013cca <u8g2_ClearBuffer>


	uint32_t temp32 = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Power source menu", 1,"Adjust voltage\nAdjust current limit\nEnable source\nEnable mode\nBack to Main")) {
 800513a:	4b8e      	ldr	r3, [pc, #568]	; (8005374 <screenPowerSourceControl+0x250>)
 800513c:	2201      	movs	r2, #1
 800513e:	498e      	ldr	r1, [pc, #568]	; (8005378 <screenPowerSourceControl+0x254>)
 8005140:	488b      	ldr	r0, [pc, #556]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005142:	f010 fc8b 	bl	8015a5c <u8g2_UserInterfaceSelectionList>
 8005146:	4603      	mov	r3, r0
 8005148:	2b04      	cmp	r3, #4
 800514a:	f200 8109 	bhi.w	8005360 <screenPowerSourceControl+0x23c>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <screenPowerSourceControl+0x30>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005169 	.word	0x08005169
 8005158:	08005175 	.word	0x08005175
 800515c:	080051a9 	.word	0x080051a9
 8005160:	080051db 	.word	0x080051db
 8005164:	08005271 	.word	0x08005271
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 8005168:	4b84      	ldr	r3, [pc, #528]	; (800537c <screenPowerSourceControl+0x258>)
 800516a:	2201      	movs	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 800516e:	f000 fb89 	bl	8005884 <screenInterface>
 8005172:	e0fa      	b.n	800536a <screenPowerSourceControl+0x246>
	// adjust voltage
	case 1:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source voltage", "",&settings.powerSourceVoltage, 500, 5500, 5, " mV");
 8005174:	4b82      	ldr	r3, [pc, #520]	; (8005380 <screenPowerSourceControl+0x25c>)
 8005176:	9303      	str	r3, [sp, #12]
 8005178:	2305      	movs	r3, #5
 800517a:	9302      	str	r3, [sp, #8]
 800517c:	f241 537c 	movw	r3, #5500	; 0x157c
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	4b7e      	ldr	r3, [pc, #504]	; (8005384 <screenPowerSourceControl+0x260>)
 800518a:	4a7f      	ldr	r2, [pc, #508]	; (8005388 <screenPowerSourceControl+0x264>)
 800518c:	497f      	ldr	r1, [pc, #508]	; (800538c <screenPowerSourceControl+0x268>)
 800518e:	4878      	ldr	r0, [pc, #480]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005190:	f00f fe86 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
 8005194:	4603      	mov	r3, r0
 8005196:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <screenPowerSourceControl+0x7e>
			setPotenciomenters();
 800519e:	f7fd f87b 	bl	8002298 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 80051a2:	f7ff ffbf 	bl	8005124 <screenPowerSourceControl>
 80051a6:	e0e0      	b.n	800536a <screenPowerSourceControl+0x246>
		break;
	// adjust current limit
	case 2:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source current limit", "",&settings.powerSourceCurrent, 10, 500, 5, " mA");
 80051a8:	4b79      	ldr	r3, [pc, #484]	; (8005390 <screenPowerSourceControl+0x26c>)
 80051aa:	9303      	str	r3, [sp, #12]
 80051ac:	2305      	movs	r3, #5
 80051ae:	9302      	str	r3, [sp, #8]
 80051b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	230a      	movs	r3, #10
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	4b76      	ldr	r3, [pc, #472]	; (8005394 <screenPowerSourceControl+0x270>)
 80051bc:	4a72      	ldr	r2, [pc, #456]	; (8005388 <screenPowerSourceControl+0x264>)
 80051be:	4976      	ldr	r1, [pc, #472]	; (8005398 <screenPowerSourceControl+0x274>)
 80051c0:	486b      	ldr	r0, [pc, #428]	; (8005370 <screenPowerSourceControl+0x24c>)
 80051c2:	f00f fe6d 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
 80051c6:	4603      	mov	r3, r0
 80051c8:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <screenPowerSourceControl+0xb0>
			setPotenciomenters();
 80051d0:	f7fd f862 	bl	8002298 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 80051d4:	f7ff ffa6 	bl	8005124 <screenPowerSourceControl>
 80051d8:	e0c7      	b.n	800536a <screenPowerSourceControl+0x246>
		break;
	// enable source
	case 3:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable power souce", NULL, NULL," YES \n NO ") == 1) {
 80051da:	4b70      	ldr	r3, [pc, #448]	; (800539c <screenPowerSourceControl+0x278>)
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	2300      	movs	r3, #0
 80051e0:	2200      	movs	r2, #0
 80051e2:	496f      	ldr	r1, [pc, #444]	; (80053a0 <screenPowerSourceControl+0x27c>)
 80051e4:	4862      	ldr	r0, [pc, #392]	; (8005370 <screenPowerSourceControl+0x24c>)
 80051e6:	f010 fa05 	bl	80155f4 <u8g2_UserInterfaceMessage>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d11e      	bne.n	800522e <screenPowerSourceControl+0x10a>
			u8g2_ClearDisplay(&u8g2);
 80051f0:	485f      	ldr	r0, [pc, #380]	; (8005370 <screenPowerSourceControl+0x24c>)
 80051f2:	f00e fe50 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80051f6:	485e      	ldr	r0, [pc, #376]	; (8005370 <screenPowerSourceControl+0x24c>)
 80051f8:	f00e fd67 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "SOURCE: ENABLED");
 80051fc:	4b69      	ldr	r3, [pc, #420]	; (80053a4 <screenPowerSourceControl+0x280>)
 80051fe:	2223      	movs	r2, #35	; 0x23
 8005200:	2114      	movs	r1, #20
 8005202:	485b      	ldr	r0, [pc, #364]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005204:	f00f fbac 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005208:	4859      	ldr	r0, [pc, #356]	; (8005370 <screenPowerSourceControl+0x24c>)
 800520a:	f00e fdd1 	bl	8013db0 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 800520e:	2201      	movs	r2, #1
 8005210:	2110      	movs	r1, #16
 8005212:	4865      	ldr	r0, [pc, #404]	; (80053a8 <screenPowerSourceControl+0x284>)
 8005214:	f004 fbf8 	bl	8009a08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8005218:	2201      	movs	r2, #1
 800521a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800521e:	4863      	ldr	r0, [pc, #396]	; (80053ac <screenPowerSourceControl+0x288>)
 8005220:	f004 fbf2 	bl	8009a08 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 8005224:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005228:	f003 f8f0 	bl	800840c <HAL_Delay>
 800522c:	e01d      	b.n	800526a <screenPowerSourceControl+0x146>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 800522e:	4850      	ldr	r0, [pc, #320]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005230:	f00e fe31 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005234:	484e      	ldr	r0, [pc, #312]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005236:	f00e fd48 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "SOURCE: DISABLED");
 800523a:	4b5d      	ldr	r3, [pc, #372]	; (80053b0 <screenPowerSourceControl+0x28c>)
 800523c:	2223      	movs	r2, #35	; 0x23
 800523e:	210f      	movs	r1, #15
 8005240:	484b      	ldr	r0, [pc, #300]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005242:	f00f fb8d 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005246:	484a      	ldr	r0, [pc, #296]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005248:	f00e fdb2 	bl	8013db0 <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 800524c:	2200      	movs	r2, #0
 800524e:	2110      	movs	r1, #16
 8005250:	4855      	ldr	r0, [pc, #340]	; (80053a8 <screenPowerSourceControl+0x284>)
 8005252:	f004 fbd9 	bl	8009a08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8005256:	2200      	movs	r2, #0
 8005258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800525c:	4853      	ldr	r0, [pc, #332]	; (80053ac <screenPowerSourceControl+0x288>)
 800525e:	f004 fbd3 	bl	8009a08 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 8005262:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005266:	f003 f8d1 	bl	800840c <HAL_Delay>
		}
		return screenPowerSourceControl();
 800526a:	f7ff ff5b 	bl	8005124 <screenPowerSourceControl>
 800526e:	e07c      	b.n	800536a <screenPowerSourceControl+0x246>
		break;
	// enable mode
	case 4:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Enable mode", 1,"Enable on measuring\nEnable on boot\nManual mode\nExit");
 8005270:	4b50      	ldr	r3, [pc, #320]	; (80053b4 <screenPowerSourceControl+0x290>)
 8005272:	2201      	movs	r2, #1
 8005274:	4950      	ldr	r1, [pc, #320]	; (80053b8 <screenPowerSourceControl+0x294>)
 8005276:	483e      	ldr	r0, [pc, #248]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005278:	f010 fbf0 	bl	8015a5c <u8g2_UserInterfaceSelectionList>
 800527c:	4603      	mov	r3, r0
 800527e:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d117      	bne.n	80052b6 <screenPowerSourceControl+0x192>
			u8g2_ClearDisplay(&u8g2);
 8005286:	483a      	ldr	r0, [pc, #232]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005288:	f00e fe05 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800528c:	4838      	ldr	r0, [pc, #224]	; (8005370 <screenPowerSourceControl+0x24c>)
 800528e:	f00e fd1c 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: START MEAS");
 8005292:	4b4a      	ldr	r3, [pc, #296]	; (80053bc <screenPowerSourceControl+0x298>)
 8005294:	2223      	movs	r2, #35	; 0x23
 8005296:	2114      	movs	r1, #20
 8005298:	4835      	ldr	r0, [pc, #212]	; (8005370 <screenPowerSourceControl+0x24c>)
 800529a:	f00f fb61 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800529e:	4834      	ldr	r0, [pc, #208]	; (8005370 <screenPowerSourceControl+0x24c>)
 80052a0:	f00e fd86 	bl	8013db0 <u8g2_SendBuffer>
			settings.powerSourceEnableMode = 1;
 80052a4:	4b46      	ldr	r3, [pc, #280]	; (80053c0 <screenPowerSourceControl+0x29c>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			HAL_Delay(1500);
 80052ac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80052b0:	f003 f8ac 	bl	800840c <HAL_Delay>
 80052b4:	e051      	b.n	800535a <screenPowerSourceControl+0x236>
		}
		else if(temp32 == 2){
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d121      	bne.n	8005300 <screenPowerSourceControl+0x1dc>
			u8g2_ClearDisplay(&u8g2);
 80052bc:	482c      	ldr	r0, [pc, #176]	; (8005370 <screenPowerSourceControl+0x24c>)
 80052be:	f00e fdea 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80052c2:	482b      	ldr	r0, [pc, #172]	; (8005370 <screenPowerSourceControl+0x24c>)
 80052c4:	f00e fd01 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: DURING BOOT");
 80052c8:	4b3e      	ldr	r3, [pc, #248]	; (80053c4 <screenPowerSourceControl+0x2a0>)
 80052ca:	2223      	movs	r2, #35	; 0x23
 80052cc:	2114      	movs	r1, #20
 80052ce:	4828      	ldr	r0, [pc, #160]	; (8005370 <screenPowerSourceControl+0x24c>)
 80052d0:	f00f fb46 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80052d4:	4826      	ldr	r0, [pc, #152]	; (8005370 <screenPowerSourceControl+0x24c>)
 80052d6:	f00e fd6b 	bl	8013db0 <u8g2_SendBuffer>
			settings.isAveraging = 2;
 80052da:	4b39      	ldr	r3, [pc, #228]	; (80053c0 <screenPowerSourceControl+0x29c>)
 80052dc:	2202      	movs	r2, #2
 80052de:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 80052e0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80052e4:	f003 f892 	bl	800840c <HAL_Delay>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 80052e8:	2201      	movs	r2, #1
 80052ea:	2110      	movs	r1, #16
 80052ec:	482e      	ldr	r0, [pc, #184]	; (80053a8 <screenPowerSourceControl+0x284>)
 80052ee:	f004 fb8b 	bl	8009a08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 80052f2:	2201      	movs	r2, #1
 80052f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052f8:	482c      	ldr	r0, [pc, #176]	; (80053ac <screenPowerSourceControl+0x288>)
 80052fa:	f004 fb85 	bl	8009a08 <HAL_GPIO_WritePin>
 80052fe:	e02c      	b.n	800535a <screenPowerSourceControl+0x236>

		}
		else if(temp32 == 3){
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d116      	bne.n	8005334 <screenPowerSourceControl+0x210>
			u8g2_ClearDisplay(&u8g2);
 8005306:	481a      	ldr	r0, [pc, #104]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005308:	f00e fdc5 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800530c:	4818      	ldr	r0, [pc, #96]	; (8005370 <screenPowerSourceControl+0x24c>)
 800530e:	f00e fcdc 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: MANUAL");
 8005312:	4b2d      	ldr	r3, [pc, #180]	; (80053c8 <screenPowerSourceControl+0x2a4>)
 8005314:	2223      	movs	r2, #35	; 0x23
 8005316:	2114      	movs	r1, #20
 8005318:	4815      	ldr	r0, [pc, #84]	; (8005370 <screenPowerSourceControl+0x24c>)
 800531a:	f00f fb21 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800531e:	4814      	ldr	r0, [pc, #80]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005320:	f00e fd46 	bl	8013db0 <u8g2_SendBuffer>
			settings.isAveraging = 0;
 8005324:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <screenPowerSourceControl+0x29c>)
 8005326:	2200      	movs	r2, #0
 8005328:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 800532a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800532e:	f003 f86d 	bl	800840c <HAL_Delay>
 8005332:	e012      	b.n	800535a <screenPowerSourceControl+0x236>
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8005334:	480e      	ldr	r0, [pc, #56]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005336:	f00e fdae 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800533a:	480d      	ldr	r0, [pc, #52]	; (8005370 <screenPowerSourceControl+0x24c>)
 800533c:	f00e fcc5 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: NO CHANGE");
 8005340:	4b22      	ldr	r3, [pc, #136]	; (80053cc <screenPowerSourceControl+0x2a8>)
 8005342:	2223      	movs	r2, #35	; 0x23
 8005344:	2114      	movs	r1, #20
 8005346:	480a      	ldr	r0, [pc, #40]	; (8005370 <screenPowerSourceControl+0x24c>)
 8005348:	f00f fb0a 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800534c:	4808      	ldr	r0, [pc, #32]	; (8005370 <screenPowerSourceControl+0x24c>)
 800534e:	f00e fd2f 	bl	8013db0 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8005352:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005356:	f003 f859 	bl	800840c <HAL_Delay>
			//settings.powerSourceEnableMode = 1;
		}
		return screenPowerSourceControl();
 800535a:	f7ff fee3 	bl	8005124 <screenPowerSourceControl>
 800535e:	e004      	b.n	800536a <screenPowerSourceControl+0x246>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <screenPowerSourceControl+0x258>)
 8005362:	2201      	movs	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8005366:	f000 fa8d 	bl	8005884 <screenInterface>
		break;

	}


}
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000290 	.word	0x20000290
 8005374:	08023234 	.word	0x08023234
 8005378:	08023280 	.word	0x08023280
 800537c:	20000315 	.word	0x20000315
 8005380:	080232a4 	.word	0x080232a4
 8005384:	20000038 	.word	0x20000038
 8005388:	080214f0 	.word	0x080214f0
 800538c:	08023294 	.word	0x08023294
 8005390:	080232c0 	.word	0x080232c0
 8005394:	2000003a 	.word	0x2000003a
 8005398:	080232a8 	.word	0x080232a8
 800539c:	08023090 	.word	0x08023090
 80053a0:	080232c4 	.word	0x080232c4
 80053a4:	080232d8 	.word	0x080232d8
 80053a8:	40020000 	.word	0x40020000
 80053ac:	40020400 	.word	0x40020400
 80053b0:	080232e8 	.word	0x080232e8
 80053b4:	080232fc 	.word	0x080232fc
 80053b8:	08023330 	.word	0x08023330
 80053bc:	0802333c 	.word	0x0802333c
 80053c0:	20000018 	.word	0x20000018
 80053c4:	08023350 	.word	0x08023350
 80053c8:	08023364 	.word	0x08023364
 80053cc:	08023374 	.word	0x08023374

080053d0 <screenRtcSettings>:
 *		[325] *Set Date - Year
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 */

void screenRtcSettings(){
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 80053d6:	48b4      	ldr	r0, [pc, #720]	; (80056a8 <screenRtcSettings+0x2d8>)
 80053d8:	f00e fd5d 	bl	8013e96 <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 80053dc:	48b2      	ldr	r0, [pc, #712]	; (80056a8 <screenRtcSettings+0x2d8>)
 80053de:	f00e fc74 	bl	8013cca <u8g2_ClearBuffer>

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80053e2:	2200      	movs	r2, #0
 80053e4:	49b1      	ldr	r1, [pc, #708]	; (80056ac <screenRtcSettings+0x2dc>)
 80053e6:	48b2      	ldr	r0, [pc, #712]	; (80056b0 <screenRtcSettings+0x2e0>)
 80053e8:	f008 fabe 	bl	800d968 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80053ec:	2200      	movs	r2, #0
 80053ee:	49b1      	ldr	r1, [pc, #708]	; (80056b4 <screenRtcSettings+0x2e4>)
 80053f0:	48af      	ldr	r0, [pc, #700]	; (80056b0 <screenRtcSettings+0x2e0>)
 80053f2:	f008 fbbf 	bl	800db74 <HAL_RTC_GetDate>

	uint32_t temp32 = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "RTC menu", 1,"Set Time\nSet Date - Days\nSet Date - Month\nSet Date - Year\nBack to Main")) {
 80053fa:	4baf      	ldr	r3, [pc, #700]	; (80056b8 <screenRtcSettings+0x2e8>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	49af      	ldr	r1, [pc, #700]	; (80056bc <screenRtcSettings+0x2ec>)
 8005400:	48a9      	ldr	r0, [pc, #676]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005402:	f010 fb2b 	bl	8015a5c <u8g2_UserInterfaceSelectionList>
 8005406:	4603      	mov	r3, r0
 8005408:	2b04      	cmp	r3, #4
 800540a:	f200 8218 	bhi.w	800583e <screenRtcSettings+0x46e>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <screenRtcSettings+0x44>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005429 	.word	0x08005429
 8005418:	08005435 	.word	0x08005435
 800541c:	08005595 	.word	0x08005595
 8005420:	0800564f 	.word	0x0800564f
 8005424:	08005785 	.word	0x08005785
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 8005428:	4ba5      	ldr	r3, [pc, #660]	; (80056c0 <screenRtcSettings+0x2f0>)
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 800542e:	f000 fa29 	bl	8005884 <screenInterface>
 8005432:	e209      	b.n	8005848 <screenRtcSettings+0x478>
	// set time - hours, minutes, seconds
	case 1:
		temp32 = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	607b      	str	r3, [r7, #4]
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - hours", "1 .. 24",&Time.Hours, 1, 24, 5, " h") == 1){
 8005438:	4ba2      	ldr	r3, [pc, #648]	; (80056c4 <screenRtcSettings+0x2f4>)
 800543a:	9303      	str	r3, [sp, #12]
 800543c:	2305      	movs	r3, #5
 800543e:	9302      	str	r3, [sp, #8]
 8005440:	2318      	movs	r3, #24
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	2301      	movs	r3, #1
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4b98      	ldr	r3, [pc, #608]	; (80056ac <screenRtcSettings+0x2dc>)
 800544a:	4a9f      	ldr	r2, [pc, #636]	; (80056c8 <screenRtcSettings+0x2f8>)
 800544c:	499f      	ldr	r1, [pc, #636]	; (80056cc <screenRtcSettings+0x2fc>)
 800544e:	4896      	ldr	r0, [pc, #600]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005450:	f00f fd26 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	f040 8086 	bne.w	8005568 <screenRtcSettings+0x198>
			if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - minutes", "0 .. 59",&Time.Minutes, 0, 59, 5, " min") == 1){
 800545c:	4b9c      	ldr	r3, [pc, #624]	; (80056d0 <screenRtcSettings+0x300>)
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	2305      	movs	r3, #5
 8005462:	9302      	str	r3, [sp, #8]
 8005464:	233b      	movs	r3, #59	; 0x3b
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	2300      	movs	r3, #0
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	4b99      	ldr	r3, [pc, #612]	; (80056d4 <screenRtcSettings+0x304>)
 800546e:	4a9a      	ldr	r2, [pc, #616]	; (80056d8 <screenRtcSettings+0x308>)
 8005470:	499a      	ldr	r1, [pc, #616]	; (80056dc <screenRtcSettings+0x30c>)
 8005472:	488d      	ldr	r0, [pc, #564]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005474:	f00f fd14 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d160      	bne.n	8005540 <screenRtcSettings+0x170>
				if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - seconds", "0 .. 59",&Time.Seconds, 0, 59, 5, " sec") == 1){
 800547e:	4b98      	ldr	r3, [pc, #608]	; (80056e0 <screenRtcSettings+0x310>)
 8005480:	9303      	str	r3, [sp, #12]
 8005482:	2305      	movs	r3, #5
 8005484:	9302      	str	r3, [sp, #8]
 8005486:	233b      	movs	r3, #59	; 0x3b
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	2300      	movs	r3, #0
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	4b95      	ldr	r3, [pc, #596]	; (80056e4 <screenRtcSettings+0x314>)
 8005490:	4a91      	ldr	r2, [pc, #580]	; (80056d8 <screenRtcSettings+0x308>)
 8005492:	4995      	ldr	r1, [pc, #596]	; (80056e8 <screenRtcSettings+0x318>)
 8005494:	4884      	ldr	r0, [pc, #528]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005496:	f00f fd03 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
 800549a:	4603      	mov	r3, r0
 800549c:	2b01      	cmp	r3, #1
 800549e:	d13b      	bne.n	8005518 <screenRtcSettings+0x148>

					Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80054a0:	4b82      	ldr	r3, [pc, #520]	; (80056ac <screenRtcSettings+0x2dc>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	611a      	str	r2, [r3, #16]
					Time.StoreOperation = RTC_STOREOPERATION_RESET;
 80054a6:	4b81      	ldr	r3, [pc, #516]	; (80056ac <screenRtcSettings+0x2dc>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	615a      	str	r2, [r3, #20]
					if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 80054ac:	2200      	movs	r2, #0
 80054ae:	497f      	ldr	r1, [pc, #508]	; (80056ac <screenRtcSettings+0x2dc>)
 80054b0:	487f      	ldr	r0, [pc, #508]	; (80056b0 <screenRtcSettings+0x2e0>)
 80054b2:	f008 f99b 	bl	800d7ec <HAL_RTC_SetTime>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d013      	beq.n	80054e4 <screenRtcSettings+0x114>
					{
						u8g2_ClearDisplay(&u8g2);
 80054bc:	487a      	ldr	r0, [pc, #488]	; (80056a8 <screenRtcSettings+0x2d8>)
 80054be:	f00e fcea 	bl	8013e96 <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 80054c2:	4879      	ldr	r0, [pc, #484]	; (80056a8 <screenRtcSettings+0x2d8>)
 80054c4:	f00e fc01 	bl	8013cca <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: ERROR");
 80054c8:	4b88      	ldr	r3, [pc, #544]	; (80056ec <screenRtcSettings+0x31c>)
 80054ca:	2223      	movs	r2, #35	; 0x23
 80054cc:	2114      	movs	r1, #20
 80054ce:	4876      	ldr	r0, [pc, #472]	; (80056a8 <screenRtcSettings+0x2d8>)
 80054d0:	f00f fa46 	bl	8014960 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 80054d4:	4874      	ldr	r0, [pc, #464]	; (80056a8 <screenRtcSettings+0x2d8>)
 80054d6:	f00e fc6b 	bl	8013db0 <u8g2_SendBuffer>
						HAL_Delay(1500);
 80054da:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80054de:	f002 ff95 	bl	800840c <HAL_Delay>
 80054e2:	e054      	b.n	800558e <screenRtcSettings+0x1be>
					}
					else{
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80054e4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80054e8:	2101      	movs	r1, #1
 80054ea:	4871      	ldr	r0, [pc, #452]	; (80056b0 <screenRtcSettings+0x2e0>)
 80054ec:	f008 fc22 	bl	800dd34 <HAL_RTCEx_BKUPWrite>

						u8g2_ClearDisplay(&u8g2);
 80054f0:	486d      	ldr	r0, [pc, #436]	; (80056a8 <screenRtcSettings+0x2d8>)
 80054f2:	f00e fcd0 	bl	8013e96 <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 80054f6:	486c      	ldr	r0, [pc, #432]	; (80056a8 <screenRtcSettings+0x2d8>)
 80054f8:	f00e fbe7 	bl	8013cca <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: SAVED");
 80054fc:	4b7c      	ldr	r3, [pc, #496]	; (80056f0 <screenRtcSettings+0x320>)
 80054fe:	2223      	movs	r2, #35	; 0x23
 8005500:	2114      	movs	r1, #20
 8005502:	4869      	ldr	r0, [pc, #420]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005504:	f00f fa2c 	bl	8014960 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8005508:	4867      	ldr	r0, [pc, #412]	; (80056a8 <screenRtcSettings+0x2d8>)
 800550a:	f00e fc51 	bl	8013db0 <u8g2_SendBuffer>
						HAL_Delay(1500);
 800550e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005512:	f002 ff7b 	bl	800840c <HAL_Delay>
 8005516:	e03a      	b.n	800558e <screenRtcSettings+0x1be>
					}

				}
				else{
					u8g2_ClearDisplay(&u8g2);
 8005518:	4863      	ldr	r0, [pc, #396]	; (80056a8 <screenRtcSettings+0x2d8>)
 800551a:	f00e fcbc 	bl	8013e96 <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 800551e:	4862      	ldr	r0, [pc, #392]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005520:	f00e fbd3 	bl	8013cca <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 8005524:	4b73      	ldr	r3, [pc, #460]	; (80056f4 <screenRtcSettings+0x324>)
 8005526:	2223      	movs	r2, #35	; 0x23
 8005528:	2114      	movs	r1, #20
 800552a:	485f      	ldr	r0, [pc, #380]	; (80056a8 <screenRtcSettings+0x2d8>)
 800552c:	f00f fa18 	bl	8014960 <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 8005530:	485d      	ldr	r0, [pc, #372]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005532:	f00e fc3d 	bl	8013db0 <u8g2_SendBuffer>
					HAL_Delay(1500);
 8005536:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800553a:	f002 ff67 	bl	800840c <HAL_Delay>
 800553e:	e026      	b.n	800558e <screenRtcSettings+0x1be>

				}

			}
			else{
				u8g2_ClearDisplay(&u8g2);
 8005540:	4859      	ldr	r0, [pc, #356]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005542:	f00e fca8 	bl	8013e96 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005546:	4858      	ldr	r0, [pc, #352]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005548:	f00e fbbf 	bl	8013cca <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 800554c:	4b69      	ldr	r3, [pc, #420]	; (80056f4 <screenRtcSettings+0x324>)
 800554e:	2223      	movs	r2, #35	; 0x23
 8005550:	2114      	movs	r1, #20
 8005552:	4855      	ldr	r0, [pc, #340]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005554:	f00f fa04 	bl	8014960 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005558:	4853      	ldr	r0, [pc, #332]	; (80056a8 <screenRtcSettings+0x2d8>)
 800555a:	f00e fc29 	bl	8013db0 <u8g2_SendBuffer>
				HAL_Delay(1500);
 800555e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005562:	f002 ff53 	bl	800840c <HAL_Delay>
 8005566:	e012      	b.n	800558e <screenRtcSettings+0x1be>
			}
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8005568:	484f      	ldr	r0, [pc, #316]	; (80056a8 <screenRtcSettings+0x2d8>)
 800556a:	f00e fc94 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800556e:	484e      	ldr	r0, [pc, #312]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005570:	f00e fbab 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 8005574:	4b5f      	ldr	r3, [pc, #380]	; (80056f4 <screenRtcSettings+0x324>)
 8005576:	2223      	movs	r2, #35	; 0x23
 8005578:	2114      	movs	r1, #20
 800557a:	484b      	ldr	r0, [pc, #300]	; (80056a8 <screenRtcSettings+0x2d8>)
 800557c:	f00f f9f0 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005580:	4849      	ldr	r0, [pc, #292]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005582:	f00e fc15 	bl	8013db0 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8005586:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800558a:	f002 ff3f 	bl	800840c <HAL_Delay>

		}

		return screenRtcSettings();
 800558e:	f7ff ff1f 	bl	80053d0 <screenRtcSettings>
 8005592:	e159      	b.n	8005848 <screenRtcSettings+0x478>
		break;
	// set date day
	case 2:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - day", "1 .. 31",&Date.Date, 1, 31, 5, "") == 1){
 8005594:	4b58      	ldr	r3, [pc, #352]	; (80056f8 <screenRtcSettings+0x328>)
 8005596:	9303      	str	r3, [sp, #12]
 8005598:	2305      	movs	r3, #5
 800559a:	9302      	str	r3, [sp, #8]
 800559c:	231f      	movs	r3, #31
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	2301      	movs	r3, #1
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	4b55      	ldr	r3, [pc, #340]	; (80056fc <screenRtcSettings+0x32c>)
 80055a6:	4a56      	ldr	r2, [pc, #344]	; (8005700 <screenRtcSettings+0x330>)
 80055a8:	4956      	ldr	r1, [pc, #344]	; (8005704 <screenRtcSettings+0x334>)
 80055aa:	483f      	ldr	r0, [pc, #252]	; (80056a8 <screenRtcSettings+0x2d8>)
 80055ac:	f00f fc78 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d135      	bne.n	8005622 <screenRtcSettings+0x252>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80055b6:	2200      	movs	r2, #0
 80055b8:	493e      	ldr	r1, [pc, #248]	; (80056b4 <screenRtcSettings+0x2e4>)
 80055ba:	483d      	ldr	r0, [pc, #244]	; (80056b0 <screenRtcSettings+0x2e0>)
 80055bc:	f008 fa32 	bl	800da24 <HAL_RTC_SetDate>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d013      	beq.n	80055ee <screenRtcSettings+0x21e>
			{
				u8g2_ClearDisplay(&u8g2);
 80055c6:	4838      	ldr	r0, [pc, #224]	; (80056a8 <screenRtcSettings+0x2d8>)
 80055c8:	f00e fc65 	bl	8013e96 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80055cc:	4836      	ldr	r0, [pc, #216]	; (80056a8 <screenRtcSettings+0x2d8>)
 80055ce:	f00e fb7c 	bl	8013cca <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: ERROR");
 80055d2:	4b4d      	ldr	r3, [pc, #308]	; (8005708 <screenRtcSettings+0x338>)
 80055d4:	2223      	movs	r2, #35	; 0x23
 80055d6:	2114      	movs	r1, #20
 80055d8:	4833      	ldr	r0, [pc, #204]	; (80056a8 <screenRtcSettings+0x2d8>)
 80055da:	f00f f9c1 	bl	8014960 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80055de:	4832      	ldr	r0, [pc, #200]	; (80056a8 <screenRtcSettings+0x2d8>)
 80055e0:	f00e fbe6 	bl	8013db0 <u8g2_SendBuffer>
				HAL_Delay(1500);
 80055e4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80055e8:	f002 ff10 	bl	800840c <HAL_Delay>
 80055ec:	e02c      	b.n	8005648 <screenRtcSettings+0x278>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80055ee:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80055f2:	2101      	movs	r1, #1
 80055f4:	482e      	ldr	r0, [pc, #184]	; (80056b0 <screenRtcSettings+0x2e0>)
 80055f6:	f008 fb9d 	bl	800dd34 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 80055fa:	482b      	ldr	r0, [pc, #172]	; (80056a8 <screenRtcSettings+0x2d8>)
 80055fc:	f00e fc4b 	bl	8013e96 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005600:	4829      	ldr	r0, [pc, #164]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005602:	f00e fb62 	bl	8013cca <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: SAVED");
 8005606:	4b41      	ldr	r3, [pc, #260]	; (800570c <screenRtcSettings+0x33c>)
 8005608:	2223      	movs	r2, #35	; 0x23
 800560a:	2114      	movs	r1, #20
 800560c:	4826      	ldr	r0, [pc, #152]	; (80056a8 <screenRtcSettings+0x2d8>)
 800560e:	f00f f9a7 	bl	8014960 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005612:	4825      	ldr	r0, [pc, #148]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005614:	f00e fbcc 	bl	8013db0 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8005618:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800561c:	f002 fef6 	bl	800840c <HAL_Delay>
 8005620:	e012      	b.n	8005648 <screenRtcSettings+0x278>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8005622:	4821      	ldr	r0, [pc, #132]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005624:	f00e fc37 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005628:	481f      	ldr	r0, [pc, #124]	; (80056a8 <screenRtcSettings+0x2d8>)
 800562a:	f00e fb4e 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "DAY: NOT SAVED");
 800562e:	4b38      	ldr	r3, [pc, #224]	; (8005710 <screenRtcSettings+0x340>)
 8005630:	2223      	movs	r2, #35	; 0x23
 8005632:	2114      	movs	r1, #20
 8005634:	481c      	ldr	r0, [pc, #112]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005636:	f00f f993 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800563a:	481b      	ldr	r0, [pc, #108]	; (80056a8 <screenRtcSettings+0x2d8>)
 800563c:	f00e fbb8 	bl	8013db0 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8005640:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005644:	f002 fee2 	bl	800840c <HAL_Delay>
		}
		return screenRtcSettings();
 8005648:	f7ff fec2 	bl	80053d0 <screenRtcSettings>
 800564c:	e0fc      	b.n	8005848 <screenRtcSettings+0x478>
		break;
	// set date month
	case 3:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - month", "1 .. 12",&Date.Month, 1, 12, 5, "") == 1){
 800564e:	4b2a      	ldr	r3, [pc, #168]	; (80056f8 <screenRtcSettings+0x328>)
 8005650:	9303      	str	r3, [sp, #12]
 8005652:	2305      	movs	r3, #5
 8005654:	9302      	str	r3, [sp, #8]
 8005656:	230c      	movs	r3, #12
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	2301      	movs	r3, #1
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	4b2d      	ldr	r3, [pc, #180]	; (8005714 <screenRtcSettings+0x344>)
 8005660:	4a2d      	ldr	r2, [pc, #180]	; (8005718 <screenRtcSettings+0x348>)
 8005662:	492e      	ldr	r1, [pc, #184]	; (800571c <screenRtcSettings+0x34c>)
 8005664:	4810      	ldr	r0, [pc, #64]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005666:	f00f fc1b 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
 800566a:	4603      	mov	r3, r0
 800566c:	2b01      	cmp	r3, #1
 800566e:	d173      	bne.n	8005758 <screenRtcSettings+0x388>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8005670:	2200      	movs	r2, #0
 8005672:	4910      	ldr	r1, [pc, #64]	; (80056b4 <screenRtcSettings+0x2e4>)
 8005674:	480e      	ldr	r0, [pc, #56]	; (80056b0 <screenRtcSettings+0x2e0>)
 8005676:	f008 f9d5 	bl	800da24 <HAL_RTC_SetDate>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d051      	beq.n	8005724 <screenRtcSettings+0x354>
			{
				u8g2_ClearDisplay(&u8g2);
 8005680:	4809      	ldr	r0, [pc, #36]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005682:	f00e fc08 	bl	8013e96 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005686:	4808      	ldr	r0, [pc, #32]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005688:	f00e fb1f 	bl	8013cca <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: ERROR");
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <screenRtcSettings+0x350>)
 800568e:	2223      	movs	r2, #35	; 0x23
 8005690:	2114      	movs	r1, #20
 8005692:	4805      	ldr	r0, [pc, #20]	; (80056a8 <screenRtcSettings+0x2d8>)
 8005694:	f00f f964 	bl	8014960 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005698:	4803      	ldr	r0, [pc, #12]	; (80056a8 <screenRtcSettings+0x2d8>)
 800569a:	f00e fb89 	bl	8013db0 <u8g2_SendBuffer>
				HAL_Delay(1500);
 800569e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80056a2:	f002 feb3 	bl	800840c <HAL_Delay>
 80056a6:	e06a      	b.n	800577e <screenRtcSettings+0x3ae>
 80056a8:	20000290 	.word	0x20000290
 80056ac:	20008c44 	.word	0x20008c44
 80056b0:	20003440 	.word	0x20003440
 80056b4:	200072a0 	.word	0x200072a0
 80056b8:	08023388 	.word	0x08023388
 80056bc:	080233d0 	.word	0x080233d0
 80056c0:	20000315 	.word	0x20000315
 80056c4:	080233f8 	.word	0x080233f8
 80056c8:	080233dc 	.word	0x080233dc
 80056cc:	080233e4 	.word	0x080233e4
 80056d0:	0802341c 	.word	0x0802341c
 80056d4:	20008c45 	.word	0x20008c45
 80056d8:	080233fc 	.word	0x080233fc
 80056dc:	08023404 	.word	0x08023404
 80056e0:	0802343c 	.word	0x0802343c
 80056e4:	20008c46 	.word	0x20008c46
 80056e8:	08023424 	.word	0x08023424
 80056ec:	08023444 	.word	0x08023444
 80056f0:	08023450 	.word	0x08023450
 80056f4:	0802345c 	.word	0x0802345c
 80056f8:	080214f0 	.word	0x080214f0
 80056fc:	200072a2 	.word	0x200072a2
 8005700:	0802346c 	.word	0x0802346c
 8005704:	08023474 	.word	0x08023474
 8005708:	08023484 	.word	0x08023484
 800570c:	08023490 	.word	0x08023490
 8005710:	0802349c 	.word	0x0802349c
 8005714:	200072a1 	.word	0x200072a1
 8005718:	080234ac 	.word	0x080234ac
 800571c:	080234b4 	.word	0x080234b4
 8005720:	080234c8 	.word	0x080234c8
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8005724:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8005728:	2101      	movs	r1, #1
 800572a:	4849      	ldr	r0, [pc, #292]	; (8005850 <screenRtcSettings+0x480>)
 800572c:	f008 fb02 	bl	800dd34 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 8005730:	4848      	ldr	r0, [pc, #288]	; (8005854 <screenRtcSettings+0x484>)
 8005732:	f00e fbb0 	bl	8013e96 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005736:	4847      	ldr	r0, [pc, #284]	; (8005854 <screenRtcSettings+0x484>)
 8005738:	f00e fac7 	bl	8013cca <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: SAVED");
 800573c:	4b46      	ldr	r3, [pc, #280]	; (8005858 <screenRtcSettings+0x488>)
 800573e:	2223      	movs	r2, #35	; 0x23
 8005740:	2114      	movs	r1, #20
 8005742:	4844      	ldr	r0, [pc, #272]	; (8005854 <screenRtcSettings+0x484>)
 8005744:	f00f f90c 	bl	8014960 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005748:	4842      	ldr	r0, [pc, #264]	; (8005854 <screenRtcSettings+0x484>)
 800574a:	f00e fb31 	bl	8013db0 <u8g2_SendBuffer>
				HAL_Delay(1500);
 800574e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005752:	f002 fe5b 	bl	800840c <HAL_Delay>
 8005756:	e012      	b.n	800577e <screenRtcSettings+0x3ae>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8005758:	483e      	ldr	r0, [pc, #248]	; (8005854 <screenRtcSettings+0x484>)
 800575a:	f00e fb9c 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800575e:	483d      	ldr	r0, [pc, #244]	; (8005854 <screenRtcSettings+0x484>)
 8005760:	f00e fab3 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "MONTH: NOT SAVED");
 8005764:	4b3d      	ldr	r3, [pc, #244]	; (800585c <screenRtcSettings+0x48c>)
 8005766:	2223      	movs	r2, #35	; 0x23
 8005768:	2114      	movs	r1, #20
 800576a:	483a      	ldr	r0, [pc, #232]	; (8005854 <screenRtcSettings+0x484>)
 800576c:	f00f f8f8 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005770:	4838      	ldr	r0, [pc, #224]	; (8005854 <screenRtcSettings+0x484>)
 8005772:	f00e fb1d 	bl	8013db0 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8005776:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800577a:	f002 fe47 	bl	800840c <HAL_Delay>
		}
		return screenRtcSettings();
 800577e:	f7ff fe27 	bl	80053d0 <screenRtcSettings>
 8005782:	e061      	b.n	8005848 <screenRtcSettings+0x478>
		break;
	// set date year
	case 4:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - year", "20XX 0 .. 100",&Date.Year, 0, 100, 5, "") == 1){
 8005784:	4b36      	ldr	r3, [pc, #216]	; (8005860 <screenRtcSettings+0x490>)
 8005786:	9303      	str	r3, [sp, #12]
 8005788:	2305      	movs	r3, #5
 800578a:	9302      	str	r3, [sp, #8]
 800578c:	2364      	movs	r3, #100	; 0x64
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	2300      	movs	r3, #0
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	4b33      	ldr	r3, [pc, #204]	; (8005864 <screenRtcSettings+0x494>)
 8005796:	4a34      	ldr	r2, [pc, #208]	; (8005868 <screenRtcSettings+0x498>)
 8005798:	4934      	ldr	r1, [pc, #208]	; (800586c <screenRtcSettings+0x49c>)
 800579a:	482e      	ldr	r0, [pc, #184]	; (8005854 <screenRtcSettings+0x484>)
 800579c:	f00f fb80 	bl	8014ea0 <u8g2_UserInterfaceInputValue32>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d135      	bne.n	8005812 <screenRtcSettings+0x442>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80057a6:	2200      	movs	r2, #0
 80057a8:	4931      	ldr	r1, [pc, #196]	; (8005870 <screenRtcSettings+0x4a0>)
 80057aa:	4829      	ldr	r0, [pc, #164]	; (8005850 <screenRtcSettings+0x480>)
 80057ac:	f008 f93a 	bl	800da24 <HAL_RTC_SetDate>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <screenRtcSettings+0x40e>
			{
				u8g2_ClearDisplay(&u8g2);
 80057b6:	4827      	ldr	r0, [pc, #156]	; (8005854 <screenRtcSettings+0x484>)
 80057b8:	f00e fb6d 	bl	8013e96 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80057bc:	4825      	ldr	r0, [pc, #148]	; (8005854 <screenRtcSettings+0x484>)
 80057be:	f00e fa84 	bl	8013cca <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: ERROR");
 80057c2:	4b2c      	ldr	r3, [pc, #176]	; (8005874 <screenRtcSettings+0x4a4>)
 80057c4:	2223      	movs	r2, #35	; 0x23
 80057c6:	2114      	movs	r1, #20
 80057c8:	4822      	ldr	r0, [pc, #136]	; (8005854 <screenRtcSettings+0x484>)
 80057ca:	f00f f8c9 	bl	8014960 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80057ce:	4821      	ldr	r0, [pc, #132]	; (8005854 <screenRtcSettings+0x484>)
 80057d0:	f00e faee 	bl	8013db0 <u8g2_SendBuffer>
				HAL_Delay(1500);
 80057d4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80057d8:	f002 fe18 	bl	800840c <HAL_Delay>
 80057dc:	e02c      	b.n	8005838 <screenRtcSettings+0x468>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80057de:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80057e2:	2101      	movs	r1, #1
 80057e4:	481a      	ldr	r0, [pc, #104]	; (8005850 <screenRtcSettings+0x480>)
 80057e6:	f008 faa5 	bl	800dd34 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 80057ea:	481a      	ldr	r0, [pc, #104]	; (8005854 <screenRtcSettings+0x484>)
 80057ec:	f00e fb53 	bl	8013e96 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80057f0:	4818      	ldr	r0, [pc, #96]	; (8005854 <screenRtcSettings+0x484>)
 80057f2:	f00e fa6a 	bl	8013cca <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: SAVED");
 80057f6:	4b20      	ldr	r3, [pc, #128]	; (8005878 <screenRtcSettings+0x4a8>)
 80057f8:	2223      	movs	r2, #35	; 0x23
 80057fa:	2114      	movs	r1, #20
 80057fc:	4815      	ldr	r0, [pc, #84]	; (8005854 <screenRtcSettings+0x484>)
 80057fe:	f00f f8af 	bl	8014960 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005802:	4814      	ldr	r0, [pc, #80]	; (8005854 <screenRtcSettings+0x484>)
 8005804:	f00e fad4 	bl	8013db0 <u8g2_SendBuffer>
				HAL_Delay(1500);
 8005808:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800580c:	f002 fdfe 	bl	800840c <HAL_Delay>
 8005810:	e012      	b.n	8005838 <screenRtcSettings+0x468>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 8005812:	4810      	ldr	r0, [pc, #64]	; (8005854 <screenRtcSettings+0x484>)
 8005814:	f00e fb3f 	bl	8013e96 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005818:	480e      	ldr	r0, [pc, #56]	; (8005854 <screenRtcSettings+0x484>)
 800581a:	f00e fa56 	bl	8013cca <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "YEAR: NOT SAVED");
 800581e:	4b17      	ldr	r3, [pc, #92]	; (800587c <screenRtcSettings+0x4ac>)
 8005820:	2223      	movs	r2, #35	; 0x23
 8005822:	2114      	movs	r1, #20
 8005824:	480b      	ldr	r0, [pc, #44]	; (8005854 <screenRtcSettings+0x484>)
 8005826:	f00f f89b 	bl	8014960 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800582a:	480a      	ldr	r0, [pc, #40]	; (8005854 <screenRtcSettings+0x484>)
 800582c:	f00e fac0 	bl	8013db0 <u8g2_SendBuffer>
			HAL_Delay(1500);
 8005830:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005834:	f002 fdea 	bl	800840c <HAL_Delay>
		}
		return screenRtcSettings();
 8005838:	f7ff fdca 	bl	80053d0 <screenRtcSettings>
 800583c:	e004      	b.n	8005848 <screenRtcSettings+0x478>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <screenRtcSettings+0x4b0>)
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8005844:	f000 f81e 	bl	8005884 <screenInterface>
	}




}
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20003440 	.word	0x20003440
 8005854:	20000290 	.word	0x20000290
 8005858:	080234d8 	.word	0x080234d8
 800585c:	080234e8 	.word	0x080234e8
 8005860:	080214f0 	.word	0x080214f0
 8005864:	200072a3 	.word	0x200072a3
 8005868:	080234fc 	.word	0x080234fc
 800586c:	0802350c 	.word	0x0802350c
 8005870:	200072a0 	.word	0x200072a0
 8005874:	0802351c 	.word	0x0802351c
 8005878:	08023528 	.word	0x08023528
 800587c:	08023534 	.word	0x08023534
 8005880:	20000315 	.word	0x20000315

08005884 <screenInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void screenInterface(){
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af02      	add	r7, sp, #8
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf


	//isDownTriggered = 0;
	//isUpTriggered = 0;
	isLeftTriggered = 0;
 800588a:	4b66      	ldr	r3, [pc, #408]	; (8005a24 <screenInterface+0x1a0>)
 800588c:	2200      	movs	r2, #0
 800588e:	701a      	strb	r2, [r3, #0]
	isRightTriggered = 0;
 8005890:	4b65      	ldr	r3, [pc, #404]	; (8005a28 <screenInterface+0x1a4>)
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
	isEscTriggered = 0;
 8005896:	4b65      	ldr	r3, [pc, #404]	; (8005a2c <screenInterface+0x1a8>)
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]

	if(isUpTriggered){
 800589c:	4b64      	ldr	r3, [pc, #400]	; (8005a30 <screenInterface+0x1ac>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00f      	beq.n	80058c4 <screenInterface+0x40>
		isUpTriggered = 0;
 80058a4:	4b62      	ldr	r3, [pc, #392]	; (8005a30 <screenInterface+0x1ac>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	701a      	strb	r2, [r3, #0]
		rangeMode++;
 80058aa:	4b62      	ldr	r3, [pc, #392]	; (8005a34 <screenInterface+0x1b0>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	4b60      	ldr	r3, [pc, #384]	; (8005a34 <screenInterface+0x1b0>)
 80058b4:	701a      	strb	r2, [r3, #0]

		if(rangeMode > 4)
 80058b6:	4b5f      	ldr	r3, [pc, #380]	; (8005a34 <screenInterface+0x1b0>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d902      	bls.n	80058c4 <screenInterface+0x40>
			rangeMode = 0;
 80058be:	4b5d      	ldr	r3, [pc, #372]	; (8005a34 <screenInterface+0x1b0>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
	}
	if(isDownTriggered){
 80058c4:	4b5c      	ldr	r3, [pc, #368]	; (8005a38 <screenInterface+0x1b4>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <screenInterface+0x5a>
		isDownTriggered = 0;
 80058cc:	4b5a      	ldr	r3, [pc, #360]	; (8005a38 <screenInterface+0x1b4>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
		rangeMode--;
 80058d2:	4b58      	ldr	r3, [pc, #352]	; (8005a34 <screenInterface+0x1b0>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	4b56      	ldr	r3, [pc, #344]	; (8005a34 <screenInterface+0x1b0>)
 80058dc:	701a      	strb	r2, [r3, #0]
		if(rangeMode < 0)
			rangeMode = 4;

	}

	if(isEnterTriggered == 1){
 80058de:	4b57      	ldr	r3, [pc, #348]	; (8005a3c <screenInterface+0x1b8>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	f040 8097 	bne.w	8005a16 <screenInterface+0x192>
		isEnterTriggered = 0;
 80058e8:	4b54      	ldr	r3, [pc, #336]	; (8005a3c <screenInterface+0x1b8>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
		u8g2_ClearBuffer(&u8g2);
 80058ee:	4854      	ldr	r0, [pc, #336]	; (8005a40 <screenInterface+0x1bc>)
 80058f0:	f00e f9eb 	bl	8013cca <u8g2_ClearBuffer>


		switch(u8g2_UserInterfaceSelectionList(&u8g2, "MENU", 1, "Device Settings\nMeasuring settings\nStart measuring\nPower source control\nRTC Settings\nBack to InfoPanel")){
 80058f4:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <screenInterface+0x1c0>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	4953      	ldr	r1, [pc, #332]	; (8005a48 <screenInterface+0x1c4>)
 80058fa:	4851      	ldr	r0, [pc, #324]	; (8005a40 <screenInterface+0x1bc>)
 80058fc:	f010 f8ae 	bl	8015a5c <u8g2_UserInterfaceSelectionList>
 8005900:	4603      	mov	r3, r0
 8005902:	2b05      	cmp	r3, #5
 8005904:	f200 8084 	bhi.w	8005a10 <screenInterface+0x18c>
 8005908:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <screenInterface+0x8c>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005929 	.word	0x08005929
 8005914:	0800592f 	.word	0x0800592f
 8005918:	08005935 	.word	0x08005935
 800591c:	0800593b 	.word	0x0800593b
 8005920:	08005a05 	.word	0x08005a05
 8005924:	08005a0b 	.word	0x08005a0b
			// back to info panel
			case 0:
				screenInfoPanel();
 8005928:	f7ff f858 	bl	80049dc <screenInfoPanel>
				break;
 800592c:	e076      	b.n	8005a1c <screenInterface+0x198>
			// device settings
			case 1:
				screenDeviceSettings();
 800592e:	f7ff f923 	bl	8004b78 <screenDeviceSettings>
				break;
 8005932:	e073      	b.n	8005a1c <screenInterface+0x198>
			// measuring settings
			case 2:
				screenMeasuringSettings();
 8005934:	f7ff facc 	bl	8004ed0 <screenMeasuringSettings>
				break;
 8005938:	e070      	b.n	8005a1c <screenInterface+0x198>
			// Start measuring
			case 3:
				if(u8g2_UserInterfaceMessage(&u8g2, "Start measuring", NULL, NULL, " YES \n NO ") == 1){
 800593a:	4b44      	ldr	r3, [pc, #272]	; (8005a4c <screenInterface+0x1c8>)
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2300      	movs	r3, #0
 8005940:	2200      	movs	r2, #0
 8005942:	4943      	ldr	r1, [pc, #268]	; (8005a50 <screenInterface+0x1cc>)
 8005944:	483e      	ldr	r0, [pc, #248]	; (8005a40 <screenInterface+0x1bc>)
 8005946:	f00f fe55 	bl	80155f4 <u8g2_UserInterfaceMessage>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d149      	bne.n	80059e4 <screenInterface+0x160>
					if (isMeasuring == 0) {
 8005950:	4b40      	ldr	r3, [pc, #256]	; (8005a54 <screenInterface+0x1d0>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d122      	bne.n	80059a0 <screenInterface+0x11c>
						//isLoggingToConsole = 1;
						if (settings.isTriggerActive == 0)
 800595a:	4b3f      	ldr	r3, [pc, #252]	; (8005a58 <screenInterface+0x1d4>)
 800595c:	7b5b      	ldrb	r3, [r3, #13]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <screenInterface+0xe4>
							isMeasuring = 1;
 8005962:	4b3c      	ldr	r3, [pc, #240]	; (8005a54 <screenInterface+0x1d0>)
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 1;
 8005968:	4b3c      	ldr	r3, [pc, #240]	; (8005a5c <screenInterface+0x1d8>)
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 0;
 800596e:	4b3c      	ldr	r3, [pc, #240]	; (8005a60 <screenInterface+0x1dc>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]

						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8005974:	2201      	movs	r2, #1
 8005976:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800597a:	483a      	ldr	r0, [pc, #232]	; (8005a64 <screenInterface+0x1e0>)
 800597c:	f004 f844 	bl	8009a08 <HAL_GPIO_WritePin>

						u8g2_ClearDisplay(&u8g2);
 8005980:	482f      	ldr	r0, [pc, #188]	; (8005a40 <screenInterface+0x1bc>)
 8005982:	f00e fa88 	bl	8013e96 <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8005986:	482e      	ldr	r0, [pc, #184]	; (8005a40 <screenInterface+0x1bc>)
 8005988:	f00e f99f 	bl	8013cca <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STARTED!");
 800598c:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <screenInterface+0x1e4>)
 800598e:	2223      	movs	r2, #35	; 0x23
 8005990:	2114      	movs	r1, #20
 8005992:	482b      	ldr	r0, [pc, #172]	; (8005a40 <screenInterface+0x1bc>)
 8005994:	f00e ffe4 	bl	8014960 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8005998:	4829      	ldr	r0, [pc, #164]	; (8005a40 <screenInterface+0x1bc>)
 800599a:	f00e fa09 	bl	8013db0 <u8g2_SendBuffer>
					u8g2_ClearDisplay(&u8g2);
					u8g2_ClearBuffer(&u8g2);
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
					u8g2_SendBuffer(&u8g2);
				}
				break;
 800599e:	e03d      	b.n	8005a1c <screenInterface+0x198>
						isMeasuring = 0;
 80059a0:	4b2c      	ldr	r3, [pc, #176]	; (8005a54 <screenInterface+0x1d0>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
						isTriggered = 0;
 80059a6:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <screenInterface+0x1e8>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 0;
 80059ac:	4b2b      	ldr	r3, [pc, #172]	; (8005a5c <screenInterface+0x1d8>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 1;
 80059b2:	4b2b      	ldr	r3, [pc, #172]	; (8005a60 <screenInterface+0x1dc>)
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059be:	4829      	ldr	r0, [pc, #164]	; (8005a64 <screenInterface+0x1e0>)
 80059c0:	f004 f822 	bl	8009a08 <HAL_GPIO_WritePin>
						u8g2_ClearDisplay(&u8g2);
 80059c4:	481e      	ldr	r0, [pc, #120]	; (8005a40 <screenInterface+0x1bc>)
 80059c6:	f00e fa66 	bl	8013e96 <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 80059ca:	481d      	ldr	r0, [pc, #116]	; (8005a40 <screenInterface+0x1bc>)
 80059cc:	f00e f97d 	bl	8013cca <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STOPPED!");
 80059d0:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <screenInterface+0x1ec>)
 80059d2:	2223      	movs	r2, #35	; 0x23
 80059d4:	2114      	movs	r1, #20
 80059d6:	481a      	ldr	r0, [pc, #104]	; (8005a40 <screenInterface+0x1bc>)
 80059d8:	f00e ffc2 	bl	8014960 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 80059dc:	4818      	ldr	r0, [pc, #96]	; (8005a40 <screenInterface+0x1bc>)
 80059de:	f00e f9e7 	bl	8013db0 <u8g2_SendBuffer>
				break;
 80059e2:	e01b      	b.n	8005a1c <screenInterface+0x198>
					u8g2_ClearDisplay(&u8g2);
 80059e4:	4816      	ldr	r0, [pc, #88]	; (8005a40 <screenInterface+0x1bc>)
 80059e6:	f00e fa56 	bl	8013e96 <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 80059ea:	4815      	ldr	r0, [pc, #84]	; (8005a40 <screenInterface+0x1bc>)
 80059ec:	f00e f96d 	bl	8013cca <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
 80059f0:	4b20      	ldr	r3, [pc, #128]	; (8005a74 <screenInterface+0x1f0>)
 80059f2:	2223      	movs	r2, #35	; 0x23
 80059f4:	210f      	movs	r1, #15
 80059f6:	4812      	ldr	r0, [pc, #72]	; (8005a40 <screenInterface+0x1bc>)
 80059f8:	f00e ffb2 	bl	8014960 <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 80059fc:	4810      	ldr	r0, [pc, #64]	; (8005a40 <screenInterface+0x1bc>)
 80059fe:	f00e f9d7 	bl	8013db0 <u8g2_SendBuffer>
				break;
 8005a02:	e00b      	b.n	8005a1c <screenInterface+0x198>
			// Power source control
			case 4:
				screenPowerSourceControl();
 8005a04:	f7ff fb8e 	bl	8005124 <screenPowerSourceControl>
				break;
 8005a08:	e008      	b.n	8005a1c <screenInterface+0x198>
			// rtc settings
			case 5:
				screenRtcSettings();
 8005a0a:	f7ff fce1 	bl	80053d0 <screenRtcSettings>
				break;
 8005a0e:	e005      	b.n	8005a1c <screenInterface+0x198>
			default:
				screenInfoPanel();
 8005a10:	f7fe ffe4 	bl	80049dc <screenInfoPanel>
				break;
 8005a14:	e002      	b.n	8005a1c <screenInterface+0x198>


	}

	else{
		screenInfoPanel();
 8005a16:	f7fe ffe1 	bl	80049dc <screenInfoPanel>
	}




}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000319 	.word	0x20000319
 8005a28:	2000031a 	.word	0x2000031a
 8005a2c:	20000316 	.word	0x20000316
 8005a30:	20000317 	.word	0x20000317
 8005a34:	2000000c 	.word	0x2000000c
 8005a38:	20000318 	.word	0x20000318
 8005a3c:	20000315 	.word	0x20000315
 8005a40:	20000290 	.word	0x20000290
 8005a44:	08023544 	.word	0x08023544
 8005a48:	08022ea0 	.word	0x08022ea0
 8005a4c:	08023090 	.word	0x08023090
 8005a50:	080235ac 	.word	0x080235ac
 8005a54:	20000322 	.word	0x20000322
 8005a58:	20000018 	.word	0x20000018
 8005a5c:	20000320 	.word	0x20000320
 8005a60:	20000321 	.word	0x20000321
 8005a64:	40021000 	.word	0x40021000
 8005a68:	080235bc 	.word	0x080235bc
 8005a6c:	20000314 	.word	0x20000314
 8005a70:	080235d0 	.word	0x080235d0
 8005a74:	080235e4 	.word	0x080235e4

08005a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a78:	b590      	push	{r4, r7, lr}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8005a7e:	f7fb fe89 	bl	8001794 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8005a82:	f7fb fead 	bl	80017e0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a86:	f002 fc55 	bl	8008334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a8a:	f000 fbbb 	bl	8006204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a8e:	f000 ffdf 	bl	8006a50 <MX_GPIO_Init>
  MX_DMA_Init();
 8005a92:	f000 ff83 	bl	800699c <MX_DMA_Init>
  MX_ETH_Init();
 8005a96:	f000 fc6d 	bl	8006374 <MX_ETH_Init>
  MX_I2C4_Init();
 8005a9a:	f000 fceb 	bl	8006474 <MX_I2C4_Init>
  MX_RTC_Init();
 8005a9e:	f000 fd29 	bl	80064f4 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8005aa2:	f000 fd83 	bl	80065ac <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8005aa6:	f000 fda1 	bl	80065ec <MX_SPI1_Init>
  MX_SPI4_Init();
 8005aaa:	f000 fddd 	bl	8006668 <MX_SPI4_Init>
  MX_UART7_Init();
 8005aae:	f000 ff11 	bl	80068d4 <MX_UART7_Init>
  MX_FATFS_Init();
 8005ab2:	f010 fff3 	bl	8016a9c <MX_FATFS_Init>
  MX_TIM4_Init();
 8005ab6:	f000 fe15 	bl	80066e4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8005aba:	f000 fe61 	bl	8006780 <MX_TIM5_Init>
  MX_TIM7_Init();
 8005abe:	f000 fead 	bl	800681c <MX_TIM7_Init>
  MX_TIM14_Init();
 8005ac2:	f000 fee1 	bl	8006888 <MX_TIM14_Init>
  MX_USB_HOST_Init();
 8005ac6:	f018 f8cf 	bl	801dc68 <MX_USB_HOST_Init>
  MX_I2C1_Init();
 8005aca:	f000 fc93 	bl	80063f4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8005ace:	f000 ff33 	bl	8006938 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */


  // init 32 bit TIM5 in normal mode for 1 us delay
  HAL_TIM_Base_Start(&htim5);
 8005ad2:	48c4      	ldr	r0, [pc, #784]	; (8005de4 <main+0x36c>)
 8005ad4:	f00b f8a2 	bl	8010c1c <HAL_TIM_Base_Start>
  // init 16 bit TIM4 in normal mode for 1 us delay
  HAL_TIM_Base_Start(&htim4);
 8005ad8:	48c3      	ldr	r0, [pc, #780]	; (8005de8 <main+0x370>)
 8005ada:	f00b f89f 	bl	8010c1c <HAL_TIM_Base_Start>

  // init 16 bit TIM14 for timeout interrupt
  HAL_TIM_Base_Start(&htim14);
 8005ade:	48c3      	ldr	r0, [pc, #780]	; (8005dec <main+0x374>)
 8005ae0:	f00b f89c 	bl	8010c1c <HAL_TIM_Base_Start>

  // unit indication LED
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005aea:	48c1      	ldr	r0, [pc, #772]	; (8005df0 <main+0x378>)
 8005aec:	f003 ff8c 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8005af0:	2200      	movs	r2, #0
 8005af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005af6:	48be      	ldr	r0, [pc, #760]	; (8005df0 <main+0x378>)
 8005af8:	f003 ff86 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8005afc:	2200      	movs	r2, #0
 8005afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b02:	48bc      	ldr	r0, [pc, #752]	; (8005df4 <main+0x37c>)
 8005b04:	f003 ff80 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005b08:	20fa      	movs	r0, #250	; 0xfa
 8005b0a:	f002 fc7f 	bl	800840c <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b14:	48b6      	ldr	r0, [pc, #728]	; (8005df0 <main+0x378>)
 8005b16:	f003 ff77 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b20:	48b3      	ldr	r0, [pc, #716]	; (8005df0 <main+0x378>)
 8005b22:	f003 ff71 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8005b26:	2201      	movs	r2, #1
 8005b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b2c:	48b1      	ldr	r0, [pc, #708]	; (8005df4 <main+0x37c>)
 8005b2e:	f003 ff6b 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005b32:	20fa      	movs	r0, #250	; 0xfa
 8005b34:	f002 fc6a 	bl	800840c <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b3e:	48ac      	ldr	r0, [pc, #688]	; (8005df0 <main+0x378>)
 8005b40:	f003 ff62 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8005b44:	2200      	movs	r2, #0
 8005b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b4a:	48a9      	ldr	r0, [pc, #676]	; (8005df0 <main+0x378>)
 8005b4c:	f003 ff5c 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8005b50:	2200      	movs	r2, #0
 8005b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b56:	48a7      	ldr	r0, [pc, #668]	; (8005df4 <main+0x37c>)
 8005b58:	f003 ff56 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005b5c:	20fa      	movs	r0, #250	; 0xfa
 8005b5e:	f002 fc55 	bl	800840c <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8005b62:	2201      	movs	r2, #1
 8005b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b68:	48a1      	ldr	r0, [pc, #644]	; (8005df0 <main+0x378>)
 8005b6a:	f003 ff4d 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b74:	489e      	ldr	r0, [pc, #632]	; (8005df0 <main+0x378>)
 8005b76:	f003 ff47 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b80:	489c      	ldr	r0, [pc, #624]	; (8005df4 <main+0x37c>)
 8005b82:	f003 ff41 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005b86:	20fa      	movs	r0, #250	; 0xfa
 8005b88:	f002 fc40 	bl	800840c <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b92:	4897      	ldr	r0, [pc, #604]	; (8005df0 <main+0x378>)
 8005b94:	f003 ff38 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b9e:	4894      	ldr	r0, [pc, #592]	; (8005df0 <main+0x378>)
 8005ba0:	f003 ff32 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005baa:	4892      	ldr	r0, [pc, #584]	; (8005df4 <main+0x37c>)
 8005bac:	f003 ff2c 	bl	8009a08 <HAL_GPIO_WritePin>

  // default setting for ranges
  // mA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_SET);
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	2110      	movs	r1, #16
 8005bb4:	488e      	ldr	r0, [pc, #568]	; (8005df0 <main+0x378>)
 8005bb6:	f003 ff27 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_RESET);
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bc0:	488c      	ldr	r0, [pc, #560]	; (8005df4 <main+0x37c>)
 8005bc2:	f003 ff21 	bl	8009a08 <HAL_GPIO_WritePin>

  // uA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	2120      	movs	r1, #32
 8005bca:	4889      	ldr	r0, [pc, #548]	; (8005df0 <main+0x378>)
 8005bcc:	f003 ff1c 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	4886      	ldr	r0, [pc, #536]	; (8005df0 <main+0x378>)
 8005bd6:	f003 ff17 	bl	8009a08 <HAL_GPIO_WritePin>

  // nA range ON
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2108      	movs	r1, #8
 8005bde:	4884      	ldr	r0, [pc, #528]	; (8005df0 <main+0x378>)
 8005be0:	f003 ff12 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_SET);
 8005be4:	2201      	movs	r2, #1
 8005be6:	2102      	movs	r1, #2
 8005be8:	4881      	ldr	r0, [pc, #516]	; (8005df0 <main+0x378>)
 8005bea:	f003 ff0d 	bl	8009a08 <HAL_GPIO_WritePin>

  // GND range ON
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_GND_PORT, RANGE_SELECT_PIN_AS_GND, GPIO_PIN_RESET);
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2104      	movs	r1, #4
 8005bf2:	487f      	ldr	r0, [pc, #508]	; (8005df0 <main+0x378>)
 8005bf4:	f003 ff08 	bl	8009a08 <HAL_GPIO_WritePin>


  // set adc conv pin to default/low level
  HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2120      	movs	r1, #32
 8005bfc:	487d      	ldr	r0, [pc, #500]	; (8005df4 <main+0x37c>)
 8005bfe:	f003 ff03 	bl	8009a08 <HAL_GPIO_WritePin>

  /***************** set mA range on -- TEST only ********************************/
  currentRange = 2;
 8005c02:	4b7d      	ldr	r3, [pc, #500]	; (8005df8 <main+0x380>)
 8005c04:	2202      	movs	r2, #2
 8005c06:	701a      	strb	r2, [r3, #0]

  // mA range ON
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_RESET);
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2110      	movs	r1, #16
 8005c0c:	4878      	ldr	r0, [pc, #480]	; (8005df0 <main+0x378>)
 8005c0e:	f003 fefb 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_SET);
 8005c12:	2201      	movs	r2, #1
 8005c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c18:	4876      	ldr	r0, [pc, #472]	; (8005df4 <main+0x37c>)
 8005c1a:	f003 fef5 	bl	8009a08 <HAL_GPIO_WritePin>

  // uA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 8005c1e:	2201      	movs	r2, #1
 8005c20:	2120      	movs	r1, #32
 8005c22:	4873      	ldr	r0, [pc, #460]	; (8005df0 <main+0x378>)
 8005c24:	f003 fef0 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4870      	ldr	r0, [pc, #448]	; (8005df0 <main+0x378>)
 8005c2e:	f003 feeb 	bl	8009a08 <HAL_GPIO_WritePin>

  // nA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_SET);
 8005c32:	2201      	movs	r2, #1
 8005c34:	2108      	movs	r1, #8
 8005c36:	486e      	ldr	r0, [pc, #440]	; (8005df0 <main+0x378>)
 8005c38:	f003 fee6 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_RESET);
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2102      	movs	r1, #2
 8005c40:	486b      	ldr	r0, [pc, #428]	; (8005df0 <main+0x378>)
 8005c42:	f003 fee1 	bl	8009a08 <HAL_GPIO_WritePin>


  // USB OTG Power Enable
  HAL_GPIO_WritePin(USB_OTG_POWER_EN_PORT, USB_OTG_POWER_EN_PIN, GPIO_PIN_SET);
 8005c46:	2201      	movs	r2, #1
 8005c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c4c:	486b      	ldr	r0, [pc, #428]	; (8005dfc <main+0x384>)
 8005c4e:	f003 fedb 	bl	8009a08 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005c52:	2001      	movs	r0, #1
 8005c54:	f002 fbda 	bl	800840c <HAL_Delay>
  //u8g2_SetPowerSave(&u8g2, 0);
  // SCREEN INIT

  //u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c
  //u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c // 180 degree rotation
  u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
 8005c58:	4b69      	ldr	r3, [pc, #420]	; (8005e00 <main+0x388>)
 8005c5a:	4a6a      	ldr	r2, [pc, #424]	; (8005e04 <main+0x38c>)
 8005c5c:	496a      	ldr	r1, [pc, #424]	; (8005e08 <main+0x390>)
 8005c5e:	486b      	ldr	r0, [pc, #428]	; (8005e0c <main+0x394>)
 8005c60:	f00e f93e 	bl	8013ee0 <u8g2_Setup_st7528_i2c_nhd_c160100_f>
  u8g2_InitDisplay(&u8g2);
 8005c64:	4869      	ldr	r0, [pc, #420]	; (8005e0c <main+0x394>)
 8005c66:	f010 fd51 	bl	801670c <u8x8_InitDisplay>

  u8g2_SetPowerSave(&u8g2, 0);
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4867      	ldr	r0, [pc, #412]	; (8005e0c <main+0x394>)
 8005c6e:	f010 fd5c 	bl	801672a <u8x8_SetPowerSave>
  u8g2_SetFlipMode(&u8g2, 1);
 8005c72:	2101      	movs	r1, #1
 8005c74:	4865      	ldr	r0, [pc, #404]	; (8005e0c <main+0x394>)
 8005c76:	f010 fd69 	bl	801674c <u8x8_SetFlipMode>
  u8g2_ClearDisplay(&u8g2);
 8005c7a:	4864      	ldr	r0, [pc, #400]	; (8005e0c <main+0x394>)
 8005c7c:	f00e f90b 	bl	8013e96 <u8g2_ClearDisplay>
  //u8g2_Clear(&u8g2);
  u8g2_SetFontMode(&u8g2, 0);
 8005c80:	2100      	movs	r1, #0
 8005c82:	4862      	ldr	r0, [pc, #392]	; (8005e0c <main+0x394>)
 8005c84:	f00e fdae 	bl	80147e4 <u8g2_SetFontMode>
  u8g2_SetContrast(&u8g2, 80);
 8005c88:	2150      	movs	r1, #80	; 0x50
 8005c8a:	4860      	ldr	r0, [pc, #384]	; (8005e0c <main+0x394>)
 8005c8c:	f010 fd6f 	bl	801676e <u8x8_SetContrast>
  u8g2_SetFontDirection(&u8g2, 0);
 8005c90:	2100      	movs	r1, #0
 8005c92:	485e      	ldr	r0, [pc, #376]	; (8005e0c <main+0x394>)
 8005c94:	f00e ff9e 	bl	8014bd4 <u8g2_SetFontDirection>
  u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf		//u8g2_font_6x10_tf
 8005c98:	495d      	ldr	r1, [pc, #372]	; (8005e10 <main+0x398>)
 8005c9a:	485c      	ldr	r0, [pc, #368]	; (8005e0c <main+0x394>)
 8005c9c:	f00e ff1c 	bl	8014ad8 <u8g2_SetFont>
  u8g2_ClearBuffer(&u8g2);
 8005ca0:	485a      	ldr	r0, [pc, #360]	; (8005e0c <main+0x394>)
 8005ca2:	f00e f812 	bl	8013cca <u8g2_ClearBuffer>
  //ST7528_Contrast(ST7528_RREG_72, ST7528_BIAS_11, 10);
  //ST7528_Clear();
  //ST7528_SetYDir(SCR_INVERT_OFF);
  //u8g2_DrawStr(&u8g2, 10, 10, "Hello World!");
  //u8g2_DrawLine(&u8g2, 5, 5, 155, 15);
  u8g2_SendBuffer(&u8g2);
 8005ca6:	4859      	ldr	r0, [pc, #356]	; (8005e0c <main+0x394>)
 8005ca8:	f00e f882 	bl	8013db0 <u8g2_SendBuffer>
  u8g2_UpdateDisplay(&u8g2);
 8005cac:	4857      	ldr	r0, [pc, #348]	; (8005e0c <main+0x394>)
 8005cae:	f00e f8e7 	bl	8013e80 <u8g2_UpdateDisplay>
  HAL_Delay(100);
 8005cb2:	2064      	movs	r0, #100	; 0x64
 8005cb4:	f002 fbaa 	bl	800840c <HAL_Delay>
  	LCD_Circle(30, 44, 4, 15);
  	ST7528_Flush();
  	HAL_Delay(500);
*/

  u8g2_DrawStr(&u8g2, 20, 20, "Current logger");
 8005cb8:	4b56      	ldr	r3, [pc, #344]	; (8005e14 <main+0x39c>)
 8005cba:	2214      	movs	r2, #20
 8005cbc:	2114      	movs	r1, #20
 8005cbe:	4853      	ldr	r0, [pc, #332]	; (8005e0c <main+0x394>)
 8005cc0:	f00e fe4e 	bl	8014960 <u8g2_DrawStr>
  u8g2_DrawStr(&u8g2, 20, 40, "Firmware version 1.0.0");
 8005cc4:	4b54      	ldr	r3, [pc, #336]	; (8005e18 <main+0x3a0>)
 8005cc6:	2228      	movs	r2, #40	; 0x28
 8005cc8:	2114      	movs	r1, #20
 8005cca:	4850      	ldr	r0, [pc, #320]	; (8005e0c <main+0x394>)
 8005ccc:	f00e fe48 	bl	8014960 <u8g2_DrawStr>
  u8g2_SendBuffer(&u8g2);
 8005cd0:	484e      	ldr	r0, [pc, #312]	; (8005e0c <main+0x394>)
 8005cd2:	f00e f86d 	bl	8013db0 <u8g2_SendBuffer>
  u8g2_UpdateDisplay(&u8g2);
 8005cd6:	484d      	ldr	r0, [pc, #308]	; (8005e0c <main+0x394>)
 8005cd8:	f00e f8d2 	bl	8013e80 <u8g2_UpdateDisplay>


	HAL_Delay(1000);
 8005cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ce0:	f002 fb94 	bl	800840c <HAL_Delay>

  // init uart ring buffers
  UARTRXInit();
 8005ce4:	f002 fa50 	bl	8008188 <UARTRXInit>
  UARTTXInit();
 8005ce8:	f002 f956 	bl	8007f98 <UARTTXInit>
  writeEEPROM_AT24();
  HAL_Delay(5);
  send_uart3("EEEPROM - DATA WRITE - DONE\n");
  microDelay(50);
  */
  send_uart3("EEPROM - DATA READ - START\n");
 8005cec:	484b      	ldr	r0, [pc, #300]	; (8005e1c <main+0x3a4>)
 8005cee:	f7fb ff0f 	bl	8001b10 <send_uart3>
  microDelay(50);
 8005cf2:	2032      	movs	r0, #50	; 0x32
 8005cf4:	f7fb ff3a 	bl	8001b6c <microDelay>

  readEEPROM_AT24();
 8005cf8:	f7fc f97e 	bl	8001ff8 <readEEPROM_AT24>
  printSettingsValues();
 8005cfc:	f7fd fad0 	bl	80032a0 <printSettingsValues>

  send_uart3("EEPROM - DATA READ - DONE\n");
 8005d00:	4847      	ldr	r0, [pc, #284]	; (8005e20 <main+0x3a8>)
 8005d02:	f7fb ff05 	bl	8001b10 <send_uart3>
  microDelay(50);
 8005d06:	2032      	movs	r0, #50	; 0x32
 8005d08:	f7fb ff30 	bl	8001b6c <microDelay>


  // config ADC
  // reset pin
  HAL_GPIO_WritePin(ADC_RESET_PORT, ADC_RESET_PIN, GPIO_PIN_SET);
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	2140      	movs	r1, #64	; 0x40
 8005d10:	4838      	ldr	r0, [pc, #224]	; (8005df4 <main+0x37c>)
 8005d12:	f003 fe79 	bl	8009a08 <HAL_GPIO_WritePin>

  adc_config();
 8005d16:	f7fc fe51 	bl	80029bc <adc_config>

  microDelay(500);
 8005d1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d1e:	f7fb ff25 	bl	8001b6c <microDelay>

  // measure adc offset
  //adc_compensateOffset();
  microDelay(50);
 8005d22:	2032      	movs	r0, #50	; 0x32
 8005d24:	f7fb ff22 	bl	8001b6c <microDelay>
  //u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
  //u8g2_DrawStr(&u8g2, 0, 15, "Hello World!");
  //u8g2_DrawCircle(&u8g2, 64, 40, 10, U8G2_DRAW_ALL);

  // getting time and date for formatting as name of new logged file
  HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 8005d28:	2200      	movs	r2, #0
 8005d2a:	493e      	ldr	r1, [pc, #248]	; (8005e24 <main+0x3ac>)
 8005d2c:	483e      	ldr	r0, [pc, #248]	; (8005e28 <main+0x3b0>)
 8005d2e:	f007 fe1b 	bl	800d968 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 8005d32:	2200      	movs	r2, #0
 8005d34:	493d      	ldr	r1, [pc, #244]	; (8005e2c <main+0x3b4>)
 8005d36:	483c      	ldr	r0, [pc, #240]	; (8005e28 <main+0x3b0>)
 8005d38:	f007 ff1c 	bl	800db74 <HAL_RTC_GetDate>
  // file name format "20YYMMDD_HHMM" example "20200120_1022" = 20.1.2020 10:22
  sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year, Date.Month, Date.Date, Time.Hours,Time.Minutes);
 8005d3c:	4b3b      	ldr	r3, [pc, #236]	; (8005e2c <main+0x3b4>)
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8005d44:	4b39      	ldr	r3, [pc, #228]	; (8005e2c <main+0x3b4>)
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	461c      	mov	r4, r3
 8005d4a:	4b38      	ldr	r3, [pc, #224]	; (8005e2c <main+0x3b4>)
 8005d4c:	789b      	ldrb	r3, [r3, #2]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4b34      	ldr	r3, [pc, #208]	; (8005e24 <main+0x3ac>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	4b33      	ldr	r3, [pc, #204]	; (8005e24 <main+0x3ac>)
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	9302      	str	r3, [sp, #8]
 8005d5c:	9001      	str	r0, [sp, #4]
 8005d5e:	9100      	str	r1, [sp, #0]
 8005d60:	4623      	mov	r3, r4
 8005d62:	4933      	ldr	r1, [pc, #204]	; (8005e30 <main+0x3b8>)
 8005d64:	4833      	ldr	r0, [pc, #204]	; (8005e34 <main+0x3bc>)
 8005d66:	f019 f801 	bl	801ed6c <siprintf>

  send_uart3(uartBufferTx);
 8005d6a:	4832      	ldr	r0, [pc, #200]	; (8005e34 <main+0x3bc>)
 8005d6c:	f7fb fed0 	bl	8001b10 <send_uart3>
  microDelay(50);
 8005d70:	2032      	movs	r0, #50	; 0x32
 8005d72:	f7fb fefb 	bl	8001b6c <microDelay>
  //HAL_RTC_SetTime(&hrtc, &Time, FORMAT_BCD);
  //HAL_RTC_SetDate(&hrtc, &Date, FORMAT_BCD);


  send_uart3("Power source - Init - START\n");
 8005d76:	4830      	ldr	r0, [pc, #192]	; (8005e38 <main+0x3c0>)
 8005d78:	f7fb feca 	bl	8001b10 <send_uart3>
  microDelay(50);
 8005d7c:	2032      	movs	r0, #50	; 0x32
 8005d7e:	f7fb fef5 	bl	8001b6c <microDelay>

  setPotenciomenters();
 8005d82:	f7fc fa89 	bl	8002298 <setPotenciomenters>

  readPotenciometers();
 8005d86:	f7fc fb71 	bl	800246c <readPotenciometers>

  if( (settings.powerSourceEnableMode == 0 & settings.powerSourceEnable == 1 ) | settings.powerSourceEnableMode == 2 ){
 8005d8a:	4b2c      	ldr	r3, [pc, #176]	; (8005e3c <main+0x3c4>)
 8005d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf0c      	ite	eq
 8005d94:	2301      	moveq	r3, #1
 8005d96:	2300      	movne	r3, #0
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	4b28      	ldr	r3, [pc, #160]	; (8005e3c <main+0x3c4>)
 8005d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	bf0c      	ite	eq
 8005da4:	2301      	moveq	r3, #1
 8005da6:	2300      	movne	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	4013      	ands	r3, r2
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	461a      	mov	r2, r3
 8005db0:	4b22      	ldr	r3, [pc, #136]	; (8005e3c <main+0x3c4>)
 8005db2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d03e      	beq.n	8005e44 <main+0x3cc>
	  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	2110      	movs	r1, #16
 8005dca:	480c      	ldr	r0, [pc, #48]	; (8005dfc <main+0x384>)
 8005dcc:	f003 fe1c 	bl	8009a08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dd6:	4807      	ldr	r0, [pc, #28]	; (8005df4 <main+0x37c>)
 8005dd8:	f003 fe16 	bl	8009a08 <HAL_GPIO_WritePin>
	  send_uart3("Power Source: ENABLED\n");
 8005ddc:	4818      	ldr	r0, [pc, #96]	; (8005e40 <main+0x3c8>)
 8005dde:	f7fb fe97 	bl	8001b10 <send_uart3>
 8005de2:	e03d      	b.n	8005e60 <main+0x3e8>
 8005de4:	20011f98 	.word	0x20011f98
 8005de8:	20011f58 	.word	0x20011f58
 8005dec:	2000dd18 	.word	0x2000dd18
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40020400 	.word	0x40020400
 8005df8:	20000344 	.word	0x20000344
 8005dfc:	40020000 	.word	0x40020000
 8005e00:	080045f5 	.word	0x080045f5
 8005e04:	08004785 	.word	0x08004785
 8005e08:	08023df4 	.word	0x08023df4
 8005e0c:	20000290 	.word	0x20000290
 8005e10:	0802382c 	.word	0x0802382c
 8005e14:	08023600 	.word	0x08023600
 8005e18:	08023610 	.word	0x08023610
 8005e1c:	08023628 	.word	0x08023628
 8005e20:	08023644 	.word	0x08023644
 8005e24:	20008c44 	.word	0x20008c44
 8005e28:	20003440 	.word	0x20003440
 8005e2c:	200072a0 	.word	0x200072a0
 8005e30:	08023660 	.word	0x08023660
 8005e34:	20011e6c 	.word	0x20011e6c
 8005e38:	0802367c 	.word	0x0802367c
 8005e3c:	20000018 	.word	0x20000018
 8005e40:	0802369c 	.word	0x0802369c
  }
  else{
	  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8005e44:	2200      	movs	r2, #0
 8005e46:	2110      	movs	r1, #16
 8005e48:	48a7      	ldr	r0, [pc, #668]	; (80060e8 <main+0x670>)
 8005e4a:	f003 fddd 	bl	8009a08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e54:	48a5      	ldr	r0, [pc, #660]	; (80060ec <main+0x674>)
 8005e56:	f003 fdd7 	bl	8009a08 <HAL_GPIO_WritePin>
	  send_uart3("Power Source: DISABLED\n");
 8005e5a:	48a5      	ldr	r0, [pc, #660]	; (80060f0 <main+0x678>)
 8005e5c:	f7fb fe58 	bl	8001b10 <send_uart3>
	  HAL_Delay(1000);

  }
*/

  send_uart3("Power source - Init - DONE\n");
 8005e60:	48a4      	ldr	r0, [pc, #656]	; (80060f4 <main+0x67c>)
 8005e62:	f7fb fe55 	bl	8001b10 <send_uart3>
  microDelay(50);
 8005e66:	2032      	movs	r0, #50	; 0x32
 8005e68:	f7fb fe80 	bl	8001b6c <microDelay>

  //sd_card_test();

  send_uart3("Memory devices - Init - START\n");
 8005e6c:	48a2      	ldr	r0, [pc, #648]	; (80060f8 <main+0x680>)
 8005e6e:	f7fb fe4f 	bl	8001b10 <send_uart3>


  Mount_SD("/");
 8005e72:	48a2      	ldr	r0, [pc, #648]	; (80060fc <main+0x684>)
 8005e74:	f7fa fdba 	bl	80009ec <Mount_SD>
  Format_SD();
 8005e78:	f7fa fdfe 	bl	8000a78 <Format_SD>
  Create_File("FILE1.TXT");
 8005e7c:	48a0      	ldr	r0, [pc, #640]	; (8006100 <main+0x688>)
 8005e7e:	f7fa ff13 	bl	8000ca8 <Create_File>
  Write_File("FILE1.TXT", "test123");
 8005e82:	49a0      	ldr	r1, [pc, #640]	; (8006104 <main+0x68c>)
 8005e84:	489e      	ldr	r0, [pc, #632]	; (8006100 <main+0x688>)
 8005e86:	f7fa fe5d 	bl	8000b44 <Write_File>
  Create_File("FILE2.TXT");
 8005e8a:	489f      	ldr	r0, [pc, #636]	; (8006108 <main+0x690>)
 8005e8c:	f7fa ff0c 	bl	8000ca8 <Create_File>
  Unmount_SD("/");
 8005e90:	489a      	ldr	r0, [pc, #616]	; (80060fc <main+0x684>)
 8005e92:	f7fa fdcf 	bl	8000a34 <Unmount_SD>
  send_uart3("FS DONE\n");
 8005e96:	489d      	ldr	r0, [pc, #628]	; (800610c <main+0x694>)
 8005e98:	f7fb fe3a 	bl	8001b10 <send_uart3>
  */

  // SD Card


  send_uart3("Memory devices - Init - DONE\n");
 8005e9c:	489c      	ldr	r0, [pc, #624]	; (8006110 <main+0x698>)
 8005e9e:	f7fb fe37 	bl	8001b10 <send_uart3>

  send_uart3("\nINITDONE\n");
 8005ea2:	489c      	ldr	r0, [pc, #624]	; (8006114 <main+0x69c>)
 8005ea4:	f7fb fe34 	bl	8001b10 <send_uart3>
  send_uart2("\nINITDONE\n");
 8005ea8:	489a      	ldr	r0, [pc, #616]	; (8006114 <main+0x69c>)
 8005eaa:	f7fb fe1f 	bl	8001aec <send_uart2>
  microDelay(50);
 8005eae:	2032      	movs	r0, #50	; 0x32
 8005eb0:	f7fb fe5c 	bl	8001b6c <microDelay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // cycle measurement
	  	  	if ( ( TIM5->CNT - previousMeasuringTime ) >=  settings.measuringInterval) {
 8005eb4:	4b98      	ldr	r3, [pc, #608]	; (8006118 <main+0x6a0>)
 8005eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eb8:	4b98      	ldr	r3, [pc, #608]	; (800611c <main+0x6a4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	1ad2      	subs	r2, r2, r3
 8005ebe:	4b98      	ldr	r3, [pc, #608]	; (8006120 <main+0x6a8>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d318      	bcc.n	8005ef8 <main+0x480>
	  	  		timeWindowMeasuring = ( TIM5->CNT - previousMeasuringTime );
 8005ec6:	4b94      	ldr	r3, [pc, #592]	; (8006118 <main+0x6a0>)
 8005ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eca:	4b94      	ldr	r3, [pc, #592]	; (800611c <main+0x6a4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	4a94      	ldr	r2, [pc, #592]	; (8006124 <main+0x6ac>)
 8005ed2:	6013      	str	r3, [r2, #0]
	  		//if ( ( __HAL_TIM_GET_COUNTER(&htim5) - previousMeasuringTime ) >=  settings.measuringInterval) {
	  			//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  			//timeWindowMeasuring = ( __HAL_TIM_GET_COUNTER(&htim5) - previousMeasuringTime );
	  			previousMeasuringTime += timeWindowMeasuring;
 8005ed4:	4b91      	ldr	r3, [pc, #580]	; (800611c <main+0x6a4>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	4b92      	ldr	r3, [pc, #584]	; (8006124 <main+0x6ac>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4413      	add	r3, r2
 8005ede:	4a8f      	ldr	r2, [pc, #572]	; (800611c <main+0x6a4>)
 8005ee0:	6013      	str	r3, [r2, #0]

	  			// External ADC convertor - 18b
	  			//adc_sample();
	  			adc_sample_ads8691();
 8005ee2:	f7fc ff01 	bl	8002ce8 <adc_sample_ads8691>


	  			//microDelay(20);

	  			// calculate and change measuring range accordingly
	  			ranges();
 8005ee6:	f7fc ffcb 	bl	8002e80 <ranges>

	  			triggerMenu();
 8005eea:	f7fd f959 	bl	80031a0 <triggerMenu>
	  			}
	  			*/

	  			//HAL_ADC_Start_IT (&hadc1);

	  			cycleNumber++;
 8005eee:	4b8e      	ldr	r3, [pc, #568]	; (8006128 <main+0x6b0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	4a8c      	ldr	r2, [pc, #560]	; (8006128 <main+0x6b0>)
 8005ef6:	6013      	str	r3, [r2, #0]


	  		}

	  		// cycle sample storing
	  	    if ( ( ( TIM5->CNT - previousSamplingTime) >=  (settings.samplingInterval - SAMPLING_TOLERANCE) )  && isMeasuring == 1 && isReadyForNext == 1) {
 8005ef8:	4b87      	ldr	r3, [pc, #540]	; (8006118 <main+0x6a0>)
 8005efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005efc:	4b8b      	ldr	r3, [pc, #556]	; (800612c <main+0x6b4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	4b87      	ldr	r3, [pc, #540]	; (8006120 <main+0x6a8>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	3b0a      	subs	r3, #10
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d372      	bcc.n	8005ff2 <main+0x57a>
 8005f0c:	4b88      	ldr	r3, [pc, #544]	; (8006130 <main+0x6b8>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d16d      	bne.n	8005ff2 <main+0x57a>
 8005f16:	4b87      	ldr	r3, [pc, #540]	; (8006134 <main+0x6bc>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d169      	bne.n	8005ff2 <main+0x57a>
	  	    	timeWindowSampling = ( TIM5->CNT - previousSamplingTime );
 8005f1e:	4b7e      	ldr	r3, [pc, #504]	; (8006118 <main+0x6a0>)
 8005f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f22:	4b82      	ldr	r3, [pc, #520]	; (800612c <main+0x6b4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	4a83      	ldr	r2, [pc, #524]	; (8006138 <main+0x6c0>)
 8005f2a:	6013      	str	r3, [r2, #0]
	  		//if ( ( (__HAL_TIM_GET_COUNTER(&htim5) - previousSamplingTime) >=  (settings.samplingInterval - SAMPLING_TOLERANCE) )  && isMeasuring == 1 && isReadyForNext == 1) {
	  			//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  			//timeWindowSampling = ( __HAL_TIM_GET_COUNTER(&htim5) - previousSamplingTime );
	  			previousSamplingTime += timeWindowSampling;
 8005f2c:	4b7f      	ldr	r3, [pc, #508]	; (800612c <main+0x6b4>)
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4b81      	ldr	r3, [pc, #516]	; (8006138 <main+0x6c0>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4413      	add	r3, r2
 8005f36:	4a7d      	ldr	r2, [pc, #500]	; (800612c <main+0x6b4>)
 8005f38:	6013      	str	r3, [r2, #0]

	  			measuringNumber++;
 8005f3a:	4b80      	ldr	r3, [pc, #512]	; (800613c <main+0x6c4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	4a7e      	ldr	r2, [pc, #504]	; (800613c <main+0x6c4>)
 8005f42:	6013      	str	r3, [r2, #0]

	  			if(startOfMeasurement == 1){
 8005f44:	4b7e      	ldr	r3, [pc, #504]	; (8006140 <main+0x6c8>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d123      	bne.n	8005f94 <main+0x51c>

	  				// getting time and date for formatting as name of new logged file
	  				//HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BCD);
	  				//HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BCD);
	  				HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	497d      	ldr	r1, [pc, #500]	; (8006144 <main+0x6cc>)
 8005f50:	487d      	ldr	r0, [pc, #500]	; (8006148 <main+0x6d0>)
 8005f52:	f007 fd09 	bl	800d968 <HAL_RTC_GetTime>
	  				HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 8005f56:	2200      	movs	r2, #0
 8005f58:	497c      	ldr	r1, [pc, #496]	; (800614c <main+0x6d4>)
 8005f5a:	487b      	ldr	r0, [pc, #492]	; (8006148 <main+0x6d0>)
 8005f5c:	f007 fe0a 	bl	800db74 <HAL_RTC_GetDate>

	  				// file name format "20YYMMDD_HHMM" example "20200120_1022"
	  				sprintf(loggingFileName, "\n20%2d%2d%2d_%2d%2d.txt\n\n", Date.Year, Date.Month, Date.Date, Time.Hours,Time.Minutes);
 8005f60:	4b7a      	ldr	r3, [pc, #488]	; (800614c <main+0x6d4>)
 8005f62:	78db      	ldrb	r3, [r3, #3]
 8005f64:	4618      	mov	r0, r3
 8005f66:	4b79      	ldr	r3, [pc, #484]	; (800614c <main+0x6d4>)
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	461c      	mov	r4, r3
 8005f6c:	4b77      	ldr	r3, [pc, #476]	; (800614c <main+0x6d4>)
 8005f6e:	789b      	ldrb	r3, [r3, #2]
 8005f70:	461a      	mov	r2, r3
 8005f72:	4b74      	ldr	r3, [pc, #464]	; (8006144 <main+0x6cc>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	4619      	mov	r1, r3
 8005f78:	4b72      	ldr	r3, [pc, #456]	; (8006144 <main+0x6cc>)
 8005f7a:	785b      	ldrb	r3, [r3, #1]
 8005f7c:	9302      	str	r3, [sp, #8]
 8005f7e:	9101      	str	r1, [sp, #4]
 8005f80:	9200      	str	r2, [sp, #0]
 8005f82:	4623      	mov	r3, r4
 8005f84:	4602      	mov	r2, r0
 8005f86:	4972      	ldr	r1, [pc, #456]	; (8006150 <main+0x6d8>)
 8005f88:	4872      	ldr	r0, [pc, #456]	; (8006154 <main+0x6dc>)
 8005f8a:	f018 feef 	bl	801ed6c <siprintf>
	  				measuringNumber = 0;
 8005f8e:	4b6b      	ldr	r3, [pc, #428]	; (800613c <main+0x6c4>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
	  			//bufclear();
	  			//sprintf(uartBufferTx, "%d %d %6.10f %6.12f\n", measuringNumber, currentRange, measuredValue, measuredValueCurrent);
	  			//uartBufferTxJumbo += uartBufferTx;
	  			//sprintf(uartBufferTx, "%d %d %6.16f\n", measuringNumber, currentRange, measuredValue);
	  			//sprintf(uartBufferTx, "%d %.12f\n", measuringNumber, measuredValueCurrent);
	  			sprintf(uartBufferTx, "%d %.12f\n", measuringNumber, averaging());
 8005f94:	4b69      	ldr	r3, [pc, #420]	; (800613c <main+0x6c4>)
 8005f96:	681c      	ldr	r4, [r3, #0]
 8005f98:	f7fd f8ae 	bl	80030f8 <averaging>
 8005f9c:	eeb0 7b40 	vmov.f64	d7, d0
 8005fa0:	ed8d 7b00 	vstr	d7, [sp]
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	496c      	ldr	r1, [pc, #432]	; (8006158 <main+0x6e0>)
 8005fa8:	486c      	ldr	r0, [pc, #432]	; (800615c <main+0x6e4>)
 8005faa:	f018 fedf 	bl	801ed6c <siprintf>
	  			//sprintf(uartBufferTx, "%d %d %6.16f\n", measuringNumber, previousValuesRange[(currentValuePosition + SAMPLES - 1)%SAMPLES], previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES]);
	  			//sprintf(uartBufferTx, "%d %.12f\n", measuringNumber, measuredValueCurrent);

	  			if(settings.isLoggingToConsole == 1){
 8005fae:	4b5c      	ldr	r3, [pc, #368]	; (8006120 <main+0x6a8>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d10f      	bne.n	8005fd6 <main+0x55e>

	  				isReadyForNext = 0;
 8005fb6:	4b5f      	ldr	r3, [pc, #380]	; (8006134 <main+0x6bc>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]

	  				if(startOfMeasurement == 1){
 8005fbc:	4b60      	ldr	r3, [pc, #384]	; (8006140 <main+0x6c8>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d105      	bne.n	8005fd0 <main+0x558>
	  					send_uart3(loggingFileName);
 8005fc4:	4863      	ldr	r0, [pc, #396]	; (8006154 <main+0x6dc>)
 8005fc6:	f7fb fda3 	bl	8001b10 <send_uart3>
	  					send_uart3("\n\n\n");
 8005fca:	4865      	ldr	r0, [pc, #404]	; (8006160 <main+0x6e8>)
 8005fcc:	f7fb fda0 	bl	8001b10 <send_uart3>
	  				}

	  				send_uart3(uartBufferTx);
 8005fd0:	4862      	ldr	r0, [pc, #392]	; (800615c <main+0x6e4>)
 8005fd2:	f7fb fd9d 	bl	8001b10 <send_uart3>

	  			}

	  			if(settings.isLoggingToSD == 1){
 8005fd6:	4b52      	ldr	r3, [pc, #328]	; (8006120 <main+0x6a8>)
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d102      	bne.n	8005fe4 <main+0x56c>

	  				saveToSD(uartBufferTx);
 8005fde:	485f      	ldr	r0, [pc, #380]	; (800615c <main+0x6e4>)
 8005fe0:	f7fc fac8 	bl	8002574 <saveToSD>
	  			if(settings.isLoggingToEthernet == 1){

	  				// empty
	  			}

	  			if(startOfMeasurement == 1)
 8005fe4:	4b56      	ldr	r3, [pc, #344]	; (8006140 <main+0x6c8>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d102      	bne.n	8005ff2 <main+0x57a>
	  				startOfMeasurement = 0;
 8005fec:	4b54      	ldr	r3, [pc, #336]	; (8006140 <main+0x6c8>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
	  		//sprintf(uartBufferTx, "Time between measuring voltage: %d\n", timeWindowMeasuring);
	  		//sprintf(uartBufferTx, "MT: %d ST: %d\n", timeWindowMeasuring, timeWindowSampling);
	  		//send_uart2(uartBufferTx);
	  		//send_uart3(uartBufferTx);

	  		if(endOfMeasurement == 1 && settings.isLoggingToSD == 1){
 8005ff2:	4b5c      	ldr	r3, [pc, #368]	; (8006164 <main+0x6ec>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d113      	bne.n	8006022 <main+0x5aa>
 8005ffa:	4b49      	ldr	r3, [pc, #292]	; (8006120 <main+0x6a8>)
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d10f      	bne.n	8006022 <main+0x5aa>

	  			/* Unmount SDCARD */

	  			fresult = f_mount(NULL, "", 1);
 8006002:	2201      	movs	r2, #1
 8006004:	4958      	ldr	r1, [pc, #352]	; (8006168 <main+0x6f0>)
 8006006:	2000      	movs	r0, #0
 8006008:	f016 fb90 	bl	801c72c <f_mount>
 800600c:	4603      	mov	r3, r0
 800600e:	461a      	mov	r2, r3
 8006010:	4b56      	ldr	r3, [pc, #344]	; (800616c <main+0x6f4>)
 8006012:	701a      	strb	r2, [r3, #0]
	  			if (fresult == FR_OK) {
 8006014:	4b55      	ldr	r3, [pc, #340]	; (800616c <main+0x6f4>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <main+0x5aa>
	  				#ifdef DEBUG
	  					send_uart3("SD CARD UNMOUNTED successfully...\n");
 800601c:	4854      	ldr	r0, [pc, #336]	; (8006170 <main+0x6f8>)
 800601e:	f7fb fd77 	bl	8001b10 <send_uart3>


	  		}


	  		if ( ( ( TIM5->CNT - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 1) {
 8006022:	4b3d      	ldr	r3, [pc, #244]	; (8006118 <main+0x6a0>)
 8006024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006026:	4b53      	ldr	r3, [pc, #332]	; (8006174 <main+0x6fc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	1ad2      	subs	r2, r2, r3
 800602c:	4b52      	ldr	r3, [pc, #328]	; (8006178 <main+0x700>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d325      	bcc.n	8006080 <main+0x608>
 8006034:	4b3e      	ldr	r3, [pc, #248]	; (8006130 <main+0x6b8>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	d120      	bne.n	8006080 <main+0x608>
	  		//if ( ( (__HAL_TIM_GET_COUNTER(&htim5) - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 1) {


	  			// timeout or no data handler
	  			if(getConsoleInput(inputData, 1, 0) != 99){
 800603e:	2200      	movs	r2, #0
 8006040:	2101      	movs	r1, #1
 8006042:	484e      	ldr	r0, [pc, #312]	; (800617c <main+0x704>)
 8006044:	f7fd fa02 	bl	800344c <getConsoleInput>
 8006048:	4603      	mov	r3, r0
 800604a:	2b63      	cmp	r3, #99	; 0x63
 800604c:	d014      	beq.n	8006078 <main+0x600>
	  				send_uart3("\nEND MEASURING\n");
 800604e:	484c      	ldr	r0, [pc, #304]	; (8006180 <main+0x708>)
 8006050:	f7fb fd5e 	bl	8001b10 <send_uart3>
	  				isMeasuring = 0;
 8006054:	4b36      	ldr	r3, [pc, #216]	; (8006130 <main+0x6b8>)
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
	  				isTriggered = 0;
 800605a:	4b4a      	ldr	r3, [pc, #296]	; (8006184 <main+0x70c>)
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
	  				startOfMeasurement = 0;
 8006060:	4b37      	ldr	r3, [pc, #220]	; (8006140 <main+0x6c8>)
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
	  				endOfMeasurement = 1;
 8006066:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <main+0x6ec>)
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
	  				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 800606c:	2200      	movs	r2, #0
 800606e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006072:	4845      	ldr	r0, [pc, #276]	; (8006188 <main+0x710>)
 8006074:	f003 fcc8 	bl	8009a08 <HAL_GPIO_WritePin>

	  			}

	  			previousConsoleInteraction = TIM5->CNT;
 8006078:	4b27      	ldr	r3, [pc, #156]	; (8006118 <main+0x6a0>)
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	4a3d      	ldr	r2, [pc, #244]	; (8006174 <main+0x6fc>)
 800607e:	6013      	str	r3, [r2, #0]
	  			//previousConsoleInteraction = __HAL_TIM_GET_COUNTER(&htim5);

	  		}

	  		// cycle user interfaces
	  		if ( ( ( TIM5->CNT - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 0) {
 8006080:	4b25      	ldr	r3, [pc, #148]	; (8006118 <main+0x6a0>)
 8006082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006084:	4b3b      	ldr	r3, [pc, #236]	; (8006174 <main+0x6fc>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	1ad2      	subs	r2, r2, r3
 800608a:	4b3b      	ldr	r3, [pc, #236]	; (8006178 <main+0x700>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d30d      	bcc.n	80060ae <main+0x636>
 8006092:	4b27      	ldr	r3, [pc, #156]	; (8006130 <main+0x6b8>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d108      	bne.n	80060ae <main+0x636>
	  		//if ( ( (__HAL_TIM_GET_COUNTER(&htim5) - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 0) {

	  			screenInterface();
 800609c:	f7ff fbf2 	bl	8005884 <screenInterface>

	  			consoleInterface(0);
 80060a0:	2000      	movs	r0, #0
 80060a2:	f7fe f99d 	bl	80043e0 <consoleInterface>

	  			previousConsoleInteraction = TIM5->CNT;
 80060a6:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <main+0x6a0>)
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	4a32      	ldr	r2, [pc, #200]	; (8006174 <main+0x6fc>)
 80060ac:	6013      	str	r3, [r2, #0]

	  		}

	  		// constrol print of sampling and measuring cycle times in us

	  		if(cycleNumber%10 == 1){
 80060ae:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <main+0x6b0>)
 80060b0:	6819      	ldr	r1, [r3, #0]
 80060b2:	4b36      	ldr	r3, [pc, #216]	; (800618c <main+0x714>)
 80060b4:	fba3 2301 	umull	r2, r3, r3, r1
 80060b8:	08da      	lsrs	r2, r3, #3
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	1aca      	subs	r2, r1, r3
 80060c4:	2a01      	cmp	r2, #1
 80060c6:	d10a      	bne.n	80060de <main+0x666>
	  			sprintf(uartBufferTx, "MT:%d_ST:%d\n", timeWindowMeasuring, timeWindowSampling);
 80060c8:	4b16      	ldr	r3, [pc, #88]	; (8006124 <main+0x6ac>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <main+0x6c0>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	492f      	ldr	r1, [pc, #188]	; (8006190 <main+0x718>)
 80060d2:	4822      	ldr	r0, [pc, #136]	; (800615c <main+0x6e4>)
 80060d4:	f018 fe4a 	bl	801ed6c <siprintf>
	  			//send_uart2(uartBufferTx);
	  			//send_uart(uartBufferTx);
	  			send_uart2(uartBufferTx);
 80060d8:	4820      	ldr	r0, [pc, #128]	; (800615c <main+0x6e4>)
 80060da:	f7fb fd07 	bl	8001aec <send_uart2>
	  		}

	  		//i2c_tests();

	  		if (isMeasuring == 1) {
 80060de:	4b14      	ldr	r3, [pc, #80]	; (8006130 <main+0x6b8>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	e056      	b.n	8006194 <main+0x71c>
 80060e6:	bf00      	nop
 80060e8:	40020000 	.word	0x40020000
 80060ec:	40020400 	.word	0x40020400
 80060f0:	080236b4 	.word	0x080236b4
 80060f4:	080236cc 	.word	0x080236cc
 80060f8:	080236e8 	.word	0x080236e8
 80060fc:	08023708 	.word	0x08023708
 8006100:	0802370c 	.word	0x0802370c
 8006104:	08023718 	.word	0x08023718
 8006108:	08023720 	.word	0x08023720
 800610c:	0802372c 	.word	0x0802372c
 8006110:	08023738 	.word	0x08023738
 8006114:	08023758 	.word	0x08023758
 8006118:	40000c00 	.word	0x40000c00
 800611c:	20000338 	.word	0x20000338
 8006120:	20000018 	.word	0x20000018
 8006124:	20000324 	.word	0x20000324
 8006128:	20000330 	.word	0x20000330
 800612c:	2000033c 	.word	0x2000033c
 8006130:	20000322 	.word	0x20000322
 8006134:	20000002 	.word	0x20000002
 8006138:	20000328 	.word	0x20000328
 800613c:	2000032c 	.word	0x2000032c
 8006140:	20000320 	.word	0x20000320
 8006144:	20008c44 	.word	0x20008c44
 8006148:	20003440 	.word	0x20003440
 800614c:	200072a0 	.word	0x200072a0
 8006150:	08023764 	.word	0x08023764
 8006154:	20005794 	.word	0x20005794
 8006158:	08023780 	.word	0x08023780
 800615c:	20011e6c 	.word	0x20011e6c
 8006160:	0802378c 	.word	0x0802378c
 8006164:	20000321 	.word	0x20000321
 8006168:	080214f0 	.word	0x080214f0
 800616c:	20001e50 	.word	0x20001e50
 8006170:	08021638 	.word	0x08021638
 8006174:	20000340 	.word	0x20000340
 8006178:	20000008 	.word	0x20000008
 800617c:	20008c38 	.word	0x20008c38
 8006180:	08023790 	.word	0x08023790
 8006184:	20000314 	.word	0x20000314
 8006188:	40021000 	.word	0x40021000
 800618c:	cccccccd 	.word	0xcccccccd
 8006190:	080237a0 	.word	0x080237a0
 8006194:	2b01      	cmp	r3, #1
 8006196:	d110      	bne.n	80061ba <main+0x742>

	  			if (( TIM5->CNT - previousBlinkTime) >= 150000) {
 8006198:	4b14      	ldr	r3, [pc, #80]	; (80061ec <main+0x774>)
 800619a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800619c:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <main+0x778>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	4a14      	ldr	r2, [pc, #80]	; (80061f4 <main+0x77c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d908      	bls.n	80061ba <main+0x742>
	  			//if (( __HAL_TIM_GET_COUNTER(&htim5) - previousBlinkTime) >= 150000) {
	  				//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  				previousBlinkTime = TIM5->CNT;
 80061a8:	4b10      	ldr	r3, [pc, #64]	; (80061ec <main+0x774>)
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	4a10      	ldr	r2, [pc, #64]	; (80061f0 <main+0x778>)
 80061ae:	6013      	str	r3, [r2, #0]
	  				//previousBlinkTime = __HAL_TIM_GET_COUNTER(&htim5);
	  				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80061b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061b4:	4810      	ldr	r0, [pc, #64]	; (80061f8 <main+0x780>)
 80061b6:	f003 fc40 	bl	8009a3a <HAL_GPIO_TogglePin>

	  			}
	  		}
	  		if (isMeasuring == 0) {
 80061ba:	4b10      	ldr	r3, [pc, #64]	; (80061fc <main+0x784>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d110      	bne.n	80061e6 <main+0x76e>

	  				if (( TIM5->CNT - previousBlinkTime) >= 500000) {
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <main+0x774>)
 80061c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <main+0x778>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	4a0c      	ldr	r2, [pc, #48]	; (8006200 <main+0x788>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d908      	bls.n	80061e6 <main+0x76e>
	  				//if (( __HAL_TIM_GET_COUNTER(&htim5) - previousBlinkTime) >= 500000) {
	  					//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  					previousBlinkTime = TIM5->CNT;
 80061d4:	4b05      	ldr	r3, [pc, #20]	; (80061ec <main+0x774>)
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	4a05      	ldr	r2, [pc, #20]	; (80061f0 <main+0x778>)
 80061da:	6013      	str	r3, [r2, #0]
	  					//previousBlinkTime = __HAL_TIM_GET_COUNTER(&htim5);
	  					HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80061dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061e0:	4805      	ldr	r0, [pc, #20]	; (80061f8 <main+0x780>)
 80061e2:	f003 fc2a 	bl	8009a3a <HAL_GPIO_TogglePin>
	  		}



    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80061e6:	f017 fd65 	bl	801dcb4 <MX_USB_HOST_Process>
	  	  	if ( ( TIM5->CNT - previousMeasuringTime ) >=  settings.measuringInterval) {
 80061ea:	e663      	b.n	8005eb4 <main+0x43c>
 80061ec:	40000c00 	.word	0x40000c00
 80061f0:	20000334 	.word	0x20000334
 80061f4:	000249ef 	.word	0x000249ef
 80061f8:	40021000 	.word	0x40021000
 80061fc:	20000322 	.word	0x20000322
 8006200:	0007a11f 	.word	0x0007a11f

08006204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b0b8      	sub	sp, #224	; 0xe0
 8006208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800620a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800620e:	2234      	movs	r2, #52	; 0x34
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f018 f8a6 	bl	801e364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006218:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	605a      	str	r2, [r3, #4]
 8006222:	609a      	str	r2, [r3, #8]
 8006224:	60da      	str	r2, [r3, #12]
 8006226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	2290      	movs	r2, #144	; 0x90
 800622e:	2100      	movs	r1, #0
 8006230:	4618      	mov	r0, r3
 8006232:	f018 f897 	bl	801e364 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8006236:	f006 f8ef 	bl	800c418 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 800623a:	4b4b      	ldr	r3, [pc, #300]	; (8006368 <SystemClock_Config+0x164>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	f023 0318 	bic.w	r3, r3, #24
 8006242:	4a49      	ldr	r2, [pc, #292]	; (8006368 <SystemClock_Config+0x164>)
 8006244:	f043 0310 	orr.w	r3, r3, #16
 8006248:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800624a:	4b47      	ldr	r3, [pc, #284]	; (8006368 <SystemClock_Config+0x164>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	4a46      	ldr	r2, [pc, #280]	; (8006368 <SystemClock_Config+0x164>)
 8006250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006254:	6413      	str	r3, [r2, #64]	; 0x40
 8006256:	4b44      	ldr	r3, [pc, #272]	; (8006368 <SystemClock_Config+0x164>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006262:	4b42      	ldr	r3, [pc, #264]	; (800636c <SystemClock_Config+0x168>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a41      	ldr	r2, [pc, #260]	; (800636c <SystemClock_Config+0x168>)
 8006268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	4b3f      	ldr	r3, [pc, #252]	; (800636c <SystemClock_Config+0x168>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800627a:	2307      	movs	r3, #7
 800627c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006288:	2301      	movs	r3, #1
 800628a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800628e:	2301      	movs	r3, #1
 8006290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006294:	2310      	movs	r3, #16
 8006296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800629a:	2302      	movs	r3, #2
 800629c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80062a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 10;
 80062a8:	230a      	movs	r3, #10
 80062aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80062ae:	23d8      	movs	r3, #216	; 0xd8
 80062b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80062b4:	2302      	movs	r3, #2
 80062b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80062ba:	2309      	movs	r3, #9
 80062bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80062c4:	4618      	mov	r0, r3
 80062c6:	f006 f907 	bl	800c4d8 <HAL_RCC_OscConfig>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80062d0:	f000 fd5e 	bl	8006d90 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80062d4:	f006 f8b0 	bl	800c438 <HAL_PWREx_EnableOverDrive>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80062de:	f000 fd57 	bl	8006d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062e2:	230f      	movs	r3, #15
 80062e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062e8:	2302      	movs	r3, #2
 80062ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062ee:	2300      	movs	r3, #0
 80062f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80062f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80062f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80062fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8006304:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006308:	2107      	movs	r1, #7
 800630a:	4618      	mov	r0, r3
 800630c:	f006 fb92 	bl	800ca34 <HAL_RCC_ClockConfig>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8006316:	f000 fd3b 	bl	8006d90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 800631a:	4b15      	ldr	r3, [pc, #84]	; (8006370 <SystemClock_Config+0x16c>)
 800631c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800631e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8006324:	2300      	movs	r3, #0
 8006326:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8006328:	2300      	movs	r3, #0
 800632a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800632c:	2300      	movs	r3, #0
 800632e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8006330:	2300      	movs	r3, #0
 8006332:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006334:	2300      	movs	r3, #0
 8006336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800633a:	2300      	movs	r3, #0
 800633c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006340:	f107 0308 	add.w	r3, r7, #8
 8006344:	4618      	mov	r0, r3
 8006346:	f006 fdaf 	bl	800cea8 <HAL_RCCEx_PeriphCLKConfig>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8006350:	f000 fd1e 	bl	8006d90 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8006354:	2200      	movs	r2, #0
 8006356:	2100      	movs	r1, #0
 8006358:	2000      	movs	r0, #0
 800635a:	f006 fc57 	bl	800cc0c <HAL_RCC_MCOConfig>
}
 800635e:	bf00      	nop
 8006360:	37e0      	adds	r7, #224	; 0xe0
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40023800 	.word	0x40023800
 800636c:	40007000 	.word	0x40007000
 8006370:	00a25820 	.word	0x00a25820

08006374 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8006378:	4b1c      	ldr	r3, [pc, #112]	; (80063ec <MX_ETH_Init+0x78>)
 800637a:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <MX_ETH_Init+0x7c>)
 800637c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <MX_ETH_Init+0x78>)
 8006380:	2201      	movs	r2, #1
 8006382:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006384:	4b19      	ldr	r3, [pc, #100]	; (80063ec <MX_ETH_Init+0x78>)
 8006386:	2201      	movs	r2, #1
 8006388:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800638a:	4b18      	ldr	r3, [pc, #96]	; (80063ec <MX_ETH_Init+0x78>)
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8006392:	4b16      	ldr	r3, [pc, #88]	; (80063ec <MX_ETH_Init+0x78>)
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	3301      	adds	r3, #1
 8006398:	2280      	movs	r2, #128	; 0x80
 800639a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800639c:	4b13      	ldr	r3, [pc, #76]	; (80063ec <MX_ETH_Init+0x78>)
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	3302      	adds	r3, #2
 80063a2:	22e1      	movs	r2, #225	; 0xe1
 80063a4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <MX_ETH_Init+0x78>)
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	3303      	adds	r3, #3
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80063b0:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <MX_ETH_Init+0x78>)
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	3304      	adds	r3, #4
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80063ba:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <MX_ETH_Init+0x78>)
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	3305      	adds	r3, #5
 80063c0:	2200      	movs	r2, #0
 80063c2:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80063c4:	4b09      	ldr	r3, [pc, #36]	; (80063ec <MX_ETH_Init+0x78>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <MX_ETH_Init+0x78>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80063d0:	4b06      	ldr	r3, [pc, #24]	; (80063ec <MX_ETH_Init+0x78>)
 80063d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80063d6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80063d8:	4804      	ldr	r0, [pc, #16]	; (80063ec <MX_ETH_Init+0x78>)
 80063da:	f002 fce7 	bl	8008dac <HAL_ETH_Init>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80063e4:	f000 fcd4 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80063e8:	bf00      	nop
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20007258 	.word	0x20007258
 80063f0:	40028000 	.word	0x40028000

080063f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80063f8:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <MX_I2C1_Init+0x74>)
 80063fa:	4a1c      	ldr	r2, [pc, #112]	; (800646c <MX_I2C1_Init+0x78>)
 80063fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80063fe:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <MX_I2C1_Init+0x74>)
 8006400:	4a1b      	ldr	r2, [pc, #108]	; (8006470 <MX_I2C1_Init+0x7c>)
 8006402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006404:	4b18      	ldr	r3, [pc, #96]	; (8006468 <MX_I2C1_Init+0x74>)
 8006406:	2200      	movs	r2, #0
 8006408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800640a:	4b17      	ldr	r3, [pc, #92]	; (8006468 <MX_I2C1_Init+0x74>)
 800640c:	2201      	movs	r2, #1
 800640e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006410:	4b15      	ldr	r3, [pc, #84]	; (8006468 <MX_I2C1_Init+0x74>)
 8006412:	2200      	movs	r2, #0
 8006414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006416:	4b14      	ldr	r3, [pc, #80]	; (8006468 <MX_I2C1_Init+0x74>)
 8006418:	2200      	movs	r2, #0
 800641a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800641c:	4b12      	ldr	r3, [pc, #72]	; (8006468 <MX_I2C1_Init+0x74>)
 800641e:	2200      	movs	r2, #0
 8006420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006422:	4b11      	ldr	r3, [pc, #68]	; (8006468 <MX_I2C1_Init+0x74>)
 8006424:	2200      	movs	r2, #0
 8006426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006428:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <MX_I2C1_Init+0x74>)
 800642a:	2200      	movs	r2, #0
 800642c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800642e:	480e      	ldr	r0, [pc, #56]	; (8006468 <MX_I2C1_Init+0x74>)
 8006430:	f005 f82a 	bl	800b488 <HAL_I2C_Init>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800643a:	f000 fca9 	bl	8006d90 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800643e:	2100      	movs	r1, #0
 8006440:	4809      	ldr	r0, [pc, #36]	; (8006468 <MX_I2C1_Init+0x74>)
 8006442:	f005 ff51 	bl	800c2e8 <HAL_I2CEx_ConfigAnalogFilter>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800644c:	f000 fca0 	bl	8006d90 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006450:	2100      	movs	r1, #0
 8006452:	4805      	ldr	r0, [pc, #20]	; (8006468 <MX_I2C1_Init+0x74>)
 8006454:	f005 ff93 	bl	800c37e <HAL_I2CEx_ConfigDigitalFilter>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800645e:	f000 fc97 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006462:	bf00      	nop
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	200074bc 	.word	0x200074bc
 800646c:	40005400 	.word	0x40005400
 8006470:	6000030d 	.word	0x6000030d

08006474 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8006478:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <MX_I2C4_Init+0x74>)
 800647a:	4a1c      	ldr	r2, [pc, #112]	; (80064ec <MX_I2C4_Init+0x78>)
 800647c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x6000030D;
 800647e:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <MX_I2C4_Init+0x74>)
 8006480:	4a1b      	ldr	r2, [pc, #108]	; (80064f0 <MX_I2C4_Init+0x7c>)
 8006482:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8006484:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <MX_I2C4_Init+0x74>)
 8006486:	2200      	movs	r2, #0
 8006488:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800648a:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <MX_I2C4_Init+0x74>)
 800648c:	2201      	movs	r2, #1
 800648e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006490:	4b15      	ldr	r3, [pc, #84]	; (80064e8 <MX_I2C4_Init+0x74>)
 8006492:	2200      	movs	r2, #0
 8006494:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <MX_I2C4_Init+0x74>)
 8006498:	2200      	movs	r2, #0
 800649a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800649c:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <MX_I2C4_Init+0x74>)
 800649e:	2200      	movs	r2, #0
 80064a0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064a2:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <MX_I2C4_Init+0x74>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064a8:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <MX_I2C4_Init+0x74>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80064ae:	480e      	ldr	r0, [pc, #56]	; (80064e8 <MX_I2C4_Init+0x74>)
 80064b0:	f004 ffea 	bl	800b488 <HAL_I2C_Init>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80064ba:	f000 fc69 	bl	8006d90 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064be:	2100      	movs	r1, #0
 80064c0:	4809      	ldr	r0, [pc, #36]	; (80064e8 <MX_I2C4_Init+0x74>)
 80064c2:	f005 ff11 	bl	800c2e8 <HAL_I2CEx_ConfigAnalogFilter>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80064cc:	f000 fc60 	bl	8006d90 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80064d0:	2100      	movs	r1, #0
 80064d2:	4805      	ldr	r0, [pc, #20]	; (80064e8 <MX_I2C4_Init+0x74>)
 80064d4:	f005 ff53 	bl	800c37e <HAL_I2CEx_ConfigDigitalFilter>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80064de:	f000 fc57 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80064e2:	bf00      	nop
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20007568 	.word	0x20007568
 80064ec:	40006000 	.word	0x40006000
 80064f0:	6000030d 	.word	0x6000030d

080064f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80064fa:	f107 0308 	add.w	r3, r7, #8
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	609a      	str	r2, [r3, #8]
 8006506:	60da      	str	r2, [r3, #12]
 8006508:	611a      	str	r2, [r3, #16]
 800650a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800650c:	2300      	movs	r3, #0
 800650e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8006510:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <MX_RTC_Init+0xb0>)
 8006512:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <MX_RTC_Init+0xb4>)
 8006514:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006516:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <MX_RTC_Init+0xb0>)
 8006518:	2200      	movs	r2, #0
 800651a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800651c:	4b21      	ldr	r3, [pc, #132]	; (80065a4 <MX_RTC_Init+0xb0>)
 800651e:	227f      	movs	r2, #127	; 0x7f
 8006520:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006522:	4b20      	ldr	r3, [pc, #128]	; (80065a4 <MX_RTC_Init+0xb0>)
 8006524:	22ff      	movs	r2, #255	; 0xff
 8006526:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <MX_RTC_Init+0xb0>)
 800652a:	2200      	movs	r2, #0
 800652c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800652e:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <MX_RTC_Init+0xb0>)
 8006530:	2200      	movs	r2, #0
 8006532:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006534:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <MX_RTC_Init+0xb0>)
 8006536:	2200      	movs	r2, #0
 8006538:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800653a:	481a      	ldr	r0, [pc, #104]	; (80065a4 <MX_RTC_Init+0xb0>)
 800653c:	f007 f8da 	bl	800d6f4 <HAL_RTC_Init>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8006546:	f000 fc23 	bl	8006d90 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x12;
 800654a:	2312      	movs	r3, #18
 800654c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x32;
 800654e:	2332      	movs	r3, #50	; 0x32
 8006550:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8006552:	2300      	movs	r3, #0
 8006554:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006556:	2300      	movs	r3, #0
 8006558:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800655a:	2300      	movs	r3, #0
 800655c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800655e:	f107 0308 	add.w	r3, r7, #8
 8006562:	2201      	movs	r2, #1
 8006564:	4619      	mov	r1, r3
 8006566:	480f      	ldr	r0, [pc, #60]	; (80065a4 <MX_RTC_Init+0xb0>)
 8006568:	f007 f940 	bl	800d7ec <HAL_RTC_SetTime>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8006572:	f000 fc0d 	bl	8006d90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006576:	2301      	movs	r3, #1
 8006578:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_FEBRUARY;
 800657a:	2302      	movs	r3, #2
 800657c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x8;
 800657e:	2308      	movs	r3, #8
 8006580:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x14;
 8006582:	2314      	movs	r3, #20
 8006584:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006586:	1d3b      	adds	r3, r7, #4
 8006588:	2201      	movs	r2, #1
 800658a:	4619      	mov	r1, r3
 800658c:	4805      	ldr	r0, [pc, #20]	; (80065a4 <MX_RTC_Init+0xb0>)
 800658e:	f007 fa49 	bl	800da24 <HAL_RTC_SetDate>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8006598:	f000 fbfa 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800659c:	bf00      	nop
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20003440 	.word	0x20003440
 80065a8:	40002800 	.word	0x40002800

080065ac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80065b0:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <MX_SDMMC1_SD_Init+0x38>)
 80065b2:	4a0d      	ldr	r2, [pc, #52]	; (80065e8 <MX_SDMMC1_SD_Init+0x3c>)
 80065b4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <MX_SDMMC1_SD_Init+0x38>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80065bc:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <MX_SDMMC1_SD_Init+0x38>)
 80065be:	2200      	movs	r2, #0
 80065c0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80065c2:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <MX_SDMMC1_SD_Init+0x38>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80065c8:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <MX_SDMMC1_SD_Init+0x38>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80065ce:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <MX_SDMMC1_SD_Init+0x38>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <MX_SDMMC1_SD_Init+0x38>)
 80065d6:	2204      	movs	r2, #4
 80065d8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80065da:	bf00      	nop
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	20002fbc 	.word	0x20002fbc
 80065e8:	40012c00 	.word	0x40012c00

080065ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80065f0:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <MX_SPI1_Init+0x74>)
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <MX_SPI1_Init+0x78>)
 80065f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80065f6:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <MX_SPI1_Init+0x74>)
 80065f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80065fe:	4b18      	ldr	r3, [pc, #96]	; (8006660 <MX_SPI1_Init+0x74>)
 8006600:	2200      	movs	r2, #0
 8006602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006604:	4b16      	ldr	r3, [pc, #88]	; (8006660 <MX_SPI1_Init+0x74>)
 8006606:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800660a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800660c:	4b14      	ldr	r3, [pc, #80]	; (8006660 <MX_SPI1_Init+0x74>)
 800660e:	2200      	movs	r2, #0
 8006610:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006612:	4b13      	ldr	r3, [pc, #76]	; (8006660 <MX_SPI1_Init+0x74>)
 8006614:	2200      	movs	r2, #0
 8006616:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006618:	4b11      	ldr	r3, [pc, #68]	; (8006660 <MX_SPI1_Init+0x74>)
 800661a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800661e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006620:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <MX_SPI1_Init+0x74>)
 8006622:	2200      	movs	r2, #0
 8006624:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006626:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <MX_SPI1_Init+0x74>)
 8006628:	2200      	movs	r2, #0
 800662a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <MX_SPI1_Init+0x74>)
 800662e:	2200      	movs	r2, #0
 8006630:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <MX_SPI1_Init+0x74>)
 8006634:	2200      	movs	r2, #0
 8006636:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006638:	4b09      	ldr	r3, [pc, #36]	; (8006660 <MX_SPI1_Init+0x74>)
 800663a:	2207      	movs	r2, #7
 800663c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800663e:	4b08      	ldr	r3, [pc, #32]	; (8006660 <MX_SPI1_Init+0x74>)
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <MX_SPI1_Init+0x74>)
 8006646:	2208      	movs	r2, #8
 8006648:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800664a:	4805      	ldr	r0, [pc, #20]	; (8006660 <MX_SPI1_Init+0x74>)
 800664c:	f008 ff9e 	bl	800f58c <HAL_SPI_Init>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006656:	f000 fb9b 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800665a:	bf00      	nop
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	200057b8 	.word	0x200057b8
 8006664:	40013000 	.word	0x40013000

08006668 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800666c:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <MX_SPI4_Init+0x74>)
 800666e:	4a1c      	ldr	r2, [pc, #112]	; (80066e0 <MX_SPI4_Init+0x78>)
 8006670:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006672:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <MX_SPI4_Init+0x74>)
 8006674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006678:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800667a:	4b18      	ldr	r3, [pc, #96]	; (80066dc <MX_SPI4_Init+0x74>)
 800667c:	2200      	movs	r2, #0
 800667e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8006680:	4b16      	ldr	r3, [pc, #88]	; (80066dc <MX_SPI4_Init+0x74>)
 8006682:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006686:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006688:	4b14      	ldr	r3, [pc, #80]	; (80066dc <MX_SPI4_Init+0x74>)
 800668a:	2200      	movs	r2, #0
 800668c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <MX_SPI4_Init+0x74>)
 8006690:	2200      	movs	r2, #0
 8006692:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <MX_SPI4_Init+0x74>)
 8006696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800669a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <MX_SPI4_Init+0x74>)
 800669e:	2200      	movs	r2, #0
 80066a0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80066a2:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <MX_SPI4_Init+0x74>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <MX_SPI4_Init+0x74>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066ae:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <MX_SPI4_Init+0x74>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80066b4:	4b09      	ldr	r3, [pc, #36]	; (80066dc <MX_SPI4_Init+0x74>)
 80066b6:	2207      	movs	r2, #7
 80066b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80066ba:	4b08      	ldr	r3, [pc, #32]	; (80066dc <MX_SPI4_Init+0x74>)
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80066c0:	4b06      	ldr	r3, [pc, #24]	; (80066dc <MX_SPI4_Init+0x74>)
 80066c2:	2208      	movs	r2, #8
 80066c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80066c6:	4805      	ldr	r0, [pc, #20]	; (80066dc <MX_SPI4_Init+0x74>)
 80066c8:	f008 ff60 	bl	800f58c <HAL_SPI_Init>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80066d2:	f000 fb5d 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80066d6:	bf00      	nop
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	200059bc 	.word	0x200059bc
 80066e0:	40013400 	.word	0x40013400

080066e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066ea:	f107 0310 	add.w	r3, r7, #16
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	605a      	str	r2, [r3, #4]
 80066f4:	609a      	str	r2, [r3, #8]
 80066f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066f8:	1d3b      	adds	r3, r7, #4
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	605a      	str	r2, [r3, #4]
 8006700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006702:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <MX_TIM4_Init+0x94>)
 8006704:	4a1d      	ldr	r2, [pc, #116]	; (800677c <MX_TIM4_Init+0x98>)
 8006706:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108;
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <MX_TIM4_Init+0x94>)
 800670a:	226c      	movs	r2, #108	; 0x6c
 800670c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800670e:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <MX_TIM4_Init+0x94>)
 8006710:	2200      	movs	r2, #0
 8006712:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 8006714:	4b18      	ldr	r3, [pc, #96]	; (8006778 <MX_TIM4_Init+0x94>)
 8006716:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800671a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800671c:	4b16      	ldr	r3, [pc, #88]	; (8006778 <MX_TIM4_Init+0x94>)
 800671e:	2200      	movs	r2, #0
 8006720:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <MX_TIM4_Init+0x94>)
 8006724:	2200      	movs	r2, #0
 8006726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006728:	4813      	ldr	r0, [pc, #76]	; (8006778 <MX_TIM4_Init+0x94>)
 800672a:	f00a fa4c 	bl	8010bc6 <HAL_TIM_Base_Init>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8006734:	f000 fb2c 	bl	8006d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800673c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800673e:	f107 0310 	add.w	r3, r7, #16
 8006742:	4619      	mov	r1, r3
 8006744:	480c      	ldr	r0, [pc, #48]	; (8006778 <MX_TIM4_Init+0x94>)
 8006746:	f00a fa93 	bl	8010c70 <HAL_TIM_ConfigClockSource>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8006750:	f000 fb1e 	bl	8006d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006754:	2300      	movs	r3, #0
 8006756:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800675c:	1d3b      	adds	r3, r7, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4805      	ldr	r0, [pc, #20]	; (8006778 <MX_TIM4_Init+0x94>)
 8006762:	f00a fc85 	bl	8011070 <HAL_TIMEx_MasterConfigSynchronization>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800676c:	f000 fb10 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006770:	bf00      	nop
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20011f58 	.word	0x20011f58
 800677c:	40000800 	.word	0x40000800

08006780 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006786:	f107 0310 	add.w	r3, r7, #16
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	605a      	str	r2, [r3, #4]
 8006790:	609a      	str	r2, [r3, #8]
 8006792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006794:	1d3b      	adds	r3, r7, #4
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	605a      	str	r2, [r3, #4]
 800679c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800679e:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <MX_TIM5_Init+0x94>)
 80067a0:	4a1d      	ldr	r2, [pc, #116]	; (8006818 <MX_TIM5_Init+0x98>)
 80067a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 80067a4:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <MX_TIM5_Init+0x94>)
 80067a6:	226c      	movs	r2, #108	; 0x6c
 80067a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067aa:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <MX_TIM5_Init+0x94>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF-1;
 80067b0:	4b18      	ldr	r3, [pc, #96]	; (8006814 <MX_TIM5_Init+0x94>)
 80067b2:	f06f 0201 	mvn.w	r2, #1
 80067b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067b8:	4b16      	ldr	r3, [pc, #88]	; (8006814 <MX_TIM5_Init+0x94>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067be:	4b15      	ldr	r3, [pc, #84]	; (8006814 <MX_TIM5_Init+0x94>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80067c4:	4813      	ldr	r0, [pc, #76]	; (8006814 <MX_TIM5_Init+0x94>)
 80067c6:	f00a f9fe 	bl	8010bc6 <HAL_TIM_Base_Init>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80067d0:	f000 fade 	bl	8006d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80067da:	f107 0310 	add.w	r3, r7, #16
 80067de:	4619      	mov	r1, r3
 80067e0:	480c      	ldr	r0, [pc, #48]	; (8006814 <MX_TIM5_Init+0x94>)
 80067e2:	f00a fa45 	bl	8010c70 <HAL_TIM_ConfigClockSource>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80067ec:	f000 fad0 	bl	8006d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067f0:	2300      	movs	r3, #0
 80067f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80067f8:	1d3b      	adds	r3, r7, #4
 80067fa:	4619      	mov	r1, r3
 80067fc:	4805      	ldr	r0, [pc, #20]	; (8006814 <MX_TIM5_Init+0x94>)
 80067fe:	f00a fc37 	bl	8011070 <HAL_TIMEx_MasterConfigSynchronization>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8006808:	f000 fac2 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800680c:	bf00      	nop
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20011f98 	.word	0x20011f98
 8006818:	40000c00 	.word	0x40000c00

0800681c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	605a      	str	r2, [r3, #4]
 800682a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800682c:	4b14      	ldr	r3, [pc, #80]	; (8006880 <MX_TIM7_Init+0x64>)
 800682e:	4a15      	ldr	r2, [pc, #84]	; (8006884 <MX_TIM7_Init+0x68>)
 8006830:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8006832:	4b13      	ldr	r3, [pc, #76]	; (8006880 <MX_TIM7_Init+0x64>)
 8006834:	2200      	movs	r2, #0
 8006836:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006838:	4b11      	ldr	r3, [pc, #68]	; (8006880 <MX_TIM7_Init+0x64>)
 800683a:	2200      	movs	r2, #0
 800683c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 800683e:	4b10      	ldr	r3, [pc, #64]	; (8006880 <MX_TIM7_Init+0x64>)
 8006840:	2200      	movs	r2, #0
 8006842:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006844:	4b0e      	ldr	r3, [pc, #56]	; (8006880 <MX_TIM7_Init+0x64>)
 8006846:	2200      	movs	r2, #0
 8006848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800684a:	480d      	ldr	r0, [pc, #52]	; (8006880 <MX_TIM7_Init+0x64>)
 800684c:	f00a f9bb 	bl	8010bc6 <HAL_TIM_Base_Init>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8006856:	f000 fa9b 	bl	8006d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800685a:	2300      	movs	r3, #0
 800685c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006862:	1d3b      	adds	r3, r7, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4806      	ldr	r0, [pc, #24]	; (8006880 <MX_TIM7_Init+0x64>)
 8006868:	f00a fc02 	bl	8011070 <HAL_TIMEx_MasterConfigSynchronization>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8006872:	f000 fa8d 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20012910 	.word	0x20012910
 8006884:	40001400 	.word	0x40001400

08006888 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <MX_TIM14_Init+0x44>)
 800688e:	4a10      	ldr	r2, [pc, #64]	; (80068d0 <MX_TIM14_Init+0x48>)
 8006890:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 54000;
 8006892:	4b0e      	ldr	r3, [pc, #56]	; (80068cc <MX_TIM14_Init+0x44>)
 8006894:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8006898:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800689a:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <MX_TIM14_Init+0x44>)
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0xFFFF-1;
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <MX_TIM14_Init+0x44>)
 80068a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80068a6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80068a8:	4b08      	ldr	r3, [pc, #32]	; (80068cc <MX_TIM14_Init+0x44>)
 80068aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068ae:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <MX_TIM14_Init+0x44>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80068b6:	4805      	ldr	r0, [pc, #20]	; (80068cc <MX_TIM14_Init+0x44>)
 80068b8:	f00a f985 	bl	8010bc6 <HAL_TIM_Base_Init>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <MX_TIM14_Init+0x3e>
  {
    Error_Handler();
 80068c2:	f000 fa65 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80068c6:	bf00      	nop
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	2000dd18 	.word	0x2000dd18
 80068d0:	40002000 	.word	0x40002000

080068d4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <MX_UART7_Init+0x58>)
 80068da:	4a15      	ldr	r2, [pc, #84]	; (8006930 <MX_UART7_Init+0x5c>)
 80068dc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 3000000;
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <MX_UART7_Init+0x58>)
 80068e0:	4a14      	ldr	r2, [pc, #80]	; (8006934 <MX_UART7_Init+0x60>)
 80068e2:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80068e4:	4b11      	ldr	r3, [pc, #68]	; (800692c <MX_UART7_Init+0x58>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80068ea:	4b10      	ldr	r3, [pc, #64]	; (800692c <MX_UART7_Init+0x58>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80068f0:	4b0e      	ldr	r3, [pc, #56]	; (800692c <MX_UART7_Init+0x58>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <MX_UART7_Init+0x58>)
 80068f8:	220c      	movs	r2, #12
 80068fa:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <MX_UART7_Init+0x58>)
 80068fe:	2200      	movs	r2, #0
 8006900:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_8;
 8006902:	4b0a      	ldr	r3, [pc, #40]	; (800692c <MX_UART7_Init+0x58>)
 8006904:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006908:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800690a:	4b08      	ldr	r3, [pc, #32]	; (800692c <MX_UART7_Init+0x58>)
 800690c:	2200      	movs	r2, #0
 800690e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <MX_UART7_Init+0x58>)
 8006912:	2200      	movs	r2, #0
 8006914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006916:	4805      	ldr	r0, [pc, #20]	; (800692c <MX_UART7_Init+0x58>)
 8006918:	f00a fc38 	bl	801118c <HAL_UART_Init>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8006922:	f000 fa35 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8006926:	bf00      	nop
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20011d68 	.word	0x20011d68
 8006930:	40007800 	.word	0x40007800
 8006934:	002dc6c0 	.word	0x002dc6c0

08006938 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800693c:	4b14      	ldr	r3, [pc, #80]	; (8006990 <MX_USART6_UART_Init+0x58>)
 800693e:	4a15      	ldr	r2, [pc, #84]	; (8006994 <MX_USART6_UART_Init+0x5c>)
 8006940:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 3000000;
 8006942:	4b13      	ldr	r3, [pc, #76]	; (8006990 <MX_USART6_UART_Init+0x58>)
 8006944:	4a14      	ldr	r2, [pc, #80]	; (8006998 <MX_USART6_UART_Init+0x60>)
 8006946:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006948:	4b11      	ldr	r3, [pc, #68]	; (8006990 <MX_USART6_UART_Init+0x58>)
 800694a:	2200      	movs	r2, #0
 800694c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800694e:	4b10      	ldr	r3, [pc, #64]	; (8006990 <MX_USART6_UART_Init+0x58>)
 8006950:	2200      	movs	r2, #0
 8006952:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <MX_USART6_UART_Init+0x58>)
 8006956:	2200      	movs	r2, #0
 8006958:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800695a:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <MX_USART6_UART_Init+0x58>)
 800695c:	220c      	movs	r2, #12
 800695e:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <MX_USART6_UART_Init+0x58>)
 8006962:	2200      	movs	r2, #0
 8006964:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <MX_USART6_UART_Init+0x58>)
 8006968:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800696c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800696e:	4b08      	ldr	r3, [pc, #32]	; (8006990 <MX_USART6_UART_Init+0x58>)
 8006970:	2200      	movs	r2, #0
 8006972:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <MX_USART6_UART_Init+0x58>)
 8006976:	2200      	movs	r2, #0
 8006978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800697a:	4805      	ldr	r0, [pc, #20]	; (8006990 <MX_USART6_UART_Init+0x58>)
 800697c:	f00a fc06 	bl	801118c <HAL_UART_Init>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8006986:	f000 fa03 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800698a:	bf00      	nop
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20011dec 	.word	0x20011dec
 8006994:	40011400 	.word	0x40011400
 8006998:	002dc6c0 	.word	0x002dc6c0

0800699c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80069a2:	4b2a      	ldr	r3, [pc, #168]	; (8006a4c <MX_DMA_Init+0xb0>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	4a29      	ldr	r2, [pc, #164]	; (8006a4c <MX_DMA_Init+0xb0>)
 80069a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069ac:	6313      	str	r3, [r2, #48]	; 0x30
 80069ae:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <MX_DMA_Init+0xb0>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b6:	607b      	str	r3, [r7, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80069ba:	4b24      	ldr	r3, [pc, #144]	; (8006a4c <MX_DMA_Init+0xb0>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <MX_DMA_Init+0xb0>)
 80069c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069c4:	6313      	str	r3, [r2, #48]	; 0x30
 80069c6:	4b21      	ldr	r3, [pc, #132]	; (8006a4c <MX_DMA_Init+0xb0>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 80069d2:	2200      	movs	r2, #0
 80069d4:	2102      	movs	r1, #2
 80069d6:	200c      	movs	r0, #12
 80069d8:	f001 fe17 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80069dc:	200c      	movs	r0, #12
 80069de:	f001 fe30 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80069e2:	2200      	movs	r2, #0
 80069e4:	2100      	movs	r1, #0
 80069e6:	200e      	movs	r0, #14
 80069e8:	f001 fe0f 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80069ec:	200e      	movs	r0, #14
 80069ee:	f001 fe28 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80069f2:	2200      	movs	r2, #0
 80069f4:	2102      	movs	r1, #2
 80069f6:	2038      	movs	r0, #56	; 0x38
 80069f8:	f001 fe07 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80069fc:	2038      	movs	r0, #56	; 0x38
 80069fe:	f001 fe20 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	2039      	movs	r0, #57	; 0x39
 8006a08:	f001 fdff 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006a0c:	2039      	movs	r0, #57	; 0x39
 8006a0e:	f001 fe18 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006a12:	2200      	movs	r2, #0
 8006a14:	2100      	movs	r1, #0
 8006a16:	203b      	movs	r0, #59	; 0x3b
 8006a18:	f001 fdf7 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006a1c:	203b      	movs	r0, #59	; 0x3b
 8006a1e:	f001 fe10 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 2, 0);
 8006a22:	2200      	movs	r2, #0
 8006a24:	2102      	movs	r1, #2
 8006a26:	2044      	movs	r0, #68	; 0x44
 8006a28:	f001 fdef 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8006a2c:	2044      	movs	r0, #68	; 0x44
 8006a2e:	f001 fe08 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006a32:	2200      	movs	r2, #0
 8006a34:	2100      	movs	r1, #0
 8006a36:	2045      	movs	r0, #69	; 0x45
 8006a38:	f001 fde7 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006a3c:	2045      	movs	r0, #69	; 0x45
 8006a3e:	f001 fe00 	bl	8008642 <HAL_NVIC_EnableIRQ>

}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40023800 	.word	0x40023800

08006a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08c      	sub	sp, #48	; 0x30
 8006a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a56:	f107 031c 	add.w	r3, r7, #28
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
 8006a60:	609a      	str	r2, [r3, #8]
 8006a62:	60da      	str	r2, [r3, #12]
 8006a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a66:	4bbc      	ldr	r3, [pc, #752]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	4abb      	ldr	r2, [pc, #748]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006a6c:	f043 0310 	orr.w	r3, r3, #16
 8006a70:	6313      	str	r3, [r2, #48]	; 0x30
 8006a72:	4bb9      	ldr	r3, [pc, #740]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a7e:	4bb6      	ldr	r3, [pc, #728]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	4ab5      	ldr	r2, [pc, #724]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006a84:	f043 0304 	orr.w	r3, r3, #4
 8006a88:	6313      	str	r3, [r2, #48]	; 0x30
 8006a8a:	4bb3      	ldr	r3, [pc, #716]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a96:	4bb0      	ldr	r3, [pc, #704]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	4aaf      	ldr	r2, [pc, #700]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8006aa2:	4bad      	ldr	r3, [pc, #692]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aae:	4baa      	ldr	r3, [pc, #680]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	4aa9      	ldr	r2, [pc, #676]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8006aba:	4ba7      	ldr	r3, [pc, #668]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ac6:	4ba4      	ldr	r3, [pc, #656]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	4aa3      	ldr	r2, [pc, #652]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006acc:	f043 0302 	orr.w	r3, r3, #2
 8006ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad2:	4ba1      	ldr	r3, [pc, #644]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ade:	4b9e      	ldr	r3, [pc, #632]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	4a9d      	ldr	r2, [pc, #628]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006ae4:	f043 0308 	orr.w	r3, r3, #8
 8006ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8006aea:	4b9b      	ldr	r3, [pc, #620]	; (8006d58 <MX_GPIO_Init+0x308>)
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	607b      	str	r3, [r7, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin, GPIO_PIN_SET);
 8006af6:	2201      	movs	r2, #1
 8006af8:	213c      	movs	r1, #60	; 0x3c
 8006afa:	4898      	ldr	r0, [pc, #608]	; (8006d5c <MX_GPIO_Init+0x30c>)
 8006afc:	f002 ff84 	bl	8009a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE6_Pin|LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin 
 8006b00:	2200      	movs	r2, #0
 8006b02:	f648 0143 	movw	r1, #34883	; 0x8843
 8006b06:	4895      	ldr	r0, [pc, #596]	; (8006d5c <MX_GPIO_Init+0x30c>)
 8006b08:	f002 ff7e 	bl	8009a08 <HAL_GPIO_WritePin>
                          |RANGE_NA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC13_Pin|PC2_Pin|PC3_Pin, GPIO_PIN_RESET);
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f242 010c 	movw	r1, #8204	; 0x200c
 8006b12:	4893      	ldr	r0, [pc, #588]	; (8006d60 <MX_GPIO_Init+0x310>)
 8006b14:	f002 ff78 	bl	8009a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA0_Pin|PA3_Pin|PS_EN_Pin|USB_OTG_FS_VBUS_Pin 
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f248 6119 	movw	r1, #34329	; 0x8619
 8006b1e:	4891      	ldr	r0, [pc, #580]	; (8006d64 <MX_GPIO_Init+0x314>)
 8006b20:	f002 ff72 	bl	8009a08 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin|PA15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ADC_CONV_Pin|RANGE_MA_Pin, GPIO_PIN_RESET);
 8006b24:	2200      	movs	r2, #0
 8006b26:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8006b2a:	488f      	ldr	r0, [pc, #572]	; (8006d68 <MX_GPIO_Init+0x318>)
 8006b2c:	f002 ff6c 	bl	8009a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDMMC1_WP_GPIO_Port, SDMMC1_WP_Pin, GPIO_PIN_RESET);
 8006b30:	2200      	movs	r2, #0
 8006b32:	2102      	movs	r1, #2
 8006b34:	488d      	ldr	r0, [pc, #564]	; (8006d6c <MX_GPIO_Init+0x31c>)
 8006b36:	f002 ff67 	bl	8009a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	2140      	movs	r1, #64	; 0x40
 8006b3e:	488b      	ldr	r0, [pc, #556]	; (8006d6c <MX_GPIO_Init+0x31c>)
 8006b40:	f002 ff62 	bl	8009a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_RST_GPIO_Port, ADC_RST_Pin, GPIO_PIN_SET);
 8006b44:	2201      	movs	r2, #1
 8006b46:	2140      	movs	r1, #64	; 0x40
 8006b48:	4887      	ldr	r0, [pc, #540]	; (8006d68 <MX_GPIO_Init+0x318>)
 8006b4a:	f002 ff5d 	bl	8009a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASW1_Pin ASW4_Pin ASW2_Pin ASW3_Pin 
                           LED_BLUE_Pin LED_GREEN_Pin RANGE_UA_Pin RANGE_NA_Pin */
  GPIO_InitStruct.Pin = ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin 
 8006b4e:	f648 033f 	movw	r3, #34879	; 0x883f
 8006b52:	61fb      	str	r3, [r7, #28]
                          |LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin|RANGE_NA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b54:	2301      	movs	r3, #1
 8006b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b60:	f107 031c 	add.w	r3, r7, #28
 8006b64:	4619      	mov	r1, r3
 8006b66:	487d      	ldr	r0, [pc, #500]	; (8006d5c <MX_GPIO_Init+0x30c>)
 8006b68:	f002 fd8a 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6_Pin */
  GPIO_InitStruct.Pin = PE6_Pin;
 8006b6c:	2340      	movs	r3, #64	; 0x40
 8006b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b70:	2301      	movs	r3, #1
 8006b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PE6_GPIO_Port, &GPIO_InitStruct);
 8006b7c:	f107 031c 	add.w	r3, r7, #28
 8006b80:	4619      	mov	r1, r3
 8006b82:	4876      	ldr	r0, [pc, #472]	; (8006d5c <MX_GPIO_Init+0x30c>)
 8006b84:	f002 fd7c 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_Pin PC2_Pin PC3_Pin */
  GPIO_InitStruct.Pin = PC13_Pin|PC2_Pin|PC3_Pin;
 8006b88:	f242 030c 	movw	r3, #8204	; 0x200c
 8006b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b96:	2300      	movs	r3, #0
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b9a:	f107 031c 	add.w	r3, r7, #28
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	486f      	ldr	r0, [pc, #444]	; (8006d60 <MX_GPIO_Init+0x310>)
 8006ba2:	f002 fd6d 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0_Pin PA3_Pin USB_OTG_FS_VBUS_Pin LCD_RST_Pin 
                           PA15_Pin */
  GPIO_InitStruct.Pin = PA0_Pin|PA3_Pin|USB_OTG_FS_VBUS_Pin|LCD_RST_Pin 
 8006ba6:	f248 6309 	movw	r3, #34313	; 0x8609
 8006baa:	61fb      	str	r3, [r7, #28]
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bac:	2301      	movs	r3, #1
 8006bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb8:	f107 031c 	add.w	r3, r7, #28
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4869      	ldr	r0, [pc, #420]	; (8006d64 <MX_GPIO_Init+0x314>)
 8006bc0:	f002 fd5e 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS_EN_Pin */
  GPIO_InitStruct.Pin = PS_EN_Pin;
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PS_EN_GPIO_Port, &GPIO_InitStruct);
 8006bd4:	f107 031c 	add.w	r3, r7, #28
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4862      	ldr	r0, [pc, #392]	; (8006d64 <MX_GPIO_Init+0x314>)
 8006bdc:	f002 fd50 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OverCurrent_Pin;
 8006be0:	2301      	movs	r3, #1
 8006be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006be4:	4b62      	ldr	r3, [pc, #392]	; (8006d70 <MX_GPIO_Init+0x320>)
 8006be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006bec:	f107 031c 	add.w	r3, r7, #28
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	485d      	ldr	r0, [pc, #372]	; (8006d68 <MX_GPIO_Init+0x318>)
 8006bf4:	f002 fd44 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MEASURING_Pin Extra_GPIO_Pin BUTTON_DOWN_Pin BUTTON_PREV_Pin */
  GPIO_InitStruct.Pin = BUTTON_MEASURING_Pin|Extra_GPIO_Pin|BUTTON_DOWN_Pin|BUTTON_PREV_Pin;
 8006bf8:	f24c 0306 	movw	r3, #49158	; 0xc006
 8006bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006bfe:	4b5d      	ldr	r3, [pc, #372]	; (8006d74 <MX_GPIO_Init+0x324>)
 8006c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c06:	f107 031c 	add.w	r3, r7, #28
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4856      	ldr	r0, [pc, #344]	; (8006d68 <MX_GPIO_Init+0x318>)
 8006c0e:	f002 fd37 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8006c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c20:	2300      	movs	r3, #0
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c24:	2301      	movs	r3, #1
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8006c28:	f107 031c 	add.w	r3, r7, #28
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	484b      	ldr	r0, [pc, #300]	; (8006d5c <MX_GPIO_Init+0x30c>)
 8006c30:	f002 fd26 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin ADC_CONV_Pin ADC_RST_Pin RANGE_MA_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ADC_CONV_Pin|ADC_RST_Pin|RANGE_MA_Pin;
 8006c34:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8006c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c42:	2303      	movs	r3, #3
 8006c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c46:	f107 031c 	add.w	r3, r7, #28
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4846      	ldr	r0, [pc, #280]	; (8006d68 <MX_GPIO_Init+0x318>)
 8006c4e:	f002 fd17 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_NEXT_Pin BUTTON_UP_Pin BUTTON_ESC_Pin BUTTON_ENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_NEXT_Pin|BUTTON_UP_Pin|BUTTON_ESC_Pin|BUTTON_ENTER_Pin;
 8006c52:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c58:	4b46      	ldr	r3, [pc, #280]	; (8006d74 <MX_GPIO_Init+0x324>)
 8006c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c60:	f107 031c 	add.w	r3, r7, #28
 8006c64:	4619      	mov	r1, r3
 8006c66:	4841      	ldr	r0, [pc, #260]	; (8006d6c <MX_GPIO_Init+0x31c>)
 8006c68:	f002 fd0a 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c72:	2302      	movs	r3, #2
 8006c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c82:	f107 031c 	add.w	r3, r7, #28
 8006c86:	4619      	mov	r1, r3
 8006c88:	4836      	ldr	r0, [pc, #216]	; (8006d64 <MX_GPIO_Init+0x314>)
 8006c8a:	f002 fcf9 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin ADC_RVS_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|ADC_RVS_Pin;
 8006c8e:	2321      	movs	r3, #33	; 0x21
 8006c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c92:	2300      	movs	r3, #0
 8006c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c9a:	f107 031c 	add.w	r3, r7, #28
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4832      	ldr	r0, [pc, #200]	; (8006d6c <MX_GPIO_Init+0x31c>)
 8006ca2:	f002 fced 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC1_WP_Pin */
  GPIO_InitStruct.Pin = SDMMC1_WP_Pin;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006caa:	2301      	movs	r3, #1
 8006cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SDMMC1_WP_GPIO_Port, &GPIO_InitStruct);
 8006cb6:	f107 031c 	add.w	r3, r7, #28
 8006cba:	4619      	mov	r1, r3
 8006cbc:	482b      	ldr	r0, [pc, #172]	; (8006d6c <MX_GPIO_Init+0x31c>)
 8006cbe:	f002 fcdf 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3_Pin PD4_Pin */
  GPIO_InitStruct.Pin = PD3_Pin|PD4_Pin;
 8006cc2:	2318      	movs	r3, #24
 8006cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006cc6:	4b2a      	ldr	r3, [pc, #168]	; (8006d70 <MX_GPIO_Init+0x320>)
 8006cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cce:	f107 031c 	add.w	r3, r7, #28
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4825      	ldr	r0, [pc, #148]	; (8006d6c <MX_GPIO_Init+0x31c>)
 8006cd6:	f002 fcd3 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8006cda:	2340      	movs	r3, #64	; 0x40
 8006cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8006cea:	f107 031c 	add.w	r3, r7, #28
 8006cee:	4619      	mov	r1, r3
 8006cf0:	481e      	ldr	r0, [pc, #120]	; (8006d6c <MX_GPIO_Init+0x31c>)
 8006cf2:	f002 fcc5 	bl	8009680 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	2006      	movs	r0, #6
 8006cfc:	f001 fc85 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006d00:	2006      	movs	r0, #6
 8006d02:	f001 fc9e 	bl	8008642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8006d06:	2200      	movs	r2, #0
 8006d08:	2101      	movs	r1, #1
 8006d0a:	2007      	movs	r0, #7
 8006d0c:	f001 fc7d 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8006d10:	2007      	movs	r0, #7
 8006d12:	f001 fc96 	bl	8008642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8006d16:	2200      	movs	r2, #0
 8006d18:	2101      	movs	r1, #1
 8006d1a:	2008      	movs	r0, #8
 8006d1c:	f001 fc75 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006d20:	2008      	movs	r0, #8
 8006d22:	f001 fc8e 	bl	8008642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8006d26:	2200      	movs	r2, #0
 8006d28:	2101      	movs	r1, #1
 8006d2a:	2009      	movs	r0, #9
 8006d2c:	f001 fc6d 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006d30:	2009      	movs	r0, #9
 8006d32:	f001 fc86 	bl	8008642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8006d36:	2200      	movs	r2, #0
 8006d38:	2101      	movs	r1, #1
 8006d3a:	200a      	movs	r0, #10
 8006d3c:	f001 fc65 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006d40:	200a      	movs	r0, #10
 8006d42:	f001 fc7e 	bl	8008642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8006d46:	2200      	movs	r2, #0
 8006d48:	2101      	movs	r1, #1
 8006d4a:	2017      	movs	r0, #23
 8006d4c:	f001 fc5d 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d50:	2017      	movs	r0, #23
 8006d52:	f001 fc76 	bl	8008642 <HAL_NVIC_EnableIRQ>
 8006d56:	e00f      	b.n	8006d78 <MX_GPIO_Init+0x328>
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	40020800 	.word	0x40020800
 8006d64:	40020000 	.word	0x40020000
 8006d68:	40020400 	.word	0x40020400
 8006d6c:	40020c00 	.word	0x40020c00
 8006d70:	10110000 	.word	0x10110000
 8006d74:	10210000 	.word	0x10210000

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	2028      	movs	r0, #40	; 0x28
 8006d7e:	f001 fc44 	bl	800860a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d82:	2028      	movs	r0, #40	; 0x28
 8006d84:	f001 fc5d 	bl	8008642 <HAL_NVIC_EnableIRQ>

}
 8006d88:	bf00      	nop
 8006d8a:	3730      	adds	r7, #48	; 0x30
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006d94:	bf00      	nop
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <ringbuff_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                  Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
BUF_PREF(buff_init)(BUF_PREF(buff_t)* buff, void* buffdata, size_t size) {
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <ringbuff_init+0x1e>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <ringbuff_init+0x1e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <ringbuff_init+0x22>
        return 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e00b      	b.n	8006dd8 <ringbuff_init+0x3a>
    }

    BUF_MEMSET(buff, 0x00, sizeof(*buff));
 8006dc0:	2210      	movs	r2, #16
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f017 facd 	bl	801e364 <memset>

    buff->size = size;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	601a      	str	r2, [r3, #0]

    return 1;
 8006dd6:	2301      	movs	r3, #1
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                  When returned value is less than `btw`, there was no enough memory available
 *                  to copy full data array
 */
size_t
BUF_PREF(buff_write)(BUF_PREF(buff_t)* buff, const void* data, size_t btw) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || btw == 0) {
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <ringbuff_write+0x2c>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d006      	beq.n	8006e0c <ringbuff_write+0x2c>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <ringbuff_write+0x2c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <ringbuff_write+0x30>
        return 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e047      	b.n	8006ea0 <ringbuff_write+0xc0>
    }

    /* Calculate maximum number of bytes available to write */
    free = BUF_PREF(buff_get_free)(buff);
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f8ad 	bl	8006f70 <ringbuff_get_free>
 8006e16:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	bf28      	it	cs
 8006e20:	4613      	movcs	r3, r2
 8006e22:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <ringbuff_write+0x4e>
        return 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e038      	b.n	8006ea0 <ringbuff_write+0xc0>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bf28      	it	cs
 8006e3e:	4613      	movcs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	69f9      	ldr	r1, [r7, #28]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f017 fa79 	bl	801e348 <memcpy>
    buff->w += tocopy;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	441a      	add	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <ringbuff_write+0xa8>
        BUF_MEMCPY(buff->buff, (void *)&d[tocopy], btw);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f017 fa63 	bl	801e348 <memcpy>
        buff->w = btw;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]
    }

    if (buff->w >= buff->size) {
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d302      	bcc.n	8006e9a <ringbuff_write+0xba>
        buff->w = 0;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	60da      	str	r2, [r3, #12]
    }
    return tocopy + btw;
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4413      	add	r3, r2
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <ringbuff_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
BUF_PREF(buff_read)(BUF_PREF(buff_t)* buff, void* data, size_t btr) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    uint8_t *d = data;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || btr == 0) {
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <ringbuff_read+0x2c>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d006      	beq.n	8006ed4 <ringbuff_read+0x2c>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <ringbuff_read+0x2c>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <ringbuff_read+0x30>
        return 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e047      	b.n	8006f68 <ringbuff_read+0xc0>
    }

    /* Calculate maximum number of bytes available to read */
    full = BUF_PREF(buff_get_full)(buff);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 f880 	bl	8006fde <ringbuff_get_full>
 8006ede:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	bf28      	it	cs
 8006ee8:	4613      	movcs	r3, r2
 8006eea:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <ringbuff_read+0x4e>
        return 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e038      	b.n	8006f68 <ringbuff_read+0xc0>
    }

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->r, btr);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4293      	cmp	r3, r2
 8006f04:	bf28      	it	cs
 8006f06:	4613      	movcs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	4413      	add	r3, r2
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4619      	mov	r1, r3
 8006f18:	69f8      	ldr	r0, [r7, #28]
 8006f1a:	f017 fa15 	bl	801e348 <memcpy>
    buff->r += tocopy;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	609a      	str	r2, [r3, #8]
    btr -= tocopy;
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00b      	beq.n	8006f50 <ringbuff_read+0xa8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	18d0      	adds	r0, r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4619      	mov	r1, r3
 8006f46:	f017 f9ff 	bl	801e348 <memcpy>
        buff->r = btr;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	609a      	str	r2, [r3, #8]
    }

    /* Step 3: Check end of buffer */
    if (buff->r >= buff->size) {
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d302      	bcc.n	8006f62 <ringbuff_read+0xba>
        buff->r = 0;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	609a      	str	r2, [r3, #8]
    }
    return tocopy + btr;
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4413      	add	r3, r2
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3720      	adds	r7, #32
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <ringbuff_get_free>:
 * \brief           Get number of bytes in buffer available to write
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
BUF_PREF(buff_get_free)(BUF_PREF(buff_t)* buff) {
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <ringbuff_get_free+0x1e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <ringbuff_get_free+0x1e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <ringbuff_get_free+0x22>
        return 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e01f      	b.n	8006fd2 <ringbuff_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d103      	bne.n	8006fae <ringbuff_get_free+0x3e>
        size = buff->size;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e00f      	b.n	8006fce <ringbuff_get_free+0x5e>
    } else if (r > w) {
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d904      	bls.n	8006fc0 <ringbuff_get_free+0x50>
        size = r - w;
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e006      	b.n	8006fce <ringbuff_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	68f9      	ldr	r1, [r7, #12]
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1acb      	subs	r3, r1, r3
 8006fca:	4413      	add	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	3b01      	subs	r3, #1
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <ringbuff_get_full>:
 * \brief           Get number of bytes in buffer available to read
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
BUF_PREF(buff_get_full)(BUF_PREF(buff_t)* buff) {
 8006fde:	b480      	push	{r7}
 8006fe0:	b087      	sub	sp, #28
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <ringbuff_get_full+0x1e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <ringbuff_get_full+0x1e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <ringbuff_get_full+0x22>
        return 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e01d      	b.n	800703c <ringbuff_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	429a      	cmp	r2, r3
 8007012:	d102      	bne.n	800701a <ringbuff_get_full+0x3c>
        size = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e00f      	b.n	800703a <ringbuff_get_full+0x5c>
    } else if (w > r) {
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	429a      	cmp	r2, r3
 8007020:	d904      	bls.n	800702c <ringbuff_get_full+0x4e>
        size = w - r;
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e006      	b.n	800703a <ringbuff_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	6939      	ldr	r1, [r7, #16]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1acb      	subs	r3, r1, r3
 8007036:	4413      	add	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
    }
    return size;
 800703a:	697b      	ldr	r3, [r7, #20]
}
 800703c:	4618      	mov	r0, r3
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <ringbuff_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
BUF_PREF(buff_get_linear_block_read_address)(BUF_PREF(buff_t)* buff) {
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <ringbuff_get_linear_block_read_address+0x1e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <ringbuff_get_linear_block_read_address+0x1e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <ringbuff_get_linear_block_read_address+0x22>
        return NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	e004      	b.n	8007074 <ringbuff_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	4413      	add	r3, r2
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
BUF_PREF(buff_get_linear_block_read_length)(BUF_PREF(buff_t)* buff) {
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <ringbuff_get_linear_block_read_length+0x1e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <ringbuff_get_linear_block_read_length+0x1e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <ringbuff_get_linear_block_read_length+0x22>
        return 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	e01b      	b.n	80070da <ringbuff_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d904      	bls.n	80070c0 <ringbuff_get_linear_block_read_length+0x40>
        len = w - r;
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e00b      	b.n	80070d8 <ringbuff_get_linear_block_read_length+0x58>
    } else if (r > w) {
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d905      	bls.n	80070d4 <ringbuff_get_linear_block_read_length+0x54>
        len = buff->size - r;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	e001      	b.n	80070d8 <ringbuff_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
    }
    return len;
 80070d8:	697b      	ldr	r3, [r7, #20]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
BUF_PREF(buff_skip)(BUF_PREF(buff_t)* buff, size_t len) {
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <ringbuff_skip+0x26>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d006      	beq.n	800710c <ringbuff_skip+0x26>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <ringbuff_skip+0x26>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <ringbuff_skip+0x2a>
        return 0;
 800710c:	2300      	movs	r3, #0
 800710e:	e01b      	b.n	8007148 <ringbuff_skip+0x62>
    }

    full = BUF_PREF(buff_get_full)(buff);       /* Get buffer used length */
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff ff64 	bl	8006fde <ringbuff_get_full>
 8007116:	60f8      	str	r0, [r7, #12]
    buff->r += BUF_MIN(len, full);              /* Advance read pointer */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68f9      	ldr	r1, [r7, #12]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	428b      	cmp	r3, r1
 8007122:	bf28      	it	cs
 8007124:	460b      	movcs	r3, r1
 8007126:	441a      	add	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d306      	bcc.n	8007146 <ringbuff_skip+0x60>
        buff->r -= buff->size;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	1ad2      	subs	r2, r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	609a      	str	r2, [r3, #8]
    }
    return len;
 8007146:	683b      	ldr	r3, [r7, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <ringbuff_advance>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to advance
 * \return          Number of bytes advanced for write operation
 */
size_t
BUF_PREF(buff_advance)(BUF_PREF(buff_t)* buff, size_t len) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
    size_t free;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <ringbuff_advance+0x26>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d006      	beq.n	8007176 <ringbuff_advance+0x26>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <ringbuff_advance+0x26>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <ringbuff_advance+0x2a>
        return 0;
 8007176:	2300      	movs	r3, #0
 8007178:	e01b      	b.n	80071b2 <ringbuff_advance+0x62>
    }

    free = BUF_PREF(buff_get_free)(buff);       /* Get buffer free length */
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff fef8 	bl	8006f70 <ringbuff_get_free>
 8007180:	60f8      	str	r0, [r7, #12]
    buff->w += BUF_MIN(len, free);              /* Advance write pointer */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	428b      	cmp	r3, r1
 800718c:	bf28      	it	cs
 800718e:	460b      	movcs	r3, r1
 8007190:	441a      	add	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60da      	str	r2, [r3, #12]
    if (buff->w >= buff->size) {                /* Subtract possible overflow */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d306      	bcc.n	80071b0 <ringbuff_advance+0x60>
        buff->w -= buff->size;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60da      	str	r2, [r3, #12]
    }
    return len;
 80071b0:	683b      	ldr	r3, [r7, #0]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <HAL_MspInit+0x44>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	4a0e      	ldr	r2, [pc, #56]	; (8007200 <HAL_MspInit+0x44>)
 80071c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071cc:	6413      	str	r3, [r2, #64]	; 0x40
 80071ce:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <HAL_MspInit+0x44>)
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d6:	607b      	str	r3, [r7, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071da:	4b09      	ldr	r3, [pc, #36]	; (8007200 <HAL_MspInit+0x44>)
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	4a08      	ldr	r2, [pc, #32]	; (8007200 <HAL_MspInit+0x44>)
 80071e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071e4:	6453      	str	r3, [r2, #68]	; 0x44
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <HAL_MspInit+0x44>)
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40023800 	.word	0x40023800

08007204 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08e      	sub	sp, #56	; 0x38
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800720c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	609a      	str	r2, [r3, #8]
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a3f      	ldr	r2, [pc, #252]	; (8007320 <HAL_ETH_MspInit+0x11c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d178      	bne.n	8007318 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007226:	4b3f      	ldr	r3, [pc, #252]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	4a3e      	ldr	r2, [pc, #248]	; (8007324 <HAL_ETH_MspInit+0x120>)
 800722c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007230:	6313      	str	r3, [r2, #48]	; 0x30
 8007232:	4b3c      	ldr	r3, [pc, #240]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723a:	623b      	str	r3, [r7, #32]
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	4b39      	ldr	r3, [pc, #228]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	4a38      	ldr	r2, [pc, #224]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007244:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007248:	6313      	str	r3, [r2, #48]	; 0x30
 800724a:	4b36      	ldr	r3, [pc, #216]	; (8007324 <HAL_ETH_MspInit+0x120>)
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007252:	61fb      	str	r3, [r7, #28]
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4b33      	ldr	r3, [pc, #204]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	4a32      	ldr	r2, [pc, #200]	; (8007324 <HAL_ETH_MspInit+0x120>)
 800725c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007260:	6313      	str	r3, [r2, #48]	; 0x30
 8007262:	4b30      	ldr	r3, [pc, #192]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800726e:	4b2d      	ldr	r3, [pc, #180]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	4a2c      	ldr	r2, [pc, #176]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007274:	f043 0304 	orr.w	r3, r3, #4
 8007278:	6313      	str	r3, [r2, #48]	; 0x30
 800727a:	4b2a      	ldr	r3, [pc, #168]	; (8007324 <HAL_ETH_MspInit+0x120>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	f003 0304 	and.w	r3, r3, #4
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007286:	4b27      	ldr	r3, [pc, #156]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728a:	4a26      	ldr	r2, [pc, #152]	; (8007324 <HAL_ETH_MspInit+0x120>)
 800728c:	f043 0301 	orr.w	r3, r3, #1
 8007290:	6313      	str	r3, [r2, #48]	; 0x30
 8007292:	4b24      	ldr	r3, [pc, #144]	; (8007324 <HAL_ETH_MspInit+0x120>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800729e:	4b21      	ldr	r3, [pc, #132]	; (8007324 <HAL_ETH_MspInit+0x120>)
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	4a20      	ldr	r2, [pc, #128]	; (8007324 <HAL_ETH_MspInit+0x120>)
 80072a4:	f043 0302 	orr.w	r3, r3, #2
 80072a8:	6313      	str	r3, [r2, #48]	; 0x30
 80072aa:	4b1e      	ldr	r3, [pc, #120]	; (8007324 <HAL_ETH_MspInit+0x120>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80072b6:	2332      	movs	r3, #50	; 0x32
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ba:	2302      	movs	r3, #2
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072c2:	2303      	movs	r3, #3
 80072c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072c6:	230b      	movs	r3, #11
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072ce:	4619      	mov	r1, r3
 80072d0:	4815      	ldr	r0, [pc, #84]	; (8007328 <HAL_ETH_MspInit+0x124>)
 80072d2:	f002 f9d5 	bl	8009680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80072d6:	2386      	movs	r3, #134	; 0x86
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072da:	2302      	movs	r3, #2
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072e2:	2303      	movs	r3, #3
 80072e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072e6:	230b      	movs	r3, #11
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072ee:	4619      	mov	r1, r3
 80072f0:	480e      	ldr	r0, [pc, #56]	; (800732c <HAL_ETH_MspInit+0x128>)
 80072f2:	f002 f9c5 	bl	8009680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80072f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fc:	2302      	movs	r3, #2
 80072fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007300:	2300      	movs	r3, #0
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007304:	2303      	movs	r3, #3
 8007306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007308:	230b      	movs	r3, #11
 800730a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800730c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007310:	4619      	mov	r1, r3
 8007312:	4807      	ldr	r0, [pc, #28]	; (8007330 <HAL_ETH_MspInit+0x12c>)
 8007314:	f002 f9b4 	bl	8009680 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8007318:	bf00      	nop
 800731a:	3738      	adds	r7, #56	; 0x38
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40028000 	.word	0x40028000
 8007324:	40023800 	.word	0x40023800
 8007328:	40020800 	.word	0x40020800
 800732c:	40020000 	.word	0x40020000
 8007330:	40020400 	.word	0x40020400

08007334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08c      	sub	sp, #48	; 0x30
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800733c:	f107 031c 	add.w	r3, r7, #28
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	609a      	str	r2, [r3, #8]
 8007348:	60da      	str	r2, [r3, #12]
 800734a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a2f      	ldr	r2, [pc, #188]	; (8007410 <HAL_I2C_MspInit+0xdc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d129      	bne.n	80073aa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007356:	4b2f      	ldr	r3, [pc, #188]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	4a2e      	ldr	r2, [pc, #184]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	6313      	str	r3, [r2, #48]	; 0x30
 8007362:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	61bb      	str	r3, [r7, #24]
 800736c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800736e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007374:	2312      	movs	r3, #18
 8007376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007378:	2301      	movs	r3, #1
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800737c:	2303      	movs	r3, #3
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007380:	2304      	movs	r3, #4
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007384:	f107 031c 	add.w	r3, r7, #28
 8007388:	4619      	mov	r1, r3
 800738a:	4823      	ldr	r0, [pc, #140]	; (8007418 <HAL_I2C_MspInit+0xe4>)
 800738c:	f002 f978 	bl	8009680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007390:	4b20      	ldr	r3, [pc, #128]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	4a1f      	ldr	r2, [pc, #124]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 8007396:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800739a:	6413      	str	r3, [r2, #64]	; 0x40
 800739c:	4b1d      	ldr	r3, [pc, #116]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80073a8:	e02d      	b.n	8007406 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C4)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a1b      	ldr	r2, [pc, #108]	; (800741c <HAL_I2C_MspInit+0xe8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d128      	bne.n	8007406 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80073b4:	4b17      	ldr	r3, [pc, #92]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 80073b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b8:	4a16      	ldr	r2, [pc, #88]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 80073ba:	f043 0308 	orr.w	r3, r3, #8
 80073be:	6313      	str	r3, [r2, #48]	; 0x30
 80073c0:	4b14      	ldr	r3, [pc, #80]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	613b      	str	r3, [r7, #16]
 80073ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80073cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80073d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073d2:	2312      	movs	r3, #18
 80073d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073d6:	2301      	movs	r3, #1
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073da:	2303      	movs	r3, #3
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80073de:	2304      	movs	r3, #4
 80073e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073e2:	f107 031c 	add.w	r3, r7, #28
 80073e6:	4619      	mov	r1, r3
 80073e8:	480d      	ldr	r0, [pc, #52]	; (8007420 <HAL_I2C_MspInit+0xec>)
 80073ea:	f002 f949 	bl	8009680 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80073ee:	4b09      	ldr	r3, [pc, #36]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	4a08      	ldr	r2, [pc, #32]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 80073f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073f8:	6413      	str	r3, [r2, #64]	; 0x40
 80073fa:	4b06      	ldr	r3, [pc, #24]	; (8007414 <HAL_I2C_MspInit+0xe0>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
}
 8007406:	bf00      	nop
 8007408:	3730      	adds	r7, #48	; 0x30
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	40005400 	.word	0x40005400
 8007414:	40023800 	.word	0x40023800
 8007418:	40020400 	.word	0x40020400
 800741c:	40006000 	.word	0x40006000
 8007420:	40020c00 	.word	0x40020c00

08007424 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a07      	ldr	r2, [pc, #28]	; (8007450 <HAL_RTC_MspInit+0x2c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d105      	bne.n	8007442 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007436:	4b07      	ldr	r3, [pc, #28]	; (8007454 <HAL_RTC_MspInit+0x30>)
 8007438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743a:	4a06      	ldr	r2, [pc, #24]	; (8007454 <HAL_RTC_MspInit+0x30>)
 800743c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007440:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40002800 	.word	0x40002800
 8007454:	40023800 	.word	0x40023800

08007458 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007460:	f107 0314 	add.w	r3, r7, #20
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a47      	ldr	r2, [pc, #284]	; (8007594 <HAL_SD_MspInit+0x13c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	f040 8088 	bne.w	800758c <HAL_SD_MspInit+0x134>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800747c:	4b46      	ldr	r3, [pc, #280]	; (8007598 <HAL_SD_MspInit+0x140>)
 800747e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007480:	4a45      	ldr	r2, [pc, #276]	; (8007598 <HAL_SD_MspInit+0x140>)
 8007482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007486:	6453      	str	r3, [r2, #68]	; 0x44
 8007488:	4b43      	ldr	r3, [pc, #268]	; (8007598 <HAL_SD_MspInit+0x140>)
 800748a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007494:	4b40      	ldr	r3, [pc, #256]	; (8007598 <HAL_SD_MspInit+0x140>)
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	4a3f      	ldr	r2, [pc, #252]	; (8007598 <HAL_SD_MspInit+0x140>)
 800749a:	f043 0304 	orr.w	r3, r3, #4
 800749e:	6313      	str	r3, [r2, #48]	; 0x30
 80074a0:	4b3d      	ldr	r3, [pc, #244]	; (8007598 <HAL_SD_MspInit+0x140>)
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80074ac:	4b3a      	ldr	r3, [pc, #232]	; (8007598 <HAL_SD_MspInit+0x140>)
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	4a39      	ldr	r2, [pc, #228]	; (8007598 <HAL_SD_MspInit+0x140>)
 80074b2:	f043 0308 	orr.w	r3, r3, #8
 80074b6:	6313      	str	r3, [r2, #48]	; 0x30
 80074b8:	4b37      	ldr	r3, [pc, #220]	; (8007598 <HAL_SD_MspInit+0x140>)
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	60bb      	str	r3, [r7, #8]
 80074c2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80074c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80074c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ca:	2302      	movs	r3, #2
 80074cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074d2:	2303      	movs	r3, #3
 80074d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80074d6:	230c      	movs	r3, #12
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074da:	f107 0314 	add.w	r3, r7, #20
 80074de:	4619      	mov	r1, r3
 80074e0:	482e      	ldr	r0, [pc, #184]	; (800759c <HAL_SD_MspInit+0x144>)
 80074e2:	f002 f8cd 	bl	8009680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80074e6:	2304      	movs	r3, #4
 80074e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ea:	2302      	movs	r3, #2
 80074ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f2:	2303      	movs	r3, #3
 80074f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80074f6:	230c      	movs	r3, #12
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80074fa:	f107 0314 	add.w	r3, r7, #20
 80074fe:	4619      	mov	r1, r3
 8007500:	4827      	ldr	r0, [pc, #156]	; (80075a0 <HAL_SD_MspInit+0x148>)
 8007502:	f002 f8bd 	bl	8009680 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8007506:	4b27      	ldr	r3, [pc, #156]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007508:	4a27      	ldr	r2, [pc, #156]	; (80075a8 <HAL_SD_MspInit+0x150>)
 800750a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800750c:	4b25      	ldr	r3, [pc, #148]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 800750e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007512:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007514:	4b23      	ldr	r3, [pc, #140]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007516:	2240      	movs	r2, #64	; 0x40
 8007518:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800751a:	4b22      	ldr	r3, [pc, #136]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 800751c:	2200      	movs	r2, #0
 800751e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007520:	4b20      	ldr	r3, [pc, #128]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007526:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007528:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 800752a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800752e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007530:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007536:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8007538:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 800753a:	2220      	movs	r2, #32
 800753c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800753e:	4b19      	ldr	r3, [pc, #100]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007540:	2200      	movs	r2, #0
 8007542:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007544:	4b17      	ldr	r3, [pc, #92]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007546:	2204      	movs	r2, #4
 8007548:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800754a:	4b16      	ldr	r3, [pc, #88]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 800754c:	2203      	movs	r2, #3
 800754e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007550:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007552:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007558:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 800755a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800755e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8007560:	4810      	ldr	r0, [pc, #64]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007562:	f001 f889 	bl	8008678 <HAL_DMA_Init>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 800756c:	f7ff fc10 	bl	8006d90 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a0c      	ldr	r2, [pc, #48]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007574:	63da      	str	r2, [r3, #60]	; 0x3c
 8007576:	4a0b      	ldr	r2, [pc, #44]	; (80075a4 <HAL_SD_MspInit+0x14c>)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800757c:	2200      	movs	r2, #0
 800757e:	2100      	movs	r1, #0
 8007580:	2031      	movs	r0, #49	; 0x31
 8007582:	f001 f842 	bl	800860a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8007586:	2031      	movs	r0, #49	; 0x31
 8007588:	f001 f85b 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800758c:	bf00      	nop
 800758e:	3728      	adds	r7, #40	; 0x28
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40012c00 	.word	0x40012c00
 8007598:	40023800 	.word	0x40023800
 800759c:	40020800 	.word	0x40020800
 80075a0:	40020c00 	.word	0x40020c00
 80075a4:	20003460 	.word	0x20003460
 80075a8:	40026458 	.word	0x40026458

080075ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08e      	sub	sp, #56	; 0x38
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	605a      	str	r2, [r3, #4]
 80075be:	609a      	str	r2, [r3, #8]
 80075c0:	60da      	str	r2, [r3, #12]
 80075c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a7e      	ldr	r2, [pc, #504]	; (80077c4 <HAL_SPI_MspInit+0x218>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	f040 80c7 	bne.w	800775e <HAL_SPI_MspInit+0x1b2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80075d0:	4b7d      	ldr	r3, [pc, #500]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 80075d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d4:	4a7c      	ldr	r2, [pc, #496]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 80075d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075da:	6453      	str	r3, [r2, #68]	; 0x44
 80075dc:	4b7a      	ldr	r3, [pc, #488]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 80075de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075e4:	623b      	str	r3, [r7, #32]
 80075e6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075e8:	4b77      	ldr	r3, [pc, #476]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	4a76      	ldr	r2, [pc, #472]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 80075ee:	f043 0301 	orr.w	r3, r3, #1
 80075f2:	6313      	str	r3, [r2, #48]	; 0x30
 80075f4:	4b74      	ldr	r3, [pc, #464]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007600:	4b71      	ldr	r3, [pc, #452]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 8007602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007604:	4a70      	ldr	r2, [pc, #448]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 8007606:	f043 0308 	orr.w	r3, r3, #8
 800760a:	6313      	str	r3, [r2, #48]	; 0x30
 800760c:	4b6e      	ldr	r3, [pc, #440]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	61bb      	str	r3, [r7, #24]
 8007616:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007618:	4b6b      	ldr	r3, [pc, #428]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	4a6a      	ldr	r2, [pc, #424]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 800761e:	f043 0302 	orr.w	r3, r3, #2
 8007622:	6313      	str	r3, [r2, #48]	; 0x30
 8007624:	4b68      	ldr	r3, [pc, #416]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007630:	2320      	movs	r3, #32
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007634:	2302      	movs	r3, #2
 8007636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007638:	2300      	movs	r3, #0
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800763c:	2303      	movs	r3, #3
 800763e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007640:	2305      	movs	r3, #5
 8007642:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007648:	4619      	mov	r1, r3
 800764a:	4860      	ldr	r0, [pc, #384]	; (80077cc <HAL_SPI_MspInit+0x220>)
 800764c:	f002 f818 	bl	8009680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007650:	2380      	movs	r3, #128	; 0x80
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007654:	2302      	movs	r3, #2
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007658:	2300      	movs	r3, #0
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800765c:	2303      	movs	r3, #3
 800765e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007660:	2305      	movs	r3, #5
 8007662:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007668:	4619      	mov	r1, r3
 800766a:	4859      	ldr	r0, [pc, #356]	; (80077d0 <HAL_SPI_MspInit+0x224>)
 800766c:	f002 f808 	bl	8009680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007670:	2310      	movs	r3, #16
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007674:	2302      	movs	r3, #2
 8007676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007678:	2300      	movs	r3, #0
 800767a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800767c:	2303      	movs	r3, #3
 800767e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007680:	2305      	movs	r3, #5
 8007682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007688:	4619      	mov	r1, r3
 800768a:	4852      	ldr	r0, [pc, #328]	; (80077d4 <HAL_SPI_MspInit+0x228>)
 800768c:	f001 fff8 	bl	8009680 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8007690:	4b51      	ldr	r3, [pc, #324]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 8007692:	4a52      	ldr	r2, [pc, #328]	; (80077dc <HAL_SPI_MspInit+0x230>)
 8007694:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8007696:	4b50      	ldr	r3, [pc, #320]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 8007698:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800769c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800769e:	4b4e      	ldr	r3, [pc, #312]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076a4:	4b4c      	ldr	r3, [pc, #304]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80076aa:	4b4b      	ldr	r3, [pc, #300]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076b2:	4b49      	ldr	r3, [pc, #292]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076b8:	4b47      	ldr	r3, [pc, #284]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80076be:	4b46      	ldr	r3, [pc, #280]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80076c4:	4b44      	ldr	r3, [pc, #272]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80076ca:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80076cc:	4b42      	ldr	r3, [pc, #264]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80076d2:	4841      	ldr	r0, [pc, #260]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076d4:	f000 ffd0 	bl	8008678 <HAL_DMA_Init>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <HAL_SPI_MspInit+0x136>
    {
      Error_Handler();
 80076de:	f7ff fb57 	bl	8006d90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a3c      	ldr	r2, [pc, #240]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076e6:	659a      	str	r2, [r3, #88]	; 0x58
 80076e8:	4a3b      	ldr	r2, [pc, #236]	; (80077d8 <HAL_SPI_MspInit+0x22c>)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80076ee:	4b3c      	ldr	r3, [pc, #240]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 80076f0:	4a3c      	ldr	r2, [pc, #240]	; (80077e4 <HAL_SPI_MspInit+0x238>)
 80076f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80076f4:	4b3a      	ldr	r3, [pc, #232]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 80076f6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80076fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076fc:	4b38      	ldr	r3, [pc, #224]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 80076fe:	2240      	movs	r2, #64	; 0x40
 8007700:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007702:	4b37      	ldr	r3, [pc, #220]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 8007704:	2200      	movs	r2, #0
 8007706:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007708:	4b35      	ldr	r3, [pc, #212]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 800770a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800770e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007710:	4b33      	ldr	r3, [pc, #204]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 8007712:	2200      	movs	r2, #0
 8007714:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007716:	4b32      	ldr	r3, [pc, #200]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 8007718:	2200      	movs	r2, #0
 800771a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800771c:	4b30      	ldr	r3, [pc, #192]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 800771e:	2200      	movs	r2, #0
 8007720:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007722:	4b2f      	ldr	r3, [pc, #188]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 8007724:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007728:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800772a:	4b2d      	ldr	r3, [pc, #180]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 800772c:	2200      	movs	r2, #0
 800772e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007730:	482b      	ldr	r0, [pc, #172]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 8007732:	f000 ffa1 	bl	8008678 <HAL_DMA_Init>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <HAL_SPI_MspInit+0x194>
    {
      Error_Handler();
 800773c:	f7ff fb28 	bl	8006d90 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a27      	ldr	r2, [pc, #156]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 8007744:	655a      	str	r2, [r3, #84]	; 0x54
 8007746:	4a26      	ldr	r2, [pc, #152]	; (80077e0 <HAL_SPI_MspInit+0x234>)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 800774c:	2200      	movs	r2, #0
 800774e:	2103      	movs	r1, #3
 8007750:	2023      	movs	r0, #35	; 0x23
 8007752:	f000 ff5a 	bl	800860a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007756:	2023      	movs	r0, #35	; 0x23
 8007758:	f000 ff73 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800775c:	e02d      	b.n	80077ba <HAL_SPI_MspInit+0x20e>
  else if(hspi->Instance==SPI4)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a21      	ldr	r2, [pc, #132]	; (80077e8 <HAL_SPI_MspInit+0x23c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d128      	bne.n	80077ba <HAL_SPI_MspInit+0x20e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007768:	4b17      	ldr	r3, [pc, #92]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 800776a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776c:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 800776e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007772:	6453      	str	r3, [r2, #68]	; 0x44
 8007774:	4b14      	ldr	r3, [pc, #80]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 8007776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007780:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 8007786:	f043 0310 	orr.w	r3, r3, #16
 800778a:	6313      	str	r3, [r2, #48]	; 0x30
 800778c:	4b0e      	ldr	r3, [pc, #56]	; (80077c8 <HAL_SPI_MspInit+0x21c>)
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8007798:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800779e:	2302      	movs	r3, #2
 80077a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077a6:	2303      	movs	r3, #3
 80077a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80077aa:	2305      	movs	r3, #5
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077b2:	4619      	mov	r1, r3
 80077b4:	480d      	ldr	r0, [pc, #52]	; (80077ec <HAL_SPI_MspInit+0x240>)
 80077b6:	f001 ff63 	bl	8009680 <HAL_GPIO_Init>
}
 80077ba:	bf00      	nop
 80077bc:	3738      	adds	r7, #56	; 0x38
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40013000 	.word	0x40013000
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40020000 	.word	0x40020000
 80077d0:	40020c00 	.word	0x40020c00
 80077d4:	40020400 	.word	0x40020400
 80077d8:	20011ee4 	.word	0x20011ee4
 80077dc:	40026410 	.word	0x40026410
 80077e0:	20007508 	.word	0x20007508
 80077e4:	40026488 	.word	0x40026488
 80077e8:	40013400 	.word	0x40013400
 80077ec:	40021000 	.word	0x40021000

080077f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a25      	ldr	r2, [pc, #148]	; (8007894 <HAL_TIM_Base_MspInit+0xa4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10c      	bne.n	800781c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007802:	4b25      	ldr	r3, [pc, #148]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	4a24      	ldr	r2, [pc, #144]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 8007808:	f043 0304 	orr.w	r3, r3, #4
 800780c:	6413      	str	r3, [r2, #64]	; 0x40
 800780e:	4b22      	ldr	r3, [pc, #136]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800781a:	e034      	b.n	8007886 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1e      	ldr	r2, [pc, #120]	; (800789c <HAL_TIM_Base_MspInit+0xac>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d10c      	bne.n	8007840 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007826:	4b1c      	ldr	r3, [pc, #112]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	4a1b      	ldr	r2, [pc, #108]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 800782c:	f043 0308 	orr.w	r3, r3, #8
 8007830:	6413      	str	r3, [r2, #64]	; 0x40
 8007832:	4b19      	ldr	r3, [pc, #100]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	693b      	ldr	r3, [r7, #16]
}
 800783e:	e022      	b.n	8007886 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a16      	ldr	r2, [pc, #88]	; (80078a0 <HAL_TIM_Base_MspInit+0xb0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d10c      	bne.n	8007864 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800784a:	4b13      	ldr	r3, [pc, #76]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	4a12      	ldr	r2, [pc, #72]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 8007850:	f043 0320 	orr.w	r3, r3, #32
 8007854:	6413      	str	r3, [r2, #64]	; 0x40
 8007856:	4b10      	ldr	r3, [pc, #64]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
}
 8007862:	e010      	b.n	8007886 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM14)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <HAL_TIM_Base_MspInit+0xb4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d10b      	bne.n	8007886 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800786e:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	4a09      	ldr	r2, [pc, #36]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 8007874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007878:	6413      	str	r3, [r2, #64]	; 0x40
 800787a:	4b07      	ldr	r3, [pc, #28]	; (8007898 <HAL_TIM_Base_MspInit+0xa8>)
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	60bb      	str	r3, [r7, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40000800 	.word	0x40000800
 8007898:	40023800 	.word	0x40023800
 800789c:	40000c00 	.word	0x40000c00
 80078a0:	40001400 	.word	0x40001400
 80078a4:	40002000 	.word	0x40002000

080078a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08c      	sub	sp, #48	; 0x30
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b0:	f107 031c 	add.w	r3, r7, #28
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	609a      	str	r2, [r3, #8]
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a9f      	ldr	r2, [pc, #636]	; (8007b44 <HAL_UART_MspInit+0x29c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	f040 809a 	bne.w	8007a00 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80078cc:	4b9e      	ldr	r3, [pc, #632]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	4a9d      	ldr	r2, [pc, #628]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 80078d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078d6:	6413      	str	r3, [r2, #64]	; 0x40
 80078d8:	4b9b      	ldr	r3, [pc, #620]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80078e4:	4b98      	ldr	r3, [pc, #608]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 80078e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e8:	4a97      	ldr	r2, [pc, #604]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 80078ea:	f043 0310 	orr.w	r3, r3, #16
 80078ee:	6313      	str	r3, [r2, #48]	; 0x30
 80078f0:	4b95      	ldr	r3, [pc, #596]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80078fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007902:	2302      	movs	r3, #2
 8007904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007906:	2300      	movs	r3, #0
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800790a:	2303      	movs	r3, #3
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800790e:	2308      	movs	r3, #8
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007912:	f107 031c 	add.w	r3, r7, #28
 8007916:	4619      	mov	r1, r3
 8007918:	488c      	ldr	r0, [pc, #560]	; (8007b4c <HAL_UART_MspInit+0x2a4>)
 800791a:	f001 feb1 	bl	8009680 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream1;
 800791e:	4b8c      	ldr	r3, [pc, #560]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007920:	4a8c      	ldr	r2, [pc, #560]	; (8007b54 <HAL_UART_MspInit+0x2ac>)
 8007922:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 8007924:	4b8a      	ldr	r3, [pc, #552]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007926:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800792a:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800792c:	4b88      	ldr	r3, [pc, #544]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 800792e:	2240      	movs	r2, #64	; 0x40
 8007930:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007932:	4b87      	ldr	r3, [pc, #540]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007934:	2200      	movs	r2, #0
 8007936:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007938:	4b85      	ldr	r3, [pc, #532]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 800793a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800793e:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007940:	4b83      	ldr	r3, [pc, #524]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007942:	2200      	movs	r2, #0
 8007944:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007946:	4b82      	ldr	r3, [pc, #520]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007948:	2200      	movs	r2, #0
 800794a:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800794c:	4b80      	ldr	r3, [pc, #512]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 800794e:	2200      	movs	r2, #0
 8007950:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007952:	4b7f      	ldr	r3, [pc, #508]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007954:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007958:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800795a:	4b7d      	ldr	r3, [pc, #500]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 800795c:	2204      	movs	r2, #4
 800795e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007960:	4b7b      	ldr	r3, [pc, #492]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007962:	2203      	movs	r2, #3
 8007964:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007966:	4b7a      	ldr	r3, [pc, #488]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007968:	2200      	movs	r2, #0
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800796c:	4b78      	ldr	r3, [pc, #480]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 800796e:	2200      	movs	r2, #0
 8007970:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8007972:	4877      	ldr	r0, [pc, #476]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007974:	f000 fe80 	bl	8008678 <HAL_DMA_Init>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <HAL_UART_MspInit+0xda>
    {
      Error_Handler();
 800797e:	f7ff fa07 	bl	8006d90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a72      	ldr	r2, [pc, #456]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 8007986:	669a      	str	r2, [r3, #104]	; 0x68
 8007988:	4a71      	ldr	r2, [pc, #452]	; (8007b50 <HAL_UART_MspInit+0x2a8>)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800798e:	4b72      	ldr	r3, [pc, #456]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 8007990:	4a72      	ldr	r2, [pc, #456]	; (8007b5c <HAL_UART_MspInit+0x2b4>)
 8007992:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8007994:	4b70      	ldr	r3, [pc, #448]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 8007996:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800799a:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800799c:	4b6e      	ldr	r3, [pc, #440]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 800799e:	2200      	movs	r2, #0
 80079a0:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079a2:	4b6d      	ldr	r3, [pc, #436]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079a8:	4b6b      	ldr	r3, [pc, #428]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079ae:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079b0:	4b69      	ldr	r3, [pc, #420]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079b6:	4b68      	ldr	r3, [pc, #416]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80079bc:	4b66      	ldr	r3, [pc, #408]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079c2:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80079c4:	4b64      	ldr	r3, [pc, #400]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80079ca:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80079cc:	4b62      	ldr	r3, [pc, #392]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80079d2:	4861      	ldr	r0, [pc, #388]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079d4:	f000 fe50 	bl	8008678 <HAL_DMA_Init>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80079de:	f7ff f9d7 	bl	8006d90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a5c      	ldr	r2, [pc, #368]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80079e8:	4a5b      	ldr	r2, [pc, #364]	; (8007b58 <HAL_UART_MspInit+0x2b0>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2105      	movs	r1, #5
 80079f2:	2052      	movs	r0, #82	; 0x52
 80079f4:	f000 fe09 	bl	800860a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80079f8:	2052      	movs	r0, #82	; 0x52
 80079fa:	f000 fe22 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80079fe:	e09d      	b.n	8007b3c <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART6)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a56      	ldr	r2, [pc, #344]	; (8007b60 <HAL_UART_MspInit+0x2b8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	f040 8098 	bne.w	8007b3c <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007a0c:	4b4e      	ldr	r3, [pc, #312]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 8007a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a10:	4a4d      	ldr	r2, [pc, #308]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 8007a12:	f043 0320 	orr.w	r3, r3, #32
 8007a16:	6453      	str	r3, [r2, #68]	; 0x44
 8007a18:	4b4b      	ldr	r3, [pc, #300]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 8007a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a24:	4b48      	ldr	r3, [pc, #288]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	4a47      	ldr	r2, [pc, #284]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 8007a2a:	f043 0304 	orr.w	r3, r3, #4
 8007a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8007a30:	4b45      	ldr	r3, [pc, #276]	; (8007b48 <HAL_UART_MspInit+0x2a0>)
 8007a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007a3c:	23c0      	movs	r3, #192	; 0xc0
 8007a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a40:	2302      	movs	r3, #2
 8007a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007a4c:	2308      	movs	r3, #8
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a50:	f107 031c 	add.w	r3, r7, #28
 8007a54:	4619      	mov	r1, r3
 8007a56:	4843      	ldr	r0, [pc, #268]	; (8007b64 <HAL_UART_MspInit+0x2bc>)
 8007a58:	f001 fe12 	bl	8009680 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007a5c:	4b42      	ldr	r3, [pc, #264]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a5e:	4a43      	ldr	r2, [pc, #268]	; (8007b6c <HAL_UART_MspInit+0x2c4>)
 8007a60:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007a62:	4b41      	ldr	r3, [pc, #260]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a64:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007a68:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a6a:	4b3f      	ldr	r3, [pc, #252]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a70:	4b3d      	ldr	r3, [pc, #244]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007a76:	4b3c      	ldr	r3, [pc, #240]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a7c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007a7e:	4b3a      	ldr	r3, [pc, #232]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007a84:	4b38      	ldr	r3, [pc, #224]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007a8a:	4b37      	ldr	r3, [pc, #220]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a90:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007a92:	4b35      	ldr	r3, [pc, #212]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007a98:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007a9a:	4b33      	ldr	r3, [pc, #204]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007aa0:	4831      	ldr	r0, [pc, #196]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007aa2:	f000 fde9 	bl	8008678 <HAL_DMA_Init>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <HAL_UART_MspInit+0x208>
      Error_Handler();
 8007aac:	f7ff f970 	bl	8006d90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a2d      	ldr	r2, [pc, #180]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007ab4:	66da      	str	r2, [r3, #108]	; 0x6c
 8007ab6:	4a2c      	ldr	r2, [pc, #176]	; (8007b68 <HAL_UART_MspInit+0x2c0>)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007abc:	4b2c      	ldr	r3, [pc, #176]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007abe:	4a2d      	ldr	r2, [pc, #180]	; (8007b74 <HAL_UART_MspInit+0x2cc>)
 8007ac0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8007ac2:	4b2b      	ldr	r3, [pc, #172]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007ac4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007ac8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007aca:	4b29      	ldr	r3, [pc, #164]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007acc:	2240      	movs	r2, #64	; 0x40
 8007ace:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ad0:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007ad6:	4b26      	ldr	r3, [pc, #152]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007adc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ae4:	4b22      	ldr	r3, [pc, #136]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8007aea:	4b21      	ldr	r3, [pc, #132]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007af0:	4b1f      	ldr	r3, [pc, #124]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007af2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007af6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007af8:	4b1d      	ldr	r3, [pc, #116]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007afa:	2204      	movs	r2, #4
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007afe:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007b00:	2203      	movs	r2, #3
 8007b02:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007b04:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007b0a:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007b10:	4817      	ldr	r0, [pc, #92]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007b12:	f000 fdb1 	bl	8008678 <HAL_DMA_Init>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_UART_MspInit+0x278>
      Error_Handler();
 8007b1c:	f7ff f938 	bl	8006d90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a13      	ldr	r2, [pc, #76]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007b24:	669a      	str	r2, [r3, #104]	; 0x68
 8007b26:	4a12      	ldr	r2, [pc, #72]	; (8007b70 <HAL_UART_MspInit+0x2c8>)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	2047      	movs	r0, #71	; 0x47
 8007b32:	f000 fd6a 	bl	800860a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007b36:	2047      	movs	r0, #71	; 0x47
 8007b38:	f000 fd83 	bl	8008642 <HAL_NVIC_EnableIRQ>
}
 8007b3c:	bf00      	nop
 8007b3e:	3730      	adds	r7, #48	; 0x30
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40007800 	.word	0x40007800
 8007b48:	40023800 	.word	0x40023800
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	2000cc5c 	.word	0x2000cc5c
 8007b54:	40026028 	.word	0x40026028
 8007b58:	200034c4 	.word	0x200034c4
 8007b5c:	40026058 	.word	0x40026058
 8007b60:	40011400 	.word	0x40011400
 8007b64:	40020800 	.word	0x40020800
 8007b68:	200075cc 	.word	0x200075cc
 8007b6c:	40026428 	.word	0x40026428
 8007b70:	200127e8 	.word	0x200127e8
 8007b74:	400264a0 	.word	0x400264a0

08007b78 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007b7c:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <SDTimer_Handler+0x40>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d006      	beq.n	8007b94 <SDTimer_Handler+0x1c>
    Timer1--;
 8007b86:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <SDTimer_Handler+0x40>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <SDTimer_Handler+0x40>)
 8007b92:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8007b94:	4b09      	ldr	r3, [pc, #36]	; (8007bbc <SDTimer_Handler+0x44>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d006      	beq.n	8007bac <SDTimer_Handler+0x34>
    Timer2--;
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <SDTimer_Handler+0x44>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	4b04      	ldr	r3, [pc, #16]	; (8007bbc <SDTimer_Handler+0x44>)
 8007baa:	701a      	strb	r2, [r3, #0]
}
 8007bac:	bf00      	nop
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20014950 	.word	0x20014950
 8007bbc:	20014951 	.word	0x20014951

08007bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007bc4:	bf00      	nop
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007bd2:	e7fe      	b.n	8007bd2 <HardFault_Handler+0x4>

08007bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007bd8:	e7fe      	b.n	8007bd8 <MemManage_Handler+0x4>

08007bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007bde:	e7fe      	b.n	8007bde <BusFault_Handler+0x4>

08007be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007be4:	e7fe      	b.n	8007be4 <UsageFault_Handler+0x4>

08007be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007be6:	b480      	push	{r7}
 8007be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007bea:	bf00      	nop
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007bf8:	bf00      	nop
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c02:	b480      	push	{r7}
 8007c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c06:	bf00      	nop
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <SysTick_Handler+0x30>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <SysTick_Handler+0x30>)
 8007c20:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 8007c22:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <SysTick_Handler+0x30>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	d904      	bls.n	8007c36 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <SysTick_Handler+0x30>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8007c32:	f7ff ffa1 	bl	8007b78 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c36:	f000 fbc9 	bl	80083cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c3a:	bf00      	nop
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000374 	.word	0x20000374

08007c44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007c48:	2001      	movs	r0, #1
 8007c4a:	f001 ff11 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007c4e:	bf00      	nop
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8007c56:	2002      	movs	r0, #2
 8007c58:	f001 ff0a 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007c5c:	bf00      	nop
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007c64:	2004      	movs	r0, #4
 8007c66:	f001 ff03 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007c6a:	bf00      	nop
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007c72:	2008      	movs	r0, #8
 8007c74:	f001 fefc 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007c78:	bf00      	nop
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007c80:	2010      	movs	r0, #16
 8007c82:	f001 fef5 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007c86:	bf00      	nop
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8007c90:	4802      	ldr	r0, [pc, #8]	; (8007c9c <DMA1_Stream1_IRQHandler+0x10>)
 8007c92:	f000 fe21 	bl	80088d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007c96:	bf00      	nop
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	2000cc5c 	.word	0x2000cc5c

08007ca0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8007ca4:	4802      	ldr	r0, [pc, #8]	; (8007cb0 <DMA1_Stream3_IRQHandler+0x10>)
 8007ca6:	f000 fe17 	bl	80088d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8007caa:	bf00      	nop
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200034c4 	.word	0x200034c4

08007cb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007cb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007cbc:	f001 fed8 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8007cc0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007cc4:	f001 fed4 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007cc8:	bf00      	nop
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007cd0:	4802      	ldr	r0, [pc, #8]	; (8007cdc <SPI1_IRQHandler+0x10>)
 8007cd2:	f008 faa3 	bl	801021c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007cd6:	bf00      	nop
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	200057b8 	.word	0x200057b8

08007ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007ce4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007ce8:	f001 fec2 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007cec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007cf0:	f001 febe 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007cf4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007cf8:	f001 feba 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007cfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d00:	f001 feb6 	bl	8009a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007d04:	bf00      	nop
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8007d0c:	4802      	ldr	r0, [pc, #8]	; (8007d18 <SDMMC1_IRQHandler+0x10>)
 8007d0e:	f006 fc5b 	bl	800e5c8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8007d12:	bf00      	nop
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20002fbc 	.word	0x20002fbc

08007d1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007d20:	4802      	ldr	r0, [pc, #8]	; (8007d2c <DMA2_Stream0_IRQHandler+0x10>)
 8007d22:	f000 fdd9 	bl	80088d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007d26:	bf00      	nop
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20011ee4 	.word	0x20011ee4

08007d30 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007d34:	4802      	ldr	r0, [pc, #8]	; (8007d40 <DMA2_Stream1_IRQHandler+0x10>)
 8007d36:	f000 fdcf 	bl	80088d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007d3a:	bf00      	nop
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200075cc 	.word	0x200075cc

08007d44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8007d48:	4802      	ldr	r0, [pc, #8]	; (8007d54 <DMA2_Stream3_IRQHandler+0x10>)
 8007d4a:	f000 fdc5 	bl	80088d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007d4e:	bf00      	nop
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20003460 	.word	0x20003460

08007d58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007d5c:	4802      	ldr	r0, [pc, #8]	; (8007d68 <OTG_FS_IRQHandler+0x10>)
 8007d5e:	f002 f92f 	bl	8009fc0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007d62:	bf00      	nop
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20019a74 	.word	0x20019a74

08007d6c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007d70:	4802      	ldr	r0, [pc, #8]	; (8007d7c <DMA2_Stream5_IRQHandler+0x10>)
 8007d72:	f000 fdb1 	bl	80088d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8007d76:	bf00      	nop
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20007508 	.word	0x20007508

08007d80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8007d84:	4802      	ldr	r0, [pc, #8]	; (8007d90 <DMA2_Stream6_IRQHandler+0x10>)
 8007d86:	f000 fda7 	bl	80088d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007d8a:	bf00      	nop
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	200127e8 	.word	0x200127e8

08007d94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007d98:	4809      	ldr	r0, [pc, #36]	; (8007dc0 <USART6_IRQHandler+0x2c>)
 8007d9a:	f009 fbd7 	bl	801154c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE))
 8007d9e:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <USART6_IRQHandler+0x2c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d106      	bne.n	8007dba <USART6_IRQHandler+0x26>

  {

	  HAL_UART_RxCpltCallback (&huart6);
 8007dac:	4804      	ldr	r0, [pc, #16]	; (8007dc0 <USART6_IRQHandler+0x2c>)
 8007dae:	f000 fa57 	bl	8008260 <HAL_UART_RxCpltCallback>

	  __HAL_UART_CLEAR_IDLEFLAG (&huart6);
 8007db2:	4b03      	ldr	r3, [pc, #12]	; (8007dc0 <USART6_IRQHandler+0x2c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2210      	movs	r2, #16
 8007db8:	621a      	str	r2, [r3, #32]

  }
  /* USER CODE END USART6_IRQn 1 */
}
 8007dba:	bf00      	nop
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20011dec 	.word	0x20011dec

08007dc4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8007dc8:	4809      	ldr	r0, [pc, #36]	; (8007df0 <UART7_IRQHandler+0x2c>)
 8007dca:	f009 fbbf 	bl	801154c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */
  if (__HAL_UART_GET_FLAG (&huart7, UART_FLAG_IDLE))
 8007dce:	4b08      	ldr	r3, [pc, #32]	; (8007df0 <UART7_IRQHandler+0x2c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b10      	cmp	r3, #16
 8007dda:	d106      	bne.n	8007dea <UART7_IRQHandler+0x26>

  {

	  HAL_UART_RxCpltCallback (&huart7);
 8007ddc:	4804      	ldr	r0, [pc, #16]	; (8007df0 <UART7_IRQHandler+0x2c>)
 8007dde:	f000 fa3f 	bl	8008260 <HAL_UART_RxCpltCallback>

	  __HAL_UART_CLEAR_IDLEFLAG (&huart7);
 8007de2:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <UART7_IRQHandler+0x2c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2210      	movs	r2, #16
 8007de8:	621a      	str	r2, [r3, #32]

  }
  /* USER CODE END UART7_IRQn 1 */
}
 8007dea:	bf00      	nop
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20011d68 	.word	0x20011d68

08007df4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
	return 1;
 8007df8:	2301      	movs	r3, #1
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <_kill>:

int _kill(int pid, int sig)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007e0e:	f016 fa61 	bl	801e2d4 <__errno>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2216      	movs	r2, #22
 8007e16:	601a      	str	r2, [r3, #0]
	return -1;
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <_exit>:

void _exit (int status)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ffe7 	bl	8007e04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007e36:	e7fe      	b.n	8007e36 <_exit+0x12>

08007e38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e00a      	b.n	8007e60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007e4a:	f3af 8000 	nop.w
 8007e4e:	4601      	mov	r1, r0
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	60ba      	str	r2, [r7, #8]
 8007e56:	b2ca      	uxtb	r2, r1
 8007e58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	dbf0      	blt.n	8007e4a <_read+0x12>
	}

return len;
 8007e68:	687b      	ldr	r3, [r7, #4]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b086      	sub	sp, #24
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e7e:	2300      	movs	r3, #0
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	e009      	b.n	8007e98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	60ba      	str	r2, [r7, #8]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	3301      	adds	r3, #1
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	dbf1      	blt.n	8007e84 <_write+0x12>
	}
	return len;
 8007ea0:	687b      	ldr	r3, [r7, #4]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <_close>:

int _close(int file)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
	return -1;
 8007eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ed2:	605a      	str	r2, [r3, #4]
	return 0;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <_isatty>:

int _isatty(int file)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
	return 1;
 8007eea:	2301      	movs	r3, #1
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
	return 0;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007f1c:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <_sbrk+0x50>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <_sbrk+0x16>
		heap_end = &end;
 8007f24:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <_sbrk+0x50>)
 8007f26:	4a10      	ldr	r2, [pc, #64]	; (8007f68 <_sbrk+0x54>)
 8007f28:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007f2a:	4b0e      	ldr	r3, [pc, #56]	; (8007f64 <_sbrk+0x50>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007f30:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <_sbrk+0x50>)
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4413      	add	r3, r2
 8007f38:	466a      	mov	r2, sp
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d907      	bls.n	8007f4e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007f3e:	f016 f9c9 	bl	801e2d4 <__errno>
 8007f42:	4603      	mov	r3, r0
 8007f44:	220c      	movs	r2, #12
 8007f46:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4c:	e006      	b.n	8007f5c <_sbrk+0x48>
	}

	heap_end += incr;
 8007f4e:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <_sbrk+0x50>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4413      	add	r3, r2
 8007f56:	4a03      	ldr	r2, [pc, #12]	; (8007f64 <_sbrk+0x50>)
 8007f58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000378 	.word	0x20000378
 8007f68:	20019d48 	.word	0x20019d48

08007f6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007f70:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <SystemInit+0x28>)
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f76:	4a07      	ldr	r2, [pc, #28]	; (8007f94 <SystemInit+0x28>)
 8007f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <SystemInit+0x28>)
 8007f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f86:	609a      	str	r2, [r3, #8]
#endif
}
 8007f88:	bf00      	nop
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	e000ed00 	.word	0xe000ed00

08007f98 <UARTTXInit>:
extern uint8_t isReadyForNext;

//extern uint8_t processBuf[250];


void UARTTXInit(void) {
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
  ringbuff_init(&txRing,txBuf,UART_TX_RINGBUFF_SZ);
 8007f9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fa0:	4905      	ldr	r1, [pc, #20]	; (8007fb8 <UARTTXInit+0x20>)
 8007fa2:	4806      	ldr	r0, [pc, #24]	; (8007fbc <UARTTXInit+0x24>)
 8007fa4:	f7fe fefb 	bl	8006d9e <ringbuff_init>
  ringbuff_init(&txRing2,txBuf2,UART_TX_RINGBUFF_SZ_2);
 8007fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fac:	4904      	ldr	r1, [pc, #16]	; (8007fc0 <UARTTXInit+0x28>)
 8007fae:	4805      	ldr	r0, [pc, #20]	; (8007fc4 <UARTTXInit+0x2c>)
 8007fb0:	f7fe fef5 	bl	8006d9e <ringbuff_init>
}
 8007fb4:	bf00      	nop
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20008c5c 	.word	0x20008c5c
 8007fbc:	20011f44 	.word	0x20011f44
 8007fc0:	20006a50 	.word	0x20006a50
 8007fc4:	2000dd58 	.word	0x2000dd58

08007fc8 <UARTAddToTxBuff>:

void UARTAddToTxBuff(const void *data,u16 len) {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	807b      	strh	r3, [r7, #2]
  ringbuff_write(&txRing,data,len);
 8007fd4:	887b      	ldrh	r3, [r7, #2]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4804      	ldr	r0, [pc, #16]	; (8007fec <UARTAddToTxBuff+0x24>)
 8007fdc:	f7fe ff00 	bl	8006de0 <ringbuff_write>
  UARTTxData();
 8007fe0:	f000 f81a 	bl	8008018 <UARTTxData>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20011f44 	.word	0x20011f44

08007ff0 <UARTAddToTxBuff2>:

void UARTAddToTxBuff2(const void *data,u16 len) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	807b      	strh	r3, [r7, #2]
  ringbuff_write(&txRing2,data,len);
 8007ffc:	887b      	ldrh	r3, [r7, #2]
 8007ffe:	461a      	mov	r2, r3
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4804      	ldr	r0, [pc, #16]	; (8008014 <UARTAddToTxBuff2+0x24>)
 8008004:	f7fe feec 	bl	8006de0 <ringbuff_write>
  UARTTxData2();
 8008008:	f000 f82e 	bl	8008068 <UARTTxData2>
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	2000dd58 	.word	0x2000dd58

08008018 <UARTTxData>:


static void UARTTxData(void) {
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 800801e:	4b0f      	ldr	r3, [pc, #60]	; (800805c <UARTTxData+0x44>)
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d116      	bne.n	8008054 <UARTTxData+0x3c>
  txLen=ringbuff_get_linear_block_read_length(&txRing); //Get maximal length of buffer to read data as linear memory
 8008026:	480e      	ldr	r0, [pc, #56]	; (8008060 <UARTTxData+0x48>)
 8008028:	f7ff f82a 	bl	8007080 <ringbuff_get_linear_block_read_length>
 800802c:	4603      	mov	r3, r0
 800802e:	b29a      	uxth	r2, r3
 8008030:	4b0a      	ldr	r3, [pc, #40]	; (800805c <UARTTxData+0x44>)
 8008032:	801a      	strh	r2, [r3, #0]
  if(txLen){
 8008034:	4b09      	ldr	r3, [pc, #36]	; (800805c <UARTTxData+0x44>)
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <UARTTxData+0x3e>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing); // Get pointer to read memory
 800803c:	4808      	ldr	r0, [pc, #32]	; (8008060 <UARTTxData+0x48>)
 800803e:	f7ff f803 	bl	8007048 <ringbuff_get_linear_block_read_address>
 8008042:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart6,ringData,txLen); // Start DMA transfer
 8008044:	4b05      	ldr	r3, [pc, #20]	; (800805c <UARTTxData+0x44>)
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	4805      	ldr	r0, [pc, #20]	; (8008064 <UARTTxData+0x4c>)
 800804e:	f009 f97d 	bl	801134c <HAL_UART_Transmit_DMA>
 8008052:	e000      	b.n	8008056 <UARTTxData+0x3e>
  if(txLen) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 8008054:	bf00      	nop
  }
}
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	200059b4 	.word	0x200059b4
 8008060:	20011f44 	.word	0x20011f44
 8008064:	20011dec 	.word	0x20011dec

08008068 <UARTTxData2>:

static void UARTTxData2(void) {
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 800806e:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <UARTTxData2+0x44>)
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d116      	bne.n	80080a4 <UARTTxData2+0x3c>
  txLen2=ringbuff_get_linear_block_read_length(&txRing2); //Get maximal length of buffer to read data as linear memory
 8008076:	480e      	ldr	r0, [pc, #56]	; (80080b0 <UARTTxData2+0x48>)
 8008078:	f7ff f802 	bl	8007080 <ringbuff_get_linear_block_read_length>
 800807c:	4603      	mov	r3, r0
 800807e:	b29a      	uxth	r2, r3
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <UARTTxData2+0x44>)
 8008082:	801a      	strh	r2, [r3, #0]
  if(txLen2){
 8008084:	4b09      	ldr	r3, [pc, #36]	; (80080ac <UARTTxData2+0x44>)
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00c      	beq.n	80080a6 <UARTTxData2+0x3e>
   u16* ringData=ringbuff_get_linear_block_read_address(&txRing2); // Get pointer to read memory
 800808c:	4808      	ldr	r0, [pc, #32]	; (80080b0 <UARTTxData2+0x48>)
 800808e:	f7fe ffdb 	bl	8007048 <ringbuff_get_linear_block_read_address>
 8008092:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_DMA(&huart7,ringData,txLen2); // Start DMA transfer
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <UARTTxData2+0x44>)
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	4805      	ldr	r0, [pc, #20]	; (80080b4 <UARTTxData2+0x4c>)
 800809e:	f009 f955 	bl	801134c <HAL_UART_Transmit_DMA>
 80080a2:	e000      	b.n	80080a6 <UARTTxData2+0x3e>
  if(txLen2) return; //If len > 0, DMA transfer is on-going. This function will be called again at transfer completion
 80080a4:	bf00      	nop
  }
}
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	2000dd10 	.word	0x2000dd10
 80080b0:	2000dd58 	.word	0x2000dd58
 80080b4:	20011d68 	.word	0x20011d68

080080b8 <UARTTxComplete>:

void UARTTxComplete(void) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  if (txLen) {
 80080bc:	4b08      	ldr	r3, [pc, #32]	; (80080e0 <UARTTxComplete+0x28>)
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <UARTTxComplete+0x22>
   ringbuff_skip(&txRing,txLen); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 80080c4:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <UARTTxComplete+0x28>)
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	4619      	mov	r1, r3
 80080ca:	4806      	ldr	r0, [pc, #24]	; (80080e4 <UARTTxComplete+0x2c>)
 80080cc:	f7ff f80b 	bl	80070e6 <ringbuff_skip>
   txLen=0; // Reset length = DMA is not active
 80080d0:	4b03      	ldr	r3, [pc, #12]	; (80080e0 <UARTTxComplete+0x28>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	801a      	strh	r2, [r3, #0]
   UARTTxData(); // Try to send more
 80080d6:	f7ff ff9f 	bl	8008018 <UARTTxData>
  }
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200059b4 	.word	0x200059b4
 80080e4:	20011f44 	.word	0x20011f44

080080e8 <UARTTxComplete2>:

void UARTTxComplete2(void) {
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  if (txLen2) {
 80080ec:	4b08      	ldr	r3, [pc, #32]	; (8008110 <UARTTxComplete2+0x28>)
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <UARTTxComplete2+0x22>
   ringbuff_skip(&txRing2,txLen2); // Now skip the data (move read pointer) as they were successfully transferred over DMA
 80080f4:	4b06      	ldr	r3, [pc, #24]	; (8008110 <UARTTxComplete2+0x28>)
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	4619      	mov	r1, r3
 80080fa:	4806      	ldr	r0, [pc, #24]	; (8008114 <UARTTxComplete2+0x2c>)
 80080fc:	f7fe fff3 	bl	80070e6 <ringbuff_skip>
   txLen2=0; // Reset length = DMA is not active
 8008100:	4b03      	ldr	r3, [pc, #12]	; (8008110 <UARTTxComplete2+0x28>)
 8008102:	2200      	movs	r2, #0
 8008104:	801a      	strh	r2, [r3, #0]
   UARTTxData2(); // Try to send more
 8008106:	f7ff ffaf 	bl	8008068 <UARTTxData2>
  }
}
 800810a:	bf00      	nop
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	2000dd10 	.word	0x2000dd10
 8008114:	2000dd58 	.word	0x2000dd58

08008118 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	//isReadyForNext = 1;

  if (huart->Instance == USART6) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a15      	ldr	r2, [pc, #84]	; (800817c <HAL_UART_TxCpltCallback+0x64>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d10f      	bne.n	800814a <HAL_UART_TxCpltCallback+0x32>
	  isReadyForNext = 1;
 800812a:	4b15      	ldr	r3, [pc, #84]	; (8008180 <HAL_UART_TxCpltCallback+0x68>)
 800812c:	2201      	movs	r2, #1
 800812e:	701a      	strb	r2, [r3, #0]

	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800813e:	601a      	str	r2, [r3, #0]
	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2220      	movs	r2, #32
 8008144:	675a      	str	r2, [r3, #116]	; 0x74
	  UARTTxComplete();
 8008146:	f7ff ffb7 	bl	80080b8 <UARTTxComplete>
  }

  if (huart->Instance == UART7) {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a0d      	ldr	r2, [pc, #52]	; (8008184 <HAL_UART_TxCpltCallback+0x6c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d10f      	bne.n	8008174 <HAL_UART_TxCpltCallback+0x5c>
  	  isReadyForNext = 1;
 8008154:	4b0a      	ldr	r3, [pc, #40]	; (8008180 <HAL_UART_TxCpltCallback+0x68>)
 8008156:	2201      	movs	r2, #1
 8008158:	701a      	strb	r2, [r3, #0]

  	  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE)); // Disable TXEIE and TCIE interrupts
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008168:	601a      	str	r2, [r3, #0]
  	  huart->gState = HAL_UART_STATE_READY; // Tx process is ended, restore huart->gState to Ready
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2220      	movs	r2, #32
 800816e:	675a      	str	r2, [r3, #116]	; 0x74
  	  UARTTxComplete2();
 8008170:	f7ff ffba 	bl	80080e8 <UARTTxComplete2>
    }

}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40011400 	.word	0x40011400
 8008180:	20000002 	.word	0x20000002
 8008184:	40007800 	.word	0x40007800

08008188 <UARTRXInit>:

u8 rxBuf[UART_RX_RINGBUFF_SZ],rxLen;
ringbuff_t rxRing;
u16 rxLastPos,rxThisPos;

void UARTRXInit(void) {
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  ringbuff_init(&rxRing,rxBuf,UART_RX_RINGBUFF_SZ);
 800818c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008190:	4910      	ldr	r1, [pc, #64]	; (80081d4 <UARTRXInit+0x4c>)
 8008192:	4811      	ldr	r0, [pc, #68]	; (80081d8 <UARTRXInit+0x50>)
 8008194:	f7fe fe03 	bl	8006d9e <ringbuff_init>
  rxLastPos=0;
 8008198:	4b10      	ldr	r3, [pc, #64]	; (80081dc <UARTRXInit+0x54>)
 800819a:	2200      	movs	r2, #0
 800819c:	801a      	strh	r2, [r3, #0]
  rxThisPos=0;
 800819e:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <UARTRXInit+0x58>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	801a      	strh	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);   // enable idle line interrupt
 80081a4:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <UARTRXInit+0x5c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	4b0e      	ldr	r3, [pc, #56]	; (80081e4 <UARTRXInit+0x5c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 0210 	orr.w	r2, r2, #16
 80081b2:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Instance->CR &= ~DMA_SxCR_HTIE;  // disable uart half tx interrupt
 80081b4:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <UARTRXInit+0x60>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <UARTRXInit+0x60>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0208 	bic.w	r2, r2, #8
 80081c2:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart6,rxBuf,UART_RX_RINGBUFF_SZ);
 80081c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081c8:	4902      	ldr	r1, [pc, #8]	; (80081d4 <UARTRXInit+0x4c>)
 80081ca:	4806      	ldr	r0, [pc, #24]	; (80081e4 <UARTRXInit+0x5c>)
 80081cc:	f009 f93a 	bl	8011444 <HAL_UART_Receive_DMA>
}
 80081d0:	bf00      	nop
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20011fd8 	.word	0x20011fd8
 80081d8:	200127d8 	.word	0x200127d8
 80081dc:	20011ea8 	.word	0x20011ea8
 80081e0:	20011eb0 	.word	0x20011eb0
 80081e4:	20011dec 	.word	0x20011dec
 80081e8:	200075cc 	.word	0x200075cc

080081ec <UARTRxComplete>:

void UARTRxComplete(void) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
  u8 addr;
  u16 len;
  rxThisPos=UART_DMA_WRITE_PTR; //get current write pointer
 80081f2:	4b17      	ldr	r3, [pc, #92]	; (8008250 <UARTRxComplete+0x64>)
 80081f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8008200:	b29b      	uxth	r3, r3
 8008202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008206:	b29a      	uxth	r2, r3
 8008208:	4b12      	ldr	r3, [pc, #72]	; (8008254 <UARTRxComplete+0x68>)
 800820a:	801a      	strh	r2, [r3, #0]
  len=(rxThisPos-rxLastPos+UART_RX_RINGBUFF_SZ)%UART_RX_RINGBUFF_SZ; //calculate how far the DMA write pointer has moved
 800820c:	4b11      	ldr	r3, [pc, #68]	; (8008254 <UARTRxComplete+0x68>)
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	4b11      	ldr	r3, [pc, #68]	; (8008258 <UARTRxComplete+0x6c>)
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821c:	425a      	negs	r2, r3
 800821e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008222:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008226:	bf58      	it	pl
 8008228:	4253      	negpl	r3, r2
 800822a:	80fb      	strh	r3, [r7, #6]
  if(len<=UART_RX_MAX_MESSAGE_LEN) { //check message size
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008232:	d808      	bhi.n	8008246 <UARTRxComplete+0x5a>
   ringbuff_advance(&rxRing,len); //move the ring buffer write pointer
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	4619      	mov	r1, r3
 8008238:	4808      	ldr	r0, [pc, #32]	; (800825c <UARTRxComplete+0x70>)
 800823a:	f7fe ff89 	bl	8007150 <ringbuff_advance>
   rxLastPos=rxThisPos;
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <UARTRxComplete+0x68>)
 8008240:	881a      	ldrh	r2, [r3, #0]
 8008242:	4b05      	ldr	r3, [pc, #20]	; (8008258 <UARTRxComplete+0x6c>)
 8008244:	801a      	strh	r2, [r3, #0]
  }
  else {
    //while(1); //implement message to large exception
	  //HAL_Delay(10000);
  }
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20011dec 	.word	0x20011dec
 8008254:	20011eb0 	.word	0x20011eb0
 8008258:	20011ea8 	.word	0x20011ea8
 800825c:	200127d8 	.word	0x200127d8

08008260 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
	isWaitingForData = 0;
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <HAL_UART_RxCpltCallback+0x34>)
 800826a:	2200      	movs	r2, #0
 800826c:	701a      	strb	r2, [r3, #0]

  if (huart->Instance == USART6) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a09      	ldr	r2, [pc, #36]	; (8008298 <HAL_UART_RxCpltCallback+0x38>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d108      	bne.n	800828a <HAL_UART_RxCpltCallback+0x2a>
    if (__HAL_UART_GET_FLAG (&huart6, UART_FLAG_IDLE)) {
 8008278:	4b08      	ldr	r3, [pc, #32]	; (800829c <HAL_UART_RxCpltCallback+0x3c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	f003 0310 	and.w	r3, r3, #16
 8008282:	2b10      	cmp	r3, #16
 8008284:	d101      	bne.n	800828a <HAL_UART_RxCpltCallback+0x2a>
      UARTRxComplete();
 8008286:	f7ff ffb1 	bl	80081ec <UARTRxComplete>
    }
  }
}
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000001 	.word	0x20000001
 8008298:	40011400 	.word	0x40011400
 800829c:	20011dec 	.word	0x20011dec

080082a0 <UART_RX_Read>:

uint8_t UART_RX_Read(uint8_t *dataBuffer, uint8_t size){
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]

	return ringbuff_read(&rxRing, dataBuffer, size);
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	461a      	mov	r2, r3
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	4804      	ldr	r0, [pc, #16]	; (80082c4 <UART_RX_Read+0x24>)
 80082b4:	f7fe fdf8 	bl	8006ea8 <ringbuff_read>
 80082b8:	4603      	mov	r3, r0
 80082ba:	b2db      	uxtb	r3, r3

}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	200127d8 	.word	0x200127d8

080082c8 <UART_RX_AVAILABLE_BYTE>:

uint16_t UART_RX_AVAILABLE_BYTE(){
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0

	return ringbuff_get_full(&rxRing);
 80082cc:	4803      	ldr	r0, [pc, #12]	; (80082dc <UART_RX_AVAILABLE_BYTE+0x14>)
 80082ce:	f7fe fe86 	bl	8006fde <ringbuff_get_full>
 80082d2:	4603      	mov	r3, r0
 80082d4:	b29b      	uxth	r3, r3

}
 80082d6:	4618      	mov	r0, r3
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	200127d8 	.word	0x200127d8

080082e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80082e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80082e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80082e6:	e003      	b.n	80082f0 <LoopCopyDataInit>

080082e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80082e8:	4b0c      	ldr	r3, [pc, #48]	; (800831c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80082ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80082ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80082ee:	3104      	adds	r1, #4

080082f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80082f0:	480b      	ldr	r0, [pc, #44]	; (8008320 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80082f2:	4b0c      	ldr	r3, [pc, #48]	; (8008324 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80082f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80082f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80082f8:	d3f6      	bcc.n	80082e8 <CopyDataInit>
  ldr  r2, =_sbss
 80082fa:	4a0b      	ldr	r2, [pc, #44]	; (8008328 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80082fc:	e002      	b.n	8008304 <LoopFillZerobss>

080082fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80082fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008300:	f842 3b04 	str.w	r3, [r2], #4

08008304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008304:	4b09      	ldr	r3, [pc, #36]	; (800832c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008308:	d3f9      	bcc.n	80082fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800830a:	f7ff fe2f 	bl	8007f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800830e:	f015 ffe7 	bl	801e2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008312:	f7fd fbb1 	bl	8005a78 <main>
  bx  lr    
 8008316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008318:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800831c:	080246d4 	.word	0x080246d4
  ldr  r0, =_sdata
 8008320:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008324:	2000026c 	.word	0x2000026c
  ldr  r2, =_sbss
 8008328:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 800832c:	20019d48 	.word	0x20019d48

08008330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008330:	e7fe      	b.n	8008330 <ADC_IRQHandler>
	...

08008334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8008338:	4b0b      	ldr	r3, [pc, #44]	; (8008368 <HAL_Init+0x34>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a0a      	ldr	r2, [pc, #40]	; (8008368 <HAL_Init+0x34>)
 800833e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008342:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008344:	4b08      	ldr	r3, [pc, #32]	; (8008368 <HAL_Init+0x34>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a07      	ldr	r2, [pc, #28]	; (8008368 <HAL_Init+0x34>)
 800834a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800834e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008350:	2003      	movs	r0, #3
 8008352:	f000 f94f 	bl	80085f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008356:	2000      	movs	r0, #0
 8008358:	f000 f808 	bl	800836c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800835c:	f7fe ff2e 	bl	80071bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40023c00 	.word	0x40023c00

0800836c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008374:	4b12      	ldr	r3, [pc, #72]	; (80083c0 <HAL_InitTick+0x54>)
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <HAL_InitTick+0x58>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	4619      	mov	r1, r3
 800837e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008382:	fbb3 f3f1 	udiv	r3, r3, r1
 8008386:	fbb2 f3f3 	udiv	r3, r2, r3
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f967 	bl	800865e <HAL_SYSTICK_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e00e      	b.n	80083b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b0f      	cmp	r3, #15
 800839e:	d80a      	bhi.n	80083b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80083a0:	2200      	movs	r2, #0
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
 80083a8:	f000 f92f 	bl	800860a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80083ac:	4a06      	ldr	r2, [pc, #24]	; (80083c8 <HAL_InitTick+0x5c>)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	e000      	b.n	80083b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	2000005c 	.word	0x2000005c
 80083c4:	20000064 	.word	0x20000064
 80083c8:	20000060 	.word	0x20000060

080083cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80083d0:	4b06      	ldr	r3, [pc, #24]	; (80083ec <HAL_IncTick+0x20>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <HAL_IncTick+0x24>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4413      	add	r3, r2
 80083dc:	4a04      	ldr	r2, [pc, #16]	; (80083f0 <HAL_IncTick+0x24>)
 80083de:	6013      	str	r3, [r2, #0]
}
 80083e0:	bf00      	nop
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	20000064 	.word	0x20000064
 80083f0:	20014954 	.word	0x20014954

080083f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  return uwTick;
 80083f8:	4b03      	ldr	r3, [pc, #12]	; (8008408 <HAL_GetTick+0x14>)
 80083fa:	681b      	ldr	r3, [r3, #0]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20014954 	.word	0x20014954

0800840c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008414:	f7ff ffee 	bl	80083f4 <HAL_GetTick>
 8008418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008424:	d005      	beq.n	8008432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <HAL_Delay+0x44>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008432:	bf00      	nop
 8008434:	f7ff ffde 	bl	80083f4 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	429a      	cmp	r2, r3
 8008442:	d8f7      	bhi.n	8008434 <HAL_Delay+0x28>
  {
  }
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20000064 	.word	0x20000064

08008454 <__NVIC_SetPriorityGrouping>:
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008464:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <__NVIC_SetPriorityGrouping+0x40>)
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008470:	4013      	ands	r3, r2
 8008472:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800847c:	4b06      	ldr	r3, [pc, #24]	; (8008498 <__NVIC_SetPriorityGrouping+0x44>)
 800847e:	4313      	orrs	r3, r2
 8008480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008482:	4a04      	ldr	r2, [pc, #16]	; (8008494 <__NVIC_SetPriorityGrouping+0x40>)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	60d3      	str	r3, [r2, #12]
}
 8008488:	bf00      	nop
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	e000ed00 	.word	0xe000ed00
 8008498:	05fa0000 	.word	0x05fa0000

0800849c <__NVIC_GetPriorityGrouping>:
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80084a0:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <__NVIC_GetPriorityGrouping+0x18>)
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	0a1b      	lsrs	r3, r3, #8
 80084a6:	f003 0307 	and.w	r3, r3, #7
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	e000ed00 	.word	0xe000ed00

080084b8 <__NVIC_EnableIRQ>:
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	db0b      	blt.n	80084e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	f003 021f 	and.w	r2, r3, #31
 80084d0:	4907      	ldr	r1, [pc, #28]	; (80084f0 <__NVIC_EnableIRQ+0x38>)
 80084d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084d6:	095b      	lsrs	r3, r3, #5
 80084d8:	2001      	movs	r0, #1
 80084da:	fa00 f202 	lsl.w	r2, r0, r2
 80084de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	e000e100 	.word	0xe000e100

080084f4 <__NVIC_SetPriority>:
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	6039      	str	r1, [r7, #0]
 80084fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008504:	2b00      	cmp	r3, #0
 8008506:	db0a      	blt.n	800851e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	b2da      	uxtb	r2, r3
 800850c:	490c      	ldr	r1, [pc, #48]	; (8008540 <__NVIC_SetPriority+0x4c>)
 800850e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008512:	0112      	lsls	r2, r2, #4
 8008514:	b2d2      	uxtb	r2, r2
 8008516:	440b      	add	r3, r1
 8008518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800851c:	e00a      	b.n	8008534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	b2da      	uxtb	r2, r3
 8008522:	4908      	ldr	r1, [pc, #32]	; (8008544 <__NVIC_SetPriority+0x50>)
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	3b04      	subs	r3, #4
 800852c:	0112      	lsls	r2, r2, #4
 800852e:	b2d2      	uxtb	r2, r2
 8008530:	440b      	add	r3, r1
 8008532:	761a      	strb	r2, [r3, #24]
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	e000e100 	.word	0xe000e100
 8008544:	e000ed00 	.word	0xe000ed00

08008548 <NVIC_EncodePriority>:
{
 8008548:	b480      	push	{r7}
 800854a:	b089      	sub	sp, #36	; 0x24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	f1c3 0307 	rsb	r3, r3, #7
 8008562:	2b04      	cmp	r3, #4
 8008564:	bf28      	it	cs
 8008566:	2304      	movcs	r3, #4
 8008568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	3304      	adds	r3, #4
 800856e:	2b06      	cmp	r3, #6
 8008570:	d902      	bls.n	8008578 <NVIC_EncodePriority+0x30>
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	3b03      	subs	r3, #3
 8008576:	e000      	b.n	800857a <NVIC_EncodePriority+0x32>
 8008578:	2300      	movs	r3, #0
 800857a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800857c:	f04f 32ff 	mov.w	r2, #4294967295
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	43da      	mvns	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	401a      	ands	r2, r3
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008590:	f04f 31ff 	mov.w	r1, #4294967295
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	fa01 f303 	lsl.w	r3, r1, r3
 800859a:	43d9      	mvns	r1, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085a0:	4313      	orrs	r3, r2
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3724      	adds	r7, #36	; 0x24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
	...

080085b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085c0:	d301      	bcc.n	80085c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80085c2:	2301      	movs	r3, #1
 80085c4:	e00f      	b.n	80085e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085c6:	4a0a      	ldr	r2, [pc, #40]	; (80085f0 <SysTick_Config+0x40>)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80085ce:	210f      	movs	r1, #15
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
 80085d4:	f7ff ff8e 	bl	80084f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085d8:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <SysTick_Config+0x40>)
 80085da:	2200      	movs	r2, #0
 80085dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085de:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <SysTick_Config+0x40>)
 80085e0:	2207      	movs	r2, #7
 80085e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	e000e010 	.word	0xe000e010

080085f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff ff29 	bl	8008454 <__NVIC_SetPriorityGrouping>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800860a:	b580      	push	{r7, lr}
 800860c:	b086      	sub	sp, #24
 800860e:	af00      	add	r7, sp, #0
 8008610:	4603      	mov	r3, r0
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
 8008616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008618:	2300      	movs	r3, #0
 800861a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800861c:	f7ff ff3e 	bl	800849c <__NVIC_GetPriorityGrouping>
 8008620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	6978      	ldr	r0, [r7, #20]
 8008628:	f7ff ff8e 	bl	8008548 <NVIC_EncodePriority>
 800862c:	4602      	mov	r2, r0
 800862e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008632:	4611      	mov	r1, r2
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff ff5d 	bl	80084f4 <__NVIC_SetPriority>
}
 800863a:	bf00      	nop
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	4603      	mov	r3, r0
 800864a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800864c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff ff31 	bl	80084b8 <__NVIC_EnableIRQ>
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff ffa2 	bl	80085b0 <SysTick_Config>
 800866c:	4603      	mov	r3, r0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008684:	f7ff feb6 	bl	80083f4 <HAL_GetTick>
 8008688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e099      	b.n	80087c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0201 	bic.w	r2, r2, #1
 80086b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086b4:	e00f      	b.n	80086d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80086b6:	f7ff fe9d 	bl	80083f4 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b05      	cmp	r3, #5
 80086c2:	d908      	bls.n	80086d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2203      	movs	r2, #3
 80086ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e078      	b.n	80087c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e8      	bne.n	80086b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	4b38      	ldr	r3, [pc, #224]	; (80087d0 <HAL_DMA_Init+0x158>)
 80086f0:	4013      	ands	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800870e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800871a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	4313      	orrs	r3, r2
 8008726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b04      	cmp	r3, #4
 800872e:	d107      	bne.n	8008740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008738:	4313      	orrs	r3, r2
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	4313      	orrs	r3, r2
 800873e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f023 0307 	bic.w	r3, r3, #7
 8008756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	2b04      	cmp	r3, #4
 8008768:	d117      	bne.n	800879a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00e      	beq.n	800879a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fa99 	bl	8008cb4 <DMA_CheckFifoParam>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d008      	beq.n	800879a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2240      	movs	r2, #64	; 0x40
 800878c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008796:	2301      	movs	r3, #1
 8008798:	e016      	b.n	80087c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fa50 	bl	8008c48 <DMA_CalcBaseAndBitshift>
 80087a8:	4603      	mov	r3, r0
 80087aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b0:	223f      	movs	r2, #63	; 0x3f
 80087b2:	409a      	lsls	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	e010803f 	.word	0xe010803f

080087d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_DMA_Start_IT+0x26>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e048      	b.n	800888c <HAL_DMA_Start_IT+0xb8>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b01      	cmp	r3, #1
 800880c:	d137      	bne.n	800887e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2202      	movs	r2, #2
 8008812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f9e2 	bl	8008bec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800882c:	223f      	movs	r2, #63	; 0x3f
 800882e:	409a      	lsls	r2, r3
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0216 	orr.w	r2, r2, #22
 8008842:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695a      	ldr	r2, [r3, #20]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008852:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008858:	2b00      	cmp	r3, #0
 800885a:	d007      	beq.n	800886c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0208 	orr.w	r2, r2, #8
 800886a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e005      	b.n	800888a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008886:	2302      	movs	r3, #2
 8008888:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d004      	beq.n	80088b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2280      	movs	r2, #128	; 0x80
 80088ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e00c      	b.n	80088cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2205      	movs	r2, #5
 80088b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0201 	bic.w	r2, r2, #1
 80088c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80088e4:	4b92      	ldr	r3, [pc, #584]	; (8008b30 <HAL_DMA_IRQHandler+0x258>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a92      	ldr	r2, [pc, #584]	; (8008b34 <HAL_DMA_IRQHandler+0x25c>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	0a9b      	lsrs	r3, r3, #10
 80088f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008902:	2208      	movs	r2, #8
 8008904:	409a      	lsls	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4013      	ands	r3, r2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d01a      	beq.n	8008944 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d013      	beq.n	8008944 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0204 	bic.w	r2, r2, #4
 800892a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008930:	2208      	movs	r2, #8
 8008932:	409a      	lsls	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893c:	f043 0201 	orr.w	r2, r3, #1
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008948:	2201      	movs	r2, #1
 800894a:	409a      	lsls	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4013      	ands	r3, r2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d012      	beq.n	800897a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00b      	beq.n	800897a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008966:	2201      	movs	r2, #1
 8008968:	409a      	lsls	r2, r3
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008972:	f043 0202 	orr.w	r2, r3, #2
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800897e:	2204      	movs	r2, #4
 8008980:	409a      	lsls	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	4013      	ands	r3, r2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d012      	beq.n	80089b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899c:	2204      	movs	r2, #4
 800899e:	409a      	lsls	r2, r3
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a8:	f043 0204 	orr.w	r2, r3, #4
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b4:	2210      	movs	r2, #16
 80089b6:	409a      	lsls	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d043      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0308 	and.w	r3, r3, #8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d03c      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d2:	2210      	movs	r2, #16
 80089d4:	409a      	lsls	r2, r3
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d018      	beq.n	8008a1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d108      	bne.n	8008a08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d024      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	4798      	blx	r3
 8008a06:	e01f      	b.n	8008a48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01b      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	4798      	blx	r3
 8008a18:	e016      	b.n	8008a48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d107      	bne.n	8008a38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0208 	bic.w	r2, r2, #8
 8008a36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	409a      	lsls	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4013      	ands	r3, r2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 808e 	beq.w	8008b76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 8086 	beq.w	8008b76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a6e:	2220      	movs	r2, #32
 8008a70:	409a      	lsls	r2, r3
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b05      	cmp	r3, #5
 8008a80:	d136      	bne.n	8008af0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0216 	bic.w	r2, r2, #22
 8008a90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	695a      	ldr	r2, [r3, #20]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d103      	bne.n	8008ab2 <HAL_DMA_IRQHandler+0x1da>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d007      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0208 	bic.w	r2, r2, #8
 8008ac0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac6:	223f      	movs	r2, #63	; 0x3f
 8008ac8:	409a      	lsls	r2, r3
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d07d      	beq.n	8008be2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
        }
        return;
 8008aee:	e078      	b.n	8008be2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d01c      	beq.n	8008b38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d108      	bne.n	8008b1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d030      	beq.n	8008b76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	4798      	blx	r3
 8008b1c:	e02b      	b.n	8008b76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d027      	beq.n	8008b76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	4798      	blx	r3
 8008b2e:	e022      	b.n	8008b76 <HAL_DMA_IRQHandler+0x29e>
 8008b30:	2000005c 	.word	0x2000005c
 8008b34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10f      	bne.n	8008b66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f022 0210 	bic.w	r2, r2, #16
 8008b54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d032      	beq.n	8008be4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d022      	beq.n	8008bd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0201 	bic.w	r2, r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	60bb      	str	r3, [r7, #8]
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d307      	bcc.n	8008bbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1f2      	bne.n	8008ba2 <HAL_DMA_IRQHandler+0x2ca>
 8008bbc:	e000      	b.n	8008bc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008bbe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	4798      	blx	r3
 8008be0:	e000      	b.n	8008be4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008be2:	bf00      	nop
    }
  }
}
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop

08008bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	2b40      	cmp	r3, #64	; 0x40
 8008c18:	d108      	bne.n	8008c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008c2a:	e007      	b.n	8008c3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	60da      	str	r2, [r3, #12]
}
 8008c3c:	bf00      	nop
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	3b10      	subs	r3, #16
 8008c58:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <DMA_CalcBaseAndBitshift+0x60>)
 8008c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5e:	091b      	lsrs	r3, r3, #4
 8008c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c62:	4a12      	ldr	r2, [pc, #72]	; (8008cac <DMA_CalcBaseAndBitshift+0x64>)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d908      	bls.n	8008c88 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8008c7e:	4013      	ands	r3, r2
 8008c80:	1d1a      	adds	r2, r3, #4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	659a      	str	r2, [r3, #88]	; 0x58
 8008c86:	e006      	b.n	8008c96 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	4b08      	ldr	r3, [pc, #32]	; (8008cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	aaaaaaab 	.word	0xaaaaaaab
 8008cac:	08023824 	.word	0x08023824
 8008cb0:	fffffc00 	.word	0xfffffc00

08008cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d11f      	bne.n	8008d0e <DMA_CheckFifoParam+0x5a>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d856      	bhi.n	8008d82 <DMA_CheckFifoParam+0xce>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <DMA_CheckFifoParam+0x28>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008ced 	.word	0x08008ced
 8008ce0:	08008cff 	.word	0x08008cff
 8008ce4:	08008ced 	.word	0x08008ced
 8008ce8:	08008d83 	.word	0x08008d83
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d046      	beq.n	8008d86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cfc:	e043      	b.n	8008d86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d06:	d140      	bne.n	8008d8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d0c:	e03d      	b.n	8008d8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d16:	d121      	bne.n	8008d5c <DMA_CheckFifoParam+0xa8>
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d837      	bhi.n	8008d8e <DMA_CheckFifoParam+0xda>
 8008d1e:	a201      	add	r2, pc, #4	; (adr r2, 8008d24 <DMA_CheckFifoParam+0x70>)
 8008d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d24:	08008d35 	.word	0x08008d35
 8008d28:	08008d3b 	.word	0x08008d3b
 8008d2c:	08008d35 	.word	0x08008d35
 8008d30:	08008d4d 	.word	0x08008d4d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	73fb      	strb	r3, [r7, #15]
      break;
 8008d38:	e030      	b.n	8008d9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d025      	beq.n	8008d92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d4a:	e022      	b.n	8008d92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d54:	d11f      	bne.n	8008d96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008d5a:	e01c      	b.n	8008d96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d903      	bls.n	8008d6a <DMA_CheckFifoParam+0xb6>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d003      	beq.n	8008d70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008d68:	e018      	b.n	8008d9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6e:	e015      	b.n	8008d9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00e      	beq.n	8008d9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d80:	e00b      	b.n	8008d9a <DMA_CheckFifoParam+0xe6>
      break;
 8008d82:	bf00      	nop
 8008d84:	e00a      	b.n	8008d9c <DMA_CheckFifoParam+0xe8>
      break;
 8008d86:	bf00      	nop
 8008d88:	e008      	b.n	8008d9c <DMA_CheckFifoParam+0xe8>
      break;
 8008d8a:	bf00      	nop
 8008d8c:	e006      	b.n	8008d9c <DMA_CheckFifoParam+0xe8>
      break;
 8008d8e:	bf00      	nop
 8008d90:	e004      	b.n	8008d9c <DMA_CheckFifoParam+0xe8>
      break;
 8008d92:	bf00      	nop
 8008d94:	e002      	b.n	8008d9c <DMA_CheckFifoParam+0xe8>
      break;   
 8008d96:	bf00      	nop
 8008d98:	e000      	b.n	8008d9c <DMA_CheckFifoParam+0xe8>
      break;
 8008d9a:	bf00      	nop
    }
  } 
  
  return status; 
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop

08008dac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8008dbc:	4ba9      	ldr	r3, [pc, #676]	; (8009064 <HAL_ETH_Init+0x2b8>)
 8008dbe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e181      	b.n	80090d6 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d106      	bne.n	8008dec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7fe fa0c 	bl	8007204 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dec:	4b9e      	ldr	r3, [pc, #632]	; (8009068 <HAL_ETH_Init+0x2bc>)
 8008dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df0:	4a9d      	ldr	r2, [pc, #628]	; (8009068 <HAL_ETH_Init+0x2bc>)
 8008df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008df6:	6453      	str	r3, [r2, #68]	; 0x44
 8008df8:	4b9b      	ldr	r3, [pc, #620]	; (8009068 <HAL_ETH_Init+0x2bc>)
 8008dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e00:	60bb      	str	r3, [r7, #8]
 8008e02:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8008e04:	4b99      	ldr	r3, [pc, #612]	; (800906c <HAL_ETH_Init+0x2c0>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	4a98      	ldr	r2, [pc, #608]	; (800906c <HAL_ETH_Init+0x2c0>)
 8008e0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008e0e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8008e10:	4b96      	ldr	r3, [pc, #600]	; (800906c <HAL_ETH_Init+0x2c0>)
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	4994      	ldr	r1, [pc, #592]	; (800906c <HAL_ETH_Init+0x2c0>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0201 	orr.w	r2, r2, #1
 8008e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e34:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008e36:	f7ff fadd 	bl	80083f4 <HAL_GetTick>
 8008e3a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008e3c:	e011      	b.n	8008e62 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8008e3e:	f7ff fad9 	bl	80083f4 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008e4c:	d909      	bls.n	8008e62 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2203      	movs	r2, #3
 8008e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e139      	b.n	80090d6 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e4      	bne.n	8008e3e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f023 031c 	bic.w	r3, r3, #28
 8008e82:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008e84:	f003 ffdc 	bl	800ce40 <HAL_RCC_GetHCLKFreq>
 8008e88:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	4a78      	ldr	r2, [pc, #480]	; (8009070 <HAL_ETH_Init+0x2c4>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d908      	bls.n	8008ea4 <HAL_ETH_Init+0xf8>
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	4a77      	ldr	r2, [pc, #476]	; (8009074 <HAL_ETH_Init+0x2c8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d804      	bhi.n	8008ea4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f043 0308 	orr.w	r3, r3, #8
 8008ea0:	61fb      	str	r3, [r7, #28]
 8008ea2:	e027      	b.n	8008ef4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	4a73      	ldr	r2, [pc, #460]	; (8009074 <HAL_ETH_Init+0x2c8>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d908      	bls.n	8008ebe <HAL_ETH_Init+0x112>
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	4a6d      	ldr	r2, [pc, #436]	; (8009064 <HAL_ETH_Init+0x2b8>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d204      	bcs.n	8008ebe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	f043 030c 	orr.w	r3, r3, #12
 8008eba:	61fb      	str	r3, [r7, #28]
 8008ebc:	e01a      	b.n	8008ef4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	4a68      	ldr	r2, [pc, #416]	; (8009064 <HAL_ETH_Init+0x2b8>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d303      	bcc.n	8008ece <HAL_ETH_Init+0x122>
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	4a6b      	ldr	r2, [pc, #428]	; (8009078 <HAL_ETH_Init+0x2cc>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d911      	bls.n	8008ef2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	4a69      	ldr	r2, [pc, #420]	; (8009078 <HAL_ETH_Init+0x2cc>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d908      	bls.n	8008ee8 <HAL_ETH_Init+0x13c>
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	4a68      	ldr	r2, [pc, #416]	; (800907c <HAL_ETH_Init+0x2d0>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d804      	bhi.n	8008ee8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	f043 0304 	orr.w	r3, r3, #4
 8008ee4:	61fb      	str	r3, [r7, #28]
 8008ee6:	e005      	b.n	8008ef4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f043 0310 	orr.w	r3, r3, #16
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	e000      	b.n	8008ef4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8008ef2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8008efc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f954 	bl	80091b0 <HAL_ETH_WritePHYRegister>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8008f12:	6939      	ldr	r1, [r7, #16]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f9b1 	bl	800927c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e0d7      	b.n	80090d6 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8008f26:	20ff      	movs	r0, #255	; 0xff
 8008f28:	f7ff fa70 	bl	800840c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 80a5 	beq.w	8009080 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f36:	f7ff fa5d 	bl	80083f4 <HAL_GetTick>
 8008f3a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008f3c:	f107 030c 	add.w	r3, r7, #12
 8008f40:	461a      	mov	r2, r3
 8008f42:	2101      	movs	r1, #1
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f8cb 	bl	80090e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008f4a:	f7ff fa53 	bl	80083f4 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d90f      	bls.n	8008f7c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008f60:	6939      	ldr	r1, [r7, #16]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f98a 	bl	800927c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e0ac      	b.n	80090d6 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0da      	beq.n	8008f3c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8008f86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f90f 	bl	80091b0 <HAL_ETH_WritePHYRegister>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008f9c:	6939      	ldr	r1, [r7, #16]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f96c 	bl	800927c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008fac:	2301      	movs	r3, #1
 8008fae:	e092      	b.n	80090d6 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fb0:	f7ff fa20 	bl	80083f4 <HAL_GetTick>
 8008fb4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008fb6:	f107 030c 	add.w	r3, r7, #12
 8008fba:	461a      	mov	r2, r3
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f88e 	bl	80090e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8008fc4:	f7ff fa16 	bl	80083f4 <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d90f      	bls.n	8008ff6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008fda:	6939      	ldr	r1, [r7, #16]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f94d 	bl	800927c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e06f      	b.n	80090d6 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f003 0320 	and.w	r3, r3, #32
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0da      	beq.n	8008fb6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8009000:	f107 030c 	add.w	r3, r7, #12
 8009004:	461a      	mov	r2, r3
 8009006:	211f      	movs	r1, #31
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f869 	bl	80090e0 <HAL_ETH_ReadPHYRegister>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00b      	beq.n	800902c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009018:	6939      	ldr	r1, [r7, #16]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f92e 	bl	800927c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8009028:	2301      	movs	r3, #1
 800902a:	e054      	b.n	80090d6 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f003 0310 	and.w	r3, r3, #16
 8009032:	2b00      	cmp	r3, #0
 8009034:	d004      	beq.n	8009040 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800903c:	60da      	str	r2, [r3, #12]
 800903e:	e002      	b.n	8009046 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	609a      	str	r2, [r3, #8]
 8009056:	e035      	b.n	80090c4 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800905e:	609a      	str	r2, [r3, #8]
 8009060:	e030      	b.n	80090c4 <HAL_ETH_Init+0x318>
 8009062:	bf00      	nop
 8009064:	03938700 	.word	0x03938700
 8009068:	40023800 	.word	0x40023800
 800906c:	40013800 	.word	0x40013800
 8009070:	01312cff 	.word	0x01312cff
 8009074:	02160ebf 	.word	0x02160ebf
 8009078:	05f5e0ff 	.word	0x05f5e0ff
 800907c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	08db      	lsrs	r3, r3, #3
 8009086:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	085b      	lsrs	r3, r3, #1
 800908e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8009090:	4313      	orrs	r3, r2
 8009092:	b29b      	uxth	r3, r3
 8009094:	461a      	mov	r2, r3
 8009096:	2100      	movs	r1, #0
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f889 	bl	80091b0 <HAL_ETH_WritePHYRegister>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80090a8:	6939      	ldr	r1, [r7, #16]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f8e6 	bl	800927c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e00c      	b.n	80090d6 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80090bc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80090c0:	f7ff f9a4 	bl	800840c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80090c4:	6939      	ldr	r1, [r7, #16]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f8d8 	bl	800927c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3720      	adds	r7, #32
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop

080090e0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	460b      	mov	r3, r1
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80090ee:	2300      	movs	r3, #0
 80090f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b82      	cmp	r3, #130	; 0x82
 8009100:	d101      	bne.n	8009106 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8009102:	2302      	movs	r3, #2
 8009104:	e050      	b.n	80091a8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2282      	movs	r2, #130	; 0x82
 800910a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f003 031c 	and.w	r3, r3, #28
 800911c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8a1b      	ldrh	r3, [r3, #16]
 8009122:	02db      	lsls	r3, r3, #11
 8009124:	b29b      	uxth	r3, r3
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800912c:	897b      	ldrh	r3, [r7, #10]
 800912e:	019b      	lsls	r3, r3, #6
 8009130:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f023 0302 	bic.w	r3, r3, #2
 8009140:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f043 0301 	orr.w	r3, r3, #1
 8009148:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009152:	f7ff f94f 	bl	80083f4 <HAL_GetTick>
 8009156:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009158:	e015      	b.n	8009186 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800915a:	f7ff f94b 	bl	80083f4 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009168:	d309      	bcc.n	800917e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e014      	b.n	80091a8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e4      	bne.n	800915a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	b29b      	uxth	r3, r3
 8009198:	461a      	mov	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	460b      	mov	r3, r1
 80091ba:	607a      	str	r2, [r7, #4]
 80091bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b42      	cmp	r3, #66	; 0x42
 80091d0:	d101      	bne.n	80091d6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80091d2:	2302      	movs	r3, #2
 80091d4:	e04e      	b.n	8009274 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2242      	movs	r2, #66	; 0x42
 80091da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f003 031c 	and.w	r3, r3, #28
 80091ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8a1b      	ldrh	r3, [r3, #16]
 80091f2:	02db      	lsls	r3, r3, #11
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80091fc:	897b      	ldrh	r3, [r7, #10]
 80091fe:	019b      	lsls	r3, r3, #6
 8009200:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f043 0302 	orr.w	r3, r3, #2
 8009210:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f043 0301 	orr.w	r3, r3, #1
 8009218:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800922c:	f7ff f8e2 	bl	80083f4 <HAL_GetTick>
 8009230:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009232:	e015      	b.n	8009260 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009234:	f7ff f8de 	bl	80083f4 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009242:	d309      	bcc.n	8009258 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e00d      	b.n	8009274 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e4      	bne.n	8009234 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b0b0      	sub	sp, #192	; 0xc0
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d007      	beq.n	80092a2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009298:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80092a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80092a2:	2300      	movs	r3, #0
 80092a4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80092a6:	2300      	movs	r3, #0
 80092a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80092aa:	2300      	movs	r3, #0
 80092ac:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80092c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092c6:	663b      	str	r3, [r7, #96]	; 0x60
 80092c8:	e001      	b.n	80092ce <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80092ca:	2300      	movs	r3, #0
 80092cc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80092ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092d2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80092d8:	2300      	movs	r3, #0
 80092da:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80092dc:	2300      	movs	r3, #0
 80092de:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80092e8:	2340      	movs	r3, #64	; 0x40
 80092ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80092f2:	2300      	movs	r3, #0
 80092f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80092fe:	2300      	movs	r3, #0
 8009300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8009304:	2300      	movs	r3, #0
 8009306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800930a:	2300      	movs	r3, #0
 800930c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8009310:	2300      	movs	r3, #0
 8009312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8009316:	2300      	movs	r3, #0
 8009318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800931c:	2380      	movs	r3, #128	; 0x80
 800931e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8009322:	2300      	movs	r3, #0
 8009324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8009328:	2300      	movs	r3, #0
 800932a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800932e:	2300      	movs	r3, #0
 8009330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8009334:	2300      	movs	r3, #0
 8009336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800933a:	2300      	movs	r3, #0
 800933c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8009340:	2300      	movs	r3, #0
 8009342:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009350:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009354:	4bab      	ldr	r3, [pc, #684]	; (8009604 <ETH_MACDMAConfig+0x388>)
 8009356:	4013      	ands	r3, r2
 8009358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800935c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800935e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009360:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8009362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8009364:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8009366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8009368:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800936e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8009370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8009372:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8009374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8009376:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800937c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800937e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8009380:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8009382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8009384:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8009386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8009388:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800938a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800938c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800938e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8009390:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009392:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009396:	4313      	orrs	r3, r2
 8009398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80093a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80093b0:	2001      	movs	r0, #1
 80093b2:	f7ff f82b 	bl	800840c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80093be:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80093c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80093c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80093c4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80093c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80093c8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80093ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80093ce:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80093d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80093d4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80093d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80093da:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80093dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80093e0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80093e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80093ec:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80093ee:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80093fa:	2001      	movs	r0, #1
 80093fc:	f7ff f806 	bl	800840c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009408:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009412:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800941c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009428:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800942c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8009430:	4013      	ands	r3, r2
 8009432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800943a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800943c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009440:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8009442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8009446:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8009448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800944c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800944e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8009452:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8009454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8009458:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800945a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800945e:	4313      	orrs	r3, r2
 8009460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800946c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009478:	2001      	movs	r0, #1
 800947a:	f7fe ffc7 	bl	800840c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009486:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009488:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800948c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80094a2:	2001      	movs	r0, #1
 80094a4:	f7fe ffb2 	bl	800840c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80094b0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80094b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ba:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80094bc:	2300      	movs	r3, #0
 80094be:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80094c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80094c4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80094c6:	2300      	movs	r3, #0
 80094c8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80094ce:	2300      	movs	r3, #0
 80094d0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80094d2:	2300      	movs	r3, #0
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80094d6:	2304      	movs	r3, #4
 80094d8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80094da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094de:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80094e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094e4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80094e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094ea:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80094ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094f0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80094f2:	2380      	movs	r3, #128	; 0x80
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80094fa:	2300      	movs	r3, #0
 80094fc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	f241 0318 	movw	r3, #4120	; 0x1018
 8009506:	4413      	add	r3, r2
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800950e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009512:	4b3d      	ldr	r3, [pc, #244]	; (8009608 <ETH_MACDMAConfig+0x38c>)
 8009514:	4013      	ands	r3, r2
 8009516:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800951a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800951c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800951e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8009520:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8009522:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8009524:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8009526:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8009528:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800952a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800952c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800952e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8009530:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8009532:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8009536:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800953a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800953c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009540:	4313      	orrs	r3, r2
 8009542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	f241 0318 	movw	r3, #4120	; 0x1018
 800954e:	4413      	add	r3, r2
 8009550:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009554:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	f241 0318 	movw	r3, #4120	; 0x1018
 800955e:	4413      	add	r3, r2
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009566:	2001      	movs	r0, #1
 8009568:	f7fe ff50 	bl	800840c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	f241 0318 	movw	r3, #4120	; 0x1018
 8009574:	4413      	add	r3, r2
 8009576:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800957a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800957c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009580:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8009584:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8009586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009588:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800958a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800958c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800958e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009590:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8009592:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8009594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8009596:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80095a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80095b4:	2001      	movs	r0, #1
 80095b6:	f7fe ff29 	bl	800840c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80095c6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d10d      	bne.n	80095ec <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	f241 031c 	movw	r3, #4124	; 0x101c
 80095d8:	4413      	add	r3, r2
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6811      	ldr	r1, [r2, #0]
 80095e0:	4a0a      	ldr	r2, [pc, #40]	; (800960c <ETH_MACDMAConfig+0x390>)
 80095e2:	431a      	orrs	r2, r3
 80095e4:	f241 031c 	movw	r3, #4124	; 0x101c
 80095e8:	440b      	add	r3, r1
 80095ea:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	461a      	mov	r2, r3
 80095f2:	2100      	movs	r1, #0
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f80b 	bl	8009610 <ETH_MACAddressConfig>
}
 80095fa:	bf00      	nop
 80095fc:	37c0      	adds	r7, #192	; 0xc0
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	ff20810f 	.word	0xff20810f
 8009608:	f8de3f23 	.word	0xf8de3f23
 800960c:	00010040 	.word	0x00010040

08009610 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3305      	adds	r3, #5
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	021b      	lsls	r3, r3, #8
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	3204      	adds	r2, #4
 8009628:	7812      	ldrb	r2, [r2, #0]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	4b11      	ldr	r3, [pc, #68]	; (8009678 <ETH_MACAddressConfig+0x68>)
 8009632:	4413      	add	r3, r2
 8009634:	461a      	mov	r2, r3
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3303      	adds	r3, #3
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	061a      	lsls	r2, r3, #24
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3302      	adds	r3, #2
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	041b      	lsls	r3, r3, #16
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3301      	adds	r3, #1
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	4313      	orrs	r3, r2
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	7812      	ldrb	r2, [r2, #0]
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <ETH_MACAddressConfig+0x6c>)
 8009662:	4413      	add	r3, r2
 8009664:	461a      	mov	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	6013      	str	r3, [r2, #0]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40028040 	.word	0x40028040
 800967c:	40028044 	.word	0x40028044

08009680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009680:	b480      	push	{r7}
 8009682:	b089      	sub	sp, #36	; 0x24
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800968a:	2300      	movs	r3, #0
 800968c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8009692:	2300      	movs	r3, #0
 8009694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009696:	2300      	movs	r3, #0
 8009698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800969a:	2300      	movs	r3, #0
 800969c:	61fb      	str	r3, [r7, #28]
 800969e:	e175      	b.n	800998c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80096a0:	2201      	movs	r2, #1
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	fa02 f303 	lsl.w	r3, r2, r3
 80096a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4013      	ands	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	f040 8164 	bne.w	8009986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d00b      	beq.n	80096de <HAL_GPIO_Init+0x5e>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d007      	beq.n	80096de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80096d2:	2b11      	cmp	r3, #17
 80096d4:	d003      	beq.n	80096de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2b12      	cmp	r3, #18
 80096dc:	d130      	bne.n	8009740 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	2203      	movs	r2, #3
 80096ea:	fa02 f303 	lsl.w	r3, r2, r3
 80096ee:	43db      	mvns	r3, r3
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	4013      	ands	r3, r2
 80096f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	005b      	lsls	r3, r3, #1
 80096fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	4313      	orrs	r3, r2
 8009706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009714:	2201      	movs	r2, #1
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	fa02 f303 	lsl.w	r3, r2, r3
 800971c:	43db      	mvns	r3, r3
 800971e:	69ba      	ldr	r2, [r7, #24]
 8009720:	4013      	ands	r3, r2
 8009722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	091b      	lsrs	r3, r3, #4
 800972a:	f003 0201 	and.w	r2, r3, #1
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	fa02 f303 	lsl.w	r3, r2, r3
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	4313      	orrs	r3, r2
 8009738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	2203      	movs	r2, #3
 800974c:	fa02 f303 	lsl.w	r3, r2, r3
 8009750:	43db      	mvns	r3, r3
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	4013      	ands	r3, r2
 8009756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	fa02 f303 	lsl.w	r3, r2, r3
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	4313      	orrs	r3, r2
 8009768:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d003      	beq.n	8009780 <HAL_GPIO_Init+0x100>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	2b12      	cmp	r3, #18
 800977e:	d123      	bne.n	80097c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	08da      	lsrs	r2, r3, #3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3208      	adds	r2, #8
 8009788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	220f      	movs	r2, #15
 8009798:	fa02 f303 	lsl.w	r3, r2, r3
 800979c:	43db      	mvns	r3, r3
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	4013      	ands	r3, r2
 80097a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f003 0307 	and.w	r3, r3, #7
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	fa02 f303 	lsl.w	r3, r2, r3
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	08da      	lsrs	r2, r3, #3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	3208      	adds	r2, #8
 80097c2:	69b9      	ldr	r1, [r7, #24]
 80097c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	005b      	lsls	r3, r3, #1
 80097d2:	2203      	movs	r2, #3
 80097d4:	fa02 f303 	lsl.w	r3, r2, r3
 80097d8:	43db      	mvns	r3, r3
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	4013      	ands	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f003 0203 	and.w	r2, r3, #3
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	fa02 f303 	lsl.w	r3, r2, r3
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 80be 	beq.w	8009986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800980a:	4b66      	ldr	r3, [pc, #408]	; (80099a4 <HAL_GPIO_Init+0x324>)
 800980c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980e:	4a65      	ldr	r2, [pc, #404]	; (80099a4 <HAL_GPIO_Init+0x324>)
 8009810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009814:	6453      	str	r3, [r2, #68]	; 0x44
 8009816:	4b63      	ldr	r3, [pc, #396]	; (80099a4 <HAL_GPIO_Init+0x324>)
 8009818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009822:	4a61      	ldr	r2, [pc, #388]	; (80099a8 <HAL_GPIO_Init+0x328>)
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	089b      	lsrs	r3, r3, #2
 8009828:	3302      	adds	r3, #2
 800982a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800982e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	f003 0303 	and.w	r3, r3, #3
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	220f      	movs	r2, #15
 800983a:	fa02 f303 	lsl.w	r3, r2, r3
 800983e:	43db      	mvns	r3, r3
 8009840:	69ba      	ldr	r2, [r7, #24]
 8009842:	4013      	ands	r3, r2
 8009844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a58      	ldr	r2, [pc, #352]	; (80099ac <HAL_GPIO_Init+0x32c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d037      	beq.n	80098be <HAL_GPIO_Init+0x23e>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a57      	ldr	r2, [pc, #348]	; (80099b0 <HAL_GPIO_Init+0x330>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d031      	beq.n	80098ba <HAL_GPIO_Init+0x23a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a56      	ldr	r2, [pc, #344]	; (80099b4 <HAL_GPIO_Init+0x334>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d02b      	beq.n	80098b6 <HAL_GPIO_Init+0x236>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a55      	ldr	r2, [pc, #340]	; (80099b8 <HAL_GPIO_Init+0x338>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d025      	beq.n	80098b2 <HAL_GPIO_Init+0x232>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a54      	ldr	r2, [pc, #336]	; (80099bc <HAL_GPIO_Init+0x33c>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d01f      	beq.n	80098ae <HAL_GPIO_Init+0x22e>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a53      	ldr	r2, [pc, #332]	; (80099c0 <HAL_GPIO_Init+0x340>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d019      	beq.n	80098aa <HAL_GPIO_Init+0x22a>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a52      	ldr	r2, [pc, #328]	; (80099c4 <HAL_GPIO_Init+0x344>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d013      	beq.n	80098a6 <HAL_GPIO_Init+0x226>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a51      	ldr	r2, [pc, #324]	; (80099c8 <HAL_GPIO_Init+0x348>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00d      	beq.n	80098a2 <HAL_GPIO_Init+0x222>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a50      	ldr	r2, [pc, #320]	; (80099cc <HAL_GPIO_Init+0x34c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d007      	beq.n	800989e <HAL_GPIO_Init+0x21e>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a4f      	ldr	r2, [pc, #316]	; (80099d0 <HAL_GPIO_Init+0x350>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d101      	bne.n	800989a <HAL_GPIO_Init+0x21a>
 8009896:	2309      	movs	r3, #9
 8009898:	e012      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 800989a:	230a      	movs	r3, #10
 800989c:	e010      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 800989e:	2308      	movs	r3, #8
 80098a0:	e00e      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 80098a2:	2307      	movs	r3, #7
 80098a4:	e00c      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 80098a6:	2306      	movs	r3, #6
 80098a8:	e00a      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 80098aa:	2305      	movs	r3, #5
 80098ac:	e008      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 80098ae:	2304      	movs	r3, #4
 80098b0:	e006      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 80098b2:	2303      	movs	r3, #3
 80098b4:	e004      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 80098b6:	2302      	movs	r3, #2
 80098b8:	e002      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e000      	b.n	80098c0 <HAL_GPIO_Init+0x240>
 80098be:	2300      	movs	r3, #0
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	f002 0203 	and.w	r2, r2, #3
 80098c6:	0092      	lsls	r2, r2, #2
 80098c8:	4093      	lsls	r3, r2
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80098d0:	4935      	ldr	r1, [pc, #212]	; (80099a8 <HAL_GPIO_Init+0x328>)
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	089b      	lsrs	r3, r3, #2
 80098d6:	3302      	adds	r3, #2
 80098d8:	69ba      	ldr	r2, [r7, #24]
 80098da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80098de:	4b3d      	ldr	r3, [pc, #244]	; (80099d4 <HAL_GPIO_Init+0x354>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	43db      	mvns	r3, r3
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	4013      	ands	r3, r2
 80098ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009902:	4a34      	ldr	r2, [pc, #208]	; (80099d4 <HAL_GPIO_Init+0x354>)
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009908:	4b32      	ldr	r3, [pc, #200]	; (80099d4 <HAL_GPIO_Init+0x354>)
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	43db      	mvns	r3, r3
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	4013      	ands	r3, r2
 8009916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d003      	beq.n	800992c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009924:	69ba      	ldr	r2, [r7, #24]
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	4313      	orrs	r3, r2
 800992a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800992c:	4a29      	ldr	r2, [pc, #164]	; (80099d4 <HAL_GPIO_Init+0x354>)
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009932:	4b28      	ldr	r3, [pc, #160]	; (80099d4 <HAL_GPIO_Init+0x354>)
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	43db      	mvns	r3, r3
 800993c:	69ba      	ldr	r2, [r7, #24]
 800993e:	4013      	ands	r3, r2
 8009940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800994e:	69ba      	ldr	r2, [r7, #24]
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	4313      	orrs	r3, r2
 8009954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009956:	4a1f      	ldr	r2, [pc, #124]	; (80099d4 <HAL_GPIO_Init+0x354>)
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800995c:	4b1d      	ldr	r3, [pc, #116]	; (80099d4 <HAL_GPIO_Init+0x354>)
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	43db      	mvns	r3, r3
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	4013      	ands	r3, r2
 800996a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4313      	orrs	r3, r2
 800997e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009980:	4a14      	ldr	r2, [pc, #80]	; (80099d4 <HAL_GPIO_Init+0x354>)
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	3301      	adds	r3, #1
 800998a:	61fb      	str	r3, [r7, #28]
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b0f      	cmp	r3, #15
 8009990:	f67f ae86 	bls.w	80096a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop
 8009998:	3724      	adds	r7, #36	; 0x24
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	40023800 	.word	0x40023800
 80099a8:	40013800 	.word	0x40013800
 80099ac:	40020000 	.word	0x40020000
 80099b0:	40020400 	.word	0x40020400
 80099b4:	40020800 	.word	0x40020800
 80099b8:	40020c00 	.word	0x40020c00
 80099bc:	40021000 	.word	0x40021000
 80099c0:	40021400 	.word	0x40021400
 80099c4:	40021800 	.word	0x40021800
 80099c8:	40021c00 	.word	0x40021c00
 80099cc:	40022000 	.word	0x40022000
 80099d0:	40022400 	.word	0x40022400
 80099d4:	40013c00 	.word	0x40013c00

080099d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691a      	ldr	r2, [r3, #16]
 80099e8:	887b      	ldrh	r3, [r7, #2]
 80099ea:	4013      	ands	r3, r2
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80099f0:	2301      	movs	r3, #1
 80099f2:	73fb      	strb	r3, [r7, #15]
 80099f4:	e001      	b.n	80099fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	807b      	strh	r3, [r7, #2]
 8009a14:	4613      	mov	r3, r2
 8009a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009a18:	787b      	ldrb	r3, [r7, #1]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a1e:	887a      	ldrh	r2, [r7, #2]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009a24:	e003      	b.n	8009a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009a26:	887b      	ldrh	r3, [r7, #2]
 8009a28:	041a      	lsls	r2, r3, #16
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	619a      	str	r2, [r3, #24]
}
 8009a2e:	bf00      	nop
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	695a      	ldr	r2, [r3, #20]
 8009a4a:	887b      	ldrh	r3, [r7, #2]
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d004      	beq.n	8009a5c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009a52:	887b      	ldrh	r3, [r7, #2]
 8009a54:	041a      	lsls	r2, r3, #16
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009a5a:	e002      	b.n	8009a62 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009a5c:	887a      	ldrh	r2, [r7, #2]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	619a      	str	r2, [r3, #24]
}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
	...

08009a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009a7a:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a7c:	695a      	ldr	r2, [r3, #20]
 8009a7e:	88fb      	ldrh	r3, [r7, #6]
 8009a80:	4013      	ands	r3, r2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d006      	beq.n	8009a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009a86:	4a05      	ldr	r2, [pc, #20]	; (8009a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009a88:	88fb      	ldrh	r3, [r7, #6]
 8009a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009a8c:	88fb      	ldrh	r3, [r7, #6]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7f7 ff32 	bl	80018f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	40013c00 	.word	0x40013c00

08009aa0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa2:	b08f      	sub	sp, #60	; 0x3c
 8009aa4:	af0a      	add	r7, sp, #40	; 0x28
 8009aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e054      	b.n	8009b5c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f014 f929 	bl	801dd24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2203      	movs	r2, #3
 8009ad6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f009 f98c 	bl	8012e0e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	603b      	str	r3, [r7, #0]
 8009afc:	687e      	ldr	r6, [r7, #4]
 8009afe:	466d      	mov	r5, sp
 8009b00:	f106 0410 	add.w	r4, r6, #16
 8009b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b10:	e885 0003 	stmia.w	r5, {r0, r1}
 8009b14:	1d33      	adds	r3, r6, #4
 8009b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b18:	6838      	ldr	r0, [r7, #0]
 8009b1a:	f009 f90f 	bl	8012d3c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2101      	movs	r1, #1
 8009b24:	4618      	mov	r0, r3
 8009b26:	f009 f983 	bl	8012e30 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	687e      	ldr	r6, [r7, #4]
 8009b32:	466d      	mov	r5, sp
 8009b34:	f106 0410 	add.w	r4, r6, #16
 8009b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b44:	e885 0003 	stmia.w	r5, {r0, r1}
 8009b48:	1d33      	adds	r3, r6, #4
 8009b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b4c:	6838      	ldr	r0, [r7, #0]
 8009b4e:	f009 fa95 	bl	801307c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b64 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8009b64:	b590      	push	{r4, r7, lr}
 8009b66:	b089      	sub	sp, #36	; 0x24
 8009b68:	af04      	add	r7, sp, #16
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	461a      	mov	r2, r3
 8009b72:	4603      	mov	r3, r0
 8009b74:	70fb      	strb	r3, [r7, #3]
 8009b76:	460b      	mov	r3, r1
 8009b78:	70bb      	strb	r3, [r7, #2]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_HCD_HC_Init+0x28>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e07f      	b.n	8009c8c <HAL_HCD_HC_Init+0x128>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	440b      	add	r3, r1
 8009ba2:	333d      	adds	r3, #61	; 0x3d
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	4613      	mov	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	00db      	lsls	r3, r3, #3
 8009bb4:	440b      	add	r3, r1
 8009bb6:	3338      	adds	r3, #56	; 0x38
 8009bb8:	787a      	ldrb	r2, [r7, #1]
 8009bba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009bbc:	78fa      	ldrb	r2, [r7, #3]
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	440b      	add	r3, r1
 8009bca:	3340      	adds	r3, #64	; 0x40
 8009bcc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009bce:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	440b      	add	r3, r1
 8009bde:	3339      	adds	r3, #57	; 0x39
 8009be0:	78fa      	ldrb	r2, [r7, #3]
 8009be2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009be4:	78fa      	ldrb	r2, [r7, #3]
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	440b      	add	r3, r1
 8009bf2:	333f      	adds	r3, #63	; 0x3f
 8009bf4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009bf8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8009bfa:	78fa      	ldrb	r2, [r7, #3]
 8009bfc:	78bb      	ldrb	r3, [r7, #2]
 8009bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c02:	b2d8      	uxtb	r0, r3
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	440b      	add	r3, r1
 8009c10:	333a      	adds	r3, #58	; 0x3a
 8009c12:	4602      	mov	r2, r0
 8009c14:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009c16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da0a      	bge.n	8009c34 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009c1e:	78fa      	ldrb	r2, [r7, #3]
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	00db      	lsls	r3, r3, #3
 8009c2a:	440b      	add	r3, r1
 8009c2c:	333b      	adds	r3, #59	; 0x3b
 8009c2e:	2201      	movs	r2, #1
 8009c30:	701a      	strb	r2, [r3, #0]
 8009c32:	e009      	b.n	8009c48 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009c34:	78fa      	ldrb	r2, [r7, #3]
 8009c36:	6879      	ldr	r1, [r7, #4]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	440b      	add	r3, r1
 8009c42:	333b      	adds	r3, #59	; 0x3b
 8009c44:	2200      	movs	r2, #0
 8009c46:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009c48:	78fa      	ldrb	r2, [r7, #3]
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	440b      	add	r3, r1
 8009c56:	333c      	adds	r3, #60	; 0x3c
 8009c58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009c5c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	787c      	ldrb	r4, [r7, #1]
 8009c64:	78ba      	ldrb	r2, [r7, #2]
 8009c66:	78f9      	ldrb	r1, [r7, #3]
 8009c68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c6a:	9302      	str	r3, [sp, #8]
 8009c6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	4623      	mov	r3, r4
 8009c7a:	f009 fb75 	bl	8013368 <USB_HC_Init>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd90      	pop	{r4, r7, pc}

08009c94 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d101      	bne.n	8009cb2 <HAL_HCD_HC_Halt+0x1e>
 8009cae:	2302      	movs	r3, #2
 8009cb0:	e00f      	b.n	8009cd2 <HAL_HCD_HC_Halt+0x3e>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	78fa      	ldrb	r2, [r7, #3]
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f009 fdad 	bl	8013822 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4603      	mov	r3, r0
 8009cec:	70fb      	strb	r3, [r7, #3]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	70bb      	strb	r3, [r7, #2]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8009cf6:	78fa      	ldrb	r2, [r7, #3]
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	00db      	lsls	r3, r3, #3
 8009d02:	440b      	add	r3, r1
 8009d04:	333b      	adds	r3, #59	; 0x3b
 8009d06:	78ba      	ldrb	r2, [r7, #2]
 8009d08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	440b      	add	r3, r1
 8009d18:	333f      	adds	r3, #63	; 0x3f
 8009d1a:	787a      	ldrb	r2, [r7, #1]
 8009d1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8009d1e:	7c3b      	ldrb	r3, [r7, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d114      	bne.n	8009d4e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	440b      	add	r3, r1
 8009d32:	3342      	adds	r3, #66	; 0x42
 8009d34:	2203      	movs	r2, #3
 8009d36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009d38:	78fa      	ldrb	r2, [r7, #3]
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	440b      	add	r3, r1
 8009d46:	333d      	adds	r3, #61	; 0x3d
 8009d48:	7f3a      	ldrb	r2, [r7, #28]
 8009d4a:	701a      	strb	r2, [r3, #0]
 8009d4c:	e009      	b.n	8009d62 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009d4e:	78fa      	ldrb	r2, [r7, #3]
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	4613      	mov	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	440b      	add	r3, r1
 8009d5c:	3342      	adds	r3, #66	; 0x42
 8009d5e:	2202      	movs	r2, #2
 8009d60:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009d62:	787b      	ldrb	r3, [r7, #1]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	f200 80d6 	bhi.w	8009f16 <HAL_HCD_HC_SubmitRequest+0x23a>
 8009d6a:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <HAL_HCD_HC_SubmitRequest+0x94>)
 8009d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d70:	08009d81 	.word	0x08009d81
 8009d74:	08009f01 	.word	0x08009f01
 8009d78:	08009ded 	.word	0x08009ded
 8009d7c:	08009e77 	.word	0x08009e77
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009d80:	7c3b      	ldrb	r3, [r7, #16]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	f040 80c9 	bne.w	8009f1a <HAL_HCD_HC_SubmitRequest+0x23e>
 8009d88:	78bb      	ldrb	r3, [r7, #2]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f040 80c5 	bne.w	8009f1a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8009d90:	8b3b      	ldrh	r3, [r7, #24]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d109      	bne.n	8009daa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009d96:	78fa      	ldrb	r2, [r7, #3]
 8009d98:	6879      	ldr	r1, [r7, #4]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	440b      	add	r3, r1
 8009da4:	3351      	adds	r3, #81	; 0x51
 8009da6:	2201      	movs	r2, #1
 8009da8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009daa:	78fa      	ldrb	r2, [r7, #3]
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	440b      	add	r3, r1
 8009db8:	3351      	adds	r3, #81	; 0x51
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10a      	bne.n	8009dd6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	6879      	ldr	r1, [r7, #4]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	00db      	lsls	r3, r3, #3
 8009dcc:	440b      	add	r3, r1
 8009dce:	3342      	adds	r3, #66	; 0x42
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009dd4:	e0a1      	b.n	8009f1a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009dd6:	78fa      	ldrb	r2, [r7, #3]
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	00db      	lsls	r3, r3, #3
 8009de2:	440b      	add	r3, r1
 8009de4:	3342      	adds	r3, #66	; 0x42
 8009de6:	2202      	movs	r2, #2
 8009de8:	701a      	strb	r2, [r3, #0]
      break;
 8009dea:	e096      	b.n	8009f1a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009dec:	78bb      	ldrb	r3, [r7, #2]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d120      	bne.n	8009e34 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009df2:	78fa      	ldrb	r2, [r7, #3]
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	440b      	add	r3, r1
 8009e00:	3351      	adds	r3, #81	; 0x51
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009e08:	78fa      	ldrb	r2, [r7, #3]
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	440b      	add	r3, r1
 8009e16:	3342      	adds	r3, #66	; 0x42
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009e1c:	e07e      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009e1e:	78fa      	ldrb	r2, [r7, #3]
 8009e20:	6879      	ldr	r1, [r7, #4]
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	00db      	lsls	r3, r3, #3
 8009e2a:	440b      	add	r3, r1
 8009e2c:	3342      	adds	r3, #66	; 0x42
 8009e2e:	2202      	movs	r2, #2
 8009e30:	701a      	strb	r2, [r3, #0]
      break;
 8009e32:	e073      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009e34:	78fa      	ldrb	r2, [r7, #3]
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	00db      	lsls	r3, r3, #3
 8009e40:	440b      	add	r3, r1
 8009e42:	3350      	adds	r3, #80	; 0x50
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10a      	bne.n	8009e60 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	00db      	lsls	r3, r3, #3
 8009e56:	440b      	add	r3, r1
 8009e58:	3342      	adds	r3, #66	; 0x42
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
      break;
 8009e5e:	e05d      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009e60:	78fa      	ldrb	r2, [r7, #3]
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	440b      	add	r3, r1
 8009e6e:	3342      	adds	r3, #66	; 0x42
 8009e70:	2202      	movs	r2, #2
 8009e72:	701a      	strb	r2, [r3, #0]
      break;
 8009e74:	e052      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009e76:	78bb      	ldrb	r3, [r7, #2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d120      	bne.n	8009ebe <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009e7c:	78fa      	ldrb	r2, [r7, #3]
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	440b      	add	r3, r1
 8009e8a:	3351      	adds	r3, #81	; 0x51
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10a      	bne.n	8009ea8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009e92:	78fa      	ldrb	r2, [r7, #3]
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	4613      	mov	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	00db      	lsls	r3, r3, #3
 8009e9e:	440b      	add	r3, r1
 8009ea0:	3342      	adds	r3, #66	; 0x42
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009ea6:	e039      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009ea8:	78fa      	ldrb	r2, [r7, #3]
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	440b      	add	r3, r1
 8009eb6:	3342      	adds	r3, #66	; 0x42
 8009eb8:	2202      	movs	r2, #2
 8009eba:	701a      	strb	r2, [r3, #0]
      break;
 8009ebc:	e02e      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009ebe:	78fa      	ldrb	r2, [r7, #3]
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	440b      	add	r3, r1
 8009ecc:	3350      	adds	r3, #80	; 0x50
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	440b      	add	r3, r1
 8009ee2:	3342      	adds	r3, #66	; 0x42
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	701a      	strb	r2, [r3, #0]
      break;
 8009ee8:	e018      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009eea:	78fa      	ldrb	r2, [r7, #3]
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	00db      	lsls	r3, r3, #3
 8009ef6:	440b      	add	r3, r1
 8009ef8:	3342      	adds	r3, #66	; 0x42
 8009efa:	2202      	movs	r2, #2
 8009efc:	701a      	strb	r2, [r3, #0]
      break;
 8009efe:	e00d      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009f00:	78fa      	ldrb	r2, [r7, #3]
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	440b      	add	r3, r1
 8009f0e:	3342      	adds	r3, #66	; 0x42
 8009f10:	2200      	movs	r2, #0
 8009f12:	701a      	strb	r2, [r3, #0]
      break;
 8009f14:	e002      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8009f16:	bf00      	nop
 8009f18:	e000      	b.n	8009f1c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8009f1a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009f1c:	78fa      	ldrb	r2, [r7, #3]
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	440b      	add	r3, r1
 8009f2a:	3344      	adds	r3, #68	; 0x44
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009f30:	78fa      	ldrb	r2, [r7, #3]
 8009f32:	8b39      	ldrh	r1, [r7, #24]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	00db      	lsls	r3, r3, #3
 8009f3e:	4403      	add	r3, r0
 8009f40:	3348      	adds	r3, #72	; 0x48
 8009f42:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009f44:	78fa      	ldrb	r2, [r7, #3]
 8009f46:	6879      	ldr	r1, [r7, #4]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	440b      	add	r3, r1
 8009f52:	335c      	adds	r3, #92	; 0x5c
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009f58:	78fa      	ldrb	r2, [r7, #3]
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	440b      	add	r3, r1
 8009f66:	334c      	adds	r3, #76	; 0x4c
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	4613      	mov	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	440b      	add	r3, r1
 8009f7a:	3339      	adds	r3, #57	; 0x39
 8009f7c:	78fa      	ldrb	r2, [r7, #3]
 8009f7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009f80:	78fa      	ldrb	r2, [r7, #3]
 8009f82:	6879      	ldr	r1, [r7, #4]
 8009f84:	4613      	mov	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	440b      	add	r3, r1
 8009f8e:	335d      	adds	r3, #93	; 0x5d
 8009f90:	2200      	movs	r2, #0
 8009f92:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	78fa      	ldrb	r2, [r7, #3]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	00db      	lsls	r3, r3, #3
 8009fa2:	3338      	adds	r3, #56	; 0x38
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	18d1      	adds	r1, r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f009 fae4 	bl	801357c <USB_HC_StartXfer>
 8009fb4:	4603      	mov	r3, r0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop

08009fc0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f009 f80d 	bl	8012ff6 <USB_GetMode>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	f040 80ef 	bne.w	800a1c2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f008 fff1 	bl	8012fd0 <USB_ReadInterrupts>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 80e5 	beq.w	800a1c0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f008 ffe8 	bl	8012fd0 <USB_ReadInterrupts>
 800a000:	4603      	mov	r3, r0
 800a002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a00a:	d104      	bne.n	800a016 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a014:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f008 ffd8 	bl	8012fd0 <USB_ReadInterrupts>
 800a020:	4603      	mov	r3, r0
 800a022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a02a:	d104      	bne.n	800a036 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a034:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f008 ffc8 	bl	8012fd0 <USB_ReadInterrupts>
 800a040:	4603      	mov	r3, r0
 800a042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a04a:	d104      	bne.n	800a056 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a054:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f008 ffb8 	bl	8012fd0 <USB_ReadInterrupts>
 800a060:	4603      	mov	r3, r0
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b02      	cmp	r3, #2
 800a068:	d103      	bne.n	800a072 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2202      	movs	r2, #2
 800a070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4618      	mov	r0, r3
 800a078:	f008 ffaa 	bl	8012fd0 <USB_ReadInterrupts>
 800a07c:	4603      	mov	r3, r0
 800a07e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a086:	d115      	bne.n	800a0b4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a090:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d108      	bne.n	800a0b4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f013 feb0 	bl	801de08 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f009 f894 	bl	80131dc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f008 ff89 	bl	8012fd0 <USB_ReadInterrupts>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0c8:	d102      	bne.n	800a0d0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f001 f968 	bl	800b3a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f008 ff7b 	bl	8012fd0 <USB_ReadInterrupts>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f003 0308 	and.w	r3, r3, #8
 800a0e0:	2b08      	cmp	r3, #8
 800a0e2:	d106      	bne.n	800a0f2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f013 fe73 	bl	801ddd0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2208      	movs	r2, #8
 800a0f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f008 ff6a 	bl	8012fd0 <USB_ReadInterrupts>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a106:	d138      	bne.n	800a17a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f009 fb77 	bl	8013800 <USB_HC_ReadInterrupt>
 800a112:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a114:	2300      	movs	r3, #0
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	e025      	b.n	800a166 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	fa22 f303 	lsr.w	r3, r2, r3
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d018      	beq.n	800a160 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a144:	d106      	bne.n	800a154 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	4619      	mov	r1, r3
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f8cf 	bl	800a2f0 <HCD_HC_IN_IRQHandler>
 800a152:	e005      	b.n	800a160 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fcfd 	bl	800ab5a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	3301      	adds	r3, #1
 800a164:	617b      	str	r3, [r7, #20]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d3d4      	bcc.n	800a11a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f008 ff26 	bl	8012fd0 <USB_ReadInterrupts>
 800a184:	4603      	mov	r3, r0
 800a186:	f003 0310 	and.w	r3, r3, #16
 800a18a:	2b10      	cmp	r3, #16
 800a18c:	d101      	bne.n	800a192 <HAL_HCD_IRQHandler+0x1d2>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <HAL_HCD_IRQHandler+0x1d4>
 800a192:	2300      	movs	r3, #0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d014      	beq.n	800a1c2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0210 	bic.w	r2, r2, #16
 800a1a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f001 f84b 	bl	800b244 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	699a      	ldr	r2, [r3, #24]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f042 0210 	orr.w	r2, r2, #16
 800a1bc:	619a      	str	r2, [r3, #24]
 800a1be:	e000      	b.n	800a1c2 <HAL_HCD_IRQHandler+0x202>
      return;
 800a1c0:	bf00      	nop
    }
  }
}
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d101      	bne.n	800a1de <HAL_HCD_Start+0x16>
 800a1da:	2302      	movs	r3, #2
 800a1dc:	e013      	b.n	800a206 <HAL_HCD_Start+0x3e>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f008 fdfe 	bl	8012dec <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f009 f854 	bl	80132a4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d101      	bne.n	800a224 <HAL_HCD_Stop+0x16>
 800a220:	2302      	movs	r3, #2
 800a222:	e00d      	b.n	800a240 <HAL_HCD_Stop+0x32>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4618      	mov	r0, r3
 800a232:	f009 fc31 	bl	8013a98 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	f008 fffb 	bl	8013250 <USB_ResetPort>
 800a25a:	4603      	mov	r3, r0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800a270:	78fa      	ldrb	r2, [r7, #3]
 800a272:	6879      	ldr	r1, [r7, #4]
 800a274:	4613      	mov	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	440b      	add	r3, r1
 800a27e:	335c      	adds	r3, #92	; 0x5c
 800a280:	781b      	ldrb	r3, [r3, #0]
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	460b      	mov	r3, r1
 800a298:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800a29a:	78fa      	ldrb	r2, [r7, #3]
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	440b      	add	r3, r1
 800a2a8:	334c      	adds	r3, #76	; 0x4c
 800a2aa:	681b      	ldr	r3, [r3, #0]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f009 f83d 	bl	8013344 <USB_GetCurrentFrame>
 800a2ca:	4603      	mov	r3, r0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f009 f818 	bl	8013316 <USB_GetHostSpeed>
 800a2e6:	4603      	mov	r3, r0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	4413      	add	r3, r2
 800a312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d119      	bne.n	800a354 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	015a      	lsls	r2, r3, #5
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	4413      	add	r3, r2
 800a328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a32c:	461a      	mov	r2, r3
 800a32e:	2304      	movs	r3, #4
 800a330:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	0151      	lsls	r1, r2, #5
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	440a      	add	r2, r1
 800a348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a34c:	f043 0302 	orr.w	r3, r3, #2
 800a350:	60d3      	str	r3, [r2, #12]
 800a352:	e0ce      	b.n	800a4f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a36a:	d12c      	bne.n	800a3c6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	4413      	add	r3, r2
 800a374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a378:	461a      	mov	r2, r3
 800a37a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a37e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800a380:	6879      	ldr	r1, [r7, #4]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	440b      	add	r3, r1
 800a38e:	335d      	adds	r3, #93	; 0x5d
 800a390:	2207      	movs	r2, #7
 800a392:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	0151      	lsls	r1, r2, #5
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	440a      	add	r2, r1
 800a3aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3ae:	f043 0302 	orr.w	r3, r3, #2
 800a3b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	b2d2      	uxtb	r2, r2
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f009 fa2f 	bl	8013822 <USB_HC_Halt>
 800a3c4:	e095      	b.n	800a4f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	015a      	lsls	r2, r3, #5
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	f003 0320 	and.w	r3, r3, #32
 800a3d8:	2b20      	cmp	r3, #32
 800a3da:	d109      	bne.n	800a3f0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2320      	movs	r3, #32
 800a3ec:	6093      	str	r3, [r2, #8]
 800a3ee:	e080      	b.n	800a4f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 0308 	and.w	r3, r3, #8
 800a402:	2b08      	cmp	r3, #8
 800a404:	d134      	bne.n	800a470 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a420:	f043 0302 	orr.w	r3, r3, #2
 800a424:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	440b      	add	r3, r1
 800a434:	335d      	adds	r3, #93	; 0x5d
 800a436:	2205      	movs	r2, #5
 800a438:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	4413      	add	r3, r2
 800a442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a446:	461a      	mov	r2, r3
 800a448:	2310      	movs	r3, #16
 800a44a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	4413      	add	r3, r2
 800a454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a458:	461a      	mov	r2, r3
 800a45a:	2308      	movs	r3, #8
 800a45c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	b2d2      	uxtb	r2, r2
 800a466:	4611      	mov	r1, r2
 800a468:	4618      	mov	r0, r3
 800a46a:	f009 f9da 	bl	8013822 <USB_HC_Halt>
 800a46e:	e040      	b.n	800a4f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	4413      	add	r3, r2
 800a478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a486:	d134      	bne.n	800a4f2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	0151      	lsls	r1, r2, #5
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	440a      	add	r2, r1
 800a49e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4a2:	f043 0302 	orr.w	r3, r3, #2
 800a4a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	b2d2      	uxtb	r2, r2
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f009 f9b5 	bl	8013822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	2310      	movs	r3, #16
 800a4c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	440b      	add	r3, r1
 800a4d8:	335d      	adds	r3, #93	; 0x5d
 800a4da:	2208      	movs	r2, #8
 800a4dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4f0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a508:	d122      	bne.n	800a550 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4413      	add	r3, r2
 800a512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	0151      	lsls	r1, r2, #5
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	440a      	add	r2, r1
 800a520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a524:	f043 0302 	orr.w	r3, r3, #2
 800a528:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	b2d2      	uxtb	r2, r2
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f009 f974 	bl	8013822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	4413      	add	r3, r2
 800a542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a546:	461a      	mov	r2, r3
 800a548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a54c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800a54e:	e300      	b.n	800ab52 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	4413      	add	r3, r2
 800a558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b01      	cmp	r3, #1
 800a564:	f040 80fd 	bne.w	800a762 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d01b      	beq.n	800a5a8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	440b      	add	r3, r1
 800a57e:	3348      	adds	r3, #72	; 0x48
 800a580:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	0159      	lsls	r1, r3, #5
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	440b      	add	r3, r1
 800a58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a594:	1ad1      	subs	r1, r2, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	4403      	add	r3, r0
 800a5a4:	334c      	adds	r3, #76	; 0x4c
 800a5a6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a5a8:	6879      	ldr	r1, [r7, #4]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	440b      	add	r3, r1
 800a5b6:	335d      	adds	r3, #93	; 0x5d
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a5bc:	6879      	ldr	r1, [r7, #4]
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	00db      	lsls	r3, r3, #3
 800a5c8:	440b      	add	r3, r1
 800a5ca:	3358      	adds	r3, #88	; 0x58
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5dc:	461a      	mov	r2, r3
 800a5de:	2301      	movs	r3, #1
 800a5e0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a5e2:	6879      	ldr	r1, [r7, #4]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4413      	add	r3, r2
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	440b      	add	r3, r1
 800a5f0:	333f      	adds	r3, #63	; 0x3f
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00a      	beq.n	800a60e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a5f8:	6879      	ldr	r1, [r7, #4]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	440b      	add	r3, r1
 800a606:	333f      	adds	r3, #63	; 0x3f
 800a608:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d121      	bne.n	800a652 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	4413      	add	r3, r2
 800a616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	0151      	lsls	r1, r2, #5
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	440a      	add	r2, r1
 800a624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a628:	f043 0302 	orr.w	r3, r3, #2
 800a62c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	b2d2      	uxtb	r2, r2
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f009 f8f2 	bl	8013822 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	015a      	lsls	r2, r3, #5
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	4413      	add	r3, r2
 800a646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a64a:	461a      	mov	r2, r3
 800a64c:	2310      	movs	r3, #16
 800a64e:	6093      	str	r3, [r2, #8]
 800a650:	e070      	b.n	800a734 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	00db      	lsls	r3, r3, #3
 800a65e:	440b      	add	r3, r1
 800a660:	333f      	adds	r3, #63	; 0x3f
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	2b03      	cmp	r3, #3
 800a666:	d12a      	bne.n	800a6be <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	0151      	lsls	r1, r2, #5
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	440a      	add	r2, r1
 800a67e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a682:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a686:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a688:	6879      	ldr	r1, [r7, #4]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	00db      	lsls	r3, r3, #3
 800a694:	440b      	add	r3, r1
 800a696:	335c      	adds	r3, #92	; 0x5c
 800a698:	2201      	movs	r2, #1
 800a69a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	b2d8      	uxtb	r0, r3
 800a6a0:	6879      	ldr	r1, [r7, #4]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	440b      	add	r3, r1
 800a6ae:	335c      	adds	r3, #92	; 0x5c
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	4601      	mov	r1, r0
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f013 fbb4 	bl	801de24 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a6bc:	e03a      	b.n	800a734 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	440b      	add	r3, r1
 800a6cc:	333f      	adds	r3, #63	; 0x3f
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d12f      	bne.n	800a734 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	00db      	lsls	r3, r3, #3
 800a6e0:	440b      	add	r3, r1
 800a6e2:	335c      	adds	r3, #92	; 0x5c
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	440b      	add	r3, r1
 800a6f6:	3350      	adds	r3, #80	; 0x50
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	f083 0301 	eor.w	r3, r3, #1
 800a6fe:	b2d8      	uxtb	r0, r3
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4613      	mov	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	440b      	add	r3, r1
 800a70e:	3350      	adds	r3, #80	; 0x50
 800a710:	4602      	mov	r2, r0
 800a712:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	b2d8      	uxtb	r0, r3
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	440b      	add	r3, r1
 800a726:	335c      	adds	r3, #92	; 0x5c
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	4601      	mov	r1, r0
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f013 fb78 	bl	801de24 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	4613      	mov	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4413      	add	r3, r2
 800a73e:	00db      	lsls	r3, r3, #3
 800a740:	440b      	add	r3, r1
 800a742:	3350      	adds	r3, #80	; 0x50
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	f083 0301 	eor.w	r3, r3, #1
 800a74a:	b2d8      	uxtb	r0, r3
 800a74c:	6879      	ldr	r1, [r7, #4]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	00db      	lsls	r3, r3, #3
 800a758:	440b      	add	r3, r1
 800a75a:	3350      	adds	r3, #80	; 0x50
 800a75c:	4602      	mov	r2, r0
 800a75e:	701a      	strb	r2, [r3, #0]
}
 800a760:	e1f7      	b.n	800ab52 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	f003 0302 	and.w	r3, r3, #2
 800a774:	2b02      	cmp	r3, #2
 800a776:	f040 811a 	bne.w	800a9ae <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	4413      	add	r3, r2
 800a782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	0151      	lsls	r1, r2, #5
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	440a      	add	r2, r1
 800a790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a794:	f023 0302 	bic.w	r3, r3, #2
 800a798:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a79a:	6879      	ldr	r1, [r7, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	00db      	lsls	r3, r3, #3
 800a7a6:	440b      	add	r3, r1
 800a7a8:	335d      	adds	r3, #93	; 0x5d
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d10a      	bne.n	800a7c6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	440b      	add	r3, r1
 800a7be:	335c      	adds	r3, #92	; 0x5c
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	701a      	strb	r2, [r3, #0]
 800a7c4:	e0d9      	b.n	800a97a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	440b      	add	r3, r1
 800a7d4:	335d      	adds	r3, #93	; 0x5d
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	2b05      	cmp	r3, #5
 800a7da:	d10a      	bne.n	800a7f2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	440b      	add	r3, r1
 800a7ea:	335c      	adds	r3, #92	; 0x5c
 800a7ec:	2205      	movs	r2, #5
 800a7ee:	701a      	strb	r2, [r3, #0]
 800a7f0:	e0c3      	b.n	800a97a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	440b      	add	r3, r1
 800a800:	335d      	adds	r3, #93	; 0x5d
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b06      	cmp	r3, #6
 800a806:	d00a      	beq.n	800a81e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	4613      	mov	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	00db      	lsls	r3, r3, #3
 800a814:	440b      	add	r3, r1
 800a816:	335d      	adds	r3, #93	; 0x5d
 800a818:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a81a:	2b08      	cmp	r3, #8
 800a81c:	d156      	bne.n	800a8cc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	440b      	add	r3, r1
 800a82c:	3358      	adds	r3, #88	; 0x58
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	1c59      	adds	r1, r3, #1
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	4403      	add	r3, r0
 800a840:	3358      	adds	r3, #88	; 0x58
 800a842:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800a844:	6879      	ldr	r1, [r7, #4]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	440b      	add	r3, r1
 800a852:	3358      	adds	r3, #88	; 0x58
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b03      	cmp	r3, #3
 800a858:	d914      	bls.n	800a884 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a85a:	6879      	ldr	r1, [r7, #4]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	440b      	add	r3, r1
 800a868:	3358      	adds	r3, #88	; 0x58
 800a86a:	2200      	movs	r2, #0
 800a86c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a86e:	6879      	ldr	r1, [r7, #4]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4613      	mov	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	440b      	add	r3, r1
 800a87c:	335c      	adds	r3, #92	; 0x5c
 800a87e:	2204      	movs	r2, #4
 800a880:	701a      	strb	r2, [r3, #0]
 800a882:	e009      	b.n	800a898 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	440b      	add	r3, r1
 800a892:	335c      	adds	r3, #92	; 0x5c
 800a894:	2202      	movs	r2, #2
 800a896:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a8ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	015a      	lsls	r2, r3, #5
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	e056      	b.n	800a97a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a8cc:	6879      	ldr	r1, [r7, #4]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	4413      	add	r3, r2
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	440b      	add	r3, r1
 800a8da:	335d      	adds	r3, #93	; 0x5d
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	d123      	bne.n	800a92a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	00db      	lsls	r3, r3, #3
 800a8ee:	440b      	add	r3, r1
 800a8f0:	335c      	adds	r3, #92	; 0x5c
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a90c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a914:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a922:	461a      	mov	r2, r3
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	e027      	b.n	800a97a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a92a:	6879      	ldr	r1, [r7, #4]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	00db      	lsls	r3, r3, #3
 800a936:	440b      	add	r3, r1
 800a938:	335d      	adds	r3, #93	; 0x5d
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b07      	cmp	r3, #7
 800a93e:	d11c      	bne.n	800a97a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	4613      	mov	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	440b      	add	r3, r1
 800a94e:	3358      	adds	r3, #88	; 0x58
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	1c59      	adds	r1, r3, #1
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	4613      	mov	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	00db      	lsls	r3, r3, #3
 800a960:	4403      	add	r3, r0
 800a962:	3358      	adds	r3, #88	; 0x58
 800a964:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	00db      	lsls	r3, r3, #3
 800a972:	440b      	add	r3, r1
 800a974:	335c      	adds	r3, #92	; 0x5c
 800a976:	2204      	movs	r2, #4
 800a978:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	015a      	lsls	r2, r3, #5
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	4413      	add	r3, r2
 800a982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a986:	461a      	mov	r2, r3
 800a988:	2302      	movs	r3, #2
 800a98a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	b2d8      	uxtb	r0, r3
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4613      	mov	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	440b      	add	r3, r1
 800a99e:	335c      	adds	r3, #92	; 0x5c
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	4601      	mov	r1, r0
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f013 fa3c 	bl	801de24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a9ac:	e0d1      	b.n	800ab52 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	015a      	lsls	r2, r3, #5
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c0:	2b80      	cmp	r3, #128	; 0x80
 800a9c2:	d13e      	bne.n	800aa42 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	0151      	lsls	r1, r2, #5
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	440a      	add	r2, r1
 800a9da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9de:	f043 0302 	orr.w	r3, r3, #2
 800a9e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	440b      	add	r3, r1
 800a9f2:	3358      	adds	r3, #88	; 0x58
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	1c59      	adds	r1, r3, #1
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	4403      	add	r3, r0
 800aa06:	3358      	adds	r3, #88	; 0x58
 800aa08:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	4413      	add	r3, r2
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	440b      	add	r3, r1
 800aa18:	335d      	adds	r3, #93	; 0x5d
 800aa1a:	2206      	movs	r2, #6
 800aa1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	b2d2      	uxtb	r2, r2
 800aa26:	4611      	mov	r1, r2
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f008 fefa 	bl	8013822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	2380      	movs	r3, #128	; 0x80
 800aa3e:	6093      	str	r3, [r2, #8]
}
 800aa40:	e087      	b.n	800ab52 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b10      	cmp	r3, #16
 800aa56:	d17c      	bne.n	800ab52 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	00db      	lsls	r3, r3, #3
 800aa64:	440b      	add	r3, r1
 800aa66:	333f      	adds	r3, #63	; 0x3f
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d122      	bne.n	800aab4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	4613      	mov	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	440b      	add	r3, r1
 800aa7c:	3358      	adds	r3, #88	; 0x58
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	0151      	lsls	r1, r2, #5
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	440a      	add	r2, r1
 800aa98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa9c:	f043 0302 	orr.w	r3, r3, #2
 800aaa0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	b2d2      	uxtb	r2, r2
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f008 feb8 	bl	8013822 <USB_HC_Halt>
 800aab2:	e045      	b.n	800ab40 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	4613      	mov	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4413      	add	r3, r2
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	440b      	add	r3, r1
 800aac2:	333f      	adds	r3, #63	; 0x3f
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00a      	beq.n	800aae0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	440b      	add	r3, r1
 800aad8:	333f      	adds	r3, #63	; 0x3f
 800aada:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d12f      	bne.n	800ab40 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	4613      	mov	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	00db      	lsls	r3, r3, #3
 800aaec:	440b      	add	r3, r1
 800aaee:	3358      	adds	r3, #88	; 0x58
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d121      	bne.n	800ab40 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	440b      	add	r3, r1
 800ab0a:	335d      	adds	r3, #93	; 0x5d
 800ab0c:	2203      	movs	r2, #3
 800ab0e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab2a:	f043 0302 	orr.w	r3, r3, #2
 800ab2e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	b2d2      	uxtb	r2, r2
 800ab38:	4611      	mov	r1, r2
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f008 fe71 	bl	8013822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	2310      	movs	r3, #16
 800ab50:	6093      	str	r3, [r2, #8]
}
 800ab52:	bf00      	nop
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b086      	sub	sp, #24
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	460b      	mov	r3, r1
 800ab64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	015a      	lsls	r2, r3, #5
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	f003 0304 	and.w	r3, r3, #4
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	d119      	bne.n	800abbe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab96:	461a      	mov	r2, r3
 800ab98:	2304      	movs	r3, #4
 800ab9a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	0151      	lsls	r1, r2, #5
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	440a      	add	r2, r1
 800abb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abb6:	f043 0302 	orr.w	r3, r3, #2
 800abba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800abbc:	e33e      	b.n	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f003 0320 	and.w	r3, r3, #32
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d141      	bne.n	800ac58 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abe0:	461a      	mov	r2, r3
 800abe2:	2320      	movs	r3, #32
 800abe4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	4613      	mov	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	440b      	add	r3, r1
 800abf4:	333d      	adds	r3, #61	; 0x3d
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	f040 831f 	bne.w	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	00db      	lsls	r3, r3, #3
 800ac0a:	440b      	add	r3, r1
 800ac0c:	333d      	adds	r3, #61	; 0x3d
 800ac0e:	2200      	movs	r2, #0
 800ac10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800ac12:	6879      	ldr	r1, [r7, #4]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4613      	mov	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	00db      	lsls	r3, r3, #3
 800ac1e:	440b      	add	r3, r1
 800ac20:	335c      	adds	r3, #92	; 0x5c
 800ac22:	2202      	movs	r2, #2
 800ac24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	0151      	lsls	r1, r2, #5
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	440a      	add	r2, r1
 800ac3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac40:	f043 0302 	orr.w	r3, r3, #2
 800ac44:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	b2d2      	uxtb	r2, r2
 800ac4e:	4611      	mov	r1, r2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f008 fde6 	bl	8013822 <USB_HC_Halt>
}
 800ac56:	e2f1      	b.n	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6a:	2b40      	cmp	r3, #64	; 0x40
 800ac6c:	d13f      	bne.n	800acee <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	00db      	lsls	r3, r3, #3
 800ac7a:	440b      	add	r3, r1
 800ac7c:	335d      	adds	r3, #93	; 0x5d
 800ac7e:	2204      	movs	r2, #4
 800ac80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	440b      	add	r3, r1
 800ac90:	333d      	adds	r3, #61	; 0x3d
 800ac92:	2201      	movs	r2, #1
 800ac94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4413      	add	r3, r2
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	440b      	add	r3, r1
 800aca4:	3358      	adds	r3, #88	; 0x58
 800aca6:	2200      	movs	r2, #0
 800aca8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	015a      	lsls	r2, r3, #5
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	4413      	add	r3, r2
 800acb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	0151      	lsls	r1, r2, #5
 800acbc:	693a      	ldr	r2, [r7, #16]
 800acbe:	440a      	add	r2, r1
 800acc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acc4:	f043 0302 	orr.w	r3, r3, #2
 800acc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	b2d2      	uxtb	r2, r2
 800acd2:	4611      	mov	r1, r2
 800acd4:	4618      	mov	r0, r3
 800acd6:	f008 fda4 	bl	8013822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	015a      	lsls	r2, r3, #5
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	4413      	add	r3, r2
 800ace2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace6:	461a      	mov	r2, r3
 800ace8:	2340      	movs	r3, #64	; 0x40
 800acea:	6093      	str	r3, [r2, #8]
}
 800acec:	e2a6      	b.n	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad04:	d122      	bne.n	800ad4c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	0151      	lsls	r1, r2, #5
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	440a      	add	r2, r1
 800ad1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad20:	f043 0302 	orr.w	r3, r3, #2
 800ad24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	b2d2      	uxtb	r2, r2
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f008 fd76 	bl	8013822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad42:	461a      	mov	r2, r3
 800ad44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad48:	6093      	str	r3, [r2, #8]
}
 800ad4a:	e277      	b.n	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d135      	bne.n	800adce <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800ad62:	6879      	ldr	r1, [r7, #4]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	440b      	add	r3, r1
 800ad70:	3358      	adds	r3, #88	; 0x58
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	015a      	lsls	r2, r3, #5
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	0151      	lsls	r1, r2, #5
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	440a      	add	r2, r1
 800ad8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad90:	f043 0302 	orr.w	r3, r3, #2
 800ad94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	b2d2      	uxtb	r2, r2
 800ad9e:	4611      	mov	r1, r2
 800ada0:	4618      	mov	r0, r3
 800ada2:	f008 fd3e 	bl	8013822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	4413      	add	r3, r2
 800adae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb2:	461a      	mov	r2, r3
 800adb4:	2301      	movs	r3, #1
 800adb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800adb8:	6879      	ldr	r1, [r7, #4]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	4613      	mov	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4413      	add	r3, r2
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	440b      	add	r3, r1
 800adc6:	335d      	adds	r3, #93	; 0x5d
 800adc8:	2201      	movs	r2, #1
 800adca:	701a      	strb	r2, [r3, #0]
}
 800adcc:	e236      	b.n	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	4413      	add	r3, r2
 800add6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f003 0308 	and.w	r3, r3, #8
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d12b      	bne.n	800ae3c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	4413      	add	r3, r2
 800adec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adf0:	461a      	mov	r2, r3
 800adf2:	2308      	movs	r3, #8
 800adf4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	015a      	lsls	r2, r3, #5
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	4413      	add	r3, r2
 800adfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	0151      	lsls	r1, r2, #5
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	440a      	add	r2, r1
 800ae0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae10:	f043 0302 	orr.w	r3, r3, #2
 800ae14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	b2d2      	uxtb	r2, r2
 800ae1e:	4611      	mov	r1, r2
 800ae20:	4618      	mov	r0, r3
 800ae22:	f008 fcfe 	bl	8013822 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	440b      	add	r3, r1
 800ae34:	335d      	adds	r3, #93	; 0x5d
 800ae36:	2205      	movs	r2, #5
 800ae38:	701a      	strb	r2, [r3, #0]
}
 800ae3a:	e1ff      	b.n	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f003 0310 	and.w	r3, r3, #16
 800ae4e:	2b10      	cmp	r3, #16
 800ae50:	d155      	bne.n	800aefe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4613      	mov	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	440b      	add	r3, r1
 800ae60:	3358      	adds	r3, #88	; 0x58
 800ae62:	2200      	movs	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800ae66:	6879      	ldr	r1, [r7, #4]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	00db      	lsls	r3, r3, #3
 800ae72:	440b      	add	r3, r1
 800ae74:	335d      	adds	r3, #93	; 0x5d
 800ae76:	2203      	movs	r2, #3
 800ae78:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	440b      	add	r3, r1
 800ae88:	333d      	adds	r3, #61	; 0x3d
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d114      	bne.n	800aeba <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800ae90:	6879      	ldr	r1, [r7, #4]
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	4613      	mov	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	440b      	add	r3, r1
 800ae9e:	333c      	adds	r3, #60	; 0x3c
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d109      	bne.n	800aeba <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	00db      	lsls	r3, r3, #3
 800aeb2:	440b      	add	r3, r1
 800aeb4:	333d      	adds	r3, #61	; 0x3d
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	015a      	lsls	r2, r3, #5
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	4413      	add	r3, r2
 800aec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	0151      	lsls	r1, r2, #5
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	440a      	add	r2, r1
 800aed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aed4:	f043 0302 	orr.w	r3, r3, #2
 800aed8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	b2d2      	uxtb	r2, r2
 800aee2:	4611      	mov	r1, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f008 fc9c 	bl	8013822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aef6:	461a      	mov	r2, r3
 800aef8:	2310      	movs	r3, #16
 800aefa:	6093      	str	r3, [r2, #8]
}
 800aefc:	e19e      	b.n	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	4413      	add	r3, r2
 800af06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af10:	2b80      	cmp	r3, #128	; 0x80
 800af12:	d12b      	bne.n	800af6c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	0151      	lsls	r1, r2, #5
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	440a      	add	r2, r1
 800af2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af2e:	f043 0302 	orr.w	r3, r3, #2
 800af32:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	b2d2      	uxtb	r2, r2
 800af3c:	4611      	mov	r1, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f008 fc6f 	bl	8013822 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4613      	mov	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	440b      	add	r3, r1
 800af52:	335d      	adds	r3, #93	; 0x5d
 800af54:	2206      	movs	r2, #6
 800af56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af64:	461a      	mov	r2, r3
 800af66:	2380      	movs	r3, #128	; 0x80
 800af68:	6093      	str	r3, [r2, #8]
}
 800af6a:	e167      	b.n	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	015a      	lsls	r2, r3, #5
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	4413      	add	r3, r2
 800af74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af82:	d135      	bne.n	800aff0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	0151      	lsls	r1, r2, #5
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	440a      	add	r2, r1
 800af9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af9e:	f043 0302 	orr.w	r3, r3, #2
 800afa2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	4611      	mov	r1, r2
 800afae:	4618      	mov	r0, r3
 800afb0:	f008 fc37 	bl	8013822 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afc0:	461a      	mov	r2, r3
 800afc2:	2310      	movs	r3, #16
 800afc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	015a      	lsls	r2, r3, #5
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	4413      	add	r3, r2
 800afce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afd2:	461a      	mov	r2, r3
 800afd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800afda:	6879      	ldr	r1, [r7, #4]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	4613      	mov	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	440b      	add	r3, r1
 800afe8:	335d      	adds	r3, #93	; 0x5d
 800afea:	2208      	movs	r2, #8
 800afec:	701a      	strb	r2, [r3, #0]
}
 800afee:	e125      	b.n	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	015a      	lsls	r2, r3, #5
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	4413      	add	r3, r2
 800aff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	2b02      	cmp	r3, #2
 800b004:	f040 811a 	bne.w	800b23c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	0151      	lsls	r1, r2, #5
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	440a      	add	r2, r1
 800b01e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b022:	f023 0302 	bic.w	r3, r3, #2
 800b026:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800b028:	6879      	ldr	r1, [r7, #4]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	4613      	mov	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	440b      	add	r3, r1
 800b036:	335d      	adds	r3, #93	; 0x5d
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d137      	bne.n	800b0ae <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	00db      	lsls	r3, r3, #3
 800b04a:	440b      	add	r3, r1
 800b04c:	335c      	adds	r3, #92	; 0x5c
 800b04e:	2201      	movs	r2, #1
 800b050:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	4613      	mov	r3, r2
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	00db      	lsls	r3, r3, #3
 800b05e:	440b      	add	r3, r1
 800b060:	333f      	adds	r3, #63	; 0x3f
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b02      	cmp	r3, #2
 800b066:	d00b      	beq.n	800b080 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800b068:	6879      	ldr	r1, [r7, #4]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	00db      	lsls	r3, r3, #3
 800b074:	440b      	add	r3, r1
 800b076:	333f      	adds	r3, #63	; 0x3f
 800b078:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	f040 80c5 	bne.w	800b20a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	4613      	mov	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	440b      	add	r3, r1
 800b08e:	3351      	adds	r3, #81	; 0x51
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	f083 0301 	eor.w	r3, r3, #1
 800b096:	b2d8      	uxtb	r0, r3
 800b098:	6879      	ldr	r1, [r7, #4]
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4613      	mov	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4413      	add	r3, r2
 800b0a2:	00db      	lsls	r3, r3, #3
 800b0a4:	440b      	add	r3, r1
 800b0a6:	3351      	adds	r3, #81	; 0x51
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	701a      	strb	r2, [r3, #0]
 800b0ac:	e0ad      	b.n	800b20a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	00db      	lsls	r3, r3, #3
 800b0ba:	440b      	add	r3, r1
 800b0bc:	335d      	adds	r3, #93	; 0x5d
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d10a      	bne.n	800b0da <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b0c4:	6879      	ldr	r1, [r7, #4]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	440b      	add	r3, r1
 800b0d2:	335c      	adds	r3, #92	; 0x5c
 800b0d4:	2202      	movs	r2, #2
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	e097      	b.n	800b20a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	00db      	lsls	r3, r3, #3
 800b0e6:	440b      	add	r3, r1
 800b0e8:	335d      	adds	r3, #93	; 0x5d
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	d10a      	bne.n	800b106 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	440b      	add	r3, r1
 800b0fe:	335c      	adds	r3, #92	; 0x5c
 800b100:	2202      	movs	r2, #2
 800b102:	701a      	strb	r2, [r3, #0]
 800b104:	e081      	b.n	800b20a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	4613      	mov	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	440b      	add	r3, r1
 800b114:	335d      	adds	r3, #93	; 0x5d
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b05      	cmp	r3, #5
 800b11a:	d10a      	bne.n	800b132 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	4613      	mov	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4413      	add	r3, r2
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	440b      	add	r3, r1
 800b12a:	335c      	adds	r3, #92	; 0x5c
 800b12c:	2205      	movs	r2, #5
 800b12e:	701a      	strb	r2, [r3, #0]
 800b130:	e06b      	b.n	800b20a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	4613      	mov	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4413      	add	r3, r2
 800b13c:	00db      	lsls	r3, r3, #3
 800b13e:	440b      	add	r3, r1
 800b140:	335d      	adds	r3, #93	; 0x5d
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b06      	cmp	r3, #6
 800b146:	d00a      	beq.n	800b15e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	4613      	mov	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	440b      	add	r3, r1
 800b156:	335d      	adds	r3, #93	; 0x5d
 800b158:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800b15a:	2b08      	cmp	r3, #8
 800b15c:	d155      	bne.n	800b20a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	440b      	add	r3, r1
 800b16c:	3358      	adds	r3, #88	; 0x58
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	1c59      	adds	r1, r3, #1
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	00db      	lsls	r3, r3, #3
 800b17e:	4403      	add	r3, r0
 800b180:	3358      	adds	r3, #88	; 0x58
 800b182:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800b184:	6879      	ldr	r1, [r7, #4]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	4613      	mov	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	440b      	add	r3, r1
 800b192:	3358      	adds	r3, #88	; 0x58
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b03      	cmp	r3, #3
 800b198:	d914      	bls.n	800b1c4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800b19a:	6879      	ldr	r1, [r7, #4]
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	00db      	lsls	r3, r3, #3
 800b1a6:	440b      	add	r3, r1
 800b1a8:	3358      	adds	r3, #88	; 0x58
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800b1ae:	6879      	ldr	r1, [r7, #4]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	00db      	lsls	r3, r3, #3
 800b1ba:	440b      	add	r3, r1
 800b1bc:	335c      	adds	r3, #92	; 0x5c
 800b1be:	2204      	movs	r2, #4
 800b1c0:	701a      	strb	r2, [r3, #0]
 800b1c2:	e009      	b.n	800b1d8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b1c4:	6879      	ldr	r1, [r7, #4]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	440b      	add	r3, r1
 800b1d2:	335c      	adds	r3, #92	; 0x5c
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b1ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b204:	461a      	mov	r2, r3
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	4413      	add	r3, r2
 800b212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b216:	461a      	mov	r2, r3
 800b218:	2302      	movs	r3, #2
 800b21a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	b2d8      	uxtb	r0, r3
 800b220:	6879      	ldr	r1, [r7, #4]
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	4613      	mov	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	440b      	add	r3, r1
 800b22e:	335c      	adds	r3, #92	; 0x5c
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	461a      	mov	r2, r3
 800b234:	4601      	mov	r1, r0
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f012 fdf4 	bl	801de24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800b23c:	bf00      	nop
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b08a      	sub	sp, #40	; 0x28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	f003 030f 	and.w	r3, r3, #15
 800b264:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	0c5b      	lsrs	r3, r3, #17
 800b26a:	f003 030f 	and.w	r3, r3, #15
 800b26e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	091b      	lsrs	r3, r3, #4
 800b274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b278:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d004      	beq.n	800b28a <HCD_RXQLVL_IRQHandler+0x46>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2b05      	cmp	r3, #5
 800b284:	f000 8082 	beq.w	800b38c <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800b288:	e083      	b.n	800b392 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d07f      	beq.n	800b390 <HCD_RXQLVL_IRQHandler+0x14c>
 800b290:	6879      	ldr	r1, [r7, #4]
 800b292:	69ba      	ldr	r2, [r7, #24]
 800b294:	4613      	mov	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	440b      	add	r3, r1
 800b29e:	3344      	adds	r3, #68	; 0x44
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d074      	beq.n	800b390 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6818      	ldr	r0, [r3, #0]
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	00db      	lsls	r3, r3, #3
 800b2b6:	440b      	add	r3, r1
 800b2b8:	3344      	adds	r3, #68	; 0x44
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	b292      	uxth	r2, r2
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	f007 fe5c 	bl	8012f7e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800b2c6:	6879      	ldr	r1, [r7, #4]
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	00db      	lsls	r3, r3, #3
 800b2d2:	440b      	add	r3, r1
 800b2d4:	3344      	adds	r3, #68	; 0x44
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	18d1      	adds	r1, r2, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	69ba      	ldr	r2, [r7, #24]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	00db      	lsls	r3, r3, #3
 800b2e8:	4403      	add	r3, r0
 800b2ea:	3344      	adds	r3, #68	; 0x44
 800b2ec:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	00db      	lsls	r3, r3, #3
 800b2fa:	440b      	add	r3, r1
 800b2fc:	334c      	adds	r3, #76	; 0x4c
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	18d1      	adds	r1, r2, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	4613      	mov	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4413      	add	r3, r2
 800b30e:	00db      	lsls	r3, r3, #3
 800b310:	4403      	add	r3, r0
 800b312:	334c      	adds	r3, #76	; 0x4c
 800b314:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	015a      	lsls	r2, r3, #5
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	4413      	add	r3, r2
 800b31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b322:	691a      	ldr	r2, [r3, #16]
 800b324:	4b1d      	ldr	r3, [pc, #116]	; (800b39c <HCD_RXQLVL_IRQHandler+0x158>)
 800b326:	4013      	ands	r3, r2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d031      	beq.n	800b390 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	015a      	lsls	r2, r3, #5
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	4413      	add	r3, r2
 800b334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b342:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b34a:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	015a      	lsls	r2, r3, #5
 800b350:	6a3b      	ldr	r3, [r7, #32]
 800b352:	4413      	add	r3, r2
 800b354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b358:	461a      	mov	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	69ba      	ldr	r2, [r7, #24]
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	00db      	lsls	r3, r3, #3
 800b36a:	440b      	add	r3, r1
 800b36c:	3350      	adds	r3, #80	; 0x50
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	f083 0301 	eor.w	r3, r3, #1
 800b374:	b2d8      	uxtb	r0, r3
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	4613      	mov	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	00db      	lsls	r3, r3, #3
 800b382:	440b      	add	r3, r1
 800b384:	3350      	adds	r3, #80	; 0x50
 800b386:	4602      	mov	r2, r0
 800b388:	701a      	strb	r2, [r3, #0]
      break;
 800b38a:	e001      	b.n	800b390 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800b38c:	bf00      	nop
 800b38e:	e000      	b.n	800b392 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 800b390:	bf00      	nop
  }
}
 800b392:	bf00      	nop
 800b394:	3728      	adds	r7, #40	; 0x28
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	1ff80000 	.word	0x1ff80000

0800b3a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b3cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f003 0302 	and.w	r3, r3, #2
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d10b      	bne.n	800b3f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d102      	bne.n	800b3e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f012 fd02 	bl	801ddec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f043 0302 	orr.w	r3, r3, #2
 800b3ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f003 0308 	and.w	r3, r3, #8
 800b3f6:	2b08      	cmp	r3, #8
 800b3f8:	d132      	bne.n	800b460 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	f043 0308 	orr.w	r3, r3, #8
 800b400:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f003 0304 	and.w	r3, r3, #4
 800b408:	2b04      	cmp	r3, #4
 800b40a:	d126      	bne.n	800b45a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	2b02      	cmp	r3, #2
 800b412:	d113      	bne.n	800b43c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b41a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b41e:	d106      	bne.n	800b42e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2102      	movs	r1, #2
 800b426:	4618      	mov	r0, r3
 800b428:	f007 fed8 	bl	80131dc <USB_InitFSLSPClkSel>
 800b42c:	e011      	b.n	800b452 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2101      	movs	r1, #1
 800b434:	4618      	mov	r0, r3
 800b436:	f007 fed1 	bl	80131dc <USB_InitFSLSPClkSel>
 800b43a:	e00a      	b.n	800b452 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d106      	bne.n	800b452 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b44a:	461a      	mov	r2, r3
 800b44c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b450:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f012 fcf4 	bl	801de40 <HAL_HCD_PortEnabled_Callback>
 800b458:	e002      	b.n	800b460 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f012 fcfe 	bl	801de5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f003 0320 	and.w	r3, r3, #32
 800b466:	2b20      	cmp	r3, #32
 800b468:	d103      	bne.n	800b472 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f043 0320 	orr.w	r3, r3, #32
 800b470:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b478:	461a      	mov	r2, r3
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	6013      	str	r3, [r2, #0]
}
 800b47e:	bf00      	nop
 800b480:	3718      	adds	r7, #24
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e07f      	b.n	800b59a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d106      	bne.n	800b4b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7fb ff40 	bl	8007334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2224      	movs	r2, #36	; 0x24
 800b4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 0201 	bic.w	r2, r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b4d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	689a      	ldr	r2, [r3, #8]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d107      	bne.n	800b502 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	689a      	ldr	r2, [r3, #8]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4fe:	609a      	str	r2, [r3, #8]
 800b500:	e006      	b.n	800b510 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689a      	ldr	r2, [r3, #8]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b50e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	2b02      	cmp	r3, #2
 800b516:	d104      	bne.n	800b522 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b520:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6859      	ldr	r1, [r3, #4]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	4b1d      	ldr	r3, [pc, #116]	; (800b5a4 <HAL_I2C_Init+0x11c>)
 800b52e:	430b      	orrs	r3, r1
 800b530:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68da      	ldr	r2, [r3, #12]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b540:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	691a      	ldr	r2, [r3, #16]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	ea42 0103 	orr.w	r1, r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	021a      	lsls	r2, r3, #8
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	69d9      	ldr	r1, [r3, #28]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a1a      	ldr	r2, [r3, #32]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	430a      	orrs	r2, r1
 800b56a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f042 0201 	orr.w	r2, r2, #1
 800b57a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2220      	movs	r2, #32
 800b586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	02008000 	.word	0x02008000

0800b5a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af02      	add	r7, sp, #8
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	607a      	str	r2, [r7, #4]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	817b      	strh	r3, [r7, #10]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b20      	cmp	r3, #32
 800b5c6:	f040 80da 	bne.w	800b77e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d101      	bne.n	800b5d8 <HAL_I2C_Master_Transmit+0x30>
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	e0d3      	b.n	800b780 <HAL_I2C_Master_Transmit+0x1d8>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b5e0:	f7fc ff08 	bl	80083f4 <HAL_GetTick>
 800b5e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	2319      	movs	r3, #25
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f000 fcbc 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e0be      	b.n	800b780 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2221      	movs	r2, #33	; 0x21
 800b606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2210      	movs	r2, #16
 800b60e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	893a      	ldrh	r2, [r7, #8]
 800b622:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b62e:	b29b      	uxth	r3, r3
 800b630:	2bff      	cmp	r3, #255	; 0xff
 800b632:	d90e      	bls.n	800b652 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	22ff      	movs	r2, #255	; 0xff
 800b638:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	8979      	ldrh	r1, [r7, #10]
 800b642:	4b51      	ldr	r3, [pc, #324]	; (800b788 <HAL_I2C_Master_Transmit+0x1e0>)
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f000 fe1e 	bl	800c28c <I2C_TransferConfig>
 800b650:	e06c      	b.n	800b72c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b656:	b29a      	uxth	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b660:	b2da      	uxtb	r2, r3
 800b662:	8979      	ldrh	r1, [r7, #10]
 800b664:	4b48      	ldr	r3, [pc, #288]	; (800b788 <HAL_I2C_Master_Transmit+0x1e0>)
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f000 fe0d 	bl	800c28c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b672:	e05b      	b.n	800b72c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	6a39      	ldr	r1, [r7, #32]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 fcb9 	bl	800bff0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e07b      	b.n	800b780 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	781a      	ldrb	r2, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d034      	beq.n	800b72c <HAL_I2C_Master_Transmit+0x184>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d130      	bne.n	800b72c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2180      	movs	r1, #128	; 0x80
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 fc4b 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e04d      	b.n	800b780 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	2bff      	cmp	r3, #255	; 0xff
 800b6ec:	d90e      	bls.n	800b70c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	22ff      	movs	r2, #255	; 0xff
 800b6f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	8979      	ldrh	r1, [r7, #10]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f000 fdc1 	bl	800c28c <I2C_TransferConfig>
 800b70a:	e00f      	b.n	800b72c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b710:	b29a      	uxth	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	8979      	ldrh	r1, [r7, #10]
 800b71e:	2300      	movs	r3, #0
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 fdb0 	bl	800c28c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b730:	b29b      	uxth	r3, r3
 800b732:	2b00      	cmp	r3, #0
 800b734:	d19e      	bne.n	800b674 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	6a39      	ldr	r1, [r7, #32]
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f000 fc98 	bl	800c070 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e01a      	b.n	800b780 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2220      	movs	r2, #32
 800b750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6859      	ldr	r1, [r3, #4]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <HAL_I2C_Master_Transmit+0x1e4>)
 800b75e:	400b      	ands	r3, r1
 800b760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2220      	movs	r2, #32
 800b766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	e000      	b.n	800b780 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b77e:	2302      	movs	r3, #2
  }
}
 800b780:	4618      	mov	r0, r3
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	80002000 	.word	0x80002000
 800b78c:	fe00e800 	.word	0xfe00e800

0800b790 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af02      	add	r7, sp, #8
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	607a      	str	r2, [r7, #4]
 800b79a:	461a      	mov	r2, r3
 800b79c:	460b      	mov	r3, r1
 800b79e:	817b      	strh	r3, [r7, #10]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b20      	cmp	r3, #32
 800b7ae:	f040 80db 	bne.w	800b968 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d101      	bne.n	800b7c0 <HAL_I2C_Master_Receive+0x30>
 800b7bc:	2302      	movs	r3, #2
 800b7be:	e0d4      	b.n	800b96a <HAL_I2C_Master_Receive+0x1da>
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b7c8:	f7fc fe14 	bl	80083f4 <HAL_GetTick>
 800b7cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	2319      	movs	r3, #25
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f000 fbc8 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e0bf      	b.n	800b96a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2222      	movs	r2, #34	; 0x22
 800b7ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2210      	movs	r2, #16
 800b7f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	893a      	ldrh	r2, [r7, #8]
 800b80a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b816:	b29b      	uxth	r3, r3
 800b818:	2bff      	cmp	r3, #255	; 0xff
 800b81a:	d90e      	bls.n	800b83a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	22ff      	movs	r2, #255	; 0xff
 800b820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b826:	b2da      	uxtb	r2, r3
 800b828:	8979      	ldrh	r1, [r7, #10]
 800b82a:	4b52      	ldr	r3, [pc, #328]	; (800b974 <HAL_I2C_Master_Receive+0x1e4>)
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 fd2a 	bl	800c28c <I2C_TransferConfig>
 800b838:	e06d      	b.n	800b916 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b83e:	b29a      	uxth	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	8979      	ldrh	r1, [r7, #10]
 800b84c:	4b49      	ldr	r3, [pc, #292]	; (800b974 <HAL_I2C_Master_Receive+0x1e4>)
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 fd19 	bl	800c28c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b85a:	e05c      	b.n	800b916 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	6a39      	ldr	r1, [r7, #32]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 fc41 	bl	800c0e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e07c      	b.n	800b96a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	b2d2      	uxtb	r2, r2
 800b87c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b88c:	3b01      	subs	r3, #1
 800b88e:	b29a      	uxth	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b898:	b29b      	uxth	r3, r3
 800b89a:	3b01      	subs	r3, #1
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d034      	beq.n	800b916 <HAL_I2C_Master_Receive+0x186>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d130      	bne.n	800b916 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	2180      	movs	r1, #128	; 0x80
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f000 fb56 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e04d      	b.n	800b96a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	2bff      	cmp	r3, #255	; 0xff
 800b8d6:	d90e      	bls.n	800b8f6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	22ff      	movs	r2, #255	; 0xff
 800b8dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	8979      	ldrh	r1, [r7, #10]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f000 fccc 	bl	800c28c <I2C_TransferConfig>
 800b8f4:	e00f      	b.n	800b916 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b904:	b2da      	uxtb	r2, r3
 800b906:	8979      	ldrh	r1, [r7, #10]
 800b908:	2300      	movs	r3, #0
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 fcbb 	bl	800c28c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d19d      	bne.n	800b85c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	6a39      	ldr	r1, [r7, #32]
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f000 fba3 	bl	800c070 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	e01a      	b.n	800b96a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2220      	movs	r2, #32
 800b93a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6859      	ldr	r1, [r3, #4]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	4b0c      	ldr	r3, [pc, #48]	; (800b978 <HAL_I2C_Master_Receive+0x1e8>)
 800b948:	400b      	ands	r3, r1
 800b94a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2220      	movs	r2, #32
 800b950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	e000      	b.n	800b96a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b968:	2302      	movs	r3, #2
  }
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3718      	adds	r7, #24
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	80002400 	.word	0x80002400
 800b978:	fe00e800 	.word	0xfe00e800

0800b97c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af02      	add	r7, sp, #8
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	4608      	mov	r0, r1
 800b986:	4611      	mov	r1, r2
 800b988:	461a      	mov	r2, r3
 800b98a:	4603      	mov	r3, r0
 800b98c:	817b      	strh	r3, [r7, #10]
 800b98e:	460b      	mov	r3, r1
 800b990:	813b      	strh	r3, [r7, #8]
 800b992:	4613      	mov	r3, r2
 800b994:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b20      	cmp	r3, #32
 800b9a0:	f040 80f9 	bne.w	800bb96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <HAL_I2C_Mem_Write+0x34>
 800b9aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d105      	bne.n	800b9bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e0ed      	b.n	800bb98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d101      	bne.n	800b9ca <HAL_I2C_Mem_Write+0x4e>
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e0e6      	b.n	800bb98 <HAL_I2C_Mem_Write+0x21c>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b9d2:	f7fc fd0f 	bl	80083f4 <HAL_GetTick>
 800b9d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	2319      	movs	r3, #25
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 fac3 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d001      	beq.n	800b9f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e0d1      	b.n	800bb98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2221      	movs	r2, #33	; 0x21
 800b9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2240      	movs	r2, #64	; 0x40
 800ba00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6a3a      	ldr	r2, [r7, #32]
 800ba0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ba1c:	88f8      	ldrh	r0, [r7, #6]
 800ba1e:	893a      	ldrh	r2, [r7, #8]
 800ba20:	8979      	ldrh	r1, [r7, #10]
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f000 f9d3 	bl	800bdd8 <I2C_RequestMemoryWrite>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d005      	beq.n	800ba44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e0a9      	b.n	800bb98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	2bff      	cmp	r3, #255	; 0xff
 800ba4c:	d90e      	bls.n	800ba6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	22ff      	movs	r2, #255	; 0xff
 800ba52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	8979      	ldrh	r1, [r7, #10]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 fc11 	bl	800c28c <I2C_TransferConfig>
 800ba6a:	e00f      	b.n	800ba8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7a:	b2da      	uxtb	r2, r3
 800ba7c:	8979      	ldrh	r1, [r7, #10]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 fc00 	bl	800c28c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 faad 	bl	800bff0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e07b      	b.n	800bb98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa4:	781a      	ldrb	r2, [r3, #0]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baba:	b29b      	uxth	r3, r3
 800babc:	3b01      	subs	r3, #1
 800babe:	b29a      	uxth	r2, r3
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac8:	3b01      	subs	r3, #1
 800baca:	b29a      	uxth	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d034      	beq.n	800bb44 <HAL_I2C_Mem_Write+0x1c8>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d130      	bne.n	800bb44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	2200      	movs	r2, #0
 800baea:	2180      	movs	r1, #128	; 0x80
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f000 fa3f 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d001      	beq.n	800bafc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e04d      	b.n	800bb98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	2bff      	cmp	r3, #255	; 0xff
 800bb04:	d90e      	bls.n	800bb24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	22ff      	movs	r2, #255	; 0xff
 800bb0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	8979      	ldrh	r1, [r7, #10]
 800bb14:	2300      	movs	r3, #0
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 fbb5 	bl	800c28c <I2C_TransferConfig>
 800bb22:	e00f      	b.n	800bb44 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	8979      	ldrh	r1, [r7, #10]
 800bb36:	2300      	movs	r3, #0
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 fba4 	bl	800c28c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d19e      	bne.n	800ba8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f000 fa8c 	bl	800c070 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e01a      	b.n	800bb98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2220      	movs	r2, #32
 800bb68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	6859      	ldr	r1, [r3, #4]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <HAL_I2C_Mem_Write+0x224>)
 800bb76:	400b      	ands	r3, r1
 800bb78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2220      	movs	r2, #32
 800bb7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	e000      	b.n	800bb98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bb96:	2302      	movs	r3, #2
  }
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	fe00e800 	.word	0xfe00e800

0800bba4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b088      	sub	sp, #32
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	4608      	mov	r0, r1
 800bbae:	4611      	mov	r1, r2
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	817b      	strh	r3, [r7, #10]
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	813b      	strh	r3, [r7, #8]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b20      	cmp	r3, #32
 800bbc8:	f040 80fd 	bne.w	800bdc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbcc:	6a3b      	ldr	r3, [r7, #32]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d002      	beq.n	800bbd8 <HAL_I2C_Mem_Read+0x34>
 800bbd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d105      	bne.n	800bbe4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e0f1      	b.n	800bdc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d101      	bne.n	800bbf2 <HAL_I2C_Mem_Read+0x4e>
 800bbee:	2302      	movs	r3, #2
 800bbf0:	e0ea      	b.n	800bdc8 <HAL_I2C_Mem_Read+0x224>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bbfa:	f7fc fbfb 	bl	80083f4 <HAL_GetTick>
 800bbfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	2319      	movs	r3, #25
 800bc06:	2201      	movs	r2, #1
 800bc08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f000 f9af 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e0d5      	b.n	800bdc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2222      	movs	r2, #34	; 0x22
 800bc20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2240      	movs	r2, #64	; 0x40
 800bc28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6a3a      	ldr	r2, [r7, #32]
 800bc36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bc44:	88f8      	ldrh	r0, [r7, #6]
 800bc46:	893a      	ldrh	r2, [r7, #8]
 800bc48:	8979      	ldrh	r1, [r7, #10]
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	9301      	str	r3, [sp, #4]
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	4603      	mov	r3, r0
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f000 f913 	bl	800be80 <I2C_RequestMemoryRead>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d005      	beq.n	800bc6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e0ad      	b.n	800bdc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	2bff      	cmp	r3, #255	; 0xff
 800bc74:	d90e      	bls.n	800bc94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	22ff      	movs	r2, #255	; 0xff
 800bc7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	8979      	ldrh	r1, [r7, #10]
 800bc84:	4b52      	ldr	r3, [pc, #328]	; (800bdd0 <HAL_I2C_Mem_Read+0x22c>)
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 fafd 	bl	800c28c <I2C_TransferConfig>
 800bc92:	e00f      	b.n	800bcb4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	8979      	ldrh	r1, [r7, #10]
 800bca6:	4b4a      	ldr	r3, [pc, #296]	; (800bdd0 <HAL_I2C_Mem_Read+0x22c>)
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 faec 	bl	800c28c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2104      	movs	r1, #4
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f000 f956 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e07c      	b.n	800bdc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	b2d2      	uxtb	r2, r2
 800bcda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	1c5a      	adds	r2, r3, #1
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcea:	3b01      	subs	r3, #1
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d034      	beq.n	800bd74 <HAL_I2C_Mem_Read+0x1d0>
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d130      	bne.n	800bd74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2180      	movs	r1, #128	; 0x80
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f000 f927 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e04d      	b.n	800bdc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	2bff      	cmp	r3, #255	; 0xff
 800bd34:	d90e      	bls.n	800bd54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	22ff      	movs	r2, #255	; 0xff
 800bd3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	8979      	ldrh	r1, [r7, #10]
 800bd44:	2300      	movs	r3, #0
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 fa9d 	bl	800c28c <I2C_TransferConfig>
 800bd52:	e00f      	b.n	800bd74 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	8979      	ldrh	r1, [r7, #10]
 800bd66:	2300      	movs	r3, #0
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f000 fa8c 	bl	800c28c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d19a      	bne.n	800bcb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f000 f974 	bl	800c070 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e01a      	b.n	800bdc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2220      	movs	r2, #32
 800bd98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	6859      	ldr	r1, [r3, #4]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	4b0b      	ldr	r3, [pc, #44]	; (800bdd4 <HAL_I2C_Mem_Read+0x230>)
 800bda6:	400b      	ands	r3, r1
 800bda8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2220      	movs	r2, #32
 800bdae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e000      	b.n	800bdc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bdc6:	2302      	movs	r3, #2
  }
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3718      	adds	r7, #24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	80002400 	.word	0x80002400
 800bdd4:	fe00e800 	.word	0xfe00e800

0800bdd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af02      	add	r7, sp, #8
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	4608      	mov	r0, r1
 800bde2:	4611      	mov	r1, r2
 800bde4:	461a      	mov	r2, r3
 800bde6:	4603      	mov	r3, r0
 800bde8:	817b      	strh	r3, [r7, #10]
 800bdea:	460b      	mov	r3, r1
 800bdec:	813b      	strh	r3, [r7, #8]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bdf2:	88fb      	ldrh	r3, [r7, #6]
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	8979      	ldrh	r1, [r7, #10]
 800bdf8:	4b20      	ldr	r3, [pc, #128]	; (800be7c <I2C_RequestMemoryWrite+0xa4>)
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f000 fa43 	bl	800c28c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be06:	69fa      	ldr	r2, [r7, #28]
 800be08:	69b9      	ldr	r1, [r7, #24]
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f000 f8f0 	bl	800bff0 <I2C_WaitOnTXISFlagUntilTimeout>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e02c      	b.n	800be74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be1a:	88fb      	ldrh	r3, [r7, #6]
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d105      	bne.n	800be2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be20:	893b      	ldrh	r3, [r7, #8]
 800be22:	b2da      	uxtb	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	629a      	str	r2, [r3, #40]	; 0x28
 800be2a:	e015      	b.n	800be58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800be2c:	893b      	ldrh	r3, [r7, #8]
 800be2e:	0a1b      	lsrs	r3, r3, #8
 800be30:	b29b      	uxth	r3, r3
 800be32:	b2da      	uxtb	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be3a:	69fa      	ldr	r2, [r7, #28]
 800be3c:	69b9      	ldr	r1, [r7, #24]
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f000 f8d6 	bl	800bff0 <I2C_WaitOnTXISFlagUntilTimeout>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e012      	b.n	800be74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800be4e:	893b      	ldrh	r3, [r7, #8]
 800be50:	b2da      	uxtb	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	2200      	movs	r2, #0
 800be60:	2180      	movs	r1, #128	; 0x80
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f000 f884 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d001      	beq.n	800be72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	e000      	b.n	800be74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	80002000 	.word	0x80002000

0800be80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af02      	add	r7, sp, #8
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	4608      	mov	r0, r1
 800be8a:	4611      	mov	r1, r2
 800be8c:	461a      	mov	r2, r3
 800be8e:	4603      	mov	r3, r0
 800be90:	817b      	strh	r3, [r7, #10]
 800be92:	460b      	mov	r3, r1
 800be94:	813b      	strh	r3, [r7, #8]
 800be96:	4613      	mov	r3, r2
 800be98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	8979      	ldrh	r1, [r7, #10]
 800bea0:	4b20      	ldr	r3, [pc, #128]	; (800bf24 <I2C_RequestMemoryRead+0xa4>)
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	2300      	movs	r3, #0
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f000 f9f0 	bl	800c28c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800beac:	69fa      	ldr	r2, [r7, #28]
 800beae:	69b9      	ldr	r1, [r7, #24]
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f000 f89d 	bl	800bff0 <I2C_WaitOnTXISFlagUntilTimeout>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e02c      	b.n	800bf1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bec0:	88fb      	ldrh	r3, [r7, #6]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d105      	bne.n	800bed2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bec6:	893b      	ldrh	r3, [r7, #8]
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	629a      	str	r2, [r3, #40]	; 0x28
 800bed0:	e015      	b.n	800befe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bed2:	893b      	ldrh	r3, [r7, #8]
 800bed4:	0a1b      	lsrs	r3, r3, #8
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bee0:	69fa      	ldr	r2, [r7, #28]
 800bee2:	69b9      	ldr	r1, [r7, #24]
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 f883 	bl	800bff0 <I2C_WaitOnTXISFlagUntilTimeout>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e012      	b.n	800bf1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bef4:	893b      	ldrh	r3, [r7, #8]
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	2200      	movs	r2, #0
 800bf06:	2140      	movs	r1, #64	; 0x40
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f000 f831 	bl	800bf70 <I2C_WaitOnFlagUntilTimeout>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e000      	b.n	800bf1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	80002000 	.word	0x80002000

0800bf28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	f003 0302 	and.w	r3, r3, #2
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d103      	bne.n	800bf46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2200      	movs	r2, #0
 800bf44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d007      	beq.n	800bf64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	699a      	ldr	r2, [r3, #24]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f042 0201 	orr.w	r2, r2, #1
 800bf62:	619a      	str	r2, [r3, #24]
  }
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	603b      	str	r3, [r7, #0]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf80:	e022      	b.n	800bfc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf88:	d01e      	beq.n	800bfc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf8a:	f7fc fa33 	bl	80083f4 <HAL_GetTick>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d302      	bcc.n	800bfa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d113      	bne.n	800bfc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa4:	f043 0220 	orr.w	r2, r3, #32
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e00f      	b.n	800bfe8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	699a      	ldr	r2, [r3, #24]
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	bf0c      	ite	eq
 800bfd8:	2301      	moveq	r3, #1
 800bfda:	2300      	movne	r3, #0
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	461a      	mov	r2, r3
 800bfe0:	79fb      	ldrb	r3, [r7, #7]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d0cd      	beq.n	800bf82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bffc:	e02c      	b.n	800c058 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	68b9      	ldr	r1, [r7, #8]
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f000 f8dc 	bl	800c1c0 <I2C_IsAcknowledgeFailed>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c00e:	2301      	movs	r3, #1
 800c010:	e02a      	b.n	800c068 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c018:	d01e      	beq.n	800c058 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c01a:	f7fc f9eb 	bl	80083f4 <HAL_GetTick>
 800c01e:	4602      	mov	r2, r0
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	429a      	cmp	r2, r3
 800c028:	d302      	bcc.n	800c030 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d113      	bne.n	800c058 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c034:	f043 0220 	orr.w	r2, r3, #32
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2220      	movs	r2, #32
 800c040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e007      	b.n	800c068 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	699b      	ldr	r3, [r3, #24]
 800c05e:	f003 0302 	and.w	r3, r3, #2
 800c062:	2b02      	cmp	r3, #2
 800c064:	d1cb      	bne.n	800bffe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c07c:	e028      	b.n	800c0d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	68b9      	ldr	r1, [r7, #8]
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f000 f89c 	bl	800c1c0 <I2C_IsAcknowledgeFailed>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d001      	beq.n	800c092 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	e026      	b.n	800c0e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c092:	f7fc f9af 	bl	80083f4 <HAL_GetTick>
 800c096:	4602      	mov	r2, r0
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d302      	bcc.n	800c0a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d113      	bne.n	800c0d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ac:	f043 0220 	orr.w	r2, r3, #32
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2220      	movs	r2, #32
 800c0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e007      	b.n	800c0e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	f003 0320 	and.w	r3, r3, #32
 800c0da:	2b20      	cmp	r3, #32
 800c0dc:	d1cf      	bne.n	800c07e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0f4:	e055      	b.n	800c1a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	68b9      	ldr	r1, [r7, #8]
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f000 f860 	bl	800c1c0 <I2C_IsAcknowledgeFailed>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	e053      	b.n	800c1b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	f003 0320 	and.w	r3, r3, #32
 800c114:	2b20      	cmp	r3, #32
 800c116:	d129      	bne.n	800c16c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	f003 0304 	and.w	r3, r3, #4
 800c122:	2b04      	cmp	r3, #4
 800c124:	d105      	bne.n	800c132 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800c12e:	2300      	movs	r3, #0
 800c130:	e03f      	b.n	800c1b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2220      	movs	r2, #32
 800c138:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	6859      	ldr	r1, [r3, #4]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	4b1d      	ldr	r3, [pc, #116]	; (800c1bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800c146:	400b      	ands	r3, r1
 800c148:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2220      	movs	r2, #32
 800c154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	e022      	b.n	800c1b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c16c:	f7fc f942 	bl	80083f4 <HAL_GetTick>
 800c170:	4602      	mov	r2, r0
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d302      	bcc.n	800c182 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10f      	bne.n	800c1a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c186:	f043 0220 	orr.w	r2, r3, #32
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2220      	movs	r2, #32
 800c192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e007      	b.n	800c1b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	d1a2      	bne.n	800c0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	fe00e800 	.word	0xfe00e800

0800c1c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	699b      	ldr	r3, [r3, #24]
 800c1d2:	f003 0310 	and.w	r3, r3, #16
 800c1d6:	2b10      	cmp	r3, #16
 800c1d8:	d151      	bne.n	800c27e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c1da:	e022      	b.n	800c222 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e2:	d01e      	beq.n	800c222 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1e4:	f7fc f906 	bl	80083f4 <HAL_GetTick>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d302      	bcc.n	800c1fa <I2C_IsAcknowledgeFailed+0x3a>
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d113      	bne.n	800c222 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1fe:	f043 0220 	orr.w	r2, r3, #32
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2220      	movs	r2, #32
 800c20a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c21e:	2301      	movs	r3, #1
 800c220:	e02e      	b.n	800c280 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	f003 0320 	and.w	r3, r3, #32
 800c22c:	2b20      	cmp	r3, #32
 800c22e:	d1d5      	bne.n	800c1dc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2210      	movs	r2, #16
 800c236:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2220      	movs	r2, #32
 800c23e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f7ff fe71 	bl	800bf28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	6859      	ldr	r1, [r3, #4]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	4b0d      	ldr	r3, [pc, #52]	; (800c288 <I2C_IsAcknowledgeFailed+0xc8>)
 800c252:	400b      	ands	r3, r1
 800c254:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c25a:	f043 0204 	orr.w	r2, r3, #4
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2220      	movs	r2, #32
 800c266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2200      	movs	r2, #0
 800c276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e000      	b.n	800c280 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	fe00e800 	.word	0xfe00e800

0800c28c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	607b      	str	r3, [r7, #4]
 800c296:	460b      	mov	r3, r1
 800c298:	817b      	strh	r3, [r7, #10]
 800c29a:	4613      	mov	r3, r2
 800c29c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	685a      	ldr	r2, [r3, #4]
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	0d5b      	lsrs	r3, r3, #21
 800c2a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c2ac:	4b0d      	ldr	r3, [pc, #52]	; (800c2e4 <I2C_TransferConfig+0x58>)
 800c2ae:	430b      	orrs	r3, r1
 800c2b0:	43db      	mvns	r3, r3
 800c2b2:	ea02 0103 	and.w	r1, r2, r3
 800c2b6:	897b      	ldrh	r3, [r7, #10]
 800c2b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c2bc:	7a7b      	ldrb	r3, [r7, #9]
 800c2be:	041b      	lsls	r3, r3, #16
 800c2c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c2c4:	431a      	orrs	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	430a      	orrs	r2, r1
 800c2d4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c2d6:	bf00      	nop
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	03ff63ff 	.word	0x03ff63ff

0800c2e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b20      	cmp	r3, #32
 800c2fc:	d138      	bne.n	800c370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c304:	2b01      	cmp	r3, #1
 800c306:	d101      	bne.n	800c30c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c308:	2302      	movs	r3, #2
 800c30a:	e032      	b.n	800c372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2224      	movs	r2, #36	; 0x24
 800c318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f022 0201 	bic.w	r2, r2, #1
 800c32a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c33a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6819      	ldr	r1, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	430a      	orrs	r2, r1
 800c34a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f042 0201 	orr.w	r2, r2, #1
 800c35a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2220      	movs	r2, #32
 800c360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	e000      	b.n	800c372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c370:	2302      	movs	r3, #2
  }
}
 800c372:	4618      	mov	r0, r3
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c37e:	b480      	push	{r7}
 800c380:	b085      	sub	sp, #20
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b20      	cmp	r3, #32
 800c392:	d139      	bne.n	800c408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d101      	bne.n	800c3a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c39e:	2302      	movs	r3, #2
 800c3a0:	e033      	b.n	800c40a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2224      	movs	r2, #36	; 0x24
 800c3ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f022 0201 	bic.w	r2, r2, #1
 800c3c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c3d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	021b      	lsls	r3, r3, #8
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2220      	movs	r2, #32
 800c3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	e000      	b.n	800c40a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c408:	2302      	movs	r3, #2
  }
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
	...

0800c418 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c418:	b480      	push	{r7}
 800c41a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c41c:	4b05      	ldr	r3, [pc, #20]	; (800c434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a04      	ldr	r2, [pc, #16]	; (800c434 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c426:	6013      	str	r3, [r2, #0]
}
 800c428:	bf00      	nop
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	40007000 	.word	0x40007000

0800c438 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c43e:	2300      	movs	r3, #0
 800c440:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c442:	4b23      	ldr	r3, [pc, #140]	; (800c4d0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c446:	4a22      	ldr	r2, [pc, #136]	; (800c4d0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c44c:	6413      	str	r3, [r2, #64]	; 0x40
 800c44e:	4b20      	ldr	r3, [pc, #128]	; (800c4d0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c456:	603b      	str	r3, [r7, #0]
 800c458:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c45a:	4b1e      	ldr	r3, [pc, #120]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a1d      	ldr	r2, [pc, #116]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c464:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c466:	f7fb ffc5 	bl	80083f4 <HAL_GetTick>
 800c46a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c46c:	e009      	b.n	800c482 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c46e:	f7fb ffc1 	bl	80083f4 <HAL_GetTick>
 800c472:	4602      	mov	r2, r0
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c47c:	d901      	bls.n	800c482 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c47e:	2303      	movs	r3, #3
 800c480:	e022      	b.n	800c4c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c482:	4b14      	ldr	r3, [pc, #80]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c48e:	d1ee      	bne.n	800c46e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c490:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a0f      	ldr	r2, [pc, #60]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c49a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c49c:	f7fb ffaa 	bl	80083f4 <HAL_GetTick>
 800c4a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4a2:	e009      	b.n	800c4b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c4a4:	f7fb ffa6 	bl	80083f4 <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4b2:	d901      	bls.n	800c4b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e007      	b.n	800c4c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4b8:	4b06      	ldr	r3, [pc, #24]	; (800c4d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4c4:	d1ee      	bne.n	800c4a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	40023800 	.word	0x40023800
 800c4d4:	40007000 	.word	0x40007000

0800c4d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e29b      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 8087 	beq.w	800c60a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4fc:	4b96      	ldr	r3, [pc, #600]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f003 030c 	and.w	r3, r3, #12
 800c504:	2b04      	cmp	r3, #4
 800c506:	d00c      	beq.n	800c522 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c508:	4b93      	ldr	r3, [pc, #588]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f003 030c 	and.w	r3, r3, #12
 800c510:	2b08      	cmp	r3, #8
 800c512:	d112      	bne.n	800c53a <HAL_RCC_OscConfig+0x62>
 800c514:	4b90      	ldr	r3, [pc, #576]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c51c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c520:	d10b      	bne.n	800c53a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c522:	4b8d      	ldr	r3, [pc, #564]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d06c      	beq.n	800c608 <HAL_RCC_OscConfig+0x130>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d168      	bne.n	800c608 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e275      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c542:	d106      	bne.n	800c552 <HAL_RCC_OscConfig+0x7a>
 800c544:	4b84      	ldr	r3, [pc, #528]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a83      	ldr	r2, [pc, #524]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c54a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	e02e      	b.n	800c5b0 <HAL_RCC_OscConfig+0xd8>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10c      	bne.n	800c574 <HAL_RCC_OscConfig+0x9c>
 800c55a:	4b7f      	ldr	r3, [pc, #508]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a7e      	ldr	r2, [pc, #504]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c564:	6013      	str	r3, [r2, #0]
 800c566:	4b7c      	ldr	r3, [pc, #496]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a7b      	ldr	r2, [pc, #492]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c56c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	e01d      	b.n	800c5b0 <HAL_RCC_OscConfig+0xd8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c57c:	d10c      	bne.n	800c598 <HAL_RCC_OscConfig+0xc0>
 800c57e:	4b76      	ldr	r3, [pc, #472]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a75      	ldr	r2, [pc, #468]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c588:	6013      	str	r3, [r2, #0]
 800c58a:	4b73      	ldr	r3, [pc, #460]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a72      	ldr	r2, [pc, #456]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	e00b      	b.n	800c5b0 <HAL_RCC_OscConfig+0xd8>
 800c598:	4b6f      	ldr	r3, [pc, #444]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a6e      	ldr	r2, [pc, #440]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c59e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	4b6c      	ldr	r3, [pc, #432]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a6b      	ldr	r2, [pc, #428]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c5aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d013      	beq.n	800c5e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b8:	f7fb ff1c 	bl	80083f4 <HAL_GetTick>
 800c5bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5be:	e008      	b.n	800c5d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5c0:	f7fb ff18 	bl	80083f4 <HAL_GetTick>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	2b64      	cmp	r3, #100	; 0x64
 800c5cc:	d901      	bls.n	800c5d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	e229      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5d2:	4b61      	ldr	r3, [pc, #388]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d0f0      	beq.n	800c5c0 <HAL_RCC_OscConfig+0xe8>
 800c5de:	e014      	b.n	800c60a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5e0:	f7fb ff08 	bl	80083f4 <HAL_GetTick>
 800c5e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5e6:	e008      	b.n	800c5fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5e8:	f7fb ff04 	bl	80083f4 <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	2b64      	cmp	r3, #100	; 0x64
 800c5f4:	d901      	bls.n	800c5fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e215      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5fa:	4b57      	ldr	r3, [pc, #348]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1f0      	bne.n	800c5e8 <HAL_RCC_OscConfig+0x110>
 800c606:	e000      	b.n	800c60a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f003 0302 	and.w	r3, r3, #2
 800c612:	2b00      	cmp	r3, #0
 800c614:	d069      	beq.n	800c6ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c616:	4b50      	ldr	r3, [pc, #320]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f003 030c 	and.w	r3, r3, #12
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00b      	beq.n	800c63a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c622:	4b4d      	ldr	r3, [pc, #308]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	f003 030c 	and.w	r3, r3, #12
 800c62a:	2b08      	cmp	r3, #8
 800c62c:	d11c      	bne.n	800c668 <HAL_RCC_OscConfig+0x190>
 800c62e:	4b4a      	ldr	r3, [pc, #296]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c636:	2b00      	cmp	r3, #0
 800c638:	d116      	bne.n	800c668 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c63a:	4b47      	ldr	r3, [pc, #284]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 0302 	and.w	r3, r3, #2
 800c642:	2b00      	cmp	r3, #0
 800c644:	d005      	beq.n	800c652 <HAL_RCC_OscConfig+0x17a>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d001      	beq.n	800c652 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	e1e9      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c652:	4b41      	ldr	r3, [pc, #260]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	493d      	ldr	r1, [pc, #244]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c662:	4313      	orrs	r3, r2
 800c664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c666:	e040      	b.n	800c6ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d023      	beq.n	800c6b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c670:	4b39      	ldr	r3, [pc, #228]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a38      	ldr	r2, [pc, #224]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c676:	f043 0301 	orr.w	r3, r3, #1
 800c67a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c67c:	f7fb feba 	bl	80083f4 <HAL_GetTick>
 800c680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c682:	e008      	b.n	800c696 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c684:	f7fb feb6 	bl	80083f4 <HAL_GetTick>
 800c688:	4602      	mov	r2, r0
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d901      	bls.n	800c696 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	e1c7      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c696:	4b30      	ldr	r3, [pc, #192]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0302 	and.w	r3, r3, #2
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d0f0      	beq.n	800c684 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6a2:	4b2d      	ldr	r3, [pc, #180]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	4929      	ldr	r1, [pc, #164]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	600b      	str	r3, [r1, #0]
 800c6b6:	e018      	b.n	800c6ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c6b8:	4b27      	ldr	r3, [pc, #156]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a26      	ldr	r2, [pc, #152]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6be:	f023 0301 	bic.w	r3, r3, #1
 800c6c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6c4:	f7fb fe96 	bl	80083f4 <HAL_GetTick>
 800c6c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6ca:	e008      	b.n	800c6de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6cc:	f7fb fe92 	bl	80083f4 <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d901      	bls.n	800c6de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e1a3      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6de:	4b1e      	ldr	r3, [pc, #120]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f003 0302 	and.w	r3, r3, #2
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1f0      	bne.n	800c6cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 0308 	and.w	r3, r3, #8
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d038      	beq.n	800c768 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d019      	beq.n	800c732 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c6fe:	4b16      	ldr	r3, [pc, #88]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c702:	4a15      	ldr	r2, [pc, #84]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c704:	f043 0301 	orr.w	r3, r3, #1
 800c708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c70a:	f7fb fe73 	bl	80083f4 <HAL_GetTick>
 800c70e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c710:	e008      	b.n	800c724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c712:	f7fb fe6f 	bl	80083f4 <HAL_GetTick>
 800c716:	4602      	mov	r2, r0
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d901      	bls.n	800c724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c720:	2303      	movs	r3, #3
 800c722:	e180      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c724:	4b0c      	ldr	r3, [pc, #48]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c728:	f003 0302 	and.w	r3, r3, #2
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d0f0      	beq.n	800c712 <HAL_RCC_OscConfig+0x23a>
 800c730:	e01a      	b.n	800c768 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c732:	4b09      	ldr	r3, [pc, #36]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c736:	4a08      	ldr	r2, [pc, #32]	; (800c758 <HAL_RCC_OscConfig+0x280>)
 800c738:	f023 0301 	bic.w	r3, r3, #1
 800c73c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c73e:	f7fb fe59 	bl	80083f4 <HAL_GetTick>
 800c742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c744:	e00a      	b.n	800c75c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c746:	f7fb fe55 	bl	80083f4 <HAL_GetTick>
 800c74a:	4602      	mov	r2, r0
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	2b02      	cmp	r3, #2
 800c752:	d903      	bls.n	800c75c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c754:	2303      	movs	r3, #3
 800c756:	e166      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
 800c758:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c75c:	4b92      	ldr	r3, [pc, #584]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c75e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c760:	f003 0302 	and.w	r3, r3, #2
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1ee      	bne.n	800c746 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 80a4 	beq.w	800c8be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c776:	4b8c      	ldr	r3, [pc, #560]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10d      	bne.n	800c79e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c782:	4b89      	ldr	r3, [pc, #548]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c786:	4a88      	ldr	r2, [pc, #544]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c78c:	6413      	str	r3, [r2, #64]	; 0x40
 800c78e:	4b86      	ldr	r3, [pc, #536]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c796:	60bb      	str	r3, [r7, #8]
 800c798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c79a:	2301      	movs	r3, #1
 800c79c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c79e:	4b83      	ldr	r3, [pc, #524]	; (800c9ac <HAL_RCC_OscConfig+0x4d4>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d118      	bne.n	800c7dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c7aa:	4b80      	ldr	r3, [pc, #512]	; (800c9ac <HAL_RCC_OscConfig+0x4d4>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a7f      	ldr	r2, [pc, #508]	; (800c9ac <HAL_RCC_OscConfig+0x4d4>)
 800c7b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c7b6:	f7fb fe1d 	bl	80083f4 <HAL_GetTick>
 800c7ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7bc:	e008      	b.n	800c7d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7be:	f7fb fe19 	bl	80083f4 <HAL_GetTick>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	2b64      	cmp	r3, #100	; 0x64
 800c7ca:	d901      	bls.n	800c7d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e12a      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7d0:	4b76      	ldr	r3, [pc, #472]	; (800c9ac <HAL_RCC_OscConfig+0x4d4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d0f0      	beq.n	800c7be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d106      	bne.n	800c7f2 <HAL_RCC_OscConfig+0x31a>
 800c7e4:	4b70      	ldr	r3, [pc, #448]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e8:	4a6f      	ldr	r2, [pc, #444]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c7ea:	f043 0301 	orr.w	r3, r3, #1
 800c7ee:	6713      	str	r3, [r2, #112]	; 0x70
 800c7f0:	e02d      	b.n	800c84e <HAL_RCC_OscConfig+0x376>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10c      	bne.n	800c814 <HAL_RCC_OscConfig+0x33c>
 800c7fa:	4b6b      	ldr	r3, [pc, #428]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7fe:	4a6a      	ldr	r2, [pc, #424]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c800:	f023 0301 	bic.w	r3, r3, #1
 800c804:	6713      	str	r3, [r2, #112]	; 0x70
 800c806:	4b68      	ldr	r3, [pc, #416]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c80a:	4a67      	ldr	r2, [pc, #412]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c80c:	f023 0304 	bic.w	r3, r3, #4
 800c810:	6713      	str	r3, [r2, #112]	; 0x70
 800c812:	e01c      	b.n	800c84e <HAL_RCC_OscConfig+0x376>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	2b05      	cmp	r3, #5
 800c81a:	d10c      	bne.n	800c836 <HAL_RCC_OscConfig+0x35e>
 800c81c:	4b62      	ldr	r3, [pc, #392]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c820:	4a61      	ldr	r2, [pc, #388]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c822:	f043 0304 	orr.w	r3, r3, #4
 800c826:	6713      	str	r3, [r2, #112]	; 0x70
 800c828:	4b5f      	ldr	r3, [pc, #380]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c82a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82c:	4a5e      	ldr	r2, [pc, #376]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c82e:	f043 0301 	orr.w	r3, r3, #1
 800c832:	6713      	str	r3, [r2, #112]	; 0x70
 800c834:	e00b      	b.n	800c84e <HAL_RCC_OscConfig+0x376>
 800c836:	4b5c      	ldr	r3, [pc, #368]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c83a:	4a5b      	ldr	r2, [pc, #364]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c83c:	f023 0301 	bic.w	r3, r3, #1
 800c840:	6713      	str	r3, [r2, #112]	; 0x70
 800c842:	4b59      	ldr	r3, [pc, #356]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c846:	4a58      	ldr	r2, [pc, #352]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c848:	f023 0304 	bic.w	r3, r3, #4
 800c84c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d015      	beq.n	800c882 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c856:	f7fb fdcd 	bl	80083f4 <HAL_GetTick>
 800c85a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c85c:	e00a      	b.n	800c874 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c85e:	f7fb fdc9 	bl	80083f4 <HAL_GetTick>
 800c862:	4602      	mov	r2, r0
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	f241 3288 	movw	r2, #5000	; 0x1388
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d901      	bls.n	800c874 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e0d8      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c874:	4b4c      	ldr	r3, [pc, #304]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c878:	f003 0302 	and.w	r3, r3, #2
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d0ee      	beq.n	800c85e <HAL_RCC_OscConfig+0x386>
 800c880:	e014      	b.n	800c8ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c882:	f7fb fdb7 	bl	80083f4 <HAL_GetTick>
 800c886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c888:	e00a      	b.n	800c8a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c88a:	f7fb fdb3 	bl	80083f4 <HAL_GetTick>
 800c88e:	4602      	mov	r2, r0
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	f241 3288 	movw	r2, #5000	; 0x1388
 800c898:	4293      	cmp	r3, r2
 800c89a:	d901      	bls.n	800c8a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c89c:	2303      	movs	r3, #3
 800c89e:	e0c2      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8a0:	4b41      	ldr	r3, [pc, #260]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a4:	f003 0302 	and.w	r3, r3, #2
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1ee      	bne.n	800c88a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c8ac:	7dfb      	ldrb	r3, [r7, #23]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d105      	bne.n	800c8be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8b2:	4b3d      	ldr	r3, [pc, #244]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b6:	4a3c      	ldr	r2, [pc, #240]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c8b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 80ae 	beq.w	800ca24 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c8c8:	4b37      	ldr	r3, [pc, #220]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	f003 030c 	and.w	r3, r3, #12
 800c8d0:	2b08      	cmp	r3, #8
 800c8d2:	d06d      	beq.n	800c9b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d14b      	bne.n	800c974 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8dc:	4b32      	ldr	r3, [pc, #200]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a31      	ldr	r2, [pc, #196]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c8e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8e8:	f7fb fd84 	bl	80083f4 <HAL_GetTick>
 800c8ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8ee:	e008      	b.n	800c902 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8f0:	f7fb fd80 	bl	80083f4 <HAL_GetTick>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d901      	bls.n	800c902 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c8fe:	2303      	movs	r3, #3
 800c900:	e091      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c902:	4b29      	ldr	r3, [pc, #164]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1f0      	bne.n	800c8f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	69da      	ldr	r2, [r3, #28]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	431a      	orrs	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91c:	019b      	lsls	r3, r3, #6
 800c91e:	431a      	orrs	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c924:	085b      	lsrs	r3, r3, #1
 800c926:	3b01      	subs	r3, #1
 800c928:	041b      	lsls	r3, r3, #16
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c930:	061b      	lsls	r3, r3, #24
 800c932:	431a      	orrs	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c938:	071b      	lsls	r3, r3, #28
 800c93a:	491b      	ldr	r1, [pc, #108]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c93c:	4313      	orrs	r3, r2
 800c93e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c940:	4b19      	ldr	r3, [pc, #100]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a18      	ldr	r2, [pc, #96]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c94a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c94c:	f7fb fd52 	bl	80083f4 <HAL_GetTick>
 800c950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c952:	e008      	b.n	800c966 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c954:	f7fb fd4e 	bl	80083f4 <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d901      	bls.n	800c966 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e05f      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c966:	4b10      	ldr	r3, [pc, #64]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0f0      	beq.n	800c954 <HAL_RCC_OscConfig+0x47c>
 800c972:	e057      	b.n	800ca24 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c974:	4b0c      	ldr	r3, [pc, #48]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a0b      	ldr	r2, [pc, #44]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c97a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c97e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c980:	f7fb fd38 	bl	80083f4 <HAL_GetTick>
 800c984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c986:	e008      	b.n	800c99a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c988:	f7fb fd34 	bl	80083f4 <HAL_GetTick>
 800c98c:	4602      	mov	r2, r0
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	2b02      	cmp	r3, #2
 800c994:	d901      	bls.n	800c99a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c996:	2303      	movs	r3, #3
 800c998:	e045      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c99a:	4b03      	ldr	r3, [pc, #12]	; (800c9a8 <HAL_RCC_OscConfig+0x4d0>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1f0      	bne.n	800c988 <HAL_RCC_OscConfig+0x4b0>
 800c9a6:	e03d      	b.n	800ca24 <HAL_RCC_OscConfig+0x54c>
 800c9a8:	40023800 	.word	0x40023800
 800c9ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c9b0:	4b1f      	ldr	r3, [pc, #124]	; (800ca30 <HAL_RCC_OscConfig+0x558>)
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d030      	beq.n	800ca20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d129      	bne.n	800ca20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d122      	bne.n	800ca20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c9e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d119      	bne.n	800ca20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f6:	085b      	lsrs	r3, r3, #1
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d10f      	bne.n	800ca20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d107      	bne.n	800ca20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca1a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d001      	beq.n	800ca24 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800ca20:	2301      	movs	r3, #1
 800ca22:	e000      	b.n	800ca26 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3718      	adds	r7, #24
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	40023800 	.word	0x40023800

0800ca34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d101      	bne.n	800ca4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e0d0      	b.n	800cbee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca4c:	4b6a      	ldr	r3, [pc, #424]	; (800cbf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f003 030f 	and.w	r3, r3, #15
 800ca54:	683a      	ldr	r2, [r7, #0]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d910      	bls.n	800ca7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca5a:	4b67      	ldr	r3, [pc, #412]	; (800cbf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f023 020f 	bic.w	r2, r3, #15
 800ca62:	4965      	ldr	r1, [pc, #404]	; (800cbf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca6a:	4b63      	ldr	r3, [pc, #396]	; (800cbf8 <HAL_RCC_ClockConfig+0x1c4>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f003 030f 	and.w	r3, r3, #15
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d001      	beq.n	800ca7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e0b8      	b.n	800cbee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f003 0302 	and.w	r3, r3, #2
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d020      	beq.n	800caca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f003 0304 	and.w	r3, r3, #4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d005      	beq.n	800caa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca94:	4b59      	ldr	r3, [pc, #356]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	4a58      	ldr	r2, [pc, #352]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800ca9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ca9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 0308 	and.w	r3, r3, #8
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d005      	beq.n	800cab8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800caac:	4b53      	ldr	r3, [pc, #332]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	4a52      	ldr	r2, [pc, #328]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cab6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cab8:	4b50      	ldr	r3, [pc, #320]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	494d      	ldr	r1, [pc, #308]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cac6:	4313      	orrs	r3, r2
 800cac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d040      	beq.n	800cb58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d107      	bne.n	800caee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cade:	4b47      	ldr	r3, [pc, #284]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d115      	bne.n	800cb16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	e07f      	b.n	800cbee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	d107      	bne.n	800cb06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800caf6:	4b41      	ldr	r3, [pc, #260]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d109      	bne.n	800cb16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	e073      	b.n	800cbee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb06:	4b3d      	ldr	r3, [pc, #244]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 0302 	and.w	r3, r3, #2
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e06b      	b.n	800cbee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb16:	4b39      	ldr	r3, [pc, #228]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	f023 0203 	bic.w	r2, r3, #3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	4936      	ldr	r1, [pc, #216]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cb24:	4313      	orrs	r3, r2
 800cb26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb28:	f7fb fc64 	bl	80083f4 <HAL_GetTick>
 800cb2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb2e:	e00a      	b.n	800cb46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb30:	f7fb fc60 	bl	80083f4 <HAL_GetTick>
 800cb34:	4602      	mov	r2, r0
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d901      	bls.n	800cb46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cb42:	2303      	movs	r3, #3
 800cb44:	e053      	b.n	800cbee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb46:	4b2d      	ldr	r3, [pc, #180]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f003 020c 	and.w	r2, r3, #12
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d1eb      	bne.n	800cb30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb58:	4b27      	ldr	r3, [pc, #156]	; (800cbf8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 030f 	and.w	r3, r3, #15
 800cb60:	683a      	ldr	r2, [r7, #0]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d210      	bcs.n	800cb88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb66:	4b24      	ldr	r3, [pc, #144]	; (800cbf8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f023 020f 	bic.w	r2, r3, #15
 800cb6e:	4922      	ldr	r1, [pc, #136]	; (800cbf8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb76:	4b20      	ldr	r3, [pc, #128]	; (800cbf8 <HAL_RCC_ClockConfig+0x1c4>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f003 030f 	and.w	r3, r3, #15
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d001      	beq.n	800cb88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cb84:	2301      	movs	r3, #1
 800cb86:	e032      	b.n	800cbee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 0304 	and.w	r3, r3, #4
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d008      	beq.n	800cba6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb94:	4b19      	ldr	r3, [pc, #100]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	4916      	ldr	r1, [pc, #88]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 0308 	and.w	r3, r3, #8
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d009      	beq.n	800cbc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cbb2:	4b12      	ldr	r3, [pc, #72]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	490e      	ldr	r1, [pc, #56]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cbc6:	f000 f885 	bl	800ccd4 <HAL_RCC_GetSysClockFreq>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	4b0b      	ldr	r3, [pc, #44]	; (800cbfc <HAL_RCC_ClockConfig+0x1c8>)
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	091b      	lsrs	r3, r3, #4
 800cbd2:	f003 030f 	and.w	r3, r3, #15
 800cbd6:	490a      	ldr	r1, [pc, #40]	; (800cc00 <HAL_RCC_ClockConfig+0x1cc>)
 800cbd8:	5ccb      	ldrb	r3, [r1, r3]
 800cbda:	fa22 f303 	lsr.w	r3, r2, r3
 800cbde:	4a09      	ldr	r2, [pc, #36]	; (800cc04 <HAL_RCC_ClockConfig+0x1d0>)
 800cbe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cbe2:	4b09      	ldr	r3, [pc, #36]	; (800cc08 <HAL_RCC_ClockConfig+0x1d4>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fb fbc0 	bl	800836c <HAL_InitTick>

  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	40023c00 	.word	0x40023c00
 800cbfc:	40023800 	.word	0x40023800
 800cc00:	0802380c 	.word	0x0802380c
 800cc04:	2000005c 	.word	0x2000005c
 800cc08:	20000060 	.word	0x20000060

0800cc0c <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08c      	sub	sp, #48	; 0x30
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d127      	bne.n	800cc6e <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800cc1e:	4b2a      	ldr	r3, [pc, #168]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800cc20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc22:	4a29      	ldr	r2, [pc, #164]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800cc24:	f043 0301 	orr.w	r3, r3, #1
 800cc28:	6313      	str	r3, [r2, #48]	; 0x30
 800cc2a:	4b27      	ldr	r3, [pc, #156]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800cc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	61bb      	str	r3, [r7, #24]
 800cc34:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800cc36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc40:	2303      	movs	r3, #3
 800cc42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc44:	2300      	movs	r3, #0
 800cc46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800cc4c:	f107 031c 	add.w	r3, r7, #28
 800cc50:	4619      	mov	r1, r3
 800cc52:	481e      	ldr	r0, [pc, #120]	; (800cccc <HAL_RCC_MCOConfig+0xc0>)
 800cc54:	f7fc fd14 	bl	8009680 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800cc58:	4b1b      	ldr	r3, [pc, #108]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800cc60:	68b9      	ldr	r1, [r7, #8]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	430b      	orrs	r3, r1
 800cc66:	4918      	ldr	r1, [pc, #96]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800cc6c:	e027      	b.n	800ccbe <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800cc6e:	4b16      	ldr	r3, [pc, #88]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800cc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc72:	4a15      	ldr	r2, [pc, #84]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800cc74:	f043 0304 	orr.w	r3, r3, #4
 800cc78:	6313      	str	r3, [r2, #48]	; 0x30
 800cc7a:	4b13      	ldr	r3, [pc, #76]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800cc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc7e:	f003 0304 	and.w	r3, r3, #4
 800cc82:	617b      	str	r3, [r7, #20]
 800cc84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800cc86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc90:	2303      	movs	r3, #3
 800cc92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800cc9c:	f107 031c 	add.w	r3, r7, #28
 800cca0:	4619      	mov	r1, r3
 800cca2:	480b      	ldr	r0, [pc, #44]	; (800ccd0 <HAL_RCC_MCOConfig+0xc4>)
 800cca4:	f7fc fcec 	bl	8009680 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800cca8:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	00d9      	lsls	r1, r3, #3
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	430b      	orrs	r3, r1
 800ccb8:	4903      	ldr	r1, [pc, #12]	; (800ccc8 <HAL_RCC_MCOConfig+0xbc>)
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	608b      	str	r3, [r1, #8]
}
 800ccbe:	bf00      	nop
 800ccc0:	3730      	adds	r7, #48	; 0x30
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	40023800 	.word	0x40023800
 800cccc:	40020000 	.word	0x40020000
 800ccd0:	40020800 	.word	0x40020800

0800ccd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccd4:	b5b0      	push	{r4, r5, r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ccda:	2100      	movs	r1, #0
 800ccdc:	6079      	str	r1, [r7, #4]
 800ccde:	2100      	movs	r1, #0
 800cce0:	60f9      	str	r1, [r7, #12]
 800cce2:	2100      	movs	r1, #0
 800cce4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800cce6:	2100      	movs	r1, #0
 800cce8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ccea:	4952      	ldr	r1, [pc, #328]	; (800ce34 <HAL_RCC_GetSysClockFreq+0x160>)
 800ccec:	6889      	ldr	r1, [r1, #8]
 800ccee:	f001 010c 	and.w	r1, r1, #12
 800ccf2:	2908      	cmp	r1, #8
 800ccf4:	d00d      	beq.n	800cd12 <HAL_RCC_GetSysClockFreq+0x3e>
 800ccf6:	2908      	cmp	r1, #8
 800ccf8:	f200 8094 	bhi.w	800ce24 <HAL_RCC_GetSysClockFreq+0x150>
 800ccfc:	2900      	cmp	r1, #0
 800ccfe:	d002      	beq.n	800cd06 <HAL_RCC_GetSysClockFreq+0x32>
 800cd00:	2904      	cmp	r1, #4
 800cd02:	d003      	beq.n	800cd0c <HAL_RCC_GetSysClockFreq+0x38>
 800cd04:	e08e      	b.n	800ce24 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd06:	4b4c      	ldr	r3, [pc, #304]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x164>)
 800cd08:	60bb      	str	r3, [r7, #8]
      break;
 800cd0a:	e08e      	b.n	800ce2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd0c:	4b4b      	ldr	r3, [pc, #300]	; (800ce3c <HAL_RCC_GetSysClockFreq+0x168>)
 800cd0e:	60bb      	str	r3, [r7, #8]
      break;
 800cd10:	e08b      	b.n	800ce2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd12:	4948      	ldr	r1, [pc, #288]	; (800ce34 <HAL_RCC_GetSysClockFreq+0x160>)
 800cd14:	6849      	ldr	r1, [r1, #4]
 800cd16:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800cd1a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cd1c:	4945      	ldr	r1, [pc, #276]	; (800ce34 <HAL_RCC_GetSysClockFreq+0x160>)
 800cd1e:	6849      	ldr	r1, [r1, #4]
 800cd20:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800cd24:	2900      	cmp	r1, #0
 800cd26:	d024      	beq.n	800cd72 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd28:	4942      	ldr	r1, [pc, #264]	; (800ce34 <HAL_RCC_GetSysClockFreq+0x160>)
 800cd2a:	6849      	ldr	r1, [r1, #4]
 800cd2c:	0989      	lsrs	r1, r1, #6
 800cd2e:	4608      	mov	r0, r1
 800cd30:	f04f 0100 	mov.w	r1, #0
 800cd34:	f240 14ff 	movw	r4, #511	; 0x1ff
 800cd38:	f04f 0500 	mov.w	r5, #0
 800cd3c:	ea00 0204 	and.w	r2, r0, r4
 800cd40:	ea01 0305 	and.w	r3, r1, r5
 800cd44:	493d      	ldr	r1, [pc, #244]	; (800ce3c <HAL_RCC_GetSysClockFreq+0x168>)
 800cd46:	fb01 f003 	mul.w	r0, r1, r3
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	fb01 f102 	mul.w	r1, r1, r2
 800cd50:	1844      	adds	r4, r0, r1
 800cd52:	493a      	ldr	r1, [pc, #232]	; (800ce3c <HAL_RCC_GetSysClockFreq+0x168>)
 800cd54:	fba2 0101 	umull	r0, r1, r2, r1
 800cd58:	1863      	adds	r3, r4, r1
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	f04f 0300 	mov.w	r3, #0
 800cd64:	f7f3 fc90 	bl	8000688 <__aeabi_uldivmod>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	e04a      	b.n	800ce08 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd72:	4b30      	ldr	r3, [pc, #192]	; (800ce34 <HAL_RCC_GetSysClockFreq+0x160>)
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	099b      	lsrs	r3, r3, #6
 800cd78:	461a      	mov	r2, r3
 800cd7a:	f04f 0300 	mov.w	r3, #0
 800cd7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800cd82:	f04f 0100 	mov.w	r1, #0
 800cd86:	ea02 0400 	and.w	r4, r2, r0
 800cd8a:	ea03 0501 	and.w	r5, r3, r1
 800cd8e:	4620      	mov	r0, r4
 800cd90:	4629      	mov	r1, r5
 800cd92:	f04f 0200 	mov.w	r2, #0
 800cd96:	f04f 0300 	mov.w	r3, #0
 800cd9a:	014b      	lsls	r3, r1, #5
 800cd9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800cda0:	0142      	lsls	r2, r0, #5
 800cda2:	4610      	mov	r0, r2
 800cda4:	4619      	mov	r1, r3
 800cda6:	1b00      	subs	r0, r0, r4
 800cda8:	eb61 0105 	sbc.w	r1, r1, r5
 800cdac:	f04f 0200 	mov.w	r2, #0
 800cdb0:	f04f 0300 	mov.w	r3, #0
 800cdb4:	018b      	lsls	r3, r1, #6
 800cdb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800cdba:	0182      	lsls	r2, r0, #6
 800cdbc:	1a12      	subs	r2, r2, r0
 800cdbe:	eb63 0301 	sbc.w	r3, r3, r1
 800cdc2:	f04f 0000 	mov.w	r0, #0
 800cdc6:	f04f 0100 	mov.w	r1, #0
 800cdca:	00d9      	lsls	r1, r3, #3
 800cdcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cdd0:	00d0      	lsls	r0, r2, #3
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	1912      	adds	r2, r2, r4
 800cdd8:	eb45 0303 	adc.w	r3, r5, r3
 800cddc:	f04f 0000 	mov.w	r0, #0
 800cde0:	f04f 0100 	mov.w	r1, #0
 800cde4:	0299      	lsls	r1, r3, #10
 800cde6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800cdea:	0290      	lsls	r0, r2, #10
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	f04f 0300 	mov.w	r3, #0
 800cdfc:	f7f3 fc44 	bl	8000688 <__aeabi_uldivmod>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	4613      	mov	r3, r2
 800ce06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ce08:	4b0a      	ldr	r3, [pc, #40]	; (800ce34 <HAL_RCC_GetSysClockFreq+0x160>)
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	0c1b      	lsrs	r3, r3, #16
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	3301      	adds	r3, #1
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce20:	60bb      	str	r3, [r7, #8]
      break;
 800ce22:	e002      	b.n	800ce2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ce24:	4b04      	ldr	r3, [pc, #16]	; (800ce38 <HAL_RCC_GetSysClockFreq+0x164>)
 800ce26:	60bb      	str	r3, [r7, #8]
      break;
 800ce28:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ce2a:	68bb      	ldr	r3, [r7, #8]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bdb0      	pop	{r4, r5, r7, pc}
 800ce34:	40023800 	.word	0x40023800
 800ce38:	00f42400 	.word	0x00f42400
 800ce3c:	01312d00 	.word	0x01312d00

0800ce40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce40:	b480      	push	{r7}
 800ce42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ce44:	4b03      	ldr	r3, [pc, #12]	; (800ce54 <HAL_RCC_GetHCLKFreq+0x14>)
 800ce46:	681b      	ldr	r3, [r3, #0]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	2000005c 	.word	0x2000005c

0800ce58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ce5c:	f7ff fff0 	bl	800ce40 <HAL_RCC_GetHCLKFreq>
 800ce60:	4602      	mov	r2, r0
 800ce62:	4b05      	ldr	r3, [pc, #20]	; (800ce78 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	0a9b      	lsrs	r3, r3, #10
 800ce68:	f003 0307 	and.w	r3, r3, #7
 800ce6c:	4903      	ldr	r1, [pc, #12]	; (800ce7c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce6e:	5ccb      	ldrb	r3, [r1, r3]
 800ce70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	40023800 	.word	0x40023800
 800ce7c:	0802381c 	.word	0x0802381c

0800ce80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ce84:	f7ff ffdc 	bl	800ce40 <HAL_RCC_GetHCLKFreq>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	0b5b      	lsrs	r3, r3, #13
 800ce90:	f003 0307 	and.w	r3, r3, #7
 800ce94:	4903      	ldr	r1, [pc, #12]	; (800cea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce96:	5ccb      	ldrb	r3, [r1, r3]
 800ce98:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	40023800 	.word	0x40023800
 800cea4:	0802381c 	.word	0x0802381c

0800cea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d012      	beq.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ced0:	4b69      	ldr	r3, [pc, #420]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	4a68      	ldr	r2, [pc, #416]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ced6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ceda:	6093      	str	r3, [r2, #8]
 800cedc:	4b66      	ldr	r3, [pc, #408]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cede:	689a      	ldr	r2, [r3, #8]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cee4:	4964      	ldr	r1, [pc, #400]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cee6:	4313      	orrs	r3, r2
 800cee8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cef2:	2301      	movs	r3, #1
 800cef4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d017      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf02:	4b5d      	ldr	r3, [pc, #372]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf10:	4959      	ldr	r1, [pc, #356]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf20:	d101      	bne.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cf22:	2301      	movs	r3, #1
 800cf24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d017      	beq.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cf3e:	4b4e      	ldr	r3, [pc, #312]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4c:	494a      	ldr	r1, [pc, #296]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf5c:	d101      	bne.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d101      	bne.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d001      	beq.n	800cf7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0320 	and.w	r3, r3, #32
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 808b 	beq.w	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cf8c:	4b3a      	ldr	r3, [pc, #232]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf90:	4a39      	ldr	r2, [pc, #228]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf96:	6413      	str	r3, [r2, #64]	; 0x40
 800cf98:	4b37      	ldr	r3, [pc, #220]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfa0:	60bb      	str	r3, [r7, #8]
 800cfa2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cfa4:	4b35      	ldr	r3, [pc, #212]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a34      	ldr	r2, [pc, #208]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cfaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfb0:	f7fb fa20 	bl	80083f4 <HAL_GetTick>
 800cfb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cfb6:	e008      	b.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfb8:	f7fb fa1c 	bl	80083f4 <HAL_GetTick>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	2b64      	cmp	r3, #100	; 0x64
 800cfc4:	d901      	bls.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e38d      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cfca:	4b2c      	ldr	r3, [pc, #176]	; (800d07c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0f0      	beq.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cfd6:	4b28      	ldr	r3, [pc, #160]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d035      	beq.n	800d052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfee:	693a      	ldr	r2, [r7, #16]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d02e      	beq.n	800d052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cff4:	4b20      	ldr	r3, [pc, #128]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cffc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cffe:	4b1e      	ldr	r3, [pc, #120]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d002:	4a1d      	ldr	r2, [pc, #116]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d008:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d00a:	4b1b      	ldr	r3, [pc, #108]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d00e:	4a1a      	ldr	r2, [pc, #104]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d014:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d016:	4a18      	ldr	r2, [pc, #96]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d01c:	4b16      	ldr	r3, [pc, #88]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d020:	f003 0301 	and.w	r3, r3, #1
 800d024:	2b01      	cmp	r3, #1
 800d026:	d114      	bne.n	800d052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d028:	f7fb f9e4 	bl	80083f4 <HAL_GetTick>
 800d02c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d02e:	e00a      	b.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d030:	f7fb f9e0 	bl	80083f4 <HAL_GetTick>
 800d034:	4602      	mov	r2, r0
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	1ad3      	subs	r3, r2, r3
 800d03a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d03e:	4293      	cmp	r3, r2
 800d040:	d901      	bls.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e34f      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d046:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d04a:	f003 0302 	and.w	r3, r3, #2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0ee      	beq.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d05a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d05e:	d111      	bne.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d060:	4b05      	ldr	r3, [pc, #20]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d06c:	4b04      	ldr	r3, [pc, #16]	; (800d080 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d06e:	400b      	ands	r3, r1
 800d070:	4901      	ldr	r1, [pc, #4]	; (800d078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d072:	4313      	orrs	r3, r2
 800d074:	608b      	str	r3, [r1, #8]
 800d076:	e00b      	b.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d078:	40023800 	.word	0x40023800
 800d07c:	40007000 	.word	0x40007000
 800d080:	0ffffcff 	.word	0x0ffffcff
 800d084:	4bb3      	ldr	r3, [pc, #716]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	4ab2      	ldr	r2, [pc, #712]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d08a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d08e:	6093      	str	r3, [r2, #8]
 800d090:	4bb0      	ldr	r3, [pc, #704]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d09c:	49ad      	ldr	r1, [pc, #692]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f003 0310 	and.w	r3, r3, #16
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d010      	beq.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d0ae:	4ba9      	ldr	r3, [pc, #676]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0b4:	4aa7      	ldr	r2, [pc, #668]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d0ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d0be:	4ba5      	ldr	r3, [pc, #660]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c8:	49a2      	ldr	r1, [pc, #648]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00a      	beq.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d0dc:	4b9d      	ldr	r3, [pc, #628]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0ea:	499a      	ldr	r1, [pc, #616]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00a      	beq.n	800d114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d0fe:	4b95      	ldr	r3, [pc, #596]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d10c:	4991      	ldr	r1, [pc, #580]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d10e:	4313      	orrs	r3, r2
 800d110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00a      	beq.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d120:	4b8c      	ldr	r3, [pc, #560]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d12e:	4989      	ldr	r1, [pc, #548]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d130:	4313      	orrs	r3, r2
 800d132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00a      	beq.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d142:	4b84      	ldr	r3, [pc, #528]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d148:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d150:	4980      	ldr	r1, [pc, #512]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d152:	4313      	orrs	r3, r2
 800d154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00a      	beq.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d164:	4b7b      	ldr	r3, [pc, #492]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d16a:	f023 0203 	bic.w	r2, r3, #3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d172:	4978      	ldr	r1, [pc, #480]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d174:	4313      	orrs	r3, r2
 800d176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00a      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d186:	4b73      	ldr	r3, [pc, #460]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d18c:	f023 020c 	bic.w	r2, r3, #12
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d194:	496f      	ldr	r1, [pc, #444]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d196:	4313      	orrs	r3, r2
 800d198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00a      	beq.n	800d1be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d1a8:	4b6a      	ldr	r3, [pc, #424]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1b6:	4967      	ldr	r1, [pc, #412]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d1ca:	4b62      	ldr	r3, [pc, #392]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d8:	495e      	ldr	r1, [pc, #376]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00a      	beq.n	800d202 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d1ec:	4b59      	ldr	r3, [pc, #356]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1fa:	4956      	ldr	r1, [pc, #344]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00a      	beq.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d20e:	4b51      	ldr	r3, [pc, #324]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d214:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d21c:	494d      	ldr	r1, [pc, #308]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d21e:	4313      	orrs	r3, r2
 800d220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00a      	beq.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d230:	4b48      	ldr	r3, [pc, #288]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d236:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d23e:	4945      	ldr	r1, [pc, #276]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d240:	4313      	orrs	r3, r2
 800d242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00a      	beq.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d252:	4b40      	ldr	r3, [pc, #256]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d258:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d260:	493c      	ldr	r1, [pc, #240]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d262:	4313      	orrs	r3, r2
 800d264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00a      	beq.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d274:	4b37      	ldr	r3, [pc, #220]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d27a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d282:	4934      	ldr	r1, [pc, #208]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d284:	4313      	orrs	r3, r2
 800d286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d292:	2b00      	cmp	r3, #0
 800d294:	d011      	beq.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d296:	4b2f      	ldr	r3, [pc, #188]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d29c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2a4:	492b      	ldr	r1, [pc, #172]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2b4:	d101      	bne.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f003 0308 	and.w	r3, r3, #8
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d2d6:	4b1f      	ldr	r3, [pc, #124]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2e4:	491b      	ldr	r1, [pc, #108]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00b      	beq.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d2f8:	4b16      	ldr	r3, [pc, #88]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d308:	4912      	ldr	r1, [pc, #72]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d30a:	4313      	orrs	r3, r2
 800d30c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00b      	beq.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d31c:	4b0d      	ldr	r3, [pc, #52]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d322:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d32c:	4909      	ldr	r1, [pc, #36]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d32e:	4313      	orrs	r3, r2
 800d330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00f      	beq.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d340:	4b04      	ldr	r3, [pc, #16]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d346:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d350:	e002      	b.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800d352:	bf00      	nop
 800d354:	40023800 	.word	0x40023800
 800d358:	4985      	ldr	r1, [pc, #532]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d35a:	4313      	orrs	r3, r2
 800d35c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00b      	beq.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d36c:	4b80      	ldr	r3, [pc, #512]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d372:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d37c:	497c      	ldr	r1, [pc, #496]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d37e:	4313      	orrs	r3, r2
 800d380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	2b01      	cmp	r3, #1
 800d388:	d005      	beq.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d392:	f040 80d6 	bne.w	800d542 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d396:	4b76      	ldr	r3, [pc, #472]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a75      	ldr	r2, [pc, #468]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d39c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d3a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3a2:	f7fb f827 	bl	80083f4 <HAL_GetTick>
 800d3a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d3a8:	e008      	b.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d3aa:	f7fb f823 	bl	80083f4 <HAL_GetTick>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	1ad3      	subs	r3, r2, r3
 800d3b4:	2b64      	cmp	r3, #100	; 0x64
 800d3b6:	d901      	bls.n	800d3bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3b8:	2303      	movs	r3, #3
 800d3ba:	e194      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d3bc:	4b6c      	ldr	r3, [pc, #432]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1f0      	bne.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f003 0301 	and.w	r3, r3, #1
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d021      	beq.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d11d      	bne.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d3dc:	4b64      	ldr	r3, [pc, #400]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3e2:	0c1b      	lsrs	r3, r3, #16
 800d3e4:	f003 0303 	and.w	r3, r3, #3
 800d3e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d3ea:	4b61      	ldr	r3, [pc, #388]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3f0:	0e1b      	lsrs	r3, r3, #24
 800d3f2:	f003 030f 	and.w	r3, r3, #15
 800d3f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	019a      	lsls	r2, r3, #6
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	041b      	lsls	r3, r3, #16
 800d402:	431a      	orrs	r2, r3
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	061b      	lsls	r3, r3, #24
 800d408:	431a      	orrs	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	071b      	lsls	r3, r3, #28
 800d410:	4957      	ldr	r1, [pc, #348]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d412:	4313      	orrs	r3, r2
 800d414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d420:	2b00      	cmp	r3, #0
 800d422:	d004      	beq.n	800d42e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d42c:	d00a      	beq.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d436:	2b00      	cmp	r3, #0
 800d438:	d02e      	beq.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d442:	d129      	bne.n	800d498 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d444:	4b4a      	ldr	r3, [pc, #296]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d44a:	0c1b      	lsrs	r3, r3, #16
 800d44c:	f003 0303 	and.w	r3, r3, #3
 800d450:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d452:	4b47      	ldr	r3, [pc, #284]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d458:	0f1b      	lsrs	r3, r3, #28
 800d45a:	f003 0307 	and.w	r3, r3, #7
 800d45e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	019a      	lsls	r2, r3, #6
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	041b      	lsls	r3, r3, #16
 800d46a:	431a      	orrs	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	061b      	lsls	r3, r3, #24
 800d472:	431a      	orrs	r2, r3
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	071b      	lsls	r3, r3, #28
 800d478:	493d      	ldr	r1, [pc, #244]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d47a:	4313      	orrs	r3, r2
 800d47c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d480:	4b3b      	ldr	r3, [pc, #236]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d486:	f023 021f 	bic.w	r2, r3, #31
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48e:	3b01      	subs	r3, #1
 800d490:	4937      	ldr	r1, [pc, #220]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d492:	4313      	orrs	r3, r2
 800d494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d01d      	beq.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d4a4:	4b32      	ldr	r3, [pc, #200]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4aa:	0e1b      	lsrs	r3, r3, #24
 800d4ac:	f003 030f 	and.w	r3, r3, #15
 800d4b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d4b2:	4b2f      	ldr	r3, [pc, #188]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4b8:	0f1b      	lsrs	r3, r3, #28
 800d4ba:	f003 0307 	and.w	r3, r3, #7
 800d4be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	019a      	lsls	r2, r3, #6
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	041b      	lsls	r3, r3, #16
 800d4cc:	431a      	orrs	r2, r3
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	061b      	lsls	r3, r3, #24
 800d4d2:	431a      	orrs	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	071b      	lsls	r3, r3, #28
 800d4d8:	4925      	ldr	r1, [pc, #148]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d011      	beq.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	019a      	lsls	r2, r3, #6
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	041b      	lsls	r3, r3, #16
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	061b      	lsls	r3, r3, #24
 800d500:	431a      	orrs	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	071b      	lsls	r3, r3, #28
 800d508:	4919      	ldr	r1, [pc, #100]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d50a:	4313      	orrs	r3, r2
 800d50c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d510:	4b17      	ldr	r3, [pc, #92]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a16      	ldr	r2, [pc, #88]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d51a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d51c:	f7fa ff6a 	bl	80083f4 <HAL_GetTick>
 800d520:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d522:	e008      	b.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d524:	f7fa ff66 	bl	80083f4 <HAL_GetTick>
 800d528:	4602      	mov	r2, r0
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	2b64      	cmp	r3, #100	; 0x64
 800d530:	d901      	bls.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d532:	2303      	movs	r3, #3
 800d534:	e0d7      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d536:	4b0e      	ldr	r3, [pc, #56]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d0f0      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	2b01      	cmp	r3, #1
 800d546:	f040 80cd 	bne.w	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d54a:	4b09      	ldr	r3, [pc, #36]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a08      	ldr	r2, [pc, #32]	; (800d570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d556:	f7fa ff4d 	bl	80083f4 <HAL_GetTick>
 800d55a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d55c:	e00a      	b.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d55e:	f7fa ff49 	bl	80083f4 <HAL_GetTick>
 800d562:	4602      	mov	r2, r0
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	1ad3      	subs	r3, r2, r3
 800d568:	2b64      	cmp	r3, #100	; 0x64
 800d56a:	d903      	bls.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d56c:	2303      	movs	r3, #3
 800d56e:	e0ba      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d570:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d574:	4b5e      	ldr	r3, [pc, #376]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d57c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d580:	d0ed      	beq.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d003      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d592:	2b00      	cmp	r3, #0
 800d594:	d009      	beq.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d02e      	beq.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d12a      	bne.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d5aa:	4b51      	ldr	r3, [pc, #324]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5b0:	0c1b      	lsrs	r3, r3, #16
 800d5b2:	f003 0303 	and.w	r3, r3, #3
 800d5b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d5b8:	4b4d      	ldr	r3, [pc, #308]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5be:	0f1b      	lsrs	r3, r3, #28
 800d5c0:	f003 0307 	and.w	r3, r3, #7
 800d5c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	019a      	lsls	r2, r3, #6
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	041b      	lsls	r3, r3, #16
 800d5d0:	431a      	orrs	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	699b      	ldr	r3, [r3, #24]
 800d5d6:	061b      	lsls	r3, r3, #24
 800d5d8:	431a      	orrs	r2, r3
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	071b      	lsls	r3, r3, #28
 800d5de:	4944      	ldr	r1, [pc, #272]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d5e6:	4b42      	ldr	r3, [pc, #264]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	021b      	lsls	r3, r3, #8
 800d5f8:	493d      	ldr	r1, [pc, #244]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d022      	beq.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d614:	d11d      	bne.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d616:	4b36      	ldr	r3, [pc, #216]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d61c:	0e1b      	lsrs	r3, r3, #24
 800d61e:	f003 030f 	and.w	r3, r3, #15
 800d622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d624:	4b32      	ldr	r3, [pc, #200]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d62a:	0f1b      	lsrs	r3, r3, #28
 800d62c:	f003 0307 	and.w	r3, r3, #7
 800d630:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	695b      	ldr	r3, [r3, #20]
 800d636:	019a      	lsls	r2, r3, #6
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a1b      	ldr	r3, [r3, #32]
 800d63c:	041b      	lsls	r3, r3, #16
 800d63e:	431a      	orrs	r2, r3
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	061b      	lsls	r3, r3, #24
 800d644:	431a      	orrs	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	071b      	lsls	r3, r3, #28
 800d64a:	4929      	ldr	r1, [pc, #164]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d64c:	4313      	orrs	r3, r2
 800d64e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f003 0308 	and.w	r3, r3, #8
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d028      	beq.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d65e:	4b24      	ldr	r3, [pc, #144]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d664:	0e1b      	lsrs	r3, r3, #24
 800d666:	f003 030f 	and.w	r3, r3, #15
 800d66a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d66c:	4b20      	ldr	r3, [pc, #128]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d672:	0c1b      	lsrs	r3, r3, #16
 800d674:	f003 0303 	and.w	r3, r3, #3
 800d678:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	695b      	ldr	r3, [r3, #20]
 800d67e:	019a      	lsls	r2, r3, #6
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	041b      	lsls	r3, r3, #16
 800d684:	431a      	orrs	r2, r3
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	061b      	lsls	r3, r3, #24
 800d68a:	431a      	orrs	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	69db      	ldr	r3, [r3, #28]
 800d690:	071b      	lsls	r3, r3, #28
 800d692:	4917      	ldr	r1, [pc, #92]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d694:	4313      	orrs	r3, r2
 800d696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d69a:	4b15      	ldr	r3, [pc, #84]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d69c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a8:	4911      	ldr	r1, [pc, #68]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d6b0:	4b0f      	ldr	r3, [pc, #60]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a0e      	ldr	r2, [pc, #56]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6bc:	f7fa fe9a 	bl	80083f4 <HAL_GetTick>
 800d6c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d6c2:	e008      	b.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d6c4:	f7fa fe96 	bl	80083f4 <HAL_GetTick>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	1ad3      	subs	r3, r2, r3
 800d6ce:	2b64      	cmp	r3, #100	; 0x64
 800d6d0:	d901      	bls.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	e007      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d6d6:	4b06      	ldr	r3, [pc, #24]	; (800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6e2:	d1ef      	bne.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3720      	adds	r7, #32
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	40023800 	.word	0x40023800

0800d6f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d101      	bne.n	800d706 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d702:	2301      	movs	r3, #1
 800d704:	e06b      	b.n	800d7de <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	7f5b      	ldrb	r3, [r3, #29]
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d105      	bne.n	800d71c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7f9 fe84 	bl	8007424 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2202      	movs	r2, #2
 800d720:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	22ca      	movs	r2, #202	; 0xca
 800d728:	625a      	str	r2, [r3, #36]	; 0x24
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2253      	movs	r2, #83	; 0x53
 800d730:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 fa96 	bl	800dc64 <RTC_EnterInitMode>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d008      	beq.n	800d750 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	22ff      	movs	r2, #255	; 0xff
 800d744:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2204      	movs	r2, #4
 800d74a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e046      	b.n	800d7de <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	6899      	ldr	r1, [r3, #8]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	4b23      	ldr	r3, [pc, #140]	; (800d7e8 <HAL_RTC_Init+0xf4>)
 800d75c:	400b      	ands	r3, r1
 800d75e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	6899      	ldr	r1, [r3, #8]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	431a      	orrs	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	695b      	ldr	r3, [r3, #20]
 800d774:	431a      	orrs	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	430a      	orrs	r2, r1
 800d77c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	68d2      	ldr	r2, [r2, #12]
 800d786:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6919      	ldr	r1, [r3, #16]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	041a      	lsls	r2, r3, #16
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	430a      	orrs	r2, r1
 800d79a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	68da      	ldr	r2, [r3, #12]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d7aa:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f022 0208 	bic.w	r2, r2, #8
 800d7ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	699a      	ldr	r2, [r3, #24]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	22ff      	movs	r2, #255	; 0xff
 800d7d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
  }
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	ff8fffbf 	.word	0xff8fffbf

0800d7ec <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d7ec:	b590      	push	{r4, r7, lr}
 800d7ee:	b087      	sub	sp, #28
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	7f1b      	ldrb	r3, [r3, #28]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d101      	bne.n	800d808 <HAL_RTC_SetTime+0x1c>
 800d804:	2302      	movs	r3, #2
 800d806:	e0a8      	b.n	800d95a <HAL_RTC_SetTime+0x16e>
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2201      	movs	r2, #1
 800d80c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2202      	movs	r2, #2
 800d812:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d126      	bne.n	800d868 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d824:	2b00      	cmp	r3, #0
 800d826:	d102      	bne.n	800d82e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	2200      	movs	r2, #0
 800d82c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	4618      	mov	r0, r3
 800d834:	f000 fa42 	bl	800dcbc <RTC_ByteToBcd2>
 800d838:	4603      	mov	r3, r0
 800d83a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	785b      	ldrb	r3, [r3, #1]
 800d840:	4618      	mov	r0, r3
 800d842:	f000 fa3b 	bl	800dcbc <RTC_ByteToBcd2>
 800d846:	4603      	mov	r3, r0
 800d848:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d84a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	789b      	ldrb	r3, [r3, #2]
 800d850:	4618      	mov	r0, r3
 800d852:	f000 fa33 	bl	800dcbc <RTC_ByteToBcd2>
 800d856:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800d858:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	7b1b      	ldrb	r3, [r3, #12]
 800d860:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800d862:	4313      	orrs	r3, r2
 800d864:	617b      	str	r3, [r7, #20]
 800d866:	e018      	b.n	800d89a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d102      	bne.n	800d87c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2200      	movs	r2, #0
 800d87a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	785b      	ldrb	r3, [r3, #1]
 800d886:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d888:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800d88e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	7b1b      	ldrb	r3, [r3, #12]
 800d894:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800d896:	4313      	orrs	r3, r2
 800d898:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	22ca      	movs	r2, #202	; 0xca
 800d8a0:	625a      	str	r2, [r3, #36]	; 0x24
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2253      	movs	r2, #83	; 0x53
 800d8a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f000 f9da 	bl	800dc64 <RTC_EnterInitMode>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00b      	beq.n	800d8ce <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	22ff      	movs	r2, #255	; 0xff
 800d8bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2204      	movs	r2, #4
 800d8c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e045      	b.n	800d95a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	6979      	ldr	r1, [r7, #20]
 800d8d4:	4b23      	ldr	r3, [pc, #140]	; (800d964 <HAL_RTC_SetTime+0x178>)
 800d8d6:	400b      	ands	r3, r1
 800d8d8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	689a      	ldr	r2, [r3, #8]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d8e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6899      	ldr	r1, [r3, #8]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	691a      	ldr	r2, [r3, #16]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	431a      	orrs	r2, r3
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	430a      	orrs	r2, r1
 800d900:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68da      	ldr	r2, [r3, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d910:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	f003 0320 	and.w	r3, r3, #32
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d111      	bne.n	800d944 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f000 f977 	bl	800dc14 <HAL_RTC_WaitForSynchro>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d00b      	beq.n	800d944 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	22ff      	movs	r2, #255	; 0xff
 800d932:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2204      	movs	r2, #4
 800d938:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2200      	movs	r2, #0
 800d93e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e00a      	b.n	800d95a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	22ff      	movs	r2, #255	; 0xff
 800d94a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2201      	movs	r2, #1
 800d950:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d958:	2300      	movs	r3, #0
  }
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	371c      	adds	r7, #28
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd90      	pop	{r4, r7, pc}
 800d962:	bf00      	nop
 800d964:	007f7f7f 	.word	0x007f7f7f

0800d968 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b086      	sub	sp, #24
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	691b      	ldr	r3, [r3, #16]
 800d988:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	4b22      	ldr	r3, [pc, #136]	; (800da20 <HAL_RTC_GetTime+0xb8>)
 800d998:	4013      	ands	r3, r2
 800d99a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	0c1b      	lsrs	r3, r3, #16
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	0a1b      	lsrs	r3, r3, #8
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9b6:	b2da      	uxtb	r2, r3
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	0c1b      	lsrs	r3, r3, #16
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d11a      	bne.n	800da16 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f000 f987 	bl	800dcf8 <RTC_Bcd2ToByte>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	785b      	ldrb	r3, [r3, #1]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f000 f97e 	bl	800dcf8 <RTC_Bcd2ToByte>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	461a      	mov	r2, r3
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	789b      	ldrb	r3, [r3, #2]
 800da08:	4618      	mov	r0, r3
 800da0a:	f000 f975 	bl	800dcf8 <RTC_Bcd2ToByte>
 800da0e:	4603      	mov	r3, r0
 800da10:	461a      	mov	r2, r3
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3718      	adds	r7, #24
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	007f7f7f 	.word	0x007f7f7f

0800da24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800da24:	b590      	push	{r4, r7, lr}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800da30:	2300      	movs	r3, #0
 800da32:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	7f1b      	ldrb	r3, [r3, #28]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d101      	bne.n	800da40 <HAL_RTC_SetDate+0x1c>
 800da3c:	2302      	movs	r3, #2
 800da3e:	e092      	b.n	800db66 <HAL_RTC_SetDate+0x142>
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2201      	movs	r2, #1
 800da44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2202      	movs	r2, #2
 800da4a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10e      	bne.n	800da70 <HAL_RTC_SetDate+0x4c>
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	785b      	ldrb	r3, [r3, #1]
 800da56:	f003 0310 	and.w	r3, r3, #16
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d008      	beq.n	800da70 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	785b      	ldrb	r3, [r3, #1]
 800da62:	f023 0310 	bic.w	r3, r3, #16
 800da66:	b2db      	uxtb	r3, r3
 800da68:	330a      	adds	r3, #10
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d11c      	bne.n	800dab0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	78db      	ldrb	r3, [r3, #3]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 f91e 	bl	800dcbc <RTC_ByteToBcd2>
 800da80:	4603      	mov	r3, r0
 800da82:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	785b      	ldrb	r3, [r3, #1]
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 f917 	bl	800dcbc <RTC_ByteToBcd2>
 800da8e:	4603      	mov	r3, r0
 800da90:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800da92:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	789b      	ldrb	r3, [r3, #2]
 800da98:	4618      	mov	r0, r3
 800da9a:	f000 f90f 	bl	800dcbc <RTC_ByteToBcd2>
 800da9e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800daa0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800daaa:	4313      	orrs	r3, r2
 800daac:	617b      	str	r3, [r7, #20]
 800daae:	e00e      	b.n	800dace <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	78db      	ldrb	r3, [r3, #3]
 800dab4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	785b      	ldrb	r3, [r3, #1]
 800daba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800dabc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800dac2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800daca:	4313      	orrs	r3, r2
 800dacc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	22ca      	movs	r2, #202	; 0xca
 800dad4:	625a      	str	r2, [r3, #36]	; 0x24
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2253      	movs	r2, #83	; 0x53
 800dadc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f000 f8c0 	bl	800dc64 <RTC_EnterInitMode>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00b      	beq.n	800db02 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	22ff      	movs	r2, #255	; 0xff
 800daf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2204      	movs	r2, #4
 800daf6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2200      	movs	r2, #0
 800dafc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e031      	b.n	800db66 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	6979      	ldr	r1, [r7, #20]
 800db08:	4b19      	ldr	r3, [pc, #100]	; (800db70 <HAL_RTC_SetDate+0x14c>)
 800db0a:	400b      	ands	r3, r1
 800db0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68da      	ldr	r2, [r3, #12]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db1c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	689b      	ldr	r3, [r3, #8]
 800db24:	f003 0320 	and.w	r3, r3, #32
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d111      	bne.n	800db50 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f000 f871 	bl	800dc14 <HAL_RTC_WaitForSynchro>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00b      	beq.n	800db50 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	22ff      	movs	r2, #255	; 0xff
 800db3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2204      	movs	r2, #4
 800db44:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2200      	movs	r2, #0
 800db4a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	e00a      	b.n	800db66 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	22ff      	movs	r2, #255	; 0xff
 800db56:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2201      	movs	r2, #1
 800db5c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2200      	movs	r2, #0
 800db62:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800db64:	2300      	movs	r3, #0
  }
}
 800db66:	4618      	mov	r0, r3
 800db68:	371c      	adds	r7, #28
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd90      	pop	{r4, r7, pc}
 800db6e:	bf00      	nop
 800db70:	00ffff3f 	.word	0x00ffff3f

0800db74 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	685a      	ldr	r2, [r3, #4]
 800db8a:	4b21      	ldr	r3, [pc, #132]	; (800dc10 <HAL_RTC_GetDate+0x9c>)
 800db8c:	4013      	ands	r3, r2
 800db8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	0c1b      	lsrs	r3, r3, #16
 800db94:	b2da      	uxtb	r2, r3
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	0a1b      	lsrs	r3, r3, #8
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	f003 031f 	and.w	r3, r3, #31
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbb2:	b2da      	uxtb	r2, r3
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	0b5b      	lsrs	r3, r3, #13
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	f003 0307 	and.w	r3, r3, #7
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d11a      	bne.n	800dc04 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	78db      	ldrb	r3, [r3, #3]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 f890 	bl	800dcf8 <RTC_Bcd2ToByte>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	461a      	mov	r2, r3
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	785b      	ldrb	r3, [r3, #1]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f000 f887 	bl	800dcf8 <RTC_Bcd2ToByte>
 800dbea:	4603      	mov	r3, r0
 800dbec:	461a      	mov	r2, r3
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	789b      	ldrb	r3, [r3, #2]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f000 f87e 	bl	800dcf8 <RTC_Bcd2ToByte>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	461a      	mov	r2, r3
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3718      	adds	r7, #24
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	00ffff3f 	.word	0x00ffff3f

0800dc14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	68da      	ldr	r2, [r3, #12]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dc2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800dc30:	f7fa fbe0 	bl	80083f4 <HAL_GetTick>
 800dc34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800dc36:	e009      	b.n	800dc4c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dc38:	f7fa fbdc 	bl	80083f4 <HAL_GetTick>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc46:	d901      	bls.n	800dc4c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800dc48:	2303      	movs	r3, #3
 800dc4a:	e007      	b.n	800dc5c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	f003 0320 	and.w	r3, r3, #32
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d0ee      	beq.n	800dc38 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d119      	bne.n	800dcb2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f04f 32ff 	mov.w	r2, #4294967295
 800dc86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800dc88:	f7fa fbb4 	bl	80083f4 <HAL_GetTick>
 800dc8c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800dc8e:	e009      	b.n	800dca4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dc90:	f7fa fbb0 	bl	80083f4 <HAL_GetTick>
 800dc94:	4602      	mov	r2, r0
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	1ad3      	subs	r3, r2, r3
 800dc9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc9e:	d901      	bls.n	800dca4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800dca0:	2303      	movs	r3, #3
 800dca2:	e007      	b.n	800dcb4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d0ee      	beq.n	800dc90 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800dcca:	e005      	b.n	800dcd8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800dcd2:	79fb      	ldrb	r3, [r7, #7]
 800dcd4:	3b0a      	subs	r3, #10
 800dcd6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800dcd8:	79fb      	ldrb	r3, [r7, #7]
 800dcda:	2b09      	cmp	r3, #9
 800dcdc:	d8f6      	bhi.n	800dccc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	011b      	lsls	r3, r3, #4
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	79fb      	ldrb	r3, [r7, #7]
 800dce8:	4313      	orrs	r3, r2
 800dcea:	b2db      	uxtb	r3, r3
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3714      	adds	r7, #20
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b085      	sub	sp, #20
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800dd06:	79fb      	ldrb	r3, [r7, #7]
 800dd08:	091b      	lsrs	r3, r3, #4
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4613      	mov	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	005b      	lsls	r3, r3, #1
 800dd16:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800dd18:	79fb      	ldrb	r3, [r7, #7]
 800dd1a:	f003 030f 	and.w	r3, r3, #15
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	4413      	add	r3, r2
 800dd26:	b2db      	uxtb	r3, r3
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b087      	sub	sp, #28
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	3350      	adds	r3, #80	; 0x50
 800dd4a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	4413      	add	r3, r2
 800dd54:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	601a      	str	r2, [r3, #0]
}
 800dd5c:	bf00      	nop
 800dd5e:	371c      	adds	r7, #28
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800dd76:	2301      	movs	r3, #1
 800dd78:	e022      	b.n	800ddc0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d105      	bne.n	800dd92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7f9 fb63 	bl	8007458 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2203      	movs	r2, #3
 800dd96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 f814 	bl	800ddc8 <HAL_SD_InitCard>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d001      	beq.n	800ddaa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e00a      	b.n	800ddc0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ddc8:	b5b0      	push	{r4, r5, r7, lr}
 800ddca:	b08e      	sub	sp, #56	; 0x38
 800ddcc:	af04      	add	r7, sp, #16
 800ddce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800dddc:	2300      	movs	r3, #0
 800ddde:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800dde0:	2300      	movs	r3, #0
 800dde2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800dde4:	2376      	movs	r3, #118	; 0x76
 800dde6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681d      	ldr	r5, [r3, #0]
 800ddec:	466c      	mov	r4, sp
 800ddee:	f107 0314 	add.w	r3, r7, #20
 800ddf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ddf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ddfa:	f107 0308 	add.w	r3, r7, #8
 800ddfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de00:	4628      	mov	r0, r5
 800de02:	f004 fa33 	bl	801226c <SDMMC_Init>
 800de06:	4603      	mov	r3, r0
 800de08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800de0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800de14:	2301      	movs	r3, #1
 800de16:	e03b      	b.n	800de90 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	685a      	ldr	r2, [r3, #4]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de26:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f004 fa67 	bl	8012300 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	685a      	ldr	r2, [r3, #4]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de40:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f001 f8e6 	bl	800f014 <SD_PowerON>
 800de48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de4a:	6a3b      	ldr	r3, [r7, #32]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00b      	beq.n	800de68 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	431a      	orrs	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800de64:	2301      	movs	r3, #1
 800de66:	e013      	b.n	800de90 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f001 f807 	bl	800ee7c <SD_InitCard>
 800de6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de70:	6a3b      	ldr	r3, [r7, #32]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00b      	beq.n	800de8e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de82:	6a3b      	ldr	r3, [r7, #32]
 800de84:	431a      	orrs	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	e000      	b.n	800de90 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800de8e:	2300      	movs	r3, #0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3728      	adds	r7, #40	; 0x28
 800de94:	46bd      	mov	sp, r7
 800de96:	bdb0      	pop	{r4, r5, r7, pc}

0800de98 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b092      	sub	sp, #72	; 0x48
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
 800dea4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dea6:	f7fa faa5 	bl	80083f4 <HAL_GetTick>
 800deaa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d107      	bne.n	800deca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800debe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e1d7      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	f040 81ca 	bne.w	800e26c <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2200      	movs	r2, #0
 800dedc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	441a      	add	r2, r3
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dee8:	429a      	cmp	r2, r3
 800deea:	d907      	bls.n	800defc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800def8:	2301      	movs	r3, #1
 800defa:	e1be      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2203      	movs	r2, #3
 800df00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2200      	movs	r2, #0
 800df0a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df10:	2b01      	cmp	r3, #1
 800df12:	d002      	beq.n	800df1a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800df14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df16:	025b      	lsls	r3, r3, #9
 800df18:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df22:	4618      	mov	r0, r3
 800df24:	f004 fa80 	bl	8012428 <SDMMC_CmdBlockLength>
 800df28:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800df2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00f      	beq.n	800df50 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a9a      	ldr	r2, [pc, #616]	; (800e1a0 <HAL_SD_ReadBlocks+0x308>)
 800df36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df3e:	431a      	orrs	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2201      	movs	r2, #1
 800df48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e194      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800df50:	f04f 33ff 	mov.w	r3, #4294967295
 800df54:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	025b      	lsls	r3, r3, #9
 800df5a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800df5c:	2390      	movs	r3, #144	; 0x90
 800df5e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800df60:	2302      	movs	r3, #2
 800df62:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800df64:	2300      	movs	r3, #0
 800df66:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800df68:	2301      	movs	r3, #1
 800df6a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f107 0214 	add.w	r2, r7, #20
 800df74:	4611      	mov	r1, r2
 800df76:	4618      	mov	r0, r3
 800df78:	f004 fa2a 	bl	80123d0 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d90a      	bls.n	800df98 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2202      	movs	r2, #2
 800df86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df8e:	4618      	mov	r0, r3
 800df90:	f004 fa8e 	bl	80124b0 <SDMMC_CmdReadMultiBlock>
 800df94:	6478      	str	r0, [r7, #68]	; 0x44
 800df96:	e009      	b.n	800dfac <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2201      	movs	r2, #1
 800df9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f004 fa61 	bl	801246c <SDMMC_CmdReadSingleBlock>
 800dfaa:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d012      	beq.n	800dfd8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a7a      	ldr	r2, [pc, #488]	; (800e1a0 <HAL_SD_ReadBlocks+0x308>)
 800dfb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfc0:	431a      	orrs	r2, r3
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e150      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800dfdc:	e061      	b.n	800e0a2 <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d03c      	beq.n	800e066 <HAL_SD_ReadBlocks+0x1ce>
 800dfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d039      	beq.n	800e066 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800dff2:	2300      	movs	r3, #0
 800dff4:	643b      	str	r3, [r7, #64]	; 0x40
 800dff6:	e033      	b.n	800e060 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f004 f961 	bl	80122c4 <SDMMC_ReadFIFO>
 800e002:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800e004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e006:	b2da      	uxtb	r2, r3
 800e008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e00a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e00e:	3301      	adds	r3, #1
 800e010:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e014:	3b01      	subs	r3, #1
 800e016:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	0a1b      	lsrs	r3, r3, #8
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e020:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e024:	3301      	adds	r3, #1
 800e026:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02a:	3b01      	subs	r3, #1
 800e02c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	0c1b      	lsrs	r3, r3, #16
 800e032:	b2da      	uxtb	r2, r3
 800e034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e036:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03a:	3301      	adds	r3, #1
 800e03c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e040:	3b01      	subs	r3, #1
 800e042:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e046:	0e1b      	lsrs	r3, r3, #24
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e04c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e050:	3301      	adds	r3, #1
 800e052:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e056:	3b01      	subs	r3, #1
 800e058:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800e05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e05c:	3301      	adds	r3, #1
 800e05e:	643b      	str	r3, [r7, #64]	; 0x40
 800e060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e062:	2b07      	cmp	r3, #7
 800e064:	d9c8      	bls.n	800dff8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e066:	f7fa f9c5 	bl	80083f4 <HAL_GetTick>
 800e06a:	4602      	mov	r2, r0
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e072:	429a      	cmp	r2, r3
 800e074:	d902      	bls.n	800e07c <HAL_SD_ReadBlocks+0x1e4>
 800e076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d112      	bne.n	800e0a2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a47      	ldr	r2, [pc, #284]	; (800e1a0 <HAL_SD_ReadBlocks+0x308>)
 800e082:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e088:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2200      	movs	r2, #0
 800e09c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800e09e:	2303      	movs	r3, #3
 800e0a0:	e0eb      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d096      	beq.n	800dfde <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d022      	beq.n	800e104 <HAL_SD_ReadBlocks+0x26c>
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d91f      	bls.n	800e104 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d01b      	beq.n	800e104 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f004 fa53 	bl	801257c <SDMMC_CmdStopTransfer>
 800e0d6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800e0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d012      	beq.n	800e104 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a2f      	ldr	r2, [pc, #188]	; (800e1a0 <HAL_SD_ReadBlocks+0x308>)
 800e0e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ec:	431a      	orrs	r2, r3
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800e100:	2301      	movs	r3, #1
 800e102:	e0ba      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10a:	f003 0308 	and.w	r3, r3, #8
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d012      	beq.n	800e138 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a22      	ldr	r2, [pc, #136]	; (800e1a0 <HAL_SD_ReadBlocks+0x308>)
 800e118:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e11e:	f043 0208 	orr.w	r2, r3, #8
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2200      	movs	r2, #0
 800e132:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e134:	2301      	movs	r3, #1
 800e136:	e0a0      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e13e:	f003 0302 	and.w	r3, r3, #2
 800e142:	2b00      	cmp	r3, #0
 800e144:	d012      	beq.n	800e16c <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a15      	ldr	r2, [pc, #84]	; (800e1a0 <HAL_SD_ReadBlocks+0x308>)
 800e14c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e152:	f043 0202 	orr.w	r2, r3, #2
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2201      	movs	r2, #1
 800e15e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	e086      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e172:	f003 0320 	and.w	r3, r3, #32
 800e176:	2b00      	cmp	r3, #0
 800e178:	d063      	beq.n	800e242 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a08      	ldr	r2, [pc, #32]	; (800e1a0 <HAL_SD_ReadBlocks+0x308>)
 800e180:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e186:	f043 0220 	orr.w	r2, r3, #32
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2201      	movs	r2, #1
 800e192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2200      	movs	r2, #0
 800e19a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e19c:	2301      	movs	r3, #1
 800e19e:	e06c      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
 800e1a0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f004 f88b 	bl	80122c4 <SDMMC_ReadFIFO>
 800e1ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c6:	0a1b      	lsrs	r3, r3, #8
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1dc:	0c1b      	lsrs	r3, r3, #16
 800e1de:	b2da      	uxtb	r2, r3
 800e1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1e2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f2:	0e1b      	lsrs	r3, r3, #24
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1f8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e202:	3b01      	subs	r3, #1
 800e204:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e206:	f7fa f8f5 	bl	80083f4 <HAL_GetTick>
 800e20a:	4602      	mov	r2, r0
 800e20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e212:	429a      	cmp	r2, r3
 800e214:	d902      	bls.n	800e21c <HAL_SD_ReadBlocks+0x384>
 800e216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d112      	bne.n	800e242 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a18      	ldr	r2, [pc, #96]	; (800e284 <HAL_SD_ReadBlocks+0x3ec>)
 800e222:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e228:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2201      	movs	r2, #1
 800e234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2200      	movs	r2, #0
 800e23c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	e01b      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d002      	beq.n	800e256 <HAL_SD_ReadBlocks+0x3be>
 800e250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1a6      	bne.n	800e1a4 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f240 523a 	movw	r2, #1338	; 0x53a
 800e25e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e268:	2300      	movs	r3, #0
 800e26a:	e006      	b.n	800e27a <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e270:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e278:	2301      	movs	r3, #1
  }
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3748      	adds	r7, #72	; 0x48
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	004005ff 	.word	0x004005ff

0800e288 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b092      	sub	sp, #72	; 0x48
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
 800e294:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e296:	f7fa f8ad 	bl	80083f4 <HAL_GetTick>
 800e29a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d107      	bne.n	800e2ba <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e182      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	f040 8175 	bne.w	800e5b2 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e2ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	441a      	add	r2, r3
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d907      	bls.n	800e2ec <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e169      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2203      	movs	r2, #3
 800e2f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e300:	2b01      	cmp	r3, #1
 800e302:	d002      	beq.n	800e30a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800e304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e306:	025b      	lsls	r3, r3, #9
 800e308:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e312:	4618      	mov	r0, r3
 800e314:	f004 f888 	bl	8012428 <SDMMC_CmdBlockLength>
 800e318:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800e31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00f      	beq.n	800e340 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a9c      	ldr	r2, [pc, #624]	; (800e598 <HAL_SD_WriteBlocks+0x310>)
 800e326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e32e:	431a      	orrs	r2, r3
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	e13f      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e340:	f04f 33ff 	mov.w	r3, #4294967295
 800e344:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	025b      	lsls	r3, r3, #9
 800e34a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e34c:	2390      	movs	r3, #144	; 0x90
 800e34e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e350:	2300      	movs	r3, #0
 800e352:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e354:	2300      	movs	r3, #0
 800e356:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800e358:	2301      	movs	r3, #1
 800e35a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f107 0218 	add.w	r2, r7, #24
 800e364:	4611      	mov	r1, r2
 800e366:	4618      	mov	r0, r3
 800e368:	f004 f832 	bl	80123d0 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d90a      	bls.n	800e388 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2220      	movs	r2, #32
 800e376:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e37e:	4618      	mov	r0, r3
 800e380:	f004 f8da 	bl	8012538 <SDMMC_CmdWriteMultiBlock>
 800e384:	6478      	str	r0, [r7, #68]	; 0x44
 800e386:	e009      	b.n	800e39c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2210      	movs	r2, #16
 800e38c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e394:	4618      	mov	r0, r3
 800e396:	f004 f8ad 	bl	80124f4 <SDMMC_CmdWriteSingleBlock>
 800e39a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e39c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d012      	beq.n	800e3c8 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4a7c      	ldr	r2, [pc, #496]	; (800e598 <HAL_SD_WriteBlocks+0x310>)
 800e3a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3b0:	431a      	orrs	r2, r3
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e0fb      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e3cc:	e065      	b.n	800e49a <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d040      	beq.n	800e45e <HAL_SD_WriteBlocks+0x1d6>
 800e3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d03d      	beq.n	800e45e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	643b      	str	r3, [r7, #64]	; 0x40
 800e3e6:	e037      	b.n	800e458 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800e3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800e3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	021a      	lsls	r2, r3, #8
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	4313      	orrs	r3, r2
 800e404:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e408:	3301      	adds	r3, #1
 800e40a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e40e:	3b01      	subs	r3, #1
 800e410:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800e412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	041a      	lsls	r2, r3, #16
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e420:	3301      	adds	r3, #1
 800e422:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e426:	3b01      	subs	r3, #1
 800e428:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	061a      	lsls	r2, r3, #24
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	4313      	orrs	r3, r2
 800e434:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e438:	3301      	adds	r3, #1
 800e43a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e43e:	3b01      	subs	r3, #1
 800e440:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f107 0214 	add.w	r2, r7, #20
 800e44a:	4611      	mov	r1, r2
 800e44c:	4618      	mov	r0, r3
 800e44e:	f003 ff46 	bl	80122de <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800e452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e454:	3301      	adds	r3, #1
 800e456:	643b      	str	r3, [r7, #64]	; 0x40
 800e458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e45a:	2b07      	cmp	r3, #7
 800e45c:	d9c4      	bls.n	800e3e8 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e45e:	f7f9 ffc9 	bl	80083f4 <HAL_GetTick>
 800e462:	4602      	mov	r2, r0
 800e464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e466:	1ad3      	subs	r3, r2, r3
 800e468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d902      	bls.n	800e474 <HAL_SD_WriteBlocks+0x1ec>
 800e46e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e470:	2b00      	cmp	r3, #0
 800e472:	d112      	bne.n	800e49a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a47      	ldr	r2, [pc, #284]	; (800e598 <HAL_SD_WriteBlocks+0x310>)
 800e47a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e482:	431a      	orrs	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2200      	movs	r2, #0
 800e494:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800e496:	2303      	movs	r3, #3
 800e498:	e092      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d092      	beq.n	800e3ce <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d022      	beq.n	800e4fc <HAL_SD_WriteBlocks+0x274>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d91f      	bls.n	800e4fc <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c0:	2b03      	cmp	r3, #3
 800e4c2:	d01b      	beq.n	800e4fc <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f004 f857 	bl	801257c <SDMMC_CmdStopTransfer>
 800e4ce:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800e4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d012      	beq.n	800e4fc <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a2f      	ldr	r2, [pc, #188]	; (800e598 <HAL_SD_WriteBlocks+0x310>)
 800e4dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4e4:	431a      	orrs	r2, r3
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	e061      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e502:	f003 0308 	and.w	r3, r3, #8
 800e506:	2b00      	cmp	r3, #0
 800e508:	d012      	beq.n	800e530 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4a22      	ldr	r2, [pc, #136]	; (800e598 <HAL_SD_WriteBlocks+0x310>)
 800e510:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e516:	f043 0208 	orr.w	r2, r3, #8
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2201      	movs	r2, #1
 800e522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e52c:	2301      	movs	r3, #1
 800e52e:	e047      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e536:	f003 0302 	and.w	r3, r3, #2
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d012      	beq.n	800e564 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4a15      	ldr	r2, [pc, #84]	; (800e598 <HAL_SD_WriteBlocks+0x310>)
 800e544:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54a:	f043 0202 	orr.w	r2, r3, #2
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2201      	movs	r2, #1
 800e556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2200      	movs	r2, #0
 800e55e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e560:	2301      	movs	r3, #1
 800e562:	e02d      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e56a:	f003 0310 	and.w	r3, r3, #16
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d014      	beq.n	800e59c <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a08      	ldr	r2, [pc, #32]	; (800e598 <HAL_SD_WriteBlocks+0x310>)
 800e578:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e57e:	f043 0210 	orr.w	r2, r3, #16
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2201      	movs	r2, #1
 800e58a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2200      	movs	r2, #0
 800e592:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	e013      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
 800e598:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f240 523a 	movw	r2, #1338	; 0x53a
 800e5a4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	e006      	b.n	800e5c0 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e5be:	2301      	movs	r3, #1
  }
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3748      	adds	r7, #72	; 0x48
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d008      	beq.n	800e5f6 <HAL_SD_IRQHandler+0x2e>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f003 0308 	and.w	r3, r3, #8
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d003      	beq.n	800e5f6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 ff26 	bl	800f440 <SD_Read_IT>
 800e5f4:	e153      	b.n	800e89e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 808d 	beq.w	800e720 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e60e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	4ba3      	ldr	r3, [pc, #652]	; (800e8a8 <HAL_SD_IRQHandler+0x2e0>)
 800e61c:	400b      	ands	r3, r1
 800e61e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f022 0201 	bic.w	r2, r2, #1
 800e62e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f003 0308 	and.w	r3, r3, #8
 800e636:	2b00      	cmp	r3, #0
 800e638:	d039      	beq.n	800e6ae <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f003 0302 	and.w	r3, r3, #2
 800e640:	2b00      	cmp	r3, #0
 800e642:	d104      	bne.n	800e64e <HAL_SD_IRQHandler+0x86>
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f003 0320 	and.w	r3, r3, #32
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d011      	beq.n	800e672 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4618      	mov	r0, r3
 800e654:	f003 ff92 	bl	801257c <SDMMC_CmdStopTransfer>
 800e658:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d008      	beq.n	800e672 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	431a      	orrs	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f000 f921 	bl	800e8b4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f240 523a 	movw	r2, #1338	; 0x53a
 800e67a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d104      	bne.n	800e69e <HAL_SD_IRQHandler+0xd6>
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f003 0302 	and.w	r3, r3, #2
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d003      	beq.n	800e6a6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f008 fac6 	bl	8016c30 <HAL_SD_RxCpltCallback>
 800e6a4:	e0fb      	b.n	800e89e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f008 fab8 	bl	8016c1c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e6ac:	e0f7      	b.n	800e89e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 80f2 	beq.w	800e89e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f003 0320 	and.w	r3, r3, #32
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d011      	beq.n	800e6e8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f003 ff57 	bl	801257c <SDMMC_CmdStopTransfer>
 800e6ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d008      	beq.n	800e6e8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	431a      	orrs	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 f8e6 	bl	800e8b4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f003 0301 	and.w	r3, r3, #1
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f040 80d5 	bne.w	800e89e <HAL_SD_IRQHandler+0x2d6>
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f003 0302 	and.w	r3, r3, #2
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f040 80cf 	bne.w	800e89e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f022 0208 	bic.w	r2, r2, #8
 800e70e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2201      	movs	r2, #1
 800e714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f008 fa7f 	bl	8016c1c <HAL_SD_TxCpltCallback>
}
 800e71e:	e0be      	b.n	800e89e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d008      	beq.n	800e740 <HAL_SD_IRQHandler+0x178>
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f003 0308 	and.w	r3, r3, #8
 800e734:	2b00      	cmp	r3, #0
 800e736:	d003      	beq.n	800e740 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fed2 	bl	800f4e2 <SD_Write_IT>
 800e73e:	e0ae      	b.n	800e89e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e746:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f000 80a7 	beq.w	800e89e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e756:	f003 0302 	and.w	r3, r3, #2
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d005      	beq.n	800e76a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e762:	f043 0202 	orr.w	r2, r3, #2
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e770:	f003 0308 	and.w	r3, r3, #8
 800e774:	2b00      	cmp	r3, #0
 800e776:	d005      	beq.n	800e784 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e77c:	f043 0208 	orr.w	r2, r3, #8
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e78a:	f003 0320 	and.w	r3, r3, #32
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d005      	beq.n	800e79e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e796:	f043 0220 	orr.w	r2, r3, #32
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a4:	f003 0310 	and.w	r3, r3, #16
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d005      	beq.n	800e7b8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b0:	f043 0210 	orr.w	r2, r3, #16
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f240 523a 	movw	r2, #1338	; 0x53a
 800e7c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e7d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f003 fed0 	bl	801257c <SDMMC_CmdStopTransfer>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e2:	431a      	orrs	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f003 0308 	and.w	r3, r3, #8
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00a      	beq.n	800e808 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 f857 	bl	800e8b4 <HAL_SD_ErrorCallback>
}
 800e806:	e04a      	b.n	800e89e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d045      	beq.n	800e89e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f003 0310 	and.w	r3, r3, #16
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d104      	bne.n	800e826 <HAL_SD_IRQHandler+0x25e>
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f003 0320 	and.w	r3, r3, #32
 800e822:	2b00      	cmp	r3, #0
 800e824:	d011      	beq.n	800e84a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e82a:	4a20      	ldr	r2, [pc, #128]	; (800e8ac <HAL_SD_IRQHandler+0x2e4>)
 800e82c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e832:	4618      	mov	r0, r3
 800e834:	f7fa f82e 	bl	8008894 <HAL_DMA_Abort_IT>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d02f      	beq.n	800e89e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e842:	4618      	mov	r0, r3
 800e844:	f000 faac 	bl	800eda0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800e848:	e029      	b.n	800e89e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f003 0301 	and.w	r3, r3, #1
 800e850:	2b00      	cmp	r3, #0
 800e852:	d104      	bne.n	800e85e <HAL_SD_IRQHandler+0x296>
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f003 0302 	and.w	r3, r3, #2
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d011      	beq.n	800e882 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e862:	4a13      	ldr	r2, [pc, #76]	; (800e8b0 <HAL_SD_IRQHandler+0x2e8>)
 800e864:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fa f812 	bl	8008894 <HAL_DMA_Abort_IT>
 800e870:	4603      	mov	r3, r0
 800e872:	2b00      	cmp	r3, #0
 800e874:	d013      	beq.n	800e89e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 fac7 	bl	800ee0e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800e880:	e00d      	b.n	800e89e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2200      	movs	r2, #0
 800e886:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f008 f9b6 	bl	8016c08 <HAL_SD_AbortCallback>
}
 800e89c:	e7ff      	b.n	800e89e <HAL_SD_IRQHandler+0x2d6>
 800e89e:	bf00      	nop
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	ffff3ec5 	.word	0xffff3ec5
 800e8ac:	0800eda1 	.word	0x0800eda1
 800e8b0:	0800ee0f 	.word	0x0800ee0f

0800e8b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e8bc:	bf00      	nop
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8d6:	0f9b      	lsrs	r3, r3, #30
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8e2:	0e9b      	lsrs	r3, r3, #26
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	f003 030f 	and.w	r3, r3, #15
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8f4:	0e1b      	lsrs	r3, r3, #24
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	f003 0303 	and.w	r3, r3, #3
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e906:	0c1b      	lsrs	r3, r3, #16
 800e908:	b2da      	uxtb	r2, r3
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e912:	0a1b      	lsrs	r3, r3, #8
 800e914:	b2da      	uxtb	r2, r3
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e928:	0d1b      	lsrs	r3, r3, #20
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e934:	0c1b      	lsrs	r3, r3, #16
 800e936:	b2db      	uxtb	r3, r3
 800e938:	f003 030f 	and.w	r3, r3, #15
 800e93c:	b2da      	uxtb	r2, r3
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e946:	0bdb      	lsrs	r3, r3, #15
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	f003 0301 	and.w	r3, r3, #1
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e958:	0b9b      	lsrs	r3, r3, #14
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	f003 0301 	and.w	r3, r3, #1
 800e960:	b2da      	uxtb	r2, r3
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e96a:	0b5b      	lsrs	r3, r3, #13
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	f003 0301 	and.w	r3, r3, #1
 800e972:	b2da      	uxtb	r2, r3
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e97c:	0b1b      	lsrs	r3, r3, #12
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	f003 0301 	and.w	r3, r3, #1
 800e984:	b2da      	uxtb	r2, r3
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	2200      	movs	r2, #0
 800e98e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e994:	2b00      	cmp	r3, #0
 800e996:	d163      	bne.n	800ea60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e99c:	009a      	lsls	r2, r3, #2
 800e99e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e9a8:	0f92      	lsrs	r2, r2, #30
 800e9aa:	431a      	orrs	r2, r3
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9b4:	0edb      	lsrs	r3, r3, #27
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	f003 0307 	and.w	r3, r3, #7
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9c6:	0e1b      	lsrs	r3, r3, #24
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	f003 0307 	and.w	r3, r3, #7
 800e9ce:	b2da      	uxtb	r2, r3
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9d8:	0d5b      	lsrs	r3, r3, #21
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	f003 0307 	and.w	r3, r3, #7
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9ea:	0c9b      	lsrs	r3, r3, #18
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	f003 0307 	and.w	r3, r3, #7
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9fc:	0bdb      	lsrs	r3, r3, #15
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	f003 0307 	and.w	r3, r3, #7
 800ea04:	b2da      	uxtb	r2, r3
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	1c5a      	adds	r2, r3, #1
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	7e1b      	ldrb	r3, [r3, #24]
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	f003 0307 	and.w	r3, r3, #7
 800ea1e:	3302      	adds	r3, #2
 800ea20:	2201      	movs	r2, #1
 800ea22:	fa02 f303 	lsl.w	r3, r2, r3
 800ea26:	687a      	ldr	r2, [r7, #4]
 800ea28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ea2a:	fb02 f203 	mul.w	r2, r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	7a1b      	ldrb	r3, [r3, #8]
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	f003 030f 	and.w	r3, r3, #15
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	409a      	lsls	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ea4c:	0a52      	lsrs	r2, r2, #9
 800ea4e:	fb02 f203 	mul.w	r2, r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea5c:	661a      	str	r2, [r3, #96]	; 0x60
 800ea5e:	e031      	b.n	800eac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d11d      	bne.n	800eaa4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea6c:	041b      	lsls	r3, r3, #16
 800ea6e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea76:	0c1b      	lsrs	r3, r3, #16
 800ea78:	431a      	orrs	r2, r3
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	3301      	adds	r3, #1
 800ea84:	029a      	lsls	r2, r3, #10
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea98:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	661a      	str	r2, [r3, #96]	; 0x60
 800eaa2:	e00f      	b.n	800eac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a58      	ldr	r2, [pc, #352]	; (800ec0c <HAL_SD_GetCardCSD+0x344>)
 800eaaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	e09d      	b.n	800ec00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac8:	0b9b      	lsrs	r3, r3, #14
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	f003 0301 	and.w	r3, r3, #1
 800ead0:	b2da      	uxtb	r2, r3
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eada:	09db      	lsrs	r3, r3, #7
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaf2:	b2da      	uxtb	r2, r3
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eafc:	0fdb      	lsrs	r3, r3, #31
 800eafe:	b2da      	uxtb	r2, r3
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb08:	0f5b      	lsrs	r3, r3, #29
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	f003 0303 	and.w	r3, r3, #3
 800eb10:	b2da      	uxtb	r2, r3
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb1a:	0e9b      	lsrs	r3, r3, #26
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	f003 0307 	and.w	r3, r3, #7
 800eb22:	b2da      	uxtb	r2, r3
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb2c:	0d9b      	lsrs	r3, r3, #22
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	f003 030f 	and.w	r3, r3, #15
 800eb34:	b2da      	uxtb	r2, r3
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb3e:	0d5b      	lsrs	r3, r3, #21
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	f003 0301 	and.w	r3, r3, #1
 800eb46:	b2da      	uxtb	r2, r3
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb5a:	0c1b      	lsrs	r3, r3, #16
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	f003 0301 	and.w	r3, r3, #1
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb6e:	0bdb      	lsrs	r3, r3, #15
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	f003 0301 	and.w	r3, r3, #1
 800eb76:	b2da      	uxtb	r2, r3
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb82:	0b9b      	lsrs	r3, r3, #14
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	f003 0301 	and.w	r3, r3, #1
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb96:	0b5b      	lsrs	r3, r3, #13
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	f003 0301 	and.w	r3, r3, #1
 800eb9e:	b2da      	uxtb	r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebaa:	0b1b      	lsrs	r3, r3, #12
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	b2da      	uxtb	r2, r3
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebbe:	0a9b      	lsrs	r3, r3, #10
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	f003 0303 	and.w	r3, r3, #3
 800ebc6:	b2da      	uxtb	r2, r3
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebd2:	0a1b      	lsrs	r3, r3, #8
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	f003 0303 	and.w	r3, r3, #3
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebe6:	085b      	lsrs	r3, r3, #1
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebee:	b2da      	uxtb	r2, r3
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ebfe:	2300      	movs	r3, #0
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr
 800ec0c:	004005ff 	.word	0x004005ff

0800ec10 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	370c      	adds	r7, #12
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ec68:	b5b0      	push	{r4, r5, r7, lr}
 800ec6a:	b08e      	sub	sp, #56	; 0x38
 800ec6c:	af04      	add	r7, sp, #16
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2203      	movs	r2, #3
 800ec76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec7e:	2b03      	cmp	r3, #3
 800ec80:	d02e      	beq.n	800ece0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec88:	d106      	bne.n	800ec98 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec8e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	639a      	str	r2, [r3, #56]	; 0x38
 800ec96:	e029      	b.n	800ecec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec9e:	d10a      	bne.n	800ecb6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 fa6d 	bl	800f180 <SD_WideBus_Enable>
 800eca6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	431a      	orrs	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	639a      	str	r2, [r3, #56]	; 0x38
 800ecb4:	e01a      	b.n	800ecec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d10a      	bne.n	800ecd2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 faaa 	bl	800f216 <SD_WideBus_Disable>
 800ecc2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecca:	431a      	orrs	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	639a      	str	r2, [r3, #56]	; 0x38
 800ecd0:	e00c      	b.n	800ecec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	639a      	str	r2, [r3, #56]	; 0x38
 800ecde:	e005      	b.n	800ecec <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d009      	beq.n	800ed08 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a18      	ldr	r2, [pc, #96]	; (800ed5c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ecfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ed04:	2301      	movs	r3, #1
 800ed06:	e024      	b.n	800ed52 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	695b      	ldr	r3, [r3, #20]
 800ed22:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	699b      	ldr	r3, [r3, #24]
 800ed28:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681d      	ldr	r5, [r3, #0]
 800ed2e:	466c      	mov	r4, sp
 800ed30:	f107 0318 	add.w	r3, r7, #24
 800ed34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ed3c:	f107 030c 	add.w	r3, r7, #12
 800ed40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed42:	4628      	mov	r0, r5
 800ed44:	f003 fa92 	bl	801226c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3728      	adds	r7, #40	; 0x28
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bdb0      	pop	{r4, r5, r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	004005ff 	.word	0x004005ff

0800ed60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ed6c:	f107 030c 	add.w	r3, r7, #12
 800ed70:	4619      	mov	r1, r3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f9dc 	bl	800f130 <SD_SendStatus>
 800ed78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d005      	beq.n	800ed8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	431a      	orrs	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	0a5b      	lsrs	r3, r3, #9
 800ed90:	f003 030f 	and.w	r3, r3, #15
 800ed94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ed96:	693b      	ldr	r3, [r7, #16]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3718      	adds	r7, #24
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edac:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f240 523a 	movw	r2, #1338	; 0x53a
 800edb6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f7ff ffd1 	bl	800ed60 <HAL_SD_GetCardState>
 800edbe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2200      	movs	r2, #0
 800edcc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	2b06      	cmp	r3, #6
 800edd2:	d002      	beq.n	800edda <SD_DMATxAbort+0x3a>
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	2b05      	cmp	r3, #5
 800edd8:	d10a      	bne.n	800edf0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4618      	mov	r0, r3
 800ede0:	f003 fbcc 	bl	801257c <SDMMC_CmdStopTransfer>
 800ede4:	4602      	mov	r2, r0
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edea:	431a      	orrs	r2, r3
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d103      	bne.n	800ee00 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f007 ff05 	bl	8016c08 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800edfe:	e002      	b.n	800ee06 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f7ff fd57 	bl	800e8b4 <HAL_SD_ErrorCallback>
}
 800ee06:	bf00      	nop
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b084      	sub	sp, #16
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee1a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f240 523a 	movw	r2, #1338	; 0x53a
 800ee24:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f7ff ff9a 	bl	800ed60 <HAL_SD_GetCardState>
 800ee2c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	2b06      	cmp	r3, #6
 800ee40:	d002      	beq.n	800ee48 <SD_DMARxAbort+0x3a>
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	2b05      	cmp	r3, #5
 800ee46:	d10a      	bne.n	800ee5e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f003 fb95 	bl	801257c <SDMMC_CmdStopTransfer>
 800ee52:	4602      	mov	r2, r0
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee58:	431a      	orrs	r2, r3
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d103      	bne.n	800ee6e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f007 fece 	bl	8016c08 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ee6c:	e002      	b.n	800ee74 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f7ff fd20 	bl	800e8b4 <HAL_SD_ErrorCallback>
}
 800ee74:	bf00      	nop
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ee7c:	b5b0      	push	{r4, r5, r7, lr}
 800ee7e:	b094      	sub	sp, #80	; 0x50
 800ee80:	af04      	add	r7, sp, #16
 800ee82:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ee84:	2301      	movs	r3, #1
 800ee86:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f003 fa46 	bl	801231e <SDMMC_GetPowerState>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d102      	bne.n	800ee9e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ee98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ee9c:	e0b6      	b.n	800f00c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eea2:	2b03      	cmp	r3, #3
 800eea4:	d02f      	beq.n	800ef06 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f003 fc71 	bl	8012792 <SDMMC_CmdSendCID>
 800eeb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800eeb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d001      	beq.n	800eebc <SD_InitCard+0x40>
    {
      return errorstate;
 800eeb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeba:	e0a7      	b.n	800f00c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	2100      	movs	r1, #0
 800eec2:	4618      	mov	r0, r3
 800eec4:	f003 fa71 	bl	80123aa <SDMMC_GetResponse>
 800eec8:	4602      	mov	r2, r0
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2104      	movs	r1, #4
 800eed4:	4618      	mov	r0, r3
 800eed6:	f003 fa68 	bl	80123aa <SDMMC_GetResponse>
 800eeda:	4602      	mov	r2, r0
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2108      	movs	r1, #8
 800eee6:	4618      	mov	r0, r3
 800eee8:	f003 fa5f 	bl	80123aa <SDMMC_GetResponse>
 800eeec:	4602      	mov	r2, r0
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	210c      	movs	r1, #12
 800eef8:	4618      	mov	r0, r3
 800eefa:	f003 fa56 	bl	80123aa <SDMMC_GetResponse>
 800eefe:	4602      	mov	r2, r0
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d00d      	beq.n	800ef2a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f107 020e 	add.w	r2, r7, #14
 800ef16:	4611      	mov	r1, r2
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f003 fc77 	bl	801280c <SDMMC_CmdSetRelAdd>
 800ef1e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <SD_InitCard+0xae>
    {
      return errorstate;
 800ef26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef28:	e070      	b.n	800f00c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef2e:	2b03      	cmp	r3, #3
 800ef30:	d036      	beq.n	800efa0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ef32:	89fb      	ldrh	r3, [r7, #14]
 800ef34:	461a      	mov	r2, r3
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef42:	041b      	lsls	r3, r3, #16
 800ef44:	4619      	mov	r1, r3
 800ef46:	4610      	mov	r0, r2
 800ef48:	f003 fc41 	bl	80127ce <SDMMC_CmdSendCSD>
 800ef4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d001      	beq.n	800ef58 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ef54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef56:	e059      	b.n	800f00c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f003 fa23 	bl	80123aa <SDMMC_GetResponse>
 800ef64:	4602      	mov	r2, r0
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2104      	movs	r1, #4
 800ef70:	4618      	mov	r0, r3
 800ef72:	f003 fa1a 	bl	80123aa <SDMMC_GetResponse>
 800ef76:	4602      	mov	r2, r0
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	2108      	movs	r1, #8
 800ef82:	4618      	mov	r0, r3
 800ef84:	f003 fa11 	bl	80123aa <SDMMC_GetResponse>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	210c      	movs	r1, #12
 800ef94:	4618      	mov	r0, r3
 800ef96:	f003 fa08 	bl	80123aa <SDMMC_GetResponse>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2104      	movs	r1, #4
 800efa6:	4618      	mov	r0, r3
 800efa8:	f003 f9ff 	bl	80123aa <SDMMC_GetResponse>
 800efac:	4603      	mov	r3, r0
 800efae:	0d1a      	lsrs	r2, r3, #20
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800efb4:	f107 0310 	add.w	r3, r7, #16
 800efb8:	4619      	mov	r1, r3
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7ff fc84 	bl	800e8c8 <HAL_SD_GetCardCSD>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d002      	beq.n	800efcc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800efc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800efca:	e01f      	b.n	800f00c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6819      	ldr	r1, [r3, #0]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efd4:	041b      	lsls	r3, r3, #16
 800efd6:	461a      	mov	r2, r3
 800efd8:	f04f 0300 	mov.w	r3, #0
 800efdc:	4608      	mov	r0, r1
 800efde:	f003 faef 	bl	80125c0 <SDMMC_CmdSelDesel>
 800efe2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800efe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d001      	beq.n	800efee <SD_InitCard+0x172>
  {
    return errorstate;
 800efea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efec:	e00e      	b.n	800f00c <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681d      	ldr	r5, [r3, #0]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	466c      	mov	r4, sp
 800eff6:	f103 0210 	add.w	r2, r3, #16
 800effa:	ca07      	ldmia	r2, {r0, r1, r2}
 800effc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f000:	3304      	adds	r3, #4
 800f002:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f004:	4628      	mov	r0, r5
 800f006:	f003 f931 	bl	801226c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3740      	adds	r7, #64	; 0x40
 800f010:	46bd      	mov	sp, r7
 800f012:	bdb0      	pop	{r4, r5, r7, pc}

0800f014 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f01c:	2300      	movs	r3, #0
 800f01e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f020:	2300      	movs	r3, #0
 800f022:	617b      	str	r3, [r7, #20]
 800f024:	2300      	movs	r3, #0
 800f026:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f003 faea 	bl	8012606 <SDMMC_CmdGoIdleState>
 800f032:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d001      	beq.n	800f03e <SD_PowerON+0x2a>
  {
    return errorstate;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	e072      	b.n	800f124 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4618      	mov	r0, r3
 800f044:	f003 fafd 	bl	8012642 <SDMMC_CmdOperCond>
 800f048:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00d      	beq.n	800f06c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f003 fad3 	bl	8012606 <SDMMC_CmdGoIdleState>
 800f060:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d004      	beq.n	800f072 <SD_PowerON+0x5e>
    {
      return errorstate;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	e05b      	b.n	800f124 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2201      	movs	r2, #1
 800f070:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f076:	2b01      	cmp	r3, #1
 800f078:	d137      	bne.n	800f0ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2100      	movs	r1, #0
 800f080:	4618      	mov	r0, r3
 800f082:	f003 fafd 	bl	8012680 <SDMMC_CmdAppCommand>
 800f086:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d02d      	beq.n	800f0ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f08e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f092:	e047      	b.n	800f124 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2100      	movs	r1, #0
 800f09a:	4618      	mov	r0, r3
 800f09c:	f003 faf0 	bl	8012680 <SDMMC_CmdAppCommand>
 800f0a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d001      	beq.n	800f0ac <SD_PowerON+0x98>
    {
      return errorstate;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	e03b      	b.n	800f124 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	491e      	ldr	r1, [pc, #120]	; (800f12c <SD_PowerON+0x118>)
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f003 fb06 	bl	80126c4 <SDMMC_CmdAppOperCommand>
 800f0b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f0c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0c4:	e02e      	b.n	800f124 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f003 f96c 	bl	80123aa <SDMMC_GetResponse>
 800f0d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	0fdb      	lsrs	r3, r3, #31
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d101      	bne.n	800f0e0 <SD_PowerON+0xcc>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e000      	b.n	800f0e2 <SD_PowerON+0xce>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	613b      	str	r3, [r7, #16]

    count++;
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d802      	bhi.n	800f0fa <SD_PowerON+0xe6>
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d0cc      	beq.n	800f094 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f100:	4293      	cmp	r3, r2
 800f102:	d902      	bls.n	800f10a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f108:	e00c      	b.n	800f124 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f110:	2b00      	cmp	r3, #0
 800f112:	d003      	beq.n	800f11c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2201      	movs	r2, #1
 800f118:	645a      	str	r2, [r3, #68]	; 0x44
 800f11a:	e002      	b.n	800f122 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f122:	2300      	movs	r3, #0
}
 800f124:	4618      	mov	r0, r3
 800f126:	3718      	adds	r7, #24
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	c1100000 	.word	0xc1100000

0800f130 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f140:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f144:	e018      	b.n	800f178 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f14e:	041b      	lsls	r3, r3, #16
 800f150:	4619      	mov	r1, r3
 800f152:	4610      	mov	r0, r2
 800f154:	f003 fb7b 	bl	801284e <SDMMC_CmdSendStatus>
 800f158:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	e009      	b.n	800f178 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2100      	movs	r1, #0
 800f16a:	4618      	mov	r0, r3
 800f16c:	f003 f91d 	bl	80123aa <SDMMC_GetResponse>
 800f170:	4602      	mov	r2, r0
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f176:	2300      	movs	r3, #0
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3710      	adds	r7, #16
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f188:	2300      	movs	r3, #0
 800f18a:	60fb      	str	r3, [r7, #12]
 800f18c:	2300      	movs	r3, #0
 800f18e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2100      	movs	r1, #0
 800f196:	4618      	mov	r0, r3
 800f198:	f003 f907 	bl	80123aa <SDMMC_GetResponse>
 800f19c:	4603      	mov	r3, r0
 800f19e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1a6:	d102      	bne.n	800f1ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f1a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f1ac:	e02f      	b.n	800f20e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f1ae:	f107 030c 	add.w	r3, r7, #12
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 f879 	bl	800f2ac <SD_FindSCR>
 800f1ba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	e023      	b.n	800f20e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d01c      	beq.n	800f20a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1d8:	041b      	lsls	r3, r3, #16
 800f1da:	4619      	mov	r1, r3
 800f1dc:	4610      	mov	r0, r2
 800f1de:	f003 fa4f 	bl	8012680 <SDMMC_CmdAppCommand>
 800f1e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d001      	beq.n	800f1ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	e00f      	b.n	800f20e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2102      	movs	r1, #2
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f003 fa89 	bl	801270c <SDMMC_CmdBusWidth>
 800f1fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d001      	beq.n	800f206 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	e003      	b.n	800f20e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f206:	2300      	movs	r3, #0
 800f208:	e001      	b.n	800f20e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f20a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3718      	adds	r7, #24
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b086      	sub	sp, #24
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f21e:	2300      	movs	r3, #0
 800f220:	60fb      	str	r3, [r7, #12]
 800f222:	2300      	movs	r3, #0
 800f224:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2100      	movs	r1, #0
 800f22c:	4618      	mov	r0, r3
 800f22e:	f003 f8bc 	bl	80123aa <SDMMC_GetResponse>
 800f232:	4603      	mov	r3, r0
 800f234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f23c:	d102      	bne.n	800f244 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f23e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f242:	e02f      	b.n	800f2a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f244:	f107 030c 	add.w	r3, r7, #12
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 f82e 	bl	800f2ac <SD_FindSCR>
 800f250:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d001      	beq.n	800f25c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	e023      	b.n	800f2a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f262:	2b00      	cmp	r3, #0
 800f264:	d01c      	beq.n	800f2a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f26e:	041b      	lsls	r3, r3, #16
 800f270:	4619      	mov	r1, r3
 800f272:	4610      	mov	r0, r2
 800f274:	f003 fa04 	bl	8012680 <SDMMC_CmdAppCommand>
 800f278:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d001      	beq.n	800f284 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	e00f      	b.n	800f2a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2100      	movs	r1, #0
 800f28a:	4618      	mov	r0, r3
 800f28c:	f003 fa3e 	bl	801270c <SDMMC_CmdBusWidth>
 800f290:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d001      	beq.n	800f29c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	e003      	b.n	800f2a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f29c:	2300      	movs	r3, #0
 800f29e:	e001      	b.n	800f2a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f2a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3718      	adds	r7, #24
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f2ac:	b590      	push	{r4, r7, lr}
 800f2ae:	b08f      	sub	sp, #60	; 0x3c
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f2b6:	f7f9 f89d 	bl	80083f4 <HAL_GetTick>
 800f2ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	60bb      	str	r3, [r7, #8]
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2108      	movs	r1, #8
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f003 f8a8 	bl	8012428 <SDMMC_CmdBlockLength>
 800f2d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d001      	beq.n	800f2e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e2:	e0a9      	b.n	800f438 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2ec:	041b      	lsls	r3, r3, #16
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	4610      	mov	r0, r2
 800f2f2:	f003 f9c5 	bl	8012680 <SDMMC_CmdAppCommand>
 800f2f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d001      	beq.n	800f302 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f300:	e09a      	b.n	800f438 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f302:	f04f 33ff 	mov.w	r3, #4294967295
 800f306:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f308:	2308      	movs	r3, #8
 800f30a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f30c:	2330      	movs	r3, #48	; 0x30
 800f30e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f310:	2302      	movs	r3, #2
 800f312:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f314:	2300      	movs	r3, #0
 800f316:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f318:	2301      	movs	r3, #1
 800f31a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f107 0210 	add.w	r2, r7, #16
 800f324:	4611      	mov	r1, r2
 800f326:	4618      	mov	r0, r3
 800f328:	f003 f852 	bl	80123d0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4618      	mov	r0, r3
 800f332:	f003 fa0d 	bl	8012750 <SDMMC_CmdSendSCR>
 800f336:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d022      	beq.n	800f384 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800f33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f340:	e07a      	b.n	800f438 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00e      	beq.n	800f36e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6819      	ldr	r1, [r3, #0]
 800f354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	f107 0208 	add.w	r2, r7, #8
 800f35c:	18d4      	adds	r4, r2, r3
 800f35e:	4608      	mov	r0, r1
 800f360:	f002 ffb0 	bl	80122c4 <SDMMC_ReadFIFO>
 800f364:	4603      	mov	r3, r0
 800f366:	6023      	str	r3, [r4, #0]
      index++;
 800f368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f36a:	3301      	adds	r3, #1
 800f36c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f36e:	f7f9 f841 	bl	80083f4 <HAL_GetTick>
 800f372:	4602      	mov	r2, r0
 800f374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f376:	1ad3      	subs	r3, r2, r3
 800f378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f37c:	d102      	bne.n	800f384 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f37e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f382:	e059      	b.n	800f438 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f38a:	f240 432a 	movw	r3, #1066	; 0x42a
 800f38e:	4013      	ands	r3, r2
 800f390:	2b00      	cmp	r3, #0
 800f392:	d0d6      	beq.n	800f342 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f39a:	f003 0308 	and.w	r3, r3, #8
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d005      	beq.n	800f3ae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2208      	movs	r2, #8
 800f3a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f3aa:	2308      	movs	r3, #8
 800f3ac:	e044      	b.n	800f438 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3b4:	f003 0302 	and.w	r3, r3, #2
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d005      	beq.n	800f3c8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2202      	movs	r2, #2
 800f3c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f3c4:	2302      	movs	r3, #2
 800f3c6:	e037      	b.n	800f438 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ce:	f003 0320 	and.w	r3, r3, #32
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d005      	beq.n	800f3e2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2220      	movs	r2, #32
 800f3dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f3de:	2320      	movs	r3, #32
 800f3e0:	e02a      	b.n	800f438 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f240 523a 	movw	r2, #1338	; 0x53a
 800f3ea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	061a      	lsls	r2, r3, #24
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	021b      	lsls	r3, r3, #8
 800f3f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	0a1b      	lsrs	r3, r3, #8
 800f3fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f402:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	0e1b      	lsrs	r3, r3, #24
 800f408:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40c:	601a      	str	r2, [r3, #0]
    scr++;
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	3304      	adds	r3, #4
 800f412:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	061a      	lsls	r2, r3, #24
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	021b      	lsls	r3, r3, #8
 800f41c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f420:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	0a1b      	lsrs	r3, r3, #8
 800f426:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f42a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	0e1b      	lsrs	r3, r3, #24
 800f430:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f434:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f436:	2300      	movs	r3, #0
}
 800f438:	4618      	mov	r0, r3
 800f43a:	373c      	adds	r7, #60	; 0x3c
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd90      	pop	{r4, r7, pc}

0800f440 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b086      	sub	sp, #24
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f44c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f452:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d03f      	beq.n	800f4da <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f45a:	2300      	movs	r3, #0
 800f45c:	617b      	str	r3, [r7, #20]
 800f45e:	e033      	b.n	800f4c8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4618      	mov	r0, r3
 800f466:	f002 ff2d 	bl	80122c4 <SDMMC_ReadFIFO>
 800f46a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	b2da      	uxtb	r2, r3
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3301      	adds	r3, #1
 800f478:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	3b01      	subs	r3, #1
 800f47e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	0a1b      	lsrs	r3, r3, #8
 800f484:	b2da      	uxtb	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	3301      	adds	r3, #1
 800f48e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	3b01      	subs	r3, #1
 800f494:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	0c1b      	lsrs	r3, r3, #16
 800f49a:	b2da      	uxtb	r2, r3
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	0e1b      	lsrs	r3, r3, #24
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	617b      	str	r3, [r7, #20]
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	2b07      	cmp	r3, #7
 800f4cc:	d9c8      	bls.n	800f460 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	693a      	ldr	r2, [r7, #16]
 800f4d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f4da:	bf00      	nop
 800f4dc:	3718      	adds	r7, #24
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b086      	sub	sp, #24
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6a1b      	ldr	r3, [r3, #32]
 800f4ee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d043      	beq.n	800f584 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	617b      	str	r3, [r7, #20]
 800f500:	e037      	b.n	800f572 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	3301      	adds	r3, #1
 800f50c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	3b01      	subs	r3, #1
 800f512:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	021a      	lsls	r2, r3, #8
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	3301      	adds	r3, #1
 800f524:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	3b01      	subs	r3, #1
 800f52a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	041a      	lsls	r2, r3, #16
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	4313      	orrs	r3, r2
 800f536:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	3301      	adds	r3, #1
 800f53c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	3b01      	subs	r3, #1
 800f542:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	061a      	lsls	r2, r3, #24
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	4313      	orrs	r3, r2
 800f54e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3301      	adds	r3, #1
 800f554:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	3b01      	subs	r3, #1
 800f55a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f107 0208 	add.w	r2, r7, #8
 800f564:	4611      	mov	r1, r2
 800f566:	4618      	mov	r0, r3
 800f568:	f002 feb9 	bl	80122de <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	3301      	adds	r3, #1
 800f570:	617b      	str	r3, [r7, #20]
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	2b07      	cmp	r3, #7
 800f576:	d9c4      	bls.n	800f502 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	693a      	ldr	r2, [r7, #16]
 800f582:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f584:	bf00      	nop
 800f586:	3718      	adds	r7, #24
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d101      	bne.n	800f59e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f59a:	2301      	movs	r3, #1
 800f59c:	e084      	b.n	800f6a8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d106      	bne.n	800f5be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f7f7 fff7 	bl	80075ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2202      	movs	r2, #2
 800f5c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f5d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f5de:	d902      	bls.n	800f5e6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	60fb      	str	r3, [r7, #12]
 800f5e4:	e002      	b.n	800f5ec <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f5e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800f5f4:	d007      	beq.n	800f606 <HAL_SPI_Init+0x7a>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f5fe:	d002      	beq.n	800f606 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10b      	bne.n	800f626 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f616:	d903      	bls.n	800f620 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2202      	movs	r2, #2
 800f61c:	631a      	str	r2, [r3, #48]	; 0x30
 800f61e:	e002      	b.n	800f626 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2201      	movs	r2, #1
 800f624:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	685a      	ldr	r2, [r3, #4]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	689b      	ldr	r3, [r3, #8]
 800f62e:	431a      	orrs	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	691b      	ldr	r3, [r3, #16]
 800f634:	431a      	orrs	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	695b      	ldr	r3, [r3, #20]
 800f63a:	431a      	orrs	r2, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	699b      	ldr	r3, [r3, #24]
 800f640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f644:	431a      	orrs	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	69db      	ldr	r3, [r3, #28]
 800f64a:	431a      	orrs	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a1b      	ldr	r3, [r3, #32]
 800f650:	ea42 0103 	orr.w	r1, r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	430a      	orrs	r2, r1
 800f65e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	699b      	ldr	r3, [r3, #24]
 800f664:	0c1b      	lsrs	r3, r3, #16
 800f666:	f003 0204 	and.w	r2, r3, #4
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66e:	431a      	orrs	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f674:	431a      	orrs	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	ea42 0103 	orr.w	r1, r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	430a      	orrs	r2, r1
 800f686:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	69da      	ldr	r2, [r3, #28]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f696:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3710      	adds	r7, #16
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b088      	sub	sp, #32
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	603b      	str	r3, [r7, #0]
 800f6bc:	4613      	mov	r3, r2
 800f6be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d101      	bne.n	800f6d2 <HAL_SPI_Transmit+0x22>
 800f6ce:	2302      	movs	r3, #2
 800f6d0:	e150      	b.n	800f974 <HAL_SPI_Transmit+0x2c4>
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f6da:	f7f8 fe8b 	bl	80083f4 <HAL_GetTick>
 800f6de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f6e0:	88fb      	ldrh	r3, [r7, #6]
 800f6e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d002      	beq.n	800f6f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f6f0:	2302      	movs	r3, #2
 800f6f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f6f4:	e135      	b.n	800f962 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d002      	beq.n	800f702 <HAL_SPI_Transmit+0x52>
 800f6fc:	88fb      	ldrh	r3, [r7, #6]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d102      	bne.n	800f708 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f702:	2301      	movs	r3, #1
 800f704:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f706:	e12c      	b.n	800f962 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2203      	movs	r2, #3
 800f70c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2200      	movs	r2, #0
 800f714:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	88fa      	ldrh	r2, [r7, #6]
 800f720:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	88fa      	ldrh	r2, [r7, #6]
 800f726:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2200      	movs	r2, #0
 800f72c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2200      	movs	r2, #0
 800f732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2200      	movs	r2, #0
 800f742:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2200      	movs	r2, #0
 800f748:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f752:	d107      	bne.n	800f764 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f762:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f76e:	2b40      	cmp	r3, #64	; 0x40
 800f770:	d007      	beq.n	800f782 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f780:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f78a:	d94b      	bls.n	800f824 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d002      	beq.n	800f79a <HAL_SPI_Transmit+0xea>
 800f794:	8afb      	ldrh	r3, [r7, #22]
 800f796:	2b01      	cmp	r3, #1
 800f798:	d13e      	bne.n	800f818 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f79e:	881a      	ldrh	r2, [r3, #0]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7aa:	1c9a      	adds	r2, r3, #2
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f7be:	e02b      	b.n	800f818 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	f003 0302 	and.w	r3, r3, #2
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	d112      	bne.n	800f7f4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d2:	881a      	ldrh	r2, [r3, #0]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7de:	1c9a      	adds	r2, r3, #2
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f7f2:	e011      	b.n	800f818 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7f4:	f7f8 fdfe 	bl	80083f4 <HAL_GetTick>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	1ad3      	subs	r3, r2, r3
 800f7fe:	683a      	ldr	r2, [r7, #0]
 800f800:	429a      	cmp	r2, r3
 800f802:	d803      	bhi.n	800f80c <HAL_SPI_Transmit+0x15c>
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f80a:	d102      	bne.n	800f812 <HAL_SPI_Transmit+0x162>
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d102      	bne.n	800f818 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800f812:	2303      	movs	r3, #3
 800f814:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f816:	e0a4      	b.n	800f962 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d1ce      	bne.n	800f7c0 <HAL_SPI_Transmit+0x110>
 800f822:	e07c      	b.n	800f91e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <HAL_SPI_Transmit+0x182>
 800f82c:	8afb      	ldrh	r3, [r7, #22]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d170      	bne.n	800f914 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f836:	b29b      	uxth	r3, r3
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d912      	bls.n	800f862 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f840:	881a      	ldrh	r2, [r3, #0]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f84c:	1c9a      	adds	r2, r3, #2
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f856:	b29b      	uxth	r3, r3
 800f858:	3b02      	subs	r3, #2
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f860:	e058      	b.n	800f914 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	330c      	adds	r3, #12
 800f86c:	7812      	ldrb	r2, [r2, #0]
 800f86e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f874:	1c5a      	adds	r2, r3, #1
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f87e:	b29b      	uxth	r3, r3
 800f880:	3b01      	subs	r3, #1
 800f882:	b29a      	uxth	r2, r3
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800f888:	e044      	b.n	800f914 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	f003 0302 	and.w	r3, r3, #2
 800f894:	2b02      	cmp	r3, #2
 800f896:	d12b      	bne.n	800f8f0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d912      	bls.n	800f8c8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a6:	881a      	ldrh	r2, [r3, #0]
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8b2:	1c9a      	adds	r2, r3, #2
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	3b02      	subs	r3, #2
 800f8c0:	b29a      	uxth	r2, r3
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f8c6:	e025      	b.n	800f914 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	330c      	adds	r3, #12
 800f8d2:	7812      	ldrb	r2, [r2, #0]
 800f8d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8da:	1c5a      	adds	r2, r3, #1
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	3b01      	subs	r3, #1
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f8ee:	e011      	b.n	800f914 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f8f0:	f7f8 fd80 	bl	80083f4 <HAL_GetTick>
 800f8f4:	4602      	mov	r2, r0
 800f8f6:	69bb      	ldr	r3, [r7, #24]
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	683a      	ldr	r2, [r7, #0]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d803      	bhi.n	800f908 <HAL_SPI_Transmit+0x258>
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f906:	d102      	bne.n	800f90e <HAL_SPI_Transmit+0x25e>
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d102      	bne.n	800f914 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800f90e:	2303      	movs	r3, #3
 800f910:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f912:	e026      	b.n	800f962 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f918:	b29b      	uxth	r3, r3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1b5      	bne.n	800f88a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f91e:	69ba      	ldr	r2, [r7, #24]
 800f920:	6839      	ldr	r1, [r7, #0]
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	f001 f8c7 	bl	8010ab6 <SPI_EndRxTxTransaction>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d002      	beq.n	800f934 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2220      	movs	r2, #32
 800f932:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d10a      	bne.n	800f952 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f93c:	2300      	movs	r3, #0
 800f93e:	613b      	str	r3, [r7, #16]
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	613b      	str	r3, [r7, #16]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	613b      	str	r3, [r7, #16]
 800f950:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f956:	2b00      	cmp	r3, #0
 800f958:	d002      	beq.n	800f960 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	77fb      	strb	r3, [r7, #31]
 800f95e:	e000      	b.n	800f962 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800f960:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2201      	movs	r2, #1
 800f966:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2200      	movs	r2, #0
 800f96e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f972:	7ffb      	ldrb	r3, [r7, #31]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3720      	adds	r7, #32
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b08a      	sub	sp, #40	; 0x28
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f98a:	2301      	movs	r3, #1
 800f98c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f98e:	2300      	movs	r3, #0
 800f990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d101      	bne.n	800f9a2 <HAL_SPI_TransmitReceive+0x26>
 800f99e:	2302      	movs	r3, #2
 800f9a0:	e1fb      	b.n	800fd9a <HAL_SPI_TransmitReceive+0x41e>
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f9aa:	f7f8 fd23 	bl	80083f4 <HAL_GetTick>
 800f9ae:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f9b6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f9be:	887b      	ldrh	r3, [r7, #2]
 800f9c0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f9c2:	887b      	ldrh	r3, [r7, #2]
 800f9c4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f9c6:	7efb      	ldrb	r3, [r7, #27]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d00e      	beq.n	800f9ea <HAL_SPI_TransmitReceive+0x6e>
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f9d2:	d106      	bne.n	800f9e2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d102      	bne.n	800f9e2 <HAL_SPI_TransmitReceive+0x66>
 800f9dc:	7efb      	ldrb	r3, [r7, #27]
 800f9de:	2b04      	cmp	r3, #4
 800f9e0:	d003      	beq.n	800f9ea <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f9e8:	e1cd      	b.n	800fd86 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d005      	beq.n	800f9fc <HAL_SPI_TransmitReceive+0x80>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d002      	beq.n	800f9fc <HAL_SPI_TransmitReceive+0x80>
 800f9f6:	887b      	ldrh	r3, [r7, #2]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d103      	bne.n	800fa04 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800fa02:	e1c0      	b.n	800fd86 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	2b04      	cmp	r3, #4
 800fa0e:	d003      	beq.n	800fa18 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2205      	movs	r2, #5
 800fa14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	887a      	ldrh	r2, [r7, #2]
 800fa28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	887a      	ldrh	r2, [r7, #2]
 800fa30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	68ba      	ldr	r2, [r7, #8]
 800fa38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	887a      	ldrh	r2, [r7, #2]
 800fa3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	887a      	ldrh	r2, [r7, #2]
 800fa44:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fa5a:	d802      	bhi.n	800fa62 <HAL_SPI_TransmitReceive+0xe6>
 800fa5c:	8a3b      	ldrh	r3, [r7, #16]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d908      	bls.n	800fa74 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fa70:	605a      	str	r2, [r3, #4]
 800fa72:	e007      	b.n	800fa84 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	685a      	ldr	r2, [r3, #4]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fa82:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa8e:	2b40      	cmp	r3, #64	; 0x40
 800fa90:	d007      	beq.n	800faa2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800faa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	68db      	ldr	r3, [r3, #12]
 800faa6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800faaa:	d97c      	bls.n	800fba6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d002      	beq.n	800faba <HAL_SPI_TransmitReceive+0x13e>
 800fab4:	8a7b      	ldrh	r3, [r7, #18]
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d169      	bne.n	800fb8e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fabe:	881a      	ldrh	r2, [r3, #0]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faca:	1c9a      	adds	r2, r3, #2
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	3b01      	subs	r3, #1
 800fad8:	b29a      	uxth	r2, r3
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fade:	e056      	b.n	800fb8e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	f003 0302 	and.w	r3, r3, #2
 800faea:	2b02      	cmp	r3, #2
 800faec:	d11b      	bne.n	800fb26 <HAL_SPI_TransmitReceive+0x1aa>
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d016      	beq.n	800fb26 <HAL_SPI_TransmitReceive+0x1aa>
 800faf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d113      	bne.n	800fb26 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb02:	881a      	ldrh	r2, [r3, #0]
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb0e:	1c9a      	adds	r2, r3, #2
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	b29a      	uxth	r2, r3
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fb22:	2300      	movs	r3, #0
 800fb24:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	f003 0301 	and.w	r3, r3, #1
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d11c      	bne.n	800fb6e <HAL_SPI_TransmitReceive+0x1f2>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d016      	beq.n	800fb6e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	68da      	ldr	r2, [r3, #12]
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb4a:	b292      	uxth	r2, r2
 800fb4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb52:	1c9a      	adds	r2, r3, #2
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	3b01      	subs	r3, #1
 800fb62:	b29a      	uxth	r2, r3
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fb6e:	f7f8 fc41 	bl	80083f4 <HAL_GetTick>
 800fb72:	4602      	mov	r2, r0
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	1ad3      	subs	r3, r2, r3
 800fb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d807      	bhi.n	800fb8e <HAL_SPI_TransmitReceive+0x212>
 800fb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb84:	d003      	beq.n	800fb8e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800fb86:	2303      	movs	r3, #3
 800fb88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800fb8c:	e0fb      	b.n	800fd86 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1a3      	bne.n	800fae0 <HAL_SPI_TransmitReceive+0x164>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d19d      	bne.n	800fae0 <HAL_SPI_TransmitReceive+0x164>
 800fba4:	e0df      	b.n	800fd66 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <HAL_SPI_TransmitReceive+0x23a>
 800fbae:	8a7b      	ldrh	r3, [r7, #18]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	f040 80cb 	bne.w	800fd4c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d912      	bls.n	800fbe6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbc4:	881a      	ldrh	r2, [r3, #0]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd0:	1c9a      	adds	r2, r3, #2
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	3b02      	subs	r3, #2
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fbe4:	e0b2      	b.n	800fd4c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	330c      	adds	r3, #12
 800fbf0:	7812      	ldrb	r2, [r2, #0]
 800fbf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf8:	1c5a      	adds	r2, r3, #1
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	3b01      	subs	r3, #1
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fc0c:	e09e      	b.n	800fd4c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	f003 0302 	and.w	r3, r3, #2
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d134      	bne.n	800fc86 <HAL_SPI_TransmitReceive+0x30a>
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d02f      	beq.n	800fc86 <HAL_SPI_TransmitReceive+0x30a>
 800fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d12c      	bne.n	800fc86 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d912      	bls.n	800fc5c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc3a:	881a      	ldrh	r2, [r3, #0]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc46:	1c9a      	adds	r2, r3, #2
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	3b02      	subs	r3, #2
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fc5a:	e012      	b.n	800fc82 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	330c      	adds	r3, #12
 800fc66:	7812      	ldrb	r2, [r2, #0]
 800fc68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	3b01      	subs	r3, #1
 800fc7c:	b29a      	uxth	r2, r3
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fc82:	2300      	movs	r3, #0
 800fc84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	689b      	ldr	r3, [r3, #8]
 800fc8c:	f003 0301 	and.w	r3, r3, #1
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d148      	bne.n	800fd26 <HAL_SPI_TransmitReceive+0x3aa>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d042      	beq.n	800fd26 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d923      	bls.n	800fcf4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	68da      	ldr	r2, [r3, #12]
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcb6:	b292      	uxth	r2, r2
 800fcb8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcbe:	1c9a      	adds	r2, r3, #2
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	3b02      	subs	r3, #2
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d81f      	bhi.n	800fd22 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	685a      	ldr	r2, [r3, #4]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fcf0:	605a      	str	r2, [r3, #4]
 800fcf2:	e016      	b.n	800fd22 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f103 020c 	add.w	r2, r3, #12
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd00:	7812      	ldrb	r2, [r2, #0]
 800fd02:	b2d2      	uxtb	r2, r2
 800fd04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd0a:	1c5a      	adds	r2, r3, #1
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	3b01      	subs	r3, #1
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fd22:	2301      	movs	r3, #1
 800fd24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fd26:	f7f8 fb65 	bl	80083f4 <HAL_GetTick>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	1ad3      	subs	r3, r2, r3
 800fd30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d803      	bhi.n	800fd3e <HAL_SPI_TransmitReceive+0x3c2>
 800fd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd3c:	d102      	bne.n	800fd44 <HAL_SPI_TransmitReceive+0x3c8>
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d103      	bne.n	800fd4c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800fd44:	2303      	movs	r3, #3
 800fd46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800fd4a:	e01c      	b.n	800fd86 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f47f af5b 	bne.w	800fc0e <HAL_SPI_TransmitReceive+0x292>
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fd5e:	b29b      	uxth	r3, r3
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f47f af54 	bne.w	800fc0e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fd66:	69fa      	ldr	r2, [r7, #28]
 800fd68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd6a:	68f8      	ldr	r0, [r7, #12]
 800fd6c:	f000 fea3 	bl	8010ab6 <SPI_EndRxTxTransaction>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d006      	beq.n	800fd84 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800fd76:	2301      	movs	r3, #1
 800fd78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2220      	movs	r2, #32
 800fd80:	661a      	str	r2, [r3, #96]	; 0x60
 800fd82:	e000      	b.n	800fd86 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800fd84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800fd96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3728      	adds	r7, #40	; 0x28
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
	...

0800fda4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b087      	sub	sp, #28
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
 800fdb0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d101      	bne.n	800fdc4 <HAL_SPI_TransmitReceive_IT+0x20>
 800fdc0:	2302      	movs	r3, #2
 800fdc2:	e091      	b.n	800fee8 <HAL_SPI_TransmitReceive_IT+0x144>
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fdd2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fdda:	7dbb      	ldrb	r3, [r7, #22]
 800fddc:	2b01      	cmp	r3, #1
 800fdde:	d00d      	beq.n	800fdfc <HAL_SPI_TransmitReceive_IT+0x58>
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fde6:	d106      	bne.n	800fdf6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d102      	bne.n	800fdf6 <HAL_SPI_TransmitReceive_IT+0x52>
 800fdf0:	7dbb      	ldrb	r3, [r7, #22]
 800fdf2:	2b04      	cmp	r3, #4
 800fdf4:	d002      	beq.n	800fdfc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800fdf6:	2302      	movs	r3, #2
 800fdf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fdfa:	e070      	b.n	800fede <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d005      	beq.n	800fe0e <HAL_SPI_TransmitReceive_IT+0x6a>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d002      	beq.n	800fe0e <HAL_SPI_TransmitReceive_IT+0x6a>
 800fe08:	887b      	ldrh	r3, [r7, #2]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d102      	bne.n	800fe14 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	75fb      	strb	r3, [r7, #23]
    goto error;
 800fe12:	e064      	b.n	800fede <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	2b04      	cmp	r3, #4
 800fe1e:	d003      	beq.n	800fe28 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	2205      	movs	r2, #5
 800fe24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	68ba      	ldr	r2, [r7, #8]
 800fe32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	887a      	ldrh	r2, [r7, #2]
 800fe38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	887a      	ldrh	r2, [r7, #2]
 800fe3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	887a      	ldrh	r2, [r7, #2]
 800fe4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	887a      	ldrh	r2, [r7, #2]
 800fe52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fe5e:	d906      	bls.n	800fe6e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	4a24      	ldr	r2, [pc, #144]	; (800fef4 <HAL_SPI_TransmitReceive_IT+0x150>)
 800fe64:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	4a23      	ldr	r2, [pc, #140]	; (800fef8 <HAL_SPI_TransmitReceive_IT+0x154>)
 800fe6a:	651a      	str	r2, [r3, #80]	; 0x50
 800fe6c:	e005      	b.n	800fe7a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	4a22      	ldr	r2, [pc, #136]	; (800fefc <HAL_SPI_TransmitReceive_IT+0x158>)
 800fe72:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	4a22      	ldr	r2, [pc, #136]	; (800ff00 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800fe78:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fe82:	d802      	bhi.n	800fe8a <HAL_SPI_TransmitReceive_IT+0xe6>
 800fe84:	887b      	ldrh	r3, [r7, #2]
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d908      	bls.n	800fe9c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	685a      	ldr	r2, [r3, #4]
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fe98:	605a      	str	r2, [r3, #4]
 800fe9a:	e007      	b.n	800feac <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	685a      	ldr	r2, [r3, #4]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800feaa:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	685a      	ldr	r2, [r3, #4]
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800feba:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fec6:	2b40      	cmp	r3, #64	; 0x40
 800fec8:	d008      	beq.n	800fedc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fed8:	601a      	str	r2, [r3, #0]
 800feda:	e000      	b.n	800fede <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800fedc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2200      	movs	r2, #0
 800fee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800fee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fee8:	4618      	mov	r0, r3
 800feea:	371c      	adds	r7, #28
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr
 800fef4:	08010793 	.word	0x08010793
 800fef8:	080107f9 	.word	0x080107f9
 800fefc:	08010643 	.word	0x08010643
 800ff00:	08010701 	.word	0x08010701

0800ff04 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b086      	sub	sp, #24
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
 800ff10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ff12:	2300      	movs	r3, #0
 800ff14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d101      	bne.n	800ff24 <HAL_SPI_TransmitReceive_DMA+0x20>
 800ff20:	2302      	movs	r3, #2
 800ff22:	e16c      	b.n	80101fe <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ff32:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ff3a:	7dbb      	ldrb	r3, [r7, #22]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d00d      	beq.n	800ff5c <HAL_SPI_TransmitReceive_DMA+0x58>
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff46:	d106      	bne.n	800ff56 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d102      	bne.n	800ff56 <HAL_SPI_TransmitReceive_DMA+0x52>
 800ff50:	7dbb      	ldrb	r3, [r7, #22]
 800ff52:	2b04      	cmp	r3, #4
 800ff54:	d002      	beq.n	800ff5c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800ff56:	2302      	movs	r3, #2
 800ff58:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ff5a:	e14b      	b.n	80101f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d005      	beq.n	800ff6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d002      	beq.n	800ff6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ff68:	887b      	ldrh	r3, [r7, #2]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d102      	bne.n	800ff74 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ff72:	e13f      	b.n	80101f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	2b04      	cmp	r3, #4
 800ff7e:	d003      	beq.n	800ff88 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	2205      	movs	r2, #5
 800ff84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	887a      	ldrh	r2, [r7, #2]
 800ff98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	887a      	ldrh	r2, [r7, #2]
 800ff9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	887a      	ldrh	r2, [r7, #2]
 800ffaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	887a      	ldrh	r2, [r7, #2]
 800ffb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	685a      	ldr	r2, [r3, #4]
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800ffd0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ffda:	d908      	bls.n	800ffee <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	685a      	ldr	r2, [r3, #4]
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ffea:	605a      	str	r2, [r3, #4]
 800ffec:	e06f      	b.n	80100ce <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	685a      	ldr	r2, [r3, #4]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fffc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010002:	699b      	ldr	r3, [r3, #24]
 8010004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010008:	d126      	bne.n	8010058 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801000e:	f003 0301 	and.w	r3, r3, #1
 8010012:	2b00      	cmp	r3, #0
 8010014:	d10f      	bne.n	8010036 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	685a      	ldr	r2, [r3, #4]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010024:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801002a:	b29b      	uxth	r3, r3
 801002c:	085b      	lsrs	r3, r3, #1
 801002e:	b29a      	uxth	r2, r3
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010034:	e010      	b.n	8010058 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	685a      	ldr	r2, [r3, #4]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010044:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801004a:	b29b      	uxth	r3, r3
 801004c:	085b      	lsrs	r3, r3, #1
 801004e:	b29b      	uxth	r3, r3
 8010050:	3301      	adds	r3, #1
 8010052:	b29a      	uxth	r2, r3
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801005c:	699b      	ldr	r3, [r3, #24]
 801005e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010062:	d134      	bne.n	80100ce <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	685a      	ldr	r2, [r3, #4]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010072:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801007a:	b29b      	uxth	r3, r3
 801007c:	f003 0301 	and.w	r3, r3, #1
 8010080:	2b00      	cmp	r3, #0
 8010082:	d111      	bne.n	80100a8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	685a      	ldr	r2, [r3, #4]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010092:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801009a:	b29b      	uxth	r3, r3
 801009c:	085b      	lsrs	r3, r3, #1
 801009e:	b29a      	uxth	r2, r3
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80100a6:	e012      	b.n	80100ce <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	685a      	ldr	r2, [r3, #4]
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80100b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80100be:	b29b      	uxth	r3, r3
 80100c0:	085b      	lsrs	r3, r3, #1
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	3301      	adds	r3, #1
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	2b04      	cmp	r3, #4
 80100d8:	d108      	bne.n	80100ec <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100de:	4a4a      	ldr	r2, [pc, #296]	; (8010208 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80100e0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100e6:	4a49      	ldr	r2, [pc, #292]	; (801020c <HAL_SPI_TransmitReceive_DMA+0x308>)
 80100e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80100ea:	e007      	b.n	80100fc <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100f0:	4a47      	ldr	r2, [pc, #284]	; (8010210 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80100f2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100f8:	4a46      	ldr	r2, [pc, #280]	; (8010214 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80100fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010100:	4a45      	ldr	r2, [pc, #276]	; (8010218 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8010102:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010108:	2200      	movs	r2, #0
 801010a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	330c      	adds	r3, #12
 8010116:	4619      	mov	r1, r3
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801011c:	461a      	mov	r2, r3
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010124:	b29b      	uxth	r3, r3
 8010126:	f7f8 fb55 	bl	80087d4 <HAL_DMA_Start_IT>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00c      	beq.n	801014a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010134:	f043 0210 	orr.w	r2, r3, #16
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 801013c:	2301      	movs	r3, #1
 801013e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2201      	movs	r2, #1
 8010144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8010148:	e054      	b.n	80101f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	685a      	ldr	r2, [r3, #4]
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f042 0201 	orr.w	r2, r2, #1
 8010158:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801015e:	2200      	movs	r2, #0
 8010160:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010166:	2200      	movs	r2, #0
 8010168:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801016e:	2200      	movs	r2, #0
 8010170:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010176:	2200      	movs	r2, #0
 8010178:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010182:	4619      	mov	r1, r3
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	330c      	adds	r3, #12
 801018a:	461a      	mov	r2, r3
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010190:	b29b      	uxth	r3, r3
 8010192:	f7f8 fb1f 	bl	80087d4 <HAL_DMA_Start_IT>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d00c      	beq.n	80101b6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101a0:	f043 0210 	orr.w	r2, r3, #16
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2201      	movs	r2, #1
 80101b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80101b4:	e01e      	b.n	80101f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101c0:	2b40      	cmp	r3, #64	; 0x40
 80101c2:	d007      	beq.n	80101d4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	681a      	ldr	r2, [r3, #0]
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80101d2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	685a      	ldr	r2, [r3, #4]
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f042 0220 	orr.w	r2, r2, #32
 80101e2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	685a      	ldr	r2, [r3, #4]
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f042 0202 	orr.w	r2, r2, #2
 80101f2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2200      	movs	r2, #0
 80101f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80101fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3718      	adds	r7, #24
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	080105a1 	.word	0x080105a1
 801020c:	08010489 	.word	0x08010489
 8010210:	080105bd 	.word	0x080105bd
 8010214:	0801050f 	.word	0x0801050f
 8010218:	080105d9 	.word	0x080105d9

0801021c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b088      	sub	sp, #32
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	099b      	lsrs	r3, r3, #6
 8010238:	f003 0301 	and.w	r3, r3, #1
 801023c:	2b00      	cmp	r3, #0
 801023e:	d10f      	bne.n	8010260 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00a      	beq.n	8010260 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	099b      	lsrs	r3, r3, #6
 801024e:	f003 0301 	and.w	r3, r3, #1
 8010252:	2b00      	cmp	r3, #0
 8010254:	d004      	beq.n	8010260 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	4798      	blx	r3
    return;
 801025e:	e0d7      	b.n	8010410 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	085b      	lsrs	r3, r3, #1
 8010264:	f003 0301 	and.w	r3, r3, #1
 8010268:	2b00      	cmp	r3, #0
 801026a:	d00a      	beq.n	8010282 <HAL_SPI_IRQHandler+0x66>
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	09db      	lsrs	r3, r3, #7
 8010270:	f003 0301 	and.w	r3, r3, #1
 8010274:	2b00      	cmp	r3, #0
 8010276:	d004      	beq.n	8010282 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	4798      	blx	r3
    return;
 8010280:	e0c6      	b.n	8010410 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	095b      	lsrs	r3, r3, #5
 8010286:	f003 0301 	and.w	r3, r3, #1
 801028a:	2b00      	cmp	r3, #0
 801028c:	d10c      	bne.n	80102a8 <HAL_SPI_IRQHandler+0x8c>
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	099b      	lsrs	r3, r3, #6
 8010292:	f003 0301 	and.w	r3, r3, #1
 8010296:	2b00      	cmp	r3, #0
 8010298:	d106      	bne.n	80102a8 <HAL_SPI_IRQHandler+0x8c>
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	0a1b      	lsrs	r3, r3, #8
 801029e:	f003 0301 	and.w	r3, r3, #1
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	f000 80b4 	beq.w	8010410 <HAL_SPI_IRQHandler+0x1f4>
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	095b      	lsrs	r3, r3, #5
 80102ac:	f003 0301 	and.w	r3, r3, #1
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f000 80ad 	beq.w	8010410 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	099b      	lsrs	r3, r3, #6
 80102ba:	f003 0301 	and.w	r3, r3, #1
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d023      	beq.n	801030a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b03      	cmp	r3, #3
 80102cc:	d011      	beq.n	80102f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102d2:	f043 0204 	orr.w	r2, r3, #4
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80102da:	2300      	movs	r3, #0
 80102dc:	617b      	str	r3, [r7, #20]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	617b      	str	r3, [r7, #20]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	689b      	ldr	r3, [r3, #8]
 80102ec:	617b      	str	r3, [r7, #20]
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	e00b      	b.n	801030a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80102f2:	2300      	movs	r3, #0
 80102f4:	613b      	str	r3, [r7, #16]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	613b      	str	r3, [r7, #16]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	689b      	ldr	r3, [r3, #8]
 8010304:	613b      	str	r3, [r7, #16]
 8010306:	693b      	ldr	r3, [r7, #16]
        return;
 8010308:	e082      	b.n	8010410 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801030a:	69bb      	ldr	r3, [r7, #24]
 801030c:	095b      	lsrs	r3, r3, #5
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	d014      	beq.n	8010340 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801031a:	f043 0201 	orr.w	r2, r3, #1
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010322:	2300      	movs	r3, #0
 8010324:	60fb      	str	r3, [r7, #12]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	60fb      	str	r3, [r7, #12]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801033c:	601a      	str	r2, [r3, #0]
 801033e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	0a1b      	lsrs	r3, r3, #8
 8010344:	f003 0301 	and.w	r3, r3, #1
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00c      	beq.n	8010366 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010350:	f043 0208 	orr.w	r2, r3, #8
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010358:	2300      	movs	r3, #0
 801035a:	60bb      	str	r3, [r7, #8]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	689b      	ldr	r3, [r3, #8]
 8010362:	60bb      	str	r3, [r7, #8]
 8010364:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801036a:	2b00      	cmp	r3, #0
 801036c:	d04f      	beq.n	801040e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	685a      	ldr	r2, [r3, #4]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801037c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2201      	movs	r2, #1
 8010382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	f003 0302 	and.w	r3, r3, #2
 801038c:	2b00      	cmp	r3, #0
 801038e:	d104      	bne.n	801039a <HAL_SPI_IRQHandler+0x17e>
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	f003 0301 	and.w	r3, r3, #1
 8010396:	2b00      	cmp	r3, #0
 8010398:	d034      	beq.n	8010404 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	685a      	ldr	r2, [r3, #4]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f022 0203 	bic.w	r2, r2, #3
 80103a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d011      	beq.n	80103d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103b6:	4a18      	ldr	r2, [pc, #96]	; (8010418 <HAL_SPI_IRQHandler+0x1fc>)
 80103b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103be:	4618      	mov	r0, r3
 80103c0:	f7f8 fa68 	bl	8008894 <HAL_DMA_Abort_IT>
 80103c4:	4603      	mov	r3, r0
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d005      	beq.n	80103d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d016      	beq.n	801040c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103e2:	4a0d      	ldr	r2, [pc, #52]	; (8010418 <HAL_SPI_IRQHandler+0x1fc>)
 80103e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7f8 fa52 	bl	8008894 <HAL_DMA_Abort_IT>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d00a      	beq.n	801040c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8010402:	e003      	b.n	801040c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f000 f827 	bl	8010458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801040a:	e000      	b.n	801040e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801040c:	bf00      	nop
    return;
 801040e:	bf00      	nop
  }
}
 8010410:	3720      	adds	r7, #32
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	08010619 	.word	0x08010619

0801041c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010424:	bf00      	nop
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010430:	b480      	push	{r7}
 8010432:	b083      	sub	sp, #12
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8010438:	bf00      	nop
 801043a:	370c      	adds	r7, #12
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 801044c:	bf00      	nop
 801044e:	370c      	adds	r7, #12
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010460:	bf00      	nop
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801047a:	b2db      	uxtb	r3, r3
}
 801047c:	4618      	mov	r0, r3
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010494:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010496:	f7f7 ffad 	bl	80083f4 <HAL_GetTick>
 801049a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104aa:	d02a      	beq.n	8010502 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	685a      	ldr	r2, [r3, #4]
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f022 0220 	bic.w	r2, r2, #32
 80104ba:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	685a      	ldr	r2, [r3, #4]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f022 0203 	bic.w	r2, r2, #3
 80104ca:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80104cc:	68ba      	ldr	r2, [r7, #8]
 80104ce:	2164      	movs	r1, #100	; 0x64
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	f000 fa98 	bl	8010a06 <SPI_EndRxTransaction>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d002      	beq.n	80104e2 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2220      	movs	r2, #32
 80104e0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2200      	movs	r2, #0
 80104e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2201      	movs	r2, #1
 80104ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d003      	beq.n	8010502 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80104fa:	68f8      	ldr	r0, [r7, #12]
 80104fc:	f7ff ffac 	bl	8010458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010500:	e002      	b.n	8010508 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8010502:	68f8      	ldr	r0, [r7, #12]
 8010504:	f7ff ff8a 	bl	801041c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010508:	3710      	adds	r7, #16
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801050e:	b580      	push	{r7, lr}
 8010510:	b084      	sub	sp, #16
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801051a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801051c:	f7f7 ff6a 	bl	80083f4 <HAL_GetTick>
 8010520:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801052c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010530:	d030      	beq.n	8010594 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	685a      	ldr	r2, [r3, #4]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f022 0220 	bic.w	r2, r2, #32
 8010540:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010542:	68ba      	ldr	r2, [r7, #8]
 8010544:	2164      	movs	r1, #100	; 0x64
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	f000 fab5 	bl	8010ab6 <SPI_EndRxTxTransaction>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d005      	beq.n	801055e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010556:	f043 0220 	orr.w	r2, r3, #32
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	685a      	ldr	r2, [r3, #4]
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f022 0203 	bic.w	r2, r2, #3
 801056c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2200      	movs	r2, #0
 8010572:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2200      	movs	r2, #0
 8010578:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2201      	movs	r2, #1
 8010580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010588:	2b00      	cmp	r3, #0
 801058a:	d003      	beq.n	8010594 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801058c:	68f8      	ldr	r0, [r7, #12]
 801058e:	f7ff ff63 	bl	8010458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010592:	e002      	b.n	801059a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8010594:	68f8      	ldr	r0, [r7, #12]
 8010596:	f7f1 f993 	bl	80018c0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ac:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	f7ff ff3e 	bl	8010430 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80105b4:	bf00      	nop
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105c8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	f7ff ff3a 	bl	8010444 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80105d0:	bf00      	nop
 80105d2:	3710      	adds	r7, #16
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105e4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	685a      	ldr	r2, [r3, #4]
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f022 0203 	bic.w	r2, r2, #3
 80105f4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80105fa:	f043 0210 	orr.w	r2, r3, #16
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2201      	movs	r2, #1
 8010606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801060a:	68f8      	ldr	r0, [r7, #12]
 801060c:	f7ff ff24 	bl	8010458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010610:	bf00      	nop
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010624:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2200      	movs	r2, #0
 801062a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2200      	movs	r2, #0
 8010632:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010634:	68f8      	ldr	r0, [r7, #12]
 8010636:	f7ff ff0f 	bl	8010458 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801063a:	bf00      	nop
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b082      	sub	sp, #8
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010650:	b29b      	uxth	r3, r3
 8010652:	2b01      	cmp	r3, #1
 8010654:	d923      	bls.n	801069e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68da      	ldr	r2, [r3, #12]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010660:	b292      	uxth	r2, r2
 8010662:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010668:	1c9a      	adds	r2, r3, #2
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010674:	b29b      	uxth	r3, r3
 8010676:	3b02      	subs	r3, #2
 8010678:	b29a      	uxth	r2, r3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010686:	b29b      	uxth	r3, r3
 8010688:	2b01      	cmp	r3, #1
 801068a:	d11f      	bne.n	80106cc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801069a:	605a      	str	r2, [r3, #4]
 801069c:	e016      	b.n	80106cc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f103 020c 	add.w	r2, r3, #12
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106aa:	7812      	ldrb	r2, [r2, #0]
 80106ac:	b2d2      	uxtb	r2, r2
 80106ae:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106b4:	1c5a      	adds	r2, r3, #1
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	3b01      	subs	r3, #1
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10f      	bne.n	80106f8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	685a      	ldr	r2, [r3, #4]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80106e6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106ec:	b29b      	uxth	r3, r3
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d102      	bne.n	80106f8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 fa25 	bl	8010b42 <SPI_CloseRxTx_ISR>
    }
  }
}
 80106f8:	bf00      	nop
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801070c:	b29b      	uxth	r3, r3
 801070e:	2b01      	cmp	r3, #1
 8010710:	d912      	bls.n	8010738 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010716:	881a      	ldrh	r2, [r3, #0]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010722:	1c9a      	adds	r2, r3, #2
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801072c:	b29b      	uxth	r3, r3
 801072e:	3b02      	subs	r3, #2
 8010730:	b29a      	uxth	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010736:	e012      	b.n	801075e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	330c      	adds	r3, #12
 8010742:	7812      	ldrb	r2, [r2, #0]
 8010744:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801074a:	1c5a      	adds	r2, r3, #1
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010754:	b29b      	uxth	r3, r3
 8010756:	3b01      	subs	r3, #1
 8010758:	b29a      	uxth	r2, r3
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010762:	b29b      	uxth	r3, r3
 8010764:	2b00      	cmp	r3, #0
 8010766:	d110      	bne.n	801078a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	685a      	ldr	r2, [r3, #4]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010776:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801077e:	b29b      	uxth	r3, r3
 8010780:	2b00      	cmp	r3, #0
 8010782:	d102      	bne.n	801078a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 f9dc 	bl	8010b42 <SPI_CloseRxTx_ISR>
    }
  }
}
 801078a:	bf00      	nop
 801078c:	3708      	adds	r7, #8
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b082      	sub	sp, #8
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68da      	ldr	r2, [r3, #12]
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a4:	b292      	uxth	r2, r2
 80107a6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ac:	1c9a      	adds	r2, r3, #2
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	3b01      	subs	r3, #1
 80107bc:	b29a      	uxth	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d10f      	bne.n	80107f0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	685a      	ldr	r2, [r3, #4]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107de:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d102      	bne.n	80107f0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f000 f9a9 	bl	8010b42 <SPI_CloseRxTx_ISR>
    }
  }
}
 80107f0:	bf00      	nop
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010804:	881a      	ldrh	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010810:	1c9a      	adds	r2, r3, #2
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801081a:	b29b      	uxth	r3, r3
 801081c:	3b01      	subs	r3, #1
 801081e:	b29a      	uxth	r2, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010828:	b29b      	uxth	r3, r3
 801082a:	2b00      	cmp	r3, #0
 801082c:	d110      	bne.n	8010850 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	685a      	ldr	r2, [r3, #4]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801083c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010844:	b29b      	uxth	r3, r3
 8010846:	2b00      	cmp	r3, #0
 8010848:	d102      	bne.n	8010850 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 f979 	bl	8010b42 <SPI_CloseRxTx_ISR>
    }
  }
}
 8010850:	bf00      	nop
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b084      	sub	sp, #16
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	603b      	str	r3, [r7, #0]
 8010864:	4613      	mov	r3, r2
 8010866:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010868:	e04c      	b.n	8010904 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010870:	d048      	beq.n	8010904 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8010872:	f7f7 fdbf 	bl	80083f4 <HAL_GetTick>
 8010876:	4602      	mov	r2, r0
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	683a      	ldr	r2, [r7, #0]
 801087e:	429a      	cmp	r2, r3
 8010880:	d902      	bls.n	8010888 <SPI_WaitFlagStateUntilTimeout+0x30>
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d13d      	bne.n	8010904 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	685a      	ldr	r2, [r3, #4]
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010896:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80108a0:	d111      	bne.n	80108c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108aa:	d004      	beq.n	80108b6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108b4:	d107      	bne.n	80108c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80108ce:	d10f      	bne.n	80108f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80108de:	601a      	str	r2, [r3, #0]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80108ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2201      	movs	r2, #1
 80108f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010900:	2303      	movs	r3, #3
 8010902:	e00f      	b.n	8010924 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	689a      	ldr	r2, [r3, #8]
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	4013      	ands	r3, r2
 801090e:	68ba      	ldr	r2, [r7, #8]
 8010910:	429a      	cmp	r2, r3
 8010912:	bf0c      	ite	eq
 8010914:	2301      	moveq	r3, #1
 8010916:	2300      	movne	r3, #0
 8010918:	b2db      	uxtb	r3, r3
 801091a:	461a      	mov	r2, r3
 801091c:	79fb      	ldrb	r3, [r7, #7]
 801091e:	429a      	cmp	r2, r3
 8010920:	d1a3      	bne.n	801086a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8010922:	2300      	movs	r3, #0
}
 8010924:	4618      	mov	r0, r3
 8010926:	3710      	adds	r7, #16
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	607a      	str	r2, [r7, #4]
 8010938:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 801093a:	e057      	b.n	80109ec <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010942:	d106      	bne.n	8010952 <SPI_WaitFifoStateUntilTimeout+0x26>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d103      	bne.n	8010952 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	330c      	adds	r3, #12
 8010950:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010958:	d048      	beq.n	80109ec <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801095a:	f7f7 fd4b 	bl	80083f4 <HAL_GetTick>
 801095e:	4602      	mov	r2, r0
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	1ad3      	subs	r3, r2, r3
 8010964:	683a      	ldr	r2, [r7, #0]
 8010966:	429a      	cmp	r2, r3
 8010968:	d902      	bls.n	8010970 <SPI_WaitFifoStateUntilTimeout+0x44>
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d13d      	bne.n	80109ec <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	685a      	ldr	r2, [r3, #4]
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801097e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010988:	d111      	bne.n	80109ae <SPI_WaitFifoStateUntilTimeout+0x82>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010992:	d004      	beq.n	801099e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801099c:	d107      	bne.n	80109ae <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109b6:	d10f      	bne.n	80109d8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80109d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2201      	movs	r2, #1
 80109dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2200      	movs	r2, #0
 80109e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80109e8:	2303      	movs	r3, #3
 80109ea:	e008      	b.n	80109fe <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	689a      	ldr	r2, [r3, #8]
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	4013      	ands	r3, r2
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d19f      	bne.n	801093c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b086      	sub	sp, #24
 8010a0a:	af02      	add	r7, sp, #8
 8010a0c:	60f8      	str	r0, [r7, #12]
 8010a0e:	60b9      	str	r1, [r7, #8]
 8010a10:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010a1a:	d111      	bne.n	8010a40 <SPI_EndRxTransaction+0x3a>
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a24:	d004      	beq.n	8010a30 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	689b      	ldr	r3, [r3, #8]
 8010a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a2e:	d107      	bne.n	8010a40 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a3e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	9300      	str	r3, [sp, #0]
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	2200      	movs	r2, #0
 8010a48:	2180      	movs	r1, #128	; 0x80
 8010a4a:	68f8      	ldr	r0, [r7, #12]
 8010a4c:	f7ff ff04 	bl	8010858 <SPI_WaitFlagStateUntilTimeout>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d007      	beq.n	8010a66 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010a5a:	f043 0220 	orr.w	r2, r3, #32
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010a62:	2303      	movs	r3, #3
 8010a64:	e023      	b.n	8010aae <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010a6e:	d11d      	bne.n	8010aac <SPI_EndRxTransaction+0xa6>
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	689b      	ldr	r3, [r3, #8]
 8010a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a78:	d004      	beq.n	8010a84 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	689b      	ldr	r3, [r3, #8]
 8010a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a82:	d113      	bne.n	8010aac <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	9300      	str	r3, [sp, #0]
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f7ff ff4b 	bl	801092c <SPI_WaitFifoStateUntilTimeout>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d007      	beq.n	8010aac <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010aa0:	f043 0220 	orr.w	r2, r3, #32
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8010aa8:	2303      	movs	r3, #3
 8010aaa:	e000      	b.n	8010aae <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8010aac:	2300      	movs	r3, #0
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3710      	adds	r7, #16
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b086      	sub	sp, #24
 8010aba:	af02      	add	r7, sp, #8
 8010abc:	60f8      	str	r0, [r7, #12]
 8010abe:	60b9      	str	r1, [r7, #8]
 8010ac0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f7ff ff2c 	bl	801092c <SPI_WaitFifoStateUntilTimeout>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d007      	beq.n	8010aea <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ade:	f043 0220 	orr.w	r2, r3, #32
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010ae6:	2303      	movs	r3, #3
 8010ae8:	e027      	b.n	8010b3a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	2200      	movs	r2, #0
 8010af2:	2180      	movs	r1, #128	; 0x80
 8010af4:	68f8      	ldr	r0, [r7, #12]
 8010af6:	f7ff feaf 	bl	8010858 <SPI_WaitFlagStateUntilTimeout>
 8010afa:	4603      	mov	r3, r0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d007      	beq.n	8010b10 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b04:	f043 0220 	orr.w	r2, r3, #32
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010b0c:	2303      	movs	r3, #3
 8010b0e:	e014      	b.n	8010b3a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	9300      	str	r3, [sp, #0]
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	2200      	movs	r2, #0
 8010b18:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010b1c:	68f8      	ldr	r0, [r7, #12]
 8010b1e:	f7ff ff05 	bl	801092c <SPI_WaitFifoStateUntilTimeout>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d007      	beq.n	8010b38 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b2c:	f043 0220 	orr.w	r2, r3, #32
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010b34:	2303      	movs	r3, #3
 8010b36:	e000      	b.n	8010b3a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3710      	adds	r7, #16
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b084      	sub	sp, #16
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010b4a:	f7f7 fc53 	bl	80083f4 <HAL_GetTick>
 8010b4e:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	685a      	ldr	r2, [r3, #4]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f022 0220 	bic.w	r2, r2, #32
 8010b5e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	2164      	movs	r1, #100	; 0x64
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7ff ffa6 	bl	8010ab6 <SPI_EndRxTxTransaction>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d005      	beq.n	8010b7c <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b74:	f043 0220 	orr.w	r2, r3, #32
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d115      	bne.n	8010bb0 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	2b04      	cmp	r3, #4
 8010b8e:	d107      	bne.n	8010ba0 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2201      	movs	r2, #1
 8010b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f7ff fc3f 	bl	801041c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8010b9e:	e00e      	b.n	8010bbe <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f7f0 fe89 	bl	80018c0 <HAL_SPI_TxRxCpltCallback>
}
 8010bae:	e006      	b.n	8010bbe <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7ff fc4d 	bl	8010458 <HAL_SPI_ErrorCallback>
}
 8010bbe:	bf00      	nop
 8010bc0:	3710      	adds	r7, #16
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b082      	sub	sp, #8
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d101      	bne.n	8010bd8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	e01d      	b.n	8010c14 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d106      	bne.n	8010bf2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2200      	movs	r2, #0
 8010be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f7f6 fdff 	bl	80077f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2202      	movs	r2, #2
 8010bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	3304      	adds	r3, #4
 8010c02:	4619      	mov	r1, r3
 8010c04:	4610      	mov	r0, r2
 8010c06:	f000 f8f9 	bl	8010dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c12:	2300      	movs	r3, #0
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2202      	movs	r2, #2
 8010c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	689a      	ldr	r2, [r3, #8]
 8010c32:	4b0e      	ldr	r3, [pc, #56]	; (8010c6c <HAL_TIM_Base_Start+0x50>)
 8010c34:	4013      	ands	r3, r2
 8010c36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2b06      	cmp	r3, #6
 8010c3c:	d00b      	beq.n	8010c56 <HAL_TIM_Base_Start+0x3a>
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c44:	d007      	beq.n	8010c56 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f042 0201 	orr.w	r2, r2, #1
 8010c54:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2201      	movs	r2, #1
 8010c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8010c5e:	2300      	movs	r3, #0
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3714      	adds	r7, #20
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	00010007 	.word	0x00010007

08010c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d101      	bne.n	8010c88 <HAL_TIM_ConfigClockSource+0x18>
 8010c84:	2302      	movs	r3, #2
 8010c86:	e0b3      	b.n	8010df0 <HAL_TIM_ConfigClockSource+0x180>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2202      	movs	r2, #2
 8010c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010ca0:	68fa      	ldr	r2, [r7, #12]
 8010ca2:	4b55      	ldr	r3, [pc, #340]	; (8010df8 <HAL_TIM_ConfigClockSource+0x188>)
 8010ca4:	4013      	ands	r3, r2
 8010ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010cae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	68fa      	ldr	r2, [r7, #12]
 8010cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cc0:	d03e      	beq.n	8010d40 <HAL_TIM_ConfigClockSource+0xd0>
 8010cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cc6:	f200 8087 	bhi.w	8010dd8 <HAL_TIM_ConfigClockSource+0x168>
 8010cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cce:	f000 8085 	beq.w	8010ddc <HAL_TIM_ConfigClockSource+0x16c>
 8010cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cd6:	d87f      	bhi.n	8010dd8 <HAL_TIM_ConfigClockSource+0x168>
 8010cd8:	2b70      	cmp	r3, #112	; 0x70
 8010cda:	d01a      	beq.n	8010d12 <HAL_TIM_ConfigClockSource+0xa2>
 8010cdc:	2b70      	cmp	r3, #112	; 0x70
 8010cde:	d87b      	bhi.n	8010dd8 <HAL_TIM_ConfigClockSource+0x168>
 8010ce0:	2b60      	cmp	r3, #96	; 0x60
 8010ce2:	d050      	beq.n	8010d86 <HAL_TIM_ConfigClockSource+0x116>
 8010ce4:	2b60      	cmp	r3, #96	; 0x60
 8010ce6:	d877      	bhi.n	8010dd8 <HAL_TIM_ConfigClockSource+0x168>
 8010ce8:	2b50      	cmp	r3, #80	; 0x50
 8010cea:	d03c      	beq.n	8010d66 <HAL_TIM_ConfigClockSource+0xf6>
 8010cec:	2b50      	cmp	r3, #80	; 0x50
 8010cee:	d873      	bhi.n	8010dd8 <HAL_TIM_ConfigClockSource+0x168>
 8010cf0:	2b40      	cmp	r3, #64	; 0x40
 8010cf2:	d058      	beq.n	8010da6 <HAL_TIM_ConfigClockSource+0x136>
 8010cf4:	2b40      	cmp	r3, #64	; 0x40
 8010cf6:	d86f      	bhi.n	8010dd8 <HAL_TIM_ConfigClockSource+0x168>
 8010cf8:	2b30      	cmp	r3, #48	; 0x30
 8010cfa:	d064      	beq.n	8010dc6 <HAL_TIM_ConfigClockSource+0x156>
 8010cfc:	2b30      	cmp	r3, #48	; 0x30
 8010cfe:	d86b      	bhi.n	8010dd8 <HAL_TIM_ConfigClockSource+0x168>
 8010d00:	2b20      	cmp	r3, #32
 8010d02:	d060      	beq.n	8010dc6 <HAL_TIM_ConfigClockSource+0x156>
 8010d04:	2b20      	cmp	r3, #32
 8010d06:	d867      	bhi.n	8010dd8 <HAL_TIM_ConfigClockSource+0x168>
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d05c      	beq.n	8010dc6 <HAL_TIM_ConfigClockSource+0x156>
 8010d0c:	2b10      	cmp	r3, #16
 8010d0e:	d05a      	beq.n	8010dc6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8010d10:	e062      	b.n	8010dd8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6818      	ldr	r0, [r3, #0]
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	6899      	ldr	r1, [r3, #8]
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	685a      	ldr	r2, [r3, #4]
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	f000 f985 	bl	8011030 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	689b      	ldr	r3, [r3, #8]
 8010d2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010d34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68fa      	ldr	r2, [r7, #12]
 8010d3c:	609a      	str	r2, [r3, #8]
      break;
 8010d3e:	e04e      	b.n	8010dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6818      	ldr	r0, [r3, #0]
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	6899      	ldr	r1, [r3, #8]
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	685a      	ldr	r2, [r3, #4]
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	f000 f96e 	bl	8011030 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	689a      	ldr	r2, [r3, #8]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010d62:	609a      	str	r2, [r3, #8]
      break;
 8010d64:	e03b      	b.n	8010dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6818      	ldr	r0, [r3, #0]
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	6859      	ldr	r1, [r3, #4]
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	461a      	mov	r2, r3
 8010d74:	f000 f8e2 	bl	8010f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2150      	movs	r1, #80	; 0x50
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f000 f93b 	bl	8010ffa <TIM_ITRx_SetConfig>
      break;
 8010d84:	e02b      	b.n	8010dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6818      	ldr	r0, [r3, #0]
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	6859      	ldr	r1, [r3, #4]
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	68db      	ldr	r3, [r3, #12]
 8010d92:	461a      	mov	r2, r3
 8010d94:	f000 f901 	bl	8010f9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2160      	movs	r1, #96	; 0x60
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f000 f92b 	bl	8010ffa <TIM_ITRx_SetConfig>
      break;
 8010da4:	e01b      	b.n	8010dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6818      	ldr	r0, [r3, #0]
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	6859      	ldr	r1, [r3, #4]
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	461a      	mov	r2, r3
 8010db4:	f000 f8c2 	bl	8010f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2140      	movs	r1, #64	; 0x40
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f000 f91b 	bl	8010ffa <TIM_ITRx_SetConfig>
      break;
 8010dc4:	e00b      	b.n	8010dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4619      	mov	r1, r3
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	f000 f912 	bl	8010ffa <TIM_ITRx_SetConfig>
      break;
 8010dd6:	e002      	b.n	8010dde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010dd8:	bf00      	nop
 8010dda:	e000      	b.n	8010dde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010ddc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2201      	movs	r2, #1
 8010de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2200      	movs	r2, #0
 8010dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	fffeff88 	.word	0xfffeff88

08010dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	4a40      	ldr	r2, [pc, #256]	; (8010f10 <TIM_Base_SetConfig+0x114>)
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d013      	beq.n	8010e3c <TIM_Base_SetConfig+0x40>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e1a:	d00f      	beq.n	8010e3c <TIM_Base_SetConfig+0x40>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	4a3d      	ldr	r2, [pc, #244]	; (8010f14 <TIM_Base_SetConfig+0x118>)
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d00b      	beq.n	8010e3c <TIM_Base_SetConfig+0x40>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	4a3c      	ldr	r2, [pc, #240]	; (8010f18 <TIM_Base_SetConfig+0x11c>)
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d007      	beq.n	8010e3c <TIM_Base_SetConfig+0x40>
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	4a3b      	ldr	r2, [pc, #236]	; (8010f1c <TIM_Base_SetConfig+0x120>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d003      	beq.n	8010e3c <TIM_Base_SetConfig+0x40>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	4a3a      	ldr	r2, [pc, #232]	; (8010f20 <TIM_Base_SetConfig+0x124>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d108      	bne.n	8010e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	68fa      	ldr	r2, [r7, #12]
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	4a2f      	ldr	r2, [pc, #188]	; (8010f10 <TIM_Base_SetConfig+0x114>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d02b      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e5c:	d027      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	4a2c      	ldr	r2, [pc, #176]	; (8010f14 <TIM_Base_SetConfig+0x118>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d023      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	4a2b      	ldr	r2, [pc, #172]	; (8010f18 <TIM_Base_SetConfig+0x11c>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d01f      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4a2a      	ldr	r2, [pc, #168]	; (8010f1c <TIM_Base_SetConfig+0x120>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d01b      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4a29      	ldr	r2, [pc, #164]	; (8010f20 <TIM_Base_SetConfig+0x124>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d017      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4a28      	ldr	r2, [pc, #160]	; (8010f24 <TIM_Base_SetConfig+0x128>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d013      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	4a27      	ldr	r2, [pc, #156]	; (8010f28 <TIM_Base_SetConfig+0x12c>)
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d00f      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	4a26      	ldr	r2, [pc, #152]	; (8010f2c <TIM_Base_SetConfig+0x130>)
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d00b      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4a25      	ldr	r2, [pc, #148]	; (8010f30 <TIM_Base_SetConfig+0x134>)
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d007      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	4a24      	ldr	r2, [pc, #144]	; (8010f34 <TIM_Base_SetConfig+0x138>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d003      	beq.n	8010eae <TIM_Base_SetConfig+0xb2>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	4a23      	ldr	r2, [pc, #140]	; (8010f38 <TIM_Base_SetConfig+0x13c>)
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	d108      	bne.n	8010ec0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	68db      	ldr	r3, [r3, #12]
 8010eba:	68fa      	ldr	r2, [r7, #12]
 8010ebc:	4313      	orrs	r3, r2
 8010ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	695b      	ldr	r3, [r3, #20]
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	68fa      	ldr	r2, [r7, #12]
 8010ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	689a      	ldr	r2, [r3, #8]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4a0a      	ldr	r2, [pc, #40]	; (8010f10 <TIM_Base_SetConfig+0x114>)
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d003      	beq.n	8010ef4 <TIM_Base_SetConfig+0xf8>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4a0c      	ldr	r2, [pc, #48]	; (8010f20 <TIM_Base_SetConfig+0x124>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d103      	bne.n	8010efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	691a      	ldr	r2, [r3, #16]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2201      	movs	r2, #1
 8010f00:	615a      	str	r2, [r3, #20]
}
 8010f02:	bf00      	nop
 8010f04:	3714      	adds	r7, #20
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	40010000 	.word	0x40010000
 8010f14:	40000400 	.word	0x40000400
 8010f18:	40000800 	.word	0x40000800
 8010f1c:	40000c00 	.word	0x40000c00
 8010f20:	40010400 	.word	0x40010400
 8010f24:	40014000 	.word	0x40014000
 8010f28:	40014400 	.word	0x40014400
 8010f2c:	40014800 	.word	0x40014800
 8010f30:	40001800 	.word	0x40001800
 8010f34:	40001c00 	.word	0x40001c00
 8010f38:	40002000 	.word	0x40002000

08010f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b087      	sub	sp, #28
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	6a1b      	ldr	r3, [r3, #32]
 8010f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	6a1b      	ldr	r3, [r3, #32]
 8010f52:	f023 0201 	bic.w	r2, r3, #1
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	699b      	ldr	r3, [r3, #24]
 8010f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	011b      	lsls	r3, r3, #4
 8010f6c:	693a      	ldr	r2, [r7, #16]
 8010f6e:	4313      	orrs	r3, r2
 8010f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	f023 030a 	bic.w	r3, r3, #10
 8010f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010f7a:	697a      	ldr	r2, [r7, #20]
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	693a      	ldr	r2, [r7, #16]
 8010f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	697a      	ldr	r2, [r7, #20]
 8010f8c:	621a      	str	r2, [r3, #32]
}
 8010f8e:	bf00      	nop
 8010f90:	371c      	adds	r7, #28
 8010f92:	46bd      	mov	sp, r7
 8010f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f98:	4770      	bx	lr

08010f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010f9a:	b480      	push	{r7}
 8010f9c:	b087      	sub	sp, #28
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	60f8      	str	r0, [r7, #12]
 8010fa2:	60b9      	str	r1, [r7, #8]
 8010fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6a1b      	ldr	r3, [r3, #32]
 8010faa:	f023 0210 	bic.w	r2, r3, #16
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	699b      	ldr	r3, [r3, #24]
 8010fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	6a1b      	ldr	r3, [r3, #32]
 8010fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	031b      	lsls	r3, r3, #12
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	011b      	lsls	r3, r3, #4
 8010fdc:	693a      	ldr	r2, [r7, #16]
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	697a      	ldr	r2, [r7, #20]
 8010fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	693a      	ldr	r2, [r7, #16]
 8010fec:	621a      	str	r2, [r3, #32]
}
 8010fee:	bf00      	nop
 8010ff0:	371c      	adds	r7, #28
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr

08010ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010ffa:	b480      	push	{r7}
 8010ffc:	b085      	sub	sp, #20
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
 8011002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011012:	683a      	ldr	r2, [r7, #0]
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	4313      	orrs	r3, r2
 8011018:	f043 0307 	orr.w	r3, r3, #7
 801101c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	68fa      	ldr	r2, [r7, #12]
 8011022:	609a      	str	r2, [r3, #8]
}
 8011024:	bf00      	nop
 8011026:	3714      	adds	r7, #20
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr

08011030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011030:	b480      	push	{r7}
 8011032:	b087      	sub	sp, #28
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
 801103c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801104a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	021a      	lsls	r2, r3, #8
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	431a      	orrs	r2, r3
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	4313      	orrs	r3, r2
 8011058:	697a      	ldr	r2, [r7, #20]
 801105a:	4313      	orrs	r3, r2
 801105c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	697a      	ldr	r2, [r7, #20]
 8011062:	609a      	str	r2, [r3, #8]
}
 8011064:	bf00      	nop
 8011066:	371c      	adds	r7, #28
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr

08011070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011070:	b480      	push	{r7}
 8011072:	b085      	sub	sp, #20
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011080:	2b01      	cmp	r3, #1
 8011082:	d101      	bne.n	8011088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011084:	2302      	movs	r3, #2
 8011086:	e06d      	b.n	8011164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2201      	movs	r2, #1
 801108c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2202      	movs	r2, #2
 8011094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4a30      	ldr	r2, [pc, #192]	; (8011170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d004      	beq.n	80110bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4a2f      	ldr	r2, [pc, #188]	; (8011174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d108      	bne.n	80110ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80110c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	68fa      	ldr	r2, [r7, #12]
 80110dc:	4313      	orrs	r3, r2
 80110de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4a20      	ldr	r2, [pc, #128]	; (8011170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d022      	beq.n	8011138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110fa:	d01d      	beq.n	8011138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a1d      	ldr	r2, [pc, #116]	; (8011178 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011102:	4293      	cmp	r3, r2
 8011104:	d018      	beq.n	8011138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a1c      	ldr	r2, [pc, #112]	; (801117c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d013      	beq.n	8011138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	4a1a      	ldr	r2, [pc, #104]	; (8011180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011116:	4293      	cmp	r3, r2
 8011118:	d00e      	beq.n	8011138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4a15      	ldr	r2, [pc, #84]	; (8011174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d009      	beq.n	8011138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4a16      	ldr	r2, [pc, #88]	; (8011184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d004      	beq.n	8011138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	4a15      	ldr	r2, [pc, #84]	; (8011188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011134:	4293      	cmp	r3, r2
 8011136:	d10c      	bne.n	8011152 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801113e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	689b      	ldr	r3, [r3, #8]
 8011144:	68ba      	ldr	r2, [r7, #8]
 8011146:	4313      	orrs	r3, r2
 8011148:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2201      	movs	r2, #1
 8011156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2200      	movs	r2, #0
 801115e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011162:	2300      	movs	r3, #0
}
 8011164:	4618      	mov	r0, r3
 8011166:	3714      	adds	r7, #20
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr
 8011170:	40010000 	.word	0x40010000
 8011174:	40010400 	.word	0x40010400
 8011178:	40000400 	.word	0x40000400
 801117c:	40000800 	.word	0x40000800
 8011180:	40000c00 	.word	0x40000c00
 8011184:	40014000 	.word	0x40014000
 8011188:	40001800 	.word	0x40001800

0801118c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d101      	bne.n	801119e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801119a:	2301      	movs	r3, #1
 801119c:	e040      	b.n	8011220 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d106      	bne.n	80111b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f7f6 fb7a 	bl	80078a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2224      	movs	r2, #36	; 0x24
 80111b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	f022 0201 	bic.w	r2, r2, #1
 80111c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 fb2a 	bl	8011824 <UART_SetConfig>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d101      	bne.n	80111da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80111d6:	2301      	movs	r3, #1
 80111d8:	e022      	b.n	8011220 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d002      	beq.n	80111e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 fdca 	bl	8011d7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	685a      	ldr	r2, [r3, #4]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80111f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	689a      	ldr	r2, [r3, #8]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	681a      	ldr	r2, [r3, #0]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f042 0201 	orr.w	r2, r2, #1
 8011216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f000 fe51 	bl	8011ec0 <UART_CheckIdleState>
 801121e:	4603      	mov	r3, r0
}
 8011220:	4618      	mov	r0, r3
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b08a      	sub	sp, #40	; 0x28
 801122c:	af02      	add	r7, sp, #8
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	60b9      	str	r1, [r7, #8]
 8011232:	603b      	str	r3, [r7, #0]
 8011234:	4613      	mov	r3, r2
 8011236:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801123c:	2b20      	cmp	r3, #32
 801123e:	d17f      	bne.n	8011340 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d002      	beq.n	801124c <HAL_UART_Transmit+0x24>
 8011246:	88fb      	ldrh	r3, [r7, #6]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d101      	bne.n	8011250 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801124c:	2301      	movs	r3, #1
 801124e:	e078      	b.n	8011342 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011256:	2b01      	cmp	r3, #1
 8011258:	d101      	bne.n	801125e <HAL_UART_Transmit+0x36>
 801125a:	2302      	movs	r3, #2
 801125c:	e071      	b.n	8011342 <HAL_UART_Transmit+0x11a>
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2201      	movs	r2, #1
 8011262:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2200      	movs	r2, #0
 801126a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2221      	movs	r2, #33	; 0x21
 8011270:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8011272:	f7f7 f8bf 	bl	80083f4 <HAL_GetTick>
 8011276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	88fa      	ldrh	r2, [r7, #6]
 801127c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	88fa      	ldrh	r2, [r7, #6]
 8011284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	689b      	ldr	r3, [r3, #8]
 801128c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011290:	d108      	bne.n	80112a4 <HAL_UART_Transmit+0x7c>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	691b      	ldr	r3, [r3, #16]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d104      	bne.n	80112a4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 801129a:	2300      	movs	r3, #0
 801129c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	61bb      	str	r3, [r7, #24]
 80112a2:	e003      	b.n	80112ac <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80112a8:	2300      	movs	r3, #0
 80112aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2200      	movs	r2, #0
 80112b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80112b4:	e02c      	b.n	8011310 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	9300      	str	r3, [sp, #0]
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	2200      	movs	r2, #0
 80112be:	2180      	movs	r1, #128	; 0x80
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f000 fe42 	bl	8011f4a <UART_WaitOnFlagUntilTimeout>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d001      	beq.n	80112d0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80112cc:	2303      	movs	r3, #3
 80112ce:	e038      	b.n	8011342 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d10b      	bne.n	80112ee <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80112d6:	69bb      	ldr	r3, [r7, #24]
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	461a      	mov	r2, r3
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80112e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80112e6:	69bb      	ldr	r3, [r7, #24]
 80112e8:	3302      	adds	r3, #2
 80112ea:	61bb      	str	r3, [r7, #24]
 80112ec:	e007      	b.n	80112fe <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80112ee:	69fb      	ldr	r3, [r7, #28]
 80112f0:	781a      	ldrb	r2, [r3, #0]
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	3301      	adds	r3, #1
 80112fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011304:	b29b      	uxth	r3, r3
 8011306:	3b01      	subs	r3, #1
 8011308:	b29a      	uxth	r2, r3
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011316:	b29b      	uxth	r3, r3
 8011318:	2b00      	cmp	r3, #0
 801131a:	d1cc      	bne.n	80112b6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	9300      	str	r3, [sp, #0]
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	2200      	movs	r2, #0
 8011324:	2140      	movs	r1, #64	; 0x40
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f000 fe0f 	bl	8011f4a <UART_WaitOnFlagUntilTimeout>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	d001      	beq.n	8011336 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8011332:	2303      	movs	r3, #3
 8011334:	e005      	b.n	8011342 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2220      	movs	r2, #32
 801133a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 801133c:	2300      	movs	r3, #0
 801133e:	e000      	b.n	8011342 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8011340:	2302      	movs	r3, #2
  }
}
 8011342:	4618      	mov	r0, r3
 8011344:	3720      	adds	r7, #32
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
	...

0801134c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	af00      	add	r7, sp, #0
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	4613      	mov	r3, r2
 8011358:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801135e:	2b20      	cmp	r3, #32
 8011360:	d164      	bne.n	801142c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <HAL_UART_Transmit_DMA+0x22>
 8011368:	88fb      	ldrh	r3, [r7, #6]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d101      	bne.n	8011372 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 801136e:	2301      	movs	r3, #1
 8011370:	e05d      	b.n	801142e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011378:	2b01      	cmp	r3, #1
 801137a:	d101      	bne.n	8011380 <HAL_UART_Transmit_DMA+0x34>
 801137c:	2302      	movs	r3, #2
 801137e:	e056      	b.n	801142e <HAL_UART_Transmit_DMA+0xe2>
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2201      	movs	r2, #1
 8011384:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	68ba      	ldr	r2, [r7, #8]
 801138c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	88fa      	ldrh	r2, [r7, #6]
 8011392:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	88fa      	ldrh	r2, [r7, #6]
 801139a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2200      	movs	r2, #0
 80113a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2221      	movs	r2, #33	; 0x21
 80113a8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d02a      	beq.n	8011408 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113b6:	4a20      	ldr	r2, [pc, #128]	; (8011438 <HAL_UART_Transmit_DMA+0xec>)
 80113b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113be:	4a1f      	ldr	r2, [pc, #124]	; (801143c <HAL_UART_Transmit_DMA+0xf0>)
 80113c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113c6:	4a1e      	ldr	r2, [pc, #120]	; (8011440 <HAL_UART_Transmit_DMA+0xf4>)
 80113c8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113ce:	2200      	movs	r2, #0
 80113d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113da:	4619      	mov	r1, r3
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	3328      	adds	r3, #40	; 0x28
 80113e2:	461a      	mov	r2, r3
 80113e4:	88fb      	ldrh	r3, [r7, #6]
 80113e6:	f7f7 f9f5 	bl	80087d4 <HAL_DMA_Start_IT>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00b      	beq.n	8011408 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2210      	movs	r2, #16
 80113f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2200      	movs	r2, #0
 80113fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2220      	movs	r2, #32
 8011402:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8011404:	2301      	movs	r3, #1
 8011406:	e012      	b.n	801142e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2240      	movs	r2, #64	; 0x40
 801140e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2200      	movs	r2, #0
 8011414:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	689a      	ldr	r2, [r3, #8]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011426:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8011428:	2300      	movs	r3, #0
 801142a:	e000      	b.n	801142e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 801142c:	2302      	movs	r3, #2
  }
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	080120ab 	.word	0x080120ab
 801143c:	080120fb 	.word	0x080120fb
 8011440:	08012197 	.word	0x08012197

08011444 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	60b9      	str	r1, [r7, #8]
 801144e:	4613      	mov	r3, r2
 8011450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011456:	2b20      	cmp	r3, #32
 8011458:	d16c      	bne.n	8011534 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d002      	beq.n	8011466 <HAL_UART_Receive_DMA+0x22>
 8011460:	88fb      	ldrh	r3, [r7, #6]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d101      	bne.n	801146a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8011466:	2301      	movs	r3, #1
 8011468:	e065      	b.n	8011536 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011470:	2b01      	cmp	r3, #1
 8011472:	d101      	bne.n	8011478 <HAL_UART_Receive_DMA+0x34>
 8011474:	2302      	movs	r3, #2
 8011476:	e05e      	b.n	8011536 <HAL_UART_Receive_DMA+0xf2>
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2201      	movs	r2, #1
 801147c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	68ba      	ldr	r2, [r7, #8]
 8011484:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	88fa      	ldrh	r2, [r7, #6]
 801148a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2200      	movs	r2, #0
 8011492:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	2222      	movs	r2, #34	; 0x22
 8011498:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d02a      	beq.n	80114f8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114a6:	4a26      	ldr	r2, [pc, #152]	; (8011540 <HAL_UART_Receive_DMA+0xfc>)
 80114a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114ae:	4a25      	ldr	r2, [pc, #148]	; (8011544 <HAL_UART_Receive_DMA+0x100>)
 80114b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114b6:	4a24      	ldr	r2, [pc, #144]	; (8011548 <HAL_UART_Receive_DMA+0x104>)
 80114b8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114be:	2200      	movs	r2, #0
 80114c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	3324      	adds	r3, #36	; 0x24
 80114cc:	4619      	mov	r1, r3
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114d2:	461a      	mov	r2, r3
 80114d4:	88fb      	ldrh	r3, [r7, #6]
 80114d6:	f7f7 f97d 	bl	80087d4 <HAL_DMA_Start_IT>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00b      	beq.n	80114f8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2210      	movs	r2, #16
 80114e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2200      	movs	r2, #0
 80114ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2220      	movs	r2, #32
 80114f2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80114f4:	2301      	movs	r3, #1
 80114f6:	e01e      	b.n	8011536 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2200      	movs	r2, #0
 80114fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801150e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	689a      	ldr	r2, [r3, #8]
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f042 0201 	orr.w	r2, r2, #1
 801151e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	689a      	ldr	r2, [r3, #8]
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801152e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8011530:	2300      	movs	r3, #0
 8011532:	e000      	b.n	8011536 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8011534:	2302      	movs	r3, #2
  }
}
 8011536:	4618      	mov	r0, r3
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	08012117 	.word	0x08012117
 8011544:	0801217b 	.word	0x0801217b
 8011548:	08012197 	.word	0x08012197

0801154c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b088      	sub	sp, #32
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	69db      	ldr	r3, [r3, #28]
 801155a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	689b      	ldr	r3, [r3, #8]
 801156a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801156c:	69fa      	ldr	r2, [r7, #28]
 801156e:	f640 030f 	movw	r3, #2063	; 0x80f
 8011572:	4013      	ands	r3, r2
 8011574:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d113      	bne.n	80115a4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801157c:	69fb      	ldr	r3, [r7, #28]
 801157e:	f003 0320 	and.w	r3, r3, #32
 8011582:	2b00      	cmp	r3, #0
 8011584:	d00e      	beq.n	80115a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	f003 0320 	and.w	r3, r3, #32
 801158c:	2b00      	cmp	r3, #0
 801158e:	d009      	beq.n	80115a4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011594:	2b00      	cmp	r3, #0
 8011596:	f000 8113 	beq.w	80117c0 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	4798      	blx	r3
      }
      return;
 80115a2:	e10d      	b.n	80117c0 <HAL_UART_IRQHandler+0x274>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	f000 80d6 	beq.w	8011758 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	f003 0301 	and.w	r3, r3, #1
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d105      	bne.n	80115c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f000 80cb 	beq.w	8011758 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	f003 0301 	and.w	r3, r3, #1
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00e      	beq.n	80115ea <HAL_UART_IRQHandler+0x9e>
 80115cc:	69bb      	ldr	r3, [r7, #24]
 80115ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d009      	beq.n	80115ea <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	2201      	movs	r2, #1
 80115dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115e2:	f043 0201 	orr.w	r2, r3, #1
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	f003 0302 	and.w	r3, r3, #2
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d00e      	beq.n	8011612 <HAL_UART_IRQHandler+0xc6>
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	f003 0301 	and.w	r3, r3, #1
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d009      	beq.n	8011612 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2202      	movs	r2, #2
 8011604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801160a:	f043 0204 	orr.w	r2, r3, #4
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011612:	69fb      	ldr	r3, [r7, #28]
 8011614:	f003 0304 	and.w	r3, r3, #4
 8011618:	2b00      	cmp	r3, #0
 801161a:	d00e      	beq.n	801163a <HAL_UART_IRQHandler+0xee>
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	f003 0301 	and.w	r3, r3, #1
 8011622:	2b00      	cmp	r3, #0
 8011624:	d009      	beq.n	801163a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	2204      	movs	r2, #4
 801162c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011632:	f043 0202 	orr.w	r2, r3, #2
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	f003 0308 	and.w	r3, r3, #8
 8011640:	2b00      	cmp	r3, #0
 8011642:	d013      	beq.n	801166c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011644:	69bb      	ldr	r3, [r7, #24]
 8011646:	f003 0320 	and.w	r3, r3, #32
 801164a:	2b00      	cmp	r3, #0
 801164c:	d104      	bne.n	8011658 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011654:	2b00      	cmp	r3, #0
 8011656:	d009      	beq.n	801166c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2208      	movs	r2, #8
 801165e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011664:	f043 0208 	orr.w	r2, r3, #8
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00f      	beq.n	8011696 <HAL_UART_IRQHandler+0x14a>
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801167c:	2b00      	cmp	r3, #0
 801167e:	d00a      	beq.n	8011696 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801168e:	f043 0220 	orr.w	r2, r3, #32
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801169a:	2b00      	cmp	r3, #0
 801169c:	f000 8092 	beq.w	80117c4 <HAL_UART_IRQHandler+0x278>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	f003 0320 	and.w	r3, r3, #32
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d00c      	beq.n	80116c4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80116aa:	69bb      	ldr	r3, [r7, #24]
 80116ac:	f003 0320 	and.w	r3, r3, #32
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d007      	beq.n	80116c4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d003      	beq.n	80116c4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	689b      	ldr	r3, [r3, #8]
 80116d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116d4:	2b40      	cmp	r3, #64	; 0x40
 80116d6:	d004      	beq.n	80116e2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d031      	beq.n	8011746 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f000 fcc1 	bl	801206a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116f2:	2b40      	cmp	r3, #64	; 0x40
 80116f4:	d123      	bne.n	801173e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	689a      	ldr	r2, [r3, #8]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011704:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801170a:	2b00      	cmp	r3, #0
 801170c:	d013      	beq.n	8011736 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011712:	4a2f      	ldr	r2, [pc, #188]	; (80117d0 <HAL_UART_IRQHandler+0x284>)
 8011714:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801171a:	4618      	mov	r0, r3
 801171c:	f7f7 f8ba 	bl	8008894 <HAL_DMA_Abort_IT>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d016      	beq.n	8011754 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801172a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011730:	4610      	mov	r0, r2
 8011732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011734:	e00e      	b.n	8011754 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f000 f860 	bl	80117fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801173c:	e00a      	b.n	8011754 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 f85c 	bl	80117fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011744:	e006      	b.n	8011754 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 f858 	bl	80117fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8011752:	e037      	b.n	80117c4 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011754:	bf00      	nop
    return;
 8011756:	e035      	b.n	80117c4 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00d      	beq.n	801177e <HAL_UART_IRQHandler+0x232>
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011768:	2b00      	cmp	r3, #0
 801176a:	d008      	beq.n	801177e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 f84a 	bl	8011810 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801177c:	e025      	b.n	80117ca <HAL_UART_IRQHandler+0x27e>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00d      	beq.n	80117a4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801178e:	2b00      	cmp	r3, #0
 8011790:	d008      	beq.n	80117a4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011796:	2b00      	cmp	r3, #0
 8011798:	d016      	beq.n	80117c8 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	4798      	blx	r3
    }
    return;
 80117a2:	e011      	b.n	80117c8 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d00d      	beq.n	80117ca <HAL_UART_IRQHandler+0x27e>
 80117ae:	69bb      	ldr	r3, [r7, #24]
 80117b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d008      	beq.n	80117ca <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f000 fd3e 	bl	801223a <UART_EndTransmit_IT>
    return;
 80117be:	e004      	b.n	80117ca <HAL_UART_IRQHandler+0x27e>
      return;
 80117c0:	bf00      	nop
 80117c2:	e002      	b.n	80117ca <HAL_UART_IRQHandler+0x27e>
    return;
 80117c4:	bf00      	nop
 80117c6:	e000      	b.n	80117ca <HAL_UART_IRQHandler+0x27e>
    return;
 80117c8:	bf00      	nop
  }

}
 80117ca:	3720      	adds	r7, #32
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	0801220f 	.word	0x0801220f

080117d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80117dc:	bf00      	nop
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80117f0:	bf00      	nop
 80117f2:	370c      	adds	r7, #12
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr

080117fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011804:	bf00      	nop
 8011806:	370c      	adds	r7, #12
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr

08011810 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011818:	bf00      	nop
 801181a:	370c      	adds	r7, #12
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr

08011824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b088      	sub	sp, #32
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 801182c:	2300      	movs	r3, #0
 801182e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8011830:	2300      	movs	r3, #0
 8011832:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	689a      	ldr	r2, [r3, #8]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	691b      	ldr	r3, [r3, #16]
 801183c:	431a      	orrs	r2, r3
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	695b      	ldr	r3, [r3, #20]
 8011842:	431a      	orrs	r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	69db      	ldr	r3, [r3, #28]
 8011848:	4313      	orrs	r3, r2
 801184a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	4ba7      	ldr	r3, [pc, #668]	; (8011af0 <UART_SetConfig+0x2cc>)
 8011854:	4013      	ands	r3, r2
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	6812      	ldr	r2, [r2, #0]
 801185a:	6939      	ldr	r1, [r7, #16]
 801185c:	430b      	orrs	r3, r1
 801185e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	68da      	ldr	r2, [r3, #12]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	430a      	orrs	r2, r1
 8011874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	699b      	ldr	r3, [r3, #24]
 801187a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6a1b      	ldr	r3, [r3, #32]
 8011880:	693a      	ldr	r2, [r7, #16]
 8011882:	4313      	orrs	r3, r2
 8011884:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	689b      	ldr	r3, [r3, #8]
 801188c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	693a      	ldr	r2, [r7, #16]
 8011896:	430a      	orrs	r2, r1
 8011898:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	4a95      	ldr	r2, [pc, #596]	; (8011af4 <UART_SetConfig+0x2d0>)
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d120      	bne.n	80118e6 <UART_SetConfig+0xc2>
 80118a4:	4b94      	ldr	r3, [pc, #592]	; (8011af8 <UART_SetConfig+0x2d4>)
 80118a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118aa:	f003 0303 	and.w	r3, r3, #3
 80118ae:	2b03      	cmp	r3, #3
 80118b0:	d816      	bhi.n	80118e0 <UART_SetConfig+0xbc>
 80118b2:	a201      	add	r2, pc, #4	; (adr r2, 80118b8 <UART_SetConfig+0x94>)
 80118b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b8:	080118c9 	.word	0x080118c9
 80118bc:	080118d5 	.word	0x080118d5
 80118c0:	080118cf 	.word	0x080118cf
 80118c4:	080118db 	.word	0x080118db
 80118c8:	2301      	movs	r3, #1
 80118ca:	77fb      	strb	r3, [r7, #31]
 80118cc:	e14f      	b.n	8011b6e <UART_SetConfig+0x34a>
 80118ce:	2302      	movs	r3, #2
 80118d0:	77fb      	strb	r3, [r7, #31]
 80118d2:	e14c      	b.n	8011b6e <UART_SetConfig+0x34a>
 80118d4:	2304      	movs	r3, #4
 80118d6:	77fb      	strb	r3, [r7, #31]
 80118d8:	e149      	b.n	8011b6e <UART_SetConfig+0x34a>
 80118da:	2308      	movs	r3, #8
 80118dc:	77fb      	strb	r3, [r7, #31]
 80118de:	e146      	b.n	8011b6e <UART_SetConfig+0x34a>
 80118e0:	2310      	movs	r3, #16
 80118e2:	77fb      	strb	r3, [r7, #31]
 80118e4:	e143      	b.n	8011b6e <UART_SetConfig+0x34a>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4a84      	ldr	r2, [pc, #528]	; (8011afc <UART_SetConfig+0x2d8>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d132      	bne.n	8011956 <UART_SetConfig+0x132>
 80118f0:	4b81      	ldr	r3, [pc, #516]	; (8011af8 <UART_SetConfig+0x2d4>)
 80118f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118f6:	f003 030c 	and.w	r3, r3, #12
 80118fa:	2b0c      	cmp	r3, #12
 80118fc:	d828      	bhi.n	8011950 <UART_SetConfig+0x12c>
 80118fe:	a201      	add	r2, pc, #4	; (adr r2, 8011904 <UART_SetConfig+0xe0>)
 8011900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011904:	08011939 	.word	0x08011939
 8011908:	08011951 	.word	0x08011951
 801190c:	08011951 	.word	0x08011951
 8011910:	08011951 	.word	0x08011951
 8011914:	08011945 	.word	0x08011945
 8011918:	08011951 	.word	0x08011951
 801191c:	08011951 	.word	0x08011951
 8011920:	08011951 	.word	0x08011951
 8011924:	0801193f 	.word	0x0801193f
 8011928:	08011951 	.word	0x08011951
 801192c:	08011951 	.word	0x08011951
 8011930:	08011951 	.word	0x08011951
 8011934:	0801194b 	.word	0x0801194b
 8011938:	2300      	movs	r3, #0
 801193a:	77fb      	strb	r3, [r7, #31]
 801193c:	e117      	b.n	8011b6e <UART_SetConfig+0x34a>
 801193e:	2302      	movs	r3, #2
 8011940:	77fb      	strb	r3, [r7, #31]
 8011942:	e114      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011944:	2304      	movs	r3, #4
 8011946:	77fb      	strb	r3, [r7, #31]
 8011948:	e111      	b.n	8011b6e <UART_SetConfig+0x34a>
 801194a:	2308      	movs	r3, #8
 801194c:	77fb      	strb	r3, [r7, #31]
 801194e:	e10e      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011950:	2310      	movs	r3, #16
 8011952:	77fb      	strb	r3, [r7, #31]
 8011954:	e10b      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	4a69      	ldr	r2, [pc, #420]	; (8011b00 <UART_SetConfig+0x2dc>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d120      	bne.n	80119a2 <UART_SetConfig+0x17e>
 8011960:	4b65      	ldr	r3, [pc, #404]	; (8011af8 <UART_SetConfig+0x2d4>)
 8011962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011966:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801196a:	2b30      	cmp	r3, #48	; 0x30
 801196c:	d013      	beq.n	8011996 <UART_SetConfig+0x172>
 801196e:	2b30      	cmp	r3, #48	; 0x30
 8011970:	d814      	bhi.n	801199c <UART_SetConfig+0x178>
 8011972:	2b20      	cmp	r3, #32
 8011974:	d009      	beq.n	801198a <UART_SetConfig+0x166>
 8011976:	2b20      	cmp	r3, #32
 8011978:	d810      	bhi.n	801199c <UART_SetConfig+0x178>
 801197a:	2b00      	cmp	r3, #0
 801197c:	d002      	beq.n	8011984 <UART_SetConfig+0x160>
 801197e:	2b10      	cmp	r3, #16
 8011980:	d006      	beq.n	8011990 <UART_SetConfig+0x16c>
 8011982:	e00b      	b.n	801199c <UART_SetConfig+0x178>
 8011984:	2300      	movs	r3, #0
 8011986:	77fb      	strb	r3, [r7, #31]
 8011988:	e0f1      	b.n	8011b6e <UART_SetConfig+0x34a>
 801198a:	2302      	movs	r3, #2
 801198c:	77fb      	strb	r3, [r7, #31]
 801198e:	e0ee      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011990:	2304      	movs	r3, #4
 8011992:	77fb      	strb	r3, [r7, #31]
 8011994:	e0eb      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011996:	2308      	movs	r3, #8
 8011998:	77fb      	strb	r3, [r7, #31]
 801199a:	e0e8      	b.n	8011b6e <UART_SetConfig+0x34a>
 801199c:	2310      	movs	r3, #16
 801199e:	77fb      	strb	r3, [r7, #31]
 80119a0:	e0e5      	b.n	8011b6e <UART_SetConfig+0x34a>
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4a57      	ldr	r2, [pc, #348]	; (8011b04 <UART_SetConfig+0x2e0>)
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d120      	bne.n	80119ee <UART_SetConfig+0x1ca>
 80119ac:	4b52      	ldr	r3, [pc, #328]	; (8011af8 <UART_SetConfig+0x2d4>)
 80119ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80119b6:	2bc0      	cmp	r3, #192	; 0xc0
 80119b8:	d013      	beq.n	80119e2 <UART_SetConfig+0x1be>
 80119ba:	2bc0      	cmp	r3, #192	; 0xc0
 80119bc:	d814      	bhi.n	80119e8 <UART_SetConfig+0x1c4>
 80119be:	2b80      	cmp	r3, #128	; 0x80
 80119c0:	d009      	beq.n	80119d6 <UART_SetConfig+0x1b2>
 80119c2:	2b80      	cmp	r3, #128	; 0x80
 80119c4:	d810      	bhi.n	80119e8 <UART_SetConfig+0x1c4>
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d002      	beq.n	80119d0 <UART_SetConfig+0x1ac>
 80119ca:	2b40      	cmp	r3, #64	; 0x40
 80119cc:	d006      	beq.n	80119dc <UART_SetConfig+0x1b8>
 80119ce:	e00b      	b.n	80119e8 <UART_SetConfig+0x1c4>
 80119d0:	2300      	movs	r3, #0
 80119d2:	77fb      	strb	r3, [r7, #31]
 80119d4:	e0cb      	b.n	8011b6e <UART_SetConfig+0x34a>
 80119d6:	2302      	movs	r3, #2
 80119d8:	77fb      	strb	r3, [r7, #31]
 80119da:	e0c8      	b.n	8011b6e <UART_SetConfig+0x34a>
 80119dc:	2304      	movs	r3, #4
 80119de:	77fb      	strb	r3, [r7, #31]
 80119e0:	e0c5      	b.n	8011b6e <UART_SetConfig+0x34a>
 80119e2:	2308      	movs	r3, #8
 80119e4:	77fb      	strb	r3, [r7, #31]
 80119e6:	e0c2      	b.n	8011b6e <UART_SetConfig+0x34a>
 80119e8:	2310      	movs	r3, #16
 80119ea:	77fb      	strb	r3, [r7, #31]
 80119ec:	e0bf      	b.n	8011b6e <UART_SetConfig+0x34a>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	4a45      	ldr	r2, [pc, #276]	; (8011b08 <UART_SetConfig+0x2e4>)
 80119f4:	4293      	cmp	r3, r2
 80119f6:	d125      	bne.n	8011a44 <UART_SetConfig+0x220>
 80119f8:	4b3f      	ldr	r3, [pc, #252]	; (8011af8 <UART_SetConfig+0x2d4>)
 80119fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a06:	d017      	beq.n	8011a38 <UART_SetConfig+0x214>
 8011a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a0c:	d817      	bhi.n	8011a3e <UART_SetConfig+0x21a>
 8011a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a12:	d00b      	beq.n	8011a2c <UART_SetConfig+0x208>
 8011a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a18:	d811      	bhi.n	8011a3e <UART_SetConfig+0x21a>
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d003      	beq.n	8011a26 <UART_SetConfig+0x202>
 8011a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a22:	d006      	beq.n	8011a32 <UART_SetConfig+0x20e>
 8011a24:	e00b      	b.n	8011a3e <UART_SetConfig+0x21a>
 8011a26:	2300      	movs	r3, #0
 8011a28:	77fb      	strb	r3, [r7, #31]
 8011a2a:	e0a0      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a2c:	2302      	movs	r3, #2
 8011a2e:	77fb      	strb	r3, [r7, #31]
 8011a30:	e09d      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a32:	2304      	movs	r3, #4
 8011a34:	77fb      	strb	r3, [r7, #31]
 8011a36:	e09a      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a38:	2308      	movs	r3, #8
 8011a3a:	77fb      	strb	r3, [r7, #31]
 8011a3c:	e097      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a3e:	2310      	movs	r3, #16
 8011a40:	77fb      	strb	r3, [r7, #31]
 8011a42:	e094      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	4a30      	ldr	r2, [pc, #192]	; (8011b0c <UART_SetConfig+0x2e8>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d125      	bne.n	8011a9a <UART_SetConfig+0x276>
 8011a4e:	4b2a      	ldr	r3, [pc, #168]	; (8011af8 <UART_SetConfig+0x2d4>)
 8011a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a5c:	d017      	beq.n	8011a8e <UART_SetConfig+0x26a>
 8011a5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011a62:	d817      	bhi.n	8011a94 <UART_SetConfig+0x270>
 8011a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a68:	d00b      	beq.n	8011a82 <UART_SetConfig+0x25e>
 8011a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a6e:	d811      	bhi.n	8011a94 <UART_SetConfig+0x270>
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d003      	beq.n	8011a7c <UART_SetConfig+0x258>
 8011a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a78:	d006      	beq.n	8011a88 <UART_SetConfig+0x264>
 8011a7a:	e00b      	b.n	8011a94 <UART_SetConfig+0x270>
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	77fb      	strb	r3, [r7, #31]
 8011a80:	e075      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a82:	2302      	movs	r3, #2
 8011a84:	77fb      	strb	r3, [r7, #31]
 8011a86:	e072      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a88:	2304      	movs	r3, #4
 8011a8a:	77fb      	strb	r3, [r7, #31]
 8011a8c:	e06f      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a8e:	2308      	movs	r3, #8
 8011a90:	77fb      	strb	r3, [r7, #31]
 8011a92:	e06c      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a94:	2310      	movs	r3, #16
 8011a96:	77fb      	strb	r3, [r7, #31]
 8011a98:	e069      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	4a1c      	ldr	r2, [pc, #112]	; (8011b10 <UART_SetConfig+0x2ec>)
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d137      	bne.n	8011b14 <UART_SetConfig+0x2f0>
 8011aa4:	4b14      	ldr	r3, [pc, #80]	; (8011af8 <UART_SetConfig+0x2d4>)
 8011aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011aaa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011aae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011ab2:	d017      	beq.n	8011ae4 <UART_SetConfig+0x2c0>
 8011ab4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011ab8:	d817      	bhi.n	8011aea <UART_SetConfig+0x2c6>
 8011aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011abe:	d00b      	beq.n	8011ad8 <UART_SetConfig+0x2b4>
 8011ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ac4:	d811      	bhi.n	8011aea <UART_SetConfig+0x2c6>
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d003      	beq.n	8011ad2 <UART_SetConfig+0x2ae>
 8011aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ace:	d006      	beq.n	8011ade <UART_SetConfig+0x2ba>
 8011ad0:	e00b      	b.n	8011aea <UART_SetConfig+0x2c6>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	77fb      	strb	r3, [r7, #31]
 8011ad6:	e04a      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011ad8:	2302      	movs	r3, #2
 8011ada:	77fb      	strb	r3, [r7, #31]
 8011adc:	e047      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011ade:	2304      	movs	r3, #4
 8011ae0:	77fb      	strb	r3, [r7, #31]
 8011ae2:	e044      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011ae4:	2308      	movs	r3, #8
 8011ae6:	77fb      	strb	r3, [r7, #31]
 8011ae8:	e041      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011aea:	2310      	movs	r3, #16
 8011aec:	77fb      	strb	r3, [r7, #31]
 8011aee:	e03e      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011af0:	efff69f3 	.word	0xefff69f3
 8011af4:	40011000 	.word	0x40011000
 8011af8:	40023800 	.word	0x40023800
 8011afc:	40004400 	.word	0x40004400
 8011b00:	40004800 	.word	0x40004800
 8011b04:	40004c00 	.word	0x40004c00
 8011b08:	40005000 	.word	0x40005000
 8011b0c:	40011400 	.word	0x40011400
 8011b10:	40007800 	.word	0x40007800
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4a94      	ldr	r2, [pc, #592]	; (8011d6c <UART_SetConfig+0x548>)
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d125      	bne.n	8011b6a <UART_SetConfig+0x346>
 8011b1e:	4b94      	ldr	r3, [pc, #592]	; (8011d70 <UART_SetConfig+0x54c>)
 8011b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011b28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b2c:	d017      	beq.n	8011b5e <UART_SetConfig+0x33a>
 8011b2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011b32:	d817      	bhi.n	8011b64 <UART_SetConfig+0x340>
 8011b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b38:	d00b      	beq.n	8011b52 <UART_SetConfig+0x32e>
 8011b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b3e:	d811      	bhi.n	8011b64 <UART_SetConfig+0x340>
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d003      	beq.n	8011b4c <UART_SetConfig+0x328>
 8011b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b48:	d006      	beq.n	8011b58 <UART_SetConfig+0x334>
 8011b4a:	e00b      	b.n	8011b64 <UART_SetConfig+0x340>
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	77fb      	strb	r3, [r7, #31]
 8011b50:	e00d      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011b52:	2302      	movs	r3, #2
 8011b54:	77fb      	strb	r3, [r7, #31]
 8011b56:	e00a      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011b58:	2304      	movs	r3, #4
 8011b5a:	77fb      	strb	r3, [r7, #31]
 8011b5c:	e007      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011b5e:	2308      	movs	r3, #8
 8011b60:	77fb      	strb	r3, [r7, #31]
 8011b62:	e004      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011b64:	2310      	movs	r3, #16
 8011b66:	77fb      	strb	r3, [r7, #31]
 8011b68:	e001      	b.n	8011b6e <UART_SetConfig+0x34a>
 8011b6a:	2310      	movs	r3, #16
 8011b6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	69db      	ldr	r3, [r3, #28]
 8011b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b76:	d17f      	bne.n	8011c78 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8011b78:	7ffb      	ldrb	r3, [r7, #31]
 8011b7a:	2b08      	cmp	r3, #8
 8011b7c:	d85c      	bhi.n	8011c38 <UART_SetConfig+0x414>
 8011b7e:	a201      	add	r2, pc, #4	; (adr r2, 8011b84 <UART_SetConfig+0x360>)
 8011b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b84:	08011ba9 	.word	0x08011ba9
 8011b88:	08011bc9 	.word	0x08011bc9
 8011b8c:	08011be9 	.word	0x08011be9
 8011b90:	08011c39 	.word	0x08011c39
 8011b94:	08011c01 	.word	0x08011c01
 8011b98:	08011c39 	.word	0x08011c39
 8011b9c:	08011c39 	.word	0x08011c39
 8011ba0:	08011c39 	.word	0x08011c39
 8011ba4:	08011c21 	.word	0x08011c21
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ba8:	f7fb f956 	bl	800ce58 <HAL_RCC_GetPCLK1Freq>
 8011bac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	005a      	lsls	r2, r3, #1
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	085b      	lsrs	r3, r3, #1
 8011bb8:	441a      	add	r2, r3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	61bb      	str	r3, [r7, #24]
        break;
 8011bc6:	e03a      	b.n	8011c3e <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011bc8:	f7fb f95a 	bl	800ce80 <HAL_RCC_GetPCLK2Freq>
 8011bcc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	005a      	lsls	r2, r3, #1
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	685b      	ldr	r3, [r3, #4]
 8011bd6:	085b      	lsrs	r3, r3, #1
 8011bd8:	441a      	add	r2, r3
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	61bb      	str	r3, [r7, #24]
        break;
 8011be6:	e02a      	b.n	8011c3e <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	085a      	lsrs	r2, r3, #1
 8011bee:	4b61      	ldr	r3, [pc, #388]	; (8011d74 <UART_SetConfig+0x550>)
 8011bf0:	4413      	add	r3, r2
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	6852      	ldr	r2, [r2, #4]
 8011bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	61bb      	str	r3, [r7, #24]
        break;
 8011bfe:	e01e      	b.n	8011c3e <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011c00:	f7fb f868 	bl	800ccd4 <HAL_RCC_GetSysClockFreq>
 8011c04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	005a      	lsls	r2, r3, #1
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	085b      	lsrs	r3, r3, #1
 8011c10:	441a      	add	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	61bb      	str	r3, [r7, #24]
        break;
 8011c1e:	e00e      	b.n	8011c3e <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	085b      	lsrs	r3, r3, #1
 8011c26:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	61bb      	str	r3, [r7, #24]
        break;
 8011c36:	e002      	b.n	8011c3e <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 8011c38:	2301      	movs	r3, #1
 8011c3a:	75fb      	strb	r3, [r7, #23]
        break;
 8011c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011c3e:	69bb      	ldr	r3, [r7, #24]
 8011c40:	2b0f      	cmp	r3, #15
 8011c42:	d916      	bls.n	8011c72 <UART_SetConfig+0x44e>
 8011c44:	69bb      	ldr	r3, [r7, #24]
 8011c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c4a:	d212      	bcs.n	8011c72 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011c4c:	69bb      	ldr	r3, [r7, #24]
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	f023 030f 	bic.w	r3, r3, #15
 8011c54:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011c56:	69bb      	ldr	r3, [r7, #24]
 8011c58:	085b      	lsrs	r3, r3, #1
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	f003 0307 	and.w	r3, r3, #7
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	897b      	ldrh	r3, [r7, #10]
 8011c64:	4313      	orrs	r3, r2
 8011c66:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	897a      	ldrh	r2, [r7, #10]
 8011c6e:	60da      	str	r2, [r3, #12]
 8011c70:	e070      	b.n	8011d54 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 8011c72:	2301      	movs	r3, #1
 8011c74:	75fb      	strb	r3, [r7, #23]
 8011c76:	e06d      	b.n	8011d54 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 8011c78:	7ffb      	ldrb	r3, [r7, #31]
 8011c7a:	2b08      	cmp	r3, #8
 8011c7c:	d859      	bhi.n	8011d32 <UART_SetConfig+0x50e>
 8011c7e:	a201      	add	r2, pc, #4	; (adr r2, 8011c84 <UART_SetConfig+0x460>)
 8011c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c84:	08011ca9 	.word	0x08011ca9
 8011c88:	08011cc7 	.word	0x08011cc7
 8011c8c:	08011ce5 	.word	0x08011ce5
 8011c90:	08011d33 	.word	0x08011d33
 8011c94:	08011cfd 	.word	0x08011cfd
 8011c98:	08011d33 	.word	0x08011d33
 8011c9c:	08011d33 	.word	0x08011d33
 8011ca0:	08011d33 	.word	0x08011d33
 8011ca4:	08011d1b 	.word	0x08011d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ca8:	f7fb f8d6 	bl	800ce58 <HAL_RCC_GetPCLK1Freq>
 8011cac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	085a      	lsrs	r2, r3, #1
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	441a      	add	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	61bb      	str	r3, [r7, #24]
        break;
 8011cc4:	e038      	b.n	8011d38 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011cc6:	f7fb f8db 	bl	800ce80 <HAL_RCC_GetPCLK2Freq>
 8011cca:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	085a      	lsrs	r2, r3, #1
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	441a      	add	r2, r3
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	61bb      	str	r3, [r7, #24]
        break;
 8011ce2:	e029      	b.n	8011d38 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	085a      	lsrs	r2, r3, #1
 8011cea:	4b23      	ldr	r3, [pc, #140]	; (8011d78 <UART_SetConfig+0x554>)
 8011cec:	4413      	add	r3, r2
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	6852      	ldr	r2, [r2, #4]
 8011cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	61bb      	str	r3, [r7, #24]
        break;
 8011cfa:	e01d      	b.n	8011d38 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011cfc:	f7fa ffea 	bl	800ccd4 <HAL_RCC_GetSysClockFreq>
 8011d00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	085a      	lsrs	r2, r3, #1
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	441a      	add	r2, r3
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	61bb      	str	r3, [r7, #24]
        break;
 8011d18:	e00e      	b.n	8011d38 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	085b      	lsrs	r3, r3, #1
 8011d20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	61bb      	str	r3, [r7, #24]
        break;
 8011d30:	e002      	b.n	8011d38 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 8011d32:	2301      	movs	r3, #1
 8011d34:	75fb      	strb	r3, [r7, #23]
        break;
 8011d36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	2b0f      	cmp	r3, #15
 8011d3c:	d908      	bls.n	8011d50 <UART_SetConfig+0x52c>
 8011d3e:	69bb      	ldr	r3, [r7, #24]
 8011d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d44:	d204      	bcs.n	8011d50 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	69ba      	ldr	r2, [r7, #24]
 8011d4c:	60da      	str	r2, [r3, #12]
 8011d4e:	e001      	b.n	8011d54 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 8011d50:	2301      	movs	r3, #1
 8011d52:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2200      	movs	r2, #0
 8011d58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8011d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3720      	adds	r7, #32
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	40007c00 	.word	0x40007c00
 8011d70:	40023800 	.word	0x40023800
 8011d74:	01e84800 	.word	0x01e84800
 8011d78:	00f42400 	.word	0x00f42400

08011d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b083      	sub	sp, #12
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d88:	f003 0301 	and.w	r3, r3, #1
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d00a      	beq.n	8011da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	430a      	orrs	r2, r1
 8011da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011daa:	f003 0302 	and.w	r3, r3, #2
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d00a      	beq.n	8011dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	430a      	orrs	r2, r1
 8011dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dcc:	f003 0304 	and.w	r3, r3, #4
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d00a      	beq.n	8011dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	430a      	orrs	r2, r1
 8011de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dee:	f003 0308 	and.w	r3, r3, #8
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d00a      	beq.n	8011e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	430a      	orrs	r2, r1
 8011e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e10:	f003 0310 	and.w	r3, r3, #16
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d00a      	beq.n	8011e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	689b      	ldr	r3, [r3, #8]
 8011e1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	430a      	orrs	r2, r1
 8011e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e32:	f003 0320 	and.w	r3, r3, #32
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d00a      	beq.n	8011e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	430a      	orrs	r2, r1
 8011e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d01a      	beq.n	8011e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	430a      	orrs	r2, r1
 8011e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e7a:	d10a      	bne.n	8011e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	430a      	orrs	r2, r1
 8011e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00a      	beq.n	8011eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	430a      	orrs	r2, r1
 8011eb2:	605a      	str	r2, [r3, #4]
  }
}
 8011eb4:	bf00      	nop
 8011eb6:	370c      	adds	r7, #12
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af02      	add	r7, sp, #8
 8011ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8011ece:	f7f6 fa91 	bl	80083f4 <HAL_GetTick>
 8011ed2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f003 0308 	and.w	r3, r3, #8
 8011ede:	2b08      	cmp	r3, #8
 8011ee0:	d10e      	bne.n	8011f00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ee2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ee6:	9300      	str	r3, [sp, #0]
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	2200      	movs	r2, #0
 8011eec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 f82a 	bl	8011f4a <UART_WaitOnFlagUntilTimeout>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d001      	beq.n	8011f00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011efc:	2303      	movs	r3, #3
 8011efe:	e020      	b.n	8011f42 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f003 0304 	and.w	r3, r3, #4
 8011f0a:	2b04      	cmp	r3, #4
 8011f0c:	d10e      	bne.n	8011f2c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011f12:	9300      	str	r3, [sp, #0]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2200      	movs	r2, #0
 8011f18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f000 f814 	bl	8011f4a <UART_WaitOnFlagUntilTimeout>
 8011f22:	4603      	mov	r3, r0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d001      	beq.n	8011f2c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f28:	2303      	movs	r3, #3
 8011f2a:	e00a      	b.n	8011f42 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2220      	movs	r2, #32
 8011f30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2220      	movs	r2, #32
 8011f36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8011f40:	2300      	movs	r3, #0
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3710      	adds	r7, #16
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}

08011f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011f4a:	b580      	push	{r7, lr}
 8011f4c:	b084      	sub	sp, #16
 8011f4e:	af00      	add	r7, sp, #0
 8011f50:	60f8      	str	r0, [r7, #12]
 8011f52:	60b9      	str	r1, [r7, #8]
 8011f54:	603b      	str	r3, [r7, #0]
 8011f56:	4613      	mov	r3, r2
 8011f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f5a:	e05d      	b.n	8012018 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011f5c:	69bb      	ldr	r3, [r7, #24]
 8011f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f62:	d059      	beq.n	8012018 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011f64:	f7f6 fa46 	bl	80083f4 <HAL_GetTick>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	1ad3      	subs	r3, r2, r3
 8011f6e:	69ba      	ldr	r2, [r7, #24]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d302      	bcc.n	8011f7a <UART_WaitOnFlagUntilTimeout+0x30>
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d11b      	bne.n	8011fb2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011f88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	689a      	ldr	r2, [r3, #8]
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	f022 0201 	bic.w	r2, r2, #1
 8011f98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2220      	movs	r2, #32
 8011f9e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2220      	movs	r2, #32
 8011fa4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8011fae:	2303      	movs	r3, #3
 8011fb0:	e042      	b.n	8012038 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f003 0304 	and.w	r3, r3, #4
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d02b      	beq.n	8012018 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	69db      	ldr	r3, [r3, #28]
 8011fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011fce:	d123      	bne.n	8012018 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011fd8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011fe8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	689a      	ldr	r2, [r3, #8]
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f022 0201 	bic.w	r2, r2, #1
 8011ff8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2220      	movs	r2, #32
 8011ffe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2220      	movs	r2, #32
 8012004:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2220      	movs	r2, #32
 801200a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2200      	movs	r2, #0
 8012010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8012014:	2303      	movs	r3, #3
 8012016:	e00f      	b.n	8012038 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	69da      	ldr	r2, [r3, #28]
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	4013      	ands	r3, r2
 8012022:	68ba      	ldr	r2, [r7, #8]
 8012024:	429a      	cmp	r2, r3
 8012026:	bf0c      	ite	eq
 8012028:	2301      	moveq	r3, #1
 801202a:	2300      	movne	r3, #0
 801202c:	b2db      	uxtb	r3, r3
 801202e:	461a      	mov	r2, r3
 8012030:	79fb      	ldrb	r3, [r7, #7]
 8012032:	429a      	cmp	r2, r3
 8012034:	d092      	beq.n	8011f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012036:	2300      	movs	r3, #0
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012040:	b480      	push	{r7}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8012056:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2220      	movs	r2, #32
 801205c:	675a      	str	r2, [r3, #116]	; 0x74
}
 801205e:	bf00      	nop
 8012060:	370c      	adds	r7, #12
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr

0801206a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801206a:	b480      	push	{r7}
 801206c:	b083      	sub	sp, #12
 801206e:	af00      	add	r7, sp, #0
 8012070:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012080:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	689a      	ldr	r2, [r3, #8]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f022 0201 	bic.w	r2, r2, #1
 8012090:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2220      	movs	r2, #32
 8012096:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2200      	movs	r2, #0
 801209c:	661a      	str	r2, [r3, #96]	; 0x60
}
 801209e:	bf00      	nop
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr

080120aa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b084      	sub	sp, #16
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120b6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	69db      	ldr	r3, [r3, #28]
 80120bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120c0:	d014      	beq.n	80120ec <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2200      	movs	r2, #0
 80120c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	689a      	ldr	r2, [r3, #8]
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80120d8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120e8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80120ea:	e002      	b.n	80120f2 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f7f6 f813 	bl	8008118 <HAL_UART_TxCpltCallback>
}
 80120f2:	bf00      	nop
 80120f4:	3710      	adds	r7, #16
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b084      	sub	sp, #16
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012106:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012108:	68f8      	ldr	r0, [r7, #12]
 801210a:	f7ff fb63 	bl	80117d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801210e:	bf00      	nop
 8012110:	3710      	adds	r7, #16
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}

08012116 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012116:	b580      	push	{r7, lr}
 8012118:	b084      	sub	sp, #16
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012122:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	69db      	ldr	r3, [r3, #28]
 8012128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801212c:	d01e      	beq.n	801216c <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	2200      	movs	r2, #0
 8012132:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012144:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	689a      	ldr	r2, [r3, #8]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	f022 0201 	bic.w	r2, r2, #1
 8012154:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	689a      	ldr	r2, [r3, #8]
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012164:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2220      	movs	r2, #32
 801216a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 801216c:	68f8      	ldr	r0, [r7, #12]
 801216e:	f7f6 f877 	bl	8008260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012172:	bf00      	nop
 8012174:	3710      	adds	r7, #16
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}

0801217a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801217a:	b580      	push	{r7, lr}
 801217c:	b084      	sub	sp, #16
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012186:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8012188:	68f8      	ldr	r0, [r7, #12]
 801218a:	f7ff fb2d 	bl	80117e8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801218e:	bf00      	nop
 8012190:	3710      	adds	r7, #16
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}

08012196 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012196:	b580      	push	{r7, lr}
 8012198:	b086      	sub	sp, #24
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	689b      	ldr	r3, [r3, #8]
 80121b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121ba:	2b80      	cmp	r3, #128	; 0x80
 80121bc:	d109      	bne.n	80121d2 <UART_DMAError+0x3c>
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	2b21      	cmp	r3, #33	; 0x21
 80121c2:	d106      	bne.n	80121d2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	2200      	movs	r2, #0
 80121c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80121cc:	6978      	ldr	r0, [r7, #20]
 80121ce:	f7ff ff37 	bl	8012040 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	689b      	ldr	r3, [r3, #8]
 80121d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121dc:	2b40      	cmp	r3, #64	; 0x40
 80121de:	d109      	bne.n	80121f4 <UART_DMAError+0x5e>
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2b22      	cmp	r3, #34	; 0x22
 80121e4:	d106      	bne.n	80121f4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	2200      	movs	r2, #0
 80121ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80121ee:	6978      	ldr	r0, [r7, #20]
 80121f0:	f7ff ff3b 	bl	801206a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121f8:	f043 0210 	orr.w	r2, r3, #16
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012200:	6978      	ldr	r0, [r7, #20]
 8012202:	f7ff fafb 	bl	80117fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012206:	bf00      	nop
 8012208:	3718      	adds	r7, #24
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}

0801220e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801220e:	b580      	push	{r7, lr}
 8012210:	b084      	sub	sp, #16
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801221a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2200      	movs	r2, #0
 8012220:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2200      	movs	r2, #0
 8012228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f7ff fae5 	bl	80117fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012232:	bf00      	nop
 8012234:	3710      	adds	r7, #16
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}

0801223a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b082      	sub	sp, #8
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012250:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2220      	movs	r2, #32
 8012256:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2200      	movs	r2, #0
 801225c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f7f5 ff5a 	bl	8008118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012264:	bf00      	nop
 8012266:	3708      	adds	r7, #8
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801226c:	b084      	sub	sp, #16
 801226e:	b480      	push	{r7}
 8012270:	b085      	sub	sp, #20
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
 8012276:	f107 001c 	add.w	r0, r7, #28
 801227a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801227e:	2300      	movs	r3, #0
 8012280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012282:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012284:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8012286:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8012288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801228a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801228e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8012292:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8012296:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	4313      	orrs	r3, r2
 801229c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	685a      	ldr	r2, [r3, #4]
 80122a2:	4b07      	ldr	r3, [pc, #28]	; (80122c0 <SDMMC_Init+0x54>)
 80122a4:	4013      	ands	r3, r2
 80122a6:	68fa      	ldr	r2, [r7, #12]
 80122a8:	431a      	orrs	r2, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80122ae:	2300      	movs	r3, #0
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3714      	adds	r7, #20
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	b004      	add	sp, #16
 80122bc:	4770      	bx	lr
 80122be:	bf00      	nop
 80122c0:	ffff8100 	.word	0xffff8100

080122c4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80122c4:	b480      	push	{r7}
 80122c6:	b083      	sub	sp, #12
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	370c      	adds	r7, #12
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr

080122de <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80122de:	b480      	push	{r7}
 80122e0:	b083      	sub	sp, #12
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80122f2:	2300      	movs	r3, #0
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	370c      	adds	r7, #12
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2203      	movs	r2, #3
 801230c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801230e:	2002      	movs	r0, #2
 8012310:	f7f6 f87c 	bl	800840c <HAL_Delay>
  
  return HAL_OK;
 8012314:	2300      	movs	r3, #0
}
 8012316:	4618      	mov	r0, r3
 8012318:	3708      	adds	r7, #8
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}

0801231e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 801231e:	b480      	push	{r7}
 8012320:	b083      	sub	sp, #12
 8012322:	af00      	add	r7, sp, #0
 8012324:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f003 0303 	and.w	r3, r3, #3
}
 801232e:	4618      	mov	r0, r3
 8012330:	370c      	adds	r7, #12
 8012332:	46bd      	mov	sp, r7
 8012334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012338:	4770      	bx	lr
	...

0801233c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801233c:	b480      	push	{r7}
 801233e:	b085      	sub	sp, #20
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012346:	2300      	movs	r3, #0
 8012348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801235a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012360:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012366:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012368:	68fa      	ldr	r2, [r7, #12]
 801236a:	4313      	orrs	r3, r2
 801236c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	68da      	ldr	r2, [r3, #12]
 8012372:	4b06      	ldr	r3, [pc, #24]	; (801238c <SDMMC_SendCommand+0x50>)
 8012374:	4013      	ands	r3, r2
 8012376:	68fa      	ldr	r2, [r7, #12]
 8012378:	431a      	orrs	r2, r3
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801237e:	2300      	movs	r3, #0
}
 8012380:	4618      	mov	r0, r3
 8012382:	3714      	adds	r7, #20
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr
 801238c:	fffff000 	.word	0xfffff000

08012390 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012390:	b480      	push	{r7}
 8012392:	b083      	sub	sp, #12
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	691b      	ldr	r3, [r3, #16]
 801239c:	b2db      	uxtb	r3, r3
}
 801239e:	4618      	mov	r0, r3
 80123a0:	370c      	adds	r7, #12
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr

080123aa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80123aa:	b480      	push	{r7}
 80123ac:	b085      	sub	sp, #20
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
 80123b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	3314      	adds	r3, #20
 80123b8:	461a      	mov	r2, r3
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	4413      	add	r3, r2
 80123be:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	681b      	ldr	r3, [r3, #0]
}  
 80123c4:	4618      	mov	r0, r3
 80123c6:	3714      	adds	r7, #20
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b085      	sub	sp, #20
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80123da:	2300      	movs	r3, #0
 80123dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	685a      	ldr	r2, [r3, #4]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80123f6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80123fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8012402:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	4313      	orrs	r3, r2
 8012408:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801240e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	431a      	orrs	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801241a:	2300      	movs	r3, #0

}
 801241c:	4618      	mov	r0, r3
 801241e:	3714      	adds	r7, #20
 8012420:	46bd      	mov	sp, r7
 8012422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012426:	4770      	bx	lr

08012428 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b088      	sub	sp, #32
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012436:	2310      	movs	r3, #16
 8012438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801243a:	2340      	movs	r3, #64	; 0x40
 801243c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801243e:	2300      	movs	r3, #0
 8012440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012446:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012448:	f107 0308 	add.w	r3, r7, #8
 801244c:	4619      	mov	r1, r3
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f7ff ff74 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012454:	f241 3288 	movw	r2, #5000	; 0x1388
 8012458:	2110      	movs	r1, #16
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f000 fa42 	bl	80128e4 <SDMMC_GetCmdResp1>
 8012460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012462:	69fb      	ldr	r3, [r7, #28]
}
 8012464:	4618      	mov	r0, r3
 8012466:	3720      	adds	r7, #32
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b088      	sub	sp, #32
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801247a:	2311      	movs	r3, #17
 801247c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801247e:	2340      	movs	r3, #64	; 0x40
 8012480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012482:	2300      	movs	r3, #0
 8012484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801248a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801248c:	f107 0308 	add.w	r3, r7, #8
 8012490:	4619      	mov	r1, r3
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f7ff ff52 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012498:	f241 3288 	movw	r2, #5000	; 0x1388
 801249c:	2111      	movs	r1, #17
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f000 fa20 	bl	80128e4 <SDMMC_GetCmdResp1>
 80124a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124a6:	69fb      	ldr	r3, [r7, #28]
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	3720      	adds	r7, #32
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b088      	sub	sp, #32
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80124be:	2312      	movs	r3, #18
 80124c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124c2:	2340      	movs	r3, #64	; 0x40
 80124c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124c6:	2300      	movs	r3, #0
 80124c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124d0:	f107 0308 	add.w	r3, r7, #8
 80124d4:	4619      	mov	r1, r3
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f7ff ff30 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80124dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80124e0:	2112      	movs	r1, #18
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f000 f9fe 	bl	80128e4 <SDMMC_GetCmdResp1>
 80124e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124ea:	69fb      	ldr	r3, [r7, #28]
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3720      	adds	r7, #32
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}

080124f4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b088      	sub	sp, #32
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012502:	2318      	movs	r3, #24
 8012504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012506:	2340      	movs	r3, #64	; 0x40
 8012508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801250a:	2300      	movs	r3, #0
 801250c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801250e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012514:	f107 0308 	add.w	r3, r7, #8
 8012518:	4619      	mov	r1, r3
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7ff ff0e 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012520:	f241 3288 	movw	r2, #5000	; 0x1388
 8012524:	2118      	movs	r1, #24
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f000 f9dc 	bl	80128e4 <SDMMC_GetCmdResp1>
 801252c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801252e:	69fb      	ldr	r3, [r7, #28]
}
 8012530:	4618      	mov	r0, r3
 8012532:	3720      	adds	r7, #32
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b088      	sub	sp, #32
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012546:	2319      	movs	r3, #25
 8012548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801254a:	2340      	movs	r3, #64	; 0x40
 801254c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801254e:	2300      	movs	r3, #0
 8012550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012558:	f107 0308 	add.w	r3, r7, #8
 801255c:	4619      	mov	r1, r3
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f7ff feec 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012564:	f241 3288 	movw	r2, #5000	; 0x1388
 8012568:	2119      	movs	r1, #25
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f000 f9ba 	bl	80128e4 <SDMMC_GetCmdResp1>
 8012570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012572:	69fb      	ldr	r3, [r7, #28]
}
 8012574:	4618      	mov	r0, r3
 8012576:	3720      	adds	r7, #32
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b088      	sub	sp, #32
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012584:	2300      	movs	r3, #0
 8012586:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012588:	230c      	movs	r3, #12
 801258a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801258c:	2340      	movs	r3, #64	; 0x40
 801258e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012590:	2300      	movs	r3, #0
 8012592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801259a:	f107 0308 	add.w	r3, r7, #8
 801259e:	4619      	mov	r1, r3
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7ff fecb 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80125a6:	4a05      	ldr	r2, [pc, #20]	; (80125bc <SDMMC_CmdStopTransfer+0x40>)
 80125a8:	210c      	movs	r1, #12
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f000 f99a 	bl	80128e4 <SDMMC_GetCmdResp1>
 80125b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125b2:	69fb      	ldr	r3, [r7, #28]
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3720      	adds	r7, #32
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	05f5e100 	.word	0x05f5e100

080125c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b08a      	sub	sp, #40	; 0x28
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80125d0:	2307      	movs	r3, #7
 80125d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125d4:	2340      	movs	r3, #64	; 0x40
 80125d6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125d8:	2300      	movs	r3, #0
 80125da:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125e0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125e2:	f107 0310 	add.w	r3, r7, #16
 80125e6:	4619      	mov	r1, r3
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f7ff fea7 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80125ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80125f2:	2107      	movs	r1, #7
 80125f4:	68f8      	ldr	r0, [r7, #12]
 80125f6:	f000 f975 	bl	80128e4 <SDMMC_GetCmdResp1>
 80125fa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80125fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3728      	adds	r7, #40	; 0x28
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012606:	b580      	push	{r7, lr}
 8012608:	b088      	sub	sp, #32
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801260e:	2300      	movs	r3, #0
 8012610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012612:	2300      	movs	r3, #0
 8012614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012616:	2300      	movs	r3, #0
 8012618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801261a:	2300      	movs	r3, #0
 801261c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801261e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012622:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012624:	f107 0308 	add.w	r3, r7, #8
 8012628:	4619      	mov	r1, r3
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff fe86 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f000 f92f 	bl	8012894 <SDMMC_GetCmdError>
 8012636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012638:	69fb      	ldr	r3, [r7, #28]
}
 801263a:	4618      	mov	r0, r3
 801263c:	3720      	adds	r7, #32
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012642:	b580      	push	{r7, lr}
 8012644:	b088      	sub	sp, #32
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801264a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801264e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012650:	2308      	movs	r3, #8
 8012652:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012654:	2340      	movs	r3, #64	; 0x40
 8012656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012658:	2300      	movs	r3, #0
 801265a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801265c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012662:	f107 0308 	add.w	r3, r7, #8
 8012666:	4619      	mov	r1, r3
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f7ff fe67 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f000 fb18 	bl	8012ca4 <SDMMC_GetCmdResp7>
 8012674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012676:	69fb      	ldr	r3, [r7, #28]
}
 8012678:	4618      	mov	r0, r3
 801267a:	3720      	adds	r7, #32
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b088      	sub	sp, #32
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801268e:	2337      	movs	r3, #55	; 0x37
 8012690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012692:	2340      	movs	r3, #64	; 0x40
 8012694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012696:	2300      	movs	r3, #0
 8012698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801269a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801269e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126a0:	f107 0308 	add.w	r3, r7, #8
 80126a4:	4619      	mov	r1, r3
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f7ff fe48 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80126ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80126b0:	2137      	movs	r1, #55	; 0x37
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f000 f916 	bl	80128e4 <SDMMC_GetCmdResp1>
 80126b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126ba:	69fb      	ldr	r3, [r7, #28]
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3720      	adds	r7, #32
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b088      	sub	sp, #32
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80126ce:	683a      	ldr	r2, [r7, #0]
 80126d0:	4b0d      	ldr	r3, [pc, #52]	; (8012708 <SDMMC_CmdAppOperCommand+0x44>)
 80126d2:	4313      	orrs	r3, r2
 80126d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80126d6:	2329      	movs	r3, #41	; 0x29
 80126d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126da:	2340      	movs	r3, #64	; 0x40
 80126dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126de:	2300      	movs	r3, #0
 80126e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126e8:	f107 0308 	add.w	r3, r7, #8
 80126ec:	4619      	mov	r1, r3
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7ff fe24 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f000 fa27 	bl	8012b48 <SDMMC_GetCmdResp3>
 80126fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80126fc:	69fb      	ldr	r3, [r7, #28]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3720      	adds	r7, #32
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	80100000 	.word	0x80100000

0801270c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b088      	sub	sp, #32
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801271a:	2306      	movs	r3, #6
 801271c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801271e:	2340      	movs	r3, #64	; 0x40
 8012720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012722:	2300      	movs	r3, #0
 8012724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801272a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801272c:	f107 0308 	add.w	r3, r7, #8
 8012730:	4619      	mov	r1, r3
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f7ff fe02 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012738:	f241 3288 	movw	r2, #5000	; 0x1388
 801273c:	2106      	movs	r1, #6
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 f8d0 	bl	80128e4 <SDMMC_GetCmdResp1>
 8012744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012746:	69fb      	ldr	r3, [r7, #28]
}
 8012748:	4618      	mov	r0, r3
 801274a:	3720      	adds	r7, #32
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b088      	sub	sp, #32
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012758:	2300      	movs	r3, #0
 801275a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801275c:	2333      	movs	r3, #51	; 0x33
 801275e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012760:	2340      	movs	r3, #64	; 0x40
 8012762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012764:	2300      	movs	r3, #0
 8012766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801276c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801276e:	f107 0308 	add.w	r3, r7, #8
 8012772:	4619      	mov	r1, r3
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f7ff fde1 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801277a:	f241 3288 	movw	r2, #5000	; 0x1388
 801277e:	2133      	movs	r1, #51	; 0x33
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 f8af 	bl	80128e4 <SDMMC_GetCmdResp1>
 8012786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012788:	69fb      	ldr	r3, [r7, #28]
}
 801278a:	4618      	mov	r0, r3
 801278c:	3720      	adds	r7, #32
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}

08012792 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012792:	b580      	push	{r7, lr}
 8012794:	b088      	sub	sp, #32
 8012796:	af00      	add	r7, sp, #0
 8012798:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801279a:	2300      	movs	r3, #0
 801279c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801279e:	2302      	movs	r3, #2
 80127a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80127a2:	23c0      	movs	r3, #192	; 0xc0
 80127a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127a6:	2300      	movs	r3, #0
 80127a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127b0:	f107 0308 	add.w	r3, r7, #8
 80127b4:	4619      	mov	r1, r3
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f7ff fdc0 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 f97d 	bl	8012abc <SDMMC_GetCmdResp2>
 80127c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127c4:	69fb      	ldr	r3, [r7, #28]
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3720      	adds	r7, #32
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80127ce:	b580      	push	{r7, lr}
 80127d0:	b088      	sub	sp, #32
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
 80127d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80127dc:	2309      	movs	r3, #9
 80127de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80127e0:	23c0      	movs	r3, #192	; 0xc0
 80127e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127e4:	2300      	movs	r3, #0
 80127e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127ee:	f107 0308 	add.w	r3, r7, #8
 80127f2:	4619      	mov	r1, r3
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7ff fda1 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 f95e 	bl	8012abc <SDMMC_GetCmdResp2>
 8012800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012802:	69fb      	ldr	r3, [r7, #28]
}
 8012804:	4618      	mov	r0, r3
 8012806:	3720      	adds	r7, #32
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b088      	sub	sp, #32
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012816:	2300      	movs	r3, #0
 8012818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801281a:	2303      	movs	r3, #3
 801281c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801281e:	2340      	movs	r3, #64	; 0x40
 8012820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012822:	2300      	movs	r3, #0
 8012824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801282a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801282c:	f107 0308 	add.w	r3, r7, #8
 8012830:	4619      	mov	r1, r3
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f7ff fd82 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012838:	683a      	ldr	r2, [r7, #0]
 801283a:	2103      	movs	r1, #3
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 f9bd 	bl	8012bbc <SDMMC_GetCmdResp6>
 8012842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012844:	69fb      	ldr	r3, [r7, #28]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3720      	adds	r7, #32
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801284e:	b580      	push	{r7, lr}
 8012850:	b088      	sub	sp, #32
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
 8012856:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801285c:	230d      	movs	r3, #13
 801285e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012860:	2340      	movs	r3, #64	; 0x40
 8012862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012864:	2300      	movs	r3, #0
 8012866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801286c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801286e:	f107 0308 	add.w	r3, r7, #8
 8012872:	4619      	mov	r1, r3
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f7ff fd61 	bl	801233c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801287a:	f241 3288 	movw	r2, #5000	; 0x1388
 801287e:	210d      	movs	r1, #13
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f000 f82f 	bl	80128e4 <SDMMC_GetCmdResp1>
 8012886:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012888:	69fb      	ldr	r3, [r7, #28]
}
 801288a:	4618      	mov	r0, r3
 801288c:	3720      	adds	r7, #32
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
	...

08012894 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012894:	b490      	push	{r4, r7}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801289c:	4b0f      	ldr	r3, [pc, #60]	; (80128dc <SDMMC_GetCmdError+0x48>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4a0f      	ldr	r2, [pc, #60]	; (80128e0 <SDMMC_GetCmdError+0x4c>)
 80128a2:	fba2 2303 	umull	r2, r3, r2, r3
 80128a6:	0a5b      	lsrs	r3, r3, #9
 80128a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80128ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80128b0:	4623      	mov	r3, r4
 80128b2:	1e5c      	subs	r4, r3, #1
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d102      	bne.n	80128be <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128bc:	e009      	b.n	80128d2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d0f2      	beq.n	80128b0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	22c5      	movs	r2, #197	; 0xc5
 80128ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80128d0:	2300      	movs	r3, #0
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3708      	adds	r7, #8
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bc90      	pop	{r4, r7}
 80128da:	4770      	bx	lr
 80128dc:	2000005c 	.word	0x2000005c
 80128e0:	10624dd3 	.word	0x10624dd3

080128e4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80128e4:	b590      	push	{r4, r7, lr}
 80128e6:	b087      	sub	sp, #28
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	60f8      	str	r0, [r7, #12]
 80128ec:	460b      	mov	r3, r1
 80128ee:	607a      	str	r2, [r7, #4]
 80128f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80128f2:	4b6f      	ldr	r3, [pc, #444]	; (8012ab0 <SDMMC_GetCmdResp1+0x1cc>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4a6f      	ldr	r2, [pc, #444]	; (8012ab4 <SDMMC_GetCmdResp1+0x1d0>)
 80128f8:	fba2 2303 	umull	r2, r3, r2, r3
 80128fc:	0a5b      	lsrs	r3, r3, #9
 80128fe:	687a      	ldr	r2, [r7, #4]
 8012900:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012904:	4623      	mov	r3, r4
 8012906:	1e5c      	subs	r4, r3, #1
 8012908:	2b00      	cmp	r3, #0
 801290a:	d102      	bne.n	8012912 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801290c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012910:	e0c9      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012916:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801291e:	2b00      	cmp	r3, #0
 8012920:	d0f0      	beq.n	8012904 <SDMMC_GetCmdResp1+0x20>
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012928:	2b00      	cmp	r3, #0
 801292a:	d1eb      	bne.n	8012904 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012930:	f003 0304 	and.w	r3, r3, #4
 8012934:	2b00      	cmp	r3, #0
 8012936:	d004      	beq.n	8012942 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2204      	movs	r2, #4
 801293c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801293e:	2304      	movs	r3, #4
 8012940:	e0b1      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	2b00      	cmp	r3, #0
 801294c:	d004      	beq.n	8012958 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2201      	movs	r2, #1
 8012952:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012954:	2301      	movs	r3, #1
 8012956:	e0a6      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	22c5      	movs	r2, #197	; 0xc5
 801295c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	f7ff fd16 	bl	8012390 <SDMMC_GetCommandResponse>
 8012964:	4603      	mov	r3, r0
 8012966:	461a      	mov	r2, r3
 8012968:	7afb      	ldrb	r3, [r7, #11]
 801296a:	4293      	cmp	r3, r2
 801296c:	d001      	beq.n	8012972 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801296e:	2301      	movs	r3, #1
 8012970:	e099      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012972:	2100      	movs	r1, #0
 8012974:	68f8      	ldr	r0, [r7, #12]
 8012976:	f7ff fd18 	bl	80123aa <SDMMC_GetResponse>
 801297a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801297c:	693a      	ldr	r2, [r7, #16]
 801297e:	4b4e      	ldr	r3, [pc, #312]	; (8012ab8 <SDMMC_GetCmdResp1+0x1d4>)
 8012980:	4013      	ands	r3, r2
 8012982:	2b00      	cmp	r3, #0
 8012984:	d101      	bne.n	801298a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8012986:	2300      	movs	r3, #0
 8012988:	e08d      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	2b00      	cmp	r3, #0
 801298e:	da02      	bge.n	8012996 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012994:	e087      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801299c:	2b00      	cmp	r3, #0
 801299e:	d001      	beq.n	80129a4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80129a0:	2340      	movs	r3, #64	; 0x40
 80129a2:	e080      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80129a4:	693b      	ldr	r3, [r7, #16]
 80129a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d001      	beq.n	80129b2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80129ae:	2380      	movs	r3, #128	; 0x80
 80129b0:	e079      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d002      	beq.n	80129c2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80129bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129c0:	e071      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d002      	beq.n	80129d2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80129cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80129d0:	e069      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d002      	beq.n	80129e2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80129dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129e0:	e061      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d002      	beq.n	80129f2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80129ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129f0:	e059      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80129f2:	693b      	ldr	r3, [r7, #16]
 80129f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d002      	beq.n	8012a02 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80129fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a00:	e051      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d002      	beq.n	8012a12 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012a10:	e049      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d002      	beq.n	8012a22 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012a20:	e041      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d002      	beq.n	8012a32 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8012a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a30:	e039      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d002      	beq.n	8012a42 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012a40:	e031      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d002      	beq.n	8012a52 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012a4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012a50:	e029      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d002      	beq.n	8012a62 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012a5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012a60:	e021      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012a62:	693b      	ldr	r3, [r7, #16]
 8012a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d002      	beq.n	8012a72 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012a6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012a70:	e019      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d002      	beq.n	8012a82 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012a7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012a80:	e011      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d002      	beq.n	8012a92 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012a8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012a90:	e009      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	f003 0308 	and.w	r3, r3, #8
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d002      	beq.n	8012aa2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012a9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012aa0:	e001      	b.n	8012aa6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	371c      	adds	r7, #28
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd90      	pop	{r4, r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	2000005c 	.word	0x2000005c
 8012ab4:	10624dd3 	.word	0x10624dd3
 8012ab8:	fdffe008 	.word	0xfdffe008

08012abc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012abc:	b490      	push	{r4, r7}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012ac4:	4b1e      	ldr	r3, [pc, #120]	; (8012b40 <SDMMC_GetCmdResp2+0x84>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	4a1e      	ldr	r2, [pc, #120]	; (8012b44 <SDMMC_GetCmdResp2+0x88>)
 8012aca:	fba2 2303 	umull	r2, r3, r2, r3
 8012ace:	0a5b      	lsrs	r3, r3, #9
 8012ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ad4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012ad8:	4623      	mov	r3, r4
 8012ada:	1e5c      	subs	r4, r3, #1
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d102      	bne.n	8012ae6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ae0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ae4:	e026      	b.n	8012b34 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d0f0      	beq.n	8012ad8 <SDMMC_GetCmdResp2+0x1c>
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d1eb      	bne.n	8012ad8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b04:	f003 0304 	and.w	r3, r3, #4
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d004      	beq.n	8012b16 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2204      	movs	r2, #4
 8012b10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b12:	2304      	movs	r3, #4
 8012b14:	e00e      	b.n	8012b34 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b1a:	f003 0301 	and.w	r3, r3, #1
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d004      	beq.n	8012b2c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	2201      	movs	r2, #1
 8012b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012b28:	2301      	movs	r3, #1
 8012b2a:	e003      	b.n	8012b34 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	22c5      	movs	r2, #197	; 0xc5
 8012b30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012b32:	2300      	movs	r3, #0
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3710      	adds	r7, #16
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bc90      	pop	{r4, r7}
 8012b3c:	4770      	bx	lr
 8012b3e:	bf00      	nop
 8012b40:	2000005c 	.word	0x2000005c
 8012b44:	10624dd3 	.word	0x10624dd3

08012b48 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012b48:	b490      	push	{r4, r7}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012b50:	4b18      	ldr	r3, [pc, #96]	; (8012bb4 <SDMMC_GetCmdResp3+0x6c>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	4a18      	ldr	r2, [pc, #96]	; (8012bb8 <SDMMC_GetCmdResp3+0x70>)
 8012b56:	fba2 2303 	umull	r2, r3, r2, r3
 8012b5a:	0a5b      	lsrs	r3, r3, #9
 8012b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012b64:	4623      	mov	r3, r4
 8012b66:	1e5c      	subs	r4, r3, #1
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d102      	bne.n	8012b72 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012b70:	e01b      	b.n	8012baa <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b76:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d0f0      	beq.n	8012b64 <SDMMC_GetCmdResp3+0x1c>
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d1eb      	bne.n	8012b64 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b90:	f003 0304 	and.w	r3, r3, #4
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d004      	beq.n	8012ba2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2204      	movs	r2, #4
 8012b9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012b9e:	2304      	movs	r3, #4
 8012ba0:	e003      	b.n	8012baa <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	22c5      	movs	r2, #197	; 0xc5
 8012ba6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012ba8:	2300      	movs	r3, #0
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3710      	adds	r7, #16
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bc90      	pop	{r4, r7}
 8012bb2:	4770      	bx	lr
 8012bb4:	2000005c 	.word	0x2000005c
 8012bb8:	10624dd3 	.word	0x10624dd3

08012bbc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012bbc:	b590      	push	{r4, r7, lr}
 8012bbe:	b087      	sub	sp, #28
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	60f8      	str	r0, [r7, #12]
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	607a      	str	r2, [r7, #4]
 8012bc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012bca:	4b34      	ldr	r3, [pc, #208]	; (8012c9c <SDMMC_GetCmdResp6+0xe0>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	4a34      	ldr	r2, [pc, #208]	; (8012ca0 <SDMMC_GetCmdResp6+0xe4>)
 8012bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8012bd4:	0a5b      	lsrs	r3, r3, #9
 8012bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bda:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012bde:	4623      	mov	r3, r4
 8012be0:	1e5c      	subs	r4, r3, #1
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d102      	bne.n	8012bec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012be6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bea:	e052      	b.n	8012c92 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bf0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d0f0      	beq.n	8012bde <SDMMC_GetCmdResp6+0x22>
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d1eb      	bne.n	8012bde <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c0a:	f003 0304 	and.w	r3, r3, #4
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d004      	beq.n	8012c1c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	2204      	movs	r2, #4
 8012c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c18:	2304      	movs	r3, #4
 8012c1a:	e03a      	b.n	8012c92 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c20:	f003 0301 	and.w	r3, r3, #1
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d004      	beq.n	8012c32 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c2e:	2301      	movs	r3, #1
 8012c30:	e02f      	b.n	8012c92 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012c32:	68f8      	ldr	r0, [r7, #12]
 8012c34:	f7ff fbac 	bl	8012390 <SDMMC_GetCommandResponse>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	7afb      	ldrb	r3, [r7, #11]
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	d001      	beq.n	8012c46 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c42:	2301      	movs	r3, #1
 8012c44:	e025      	b.n	8012c92 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	22c5      	movs	r2, #197	; 0xc5
 8012c4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	68f8      	ldr	r0, [r7, #12]
 8012c50:	f7ff fbab 	bl	80123aa <SDMMC_GetResponse>
 8012c54:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d106      	bne.n	8012c6e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	0c1b      	lsrs	r3, r3, #16
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	e011      	b.n	8012c92 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d002      	beq.n	8012c7e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012c7c:	e009      	b.n	8012c92 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012c7e:	693b      	ldr	r3, [r7, #16]
 8012c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d002      	beq.n	8012c8e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c8c:	e001      	b.n	8012c92 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	371c      	adds	r7, #28
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd90      	pop	{r4, r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	2000005c 	.word	0x2000005c
 8012ca0:	10624dd3 	.word	0x10624dd3

08012ca4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012ca4:	b490      	push	{r4, r7}
 8012ca6:	b084      	sub	sp, #16
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012cac:	4b21      	ldr	r3, [pc, #132]	; (8012d34 <SDMMC_GetCmdResp7+0x90>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	4a21      	ldr	r2, [pc, #132]	; (8012d38 <SDMMC_GetCmdResp7+0x94>)
 8012cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8012cb6:	0a5b      	lsrs	r3, r3, #9
 8012cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012cbc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012cc0:	4623      	mov	r3, r4
 8012cc2:	1e5c      	subs	r4, r3, #1
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d102      	bne.n	8012cce <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012cc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ccc:	e02c      	b.n	8012d28 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cd2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d0f0      	beq.n	8012cc0 <SDMMC_GetCmdResp7+0x1c>
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d1eb      	bne.n	8012cc0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cec:	f003 0304 	and.w	r3, r3, #4
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d004      	beq.n	8012cfe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2204      	movs	r2, #4
 8012cf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012cfa:	2304      	movs	r3, #4
 8012cfc:	e014      	b.n	8012d28 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d02:	f003 0301 	and.w	r3, r3, #1
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d004      	beq.n	8012d14 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2201      	movs	r2, #1
 8012d0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d10:	2301      	movs	r3, #1
 8012d12:	e009      	b.n	8012d28 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d002      	beq.n	8012d26 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2240      	movs	r2, #64	; 0x40
 8012d24:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8012d26:	2300      	movs	r3, #0
  
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3710      	adds	r7, #16
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bc90      	pop	{r4, r7}
 8012d30:	4770      	bx	lr
 8012d32:	bf00      	nop
 8012d34:	2000005c 	.word	0x2000005c
 8012d38:	10624dd3 	.word	0x10624dd3

08012d3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d3c:	b084      	sub	sp, #16
 8012d3e:	b580      	push	{r7, lr}
 8012d40:	b084      	sub	sp, #16
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	6078      	str	r0, [r7, #4]
 8012d46:	f107 001c 	add.w	r0, r7, #28
 8012d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	d120      	bne.n	8012d96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	68da      	ldr	r2, [r3, #12]
 8012d64:	4b20      	ldr	r3, [pc, #128]	; (8012de8 <USB_CoreInit+0xac>)
 8012d66:	4013      	ands	r3, r2
 8012d68:	687a      	ldr	r2, [r7, #4]
 8012d6a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d105      	bne.n	8012d8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 f942 	bl	8013014 <USB_CoreReset>
 8012d90:	4603      	mov	r3, r0
 8012d92:	73fb      	strb	r3, [r7, #15]
 8012d94:	e010      	b.n	8012db8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f000 f936 	bl	8013014 <USB_CoreReset>
 8012da8:	4603      	mov	r3, r0
 8012daa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012db0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8012db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	d10b      	bne.n	8012dd6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	689b      	ldr	r3, [r3, #8]
 8012dc2:	f043 0206 	orr.w	r2, r3, #6
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	689b      	ldr	r3, [r3, #8]
 8012dce:	f043 0220 	orr.w	r2, r3, #32
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3710      	adds	r7, #16
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012de2:	b004      	add	sp, #16
 8012de4:	4770      	bx	lr
 8012de6:	bf00      	nop
 8012de8:	ffbdffbf 	.word	0xffbdffbf

08012dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	689b      	ldr	r3, [r3, #8]
 8012df8:	f043 0201 	orr.w	r2, r3, #1
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	370c      	adds	r7, #12
 8012e06:	46bd      	mov	sp, r7
 8012e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0c:	4770      	bx	lr

08012e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012e0e:	b480      	push	{r7}
 8012e10:	b083      	sub	sp, #12
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	689b      	ldr	r3, [r3, #8]
 8012e1a:	f023 0201 	bic.w	r2, r3, #1
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012e22:	2300      	movs	r3, #0
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	370c      	adds	r7, #12
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2e:	4770      	bx	lr

08012e30 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b082      	sub	sp, #8
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	460b      	mov	r3, r1
 8012e3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	68db      	ldr	r3, [r3, #12]
 8012e40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012e48:	78fb      	ldrb	r3, [r7, #3]
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d106      	bne.n	8012e5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	68db      	ldr	r3, [r3, #12]
 8012e52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	60da      	str	r2, [r3, #12]
 8012e5a:	e00b      	b.n	8012e74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8012e5c:	78fb      	ldrb	r3, [r7, #3]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d106      	bne.n	8012e70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	68db      	ldr	r3, [r3, #12]
 8012e66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	60da      	str	r2, [r3, #12]
 8012e6e:	e001      	b.n	8012e74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8012e70:	2301      	movs	r3, #1
 8012e72:	e003      	b.n	8012e7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8012e74:	2032      	movs	r0, #50	; 0x32
 8012e76:	f7f5 fac9 	bl	800840c <HAL_Delay>

  return HAL_OK;
 8012e7a:	2300      	movs	r3, #0
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012e84:	b480      	push	{r7}
 8012e86:	b085      	sub	sp, #20
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
 8012e8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	019b      	lsls	r3, r3, #6
 8012e96:	f043 0220 	orr.w	r2, r3, #32
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	3301      	adds	r3, #1
 8012ea2:	60fb      	str	r3, [r7, #12]
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	4a09      	ldr	r2, [pc, #36]	; (8012ecc <USB_FlushTxFifo+0x48>)
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	d901      	bls.n	8012eb0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012eac:	2303      	movs	r3, #3
 8012eae:	e006      	b.n	8012ebe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	691b      	ldr	r3, [r3, #16]
 8012eb4:	f003 0320 	and.w	r3, r3, #32
 8012eb8:	2b20      	cmp	r3, #32
 8012eba:	d0f0      	beq.n	8012e9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012ebc:	2300      	movs	r3, #0
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3714      	adds	r7, #20
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr
 8012eca:	bf00      	nop
 8012ecc:	00030d40 	.word	0x00030d40

08012ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b085      	sub	sp, #20
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2210      	movs	r2, #16
 8012ee0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	60fb      	str	r3, [r7, #12]
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	4a09      	ldr	r2, [pc, #36]	; (8012f10 <USB_FlushRxFifo+0x40>)
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d901      	bls.n	8012ef4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012ef0:	2303      	movs	r3, #3
 8012ef2:	e006      	b.n	8012f02 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	691b      	ldr	r3, [r3, #16]
 8012ef8:	f003 0310 	and.w	r3, r3, #16
 8012efc:	2b10      	cmp	r3, #16
 8012efe:	d0f0      	beq.n	8012ee2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012f00:	2300      	movs	r3, #0
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3714      	adds	r7, #20
 8012f06:	46bd      	mov	sp, r7
 8012f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0c:	4770      	bx	lr
 8012f0e:	bf00      	nop
 8012f10:	00030d40 	.word	0x00030d40

08012f14 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b089      	sub	sp, #36	; 0x24
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	4611      	mov	r1, r2
 8012f20:	461a      	mov	r2, r3
 8012f22:	460b      	mov	r3, r1
 8012f24:	71fb      	strb	r3, [r7, #7]
 8012f26:	4613      	mov	r3, r2
 8012f28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012f32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d11a      	bne.n	8012f70 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012f3a:	88bb      	ldrh	r3, [r7, #4]
 8012f3c:	3303      	adds	r3, #3
 8012f3e:	089b      	lsrs	r3, r3, #2
 8012f40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012f42:	2300      	movs	r3, #0
 8012f44:	61bb      	str	r3, [r7, #24]
 8012f46:	e00f      	b.n	8012f68 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012f48:	79fb      	ldrb	r3, [r7, #7]
 8012f4a:	031a      	lsls	r2, r3, #12
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	4413      	add	r3, r2
 8012f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012f54:	461a      	mov	r2, r3
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	3304      	adds	r3, #4
 8012f60:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012f62:	69bb      	ldr	r3, [r7, #24]
 8012f64:	3301      	adds	r3, #1
 8012f66:	61bb      	str	r3, [r7, #24]
 8012f68:	69ba      	ldr	r2, [r7, #24]
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d3eb      	bcc.n	8012f48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012f70:	2300      	movs	r3, #0
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3724      	adds	r7, #36	; 0x24
 8012f76:	46bd      	mov	sp, r7
 8012f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7c:	4770      	bx	lr

08012f7e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012f7e:	b480      	push	{r7}
 8012f80:	b089      	sub	sp, #36	; 0x24
 8012f82:	af00      	add	r7, sp, #0
 8012f84:	60f8      	str	r0, [r7, #12]
 8012f86:	60b9      	str	r1, [r7, #8]
 8012f88:	4613      	mov	r3, r2
 8012f8a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012f94:	88fb      	ldrh	r3, [r7, #6]
 8012f96:	3303      	adds	r3, #3
 8012f98:	089b      	lsrs	r3, r3, #2
 8012f9a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	61bb      	str	r3, [r7, #24]
 8012fa0:	e00b      	b.n	8012fba <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	69fb      	ldr	r3, [r7, #28]
 8012fac:	601a      	str	r2, [r3, #0]
    pDest++;
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	3304      	adds	r3, #4
 8012fb2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012fb4:	69bb      	ldr	r3, [r7, #24]
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	61bb      	str	r3, [r7, #24]
 8012fba:	69ba      	ldr	r2, [r7, #24]
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d3ef      	bcc.n	8012fa2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012fc2:	69fb      	ldr	r3, [r7, #28]
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3724      	adds	r7, #36	; 0x24
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fce:	4770      	bx	lr

08012fd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b085      	sub	sp, #20
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	695b      	ldr	r3, [r3, #20]
 8012fdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	699b      	ldr	r3, [r3, #24]
 8012fe2:	68fa      	ldr	r2, [r7, #12]
 8012fe4:	4013      	ands	r3, r2
 8012fe6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	3714      	adds	r7, #20
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr

08012ff6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012ff6:	b480      	push	{r7}
 8012ff8:	b083      	sub	sp, #12
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	695b      	ldr	r3, [r3, #20]
 8013002:	f003 0301 	and.w	r3, r3, #1
}
 8013006:	4618      	mov	r0, r3
 8013008:	370c      	adds	r7, #12
 801300a:	46bd      	mov	sp, r7
 801300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013010:	4770      	bx	lr
	...

08013014 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013014:	b480      	push	{r7}
 8013016:	b085      	sub	sp, #20
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801301c:	2300      	movs	r3, #0
 801301e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	3301      	adds	r3, #1
 8013024:	60fb      	str	r3, [r7, #12]
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	4a13      	ldr	r2, [pc, #76]	; (8013078 <USB_CoreReset+0x64>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d901      	bls.n	8013032 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801302e:	2303      	movs	r3, #3
 8013030:	e01b      	b.n	801306a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	691b      	ldr	r3, [r3, #16]
 8013036:	2b00      	cmp	r3, #0
 8013038:	daf2      	bge.n	8013020 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801303a:	2300      	movs	r3, #0
 801303c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	691b      	ldr	r3, [r3, #16]
 8013042:	f043 0201 	orr.w	r2, r3, #1
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	3301      	adds	r3, #1
 801304e:	60fb      	str	r3, [r7, #12]
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	4a09      	ldr	r2, [pc, #36]	; (8013078 <USB_CoreReset+0x64>)
 8013054:	4293      	cmp	r3, r2
 8013056:	d901      	bls.n	801305c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013058:	2303      	movs	r3, #3
 801305a:	e006      	b.n	801306a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	691b      	ldr	r3, [r3, #16]
 8013060:	f003 0301 	and.w	r3, r3, #1
 8013064:	2b01      	cmp	r3, #1
 8013066:	d0f0      	beq.n	801304a <USB_CoreReset+0x36>

  return HAL_OK;
 8013068:	2300      	movs	r3, #0
}
 801306a:	4618      	mov	r0, r3
 801306c:	3714      	adds	r7, #20
 801306e:	46bd      	mov	sp, r7
 8013070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013074:	4770      	bx	lr
 8013076:	bf00      	nop
 8013078:	00030d40 	.word	0x00030d40

0801307c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801307c:	b084      	sub	sp, #16
 801307e:	b580      	push	{r7, lr}
 8013080:	b084      	sub	sp, #16
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
 8013086:	f107 001c 	add.w	r0, r7, #28
 801308a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013098:	461a      	mov	r2, r3
 801309a:	2300      	movs	r3, #0
 801309c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d018      	beq.n	80130e8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80130b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d10a      	bne.n	80130d2 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	68ba      	ldr	r2, [r7, #8]
 80130c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80130ca:	f043 0304 	orr.w	r3, r3, #4
 80130ce:	6013      	str	r3, [r2, #0]
 80130d0:	e014      	b.n	80130fc <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	68ba      	ldr	r2, [r7, #8]
 80130dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80130e0:	f023 0304 	bic.w	r3, r3, #4
 80130e4:	6013      	str	r3, [r2, #0]
 80130e6:	e009      	b.n	80130fc <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	68ba      	ldr	r2, [r7, #8]
 80130f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80130f6:	f023 0304 	bic.w	r3, r3, #4
 80130fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80130fc:	2110      	movs	r1, #16
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7ff fec0 	bl	8012e84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f7ff fee3 	bl	8012ed0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801310a:	2300      	movs	r3, #0
 801310c:	60fb      	str	r3, [r7, #12]
 801310e:	e015      	b.n	801313c <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	015a      	lsls	r2, r3, #5
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	4413      	add	r3, r2
 8013118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801311c:	461a      	mov	r2, r3
 801311e:	f04f 33ff 	mov.w	r3, #4294967295
 8013122:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	015a      	lsls	r2, r3, #5
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	4413      	add	r3, r2
 801312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013130:	461a      	mov	r2, r3
 8013132:	2300      	movs	r3, #0
 8013134:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	3301      	adds	r3, #1
 801313a:	60fb      	str	r3, [r7, #12]
 801313c:	6a3b      	ldr	r3, [r7, #32]
 801313e:	68fa      	ldr	r2, [r7, #12]
 8013140:	429a      	cmp	r2, r3
 8013142:	d3e5      	bcc.n	8013110 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8013144:	2101      	movs	r1, #1
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f000 f8ac 	bl	80132a4 <USB_DriveVbus>

  HAL_Delay(200U);
 801314c:	20c8      	movs	r0, #200	; 0xc8
 801314e:	f7f5 f95d 	bl	800840c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2200      	movs	r2, #0
 8013156:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f04f 32ff 	mov.w	r2, #4294967295
 801315e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013168:	2b00      	cmp	r3, #0
 801316a:	d00b      	beq.n	8013184 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013172:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	4a14      	ldr	r2, [pc, #80]	; (80131c8 <USB_HostInit+0x14c>)
 8013178:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	4a13      	ldr	r2, [pc, #76]	; (80131cc <USB_HostInit+0x150>)
 801317e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8013182:	e009      	b.n	8013198 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2280      	movs	r2, #128	; 0x80
 8013188:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	4a10      	ldr	r2, [pc, #64]	; (80131d0 <USB_HostInit+0x154>)
 801318e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	4a10      	ldr	r2, [pc, #64]	; (80131d4 <USB_HostInit+0x158>)
 8013194:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319a:	2b00      	cmp	r3, #0
 801319c:	d105      	bne.n	80131aa <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	699b      	ldr	r3, [r3, #24]
 80131a2:	f043 0210 	orr.w	r2, r3, #16
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	699a      	ldr	r2, [r3, #24]
 80131ae:	4b0a      	ldr	r3, [pc, #40]	; (80131d8 <USB_HostInit+0x15c>)
 80131b0:	4313      	orrs	r3, r2
 80131b2:	687a      	ldr	r2, [r7, #4]
 80131b4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3710      	adds	r7, #16
 80131bc:	46bd      	mov	sp, r7
 80131be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80131c2:	b004      	add	sp, #16
 80131c4:	4770      	bx	lr
 80131c6:	bf00      	nop
 80131c8:	01000200 	.word	0x01000200
 80131cc:	00e00300 	.word	0x00e00300
 80131d0:	00600080 	.word	0x00600080
 80131d4:	004000e0 	.word	0x004000e0
 80131d8:	a3200008 	.word	0xa3200008

080131dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80131dc:	b480      	push	{r7}
 80131de:	b085      	sub	sp, #20
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	460b      	mov	r3, r1
 80131e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	68fa      	ldr	r2, [r7, #12]
 80131f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80131fa:	f023 0303 	bic.w	r3, r3, #3
 80131fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	78fb      	ldrb	r3, [r7, #3]
 801320a:	f003 0303 	and.w	r3, r3, #3
 801320e:	68f9      	ldr	r1, [r7, #12]
 8013210:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013214:	4313      	orrs	r3, r2
 8013216:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8013218:	78fb      	ldrb	r3, [r7, #3]
 801321a:	2b01      	cmp	r3, #1
 801321c:	d107      	bne.n	801322e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013224:	461a      	mov	r2, r3
 8013226:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801322a:	6053      	str	r3, [r2, #4]
 801322c:	e009      	b.n	8013242 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801322e:	78fb      	ldrb	r3, [r7, #3]
 8013230:	2b02      	cmp	r3, #2
 8013232:	d106      	bne.n	8013242 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801323a:	461a      	mov	r2, r3
 801323c:	f241 7370 	movw	r3, #6000	; 0x1770
 8013240:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8013242:	2300      	movs	r3, #0
}
 8013244:	4618      	mov	r0, r3
 8013246:	3714      	adds	r7, #20
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr

08013250 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b084      	sub	sp, #16
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 801325c:	2300      	movs	r3, #0
 801325e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8013270:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	68fa      	ldr	r2, [r7, #12]
 8013276:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801327a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801327e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8013280:	2064      	movs	r0, #100	; 0x64
 8013282:	f7f5 f8c3 	bl	800840c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	68fa      	ldr	r2, [r7, #12]
 801328a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801328e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013292:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8013294:	200a      	movs	r0, #10
 8013296:	f7f5 f8b9 	bl	800840c <HAL_Delay>

  return HAL_OK;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	460b      	mov	r3, r1
 80132ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80132b4:	2300      	movs	r3, #0
 80132b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80132c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d109      	bne.n	80132e8 <USB_DriveVbus+0x44>
 80132d4:	78fb      	ldrb	r3, [r7, #3]
 80132d6:	2b01      	cmp	r3, #1
 80132d8:	d106      	bne.n	80132e8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80132e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80132e6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80132ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80132f2:	d109      	bne.n	8013308 <USB_DriveVbus+0x64>
 80132f4:	78fb      	ldrb	r3, [r7, #3]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d106      	bne.n	8013308 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	68fa      	ldr	r2, [r7, #12]
 80132fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8013302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013306:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8013308:	2300      	movs	r3, #0
}
 801330a:	4618      	mov	r0, r3
 801330c:	3714      	adds	r7, #20
 801330e:	46bd      	mov	sp, r7
 8013310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013314:	4770      	bx	lr

08013316 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013316:	b480      	push	{r7}
 8013318:	b085      	sub	sp, #20
 801331a:	af00      	add	r7, sp, #0
 801331c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8013322:	2300      	movs	r3, #0
 8013324:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	0c5b      	lsrs	r3, r3, #17
 8013334:	f003 0303 	and.w	r3, r3, #3
}
 8013338:	4618      	mov	r0, r3
 801333a:	3714      	adds	r7, #20
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013356:	689b      	ldr	r3, [r3, #8]
 8013358:	b29b      	uxth	r3, r3
}
 801335a:	4618      	mov	r0, r3
 801335c:	3714      	adds	r7, #20
 801335e:	46bd      	mov	sp, r7
 8013360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013364:	4770      	bx	lr
	...

08013368 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8013368:	b480      	push	{r7}
 801336a:	b087      	sub	sp, #28
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	4608      	mov	r0, r1
 8013372:	4611      	mov	r1, r2
 8013374:	461a      	mov	r2, r3
 8013376:	4603      	mov	r3, r0
 8013378:	70fb      	strb	r3, [r7, #3]
 801337a:	460b      	mov	r3, r1
 801337c:	70bb      	strb	r3, [r7, #2]
 801337e:	4613      	mov	r3, r2
 8013380:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8013382:	2300      	movs	r3, #0
 8013384:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 801338a:	78fb      	ldrb	r3, [r7, #3]
 801338c:	015a      	lsls	r2, r3, #5
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	4413      	add	r3, r2
 8013392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013396:	461a      	mov	r2, r3
 8013398:	f04f 33ff 	mov.w	r3, #4294967295
 801339c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801339e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80133a2:	2b03      	cmp	r3, #3
 80133a4:	d87e      	bhi.n	80134a4 <USB_HC_Init+0x13c>
 80133a6:	a201      	add	r2, pc, #4	; (adr r2, 80133ac <USB_HC_Init+0x44>)
 80133a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ac:	080133bd 	.word	0x080133bd
 80133b0:	08013467 	.word	0x08013467
 80133b4:	080133bd 	.word	0x080133bd
 80133b8:	08013429 	.word	0x08013429
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80133bc:	78fb      	ldrb	r3, [r7, #3]
 80133be:	015a      	lsls	r2, r3, #5
 80133c0:	68bb      	ldr	r3, [r7, #8]
 80133c2:	4413      	add	r3, r2
 80133c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133c8:	461a      	mov	r2, r3
 80133ca:	f240 439d 	movw	r3, #1181	; 0x49d
 80133ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80133d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	da10      	bge.n	80133fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80133d8:	78fb      	ldrb	r3, [r7, #3]
 80133da:	015a      	lsls	r2, r3, #5
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	4413      	add	r3, r2
 80133e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	78fa      	ldrb	r2, [r7, #3]
 80133e8:	0151      	lsls	r1, r2, #5
 80133ea:	68ba      	ldr	r2, [r7, #8]
 80133ec:	440a      	add	r2, r1
 80133ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80133f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80133f6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80133f8:	e057      	b.n	80134aa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013402:	2b00      	cmp	r3, #0
 8013404:	d051      	beq.n	80134aa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8013406:	78fb      	ldrb	r3, [r7, #3]
 8013408:	015a      	lsls	r2, r3, #5
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	4413      	add	r3, r2
 801340e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	78fa      	ldrb	r2, [r7, #3]
 8013416:	0151      	lsls	r1, r2, #5
 8013418:	68ba      	ldr	r2, [r7, #8]
 801341a:	440a      	add	r2, r1
 801341c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013420:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013424:	60d3      	str	r3, [r2, #12]
      break;
 8013426:	e040      	b.n	80134aa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013428:	78fb      	ldrb	r3, [r7, #3]
 801342a:	015a      	lsls	r2, r3, #5
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	4413      	add	r3, r2
 8013430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013434:	461a      	mov	r2, r3
 8013436:	f240 639d 	movw	r3, #1693	; 0x69d
 801343a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801343c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013440:	2b00      	cmp	r3, #0
 8013442:	da34      	bge.n	80134ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8013444:	78fb      	ldrb	r3, [r7, #3]
 8013446:	015a      	lsls	r2, r3, #5
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	4413      	add	r3, r2
 801344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013450:	68db      	ldr	r3, [r3, #12]
 8013452:	78fa      	ldrb	r2, [r7, #3]
 8013454:	0151      	lsls	r1, r2, #5
 8013456:	68ba      	ldr	r2, [r7, #8]
 8013458:	440a      	add	r2, r1
 801345a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013462:	60d3      	str	r3, [r2, #12]
      }

      break;
 8013464:	e023      	b.n	80134ae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8013466:	78fb      	ldrb	r3, [r7, #3]
 8013468:	015a      	lsls	r2, r3, #5
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	4413      	add	r3, r2
 801346e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013472:	461a      	mov	r2, r3
 8013474:	f240 2325 	movw	r3, #549	; 0x225
 8013478:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801347a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801347e:	2b00      	cmp	r3, #0
 8013480:	da17      	bge.n	80134b2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8013482:	78fb      	ldrb	r3, [r7, #3]
 8013484:	015a      	lsls	r2, r3, #5
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	4413      	add	r3, r2
 801348a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	78fa      	ldrb	r2, [r7, #3]
 8013492:	0151      	lsls	r1, r2, #5
 8013494:	68ba      	ldr	r2, [r7, #8]
 8013496:	440a      	add	r2, r1
 8013498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801349c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80134a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80134a2:	e006      	b.n	80134b2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80134a4:	2301      	movs	r3, #1
 80134a6:	75fb      	strb	r3, [r7, #23]
      break;
 80134a8:	e004      	b.n	80134b4 <USB_HC_Init+0x14c>
      break;
 80134aa:	bf00      	nop
 80134ac:	e002      	b.n	80134b4 <USB_HC_Init+0x14c>
      break;
 80134ae:	bf00      	nop
 80134b0:	e000      	b.n	80134b4 <USB_HC_Init+0x14c>
      break;
 80134b2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80134ba:	699a      	ldr	r2, [r3, #24]
 80134bc:	78fb      	ldrb	r3, [r7, #3]
 80134be:	f003 030f 	and.w	r3, r3, #15
 80134c2:	2101      	movs	r1, #1
 80134c4:	fa01 f303 	lsl.w	r3, r1, r3
 80134c8:	68b9      	ldr	r1, [r7, #8]
 80134ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80134ce:	4313      	orrs	r3, r2
 80134d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	699b      	ldr	r3, [r3, #24]
 80134d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80134de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	da03      	bge.n	80134ee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80134e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134ea:	613b      	str	r3, [r7, #16]
 80134ec:	e001      	b.n	80134f2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80134ee:	2300      	movs	r3, #0
 80134f0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80134f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80134f6:	2b02      	cmp	r3, #2
 80134f8:	d103      	bne.n	8013502 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80134fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80134fe:	60fb      	str	r3, [r7, #12]
 8013500:	e001      	b.n	8013506 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8013502:	2300      	movs	r3, #0
 8013504:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013506:	787b      	ldrb	r3, [r7, #1]
 8013508:	059b      	lsls	r3, r3, #22
 801350a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801350e:	78bb      	ldrb	r3, [r7, #2]
 8013510:	02db      	lsls	r3, r3, #11
 8013512:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013516:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8013518:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801351c:	049b      	lsls	r3, r3, #18
 801351e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8013522:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8013524:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013526:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801352a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013530:	78fb      	ldrb	r3, [r7, #3]
 8013532:	0159      	lsls	r1, r3, #5
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	440b      	add	r3, r1
 8013538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801353c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8013542:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8013544:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013548:	2b03      	cmp	r3, #3
 801354a:	d10f      	bne.n	801356c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 801354c:	78fb      	ldrb	r3, [r7, #3]
 801354e:	015a      	lsls	r2, r3, #5
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	4413      	add	r3, r2
 8013554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	78fa      	ldrb	r2, [r7, #3]
 801355c:	0151      	lsls	r1, r2, #5
 801355e:	68ba      	ldr	r2, [r7, #8]
 8013560:	440a      	add	r2, r1
 8013562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013566:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801356a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 801356c:	7dfb      	ldrb	r3, [r7, #23]
}
 801356e:	4618      	mov	r0, r3
 8013570:	371c      	adds	r7, #28
 8013572:	46bd      	mov	sp, r7
 8013574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013578:	4770      	bx	lr
 801357a:	bf00      	nop

0801357c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b08c      	sub	sp, #48	; 0x30
 8013580:	af02      	add	r7, sp, #8
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	60b9      	str	r1, [r7, #8]
 8013586:	4613      	mov	r3, r2
 8013588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	785b      	ldrb	r3, [r3, #1]
 8013592:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8013594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013598:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d028      	beq.n	80135f8 <USB_HC_StartXfer+0x7c>
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	791b      	ldrb	r3, [r3, #4]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d124      	bne.n	80135f8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80135ae:	79fb      	ldrb	r3, [r7, #7]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d10b      	bne.n	80135cc <USB_HC_StartXfer+0x50>
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	795b      	ldrb	r3, [r3, #5]
 80135b8:	2b01      	cmp	r3, #1
 80135ba:	d107      	bne.n	80135cc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	785b      	ldrb	r3, [r3, #1]
 80135c0:	4619      	mov	r1, r3
 80135c2:	68f8      	ldr	r0, [r7, #12]
 80135c4:	f000 fa2c 	bl	8013a20 <USB_DoPing>
      return HAL_OK;
 80135c8:	2300      	movs	r3, #0
 80135ca:	e111      	b.n	80137f0 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 80135cc:	79fb      	ldrb	r3, [r7, #7]
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	d112      	bne.n	80135f8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80135d2:	69fb      	ldr	r3, [r7, #28]
 80135d4:	015a      	lsls	r2, r3, #5
 80135d6:	6a3b      	ldr	r3, [r7, #32]
 80135d8:	4413      	add	r3, r2
 80135da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	69fa      	ldr	r2, [r7, #28]
 80135e2:	0151      	lsls	r1, r2, #5
 80135e4:	6a3a      	ldr	r2, [r7, #32]
 80135e6:	440a      	add	r2, r1
 80135e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80135ec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80135f0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	2200      	movs	r2, #0
 80135f6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	691b      	ldr	r3, [r3, #16]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d018      	beq.n	8013632 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	691b      	ldr	r3, [r3, #16]
 8013604:	68ba      	ldr	r2, [r7, #8]
 8013606:	8912      	ldrh	r2, [r2, #8]
 8013608:	4413      	add	r3, r2
 801360a:	3b01      	subs	r3, #1
 801360c:	68ba      	ldr	r2, [r7, #8]
 801360e:	8912      	ldrh	r2, [r2, #8]
 8013610:	fbb3 f3f2 	udiv	r3, r3, r2
 8013614:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8013616:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013618:	8b7b      	ldrh	r3, [r7, #26]
 801361a:	429a      	cmp	r2, r3
 801361c:	d90b      	bls.n	8013636 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 801361e:	8b7b      	ldrh	r3, [r7, #26]
 8013620:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8013622:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013624:	68ba      	ldr	r2, [r7, #8]
 8013626:	8912      	ldrh	r2, [r2, #8]
 8013628:	fb02 f203 	mul.w	r2, r2, r3
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	611a      	str	r2, [r3, #16]
 8013630:	e001      	b.n	8013636 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8013632:	2301      	movs	r3, #1
 8013634:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	78db      	ldrb	r3, [r3, #3]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d006      	beq.n	801364c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 801363e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013640:	68ba      	ldr	r2, [r7, #8]
 8013642:	8912      	ldrh	r2, [r2, #8]
 8013644:	fb02 f203 	mul.w	r2, r2, r3
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	691b      	ldr	r3, [r3, #16]
 8013650:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013656:	04d9      	lsls	r1, r3, #19
 8013658:	4b67      	ldr	r3, [pc, #412]	; (80137f8 <USB_HC_StartXfer+0x27c>)
 801365a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801365c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	7a9b      	ldrb	r3, [r3, #10]
 8013662:	075b      	lsls	r3, r3, #29
 8013664:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8013668:	69f9      	ldr	r1, [r7, #28]
 801366a:	0148      	lsls	r0, r1, #5
 801366c:	6a39      	ldr	r1, [r7, #32]
 801366e:	4401      	add	r1, r0
 8013670:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013674:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8013676:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8013678:	79fb      	ldrb	r3, [r7, #7]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d009      	beq.n	8013692 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	68d9      	ldr	r1, [r3, #12]
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	015a      	lsls	r2, r3, #5
 8013686:	6a3b      	ldr	r3, [r7, #32]
 8013688:	4413      	add	r3, r2
 801368a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801368e:	460a      	mov	r2, r1
 8013690:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8013692:	6a3b      	ldr	r3, [r7, #32]
 8013694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013698:	689b      	ldr	r3, [r3, #8]
 801369a:	f003 0301 	and.w	r3, r3, #1
 801369e:	2b00      	cmp	r3, #0
 80136a0:	bf0c      	ite	eq
 80136a2:	2301      	moveq	r3, #1
 80136a4:	2300      	movne	r3, #0
 80136a6:	b2db      	uxtb	r3, r3
 80136a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	015a      	lsls	r2, r3, #5
 80136ae:	6a3b      	ldr	r3, [r7, #32]
 80136b0:	4413      	add	r3, r2
 80136b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	69fa      	ldr	r2, [r7, #28]
 80136ba:	0151      	lsls	r1, r2, #5
 80136bc:	6a3a      	ldr	r2, [r7, #32]
 80136be:	440a      	add	r2, r1
 80136c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80136c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80136c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80136ca:	69fb      	ldr	r3, [r7, #28]
 80136cc:	015a      	lsls	r2, r3, #5
 80136ce:	6a3b      	ldr	r3, [r7, #32]
 80136d0:	4413      	add	r3, r2
 80136d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	7e7b      	ldrb	r3, [r7, #25]
 80136da:	075b      	lsls	r3, r3, #29
 80136dc:	69f9      	ldr	r1, [r7, #28]
 80136de:	0148      	lsls	r0, r1, #5
 80136e0:	6a39      	ldr	r1, [r7, #32]
 80136e2:	4401      	add	r1, r0
 80136e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80136e8:	4313      	orrs	r3, r2
 80136ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80136ec:	69fb      	ldr	r3, [r7, #28]
 80136ee:	015a      	lsls	r2, r3, #5
 80136f0:	6a3b      	ldr	r3, [r7, #32]
 80136f2:	4413      	add	r3, r2
 80136f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	4a40      	ldr	r2, [pc, #256]	; (80137fc <USB_HC_StartXfer+0x280>)
 80136fc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80136fe:	4b3f      	ldr	r3, [pc, #252]	; (80137fc <USB_HC_StartXfer+0x280>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013706:	4a3d      	ldr	r2, [pc, #244]	; (80137fc <USB_HC_StartXfer+0x280>)
 8013708:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	78db      	ldrb	r3, [r3, #3]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d006      	beq.n	8013720 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8013712:	4b3a      	ldr	r3, [pc, #232]	; (80137fc <USB_HC_StartXfer+0x280>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801371a:	4a38      	ldr	r2, [pc, #224]	; (80137fc <USB_HC_StartXfer+0x280>)
 801371c:	6013      	str	r3, [r2, #0]
 801371e:	e005      	b.n	801372c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8013720:	4b36      	ldr	r3, [pc, #216]	; (80137fc <USB_HC_StartXfer+0x280>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013728:	4a34      	ldr	r2, [pc, #208]	; (80137fc <USB_HC_StartXfer+0x280>)
 801372a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801372c:	4b33      	ldr	r3, [pc, #204]	; (80137fc <USB_HC_StartXfer+0x280>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013734:	4a31      	ldr	r2, [pc, #196]	; (80137fc <USB_HC_StartXfer+0x280>)
 8013736:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	015a      	lsls	r2, r3, #5
 801373c:	6a3b      	ldr	r3, [r7, #32]
 801373e:	4413      	add	r3, r2
 8013740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013744:	461a      	mov	r2, r3
 8013746:	4b2d      	ldr	r3, [pc, #180]	; (80137fc <USB_HC_StartXfer+0x280>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 801374c:	79fb      	ldrb	r3, [r7, #7]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d14d      	bne.n	80137ee <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	78db      	ldrb	r3, [r3, #3]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d149      	bne.n	80137ee <USB_HC_StartXfer+0x272>
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	691b      	ldr	r3, [r3, #16]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d045      	beq.n	80137ee <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	79db      	ldrb	r3, [r3, #7]
 8013766:	2b03      	cmp	r3, #3
 8013768:	d830      	bhi.n	80137cc <USB_HC_StartXfer+0x250>
 801376a:	a201      	add	r2, pc, #4	; (adr r2, 8013770 <USB_HC_StartXfer+0x1f4>)
 801376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013770:	08013781 	.word	0x08013781
 8013774:	080137a5 	.word	0x080137a5
 8013778:	08013781 	.word	0x08013781
 801377c:	080137a5 	.word	0x080137a5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	691b      	ldr	r3, [r3, #16]
 8013784:	3303      	adds	r3, #3
 8013786:	089b      	lsrs	r3, r3, #2
 8013788:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801378a:	8afa      	ldrh	r2, [r7, #22]
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013790:	b29b      	uxth	r3, r3
 8013792:	429a      	cmp	r2, r3
 8013794:	d91c      	bls.n	80137d0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	699b      	ldr	r3, [r3, #24]
 801379a:	f043 0220 	orr.w	r2, r3, #32
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	619a      	str	r2, [r3, #24]
          }
          break;
 80137a2:	e015      	b.n	80137d0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	691b      	ldr	r3, [r3, #16]
 80137a8:	3303      	adds	r3, #3
 80137aa:	089b      	lsrs	r3, r3, #2
 80137ac:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80137ae:	8afa      	ldrh	r2, [r7, #22]
 80137b0:	6a3b      	ldr	r3, [r7, #32]
 80137b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80137b6:	691b      	ldr	r3, [r3, #16]
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d90a      	bls.n	80137d4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	699b      	ldr	r3, [r3, #24]
 80137c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	619a      	str	r2, [r3, #24]
          }
          break;
 80137ca:	e003      	b.n	80137d4 <USB_HC_StartXfer+0x258>

        default:
          break;
 80137cc:	bf00      	nop
 80137ce:	e002      	b.n	80137d6 <USB_HC_StartXfer+0x25a>
          break;
 80137d0:	bf00      	nop
 80137d2:	e000      	b.n	80137d6 <USB_HC_StartXfer+0x25a>
          break;
 80137d4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	68d9      	ldr	r1, [r3, #12]
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	785a      	ldrb	r2, [r3, #1]
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	691b      	ldr	r3, [r3, #16]
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	2000      	movs	r0, #0
 80137e6:	9000      	str	r0, [sp, #0]
 80137e8:	68f8      	ldr	r0, [r7, #12]
 80137ea:	f7ff fb93 	bl	8012f14 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80137ee:	2300      	movs	r3, #0
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3728      	adds	r7, #40	; 0x28
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	1ff80000 	.word	0x1ff80000
 80137fc:	2000037c 	.word	0x2000037c

08013800 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013800:	b480      	push	{r7}
 8013802:	b085      	sub	sp, #20
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013812:	695b      	ldr	r3, [r3, #20]
 8013814:	b29b      	uxth	r3, r3
}
 8013816:	4618      	mov	r0, r3
 8013818:	3714      	adds	r7, #20
 801381a:	46bd      	mov	sp, r7
 801381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013820:	4770      	bx	lr

08013822 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8013822:	b480      	push	{r7}
 8013824:	b087      	sub	sp, #28
 8013826:	af00      	add	r7, sp, #0
 8013828:	6078      	str	r0, [r7, #4]
 801382a:	460b      	mov	r3, r1
 801382c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8013832:	78fb      	ldrb	r3, [r7, #3]
 8013834:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8013836:	2300      	movs	r3, #0
 8013838:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	015a      	lsls	r2, r3, #5
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	4413      	add	r3, r2
 8013842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	0c9b      	lsrs	r3, r3, #18
 801384a:	f003 0303 	and.w	r3, r3, #3
 801384e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d002      	beq.n	801385c <USB_HC_Halt+0x3a>
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	2b02      	cmp	r3, #2
 801385a:	d16c      	bne.n	8013936 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	015a      	lsls	r2, r3, #5
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	4413      	add	r3, r2
 8013864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	68fa      	ldr	r2, [r7, #12]
 801386c:	0151      	lsls	r1, r2, #5
 801386e:	693a      	ldr	r2, [r7, #16]
 8013870:	440a      	add	r2, r1
 8013872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801387a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013880:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013884:	2b00      	cmp	r3, #0
 8013886:	d143      	bne.n	8013910 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	015a      	lsls	r2, r3, #5
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	4413      	add	r3, r2
 8013890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	68fa      	ldr	r2, [r7, #12]
 8013898:	0151      	lsls	r1, r2, #5
 801389a:	693a      	ldr	r2, [r7, #16]
 801389c:	440a      	add	r2, r1
 801389e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80138a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80138a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	015a      	lsls	r2, r3, #5
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	4413      	add	r3, r2
 80138b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	68fa      	ldr	r2, [r7, #12]
 80138b8:	0151      	lsls	r1, r2, #5
 80138ba:	693a      	ldr	r2, [r7, #16]
 80138bc:	440a      	add	r2, r1
 80138be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80138c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80138c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	015a      	lsls	r2, r3, #5
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	4413      	add	r3, r2
 80138d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	68fa      	ldr	r2, [r7, #12]
 80138d8:	0151      	lsls	r1, r2, #5
 80138da:	693a      	ldr	r2, [r7, #16]
 80138dc:	440a      	add	r2, r1
 80138de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80138e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80138e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	3301      	adds	r3, #1
 80138ec:	617b      	str	r3, [r7, #20]
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80138f4:	d81d      	bhi.n	8013932 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	015a      	lsls	r2, r3, #5
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	4413      	add	r3, r2
 80138fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801390c:	d0ec      	beq.n	80138e8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801390e:	e080      	b.n	8013a12 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	015a      	lsls	r2, r3, #5
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	4413      	add	r3, r2
 8013918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	68fa      	ldr	r2, [r7, #12]
 8013920:	0151      	lsls	r1, r2, #5
 8013922:	693a      	ldr	r2, [r7, #16]
 8013924:	440a      	add	r2, r1
 8013926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801392a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801392e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8013930:	e06f      	b.n	8013a12 <USB_HC_Halt+0x1f0>
          break;
 8013932:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8013934:	e06d      	b.n	8013a12 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	015a      	lsls	r2, r3, #5
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	4413      	add	r3, r2
 801393e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	68fa      	ldr	r2, [r7, #12]
 8013946:	0151      	lsls	r1, r2, #5
 8013948:	693a      	ldr	r2, [r7, #16]
 801394a:	440a      	add	r2, r1
 801394c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013954:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801395c:	691b      	ldr	r3, [r3, #16]
 801395e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013962:	2b00      	cmp	r3, #0
 8013964:	d143      	bne.n	80139ee <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	015a      	lsls	r2, r3, #5
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	4413      	add	r3, r2
 801396e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	68fa      	ldr	r2, [r7, #12]
 8013976:	0151      	lsls	r1, r2, #5
 8013978:	693a      	ldr	r2, [r7, #16]
 801397a:	440a      	add	r2, r1
 801397c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013984:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	015a      	lsls	r2, r3, #5
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	4413      	add	r3, r2
 801398e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	68fa      	ldr	r2, [r7, #12]
 8013996:	0151      	lsls	r1, r2, #5
 8013998:	693a      	ldr	r2, [r7, #16]
 801399a:	440a      	add	r2, r1
 801399c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80139a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80139a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	015a      	lsls	r2, r3, #5
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	4413      	add	r3, r2
 80139ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	68fa      	ldr	r2, [r7, #12]
 80139b6:	0151      	lsls	r1, r2, #5
 80139b8:	693a      	ldr	r2, [r7, #16]
 80139ba:	440a      	add	r2, r1
 80139bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80139c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80139c4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	3301      	adds	r3, #1
 80139ca:	617b      	str	r3, [r7, #20]
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80139d2:	d81d      	bhi.n	8013a10 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	015a      	lsls	r2, r3, #5
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	4413      	add	r3, r2
 80139dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139ea:	d0ec      	beq.n	80139c6 <USB_HC_Halt+0x1a4>
 80139ec:	e011      	b.n	8013a12 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	015a      	lsls	r2, r3, #5
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	4413      	add	r3, r2
 80139f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	68fa      	ldr	r2, [r7, #12]
 80139fe:	0151      	lsls	r1, r2, #5
 8013a00:	693a      	ldr	r2, [r7, #16]
 8013a02:	440a      	add	r2, r1
 8013a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013a0c:	6013      	str	r3, [r2, #0]
 8013a0e:	e000      	b.n	8013a12 <USB_HC_Halt+0x1f0>
          break;
 8013a10:	bf00      	nop
    }
  }

  return HAL_OK;
 8013a12:	2300      	movs	r3, #0
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	371c      	adds	r7, #28
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr

08013a20 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b087      	sub	sp, #28
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	460b      	mov	r3, r1
 8013a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8013a30:	78fb      	ldrb	r3, [r7, #3]
 8013a32:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8013a34:	2301      	movs	r3, #1
 8013a36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	04da      	lsls	r2, r3, #19
 8013a3c:	4b15      	ldr	r3, [pc, #84]	; (8013a94 <USB_DoPing+0x74>)
 8013a3e:	4013      	ands	r3, r2
 8013a40:	693a      	ldr	r2, [r7, #16]
 8013a42:	0151      	lsls	r1, r2, #5
 8013a44:	697a      	ldr	r2, [r7, #20]
 8013a46:	440a      	add	r2, r1
 8013a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013a50:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	015a      	lsls	r2, r3, #5
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	4413      	add	r3, r2
 8013a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013a68:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013a70:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	015a      	lsls	r2, r3, #5
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	4413      	add	r3, r2
 8013a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013a7e:	461a      	mov	r2, r3
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8013a84:	2300      	movs	r3, #0
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	371c      	adds	r7, #28
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a90:	4770      	bx	lr
 8013a92:	bf00      	nop
 8013a94:	1ff80000 	.word	0x1ff80000

08013a98 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b086      	sub	sp, #24
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7ff f9b0 	bl	8012e0e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8013aae:	2110      	movs	r1, #16
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f7ff f9e7 	bl	8012e84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f7ff fa0a 	bl	8012ed0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8013abc:	2300      	movs	r3, #0
 8013abe:	613b      	str	r3, [r7, #16]
 8013ac0:	e01f      	b.n	8013b02 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	015a      	lsls	r2, r3, #5
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	4413      	add	r3, r2
 8013aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ad8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ae0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013ae8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	015a      	lsls	r2, r3, #5
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	4413      	add	r3, r2
 8013af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013af6:	461a      	mov	r2, r3
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	3301      	adds	r3, #1
 8013b00:	613b      	str	r3, [r7, #16]
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	2b0f      	cmp	r3, #15
 8013b06:	d9dc      	bls.n	8013ac2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8013b08:	2300      	movs	r3, #0
 8013b0a:	613b      	str	r3, [r7, #16]
 8013b0c:	e034      	b.n	8013b78 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8013b0e:	693b      	ldr	r3, [r7, #16]
 8013b10:	015a      	lsls	r2, r3, #5
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	4413      	add	r3, r2
 8013b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013b24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013b2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013b34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	015a      	lsls	r2, r3, #5
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	4413      	add	r3, r2
 8013b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b42:	461a      	mov	r2, r3
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	617b      	str	r3, [r7, #20]
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013b54:	d80c      	bhi.n	8013b70 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	015a      	lsls	r2, r3, #5
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	4413      	add	r3, r2
 8013b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b6c:	d0ec      	beq.n	8013b48 <USB_StopHost+0xb0>
 8013b6e:	e000      	b.n	8013b72 <USB_StopHost+0xda>
        break;
 8013b70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	3301      	adds	r3, #1
 8013b76:	613b      	str	r3, [r7, #16]
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	2b0f      	cmp	r3, #15
 8013b7c:	d9c7      	bls.n	8013b0e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013b84:	461a      	mov	r2, r3
 8013b86:	f04f 33ff 	mov.w	r3, #4294967295
 8013b8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f7ff f929 	bl	8012dec <USB_EnableGlobalInt>

  return HAL_OK;
 8013b9a:	2300      	movs	r3, #0
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3718      	adds	r7, #24
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af02      	add	r7, sp, #8
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	4608      	mov	r0, r1
 8013bae:	4611      	mov	r1, r2
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	70fb      	strb	r3, [r7, #3]
 8013bb6:	460b      	mov	r3, r1
 8013bb8:	70bb      	strb	r3, [r7, #2]
 8013bba:	4613      	mov	r3, r2
 8013bbc:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8013bbe:	78fa      	ldrb	r2, [r7, #3]
 8013bc0:	787b      	ldrb	r3, [r7, #1]
 8013bc2:	4413      	add	r3, r2
 8013bc4:	b2d8      	uxtb	r0, r3
 8013bc6:	78ba      	ldrb	r2, [r7, #2]
 8013bc8:	7c3b      	ldrb	r3, [r7, #16]
 8013bca:	4413      	add	r3, r2
 8013bcc:	b2db      	uxtb	r3, r3
 8013bce:	78ba      	ldrb	r2, [r7, #2]
 8013bd0:	78f9      	ldrb	r1, [r7, #3]
 8013bd2:	9300      	str	r3, [sp, #0]
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f001 fb27 	bl	801522a <u8g2_IsIntersection>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d012      	beq.n	8013c08 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8013be2:	e00d      	b.n	8013c00 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8013be4:	787b      	ldrb	r3, [r7, #1]
 8013be6:	78ba      	ldrb	r2, [r7, #2]
 8013be8:	78f9      	ldrb	r1, [r7, #3]
 8013bea:	2000      	movs	r0, #0
 8013bec:	9000      	str	r0, [sp, #0]
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f001 f86f 	bl	8014cd2 <u8g2_DrawHVLine>
    y++;    
 8013bf4:	78bb      	ldrb	r3, [r7, #2]
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	70bb      	strb	r3, [r7, #2]
    h--;
 8013bfa:	7c3b      	ldrb	r3, [r7, #16]
 8013bfc:	3b01      	subs	r3, #1
 8013bfe:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8013c00:	7c3b      	ldrb	r3, [r7, #16]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d1ee      	bne.n	8013be4 <u8g2_DrawBox+0x40>
 8013c06:	e000      	b.n	8013c0a <u8g2_DrawBox+0x66>
    return;
 8013c08:	bf00      	nop
  }
}
 8013c0a:	3708      	adds	r7, #8
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b086      	sub	sp, #24
 8013c14:	af02      	add	r7, sp, #8
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	4608      	mov	r0, r1
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	4603      	mov	r3, r0
 8013c20:	70fb      	strb	r3, [r7, #3]
 8013c22:	460b      	mov	r3, r1
 8013c24:	70bb      	strb	r3, [r7, #2]
 8013c26:	4613      	mov	r3, r2
 8013c28:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8013c2a:	78fb      	ldrb	r3, [r7, #3]
 8013c2c:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8013c2e:	78fa      	ldrb	r2, [r7, #3]
 8013c30:	787b      	ldrb	r3, [r7, #1]
 8013c32:	4413      	add	r3, r2
 8013c34:	b2d8      	uxtb	r0, r3
 8013c36:	78ba      	ldrb	r2, [r7, #2]
 8013c38:	7e3b      	ldrb	r3, [r7, #24]
 8013c3a:	4413      	add	r3, r2
 8013c3c:	b2db      	uxtb	r3, r3
 8013c3e:	78ba      	ldrb	r2, [r7, #2]
 8013c40:	78f9      	ldrb	r1, [r7, #3]
 8013c42:	9300      	str	r3, [sp, #0]
 8013c44:	4603      	mov	r3, r0
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f001 faef 	bl	801522a <u8g2_IsIntersection>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d037      	beq.n	8013cc2 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8013c52:	787b      	ldrb	r3, [r7, #1]
 8013c54:	78ba      	ldrb	r2, [r7, #2]
 8013c56:	78f9      	ldrb	r1, [r7, #3]
 8013c58:	2000      	movs	r0, #0
 8013c5a:	9000      	str	r0, [sp, #0]
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f001 f838 	bl	8014cd2 <u8g2_DrawHVLine>
  if (h >= 2) {
 8013c62:	7e3b      	ldrb	r3, [r7, #24]
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	d92d      	bls.n	8013cc4 <u8g2_DrawFrame+0xb4>
    h-=2;
 8013c68:	7e3b      	ldrb	r3, [r7, #24]
 8013c6a:	3b02      	subs	r3, #2
 8013c6c:	763b      	strb	r3, [r7, #24]
    y++;
 8013c6e:	78bb      	ldrb	r3, [r7, #2]
 8013c70:	3301      	adds	r3, #1
 8013c72:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8013c74:	7e3b      	ldrb	r3, [r7, #24]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d01a      	beq.n	8013cb0 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8013c7a:	7e3b      	ldrb	r3, [r7, #24]
 8013c7c:	78ba      	ldrb	r2, [r7, #2]
 8013c7e:	78f9      	ldrb	r1, [r7, #3]
 8013c80:	2001      	movs	r0, #1
 8013c82:	9000      	str	r0, [sp, #0]
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f001 f824 	bl	8014cd2 <u8g2_DrawHVLine>
      x+=w;
 8013c8a:	78fa      	ldrb	r2, [r7, #3]
 8013c8c:	787b      	ldrb	r3, [r7, #1]
 8013c8e:	4413      	add	r3, r2
 8013c90:	70fb      	strb	r3, [r7, #3]
      x--;
 8013c92:	78fb      	ldrb	r3, [r7, #3]
 8013c94:	3b01      	subs	r3, #1
 8013c96:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8013c98:	7e3b      	ldrb	r3, [r7, #24]
 8013c9a:	78ba      	ldrb	r2, [r7, #2]
 8013c9c:	78f9      	ldrb	r1, [r7, #3]
 8013c9e:	2001      	movs	r0, #1
 8013ca0:	9000      	str	r0, [sp, #0]
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f001 f815 	bl	8014cd2 <u8g2_DrawHVLine>
      y+=h;
 8013ca8:	78ba      	ldrb	r2, [r7, #2]
 8013caa:	7e3b      	ldrb	r3, [r7, #24]
 8013cac:	4413      	add	r3, r2
 8013cae:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8013cb0:	787b      	ldrb	r3, [r7, #1]
 8013cb2:	78ba      	ldrb	r2, [r7, #2]
 8013cb4:	7bf9      	ldrb	r1, [r7, #15]
 8013cb6:	2000      	movs	r0, #0
 8013cb8:	9000      	str	r0, [sp, #0]
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f001 f809 	bl	8014cd2 <u8g2_DrawHVLine>
 8013cc0:	e000      	b.n	8013cc4 <u8g2_DrawFrame+0xb4>
    return;
 8013cc2:	bf00      	nop
  }
}
 8013cc4:	3710      	adds	r7, #16
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}

08013cca <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8013cca:	b580      	push	{r7, lr}
 8013ccc:	b084      	sub	sp, #16
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	7c1b      	ldrb	r3, [r3, #16]
 8013cd8:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	fb02 f303 	mul.w	r3, r2, r3
 8013ce8:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	00db      	lsls	r3, r3, #3
 8013cee:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cf4:	68fa      	ldr	r2, [r7, #12]
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f00a fb33 	bl	801e364 <memset>
}
 8013cfe:	bf00      	nop
 8013d00:	3710      	adds	r7, #16
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}

08013d06 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8013d06:	b580      	push	{r7, lr}
 8013d08:	b086      	sub	sp, #24
 8013d0a:	af02      	add	r7, sp, #8
 8013d0c:	6078      	str	r0, [r7, #4]
 8013d0e:	460b      	mov	r3, r1
 8013d10:	70fb      	strb	r3, [r7, #3]
 8013d12:	4613      	mov	r3, r2
 8013d14:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	7c1b      	ldrb	r3, [r3, #16]
 8013d1c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8013d1e:	78fb      	ldrb	r3, [r7, #3]
 8013d20:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d26:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8013d28:	7bfb      	ldrb	r3, [r7, #15]
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	89ba      	ldrh	r2, [r7, #12]
 8013d2e:	fb12 f303 	smulbb	r3, r2, r3
 8013d32:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8013d34:	89bb      	ldrh	r3, [r7, #12]
 8013d36:	00db      	lsls	r3, r3, #3
 8013d38:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8013d3a:	89bb      	ldrh	r3, [r7, #12]
 8013d3c:	68ba      	ldr	r2, [r7, #8]
 8013d3e:	4413      	add	r3, r2
 8013d40:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8013d42:	7bf9      	ldrb	r1, [r7, #15]
 8013d44:	78ba      	ldrb	r2, [r7, #2]
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	9300      	str	r3, [sp, #0]
 8013d4a:	460b      	mov	r3, r1
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f002 fcab 	bl	80166aa <u8x8_DrawTile>
}
 8013d54:	bf00      	nop
 8013d56:	3710      	adds	r7, #16
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}

08013d5c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b084      	sub	sp, #16
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8013d64:	2300      	movs	r3, #0
 8013d66:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013d6e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013d76:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	7c5b      	ldrb	r3, [r3, #17]
 8013d7e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8013d80:	7bba      	ldrb	r2, [r7, #14]
 8013d82:	7bfb      	ldrb	r3, [r7, #15]
 8013d84:	4619      	mov	r1, r3
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f7ff ffbd 	bl	8013d06 <u8g2_send_tile_row>
    src_row++;
 8013d8c:	7bfb      	ldrb	r3, [r7, #15]
 8013d8e:	3301      	adds	r3, #1
 8013d90:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8013d92:	7bbb      	ldrb	r3, [r7, #14]
 8013d94:	3301      	adds	r3, #1
 8013d96:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8013d98:	7bfa      	ldrb	r2, [r7, #15]
 8013d9a:	7b7b      	ldrb	r3, [r7, #13]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d203      	bcs.n	8013da8 <u8g2_send_buffer+0x4c>
 8013da0:	7bba      	ldrb	r2, [r7, #14]
 8013da2:	7b3b      	ldrb	r3, [r7, #12]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d3eb      	bcc.n	8013d80 <u8g2_send_buffer+0x24>
}
 8013da8:	bf00      	nop
 8013daa:	3710      	adds	r7, #16
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b082      	sub	sp, #8
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f7ff ffcf 	bl	8013d5c <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	f002 fce6 	bl	8016790 <u8x8_RefreshDisplay>
}
 8013dc4:	bf00      	nop
 8013dc6:	3708      	adds	r7, #8
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b082      	sub	sp, #8
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	460b      	mov	r3, r1
 8013dd6:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	78fa      	ldrb	r2, [r7, #3]
 8013ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dee:	685b      	ldr	r3, [r3, #4]
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	4798      	blx	r3
}
 8013df4:	bf00      	nop
 8013df6:	3708      	adds	r7, #8
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d002      	beq.n	8013e14 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f7ff ff5b 	bl	8013cca <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8013e14:	2100      	movs	r1, #0
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f7ff ffd8 	bl	8013dcc <u8g2_SetBufferCurrTileRow>
}
 8013e1c:	bf00      	nop
 8013e1e:	3708      	adds	r7, #8
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f7ff ff95 	bl	8013d5c <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013e38:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8013e40:	7bfb      	ldrb	r3, [r7, #15]
 8013e42:	4413      	add	r3, r2
 8013e44:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	7c5b      	ldrb	r3, [r3, #17]
 8013e4c:	7bfa      	ldrb	r2, [r7, #15]
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d304      	bcc.n	8013e5c <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f002 fc9c 	bl	8016790 <u8x8_RefreshDisplay>
    return 0;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	e00d      	b.n	8013e78 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d002      	beq.n	8013e6c <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f7ff ff2f 	bl	8013cca <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8013e6c:	7bfb      	ldrb	r3, [r7, #15]
 8013e6e:	4619      	mov	r1, r3
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f7ff ffab 	bl	8013dcc <u8g2_SetBufferCurrTileRow>
  return 1;
 8013e76:	2301      	movs	r3, #1
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3710      	adds	r7, #16
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <u8g2_UpdateDisplay>:
  }  
}

/* same as sendBuffer, but does not send the ePaper refresh message */
void u8g2_UpdateDisplay(u8g2_t *u8g2)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f7ff ff67 	bl	8013d5c <u8g2_send_buffer>
}
 8013e8e:	bf00      	nop
 8013e90:	3708      	adds	r7, #8
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}

08013e96 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8013e96:	b580      	push	{r7, lr}
 8013e98:	b082      	sub	sp, #8
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f7ff ffac 	bl	8013dfc <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f7ff ffbd 	bl	8013e24 <u8g2_NextPage>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d1f9      	bne.n	8013ea4 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8013eb0:	2100      	movs	r1, #0
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7ff ff8a 	bl	8013dcc <u8g2_SetBufferCurrTileRow>
}
 8013eb8:	bf00      	nop
 8013eba:	3708      	adds	r7, #8
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <u8g2_m_20_13_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_20_13_f(uint8_t *page_cnt)
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b083      	sub	sp, #12
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 13;
  return 0;
  #else
  static uint8_t buf[2080];
  *page_cnt = 13;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	220d      	movs	r2, #13
 8013ecc:	701a      	strb	r2, [r3, #0]
  return buf;
 8013ece:	4b03      	ldr	r3, [pc, #12]	; (8013edc <u8g2_m_20_13_f+0x1c>)
  #endif
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	370c      	adds	r7, #12
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr
 8013edc:	20000380 	.word	0x20000380

08013ee0 <u8g2_Setup_st7528_i2c_nhd_c160100_f>:
  buf = u8g2_m_20_13_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* st7528 f */
void u8g2_Setup_st7528_i2c_nhd_c160100_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b088      	sub	sp, #32
 8013ee4:	af02      	add	r7, sp, #8
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
 8013eec:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7528_nhd_c160100, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	9300      	str	r3, [sp, #0]
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	4a0b      	ldr	r2, [pc, #44]	; (8013f24 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x44>)
 8013ef6:	490c      	ldr	r1, [pc, #48]	; (8013f28 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x48>)
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	f002 fd11 	bl	8016920 <u8x8_Setup>
  buf = u8g2_m_20_13_f(&tile_buf_height);
 8013efe:	f107 0313 	add.w	r3, r7, #19
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7ff ffdc 	bl	8013ec0 <u8g2_m_20_13_f>
 8013f08:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8013f0a:	7cfa      	ldrb	r2, [r7, #19]
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	9300      	str	r3, [sp, #0]
 8013f10:	4b06      	ldr	r3, [pc, #24]	; (8013f2c <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x4c>)
 8013f12:	6979      	ldr	r1, [r7, #20]
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	f001 fe87 	bl	8015c28 <u8g2_SetupBuffer>
}
 8013f1a:	bf00      	nop
 8013f1c:	3718      	adds	r7, #24
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	080162ad 	.word	0x080162ad
 8013f28:	080165a5 	.word	0x080165a5
 8013f2c:	080153af 	.word	0x080153af

08013f30 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	460b      	mov	r3, r1
 8013f3a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8013f3c:	78fb      	ldrb	r3, [r7, #3]
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	4413      	add	r3, r2
 8013f42:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	781b      	ldrb	r3, [r3, #0]
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	370c      	adds	r7, #12
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f52:	4770      	bx	lr

08013f54 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b085      	sub	sp, #20
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	460b      	mov	r3, r1
 8013f5e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8013f60:	78fb      	ldrb	r3, [r7, #3]
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	4413      	add	r3, r2
 8013f66:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	81fb      	strh	r3, [r7, #14]
    font++;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	3301      	adds	r3, #1
 8013f72:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8013f74:	89fb      	ldrh	r3, [r7, #14]
 8013f76:	021b      	lsls	r3, r3, #8
 8013f78:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	b29a      	uxth	r2, r3
 8013f80:	89fb      	ldrh	r3, [r7, #14]
 8013f82:	4413      	add	r3, r2
 8013f84:	81fb      	strh	r3, [r7, #14]
    return pos;
 8013f86:	89fb      	ldrh	r3, [r7, #14]
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3714      	adds	r7, #20
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f92:	4770      	bx	lr

08013f94 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8013f9e:	2100      	movs	r1, #0
 8013fa0:	6838      	ldr	r0, [r7, #0]
 8013fa2:	f7ff ffc5 	bl	8013f30 <u8g2_font_get_byte>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	461a      	mov	r2, r3
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8013fae:	2101      	movs	r1, #1
 8013fb0:	6838      	ldr	r0, [r7, #0]
 8013fb2:	f7ff ffbd 	bl	8013f30 <u8g2_font_get_byte>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	461a      	mov	r2, r3
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8013fbe:	2102      	movs	r1, #2
 8013fc0:	6838      	ldr	r0, [r7, #0]
 8013fc2:	f7ff ffb5 	bl	8013f30 <u8g2_font_get_byte>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	461a      	mov	r2, r3
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8013fce:	2103      	movs	r1, #3
 8013fd0:	6838      	ldr	r0, [r7, #0]
 8013fd2:	f7ff ffad 	bl	8013f30 <u8g2_font_get_byte>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	461a      	mov	r2, r3
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8013fde:	2104      	movs	r1, #4
 8013fe0:	6838      	ldr	r0, [r7, #0]
 8013fe2:	f7ff ffa5 	bl	8013f30 <u8g2_font_get_byte>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	461a      	mov	r2, r3
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8013fee:	2105      	movs	r1, #5
 8013ff0:	6838      	ldr	r0, [r7, #0]
 8013ff2:	f7ff ff9d 	bl	8013f30 <u8g2_font_get_byte>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8013ffe:	2106      	movs	r1, #6
 8014000:	6838      	ldr	r0, [r7, #0]
 8014002:	f7ff ff95 	bl	8013f30 <u8g2_font_get_byte>
 8014006:	4603      	mov	r3, r0
 8014008:	461a      	mov	r2, r3
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 801400e:	2107      	movs	r1, #7
 8014010:	6838      	ldr	r0, [r7, #0]
 8014012:	f7ff ff8d 	bl	8013f30 <u8g2_font_get_byte>
 8014016:	4603      	mov	r3, r0
 8014018:	461a      	mov	r2, r3
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 801401e:	2108      	movs	r1, #8
 8014020:	6838      	ldr	r0, [r7, #0]
 8014022:	f7ff ff85 	bl	8013f30 <u8g2_font_get_byte>
 8014026:	4603      	mov	r3, r0
 8014028:	461a      	mov	r2, r3
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 801402e:	2109      	movs	r1, #9
 8014030:	6838      	ldr	r0, [r7, #0]
 8014032:	f7ff ff7d 	bl	8013f30 <u8g2_font_get_byte>
 8014036:	4603      	mov	r3, r0
 8014038:	b25a      	sxtb	r2, r3
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 801403e:	210a      	movs	r1, #10
 8014040:	6838      	ldr	r0, [r7, #0]
 8014042:	f7ff ff75 	bl	8013f30 <u8g2_font_get_byte>
 8014046:	4603      	mov	r3, r0
 8014048:	b25a      	sxtb	r2, r3
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 801404e:	210b      	movs	r1, #11
 8014050:	6838      	ldr	r0, [r7, #0]
 8014052:	f7ff ff6d 	bl	8013f30 <u8g2_font_get_byte>
 8014056:	4603      	mov	r3, r0
 8014058:	b25a      	sxtb	r2, r3
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 801405e:	210c      	movs	r1, #12
 8014060:	6838      	ldr	r0, [r7, #0]
 8014062:	f7ff ff65 	bl	8013f30 <u8g2_font_get_byte>
 8014066:	4603      	mov	r3, r0
 8014068:	b25a      	sxtb	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 801406e:	210d      	movs	r1, #13
 8014070:	6838      	ldr	r0, [r7, #0]
 8014072:	f7ff ff5d 	bl	8013f30 <u8g2_font_get_byte>
 8014076:	4603      	mov	r3, r0
 8014078:	b25a      	sxtb	r2, r3
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 801407e:	210e      	movs	r1, #14
 8014080:	6838      	ldr	r0, [r7, #0]
 8014082:	f7ff ff55 	bl	8013f30 <u8g2_font_get_byte>
 8014086:	4603      	mov	r3, r0
 8014088:	b25a      	sxtb	r2, r3
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 801408e:	210f      	movs	r1, #15
 8014090:	6838      	ldr	r0, [r7, #0]
 8014092:	f7ff ff4d 	bl	8013f30 <u8g2_font_get_byte>
 8014096:	4603      	mov	r3, r0
 8014098:	b25a      	sxtb	r2, r3
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 801409e:	2110      	movs	r1, #16
 80140a0:	6838      	ldr	r0, [r7, #0]
 80140a2:	f7ff ff45 	bl	8013f30 <u8g2_font_get_byte>
 80140a6:	4603      	mov	r3, r0
 80140a8:	b25a      	sxtb	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80140ae:	2111      	movs	r1, #17
 80140b0:	6838      	ldr	r0, [r7, #0]
 80140b2:	f7ff ff4f 	bl	8013f54 <u8g2_font_get_word>
 80140b6:	4603      	mov	r3, r0
 80140b8:	461a      	mov	r2, r3
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80140be:	2113      	movs	r1, #19
 80140c0:	6838      	ldr	r0, [r7, #0]
 80140c2:	f7ff ff47 	bl	8013f54 <u8g2_font_get_word>
 80140c6:	4603      	mov	r3, r0
 80140c8:	461a      	mov	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80140ce:	2115      	movs	r1, #21
 80140d0:	6838      	ldr	r0, [r7, #0]
 80140d2:	f7ff ff3f 	bl	8013f54 <u8g2_font_get_word>
 80140d6:	4603      	mov	r3, r0
 80140d8:	461a      	mov	r2, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	82da      	strh	r2, [r3, #22]
#endif
}
 80140de:	bf00      	nop
 80140e0:	3708      	adds	r7, #8
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}

080140e6 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80140e6:	b480      	push	{r7}
 80140e8:	b085      	sub	sp, #20
 80140ea:	af00      	add	r7, sp, #0
 80140ec:	6078      	str	r0, [r7, #4]
 80140ee:	460b      	mov	r3, r1
 80140f0:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	7a9b      	ldrb	r3, [r3, #10]
 80140f6:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8014100:	7bfa      	ldrb	r2, [r7, #15]
 8014102:	7b7b      	ldrb	r3, [r7, #13]
 8014104:	fa42 f303 	asr.w	r3, r2, r3
 8014108:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 801410a:	7b7b      	ldrb	r3, [r7, #13]
 801410c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 801410e:	7bba      	ldrb	r2, [r7, #14]
 8014110:	78fb      	ldrb	r3, [r7, #3]
 8014112:	4413      	add	r3, r2
 8014114:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8014116:	7bbb      	ldrb	r3, [r7, #14]
 8014118:	2b07      	cmp	r3, #7
 801411a:	d91a      	bls.n	8014152 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 801411c:	2308      	movs	r3, #8
 801411e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8014120:	7b3a      	ldrb	r2, [r7, #12]
 8014122:	7b7b      	ldrb	r3, [r7, #13]
 8014124:	1ad3      	subs	r3, r2, r3
 8014126:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	1c5a      	adds	r2, r3, #1
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	461a      	mov	r2, r3
 801413a:	7b3b      	ldrb	r3, [r7, #12]
 801413c:	fa02 f303 	lsl.w	r3, r2, r3
 8014140:	b25a      	sxtb	r2, r3
 8014142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014146:	4313      	orrs	r3, r2
 8014148:	b25b      	sxtb	r3, r3
 801414a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 801414c:	7bbb      	ldrb	r3, [r7, #14]
 801414e:	3b08      	subs	r3, #8
 8014150:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8014152:	78fb      	ldrb	r3, [r7, #3]
 8014154:	f04f 32ff 	mov.w	r2, #4294967295
 8014158:	fa02 f303 	lsl.w	r3, r2, r3
 801415c:	b2db      	uxtb	r3, r3
 801415e:	43db      	mvns	r3, r3
 8014160:	b2da      	uxtb	r2, r3
 8014162:	7bfb      	ldrb	r3, [r7, #15]
 8014164:	4013      	ands	r3, r2
 8014166:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	7bba      	ldrb	r2, [r7, #14]
 801416c:	729a      	strb	r2, [r3, #10]
  return val;
 801416e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014170:	4618      	mov	r0, r3
 8014172:	3714      	adds	r7, #20
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr

0801417c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	460b      	mov	r3, r1
 8014186:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8014188:	78fb      	ldrb	r3, [r7, #3]
 801418a:	4619      	mov	r1, r3
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f7ff ffaa 	bl	80140e6 <u8g2_font_decode_get_unsigned_bits>
 8014192:	4603      	mov	r3, r0
 8014194:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8014196:	2301      	movs	r3, #1
 8014198:	73bb      	strb	r3, [r7, #14]
  cnt--;
 801419a:	78fb      	ldrb	r3, [r7, #3]
 801419c:	3b01      	subs	r3, #1
 801419e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80141a0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80141a4:	78fb      	ldrb	r3, [r7, #3]
 80141a6:	fa02 f303 	lsl.w	r3, r2, r3
 80141aa:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80141ac:	7bfa      	ldrb	r2, [r7, #15]
 80141ae:	7bbb      	ldrb	r3, [r7, #14]
 80141b0:	1ad3      	subs	r3, r2, r3
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	73fb      	strb	r3, [r7, #15]
  return v;
 80141b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	3710      	adds	r7, #16
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}

080141c2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80141c2:	b490      	push	{r4, r7}
 80141c4:	b082      	sub	sp, #8
 80141c6:	af00      	add	r7, sp, #0
 80141c8:	4604      	mov	r4, r0
 80141ca:	4608      	mov	r0, r1
 80141cc:	4611      	mov	r1, r2
 80141ce:	461a      	mov	r2, r3
 80141d0:	4623      	mov	r3, r4
 80141d2:	71fb      	strb	r3, [r7, #7]
 80141d4:	4603      	mov	r3, r0
 80141d6:	71bb      	strb	r3, [r7, #6]
 80141d8:	460b      	mov	r3, r1
 80141da:	717b      	strb	r3, [r7, #5]
 80141dc:	4613      	mov	r3, r2
 80141de:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80141e0:	793b      	ldrb	r3, [r7, #4]
 80141e2:	2b02      	cmp	r3, #2
 80141e4:	d010      	beq.n	8014208 <u8g2_add_vector_y+0x46>
 80141e6:	2b02      	cmp	r3, #2
 80141e8:	dc13      	bgt.n	8014212 <u8g2_add_vector_y+0x50>
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d002      	beq.n	80141f4 <u8g2_add_vector_y+0x32>
 80141ee:	2b01      	cmp	r3, #1
 80141f0:	d005      	beq.n	80141fe <u8g2_add_vector_y+0x3c>
 80141f2:	e00e      	b.n	8014212 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80141f4:	797a      	ldrb	r2, [r7, #5]
 80141f6:	79fb      	ldrb	r3, [r7, #7]
 80141f8:	4413      	add	r3, r2
 80141fa:	71fb      	strb	r3, [r7, #7]
      break;
 80141fc:	e00e      	b.n	801421c <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80141fe:	79ba      	ldrb	r2, [r7, #6]
 8014200:	79fb      	ldrb	r3, [r7, #7]
 8014202:	4413      	add	r3, r2
 8014204:	71fb      	strb	r3, [r7, #7]
      break;
 8014206:	e009      	b.n	801421c <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8014208:	797b      	ldrb	r3, [r7, #5]
 801420a:	79fa      	ldrb	r2, [r7, #7]
 801420c:	1ad3      	subs	r3, r2, r3
 801420e:	71fb      	strb	r3, [r7, #7]
      break;
 8014210:	e004      	b.n	801421c <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 8014212:	79bb      	ldrb	r3, [r7, #6]
 8014214:	79fa      	ldrb	r2, [r7, #7]
 8014216:	1ad3      	subs	r3, r2, r3
 8014218:	71fb      	strb	r3, [r7, #7]
      break;      
 801421a:	bf00      	nop
  }
  return dy;
 801421c:	79fb      	ldrb	r3, [r7, #7]
}
 801421e:	4618      	mov	r0, r3
 8014220:	3708      	adds	r7, #8
 8014222:	46bd      	mov	sp, r7
 8014224:	bc90      	pop	{r4, r7}
 8014226:	4770      	bx	lr

08014228 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8014228:	b490      	push	{r4, r7}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	4604      	mov	r4, r0
 8014230:	4608      	mov	r0, r1
 8014232:	4611      	mov	r1, r2
 8014234:	461a      	mov	r2, r3
 8014236:	4623      	mov	r3, r4
 8014238:	71fb      	strb	r3, [r7, #7]
 801423a:	4603      	mov	r3, r0
 801423c:	71bb      	strb	r3, [r7, #6]
 801423e:	460b      	mov	r3, r1
 8014240:	717b      	strb	r3, [r7, #5]
 8014242:	4613      	mov	r3, r2
 8014244:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8014246:	793b      	ldrb	r3, [r7, #4]
 8014248:	2b02      	cmp	r3, #2
 801424a:	d010      	beq.n	801426e <u8g2_add_vector_x+0x46>
 801424c:	2b02      	cmp	r3, #2
 801424e:	dc13      	bgt.n	8014278 <u8g2_add_vector_x+0x50>
 8014250:	2b00      	cmp	r3, #0
 8014252:	d002      	beq.n	801425a <u8g2_add_vector_x+0x32>
 8014254:	2b01      	cmp	r3, #1
 8014256:	d005      	beq.n	8014264 <u8g2_add_vector_x+0x3c>
 8014258:	e00e      	b.n	8014278 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 801425a:	79ba      	ldrb	r2, [r7, #6]
 801425c:	79fb      	ldrb	r3, [r7, #7]
 801425e:	4413      	add	r3, r2
 8014260:	71fb      	strb	r3, [r7, #7]
      break;
 8014262:	e00e      	b.n	8014282 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8014264:	797b      	ldrb	r3, [r7, #5]
 8014266:	79fa      	ldrb	r2, [r7, #7]
 8014268:	1ad3      	subs	r3, r2, r3
 801426a:	71fb      	strb	r3, [r7, #7]
      break;
 801426c:	e009      	b.n	8014282 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 801426e:	79bb      	ldrb	r3, [r7, #6]
 8014270:	79fa      	ldrb	r2, [r7, #7]
 8014272:	1ad3      	subs	r3, r2, r3
 8014274:	71fb      	strb	r3, [r7, #7]
      break;
 8014276:	e004      	b.n	8014282 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8014278:	797a      	ldrb	r2, [r7, #5]
 801427a:	79fb      	ldrb	r3, [r7, #7]
 801427c:	4413      	add	r3, r2
 801427e:	71fb      	strb	r3, [r7, #7]
      break;      
 8014280:	bf00      	nop
  }
  return dx;
 8014282:	79fb      	ldrb	r3, [r7, #7]
}
 8014284:	4618      	mov	r0, r3
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bc90      	pop	{r4, r7}
 801428c:	4770      	bx	lr

0801428e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 801428e:	b580      	push	{r7, lr}
 8014290:	b088      	sub	sp, #32
 8014292:	af02      	add	r7, sp, #8
 8014294:	6078      	str	r0, [r7, #4]
 8014296:	460b      	mov	r3, r1
 8014298:	70fb      	strb	r3, [r7, #3]
 801429a:	4613      	mov	r3, r2
 801429c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	3354      	adds	r3, #84	; 0x54
 80142a2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80142a4:	78fb      	ldrb	r3, [r7, #3]
 80142a6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80142ae:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80142b6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80142be:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80142c0:	7bfa      	ldrb	r2, [r7, #15]
 80142c2:	7d7b      	ldrb	r3, [r7, #21]
 80142c4:	1ad3      	subs	r3, r2, r3
 80142c6:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80142c8:	7bfb      	ldrb	r3, [r7, #15]
 80142ca:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80142cc:	7dfa      	ldrb	r2, [r7, #23]
 80142ce:	7bfb      	ldrb	r3, [r7, #15]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d201      	bcs.n	80142d8 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80142d4:	7dfb      	ldrb	r3, [r7, #23]
 80142d6:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	791b      	ldrb	r3, [r3, #4]
 80142dc:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	795b      	ldrb	r3, [r3, #5]
 80142e2:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80142e4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80142e8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	7b9b      	ldrb	r3, [r3, #14]
 80142f0:	7bb8      	ldrb	r0, [r7, #14]
 80142f2:	f7ff ff99 	bl	8014228 <u8g2_add_vector_x>
 80142f6:	4603      	mov	r3, r0
 80142f8:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80142fa:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80142fe:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8014302:	693b      	ldr	r3, [r7, #16]
 8014304:	7b9b      	ldrb	r3, [r3, #14]
 8014306:	7b78      	ldrb	r0, [r7, #13]
 8014308:	f7ff ff5b 	bl	80141c2 <u8g2_add_vector_y>
 801430c:	4603      	mov	r3, r0
 801430e:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8014310:	78bb      	ldrb	r3, [r7, #2]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d00f      	beq.n	8014336 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	7b1a      	ldrb	r2, [r3, #12]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	7b9b      	ldrb	r3, [r3, #14]
 8014324:	7db8      	ldrb	r0, [r7, #22]
 8014326:	7b7a      	ldrb	r2, [r7, #13]
 8014328:	7bb9      	ldrb	r1, [r7, #14]
 801432a:	9300      	str	r3, [sp, #0]
 801432c:	4603      	mov	r3, r0
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f000 fccf 	bl	8014cd2 <u8g2_DrawHVLine>
 8014334:	e012      	b.n	801435c <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	7adb      	ldrb	r3, [r3, #11]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d10e      	bne.n	801435c <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	7b5a      	ldrb	r2, [r3, #13]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	7b9b      	ldrb	r3, [r3, #14]
 801434c:	7db8      	ldrb	r0, [r7, #22]
 801434e:	7b7a      	ldrb	r2, [r7, #13]
 8014350:	7bb9      	ldrb	r1, [r7, #14]
 8014352:	9300      	str	r3, [sp, #0]
 8014354:	4603      	mov	r3, r0
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f000 fcbb 	bl	8014cd2 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 801435c:	7dfa      	ldrb	r2, [r7, #23]
 801435e:	7bfb      	ldrb	r3, [r7, #15]
 8014360:	429a      	cmp	r2, r3
 8014362:	d309      	bcc.n	8014378 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8014364:	7dfa      	ldrb	r2, [r7, #23]
 8014366:	7bfb      	ldrb	r3, [r7, #15]
 8014368:	1ad3      	subs	r3, r2, r3
 801436a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 801436c:	2300      	movs	r3, #0
 801436e:	757b      	strb	r3, [r7, #21]
    ly++;
 8014370:	7d3b      	ldrb	r3, [r7, #20]
 8014372:	3301      	adds	r3, #1
 8014374:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8014376:	e79f      	b.n	80142b8 <u8g2_font_decode_len+0x2a>
      break;
 8014378:	bf00      	nop
  }
  lx += cnt;
 801437a:	7d7a      	ldrb	r2, [r7, #21]
 801437c:	7dfb      	ldrb	r3, [r7, #23]
 801437e:	4413      	add	r3, r2
 8014380:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8014382:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 801438a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	71da      	strb	r2, [r3, #7]
  
}
 8014392:	bf00      	nop
 8014394:	3718      	adds	r7, #24
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}

0801439a <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 801439a:	b580      	push	{r7, lr}
 801439c:	b084      	sub	sp, #16
 801439e:	af00      	add	r7, sp, #0
 80143a0:	6078      	str	r0, [r7, #4]
 80143a2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	3354      	adds	r3, #84	; 0x54
 80143a8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	683a      	ldr	r2, [r7, #0]
 80143ae:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	2200      	movs	r2, #0
 80143b4:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80143bc:	4619      	mov	r1, r3
 80143be:	68f8      	ldr	r0, [r7, #12]
 80143c0:	f7ff fe91 	bl	80140e6 <u8g2_font_decode_get_unsigned_bits>
 80143c4:	4603      	mov	r3, r0
 80143c6:	b25a      	sxtb	r2, r3
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80143d2:	4619      	mov	r1, r3
 80143d4:	68f8      	ldr	r0, [r7, #12]
 80143d6:	f7ff fe86 	bl	80140e6 <u8g2_font_decode_get_unsigned_bits>
 80143da:	4603      	mov	r3, r0
 80143dc:	b25a      	sxtb	r2, r3
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	7b1b      	ldrb	r3, [r3, #12]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	bf0c      	ite	eq
 80143f4:	2301      	moveq	r3, #1
 80143f6:	2300      	movne	r3, #0
 80143f8:	b2db      	uxtb	r3, r3
 80143fa:	461a      	mov	r2, r3
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	735a      	strb	r2, [r3, #13]
}
 8014400:	bf00      	nop
 8014402:	3710      	adds	r7, #16
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}

08014408 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b088      	sub	sp, #32
 801440c:	af02      	add	r7, sp, #8
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	3354      	adds	r3, #84	; 0x54
 8014416:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8014418:	6839      	ldr	r1, [r7, #0]
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f7ff ffbd 	bl	801439a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014426:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 801442e:	4619      	mov	r1, r3
 8014430:	6938      	ldr	r0, [r7, #16]
 8014432:	f7ff fea3 	bl	801417c <u8g2_font_decode_get_signed_bits>
 8014436:	4603      	mov	r3, r0
 8014438:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8014440:	4619      	mov	r1, r3
 8014442:	6938      	ldr	r0, [r7, #16]
 8014444:	f7ff fe9a 	bl	801417c <u8g2_font_decode_get_signed_bits>
 8014448:	4603      	mov	r3, r0
 801444a:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8014452:	4619      	mov	r1, r3
 8014454:	6938      	ldr	r0, [r7, #16]
 8014456:	f7ff fe91 	bl	801417c <u8g2_font_decode_get_signed_bits>
 801445a:	4603      	mov	r3, r0
 801445c:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014464:	2b00      	cmp	r3, #0
 8014466:	f340 80cf 	ble.w	8014608 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	7918      	ldrb	r0, [r3, #4]
 801446e:	7bfa      	ldrb	r2, [r7, #15]
 8014470:	7b7b      	ldrb	r3, [r7, #13]
 8014472:	4413      	add	r3, r2
 8014474:	b2db      	uxtb	r3, r3
 8014476:	425b      	negs	r3, r3
 8014478:	b2db      	uxtb	r3, r3
 801447a:	b25a      	sxtb	r2, r3
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	7b9b      	ldrb	r3, [r3, #14]
 8014480:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014484:	f7ff fed0 	bl	8014228 <u8g2_add_vector_x>
 8014488:	4603      	mov	r3, r0
 801448a:	461a      	mov	r2, r3
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	7958      	ldrb	r0, [r3, #5]
 8014494:	7bfa      	ldrb	r2, [r7, #15]
 8014496:	7b7b      	ldrb	r3, [r7, #13]
 8014498:	4413      	add	r3, r2
 801449a:	b2db      	uxtb	r3, r3
 801449c:	425b      	negs	r3, r3
 801449e:	b2db      	uxtb	r3, r3
 80144a0:	b25a      	sxtb	r2, r3
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	7b9b      	ldrb	r3, [r3, #14]
 80144a6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80144aa:	f7ff fe8a 	bl	80141c2 <u8g2_add_vector_y>
 80144ae:	4603      	mov	r3, r0
 80144b0:	461a      	mov	r2, r3
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	791b      	ldrb	r3, [r3, #4]
 80144ba:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	795b      	ldrb	r3, [r3, #5]
 80144c0:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 80144c2:	7dfb      	ldrb	r3, [r7, #23]
 80144c4:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 80144c6:	7d7b      	ldrb	r3, [r7, #21]
 80144c8:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	7b9b      	ldrb	r3, [r3, #14]
 80144ce:	2b03      	cmp	r3, #3
 80144d0:	d852      	bhi.n	8014578 <u8g2_font_decode_glyph+0x170>
 80144d2:	a201      	add	r2, pc, #4	; (adr r2, 80144d8 <u8g2_font_decode_glyph+0xd0>)
 80144d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144d8:	080144e9 	.word	0x080144e9
 80144dc:	08014501 	.word	0x08014501
 80144e0:	08014525 	.word	0x08014525
 80144e4:	08014555 	.word	0x08014555
      {
	case 0:
	    x1 += decode->glyph_width;
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80144ee:	b2da      	uxtb	r2, r3
 80144f0:	7dbb      	ldrb	r3, [r7, #22]
 80144f2:	4413      	add	r3, r2
 80144f4:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 80144f6:	7bfa      	ldrb	r2, [r7, #15]
 80144f8:	7d3b      	ldrb	r3, [r7, #20]
 80144fa:	4413      	add	r3, r2
 80144fc:	753b      	strb	r3, [r7, #20]
	    break;
 80144fe:	e03b      	b.n	8014578 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8014500:	7bfb      	ldrb	r3, [r7, #15]
 8014502:	7dfa      	ldrb	r2, [r7, #23]
 8014504:	1ad3      	subs	r3, r2, r3
 8014506:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8014508:	7dfb      	ldrb	r3, [r7, #23]
 801450a:	3301      	adds	r3, #1
 801450c:	75fb      	strb	r3, [r7, #23]
	    x1++;
 801450e:	7dbb      	ldrb	r3, [r7, #22]
 8014510:	3301      	adds	r3, #1
 8014512:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8014514:	693b      	ldr	r3, [r7, #16]
 8014516:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801451a:	b2da      	uxtb	r2, r3
 801451c:	7d3b      	ldrb	r3, [r7, #20]
 801451e:	4413      	add	r3, r2
 8014520:	753b      	strb	r3, [r7, #20]
	    break;
 8014522:	e029      	b.n	8014578 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801452a:	b2db      	uxtb	r3, r3
 801452c:	7dfa      	ldrb	r2, [r7, #23]
 801452e:	1ad3      	subs	r3, r2, r3
 8014530:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8014532:	7dfb      	ldrb	r3, [r7, #23]
 8014534:	3301      	adds	r3, #1
 8014536:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8014538:	7dbb      	ldrb	r3, [r7, #22]
 801453a:	3301      	adds	r3, #1
 801453c:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 801453e:	7bfb      	ldrb	r3, [r7, #15]
 8014540:	7d7a      	ldrb	r2, [r7, #21]
 8014542:	1ad3      	subs	r3, r2, r3
 8014544:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8014546:	7d7b      	ldrb	r3, [r7, #21]
 8014548:	3301      	adds	r3, #1
 801454a:	757b      	strb	r3, [r7, #21]
	    y1++;
 801454c:	7d3b      	ldrb	r3, [r7, #20]
 801454e:	3301      	adds	r3, #1
 8014550:	753b      	strb	r3, [r7, #20]
	    break;	  
 8014552:	e011      	b.n	8014578 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8014554:	7bfa      	ldrb	r2, [r7, #15]
 8014556:	7dbb      	ldrb	r3, [r7, #22]
 8014558:	4413      	add	r3, r2
 801455a:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014562:	b2db      	uxtb	r3, r3
 8014564:	7d7a      	ldrb	r2, [r7, #21]
 8014566:	1ad3      	subs	r3, r2, r3
 8014568:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 801456a:	7d7b      	ldrb	r3, [r7, #21]
 801456c:	3301      	adds	r3, #1
 801456e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8014570:	7d3b      	ldrb	r3, [r7, #20]
 8014572:	3301      	adds	r3, #1
 8014574:	753b      	strb	r3, [r7, #20]
	    break;	  
 8014576:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8014578:	7db8      	ldrb	r0, [r7, #22]
 801457a:	7d7a      	ldrb	r2, [r7, #21]
 801457c:	7df9      	ldrb	r1, [r7, #23]
 801457e:	7d3b      	ldrb	r3, [r7, #20]
 8014580:	9300      	str	r3, [sp, #0]
 8014582:	4603      	mov	r3, r0
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f000 fe50 	bl	801522a <u8g2_IsIntersection>
 801458a:	4603      	mov	r3, r0
 801458c:	2b00      	cmp	r3, #0
 801458e:	d102      	bne.n	8014596 <u8g2_font_decode_glyph+0x18e>
	return d;
 8014590:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8014594:	e03a      	b.n	801460c <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	2200      	movs	r2, #0
 801459a:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	2200      	movs	r2, #0
 80145a0:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80145a8:	4619      	mov	r1, r3
 80145aa:	6938      	ldr	r0, [r7, #16]
 80145ac:	f7ff fd9b 	bl	80140e6 <u8g2_font_decode_get_unsigned_bits>
 80145b0:	4603      	mov	r3, r0
 80145b2:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80145ba:	4619      	mov	r1, r3
 80145bc:	6938      	ldr	r0, [r7, #16]
 80145be:	f7ff fd92 	bl	80140e6 <u8g2_font_decode_get_unsigned_bits>
 80145c2:	4603      	mov	r3, r0
 80145c4:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80145c6:	7afb      	ldrb	r3, [r7, #11]
 80145c8:	2200      	movs	r2, #0
 80145ca:	4619      	mov	r1, r3
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f7ff fe5e 	bl	801428e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80145d2:	7abb      	ldrb	r3, [r7, #10]
 80145d4:	2201      	movs	r2, #1
 80145d6:	4619      	mov	r1, r3
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f7ff fe58 	bl	801428e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80145de:	2101      	movs	r1, #1
 80145e0:	6938      	ldr	r0, [r7, #16]
 80145e2:	f7ff fd80 	bl	80140e6 <u8g2_font_decode_get_unsigned_bits>
 80145e6:	4603      	mov	r3, r0
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d1ec      	bne.n	80145c6 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80145f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	dd00      	ble.n	80145fc <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80145fa:	e7d2      	b.n	80145a2 <u8g2_font_decode_glyph+0x19a>
	break;
 80145fc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	7b1a      	ldrb	r2, [r3, #12]
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8014608:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 801460c:	4618      	mov	r0, r3
 801460e:	3718      	adds	r7, #24
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b086      	sub	sp, #24
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	460b      	mov	r3, r1
 801461e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014624:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	3317      	adds	r3, #23
 801462a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 801462c:	887b      	ldrh	r3, [r7, #2]
 801462e:	2bff      	cmp	r3, #255	; 0xff
 8014630:	d82a      	bhi.n	8014688 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8014632:	887b      	ldrh	r3, [r7, #2]
 8014634:	2b60      	cmp	r3, #96	; 0x60
 8014636:	d907      	bls.n	8014648 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 801463e:	461a      	mov	r2, r3
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	4413      	add	r3, r2
 8014644:	617b      	str	r3, [r7, #20]
 8014646:	e009      	b.n	801465c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8014648:	887b      	ldrh	r3, [r7, #2]
 801464a:	2b40      	cmp	r3, #64	; 0x40
 801464c:	d906      	bls.n	801465c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8014654:	461a      	mov	r2, r3
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	4413      	add	r3, r2
 801465a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	3301      	adds	r3, #1
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d04e      	beq.n	8014704 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8014666:	697b      	ldr	r3, [r7, #20]
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	b29b      	uxth	r3, r3
 801466c:	887a      	ldrh	r2, [r7, #2]
 801466e:	429a      	cmp	r2, r3
 8014670:	d102      	bne.n	8014678 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8014672:	697b      	ldr	r3, [r7, #20]
 8014674:	3302      	adds	r3, #2
 8014676:	e049      	b.n	801470c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	3301      	adds	r3, #1
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	461a      	mov	r2, r3
 8014680:	697b      	ldr	r3, [r7, #20]
 8014682:	4413      	add	r3, r2
 8014684:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8014686:	e7e9      	b.n	801465c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 801468e:	461a      	mov	r2, r3
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	4413      	add	r3, r2
 8014694:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 801469a:	2100      	movs	r1, #0
 801469c:	6938      	ldr	r0, [r7, #16]
 801469e:	f7ff fc59 	bl	8013f54 <u8g2_font_get_word>
 80146a2:	4603      	mov	r3, r0
 80146a4:	461a      	mov	r2, r3
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	4413      	add	r3, r2
 80146aa:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80146ac:	2102      	movs	r1, #2
 80146ae:	6938      	ldr	r0, [r7, #16]
 80146b0:	f7ff fc50 	bl	8013f54 <u8g2_font_get_word>
 80146b4:	4603      	mov	r3, r0
 80146b6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	3304      	adds	r3, #4
 80146bc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80146be:	89fa      	ldrh	r2, [r7, #14]
 80146c0:	887b      	ldrh	r3, [r7, #2]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d3e9      	bcc.n	801469a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80146cc:	89fb      	ldrh	r3, [r7, #14]
 80146ce:	021b      	lsls	r3, r3, #8
 80146d0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	3301      	adds	r3, #1
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	b29a      	uxth	r2, r3
 80146da:	89fb      	ldrh	r3, [r7, #14]
 80146dc:	4313      	orrs	r3, r2
 80146de:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80146e0:	89fb      	ldrh	r3, [r7, #14]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d010      	beq.n	8014708 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80146e6:	89fa      	ldrh	r2, [r7, #14]
 80146e8:	887b      	ldrh	r3, [r7, #2]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d102      	bne.n	80146f4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	3303      	adds	r3, #3
 80146f2:	e00b      	b.n	801470c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80146f4:	697b      	ldr	r3, [r7, #20]
 80146f6:	3302      	adds	r3, #2
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	461a      	mov	r2, r3
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	4413      	add	r3, r2
 8014700:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8014702:	e7e0      	b.n	80146c6 <u8g2_font_get_glyph_data+0xb2>
	break;
 8014704:	bf00      	nop
 8014706:	e000      	b.n	801470a <u8g2_font_get_glyph_data+0xf6>
	break;
 8014708:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 801470a:	2300      	movs	r3, #0
}
 801470c:	4618      	mov	r0, r3
 801470e:	3718      	adds	r7, #24
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}

08014714 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b084      	sub	sp, #16
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	4608      	mov	r0, r1
 801471e:	4611      	mov	r1, r2
 8014720:	461a      	mov	r2, r3
 8014722:	4603      	mov	r3, r0
 8014724:	70fb      	strb	r3, [r7, #3]
 8014726:	460b      	mov	r3, r1
 8014728:	70bb      	strb	r3, [r7, #2]
 801472a:	4613      	mov	r3, r2
 801472c:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 801472e:	2300      	movs	r3, #0
 8014730:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	78fa      	ldrb	r2, [r7, #3]
 8014736:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	78ba      	ldrb	r2, [r7, #2]
 801473e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8014742:	883b      	ldrh	r3, [r7, #0]
 8014744:	4619      	mov	r1, r3
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f7ff ff64 	bl	8014614 <u8g2_font_get_glyph_data>
 801474c:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d005      	beq.n	8014760 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8014754:	68b9      	ldr	r1, [r7, #8]
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f7ff fe56 	bl	8014408 <u8g2_font_decode_glyph>
 801475c:	4603      	mov	r3, r0
 801475e:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8014760:	7bfb      	ldrb	r3, [r7, #15]
}
 8014762:	4618      	mov	r0, r3
 8014764:	3710      	adds	r7, #16
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}

0801476a <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 801476a:	b580      	push	{r7, lr}
 801476c:	b084      	sub	sp, #16
 801476e:	af00      	add	r7, sp, #0
 8014770:	6078      	str	r0, [r7, #4]
 8014772:	460b      	mov	r3, r1
 8014774:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8014776:	887b      	ldrh	r3, [r7, #2]
 8014778:	4619      	mov	r1, r3
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f7ff ff4a 	bl	8014614 <u8g2_font_get_glyph_data>
 8014780:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d101      	bne.n	801478c <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8014788:	2300      	movs	r3, #0
 801478a:	e027      	b.n	80147dc <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 801478c:	68f9      	ldr	r1, [r7, #12]
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f7ff fe03 	bl	801439a <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80147a0:	4619      	mov	r1, r3
 80147a2:	4610      	mov	r0, r2
 80147a4:	f7ff fcea 	bl	801417c <u8g2_font_decode_get_signed_bits>
 80147a8:	4603      	mov	r3, r0
 80147aa:	461a      	mov	r2, r3
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80147be:	4619      	mov	r1, r3
 80147c0:	4610      	mov	r0, r2
 80147c2:	f7ff fcdb 	bl	801417c <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80147d2:	4619      	mov	r1, r3
 80147d4:	4610      	mov	r0, r2
 80147d6:	f7ff fcd1 	bl	801417c <u8g2_font_decode_get_signed_bits>
 80147da:	4603      	mov	r3, r0
}
 80147dc:	4618      	mov	r0, r3
 80147de:	3710      	adds	r7, #16
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 80147e4:	b480      	push	{r7}
 80147e6:	b083      	sub	sp, #12
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	460b      	mov	r3, r1
 80147ee:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	78fa      	ldrb	r2, [r7, #3]
 80147f4:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 80147f8:	bf00      	nop
 80147fa:	370c      	adds	r7, #12
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr

08014804 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b082      	sub	sp, #8
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	4608      	mov	r0, r1
 801480e:	4611      	mov	r1, r2
 8014810:	461a      	mov	r2, r3
 8014812:	4603      	mov	r3, r0
 8014814:	70fb      	strb	r3, [r7, #3]
 8014816:	460b      	mov	r3, r1
 8014818:	70bb      	strb	r3, [r7, #2]
 801481a:	4613      	mov	r3, r2
 801481c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014824:	2b03      	cmp	r3, #3
 8014826:	d833      	bhi.n	8014890 <u8g2_DrawGlyph+0x8c>
 8014828:	a201      	add	r2, pc, #4	; (adr r2, 8014830 <u8g2_DrawGlyph+0x2c>)
 801482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801482e:	bf00      	nop
 8014830:	08014841 	.word	0x08014841
 8014834:	08014855 	.word	0x08014855
 8014838:	08014869 	.word	0x08014869
 801483c:	0801487d 	.word	0x0801487d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	4798      	blx	r3
 8014848:	4603      	mov	r3, r0
 801484a:	461a      	mov	r2, r3
 801484c:	78bb      	ldrb	r3, [r7, #2]
 801484e:	4413      	add	r3, r2
 8014850:	70bb      	strb	r3, [r7, #2]
      break;
 8014852:	e01d      	b.n	8014890 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	4798      	blx	r3
 801485c:	4603      	mov	r3, r0
 801485e:	461a      	mov	r2, r3
 8014860:	78fb      	ldrb	r3, [r7, #3]
 8014862:	1a9b      	subs	r3, r3, r2
 8014864:	70fb      	strb	r3, [r7, #3]
      break;
 8014866:	e013      	b.n	8014890 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	4798      	blx	r3
 8014870:	4603      	mov	r3, r0
 8014872:	461a      	mov	r2, r3
 8014874:	78bb      	ldrb	r3, [r7, #2]
 8014876:	1a9b      	subs	r3, r3, r2
 8014878:	70bb      	strb	r3, [r7, #2]
      break;
 801487a:	e009      	b.n	8014890 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	4798      	blx	r3
 8014884:	4603      	mov	r3, r0
 8014886:	461a      	mov	r2, r3
 8014888:	78fb      	ldrb	r3, [r7, #3]
 801488a:	4413      	add	r3, r2
 801488c:	70fb      	strb	r3, [r7, #3]
      break;
 801488e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8014890:	883b      	ldrh	r3, [r7, #0]
 8014892:	78ba      	ldrb	r2, [r7, #2]
 8014894:	78f9      	ldrb	r1, [r7, #3]
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f7ff ff3c 	bl	8014714 <u8g2_font_draw_glyph>
 801489c:	4603      	mov	r3, r0
}
 801489e:	4618      	mov	r0, r3
 80148a0:	3708      	adds	r7, #8
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop

080148a8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b086      	sub	sp, #24
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	60f8      	str	r0, [r7, #12]
 80148b0:	607b      	str	r3, [r7, #4]
 80148b2:	460b      	mov	r3, r1
 80148b4:	72fb      	strb	r3, [r7, #11]
 80148b6:	4613      	mov	r3, r2
 80148b8:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80148ba:	68f8      	ldr	r0, [r7, #12]
 80148bc:	f001 fb43 	bl	8015f46 <u8x8_utf8_init>
  sum = 0;
 80148c0:	2300      	movs	r3, #0
 80148c2:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	685b      	ldr	r3, [r3, #4]
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	7812      	ldrb	r2, [r2, #0]
 80148cc:	4611      	mov	r1, r2
 80148ce:	68f8      	ldr	r0, [r7, #12]
 80148d0:	4798      	blx	r3
 80148d2:	4603      	mov	r3, r0
 80148d4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80148d6:	8abb      	ldrh	r3, [r7, #20]
 80148d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148dc:	4293      	cmp	r3, r2
 80148de:	d038      	beq.n	8014952 <u8g2_draw_string+0xaa>
      break;
    str++;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	3301      	adds	r3, #1
 80148e4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80148e6:	8abb      	ldrh	r3, [r7, #20]
 80148e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80148ec:	4293      	cmp	r3, r2
 80148ee:	d0e9      	beq.n	80148c4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80148f0:	8abb      	ldrh	r3, [r7, #20]
 80148f2:	7aba      	ldrb	r2, [r7, #10]
 80148f4:	7af9      	ldrb	r1, [r7, #11]
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f7ff ff84 	bl	8014804 <u8g2_DrawGlyph>
 80148fc:	4603      	mov	r3, r0
 80148fe:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014906:	2b03      	cmp	r3, #3
 8014908:	d81e      	bhi.n	8014948 <u8g2_draw_string+0xa0>
 801490a:	a201      	add	r2, pc, #4	; (adr r2, 8014910 <u8g2_draw_string+0x68>)
 801490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014910:	08014921 	.word	0x08014921
 8014914:	0801492b 	.word	0x0801492b
 8014918:	08014935 	.word	0x08014935
 801491c:	0801493f 	.word	0x0801493f
      {
	case 0:
	  x += delta;
 8014920:	7afa      	ldrb	r2, [r7, #11]
 8014922:	7cfb      	ldrb	r3, [r7, #19]
 8014924:	4413      	add	r3, r2
 8014926:	72fb      	strb	r3, [r7, #11]
	  break;
 8014928:	e00e      	b.n	8014948 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 801492a:	7aba      	ldrb	r2, [r7, #10]
 801492c:	7cfb      	ldrb	r3, [r7, #19]
 801492e:	4413      	add	r3, r2
 8014930:	72bb      	strb	r3, [r7, #10]
	  break;
 8014932:	e009      	b.n	8014948 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8014934:	7afa      	ldrb	r2, [r7, #11]
 8014936:	7cfb      	ldrb	r3, [r7, #19]
 8014938:	1ad3      	subs	r3, r2, r3
 801493a:	72fb      	strb	r3, [r7, #11]
	  break;
 801493c:	e004      	b.n	8014948 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 801493e:	7aba      	ldrb	r2, [r7, #10]
 8014940:	7cfb      	ldrb	r3, [r7, #19]
 8014942:	1ad3      	subs	r3, r2, r3
 8014944:	72bb      	strb	r3, [r7, #10]
	  break;
 8014946:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8014948:	7dfa      	ldrb	r2, [r7, #23]
 801494a:	7cfb      	ldrb	r3, [r7, #19]
 801494c:	4413      	add	r3, r2
 801494e:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8014950:	e7b8      	b.n	80148c4 <u8g2_draw_string+0x1c>
      break;
 8014952:	bf00      	nop
    }
  }
  return sum;
 8014954:	7dfb      	ldrb	r3, [r7, #23]
}
 8014956:	4618      	mov	r0, r3
 8014958:	3718      	adds	r7, #24
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}
 801495e:	bf00      	nop

08014960 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	60f8      	str	r0, [r7, #12]
 8014968:	607b      	str	r3, [r7, #4]
 801496a:	460b      	mov	r3, r1
 801496c:	72fb      	strb	r3, [r7, #11]
 801496e:	4613      	mov	r3, r2
 8014970:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	4a06      	ldr	r2, [pc, #24]	; (8014990 <u8g2_DrawStr+0x30>)
 8014976:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8014978:	7aba      	ldrb	r2, [r7, #10]
 801497a:	7af9      	ldrb	r1, [r7, #11]
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	68f8      	ldr	r0, [r7, #12]
 8014980:	f7ff ff92 	bl	80148a8 <u8g2_draw_string>
 8014984:	4603      	mov	r3, r0
}
 8014986:	4618      	mov	r0, r3
 8014988:	3710      	adds	r7, #16
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}
 801498e:	bf00      	nop
 8014990:	08015f63 	.word	0x08015f63

08014994 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b084      	sub	sp, #16
 8014998:	af00      	add	r7, sp, #0
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	607b      	str	r3, [r7, #4]
 801499e:	460b      	mov	r3, r1
 80149a0:	72fb      	strb	r3, [r7, #11]
 80149a2:	4613      	mov	r3, r2
 80149a4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	4a06      	ldr	r2, [pc, #24]	; (80149c4 <u8g2_DrawUTF8+0x30>)
 80149aa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80149ac:	7aba      	ldrb	r2, [r7, #10]
 80149ae:	7af9      	ldrb	r1, [r7, #11]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	68f8      	ldr	r0, [r7, #12]
 80149b4:	f7ff ff78 	bl	80148a8 <u8g2_draw_string>
 80149b8:	4603      	mov	r3, r0
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3710      	adds	r7, #16
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
 80149c2:	bf00      	nop
 80149c4:	08015f91 	.word	0x08015f91

080149c8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80149c8:	b480      	push	{r7}
 80149ca:	b083      	sub	sp, #12
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d05d      	beq.n	8014a94 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d04d      	beq.n	8014a96 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d11c      	bne.n	8014a3e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8014a10:	429a      	cmp	r2, r3
 8014a12:	da05      	bge.n	8014a20 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	dd32      	ble.n	8014a96 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8014a3c:	e02b      	b.n	8014a96 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8014a44:	461a      	mov	r2, r3
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014a54:	440b      	add	r3, r1
 8014a56:	429a      	cmp	r2, r3
 8014a58:	da0d      	bge.n	8014a76 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8014a60:	b2da      	uxtb	r2, r3
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014a68:	b2db      	uxtb	r3, r3
 8014a6a:	4413      	add	r3, r2
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	b25a      	sxtb	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014a82:	429a      	cmp	r2, r3
 8014a84:	dd07      	ble.n	8014a96 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8014a92:	e000      	b.n	8014a96 <u8g2_UpdateRefHeight+0xce>
    return;
 8014a94:	bf00      	nop
  }  
}
 8014a96:	370c      	adds	r7, #12
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9e:	4770      	bx	lr

08014aa0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8014aa0:	b480      	push	{r7}
 8014aa2:	b083      	sub	sp, #12
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
  return 0;
 8014aa8:	2300      	movs	r3, #0
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	370c      	adds	r7, #12
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab4:	4770      	bx	lr
	...

08014ab8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b083      	sub	sp, #12
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	4a04      	ldr	r2, [pc, #16]	; (8014ad4 <u8g2_SetFontPosBaseline+0x1c>)
 8014ac4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8014ac6:	bf00      	nop
 8014ac8:	370c      	adds	r7, #12
 8014aca:	46bd      	mov	sp, r7
 8014acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad0:	4770      	bx	lr
 8014ad2:	bf00      	nop
 8014ad4:	08014aa1 	.word	0x08014aa1

08014ad8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ae6:	683a      	ldr	r2, [r7, #0]
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d00b      	beq.n	8014b04 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	683a      	ldr	r2, [r7, #0]
 8014af0:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	3364      	adds	r3, #100	; 0x64
 8014af6:	6839      	ldr	r1, [r7, #0]
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7ff fa4b 	bl	8013f94 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f7ff ff62 	bl	80149c8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8014b04:	bf00      	nop
 8014b06:	3708      	adds	r7, #8
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}

08014b0c <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f001 fa11 	bl	8015f46 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8014b24:	2300      	movs	r3, #0
 8014b26:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8014b28:	2300      	movs	r3, #0
 8014b2a:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	685b      	ldr	r3, [r3, #4]
 8014b30:	683a      	ldr	r2, [r7, #0]
 8014b32:	7812      	ldrb	r2, [r2, #0]
 8014b34:	4611      	mov	r1, r2
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	4798      	blx	r3
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 8014b3e:	89bb      	ldrh	r3, [r7, #12]
 8014b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b44:	4293      	cmp	r3, r2
 8014b46:	d013      	beq.n	8014b70 <u8g2_string_width+0x64>
      break;
    str++;
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8014b4e:	89bb      	ldrh	r3, [r7, #12]
 8014b50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014b54:	4293      	cmp	r3, r2
 8014b56:	d0e9      	beq.n	8014b2c <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8014b58:	89bb      	ldrh	r3, [r7, #12]
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f7ff fe04 	bl	801476a <u8g2_GetGlyphWidth>
 8014b62:	4603      	mov	r3, r0
 8014b64:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8014b66:	7bfa      	ldrb	r2, [r7, #15]
 8014b68:	7bbb      	ldrb	r3, [r7, #14]
 8014b6a:	4413      	add	r3, r2
 8014b6c:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8014b6e:	e7dd      	b.n	8014b2c <u8g2_string_width+0x20>
      break;
 8014b70:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d011      	beq.n	8014ba0 <u8g2_string_width+0x94>
  {
    w -= dx;
 8014b7c:	7bfa      	ldrb	r2, [r7, #15]
 8014b7e:	7bbb      	ldrb	r3, [r7, #14]
 8014b80:	1ad3      	subs	r3, r2, r3
 8014b82:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8014b8a:	b2da      	uxtb	r2, r3
 8014b8c:	7bfb      	ldrb	r3, [r7, #15]
 8014b8e:	4413      	add	r3, r2
 8014b90:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8014b98:	b2da      	uxtb	r2, r3
 8014b9a:	7bfb      	ldrb	r3, [r7, #15]
 8014b9c:	4413      	add	r3, r2
 8014b9e:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 8014ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3710      	adds	r7, #16
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
	...

08014bac <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b082      	sub	sp, #8
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	4a05      	ldr	r2, [pc, #20]	; (8014bd0 <u8g2_GetUTF8Width+0x24>)
 8014bba:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 8014bbc:	6839      	ldr	r1, [r7, #0]
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f7ff ffa4 	bl	8014b0c <u8g2_string_width>
 8014bc4:	4603      	mov	r3, r0
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	3708      	adds	r7, #8
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bd80      	pop	{r7, pc}
 8014bce:	bf00      	nop
 8014bd0:	08015f91 	.word	0x08015f91

08014bd4 <u8g2_SetFontDirection>:



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8014bd4:	b480      	push	{r7}
 8014bd6:	b083      	sub	sp, #12
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
 8014bdc:	460b      	mov	r3, r1
 8014bde:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	78fa      	ldrb	r2, [r7, #3]
 8014be4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8014be8:	bf00      	nop
 8014bea:	370c      	adds	r7, #12
 8014bec:	46bd      	mov	sp, r7
 8014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf2:	4770      	bx	lr

08014bf4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b087      	sub	sp, #28
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	60f8      	str	r0, [r7, #12]
 8014bfc:	60b9      	str	r1, [r7, #8]
 8014bfe:	4611      	mov	r1, r2
 8014c00:	461a      	mov	r2, r3
 8014c02:	460b      	mov	r3, r1
 8014c04:	71fb      	strb	r3, [r7, #7]
 8014c06:	4613      	mov	r3, r2
 8014c08:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	781b      	ldrb	r3, [r3, #0]
 8014c0e:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8014c10:	7dfb      	ldrb	r3, [r7, #23]
 8014c12:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	781a      	ldrb	r2, [r3, #0]
 8014c18:	7dbb      	ldrb	r3, [r7, #22]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8014c1e:	7dfa      	ldrb	r2, [r7, #23]
 8014c20:	7dbb      	ldrb	r3, [r7, #22]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d90b      	bls.n	8014c3e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8014c26:	7dfa      	ldrb	r2, [r7, #23]
 8014c28:	79bb      	ldrb	r3, [r7, #6]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d205      	bcs.n	8014c3a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8014c2e:	79bb      	ldrb	r3, [r7, #6]
 8014c30:	75bb      	strb	r3, [r7, #22]
      b--;
 8014c32:	7dbb      	ldrb	r3, [r7, #22]
 8014c34:	3b01      	subs	r3, #1
 8014c36:	75bb      	strb	r3, [r7, #22]
 8014c38:	e001      	b.n	8014c3e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8014c3a:	79fb      	ldrb	r3, [r7, #7]
 8014c3c:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8014c3e:	7dfa      	ldrb	r2, [r7, #23]
 8014c40:	79bb      	ldrb	r3, [r7, #6]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d301      	bcc.n	8014c4a <u8g2_clip_intersection2+0x56>
    return 0;
 8014c46:	2300      	movs	r3, #0
 8014c48:	e01c      	b.n	8014c84 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8014c4a:	7dba      	ldrb	r2, [r7, #22]
 8014c4c:	79fb      	ldrb	r3, [r7, #7]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d801      	bhi.n	8014c56 <u8g2_clip_intersection2+0x62>
    return 0;
 8014c52:	2300      	movs	r3, #0
 8014c54:	e016      	b.n	8014c84 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8014c56:	7dfa      	ldrb	r2, [r7, #23]
 8014c58:	79fb      	ldrb	r3, [r7, #7]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d201      	bcs.n	8014c62 <u8g2_clip_intersection2+0x6e>
    a = c;
 8014c5e:	79fb      	ldrb	r3, [r7, #7]
 8014c60:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8014c62:	7dba      	ldrb	r2, [r7, #22]
 8014c64:	79bb      	ldrb	r3, [r7, #6]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d901      	bls.n	8014c6e <u8g2_clip_intersection2+0x7a>
    b = d;
 8014c6a:	79bb      	ldrb	r3, [r7, #6]
 8014c6c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	7dfa      	ldrb	r2, [r7, #23]
 8014c72:	701a      	strb	r2, [r3, #0]
  b -= a;
 8014c74:	7dba      	ldrb	r2, [r7, #22]
 8014c76:	7dfb      	ldrb	r3, [r7, #23]
 8014c78:	1ad3      	subs	r3, r2, r3
 8014c7a:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	7dba      	ldrb	r2, [r7, #22]
 8014c80:	701a      	strb	r2, [r3, #0]
  return 1;
 8014c82:	2301      	movs	r3, #1
}
 8014c84:	4618      	mov	r0, r3
 8014c86:	371c      	adds	r7, #28
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8e:	4770      	bx	lr

08014c90 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8014c90:	b590      	push	{r4, r7, lr}
 8014c92:	b085      	sub	sp, #20
 8014c94:	af02      	add	r7, sp, #8
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	4608      	mov	r0, r1
 8014c9a:	4611      	mov	r1, r2
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	70fb      	strb	r3, [r7, #3]
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	70bb      	strb	r3, [r7, #2]
 8014ca6:	4613      	mov	r3, r2
 8014ca8:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014cb0:	78ba      	ldrb	r2, [r7, #2]
 8014cb2:	1ad3      	subs	r3, r2, r3
 8014cb4:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8014cba:	7878      	ldrb	r0, [r7, #1]
 8014cbc:	78ba      	ldrb	r2, [r7, #2]
 8014cbe:	78f9      	ldrb	r1, [r7, #3]
 8014cc0:	7e3b      	ldrb	r3, [r7, #24]
 8014cc2:	9300      	str	r3, [sp, #0]
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	47a0      	blx	r4
}
 8014cca:	bf00      	nop
 8014ccc:	370c      	adds	r7, #12
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd90      	pop	{r4, r7, pc}

08014cd2 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8014cd2:	b590      	push	{r4, r7, lr}
 8014cd4:	b085      	sub	sp, #20
 8014cd6:	af02      	add	r7, sp, #8
 8014cd8:	6078      	str	r0, [r7, #4]
 8014cda:	4608      	mov	r0, r1
 8014cdc:	4611      	mov	r1, r2
 8014cde:	461a      	mov	r2, r3
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	70fb      	strb	r3, [r7, #3]
 8014ce4:	460b      	mov	r3, r1
 8014ce6:	70bb      	strb	r3, [r7, #2]
 8014ce8:	4613      	mov	r3, r2
 8014cea:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d06d      	beq.n	8014dd2 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8014cf6:	787b      	ldrb	r3, [r7, #1]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d06a      	beq.n	8014dd2 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8014cfc:	787b      	ldrb	r3, [r7, #1]
 8014cfe:	2b01      	cmp	r3, #1
 8014d00:	d918      	bls.n	8014d34 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8014d02:	7e3b      	ldrb	r3, [r7, #24]
 8014d04:	2b02      	cmp	r3, #2
 8014d06:	d109      	bne.n	8014d1c <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8014d08:	78fa      	ldrb	r2, [r7, #3]
 8014d0a:	787b      	ldrb	r3, [r7, #1]
 8014d0c:	1ad3      	subs	r3, r2, r3
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	70fb      	strb	r3, [r7, #3]
	  x++;
 8014d12:	78fb      	ldrb	r3, [r7, #3]
 8014d14:	3301      	adds	r3, #1
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	70fb      	strb	r3, [r7, #3]
 8014d1a:	e00b      	b.n	8014d34 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8014d1c:	7e3b      	ldrb	r3, [r7, #24]
 8014d1e:	2b03      	cmp	r3, #3
 8014d20:	d108      	bne.n	8014d34 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8014d22:	78ba      	ldrb	r2, [r7, #2]
 8014d24:	787b      	ldrb	r3, [r7, #1]
 8014d26:	1ad3      	subs	r3, r2, r3
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	70bb      	strb	r3, [r7, #2]
	  y++;
 8014d2c:	78bb      	ldrb	r3, [r7, #2]
 8014d2e:	3301      	adds	r3, #1
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8014d34:	7e3b      	ldrb	r3, [r7, #24]
 8014d36:	f003 0301 	and.w	r3, r3, #1
 8014d3a:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8014d3c:	7e3b      	ldrb	r3, [r7, #24]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d119      	bne.n	8014d76 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8014d48:	78bb      	ldrb	r3, [r7, #2]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d838      	bhi.n	8014dc0 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014d54:	78bb      	ldrb	r3, [r7, #2]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d934      	bls.n	8014dc4 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014d66:	1c79      	adds	r1, r7, #1
 8014d68:	1cf8      	adds	r0, r7, #3
 8014d6a:	f7ff ff43 	bl	8014bf4 <u8g2_clip_intersection2>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d119      	bne.n	8014da8 <u8g2_DrawHVLine+0xd6>
	  return;
 8014d74:	e02d      	b.n	8014dd2 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8014d7c:	78fb      	ldrb	r3, [r7, #3]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d822      	bhi.n	8014dc8 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8014d88:	78fb      	ldrb	r3, [r7, #3]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d91e      	bls.n	8014dcc <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d9a:	1c79      	adds	r1, r7, #1
 8014d9c:	1cb8      	adds	r0, r7, #2
 8014d9e:	f7ff ff29 	bl	8014bf4 <u8g2_clip_intersection2>
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d013      	beq.n	8014dd0 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dac:	689c      	ldr	r4, [r3, #8]
 8014dae:	78f9      	ldrb	r1, [r7, #3]
 8014db0:	78ba      	ldrb	r2, [r7, #2]
 8014db2:	7878      	ldrb	r0, [r7, #1]
 8014db4:	7e3b      	ldrb	r3, [r7, #24]
 8014db6:	9300      	str	r3, [sp, #0]
 8014db8:	4603      	mov	r3, r0
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	47a0      	blx	r4
 8014dbe:	e008      	b.n	8014dd2 <u8g2_DrawHVLine+0x100>
	  return;
 8014dc0:	bf00      	nop
 8014dc2:	e006      	b.n	8014dd2 <u8g2_DrawHVLine+0x100>
	  return;
 8014dc4:	bf00      	nop
 8014dc6:	e004      	b.n	8014dd2 <u8g2_DrawHVLine+0x100>
	  return;
 8014dc8:	bf00      	nop
 8014dca:	e002      	b.n	8014dd2 <u8g2_DrawHVLine+0x100>
	  return;
 8014dcc:	bf00      	nop
 8014dce:	e000      	b.n	8014dd2 <u8g2_DrawHVLine+0x100>
	  return;
 8014dd0:	bf00      	nop
    }
}
 8014dd2:	370c      	adds	r7, #12
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd90      	pop	{r4, r7, pc}

08014dd8 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af02      	add	r7, sp, #8
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	4608      	mov	r0, r1
 8014de2:	4611      	mov	r1, r2
 8014de4:	461a      	mov	r2, r3
 8014de6:	4603      	mov	r3, r0
 8014de8:	70fb      	strb	r3, [r7, #3]
 8014dea:	460b      	mov	r3, r1
 8014dec:	70bb      	strb	r3, [r7, #2]
 8014dee:	4613      	mov	r3, r2
 8014df0:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8014df2:	787b      	ldrb	r3, [r7, #1]
 8014df4:	78ba      	ldrb	r2, [r7, #2]
 8014df6:	78f9      	ldrb	r1, [r7, #3]
 8014df8:	2000      	movs	r0, #0
 8014dfa:	9000      	str	r0, [sp, #0]
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	f7ff ff68 	bl	8014cd2 <u8g2_DrawHVLine>
}
 8014e02:	bf00      	nop
 8014e04:	3708      	adds	r7, #8
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8014e0a:	b580      	push	{r7, lr}
 8014e0c:	b084      	sub	sp, #16
 8014e0e:	af02      	add	r7, sp, #8
 8014e10:	6078      	str	r0, [r7, #4]
 8014e12:	460b      	mov	r3, r1
 8014e14:	70fb      	strb	r3, [r7, #3]
 8014e16:	4613      	mov	r3, r2
 8014e18:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014e20:	78ba      	ldrb	r2, [r7, #2]
 8014e22:	429a      	cmp	r2, r3
 8014e24:	d31a      	bcc.n	8014e5c <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014e2c:	78ba      	ldrb	r2, [r7, #2]
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d216      	bcs.n	8014e60 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014e38:	78fa      	ldrb	r2, [r7, #3]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d312      	bcc.n	8014e64 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014e44:	78fa      	ldrb	r2, [r7, #3]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d20e      	bcs.n	8014e68 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8014e4a:	78ba      	ldrb	r2, [r7, #2]
 8014e4c:	78f9      	ldrb	r1, [r7, #3]
 8014e4e:	2300      	movs	r3, #0
 8014e50:	9300      	str	r3, [sp, #0]
 8014e52:	2301      	movs	r3, #1
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f7ff ff3c 	bl	8014cd2 <u8g2_DrawHVLine>
 8014e5a:	e006      	b.n	8014e6a <u8g2_DrawPixel+0x60>
    return;
 8014e5c:	bf00      	nop
 8014e5e:	e004      	b.n	8014e6a <u8g2_DrawPixel+0x60>
    return;
 8014e60:	bf00      	nop
 8014e62:	e002      	b.n	8014e6a <u8g2_DrawPixel+0x60>
    return;
 8014e64:	bf00      	nop
 8014e66:	e000      	b.n	8014e6a <u8g2_DrawPixel+0x60>
    return;
 8014e68:	bf00      	nop
}
 8014e6a:	3708      	adds	r7, #8
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}

08014e70 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8014e70:	b480      	push	{r7}
 8014e72:	b083      	sub	sp, #12
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	460b      	mov	r3, r1
 8014e7a:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	78fa      	ldrb	r2, [r7, #3]
 8014e80:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8014e84:	78fb      	ldrb	r3, [r7, #3]
 8014e86:	2b02      	cmp	r3, #2
 8014e88:	d903      	bls.n	8014e92 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8014e92:	bf00      	nop
 8014e94:	370c      	adds	r7, #12
 8014e96:	46bd      	mov	sp, r7
 8014e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9c:	4770      	bx	lr
	...

08014ea0 <u8g2_UserInterfaceInputValue32>:
  //return r;  
}


uint32_t u8g2_UserInterfaceInputValue32(u8g2_t *u8g2, const char *title, const char *pre, uint32_t *value, uint32_t lo, uint32_t hi, uint8_t digits, const char *post)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b08a      	sub	sp, #40	; 0x28
 8014ea4:	af02      	add	r7, sp, #8
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	60b9      	str	r1, [r7, #8]
 8014eaa:	607a      	str	r2, [r7, #4]
 8014eac:	603b      	str	r3, [r7, #0]
  u8g2_uint_t pixel_height;
  u8g2_uint_t  y, yy;
  u8g2_uint_t  pixel_width;
  u8g2_uint_t  x, xx;

  uint8_t multiplier = 1;
 8014eae:	2301      	movs	r3, #1
 8014eb0:	777b      	strb	r3, [r7, #29]


  uint32_t local_value = *value;
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	61bb      	str	r3, [r7, #24]
  //uint8_t r; /* not used ??? */
  uint8_t event;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8014eb8:	2100      	movs	r1, #0
 8014eba:	68f8      	ldr	r0, [r7, #12]
 8014ebc:	f7ff fe8a 	bl	8014bd4 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 8014ec0:	68f8      	ldr	r0, [r7, #12]
 8014ec2:	f7ff fdf9 	bl	8014ab8 <u8g2_SetFontPosBaseline>

  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8014ecc:	75fb      	strb	r3, [r7, #23]
  line_height -= u8g2_GetDescent(u8g2);
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	7dfa      	ldrb	r2, [r7, #23]
 8014ed8:	1ad3      	subs	r3, r2, r3
 8014eda:	75fb      	strb	r3, [r7, #23]


  /* calculate overall height of the input value box */
  height = 1;	/* value input line */
 8014edc:	2301      	movs	r3, #1
 8014ede:	75bb      	strb	r3, [r7, #22]
  height += u8x8_GetStringLineCnt(title);
 8014ee0:	68b8      	ldr	r0, [r7, #8]
 8014ee2:	f001 fd3a 	bl	801695a <u8x8_GetStringLineCnt>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	461a      	mov	r2, r3
 8014eea:	7dbb      	ldrb	r3, [r7, #22]
 8014eec:	4413      	add	r3, r2
 8014eee:	75bb      	strb	r3, [r7, #22]

  /* calculate the height in pixel */
  pixel_height = height;
 8014ef0:	7dbb      	ldrb	r3, [r7, #22]
 8014ef2:	757b      	strb	r3, [r7, #21]
  pixel_height *= line_height;
 8014ef4:	7d7a      	ldrb	r2, [r7, #21]
 8014ef6:	7dfb      	ldrb	r3, [r7, #23]
 8014ef8:	fb12 f303 	smulbb	r3, r2, r3
 8014efc:	757b      	strb	r3, [r7, #21]


  /* calculate offset from top */
  y = 0;
 8014efe:	2300      	movs	r3, #0
 8014f00:	77fb      	strb	r3, [r7, #31]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)  )
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f08:	7d7a      	ldrb	r2, [r7, #21]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d20a      	bcs.n	8014f24 <u8g2_UserInterfaceInputValue32+0x84>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f14:	77fb      	strb	r3, [r7, #31]
    y -= pixel_height;
 8014f16:	7ffa      	ldrb	r2, [r7, #31]
 8014f18:	7d7b      	ldrb	r3, [r7, #21]
 8014f1a:	1ad3      	subs	r3, r2, r3
 8014f1c:	77fb      	strb	r3, [r7, #31]
    y /= 2;
 8014f1e:	7ffb      	ldrb	r3, [r7, #31]
 8014f20:	085b      	lsrs	r3, r3, #1
 8014f22:	77fb      	strb	r3, [r7, #31]
  }

  /* calculate offset from left for the label */
  x = 0;
 8014f24:	2300      	movs	r3, #0
 8014f26:	77bb      	strb	r3, [r7, #30]
  pixel_width = u8g2_GetUTF8Width(u8g2, pre);
 8014f28:	6879      	ldr	r1, [r7, #4]
 8014f2a:	68f8      	ldr	r0, [r7, #12]
 8014f2c:	f7ff fe3e 	bl	8014bac <u8g2_GetUTF8Width>
 8014f30:	4603      	mov	r3, r0
 8014f32:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, " ");
 8014f34:	49a0      	ldr	r1, [pc, #640]	; (80151b8 <u8g2_UserInterfaceInputValue32+0x318>)
 8014f36:	68f8      	ldr	r0, [r7, #12]
 8014f38:	f7ff fe38 	bl	8014bac <u8g2_GetUTF8Width>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	461a      	mov	r2, r3
 8014f40:	7d3b      	ldrb	r3, [r7, #20]
 8014f42:	4413      	add	r3, r2
 8014f44:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 8014f46:	499d      	ldr	r1, [pc, #628]	; (80151bc <u8g2_UserInterfaceInputValue32+0x31c>)
 8014f48:	68f8      	ldr	r0, [r7, #12]
 8014f4a:	f7ff fe2f 	bl	8014bac <u8g2_GetUTF8Width>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	461a      	mov	r2, r3
 8014f52:	7d3b      	ldrb	r3, [r7, #20]
 8014f54:	4413      	add	r3, r2
 8014f56:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * 3;
 8014f58:	4999      	ldr	r1, [pc, #612]	; (80151c0 <u8g2_UserInterfaceInputValue32+0x320>)
 8014f5a:	68f8      	ldr	r0, [r7, #12]
 8014f5c:	f7ff fe26 	bl	8014bac <u8g2_GetUTF8Width>
 8014f60:	4603      	mov	r3, r0
 8014f62:	461a      	mov	r2, r3
 8014f64:	4613      	mov	r3, r2
 8014f66:	005b      	lsls	r3, r3, #1
 8014f68:	4413      	add	r3, r2
 8014f6a:	b2da      	uxtb	r2, r3
 8014f6c:	7d3b      	ldrb	r3, [r7, #20]
 8014f6e:	4413      	add	r3, r2
 8014f70:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 8014f72:	4992      	ldr	r1, [pc, #584]	; (80151bc <u8g2_UserInterfaceInputValue32+0x31c>)
 8014f74:	68f8      	ldr	r0, [r7, #12]
 8014f76:	f7ff fe19 	bl	8014bac <u8g2_GetUTF8Width>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	461a      	mov	r2, r3
 8014f7e:	7d3b      	ldrb	r3, [r7, #20]
 8014f80:	4413      	add	r3, r2
 8014f82:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
 8014f84:	498e      	ldr	r1, [pc, #568]	; (80151c0 <u8g2_UserInterfaceInputValue32+0x320>)
 8014f86:	68f8      	ldr	r0, [r7, #12]
 8014f88:	f7ff fe10 	bl	8014bac <u8g2_GetUTF8Width>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	461a      	mov	r2, r3
 8014f90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014f94:	fb03 f302 	mul.w	r3, r3, r2
 8014f98:	b2da      	uxtb	r2, r3
 8014f9a:	7d3b      	ldrb	r3, [r7, #20]
 8014f9c:	4413      	add	r3, r2
 8014f9e:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 8014fa0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014fa2:	68f8      	ldr	r0, [r7, #12]
 8014fa4:	f7ff fe02 	bl	8014bac <u8g2_GetUTF8Width>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	461a      	mov	r2, r3
 8014fac:	7d3b      	ldrb	r3, [r7, #20]
 8014fae:	4413      	add	r3, r2
 8014fb0:	753b      	strb	r3, [r7, #20]
  if ( pixel_width < u8g2_GetDisplayWidth(u8g2) )
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014fb8:	7d3a      	ldrb	r2, [r7, #20]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d20a      	bcs.n	8014fd4 <u8g2_UserInterfaceInputValue32+0x134>
  {
    x = u8g2_GetDisplayWidth(u8g2);
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014fc4:	77bb      	strb	r3, [r7, #30]
    x -= pixel_width;
 8014fc6:	7fba      	ldrb	r2, [r7, #30]
 8014fc8:	7d3b      	ldrb	r3, [r7, #20]
 8014fca:	1ad3      	subs	r3, r2, r3
 8014fcc:	77bb      	strb	r3, [r7, #30]
    x /= 2;
 8014fce:	7fbb      	ldrb	r3, [r7, #30]
 8014fd0:	085b      	lsrs	r3, r3, #1
 8014fd2:	77bb      	strb	r3, [r7, #30]
  }

  /* event loop */
  for(;;)
  {
    u8g2_FirstPage(u8g2);
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f7fe ff11 	bl	8013dfc <u8g2_FirstPage>
    do
    {
      /* render */
      yy = y;
 8014fda:	7ffb      	ldrb	r3, [r7, #31]
 8014fdc:	74fb      	strb	r3, [r7, #19]
      yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8014fe4:	7cfa      	ldrb	r2, [r7, #19]
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	9301      	str	r3, [sp, #4]
 8014fea:	7dfb      	ldrb	r3, [r7, #23]
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	460b      	mov	r3, r1
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	68f8      	ldr	r0, [r7, #12]
 8014ff4:	f000 fc72 	bl	80158dc <u8g2_DrawUTF8Lines>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	7cfb      	ldrb	r3, [r7, #19]
 8014ffe:	4413      	add	r3, r2
 8015000:	74fb      	strb	r3, [r7, #19]
      xx = x;
 8015002:	7fbb      	ldrb	r3, [r7, #30]
 8015004:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 8015006:	7cfa      	ldrb	r2, [r7, #19]
 8015008:	7cb9      	ldrb	r1, [r7, #18]
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	68f8      	ldr	r0, [r7, #12]
 801500e:	f7ff fcc1 	bl	8014994 <u8g2_DrawUTF8>
 8015012:	4603      	mov	r3, r0
 8015014:	461a      	mov	r2, r3
 8015016:	7cbb      	ldrb	r3, [r7, #18]
 8015018:	4413      	add	r3, r2
 801501a:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 801501c:	7cfa      	ldrb	r2, [r7, #19]
 801501e:	7cb9      	ldrb	r1, [r7, #18]
 8015020:	4b65      	ldr	r3, [pc, #404]	; (80151b8 <u8g2_UserInterfaceInputValue32+0x318>)
 8015022:	68f8      	ldr	r0, [r7, #12]
 8015024:	f7ff fcb6 	bl	8014994 <u8g2_DrawUTF8>
 8015028:	4603      	mov	r3, r0
 801502a:	461a      	mov	r2, r3
 801502c:	7cbb      	ldrb	r3, [r7, #18]
 801502e:	4413      	add	r3, r2
 8015030:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, "x");
 8015032:	7cfa      	ldrb	r2, [r7, #19]
 8015034:	7cb9      	ldrb	r1, [r7, #18]
 8015036:	4b61      	ldr	r3, [pc, #388]	; (80151bc <u8g2_UserInterfaceInputValue32+0x31c>)
 8015038:	68f8      	ldr	r0, [r7, #12]
 801503a:	f7ff fcab 	bl	8014994 <u8g2_DrawUTF8>
 801503e:	4603      	mov	r3, r0
 8015040:	461a      	mov	r2, r3
 8015042:	7cbb      	ldrb	r3, [r7, #18]
 8015044:	4413      	add	r3, r2
 8015046:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(multiplier, 3));
 8015048:	7f7b      	ldrb	r3, [r7, #29]
 801504a:	b29b      	uxth	r3, r3
 801504c:	2103      	movs	r1, #3
 801504e:	4618      	mov	r0, r3
 8015050:	f001 fd0a 	bl	8016a68 <u8x8_u16toa>
 8015054:	4603      	mov	r3, r0
 8015056:	7cfa      	ldrb	r2, [r7, #19]
 8015058:	7cb9      	ldrb	r1, [r7, #18]
 801505a:	68f8      	ldr	r0, [r7, #12]
 801505c:	f7ff fc9a 	bl	8014994 <u8g2_DrawUTF8>
 8015060:	4603      	mov	r3, r0
 8015062:	461a      	mov	r2, r3
 8015064:	7cbb      	ldrb	r3, [r7, #18]
 8015066:	4413      	add	r3, r2
 8015068:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 801506a:	7cfa      	ldrb	r2, [r7, #19]
 801506c:	7cb9      	ldrb	r1, [r7, #18]
 801506e:	4b52      	ldr	r3, [pc, #328]	; (80151b8 <u8g2_UserInterfaceInputValue32+0x318>)
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	f7ff fc8f 	bl	8014994 <u8g2_DrawUTF8>
 8015076:	4603      	mov	r3, r0
 8015078:	461a      	mov	r2, r3
 801507a:	7cbb      	ldrb	r3, [r7, #18]
 801507c:	4413      	add	r3, r2
 801507e:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(local_value, digits));
 8015080:	69bb      	ldr	r3, [r7, #24]
 8015082:	b29b      	uxth	r3, r3
 8015084:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8015088:	4611      	mov	r1, r2
 801508a:	4618      	mov	r0, r3
 801508c:	f001 fcec 	bl	8016a68 <u8x8_u16toa>
 8015090:	4603      	mov	r3, r0
 8015092:	7cfa      	ldrb	r2, [r7, #19]
 8015094:	7cb9      	ldrb	r1, [r7, #18]
 8015096:	68f8      	ldr	r0, [r7, #12]
 8015098:	f7ff fc7c 	bl	8014994 <u8g2_DrawUTF8>
 801509c:	4603      	mov	r3, r0
 801509e:	461a      	mov	r2, r3
 80150a0:	7cbb      	ldrb	r3, [r7, #18]
 80150a2:	4413      	add	r3, r2
 80150a4:	74bb      	strb	r3, [r7, #18]
      u8g2_DrawUTF8(u8g2, xx, yy, post);
 80150a6:	7cfa      	ldrb	r2, [r7, #19]
 80150a8:	7cb9      	ldrb	r1, [r7, #18]
 80150aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ac:	68f8      	ldr	r0, [r7, #12]
 80150ae:	f7ff fc71 	bl	8014994 <u8g2_DrawUTF8>
    } while( u8g2_NextPage(u8g2) );
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	f7fe feb6 	bl	8013e24 <u8g2_NextPage>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d18d      	bne.n	8014fda <u8g2_UserInterfaceInputValue32+0x13a>
      return 0;
#endif

    for(;;)
    {
      event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 80150be:	68f8      	ldr	r0, [r7, #12]
 80150c0:	f7ef fbe2 	bl	8004888 <u8x8_GetMenuEvent>
 80150c4:	4603      	mov	r3, r0
 80150c6:	747b      	strb	r3, [r7, #17]
      if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 80150c8:	7c7b      	ldrb	r3, [r7, #17]
 80150ca:	2b50      	cmp	r3, #80	; 0x50
 80150cc:	d106      	bne.n	80150dc <u8g2_UserInterfaceInputValue32+0x23c>
      {
    	  *value = local_value;
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	69ba      	ldr	r2, [r7, #24]
 80150d2:	601a      	str	r2, [r3, #0]
    	  multiplier = 1;
 80150d4:	2301      	movs	r3, #1
 80150d6:	777b      	strb	r3, [r7, #29]
    	  return 1;
 80150d8:	2301      	movs	r3, #1
 80150da:	e068      	b.n	80151ae <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 80150dc:	7c7b      	ldrb	r3, [r7, #17]
 80150de:	2b53      	cmp	r3, #83	; 0x53
 80150e0:	d101      	bne.n	80150e6 <u8g2_UserInterfaceInputValue32+0x246>
      {
    	  return 0;
 80150e2:	2300      	movs	r3, #0
 80150e4:	e063      	b.n	80151ae <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_UP )
 80150e6:	7c7b      	ldrb	r3, [r7, #17]
 80150e8:	2b54      	cmp	r3, #84	; 0x54
 80150ea:	d10b      	bne.n	8015104 <u8g2_UserInterfaceInputValue32+0x264>
      {
    	  if ( local_value >= hi )
 80150ec:	69ba      	ldr	r2, [r7, #24]
 80150ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d302      	bcc.n	80150fa <u8g2_UserInterfaceInputValue32+0x25a>
    		  local_value = lo;
 80150f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f6:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value + 1*multiplier;
    	  break;
 80150f8:	e058      	b.n	80151ac <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value + 1*multiplier;
 80150fa:	7f7b      	ldrb	r3, [r7, #29]
 80150fc:	69ba      	ldr	r2, [r7, #24]
 80150fe:	4413      	add	r3, r2
 8015100:	61bb      	str	r3, [r7, #24]
    	  break;
 8015102:	e053      	b.n	80151ac <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_DOWN )
 8015104:	7c7b      	ldrb	r3, [r7, #17]
 8015106:	2b55      	cmp	r3, #85	; 0x55
 8015108:	d10b      	bne.n	8015122 <u8g2_UserInterfaceInputValue32+0x282>
      {
    	  if ( local_value <= lo )
 801510a:	69ba      	ldr	r2, [r7, #24]
 801510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801510e:	429a      	cmp	r2, r3
 8015110:	d802      	bhi.n	8015118 <u8g2_UserInterfaceInputValue32+0x278>
    		  local_value = hi;
 8015112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015114:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value - 1*multiplier;
    	  break;
 8015116:	e049      	b.n	80151ac <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value - 1*multiplier;
 8015118:	7f7b      	ldrb	r3, [r7, #29]
 801511a:	69ba      	ldr	r2, [r7, #24]
 801511c:	1ad3      	subs	r3, r2, r3
 801511e:	61bb      	str	r3, [r7, #24]
    	  break;
 8015120:	e044      	b.n	80151ac <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_NEXT )
 8015122:	7c7b      	ldrb	r3, [r7, #17]
 8015124:	2b51      	cmp	r3, #81	; 0x51
 8015126:	d11d      	bne.n	8015164 <u8g2_UserInterfaceInputValue32+0x2c4>
    	  if(multiplier >50)
    		  multiplier = 10;
    		*/
    	  //multiplier = multiplier%3 + 1;

    	  if(multiplier == 1)
 8015128:	7f7b      	ldrb	r3, [r7, #29]
 801512a:	2b01      	cmp	r3, #1
 801512c:	d102      	bne.n	8015134 <u8g2_UserInterfaceInputValue32+0x294>
    		  multiplier = 5;
 801512e:	2305      	movs	r3, #5
 8015130:	777b      	strb	r3, [r7, #29]
    	  else if(multiplier == 50)
    		  multiplier = 100;
    	  else if(multiplier == 100)
    		  multiplier = 1;

    	  break;
 8015132:	e038      	b.n	80151a6 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 5)
 8015134:	7f7b      	ldrb	r3, [r7, #29]
 8015136:	2b05      	cmp	r3, #5
 8015138:	d102      	bne.n	8015140 <u8g2_UserInterfaceInputValue32+0x2a0>
    		  multiplier = 10;
 801513a:	230a      	movs	r3, #10
 801513c:	777b      	strb	r3, [r7, #29]
    	  break;
 801513e:	e032      	b.n	80151a6 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 10)
 8015140:	7f7b      	ldrb	r3, [r7, #29]
 8015142:	2b0a      	cmp	r3, #10
 8015144:	d102      	bne.n	801514c <u8g2_UserInterfaceInputValue32+0x2ac>
    		  multiplier = 50;
 8015146:	2332      	movs	r3, #50	; 0x32
 8015148:	777b      	strb	r3, [r7, #29]
    	  break;
 801514a:	e02c      	b.n	80151a6 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 50)
 801514c:	7f7b      	ldrb	r3, [r7, #29]
 801514e:	2b32      	cmp	r3, #50	; 0x32
 8015150:	d102      	bne.n	8015158 <u8g2_UserInterfaceInputValue32+0x2b8>
    		  multiplier = 100;
 8015152:	2364      	movs	r3, #100	; 0x64
 8015154:	777b      	strb	r3, [r7, #29]
    	  break;
 8015156:	e026      	b.n	80151a6 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 100)
 8015158:	7f7b      	ldrb	r3, [r7, #29]
 801515a:	2b64      	cmp	r3, #100	; 0x64
 801515c:	d123      	bne.n	80151a6 <u8g2_UserInterfaceInputValue32+0x306>
    		  multiplier = 1;
 801515e:	2301      	movs	r3, #1
 8015160:	777b      	strb	r3, [r7, #29]
    	  break;
 8015162:	e020      	b.n	80151a6 <u8g2_UserInterfaceInputValue32+0x306>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_PREV )
 8015164:	7c7b      	ldrb	r3, [r7, #17]
 8015166:	2b52      	cmp	r3, #82	; 0x52
 8015168:	d1a9      	bne.n	80150be <u8g2_UserInterfaceInputValue32+0x21e>
    		  //multiplier = 2;
    		 // multiplier = multiplier%3 + 1;
    	  }
    	  */

    	  if(multiplier == 1)
 801516a:	7f7b      	ldrb	r3, [r7, #29]
 801516c:	2b01      	cmp	r3, #1
 801516e:	d102      	bne.n	8015176 <u8g2_UserInterfaceInputValue32+0x2d6>
    		  multiplier = 100;
 8015170:	2364      	movs	r3, #100	; 0x64
 8015172:	777b      	strb	r3, [r7, #29]
    	  /*
    	  multiplier -=10;
    	  if(multiplier <=0)
    		  multiplier = 50;
    		*/
    	  break;
 8015174:	e019      	b.n	80151aa <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 5)
 8015176:	7f7b      	ldrb	r3, [r7, #29]
 8015178:	2b05      	cmp	r3, #5
 801517a:	d102      	bne.n	8015182 <u8g2_UserInterfaceInputValue32+0x2e2>
    		  multiplier = 1;
 801517c:	2301      	movs	r3, #1
 801517e:	777b      	strb	r3, [r7, #29]
    	  break;
 8015180:	e013      	b.n	80151aa <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 10)
 8015182:	7f7b      	ldrb	r3, [r7, #29]
 8015184:	2b0a      	cmp	r3, #10
 8015186:	d102      	bne.n	801518e <u8g2_UserInterfaceInputValue32+0x2ee>
    		  multiplier = 5;
 8015188:	2305      	movs	r3, #5
 801518a:	777b      	strb	r3, [r7, #29]
    	  break;
 801518c:	e00d      	b.n	80151aa <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 50)
 801518e:	7f7b      	ldrb	r3, [r7, #29]
 8015190:	2b32      	cmp	r3, #50	; 0x32
 8015192:	d102      	bne.n	801519a <u8g2_UserInterfaceInputValue32+0x2fa>
    		  multiplier = 10;
 8015194:	230a      	movs	r3, #10
 8015196:	777b      	strb	r3, [r7, #29]
    	  break;
 8015198:	e007      	b.n	80151aa <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 100)
 801519a:	7f7b      	ldrb	r3, [r7, #29]
 801519c:	2b64      	cmp	r3, #100	; 0x64
 801519e:	d104      	bne.n	80151aa <u8g2_UserInterfaceInputValue32+0x30a>
    		  multiplier = 50;
 80151a0:	2332      	movs	r3, #50	; 0x32
 80151a2:	777b      	strb	r3, [r7, #29]
    	  break;
 80151a4:	e001      	b.n	80151aa <u8g2_UserInterfaceInputValue32+0x30a>
    	  break;
 80151a6:	bf00      	nop
 80151a8:	e714      	b.n	8014fd4 <u8g2_UserInterfaceInputValue32+0x134>
    	  break;
 80151aa:	bf00      	nop
    u8g2_FirstPage(u8g2);
 80151ac:	e712      	b.n	8014fd4 <u8g2_UserInterfaceInputValue32+0x134>
    }
  }

  /* never reached */
  //return r;
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3720      	adds	r7, #32
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
 80151b6:	bf00      	nop
 80151b8:	080237b4 	.word	0x080237b4
 80151bc:	080237b8 	.word	0x080237b8
 80151c0:	080237b0 	.word	0x080237b0

080151c4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80151c4:	b490      	push	{r4, r7}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	4604      	mov	r4, r0
 80151cc:	4608      	mov	r0, r1
 80151ce:	4611      	mov	r1, r2
 80151d0:	461a      	mov	r2, r3
 80151d2:	4623      	mov	r3, r4
 80151d4:	71fb      	strb	r3, [r7, #7]
 80151d6:	4603      	mov	r3, r0
 80151d8:	71bb      	strb	r3, [r7, #6]
 80151da:	460b      	mov	r3, r1
 80151dc:	717b      	strb	r3, [r7, #5]
 80151de:	4613      	mov	r3, r2
 80151e0:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 80151e2:	797a      	ldrb	r2, [r7, #5]
 80151e4:	79bb      	ldrb	r3, [r7, #6]
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d20d      	bcs.n	8015206 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80151ea:	793a      	ldrb	r2, [r7, #4]
 80151ec:	79fb      	ldrb	r3, [r7, #7]
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d901      	bls.n	80151f6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80151f2:	2301      	movs	r3, #1
 80151f4:	e014      	b.n	8015220 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80151f6:	797a      	ldrb	r2, [r7, #5]
 80151f8:	793b      	ldrb	r3, [r7, #4]
 80151fa:	429a      	cmp	r2, r3
 80151fc:	d901      	bls.n	8015202 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80151fe:	2301      	movs	r3, #1
 8015200:	e00e      	b.n	8015220 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015202:	2300      	movs	r3, #0
 8015204:	e00c      	b.n	8015220 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8015206:	793a      	ldrb	r2, [r7, #4]
 8015208:	79fb      	ldrb	r3, [r7, #7]
 801520a:	429a      	cmp	r2, r3
 801520c:	d907      	bls.n	801521e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 801520e:	797a      	ldrb	r2, [r7, #5]
 8015210:	793b      	ldrb	r3, [r7, #4]
 8015212:	429a      	cmp	r2, r3
 8015214:	d901      	bls.n	801521a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8015216:	2301      	movs	r3, #1
 8015218:	e002      	b.n	8015220 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 801521a:	2300      	movs	r3, #0
 801521c:	e000      	b.n	8015220 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 801521e:	2300      	movs	r3, #0
    }
  }
}
 8015220:	4618      	mov	r0, r3
 8015222:	3708      	adds	r7, #8
 8015224:	46bd      	mov	sp, r7
 8015226:	bc90      	pop	{r4, r7}
 8015228:	4770      	bx	lr

0801522a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 801522a:	b580      	push	{r7, lr}
 801522c:	b082      	sub	sp, #8
 801522e:	af00      	add	r7, sp, #0
 8015230:	6078      	str	r0, [r7, #4]
 8015232:	4608      	mov	r0, r1
 8015234:	4611      	mov	r1, r2
 8015236:	461a      	mov	r2, r3
 8015238:	4603      	mov	r3, r0
 801523a:	70fb      	strb	r3, [r7, #3]
 801523c:	460b      	mov	r3, r1
 801523e:	70bb      	strb	r3, [r7, #2]
 8015240:	4613      	mov	r3, r2
 8015242:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8015250:	7c3b      	ldrb	r3, [r7, #16]
 8015252:	78ba      	ldrb	r2, [r7, #2]
 8015254:	f7ff ffb6 	bl	80151c4 <u8g2_is_intersection_decision_tree>
 8015258:	4603      	mov	r3, r0
 801525a:	2b00      	cmp	r3, #0
 801525c:	d101      	bne.n	8015262 <u8g2_IsIntersection+0x38>
    return 0; 
 801525e:	2300      	movs	r3, #0
 8015260:	e00a      	b.n	8015278 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 801526e:	787b      	ldrb	r3, [r7, #1]
 8015270:	78fa      	ldrb	r2, [r7, #3]
 8015272:	f7ff ffa7 	bl	80151c4 <u8g2_is_intersection_decision_tree>
 8015276:	4603      	mov	r3, r0
}
 8015278:	4618      	mov	r0, r3
 801527a:	3708      	adds	r7, #8
 801527c:	46bd      	mov	sp, r7
 801527e:	bd80      	pop	{r7, pc}

08015280 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	4608      	mov	r0, r1
 801528a:	4611      	mov	r1, r2
 801528c:	461a      	mov	r2, r3
 801528e:	4603      	mov	r3, r0
 8015290:	70fb      	strb	r3, [r7, #3]
 8015292:	460b      	mov	r3, r1
 8015294:	70bb      	strb	r3, [r7, #2]
 8015296:	4613      	mov	r3, r2
 8015298:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 801529a:	2300      	movs	r3, #0
 801529c:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 801529e:	78fa      	ldrb	r2, [r7, #3]
 80152a0:	787b      	ldrb	r3, [r7, #1]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d904      	bls.n	80152b0 <u8g2_DrawLine+0x30>
 80152a6:	78fa      	ldrb	r2, [r7, #3]
 80152a8:	787b      	ldrb	r3, [r7, #1]
 80152aa:	1ad3      	subs	r3, r2, r3
 80152ac:	737b      	strb	r3, [r7, #13]
 80152ae:	e003      	b.n	80152b8 <u8g2_DrawLine+0x38>
 80152b0:	787a      	ldrb	r2, [r7, #1]
 80152b2:	78fb      	ldrb	r3, [r7, #3]
 80152b4:	1ad3      	subs	r3, r2, r3
 80152b6:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80152b8:	78ba      	ldrb	r2, [r7, #2]
 80152ba:	7e3b      	ldrb	r3, [r7, #24]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d904      	bls.n	80152ca <u8g2_DrawLine+0x4a>
 80152c0:	78ba      	ldrb	r2, [r7, #2]
 80152c2:	7e3b      	ldrb	r3, [r7, #24]
 80152c4:	1ad3      	subs	r3, r2, r3
 80152c6:	733b      	strb	r3, [r7, #12]
 80152c8:	e003      	b.n	80152d2 <u8g2_DrawLine+0x52>
 80152ca:	7e3a      	ldrb	r2, [r7, #24]
 80152cc:	78bb      	ldrb	r3, [r7, #2]
 80152ce:	1ad3      	subs	r3, r2, r3
 80152d0:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 80152d2:	7b3a      	ldrb	r2, [r7, #12]
 80152d4:	7b7b      	ldrb	r3, [r7, #13]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d913      	bls.n	8015302 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 80152da:	2301      	movs	r3, #1
 80152dc:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 80152de:	7b7b      	ldrb	r3, [r7, #13]
 80152e0:	723b      	strb	r3, [r7, #8]
 80152e2:	7b3b      	ldrb	r3, [r7, #12]
 80152e4:	737b      	strb	r3, [r7, #13]
 80152e6:	7a3b      	ldrb	r3, [r7, #8]
 80152e8:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 80152ea:	78fb      	ldrb	r3, [r7, #3]
 80152ec:	723b      	strb	r3, [r7, #8]
 80152ee:	78bb      	ldrb	r3, [r7, #2]
 80152f0:	70fb      	strb	r3, [r7, #3]
 80152f2:	7a3b      	ldrb	r3, [r7, #8]
 80152f4:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 80152f6:	787b      	ldrb	r3, [r7, #1]
 80152f8:	723b      	strb	r3, [r7, #8]
 80152fa:	7e3b      	ldrb	r3, [r7, #24]
 80152fc:	707b      	strb	r3, [r7, #1]
 80152fe:	7a3b      	ldrb	r3, [r7, #8]
 8015300:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 8015302:	78fa      	ldrb	r2, [r7, #3]
 8015304:	787b      	ldrb	r3, [r7, #1]
 8015306:	429a      	cmp	r2, r3
 8015308:	d90b      	bls.n	8015322 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 801530a:	78fb      	ldrb	r3, [r7, #3]
 801530c:	723b      	strb	r3, [r7, #8]
 801530e:	787b      	ldrb	r3, [r7, #1]
 8015310:	70fb      	strb	r3, [r7, #3]
 8015312:	7a3b      	ldrb	r3, [r7, #8]
 8015314:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 8015316:	78bb      	ldrb	r3, [r7, #2]
 8015318:	723b      	strb	r3, [r7, #8]
 801531a:	7e3b      	ldrb	r3, [r7, #24]
 801531c:	70bb      	strb	r3, [r7, #2]
 801531e:	7a3b      	ldrb	r3, [r7, #8]
 8015320:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 8015322:	7b7b      	ldrb	r3, [r7, #13]
 8015324:	085b      	lsrs	r3, r3, #1
 8015326:	b2db      	uxtb	r3, r3
 8015328:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 801532a:	7e3a      	ldrb	r2, [r7, #24]
 801532c:	78bb      	ldrb	r3, [r7, #2]
 801532e:	429a      	cmp	r2, r3
 8015330:	d902      	bls.n	8015338 <u8g2_DrawLine+0xb8>
 8015332:	2301      	movs	r3, #1
 8015334:	72bb      	strb	r3, [r7, #10]
 8015336:	e001      	b.n	801533c <u8g2_DrawLine+0xbc>
 8015338:	23ff      	movs	r3, #255	; 0xff
 801533a:	72bb      	strb	r3, [r7, #10]
  y = y1;
 801533c:	78bb      	ldrb	r3, [r7, #2]
 801533e:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 8015340:	787b      	ldrb	r3, [r7, #1]
 8015342:	2bff      	cmp	r3, #255	; 0xff
 8015344:	d102      	bne.n	801534c <u8g2_DrawLine+0xcc>
    x2--;
 8015346:	787b      	ldrb	r3, [r7, #1]
 8015348:	3b01      	subs	r3, #1
 801534a:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 801534c:	78fb      	ldrb	r3, [r7, #3]
 801534e:	73fb      	strb	r3, [r7, #15]
 8015350:	e024      	b.n	801539c <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 8015352:	7a7b      	ldrb	r3, [r7, #9]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d106      	bne.n	8015366 <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 8015358:	7bba      	ldrb	r2, [r7, #14]
 801535a:	7bfb      	ldrb	r3, [r7, #15]
 801535c:	4619      	mov	r1, r3
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f7ff fd53 	bl	8014e0a <u8g2_DrawPixel>
 8015364:	e005      	b.n	8015372 <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8015366:	7bfa      	ldrb	r2, [r7, #15]
 8015368:	7bbb      	ldrb	r3, [r7, #14]
 801536a:	4619      	mov	r1, r3
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f7ff fd4c 	bl	8014e0a <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 8015372:	7afa      	ldrb	r2, [r7, #11]
 8015374:	7b3b      	ldrb	r3, [r7, #12]
 8015376:	1ad3      	subs	r3, r2, r3
 8015378:	b2db      	uxtb	r3, r3
 801537a:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 801537c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015380:	2b00      	cmp	r3, #0
 8015382:	da08      	bge.n	8015396 <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 8015384:	7aba      	ldrb	r2, [r7, #10]
 8015386:	7bbb      	ldrb	r3, [r7, #14]
 8015388:	4413      	add	r3, r2
 801538a:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 801538c:	7afa      	ldrb	r2, [r7, #11]
 801538e:	7b7b      	ldrb	r3, [r7, #13]
 8015390:	4413      	add	r3, r2
 8015392:	b2db      	uxtb	r3, r3
 8015394:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 8015396:	7bfb      	ldrb	r3, [r7, #15]
 8015398:	3301      	adds	r3, #1
 801539a:	73fb      	strb	r3, [r7, #15]
 801539c:	7bfa      	ldrb	r2, [r7, #15]
 801539e:	787b      	ldrb	r3, [r7, #1]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d9d6      	bls.n	8015352 <u8g2_DrawLine+0xd2>
    }
  }
}
 80153a4:	bf00      	nop
 80153a6:	bf00      	nop
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80153ae:	b480      	push	{r7}
 80153b0:	b087      	sub	sp, #28
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	6078      	str	r0, [r7, #4]
 80153b6:	4608      	mov	r0, r1
 80153b8:	4611      	mov	r1, r2
 80153ba:	461a      	mov	r2, r3
 80153bc:	4603      	mov	r3, r0
 80153be:	70fb      	strb	r3, [r7, #3]
 80153c0:	460b      	mov	r3, r1
 80153c2:	70bb      	strb	r3, [r7, #2]
 80153c4:	4613      	mov	r3, r2
 80153c6:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80153c8:	78bb      	ldrb	r3, [r7, #2]
 80153ca:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80153cc:	7cfb      	ldrb	r3, [r7, #19]
 80153ce:	f003 0307 	and.w	r3, r3, #7
 80153d2:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80153d4:	2301      	movs	r3, #1
 80153d6:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80153d8:	7c3a      	ldrb	r2, [r7, #16]
 80153da:	7cfb      	ldrb	r3, [r7, #19]
 80153dc:	fa02 f303 	lsl.w	r3, r2, r3
 80153e0:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80153e2:	2300      	movs	r3, #0
 80153e4:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80153e6:	2300      	movs	r3, #0
 80153e8:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	d801      	bhi.n	80153f8 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80153f4:	7c3b      	ldrb	r3, [r7, #16]
 80153f6:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80153fe:	2b01      	cmp	r3, #1
 8015400:	d001      	beq.n	8015406 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8015402:	7c3b      	ldrb	r3, [r7, #16]
 8015404:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8015406:	78bb      	ldrb	r3, [r7, #2]
 8015408:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 801540a:	89fb      	ldrh	r3, [r7, #14]
 801540c:	f023 0307 	bic.w	r3, r3, #7
 8015410:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	7c1b      	ldrb	r3, [r3, #16]
 8015418:	b29b      	uxth	r3, r3
 801541a:	89fa      	ldrh	r2, [r7, #14]
 801541c:	fb12 f303 	smulbb	r3, r2, r3
 8015420:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015426:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8015428:	89fb      	ldrh	r3, [r7, #14]
 801542a:	697a      	ldr	r2, [r7, #20]
 801542c:	4413      	add	r3, r2
 801542e:	617b      	str	r3, [r7, #20]
  ptr += x;
 8015430:	78fb      	ldrb	r3, [r7, #3]
 8015432:	697a      	ldr	r2, [r7, #20]
 8015434:	4413      	add	r3, r2
 8015436:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8015438:	f897 3020 	ldrb.w	r3, [r7, #32]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d117      	bne.n	8015470 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	781a      	ldrb	r2, [r3, #0]
 8015444:	7cbb      	ldrb	r3, [r7, #18]
 8015446:	4313      	orrs	r3, r2
 8015448:	b2da      	uxtb	r2, r3
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	781a      	ldrb	r2, [r3, #0]
 8015452:	7c7b      	ldrb	r3, [r7, #17]
 8015454:	4053      	eors	r3, r2
 8015456:	b2da      	uxtb	r2, r3
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	701a      	strb	r2, [r3, #0]
	ptr++;
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	3301      	adds	r3, #1
 8015460:	617b      	str	r3, [r7, #20]
	len--;
 8015462:	787b      	ldrb	r3, [r7, #1]
 8015464:	3b01      	subs	r3, #1
 8015466:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8015468:	787b      	ldrb	r3, [r7, #1]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d1e8      	bne.n	8015440 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 801546e:	e039      	b.n	80154e4 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	781a      	ldrb	r2, [r3, #0]
 8015474:	7cbb      	ldrb	r3, [r7, #18]
 8015476:	4313      	orrs	r3, r2
 8015478:	b2da      	uxtb	r2, r3
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	781a      	ldrb	r2, [r3, #0]
 8015482:	7c7b      	ldrb	r3, [r7, #17]
 8015484:	4053      	eors	r3, r2
 8015486:	b2da      	uxtb	r2, r3
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 801548c:	7cfb      	ldrb	r3, [r7, #19]
 801548e:	3301      	adds	r3, #1
 8015490:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8015492:	7cfb      	ldrb	r3, [r7, #19]
 8015494:	f003 0307 	and.w	r3, r3, #7
 8015498:	74fb      	strb	r3, [r7, #19]
      len--;
 801549a:	787b      	ldrb	r3, [r7, #1]
 801549c:	3b01      	subs	r3, #1
 801549e:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80154a0:	7cfb      	ldrb	r3, [r7, #19]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d115      	bne.n	80154d2 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80154ac:	461a      	mov	r2, r3
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	4413      	add	r3, r2
 80154b2:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80154ba:	2b01      	cmp	r3, #1
 80154bc:	d801      	bhi.n	80154c2 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80154be:	2301      	movs	r3, #1
 80154c0:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80154c8:	2b01      	cmp	r3, #1
 80154ca:	d008      	beq.n	80154de <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80154cc:	2301      	movs	r3, #1
 80154ce:	747b      	strb	r3, [r7, #17]
 80154d0:	e005      	b.n	80154de <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80154d2:	7cbb      	ldrb	r3, [r7, #18]
 80154d4:	005b      	lsls	r3, r3, #1
 80154d6:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80154d8:	7c7b      	ldrb	r3, [r7, #17]
 80154da:	005b      	lsls	r3, r3, #1
 80154dc:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80154de:	787b      	ldrb	r3, [r7, #1]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d1c5      	bne.n	8015470 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80154e4:	bf00      	nop
 80154e6:	371c      	adds	r7, #28
 80154e8:	46bd      	mov	sp, r7
 80154ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ee:	4770      	bx	lr

080154f0 <u8g2_draw_button_line>:

#define SPACE_BETWEEN_BUTTONS_IN_PIXEL 6
#define SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL 3

uint8_t u8g2_draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b088      	sub	sp, #32
 80154f4:	af04      	add	r7, sp, #16
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	4608      	mov	r0, r1
 80154fa:	4611      	mov	r1, r2
 80154fc:	461a      	mov	r2, r3
 80154fe:	4603      	mov	r3, r0
 8015500:	70fb      	strb	r3, [r7, #3]
 8015502:	460b      	mov	r3, r1
 8015504:	70bb      	strb	r3, [r7, #2]
 8015506:	4613      	mov	r3, r2
 8015508:	707b      	strb	r3, [r7, #1]
  uint8_t is_invert;
	
  u8g2_uint_t d;
  u8g2_uint_t x;
	
  cnt = u8x8_GetStringLineCnt(s);
 801550a:	69b8      	ldr	r0, [r7, #24]
 801550c:	f001 fa25 	bl	801695a <u8x8_GetStringLineCnt>
 8015510:	4603      	mov	r3, r0
 8015512:	72bb      	strb	r3, [r7, #10]
  
	
  /* calculate the width of the button line */
  button_line_width = 0;
 8015514:	2300      	movs	r3, #0
 8015516:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8015518:	2300      	movs	r3, #0
 801551a:	73bb      	strb	r3, [r7, #14]
 801551c:	e011      	b.n	8015542 <u8g2_draw_button_line+0x52>
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 801551e:	7bbb      	ldrb	r3, [r7, #14]
 8015520:	69b9      	ldr	r1, [r7, #24]
 8015522:	4618      	mov	r0, r3
 8015524:	f001 fa3c 	bl	80169a0 <u8x8_GetStringLineStart>
 8015528:	4603      	mov	r3, r0
 801552a:	4619      	mov	r1, r3
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7ff fb3d 	bl	8014bac <u8g2_GetUTF8Width>
 8015532:	4603      	mov	r3, r0
 8015534:	461a      	mov	r2, r3
 8015536:	7bfb      	ldrb	r3, [r7, #15]
 8015538:	4413      	add	r3, r2
 801553a:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 801553c:	7bbb      	ldrb	r3, [r7, #14]
 801553e:	3301      	adds	r3, #1
 8015540:	73bb      	strb	r3, [r7, #14]
 8015542:	7bba      	ldrb	r2, [r7, #14]
 8015544:	7abb      	ldrb	r3, [r7, #10]
 8015546:	429a      	cmp	r2, r3
 8015548:	d3e9      	bcc.n	801551e <u8g2_draw_button_line+0x2e>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 801554a:	7abb      	ldrb	r3, [r7, #10]
 801554c:	461a      	mov	r2, r3
 801554e:	0052      	lsls	r2, r2, #1
 8015550:	4413      	add	r3, r2
 8015552:	005b      	lsls	r3, r3, #1
 8015554:	b2da      	uxtb	r2, r3
 8015556:	7bfb      	ldrb	r3, [r7, #15]
 8015558:	4413      	add	r3, r2
 801555a:	b2db      	uxtb	r3, r3
 801555c:	3b06      	subs	r3, #6
 801555e:	73fb      	strb	r3, [r7, #15]
  
  /* calculate the left offset */
  d = 0;
 8015560:	2300      	movs	r3, #0
 8015562:	733b      	strb	r3, [r7, #12]
  if ( button_line_width < w )
 8015564:	7bfa      	ldrb	r2, [r7, #15]
 8015566:	78bb      	ldrb	r3, [r7, #2]
 8015568:	429a      	cmp	r2, r3
 801556a:	d208      	bcs.n	801557e <u8g2_draw_button_line+0x8e>
  {
    d = w;
 801556c:	78bb      	ldrb	r3, [r7, #2]
 801556e:	733b      	strb	r3, [r7, #12]
    d -= button_line_width;
 8015570:	7b3a      	ldrb	r2, [r7, #12]
 8015572:	7bfb      	ldrb	r3, [r7, #15]
 8015574:	1ad3      	subs	r3, r2, r3
 8015576:	733b      	strb	r3, [r7, #12]
    d /= 2;
 8015578:	7b3b      	ldrb	r3, [r7, #12]
 801557a:	085b      	lsrs	r3, r3, #1
 801557c:	733b      	strb	r3, [r7, #12]
  }
  
  /* draw the buttons */
  x = d;
 801557e:	7b3b      	ldrb	r3, [r7, #12]
 8015580:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 8015582:	2300      	movs	r3, #0
 8015584:	73bb      	strb	r3, [r7, #14]
 8015586:	e02c      	b.n	80155e2 <u8g2_draw_button_line+0xf2>
  {
    is_invert = 0;
 8015588:	2300      	movs	r3, #0
 801558a:	737b      	strb	r3, [r7, #13]
    if ( i == cursor )
 801558c:	7bba      	ldrb	r2, [r7, #14]
 801558e:	787b      	ldrb	r3, [r7, #1]
 8015590:	429a      	cmp	r2, r3
 8015592:	d101      	bne.n	8015598 <u8g2_draw_button_line+0xa8>
      is_invert = 1;
 8015594:	2301      	movs	r3, #1
 8015596:	737b      	strb	r3, [r7, #13]

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 8015598:	7bbb      	ldrb	r3, [r7, #14]
 801559a:	69b9      	ldr	r1, [r7, #24]
 801559c:	4618      	mov	r0, r3
 801559e:	f001 f9ff 	bl	80169a0 <u8x8_GetStringLineStart>
 80155a2:	78fa      	ldrb	r2, [r7, #3]
 80155a4:	7af9      	ldrb	r1, [r7, #11]
 80155a6:	7b7b      	ldrb	r3, [r7, #13]
 80155a8:	9302      	str	r3, [sp, #8]
 80155aa:	2301      	movs	r3, #1
 80155ac:	9301      	str	r3, [sp, #4]
 80155ae:	9000      	str	r0, [sp, #0]
 80155b0:	2300      	movs	r3, #0
 80155b2:	6878      	ldr	r0, [r7, #4]
 80155b4:	f000 f900 	bl	80157b8 <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 80155b8:	7bbb      	ldrb	r3, [r7, #14]
 80155ba:	69b9      	ldr	r1, [r7, #24]
 80155bc:	4618      	mov	r0, r3
 80155be:	f001 f9ef 	bl	80169a0 <u8x8_GetStringLineStart>
 80155c2:	4603      	mov	r3, r0
 80155c4:	4619      	mov	r1, r3
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f7ff faf0 	bl	8014bac <u8g2_GetUTF8Width>
 80155cc:	4603      	mov	r3, r0
 80155ce:	461a      	mov	r2, r3
 80155d0:	7afb      	ldrb	r3, [r7, #11]
 80155d2:	4413      	add	r3, r2
 80155d4:	72fb      	strb	r3, [r7, #11]
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 80155d6:	7afb      	ldrb	r3, [r7, #11]
 80155d8:	3306      	adds	r3, #6
 80155da:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 80155dc:	7bbb      	ldrb	r3, [r7, #14]
 80155de:	3301      	adds	r3, #1
 80155e0:	73bb      	strb	r3, [r7, #14]
 80155e2:	7bba      	ldrb	r2, [r7, #14]
 80155e4:	7abb      	ldrb	r3, [r7, #10]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d3ce      	bcc.n	8015588 <u8g2_draw_button_line+0x98>
  }
  
  /* return the number of buttons */
  return cnt;
 80155ea:	7abb      	ldrb	r3, [r7, #10]
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3710      	adds	r7, #16
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <u8g2_UserInterfaceMessage>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
*/

uint8_t u8g2_UserInterfaceMessage(u8g2_t *u8g2, const char *title1, const char *title2, const char *title3, const char *buttons)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b08a      	sub	sp, #40	; 0x28
 80155f8:	af04      	add	r7, sp, #16
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]
 8015600:	603b      	str	r3, [r7, #0]
  uint8_t height;
  uint8_t line_height;
  u8g2_uint_t pixel_height;
  u8g2_uint_t y, yy;
	
  uint8_t cursor = 0;
 8015602:	2300      	movs	r3, #0
 8015604:	753b      	strb	r3, [r7, #20]
  uint8_t button_cnt;
  uint8_t event;
	
  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8015606:	2100      	movs	r1, #0
 8015608:	68f8      	ldr	r0, [r7, #12]
 801560a:	f7ff fae3 	bl	8014bd4 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 801560e:	68f8      	ldr	r0, [r7, #12]
 8015610:	f7ff fa52 	bl	8014ab8 <u8g2_SetFontPosBaseline>
	
	
  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 801561a:	74fb      	strb	r3, [r7, #19]
  line_height -= u8g2_GetDescent(u8g2);
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8015622:	b2db      	uxtb	r3, r3
 8015624:	7cfa      	ldrb	r2, [r7, #19]
 8015626:	1ad3      	subs	r3, r2, r3
 8015628:	74fb      	strb	r3, [r7, #19]

  /* calculate overall height of the message box in lines*/
  height = 1;	/* button line */
 801562a:	2301      	movs	r3, #1
 801562c:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title1);
 801562e:	68b8      	ldr	r0, [r7, #8]
 8015630:	f001 f993 	bl	801695a <u8x8_GetStringLineCnt>
 8015634:	4603      	mov	r3, r0
 8015636:	461a      	mov	r2, r3
 8015638:	7dfb      	ldrb	r3, [r7, #23]
 801563a:	4413      	add	r3, r2
 801563c:	75fb      	strb	r3, [r7, #23]
  if ( title2 != NULL )
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d002      	beq.n	801564a <u8g2_UserInterfaceMessage+0x56>
    height++;
 8015644:	7dfb      	ldrb	r3, [r7, #23]
 8015646:	3301      	adds	r3, #1
 8015648:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title3);
 801564a:	6838      	ldr	r0, [r7, #0]
 801564c:	f001 f985 	bl	801695a <u8x8_GetStringLineCnt>
 8015650:	4603      	mov	r3, r0
 8015652:	461a      	mov	r2, r3
 8015654:	7dfb      	ldrb	r3, [r7, #23]
 8015656:	4413      	add	r3, r2
 8015658:	75fb      	strb	r3, [r7, #23]
  
  /* calculate the height in pixel */
  pixel_height = height;
 801565a:	7dfb      	ldrb	r3, [r7, #23]
 801565c:	74bb      	strb	r3, [r7, #18]
  pixel_height *= line_height;
 801565e:	7cba      	ldrb	r2, [r7, #18]
 8015660:	7cfb      	ldrb	r3, [r7, #19]
 8015662:	fb12 f303 	smulbb	r3, r2, r3
 8015666:	74bb      	strb	r3, [r7, #18]
  
  /* ... and add the space between the text and the buttons */
  pixel_height +=SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 8015668:	7cbb      	ldrb	r3, [r7, #18]
 801566a:	3303      	adds	r3, #3
 801566c:	74bb      	strb	r3, [r7, #18]
  
  /* calculate offset from top */
  y = 0;
 801566e:	2300      	movs	r3, #0
 8015670:	75bb      	strb	r3, [r7, #22]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)   )
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015678:	7cba      	ldrb	r2, [r7, #18]
 801567a:	429a      	cmp	r2, r3
 801567c:	d20a      	bcs.n	8015694 <u8g2_UserInterfaceMessage+0xa0>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015684:	75bb      	strb	r3, [r7, #22]
    y -= pixel_height;
 8015686:	7dba      	ldrb	r2, [r7, #22]
 8015688:	7cbb      	ldrb	r3, [r7, #18]
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	75bb      	strb	r3, [r7, #22]
    y /= 2;
 801568e:	7dbb      	ldrb	r3, [r7, #22]
 8015690:	085b      	lsrs	r3, r3, #1
 8015692:	75bb      	strb	r3, [r7, #22]
  }
  y += u8g2_GetAscent(u8g2);
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 801569a:	b2da      	uxtb	r2, r3
 801569c:	7dbb      	ldrb	r3, [r7, #22]
 801569e:	4413      	add	r3, r2
 80156a0:	75bb      	strb	r3, [r7, #22]

  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 80156a2:	68f8      	ldr	r0, [r7, #12]
 80156a4:	f7fe fbaa 	bl	8013dfc <u8g2_FirstPage>
      do
      {
	  yy = y;
 80156a8:	7dbb      	ldrb	r3, [r7, #22]
 80156aa:	757b      	strb	r3, [r7, #21]
	  /* draw message box */
	  
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80156b2:	7d7a      	ldrb	r2, [r7, #21]
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	9301      	str	r3, [sp, #4]
 80156b8:	7cfb      	ldrb	r3, [r7, #19]
 80156ba:	9300      	str	r3, [sp, #0]
 80156bc:	460b      	mov	r3, r1
 80156be:	2100      	movs	r1, #0
 80156c0:	68f8      	ldr	r0, [r7, #12]
 80156c2:	f000 f90b 	bl	80158dc <u8g2_DrawUTF8Lines>
 80156c6:	4603      	mov	r3, r0
 80156c8:	461a      	mov	r2, r3
 80156ca:	7d7b      	ldrb	r3, [r7, #21]
 80156cc:	4413      	add	r3, r2
 80156ce:	757b      	strb	r3, [r7, #21]
	  if ( title2 != NULL )
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d012      	beq.n	80156fc <u8g2_UserInterfaceMessage+0x108>
	  {
	    u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80156dc:	7d7a      	ldrb	r2, [r7, #21]
 80156de:	2300      	movs	r3, #0
 80156e0:	9302      	str	r3, [sp, #8]
 80156e2:	2300      	movs	r3, #0
 80156e4:	9301      	str	r3, [sp, #4]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	9300      	str	r3, [sp, #0]
 80156ea:	460b      	mov	r3, r1
 80156ec:	2100      	movs	r1, #0
 80156ee:	68f8      	ldr	r0, [r7, #12]
 80156f0:	f000 f862 	bl	80157b8 <u8g2_DrawUTF8Line>
	    yy+=line_height;
 80156f4:	7d7a      	ldrb	r2, [r7, #21]
 80156f6:	7cfb      	ldrb	r3, [r7, #19]
 80156f8:	4413      	add	r3, r2
 80156fa:	757b      	strb	r3, [r7, #21]
	  }
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title3);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8015702:	7d7a      	ldrb	r2, [r7, #21]
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	9301      	str	r3, [sp, #4]
 8015708:	7cfb      	ldrb	r3, [r7, #19]
 801570a:	9300      	str	r3, [sp, #0]
 801570c:	460b      	mov	r3, r1
 801570e:	2100      	movs	r1, #0
 8015710:	68f8      	ldr	r0, [r7, #12]
 8015712:	f000 f8e3 	bl	80158dc <u8g2_DrawUTF8Lines>
 8015716:	4603      	mov	r3, r0
 8015718:	461a      	mov	r2, r3
 801571a:	7d7b      	ldrb	r3, [r7, #21]
 801571c:	4413      	add	r3, r2
 801571e:	757b      	strb	r3, [r7, #21]
	  yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 8015720:	7d7b      	ldrb	r3, [r7, #21]
 8015722:	3303      	adds	r3, #3
 8015724:	757b      	strb	r3, [r7, #21]

	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 801572c:	7d38      	ldrb	r0, [r7, #20]
 801572e:	7d79      	ldrb	r1, [r7, #21]
 8015730:	6a3b      	ldr	r3, [r7, #32]
 8015732:	9300      	str	r3, [sp, #0]
 8015734:	4603      	mov	r3, r0
 8015736:	68f8      	ldr	r0, [r7, #12]
 8015738:	f7ff feda 	bl	80154f0 <u8g2_draw_button_line>
 801573c:	4603      	mov	r3, r0
 801573e:	747b      	strb	r3, [r7, #17]
	  
      } while( u8g2_NextPage(u8g2) );
 8015740:	68f8      	ldr	r0, [r7, #12]
 8015742:	f7fe fb6f 	bl	8013e24 <u8g2_NextPage>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d1ad      	bne.n	80156a8 <u8g2_UserInterfaceMessage+0xb4>
      return 0;
#endif
	  
      for(;;)
      {
	    event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f7ef f89b 	bl	8004888 <u8x8_GetMenuEvent>
 8015752:	4603      	mov	r3, r0
 8015754:	743b      	strb	r3, [r7, #16]
	    if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8015756:	7c3b      	ldrb	r3, [r7, #16]
 8015758:	2b50      	cmp	r3, #80	; 0x50
 801575a:	d103      	bne.n	8015764 <u8g2_UserInterfaceMessage+0x170>
	      return cursor+1;
 801575c:	7d3b      	ldrb	r3, [r7, #20]
 801575e:	3301      	adds	r3, #1
 8015760:	b2db      	uxtb	r3, r3
 8015762:	e025      	b.n	80157b0 <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8015764:	7c3b      	ldrb	r3, [r7, #16]
 8015766:	2b53      	cmp	r3, #83	; 0x53
 8015768:	d101      	bne.n	801576e <u8g2_UserInterfaceMessage+0x17a>
	      return 0;
 801576a:	2300      	movs	r3, #0
 801576c:	e020      	b.n	80157b0 <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 801576e:	7c3b      	ldrb	r3, [r7, #16]
 8015770:	2b51      	cmp	r3, #81	; 0x51
 8015772:	d002      	beq.n	801577a <u8g2_UserInterfaceMessage+0x186>
 8015774:	7c3b      	ldrb	r3, [r7, #16]
 8015776:	2b55      	cmp	r3, #85	; 0x55
 8015778:	d109      	bne.n	801578e <u8g2_UserInterfaceMessage+0x19a>
	    {
	      cursor++;
 801577a:	7d3b      	ldrb	r3, [r7, #20]
 801577c:	3301      	adds	r3, #1
 801577e:	753b      	strb	r3, [r7, #20]
	      if ( cursor >= button_cnt )
 8015780:	7d3a      	ldrb	r2, [r7, #20]
 8015782:	7c7b      	ldrb	r3, [r7, #17]
 8015784:	429a      	cmp	r2, r3
 8015786:	d311      	bcc.n	80157ac <u8g2_UserInterfaceMessage+0x1b8>
		cursor = 0;
 8015788:	2300      	movs	r3, #0
 801578a:	753b      	strb	r3, [r7, #20]
	      break;
 801578c:	e00e      	b.n	80157ac <u8g2_UserInterfaceMessage+0x1b8>
	    }
	    else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 801578e:	7c3b      	ldrb	r3, [r7, #16]
 8015790:	2b52      	cmp	r3, #82	; 0x52
 8015792:	d002      	beq.n	801579a <u8g2_UserInterfaceMessage+0x1a6>
 8015794:	7c3b      	ldrb	r3, [r7, #16]
 8015796:	2b54      	cmp	r3, #84	; 0x54
 8015798:	d1d8      	bne.n	801574c <u8g2_UserInterfaceMessage+0x158>
	    {
	      if ( cursor == 0 )
 801579a:	7d3b      	ldrb	r3, [r7, #20]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d101      	bne.n	80157a4 <u8g2_UserInterfaceMessage+0x1b0>
		cursor = button_cnt;
 80157a0:	7c7b      	ldrb	r3, [r7, #17]
 80157a2:	753b      	strb	r3, [r7, #20]
	      cursor--;
 80157a4:	7d3b      	ldrb	r3, [r7, #20]
 80157a6:	3b01      	subs	r3, #1
 80157a8:	753b      	strb	r3, [r7, #20]
	      break;
 80157aa:	e000      	b.n	80157ae <u8g2_UserInterfaceMessage+0x1ba>
	      break;
 80157ac:	bf00      	nop
      u8g2_FirstPage(u8g2);
 80157ae:	e778      	b.n	80156a2 <u8g2_UserInterfaceMessage+0xae>
	    }    
      }
  }
  /* never reached */
  //return 0;
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3718      	adds	r7, #24
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}

080157b8 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b086      	sub	sp, #24
 80157bc:	af02      	add	r7, sp, #8
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	4608      	mov	r0, r1
 80157c2:	4611      	mov	r1, r2
 80157c4:	461a      	mov	r2, r3
 80157c6:	4603      	mov	r3, r0
 80157c8:	70fb      	strb	r3, [r7, #3]
 80157ca:	460b      	mov	r3, r1
 80157cc:	70bb      	strb	r3, [r7, #2]
 80157ce:	4613      	mov	r3, r2
 80157d0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 80157d2:	2100      	movs	r1, #0
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f7ff f9fd 	bl	8014bd4 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157de:	6878      	ldr	r0, [r7, #4]
 80157e0:	4798      	blx	r3
 80157e2:	4603      	mov	r3, r0
 80157e4:	461a      	mov	r2, r3
 80157e6:	78bb      	ldrb	r3, [r7, #2]
 80157e8:	4413      	add	r3, r2
 80157ea:	70bb      	strb	r3, [r7, #2]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 80157ec:	69b9      	ldr	r1, [r7, #24]
 80157ee:	6878      	ldr	r0, [r7, #4]
 80157f0:	f7ff f9dc 	bl	8014bac <u8g2_GetUTF8Width>
 80157f4:	4603      	mov	r3, r0
 80157f6:	72bb      	strb	r3, [r7, #10]

  /* calculate delta d within the box */
  d = 0;
 80157f8:	2300      	movs	r3, #0
 80157fa:	73fb      	strb	r3, [r7, #15]
  if ( str_width < w )
 80157fc:	7aba      	ldrb	r2, [r7, #10]
 80157fe:	787b      	ldrb	r3, [r7, #1]
 8015800:	429a      	cmp	r2, r3
 8015802:	d209      	bcs.n	8015818 <u8g2_DrawUTF8Line+0x60>
  {
    d = w;
 8015804:	787b      	ldrb	r3, [r7, #1]
 8015806:	73fb      	strb	r3, [r7, #15]
    d -=str_width;
 8015808:	7bfa      	ldrb	r2, [r7, #15]
 801580a:	7abb      	ldrb	r3, [r7, #10]
 801580c:	1ad3      	subs	r3, r2, r3
 801580e:	73fb      	strb	r3, [r7, #15]
    d /= 2;
 8015810:	7bfb      	ldrb	r3, [r7, #15]
 8015812:	085b      	lsrs	r3, r3, #1
 8015814:	73fb      	strb	r3, [r7, #15]
 8015816:	e001      	b.n	801581c <u8g2_DrawUTF8Line+0x64>
  }
  else
  {
    w = str_width;
 8015818:	7abb      	ldrb	r3, [r7, #10]
 801581a:	707b      	strb	r3, [r7, #1]
  }

  /* caluclate text box */
  fx = x;
 801581c:	78fb      	ldrb	r3, [r7, #3]
 801581e:	73bb      	strb	r3, [r7, #14]
  fy = y - u8g2_GetAscent(u8g2) ;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015826:	b2db      	uxtb	r3, r3
 8015828:	78ba      	ldrb	r2, [r7, #2]
 801582a:	1ad3      	subs	r3, r2, r3
 801582c:	737b      	strb	r3, [r7, #13]
  fw = w;
 801582e:	787b      	ldrb	r3, [r7, #1]
 8015830:	733b      	strb	r3, [r7, #12]
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015838:	b2da      	uxtb	r2, r3
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8015840:	b2db      	uxtb	r3, r3
 8015842:	1ad3      	subs	r3, r2, r3
 8015844:	72fb      	strb	r3, [r7, #11]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 8015846:	2101      	movs	r1, #1
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f7ff fb11 	bl	8014e70 <u8g2_SetDrawColor>
  if ( is_invert )
 801584e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d021      	beq.n	801589a <u8g2_DrawUTF8Line+0xe2>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 8015856:	7b38      	ldrb	r0, [r7, #12]
 8015858:	7b7a      	ldrb	r2, [r7, #13]
 801585a:	7bb9      	ldrb	r1, [r7, #14]
 801585c:	7afb      	ldrb	r3, [r7, #11]
 801585e:	9300      	str	r3, [sp, #0]
 8015860:	4603      	mov	r3, r0
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f7fe f99e 	bl	8013ba4 <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
 8015868:	e017      	b.n	801589a <u8g2_DrawUTF8Line+0xe2>
  {
    fx--;
 801586a:	7bbb      	ldrb	r3, [r7, #14]
 801586c:	3b01      	subs	r3, #1
 801586e:	73bb      	strb	r3, [r7, #14]
    fy--;
 8015870:	7b7b      	ldrb	r3, [r7, #13]
 8015872:	3b01      	subs	r3, #1
 8015874:	737b      	strb	r3, [r7, #13]
    fw +=2;
 8015876:	7b3b      	ldrb	r3, [r7, #12]
 8015878:	3302      	adds	r3, #2
 801587a:	733b      	strb	r3, [r7, #12]
    fh +=2;
 801587c:	7afb      	ldrb	r3, [r7, #11]
 801587e:	3302      	adds	r3, #2
 8015880:	72fb      	strb	r3, [r7, #11]
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 8015882:	7b38      	ldrb	r0, [r7, #12]
 8015884:	7b7a      	ldrb	r2, [r7, #13]
 8015886:	7bb9      	ldrb	r1, [r7, #14]
 8015888:	7afb      	ldrb	r3, [r7, #11]
 801588a:	9300      	str	r3, [sp, #0]
 801588c:	4603      	mov	r3, r0
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f7fe f9be 	bl	8013c10 <u8g2_DrawFrame>
    border_size--;
 8015894:	7f3b      	ldrb	r3, [r7, #28]
 8015896:	3b01      	subs	r3, #1
 8015898:	773b      	strb	r3, [r7, #28]
  while( border_size > 0 )
 801589a:	7f3b      	ldrb	r3, [r7, #28]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d1e4      	bne.n	801586a <u8g2_DrawUTF8Line+0xb2>
  }

  if ( is_invert )
 80158a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d004      	beq.n	80158b2 <u8g2_DrawUTF8Line+0xfa>
  {
    u8g2_SetDrawColor(u8g2, 0);
 80158a8:	2100      	movs	r1, #0
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f7ff fae0 	bl	8014e70 <u8g2_SetDrawColor>
 80158b0:	e003      	b.n	80158ba <u8g2_DrawUTF8Line+0x102>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 80158b2:	2101      	movs	r1, #1
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f7ff fadb 	bl	8014e70 <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 80158ba:	78fa      	ldrb	r2, [r7, #3]
 80158bc:	7bfb      	ldrb	r3, [r7, #15]
 80158be:	4413      	add	r3, r2
 80158c0:	b2d9      	uxtb	r1, r3
 80158c2:	78ba      	ldrb	r2, [r7, #2]
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f7ff f864 	bl	8014994 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 80158cc:	2101      	movs	r1, #1
 80158ce:	6878      	ldr	r0, [r7, #4]
 80158d0:	f7ff face 	bl	8014e70 <u8g2_SetDrawColor>

}
 80158d4:	bf00      	nop
 80158d6:	3710      	adds	r7, #16
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <u8g2_DrawUTF8Lines>:
  lines can be centered with respect to "w"
  if s == NULL nothing is drawn and 0 is returned
  returns the number of lines in s multiplied with line_height
*/
u8g2_uint_t u8g2_DrawUTF8Lines(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t line_height, const char *s)
{
 80158dc:	b590      	push	{r4, r7, lr}
 80158de:	b089      	sub	sp, #36	; 0x24
 80158e0:	af04      	add	r7, sp, #16
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	4608      	mov	r0, r1
 80158e6:	4611      	mov	r1, r2
 80158e8:	461a      	mov	r2, r3
 80158ea:	4603      	mov	r3, r0
 80158ec:	70fb      	strb	r3, [r7, #3]
 80158ee:	460b      	mov	r3, r1
 80158f0:	70bb      	strb	r3, [r7, #2]
 80158f2:	4613      	mov	r3, r2
 80158f4:	707b      	strb	r3, [r7, #1]
  uint8_t i;
  uint8_t cnt;
  u8g2_uint_t yy = 0;
 80158f6:	2300      	movs	r3, #0
 80158f8:	73bb      	strb	r3, [r7, #14]
  cnt = u8x8_GetStringLineCnt(s);
 80158fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158fc:	f001 f82d 	bl	801695a <u8x8_GetStringLineCnt>
 8015900:	4603      	mov	r3, r0
 8015902:	737b      	strb	r3, [r7, #13]
  //printf("str=%s\n", s);
  //printf("cnt=%d, y=%d, line_height=%d\n", cnt, y, line_height);
  for( i = 0; i < cnt; i++ )
 8015904:	2300      	movs	r3, #0
 8015906:	73fb      	strb	r3, [r7, #15]
 8015908:	e01c      	b.n	8015944 <u8g2_DrawUTF8Lines+0x68>
  {
    //printf("  i=%d, y=%d, line_height=%d\n", i, y, line_height);
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
 801590a:	7bfb      	ldrb	r3, [r7, #15]
 801590c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801590e:	4618      	mov	r0, r3
 8015910:	f001 f846 	bl	80169a0 <u8x8_GetStringLineStart>
 8015914:	787b      	ldrb	r3, [r7, #1]
 8015916:	78ba      	ldrb	r2, [r7, #2]
 8015918:	78f9      	ldrb	r1, [r7, #3]
 801591a:	2400      	movs	r4, #0
 801591c:	9402      	str	r4, [sp, #8]
 801591e:	2400      	movs	r4, #0
 8015920:	9401      	str	r4, [sp, #4]
 8015922:	9000      	str	r0, [sp, #0]
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f7ff ff47 	bl	80157b8 <u8g2_DrawUTF8Line>
    y+=line_height;
 801592a:	78ba      	ldrb	r2, [r7, #2]
 801592c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015930:	4413      	add	r3, r2
 8015932:	70bb      	strb	r3, [r7, #2]
    yy+=line_height;
 8015934:	7bba      	ldrb	r2, [r7, #14]
 8015936:	f897 3020 	ldrb.w	r3, [r7, #32]
 801593a:	4413      	add	r3, r2
 801593c:	73bb      	strb	r3, [r7, #14]
  for( i = 0; i < cnt; i++ )
 801593e:	7bfb      	ldrb	r3, [r7, #15]
 8015940:	3301      	adds	r3, #1
 8015942:	73fb      	strb	r3, [r7, #15]
 8015944:	7bfa      	ldrb	r2, [r7, #15]
 8015946:	7b7b      	ldrb	r3, [r7, #13]
 8015948:	429a      	cmp	r2, r3
 801594a:	d3de      	bcc.n	801590a <u8g2_DrawUTF8Lines+0x2e>
  }
  return yy;
 801594c:	7bbb      	ldrb	r3, [r7, #14]
}
 801594e:	4618      	mov	r0, r3
 8015950:	3714      	adds	r7, #20
 8015952:	46bd      	mov	sp, r7
 8015954:	bd90      	pop	{r4, r7, pc}
	...

08015958 <u8g2_draw_selection_list_line>:
  selection list with string line
  returns line height
*/
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b08a      	sub	sp, #40	; 0x28
 801595c:	af04      	add	r7, sp, #16
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	60b9      	str	r1, [r7, #8]
 8015962:	4611      	mov	r1, r2
 8015964:	461a      	mov	r2, r3
 8015966:	460b      	mov	r3, r1
 8015968:	71fb      	strb	r3, [r7, #7]
 801596a:	4613      	mov	r3, r2
 801596c:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t yy;
  uint8_t border_size = 0;
 801596e:	2300      	movs	r3, #0
 8015970:	75fb      	strb	r3, [r7, #23]
  uint8_t is_invert = 0;
 8015972:	2300      	movs	r3, #0
 8015974:	75bb      	strb	r3, [r7, #22]
	
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 801597c:	b2da      	uxtb	r2, r3
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8015984:	b2db      	uxtb	r3, r3
 8015986:	1ad3      	subs	r3, r2, r3
 8015988:	b2db      	uxtb	r3, r3
 801598a:	3301      	adds	r3, #1
 801598c:	757b      	strb	r3, [r7, #21]

  /* calculate offset from display upper border */
  yy = idx;
 801598e:	79bb      	ldrb	r3, [r7, #6]
 8015990:	753b      	strb	r3, [r7, #20]
  yy -= u8sl->first_pos;
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	789b      	ldrb	r3, [r3, #2]
 8015996:	7d3a      	ldrb	r2, [r7, #20]
 8015998:	1ad3      	subs	r3, r2, r3
 801599a:	753b      	strb	r3, [r7, #20]
  yy *= line_height;
 801599c:	7d3a      	ldrb	r2, [r7, #20]
 801599e:	7d7b      	ldrb	r3, [r7, #21]
 80159a0:	fb12 f303 	smulbb	r3, r2, r3
 80159a4:	753b      	strb	r3, [r7, #20]
  yy += y;
 80159a6:	7d3a      	ldrb	r2, [r7, #20]
 80159a8:	79fb      	ldrb	r3, [r7, #7]
 80159aa:	4413      	add	r3, r2
 80159ac:	753b      	strb	r3, [r7, #20]

  /* check whether this is the current cursor line */
  if ( idx == u8sl->current_pos )
 80159ae:	68bb      	ldr	r3, [r7, #8]
 80159b0:	78db      	ldrb	r3, [r3, #3]
 80159b2:	79ba      	ldrb	r2, [r7, #6]
 80159b4:	429a      	cmp	r2, r3
 80159b6:	d103      	bne.n	80159c0 <u8g2_draw_selection_list_line+0x68>
  {
    border_size = MY_BORDER_SIZE;
 80159b8:	2301      	movs	r3, #1
 80159ba:	75fb      	strb	r3, [r7, #23]
    is_invert = 1;
 80159bc:	2301      	movs	r3, #1
 80159be:	75bb      	strb	r3, [r7, #22]
  }

  /* get the line from the array */
  s = u8x8_GetStringLineStart(idx, s);
 80159c0:	79bb      	ldrb	r3, [r7, #6]
 80159c2:	6a39      	ldr	r1, [r7, #32]
 80159c4:	4618      	mov	r0, r3
 80159c6:	f000 ffeb 	bl	80169a0 <u8x8_GetStringLineStart>
 80159ca:	6238      	str	r0, [r7, #32]

  /* draw the line */
  if ( s == NULL )
 80159cc:	6a3b      	ldr	r3, [r7, #32]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d101      	bne.n	80159d6 <u8g2_draw_selection_list_line+0x7e>
    s = "";
 80159d2:	4b0c      	ldr	r3, [pc, #48]	; (8015a04 <u8g2_draw_selection_list_line+0xac>)
 80159d4:	623b      	str	r3, [r7, #32]
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80159dc:	3b02      	subs	r3, #2
 80159de:	b2d9      	uxtb	r1, r3
 80159e0:	79fa      	ldrb	r2, [r7, #7]
 80159e2:	7dbb      	ldrb	r3, [r7, #22]
 80159e4:	9302      	str	r3, [sp, #8]
 80159e6:	7dfb      	ldrb	r3, [r7, #23]
 80159e8:	9301      	str	r3, [sp, #4]
 80159ea:	6a3b      	ldr	r3, [r7, #32]
 80159ec:	9300      	str	r3, [sp, #0]
 80159ee:	460b      	mov	r3, r1
 80159f0:	2101      	movs	r1, #1
 80159f2:	68f8      	ldr	r0, [r7, #12]
 80159f4:	f7ff fee0 	bl	80157b8 <u8g2_DrawUTF8Line>
  return line_height;
 80159f8:	7d7b      	ldrb	r3, [r7, #21]
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3718      	adds	r7, #24
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
 8015a02:	bf00      	nop
 8015a04:	080237bc 	.word	0x080237bc

08015a08 <u8g2_DrawSelectionList>:

void u8g2_DrawSelectionList(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, const char *s)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b088      	sub	sp, #32
 8015a0c:	af02      	add	r7, sp, #8
 8015a0e:	60f8      	str	r0, [r7, #12]
 8015a10:	60b9      	str	r1, [r7, #8]
 8015a12:	603b      	str	r3, [r7, #0]
 8015a14:	4613      	mov	r3, r2
 8015a16:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for( i = 0; i < u8sl->visible; i++ )
 8015a18:	2300      	movs	r3, #0
 8015a1a:	75fb      	strb	r3, [r7, #23]
 8015a1c:	e014      	b.n	8015a48 <u8g2_DrawSelectionList+0x40>
  {
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 8015a1e:	68bb      	ldr	r3, [r7, #8]
 8015a20:	789a      	ldrb	r2, [r3, #2]
 8015a22:	7dfb      	ldrb	r3, [r7, #23]
 8015a24:	4413      	add	r3, r2
 8015a26:	b2d9      	uxtb	r1, r3
 8015a28:	79fa      	ldrb	r2, [r7, #7]
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	9300      	str	r3, [sp, #0]
 8015a2e:	460b      	mov	r3, r1
 8015a30:	68b9      	ldr	r1, [r7, #8]
 8015a32:	68f8      	ldr	r0, [r7, #12]
 8015a34:	f7ff ff90 	bl	8015958 <u8g2_draw_selection_list_line>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	79fb      	ldrb	r3, [r7, #7]
 8015a3e:	4413      	add	r3, r2
 8015a40:	71fb      	strb	r3, [r7, #7]
  for( i = 0; i < u8sl->visible; i++ )
 8015a42:	7dfb      	ldrb	r3, [r7, #23]
 8015a44:	3301      	adds	r3, #1
 8015a46:	75fb      	strb	r3, [r7, #23]
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	7dfa      	ldrb	r2, [r7, #23]
 8015a4e:	429a      	cmp	r2, r3
 8015a50:	d3e5      	bcc.n	8015a1e <u8g2_DrawSelectionList+0x16>
  }
}
 8015a52:	bf00      	nop
 8015a54:	bf00      	nop
 8015a56:	3718      	adds	r7, #24
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <u8g2_UserInterfaceSelectionList>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
	
*/
uint8_t u8g2_UserInterfaceSelectionList(u8g2_t *u8g2, const char *title, uint8_t start_pos, const char *sl)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b08a      	sub	sp, #40	; 0x28
 8015a60:	af02      	add	r7, sp, #8
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	603b      	str	r3, [r7, #0]
 8015a68:	4613      	mov	r3, r2
 8015a6a:	71fb      	strb	r3, [r7, #7]
  u8sl_t u8sl;
  u8g2_uint_t yy;

  uint8_t event;

  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015a72:	b2da      	uxtb	r2, r3
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8015a7a:	b2db      	uxtb	r3, r3
 8015a7c:	1ad3      	subs	r3, r2, r3
 8015a7e:	b2db      	uxtb	r3, r3
 8015a80:	3301      	adds	r3, #1
 8015a82:	77bb      	strb	r3, [r7, #30]

  uint8_t title_lines = u8x8_GetStringLineCnt(title);
 8015a84:	68b8      	ldr	r0, [r7, #8]
 8015a86:	f000 ff68 	bl	801695a <u8x8_GetStringLineCnt>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	777b      	strb	r3, [r7, #29]
  uint8_t display_lines;

  
  if ( start_pos > 0 )	/* issue 112 */
 8015a8e:	79fb      	ldrb	r3, [r7, #7]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d002      	beq.n	8015a9a <u8g2_UserInterfaceSelectionList+0x3e>
    start_pos--;		/* issue 112 */
 8015a94:	79fb      	ldrb	r3, [r7, #7]
 8015a96:	3b01      	subs	r3, #1
 8015a98:	71fb      	strb	r3, [r7, #7]


  if ( title_lines > 0 )
 8015a9a:	7f7b      	ldrb	r3, [r7, #29]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d00f      	beq.n	8015ac0 <u8g2_UserInterfaceSelectionList+0x64>
  {
	display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015aa6:	1eda      	subs	r2, r3, #3
 8015aa8:	7fbb      	ldrb	r3, [r7, #30]
 8015aaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8015aae:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 8015ab0:	7f3b      	ldrb	r3, [r7, #28]
 8015ab2:	753b      	strb	r3, [r7, #20]
	u8sl.visible -= title_lines;
 8015ab4:	7d3a      	ldrb	r2, [r7, #20]
 8015ab6:	7f7b      	ldrb	r3, [r7, #29]
 8015ab8:	1ad3      	subs	r3, r2, r3
 8015aba:	b2db      	uxtb	r3, r3
 8015abc:	753b      	strb	r3, [r7, #20]
 8015abe:	e008      	b.n	8015ad2 <u8g2_UserInterfaceSelectionList+0x76>
  }
  else
  {
	display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015ac6:	7fbb      	ldrb	r3, [r7, #30]
 8015ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015acc:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 8015ace:	7f3b      	ldrb	r3, [r7, #28]
 8015ad0:	753b      	strb	r3, [r7, #20]
  }

  u8sl.total = u8x8_GetStringLineCnt(sl);
 8015ad2:	6838      	ldr	r0, [r7, #0]
 8015ad4:	f000 ff41 	bl	801695a <u8x8_GetStringLineCnt>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	757b      	strb	r3, [r7, #21]
  u8sl.first_pos = 0;
 8015adc:	2300      	movs	r3, #0
 8015ade:	75bb      	strb	r3, [r7, #22]
  u8sl.current_pos = start_pos;
 8015ae0:	79fb      	ldrb	r3, [r7, #7]
 8015ae2:	75fb      	strb	r3, [r7, #23]

  if ( u8sl.current_pos >= u8sl.total )
 8015ae4:	7dfa      	ldrb	r2, [r7, #23]
 8015ae6:	7d7b      	ldrb	r3, [r7, #21]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d303      	bcc.n	8015af4 <u8g2_UserInterfaceSelectionList+0x98>
    u8sl.current_pos = u8sl.total-1;
 8015aec:	7d7b      	ldrb	r3, [r7, #21]
 8015aee:	3b01      	subs	r3, #1
 8015af0:	b2db      	uxtb	r3, r3
 8015af2:	75fb      	strb	r3, [r7, #23]
  if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
 8015af4:	7dbb      	ldrb	r3, [r7, #22]
 8015af6:	461a      	mov	r2, r3
 8015af8:	7d3b      	ldrb	r3, [r7, #20]
 8015afa:	4413      	add	r3, r2
 8015afc:	7dfa      	ldrb	r2, [r7, #23]
 8015afe:	4293      	cmp	r3, r2
 8015b00:	dc06      	bgt.n	8015b10 <u8g2_UserInterfaceSelectionList+0xb4>
    u8sl.first_pos = u8sl.current_pos-u8sl.visible+1;
 8015b02:	7dfa      	ldrb	r2, [r7, #23]
 8015b04:	7d3b      	ldrb	r3, [r7, #20]
 8015b06:	1ad3      	subs	r3, r2, r3
 8015b08:	b2db      	uxtb	r3, r3
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	75bb      	strb	r3, [r7, #22]

  u8g2_SetFontPosBaseline(u8g2);
 8015b10:	68f8      	ldr	r0, [r7, #12]
 8015b12:	f7fe ffd1 	bl	8014ab8 <u8g2_SetFontPosBaseline>
  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 8015b16:	68f8      	ldr	r0, [r7, #12]
 8015b18:	f7fe f970 	bl	8013dfc <u8g2_FirstPage>
      do
      {
        yy = u8g2_GetAscent(u8g2);
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015b22:	77fb      	strb	r3, [r7, #31]
        if ( title_lines > 0 )
 8015b24:	7f7b      	ldrb	r3, [r7, #29]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d027      	beq.n	8015b7a <u8g2_UserInterfaceSelectionList+0x11e>
        {
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8015b30:	7ffa      	ldrb	r2, [r7, #31]
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	9301      	str	r3, [sp, #4]
 8015b36:	7fbb      	ldrb	r3, [r7, #30]
 8015b38:	9300      	str	r3, [sp, #0]
 8015b3a:	460b      	mov	r3, r1
 8015b3c:	2100      	movs	r1, #0
 8015b3e:	68f8      	ldr	r0, [r7, #12]
 8015b40:	f7ff fecc 	bl	80158dc <u8g2_DrawUTF8Lines>
 8015b44:	4603      	mov	r3, r0
 8015b46:	461a      	mov	r2, r3
 8015b48:	7ffb      	ldrb	r3, [r7, #31]
 8015b4a:	4413      	add	r3, r2
 8015b4c:	77fb      	strb	r3, [r7, #31]
		
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 8015b4e:	7ffa      	ldrb	r2, [r7, #31]
 8015b50:	7fbb      	ldrb	r3, [r7, #30]
 8015b52:	1ad3      	subs	r3, r2, r3
 8015b54:	b2da      	uxtb	r2, r3
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	1ad3      	subs	r3, r2, r3
 8015b60:	b2db      	uxtb	r3, r3
 8015b62:	3301      	adds	r3, #1
 8015b64:	b2da      	uxtb	r2, r3
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015b6c:	2100      	movs	r1, #0
 8015b6e:	68f8      	ldr	r0, [r7, #12]
 8015b70:	f7ff f932 	bl	8014dd8 <u8g2_DrawHLine>
		
	  yy += 3;
 8015b74:	7ffb      	ldrb	r3, [r7, #31]
 8015b76:	3303      	adds	r3, #3
 8015b78:	77fb      	strb	r3, [r7, #31]
        }
        u8g2_DrawSelectionList(u8g2, &u8sl, yy, sl);
 8015b7a:	7ffa      	ldrb	r2, [r7, #31]
 8015b7c:	f107 0114 	add.w	r1, r7, #20
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	68f8      	ldr	r0, [r7, #12]
 8015b84:	f7ff ff40 	bl	8015a08 <u8g2_DrawSelectionList>
      } while( u8g2_NextPage(u8g2) );
 8015b88:	68f8      	ldr	r0, [r7, #12]
 8015b8a:	f7fe f94b 	bl	8013e24 <u8g2_NextPage>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d1c3      	bne.n	8015b1c <u8g2_UserInterfaceSelectionList+0xc0>
#endif


      for(;;)
      {
        event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 8015b94:	68f8      	ldr	r0, [r7, #12]
 8015b96:	f7ee fe77 	bl	8004888 <u8x8_GetMenuEvent>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	76fb      	strb	r3, [r7, #27]
        if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8015b9e:	7efb      	ldrb	r3, [r7, #27]
 8015ba0:	2b50      	cmp	r3, #80	; 0x50
 8015ba2:	d103      	bne.n	8015bac <u8g2_UserInterfaceSelectionList+0x150>
          return u8sl.current_pos+1;		/* +1, issue 112 */
 8015ba4:	7dfb      	ldrb	r3, [r7, #23]
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	b2db      	uxtb	r3, r3
 8015baa:	e01c      	b.n	8015be6 <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8015bac:	7efb      	ldrb	r3, [r7, #27]
 8015bae:	2b53      	cmp	r3, #83	; 0x53
 8015bb0:	d101      	bne.n	8015bb6 <u8g2_UserInterfaceSelectionList+0x15a>
          return 0;				/* issue 112: return 0 instead of start_pos */
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	e017      	b.n	8015be6 <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 8015bb6:	7efb      	ldrb	r3, [r7, #27]
 8015bb8:	2b51      	cmp	r3, #81	; 0x51
 8015bba:	d002      	beq.n	8015bc2 <u8g2_UserInterfaceSelectionList+0x166>
 8015bbc:	7efb      	ldrb	r3, [r7, #27]
 8015bbe:	2b55      	cmp	r3, #85	; 0x55
 8015bc0:	d105      	bne.n	8015bce <u8g2_UserInterfaceSelectionList+0x172>
        {
          u8sl_Next(&u8sl);
 8015bc2:	f107 0314 	add.w	r3, r7, #20
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f000 fe04 	bl	80167d4 <u8sl_Next>
          break;
 8015bcc:	e00a      	b.n	8015be4 <u8g2_UserInterfaceSelectionList+0x188>
        }
        else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 8015bce:	7efb      	ldrb	r3, [r7, #27]
 8015bd0:	2b52      	cmp	r3, #82	; 0x52
 8015bd2:	d002      	beq.n	8015bda <u8g2_UserInterfaceSelectionList+0x17e>
 8015bd4:	7efb      	ldrb	r3, [r7, #27]
 8015bd6:	2b54      	cmp	r3, #84	; 0x54
 8015bd8:	d1dc      	bne.n	8015b94 <u8g2_UserInterfaceSelectionList+0x138>
        {
          u8sl_Prev(&u8sl);
 8015bda:	f107 0314 	add.w	r3, r7, #20
 8015bde:	4618      	mov	r0, r3
 8015be0:	f000 fe2a 	bl	8016838 <u8sl_Prev>
      u8g2_FirstPage(u8g2);
 8015be4:	e797      	b.n	8015b16 <u8g2_UserInterfaceSelectionList+0xba>
          break;
        }
      }
  }
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	3720      	adds	r7, #32
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}

08015bee <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8015bee:	b580      	push	{r7, lr}
 8015bf0:	b082      	sub	sp, #8
 8015bf2:	af00      	add	r7, sp, #0
 8015bf4:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	2200      	movs	r2, #0
 8015c02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	22ff      	movs	r2, #255	; 0xff
 8015c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	22ff      	movs	r2, #255	; 0xff
 8015c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	4798      	blx	r3
}
 8015c20:	bf00      	nop
 8015c22:	3708      	adds	r7, #8
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}

08015c28 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	60f8      	str	r0, [r7, #12]
 8015c30:	60b9      	str	r1, [r7, #8]
 8015c32:	603b      	str	r3, [r7, #0]
 8015c34:	4613      	mov	r3, r2
 8015c36:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	683a      	ldr	r2, [r7, #0]
 8015c42:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	68ba      	ldr	r2, [r7, #8]
 8015c48:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	79fa      	ldrb	r2, [r7, #7]
 8015c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2200      	movs	r2, #0
 8015c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	2200      	movs	r2, #0
 8015c66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	2201      	movs	r2, #1
 8015c76:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	69ba      	ldr	r2, [r7, #24]
 8015c7e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	68f8      	ldr	r0, [r7, #12]
 8015c88:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8015c8a:	68f8      	ldr	r0, [r7, #12]
 8015c8c:	f7ff ffaf 	bl	8015bee <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8015c90:	68f8      	ldr	r0, [r7, #12]
 8015c92:	f7fe ff11 	bl	8014ab8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8015c9e:	bf00      	nop
 8015ca0:	3710      	adds	r7, #16
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}

08015ca6 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8015ca6:	b480      	push	{r7}
 8015ca8:	b085      	sub	sp, #20
 8015caa:	af00      	add	r7, sp, #0
 8015cac:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015cba:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8015cbc:	7bfb      	ldrb	r3, [r7, #15]
 8015cbe:	00db      	lsls	r3, r3, #3
 8015cc0:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	7bfa      	ldrb	r2, [r7, #15]
 8015cc6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	7c1b      	ldrb	r3, [r3, #16]
 8015cce:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8015cd0:	7bfb      	ldrb	r3, [r7, #15]
 8015cd2:	2b1f      	cmp	r3, #31
 8015cd4:	d901      	bls.n	8015cda <u8g2_update_dimension_common+0x34>
    t = 31;
 8015cd6:	231f      	movs	r3, #31
 8015cd8:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8015cda:	7bfb      	ldrb	r3, [r7, #15]
 8015cdc:	00db      	lsls	r3, r3, #3
 8015cde:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	7bfa      	ldrb	r2, [r7, #15]
 8015ce4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015cee:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8015cf0:	7bfb      	ldrb	r3, [r7, #15]
 8015cf2:	00db      	lsls	r3, r3, #3
 8015cf4:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	7bfa      	ldrb	r2, [r7, #15]
 8015cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015d04:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8015d06:	7bfb      	ldrb	r3, [r7, #15]
 8015d08:	687a      	ldr	r2, [r7, #4]
 8015d0a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8015d0e:	4413      	add	r3, r2
 8015d10:	68ba      	ldr	r2, [r7, #8]
 8015d12:	7c52      	ldrb	r2, [r2, #17]
 8015d14:	4293      	cmp	r3, r2
 8015d16:	dd06      	ble.n	8015d26 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8015d18:	68bb      	ldr	r3, [r7, #8]
 8015d1a:	7c5a      	ldrb	r2, [r3, #17]
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015d22:	1ad3      	subs	r3, r2, r3
 8015d24:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8015d26:	7bfb      	ldrb	r3, [r7, #15]
 8015d28:	00db      	lsls	r3, r3, #3
 8015d2a:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8015d4a:	7bfb      	ldrb	r3, [r7, #15]
 8015d4c:	4413      	add	r3, r2
 8015d4e:	b2da      	uxtb	r2, r3
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	22f0      	movs	r2, #240	; 0xf0
 8015d5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8015d5e:	68bb      	ldr	r3, [r7, #8]
 8015d60:	8a9b      	ldrh	r3, [r3, #20]
 8015d62:	2bf0      	cmp	r3, #240	; 0xf0
 8015d64:	d805      	bhi.n	8015d72 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8015d66:	68bb      	ldr	r3, [r7, #8]
 8015d68:	8a9b      	ldrh	r3, [r3, #20]
 8015d6a:	b2da      	uxtb	r2, r3
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8015d72:	68bb      	ldr	r3, [r7, #8]
 8015d74:	8adb      	ldrh	r3, [r3, #22]
 8015d76:	b2da      	uxtb	r2, r3
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8015d7e:	bf00      	nop
 8015d80:	3714      	adds	r7, #20
 8015d82:	46bd      	mov	sp, r7
 8015d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d88:	4770      	bx	lr

08015d8a <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8015d8a:	b580      	push	{r7, lr}
 8015d8c:	b084      	sub	sp, #16
 8015d8e:	af02      	add	r7, sp, #8
 8015d90:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015daa:	9300      	str	r3, [sp, #0]
 8015dac:	4603      	mov	r3, r0
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f7ff fa3b 	bl	801522a <u8g2_IsIntersection>
 8015db4:	4603      	mov	r3, r0
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d104      	bne.n	8015dc4 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8015dc2:	e03b      	b.n	8015e3c <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2201      	movs	r2, #1
 8015dc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015dd8:	429a      	cmp	r2, r3
 8015dda:	d205      	bcs.n	8015de8 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d905      	bls.n	8015e04 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d205      	bcs.n	8015e20 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d905      	bls.n	8015e3c <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8015e3c:	bf00      	nop
 8015e3e:	3708      	adds	r7, #8
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}

08015e44 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f7ff ff2a 	bl	8015ca6 <u8g2_update_dimension_common>
}
 8015e52:	bf00      	nop
 8015e54:	3708      	adds	r7, #8
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bd80      	pop	{r7, pc}

08015e5a <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8015e5a:	b580      	push	{r7, lr}
 8015e5c:	b082      	sub	sp, #8
 8015e5e:	af00      	add	r7, sp, #0
 8015e60:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2200      	movs	r2, #0
 8015e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d30a      	bcc.n	8015ea4 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015e9a:	1ad3      	subs	r3, r2, r3
 8015e9c:	b2da      	uxtb	r2, r3
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015eb0:	1ad3      	subs	r3, r2, r3
 8015eb2:	b2da      	uxtb	r2, r3
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f7ff ff65 	bl	8015d8a <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8015ec0:	bf00      	nop
 8015ec2:	3708      	adds	r7, #8
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b086      	sub	sp, #24
 8015ecc:	af02      	add	r7, sp, #8
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	4608      	mov	r0, r1
 8015ed2:	4611      	mov	r1, r2
 8015ed4:	461a      	mov	r2, r3
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	70fb      	strb	r3, [r7, #3]
 8015eda:	460b      	mov	r3, r1
 8015edc:	70bb      	strb	r3, [r7, #2]
 8015ede:	4613      	mov	r3, r2
 8015ee0:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015ee8:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8015eea:	7bba      	ldrb	r2, [r7, #14]
 8015eec:	78bb      	ldrb	r3, [r7, #2]
 8015eee:	1ad3      	subs	r3, r2, r3
 8015ef0:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015ef8:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8015efa:	7bfa      	ldrb	r2, [r7, #15]
 8015efc:	78fb      	ldrb	r3, [r7, #3]
 8015efe:	1ad3      	subs	r3, r2, r3
 8015f00:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8015f02:	7e3b      	ldrb	r3, [r7, #24]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d107      	bne.n	8015f18 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8015f08:	7bbb      	ldrb	r3, [r7, #14]
 8015f0a:	3b01      	subs	r3, #1
 8015f0c:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8015f0e:	7bfa      	ldrb	r2, [r7, #15]
 8015f10:	787b      	ldrb	r3, [r7, #1]
 8015f12:	1ad3      	subs	r3, r2, r3
 8015f14:	73fb      	strb	r3, [r7, #15]
 8015f16:	e009      	b.n	8015f2c <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8015f18:	7e3b      	ldrb	r3, [r7, #24]
 8015f1a:	2b01      	cmp	r3, #1
 8015f1c:	d106      	bne.n	8015f2c <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8015f1e:	7bfb      	ldrb	r3, [r7, #15]
 8015f20:	3b01      	subs	r3, #1
 8015f22:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8015f24:	7bba      	ldrb	r2, [r7, #14]
 8015f26:	787b      	ldrb	r3, [r7, #1]
 8015f28:	1ad3      	subs	r3, r2, r3
 8015f2a:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8015f2c:	7878      	ldrb	r0, [r7, #1]
 8015f2e:	7bba      	ldrb	r2, [r7, #14]
 8015f30:	7bf9      	ldrb	r1, [r7, #15]
 8015f32:	7e3b      	ldrb	r3, [r7, #24]
 8015f34:	9300      	str	r3, [sp, #0]
 8015f36:	4603      	mov	r3, r0
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f7fe fea9 	bl	8014c90 <u8g2_draw_hv_line_2dir>
}
 8015f3e:	bf00      	nop
 8015f40:	3710      	adds	r7, #16
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}

08015f46 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8015f46:	b480      	push	{r7}
 8015f48:	b083      	sub	sp, #12
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2200      	movs	r2, #0
 8015f52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8015f56:	bf00      	nop
 8015f58:	370c      	adds	r7, #12
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f60:	4770      	bx	lr

08015f62 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8015f62:	b480      	push	{r7}
 8015f64:	b083      	sub	sp, #12
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	6078      	str	r0, [r7, #4]
 8015f6a:	460b      	mov	r3, r1
 8015f6c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8015f6e:	78fb      	ldrb	r3, [r7, #3]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d002      	beq.n	8015f7a <u8x8_ascii_next+0x18>
 8015f74:	78fb      	ldrb	r3, [r7, #3]
 8015f76:	2b0a      	cmp	r3, #10
 8015f78:	d102      	bne.n	8015f80 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8015f7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f7e:	e001      	b.n	8015f84 <u8x8_ascii_next+0x22>
  return b;
 8015f80:	78fb      	ldrb	r3, [r7, #3]
 8015f82:	b29b      	uxth	r3, r3
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	370c      	adds	r7, #12
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8e:	4770      	bx	lr

08015f90 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8015f90:	b480      	push	{r7}
 8015f92:	b083      	sub	sp, #12
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
 8015f98:	460b      	mov	r3, r1
 8015f9a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8015f9c:	78fb      	ldrb	r3, [r7, #3]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d002      	beq.n	8015fa8 <u8x8_utf8_next+0x18>
 8015fa2:	78fb      	ldrb	r3, [r7, #3]
 8015fa4:	2b0a      	cmp	r3, #10
 8015fa6:	d102      	bne.n	8015fae <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8015fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fac:	e06e      	b.n	801608c <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d145      	bne.n	8016044 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8015fb8:	78fb      	ldrb	r3, [r7, #3]
 8015fba:	2bfb      	cmp	r3, #251	; 0xfb
 8015fbc:	d908      	bls.n	8015fd0 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	2205      	movs	r2, #5
 8015fc2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8015fc6:	78fb      	ldrb	r3, [r7, #3]
 8015fc8:	f003 0301 	and.w	r3, r3, #1
 8015fcc:	70fb      	strb	r3, [r7, #3]
 8015fce:	e032      	b.n	8016036 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8015fd0:	78fb      	ldrb	r3, [r7, #3]
 8015fd2:	2bf7      	cmp	r3, #247	; 0xf7
 8015fd4:	d908      	bls.n	8015fe8 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2204      	movs	r2, #4
 8015fda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8015fde:	78fb      	ldrb	r3, [r7, #3]
 8015fe0:	f003 0303 	and.w	r3, r3, #3
 8015fe4:	70fb      	strb	r3, [r7, #3]
 8015fe6:	e026      	b.n	8016036 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8015fe8:	78fb      	ldrb	r3, [r7, #3]
 8015fea:	2bef      	cmp	r3, #239	; 0xef
 8015fec:	d908      	bls.n	8016000 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2203      	movs	r2, #3
 8015ff2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8015ff6:	78fb      	ldrb	r3, [r7, #3]
 8015ff8:	f003 0307 	and.w	r3, r3, #7
 8015ffc:	70fb      	strb	r3, [r7, #3]
 8015ffe:	e01a      	b.n	8016036 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8016000:	78fb      	ldrb	r3, [r7, #3]
 8016002:	2bdf      	cmp	r3, #223	; 0xdf
 8016004:	d908      	bls.n	8016018 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	2202      	movs	r2, #2
 801600a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 801600e:	78fb      	ldrb	r3, [r7, #3]
 8016010:	f003 030f 	and.w	r3, r3, #15
 8016014:	70fb      	strb	r3, [r7, #3]
 8016016:	e00e      	b.n	8016036 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8016018:	78fb      	ldrb	r3, [r7, #3]
 801601a:	2bbf      	cmp	r3, #191	; 0xbf
 801601c:	d908      	bls.n	8016030 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2201      	movs	r2, #1
 8016022:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8016026:	78fb      	ldrb	r3, [r7, #3]
 8016028:	f003 031f 	and.w	r3, r3, #31
 801602c:	70fb      	strb	r3, [r7, #3]
 801602e:	e002      	b.n	8016036 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8016030:	78fb      	ldrb	r3, [r7, #3]
 8016032:	b29b      	uxth	r3, r3
 8016034:	e02a      	b.n	801608c <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8016036:	78fb      	ldrb	r3, [r7, #3]
 8016038:	b29a      	uxth	r2, r3
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 801603e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8016042:	e023      	b.n	801608c <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801604a:	3b01      	subs	r3, #1
 801604c:	b2da      	uxtb	r2, r3
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	8c1b      	ldrh	r3, [r3, #32]
 8016058:	019b      	lsls	r3, r3, #6
 801605a:	b29a      	uxth	r2, r3
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8016060:	78fb      	ldrb	r3, [r7, #3]
 8016062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016066:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	8c1a      	ldrh	r2, [r3, #32]
 801606c:	78fb      	ldrb	r3, [r7, #3]
 801606e:	b29b      	uxth	r3, r3
 8016070:	4313      	orrs	r3, r2
 8016072:	b29a      	uxth	r2, r3
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801607e:	2b00      	cmp	r3, #0
 8016080:	d002      	beq.n	8016088 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8016082:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8016086:	e001      	b.n	801608c <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	8c1b      	ldrh	r3, [r3, #32]
}
 801608c:	4618      	mov	r0, r3
 801608e:	370c      	adds	r7, #12
 8016090:	46bd      	mov	sp, r7
 8016092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016096:	4770      	bx	lr

08016098 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8016098:	b590      	push	{r4, r7, lr}
 801609a:	b085      	sub	sp, #20
 801609c:	af00      	add	r7, sp, #0
 801609e:	60f8      	str	r0, [r7, #12]
 80160a0:	460b      	mov	r3, r1
 80160a2:	607a      	str	r2, [r7, #4]
 80160a4:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	691c      	ldr	r4, [r3, #16]
 80160aa:	7afa      	ldrb	r2, [r7, #11]
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2117      	movs	r1, #23
 80160b0:	68f8      	ldr	r0, [r7, #12]
 80160b2:	47a0      	blx	r4
 80160b4:	4603      	mov	r3, r0
}
 80160b6:	4618      	mov	r0, r3
 80160b8:	3714      	adds	r7, #20
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd90      	pop	{r4, r7, pc}

080160be <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80160be:	b580      	push	{r7, lr}
 80160c0:	b082      	sub	sp, #8
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	6078      	str	r0, [r7, #4]
 80160c6:	460b      	mov	r3, r1
 80160c8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80160ca:	1cfb      	adds	r3, r7, #3
 80160cc:	461a      	mov	r2, r3
 80160ce:	2101      	movs	r1, #1
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f7ff ffe1 	bl	8016098 <u8x8_byte_SendBytes>
 80160d6:	4603      	mov	r3, r0
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80160e0:	b590      	push	{r4, r7, lr}
 80160e2:	b083      	sub	sp, #12
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	691c      	ldr	r4, [r3, #16]
 80160ec:	2300      	movs	r3, #0
 80160ee:	2200      	movs	r2, #0
 80160f0:	2118      	movs	r1, #24
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	47a0      	blx	r4
 80160f6:	4603      	mov	r3, r0
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	370c      	adds	r7, #12
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd90      	pop	{r4, r7, pc}

08016100 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8016100:	b590      	push	{r4, r7, lr}
 8016102:	b083      	sub	sp, #12
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	691c      	ldr	r4, [r3, #16]
 801610c:	2300      	movs	r3, #0
 801610e:	2200      	movs	r2, #0
 8016110:	2119      	movs	r1, #25
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	47a0      	blx	r4
 8016116:	4603      	mov	r3, r0
}
 8016118:	4618      	mov	r0, r3
 801611a:	370c      	adds	r7, #12
 801611c:	46bd      	mov	sp, r7
 801611e:	bd90      	pop	{r4, r7, pc}

08016120 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8016120:	b590      	push	{r4, r7, lr}
 8016122:	b083      	sub	sp, #12
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
 8016128:	460b      	mov	r3, r1
 801612a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	68dc      	ldr	r4, [r3, #12]
 8016130:	78fa      	ldrb	r2, [r7, #3]
 8016132:	2300      	movs	r3, #0
 8016134:	2115      	movs	r1, #21
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	47a0      	blx	r4
 801613a:	4603      	mov	r3, r0
}
 801613c:	4618      	mov	r0, r3
 801613e:	370c      	adds	r7, #12
 8016140:	46bd      	mov	sp, r7
 8016142:	bd90      	pop	{r4, r7, pc}

08016144 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8016144:	b590      	push	{r4, r7, lr}
 8016146:	b083      	sub	sp, #12
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
 801614c:	460b      	mov	r3, r1
 801614e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	68dc      	ldr	r4, [r3, #12]
 8016154:	78fa      	ldrb	r2, [r7, #3]
 8016156:	2300      	movs	r3, #0
 8016158:	2116      	movs	r1, #22
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	47a0      	blx	r4
 801615e:	4603      	mov	r3, r0
}
 8016160:	4618      	mov	r0, r3
 8016162:	370c      	adds	r7, #12
 8016164:	46bd      	mov	sp, r7
 8016166:	bd90      	pop	{r4, r7, pc}

08016168 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8016168:	b590      	push	{r4, r7, lr}
 801616a:	b085      	sub	sp, #20
 801616c:	af00      	add	r7, sp, #0
 801616e:	60f8      	str	r0, [r7, #12]
 8016170:	460b      	mov	r3, r1
 8016172:	607a      	str	r2, [r7, #4]
 8016174:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	68dc      	ldr	r4, [r3, #12]
 801617a:	7afa      	ldrb	r2, [r7, #11]
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2117      	movs	r1, #23
 8016180:	68f8      	ldr	r0, [r7, #12]
 8016182:	47a0      	blx	r4
 8016184:	4603      	mov	r3, r0
}
 8016186:	4618      	mov	r0, r3
 8016188:	3714      	adds	r7, #20
 801618a:	46bd      	mov	sp, r7
 801618c:	bd90      	pop	{r4, r7, pc}

0801618e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 801618e:	b590      	push	{r4, r7, lr}
 8016190:	b083      	sub	sp, #12
 8016192:	af00      	add	r7, sp, #0
 8016194:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	68dc      	ldr	r4, [r3, #12]
 801619a:	2300      	movs	r3, #0
 801619c:	2200      	movs	r2, #0
 801619e:	2118      	movs	r1, #24
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	47a0      	blx	r4
 80161a4:	4603      	mov	r3, r0
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	370c      	adds	r7, #12
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd90      	pop	{r4, r7, pc}

080161ae <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80161ae:	b590      	push	{r4, r7, lr}
 80161b0:	b083      	sub	sp, #12
 80161b2:	af00      	add	r7, sp, #0
 80161b4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	68dc      	ldr	r4, [r3, #12]
 80161ba:	2300      	movs	r3, #0
 80161bc:	2200      	movs	r2, #0
 80161be:	2119      	movs	r1, #25
 80161c0:	6878      	ldr	r0, [r7, #4]
 80161c2:	47a0      	blx	r4
 80161c4:	4603      	mov	r3, r0
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	370c      	adds	r7, #12
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd90      	pop	{r4, r7, pc}

080161ce <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80161ce:	b590      	push	{r4, r7, lr}
 80161d0:	b085      	sub	sp, #20
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	6078      	str	r0, [r7, #4]
 80161d6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	781b      	ldrb	r3, [r3, #0]
 80161dc:	73fb      	strb	r3, [r7, #15]
    data++;
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	3301      	adds	r3, #1
 80161e2:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80161e4:	7bfb      	ldrb	r3, [r7, #15]
 80161e6:	2bfe      	cmp	r3, #254	; 0xfe
 80161e8:	d031      	beq.n	801624e <u8x8_cad_SendSequence+0x80>
 80161ea:	2bfe      	cmp	r3, #254	; 0xfe
 80161ec:	dc3d      	bgt.n	801626a <u8x8_cad_SendSequence+0x9c>
 80161ee:	2b19      	cmp	r3, #25
 80161f0:	dc3b      	bgt.n	801626a <u8x8_cad_SendSequence+0x9c>
 80161f2:	2b18      	cmp	r3, #24
 80161f4:	da23      	bge.n	801623e <u8x8_cad_SendSequence+0x70>
 80161f6:	2b16      	cmp	r3, #22
 80161f8:	dc02      	bgt.n	8016200 <u8x8_cad_SendSequence+0x32>
 80161fa:	2b15      	cmp	r3, #21
 80161fc:	da03      	bge.n	8016206 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80161fe:	e034      	b.n	801626a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8016200:	2b17      	cmp	r3, #23
 8016202:	d00e      	beq.n	8016222 <u8x8_cad_SendSequence+0x54>
	return;
 8016204:	e031      	b.n	801626a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	68dc      	ldr	r4, [r3, #12]
 8016210:	7bba      	ldrb	r2, [r7, #14]
 8016212:	7bf9      	ldrb	r1, [r7, #15]
 8016214:	2300      	movs	r3, #0
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	47a0      	blx	r4
	  data++;
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	3301      	adds	r3, #1
 801621e:	603b      	str	r3, [r7, #0]
	  break;
 8016220:	e022      	b.n	8016268 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	781b      	ldrb	r3, [r3, #0]
 8016226:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8016228:	f107 030e 	add.w	r3, r7, #14
 801622c:	461a      	mov	r2, r3
 801622e:	2101      	movs	r1, #1
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f7ff ff99 	bl	8016168 <u8x8_cad_SendData>
	  data++;
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	3301      	adds	r3, #1
 801623a:	603b      	str	r3, [r7, #0]
	  break;
 801623c:	e014      	b.n	8016268 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	68dc      	ldr	r4, [r3, #12]
 8016242:	7bf9      	ldrb	r1, [r7, #15]
 8016244:	2300      	movs	r3, #0
 8016246:	2200      	movs	r2, #0
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	47a0      	blx	r4
	  break;
 801624c:	e00c      	b.n	8016268 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	781b      	ldrb	r3, [r3, #0]
 8016252:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8016254:	7bbb      	ldrb	r3, [r7, #14]
 8016256:	461a      	mov	r2, r3
 8016258:	2129      	movs	r1, #41	; 0x29
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 faa7 	bl	80167ae <u8x8_gpio_call>
	  data++;
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	3301      	adds	r3, #1
 8016264:	603b      	str	r3, [r7, #0]
	  break;
 8016266:	bf00      	nop
    cmd = *data;
 8016268:	e7b6      	b.n	80161d8 <u8x8_cad_SendSequence+0xa>
	return;
 801626a:	bf00      	nop
    }
  }
}
 801626c:	3714      	adds	r7, #20
 801626e:	46bd      	mov	sp, r7
 8016270:	bd90      	pop	{r4, r7, pc}

08016272 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8016272:	b590      	push	{r4, r7, lr}
 8016274:	b085      	sub	sp, #20
 8016276:	af00      	add	r7, sp, #0
 8016278:	60f8      	str	r0, [r7, #12]
 801627a:	460b      	mov	r3, r1
 801627c:	607a      	str	r2, [r7, #4]
 801627e:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8016280:	68f8      	ldr	r0, [r7, #12]
 8016282:	f7ff ff2d 	bl	80160e0 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8016286:	2140      	movs	r1, #64	; 0x40
 8016288:	68f8      	ldr	r0, [r7, #12]
 801628a:	f7ff ff18 	bl	80160be <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	691c      	ldr	r4, [r3, #16]
 8016292:	7afa      	ldrb	r2, [r7, #11]
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2117      	movs	r1, #23
 8016298:	68f8      	ldr	r0, [r7, #12]
 801629a:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 801629c:	68f8      	ldr	r0, [r7, #12]
 801629e:	f7ff ff2f 	bl	8016100 <u8x8_byte_EndTransfer>
}
 80162a2:	bf00      	nop
 80162a4:	3714      	adds	r7, #20
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd90      	pop	{r4, r7, pc}
	...

080162ac <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80162ac:	b590      	push	{r4, r7, lr}
 80162ae:	b087      	sub	sp, #28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	607b      	str	r3, [r7, #4]
 80162b6:	460b      	mov	r3, r1
 80162b8:	72fb      	strb	r3, [r7, #11]
 80162ba:	4613      	mov	r3, r2
 80162bc:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 80162be:	7afb      	ldrb	r3, [r7, #11]
 80162c0:	3b14      	subs	r3, #20
 80162c2:	2b05      	cmp	r3, #5
 80162c4:	d848      	bhi.n	8016358 <u8x8_cad_ssd13xx_i2c+0xac>
 80162c6:	a201      	add	r2, pc, #4	; (adr r2, 80162cc <u8x8_cad_ssd13xx_i2c+0x20>)
 80162c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162cc:	08016335 	.word	0x08016335
 80162d0:	080162e5 	.word	0x080162e5
 80162d4:	080162e5 	.word	0x080162e5
 80162d8:	08016305 	.word	0x08016305
 80162dc:	0801635d 	.word	0x0801635d
 80162e0:	0801635d 	.word	0x0801635d
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 80162e4:	68f8      	ldr	r0, [r7, #12]
 80162e6:	f7ff fefb 	bl	80160e0 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 80162ea:	2100      	movs	r1, #0
 80162ec:	68f8      	ldr	r0, [r7, #12]
 80162ee:	f7ff fee6 	bl	80160be <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 80162f2:	7abb      	ldrb	r3, [r7, #10]
 80162f4:	4619      	mov	r1, r3
 80162f6:	68f8      	ldr	r0, [r7, #12]
 80162f8:	f7ff fee1 	bl	80160be <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 80162fc:	68f8      	ldr	r0, [r7, #12]
 80162fe:	f7ff feff 	bl	8016100 <u8x8_byte_EndTransfer>
      break;
 8016302:	e02c      	b.n	801635e <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8016308:	e00a      	b.n	8016320 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 801630a:	697a      	ldr	r2, [r7, #20]
 801630c:	2118      	movs	r1, #24
 801630e:	68f8      	ldr	r0, [r7, #12]
 8016310:	f7ff ffaf 	bl	8016272 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8016314:	7abb      	ldrb	r3, [r7, #10]
 8016316:	3b18      	subs	r3, #24
 8016318:	72bb      	strb	r3, [r7, #10]
	p+=24;
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	3318      	adds	r3, #24
 801631e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8016320:	7abb      	ldrb	r3, [r7, #10]
 8016322:	2b18      	cmp	r3, #24
 8016324:	d8f1      	bhi.n	801630a <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8016326:	7abb      	ldrb	r3, [r7, #10]
 8016328:	697a      	ldr	r2, [r7, #20]
 801632a:	4619      	mov	r1, r3
 801632c:	68f8      	ldr	r0, [r7, #12]
 801632e:	f7ff ffa0 	bl	8016272 <u8x8_i2c_data_transfer>
      break;
 8016332:	e014      	b.n	801635e <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801633a:	2bff      	cmp	r3, #255	; 0xff
 801633c:	d103      	bne.n	8016346 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2278      	movs	r2, #120	; 0x78
 8016342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	691c      	ldr	r4, [r3, #16]
 801634a:	7aba      	ldrb	r2, [r7, #10]
 801634c:	7af9      	ldrb	r1, [r7, #11]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	68f8      	ldr	r0, [r7, #12]
 8016352:	47a0      	blx	r4
 8016354:	4603      	mov	r3, r0
 8016356:	e003      	b.n	8016360 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8016358:	2300      	movs	r3, #0
 801635a:	e001      	b.n	8016360 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 801635c:	bf00      	nop
  }
  return 1;
 801635e:	2301      	movs	r3, #1
}
 8016360:	4618      	mov	r0, r3
 8016362:	371c      	adds	r7, #28
 8016364:	46bd      	mov	sp, r7
 8016366:	bd90      	pop	{r4, r7, pc}

08016368 <u8x8_st7528_8to32>:
*/

static uint8_t u8x8_st7528_8to32_dest_buf[32];

static uint8_t *u8x8_st7528_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 8016368:	b480      	push	{r7}
 801636a:	b085      	sub	sp, #20
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]
  uint8_t j;
  uint8_t *dest;
  
  dest = u8x8_st7528_8to32_dest_buf;
 8016372:	4b16      	ldr	r3, [pc, #88]	; (80163cc <u8x8_st7528_8to32+0x64>)
 8016374:	60bb      	str	r3, [r7, #8]
  for( j = 0; j < 8; j++ )
 8016376:	2300      	movs	r3, #0
 8016378:	73fb      	strb	r3, [r7, #15]
 801637a:	e01d      	b.n	80163b8 <u8x8_st7528_8to32+0x50>
  {
    *dest++ =*ptr;
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	1c5a      	adds	r2, r3, #1
 8016380:	60ba      	str	r2, [r7, #8]
 8016382:	683a      	ldr	r2, [r7, #0]
 8016384:	7812      	ldrb	r2, [r2, #0]
 8016386:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	1c5a      	adds	r2, r3, #1
 801638c:	60ba      	str	r2, [r7, #8]
 801638e:	683a      	ldr	r2, [r7, #0]
 8016390:	7812      	ldrb	r2, [r2, #0]
 8016392:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 8016394:	68bb      	ldr	r3, [r7, #8]
 8016396:	1c5a      	adds	r2, r3, #1
 8016398:	60ba      	str	r2, [r7, #8]
 801639a:	683a      	ldr	r2, [r7, #0]
 801639c:	7812      	ldrb	r2, [r2, #0]
 801639e:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	1c5a      	adds	r2, r3, #1
 80163a4:	60ba      	str	r2, [r7, #8]
 80163a6:	683a      	ldr	r2, [r7, #0]
 80163a8:	7812      	ldrb	r2, [r2, #0]
 80163aa:	701a      	strb	r2, [r3, #0]
    ptr++;
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	3301      	adds	r3, #1
 80163b0:	603b      	str	r3, [r7, #0]
  for( j = 0; j < 8; j++ )
 80163b2:	7bfb      	ldrb	r3, [r7, #15]
 80163b4:	3301      	adds	r3, #1
 80163b6:	73fb      	strb	r3, [r7, #15]
 80163b8:	7bfb      	ldrb	r3, [r7, #15]
 80163ba:	2b07      	cmp	r3, #7
 80163bc:	d9de      	bls.n	801637c <u8x8_st7528_8to32+0x14>
  }
  return u8x8_st7528_8to32_dest_buf;
 80163be:	4b03      	ldr	r3, [pc, #12]	; (80163cc <u8x8_st7528_8to32+0x64>)
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	3714      	adds	r7, #20
 80163c4:	46bd      	mov	sp, r7
 80163c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ca:	4770      	bx	lr
 80163cc:	20000ba0 	.word	0x20000ba0

080163d0 <u8x8_d_st7528_generic>:



static uint8_t u8x8_d_st7528_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b088      	sub	sp, #32
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	60f8      	str	r0, [r7, #12]
 80163d8:	607b      	str	r3, [r7, #4]
 80163da:	460b      	mov	r3, r1
 80163dc:	72fb      	strb	r3, [r7, #11]
 80163de:	4613      	mov	r3, r2
 80163e0:	72bb      	strb	r3, [r7, #10]
  uint8_t x;
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 80163e2:	7afb      	ldrb	r3, [r7, #11]
 80163e4:	3b0b      	subs	r3, #11
 80163e6:	2b04      	cmp	r3, #4
 80163e8:	f200 8090 	bhi.w	801650c <u8x8_d_st7528_generic+0x13c>
 80163ec:	a201      	add	r2, pc, #4	; (adr r2, 80163f4 <u8x8_d_st7528_generic+0x24>)
 80163ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163f2:	bf00      	nop
 80163f4:	08016409 	.word	0x08016409
 80163f8:	0801650d 	.word	0x0801650d
 80163fc:	08016423 	.word	0x08016423
 8016400:	08016455 	.word	0x08016455
 8016404:	08016475 	.word	0x08016475
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
    */
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8016408:	7abb      	ldrb	r3, [r7, #10]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d104      	bne.n	8016418 <u8x8_d_st7528_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave0_seq);
 801640e:	4943      	ldr	r1, [pc, #268]	; (801651c <u8x8_d_st7528_generic+0x14c>)
 8016410:	68f8      	ldr	r0, [r7, #12]
 8016412:	f7ff fedc 	bl	80161ce <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave1_seq);
      break;
 8016416:	e07b      	b.n	8016510 <u8x8_d_st7528_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave1_seq);
 8016418:	4941      	ldr	r1, [pc, #260]	; (8016520 <u8x8_d_st7528_generic+0x150>)
 801641a:	68f8      	ldr	r0, [r7, #12]
 801641c:	f7ff fed7 	bl	80161ce <u8x8_cad_SendSequence>
      break;
 8016420:	e076      	b.n	8016510 <u8x8_d_st7528_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8016422:	7abb      	ldrb	r3, [r7, #10]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d10a      	bne.n	801643e <u8x8_d_st7528_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip0_seq);
 8016428:	493e      	ldr	r1, [pc, #248]	; (8016524 <u8x8_d_st7528_generic+0x154>)
 801642a:	68f8      	ldr	r0, [r7, #12]
 801642c:	f7ff fecf 	bl	80161ce <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	7c9a      	ldrb	r2, [r3, #18]
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 801643c:	e068      	b.n	8016510 <u8x8_d_st7528_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip1_seq);
 801643e:	493a      	ldr	r1, [pc, #232]	; (8016528 <u8x8_d_st7528_generic+0x158>)
 8016440:	68f8      	ldr	r0, [r7, #12]
 8016442:	f7ff fec4 	bl	80161ce <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	7cda      	ldrb	r2, [r3, #19]
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8016452:	e05d      	b.n	8016510 <u8x8_d_st7528_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8016454:	68f8      	ldr	r0, [r7, #12]
 8016456:	f7ff fe9a 	bl	801618e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 801645a:	2181      	movs	r1, #129	; 0x81
 801645c:	68f8      	ldr	r0, [r7, #12]
 801645e:	f7ff fe5f 	bl	8016120 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1326 has range from 0 to 255 */
 8016462:	7abb      	ldrb	r3, [r7, #10]
 8016464:	4619      	mov	r1, r3
 8016466:	68f8      	ldr	r0, [r7, #12]
 8016468:	f7ff fe6c 	bl	8016144 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 801646c:	68f8      	ldr	r0, [r7, #12]
 801646e:	f7ff fe9e 	bl	80161ae <u8x8_cad_EndTransfer>
      break;
 8016472:	e04d      	b.n	8016510 <u8x8_d_st7528_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8016474:	68f8      	ldr	r0, [r7, #12]
 8016476:	f7ff fe8a 	bl	801618e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	795b      	ldrb	r3, [r3, #5]
 801647e:	77fb      	strb	r3, [r7, #31]
      x *= 8;  // not clear
 8016480:	7ffb      	ldrb	r3, [r7, #31]
 8016482:	00db      	lsls	r3, r3, #3
 8016484:	77fb      	strb	r3, [r7, #31]
      
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	799b      	ldrb	r3, [r3, #6]
 801648a:	75fb      	strb	r3, [r7, #23]
      
    
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	791b      	ldrb	r3, [r3, #4]
 8016490:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	61bb      	str	r3, [r7, #24]

	do
	{
          u8x8_cad_SendCmd(u8x8, 0xb0 | y );	/* set page address */
 8016498:	7dfb      	ldrb	r3, [r7, #23]
 801649a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 801649e:	b2db      	uxtb	r3, r3
 80164a0:	4619      	mov	r1, r3
 80164a2:	68f8      	ldr	r0, [r7, #12]
 80164a4:	f7ff fe3c 	bl	8016120 <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x10| (x>>4) );	/* set col msb*/
 80164a8:	7ffb      	ldrb	r3, [r7, #31]
 80164aa:	091b      	lsrs	r3, r3, #4
 80164ac:	b2db      	uxtb	r3, r3
 80164ae:	f043 0310 	orr.w	r3, r3, #16
 80164b2:	b2db      	uxtb	r3, r3
 80164b4:	4619      	mov	r1, r3
 80164b6:	68f8      	ldr	r0, [r7, #12]
 80164b8:	f7ff fe32 	bl	8016120 <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x00| (x&15) );	/* set col lsb*/
 80164bc:	7ffb      	ldrb	r3, [r7, #31]
 80164be:	f003 030f 	and.w	r3, r3, #15
 80164c2:	b2db      	uxtb	r3, r3
 80164c4:	4619      	mov	r1, r3
 80164c6:	68f8      	ldr	r0, [r7, #12]
 80164c8:	f7ff fe2a 	bl	8016120 <u8x8_cad_SendCmd>
          
          u8x8_cad_SendData(u8x8, 32, u8x8_st7528_8to32(u8x8, ptr));
 80164cc:	69b9      	ldr	r1, [r7, #24]
 80164ce:	68f8      	ldr	r0, [r7, #12]
 80164d0:	f7ff ff4a 	bl	8016368 <u8x8_st7528_8to32>
 80164d4:	4603      	mov	r3, r0
 80164d6:	461a      	mov	r2, r3
 80164d8:	2120      	movs	r1, #32
 80164da:	68f8      	ldr	r0, [r7, #12]
 80164dc:	f7ff fe44 	bl	8016168 <u8x8_cad_SendData>
          
	  ptr += 8;
 80164e0:	69bb      	ldr	r3, [r7, #24]
 80164e2:	3308      	adds	r3, #8
 80164e4:	61bb      	str	r3, [r7, #24]
	  x += 8;
 80164e6:	7ffb      	ldrb	r3, [r7, #31]
 80164e8:	3308      	adds	r3, #8
 80164ea:	77fb      	strb	r3, [r7, #31]
	  c--;
 80164ec:	7fbb      	ldrb	r3, [r7, #30]
 80164ee:	3b01      	subs	r3, #1
 80164f0:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );	
 80164f2:	7fbb      	ldrb	r3, [r7, #30]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d1cf      	bne.n	8016498 <u8x8_d_st7528_generic+0xc8>
	arg_int--;
 80164f8:	7abb      	ldrb	r3, [r7, #10]
 80164fa:	3b01      	subs	r3, #1
 80164fc:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80164fe:	7abb      	ldrb	r3, [r7, #10]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d1c3      	bne.n	801648c <u8x8_d_st7528_generic+0xbc>
      
      u8x8_cad_EndTransfer(u8x8);
 8016504:	68f8      	ldr	r0, [r7, #12]
 8016506:	f7ff fe52 	bl	80161ae <u8x8_cad_EndTransfer>
      break;
 801650a:	e001      	b.n	8016510 <u8x8_d_st7528_generic+0x140>
    default:
      return 0;
 801650c:	2300      	movs	r3, #0
 801650e:	e000      	b.n	8016512 <u8x8_d_st7528_generic+0x142>
  }
  return 1;
 8016510:	2301      	movs	r3, #1
}
 8016512:	4618      	mov	r0, r3
 8016514:	3720      	adds	r7, #32
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	08023e00 	.word	0x08023e00
 8016520:	08023e0c 	.word	0x08023e0c
 8016524:	08023e18 	.word	0x08023e18
 8016528:	08023e20 	.word	0x08023e20

0801652c <u8x8_d_st7528_graylevel_init>:


static void u8x8_d_st7528_graylevel_init(u8x8_t *u8x8, uint8_t mode0)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b084      	sub	sp, #16
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	460b      	mov	r3, r1
 8016536:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  
  u8x8_cad_StartTransfer(u8x8);
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f7ff fe28 	bl	801618e <u8x8_cad_StartTransfer>
  u8x8_cad_SendCmd(u8x8, 0x38 );
 801653e:	2138      	movs	r1, #56	; 0x38
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f7ff fded 	bl	8016120 <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0+1 );
 8016546:	78fb      	ldrb	r3, [r7, #3]
 8016548:	3301      	adds	r3, #1
 801654a:	b2db      	uxtb	r3, r3
 801654c:	4619      	mov	r1, r3
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	f7ff fdf8 	bl	8016144 <u8x8_cad_SendArg>
  for( i = 0; i < 64; i++ )
 8016554:	2300      	movs	r3, #0
 8016556:	73fb      	strb	r3, [r7, #15]
 8016558:	e011      	b.n	801657e <u8x8_d_st7528_graylevel_init+0x52>
  {
          u8x8_cad_SendCmd(u8x8, i+0x080 );
 801655a:	7bfb      	ldrb	r3, [r7, #15]
 801655c:	3b80      	subs	r3, #128	; 0x80
 801655e:	b2db      	uxtb	r3, r3
 8016560:	4619      	mov	r1, r3
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f7ff fddc 	bl	8016120 <u8x8_cad_SendCmd>
          u8x8_cad_SendArg(u8x8, i & 0xfc);
 8016568:	7bfb      	ldrb	r3, [r7, #15]
 801656a:	f023 0303 	bic.w	r3, r3, #3
 801656e:	b2db      	uxtb	r3, r3
 8016570:	4619      	mov	r1, r3
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f7ff fde6 	bl	8016144 <u8x8_cad_SendArg>
  for( i = 0; i < 64; i++ )
 8016578:	7bfb      	ldrb	r3, [r7, #15]
 801657a:	3301      	adds	r3, #1
 801657c:	73fb      	strb	r3, [r7, #15]
 801657e:	7bfb      	ldrb	r3, [r7, #15]
 8016580:	2b3f      	cmp	r3, #63	; 0x3f
 8016582:	d9ea      	bls.n	801655a <u8x8_d_st7528_graylevel_init+0x2e>
  }
  u8x8_cad_SendCmd(u8x8, 0x38 );
 8016584:	2138      	movs	r1, #56	; 0x38
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f7ff fdca 	bl	8016120 <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0 );
 801658c:	78fb      	ldrb	r3, [r7, #3]
 801658e:	4619      	mov	r1, r3
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7ff fdd7 	bl	8016144 <u8x8_cad_SendArg>
  u8x8_cad_EndTransfer(u8x8);
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	f7ff fe09 	bl	80161ae <u8x8_cad_EndTransfer>
}
 801659c:	bf00      	nop
 801659e:	3710      	adds	r7, #16
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}

080165a4 <u8x8_d_st7528_nhd_c160100>:
  /* pixel_width = */ 160,
  /* pixel_height = */ 100
};

uint8_t u8x8_d_st7528_nhd_c160100(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b084      	sub	sp, #16
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	60f8      	str	r0, [r7, #12]
 80165ac:	607b      	str	r3, [r7, #4]
 80165ae:	460b      	mov	r3, r1
 80165b0:	72fb      	strb	r3, [r7, #11]
 80165b2:	4613      	mov	r3, r2
 80165b4:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 80165b6:	7afb      	ldrb	r3, [r7, #11]
 80165b8:	2b09      	cmp	r3, #9
 80165ba:	d105      	bne.n	80165c8 <u8x8_d_st7528_nhd_c160100+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7528_160x100_display_info);
 80165bc:	4910      	ldr	r1, [pc, #64]	; (8016600 <u8x8_d_st7528_nhd_c160100+0x5c>)
 80165be:	68f8      	ldr	r0, [r7, #12]
 80165c0:	f000 f822 	bl	8016608 <u8x8_d_helper_display_setup_memory>
      return 1;
 80165c4:	2301      	movs	r3, #1
 80165c6:	e016      	b.n	80165f6 <u8x8_d_st7528_nhd_c160100+0x52>
    }
    if ( msg == U8X8_MSG_DISPLAY_INIT )
 80165c8:	7afb      	ldrb	r3, [r7, #11]
 80165ca:	2b0a      	cmp	r3, #10
 80165cc:	d10c      	bne.n	80165e8 <u8x8_d_st7528_nhd_c160100+0x44>
    {
      u8x8_d_helper_display_init(u8x8);
 80165ce:	68f8      	ldr	r0, [r7, #12]
 80165d0:	f000 f82e 	bl	8016630 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
 80165d4:	490b      	ldr	r1, [pc, #44]	; (8016604 <u8x8_d_st7528_nhd_c160100+0x60>)
 80165d6:	68f8      	ldr	r0, [r7, #12]
 80165d8:	f7ff fdf9 	bl	80161ce <u8x8_cad_SendSequence>
      u8x8_d_st7528_graylevel_init(u8x8, 0x074);
 80165dc:	2174      	movs	r1, #116	; 0x74
 80165de:	68f8      	ldr	r0, [r7, #12]
 80165e0:	f7ff ffa4 	bl	801652c <u8x8_d_st7528_graylevel_init>
      return 1;
 80165e4:	2301      	movs	r3, #1
 80165e6:	e006      	b.n	80165f6 <u8x8_d_st7528_nhd_c160100+0x52>
    }    
    return u8x8_d_st7528_generic(u8x8, msg, arg_int, arg_ptr);
 80165e8:	7aba      	ldrb	r2, [r7, #10]
 80165ea:	7af9      	ldrb	r1, [r7, #11]
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	68f8      	ldr	r0, [r7, #12]
 80165f0:	f7ff feee 	bl	80163d0 <u8x8_d_st7528_generic>
 80165f4:	4603      	mov	r3, r0
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	3710      	adds	r7, #16
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	08023e5c 	.word	0x08023e5c
 8016604:	08023e28 	.word	0x08023e28

08016608 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8016608:	b480      	push	{r7}
 801660a:	b083      	sub	sp, #12
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	683a      	ldr	r2, [r7, #0]
 8016616:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	7c9a      	ldrb	r2, [r3, #18]
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8016624:	bf00      	nop
 8016626:	370c      	adds	r7, #12
 8016628:	46bd      	mov	sp, r7
 801662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662e:	4770      	bx	lr

08016630 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8016630:	b590      	push	{r4, r7, lr}
 8016632:	b083      	sub	sp, #12
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	695c      	ldr	r4, [r3, #20]
 801663c:	2300      	movs	r3, #0
 801663e:	2200      	movs	r2, #0
 8016640:	2128      	movs	r1, #40	; 0x28
 8016642:	6878      	ldr	r0, [r7, #4]
 8016644:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	68dc      	ldr	r4, [r3, #12]
 801664a:	2300      	movs	r3, #0
 801664c:	2200      	movs	r2, #0
 801664e:	2114      	movs	r1, #20
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8016654:	2201      	movs	r2, #1
 8016656:	214b      	movs	r1, #75	; 0x4b
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	f000 f8a8 	bl	80167ae <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	791b      	ldrb	r3, [r3, #4]
 8016664:	461a      	mov	r2, r3
 8016666:	2129      	movs	r1, #41	; 0x29
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f000 f8a0 	bl	80167ae <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 801666e:	2200      	movs	r2, #0
 8016670:	214b      	movs	r1, #75	; 0x4b
 8016672:	6878      	ldr	r0, [r7, #4]
 8016674:	f000 f89b 	bl	80167ae <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	791b      	ldrb	r3, [r3, #4]
 801667e:	461a      	mov	r2, r3
 8016680:	2129      	movs	r1, #41	; 0x29
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f000 f893 	bl	80167ae <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8016688:	2201      	movs	r2, #1
 801668a:	214b      	movs	r1, #75	; 0x4b
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f000 f88e 	bl	80167ae <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	795b      	ldrb	r3, [r3, #5]
 8016698:	461a      	mov	r2, r3
 801669a:	2129      	movs	r1, #41	; 0x29
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f000 f886 	bl	80167ae <u8x8_gpio_call>
}    
 80166a2:	bf00      	nop
 80166a4:	370c      	adds	r7, #12
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd90      	pop	{r4, r7, pc}

080166aa <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80166aa:	b590      	push	{r4, r7, lr}
 80166ac:	b085      	sub	sp, #20
 80166ae:	af00      	add	r7, sp, #0
 80166b0:	6078      	str	r0, [r7, #4]
 80166b2:	4608      	mov	r0, r1
 80166b4:	4611      	mov	r1, r2
 80166b6:	461a      	mov	r2, r3
 80166b8:	4603      	mov	r3, r0
 80166ba:	70fb      	strb	r3, [r7, #3]
 80166bc:	460b      	mov	r3, r1
 80166be:	70bb      	strb	r3, [r7, #2]
 80166c0:	4613      	mov	r3, r2
 80166c2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80166c4:	78fb      	ldrb	r3, [r7, #3]
 80166c6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80166c8:	78bb      	ldrb	r3, [r7, #2]
 80166ca:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80166cc:	787b      	ldrb	r3, [r7, #1]
 80166ce:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80166d0:	6a3b      	ldr	r3, [r7, #32]
 80166d2:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	689c      	ldr	r4, [r3, #8]
 80166d8:	f107 0308 	add.w	r3, r7, #8
 80166dc:	2201      	movs	r2, #1
 80166de:	210f      	movs	r1, #15
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	47a0      	blx	r4
 80166e4:	4603      	mov	r3, r0
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3714      	adds	r7, #20
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd90      	pop	{r4, r7, pc}

080166ee <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80166ee:	b590      	push	{r4, r7, lr}
 80166f0:	b083      	sub	sp, #12
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	689c      	ldr	r4, [r3, #8]
 80166fa:	2300      	movs	r3, #0
 80166fc:	2200      	movs	r2, #0
 80166fe:	2109      	movs	r1, #9
 8016700:	6878      	ldr	r0, [r7, #4]
 8016702:	47a0      	blx	r4
}
 8016704:	bf00      	nop
 8016706:	370c      	adds	r7, #12
 8016708:	46bd      	mov	sp, r7
 801670a:	bd90      	pop	{r4, r7, pc}

0801670c <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 801670c:	b590      	push	{r4, r7, lr}
 801670e:	b083      	sub	sp, #12
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	689c      	ldr	r4, [r3, #8]
 8016718:	2300      	movs	r3, #0
 801671a:	2200      	movs	r2, #0
 801671c:	210a      	movs	r1, #10
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	47a0      	blx	r4
}
 8016722:	bf00      	nop
 8016724:	370c      	adds	r7, #12
 8016726:	46bd      	mov	sp, r7
 8016728:	bd90      	pop	{r4, r7, pc}

0801672a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 801672a:	b590      	push	{r4, r7, lr}
 801672c:	b083      	sub	sp, #12
 801672e:	af00      	add	r7, sp, #0
 8016730:	6078      	str	r0, [r7, #4]
 8016732:	460b      	mov	r3, r1
 8016734:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	689c      	ldr	r4, [r3, #8]
 801673a:	78fa      	ldrb	r2, [r7, #3]
 801673c:	2300      	movs	r3, #0
 801673e:	210b      	movs	r1, #11
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	47a0      	blx	r4
}
 8016744:	bf00      	nop
 8016746:	370c      	adds	r7, #12
 8016748:	46bd      	mov	sp, r7
 801674a:	bd90      	pop	{r4, r7, pc}

0801674c <u8x8_SetFlipMode>:

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
 801674c:	b590      	push	{r4, r7, lr}
 801674e:	b083      	sub	sp, #12
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
 8016754:	460b      	mov	r3, r1
 8016756:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	689c      	ldr	r4, [r3, #8]
 801675c:	78fa      	ldrb	r2, [r7, #3]
 801675e:	2300      	movs	r3, #0
 8016760:	210d      	movs	r1, #13
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	47a0      	blx	r4
}
 8016766:	bf00      	nop
 8016768:	370c      	adds	r7, #12
 801676a:	46bd      	mov	sp, r7
 801676c:	bd90      	pop	{r4, r7, pc}

0801676e <u8x8_SetContrast>:

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 801676e:	b590      	push	{r4, r7, lr}
 8016770:	b083      	sub	sp, #12
 8016772:	af00      	add	r7, sp, #0
 8016774:	6078      	str	r0, [r7, #4]
 8016776:	460b      	mov	r3, r1
 8016778:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	689c      	ldr	r4, [r3, #8]
 801677e:	78fa      	ldrb	r2, [r7, #3]
 8016780:	2300      	movs	r3, #0
 8016782:	210e      	movs	r1, #14
 8016784:	6878      	ldr	r0, [r7, #4]
 8016786:	47a0      	blx	r4
}
 8016788:	bf00      	nop
 801678a:	370c      	adds	r7, #12
 801678c:	46bd      	mov	sp, r7
 801678e:	bd90      	pop	{r4, r7, pc}

08016790 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8016790:	b590      	push	{r4, r7, lr}
 8016792:	b083      	sub	sp, #12
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	689c      	ldr	r4, [r3, #8]
 801679c:	2300      	movs	r3, #0
 801679e:	2200      	movs	r2, #0
 80167a0:	2110      	movs	r1, #16
 80167a2:	6878      	ldr	r0, [r7, #4]
 80167a4:	47a0      	blx	r4
}
 80167a6:	bf00      	nop
 80167a8:	370c      	adds	r7, #12
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd90      	pop	{r4, r7, pc}

080167ae <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80167ae:	b590      	push	{r4, r7, lr}
 80167b0:	b083      	sub	sp, #12
 80167b2:	af00      	add	r7, sp, #0
 80167b4:	6078      	str	r0, [r7, #4]
 80167b6:	460b      	mov	r3, r1
 80167b8:	70fb      	strb	r3, [r7, #3]
 80167ba:	4613      	mov	r3, r2
 80167bc:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	695c      	ldr	r4, [r3, #20]
 80167c2:	78ba      	ldrb	r2, [r7, #2]
 80167c4:	78f9      	ldrb	r1, [r7, #3]
 80167c6:	2300      	movs	r3, #0
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	47a0      	blx	r4
}
 80167cc:	bf00      	nop
 80167ce:	370c      	adds	r7, #12
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd90      	pop	{r4, r7, pc}

080167d4 <u8sl_Next>:

/*
  increase the cursor position
*/
void u8sl_Next(u8sl_t *u8sl)
{
 80167d4:	b480      	push	{r7}
 80167d6:	b083      	sub	sp, #12
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
  u8sl->current_pos++;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	78db      	ldrb	r3, [r3, #3]
 80167e0:	3301      	adds	r3, #1
 80167e2:	b2da      	uxtb	r2, r3
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	70da      	strb	r2, [r3, #3]
  if ( u8sl->current_pos >= u8sl->total )
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	78da      	ldrb	r2, [r3, #3]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	785b      	ldrb	r3, [r3, #1]
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d306      	bcc.n	8016802 <u8sl_Next+0x2e>
  {
    u8sl->current_pos = 0;
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2200      	movs	r2, #0
 80167f8:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2200      	movs	r2, #0
 80167fe:	709a      	strb	r2, [r3, #2]
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
    {
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
    }
  }
}
 8016800:	e014      	b.n	801682c <u8sl_Next+0x58>
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	789b      	ldrb	r3, [r3, #2]
 8016806:	461a      	mov	r2, r3
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	781b      	ldrb	r3, [r3, #0]
 801680c:	441a      	add	r2, r3
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	78db      	ldrb	r3, [r3, #3]
 8016812:	3301      	adds	r3, #1
 8016814:	429a      	cmp	r2, r3
 8016816:	dc09      	bgt.n	801682c <u8sl_Next+0x58>
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	78da      	ldrb	r2, [r3, #3]
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	781b      	ldrb	r3, [r3, #0]
 8016820:	1ad3      	subs	r3, r2, r3
 8016822:	b2db      	uxtb	r3, r3
 8016824:	3301      	adds	r3, #1
 8016826:	b2da      	uxtb	r2, r3
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	709a      	strb	r2, [r3, #2]
}
 801682c:	bf00      	nop
 801682e:	370c      	adds	r7, #12
 8016830:	46bd      	mov	sp, r7
 8016832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016836:	4770      	bx	lr

08016838 <u8sl_Prev>:

void u8sl_Prev(u8sl_t *u8sl)
{
 8016838:	b480      	push	{r7}
 801683a:	b083      	sub	sp, #12
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  if ( u8sl->current_pos == 0 )
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	78db      	ldrb	r3, [r3, #3]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d117      	bne.n	8016878 <u8sl_Prev+0x40>
  {
    u8sl->current_pos = u8sl->total - 1;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	785b      	ldrb	r3, [r3, #1]
 801684c:	3b01      	subs	r3, #1
 801684e:	b2da      	uxtb	r2, r3
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2200      	movs	r2, #0
 8016858:	709a      	strb	r2, [r3, #2]
    if ( u8sl->total > u8sl->visible )
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	785a      	ldrb	r2, [r3, #1]
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	781b      	ldrb	r3, [r3, #0]
 8016862:	429a      	cmp	r2, r3
 8016864:	d918      	bls.n	8016898 <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->total - u8sl->visible;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	785a      	ldrb	r2, [r3, #1]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	1ad3      	subs	r3, r2, r3
 8016870:	b2da      	uxtb	r2, r3
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	709a      	strb	r2, [r3, #2]
  {
    u8sl->current_pos--;
    if ( u8sl->first_pos > u8sl->current_pos )
      u8sl->first_pos = u8sl->current_pos;
  }
}
 8016876:	e00f      	b.n	8016898 <u8sl_Prev+0x60>
    u8sl->current_pos--;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	78db      	ldrb	r3, [r3, #3]
 801687c:	3b01      	subs	r3, #1
 801687e:	b2da      	uxtb	r2, r3
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	70da      	strb	r2, [r3, #3]
    if ( u8sl->first_pos > u8sl->current_pos )
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	789a      	ldrb	r2, [r3, #2]
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	78db      	ldrb	r3, [r3, #3]
 801688c:	429a      	cmp	r2, r3
 801688e:	d903      	bls.n	8016898 <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->current_pos;
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	78da      	ldrb	r2, [r3, #3]
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	709a      	strb	r2, [r3, #2]
}
 8016898:	bf00      	nop
 801689a:	370c      	adds	r7, #12
 801689c:	46bd      	mov	sp, r7
 801689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a2:	4770      	bx	lr

080168a4 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80168a4:	b480      	push	{r7}
 80168a6:	b085      	sub	sp, #20
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	60f8      	str	r0, [r7, #12]
 80168ac:	607b      	str	r3, [r7, #4]
 80168ae:	460b      	mov	r3, r1
 80168b0:	72fb      	strb	r3, [r7, #11]
 80168b2:	4613      	mov	r3, r2
 80168b4:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80168b6:	2300      	movs	r3, #0
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3714      	adds	r7, #20
 80168bc:	46bd      	mov	sp, r7
 80168be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c2:	4770      	bx	lr

080168c4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80168c4:	b480      	push	{r7}
 80168c6:	b083      	sub	sp, #12
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2200      	movs	r2, #0
 80168d0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	4a11      	ldr	r2, [pc, #68]	; (801691c <u8x8_SetupDefaults+0x58>)
 80168d6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	4a10      	ldr	r2, [pc, #64]	; (801691c <u8x8_SetupDefaults+0x58>)
 80168dc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	4a0e      	ldr	r2, [pc, #56]	; (801691c <u8x8_SetupDefaults+0x58>)
 80168e2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	4a0d      	ldr	r2, [pc, #52]	; (801691c <u8x8_SetupDefaults+0x58>)
 80168e8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2200      	movs	r2, #0
 80168ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2200      	movs	r2, #0
 80168f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2200      	movs	r2, #0
 80168fe:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	22ff      	movs	r2, #255	; 0xff
 8016904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	22ff      	movs	r2, #255	; 0xff
 801690c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8016910:	bf00      	nop
 8016912:	370c      	adds	r7, #12
 8016914:	46bd      	mov	sp, r7
 8016916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691a:	4770      	bx	lr
 801691c:	080168a5 	.word	0x080168a5

08016920 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b084      	sub	sp, #16
 8016924:	af00      	add	r7, sp, #0
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	60b9      	str	r1, [r7, #8]
 801692a:	607a      	str	r2, [r7, #4]
 801692c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 801692e:	68f8      	ldr	r0, [r7, #12]
 8016930:	f7ff ffc8 	bl	80168c4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	68ba      	ldr	r2, [r7, #8]
 8016938:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	687a      	ldr	r2, [r7, #4]
 801693e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	683a      	ldr	r2, [r7, #0]
 8016944:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	69ba      	ldr	r2, [r7, #24]
 801694a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 801694c:	68f8      	ldr	r0, [r7, #12]
 801694e:	f7ff fece 	bl	80166ee <u8x8_SetupMemory>
}
 8016952:	bf00      	nop
 8016954:	3710      	adds	r7, #16
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}

0801695a <u8x8_GetStringLineCnt>:
*/

#include "u8x8.h"

uint8_t u8x8_GetStringLineCnt(const char *str)
{
 801695a:	b480      	push	{r7}
 801695c:	b085      	sub	sp, #20
 801695e:	af00      	add	r7, sp, #0
 8016960:	6078      	str	r0, [r7, #4]
  char e;
  uint8_t line_cnt = 1;
 8016962:	2301      	movs	r3, #1
 8016964:	73fb      	strb	r3, [r7, #15]
  if ( str == NULL )
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d101      	bne.n	8016970 <u8x8_GetStringLineCnt+0x16>
    return 0;
 801696c:	2300      	movs	r3, #0
 801696e:	e011      	b.n	8016994 <u8x8_GetStringLineCnt+0x3a>
  for(;;)
  {
    e = *str;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	781b      	ldrb	r3, [r3, #0]
 8016974:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 8016976:	7bbb      	ldrb	r3, [r7, #14]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d009      	beq.n	8016990 <u8x8_GetStringLineCnt+0x36>
      break;
    str++;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	3301      	adds	r3, #1
 8016980:	607b      	str	r3, [r7, #4]
    if ( e == '\n' )
 8016982:	7bbb      	ldrb	r3, [r7, #14]
 8016984:	2b0a      	cmp	r3, #10
 8016986:	d1f3      	bne.n	8016970 <u8x8_GetStringLineCnt+0x16>
      line_cnt++;
 8016988:	7bfb      	ldrb	r3, [r7, #15]
 801698a:	3301      	adds	r3, #1
 801698c:	73fb      	strb	r3, [r7, #15]
    e = *str;
 801698e:	e7ef      	b.n	8016970 <u8x8_GetStringLineCnt+0x16>
      break;
 8016990:	bf00      	nop
  }
  return line_cnt;
 8016992:	7bfb      	ldrb	r3, [r7, #15]
}
 8016994:	4618      	mov	r0, r3
 8016996:	3714      	adds	r7, #20
 8016998:	46bd      	mov	sp, r7
 801699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699e:	4770      	bx	lr

080169a0 <u8x8_GetStringLineStart>:
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
 80169a0:	b480      	push	{r7}
 80169a2:	b085      	sub	sp, #20
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	4603      	mov	r3, r0
 80169a8:	6039      	str	r1, [r7, #0]
 80169aa:	71fb      	strb	r3, [r7, #7]
  char e;
  uint8_t line_cnt = 1;
 80169ac:	2301      	movs	r3, #1
 80169ae:	73fb      	strb	r3, [r7, #15]
  
  if ( line_idx == 0 )
 80169b0:	79fb      	ldrb	r3, [r7, #7]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d101      	bne.n	80169ba <u8x8_GetStringLineStart+0x1a>
    return str;
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	e017      	b.n	80169ea <u8x8_GetStringLineStart+0x4a>

  for(;;)
  {
    e = *str;
 80169ba:	683b      	ldr	r3, [r7, #0]
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 80169c0:	7bbb      	ldrb	r3, [r7, #14]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d00f      	beq.n	80169e6 <u8x8_GetStringLineStart+0x46>
      break;
    str++;
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	3301      	adds	r3, #1
 80169ca:	603b      	str	r3, [r7, #0]
    if ( e == '\n' )
 80169cc:	7bbb      	ldrb	r3, [r7, #14]
 80169ce:	2b0a      	cmp	r3, #10
 80169d0:	d1f3      	bne.n	80169ba <u8x8_GetStringLineStart+0x1a>
    {
      if ( line_cnt == line_idx )
 80169d2:	7bfa      	ldrb	r2, [r7, #15]
 80169d4:	79fb      	ldrb	r3, [r7, #7]
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d101      	bne.n	80169de <u8x8_GetStringLineStart+0x3e>
	return str;
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	e005      	b.n	80169ea <u8x8_GetStringLineStart+0x4a>
      line_cnt++;
 80169de:	7bfb      	ldrb	r3, [r7, #15]
 80169e0:	3301      	adds	r3, #1
 80169e2:	73fb      	strb	r3, [r7, #15]
    e = *str;
 80169e4:	e7e9      	b.n	80169ba <u8x8_GetStringLineStart+0x1a>
      break;
 80169e6:	bf00      	nop
    }
  }
  return NULL;	/* line not found */
 80169e8:	2300      	movs	r3, #0
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3714      	adds	r7, #20
 80169ee:	46bd      	mov	sp, r7
 80169f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f4:	4770      	bx	lr
	...

080169f8 <u8x8_u16toap>:


#include "u8x8.h"

const char *u8x8_u16toap(char * dest, uint16_t v)
{
 80169f8:	b480      	push	{r7}
 80169fa:	b085      	sub	sp, #20
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
 8016a00:	460b      	mov	r3, r1
 8016a02:	807b      	strh	r3, [r7, #2]
  uint8_t pos;
  uint8_t d;
  uint16_t c;
  c = 10000;
 8016a04:	f242 7310 	movw	r3, #10000	; 0x2710
 8016a08:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	73fb      	strb	r3, [r7, #15]
 8016a0e:	e01b      	b.n	8016a48 <u8x8_u16toap+0x50>
  {
      d = '0';
 8016a10:	2330      	movs	r3, #48	; 0x30
 8016a12:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 8016a14:	e006      	b.n	8016a24 <u8x8_u16toap+0x2c>
      {
	v -= c;
 8016a16:	887a      	ldrh	r2, [r7, #2]
 8016a18:	89bb      	ldrh	r3, [r7, #12]
 8016a1a:	1ad3      	subs	r3, r2, r3
 8016a1c:	807b      	strh	r3, [r7, #2]
	d++;
 8016a1e:	7bbb      	ldrb	r3, [r7, #14]
 8016a20:	3301      	adds	r3, #1
 8016a22:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 8016a24:	887a      	ldrh	r2, [r7, #2]
 8016a26:	89bb      	ldrh	r3, [r7, #12]
 8016a28:	429a      	cmp	r2, r3
 8016a2a:	d2f4      	bcs.n	8016a16 <u8x8_u16toap+0x1e>
      }
      dest[pos] = d;
 8016a2c:	7bfb      	ldrb	r3, [r7, #15]
 8016a2e:	687a      	ldr	r2, [r7, #4]
 8016a30:	4413      	add	r3, r2
 8016a32:	7bba      	ldrb	r2, [r7, #14]
 8016a34:	701a      	strb	r2, [r3, #0]
      c /= 10;
 8016a36:	89bb      	ldrh	r3, [r7, #12]
 8016a38:	4a0a      	ldr	r2, [pc, #40]	; (8016a64 <u8x8_u16toap+0x6c>)
 8016a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8016a3e:	08db      	lsrs	r3, r3, #3
 8016a40:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 8016a42:	7bfb      	ldrb	r3, [r7, #15]
 8016a44:	3301      	adds	r3, #1
 8016a46:	73fb      	strb	r3, [r7, #15]
 8016a48:	7bfb      	ldrb	r3, [r7, #15]
 8016a4a:	2b04      	cmp	r3, #4
 8016a4c:	d9e0      	bls.n	8016a10 <u8x8_u16toap+0x18>
  }  
  dest[5] = '\0';
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	3305      	adds	r3, #5
 8016a52:	2200      	movs	r2, #0
 8016a54:	701a      	strb	r2, [r3, #0]
  return dest;
 8016a56:	687b      	ldr	r3, [r7, #4]
}
 8016a58:	4618      	mov	r0, r3
 8016a5a:	3714      	adds	r7, #20
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a62:	4770      	bx	lr
 8016a64:	cccccccd 	.word	0xcccccccd

08016a68 <u8x8_u16toa>:

/* v = value, d = number of digits */
const char *u8x8_u16toa(uint16_t v, uint8_t d)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	4603      	mov	r3, r0
 8016a70:	460a      	mov	r2, r1
 8016a72:	80fb      	strh	r3, [r7, #6]
 8016a74:	4613      	mov	r3, r2
 8016a76:	717b      	strb	r3, [r7, #5]
  static char buf[6];
  d = 5-d;
 8016a78:	797b      	ldrb	r3, [r7, #5]
 8016a7a:	f1c3 0305 	rsb	r3, r3, #5
 8016a7e:	717b      	strb	r3, [r7, #5]
  return u8x8_u16toap(buf, v) + d;
 8016a80:	88fb      	ldrh	r3, [r7, #6]
 8016a82:	4619      	mov	r1, r3
 8016a84:	4804      	ldr	r0, [pc, #16]	; (8016a98 <u8x8_u16toa+0x30>)
 8016a86:	f7ff ffb7 	bl	80169f8 <u8x8_u16toap>
 8016a8a:	4602      	mov	r2, r0
 8016a8c:	797b      	ldrb	r3, [r7, #5]
 8016a8e:	4413      	add	r3, r2
}
 8016a90:	4618      	mov	r0, r3
 8016a92:	3708      	adds	r7, #8
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}
 8016a98:	20000bc0 	.word	0x20000bc0

08016a9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8016aa0:	490c      	ldr	r1, [pc, #48]	; (8016ad4 <MX_FATFS_Init+0x38>)
 8016aa2:	480d      	ldr	r0, [pc, #52]	; (8016ad8 <MX_FATFS_Init+0x3c>)
 8016aa4:	f007 f80a 	bl	801dabc <FATFS_LinkDriver>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	461a      	mov	r2, r3
 8016aac:	4b0b      	ldr	r3, [pc, #44]	; (8016adc <MX_FATFS_Init+0x40>)
 8016aae:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8016ab0:	490b      	ldr	r1, [pc, #44]	; (8016ae0 <MX_FATFS_Init+0x44>)
 8016ab2:	480c      	ldr	r0, [pc, #48]	; (8016ae4 <MX_FATFS_Init+0x48>)
 8016ab4:	f007 f802 	bl	801dabc <FATFS_LinkDriver>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	461a      	mov	r2, r3
 8016abc:	4b0a      	ldr	r3, [pc, #40]	; (8016ae8 <MX_FATFS_Init+0x4c>)
 8016abe:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8016ac0:	490a      	ldr	r1, [pc, #40]	; (8016aec <MX_FATFS_Init+0x50>)
 8016ac2:	480b      	ldr	r0, [pc, #44]	; (8016af0 <MX_FATFS_Init+0x54>)
 8016ac4:	f006 fffa 	bl	801dabc <FATFS_LinkDriver>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	461a      	mov	r2, r3
 8016acc:	4b09      	ldr	r3, [pc, #36]	; (8016af4 <MX_FATFS_Init+0x58>)
 8016ace:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8016ad0:	bf00      	nop
 8016ad2:	bd80      	pop	{r7, pc}
 8016ad4:	200179f0 	.word	0x200179f0
 8016ad8:	08023e74 	.word	0x08023e74
 8016adc:	20019a70 	.word	0x20019a70
 8016ae0:	20018a2c 	.word	0x20018a2c
 8016ae4:	08023e88 	.word	0x08023e88
 8016ae8:	20019a71 	.word	0x20019a71
 8016aec:	20019a6c 	.word	0x20019a6c
 8016af0:	20000068 	.word	0x20000068
 8016af4:	20019a68 	.word	0x20019a68

08016af8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8016af8:	b480      	push	{r7}
 8016afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8016afc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	46bd      	mov	sp, r7
 8016b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b06:	4770      	bx	lr

08016b08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b082      	sub	sp, #8
 8016b0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8016b12:	f000 f8a5 	bl	8016c60 <BSP_SD_IsDetected>
 8016b16:	4603      	mov	r3, r0
 8016b18:	2b01      	cmp	r3, #1
 8016b1a:	d001      	beq.n	8016b20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8016b1c:	2302      	movs	r3, #2
 8016b1e:	e012      	b.n	8016b46 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8016b20:	480b      	ldr	r0, [pc, #44]	; (8016b50 <BSP_SD_Init+0x48>)
 8016b22:	f7f7 f921 	bl	800dd68 <HAL_SD_Init>
 8016b26:	4603      	mov	r3, r0
 8016b28:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8016b2a:	79fb      	ldrb	r3, [r7, #7]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d109      	bne.n	8016b44 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8016b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016b34:	4806      	ldr	r0, [pc, #24]	; (8016b50 <BSP_SD_Init+0x48>)
 8016b36:	f7f8 f897 	bl	800ec68 <HAL_SD_ConfigWideBusOperation>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d001      	beq.n	8016b44 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8016b40:	2301      	movs	r3, #1
 8016b42:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8016b44:	79fb      	ldrb	r3, [r7, #7]
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	3708      	adds	r7, #8
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}
 8016b4e:	bf00      	nop
 8016b50:	20002fbc 	.word	0x20002fbc

08016b54 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b088      	sub	sp, #32
 8016b58:	af02      	add	r7, sp, #8
 8016b5a:	60f8      	str	r0, [r7, #12]
 8016b5c:	60b9      	str	r1, [r7, #8]
 8016b5e:	607a      	str	r2, [r7, #4]
 8016b60:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8016b62:	2300      	movs	r3, #0
 8016b64:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8016b66:	683b      	ldr	r3, [r7, #0]
 8016b68:	9300      	str	r3, [sp, #0]
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	68ba      	ldr	r2, [r7, #8]
 8016b6e:	68f9      	ldr	r1, [r7, #12]
 8016b70:	4806      	ldr	r0, [pc, #24]	; (8016b8c <BSP_SD_ReadBlocks+0x38>)
 8016b72:	f7f7 f991 	bl	800de98 <HAL_SD_ReadBlocks>
 8016b76:	4603      	mov	r3, r0
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d001      	beq.n	8016b80 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8016b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3718      	adds	r7, #24
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}
 8016b8a:	bf00      	nop
 8016b8c:	20002fbc 	.word	0x20002fbc

08016b90 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b088      	sub	sp, #32
 8016b94:	af02      	add	r7, sp, #8
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	60b9      	str	r1, [r7, #8]
 8016b9a:	607a      	str	r2, [r7, #4]
 8016b9c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8016ba2:	683b      	ldr	r3, [r7, #0]
 8016ba4:	9300      	str	r3, [sp, #0]
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	68ba      	ldr	r2, [r7, #8]
 8016baa:	68f9      	ldr	r1, [r7, #12]
 8016bac:	4806      	ldr	r0, [pc, #24]	; (8016bc8 <BSP_SD_WriteBlocks+0x38>)
 8016bae:	f7f7 fb6b 	bl	800e288 <HAL_SD_WriteBlocks>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d001      	beq.n	8016bbc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8016bb8:	2301      	movs	r3, #1
 8016bba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8016bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3718      	adds	r7, #24
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	bf00      	nop
 8016bc8:	20002fbc 	.word	0x20002fbc

08016bcc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8016bd0:	4805      	ldr	r0, [pc, #20]	; (8016be8 <BSP_SD_GetCardState+0x1c>)
 8016bd2:	f7f8 f8c5 	bl	800ed60 <HAL_SD_GetCardState>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	2b04      	cmp	r3, #4
 8016bda:	bf14      	ite	ne
 8016bdc:	2301      	movne	r3, #1
 8016bde:	2300      	moveq	r3, #0
 8016be0:	b2db      	uxtb	r3, r3
}
 8016be2:	4618      	mov	r0, r3
 8016be4:	bd80      	pop	{r7, pc}
 8016be6:	bf00      	nop
 8016be8:	20002fbc 	.word	0x20002fbc

08016bec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8016bf4:	6879      	ldr	r1, [r7, #4]
 8016bf6:	4803      	ldr	r0, [pc, #12]	; (8016c04 <BSP_SD_GetCardInfo+0x18>)
 8016bf8:	f7f8 f80a 	bl	800ec10 <HAL_SD_GetCardInfo>
}
 8016bfc:	bf00      	nop
 8016bfe:	3708      	adds	r7, #8
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd80      	pop	{r7, pc}
 8016c04:	20002fbc 	.word	0x20002fbc

08016c08 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8016c10:	f000 f818 	bl	8016c44 <BSP_SD_AbortCallback>
}
 8016c14:	bf00      	nop
 8016c16:	3708      	adds	r7, #8
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8016c24:	f7ea fe5c 	bl	80018e0 <BSP_SD_WriteCpltCallback>
}
 8016c28:	bf00      	nop
 8016c2a:	3708      	adds	r7, #8
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}

08016c30 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b082      	sub	sp, #8
 8016c34:	af00      	add	r7, sp, #0
 8016c36:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8016c38:	f000 f80b 	bl	8016c52 <BSP_SD_ReadCpltCallback>
}
 8016c3c:	bf00      	nop
 8016c3e:	3708      	adds	r7, #8
 8016c40:	46bd      	mov	sp, r7
 8016c42:	bd80      	pop	{r7, pc}

08016c44 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8016c44:	b480      	push	{r7}
 8016c46:	af00      	add	r7, sp, #0

}
 8016c48:	bf00      	nop
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c50:	4770      	bx	lr

08016c52 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8016c52:	b480      	push	{r7}
 8016c54:	af00      	add	r7, sp, #0

}
 8016c56:	bf00      	nop
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5e:	4770      	bx	lr

08016c60 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8016c66:	2301      	movs	r3, #1
 8016c68:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8016c6a:	f000 f80b 	bl	8016c84 <BSP_PlatformIsDetected>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d101      	bne.n	8016c78 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8016c74:	2300      	movs	r3, #0
 8016c76:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8016c78:	79fb      	ldrb	r3, [r7, #7]
 8016c7a:	b2db      	uxtb	r3, r3
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8016c8a:	2301      	movs	r3, #1
 8016c8c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8016c8e:	2101      	movs	r1, #1
 8016c90:	4806      	ldr	r0, [pc, #24]	; (8016cac <BSP_PlatformIsDetected+0x28>)
 8016c92:	f7f2 fea1 	bl	80099d8 <HAL_GPIO_ReadPin>
 8016c96:	4603      	mov	r3, r0
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d001      	beq.n	8016ca0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8016ca0:	79fb      	ldrb	r3, [r7, #7]
}  
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	3708      	adds	r7, #8
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	bd80      	pop	{r7, pc}
 8016caa:	bf00      	nop
 8016cac:	40020c00 	.word	0x40020c00

08016cb0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b082      	sub	sp, #8
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8016cba:	4b0b      	ldr	r3, [pc, #44]	; (8016ce8 <SD_CheckStatus+0x38>)
 8016cbc:	2201      	movs	r2, #1
 8016cbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8016cc0:	f7ff ff84 	bl	8016bcc <BSP_SD_GetCardState>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d107      	bne.n	8016cda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8016cca:	4b07      	ldr	r3, [pc, #28]	; (8016ce8 <SD_CheckStatus+0x38>)
 8016ccc:	781b      	ldrb	r3, [r3, #0]
 8016cce:	b2db      	uxtb	r3, r3
 8016cd0:	f023 0301 	bic.w	r3, r3, #1
 8016cd4:	b2da      	uxtb	r2, r3
 8016cd6:	4b04      	ldr	r3, [pc, #16]	; (8016ce8 <SD_CheckStatus+0x38>)
 8016cd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8016cda:	4b03      	ldr	r3, [pc, #12]	; (8016ce8 <SD_CheckStatus+0x38>)
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	b2db      	uxtb	r3, r3
}
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	3708      	adds	r7, #8
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	20000065 	.word	0x20000065

08016cec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b082      	sub	sp, #8
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8016cf6:	4b0b      	ldr	r3, [pc, #44]	; (8016d24 <SD_initialize+0x38>)
 8016cf8:	2201      	movs	r2, #1
 8016cfa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8016cfc:	f7ff ff04 	bl	8016b08 <BSP_SD_Init>
 8016d00:	4603      	mov	r3, r0
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d107      	bne.n	8016d16 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8016d06:	79fb      	ldrb	r3, [r7, #7]
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f7ff ffd1 	bl	8016cb0 <SD_CheckStatus>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	461a      	mov	r2, r3
 8016d12:	4b04      	ldr	r3, [pc, #16]	; (8016d24 <SD_initialize+0x38>)
 8016d14:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8016d16:	4b03      	ldr	r3, [pc, #12]	; (8016d24 <SD_initialize+0x38>)
 8016d18:	781b      	ldrb	r3, [r3, #0]
 8016d1a:	b2db      	uxtb	r3, r3
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3708      	adds	r7, #8
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}
 8016d24:	20000065 	.word	0x20000065

08016d28 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b082      	sub	sp, #8
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	4603      	mov	r3, r0
 8016d30:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8016d32:	79fb      	ldrb	r3, [r7, #7]
 8016d34:	4618      	mov	r0, r3
 8016d36:	f7ff ffbb 	bl	8016cb0 <SD_CheckStatus>
 8016d3a:	4603      	mov	r3, r0
}
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	3708      	adds	r7, #8
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}

08016d44 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b086      	sub	sp, #24
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	60b9      	str	r1, [r7, #8]
 8016d4c:	607a      	str	r2, [r7, #4]
 8016d4e:	603b      	str	r3, [r7, #0]
 8016d50:	4603      	mov	r3, r0
 8016d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016d54:	2301      	movs	r3, #1
 8016d56:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8016d58:	f04f 33ff 	mov.w	r3, #4294967295
 8016d5c:	683a      	ldr	r2, [r7, #0]
 8016d5e:	6879      	ldr	r1, [r7, #4]
 8016d60:	68b8      	ldr	r0, [r7, #8]
 8016d62:	f7ff fef7 	bl	8016b54 <BSP_SD_ReadBlocks>
 8016d66:	4603      	mov	r3, r0
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d107      	bne.n	8016d7c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8016d6c:	bf00      	nop
 8016d6e:	f7ff ff2d 	bl	8016bcc <BSP_SD_GetCardState>
 8016d72:	4603      	mov	r3, r0
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d1fa      	bne.n	8016d6e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8016d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3718      	adds	r7, #24
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}

08016d86 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016d86:	b580      	push	{r7, lr}
 8016d88:	b086      	sub	sp, #24
 8016d8a:	af00      	add	r7, sp, #0
 8016d8c:	60b9      	str	r1, [r7, #8]
 8016d8e:	607a      	str	r2, [r7, #4]
 8016d90:	603b      	str	r3, [r7, #0]
 8016d92:	4603      	mov	r3, r0
 8016d94:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016d96:	2301      	movs	r3, #1
 8016d98:	75fb      	strb	r3, [r7, #23]

  //if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count) == MSD_OK)
  if(BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT) == MSD_OK)
 8016d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d9e:	683a      	ldr	r2, [r7, #0]
 8016da0:	6879      	ldr	r1, [r7, #4]
 8016da2:	68b8      	ldr	r0, [r7, #8]
 8016da4:	f7ff fef4 	bl	8016b90 <BSP_SD_WriteBlocks>
 8016da8:	4603      	mov	r3, r0
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d107      	bne.n	8016dbe <SD_write+0x38>
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8016dae:	bf00      	nop
 8016db0:	f7ff ff0c 	bl	8016bcc <BSP_SD_GetCardState>
 8016db4:	4603      	mov	r3, r0
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d1fa      	bne.n	8016db0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8016dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3718      	adds	r7, #24
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}

08016dc8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b08c      	sub	sp, #48	; 0x30
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	4603      	mov	r3, r0
 8016dd0:	603a      	str	r2, [r7, #0]
 8016dd2:	71fb      	strb	r3, [r7, #7]
 8016dd4:	460b      	mov	r3, r1
 8016dd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8016dd8:	2301      	movs	r3, #1
 8016dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8016dde:	4b25      	ldr	r3, [pc, #148]	; (8016e74 <SD_ioctl+0xac>)
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	b2db      	uxtb	r3, r3
 8016de4:	f003 0301 	and.w	r3, r3, #1
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d001      	beq.n	8016df0 <SD_ioctl+0x28>
 8016dec:	2303      	movs	r3, #3
 8016dee:	e03c      	b.n	8016e6a <SD_ioctl+0xa2>

  switch (cmd)
 8016df0:	79bb      	ldrb	r3, [r7, #6]
 8016df2:	2b03      	cmp	r3, #3
 8016df4:	d834      	bhi.n	8016e60 <SD_ioctl+0x98>
 8016df6:	a201      	add	r2, pc, #4	; (adr r2, 8016dfc <SD_ioctl+0x34>)
 8016df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dfc:	08016e0d 	.word	0x08016e0d
 8016e00:	08016e15 	.word	0x08016e15
 8016e04:	08016e2d 	.word	0x08016e2d
 8016e08:	08016e47 	.word	0x08016e47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016e12:	e028      	b.n	8016e66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8016e14:	f107 030c 	add.w	r3, r7, #12
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f7ff fee7 	bl	8016bec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8016e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016e24:	2300      	movs	r3, #0
 8016e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016e2a:	e01c      	b.n	8016e66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016e2c:	f107 030c 	add.w	r3, r7, #12
 8016e30:	4618      	mov	r0, r3
 8016e32:	f7ff fedb 	bl	8016bec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8016e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e38:	b29a      	uxth	r2, r3
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8016e3e:	2300      	movs	r3, #0
 8016e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016e44:	e00f      	b.n	8016e66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016e46:	f107 030c 	add.w	r3, r7, #12
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7ff fece 	bl	8016bec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8016e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e52:	0a5a      	lsrs	r2, r3, #9
 8016e54:	683b      	ldr	r3, [r7, #0]
 8016e56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016e58:	2300      	movs	r3, #0
 8016e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016e5e:	e002      	b.n	8016e66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8016e60:	2304      	movs	r3, #4
 8016e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8016e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3730      	adds	r7, #48	; 0x30
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop
 8016e74:	20000065 	.word	0x20000065

08016e78 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8016e78:	b480      	push	{r7}
 8016e7a:	b083      	sub	sp, #12
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	4603      	mov	r3, r0
 8016e80:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8016e82:	2300      	movs	r3, #0
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	370c      	adds	r7, #12
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8e:	4770      	bx	lr

08016e90 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b084      	sub	sp, #16
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	4603      	mov	r3, r0
 8016e98:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8016e9e:	79fb      	ldrb	r3, [r7, #7]
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	4808      	ldr	r0, [pc, #32]	; (8016ec4 <USBH_status+0x34>)
 8016ea4:	f000 fe70 	bl	8017b88 <USBH_MSC_UnitIsReady>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d002      	beq.n	8016eb4 <USBH_status+0x24>
  {
    res = RES_OK;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	73fb      	strb	r3, [r7, #15]
 8016eb2:	e001      	b.n	8016eb8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8016eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eba:	4618      	mov	r0, r3
 8016ebc:	3710      	adds	r7, #16
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}
 8016ec2:	bf00      	nop
 8016ec4:	2000865c 	.word	0x2000865c

08016ec8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b094      	sub	sp, #80	; 0x50
 8016ecc:	af02      	add	r7, sp, #8
 8016ece:	60b9      	str	r1, [r7, #8]
 8016ed0:	607a      	str	r2, [r7, #4]
 8016ed2:	603b      	str	r3, [r7, #0]
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016ed8:	2301      	movs	r3, #1
 8016eda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8016ede:	7bf9      	ldrb	r1, [r7, #15]
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	9300      	str	r3, [sp, #0]
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	687a      	ldr	r2, [r7, #4]
 8016ee8:	4813      	ldr	r0, [pc, #76]	; (8016f38 <USBH_read+0x70>)
 8016eea:	f000 fe97 	bl	8017c1c <USBH_MSC_Read>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d103      	bne.n	8016efc <USBH_read+0x34>
  {
    res = RES_OK;
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016efa:	e017      	b.n	8016f2c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8016efc:	f107 0210 	add.w	r2, r7, #16
 8016f00:	7bfb      	ldrb	r3, [r7, #15]
 8016f02:	4619      	mov	r1, r3
 8016f04:	480c      	ldr	r0, [pc, #48]	; (8016f38 <USBH_read+0x70>)
 8016f06:	f000 fe65 	bl	8017bd4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8016f0a:	7f7b      	ldrb	r3, [r7, #29]
 8016f0c:	2b3a      	cmp	r3, #58	; 0x3a
 8016f0e:	d005      	beq.n	8016f1c <USBH_read+0x54>
 8016f10:	2b3a      	cmp	r3, #58	; 0x3a
 8016f12:	dc07      	bgt.n	8016f24 <USBH_read+0x5c>
 8016f14:	2b04      	cmp	r3, #4
 8016f16:	d001      	beq.n	8016f1c <USBH_read+0x54>
 8016f18:	2b28      	cmp	r3, #40	; 0x28
 8016f1a:	d103      	bne.n	8016f24 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8016f1c:	2303      	movs	r3, #3
 8016f1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8016f22:	e003      	b.n	8016f2c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8016f24:	2301      	movs	r3, #1
 8016f26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8016f2a:	bf00      	nop
    }
  }

  return res;
 8016f2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3748      	adds	r7, #72	; 0x48
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}
 8016f38:	2000865c 	.word	0x2000865c

08016f3c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b094      	sub	sp, #80	; 0x50
 8016f40:	af02      	add	r7, sp, #8
 8016f42:	60b9      	str	r1, [r7, #8]
 8016f44:	607a      	str	r2, [r7, #4]
 8016f46:	603b      	str	r3, [r7, #0]
 8016f48:	4603      	mov	r3, r0
 8016f4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8016f4c:	2301      	movs	r3, #1
 8016f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8016f52:	7bf9      	ldrb	r1, [r7, #15]
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	9300      	str	r3, [sp, #0]
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	687a      	ldr	r2, [r7, #4]
 8016f5c:	4817      	ldr	r0, [pc, #92]	; (8016fbc <USBH_write+0x80>)
 8016f5e:	f000 fec6 	bl	8017cee <USBH_MSC_Write>
 8016f62:	4603      	mov	r3, r0
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d103      	bne.n	8016f70 <USBH_write+0x34>
  {
    res = RES_OK;
 8016f68:	2300      	movs	r3, #0
 8016f6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016f6e:	e01f      	b.n	8016fb0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8016f70:	f107 0210 	add.w	r2, r7, #16
 8016f74:	7bfb      	ldrb	r3, [r7, #15]
 8016f76:	4619      	mov	r1, r3
 8016f78:	4810      	ldr	r0, [pc, #64]	; (8016fbc <USBH_write+0x80>)
 8016f7a:	f000 fe2b 	bl	8017bd4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8016f7e:	7f7b      	ldrb	r3, [r7, #29]
 8016f80:	2b3a      	cmp	r3, #58	; 0x3a
 8016f82:	d00d      	beq.n	8016fa0 <USBH_write+0x64>
 8016f84:	2b3a      	cmp	r3, #58	; 0x3a
 8016f86:	dc0f      	bgt.n	8016fa8 <USBH_write+0x6c>
 8016f88:	2b28      	cmp	r3, #40	; 0x28
 8016f8a:	d009      	beq.n	8016fa0 <USBH_write+0x64>
 8016f8c:	2b28      	cmp	r3, #40	; 0x28
 8016f8e:	dc0b      	bgt.n	8016fa8 <USBH_write+0x6c>
 8016f90:	2b04      	cmp	r3, #4
 8016f92:	d005      	beq.n	8016fa0 <USBH_write+0x64>
 8016f94:	2b27      	cmp	r3, #39	; 0x27
 8016f96:	d107      	bne.n	8016fa8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8016f98:	2302      	movs	r3, #2
 8016f9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8016f9e:	e007      	b.n	8016fb0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8016fa0:	2303      	movs	r3, #3
 8016fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8016fa6:	e003      	b.n	8016fb0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8016fa8:	2301      	movs	r3, #1
 8016faa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8016fae:	bf00      	nop
    }
  }

  return res;
 8016fb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	3748      	adds	r7, #72	; 0x48
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	bd80      	pop	{r7, pc}
 8016fbc:	2000865c 	.word	0x2000865c

08016fc0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b090      	sub	sp, #64	; 0x40
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	603a      	str	r2, [r7, #0]
 8016fca:	71fb      	strb	r3, [r7, #7]
 8016fcc:	460b      	mov	r3, r1
 8016fce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8016fd6:	79bb      	ldrb	r3, [r7, #6]
 8016fd8:	2b03      	cmp	r3, #3
 8016fda:	d852      	bhi.n	8017082 <USBH_ioctl+0xc2>
 8016fdc:	a201      	add	r2, pc, #4	; (adr r2, 8016fe4 <USBH_ioctl+0x24>)
 8016fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fe2:	bf00      	nop
 8016fe4:	08016ff5 	.word	0x08016ff5
 8016fe8:	08016ffd 	.word	0x08016ffd
 8016fec:	08017027 	.word	0x08017027
 8016ff0:	08017053 	.word	0x08017053
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8016ffa:	e045      	b.n	8017088 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8016ffc:	f107 0208 	add.w	r2, r7, #8
 8017000:	79fb      	ldrb	r3, [r7, #7]
 8017002:	4619      	mov	r1, r3
 8017004:	4823      	ldr	r0, [pc, #140]	; (8017094 <USBH_ioctl+0xd4>)
 8017006:	f000 fde5 	bl	8017bd4 <USBH_MSC_GetLUNInfo>
 801700a:	4603      	mov	r3, r0
 801700c:	2b00      	cmp	r3, #0
 801700e:	d106      	bne.n	801701e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8017010:	68fa      	ldr	r2, [r7, #12]
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8017016:	2300      	movs	r3, #0
 8017018:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 801701c:	e034      	b.n	8017088 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 801701e:	2301      	movs	r3, #1
 8017020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8017024:	e030      	b.n	8017088 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8017026:	f107 0208 	add.w	r2, r7, #8
 801702a:	79fb      	ldrb	r3, [r7, #7]
 801702c:	4619      	mov	r1, r3
 801702e:	4819      	ldr	r0, [pc, #100]	; (8017094 <USBH_ioctl+0xd4>)
 8017030:	f000 fdd0 	bl	8017bd4 <USBH_MSC_GetLUNInfo>
 8017034:	4603      	mov	r3, r0
 8017036:	2b00      	cmp	r3, #0
 8017038:	d107      	bne.n	801704a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 801703a:	8a3b      	ldrh	r3, [r7, #16]
 801703c:	461a      	mov	r2, r3
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8017042:	2300      	movs	r3, #0
 8017044:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8017048:	e01e      	b.n	8017088 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 801704a:	2301      	movs	r3, #1
 801704c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8017050:	e01a      	b.n	8017088 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8017052:	f107 0208 	add.w	r2, r7, #8
 8017056:	79fb      	ldrb	r3, [r7, #7]
 8017058:	4619      	mov	r1, r3
 801705a:	480e      	ldr	r0, [pc, #56]	; (8017094 <USBH_ioctl+0xd4>)
 801705c:	f000 fdba 	bl	8017bd4 <USBH_MSC_GetLUNInfo>
 8017060:	4603      	mov	r3, r0
 8017062:	2b00      	cmp	r3, #0
 8017064:	d109      	bne.n	801707a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8017066:	8a3b      	ldrh	r3, [r7, #16]
 8017068:	0a5b      	lsrs	r3, r3, #9
 801706a:	b29b      	uxth	r3, r3
 801706c:	461a      	mov	r2, r3
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8017072:	2300      	movs	r3, #0
 8017074:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8017078:	e006      	b.n	8017088 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 801707a:	2301      	movs	r3, #1
 801707c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8017080:	e002      	b.n	8017088 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8017082:	2304      	movs	r3, #4
 8017084:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8017088:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801708c:	4618      	mov	r0, r3
 801708e:	3740      	adds	r7, #64	; 0x40
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	2000865c 	.word	0x2000865c

08017098 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b082      	sub	sp, #8
 801709c:	af00      	add	r7, sp, #0
 801709e:	4603      	mov	r3, r0
 80170a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
   // return Stat;
	SD_disk_initialize(pdrv);
 80170a2:	79fb      	ldrb	r3, [r7, #7]
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7ea f855 	bl	8001154 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80170aa:	bf00      	nop
 80170ac:	4618      	mov	r0, r3
 80170ae:	3708      	adds	r7, #8
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bd80      	pop	{r7, pc}

080170b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b082      	sub	sp, #8
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	4603      	mov	r3, r0
 80170bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status(pdrv);
 80170be:	79fb      	ldrb	r3, [r7, #7]
 80170c0:	4618      	mov	r0, r3
 80170c2:	f7ea f931 	bl	8001328 <SD_disk_status>
  /* USER CODE END STATUS */
}
 80170c6:	bf00      	nop
 80170c8:	4618      	mov	r0, r3
 80170ca:	3708      	adds	r7, #8
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}

080170d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b084      	sub	sp, #16
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	60b9      	str	r1, [r7, #8]
 80170d8:	607a      	str	r2, [r7, #4]
 80170da:	603b      	str	r3, [r7, #0]
 80170dc:	4603      	mov	r3, r0
 80170de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  //  return RES_OK;
	SD_disk_read(pdrv, buff, sector, count);
 80170e0:	7bf8      	ldrb	r0, [r7, #15]
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	687a      	ldr	r2, [r7, #4]
 80170e6:	68b9      	ldr	r1, [r7, #8]
 80170e8:	f7ea f934 	bl	8001354 <SD_disk_read>
  /* USER CODE END READ */
}
 80170ec:	bf00      	nop
 80170ee:	4618      	mov	r0, r3
 80170f0:	3710      	adds	r7, #16
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bd80      	pop	{r7, pc}

080170f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80170f6:	b580      	push	{r7, lr}
 80170f8:	b084      	sub	sp, #16
 80170fa:	af00      	add	r7, sp, #0
 80170fc:	60b9      	str	r1, [r7, #8]
 80170fe:	607a      	str	r2, [r7, #4]
 8017100:	603b      	str	r3, [r7, #0]
 8017102:	4603      	mov	r3, r0
 8017104:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write(pdrv, buff, sector, count);
 8017106:	7bf8      	ldrb	r0, [r7, #15]
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	687a      	ldr	r2, [r7, #4]
 801710c:	68b9      	ldr	r1, [r7, #8]
 801710e:	f7ea f98b 	bl	8001428 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8017112:	bf00      	nop
 8017114:	4618      	mov	r0, r3
 8017116:	3710      	adds	r7, #16
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}

0801711c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b082      	sub	sp, #8
 8017120:	af00      	add	r7, sp, #0
 8017122:	4603      	mov	r3, r0
 8017124:	603a      	str	r2, [r7, #0]
 8017126:	71fb      	strb	r3, [r7, #7]
 8017128:	460b      	mov	r3, r1
 801712a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   // DRESULT res = RES_ERROR;
   // return res;
	SD_disk_ioctl(pdrv, cmd, buff);
 801712c:	79fb      	ldrb	r3, [r7, #7]
 801712e:	79b9      	ldrb	r1, [r7, #6]
 8017130:	683a      	ldr	r2, [r7, #0]
 8017132:	4618      	mov	r0, r3
 8017134:	f7ea f9fc 	bl	8001530 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8017138:	bf00      	nop
 801713a:	4618      	mov	r0, r3
 801713c:	3708      	adds	r7, #8
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}

08017142 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8017142:	b590      	push	{r4, r7, lr}
 8017144:	b089      	sub	sp, #36	; 0x24
 8017146:	af04      	add	r7, sp, #16
 8017148:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017150:	7919      	ldrb	r1, [r3, #4]
 8017152:	2350      	movs	r3, #80	; 0x50
 8017154:	2206      	movs	r2, #6
 8017156:	6878      	ldr	r0, [r7, #4]
 8017158:	f001 fc54 	bl	8018a04 <USBH_FindInterface>
 801715c:	4603      	mov	r3, r0
 801715e:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8017160:	7bfb      	ldrb	r3, [r7, #15]
 8017162:	2bff      	cmp	r3, #255	; 0xff
 8017164:	d002      	beq.n	801716c <USBH_MSC_InterfaceInit+0x2a>
 8017166:	7bfb      	ldrb	r3, [r7, #15]
 8017168:	2b01      	cmp	r3, #1
 801716a:	d901      	bls.n	8017170 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801716c:	2302      	movs	r3, #2
 801716e:	e0ef      	b.n	8017350 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8017170:	7bfb      	ldrb	r3, [r7, #15]
 8017172:	4619      	mov	r1, r3
 8017174:	6878      	ldr	r0, [r7, #4]
 8017176:	f001 fc29 	bl	80189cc <USBH_SelectInterface>
 801717a:	4603      	mov	r3, r0
 801717c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801717e:	7bbb      	ldrb	r3, [r7, #14]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d001      	beq.n	8017188 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8017184:	2302      	movs	r3, #2
 8017186:	e0e3      	b.n	8017350 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 801718e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8017192:	f007 f8c9 	bl	801e328 <malloc>
 8017196:	4603      	mov	r3, r0
 8017198:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80171a0:	69db      	ldr	r3, [r3, #28]
 80171a2:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d101      	bne.n	80171ae <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80171aa:	2302      	movs	r3, #2
 80171ac:	e0d0      	b.n	8017350 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80171ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80171b2:	2100      	movs	r1, #0
 80171b4:	68b8      	ldr	r0, [r7, #8]
 80171b6:	f007 f8d5 	bl	801e364 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80171ba:	7bfb      	ldrb	r3, [r7, #15]
 80171bc:	687a      	ldr	r2, [r7, #4]
 80171be:	211a      	movs	r1, #26
 80171c0:	fb01 f303 	mul.w	r3, r1, r3
 80171c4:	4413      	add	r3, r2
 80171c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	b25b      	sxtb	r3, r3
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	da16      	bge.n	8017200 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80171d2:	7bfb      	ldrb	r3, [r7, #15]
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	211a      	movs	r1, #26
 80171d8:	fb01 f303 	mul.w	r3, r1, r3
 80171dc:	4413      	add	r3, r2
 80171de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80171e2:	781a      	ldrb	r2, [r3, #0]
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80171e8:	7bfb      	ldrb	r3, [r7, #15]
 80171ea:	687a      	ldr	r2, [r7, #4]
 80171ec:	211a      	movs	r1, #26
 80171ee:	fb01 f303 	mul.w	r3, r1, r3
 80171f2:	4413      	add	r3, r2
 80171f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80171f8:	881a      	ldrh	r2, [r3, #0]
 80171fa:	68bb      	ldr	r3, [r7, #8]
 80171fc:	815a      	strh	r2, [r3, #10]
 80171fe:	e015      	b.n	801722c <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8017200:	7bfb      	ldrb	r3, [r7, #15]
 8017202:	687a      	ldr	r2, [r7, #4]
 8017204:	211a      	movs	r1, #26
 8017206:	fb01 f303 	mul.w	r3, r1, r3
 801720a:	4413      	add	r3, r2
 801720c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8017210:	781a      	ldrb	r2, [r3, #0]
 8017212:	68bb      	ldr	r3, [r7, #8]
 8017214:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8017216:	7bfb      	ldrb	r3, [r7, #15]
 8017218:	687a      	ldr	r2, [r7, #4]
 801721a:	211a      	movs	r1, #26
 801721c:	fb01 f303 	mul.w	r3, r1, r3
 8017220:	4413      	add	r3, r2
 8017222:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8017226:	881a      	ldrh	r2, [r3, #0]
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 801722c:	7bfb      	ldrb	r3, [r7, #15]
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	211a      	movs	r1, #26
 8017232:	fb01 f303 	mul.w	r3, r1, r3
 8017236:	4413      	add	r3, r2
 8017238:	f203 3356 	addw	r3, r3, #854	; 0x356
 801723c:	781b      	ldrb	r3, [r3, #0]
 801723e:	b25b      	sxtb	r3, r3
 8017240:	2b00      	cmp	r3, #0
 8017242:	da16      	bge.n	8017272 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8017244:	7bfb      	ldrb	r3, [r7, #15]
 8017246:	687a      	ldr	r2, [r7, #4]
 8017248:	211a      	movs	r1, #26
 801724a:	fb01 f303 	mul.w	r3, r1, r3
 801724e:	4413      	add	r3, r2
 8017250:	f203 3356 	addw	r3, r3, #854	; 0x356
 8017254:	781a      	ldrb	r2, [r3, #0]
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801725a:	7bfb      	ldrb	r3, [r7, #15]
 801725c:	687a      	ldr	r2, [r7, #4]
 801725e:	211a      	movs	r1, #26
 8017260:	fb01 f303 	mul.w	r3, r1, r3
 8017264:	4413      	add	r3, r2
 8017266:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801726a:	881a      	ldrh	r2, [r3, #0]
 801726c:	68bb      	ldr	r3, [r7, #8]
 801726e:	815a      	strh	r2, [r3, #10]
 8017270:	e015      	b.n	801729e <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8017272:	7bfb      	ldrb	r3, [r7, #15]
 8017274:	687a      	ldr	r2, [r7, #4]
 8017276:	211a      	movs	r1, #26
 8017278:	fb01 f303 	mul.w	r3, r1, r3
 801727c:	4413      	add	r3, r2
 801727e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8017282:	781a      	ldrb	r2, [r3, #0]
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8017288:	7bfb      	ldrb	r3, [r7, #15]
 801728a:	687a      	ldr	r2, [r7, #4]
 801728c:	211a      	movs	r1, #26
 801728e:	fb01 f303 	mul.w	r3, r1, r3
 8017292:	4413      	add	r3, r2
 8017294:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8017298:	881a      	ldrh	r2, [r3, #0]
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 801729e:	68bb      	ldr	r3, [r7, #8]
 80172a0:	2200      	movs	r2, #0
 80172a2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80172a4:	68bb      	ldr	r3, [r7, #8]
 80172a6:	2200      	movs	r2, #0
 80172a8:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	2200      	movs	r2, #0
 80172ae:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	799b      	ldrb	r3, [r3, #6]
 80172b4:	4619      	mov	r1, r3
 80172b6:	6878      	ldr	r0, [r7, #4]
 80172b8:	f002 fdc5 	bl	8019e46 <USBH_AllocPipe>
 80172bc:	4603      	mov	r3, r0
 80172be:	461a      	mov	r2, r3
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80172c4:	68bb      	ldr	r3, [r7, #8]
 80172c6:	79db      	ldrb	r3, [r3, #7]
 80172c8:	4619      	mov	r1, r3
 80172ca:	6878      	ldr	r0, [r7, #4]
 80172cc:	f002 fdbb 	bl	8019e46 <USBH_AllocPipe>
 80172d0:	4603      	mov	r3, r0
 80172d2:	461a      	mov	r2, r3
 80172d4:	68bb      	ldr	r3, [r7, #8]
 80172d6:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80172d8:	6878      	ldr	r0, [r7, #4]
 80172da:	f000 fdad 	bl	8017e38 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	7959      	ldrb	r1, [r3, #5]
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	7998      	ldrb	r0, [r3, #6]
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80172f2:	68ba      	ldr	r2, [r7, #8]
 80172f4:	8912      	ldrh	r2, [r2, #8]
 80172f6:	9202      	str	r2, [sp, #8]
 80172f8:	2202      	movs	r2, #2
 80172fa:	9201      	str	r2, [sp, #4]
 80172fc:	9300      	str	r3, [sp, #0]
 80172fe:	4623      	mov	r3, r4
 8017300:	4602      	mov	r2, r0
 8017302:	6878      	ldr	r0, [r7, #4]
 8017304:	f002 fd70 	bl	8019de8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	7919      	ldrb	r1, [r3, #4]
 801730c:	68bb      	ldr	r3, [r7, #8]
 801730e:	79d8      	ldrb	r0, [r3, #7]
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801731c:	68ba      	ldr	r2, [r7, #8]
 801731e:	8952      	ldrh	r2, [r2, #10]
 8017320:	9202      	str	r2, [sp, #8]
 8017322:	2202      	movs	r2, #2
 8017324:	9201      	str	r2, [sp, #4]
 8017326:	9300      	str	r3, [sp, #0]
 8017328:	4623      	mov	r3, r4
 801732a:	4602      	mov	r2, r0
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	f002 fd5b 	bl	8019de8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8017332:	68bb      	ldr	r3, [r7, #8]
 8017334:	791b      	ldrb	r3, [r3, #4]
 8017336:	2200      	movs	r2, #0
 8017338:	4619      	mov	r1, r3
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f006 ff0c 	bl	801e158 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	795b      	ldrb	r3, [r3, #5]
 8017344:	2200      	movs	r2, #0
 8017346:	4619      	mov	r1, r3
 8017348:	6878      	ldr	r0, [r7, #4]
 801734a:	f006 ff05 	bl	801e158 <USBH_LL_SetToggle>

  return USBH_OK;
 801734e:	2300      	movs	r3, #0
}
 8017350:	4618      	mov	r0, r3
 8017352:	3714      	adds	r7, #20
 8017354:	46bd      	mov	sp, r7
 8017356:	bd90      	pop	{r4, r7, pc}

08017358 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b084      	sub	sp, #16
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017366:	69db      	ldr	r3, [r3, #28]
 8017368:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	795b      	ldrb	r3, [r3, #5]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d00e      	beq.n	8017390 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	795b      	ldrb	r3, [r3, #5]
 8017376:	4619      	mov	r1, r3
 8017378:	6878      	ldr	r0, [r7, #4]
 801737a:	f002 fd54 	bl	8019e26 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	795b      	ldrb	r3, [r3, #5]
 8017382:	4619      	mov	r1, r3
 8017384:	6878      	ldr	r0, [r7, #4]
 8017386:	f002 fd7f 	bl	8019e88 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	2200      	movs	r2, #0
 801738e:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	791b      	ldrb	r3, [r3, #4]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d00e      	beq.n	80173b6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	791b      	ldrb	r3, [r3, #4]
 801739c:	4619      	mov	r1, r3
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f002 fd41 	bl	8019e26 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	791b      	ldrb	r3, [r3, #4]
 80173a8:	4619      	mov	r1, r3
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f002 fd6c 	bl	8019e88 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	2200      	movs	r2, #0
 80173b4:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80173bc:	69db      	ldr	r3, [r3, #28]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d00b      	beq.n	80173da <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80173c8:	69db      	ldr	r3, [r3, #28]
 80173ca:	4618      	mov	r0, r3
 80173cc:	f006 ffb4 	bl	801e338 <free>
    phost->pActiveClass->pData = 0U;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80173d6:	2200      	movs	r2, #0
 80173d8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80173da:	2300      	movs	r3, #0
}
 80173dc:	4618      	mov	r0, r3
 80173de:	3710      	adds	r7, #16
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}

080173e4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b084      	sub	sp, #16
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80173f2:	69db      	ldr	r3, [r3, #28]
 80173f4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80173f6:	2301      	movs	r3, #1
 80173f8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	7b9b      	ldrb	r3, [r3, #14]
 80173fe:	2b03      	cmp	r3, #3
 8017400:	d041      	beq.n	8017486 <USBH_MSC_ClassRequest+0xa2>
 8017402:	2b03      	cmp	r3, #3
 8017404:	dc4b      	bgt.n	801749e <USBH_MSC_ClassRequest+0xba>
 8017406:	2b00      	cmp	r3, #0
 8017408:	d001      	beq.n	801740e <USBH_MSC_ClassRequest+0x2a>
 801740a:	2b02      	cmp	r3, #2
 801740c:	d147      	bne.n	801749e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 801740e:	68bb      	ldr	r3, [r7, #8]
 8017410:	4619      	mov	r1, r3
 8017412:	6878      	ldr	r0, [r7, #4]
 8017414:	f000 fcf1 	bl	8017dfa <USBH_MSC_BOT_REQ_GetMaxLUN>
 8017418:	4603      	mov	r3, r0
 801741a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 801741c:	7bfb      	ldrb	r3, [r7, #15]
 801741e:	2b03      	cmp	r3, #3
 8017420:	d104      	bne.n	801742c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	2200      	movs	r2, #0
 8017426:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8017428:	2300      	movs	r3, #0
 801742a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 801742c:	7bfb      	ldrb	r3, [r7, #15]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d137      	bne.n	80174a2 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	781b      	ldrb	r3, [r3, #0]
 8017436:	2b02      	cmp	r3, #2
 8017438:	d804      	bhi.n	8017444 <USBH_MSC_ClassRequest+0x60>
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	781b      	ldrb	r3, [r3, #0]
 801743e:	3301      	adds	r3, #1
 8017440:	b2da      	uxtb	r2, r3
 8017442:	e000      	b.n	8017446 <USBH_MSC_ClassRequest+0x62>
 8017444:	2202      	movs	r2, #2
 8017446:	68bb      	ldr	r3, [r7, #8]
 8017448:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 801744a:	2300      	movs	r3, #0
 801744c:	73bb      	strb	r3, [r7, #14]
 801744e:	e014      	b.n	801747a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8017450:	7bbb      	ldrb	r3, [r7, #14]
 8017452:	68ba      	ldr	r2, [r7, #8]
 8017454:	2134      	movs	r1, #52	; 0x34
 8017456:	fb01 f303 	mul.w	r3, r1, r3
 801745a:	4413      	add	r3, r2
 801745c:	3392      	adds	r3, #146	; 0x92
 801745e:	2202      	movs	r2, #2
 8017460:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8017462:	7bbb      	ldrb	r3, [r7, #14]
 8017464:	68ba      	ldr	r2, [r7, #8]
 8017466:	2134      	movs	r1, #52	; 0x34
 8017468:	fb01 f303 	mul.w	r3, r1, r3
 801746c:	4413      	add	r3, r2
 801746e:	33c1      	adds	r3, #193	; 0xc1
 8017470:	2200      	movs	r2, #0
 8017472:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8017474:	7bbb      	ldrb	r3, [r7, #14]
 8017476:	3301      	adds	r3, #1
 8017478:	73bb      	strb	r3, [r7, #14]
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	7bba      	ldrb	r2, [r7, #14]
 8017480:	429a      	cmp	r2, r3
 8017482:	d3e5      	bcc.n	8017450 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8017484:	e00d      	b.n	80174a2 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8017486:	2100      	movs	r1, #0
 8017488:	6878      	ldr	r0, [r7, #4]
 801748a:	f002 f87c 	bl	8019586 <USBH_ClrFeature>
 801748e:	4603      	mov	r3, r0
 8017490:	2b00      	cmp	r3, #0
 8017492:	d108      	bne.n	80174a6 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	7bda      	ldrb	r2, [r3, #15]
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	739a      	strb	r2, [r3, #14]
      }
      break;
 801749c:	e003      	b.n	80174a6 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 801749e:	bf00      	nop
 80174a0:	e002      	b.n	80174a8 <USBH_MSC_ClassRequest+0xc4>
      break;
 80174a2:	bf00      	nop
 80174a4:	e000      	b.n	80174a8 <USBH_MSC_ClassRequest+0xc4>
      break;
 80174a6:	bf00      	nop
  }

  return status;
 80174a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3710      	adds	r7, #16
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
	...

080174b4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b086      	sub	sp, #24
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80174c2:	69db      	ldr	r3, [r3, #28]
 80174c4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80174c6:	2301      	movs	r3, #1
 80174c8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80174ca:	2301      	movs	r3, #1
 80174cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80174ce:	2301      	movs	r3, #1
 80174d0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80174d2:	693b      	ldr	r3, [r7, #16]
 80174d4:	7b1b      	ldrb	r3, [r3, #12]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d003      	beq.n	80174e2 <USBH_MSC_Process+0x2e>
 80174da:	2b01      	cmp	r3, #1
 80174dc:	f000 8271 	beq.w	80179c2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80174e0:	e272      	b.n	80179c8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80174e2:	693b      	ldr	r3, [r7, #16]
 80174e4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80174e8:	693b      	ldr	r3, [r7, #16]
 80174ea:	781b      	ldrb	r3, [r3, #0]
 80174ec:	b29b      	uxth	r3, r3
 80174ee:	429a      	cmp	r2, r3
 80174f0:	f080 824f 	bcs.w	8017992 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80174f4:	693b      	ldr	r3, [r7, #16]
 80174f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80174fa:	4619      	mov	r1, r3
 80174fc:	693a      	ldr	r2, [r7, #16]
 80174fe:	2334      	movs	r3, #52	; 0x34
 8017500:	fb03 f301 	mul.w	r3, r3, r1
 8017504:	4413      	add	r3, r2
 8017506:	3391      	adds	r3, #145	; 0x91
 8017508:	2201      	movs	r2, #1
 801750a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 801750c:	693b      	ldr	r3, [r7, #16]
 801750e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017512:	4619      	mov	r1, r3
 8017514:	693a      	ldr	r2, [r7, #16]
 8017516:	2334      	movs	r3, #52	; 0x34
 8017518:	fb03 f301 	mul.w	r3, r3, r1
 801751c:	4413      	add	r3, r2
 801751e:	3390      	adds	r3, #144	; 0x90
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	2b08      	cmp	r3, #8
 8017524:	f200 8243 	bhi.w	80179ae <USBH_MSC_Process+0x4fa>
 8017528:	a201      	add	r2, pc, #4	; (adr r2, 8017530 <USBH_MSC_Process+0x7c>)
 801752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801752e:	bf00      	nop
 8017530:	08017555 	.word	0x08017555
 8017534:	080179af 	.word	0x080179af
 8017538:	0801761d 	.word	0x0801761d
 801753c:	080177a1 	.word	0x080177a1
 8017540:	0801757b 	.word	0x0801757b
 8017544:	0801786d 	.word	0x0801786d
 8017548:	080179af 	.word	0x080179af
 801754c:	080179af 	.word	0x080179af
 8017550:	08017981 	.word	0x08017981
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8017554:	693b      	ldr	r3, [r7, #16]
 8017556:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801755a:	4619      	mov	r1, r3
 801755c:	693a      	ldr	r2, [r7, #16]
 801755e:	2334      	movs	r3, #52	; 0x34
 8017560:	fb03 f301 	mul.w	r3, r3, r1
 8017564:	4413      	add	r3, r2
 8017566:	3390      	adds	r3, #144	; 0x90
 8017568:	2204      	movs	r2, #4
 801756a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8017578:	e222      	b.n	80179c0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 801757a:	693b      	ldr	r3, [r7, #16]
 801757c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017580:	b2d9      	uxtb	r1, r3
 8017582:	693b      	ldr	r3, [r7, #16]
 8017584:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017588:	461a      	mov	r2, r3
 801758a:	2334      	movs	r3, #52	; 0x34
 801758c:	fb03 f302 	mul.w	r3, r3, r2
 8017590:	3398      	adds	r3, #152	; 0x98
 8017592:	693a      	ldr	r2, [r7, #16]
 8017594:	4413      	add	r3, r2
 8017596:	3307      	adds	r3, #7
 8017598:	461a      	mov	r2, r3
 801759a:	6878      	ldr	r0, [r7, #4]
 801759c:	f000 ff6a 	bl	8018474 <USBH_MSC_SCSI_Inquiry>
 80175a0:	4603      	mov	r3, r0
 80175a2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80175a4:	7bfb      	ldrb	r3, [r7, #15]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d10b      	bne.n	80175c2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80175aa:	693b      	ldr	r3, [r7, #16]
 80175ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80175b0:	4619      	mov	r1, r3
 80175b2:	693a      	ldr	r2, [r7, #16]
 80175b4:	2334      	movs	r3, #52	; 0x34
 80175b6:	fb03 f301 	mul.w	r3, r3, r1
 80175ba:	4413      	add	r3, r2
 80175bc:	3390      	adds	r3, #144	; 0x90
 80175be:	2202      	movs	r2, #2
 80175c0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80175c2:	7bfb      	ldrb	r3, [r7, #15]
 80175c4:	2b02      	cmp	r3, #2
 80175c6:	d10c      	bne.n	80175e2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80175c8:	693b      	ldr	r3, [r7, #16]
 80175ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80175ce:	4619      	mov	r1, r3
 80175d0:	693a      	ldr	r2, [r7, #16]
 80175d2:	2334      	movs	r3, #52	; 0x34
 80175d4:	fb03 f301 	mul.w	r3, r3, r1
 80175d8:	4413      	add	r3, r2
 80175da:	3390      	adds	r3, #144	; 0x90
 80175dc:	2205      	movs	r2, #5
 80175de:	701a      	strb	r2, [r3, #0]
            break;
 80175e0:	e1e7      	b.n	80179b2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80175e2:	7bfb      	ldrb	r3, [r7, #15]
 80175e4:	2b04      	cmp	r3, #4
 80175e6:	f040 81e4 	bne.w	80179b2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80175ea:	693b      	ldr	r3, [r7, #16]
 80175ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80175f0:	4619      	mov	r1, r3
 80175f2:	693a      	ldr	r2, [r7, #16]
 80175f4:	2334      	movs	r3, #52	; 0x34
 80175f6:	fb03 f301 	mul.w	r3, r3, r1
 80175fa:	4413      	add	r3, r2
 80175fc:	3390      	adds	r3, #144	; 0x90
 80175fe:	2201      	movs	r2, #1
 8017600:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8017602:	693b      	ldr	r3, [r7, #16]
 8017604:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017608:	4619      	mov	r1, r3
 801760a:	693a      	ldr	r2, [r7, #16]
 801760c:	2334      	movs	r3, #52	; 0x34
 801760e:	fb03 f301 	mul.w	r3, r3, r1
 8017612:	4413      	add	r3, r2
 8017614:	3391      	adds	r3, #145	; 0x91
 8017616:	2202      	movs	r2, #2
 8017618:	701a      	strb	r2, [r3, #0]
            break;
 801761a:	e1ca      	b.n	80179b2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 801761c:	693b      	ldr	r3, [r7, #16]
 801761e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017622:	b2db      	uxtb	r3, r3
 8017624:	4619      	mov	r1, r3
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f000 fe66 	bl	80182f8 <USBH_MSC_SCSI_TestUnitReady>
 801762c:	4603      	mov	r3, r0
 801762e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8017630:	7bbb      	ldrb	r3, [r7, #14]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d149      	bne.n	80176ca <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8017636:	693b      	ldr	r3, [r7, #16]
 8017638:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801763c:	4619      	mov	r1, r3
 801763e:	693a      	ldr	r2, [r7, #16]
 8017640:	2334      	movs	r3, #52	; 0x34
 8017642:	fb03 f301 	mul.w	r3, r3, r1
 8017646:	4413      	add	r3, r2
 8017648:	3392      	adds	r3, #146	; 0x92
 801764a:	781b      	ldrb	r3, [r3, #0]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d00c      	beq.n	801766a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8017650:	693b      	ldr	r3, [r7, #16]
 8017652:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017656:	4619      	mov	r1, r3
 8017658:	693a      	ldr	r2, [r7, #16]
 801765a:	2334      	movs	r3, #52	; 0x34
 801765c:	fb03 f301 	mul.w	r3, r3, r1
 8017660:	4413      	add	r3, r2
 8017662:	33c1      	adds	r3, #193	; 0xc1
 8017664:	2201      	movs	r2, #1
 8017666:	701a      	strb	r2, [r3, #0]
 8017668:	e00b      	b.n	8017682 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 801766a:	693b      	ldr	r3, [r7, #16]
 801766c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017670:	4619      	mov	r1, r3
 8017672:	693a      	ldr	r2, [r7, #16]
 8017674:	2334      	movs	r3, #52	; 0x34
 8017676:	fb03 f301 	mul.w	r3, r3, r1
 801767a:	4413      	add	r3, r2
 801767c:	33c1      	adds	r3, #193	; 0xc1
 801767e:	2200      	movs	r2, #0
 8017680:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8017682:	693b      	ldr	r3, [r7, #16]
 8017684:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017688:	4619      	mov	r1, r3
 801768a:	693a      	ldr	r2, [r7, #16]
 801768c:	2334      	movs	r3, #52	; 0x34
 801768e:	fb03 f301 	mul.w	r3, r3, r1
 8017692:	4413      	add	r3, r2
 8017694:	3390      	adds	r3, #144	; 0x90
 8017696:	2203      	movs	r2, #3
 8017698:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 801769a:	693b      	ldr	r3, [r7, #16]
 801769c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80176a0:	4619      	mov	r1, r3
 80176a2:	693a      	ldr	r2, [r7, #16]
 80176a4:	2334      	movs	r3, #52	; 0x34
 80176a6:	fb03 f301 	mul.w	r3, r3, r1
 80176aa:	4413      	add	r3, r2
 80176ac:	3391      	adds	r3, #145	; 0x91
 80176ae:	2200      	movs	r2, #0
 80176b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80176b2:	693b      	ldr	r3, [r7, #16]
 80176b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80176b8:	4619      	mov	r1, r3
 80176ba:	693a      	ldr	r2, [r7, #16]
 80176bc:	2334      	movs	r3, #52	; 0x34
 80176be:	fb03 f301 	mul.w	r3, r3, r1
 80176c2:	4413      	add	r3, r2
 80176c4:	3392      	adds	r3, #146	; 0x92
 80176c6:	2200      	movs	r2, #0
 80176c8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80176ca:	7bbb      	ldrb	r3, [r7, #14]
 80176cc:	2b02      	cmp	r3, #2
 80176ce:	d14a      	bne.n	8017766 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80176d0:	693b      	ldr	r3, [r7, #16]
 80176d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80176d6:	4619      	mov	r1, r3
 80176d8:	693a      	ldr	r2, [r7, #16]
 80176da:	2334      	movs	r3, #52	; 0x34
 80176dc:	fb03 f301 	mul.w	r3, r3, r1
 80176e0:	4413      	add	r3, r2
 80176e2:	3392      	adds	r3, #146	; 0x92
 80176e4:	781b      	ldrb	r3, [r3, #0]
 80176e6:	2b02      	cmp	r3, #2
 80176e8:	d00c      	beq.n	8017704 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80176ea:	693b      	ldr	r3, [r7, #16]
 80176ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80176f0:	4619      	mov	r1, r3
 80176f2:	693a      	ldr	r2, [r7, #16]
 80176f4:	2334      	movs	r3, #52	; 0x34
 80176f6:	fb03 f301 	mul.w	r3, r3, r1
 80176fa:	4413      	add	r3, r2
 80176fc:	33c1      	adds	r3, #193	; 0xc1
 80176fe:	2201      	movs	r2, #1
 8017700:	701a      	strb	r2, [r3, #0]
 8017702:	e00b      	b.n	801771c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8017704:	693b      	ldr	r3, [r7, #16]
 8017706:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801770a:	4619      	mov	r1, r3
 801770c:	693a      	ldr	r2, [r7, #16]
 801770e:	2334      	movs	r3, #52	; 0x34
 8017710:	fb03 f301 	mul.w	r3, r3, r1
 8017714:	4413      	add	r3, r2
 8017716:	33c1      	adds	r3, #193	; 0xc1
 8017718:	2200      	movs	r2, #0
 801771a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 801771c:	693b      	ldr	r3, [r7, #16]
 801771e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017722:	4619      	mov	r1, r3
 8017724:	693a      	ldr	r2, [r7, #16]
 8017726:	2334      	movs	r3, #52	; 0x34
 8017728:	fb03 f301 	mul.w	r3, r3, r1
 801772c:	4413      	add	r3, r2
 801772e:	3390      	adds	r3, #144	; 0x90
 8017730:	2205      	movs	r2, #5
 8017732:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8017734:	693b      	ldr	r3, [r7, #16]
 8017736:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801773a:	4619      	mov	r1, r3
 801773c:	693a      	ldr	r2, [r7, #16]
 801773e:	2334      	movs	r3, #52	; 0x34
 8017740:	fb03 f301 	mul.w	r3, r3, r1
 8017744:	4413      	add	r3, r2
 8017746:	3391      	adds	r3, #145	; 0x91
 8017748:	2201      	movs	r2, #1
 801774a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 801774c:	693b      	ldr	r3, [r7, #16]
 801774e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017752:	4619      	mov	r1, r3
 8017754:	693a      	ldr	r2, [r7, #16]
 8017756:	2334      	movs	r3, #52	; 0x34
 8017758:	fb03 f301 	mul.w	r3, r3, r1
 801775c:	4413      	add	r3, r2
 801775e:	3392      	adds	r3, #146	; 0x92
 8017760:	2202      	movs	r2, #2
 8017762:	701a      	strb	r2, [r3, #0]
            break;
 8017764:	e127      	b.n	80179b6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8017766:	7bbb      	ldrb	r3, [r7, #14]
 8017768:	2b04      	cmp	r3, #4
 801776a:	f040 8124 	bne.w	80179b6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801776e:	693b      	ldr	r3, [r7, #16]
 8017770:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017774:	4619      	mov	r1, r3
 8017776:	693a      	ldr	r2, [r7, #16]
 8017778:	2334      	movs	r3, #52	; 0x34
 801777a:	fb03 f301 	mul.w	r3, r3, r1
 801777e:	4413      	add	r3, r2
 8017780:	3390      	adds	r3, #144	; 0x90
 8017782:	2201      	movs	r2, #1
 8017784:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8017786:	693b      	ldr	r3, [r7, #16]
 8017788:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801778c:	4619      	mov	r1, r3
 801778e:	693a      	ldr	r2, [r7, #16]
 8017790:	2334      	movs	r3, #52	; 0x34
 8017792:	fb03 f301 	mul.w	r3, r3, r1
 8017796:	4413      	add	r3, r2
 8017798:	3391      	adds	r3, #145	; 0x91
 801779a:	2202      	movs	r2, #2
 801779c:	701a      	strb	r2, [r3, #0]
            break;
 801779e:	e10a      	b.n	80179b6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80177a0:	693b      	ldr	r3, [r7, #16]
 80177a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80177a6:	b2d9      	uxtb	r1, r3
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80177ae:	461a      	mov	r2, r3
 80177b0:	2334      	movs	r3, #52	; 0x34
 80177b2:	fb03 f302 	mul.w	r3, r3, r2
 80177b6:	3390      	adds	r3, #144	; 0x90
 80177b8:	693a      	ldr	r2, [r7, #16]
 80177ba:	4413      	add	r3, r2
 80177bc:	3304      	adds	r3, #4
 80177be:	461a      	mov	r2, r3
 80177c0:	6878      	ldr	r0, [r7, #4]
 80177c2:	f000 fddc 	bl	801837e <USBH_MSC_SCSI_ReadCapacity>
 80177c6:	4603      	mov	r3, r0
 80177c8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80177ca:	7bfb      	ldrb	r3, [r7, #15]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d120      	bne.n	8017812 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80177d0:	693b      	ldr	r3, [r7, #16]
 80177d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80177d6:	4619      	mov	r1, r3
 80177d8:	693a      	ldr	r2, [r7, #16]
 80177da:	2334      	movs	r3, #52	; 0x34
 80177dc:	fb03 f301 	mul.w	r3, r3, r1
 80177e0:	4413      	add	r3, r2
 80177e2:	3390      	adds	r3, #144	; 0x90
 80177e4:	2201      	movs	r2, #1
 80177e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80177e8:	693b      	ldr	r3, [r7, #16]
 80177ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80177ee:	4619      	mov	r1, r3
 80177f0:	693a      	ldr	r2, [r7, #16]
 80177f2:	2334      	movs	r3, #52	; 0x34
 80177f4:	fb03 f301 	mul.w	r3, r3, r1
 80177f8:	4413      	add	r3, r2
 80177fa:	3391      	adds	r3, #145	; 0x91
 80177fc:	2200      	movs	r2, #0
 80177fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8017800:	693b      	ldr	r3, [r7, #16]
 8017802:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017806:	3301      	adds	r3, #1
 8017808:	b29a      	uxth	r2, r3
 801780a:	693b      	ldr	r3, [r7, #16]
 801780c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8017810:	e0d3      	b.n	80179ba <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8017812:	7bfb      	ldrb	r3, [r7, #15]
 8017814:	2b02      	cmp	r3, #2
 8017816:	d10c      	bne.n	8017832 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8017818:	693b      	ldr	r3, [r7, #16]
 801781a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801781e:	4619      	mov	r1, r3
 8017820:	693a      	ldr	r2, [r7, #16]
 8017822:	2334      	movs	r3, #52	; 0x34
 8017824:	fb03 f301 	mul.w	r3, r3, r1
 8017828:	4413      	add	r3, r2
 801782a:	3390      	adds	r3, #144	; 0x90
 801782c:	2205      	movs	r2, #5
 801782e:	701a      	strb	r2, [r3, #0]
            break;
 8017830:	e0c3      	b.n	80179ba <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8017832:	7bfb      	ldrb	r3, [r7, #15]
 8017834:	2b04      	cmp	r3, #4
 8017836:	f040 80c0 	bne.w	80179ba <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017840:	4619      	mov	r1, r3
 8017842:	693a      	ldr	r2, [r7, #16]
 8017844:	2334      	movs	r3, #52	; 0x34
 8017846:	fb03 f301 	mul.w	r3, r3, r1
 801784a:	4413      	add	r3, r2
 801784c:	3390      	adds	r3, #144	; 0x90
 801784e:	2201      	movs	r2, #1
 8017850:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8017852:	693b      	ldr	r3, [r7, #16]
 8017854:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017858:	4619      	mov	r1, r3
 801785a:	693a      	ldr	r2, [r7, #16]
 801785c:	2334      	movs	r3, #52	; 0x34
 801785e:	fb03 f301 	mul.w	r3, r3, r1
 8017862:	4413      	add	r3, r2
 8017864:	3391      	adds	r3, #145	; 0x91
 8017866:	2202      	movs	r2, #2
 8017868:	701a      	strb	r2, [r3, #0]
            break;
 801786a:	e0a6      	b.n	80179ba <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 801786c:	693b      	ldr	r3, [r7, #16]
 801786e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017872:	b2d9      	uxtb	r1, r3
 8017874:	693b      	ldr	r3, [r7, #16]
 8017876:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801787a:	461a      	mov	r2, r3
 801787c:	2334      	movs	r3, #52	; 0x34
 801787e:	fb03 f302 	mul.w	r3, r3, r2
 8017882:	3398      	adds	r3, #152	; 0x98
 8017884:	693a      	ldr	r2, [r7, #16]
 8017886:	4413      	add	r3, r2
 8017888:	3304      	adds	r3, #4
 801788a:	461a      	mov	r2, r3
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f000 fe96 	bl	80185be <USBH_MSC_SCSI_RequestSense>
 8017892:	4603      	mov	r3, r0
 8017894:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8017896:	7bfb      	ldrb	r3, [r7, #15]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d145      	bne.n	8017928 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 801789c:	693b      	ldr	r3, [r7, #16]
 801789e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80178a2:	4619      	mov	r1, r3
 80178a4:	693a      	ldr	r2, [r7, #16]
 80178a6:	2334      	movs	r3, #52	; 0x34
 80178a8:	fb03 f301 	mul.w	r3, r3, r1
 80178ac:	4413      	add	r3, r2
 80178ae:	339c      	adds	r3, #156	; 0x9c
 80178b0:	781b      	ldrb	r3, [r3, #0]
 80178b2:	2b06      	cmp	r3, #6
 80178b4:	d00c      	beq.n	80178d0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80178b6:	693b      	ldr	r3, [r7, #16]
 80178b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80178bc:	4619      	mov	r1, r3
 80178be:	693a      	ldr	r2, [r7, #16]
 80178c0:	2334      	movs	r3, #52	; 0x34
 80178c2:	fb03 f301 	mul.w	r3, r3, r1
 80178c6:	4413      	add	r3, r2
 80178c8:	339c      	adds	r3, #156	; 0x9c
 80178ca:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80178cc:	2b02      	cmp	r3, #2
 80178ce:	d117      	bne.n	8017900 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80178d6:	693b      	ldr	r3, [r7, #16]
 80178d8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80178dc:	1ad3      	subs	r3, r2, r3
 80178de:	f242 720f 	movw	r2, #9999	; 0x270f
 80178e2:	4293      	cmp	r3, r2
 80178e4:	d80c      	bhi.n	8017900 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80178e6:	693b      	ldr	r3, [r7, #16]
 80178e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80178ec:	4619      	mov	r1, r3
 80178ee:	693a      	ldr	r2, [r7, #16]
 80178f0:	2334      	movs	r3, #52	; 0x34
 80178f2:	fb03 f301 	mul.w	r3, r3, r1
 80178f6:	4413      	add	r3, r2
 80178f8:	3390      	adds	r3, #144	; 0x90
 80178fa:	2202      	movs	r2, #2
 80178fc:	701a      	strb	r2, [r3, #0]
                  break;
 80178fe:	e05f      	b.n	80179c0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8017900:	693b      	ldr	r3, [r7, #16]
 8017902:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017906:	4619      	mov	r1, r3
 8017908:	693a      	ldr	r2, [r7, #16]
 801790a:	2334      	movs	r3, #52	; 0x34
 801790c:	fb03 f301 	mul.w	r3, r3, r1
 8017910:	4413      	add	r3, r2
 8017912:	3390      	adds	r3, #144	; 0x90
 8017914:	2201      	movs	r2, #1
 8017916:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801791e:	3301      	adds	r3, #1
 8017920:	b29a      	uxth	r2, r3
 8017922:	693b      	ldr	r3, [r7, #16]
 8017924:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8017928:	7bfb      	ldrb	r3, [r7, #15]
 801792a:	2b02      	cmp	r3, #2
 801792c:	d10c      	bne.n	8017948 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 801792e:	693b      	ldr	r3, [r7, #16]
 8017930:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017934:	4619      	mov	r1, r3
 8017936:	693a      	ldr	r2, [r7, #16]
 8017938:	2334      	movs	r3, #52	; 0x34
 801793a:	fb03 f301 	mul.w	r3, r3, r1
 801793e:	4413      	add	r3, r2
 8017940:	3390      	adds	r3, #144	; 0x90
 8017942:	2208      	movs	r2, #8
 8017944:	701a      	strb	r2, [r3, #0]
            break;
 8017946:	e03a      	b.n	80179be <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8017948:	7bfb      	ldrb	r3, [r7, #15]
 801794a:	2b04      	cmp	r3, #4
 801794c:	d137      	bne.n	80179be <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 801794e:	693b      	ldr	r3, [r7, #16]
 8017950:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017954:	4619      	mov	r1, r3
 8017956:	693a      	ldr	r2, [r7, #16]
 8017958:	2334      	movs	r3, #52	; 0x34
 801795a:	fb03 f301 	mul.w	r3, r3, r1
 801795e:	4413      	add	r3, r2
 8017960:	3390      	adds	r3, #144	; 0x90
 8017962:	2201      	movs	r2, #1
 8017964:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8017966:	693b      	ldr	r3, [r7, #16]
 8017968:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801796c:	4619      	mov	r1, r3
 801796e:	693a      	ldr	r2, [r7, #16]
 8017970:	2334      	movs	r3, #52	; 0x34
 8017972:	fb03 f301 	mul.w	r3, r3, r1
 8017976:	4413      	add	r3, r2
 8017978:	3391      	adds	r3, #145	; 0x91
 801797a:	2202      	movs	r2, #2
 801797c:	701a      	strb	r2, [r3, #0]
            break;
 801797e:	e01e      	b.n	80179be <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8017980:	693b      	ldr	r3, [r7, #16]
 8017982:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017986:	3301      	adds	r3, #1
 8017988:	b29a      	uxth	r2, r3
 801798a:	693b      	ldr	r3, [r7, #16]
 801798c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8017990:	e016      	b.n	80179c0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8017992:	693b      	ldr	r3, [r7, #16]
 8017994:	2200      	movs	r2, #0
 8017996:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 801799a:	693b      	ldr	r3, [r7, #16]
 801799c:	2201      	movs	r2, #1
 801799e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80179a6:	2102      	movs	r1, #2
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	4798      	blx	r3
      break;
 80179ac:	e00c      	b.n	80179c8 <USBH_MSC_Process+0x514>
            break;
 80179ae:	bf00      	nop
 80179b0:	e00a      	b.n	80179c8 <USBH_MSC_Process+0x514>
            break;
 80179b2:	bf00      	nop
 80179b4:	e008      	b.n	80179c8 <USBH_MSC_Process+0x514>
            break;
 80179b6:	bf00      	nop
 80179b8:	e006      	b.n	80179c8 <USBH_MSC_Process+0x514>
            break;
 80179ba:	bf00      	nop
 80179bc:	e004      	b.n	80179c8 <USBH_MSC_Process+0x514>
            break;
 80179be:	bf00      	nop
      break;
 80179c0:	e002      	b.n	80179c8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80179c2:	2300      	movs	r3, #0
 80179c4:	75fb      	strb	r3, [r7, #23]
      break;
 80179c6:	bf00      	nop
  }
  return error;
 80179c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3718      	adds	r7, #24
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}
 80179d2:	bf00      	nop

080179d4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80179d4:	b480      	push	{r7}
 80179d6:	b083      	sub	sp, #12
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80179dc:	2300      	movs	r3, #0
}
 80179de:	4618      	mov	r0, r3
 80179e0:	370c      	adds	r7, #12
 80179e2:	46bd      	mov	sp, r7
 80179e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e8:	4770      	bx	lr

080179ea <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80179ea:	b580      	push	{r7, lr}
 80179ec:	b088      	sub	sp, #32
 80179ee:	af02      	add	r7, sp, #8
 80179f0:	6078      	str	r0, [r7, #4]
 80179f2:	460b      	mov	r3, r1
 80179f4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80179fc:	69db      	ldr	r3, [r3, #28]
 80179fe:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8017a00:	2301      	movs	r3, #1
 8017a02:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8017a04:	2301      	movs	r3, #1
 8017a06:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8017a08:	78fb      	ldrb	r3, [r7, #3]
 8017a0a:	693a      	ldr	r2, [r7, #16]
 8017a0c:	2134      	movs	r1, #52	; 0x34
 8017a0e:	fb01 f303 	mul.w	r3, r1, r3
 8017a12:	4413      	add	r3, r2
 8017a14:	3390      	adds	r3, #144	; 0x90
 8017a16:	781b      	ldrb	r3, [r3, #0]
 8017a18:	2b07      	cmp	r3, #7
 8017a1a:	d03c      	beq.n	8017a96 <USBH_MSC_RdWrProcess+0xac>
 8017a1c:	2b07      	cmp	r3, #7
 8017a1e:	f300 80a7 	bgt.w	8017b70 <USBH_MSC_RdWrProcess+0x186>
 8017a22:	2b05      	cmp	r3, #5
 8017a24:	d06c      	beq.n	8017b00 <USBH_MSC_RdWrProcess+0x116>
 8017a26:	2b06      	cmp	r3, #6
 8017a28:	f040 80a2 	bne.w	8017b70 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8017a2c:	78f9      	ldrb	r1, [r7, #3]
 8017a2e:	2300      	movs	r3, #0
 8017a30:	9300      	str	r3, [sp, #0]
 8017a32:	2300      	movs	r3, #0
 8017a34:	2200      	movs	r2, #0
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f000 fea5 	bl	8018786 <USBH_MSC_SCSI_Read>
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8017a40:	7bfb      	ldrb	r3, [r7, #15]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d10b      	bne.n	8017a5e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8017a46:	78fb      	ldrb	r3, [r7, #3]
 8017a48:	693a      	ldr	r2, [r7, #16]
 8017a4a:	2134      	movs	r1, #52	; 0x34
 8017a4c:	fb01 f303 	mul.w	r3, r1, r3
 8017a50:	4413      	add	r3, r2
 8017a52:	3390      	adds	r3, #144	; 0x90
 8017a54:	2201      	movs	r2, #1
 8017a56:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8017a58:	2300      	movs	r3, #0
 8017a5a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8017a5c:	e08a      	b.n	8017b74 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8017a5e:	7bfb      	ldrb	r3, [r7, #15]
 8017a60:	2b02      	cmp	r3, #2
 8017a62:	d109      	bne.n	8017a78 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8017a64:	78fb      	ldrb	r3, [r7, #3]
 8017a66:	693a      	ldr	r2, [r7, #16]
 8017a68:	2134      	movs	r1, #52	; 0x34
 8017a6a:	fb01 f303 	mul.w	r3, r1, r3
 8017a6e:	4413      	add	r3, r2
 8017a70:	3390      	adds	r3, #144	; 0x90
 8017a72:	2205      	movs	r2, #5
 8017a74:	701a      	strb	r2, [r3, #0]
      break;
 8017a76:	e07d      	b.n	8017b74 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8017a78:	7bfb      	ldrb	r3, [r7, #15]
 8017a7a:	2b04      	cmp	r3, #4
 8017a7c:	d17a      	bne.n	8017b74 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8017a7e:	78fb      	ldrb	r3, [r7, #3]
 8017a80:	693a      	ldr	r2, [r7, #16]
 8017a82:	2134      	movs	r1, #52	; 0x34
 8017a84:	fb01 f303 	mul.w	r3, r1, r3
 8017a88:	4413      	add	r3, r2
 8017a8a:	3390      	adds	r3, #144	; 0x90
 8017a8c:	2208      	movs	r2, #8
 8017a8e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8017a90:	2302      	movs	r3, #2
 8017a92:	75fb      	strb	r3, [r7, #23]
      break;
 8017a94:	e06e      	b.n	8017b74 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8017a96:	78f9      	ldrb	r1, [r7, #3]
 8017a98:	2300      	movs	r3, #0
 8017a9a:	9300      	str	r3, [sp, #0]
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	6878      	ldr	r0, [r7, #4]
 8017aa2:	f000 fe05 	bl	80186b0 <USBH_MSC_SCSI_Write>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8017aaa:	7bfb      	ldrb	r3, [r7, #15]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d10b      	bne.n	8017ac8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8017ab0:	78fb      	ldrb	r3, [r7, #3]
 8017ab2:	693a      	ldr	r2, [r7, #16]
 8017ab4:	2134      	movs	r1, #52	; 0x34
 8017ab6:	fb01 f303 	mul.w	r3, r1, r3
 8017aba:	4413      	add	r3, r2
 8017abc:	3390      	adds	r3, #144	; 0x90
 8017abe:	2201      	movs	r2, #1
 8017ac0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8017ac6:	e057      	b.n	8017b78 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8017ac8:	7bfb      	ldrb	r3, [r7, #15]
 8017aca:	2b02      	cmp	r3, #2
 8017acc:	d109      	bne.n	8017ae2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8017ace:	78fb      	ldrb	r3, [r7, #3]
 8017ad0:	693a      	ldr	r2, [r7, #16]
 8017ad2:	2134      	movs	r1, #52	; 0x34
 8017ad4:	fb01 f303 	mul.w	r3, r1, r3
 8017ad8:	4413      	add	r3, r2
 8017ada:	3390      	adds	r3, #144	; 0x90
 8017adc:	2205      	movs	r2, #5
 8017ade:	701a      	strb	r2, [r3, #0]
      break;
 8017ae0:	e04a      	b.n	8017b78 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8017ae2:	7bfb      	ldrb	r3, [r7, #15]
 8017ae4:	2b04      	cmp	r3, #4
 8017ae6:	d147      	bne.n	8017b78 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8017ae8:	78fb      	ldrb	r3, [r7, #3]
 8017aea:	693a      	ldr	r2, [r7, #16]
 8017aec:	2134      	movs	r1, #52	; 0x34
 8017aee:	fb01 f303 	mul.w	r3, r1, r3
 8017af2:	4413      	add	r3, r2
 8017af4:	3390      	adds	r3, #144	; 0x90
 8017af6:	2208      	movs	r2, #8
 8017af8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8017afa:	2302      	movs	r3, #2
 8017afc:	75fb      	strb	r3, [r7, #23]
      break;
 8017afe:	e03b      	b.n	8017b78 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8017b00:	78fb      	ldrb	r3, [r7, #3]
 8017b02:	2234      	movs	r2, #52	; 0x34
 8017b04:	fb02 f303 	mul.w	r3, r2, r3
 8017b08:	3398      	adds	r3, #152	; 0x98
 8017b0a:	693a      	ldr	r2, [r7, #16]
 8017b0c:	4413      	add	r3, r2
 8017b0e:	1d1a      	adds	r2, r3, #4
 8017b10:	78fb      	ldrb	r3, [r7, #3]
 8017b12:	4619      	mov	r1, r3
 8017b14:	6878      	ldr	r0, [r7, #4]
 8017b16:	f000 fd52 	bl	80185be <USBH_MSC_SCSI_RequestSense>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8017b1e:	7bfb      	ldrb	r3, [r7, #15]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d113      	bne.n	8017b4c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8017b24:	78fb      	ldrb	r3, [r7, #3]
 8017b26:	693a      	ldr	r2, [r7, #16]
 8017b28:	2134      	movs	r1, #52	; 0x34
 8017b2a:	fb01 f303 	mul.w	r3, r1, r3
 8017b2e:	4413      	add	r3, r2
 8017b30:	3390      	adds	r3, #144	; 0x90
 8017b32:	2201      	movs	r2, #1
 8017b34:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8017b36:	78fb      	ldrb	r3, [r7, #3]
 8017b38:	693a      	ldr	r2, [r7, #16]
 8017b3a:	2134      	movs	r1, #52	; 0x34
 8017b3c:	fb01 f303 	mul.w	r3, r1, r3
 8017b40:	4413      	add	r3, r2
 8017b42:	3391      	adds	r3, #145	; 0x91
 8017b44:	2202      	movs	r2, #2
 8017b46:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8017b48:	2302      	movs	r3, #2
 8017b4a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8017b4c:	7bfb      	ldrb	r3, [r7, #15]
 8017b4e:	2b02      	cmp	r3, #2
 8017b50:	d014      	beq.n	8017b7c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8017b52:	7bfb      	ldrb	r3, [r7, #15]
 8017b54:	2b04      	cmp	r3, #4
 8017b56:	d111      	bne.n	8017b7c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8017b58:	78fb      	ldrb	r3, [r7, #3]
 8017b5a:	693a      	ldr	r2, [r7, #16]
 8017b5c:	2134      	movs	r1, #52	; 0x34
 8017b5e:	fb01 f303 	mul.w	r3, r1, r3
 8017b62:	4413      	add	r3, r2
 8017b64:	3390      	adds	r3, #144	; 0x90
 8017b66:	2208      	movs	r2, #8
 8017b68:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8017b6a:	2302      	movs	r3, #2
 8017b6c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8017b6e:	e005      	b.n	8017b7c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8017b70:	bf00      	nop
 8017b72:	e004      	b.n	8017b7e <USBH_MSC_RdWrProcess+0x194>
      break;
 8017b74:	bf00      	nop
 8017b76:	e002      	b.n	8017b7e <USBH_MSC_RdWrProcess+0x194>
      break;
 8017b78:	bf00      	nop
 8017b7a:	e000      	b.n	8017b7e <USBH_MSC_RdWrProcess+0x194>
      break;
 8017b7c:	bf00      	nop

  }
  return error;
 8017b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	3718      	adds	r7, #24
 8017b84:	46bd      	mov	sp, r7
 8017b86:	bd80      	pop	{r7, pc}

08017b88 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8017b88:	b480      	push	{r7}
 8017b8a:	b085      	sub	sp, #20
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
 8017b90:	460b      	mov	r3, r1
 8017b92:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017b9a:	69db      	ldr	r3, [r3, #28]
 8017b9c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	781b      	ldrb	r3, [r3, #0]
 8017ba2:	b2db      	uxtb	r3, r3
 8017ba4:	2b0b      	cmp	r3, #11
 8017ba6:	d10c      	bne.n	8017bc2 <USBH_MSC_UnitIsReady+0x3a>
 8017ba8:	78fb      	ldrb	r3, [r7, #3]
 8017baa:	68ba      	ldr	r2, [r7, #8]
 8017bac:	2134      	movs	r1, #52	; 0x34
 8017bae:	fb01 f303 	mul.w	r3, r1, r3
 8017bb2:	4413      	add	r3, r2
 8017bb4:	3391      	adds	r3, #145	; 0x91
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d102      	bne.n	8017bc2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	73fb      	strb	r3, [r7, #15]
 8017bc0:	e001      	b.n	8017bc6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8017bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bc8:	4618      	mov	r0, r3
 8017bca:	3714      	adds	r7, #20
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd2:	4770      	bx	lr

08017bd4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b086      	sub	sp, #24
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	60f8      	str	r0, [r7, #12]
 8017bdc:	460b      	mov	r3, r1
 8017bde:	607a      	str	r2, [r7, #4]
 8017be0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017be8:	69db      	ldr	r3, [r3, #28]
 8017bea:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	781b      	ldrb	r3, [r3, #0]
 8017bf0:	b2db      	uxtb	r3, r3
 8017bf2:	2b0b      	cmp	r3, #11
 8017bf4:	d10d      	bne.n	8017c12 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8017bf6:	7afb      	ldrb	r3, [r7, #11]
 8017bf8:	2234      	movs	r2, #52	; 0x34
 8017bfa:	fb02 f303 	mul.w	r3, r2, r3
 8017bfe:	3390      	adds	r3, #144	; 0x90
 8017c00:	697a      	ldr	r2, [r7, #20]
 8017c02:	4413      	add	r3, r2
 8017c04:	2234      	movs	r2, #52	; 0x34
 8017c06:	4619      	mov	r1, r3
 8017c08:	6878      	ldr	r0, [r7, #4]
 8017c0a:	f006 fb9d 	bl	801e348 <memcpy>
    return USBH_OK;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	e000      	b.n	8017c14 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8017c12:	2302      	movs	r3, #2
  }
}
 8017c14:	4618      	mov	r0, r3
 8017c16:	3718      	adds	r7, #24
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd80      	pop	{r7, pc}

08017c1c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b088      	sub	sp, #32
 8017c20:	af02      	add	r7, sp, #8
 8017c22:	60f8      	str	r0, [r7, #12]
 8017c24:	607a      	str	r2, [r7, #4]
 8017c26:	603b      	str	r3, [r7, #0]
 8017c28:	460b      	mov	r3, r1
 8017c2a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017c32:	69db      	ldr	r3, [r3, #28]
 8017c34:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d00e      	beq.n	8017c60 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	781b      	ldrb	r3, [r3, #0]
 8017c46:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8017c48:	2b0b      	cmp	r3, #11
 8017c4a:	d109      	bne.n	8017c60 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8017c4c:	7afb      	ldrb	r3, [r7, #11]
 8017c4e:	697a      	ldr	r2, [r7, #20]
 8017c50:	2134      	movs	r1, #52	; 0x34
 8017c52:	fb01 f303 	mul.w	r3, r1, r3
 8017c56:	4413      	add	r3, r2
 8017c58:	3390      	adds	r3, #144	; 0x90
 8017c5a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8017c5c:	2b01      	cmp	r3, #1
 8017c5e:	d001      	beq.n	8017c64 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8017c60:	2302      	movs	r3, #2
 8017c62:	e040      	b.n	8017ce6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8017c64:	697b      	ldr	r3, [r7, #20]
 8017c66:	2206      	movs	r2, #6
 8017c68:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8017c6a:	7afb      	ldrb	r3, [r7, #11]
 8017c6c:	697a      	ldr	r2, [r7, #20]
 8017c6e:	2134      	movs	r1, #52	; 0x34
 8017c70:	fb01 f303 	mul.w	r3, r1, r3
 8017c74:	4413      	add	r3, r2
 8017c76:	3390      	adds	r3, #144	; 0x90
 8017c78:	2206      	movs	r2, #6
 8017c7a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8017c7c:	7afb      	ldrb	r3, [r7, #11]
 8017c7e:	b29a      	uxth	r2, r3
 8017c80:	697b      	ldr	r3, [r7, #20]
 8017c82:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8017c86:	7af9      	ldrb	r1, [r7, #11]
 8017c88:	6a3b      	ldr	r3, [r7, #32]
 8017c8a:	9300      	str	r3, [sp, #0]
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	687a      	ldr	r2, [r7, #4]
 8017c90:	68f8      	ldr	r0, [r7, #12]
 8017c92:	f000 fd78 	bl	8018786 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017c9c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8017c9e:	e016      	b.n	8017cce <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8017ca6:	693b      	ldr	r3, [r7, #16]
 8017ca8:	1ad2      	subs	r2, r2, r3
 8017caa:	6a3b      	ldr	r3, [r7, #32]
 8017cac:	f242 7110 	movw	r1, #10000	; 0x2710
 8017cb0:	fb01 f303 	mul.w	r3, r1, r3
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d805      	bhi.n	8017cc4 <USBH_MSC_Read+0xa8>
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d104      	bne.n	8017cce <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8017cc4:	697b      	ldr	r3, [r7, #20]
 8017cc6:	2201      	movs	r2, #1
 8017cc8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8017cca:	2302      	movs	r3, #2
 8017ccc:	e00b      	b.n	8017ce6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8017cce:	7afb      	ldrb	r3, [r7, #11]
 8017cd0:	4619      	mov	r1, r3
 8017cd2:	68f8      	ldr	r0, [r7, #12]
 8017cd4:	f7ff fe89 	bl	80179ea <USBH_MSC_RdWrProcess>
 8017cd8:	4603      	mov	r3, r0
 8017cda:	2b01      	cmp	r3, #1
 8017cdc:	d0e0      	beq.n	8017ca0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8017cde:	697b      	ldr	r3, [r7, #20]
 8017ce0:	2201      	movs	r2, #1
 8017ce2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8017ce4:	2300      	movs	r3, #0
}
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	3718      	adds	r7, #24
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}

08017cee <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8017cee:	b580      	push	{r7, lr}
 8017cf0:	b088      	sub	sp, #32
 8017cf2:	af02      	add	r7, sp, #8
 8017cf4:	60f8      	str	r0, [r7, #12]
 8017cf6:	607a      	str	r2, [r7, #4]
 8017cf8:	603b      	str	r3, [r7, #0]
 8017cfa:	460b      	mov	r3, r1
 8017cfc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017d04:	69db      	ldr	r3, [r3, #28]
 8017d06:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017d0e:	b2db      	uxtb	r3, r3
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d00e      	beq.n	8017d32 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	781b      	ldrb	r3, [r3, #0]
 8017d18:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8017d1a:	2b0b      	cmp	r3, #11
 8017d1c:	d109      	bne.n	8017d32 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8017d1e:	7afb      	ldrb	r3, [r7, #11]
 8017d20:	697a      	ldr	r2, [r7, #20]
 8017d22:	2134      	movs	r1, #52	; 0x34
 8017d24:	fb01 f303 	mul.w	r3, r1, r3
 8017d28:	4413      	add	r3, r2
 8017d2a:	3390      	adds	r3, #144	; 0x90
 8017d2c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8017d2e:	2b01      	cmp	r3, #1
 8017d30:	d001      	beq.n	8017d36 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8017d32:	2302      	movs	r3, #2
 8017d34:	e040      	b.n	8017db8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8017d36:	697b      	ldr	r3, [r7, #20]
 8017d38:	2207      	movs	r2, #7
 8017d3a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8017d3c:	7afb      	ldrb	r3, [r7, #11]
 8017d3e:	697a      	ldr	r2, [r7, #20]
 8017d40:	2134      	movs	r1, #52	; 0x34
 8017d42:	fb01 f303 	mul.w	r3, r1, r3
 8017d46:	4413      	add	r3, r2
 8017d48:	3390      	adds	r3, #144	; 0x90
 8017d4a:	2207      	movs	r2, #7
 8017d4c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8017d4e:	7afb      	ldrb	r3, [r7, #11]
 8017d50:	b29a      	uxth	r2, r3
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8017d58:	7af9      	ldrb	r1, [r7, #11]
 8017d5a:	6a3b      	ldr	r3, [r7, #32]
 8017d5c:	9300      	str	r3, [sp, #0]
 8017d5e:	683b      	ldr	r3, [r7, #0]
 8017d60:	687a      	ldr	r2, [r7, #4]
 8017d62:	68f8      	ldr	r0, [r7, #12]
 8017d64:	f000 fca4 	bl	80186b0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017d6e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8017d70:	e016      	b.n	8017da0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8017d78:	693b      	ldr	r3, [r7, #16]
 8017d7a:	1ad2      	subs	r2, r2, r3
 8017d7c:	6a3b      	ldr	r3, [r7, #32]
 8017d7e:	f242 7110 	movw	r1, #10000	; 0x2710
 8017d82:	fb01 f303 	mul.w	r3, r1, r3
 8017d86:	429a      	cmp	r2, r3
 8017d88:	d805      	bhi.n	8017d96 <USBH_MSC_Write+0xa8>
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017d90:	b2db      	uxtb	r3, r3
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d104      	bne.n	8017da0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8017d96:	697b      	ldr	r3, [r7, #20]
 8017d98:	2201      	movs	r2, #1
 8017d9a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8017d9c:	2302      	movs	r3, #2
 8017d9e:	e00b      	b.n	8017db8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8017da0:	7afb      	ldrb	r3, [r7, #11]
 8017da2:	4619      	mov	r1, r3
 8017da4:	68f8      	ldr	r0, [r7, #12]
 8017da6:	f7ff fe20 	bl	80179ea <USBH_MSC_RdWrProcess>
 8017daa:	4603      	mov	r3, r0
 8017dac:	2b01      	cmp	r3, #1
 8017dae:	d0e0      	beq.n	8017d72 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8017db0:	697b      	ldr	r3, [r7, #20]
 8017db2:	2201      	movs	r2, #1
 8017db4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8017db6:	2300      	movs	r3, #0
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	3718      	adds	r7, #24
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}

08017dc0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b082      	sub	sp, #8
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	2221      	movs	r2, #33	; 0x21
 8017dcc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	22ff      	movs	r2, #255	; 0xff
 8017dd2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	2200      	movs	r2, #0
 8017dde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	2200      	movs	r2, #0
 8017de4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8017de6:	2200      	movs	r2, #0
 8017de8:	2100      	movs	r1, #0
 8017dea:	6878      	ldr	r0, [r7, #4]
 8017dec:	f001 fdab 	bl	8019946 <USBH_CtlReq>
 8017df0:	4603      	mov	r3, r0
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	3708      	adds	r7, #8
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}

08017dfa <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8017dfa:	b580      	push	{r7, lr}
 8017dfc:	b082      	sub	sp, #8
 8017dfe:	af00      	add	r7, sp, #0
 8017e00:	6078      	str	r0, [r7, #4]
 8017e02:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	22a1      	movs	r2, #161	; 0xa1
 8017e08:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	22fe      	movs	r2, #254	; 0xfe
 8017e0e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	2200      	movs	r2, #0
 8017e14:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2200      	movs	r2, #0
 8017e1a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	2201      	movs	r2, #1
 8017e20:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8017e22:	2201      	movs	r2, #1
 8017e24:	6839      	ldr	r1, [r7, #0]
 8017e26:	6878      	ldr	r0, [r7, #4]
 8017e28:	f001 fd8d 	bl	8019946 <USBH_CtlReq>
 8017e2c:	4603      	mov	r3, r0
}
 8017e2e:	4618      	mov	r0, r3
 8017e30:	3708      	adds	r7, #8
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}
	...

08017e38 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8017e38:	b480      	push	{r7}
 8017e3a:	b085      	sub	sp, #20
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017e46:	69db      	ldr	r3, [r3, #28]
 8017e48:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	4a09      	ldr	r2, [pc, #36]	; (8017e74 <USBH_MSC_BOT_Init+0x3c>)
 8017e4e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	4a09      	ldr	r2, [pc, #36]	; (8017e78 <USBH_MSC_BOT_Init+0x40>)
 8017e54:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	2201      	movs	r2, #1
 8017e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	2201      	movs	r2, #1
 8017e62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8017e66:	2300      	movs	r3, #0
}
 8017e68:	4618      	mov	r0, r3
 8017e6a:	3714      	adds	r7, #20
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e72:	4770      	bx	lr
 8017e74:	43425355 	.word	0x43425355
 8017e78:	20304050 	.word	0x20304050

08017e7c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b088      	sub	sp, #32
 8017e80:	af02      	add	r7, sp, #8
 8017e82:	6078      	str	r0, [r7, #4]
 8017e84:	460b      	mov	r3, r1
 8017e86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8017e88:	2301      	movs	r3, #1
 8017e8a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8017e90:	2301      	movs	r3, #1
 8017e92:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8017e94:	2300      	movs	r3, #0
 8017e96:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017e9e:	69db      	ldr	r3, [r3, #28]
 8017ea0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8017ea6:	693b      	ldr	r3, [r7, #16]
 8017ea8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017eac:	3b01      	subs	r3, #1
 8017eae:	2b0a      	cmp	r3, #10
 8017eb0:	f200 819e 	bhi.w	80181f0 <USBH_MSC_BOT_Process+0x374>
 8017eb4:	a201      	add	r2, pc, #4	; (adr r2, 8017ebc <USBH_MSC_BOT_Process+0x40>)
 8017eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017eba:	bf00      	nop
 8017ebc:	08017ee9 	.word	0x08017ee9
 8017ec0:	08017f11 	.word	0x08017f11
 8017ec4:	08017f7b 	.word	0x08017f7b
 8017ec8:	08017f99 	.word	0x08017f99
 8017ecc:	0801801d 	.word	0x0801801d
 8017ed0:	0801803f 	.word	0x0801803f
 8017ed4:	080180d7 	.word	0x080180d7
 8017ed8:	080180f3 	.word	0x080180f3
 8017edc:	08018145 	.word	0x08018145
 8017ee0:	08018175 	.word	0x08018175
 8017ee4:	080181d7 	.word	0x080181d7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8017ee8:	693b      	ldr	r3, [r7, #16]
 8017eea:	78fa      	ldrb	r2, [r7, #3]
 8017eec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8017ef0:	693b      	ldr	r3, [r7, #16]
 8017ef2:	2202      	movs	r2, #2
 8017ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8017ef8:	693b      	ldr	r3, [r7, #16]
 8017efa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8017efe:	693b      	ldr	r3, [r7, #16]
 8017f00:	795b      	ldrb	r3, [r3, #5]
 8017f02:	2201      	movs	r2, #1
 8017f04:	9200      	str	r2, [sp, #0]
 8017f06:	221f      	movs	r2, #31
 8017f08:	6878      	ldr	r0, [r7, #4]
 8017f0a:	f001 ff2a 	bl	8019d62 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8017f0e:	e17e      	b.n	801820e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	795b      	ldrb	r3, [r3, #5]
 8017f14:	4619      	mov	r1, r3
 8017f16:	6878      	ldr	r0, [r7, #4]
 8017f18:	f006 f8f4 	bl	801e104 <USBH_LL_GetURBState>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8017f20:	7d3b      	ldrb	r3, [r7, #20]
 8017f22:	2b01      	cmp	r3, #1
 8017f24:	d118      	bne.n	8017f58 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8017f26:	693b      	ldr	r3, [r7, #16]
 8017f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d00f      	beq.n	8017f4e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8017f34:	b25b      	sxtb	r3, r3
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	da04      	bge.n	8017f44 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8017f3a:	693b      	ldr	r3, [r7, #16]
 8017f3c:	2203      	movs	r2, #3
 8017f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8017f42:	e157      	b.n	80181f4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	2205      	movs	r2, #5
 8017f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017f4c:	e152      	b.n	80181f4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8017f4e:	693b      	ldr	r3, [r7, #16]
 8017f50:	2207      	movs	r2, #7
 8017f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017f56:	e14d      	b.n	80181f4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017f58:	7d3b      	ldrb	r3, [r7, #20]
 8017f5a:	2b02      	cmp	r3, #2
 8017f5c:	d104      	bne.n	8017f68 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8017f5e:	693b      	ldr	r3, [r7, #16]
 8017f60:	2201      	movs	r2, #1
 8017f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017f66:	e145      	b.n	80181f4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8017f68:	7d3b      	ldrb	r3, [r7, #20]
 8017f6a:	2b05      	cmp	r3, #5
 8017f6c:	f040 8142 	bne.w	80181f4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8017f70:	693b      	ldr	r3, [r7, #16]
 8017f72:	220a      	movs	r2, #10
 8017f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8017f78:	e13c      	b.n	80181f4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8017f7a:	693b      	ldr	r3, [r7, #16]
 8017f7c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017f80:	693b      	ldr	r3, [r7, #16]
 8017f82:	895a      	ldrh	r2, [r3, #10]
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	791b      	ldrb	r3, [r3, #4]
 8017f88:	6878      	ldr	r0, [r7, #4]
 8017f8a:	f001 ff0f 	bl	8019dac <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8017f8e:	693b      	ldr	r3, [r7, #16]
 8017f90:	2204      	movs	r2, #4
 8017f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8017f96:	e13a      	b.n	801820e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8017f98:	693b      	ldr	r3, [r7, #16]
 8017f9a:	791b      	ldrb	r3, [r3, #4]
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	6878      	ldr	r0, [r7, #4]
 8017fa0:	f006 f8b0 	bl	801e104 <USBH_LL_GetURBState>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8017fa8:	7d3b      	ldrb	r3, [r7, #20]
 8017faa:	2b01      	cmp	r3, #1
 8017fac:	d12d      	bne.n	801800a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8017fae:	693b      	ldr	r3, [r7, #16]
 8017fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fb2:	693a      	ldr	r2, [r7, #16]
 8017fb4:	8952      	ldrh	r2, [r2, #10]
 8017fb6:	4293      	cmp	r3, r2
 8017fb8:	d910      	bls.n	8017fdc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8017fba:	693b      	ldr	r3, [r7, #16]
 8017fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017fc0:	693a      	ldr	r2, [r7, #16]
 8017fc2:	8952      	ldrh	r2, [r2, #10]
 8017fc4:	441a      	add	r2, r3
 8017fc6:	693b      	ldr	r3, [r7, #16]
 8017fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8017fcc:	693b      	ldr	r3, [r7, #16]
 8017fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fd0:	693a      	ldr	r2, [r7, #16]
 8017fd2:	8952      	ldrh	r2, [r2, #10]
 8017fd4:	1a9a      	subs	r2, r3, r2
 8017fd6:	693b      	ldr	r3, [r7, #16]
 8017fd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8017fda:	e002      	b.n	8017fe2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8017fdc:	693b      	ldr	r3, [r7, #16]
 8017fde:	2200      	movs	r2, #0
 8017fe0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8017fe2:	693b      	ldr	r3, [r7, #16]
 8017fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d00a      	beq.n	8018000 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017ff0:	693b      	ldr	r3, [r7, #16]
 8017ff2:	895a      	ldrh	r2, [r3, #10]
 8017ff4:	693b      	ldr	r3, [r7, #16]
 8017ff6:	791b      	ldrb	r3, [r3, #4]
 8017ff8:	6878      	ldr	r0, [r7, #4]
 8017ffa:	f001 fed7 	bl	8019dac <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8017ffe:	e0fb      	b.n	80181f8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8018000:	693b      	ldr	r3, [r7, #16]
 8018002:	2207      	movs	r2, #7
 8018004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8018008:	e0f6      	b.n	80181f8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 801800a:	7d3b      	ldrb	r3, [r7, #20]
 801800c:	2b05      	cmp	r3, #5
 801800e:	f040 80f3 	bne.w	80181f8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8018012:	693b      	ldr	r3, [r7, #16]
 8018014:	2209      	movs	r2, #9
 8018016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801801a:	e0ed      	b.n	80181f8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 801801c:	693b      	ldr	r3, [r7, #16]
 801801e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8018022:	693b      	ldr	r3, [r7, #16]
 8018024:	891a      	ldrh	r2, [r3, #8]
 8018026:	693b      	ldr	r3, [r7, #16]
 8018028:	795b      	ldrb	r3, [r3, #5]
 801802a:	2001      	movs	r0, #1
 801802c:	9000      	str	r0, [sp, #0]
 801802e:	6878      	ldr	r0, [r7, #4]
 8018030:	f001 fe97 	bl	8019d62 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8018034:	693b      	ldr	r3, [r7, #16]
 8018036:	2206      	movs	r2, #6
 8018038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 801803c:	e0e7      	b.n	801820e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 801803e:	693b      	ldr	r3, [r7, #16]
 8018040:	795b      	ldrb	r3, [r3, #5]
 8018042:	4619      	mov	r1, r3
 8018044:	6878      	ldr	r0, [r7, #4]
 8018046:	f006 f85d 	bl	801e104 <USBH_LL_GetURBState>
 801804a:	4603      	mov	r3, r0
 801804c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 801804e:	7d3b      	ldrb	r3, [r7, #20]
 8018050:	2b01      	cmp	r3, #1
 8018052:	d12f      	bne.n	80180b4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8018054:	693b      	ldr	r3, [r7, #16]
 8018056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018058:	693a      	ldr	r2, [r7, #16]
 801805a:	8912      	ldrh	r2, [r2, #8]
 801805c:	4293      	cmp	r3, r2
 801805e:	d910      	bls.n	8018082 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8018060:	693b      	ldr	r3, [r7, #16]
 8018062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018066:	693a      	ldr	r2, [r7, #16]
 8018068:	8912      	ldrh	r2, [r2, #8]
 801806a:	441a      	add	r2, r3
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8018072:	693b      	ldr	r3, [r7, #16]
 8018074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018076:	693a      	ldr	r2, [r7, #16]
 8018078:	8912      	ldrh	r2, [r2, #8]
 801807a:	1a9a      	subs	r2, r3, r2
 801807c:	693b      	ldr	r3, [r7, #16]
 801807e:	65da      	str	r2, [r3, #92]	; 0x5c
 8018080:	e002      	b.n	8018088 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8018082:	693b      	ldr	r3, [r7, #16]
 8018084:	2200      	movs	r2, #0
 8018086:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8018088:	693b      	ldr	r3, [r7, #16]
 801808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801808c:	2b00      	cmp	r3, #0
 801808e:	d00c      	beq.n	80180aa <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8018090:	693b      	ldr	r3, [r7, #16]
 8018092:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8018096:	693b      	ldr	r3, [r7, #16]
 8018098:	891a      	ldrh	r2, [r3, #8]
 801809a:	693b      	ldr	r3, [r7, #16]
 801809c:	795b      	ldrb	r3, [r3, #5]
 801809e:	2001      	movs	r0, #1
 80180a0:	9000      	str	r0, [sp, #0]
 80180a2:	6878      	ldr	r0, [r7, #4]
 80180a4:	f001 fe5d 	bl	8019d62 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80180a8:	e0a8      	b.n	80181fc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80180aa:	693b      	ldr	r3, [r7, #16]
 80180ac:	2207      	movs	r2, #7
 80180ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80180b2:	e0a3      	b.n	80181fc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80180b4:	7d3b      	ldrb	r3, [r7, #20]
 80180b6:	2b02      	cmp	r3, #2
 80180b8:	d104      	bne.n	80180c4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80180ba:	693b      	ldr	r3, [r7, #16]
 80180bc:	2205      	movs	r2, #5
 80180be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80180c2:	e09b      	b.n	80181fc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80180c4:	7d3b      	ldrb	r3, [r7, #20]
 80180c6:	2b05      	cmp	r3, #5
 80180c8:	f040 8098 	bne.w	80181fc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80180cc:	693b      	ldr	r3, [r7, #16]
 80180ce:	220a      	movs	r2, #10
 80180d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80180d4:	e092      	b.n	80181fc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80180d6:	693b      	ldr	r3, [r7, #16]
 80180d8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80180dc:	693b      	ldr	r3, [r7, #16]
 80180de:	791b      	ldrb	r3, [r3, #4]
 80180e0:	220d      	movs	r2, #13
 80180e2:	6878      	ldr	r0, [r7, #4]
 80180e4:	f001 fe62 	bl	8019dac <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80180e8:	693b      	ldr	r3, [r7, #16]
 80180ea:	2208      	movs	r2, #8
 80180ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80180f0:	e08d      	b.n	801820e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80180f2:	693b      	ldr	r3, [r7, #16]
 80180f4:	791b      	ldrb	r3, [r3, #4]
 80180f6:	4619      	mov	r1, r3
 80180f8:	6878      	ldr	r0, [r7, #4]
 80180fa:	f006 f803 	bl	801e104 <USBH_LL_GetURBState>
 80180fe:	4603      	mov	r3, r0
 8018100:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8018102:	7d3b      	ldrb	r3, [r7, #20]
 8018104:	2b01      	cmp	r3, #1
 8018106:	d115      	bne.n	8018134 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8018108:	693b      	ldr	r3, [r7, #16]
 801810a:	2201      	movs	r2, #1
 801810c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8018110:	693b      	ldr	r3, [r7, #16]
 8018112:	2201      	movs	r2, #1
 8018114:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	f000 f8a9 	bl	8018270 <USBH_MSC_DecodeCSW>
 801811e:	4603      	mov	r3, r0
 8018120:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8018122:	7d7b      	ldrb	r3, [r7, #21]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d102      	bne.n	801812e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8018128:	2300      	movs	r3, #0
 801812a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 801812c:	e068      	b.n	8018200 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 801812e:	2302      	movs	r3, #2
 8018130:	75fb      	strb	r3, [r7, #23]
      break;
 8018132:	e065      	b.n	8018200 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8018134:	7d3b      	ldrb	r3, [r7, #20]
 8018136:	2b05      	cmp	r3, #5
 8018138:	d162      	bne.n	8018200 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 801813a:	693b      	ldr	r3, [r7, #16]
 801813c:	2209      	movs	r2, #9
 801813e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8018142:	e05d      	b.n	8018200 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8018144:	78fb      	ldrb	r3, [r7, #3]
 8018146:	2200      	movs	r2, #0
 8018148:	4619      	mov	r1, r3
 801814a:	6878      	ldr	r0, [r7, #4]
 801814c:	f000 f864 	bl	8018218 <USBH_MSC_BOT_Abort>
 8018150:	4603      	mov	r3, r0
 8018152:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8018154:	7dbb      	ldrb	r3, [r7, #22]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d104      	bne.n	8018164 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 801815a:	693b      	ldr	r3, [r7, #16]
 801815c:	2207      	movs	r2, #7
 801815e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8018162:	e04f      	b.n	8018204 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8018164:	7dbb      	ldrb	r3, [r7, #22]
 8018166:	2b04      	cmp	r3, #4
 8018168:	d14c      	bne.n	8018204 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	220b      	movs	r2, #11
 801816e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8018172:	e047      	b.n	8018204 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8018174:	78fb      	ldrb	r3, [r7, #3]
 8018176:	2201      	movs	r2, #1
 8018178:	4619      	mov	r1, r3
 801817a:	6878      	ldr	r0, [r7, #4]
 801817c:	f000 f84c 	bl	8018218 <USBH_MSC_BOT_Abort>
 8018180:	4603      	mov	r3, r0
 8018182:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8018184:	7dbb      	ldrb	r3, [r7, #22]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d11d      	bne.n	80181c6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 801818a:	693b      	ldr	r3, [r7, #16]
 801818c:	795b      	ldrb	r3, [r3, #5]
 801818e:	4619      	mov	r1, r3
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	f006 f814 	bl	801e1be <USBH_LL_GetToggle>
 8018196:	4603      	mov	r3, r0
 8018198:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	7959      	ldrb	r1, [r3, #5]
 801819e:	7bfb      	ldrb	r3, [r7, #15]
 80181a0:	f1c3 0301 	rsb	r3, r3, #1
 80181a4:	b2db      	uxtb	r3, r3
 80181a6:	461a      	mov	r2, r3
 80181a8:	6878      	ldr	r0, [r7, #4]
 80181aa:	f005 ffd5 	bl	801e158 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80181ae:	693b      	ldr	r3, [r7, #16]
 80181b0:	791b      	ldrb	r3, [r3, #4]
 80181b2:	2200      	movs	r2, #0
 80181b4:	4619      	mov	r1, r3
 80181b6:	6878      	ldr	r0, [r7, #4]
 80181b8:	f005 ffce 	bl	801e158 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80181bc:	693b      	ldr	r3, [r7, #16]
 80181be:	2209      	movs	r2, #9
 80181c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80181c4:	e020      	b.n	8018208 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80181c6:	7dbb      	ldrb	r3, [r7, #22]
 80181c8:	2b04      	cmp	r3, #4
 80181ca:	d11d      	bne.n	8018208 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80181cc:	693b      	ldr	r3, [r7, #16]
 80181ce:	220b      	movs	r2, #11
 80181d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80181d4:	e018      	b.n	8018208 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	f7ff fdf2 	bl	8017dc0 <USBH_MSC_BOT_REQ_Reset>
 80181dc:	4603      	mov	r3, r0
 80181de:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80181e0:	7dfb      	ldrb	r3, [r7, #23]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d112      	bne.n	801820c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80181e6:	693b      	ldr	r3, [r7, #16]
 80181e8:	2201      	movs	r2, #1
 80181ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80181ee:	e00d      	b.n	801820c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80181f0:	bf00      	nop
 80181f2:	e00c      	b.n	801820e <USBH_MSC_BOT_Process+0x392>
      break;
 80181f4:	bf00      	nop
 80181f6:	e00a      	b.n	801820e <USBH_MSC_BOT_Process+0x392>
      break;
 80181f8:	bf00      	nop
 80181fa:	e008      	b.n	801820e <USBH_MSC_BOT_Process+0x392>
      break;
 80181fc:	bf00      	nop
 80181fe:	e006      	b.n	801820e <USBH_MSC_BOT_Process+0x392>
      break;
 8018200:	bf00      	nop
 8018202:	e004      	b.n	801820e <USBH_MSC_BOT_Process+0x392>
      break;
 8018204:	bf00      	nop
 8018206:	e002      	b.n	801820e <USBH_MSC_BOT_Process+0x392>
      break;
 8018208:	bf00      	nop
 801820a:	e000      	b.n	801820e <USBH_MSC_BOT_Process+0x392>
      break;
 801820c:	bf00      	nop
  }
  return status;
 801820e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018210:	4618      	mov	r0, r3
 8018212:	3718      	adds	r7, #24
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}

08018218 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b084      	sub	sp, #16
 801821c:	af00      	add	r7, sp, #0
 801821e:	6078      	str	r0, [r7, #4]
 8018220:	460b      	mov	r3, r1
 8018222:	70fb      	strb	r3, [r7, #3]
 8018224:	4613      	mov	r3, r2
 8018226:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8018228:	2302      	movs	r3, #2
 801822a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018232:	69db      	ldr	r3, [r3, #28]
 8018234:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8018236:	78bb      	ldrb	r3, [r7, #2]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d002      	beq.n	8018242 <USBH_MSC_BOT_Abort+0x2a>
 801823c:	2b01      	cmp	r3, #1
 801823e:	d009      	beq.n	8018254 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8018240:	e011      	b.n	8018266 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8018242:	68bb      	ldr	r3, [r7, #8]
 8018244:	79db      	ldrb	r3, [r3, #7]
 8018246:	4619      	mov	r1, r3
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	f001 f99c 	bl	8019586 <USBH_ClrFeature>
 801824e:	4603      	mov	r3, r0
 8018250:	73fb      	strb	r3, [r7, #15]
      break;
 8018252:	e008      	b.n	8018266 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	799b      	ldrb	r3, [r3, #6]
 8018258:	4619      	mov	r1, r3
 801825a:	6878      	ldr	r0, [r7, #4]
 801825c:	f001 f993 	bl	8019586 <USBH_ClrFeature>
 8018260:	4603      	mov	r3, r0
 8018262:	73fb      	strb	r3, [r7, #15]
      break;
 8018264:	bf00      	nop
  }
  return status;
 8018266:	7bfb      	ldrb	r3, [r7, #15]
}
 8018268:	4618      	mov	r0, r3
 801826a:	3710      	adds	r7, #16
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}

08018270 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b084      	sub	sp, #16
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801827e:	69db      	ldr	r3, [r3, #28]
 8018280:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8018282:	2301      	movs	r3, #1
 8018284:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	791b      	ldrb	r3, [r3, #4]
 801828a:	4619      	mov	r1, r3
 801828c:	6878      	ldr	r0, [r7, #4]
 801828e:	f005 fea7 	bl	801dfe0 <USBH_LL_GetLastXferSize>
 8018292:	4603      	mov	r3, r0
 8018294:	2b0d      	cmp	r3, #13
 8018296:	d002      	beq.n	801829e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8018298:	2302      	movs	r3, #2
 801829a:	73fb      	strb	r3, [r7, #15]
 801829c:	e024      	b.n	80182e8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 801829e:	68bb      	ldr	r3, [r7, #8]
 80182a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80182a2:	4a14      	ldr	r2, [pc, #80]	; (80182f4 <USBH_MSC_DecodeCSW+0x84>)
 80182a4:	4293      	cmp	r3, r2
 80182a6:	d11d      	bne.n	80182e4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80182ac:	68bb      	ldr	r3, [r7, #8]
 80182ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80182b0:	429a      	cmp	r2, r3
 80182b2:	d119      	bne.n	80182e8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d102      	bne.n	80182c4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80182be:	2300      	movs	r3, #0
 80182c0:	73fb      	strb	r3, [r7, #15]
 80182c2:	e011      	b.n	80182e8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80182c4:	68bb      	ldr	r3, [r7, #8]
 80182c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80182ca:	2b01      	cmp	r3, #1
 80182cc:	d102      	bne.n	80182d4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80182ce:	2301      	movs	r3, #1
 80182d0:	73fb      	strb	r3, [r7, #15]
 80182d2:	e009      	b.n	80182e8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80182d4:	68bb      	ldr	r3, [r7, #8]
 80182d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80182da:	2b02      	cmp	r3, #2
 80182dc:	d104      	bne.n	80182e8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80182de:	2302      	movs	r3, #2
 80182e0:	73fb      	strb	r3, [r7, #15]
 80182e2:	e001      	b.n	80182e8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80182e4:	2302      	movs	r3, #2
 80182e6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80182e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80182ea:	4618      	mov	r0, r3
 80182ec:	3710      	adds	r7, #16
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bd80      	pop	{r7, pc}
 80182f2:	bf00      	nop
 80182f4:	53425355 	.word	0x53425355

080182f8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b084      	sub	sp, #16
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
 8018300:	460b      	mov	r3, r1
 8018302:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8018304:	2302      	movs	r3, #2
 8018306:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801830e:	69db      	ldr	r3, [r3, #28]
 8018310:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8018318:	2b01      	cmp	r3, #1
 801831a:	d002      	beq.n	8018322 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 801831c:	2b02      	cmp	r3, #2
 801831e:	d021      	beq.n	8018364 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8018320:	e028      	b.n	8018374 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8018322:	68bb      	ldr	r3, [r7, #8]
 8018324:	2200      	movs	r2, #0
 8018326:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	2200      	movs	r2, #0
 801832c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8018330:	68bb      	ldr	r3, [r7, #8]
 8018332:	220a      	movs	r2, #10
 8018334:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	3363      	adds	r3, #99	; 0x63
 801833c:	2210      	movs	r2, #16
 801833e:	2100      	movs	r1, #0
 8018340:	4618      	mov	r0, r3
 8018342:	f006 f80f 	bl	801e364 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	2200      	movs	r2, #0
 801834a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 801834e:	68bb      	ldr	r3, [r7, #8]
 8018350:	2201      	movs	r2, #1
 8018352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8018356:	68bb      	ldr	r3, [r7, #8]
 8018358:	2202      	movs	r2, #2
 801835a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 801835e:	2301      	movs	r3, #1
 8018360:	73fb      	strb	r3, [r7, #15]
      break;
 8018362:	e007      	b.n	8018374 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8018364:	78fb      	ldrb	r3, [r7, #3]
 8018366:	4619      	mov	r1, r3
 8018368:	6878      	ldr	r0, [r7, #4]
 801836a:	f7ff fd87 	bl	8017e7c <USBH_MSC_BOT_Process>
 801836e:	4603      	mov	r3, r0
 8018370:	73fb      	strb	r3, [r7, #15]
      break;
 8018372:	bf00      	nop
  }

  return error;
 8018374:	7bfb      	ldrb	r3, [r7, #15]
}
 8018376:	4618      	mov	r0, r3
 8018378:	3710      	adds	r7, #16
 801837a:	46bd      	mov	sp, r7
 801837c:	bd80      	pop	{r7, pc}

0801837e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 801837e:	b580      	push	{r7, lr}
 8018380:	b086      	sub	sp, #24
 8018382:	af00      	add	r7, sp, #0
 8018384:	60f8      	str	r0, [r7, #12]
 8018386:	460b      	mov	r3, r1
 8018388:	607a      	str	r2, [r7, #4]
 801838a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 801838c:	2301      	movs	r3, #1
 801838e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018396:	69db      	ldr	r3, [r3, #28]
 8018398:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 801839a:	693b      	ldr	r3, [r7, #16]
 801839c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80183a0:	2b01      	cmp	r3, #1
 80183a2:	d002      	beq.n	80183aa <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80183a4:	2b02      	cmp	r3, #2
 80183a6:	d027      	beq.n	80183f8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80183a8:	e05f      	b.n	801846a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80183aa:	693b      	ldr	r3, [r7, #16]
 80183ac:	2208      	movs	r2, #8
 80183ae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80183b0:	693b      	ldr	r3, [r7, #16]
 80183b2:	2280      	movs	r2, #128	; 0x80
 80183b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80183b8:	693b      	ldr	r3, [r7, #16]
 80183ba:	220a      	movs	r2, #10
 80183bc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80183c0:	693b      	ldr	r3, [r7, #16]
 80183c2:	3363      	adds	r3, #99	; 0x63
 80183c4:	2210      	movs	r2, #16
 80183c6:	2100      	movs	r1, #0
 80183c8:	4618      	mov	r0, r3
 80183ca:	f005 ffcb 	bl	801e364 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80183ce:	693b      	ldr	r3, [r7, #16]
 80183d0:	2225      	movs	r2, #37	; 0x25
 80183d2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80183d6:	693b      	ldr	r3, [r7, #16]
 80183d8:	2201      	movs	r2, #1
 80183da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80183de:	693b      	ldr	r3, [r7, #16]
 80183e0:	2202      	movs	r2, #2
 80183e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80183e6:	693b      	ldr	r3, [r7, #16]
 80183e8:	f103 0210 	add.w	r2, r3, #16
 80183ec:	693b      	ldr	r3, [r7, #16]
 80183ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80183f2:	2301      	movs	r3, #1
 80183f4:	75fb      	strb	r3, [r7, #23]
      break;
 80183f6:	e038      	b.n	801846a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80183f8:	7afb      	ldrb	r3, [r7, #11]
 80183fa:	4619      	mov	r1, r3
 80183fc:	68f8      	ldr	r0, [r7, #12]
 80183fe:	f7ff fd3d 	bl	8017e7c <USBH_MSC_BOT_Process>
 8018402:	4603      	mov	r3, r0
 8018404:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8018406:	7dfb      	ldrb	r3, [r7, #23]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d12d      	bne.n	8018468 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018412:	3303      	adds	r3, #3
 8018414:	781b      	ldrb	r3, [r3, #0]
 8018416:	461a      	mov	r2, r3
 8018418:	693b      	ldr	r3, [r7, #16]
 801841a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801841e:	3302      	adds	r3, #2
 8018420:	781b      	ldrb	r3, [r3, #0]
 8018422:	021b      	lsls	r3, r3, #8
 8018424:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8018426:	693b      	ldr	r3, [r7, #16]
 8018428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801842c:	3301      	adds	r3, #1
 801842e:	781b      	ldrb	r3, [r3, #0]
 8018430:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8018432:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8018434:	693b      	ldr	r3, [r7, #16]
 8018436:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801843a:	781b      	ldrb	r3, [r3, #0]
 801843c:	061b      	lsls	r3, r3, #24
 801843e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8018444:	693b      	ldr	r3, [r7, #16]
 8018446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801844a:	3307      	adds	r3, #7
 801844c:	781b      	ldrb	r3, [r3, #0]
 801844e:	b29a      	uxth	r2, r3
 8018450:	693b      	ldr	r3, [r7, #16]
 8018452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018456:	3306      	adds	r3, #6
 8018458:	781b      	ldrb	r3, [r3, #0]
 801845a:	b29b      	uxth	r3, r3
 801845c:	021b      	lsls	r3, r3, #8
 801845e:	b29b      	uxth	r3, r3
 8018460:	4313      	orrs	r3, r2
 8018462:	b29a      	uxth	r2, r3
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	809a      	strh	r2, [r3, #4]
      break;
 8018468:	bf00      	nop
  }

  return error;
 801846a:	7dfb      	ldrb	r3, [r7, #23]
}
 801846c:	4618      	mov	r0, r3
 801846e:	3718      	adds	r7, #24
 8018470:	46bd      	mov	sp, r7
 8018472:	bd80      	pop	{r7, pc}

08018474 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b086      	sub	sp, #24
 8018478:	af00      	add	r7, sp, #0
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	460b      	mov	r3, r1
 801847e:	607a      	str	r2, [r7, #4]
 8018480:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8018482:	2302      	movs	r3, #2
 8018484:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801848c:	69db      	ldr	r3, [r3, #28]
 801848e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8018490:	693b      	ldr	r3, [r7, #16]
 8018492:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8018496:	2b01      	cmp	r3, #1
 8018498:	d002      	beq.n	80184a0 <USBH_MSC_SCSI_Inquiry+0x2c>
 801849a:	2b02      	cmp	r3, #2
 801849c:	d03d      	beq.n	801851a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 801849e:	e089      	b.n	80185b4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80184a0:	693b      	ldr	r3, [r7, #16]
 80184a2:	2224      	movs	r2, #36	; 0x24
 80184a4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80184a6:	693b      	ldr	r3, [r7, #16]
 80184a8:	2280      	movs	r2, #128	; 0x80
 80184aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80184ae:	693b      	ldr	r3, [r7, #16]
 80184b0:	220a      	movs	r2, #10
 80184b2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80184b6:	693b      	ldr	r3, [r7, #16]
 80184b8:	3363      	adds	r3, #99	; 0x63
 80184ba:	220a      	movs	r2, #10
 80184bc:	2100      	movs	r1, #0
 80184be:	4618      	mov	r0, r3
 80184c0:	f005 ff50 	bl	801e364 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80184c4:	693b      	ldr	r3, [r7, #16]
 80184c6:	2212      	movs	r2, #18
 80184c8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80184cc:	7afb      	ldrb	r3, [r7, #11]
 80184ce:	015b      	lsls	r3, r3, #5
 80184d0:	b2da      	uxtb	r2, r3
 80184d2:	693b      	ldr	r3, [r7, #16]
 80184d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80184d8:	693b      	ldr	r3, [r7, #16]
 80184da:	2200      	movs	r2, #0
 80184dc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80184e0:	693b      	ldr	r3, [r7, #16]
 80184e2:	2200      	movs	r2, #0
 80184e4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80184e8:	693b      	ldr	r3, [r7, #16]
 80184ea:	2224      	movs	r2, #36	; 0x24
 80184ec:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80184f0:	693b      	ldr	r3, [r7, #16]
 80184f2:	2200      	movs	r2, #0
 80184f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80184f8:	693b      	ldr	r3, [r7, #16]
 80184fa:	2201      	movs	r2, #1
 80184fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8018500:	693b      	ldr	r3, [r7, #16]
 8018502:	2202      	movs	r2, #2
 8018504:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8018508:	693b      	ldr	r3, [r7, #16]
 801850a:	f103 0210 	add.w	r2, r3, #16
 801850e:	693b      	ldr	r3, [r7, #16]
 8018510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8018514:	2301      	movs	r3, #1
 8018516:	75fb      	strb	r3, [r7, #23]
      break;
 8018518:	e04c      	b.n	80185b4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 801851a:	7afb      	ldrb	r3, [r7, #11]
 801851c:	4619      	mov	r1, r3
 801851e:	68f8      	ldr	r0, [r7, #12]
 8018520:	f7ff fcac 	bl	8017e7c <USBH_MSC_BOT_Process>
 8018524:	4603      	mov	r3, r0
 8018526:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8018528:	7dfb      	ldrb	r3, [r7, #23]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d141      	bne.n	80185b2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 801852e:	2222      	movs	r2, #34	; 0x22
 8018530:	2100      	movs	r1, #0
 8018532:	6878      	ldr	r0, [r7, #4]
 8018534:	f005 ff16 	bl	801e364 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8018538:	693b      	ldr	r3, [r7, #16]
 801853a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	f003 031f 	and.w	r3, r3, #31
 8018544:	b2da      	uxtb	r2, r3
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 801854a:	693b      	ldr	r3, [r7, #16]
 801854c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018550:	781b      	ldrb	r3, [r3, #0]
 8018552:	095b      	lsrs	r3, r3, #5
 8018554:	b2da      	uxtb	r2, r3
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018560:	3301      	adds	r3, #1
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	b25b      	sxtb	r3, r3
 8018566:	2b00      	cmp	r3, #0
 8018568:	da03      	bge.n	8018572 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	2201      	movs	r2, #1
 801856e:	709a      	strb	r2, [r3, #2]
 8018570:	e002      	b.n	8018578 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2200      	movs	r2, #0
 8018576:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	1cd8      	adds	r0, r3, #3
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018582:	3308      	adds	r3, #8
 8018584:	2208      	movs	r2, #8
 8018586:	4619      	mov	r1, r3
 8018588:	f005 fede 	bl	801e348 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f103 000c 	add.w	r0, r3, #12
 8018592:	693b      	ldr	r3, [r7, #16]
 8018594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018598:	3310      	adds	r3, #16
 801859a:	2210      	movs	r2, #16
 801859c:	4619      	mov	r1, r3
 801859e:	f005 fed3 	bl	801e348 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	331d      	adds	r3, #29
 80185a6:	693a      	ldr	r2, [r7, #16]
 80185a8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80185ac:	3220      	adds	r2, #32
 80185ae:	6812      	ldr	r2, [r2, #0]
 80185b0:	601a      	str	r2, [r3, #0]
      break;
 80185b2:	bf00      	nop
  }

  return error;
 80185b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80185b6:	4618      	mov	r0, r3
 80185b8:	3718      	adds	r7, #24
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bd80      	pop	{r7, pc}

080185be <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80185be:	b580      	push	{r7, lr}
 80185c0:	b086      	sub	sp, #24
 80185c2:	af00      	add	r7, sp, #0
 80185c4:	60f8      	str	r0, [r7, #12]
 80185c6:	460b      	mov	r3, r1
 80185c8:	607a      	str	r2, [r7, #4]
 80185ca:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80185cc:	2302      	movs	r3, #2
 80185ce:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80185d6:	69db      	ldr	r3, [r3, #28]
 80185d8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80185da:	693b      	ldr	r3, [r7, #16]
 80185dc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80185e0:	2b01      	cmp	r3, #1
 80185e2:	d002      	beq.n	80185ea <USBH_MSC_SCSI_RequestSense+0x2c>
 80185e4:	2b02      	cmp	r3, #2
 80185e6:	d03d      	beq.n	8018664 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80185e8:	e05d      	b.n	80186a6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80185ea:	693b      	ldr	r3, [r7, #16]
 80185ec:	220e      	movs	r2, #14
 80185ee:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80185f0:	693b      	ldr	r3, [r7, #16]
 80185f2:	2280      	movs	r2, #128	; 0x80
 80185f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	220a      	movs	r2, #10
 80185fc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8018600:	693b      	ldr	r3, [r7, #16]
 8018602:	3363      	adds	r3, #99	; 0x63
 8018604:	2210      	movs	r2, #16
 8018606:	2100      	movs	r1, #0
 8018608:	4618      	mov	r0, r3
 801860a:	f005 feab 	bl	801e364 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 801860e:	693b      	ldr	r3, [r7, #16]
 8018610:	2203      	movs	r2, #3
 8018612:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8018616:	7afb      	ldrb	r3, [r7, #11]
 8018618:	015b      	lsls	r3, r3, #5
 801861a:	b2da      	uxtb	r2, r3
 801861c:	693b      	ldr	r3, [r7, #16]
 801861e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8018622:	693b      	ldr	r3, [r7, #16]
 8018624:	2200      	movs	r2, #0
 8018626:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 801862a:	693b      	ldr	r3, [r7, #16]
 801862c:	2200      	movs	r2, #0
 801862e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8018632:	693b      	ldr	r3, [r7, #16]
 8018634:	220e      	movs	r2, #14
 8018636:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 801863a:	693b      	ldr	r3, [r7, #16]
 801863c:	2200      	movs	r2, #0
 801863e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8018642:	693b      	ldr	r3, [r7, #16]
 8018644:	2201      	movs	r2, #1
 8018646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801864a:	693b      	ldr	r3, [r7, #16]
 801864c:	2202      	movs	r2, #2
 801864e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	f103 0210 	add.w	r2, r3, #16
 8018658:	693b      	ldr	r3, [r7, #16]
 801865a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 801865e:	2301      	movs	r3, #1
 8018660:	75fb      	strb	r3, [r7, #23]
      break;
 8018662:	e020      	b.n	80186a6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8018664:	7afb      	ldrb	r3, [r7, #11]
 8018666:	4619      	mov	r1, r3
 8018668:	68f8      	ldr	r0, [r7, #12]
 801866a:	f7ff fc07 	bl	8017e7c <USBH_MSC_BOT_Process>
 801866e:	4603      	mov	r3, r0
 8018670:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8018672:	7dfb      	ldrb	r3, [r7, #23]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d115      	bne.n	80186a4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8018678:	693b      	ldr	r3, [r7, #16]
 801867a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801867e:	3302      	adds	r3, #2
 8018680:	781b      	ldrb	r3, [r3, #0]
 8018682:	f003 030f 	and.w	r3, r3, #15
 8018686:	b2da      	uxtb	r2, r3
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 801868c:	693b      	ldr	r3, [r7, #16]
 801868e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018692:	7b1a      	ldrb	r2, [r3, #12]
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8018698:	693b      	ldr	r3, [r7, #16]
 801869a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801869e:	7b5a      	ldrb	r2, [r3, #13]
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	709a      	strb	r2, [r3, #2]
      break;
 80186a4:	bf00      	nop
  }

  return error;
 80186a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80186a8:	4618      	mov	r0, r3
 80186aa:	3718      	adds	r7, #24
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}

080186b0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b086      	sub	sp, #24
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	60f8      	str	r0, [r7, #12]
 80186b8:	607a      	str	r2, [r7, #4]
 80186ba:	603b      	str	r3, [r7, #0]
 80186bc:	460b      	mov	r3, r1
 80186be:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80186c0:	2302      	movs	r3, #2
 80186c2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80186ca:	69db      	ldr	r3, [r3, #28]
 80186cc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80186ce:	693b      	ldr	r3, [r7, #16]
 80186d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80186d4:	2b01      	cmp	r3, #1
 80186d6:	d002      	beq.n	80186de <USBH_MSC_SCSI_Write+0x2e>
 80186d8:	2b02      	cmp	r3, #2
 80186da:	d047      	beq.n	801876c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80186dc:	e04e      	b.n	801877c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80186de:	693b      	ldr	r3, [r7, #16]
 80186e0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80186e4:	461a      	mov	r2, r3
 80186e6:	6a3b      	ldr	r3, [r7, #32]
 80186e8:	fb03 f202 	mul.w	r2, r3, r2
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80186f0:	693b      	ldr	r3, [r7, #16]
 80186f2:	2200      	movs	r2, #0
 80186f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80186f8:	693b      	ldr	r3, [r7, #16]
 80186fa:	220a      	movs	r2, #10
 80186fc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	3363      	adds	r3, #99	; 0x63
 8018704:	2210      	movs	r2, #16
 8018706:	2100      	movs	r1, #0
 8018708:	4618      	mov	r0, r3
 801870a:	f005 fe2b 	bl	801e364 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 801870e:	693b      	ldr	r3, [r7, #16]
 8018710:	222a      	movs	r2, #42	; 0x2a
 8018712:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8018716:	79fa      	ldrb	r2, [r7, #7]
 8018718:	693b      	ldr	r3, [r7, #16]
 801871a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 801871e:	79ba      	ldrb	r2, [r7, #6]
 8018720:	693b      	ldr	r3, [r7, #16]
 8018722:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8018726:	797a      	ldrb	r2, [r7, #5]
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 801872e:	1d3b      	adds	r3, r7, #4
 8018730:	781a      	ldrb	r2, [r3, #0]
 8018732:	693b      	ldr	r3, [r7, #16]
 8018734:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8018738:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801873c:	693b      	ldr	r3, [r7, #16]
 801873e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8018742:	f107 0320 	add.w	r3, r7, #32
 8018746:	781a      	ldrb	r2, [r3, #0]
 8018748:	693b      	ldr	r3, [r7, #16]
 801874a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	2201      	movs	r2, #1
 8018752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8018756:	693b      	ldr	r3, [r7, #16]
 8018758:	2202      	movs	r2, #2
 801875a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 801875e:	693b      	ldr	r3, [r7, #16]
 8018760:	683a      	ldr	r2, [r7, #0]
 8018762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8018766:	2301      	movs	r3, #1
 8018768:	75fb      	strb	r3, [r7, #23]
      break;
 801876a:	e007      	b.n	801877c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 801876c:	7afb      	ldrb	r3, [r7, #11]
 801876e:	4619      	mov	r1, r3
 8018770:	68f8      	ldr	r0, [r7, #12]
 8018772:	f7ff fb83 	bl	8017e7c <USBH_MSC_BOT_Process>
 8018776:	4603      	mov	r3, r0
 8018778:	75fb      	strb	r3, [r7, #23]
      break;
 801877a:	bf00      	nop
  }

  return error;
 801877c:	7dfb      	ldrb	r3, [r7, #23]
}
 801877e:	4618      	mov	r0, r3
 8018780:	3718      	adds	r7, #24
 8018782:	46bd      	mov	sp, r7
 8018784:	bd80      	pop	{r7, pc}

08018786 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8018786:	b580      	push	{r7, lr}
 8018788:	b086      	sub	sp, #24
 801878a:	af00      	add	r7, sp, #0
 801878c:	60f8      	str	r0, [r7, #12]
 801878e:	607a      	str	r2, [r7, #4]
 8018790:	603b      	str	r3, [r7, #0]
 8018792:	460b      	mov	r3, r1
 8018794:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8018796:	2302      	movs	r3, #2
 8018798:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80187a0:	69db      	ldr	r3, [r3, #28]
 80187a2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80187a4:	693b      	ldr	r3, [r7, #16]
 80187a6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80187aa:	2b01      	cmp	r3, #1
 80187ac:	d002      	beq.n	80187b4 <USBH_MSC_SCSI_Read+0x2e>
 80187ae:	2b02      	cmp	r3, #2
 80187b0:	d047      	beq.n	8018842 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80187b2:	e04e      	b.n	8018852 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80187ba:	461a      	mov	r2, r3
 80187bc:	6a3b      	ldr	r3, [r7, #32]
 80187be:	fb03 f202 	mul.w	r2, r3, r2
 80187c2:	693b      	ldr	r3, [r7, #16]
 80187c4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80187c6:	693b      	ldr	r3, [r7, #16]
 80187c8:	2280      	movs	r2, #128	; 0x80
 80187ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80187ce:	693b      	ldr	r3, [r7, #16]
 80187d0:	220a      	movs	r2, #10
 80187d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80187d6:	693b      	ldr	r3, [r7, #16]
 80187d8:	3363      	adds	r3, #99	; 0x63
 80187da:	2210      	movs	r2, #16
 80187dc:	2100      	movs	r1, #0
 80187de:	4618      	mov	r0, r3
 80187e0:	f005 fdc0 	bl	801e364 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80187e4:	693b      	ldr	r3, [r7, #16]
 80187e6:	2228      	movs	r2, #40	; 0x28
 80187e8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80187ec:	79fa      	ldrb	r2, [r7, #7]
 80187ee:	693b      	ldr	r3, [r7, #16]
 80187f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80187f4:	79ba      	ldrb	r2, [r7, #6]
 80187f6:	693b      	ldr	r3, [r7, #16]
 80187f8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80187fc:	797a      	ldrb	r2, [r7, #5]
 80187fe:	693b      	ldr	r3, [r7, #16]
 8018800:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8018804:	1d3b      	adds	r3, r7, #4
 8018806:	781a      	ldrb	r2, [r3, #0]
 8018808:	693b      	ldr	r3, [r7, #16]
 801880a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 801880e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8018812:	693b      	ldr	r3, [r7, #16]
 8018814:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8018818:	f107 0320 	add.w	r3, r7, #32
 801881c:	781a      	ldrb	r2, [r3, #0]
 801881e:	693b      	ldr	r3, [r7, #16]
 8018820:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8018824:	693b      	ldr	r3, [r7, #16]
 8018826:	2201      	movs	r2, #1
 8018828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801882c:	693b      	ldr	r3, [r7, #16]
 801882e:	2202      	movs	r2, #2
 8018830:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8018834:	693b      	ldr	r3, [r7, #16]
 8018836:	683a      	ldr	r2, [r7, #0]
 8018838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 801883c:	2301      	movs	r3, #1
 801883e:	75fb      	strb	r3, [r7, #23]
      break;
 8018840:	e007      	b.n	8018852 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8018842:	7afb      	ldrb	r3, [r7, #11]
 8018844:	4619      	mov	r1, r3
 8018846:	68f8      	ldr	r0, [r7, #12]
 8018848:	f7ff fb18 	bl	8017e7c <USBH_MSC_BOT_Process>
 801884c:	4603      	mov	r3, r0
 801884e:	75fb      	strb	r3, [r7, #23]
      break;
 8018850:	bf00      	nop
  }

  return error;
 8018852:	7dfb      	ldrb	r3, [r7, #23]
}
 8018854:	4618      	mov	r0, r3
 8018856:	3718      	adds	r7, #24
 8018858:	46bd      	mov	sp, r7
 801885a:	bd80      	pop	{r7, pc}

0801885c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b084      	sub	sp, #16
 8018860:	af00      	add	r7, sp, #0
 8018862:	60f8      	str	r0, [r7, #12]
 8018864:	60b9      	str	r1, [r7, #8]
 8018866:	4613      	mov	r3, r2
 8018868:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d101      	bne.n	8018874 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8018870:	2302      	movs	r3, #2
 8018872:	e029      	b.n	80188c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	79fa      	ldrb	r2, [r7, #7]
 8018878:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	2200      	movs	r2, #0
 8018880:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	2200      	movs	r2, #0
 8018888:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 801888c:	68f8      	ldr	r0, [r7, #12]
 801888e:	f000 f81f 	bl	80188d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	2200      	movs	r2, #0
 8018896:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	2200      	movs	r2, #0
 801889e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	2200      	movs	r2, #0
 80188a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	2200      	movs	r2, #0
 80188ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80188b2:	68bb      	ldr	r3, [r7, #8]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d003      	beq.n	80188c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	68ba      	ldr	r2, [r7, #8]
 80188bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80188c0:	68f8      	ldr	r0, [r7, #12]
 80188c2:	f005 fad9 	bl	801de78 <USBH_LL_Init>

  return USBH_OK;
 80188c6:	2300      	movs	r3, #0
}
 80188c8:	4618      	mov	r0, r3
 80188ca:	3710      	adds	r7, #16
 80188cc:	46bd      	mov	sp, r7
 80188ce:	bd80      	pop	{r7, pc}

080188d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80188d0:	b480      	push	{r7}
 80188d2:	b085      	sub	sp, #20
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80188d8:	2300      	movs	r3, #0
 80188da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80188dc:	2300      	movs	r3, #0
 80188de:	60fb      	str	r3, [r7, #12]
 80188e0:	e009      	b.n	80188f6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80188e2:	687a      	ldr	r2, [r7, #4]
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	33e0      	adds	r3, #224	; 0xe0
 80188e8:	009b      	lsls	r3, r3, #2
 80188ea:	4413      	add	r3, r2
 80188ec:	2200      	movs	r2, #0
 80188ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	3301      	adds	r3, #1
 80188f4:	60fb      	str	r3, [r7, #12]
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	2b0e      	cmp	r3, #14
 80188fa:	d9f2      	bls.n	80188e2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80188fc:	2300      	movs	r3, #0
 80188fe:	60fb      	str	r3, [r7, #12]
 8018900:	e009      	b.n	8018916 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8018902:	687a      	ldr	r2, [r7, #4]
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	4413      	add	r3, r2
 8018908:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801890c:	2200      	movs	r2, #0
 801890e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	3301      	adds	r3, #1
 8018914:	60fb      	str	r3, [r7, #12]
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801891c:	d3f1      	bcc.n	8018902 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2200      	movs	r2, #0
 8018922:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2200      	movs	r2, #0
 8018928:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	2201      	movs	r2, #1
 801892e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	2200      	movs	r2, #0
 8018934:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	2201      	movs	r2, #1
 801893c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	2240      	movs	r2, #64	; 0x40
 8018942:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2200      	movs	r2, #0
 8018948:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2200      	movs	r2, #0
 801894e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	2201      	movs	r2, #1
 8018956:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	2200      	movs	r2, #0
 801895e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	2200      	movs	r2, #0
 8018966:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 801896a:	2300      	movs	r3, #0
}
 801896c:	4618      	mov	r0, r3
 801896e:	3714      	adds	r7, #20
 8018970:	46bd      	mov	sp, r7
 8018972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018976:	4770      	bx	lr

08018978 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8018978:	b480      	push	{r7}
 801897a:	b085      	sub	sp, #20
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8018982:	2300      	movs	r3, #0
 8018984:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8018986:	683b      	ldr	r3, [r7, #0]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d016      	beq.n	80189ba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8018992:	2b00      	cmp	r3, #0
 8018994:	d10e      	bne.n	80189b4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 801899c:	1c59      	adds	r1, r3, #1
 801899e:	687a      	ldr	r2, [r7, #4]
 80189a0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80189a4:	687a      	ldr	r2, [r7, #4]
 80189a6:	33de      	adds	r3, #222	; 0xde
 80189a8:	6839      	ldr	r1, [r7, #0]
 80189aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80189ae:	2300      	movs	r3, #0
 80189b0:	73fb      	strb	r3, [r7, #15]
 80189b2:	e004      	b.n	80189be <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80189b4:	2302      	movs	r3, #2
 80189b6:	73fb      	strb	r3, [r7, #15]
 80189b8:	e001      	b.n	80189be <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80189ba:	2302      	movs	r3, #2
 80189bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80189be:	7bfb      	ldrb	r3, [r7, #15]
}
 80189c0:	4618      	mov	r0, r3
 80189c2:	3714      	adds	r7, #20
 80189c4:	46bd      	mov	sp, r7
 80189c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ca:	4770      	bx	lr

080189cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80189cc:	b480      	push	{r7}
 80189ce:	b085      	sub	sp, #20
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
 80189d4:	460b      	mov	r3, r1
 80189d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80189d8:	2300      	movs	r3, #0
 80189da:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80189e2:	78fa      	ldrb	r2, [r7, #3]
 80189e4:	429a      	cmp	r2, r3
 80189e6:	d204      	bcs.n	80189f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	78fa      	ldrb	r2, [r7, #3]
 80189ec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80189f0:	e001      	b.n	80189f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80189f2:	2302      	movs	r3, #2
 80189f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80189f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80189f8:	4618      	mov	r0, r3
 80189fa:	3714      	adds	r7, #20
 80189fc:	46bd      	mov	sp, r7
 80189fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a02:	4770      	bx	lr

08018a04 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8018a04:	b480      	push	{r7}
 8018a06:	b087      	sub	sp, #28
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
 8018a0c:	4608      	mov	r0, r1
 8018a0e:	4611      	mov	r1, r2
 8018a10:	461a      	mov	r2, r3
 8018a12:	4603      	mov	r3, r0
 8018a14:	70fb      	strb	r3, [r7, #3]
 8018a16:	460b      	mov	r3, r1
 8018a18:	70bb      	strb	r3, [r7, #2]
 8018a1a:	4613      	mov	r3, r2
 8018a1c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8018a1e:	2300      	movs	r3, #0
 8018a20:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8018a22:	2300      	movs	r3, #0
 8018a24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8018a2c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8018a2e:	e025      	b.n	8018a7c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8018a30:	7dfb      	ldrb	r3, [r7, #23]
 8018a32:	221a      	movs	r2, #26
 8018a34:	fb02 f303 	mul.w	r3, r2, r3
 8018a38:	3308      	adds	r3, #8
 8018a3a:	68fa      	ldr	r2, [r7, #12]
 8018a3c:	4413      	add	r3, r2
 8018a3e:	3302      	adds	r3, #2
 8018a40:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8018a42:	693b      	ldr	r3, [r7, #16]
 8018a44:	795b      	ldrb	r3, [r3, #5]
 8018a46:	78fa      	ldrb	r2, [r7, #3]
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	d002      	beq.n	8018a52 <USBH_FindInterface+0x4e>
 8018a4c:	78fb      	ldrb	r3, [r7, #3]
 8018a4e:	2bff      	cmp	r3, #255	; 0xff
 8018a50:	d111      	bne.n	8018a76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8018a52:	693b      	ldr	r3, [r7, #16]
 8018a54:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8018a56:	78ba      	ldrb	r2, [r7, #2]
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d002      	beq.n	8018a62 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8018a5c:	78bb      	ldrb	r3, [r7, #2]
 8018a5e:	2bff      	cmp	r3, #255	; 0xff
 8018a60:	d109      	bne.n	8018a76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8018a62:	693b      	ldr	r3, [r7, #16]
 8018a64:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8018a66:	787a      	ldrb	r2, [r7, #1]
 8018a68:	429a      	cmp	r2, r3
 8018a6a:	d002      	beq.n	8018a72 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8018a6c:	787b      	ldrb	r3, [r7, #1]
 8018a6e:	2bff      	cmp	r3, #255	; 0xff
 8018a70:	d101      	bne.n	8018a76 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8018a72:	7dfb      	ldrb	r3, [r7, #23]
 8018a74:	e006      	b.n	8018a84 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8018a76:	7dfb      	ldrb	r3, [r7, #23]
 8018a78:	3301      	adds	r3, #1
 8018a7a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8018a7c:	7dfb      	ldrb	r3, [r7, #23]
 8018a7e:	2b01      	cmp	r3, #1
 8018a80:	d9d6      	bls.n	8018a30 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8018a82:	23ff      	movs	r3, #255	; 0xff
}
 8018a84:	4618      	mov	r0, r3
 8018a86:	371c      	adds	r7, #28
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8e:	4770      	bx	lr

08018a90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b082      	sub	sp, #8
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8018a98:	6878      	ldr	r0, [r7, #4]
 8018a9a:	f005 fa29 	bl	801def0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8018a9e:	2101      	movs	r1, #1
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	f005 fb42 	bl	801e12a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8018aa6:	2300      	movs	r3, #0
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3708      	adds	r7, #8
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}

08018ab0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b088      	sub	sp, #32
 8018ab4:	af04      	add	r7, sp, #16
 8018ab6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8018ab8:	2302      	movs	r3, #2
 8018aba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8018abc:	2300      	movs	r3, #0
 8018abe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8018ac6:	b2db      	uxtb	r3, r3
 8018ac8:	2b01      	cmp	r3, #1
 8018aca:	d102      	bne.n	8018ad2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	2203      	movs	r2, #3
 8018ad0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	b2db      	uxtb	r3, r3
 8018ad8:	2b0b      	cmp	r3, #11
 8018ada:	f200 81b3 	bhi.w	8018e44 <USBH_Process+0x394>
 8018ade:	a201      	add	r2, pc, #4	; (adr r2, 8018ae4 <USBH_Process+0x34>)
 8018ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ae4:	08018b15 	.word	0x08018b15
 8018ae8:	08018b47 	.word	0x08018b47
 8018aec:	08018baf 	.word	0x08018baf
 8018af0:	08018ddf 	.word	0x08018ddf
 8018af4:	08018e45 	.word	0x08018e45
 8018af8:	08018c53 	.word	0x08018c53
 8018afc:	08018d85 	.word	0x08018d85
 8018b00:	08018c89 	.word	0x08018c89
 8018b04:	08018ca9 	.word	0x08018ca9
 8018b08:	08018cc9 	.word	0x08018cc9
 8018b0c:	08018cf7 	.word	0x08018cf7
 8018b10:	08018dc7 	.word	0x08018dc7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8018b1a:	b2db      	uxtb	r3, r3
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	f000 8193 	beq.w	8018e48 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	2201      	movs	r2, #1
 8018b26:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8018b28:	20c8      	movs	r0, #200	; 0xc8
 8018b2a:	f005 fb7b 	bl	801e224 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8018b2e:	6878      	ldr	r0, [r7, #4]
 8018b30:	f005 fa3b 	bl	801dfaa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	2200      	movs	r2, #0
 8018b38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2200      	movs	r2, #0
 8018b40:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8018b44:	e180      	b.n	8018e48 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8018b4c:	2b01      	cmp	r3, #1
 8018b4e:	d107      	bne.n	8018b60 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	2200      	movs	r2, #0
 8018b54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	2202      	movs	r2, #2
 8018b5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018b5e:	e182      	b.n	8018e66 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8018b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018b6a:	d914      	bls.n	8018b96 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8018b72:	3301      	adds	r3, #1
 8018b74:	b2da      	uxtb	r2, r3
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8018b82:	2b03      	cmp	r3, #3
 8018b84:	d903      	bls.n	8018b8e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	220d      	movs	r2, #13
 8018b8a:	701a      	strb	r2, [r3, #0]
      break;
 8018b8c:	e16b      	b.n	8018e66 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2200      	movs	r2, #0
 8018b92:	701a      	strb	r2, [r3, #0]
      break;
 8018b94:	e167      	b.n	8018e66 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8018b9c:	f103 020a 	add.w	r2, r3, #10
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8018ba6:	200a      	movs	r0, #10
 8018ba8:	f005 fb3c 	bl	801e224 <USBH_Delay>
      break;
 8018bac:	e15b      	b.n	8018e66 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d005      	beq.n	8018bc4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018bbe:	2104      	movs	r1, #4
 8018bc0:	6878      	ldr	r0, [r7, #4]
 8018bc2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8018bc4:	2064      	movs	r0, #100	; 0x64
 8018bc6:	f005 fb2d 	bl	801e224 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f005 f9c6 	bl	801df5c <USBH_LL_GetSpeed>
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	461a      	mov	r2, r3
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	2205      	movs	r2, #5
 8018bde:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8018be0:	2100      	movs	r1, #0
 8018be2:	6878      	ldr	r0, [r7, #4]
 8018be4:	f001 f92f 	bl	8019e46 <USBH_AllocPipe>
 8018be8:	4603      	mov	r3, r0
 8018bea:	461a      	mov	r2, r3
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8018bf0:	2180      	movs	r1, #128	; 0x80
 8018bf2:	6878      	ldr	r0, [r7, #4]
 8018bf4:	f001 f927 	bl	8019e46 <USBH_AllocPipe>
 8018bf8:	4603      	mov	r3, r0
 8018bfa:	461a      	mov	r2, r3
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	7919      	ldrb	r1, [r3, #4]
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8018c10:	687a      	ldr	r2, [r7, #4]
 8018c12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8018c14:	b292      	uxth	r2, r2
 8018c16:	9202      	str	r2, [sp, #8]
 8018c18:	2200      	movs	r2, #0
 8018c1a:	9201      	str	r2, [sp, #4]
 8018c1c:	9300      	str	r3, [sp, #0]
 8018c1e:	4603      	mov	r3, r0
 8018c20:	2280      	movs	r2, #128	; 0x80
 8018c22:	6878      	ldr	r0, [r7, #4]
 8018c24:	f001 f8e0 	bl	8019de8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	7959      	ldrb	r1, [r3, #5]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8018c38:	687a      	ldr	r2, [r7, #4]
 8018c3a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8018c3c:	b292      	uxth	r2, r2
 8018c3e:	9202      	str	r2, [sp, #8]
 8018c40:	2200      	movs	r2, #0
 8018c42:	9201      	str	r2, [sp, #4]
 8018c44:	9300      	str	r3, [sp, #0]
 8018c46:	4603      	mov	r3, r0
 8018c48:	2200      	movs	r2, #0
 8018c4a:	6878      	ldr	r0, [r7, #4]
 8018c4c:	f001 f8cc 	bl	8019de8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018c50:	e109      	b.n	8018e66 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8018c52:	6878      	ldr	r0, [r7, #4]
 8018c54:	f000 f90c 	bl	8018e70 <USBH_HandleEnum>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8018c5c:	7bbb      	ldrb	r3, [r7, #14]
 8018c5e:	b2db      	uxtb	r3, r3
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	f040 80f3 	bne.w	8018e4c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	2200      	movs	r2, #0
 8018c6a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8018c74:	2b01      	cmp	r3, #1
 8018c76:	d103      	bne.n	8018c80 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2208      	movs	r2, #8
 8018c7c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8018c7e:	e0e5      	b.n	8018e4c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2207      	movs	r2, #7
 8018c84:	701a      	strb	r2, [r3, #0]
      break;
 8018c86:	e0e1      	b.n	8018e4c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	f000 80de 	beq.w	8018e50 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018c9a:	2101      	movs	r1, #1
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	2208      	movs	r2, #8
 8018ca4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8018ca6:	e0d3      	b.n	8018e50 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8018cae:	b29b      	uxth	r3, r3
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	6878      	ldr	r0, [r7, #4]
 8018cb4:	f000 fc20 	bl	80194f8 <USBH_SetCfg>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	f040 80ca 	bne.w	8018e54 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2209      	movs	r2, #9
 8018cc4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018cc6:	e0c5      	b.n	8018e54 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8018cce:	f003 0320 	and.w	r3, r3, #32
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d00b      	beq.n	8018cee <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8018cd6:	2101      	movs	r1, #1
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f000 fc30 	bl	801953e <USBH_SetFeature>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	f040 80b9 	bne.w	8018e58 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	220a      	movs	r2, #10
 8018cea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018cec:	e0b4      	b.n	8018e58 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	220a      	movs	r2, #10
 8018cf2:	701a      	strb	r2, [r3, #0]
      break;
 8018cf4:	e0b0      	b.n	8018e58 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	f000 80ad 	beq.w	8018e5c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	2200      	movs	r2, #0
 8018d06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	73fb      	strb	r3, [r7, #15]
 8018d0e:	e016      	b.n	8018d3e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8018d10:	7bfa      	ldrb	r2, [r7, #15]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	32de      	adds	r2, #222	; 0xde
 8018d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d1a:	791a      	ldrb	r2, [r3, #4]
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8018d22:	429a      	cmp	r2, r3
 8018d24:	d108      	bne.n	8018d38 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8018d26:	7bfa      	ldrb	r2, [r7, #15]
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	32de      	adds	r2, #222	; 0xde
 8018d2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8018d36:	e005      	b.n	8018d44 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8018d38:	7bfb      	ldrb	r3, [r7, #15]
 8018d3a:	3301      	adds	r3, #1
 8018d3c:	73fb      	strb	r3, [r7, #15]
 8018d3e:	7bfb      	ldrb	r3, [r7, #15]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d0e5      	beq.n	8018d10 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d016      	beq.n	8018d7c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018d54:	689b      	ldr	r3, [r3, #8]
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	4798      	blx	r3
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d109      	bne.n	8018d74 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	2206      	movs	r2, #6
 8018d64:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018d6c:	2103      	movs	r1, #3
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018d72:	e073      	b.n	8018e5c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	220d      	movs	r2, #13
 8018d78:	701a      	strb	r2, [r3, #0]
      break;
 8018d7a:	e06f      	b.n	8018e5c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	220d      	movs	r2, #13
 8018d80:	701a      	strb	r2, [r3, #0]
      break;
 8018d82:	e06b      	b.n	8018e5c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d017      	beq.n	8018dbe <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018d94:	691b      	ldr	r3, [r3, #16]
 8018d96:	6878      	ldr	r0, [r7, #4]
 8018d98:	4798      	blx	r3
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8018d9e:	7bbb      	ldrb	r3, [r7, #14]
 8018da0:	b2db      	uxtb	r3, r3
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d103      	bne.n	8018dae <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	220b      	movs	r2, #11
 8018daa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018dac:	e058      	b.n	8018e60 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8018dae:	7bbb      	ldrb	r3, [r7, #14]
 8018db0:	b2db      	uxtb	r3, r3
 8018db2:	2b02      	cmp	r3, #2
 8018db4:	d154      	bne.n	8018e60 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	220d      	movs	r2, #13
 8018dba:	701a      	strb	r2, [r3, #0]
      break;
 8018dbc:	e050      	b.n	8018e60 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	220d      	movs	r2, #13
 8018dc2:	701a      	strb	r2, [r3, #0]
      break;
 8018dc4:	e04c      	b.n	8018e60 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d049      	beq.n	8018e64 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018dd6:	695b      	ldr	r3, [r3, #20]
 8018dd8:	6878      	ldr	r0, [r7, #4]
 8018dda:	4798      	blx	r3
      }
      break;
 8018ddc:	e042      	b.n	8018e64 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	2200      	movs	r2, #0
 8018de2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8018de6:	6878      	ldr	r0, [r7, #4]
 8018de8:	f7ff fd72 	bl	80188d0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d009      	beq.n	8018e0a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018dfc:	68db      	ldr	r3, [r3, #12]
 8018dfe:	6878      	ldr	r0, [r7, #4]
 8018e00:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	2200      	movs	r2, #0
 8018e06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d005      	beq.n	8018e20 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018e1a:	2105      	movs	r1, #5
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8018e26:	b2db      	uxtb	r3, r3
 8018e28:	2b01      	cmp	r3, #1
 8018e2a:	d107      	bne.n	8018e3c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2200      	movs	r2, #0
 8018e30:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f7ff fe2b 	bl	8018a90 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8018e3a:	e014      	b.n	8018e66 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8018e3c:	6878      	ldr	r0, [r7, #4]
 8018e3e:	f005 f857 	bl	801def0 <USBH_LL_Start>
      break;
 8018e42:	e010      	b.n	8018e66 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8018e44:	bf00      	nop
 8018e46:	e00e      	b.n	8018e66 <USBH_Process+0x3b6>
      break;
 8018e48:	bf00      	nop
 8018e4a:	e00c      	b.n	8018e66 <USBH_Process+0x3b6>
      break;
 8018e4c:	bf00      	nop
 8018e4e:	e00a      	b.n	8018e66 <USBH_Process+0x3b6>
    break;
 8018e50:	bf00      	nop
 8018e52:	e008      	b.n	8018e66 <USBH_Process+0x3b6>
      break;
 8018e54:	bf00      	nop
 8018e56:	e006      	b.n	8018e66 <USBH_Process+0x3b6>
      break;
 8018e58:	bf00      	nop
 8018e5a:	e004      	b.n	8018e66 <USBH_Process+0x3b6>
      break;
 8018e5c:	bf00      	nop
 8018e5e:	e002      	b.n	8018e66 <USBH_Process+0x3b6>
      break;
 8018e60:	bf00      	nop
 8018e62:	e000      	b.n	8018e66 <USBH_Process+0x3b6>
      break;
 8018e64:	bf00      	nop
  }
  return USBH_OK;
 8018e66:	2300      	movs	r3, #0
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	3710      	adds	r7, #16
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bd80      	pop	{r7, pc}

08018e70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b088      	sub	sp, #32
 8018e74:	af04      	add	r7, sp, #16
 8018e76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8018e78:	2301      	movs	r3, #1
 8018e7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	785b      	ldrb	r3, [r3, #1]
 8018e84:	2b07      	cmp	r3, #7
 8018e86:	f200 81c1 	bhi.w	801920c <USBH_HandleEnum+0x39c>
 8018e8a:	a201      	add	r2, pc, #4	; (adr r2, 8018e90 <USBH_HandleEnum+0x20>)
 8018e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e90:	08018eb1 	.word	0x08018eb1
 8018e94:	08018f6f 	.word	0x08018f6f
 8018e98:	08018fd9 	.word	0x08018fd9
 8018e9c:	08019067 	.word	0x08019067
 8018ea0:	080190d1 	.word	0x080190d1
 8018ea4:	08019141 	.word	0x08019141
 8018ea8:	08019187 	.word	0x08019187
 8018eac:	080191cd 	.word	0x080191cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8018eb0:	2108      	movs	r1, #8
 8018eb2:	6878      	ldr	r0, [r7, #4]
 8018eb4:	f000 fa50 	bl	8019358 <USBH_Get_DevDesc>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018ebc:	7bbb      	ldrb	r3, [r7, #14]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d130      	bne.n	8018f24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	2201      	movs	r2, #1
 8018ed0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	7919      	ldrb	r1, [r3, #4]
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8018ee2:	687a      	ldr	r2, [r7, #4]
 8018ee4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8018ee6:	b292      	uxth	r2, r2
 8018ee8:	9202      	str	r2, [sp, #8]
 8018eea:	2200      	movs	r2, #0
 8018eec:	9201      	str	r2, [sp, #4]
 8018eee:	9300      	str	r3, [sp, #0]
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	2280      	movs	r2, #128	; 0x80
 8018ef4:	6878      	ldr	r0, [r7, #4]
 8018ef6:	f000 ff77 	bl	8019de8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	7959      	ldrb	r1, [r3, #5]
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8018f0a:	687a      	ldr	r2, [r7, #4]
 8018f0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018f0e:	b292      	uxth	r2, r2
 8018f10:	9202      	str	r2, [sp, #8]
 8018f12:	2200      	movs	r2, #0
 8018f14:	9201      	str	r2, [sp, #4]
 8018f16:	9300      	str	r3, [sp, #0]
 8018f18:	4603      	mov	r3, r0
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	6878      	ldr	r0, [r7, #4]
 8018f1e:	f000 ff63 	bl	8019de8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8018f22:	e175      	b.n	8019210 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018f24:	7bbb      	ldrb	r3, [r7, #14]
 8018f26:	2b03      	cmp	r3, #3
 8018f28:	f040 8172 	bne.w	8019210 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018f32:	3301      	adds	r3, #1
 8018f34:	b2da      	uxtb	r2, r3
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018f42:	2b03      	cmp	r3, #3
 8018f44:	d903      	bls.n	8018f4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	220d      	movs	r2, #13
 8018f4a:	701a      	strb	r2, [r3, #0]
      break;
 8018f4c:	e160      	b.n	8019210 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	795b      	ldrb	r3, [r3, #5]
 8018f52:	4619      	mov	r1, r3
 8018f54:	6878      	ldr	r0, [r7, #4]
 8018f56:	f000 ff97 	bl	8019e88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	791b      	ldrb	r3, [r3, #4]
 8018f5e:	4619      	mov	r1, r3
 8018f60:	6878      	ldr	r0, [r7, #4]
 8018f62:	f000 ff91 	bl	8019e88 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	2200      	movs	r2, #0
 8018f6a:	701a      	strb	r2, [r3, #0]
      break;
 8018f6c:	e150      	b.n	8019210 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8018f6e:	2112      	movs	r1, #18
 8018f70:	6878      	ldr	r0, [r7, #4]
 8018f72:	f000 f9f1 	bl	8019358 <USBH_Get_DevDesc>
 8018f76:	4603      	mov	r3, r0
 8018f78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018f7a:	7bbb      	ldrb	r3, [r7, #14]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d103      	bne.n	8018f88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2202      	movs	r2, #2
 8018f84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8018f86:	e145      	b.n	8019214 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018f88:	7bbb      	ldrb	r3, [r7, #14]
 8018f8a:	2b03      	cmp	r3, #3
 8018f8c:	f040 8142 	bne.w	8019214 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018f96:	3301      	adds	r3, #1
 8018f98:	b2da      	uxtb	r2, r3
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018fa6:	2b03      	cmp	r3, #3
 8018fa8:	d903      	bls.n	8018fb2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	220d      	movs	r2, #13
 8018fae:	701a      	strb	r2, [r3, #0]
      break;
 8018fb0:	e130      	b.n	8019214 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	795b      	ldrb	r3, [r3, #5]
 8018fb6:	4619      	mov	r1, r3
 8018fb8:	6878      	ldr	r0, [r7, #4]
 8018fba:	f000 ff65 	bl	8019e88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	791b      	ldrb	r3, [r3, #4]
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	6878      	ldr	r0, [r7, #4]
 8018fc6:	f000 ff5f 	bl	8019e88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2200      	movs	r2, #0
 8018fce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	701a      	strb	r2, [r3, #0]
      break;
 8018fd6:	e11d      	b.n	8019214 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8018fd8:	2101      	movs	r1, #1
 8018fda:	6878      	ldr	r0, [r7, #4]
 8018fdc:	f000 fa68 	bl	80194b0 <USBH_SetAddress>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018fe4:	7bbb      	ldrb	r3, [r7, #14]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d132      	bne.n	8019050 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8018fea:	2002      	movs	r0, #2
 8018fec:	f005 f91a 	bl	801e224 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	2201      	movs	r2, #1
 8018ff4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2203      	movs	r2, #3
 8018ffc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	7919      	ldrb	r1, [r3, #4]
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801900e:	687a      	ldr	r2, [r7, #4]
 8019010:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8019012:	b292      	uxth	r2, r2
 8019014:	9202      	str	r2, [sp, #8]
 8019016:	2200      	movs	r2, #0
 8019018:	9201      	str	r2, [sp, #4]
 801901a:	9300      	str	r3, [sp, #0]
 801901c:	4603      	mov	r3, r0
 801901e:	2280      	movs	r2, #128	; 0x80
 8019020:	6878      	ldr	r0, [r7, #4]
 8019022:	f000 fee1 	bl	8019de8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	7959      	ldrb	r1, [r3, #5]
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8019036:	687a      	ldr	r2, [r7, #4]
 8019038:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801903a:	b292      	uxth	r2, r2
 801903c:	9202      	str	r2, [sp, #8]
 801903e:	2200      	movs	r2, #0
 8019040:	9201      	str	r2, [sp, #4]
 8019042:	9300      	str	r3, [sp, #0]
 8019044:	4603      	mov	r3, r0
 8019046:	2200      	movs	r2, #0
 8019048:	6878      	ldr	r0, [r7, #4]
 801904a:	f000 fecd 	bl	8019de8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801904e:	e0e3      	b.n	8019218 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8019050:	7bbb      	ldrb	r3, [r7, #14]
 8019052:	2b03      	cmp	r3, #3
 8019054:	f040 80e0 	bne.w	8019218 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	220d      	movs	r2, #13
 801905c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	2200      	movs	r2, #0
 8019062:	705a      	strb	r2, [r3, #1]
      break;
 8019064:	e0d8      	b.n	8019218 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8019066:	2109      	movs	r1, #9
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	f000 f99d 	bl	80193a8 <USBH_Get_CfgDesc>
 801906e:	4603      	mov	r3, r0
 8019070:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8019072:	7bbb      	ldrb	r3, [r7, #14]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d103      	bne.n	8019080 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	2204      	movs	r2, #4
 801907c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801907e:	e0cd      	b.n	801921c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8019080:	7bbb      	ldrb	r3, [r7, #14]
 8019082:	2b03      	cmp	r3, #3
 8019084:	f040 80ca 	bne.w	801921c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801908e:	3301      	adds	r3, #1
 8019090:	b2da      	uxtb	r2, r3
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801909e:	2b03      	cmp	r3, #3
 80190a0:	d903      	bls.n	80190aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	220d      	movs	r2, #13
 80190a6:	701a      	strb	r2, [r3, #0]
      break;
 80190a8:	e0b8      	b.n	801921c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	795b      	ldrb	r3, [r3, #5]
 80190ae:	4619      	mov	r1, r3
 80190b0:	6878      	ldr	r0, [r7, #4]
 80190b2:	f000 fee9 	bl	8019e88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	791b      	ldrb	r3, [r3, #4]
 80190ba:	4619      	mov	r1, r3
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	f000 fee3 	bl	8019e88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	2200      	movs	r2, #0
 80190c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	2200      	movs	r2, #0
 80190cc:	701a      	strb	r2, [r3, #0]
      break;
 80190ce:	e0a5      	b.n	801921c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80190d6:	4619      	mov	r1, r3
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	f000 f965 	bl	80193a8 <USBH_Get_CfgDesc>
 80190de:	4603      	mov	r3, r0
 80190e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80190e2:	7bbb      	ldrb	r3, [r7, #14]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d103      	bne.n	80190f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	2205      	movs	r2, #5
 80190ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80190ee:	e097      	b.n	8019220 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80190f0:	7bbb      	ldrb	r3, [r7, #14]
 80190f2:	2b03      	cmp	r3, #3
 80190f4:	f040 8094 	bne.w	8019220 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80190fe:	3301      	adds	r3, #1
 8019100:	b2da      	uxtb	r2, r3
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801910e:	2b03      	cmp	r3, #3
 8019110:	d903      	bls.n	801911a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	220d      	movs	r2, #13
 8019116:	701a      	strb	r2, [r3, #0]
      break;
 8019118:	e082      	b.n	8019220 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	795b      	ldrb	r3, [r3, #5]
 801911e:	4619      	mov	r1, r3
 8019120:	6878      	ldr	r0, [r7, #4]
 8019122:	f000 feb1 	bl	8019e88 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	791b      	ldrb	r3, [r3, #4]
 801912a:	4619      	mov	r1, r3
 801912c:	6878      	ldr	r0, [r7, #4]
 801912e:	f000 feab 	bl	8019e88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	2200      	movs	r2, #0
 8019136:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	2200      	movs	r2, #0
 801913c:	701a      	strb	r2, [r3, #0]
      break;
 801913e:	e06f      	b.n	8019220 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8019146:	2b00      	cmp	r3, #0
 8019148:	d019      	beq.n	801917e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8019156:	23ff      	movs	r3, #255	; 0xff
 8019158:	6878      	ldr	r0, [r7, #4]
 801915a:	f000 f949 	bl	80193f0 <USBH_Get_StringDesc>
 801915e:	4603      	mov	r3, r0
 8019160:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8019162:	7bbb      	ldrb	r3, [r7, #14]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d103      	bne.n	8019170 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	2206      	movs	r2, #6
 801916c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 801916e:	e059      	b.n	8019224 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8019170:	7bbb      	ldrb	r3, [r7, #14]
 8019172:	2b03      	cmp	r3, #3
 8019174:	d156      	bne.n	8019224 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	2206      	movs	r2, #6
 801917a:	705a      	strb	r2, [r3, #1]
      break;
 801917c:	e052      	b.n	8019224 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	2206      	movs	r2, #6
 8019182:	705a      	strb	r2, [r3, #1]
      break;
 8019184:	e04e      	b.n	8019224 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 801918c:	2b00      	cmp	r3, #0
 801918e:	d019      	beq.n	80191c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801919c:	23ff      	movs	r3, #255	; 0xff
 801919e:	6878      	ldr	r0, [r7, #4]
 80191a0:	f000 f926 	bl	80193f0 <USBH_Get_StringDesc>
 80191a4:	4603      	mov	r3, r0
 80191a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80191a8:	7bbb      	ldrb	r3, [r7, #14]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d103      	bne.n	80191b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	2207      	movs	r2, #7
 80191b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80191b4:	e038      	b.n	8019228 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80191b6:	7bbb      	ldrb	r3, [r7, #14]
 80191b8:	2b03      	cmp	r3, #3
 80191ba:	d135      	bne.n	8019228 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	2207      	movs	r2, #7
 80191c0:	705a      	strb	r2, [r3, #1]
      break;
 80191c2:	e031      	b.n	8019228 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2207      	movs	r2, #7
 80191c8:	705a      	strb	r2, [r3, #1]
      break;
 80191ca:	e02d      	b.n	8019228 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d017      	beq.n	8019206 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80191e2:	23ff      	movs	r3, #255	; 0xff
 80191e4:	6878      	ldr	r0, [r7, #4]
 80191e6:	f000 f903 	bl	80193f0 <USBH_Get_StringDesc>
 80191ea:	4603      	mov	r3, r0
 80191ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80191ee:	7bbb      	ldrb	r3, [r7, #14]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d102      	bne.n	80191fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80191f4:	2300      	movs	r3, #0
 80191f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80191f8:	e018      	b.n	801922c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80191fa:	7bbb      	ldrb	r3, [r7, #14]
 80191fc:	2b03      	cmp	r3, #3
 80191fe:	d115      	bne.n	801922c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8019200:	2300      	movs	r3, #0
 8019202:	73fb      	strb	r3, [r7, #15]
      break;
 8019204:	e012      	b.n	801922c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8019206:	2300      	movs	r3, #0
 8019208:	73fb      	strb	r3, [r7, #15]
      break;
 801920a:	e00f      	b.n	801922c <USBH_HandleEnum+0x3bc>

    default:
      break;
 801920c:	bf00      	nop
 801920e:	e00e      	b.n	801922e <USBH_HandleEnum+0x3be>
      break;
 8019210:	bf00      	nop
 8019212:	e00c      	b.n	801922e <USBH_HandleEnum+0x3be>
      break;
 8019214:	bf00      	nop
 8019216:	e00a      	b.n	801922e <USBH_HandleEnum+0x3be>
      break;
 8019218:	bf00      	nop
 801921a:	e008      	b.n	801922e <USBH_HandleEnum+0x3be>
      break;
 801921c:	bf00      	nop
 801921e:	e006      	b.n	801922e <USBH_HandleEnum+0x3be>
      break;
 8019220:	bf00      	nop
 8019222:	e004      	b.n	801922e <USBH_HandleEnum+0x3be>
      break;
 8019224:	bf00      	nop
 8019226:	e002      	b.n	801922e <USBH_HandleEnum+0x3be>
      break;
 8019228:	bf00      	nop
 801922a:	e000      	b.n	801922e <USBH_HandleEnum+0x3be>
      break;
 801922c:	bf00      	nop
  }
  return Status;
 801922e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019230:	4618      	mov	r0, r3
 8019232:	3710      	adds	r7, #16
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}

08019238 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8019238:	b480      	push	{r7}
 801923a:	b083      	sub	sp, #12
 801923c:	af00      	add	r7, sp, #0
 801923e:	6078      	str	r0, [r7, #4]
 8019240:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	683a      	ldr	r2, [r7, #0]
 8019246:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801924a:	bf00      	nop
 801924c:	370c      	adds	r7, #12
 801924e:	46bd      	mov	sp, r7
 8019250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019254:	4770      	bx	lr

08019256 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8019256:	b580      	push	{r7, lr}
 8019258:	b082      	sub	sp, #8
 801925a:	af00      	add	r7, sp, #0
 801925c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019264:	1c5a      	adds	r2, r3, #1
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 801926c:	6878      	ldr	r0, [r7, #4]
 801926e:	f000 f804 	bl	801927a <USBH_HandleSof>
}
 8019272:	bf00      	nop
 8019274:	3708      	adds	r7, #8
 8019276:	46bd      	mov	sp, r7
 8019278:	bd80      	pop	{r7, pc}

0801927a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801927a:	b580      	push	{r7, lr}
 801927c:	b082      	sub	sp, #8
 801927e:	af00      	add	r7, sp, #0
 8019280:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	b2db      	uxtb	r3, r3
 8019288:	2b0b      	cmp	r3, #11
 801928a:	d10a      	bne.n	80192a2 <USBH_HandleSof+0x28>
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8019292:	2b00      	cmp	r3, #0
 8019294:	d005      	beq.n	80192a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801929c:	699b      	ldr	r3, [r3, #24]
 801929e:	6878      	ldr	r0, [r7, #4]
 80192a0:	4798      	blx	r3
  }
}
 80192a2:	bf00      	nop
 80192a4:	3708      	adds	r7, #8
 80192a6:	46bd      	mov	sp, r7
 80192a8:	bd80      	pop	{r7, pc}

080192aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80192aa:	b480      	push	{r7}
 80192ac:	b083      	sub	sp, #12
 80192ae:	af00      	add	r7, sp, #0
 80192b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	2201      	movs	r2, #1
 80192b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80192ba:	bf00      	nop
}
 80192bc:	370c      	adds	r7, #12
 80192be:	46bd      	mov	sp, r7
 80192c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c4:	4770      	bx	lr

080192c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80192c6:	b480      	push	{r7}
 80192c8:	b083      	sub	sp, #12
 80192ca:	af00      	add	r7, sp, #0
 80192cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	2200      	movs	r2, #0
 80192d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80192d6:	bf00      	nop
}
 80192d8:	370c      	adds	r7, #12
 80192da:	46bd      	mov	sp, r7
 80192dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e0:	4770      	bx	lr

080192e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80192e2:	b480      	push	{r7}
 80192e4:	b083      	sub	sp, #12
 80192e6:	af00      	add	r7, sp, #0
 80192e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	2201      	movs	r2, #1
 80192ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	2200      	movs	r2, #0
 80192f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	2200      	movs	r2, #0
 80192fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8019302:	2300      	movs	r3, #0
}
 8019304:	4618      	mov	r0, r3
 8019306:	370c      	adds	r7, #12
 8019308:	46bd      	mov	sp, r7
 801930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930e:	4770      	bx	lr

08019310 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b082      	sub	sp, #8
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	2201      	movs	r2, #1
 801931c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	2200      	movs	r2, #0
 8019324:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	2200      	movs	r2, #0
 801932c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8019330:	6878      	ldr	r0, [r7, #4]
 8019332:	f004 fdf8 	bl	801df26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	791b      	ldrb	r3, [r3, #4]
 801933a:	4619      	mov	r1, r3
 801933c:	6878      	ldr	r0, [r7, #4]
 801933e:	f000 fda3 	bl	8019e88 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	795b      	ldrb	r3, [r3, #5]
 8019346:	4619      	mov	r1, r3
 8019348:	6878      	ldr	r0, [r7, #4]
 801934a:	f000 fd9d 	bl	8019e88 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801934e:	2300      	movs	r3, #0
}
 8019350:	4618      	mov	r0, r3
 8019352:	3708      	adds	r7, #8
 8019354:	46bd      	mov	sp, r7
 8019356:	bd80      	pop	{r7, pc}

08019358 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8019358:	b580      	push	{r7, lr}
 801935a:	b086      	sub	sp, #24
 801935c:	af02      	add	r7, sp, #8
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	460b      	mov	r3, r1
 8019362:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 801936a:	78fb      	ldrb	r3, [r7, #3]
 801936c:	b29b      	uxth	r3, r3
 801936e:	9300      	str	r3, [sp, #0]
 8019370:	4613      	mov	r3, r2
 8019372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019376:	2100      	movs	r1, #0
 8019378:	6878      	ldr	r0, [r7, #4]
 801937a:	f000 f864 	bl	8019446 <USBH_GetDescriptor>
 801937e:	4603      	mov	r3, r0
 8019380:	73fb      	strb	r3, [r7, #15]
 8019382:	7bfb      	ldrb	r3, [r7, #15]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d10a      	bne.n	801939e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	f203 3026 	addw	r0, r3, #806	; 0x326
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8019394:	78fa      	ldrb	r2, [r7, #3]
 8019396:	b292      	uxth	r2, r2
 8019398:	4619      	mov	r1, r3
 801939a:	f000 f918 	bl	80195ce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801939e:	7bfb      	ldrb	r3, [r7, #15]
}
 80193a0:	4618      	mov	r0, r3
 80193a2:	3710      	adds	r7, #16
 80193a4:	46bd      	mov	sp, r7
 80193a6:	bd80      	pop	{r7, pc}

080193a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b086      	sub	sp, #24
 80193ac:	af02      	add	r7, sp, #8
 80193ae:	6078      	str	r0, [r7, #4]
 80193b0:	460b      	mov	r3, r1
 80193b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	331c      	adds	r3, #28
 80193b8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80193ba:	887b      	ldrh	r3, [r7, #2]
 80193bc:	9300      	str	r3, [sp, #0]
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80193c4:	2100      	movs	r1, #0
 80193c6:	6878      	ldr	r0, [r7, #4]
 80193c8:	f000 f83d 	bl	8019446 <USBH_GetDescriptor>
 80193cc:	4603      	mov	r3, r0
 80193ce:	72fb      	strb	r3, [r7, #11]
 80193d0:	7afb      	ldrb	r3, [r7, #11]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d107      	bne.n	80193e6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80193dc:	887a      	ldrh	r2, [r7, #2]
 80193de:	68f9      	ldr	r1, [r7, #12]
 80193e0:	4618      	mov	r0, r3
 80193e2:	f000 f964 	bl	80196ae <USBH_ParseCfgDesc>
  }

  return status;
 80193e6:	7afb      	ldrb	r3, [r7, #11]
}
 80193e8:	4618      	mov	r0, r3
 80193ea:	3710      	adds	r7, #16
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}

080193f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b088      	sub	sp, #32
 80193f4:	af02      	add	r7, sp, #8
 80193f6:	60f8      	str	r0, [r7, #12]
 80193f8:	607a      	str	r2, [r7, #4]
 80193fa:	461a      	mov	r2, r3
 80193fc:	460b      	mov	r3, r1
 80193fe:	72fb      	strb	r3, [r7, #11]
 8019400:	4613      	mov	r3, r2
 8019402:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8019404:	7afb      	ldrb	r3, [r7, #11]
 8019406:	b29b      	uxth	r3, r3
 8019408:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801940c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8019414:	893b      	ldrh	r3, [r7, #8]
 8019416:	9300      	str	r3, [sp, #0]
 8019418:	460b      	mov	r3, r1
 801941a:	2100      	movs	r1, #0
 801941c:	68f8      	ldr	r0, [r7, #12]
 801941e:	f000 f812 	bl	8019446 <USBH_GetDescriptor>
 8019422:	4603      	mov	r3, r0
 8019424:	75fb      	strb	r3, [r7, #23]
 8019426:	7dfb      	ldrb	r3, [r7, #23]
 8019428:	2b00      	cmp	r3, #0
 801942a:	d107      	bne.n	801943c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8019432:	893a      	ldrh	r2, [r7, #8]
 8019434:	6879      	ldr	r1, [r7, #4]
 8019436:	4618      	mov	r0, r3
 8019438:	f000 fa37 	bl	80198aa <USBH_ParseStringDesc>
  }

  return status;
 801943c:	7dfb      	ldrb	r3, [r7, #23]
}
 801943e:	4618      	mov	r0, r3
 8019440:	3718      	adds	r7, #24
 8019442:	46bd      	mov	sp, r7
 8019444:	bd80      	pop	{r7, pc}

08019446 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8019446:	b580      	push	{r7, lr}
 8019448:	b084      	sub	sp, #16
 801944a:	af00      	add	r7, sp, #0
 801944c:	60f8      	str	r0, [r7, #12]
 801944e:	607b      	str	r3, [r7, #4]
 8019450:	460b      	mov	r3, r1
 8019452:	72fb      	strb	r3, [r7, #11]
 8019454:	4613      	mov	r3, r2
 8019456:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	789b      	ldrb	r3, [r3, #2]
 801945c:	2b01      	cmp	r3, #1
 801945e:	d11c      	bne.n	801949a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8019460:	7afb      	ldrb	r3, [r7, #11]
 8019462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019466:	b2da      	uxtb	r2, r3
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	2206      	movs	r2, #6
 8019470:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	893a      	ldrh	r2, [r7, #8]
 8019476:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8019478:	893b      	ldrh	r3, [r7, #8]
 801947a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801947e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019482:	d104      	bne.n	801948e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	f240 4209 	movw	r2, #1033	; 0x409
 801948a:	829a      	strh	r2, [r3, #20]
 801948c:	e002      	b.n	8019494 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	2200      	movs	r2, #0
 8019492:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	8b3a      	ldrh	r2, [r7, #24]
 8019498:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 801949a:	8b3b      	ldrh	r3, [r7, #24]
 801949c:	461a      	mov	r2, r3
 801949e:	6879      	ldr	r1, [r7, #4]
 80194a0:	68f8      	ldr	r0, [r7, #12]
 80194a2:	f000 fa50 	bl	8019946 <USBH_CtlReq>
 80194a6:	4603      	mov	r3, r0
}
 80194a8:	4618      	mov	r0, r3
 80194aa:	3710      	adds	r7, #16
 80194ac:	46bd      	mov	sp, r7
 80194ae:	bd80      	pop	{r7, pc}

080194b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b082      	sub	sp, #8
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6078      	str	r0, [r7, #4]
 80194b8:	460b      	mov	r3, r1
 80194ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	789b      	ldrb	r3, [r3, #2]
 80194c0:	2b01      	cmp	r3, #1
 80194c2:	d10f      	bne.n	80194e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	2200      	movs	r2, #0
 80194c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	2205      	movs	r2, #5
 80194ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80194d0:	78fb      	ldrb	r3, [r7, #3]
 80194d2:	b29a      	uxth	r2, r3
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	2200      	movs	r2, #0
 80194dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	2200      	movs	r2, #0
 80194e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80194e4:	2200      	movs	r2, #0
 80194e6:	2100      	movs	r1, #0
 80194e8:	6878      	ldr	r0, [r7, #4]
 80194ea:	f000 fa2c 	bl	8019946 <USBH_CtlReq>
 80194ee:	4603      	mov	r3, r0
}
 80194f0:	4618      	mov	r0, r3
 80194f2:	3708      	adds	r7, #8
 80194f4:	46bd      	mov	sp, r7
 80194f6:	bd80      	pop	{r7, pc}

080194f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b082      	sub	sp, #8
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
 8019500:	460b      	mov	r3, r1
 8019502:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	789b      	ldrb	r3, [r3, #2]
 8019508:	2b01      	cmp	r3, #1
 801950a:	d10e      	bne.n	801952a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2200      	movs	r2, #0
 8019510:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	2209      	movs	r2, #9
 8019516:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	887a      	ldrh	r2, [r7, #2]
 801951c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	2200      	movs	r2, #0
 8019522:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	2200      	movs	r2, #0
 8019528:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801952a:	2200      	movs	r2, #0
 801952c:	2100      	movs	r1, #0
 801952e:	6878      	ldr	r0, [r7, #4]
 8019530:	f000 fa09 	bl	8019946 <USBH_CtlReq>
 8019534:	4603      	mov	r3, r0
}
 8019536:	4618      	mov	r0, r3
 8019538:	3708      	adds	r7, #8
 801953a:	46bd      	mov	sp, r7
 801953c:	bd80      	pop	{r7, pc}

0801953e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801953e:	b580      	push	{r7, lr}
 8019540:	b082      	sub	sp, #8
 8019542:	af00      	add	r7, sp, #0
 8019544:	6078      	str	r0, [r7, #4]
 8019546:	460b      	mov	r3, r1
 8019548:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	789b      	ldrb	r3, [r3, #2]
 801954e:	2b01      	cmp	r3, #1
 8019550:	d10f      	bne.n	8019572 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	2200      	movs	r2, #0
 8019556:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	2203      	movs	r2, #3
 801955c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801955e:	78fb      	ldrb	r3, [r7, #3]
 8019560:	b29a      	uxth	r2, r3
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	2200      	movs	r2, #0
 801956a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	2200      	movs	r2, #0
 8019570:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8019572:	2200      	movs	r2, #0
 8019574:	2100      	movs	r1, #0
 8019576:	6878      	ldr	r0, [r7, #4]
 8019578:	f000 f9e5 	bl	8019946 <USBH_CtlReq>
 801957c:	4603      	mov	r3, r0
}
 801957e:	4618      	mov	r0, r3
 8019580:	3708      	adds	r7, #8
 8019582:	46bd      	mov	sp, r7
 8019584:	bd80      	pop	{r7, pc}

08019586 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8019586:	b580      	push	{r7, lr}
 8019588:	b082      	sub	sp, #8
 801958a:	af00      	add	r7, sp, #0
 801958c:	6078      	str	r0, [r7, #4]
 801958e:	460b      	mov	r3, r1
 8019590:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	789b      	ldrb	r3, [r3, #2]
 8019596:	2b01      	cmp	r3, #1
 8019598:	d10f      	bne.n	80195ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	2202      	movs	r2, #2
 801959e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	2201      	movs	r2, #1
 80195a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	2200      	movs	r2, #0
 80195aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80195ac:	78fb      	ldrb	r3, [r7, #3]
 80195ae:	b29a      	uxth	r2, r3
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	2200      	movs	r2, #0
 80195b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80195ba:	2200      	movs	r2, #0
 80195bc:	2100      	movs	r1, #0
 80195be:	6878      	ldr	r0, [r7, #4]
 80195c0:	f000 f9c1 	bl	8019946 <USBH_CtlReq>
 80195c4:	4603      	mov	r3, r0
}
 80195c6:	4618      	mov	r0, r3
 80195c8:	3708      	adds	r7, #8
 80195ca:	46bd      	mov	sp, r7
 80195cc:	bd80      	pop	{r7, pc}

080195ce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80195ce:	b480      	push	{r7}
 80195d0:	b085      	sub	sp, #20
 80195d2:	af00      	add	r7, sp, #0
 80195d4:	60f8      	str	r0, [r7, #12]
 80195d6:	60b9      	str	r1, [r7, #8]
 80195d8:	4613      	mov	r3, r2
 80195da:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80195dc:	68bb      	ldr	r3, [r7, #8]
 80195de:	781a      	ldrb	r2, [r3, #0]
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80195e4:	68bb      	ldr	r3, [r7, #8]
 80195e6:	785a      	ldrb	r2, [r3, #1]
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80195ec:	68bb      	ldr	r3, [r7, #8]
 80195ee:	3302      	adds	r3, #2
 80195f0:	781b      	ldrb	r3, [r3, #0]
 80195f2:	b29a      	uxth	r2, r3
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	3303      	adds	r3, #3
 80195f8:	781b      	ldrb	r3, [r3, #0]
 80195fa:	b29b      	uxth	r3, r3
 80195fc:	021b      	lsls	r3, r3, #8
 80195fe:	b29b      	uxth	r3, r3
 8019600:	4313      	orrs	r3, r2
 8019602:	b29a      	uxth	r2, r3
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	791a      	ldrb	r2, [r3, #4]
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8019610:	68bb      	ldr	r3, [r7, #8]
 8019612:	795a      	ldrb	r2, [r3, #5]
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	799a      	ldrb	r2, [r3, #6]
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8019620:	68bb      	ldr	r3, [r7, #8]
 8019622:	79da      	ldrb	r2, [r3, #7]
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8019628:	88fb      	ldrh	r3, [r7, #6]
 801962a:	2b08      	cmp	r3, #8
 801962c:	d939      	bls.n	80196a2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 801962e:	68bb      	ldr	r3, [r7, #8]
 8019630:	3308      	adds	r3, #8
 8019632:	781b      	ldrb	r3, [r3, #0]
 8019634:	b29a      	uxth	r2, r3
 8019636:	68bb      	ldr	r3, [r7, #8]
 8019638:	3309      	adds	r3, #9
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	b29b      	uxth	r3, r3
 801963e:	021b      	lsls	r3, r3, #8
 8019640:	b29b      	uxth	r3, r3
 8019642:	4313      	orrs	r3, r2
 8019644:	b29a      	uxth	r2, r3
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	330a      	adds	r3, #10
 801964e:	781b      	ldrb	r3, [r3, #0]
 8019650:	b29a      	uxth	r2, r3
 8019652:	68bb      	ldr	r3, [r7, #8]
 8019654:	330b      	adds	r3, #11
 8019656:	781b      	ldrb	r3, [r3, #0]
 8019658:	b29b      	uxth	r3, r3
 801965a:	021b      	lsls	r3, r3, #8
 801965c:	b29b      	uxth	r3, r3
 801965e:	4313      	orrs	r3, r2
 8019660:	b29a      	uxth	r2, r3
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8019666:	68bb      	ldr	r3, [r7, #8]
 8019668:	330c      	adds	r3, #12
 801966a:	781b      	ldrb	r3, [r3, #0]
 801966c:	b29a      	uxth	r2, r3
 801966e:	68bb      	ldr	r3, [r7, #8]
 8019670:	330d      	adds	r3, #13
 8019672:	781b      	ldrb	r3, [r3, #0]
 8019674:	b29b      	uxth	r3, r3
 8019676:	021b      	lsls	r3, r3, #8
 8019678:	b29b      	uxth	r3, r3
 801967a:	4313      	orrs	r3, r2
 801967c:	b29a      	uxth	r2, r3
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8019682:	68bb      	ldr	r3, [r7, #8]
 8019684:	7b9a      	ldrb	r2, [r3, #14]
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 801968a:	68bb      	ldr	r3, [r7, #8]
 801968c:	7bda      	ldrb	r2, [r3, #15]
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8019692:	68bb      	ldr	r3, [r7, #8]
 8019694:	7c1a      	ldrb	r2, [r3, #16]
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	7c5a      	ldrb	r2, [r3, #17]
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	745a      	strb	r2, [r3, #17]
  }
}
 80196a2:	bf00      	nop
 80196a4:	3714      	adds	r7, #20
 80196a6:	46bd      	mov	sp, r7
 80196a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ac:	4770      	bx	lr

080196ae <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80196ae:	b580      	push	{r7, lr}
 80196b0:	b08a      	sub	sp, #40	; 0x28
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	60f8      	str	r0, [r7, #12]
 80196b6:	60b9      	str	r1, [r7, #8]
 80196b8:	4613      	mov	r3, r2
 80196ba:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80196bc:	68bb      	ldr	r3, [r7, #8]
 80196be:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80196c0:	2300      	movs	r3, #0
 80196c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80196c6:	2300      	movs	r3, #0
 80196c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80196cc:	68bb      	ldr	r3, [r7, #8]
 80196ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80196d0:	68bb      	ldr	r3, [r7, #8]
 80196d2:	781a      	ldrb	r2, [r3, #0]
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80196d8:	68bb      	ldr	r3, [r7, #8]
 80196da:	785a      	ldrb	r2, [r3, #1]
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80196e0:	68bb      	ldr	r3, [r7, #8]
 80196e2:	3302      	adds	r3, #2
 80196e4:	781b      	ldrb	r3, [r3, #0]
 80196e6:	b29a      	uxth	r2, r3
 80196e8:	68bb      	ldr	r3, [r7, #8]
 80196ea:	3303      	adds	r3, #3
 80196ec:	781b      	ldrb	r3, [r3, #0]
 80196ee:	b29b      	uxth	r3, r3
 80196f0:	021b      	lsls	r3, r3, #8
 80196f2:	b29b      	uxth	r3, r3
 80196f4:	4313      	orrs	r3, r2
 80196f6:	b29a      	uxth	r2, r3
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80196fc:	68bb      	ldr	r3, [r7, #8]
 80196fe:	791a      	ldrb	r2, [r3, #4]
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	795a      	ldrb	r2, [r3, #5]
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 801970c:	68bb      	ldr	r3, [r7, #8]
 801970e:	799a      	ldrb	r2, [r3, #6]
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	79da      	ldrb	r2, [r3, #7]
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 801971c:	68bb      	ldr	r3, [r7, #8]
 801971e:	7a1a      	ldrb	r2, [r3, #8]
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8019724:	88fb      	ldrh	r3, [r7, #6]
 8019726:	2b09      	cmp	r3, #9
 8019728:	d95f      	bls.n	80197ea <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 801972a:	2309      	movs	r3, #9
 801972c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 801972e:	2300      	movs	r3, #0
 8019730:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8019732:	e051      	b.n	80197d8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8019734:	f107 0316 	add.w	r3, r7, #22
 8019738:	4619      	mov	r1, r3
 801973a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801973c:	f000 f8e8 	bl	8019910 <USBH_GetNextDesc>
 8019740:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8019742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019744:	785b      	ldrb	r3, [r3, #1]
 8019746:	2b04      	cmp	r3, #4
 8019748:	d146      	bne.n	80197d8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801974a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801974e:	221a      	movs	r2, #26
 8019750:	fb02 f303 	mul.w	r3, r2, r3
 8019754:	3308      	adds	r3, #8
 8019756:	68fa      	ldr	r2, [r7, #12]
 8019758:	4413      	add	r3, r2
 801975a:	3302      	adds	r3, #2
 801975c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801975e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019760:	69f8      	ldr	r0, [r7, #28]
 8019762:	f000 f846 	bl	80197f2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8019766:	2300      	movs	r3, #0
 8019768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 801976c:	2300      	movs	r3, #0
 801976e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8019770:	e022      	b.n	80197b8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8019772:	f107 0316 	add.w	r3, r7, #22
 8019776:	4619      	mov	r1, r3
 8019778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801977a:	f000 f8c9 	bl	8019910 <USBH_GetNextDesc>
 801977e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8019780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019782:	785b      	ldrb	r3, [r3, #1]
 8019784:	2b05      	cmp	r3, #5
 8019786:	d117      	bne.n	80197b8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8019788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801978c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019790:	3201      	adds	r2, #1
 8019792:	00d2      	lsls	r2, r2, #3
 8019794:	211a      	movs	r1, #26
 8019796:	fb01 f303 	mul.w	r3, r1, r3
 801979a:	4413      	add	r3, r2
 801979c:	3308      	adds	r3, #8
 801979e:	68fa      	ldr	r2, [r7, #12]
 80197a0:	4413      	add	r3, r2
 80197a2:	3304      	adds	r3, #4
 80197a4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80197a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80197a8:	69b8      	ldr	r0, [r7, #24]
 80197aa:	f000 f851 	bl	8019850 <USBH_ParseEPDesc>
            ep_ix++;
 80197ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80197b2:	3301      	adds	r3, #1
 80197b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80197b8:	69fb      	ldr	r3, [r7, #28]
 80197ba:	791b      	ldrb	r3, [r3, #4]
 80197bc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80197c0:	429a      	cmp	r2, r3
 80197c2:	d204      	bcs.n	80197ce <USBH_ParseCfgDesc+0x120>
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	885a      	ldrh	r2, [r3, #2]
 80197c8:	8afb      	ldrh	r3, [r7, #22]
 80197ca:	429a      	cmp	r2, r3
 80197cc:	d8d1      	bhi.n	8019772 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80197ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80197d2:	3301      	adds	r3, #1
 80197d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80197d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80197dc:	2b01      	cmp	r3, #1
 80197de:	d804      	bhi.n	80197ea <USBH_ParseCfgDesc+0x13c>
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	885a      	ldrh	r2, [r3, #2]
 80197e4:	8afb      	ldrh	r3, [r7, #22]
 80197e6:	429a      	cmp	r2, r3
 80197e8:	d8a4      	bhi.n	8019734 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80197ea:	bf00      	nop
 80197ec:	3728      	adds	r7, #40	; 0x28
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bd80      	pop	{r7, pc}

080197f2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80197f2:	b480      	push	{r7}
 80197f4:	b083      	sub	sp, #12
 80197f6:	af00      	add	r7, sp, #0
 80197f8:	6078      	str	r0, [r7, #4]
 80197fa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80197fc:	683b      	ldr	r3, [r7, #0]
 80197fe:	781a      	ldrb	r2, [r3, #0]
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8019804:	683b      	ldr	r3, [r7, #0]
 8019806:	785a      	ldrb	r2, [r3, #1]
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	789a      	ldrb	r2, [r3, #2]
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8019814:	683b      	ldr	r3, [r7, #0]
 8019816:	78da      	ldrb	r2, [r3, #3]
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	791a      	ldrb	r2, [r3, #4]
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8019824:	683b      	ldr	r3, [r7, #0]
 8019826:	795a      	ldrb	r2, [r3, #5]
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 801982c:	683b      	ldr	r3, [r7, #0]
 801982e:	799a      	ldrb	r2, [r3, #6]
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8019834:	683b      	ldr	r3, [r7, #0]
 8019836:	79da      	ldrb	r2, [r3, #7]
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801983c:	683b      	ldr	r3, [r7, #0]
 801983e:	7a1a      	ldrb	r2, [r3, #8]
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	721a      	strb	r2, [r3, #8]
}
 8019844:	bf00      	nop
 8019846:	370c      	adds	r7, #12
 8019848:	46bd      	mov	sp, r7
 801984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984e:	4770      	bx	lr

08019850 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8019850:	b480      	push	{r7}
 8019852:	b083      	sub	sp, #12
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
 8019858:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	781a      	ldrb	r2, [r3, #0]
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8019862:	683b      	ldr	r3, [r7, #0]
 8019864:	785a      	ldrb	r2, [r3, #1]
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801986a:	683b      	ldr	r3, [r7, #0]
 801986c:	789a      	ldrb	r2, [r3, #2]
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8019872:	683b      	ldr	r3, [r7, #0]
 8019874:	78da      	ldrb	r2, [r3, #3]
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801987a:	683b      	ldr	r3, [r7, #0]
 801987c:	3304      	adds	r3, #4
 801987e:	781b      	ldrb	r3, [r3, #0]
 8019880:	b29a      	uxth	r2, r3
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	3305      	adds	r3, #5
 8019886:	781b      	ldrb	r3, [r3, #0]
 8019888:	b29b      	uxth	r3, r3
 801988a:	021b      	lsls	r3, r3, #8
 801988c:	b29b      	uxth	r3, r3
 801988e:	4313      	orrs	r3, r2
 8019890:	b29a      	uxth	r2, r3
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8019896:	683b      	ldr	r3, [r7, #0]
 8019898:	799a      	ldrb	r2, [r3, #6]
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	719a      	strb	r2, [r3, #6]
}
 801989e:	bf00      	nop
 80198a0:	370c      	adds	r7, #12
 80198a2:	46bd      	mov	sp, r7
 80198a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a8:	4770      	bx	lr

080198aa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80198aa:	b480      	push	{r7}
 80198ac:	b087      	sub	sp, #28
 80198ae:	af00      	add	r7, sp, #0
 80198b0:	60f8      	str	r0, [r7, #12]
 80198b2:	60b9      	str	r1, [r7, #8]
 80198b4:	4613      	mov	r3, r2
 80198b6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	3301      	adds	r3, #1
 80198bc:	781b      	ldrb	r3, [r3, #0]
 80198be:	2b03      	cmp	r3, #3
 80198c0:	d120      	bne.n	8019904 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	781b      	ldrb	r3, [r3, #0]
 80198c6:	1e9a      	subs	r2, r3, #2
 80198c8:	88fb      	ldrh	r3, [r7, #6]
 80198ca:	4293      	cmp	r3, r2
 80198cc:	bf28      	it	cs
 80198ce:	4613      	movcs	r3, r2
 80198d0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	3302      	adds	r3, #2
 80198d6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80198d8:	2300      	movs	r3, #0
 80198da:	82fb      	strh	r3, [r7, #22]
 80198dc:	e00b      	b.n	80198f6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80198de:	8afb      	ldrh	r3, [r7, #22]
 80198e0:	68fa      	ldr	r2, [r7, #12]
 80198e2:	4413      	add	r3, r2
 80198e4:	781a      	ldrb	r2, [r3, #0]
 80198e6:	68bb      	ldr	r3, [r7, #8]
 80198e8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80198ea:	68bb      	ldr	r3, [r7, #8]
 80198ec:	3301      	adds	r3, #1
 80198ee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80198f0:	8afb      	ldrh	r3, [r7, #22]
 80198f2:	3302      	adds	r3, #2
 80198f4:	82fb      	strh	r3, [r7, #22]
 80198f6:	8afa      	ldrh	r2, [r7, #22]
 80198f8:	8abb      	ldrh	r3, [r7, #20]
 80198fa:	429a      	cmp	r2, r3
 80198fc:	d3ef      	bcc.n	80198de <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80198fe:	68bb      	ldr	r3, [r7, #8]
 8019900:	2200      	movs	r2, #0
 8019902:	701a      	strb	r2, [r3, #0]
  }
}
 8019904:	bf00      	nop
 8019906:	371c      	adds	r7, #28
 8019908:	46bd      	mov	sp, r7
 801990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801990e:	4770      	bx	lr

08019910 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8019910:	b480      	push	{r7}
 8019912:	b085      	sub	sp, #20
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
 8019918:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801991a:	683b      	ldr	r3, [r7, #0]
 801991c:	881a      	ldrh	r2, [r3, #0]
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	b29b      	uxth	r3, r3
 8019924:	4413      	add	r3, r2
 8019926:	b29a      	uxth	r2, r3
 8019928:	683b      	ldr	r3, [r7, #0]
 801992a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	781b      	ldrb	r3, [r3, #0]
 8019930:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	4413      	add	r3, r2
 8019936:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8019938:	68fb      	ldr	r3, [r7, #12]
}
 801993a:	4618      	mov	r0, r3
 801993c:	3714      	adds	r7, #20
 801993e:	46bd      	mov	sp, r7
 8019940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019944:	4770      	bx	lr

08019946 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8019946:	b580      	push	{r7, lr}
 8019948:	b086      	sub	sp, #24
 801994a:	af00      	add	r7, sp, #0
 801994c:	60f8      	str	r0, [r7, #12]
 801994e:	60b9      	str	r1, [r7, #8]
 8019950:	4613      	mov	r3, r2
 8019952:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8019954:	2301      	movs	r3, #1
 8019956:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	789b      	ldrb	r3, [r3, #2]
 801995c:	2b01      	cmp	r3, #1
 801995e:	d002      	beq.n	8019966 <USBH_CtlReq+0x20>
 8019960:	2b02      	cmp	r3, #2
 8019962:	d00f      	beq.n	8019984 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8019964:	e027      	b.n	80199b6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	68ba      	ldr	r2, [r7, #8]
 801996a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	88fa      	ldrh	r2, [r7, #6]
 8019970:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	2201      	movs	r2, #1
 8019976:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	2202      	movs	r2, #2
 801997c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801997e:	2301      	movs	r3, #1
 8019980:	75fb      	strb	r3, [r7, #23]
      break;
 8019982:	e018      	b.n	80199b6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8019984:	68f8      	ldr	r0, [r7, #12]
 8019986:	f000 f81b 	bl	80199c0 <USBH_HandleControl>
 801998a:	4603      	mov	r3, r0
 801998c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801998e:	7dfb      	ldrb	r3, [r7, #23]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d002      	beq.n	801999a <USBH_CtlReq+0x54>
 8019994:	7dfb      	ldrb	r3, [r7, #23]
 8019996:	2b03      	cmp	r3, #3
 8019998:	d106      	bne.n	80199a8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	2201      	movs	r2, #1
 801999e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	2200      	movs	r2, #0
 80199a4:	761a      	strb	r2, [r3, #24]
      break;
 80199a6:	e005      	b.n	80199b4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80199a8:	7dfb      	ldrb	r3, [r7, #23]
 80199aa:	2b02      	cmp	r3, #2
 80199ac:	d102      	bne.n	80199b4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	2201      	movs	r2, #1
 80199b2:	709a      	strb	r2, [r3, #2]
      break;
 80199b4:	bf00      	nop
  }
  return status;
 80199b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80199b8:	4618      	mov	r0, r3
 80199ba:	3718      	adds	r7, #24
 80199bc:	46bd      	mov	sp, r7
 80199be:	bd80      	pop	{r7, pc}

080199c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b086      	sub	sp, #24
 80199c4:	af02      	add	r7, sp, #8
 80199c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80199c8:	2301      	movs	r3, #1
 80199ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80199cc:	2300      	movs	r3, #0
 80199ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	7e1b      	ldrb	r3, [r3, #24]
 80199d4:	3b01      	subs	r3, #1
 80199d6:	2b0a      	cmp	r3, #10
 80199d8:	f200 8156 	bhi.w	8019c88 <USBH_HandleControl+0x2c8>
 80199dc:	a201      	add	r2, pc, #4	; (adr r2, 80199e4 <USBH_HandleControl+0x24>)
 80199de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199e2:	bf00      	nop
 80199e4:	08019a11 	.word	0x08019a11
 80199e8:	08019a2b 	.word	0x08019a2b
 80199ec:	08019a95 	.word	0x08019a95
 80199f0:	08019abb 	.word	0x08019abb
 80199f4:	08019af3 	.word	0x08019af3
 80199f8:	08019b1d 	.word	0x08019b1d
 80199fc:	08019b6f 	.word	0x08019b6f
 8019a00:	08019b91 	.word	0x08019b91
 8019a04:	08019bcd 	.word	0x08019bcd
 8019a08:	08019bf3 	.word	0x08019bf3
 8019a0c:	08019c31 	.word	0x08019c31
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f103 0110 	add.w	r1, r3, #16
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	795b      	ldrb	r3, [r3, #5]
 8019a1a:	461a      	mov	r2, r3
 8019a1c:	6878      	ldr	r0, [r7, #4]
 8019a1e:	f000 f943 	bl	8019ca8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	2202      	movs	r2, #2
 8019a26:	761a      	strb	r2, [r3, #24]
      break;
 8019a28:	e139      	b.n	8019c9e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	795b      	ldrb	r3, [r3, #5]
 8019a2e:	4619      	mov	r1, r3
 8019a30:	6878      	ldr	r0, [r7, #4]
 8019a32:	f004 fb67 	bl	801e104 <USBH_LL_GetURBState>
 8019a36:	4603      	mov	r3, r0
 8019a38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8019a3a:	7bbb      	ldrb	r3, [r7, #14]
 8019a3c:	2b01      	cmp	r3, #1
 8019a3e:	d11e      	bne.n	8019a7e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	7c1b      	ldrb	r3, [r3, #16]
 8019a44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019a48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	8adb      	ldrh	r3, [r3, #22]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d00a      	beq.n	8019a68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8019a52:	7b7b      	ldrb	r3, [r7, #13]
 8019a54:	2b80      	cmp	r3, #128	; 0x80
 8019a56:	d103      	bne.n	8019a60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	2203      	movs	r2, #3
 8019a5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8019a5e:	e115      	b.n	8019c8c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	2205      	movs	r2, #5
 8019a64:	761a      	strb	r2, [r3, #24]
      break;
 8019a66:	e111      	b.n	8019c8c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8019a68:	7b7b      	ldrb	r3, [r7, #13]
 8019a6a:	2b80      	cmp	r3, #128	; 0x80
 8019a6c:	d103      	bne.n	8019a76 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	2209      	movs	r2, #9
 8019a72:	761a      	strb	r2, [r3, #24]
      break;
 8019a74:	e10a      	b.n	8019c8c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	2207      	movs	r2, #7
 8019a7a:	761a      	strb	r2, [r3, #24]
      break;
 8019a7c:	e106      	b.n	8019c8c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8019a7e:	7bbb      	ldrb	r3, [r7, #14]
 8019a80:	2b04      	cmp	r3, #4
 8019a82:	d003      	beq.n	8019a8c <USBH_HandleControl+0xcc>
 8019a84:	7bbb      	ldrb	r3, [r7, #14]
 8019a86:	2b02      	cmp	r3, #2
 8019a88:	f040 8100 	bne.w	8019c8c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	220b      	movs	r2, #11
 8019a90:	761a      	strb	r2, [r3, #24]
      break;
 8019a92:	e0fb      	b.n	8019c8c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019a9a:	b29a      	uxth	r2, r3
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	6899      	ldr	r1, [r3, #8]
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	899a      	ldrh	r2, [r3, #12]
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	791b      	ldrb	r3, [r3, #4]
 8019aac:	6878      	ldr	r0, [r7, #4]
 8019aae:	f000 f93a 	bl	8019d26 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	2204      	movs	r2, #4
 8019ab6:	761a      	strb	r2, [r3, #24]
      break;
 8019ab8:	e0f1      	b.n	8019c9e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	791b      	ldrb	r3, [r3, #4]
 8019abe:	4619      	mov	r1, r3
 8019ac0:	6878      	ldr	r0, [r7, #4]
 8019ac2:	f004 fb1f 	bl	801e104 <USBH_LL_GetURBState>
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8019aca:	7bbb      	ldrb	r3, [r7, #14]
 8019acc:	2b01      	cmp	r3, #1
 8019ace:	d102      	bne.n	8019ad6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	2209      	movs	r2, #9
 8019ad4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8019ad6:	7bbb      	ldrb	r3, [r7, #14]
 8019ad8:	2b05      	cmp	r3, #5
 8019ada:	d102      	bne.n	8019ae2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8019adc:	2303      	movs	r3, #3
 8019ade:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8019ae0:	e0d6      	b.n	8019c90 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8019ae2:	7bbb      	ldrb	r3, [r7, #14]
 8019ae4:	2b04      	cmp	r3, #4
 8019ae6:	f040 80d3 	bne.w	8019c90 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	220b      	movs	r2, #11
 8019aee:	761a      	strb	r2, [r3, #24]
      break;
 8019af0:	e0ce      	b.n	8019c90 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	6899      	ldr	r1, [r3, #8]
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	899a      	ldrh	r2, [r3, #12]
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	795b      	ldrb	r3, [r3, #5]
 8019afe:	2001      	movs	r0, #1
 8019b00:	9000      	str	r0, [sp, #0]
 8019b02:	6878      	ldr	r0, [r7, #4]
 8019b04:	f000 f8ea 	bl	8019cdc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019b0e:	b29a      	uxth	r2, r3
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	2206      	movs	r2, #6
 8019b18:	761a      	strb	r2, [r3, #24]
      break;
 8019b1a:	e0c0      	b.n	8019c9e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	795b      	ldrb	r3, [r3, #5]
 8019b20:	4619      	mov	r1, r3
 8019b22:	6878      	ldr	r0, [r7, #4]
 8019b24:	f004 faee 	bl	801e104 <USBH_LL_GetURBState>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8019b2c:	7bbb      	ldrb	r3, [r7, #14]
 8019b2e:	2b01      	cmp	r3, #1
 8019b30:	d103      	bne.n	8019b3a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	2207      	movs	r2, #7
 8019b36:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8019b38:	e0ac      	b.n	8019c94 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8019b3a:	7bbb      	ldrb	r3, [r7, #14]
 8019b3c:	2b05      	cmp	r3, #5
 8019b3e:	d105      	bne.n	8019b4c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	220c      	movs	r2, #12
 8019b44:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8019b46:	2303      	movs	r3, #3
 8019b48:	73fb      	strb	r3, [r7, #15]
      break;
 8019b4a:	e0a3      	b.n	8019c94 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8019b4c:	7bbb      	ldrb	r3, [r7, #14]
 8019b4e:	2b02      	cmp	r3, #2
 8019b50:	d103      	bne.n	8019b5a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	2205      	movs	r2, #5
 8019b56:	761a      	strb	r2, [r3, #24]
      break;
 8019b58:	e09c      	b.n	8019c94 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8019b5a:	7bbb      	ldrb	r3, [r7, #14]
 8019b5c:	2b04      	cmp	r3, #4
 8019b5e:	f040 8099 	bne.w	8019c94 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	220b      	movs	r2, #11
 8019b66:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8019b68:	2302      	movs	r3, #2
 8019b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8019b6c:	e092      	b.n	8019c94 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	791b      	ldrb	r3, [r3, #4]
 8019b72:	2200      	movs	r2, #0
 8019b74:	2100      	movs	r1, #0
 8019b76:	6878      	ldr	r0, [r7, #4]
 8019b78:	f000 f8d5 	bl	8019d26 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019b82:	b29a      	uxth	r2, r3
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	2208      	movs	r2, #8
 8019b8c:	761a      	strb	r2, [r3, #24]

      break;
 8019b8e:	e086      	b.n	8019c9e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	791b      	ldrb	r3, [r3, #4]
 8019b94:	4619      	mov	r1, r3
 8019b96:	6878      	ldr	r0, [r7, #4]
 8019b98:	f004 fab4 	bl	801e104 <USBH_LL_GetURBState>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8019ba0:	7bbb      	ldrb	r3, [r7, #14]
 8019ba2:	2b01      	cmp	r3, #1
 8019ba4:	d105      	bne.n	8019bb2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	220d      	movs	r2, #13
 8019baa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8019bac:	2300      	movs	r3, #0
 8019bae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8019bb0:	e072      	b.n	8019c98 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8019bb2:	7bbb      	ldrb	r3, [r7, #14]
 8019bb4:	2b04      	cmp	r3, #4
 8019bb6:	d103      	bne.n	8019bc0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	220b      	movs	r2, #11
 8019bbc:	761a      	strb	r2, [r3, #24]
      break;
 8019bbe:	e06b      	b.n	8019c98 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8019bc0:	7bbb      	ldrb	r3, [r7, #14]
 8019bc2:	2b05      	cmp	r3, #5
 8019bc4:	d168      	bne.n	8019c98 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8019bc6:	2303      	movs	r3, #3
 8019bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8019bca:	e065      	b.n	8019c98 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	795b      	ldrb	r3, [r3, #5]
 8019bd0:	2201      	movs	r2, #1
 8019bd2:	9200      	str	r2, [sp, #0]
 8019bd4:	2200      	movs	r2, #0
 8019bd6:	2100      	movs	r1, #0
 8019bd8:	6878      	ldr	r0, [r7, #4]
 8019bda:	f000 f87f 	bl	8019cdc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019be4:	b29a      	uxth	r2, r3
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	220a      	movs	r2, #10
 8019bee:	761a      	strb	r2, [r3, #24]
      break;
 8019bf0:	e055      	b.n	8019c9e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	795b      	ldrb	r3, [r3, #5]
 8019bf6:	4619      	mov	r1, r3
 8019bf8:	6878      	ldr	r0, [r7, #4]
 8019bfa:	f004 fa83 	bl	801e104 <USBH_LL_GetURBState>
 8019bfe:	4603      	mov	r3, r0
 8019c00:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8019c02:	7bbb      	ldrb	r3, [r7, #14]
 8019c04:	2b01      	cmp	r3, #1
 8019c06:	d105      	bne.n	8019c14 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8019c08:	2300      	movs	r3, #0
 8019c0a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	220d      	movs	r2, #13
 8019c10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8019c12:	e043      	b.n	8019c9c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8019c14:	7bbb      	ldrb	r3, [r7, #14]
 8019c16:	2b02      	cmp	r3, #2
 8019c18:	d103      	bne.n	8019c22 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	2209      	movs	r2, #9
 8019c1e:	761a      	strb	r2, [r3, #24]
      break;
 8019c20:	e03c      	b.n	8019c9c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8019c22:	7bbb      	ldrb	r3, [r7, #14]
 8019c24:	2b04      	cmp	r3, #4
 8019c26:	d139      	bne.n	8019c9c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	220b      	movs	r2, #11
 8019c2c:	761a      	strb	r2, [r3, #24]
      break;
 8019c2e:	e035      	b.n	8019c9c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	7e5b      	ldrb	r3, [r3, #25]
 8019c34:	3301      	adds	r3, #1
 8019c36:	b2da      	uxtb	r2, r3
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	765a      	strb	r2, [r3, #25]
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	7e5b      	ldrb	r3, [r3, #25]
 8019c40:	2b02      	cmp	r3, #2
 8019c42:	d806      	bhi.n	8019c52 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	2201      	movs	r2, #1
 8019c48:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	2201      	movs	r2, #1
 8019c4e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8019c50:	e025      	b.n	8019c9e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019c58:	2106      	movs	r1, #6
 8019c5a:	6878      	ldr	r0, [r7, #4]
 8019c5c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	2200      	movs	r2, #0
 8019c62:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	795b      	ldrb	r3, [r3, #5]
 8019c68:	4619      	mov	r1, r3
 8019c6a:	6878      	ldr	r0, [r7, #4]
 8019c6c:	f000 f90c 	bl	8019e88 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	791b      	ldrb	r3, [r3, #4]
 8019c74:	4619      	mov	r1, r3
 8019c76:	6878      	ldr	r0, [r7, #4]
 8019c78:	f000 f906 	bl	8019e88 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	2200      	movs	r2, #0
 8019c80:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8019c82:	2302      	movs	r3, #2
 8019c84:	73fb      	strb	r3, [r7, #15]
      break;
 8019c86:	e00a      	b.n	8019c9e <USBH_HandleControl+0x2de>

    default:
      break;
 8019c88:	bf00      	nop
 8019c8a:	e008      	b.n	8019c9e <USBH_HandleControl+0x2de>
      break;
 8019c8c:	bf00      	nop
 8019c8e:	e006      	b.n	8019c9e <USBH_HandleControl+0x2de>
      break;
 8019c90:	bf00      	nop
 8019c92:	e004      	b.n	8019c9e <USBH_HandleControl+0x2de>
      break;
 8019c94:	bf00      	nop
 8019c96:	e002      	b.n	8019c9e <USBH_HandleControl+0x2de>
      break;
 8019c98:	bf00      	nop
 8019c9a:	e000      	b.n	8019c9e <USBH_HandleControl+0x2de>
      break;
 8019c9c:	bf00      	nop
  }

  return status;
 8019c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ca0:	4618      	mov	r0, r3
 8019ca2:	3710      	adds	r7, #16
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	bd80      	pop	{r7, pc}

08019ca8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b088      	sub	sp, #32
 8019cac:	af04      	add	r7, sp, #16
 8019cae:	60f8      	str	r0, [r7, #12]
 8019cb0:	60b9      	str	r1, [r7, #8]
 8019cb2:	4613      	mov	r3, r2
 8019cb4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8019cb6:	79f9      	ldrb	r1, [r7, #7]
 8019cb8:	2300      	movs	r3, #0
 8019cba:	9303      	str	r3, [sp, #12]
 8019cbc:	2308      	movs	r3, #8
 8019cbe:	9302      	str	r3, [sp, #8]
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	9301      	str	r3, [sp, #4]
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	9300      	str	r3, [sp, #0]
 8019cc8:	2300      	movs	r3, #0
 8019cca:	2200      	movs	r2, #0
 8019ccc:	68f8      	ldr	r0, [r7, #12]
 8019cce:	f004 f9e8 	bl	801e0a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8019cd2:	2300      	movs	r3, #0
}
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	3710      	adds	r7, #16
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	bd80      	pop	{r7, pc}

08019cdc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	b088      	sub	sp, #32
 8019ce0:	af04      	add	r7, sp, #16
 8019ce2:	60f8      	str	r0, [r7, #12]
 8019ce4:	60b9      	str	r1, [r7, #8]
 8019ce6:	4611      	mov	r1, r2
 8019ce8:	461a      	mov	r2, r3
 8019cea:	460b      	mov	r3, r1
 8019cec:	80fb      	strh	r3, [r7, #6]
 8019cee:	4613      	mov	r3, r2
 8019cf0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d001      	beq.n	8019d00 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8019d00:	7979      	ldrb	r1, [r7, #5]
 8019d02:	7e3b      	ldrb	r3, [r7, #24]
 8019d04:	9303      	str	r3, [sp, #12]
 8019d06:	88fb      	ldrh	r3, [r7, #6]
 8019d08:	9302      	str	r3, [sp, #8]
 8019d0a:	68bb      	ldr	r3, [r7, #8]
 8019d0c:	9301      	str	r3, [sp, #4]
 8019d0e:	2301      	movs	r3, #1
 8019d10:	9300      	str	r3, [sp, #0]
 8019d12:	2300      	movs	r3, #0
 8019d14:	2200      	movs	r2, #0
 8019d16:	68f8      	ldr	r0, [r7, #12]
 8019d18:	f004 f9c3 	bl	801e0a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8019d1c:	2300      	movs	r3, #0
}
 8019d1e:	4618      	mov	r0, r3
 8019d20:	3710      	adds	r7, #16
 8019d22:	46bd      	mov	sp, r7
 8019d24:	bd80      	pop	{r7, pc}

08019d26 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8019d26:	b580      	push	{r7, lr}
 8019d28:	b088      	sub	sp, #32
 8019d2a:	af04      	add	r7, sp, #16
 8019d2c:	60f8      	str	r0, [r7, #12]
 8019d2e:	60b9      	str	r1, [r7, #8]
 8019d30:	4611      	mov	r1, r2
 8019d32:	461a      	mov	r2, r3
 8019d34:	460b      	mov	r3, r1
 8019d36:	80fb      	strh	r3, [r7, #6]
 8019d38:	4613      	mov	r3, r2
 8019d3a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8019d3c:	7979      	ldrb	r1, [r7, #5]
 8019d3e:	2300      	movs	r3, #0
 8019d40:	9303      	str	r3, [sp, #12]
 8019d42:	88fb      	ldrh	r3, [r7, #6]
 8019d44:	9302      	str	r3, [sp, #8]
 8019d46:	68bb      	ldr	r3, [r7, #8]
 8019d48:	9301      	str	r3, [sp, #4]
 8019d4a:	2301      	movs	r3, #1
 8019d4c:	9300      	str	r3, [sp, #0]
 8019d4e:	2300      	movs	r3, #0
 8019d50:	2201      	movs	r2, #1
 8019d52:	68f8      	ldr	r0, [r7, #12]
 8019d54:	f004 f9a5 	bl	801e0a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8019d58:	2300      	movs	r3, #0

}
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	3710      	adds	r7, #16
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}

08019d62 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8019d62:	b580      	push	{r7, lr}
 8019d64:	b088      	sub	sp, #32
 8019d66:	af04      	add	r7, sp, #16
 8019d68:	60f8      	str	r0, [r7, #12]
 8019d6a:	60b9      	str	r1, [r7, #8]
 8019d6c:	4611      	mov	r1, r2
 8019d6e:	461a      	mov	r2, r3
 8019d70:	460b      	mov	r3, r1
 8019d72:	80fb      	strh	r3, [r7, #6]
 8019d74:	4613      	mov	r3, r2
 8019d76:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d001      	beq.n	8019d86 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8019d82:	2300      	movs	r3, #0
 8019d84:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8019d86:	7979      	ldrb	r1, [r7, #5]
 8019d88:	7e3b      	ldrb	r3, [r7, #24]
 8019d8a:	9303      	str	r3, [sp, #12]
 8019d8c:	88fb      	ldrh	r3, [r7, #6]
 8019d8e:	9302      	str	r3, [sp, #8]
 8019d90:	68bb      	ldr	r3, [r7, #8]
 8019d92:	9301      	str	r3, [sp, #4]
 8019d94:	2301      	movs	r3, #1
 8019d96:	9300      	str	r3, [sp, #0]
 8019d98:	2302      	movs	r3, #2
 8019d9a:	2200      	movs	r2, #0
 8019d9c:	68f8      	ldr	r0, [r7, #12]
 8019d9e:	f004 f980 	bl	801e0a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8019da2:	2300      	movs	r3, #0
}
 8019da4:	4618      	mov	r0, r3
 8019da6:	3710      	adds	r7, #16
 8019da8:	46bd      	mov	sp, r7
 8019daa:	bd80      	pop	{r7, pc}

08019dac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b088      	sub	sp, #32
 8019db0:	af04      	add	r7, sp, #16
 8019db2:	60f8      	str	r0, [r7, #12]
 8019db4:	60b9      	str	r1, [r7, #8]
 8019db6:	4611      	mov	r1, r2
 8019db8:	461a      	mov	r2, r3
 8019dba:	460b      	mov	r3, r1
 8019dbc:	80fb      	strh	r3, [r7, #6]
 8019dbe:	4613      	mov	r3, r2
 8019dc0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8019dc2:	7979      	ldrb	r1, [r7, #5]
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	9303      	str	r3, [sp, #12]
 8019dc8:	88fb      	ldrh	r3, [r7, #6]
 8019dca:	9302      	str	r3, [sp, #8]
 8019dcc:	68bb      	ldr	r3, [r7, #8]
 8019dce:	9301      	str	r3, [sp, #4]
 8019dd0:	2301      	movs	r3, #1
 8019dd2:	9300      	str	r3, [sp, #0]
 8019dd4:	2302      	movs	r3, #2
 8019dd6:	2201      	movs	r2, #1
 8019dd8:	68f8      	ldr	r0, [r7, #12]
 8019dda:	f004 f962 	bl	801e0a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8019dde:	2300      	movs	r3, #0
}
 8019de0:	4618      	mov	r0, r3
 8019de2:	3710      	adds	r7, #16
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bd80      	pop	{r7, pc}

08019de8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b086      	sub	sp, #24
 8019dec:	af04      	add	r7, sp, #16
 8019dee:	6078      	str	r0, [r7, #4]
 8019df0:	4608      	mov	r0, r1
 8019df2:	4611      	mov	r1, r2
 8019df4:	461a      	mov	r2, r3
 8019df6:	4603      	mov	r3, r0
 8019df8:	70fb      	strb	r3, [r7, #3]
 8019dfa:	460b      	mov	r3, r1
 8019dfc:	70bb      	strb	r3, [r7, #2]
 8019dfe:	4613      	mov	r3, r2
 8019e00:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8019e02:	7878      	ldrb	r0, [r7, #1]
 8019e04:	78ba      	ldrb	r2, [r7, #2]
 8019e06:	78f9      	ldrb	r1, [r7, #3]
 8019e08:	8b3b      	ldrh	r3, [r7, #24]
 8019e0a:	9302      	str	r3, [sp, #8]
 8019e0c:	7d3b      	ldrb	r3, [r7, #20]
 8019e0e:	9301      	str	r3, [sp, #4]
 8019e10:	7c3b      	ldrb	r3, [r7, #16]
 8019e12:	9300      	str	r3, [sp, #0]
 8019e14:	4603      	mov	r3, r0
 8019e16:	6878      	ldr	r0, [r7, #4]
 8019e18:	f004 f8f5 	bl	801e006 <USBH_LL_OpenPipe>

  return USBH_OK;
 8019e1c:	2300      	movs	r3, #0
}
 8019e1e:	4618      	mov	r0, r3
 8019e20:	3708      	adds	r7, #8
 8019e22:	46bd      	mov	sp, r7
 8019e24:	bd80      	pop	{r7, pc}

08019e26 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8019e26:	b580      	push	{r7, lr}
 8019e28:	b082      	sub	sp, #8
 8019e2a:	af00      	add	r7, sp, #0
 8019e2c:	6078      	str	r0, [r7, #4]
 8019e2e:	460b      	mov	r3, r1
 8019e30:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8019e32:	78fb      	ldrb	r3, [r7, #3]
 8019e34:	4619      	mov	r1, r3
 8019e36:	6878      	ldr	r0, [r7, #4]
 8019e38:	f004 f914 	bl	801e064 <USBH_LL_ClosePipe>

  return USBH_OK;
 8019e3c:	2300      	movs	r3, #0
}
 8019e3e:	4618      	mov	r0, r3
 8019e40:	3708      	adds	r7, #8
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}

08019e46 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8019e46:	b580      	push	{r7, lr}
 8019e48:	b084      	sub	sp, #16
 8019e4a:	af00      	add	r7, sp, #0
 8019e4c:	6078      	str	r0, [r7, #4]
 8019e4e:	460b      	mov	r3, r1
 8019e50:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8019e52:	6878      	ldr	r0, [r7, #4]
 8019e54:	f000 f836 	bl	8019ec4 <USBH_GetFreePipe>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8019e5c:	89fb      	ldrh	r3, [r7, #14]
 8019e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019e62:	4293      	cmp	r3, r2
 8019e64:	d00a      	beq.n	8019e7c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8019e66:	78fa      	ldrb	r2, [r7, #3]
 8019e68:	89fb      	ldrh	r3, [r7, #14]
 8019e6a:	f003 030f 	and.w	r3, r3, #15
 8019e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019e72:	6879      	ldr	r1, [r7, #4]
 8019e74:	33e0      	adds	r3, #224	; 0xe0
 8019e76:	009b      	lsls	r3, r3, #2
 8019e78:	440b      	add	r3, r1
 8019e7a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8019e7c:	89fb      	ldrh	r3, [r7, #14]
 8019e7e:	b2db      	uxtb	r3, r3
}
 8019e80:	4618      	mov	r0, r3
 8019e82:	3710      	adds	r7, #16
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}

08019e88 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8019e88:	b480      	push	{r7}
 8019e8a:	b083      	sub	sp, #12
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
 8019e90:	460b      	mov	r3, r1
 8019e92:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8019e94:	78fb      	ldrb	r3, [r7, #3]
 8019e96:	2b0a      	cmp	r3, #10
 8019e98:	d80d      	bhi.n	8019eb6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8019e9a:	78fb      	ldrb	r3, [r7, #3]
 8019e9c:	687a      	ldr	r2, [r7, #4]
 8019e9e:	33e0      	adds	r3, #224	; 0xe0
 8019ea0:	009b      	lsls	r3, r3, #2
 8019ea2:	4413      	add	r3, r2
 8019ea4:	685a      	ldr	r2, [r3, #4]
 8019ea6:	78fb      	ldrb	r3, [r7, #3]
 8019ea8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8019eac:	6879      	ldr	r1, [r7, #4]
 8019eae:	33e0      	adds	r3, #224	; 0xe0
 8019eb0:	009b      	lsls	r3, r3, #2
 8019eb2:	440b      	add	r3, r1
 8019eb4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8019eb6:	2300      	movs	r3, #0
}
 8019eb8:	4618      	mov	r0, r3
 8019eba:	370c      	adds	r7, #12
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec2:	4770      	bx	lr

08019ec4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8019ec4:	b480      	push	{r7}
 8019ec6:	b085      	sub	sp, #20
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8019ecc:	2300      	movs	r3, #0
 8019ece:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	73fb      	strb	r3, [r7, #15]
 8019ed4:	e00f      	b.n	8019ef6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8019ed6:	7bfb      	ldrb	r3, [r7, #15]
 8019ed8:	687a      	ldr	r2, [r7, #4]
 8019eda:	33e0      	adds	r3, #224	; 0xe0
 8019edc:	009b      	lsls	r3, r3, #2
 8019ede:	4413      	add	r3, r2
 8019ee0:	685b      	ldr	r3, [r3, #4]
 8019ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d102      	bne.n	8019ef0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8019eea:	7bfb      	ldrb	r3, [r7, #15]
 8019eec:	b29b      	uxth	r3, r3
 8019eee:	e007      	b.n	8019f00 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8019ef0:	7bfb      	ldrb	r3, [r7, #15]
 8019ef2:	3301      	adds	r3, #1
 8019ef4:	73fb      	strb	r3, [r7, #15]
 8019ef6:	7bfb      	ldrb	r3, [r7, #15]
 8019ef8:	2b0a      	cmp	r3, #10
 8019efa:	d9ec      	bls.n	8019ed6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8019efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8019f00:	4618      	mov	r0, r3
 8019f02:	3714      	adds	r7, #20
 8019f04:	46bd      	mov	sp, r7
 8019f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f0a:	4770      	bx	lr

08019f0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8019f0c:	b580      	push	{r7, lr}
 8019f0e:	b084      	sub	sp, #16
 8019f10:	af00      	add	r7, sp, #0
 8019f12:	4603      	mov	r3, r0
 8019f14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8019f16:	79fb      	ldrb	r3, [r7, #7]
 8019f18:	4a08      	ldr	r2, [pc, #32]	; (8019f3c <disk_status+0x30>)
 8019f1a:	009b      	lsls	r3, r3, #2
 8019f1c:	4413      	add	r3, r2
 8019f1e:	685b      	ldr	r3, [r3, #4]
 8019f20:	685b      	ldr	r3, [r3, #4]
 8019f22:	79fa      	ldrb	r2, [r7, #7]
 8019f24:	4905      	ldr	r1, [pc, #20]	; (8019f3c <disk_status+0x30>)
 8019f26:	440a      	add	r2, r1
 8019f28:	7c12      	ldrb	r2, [r2, #16]
 8019f2a:	4610      	mov	r0, r2
 8019f2c:	4798      	blx	r3
 8019f2e:	4603      	mov	r3, r0
 8019f30:	73fb      	strb	r3, [r7, #15]
  return stat;
 8019f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f34:	4618      	mov	r0, r3
 8019f36:	3710      	adds	r7, #16
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	bd80      	pop	{r7, pc}
 8019f3c:	20000df8 	.word	0x20000df8

08019f40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b084      	sub	sp, #16
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	4603      	mov	r3, r0
 8019f48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8019f4a:	2300      	movs	r3, #0
 8019f4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8019f4e:	79fb      	ldrb	r3, [r7, #7]
 8019f50:	4a0d      	ldr	r2, [pc, #52]	; (8019f88 <disk_initialize+0x48>)
 8019f52:	5cd3      	ldrb	r3, [r2, r3]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d111      	bne.n	8019f7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8019f58:	79fb      	ldrb	r3, [r7, #7]
 8019f5a:	4a0b      	ldr	r2, [pc, #44]	; (8019f88 <disk_initialize+0x48>)
 8019f5c:	2101      	movs	r1, #1
 8019f5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8019f60:	79fb      	ldrb	r3, [r7, #7]
 8019f62:	4a09      	ldr	r2, [pc, #36]	; (8019f88 <disk_initialize+0x48>)
 8019f64:	009b      	lsls	r3, r3, #2
 8019f66:	4413      	add	r3, r2
 8019f68:	685b      	ldr	r3, [r3, #4]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	79fa      	ldrb	r2, [r7, #7]
 8019f6e:	4906      	ldr	r1, [pc, #24]	; (8019f88 <disk_initialize+0x48>)
 8019f70:	440a      	add	r2, r1
 8019f72:	7c12      	ldrb	r2, [r2, #16]
 8019f74:	4610      	mov	r0, r2
 8019f76:	4798      	blx	r3
 8019f78:	4603      	mov	r3, r0
 8019f7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8019f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f7e:	4618      	mov	r0, r3
 8019f80:	3710      	adds	r7, #16
 8019f82:	46bd      	mov	sp, r7
 8019f84:	bd80      	pop	{r7, pc}
 8019f86:	bf00      	nop
 8019f88:	20000df8 	.word	0x20000df8

08019f8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8019f8c:	b590      	push	{r4, r7, lr}
 8019f8e:	b087      	sub	sp, #28
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	60b9      	str	r1, [r7, #8]
 8019f94:	607a      	str	r2, [r7, #4]
 8019f96:	603b      	str	r3, [r7, #0]
 8019f98:	4603      	mov	r3, r0
 8019f9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8019f9c:	7bfb      	ldrb	r3, [r7, #15]
 8019f9e:	4a0a      	ldr	r2, [pc, #40]	; (8019fc8 <disk_read+0x3c>)
 8019fa0:	009b      	lsls	r3, r3, #2
 8019fa2:	4413      	add	r3, r2
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	689c      	ldr	r4, [r3, #8]
 8019fa8:	7bfb      	ldrb	r3, [r7, #15]
 8019faa:	4a07      	ldr	r2, [pc, #28]	; (8019fc8 <disk_read+0x3c>)
 8019fac:	4413      	add	r3, r2
 8019fae:	7c18      	ldrb	r0, [r3, #16]
 8019fb0:	683b      	ldr	r3, [r7, #0]
 8019fb2:	687a      	ldr	r2, [r7, #4]
 8019fb4:	68b9      	ldr	r1, [r7, #8]
 8019fb6:	47a0      	blx	r4
 8019fb8:	4603      	mov	r3, r0
 8019fba:	75fb      	strb	r3, [r7, #23]
  return res;
 8019fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	371c      	adds	r7, #28
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	bd90      	pop	{r4, r7, pc}
 8019fc6:	bf00      	nop
 8019fc8:	20000df8 	.word	0x20000df8

08019fcc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8019fcc:	b590      	push	{r4, r7, lr}
 8019fce:	b087      	sub	sp, #28
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	60b9      	str	r1, [r7, #8]
 8019fd4:	607a      	str	r2, [r7, #4]
 8019fd6:	603b      	str	r3, [r7, #0]
 8019fd8:	4603      	mov	r3, r0
 8019fda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8019fdc:	7bfb      	ldrb	r3, [r7, #15]
 8019fde:	4a0a      	ldr	r2, [pc, #40]	; (801a008 <disk_write+0x3c>)
 8019fe0:	009b      	lsls	r3, r3, #2
 8019fe2:	4413      	add	r3, r2
 8019fe4:	685b      	ldr	r3, [r3, #4]
 8019fe6:	68dc      	ldr	r4, [r3, #12]
 8019fe8:	7bfb      	ldrb	r3, [r7, #15]
 8019fea:	4a07      	ldr	r2, [pc, #28]	; (801a008 <disk_write+0x3c>)
 8019fec:	4413      	add	r3, r2
 8019fee:	7c18      	ldrb	r0, [r3, #16]
 8019ff0:	683b      	ldr	r3, [r7, #0]
 8019ff2:	687a      	ldr	r2, [r7, #4]
 8019ff4:	68b9      	ldr	r1, [r7, #8]
 8019ff6:	47a0      	blx	r4
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	75fb      	strb	r3, [r7, #23]
  return res;
 8019ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8019ffe:	4618      	mov	r0, r3
 801a000:	371c      	adds	r7, #28
 801a002:	46bd      	mov	sp, r7
 801a004:	bd90      	pop	{r4, r7, pc}
 801a006:	bf00      	nop
 801a008:	20000df8 	.word	0x20000df8

0801a00c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b084      	sub	sp, #16
 801a010:	af00      	add	r7, sp, #0
 801a012:	4603      	mov	r3, r0
 801a014:	603a      	str	r2, [r7, #0]
 801a016:	71fb      	strb	r3, [r7, #7]
 801a018:	460b      	mov	r3, r1
 801a01a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a01c:	79fb      	ldrb	r3, [r7, #7]
 801a01e:	4a09      	ldr	r2, [pc, #36]	; (801a044 <disk_ioctl+0x38>)
 801a020:	009b      	lsls	r3, r3, #2
 801a022:	4413      	add	r3, r2
 801a024:	685b      	ldr	r3, [r3, #4]
 801a026:	691b      	ldr	r3, [r3, #16]
 801a028:	79fa      	ldrb	r2, [r7, #7]
 801a02a:	4906      	ldr	r1, [pc, #24]	; (801a044 <disk_ioctl+0x38>)
 801a02c:	440a      	add	r2, r1
 801a02e:	7c10      	ldrb	r0, [r2, #16]
 801a030:	79b9      	ldrb	r1, [r7, #6]
 801a032:	683a      	ldr	r2, [r7, #0]
 801a034:	4798      	blx	r3
 801a036:	4603      	mov	r3, r0
 801a038:	73fb      	strb	r3, [r7, #15]
  return res;
 801a03a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a03c:	4618      	mov	r0, r3
 801a03e:	3710      	adds	r7, #16
 801a040:	46bd      	mov	sp, r7
 801a042:	bd80      	pop	{r7, pc}
 801a044:	20000df8 	.word	0x20000df8

0801a048 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a048:	b480      	push	{r7}
 801a04a:	b085      	sub	sp, #20
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	3301      	adds	r3, #1
 801a054:	781b      	ldrb	r3, [r3, #0]
 801a056:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a058:	89fb      	ldrh	r3, [r7, #14]
 801a05a:	021b      	lsls	r3, r3, #8
 801a05c:	b21a      	sxth	r2, r3
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	781b      	ldrb	r3, [r3, #0]
 801a062:	b21b      	sxth	r3, r3
 801a064:	4313      	orrs	r3, r2
 801a066:	b21b      	sxth	r3, r3
 801a068:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a06a:	89fb      	ldrh	r3, [r7, #14]
}
 801a06c:	4618      	mov	r0, r3
 801a06e:	3714      	adds	r7, #20
 801a070:	46bd      	mov	sp, r7
 801a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a076:	4770      	bx	lr

0801a078 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a078:	b480      	push	{r7}
 801a07a:	b085      	sub	sp, #20
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	3303      	adds	r3, #3
 801a084:	781b      	ldrb	r3, [r3, #0]
 801a086:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	021b      	lsls	r3, r3, #8
 801a08c:	687a      	ldr	r2, [r7, #4]
 801a08e:	3202      	adds	r2, #2
 801a090:	7812      	ldrb	r2, [r2, #0]
 801a092:	4313      	orrs	r3, r2
 801a094:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	021b      	lsls	r3, r3, #8
 801a09a:	687a      	ldr	r2, [r7, #4]
 801a09c:	3201      	adds	r2, #1
 801a09e:	7812      	ldrb	r2, [r2, #0]
 801a0a0:	4313      	orrs	r3, r2
 801a0a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	021b      	lsls	r3, r3, #8
 801a0a8:	687a      	ldr	r2, [r7, #4]
 801a0aa:	7812      	ldrb	r2, [r2, #0]
 801a0ac:	4313      	orrs	r3, r2
 801a0ae:	60fb      	str	r3, [r7, #12]
	return rv;
 801a0b0:	68fb      	ldr	r3, [r7, #12]
}
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	3714      	adds	r7, #20
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0bc:	4770      	bx	lr

0801a0be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a0be:	b480      	push	{r7}
 801a0c0:	b083      	sub	sp, #12
 801a0c2:	af00      	add	r7, sp, #0
 801a0c4:	6078      	str	r0, [r7, #4]
 801a0c6:	460b      	mov	r3, r1
 801a0c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	1c5a      	adds	r2, r3, #1
 801a0ce:	607a      	str	r2, [r7, #4]
 801a0d0:	887a      	ldrh	r2, [r7, #2]
 801a0d2:	b2d2      	uxtb	r2, r2
 801a0d4:	701a      	strb	r2, [r3, #0]
 801a0d6:	887b      	ldrh	r3, [r7, #2]
 801a0d8:	0a1b      	lsrs	r3, r3, #8
 801a0da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	1c5a      	adds	r2, r3, #1
 801a0e0:	607a      	str	r2, [r7, #4]
 801a0e2:	887a      	ldrh	r2, [r7, #2]
 801a0e4:	b2d2      	uxtb	r2, r2
 801a0e6:	701a      	strb	r2, [r3, #0]
}
 801a0e8:	bf00      	nop
 801a0ea:	370c      	adds	r7, #12
 801a0ec:	46bd      	mov	sp, r7
 801a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f2:	4770      	bx	lr

0801a0f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a0f4:	b480      	push	{r7}
 801a0f6:	b083      	sub	sp, #12
 801a0f8:	af00      	add	r7, sp, #0
 801a0fa:	6078      	str	r0, [r7, #4]
 801a0fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	1c5a      	adds	r2, r3, #1
 801a102:	607a      	str	r2, [r7, #4]
 801a104:	683a      	ldr	r2, [r7, #0]
 801a106:	b2d2      	uxtb	r2, r2
 801a108:	701a      	strb	r2, [r3, #0]
 801a10a:	683b      	ldr	r3, [r7, #0]
 801a10c:	0a1b      	lsrs	r3, r3, #8
 801a10e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	1c5a      	adds	r2, r3, #1
 801a114:	607a      	str	r2, [r7, #4]
 801a116:	683a      	ldr	r2, [r7, #0]
 801a118:	b2d2      	uxtb	r2, r2
 801a11a:	701a      	strb	r2, [r3, #0]
 801a11c:	683b      	ldr	r3, [r7, #0]
 801a11e:	0a1b      	lsrs	r3, r3, #8
 801a120:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	1c5a      	adds	r2, r3, #1
 801a126:	607a      	str	r2, [r7, #4]
 801a128:	683a      	ldr	r2, [r7, #0]
 801a12a:	b2d2      	uxtb	r2, r2
 801a12c:	701a      	strb	r2, [r3, #0]
 801a12e:	683b      	ldr	r3, [r7, #0]
 801a130:	0a1b      	lsrs	r3, r3, #8
 801a132:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	1c5a      	adds	r2, r3, #1
 801a138:	607a      	str	r2, [r7, #4]
 801a13a:	683a      	ldr	r2, [r7, #0]
 801a13c:	b2d2      	uxtb	r2, r2
 801a13e:	701a      	strb	r2, [r3, #0]
}
 801a140:	bf00      	nop
 801a142:	370c      	adds	r7, #12
 801a144:	46bd      	mov	sp, r7
 801a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a14a:	4770      	bx	lr

0801a14c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a14c:	b480      	push	{r7}
 801a14e:	b087      	sub	sp, #28
 801a150:	af00      	add	r7, sp, #0
 801a152:	60f8      	str	r0, [r7, #12]
 801a154:	60b9      	str	r1, [r7, #8]
 801a156:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801a15c:	68bb      	ldr	r3, [r7, #8]
 801a15e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	2b00      	cmp	r3, #0
 801a164:	d00d      	beq.n	801a182 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801a166:	693a      	ldr	r2, [r7, #16]
 801a168:	1c53      	adds	r3, r2, #1
 801a16a:	613b      	str	r3, [r7, #16]
 801a16c:	697b      	ldr	r3, [r7, #20]
 801a16e:	1c59      	adds	r1, r3, #1
 801a170:	6179      	str	r1, [r7, #20]
 801a172:	7812      	ldrb	r2, [r2, #0]
 801a174:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	3b01      	subs	r3, #1
 801a17a:	607b      	str	r3, [r7, #4]
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d1f1      	bne.n	801a166 <mem_cpy+0x1a>
	}
}
 801a182:	bf00      	nop
 801a184:	371c      	adds	r7, #28
 801a186:	46bd      	mov	sp, r7
 801a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a18c:	4770      	bx	lr

0801a18e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801a18e:	b480      	push	{r7}
 801a190:	b087      	sub	sp, #28
 801a192:	af00      	add	r7, sp, #0
 801a194:	60f8      	str	r0, [r7, #12]
 801a196:	60b9      	str	r1, [r7, #8]
 801a198:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801a19e:	697b      	ldr	r3, [r7, #20]
 801a1a0:	1c5a      	adds	r2, r3, #1
 801a1a2:	617a      	str	r2, [r7, #20]
 801a1a4:	68ba      	ldr	r2, [r7, #8]
 801a1a6:	b2d2      	uxtb	r2, r2
 801a1a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	3b01      	subs	r3, #1
 801a1ae:	607b      	str	r3, [r7, #4]
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d1f3      	bne.n	801a19e <mem_set+0x10>
}
 801a1b6:	bf00      	nop
 801a1b8:	bf00      	nop
 801a1ba:	371c      	adds	r7, #28
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c2:	4770      	bx	lr

0801a1c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801a1c4:	b480      	push	{r7}
 801a1c6:	b089      	sub	sp, #36	; 0x24
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	60f8      	str	r0, [r7, #12]
 801a1cc:	60b9      	str	r1, [r7, #8]
 801a1ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	61fb      	str	r3, [r7, #28]
 801a1d4:	68bb      	ldr	r3, [r7, #8]
 801a1d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801a1d8:	2300      	movs	r3, #0
 801a1da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801a1dc:	69fb      	ldr	r3, [r7, #28]
 801a1de:	1c5a      	adds	r2, r3, #1
 801a1e0:	61fa      	str	r2, [r7, #28]
 801a1e2:	781b      	ldrb	r3, [r3, #0]
 801a1e4:	4619      	mov	r1, r3
 801a1e6:	69bb      	ldr	r3, [r7, #24]
 801a1e8:	1c5a      	adds	r2, r3, #1
 801a1ea:	61ba      	str	r2, [r7, #24]
 801a1ec:	781b      	ldrb	r3, [r3, #0]
 801a1ee:	1acb      	subs	r3, r1, r3
 801a1f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	3b01      	subs	r3, #1
 801a1f6:	607b      	str	r3, [r7, #4]
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d002      	beq.n	801a204 <mem_cmp+0x40>
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d0eb      	beq.n	801a1dc <mem_cmp+0x18>

	return r;
 801a204:	697b      	ldr	r3, [r7, #20]
}
 801a206:	4618      	mov	r0, r3
 801a208:	3724      	adds	r7, #36	; 0x24
 801a20a:	46bd      	mov	sp, r7
 801a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a210:	4770      	bx	lr

0801a212 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801a212:	b480      	push	{r7}
 801a214:	b083      	sub	sp, #12
 801a216:	af00      	add	r7, sp, #0
 801a218:	6078      	str	r0, [r7, #4]
 801a21a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801a21c:	e002      	b.n	801a224 <chk_chr+0x12>
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	3301      	adds	r3, #1
 801a222:	607b      	str	r3, [r7, #4]
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	781b      	ldrb	r3, [r3, #0]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d005      	beq.n	801a238 <chk_chr+0x26>
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	781b      	ldrb	r3, [r3, #0]
 801a230:	461a      	mov	r2, r3
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	4293      	cmp	r3, r2
 801a236:	d1f2      	bne.n	801a21e <chk_chr+0xc>
	return *str;
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	781b      	ldrb	r3, [r3, #0]
}
 801a23c:	4618      	mov	r0, r3
 801a23e:	370c      	adds	r7, #12
 801a240:	46bd      	mov	sp, r7
 801a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a246:	4770      	bx	lr

0801a248 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a248:	b480      	push	{r7}
 801a24a:	b085      	sub	sp, #20
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
 801a250:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a252:	2300      	movs	r3, #0
 801a254:	60bb      	str	r3, [r7, #8]
 801a256:	68bb      	ldr	r3, [r7, #8]
 801a258:	60fb      	str	r3, [r7, #12]
 801a25a:	e029      	b.n	801a2b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801a25c:	4a27      	ldr	r2, [pc, #156]	; (801a2fc <chk_lock+0xb4>)
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	011b      	lsls	r3, r3, #4
 801a262:	4413      	add	r3, r2
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d01d      	beq.n	801a2a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a26a:	4a24      	ldr	r2, [pc, #144]	; (801a2fc <chk_lock+0xb4>)
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	011b      	lsls	r3, r3, #4
 801a270:	4413      	add	r3, r2
 801a272:	681a      	ldr	r2, [r3, #0]
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	429a      	cmp	r2, r3
 801a27a:	d116      	bne.n	801a2aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801a27c:	4a1f      	ldr	r2, [pc, #124]	; (801a2fc <chk_lock+0xb4>)
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	011b      	lsls	r3, r3, #4
 801a282:	4413      	add	r3, r2
 801a284:	3304      	adds	r3, #4
 801a286:	681a      	ldr	r2, [r3, #0]
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a28c:	429a      	cmp	r2, r3
 801a28e:	d10c      	bne.n	801a2aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a290:	4a1a      	ldr	r2, [pc, #104]	; (801a2fc <chk_lock+0xb4>)
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	011b      	lsls	r3, r3, #4
 801a296:	4413      	add	r3, r2
 801a298:	3308      	adds	r3, #8
 801a29a:	681a      	ldr	r2, [r3, #0]
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801a2a0:	429a      	cmp	r2, r3
 801a2a2:	d102      	bne.n	801a2aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a2a4:	e007      	b.n	801a2b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801a2a6:	2301      	movs	r3, #1
 801a2a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	3301      	adds	r3, #1
 801a2ae:	60fb      	str	r3, [r7, #12]
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	2b01      	cmp	r3, #1
 801a2b4:	d9d2      	bls.n	801a25c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	2b02      	cmp	r3, #2
 801a2ba:	d109      	bne.n	801a2d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a2bc:	68bb      	ldr	r3, [r7, #8]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d102      	bne.n	801a2c8 <chk_lock+0x80>
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	2b02      	cmp	r3, #2
 801a2c6:	d101      	bne.n	801a2cc <chk_lock+0x84>
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	e010      	b.n	801a2ee <chk_lock+0xa6>
 801a2cc:	2312      	movs	r3, #18
 801a2ce:	e00e      	b.n	801a2ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d108      	bne.n	801a2e8 <chk_lock+0xa0>
 801a2d6:	4a09      	ldr	r2, [pc, #36]	; (801a2fc <chk_lock+0xb4>)
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	011b      	lsls	r3, r3, #4
 801a2dc:	4413      	add	r3, r2
 801a2de:	330c      	adds	r3, #12
 801a2e0:	881b      	ldrh	r3, [r3, #0]
 801a2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a2e6:	d101      	bne.n	801a2ec <chk_lock+0xa4>
 801a2e8:	2310      	movs	r3, #16
 801a2ea:	e000      	b.n	801a2ee <chk_lock+0xa6>
 801a2ec:	2300      	movs	r3, #0
}
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	3714      	adds	r7, #20
 801a2f2:	46bd      	mov	sp, r7
 801a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f8:	4770      	bx	lr
 801a2fa:	bf00      	nop
 801a2fc:	20000bd8 	.word	0x20000bd8

0801a300 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801a300:	b480      	push	{r7}
 801a302:	b083      	sub	sp, #12
 801a304:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a306:	2300      	movs	r3, #0
 801a308:	607b      	str	r3, [r7, #4]
 801a30a:	e002      	b.n	801a312 <enq_lock+0x12>
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	3301      	adds	r3, #1
 801a310:	607b      	str	r3, [r7, #4]
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	2b01      	cmp	r3, #1
 801a316:	d806      	bhi.n	801a326 <enq_lock+0x26>
 801a318:	4a09      	ldr	r2, [pc, #36]	; (801a340 <enq_lock+0x40>)
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	011b      	lsls	r3, r3, #4
 801a31e:	4413      	add	r3, r2
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	2b00      	cmp	r3, #0
 801a324:	d1f2      	bne.n	801a30c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	2b02      	cmp	r3, #2
 801a32a:	bf14      	ite	ne
 801a32c:	2301      	movne	r3, #1
 801a32e:	2300      	moveq	r3, #0
 801a330:	b2db      	uxtb	r3, r3
}
 801a332:	4618      	mov	r0, r3
 801a334:	370c      	adds	r7, #12
 801a336:	46bd      	mov	sp, r7
 801a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a33c:	4770      	bx	lr
 801a33e:	bf00      	nop
 801a340:	20000bd8 	.word	0x20000bd8

0801a344 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a344:	b480      	push	{r7}
 801a346:	b085      	sub	sp, #20
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
 801a34c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a34e:	2300      	movs	r3, #0
 801a350:	60fb      	str	r3, [r7, #12]
 801a352:	e01f      	b.n	801a394 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801a354:	4a41      	ldr	r2, [pc, #260]	; (801a45c <inc_lock+0x118>)
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	011b      	lsls	r3, r3, #4
 801a35a:	4413      	add	r3, r2
 801a35c:	681a      	ldr	r2, [r3, #0]
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	429a      	cmp	r2, r3
 801a364:	d113      	bne.n	801a38e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801a366:	4a3d      	ldr	r2, [pc, #244]	; (801a45c <inc_lock+0x118>)
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	011b      	lsls	r3, r3, #4
 801a36c:	4413      	add	r3, r2
 801a36e:	3304      	adds	r3, #4
 801a370:	681a      	ldr	r2, [r3, #0]
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801a376:	429a      	cmp	r2, r3
 801a378:	d109      	bne.n	801a38e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801a37a:	4a38      	ldr	r2, [pc, #224]	; (801a45c <inc_lock+0x118>)
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	011b      	lsls	r3, r3, #4
 801a380:	4413      	add	r3, r2
 801a382:	3308      	adds	r3, #8
 801a384:	681a      	ldr	r2, [r3, #0]
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801a38a:	429a      	cmp	r2, r3
 801a38c:	d006      	beq.n	801a39c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	3301      	adds	r3, #1
 801a392:	60fb      	str	r3, [r7, #12]
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	2b01      	cmp	r3, #1
 801a398:	d9dc      	bls.n	801a354 <inc_lock+0x10>
 801a39a:	e000      	b.n	801a39e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801a39c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	2b02      	cmp	r3, #2
 801a3a2:	d132      	bne.n	801a40a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	60fb      	str	r3, [r7, #12]
 801a3a8:	e002      	b.n	801a3b0 <inc_lock+0x6c>
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	3301      	adds	r3, #1
 801a3ae:	60fb      	str	r3, [r7, #12]
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	2b01      	cmp	r3, #1
 801a3b4:	d806      	bhi.n	801a3c4 <inc_lock+0x80>
 801a3b6:	4a29      	ldr	r2, [pc, #164]	; (801a45c <inc_lock+0x118>)
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	011b      	lsls	r3, r3, #4
 801a3bc:	4413      	add	r3, r2
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d1f2      	bne.n	801a3aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	2b02      	cmp	r3, #2
 801a3c8:	d101      	bne.n	801a3ce <inc_lock+0x8a>
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	e040      	b.n	801a450 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681a      	ldr	r2, [r3, #0]
 801a3d2:	4922      	ldr	r1, [pc, #136]	; (801a45c <inc_lock+0x118>)
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	011b      	lsls	r3, r3, #4
 801a3d8:	440b      	add	r3, r1
 801a3da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	689a      	ldr	r2, [r3, #8]
 801a3e0:	491e      	ldr	r1, [pc, #120]	; (801a45c <inc_lock+0x118>)
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	011b      	lsls	r3, r3, #4
 801a3e6:	440b      	add	r3, r1
 801a3e8:	3304      	adds	r3, #4
 801a3ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	695a      	ldr	r2, [r3, #20]
 801a3f0:	491a      	ldr	r1, [pc, #104]	; (801a45c <inc_lock+0x118>)
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	011b      	lsls	r3, r3, #4
 801a3f6:	440b      	add	r3, r1
 801a3f8:	3308      	adds	r3, #8
 801a3fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801a3fc:	4a17      	ldr	r2, [pc, #92]	; (801a45c <inc_lock+0x118>)
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	011b      	lsls	r3, r3, #4
 801a402:	4413      	add	r3, r2
 801a404:	330c      	adds	r3, #12
 801a406:	2200      	movs	r2, #0
 801a408:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801a40a:	683b      	ldr	r3, [r7, #0]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d009      	beq.n	801a424 <inc_lock+0xe0>
 801a410:	4a12      	ldr	r2, [pc, #72]	; (801a45c <inc_lock+0x118>)
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	011b      	lsls	r3, r3, #4
 801a416:	4413      	add	r3, r2
 801a418:	330c      	adds	r3, #12
 801a41a:	881b      	ldrh	r3, [r3, #0]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d001      	beq.n	801a424 <inc_lock+0xe0>
 801a420:	2300      	movs	r3, #0
 801a422:	e015      	b.n	801a450 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801a424:	683b      	ldr	r3, [r7, #0]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d108      	bne.n	801a43c <inc_lock+0xf8>
 801a42a:	4a0c      	ldr	r2, [pc, #48]	; (801a45c <inc_lock+0x118>)
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	011b      	lsls	r3, r3, #4
 801a430:	4413      	add	r3, r2
 801a432:	330c      	adds	r3, #12
 801a434:	881b      	ldrh	r3, [r3, #0]
 801a436:	3301      	adds	r3, #1
 801a438:	b29a      	uxth	r2, r3
 801a43a:	e001      	b.n	801a440 <inc_lock+0xfc>
 801a43c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a440:	4906      	ldr	r1, [pc, #24]	; (801a45c <inc_lock+0x118>)
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	011b      	lsls	r3, r3, #4
 801a446:	440b      	add	r3, r1
 801a448:	330c      	adds	r3, #12
 801a44a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	3301      	adds	r3, #1
}
 801a450:	4618      	mov	r0, r3
 801a452:	3714      	adds	r7, #20
 801a454:	46bd      	mov	sp, r7
 801a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a45a:	4770      	bx	lr
 801a45c:	20000bd8 	.word	0x20000bd8

0801a460 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801a460:	b480      	push	{r7}
 801a462:	b085      	sub	sp, #20
 801a464:	af00      	add	r7, sp, #0
 801a466:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	3b01      	subs	r3, #1
 801a46c:	607b      	str	r3, [r7, #4]
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	2b01      	cmp	r3, #1
 801a472:	d825      	bhi.n	801a4c0 <dec_lock+0x60>
		n = Files[i].ctr;
 801a474:	4a17      	ldr	r2, [pc, #92]	; (801a4d4 <dec_lock+0x74>)
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	011b      	lsls	r3, r3, #4
 801a47a:	4413      	add	r3, r2
 801a47c:	330c      	adds	r3, #12
 801a47e:	881b      	ldrh	r3, [r3, #0]
 801a480:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801a482:	89fb      	ldrh	r3, [r7, #14]
 801a484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a488:	d101      	bne.n	801a48e <dec_lock+0x2e>
 801a48a:	2300      	movs	r3, #0
 801a48c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801a48e:	89fb      	ldrh	r3, [r7, #14]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d002      	beq.n	801a49a <dec_lock+0x3a>
 801a494:	89fb      	ldrh	r3, [r7, #14]
 801a496:	3b01      	subs	r3, #1
 801a498:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801a49a:	4a0e      	ldr	r2, [pc, #56]	; (801a4d4 <dec_lock+0x74>)
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	011b      	lsls	r3, r3, #4
 801a4a0:	4413      	add	r3, r2
 801a4a2:	330c      	adds	r3, #12
 801a4a4:	89fa      	ldrh	r2, [r7, #14]
 801a4a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801a4a8:	89fb      	ldrh	r3, [r7, #14]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d105      	bne.n	801a4ba <dec_lock+0x5a>
 801a4ae:	4a09      	ldr	r2, [pc, #36]	; (801a4d4 <dec_lock+0x74>)
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	011b      	lsls	r3, r3, #4
 801a4b4:	4413      	add	r3, r2
 801a4b6:	2200      	movs	r2, #0
 801a4b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	737b      	strb	r3, [r7, #13]
 801a4be:	e001      	b.n	801a4c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801a4c0:	2302      	movs	r3, #2
 801a4c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801a4c4:	7b7b      	ldrb	r3, [r7, #13]
}
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	3714      	adds	r7, #20
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d0:	4770      	bx	lr
 801a4d2:	bf00      	nop
 801a4d4:	20000bd8 	.word	0x20000bd8

0801a4d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801a4d8:	b480      	push	{r7}
 801a4da:	b085      	sub	sp, #20
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	60fb      	str	r3, [r7, #12]
 801a4e4:	e010      	b.n	801a508 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a4e6:	4a0d      	ldr	r2, [pc, #52]	; (801a51c <clear_lock+0x44>)
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	011b      	lsls	r3, r3, #4
 801a4ec:	4413      	add	r3, r2
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	687a      	ldr	r2, [r7, #4]
 801a4f2:	429a      	cmp	r2, r3
 801a4f4:	d105      	bne.n	801a502 <clear_lock+0x2a>
 801a4f6:	4a09      	ldr	r2, [pc, #36]	; (801a51c <clear_lock+0x44>)
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	011b      	lsls	r3, r3, #4
 801a4fc:	4413      	add	r3, r2
 801a4fe:	2200      	movs	r2, #0
 801a500:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	3301      	adds	r3, #1
 801a506:	60fb      	str	r3, [r7, #12]
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	2b01      	cmp	r3, #1
 801a50c:	d9eb      	bls.n	801a4e6 <clear_lock+0xe>
	}
}
 801a50e:	bf00      	nop
 801a510:	bf00      	nop
 801a512:	3714      	adds	r7, #20
 801a514:	46bd      	mov	sp, r7
 801a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a51a:	4770      	bx	lr
 801a51c:	20000bd8 	.word	0x20000bd8

0801a520 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801a520:	b580      	push	{r7, lr}
 801a522:	b086      	sub	sp, #24
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801a528:	2300      	movs	r3, #0
 801a52a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	78db      	ldrb	r3, [r3, #3]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d034      	beq.n	801a59e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a538:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	7858      	ldrb	r0, [r3, #1]
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a544:	2301      	movs	r3, #1
 801a546:	697a      	ldr	r2, [r7, #20]
 801a548:	f7ff fd40 	bl	8019fcc <disk_write>
 801a54c:	4603      	mov	r3, r0
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d002      	beq.n	801a558 <sync_window+0x38>
			res = FR_DISK_ERR;
 801a552:	2301      	movs	r3, #1
 801a554:	73fb      	strb	r3, [r7, #15]
 801a556:	e022      	b.n	801a59e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	2200      	movs	r2, #0
 801a55c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a562:	697a      	ldr	r2, [r7, #20]
 801a564:	1ad2      	subs	r2, r2, r3
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	6a1b      	ldr	r3, [r3, #32]
 801a56a:	429a      	cmp	r2, r3
 801a56c:	d217      	bcs.n	801a59e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	789b      	ldrb	r3, [r3, #2]
 801a572:	613b      	str	r3, [r7, #16]
 801a574:	e010      	b.n	801a598 <sync_window+0x78>
					wsect += fs->fsize;
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	6a1b      	ldr	r3, [r3, #32]
 801a57a:	697a      	ldr	r2, [r7, #20]
 801a57c:	4413      	add	r3, r2
 801a57e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	7858      	ldrb	r0, [r3, #1]
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a58a:	2301      	movs	r3, #1
 801a58c:	697a      	ldr	r2, [r7, #20]
 801a58e:	f7ff fd1d 	bl	8019fcc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a592:	693b      	ldr	r3, [r7, #16]
 801a594:	3b01      	subs	r3, #1
 801a596:	613b      	str	r3, [r7, #16]
 801a598:	693b      	ldr	r3, [r7, #16]
 801a59a:	2b01      	cmp	r3, #1
 801a59c:	d8eb      	bhi.n	801a576 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801a59e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	3718      	adds	r7, #24
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	bd80      	pop	{r7, pc}

0801a5a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b084      	sub	sp, #16
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
 801a5b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a5ba:	683a      	ldr	r2, [r7, #0]
 801a5bc:	429a      	cmp	r2, r3
 801a5be:	d01b      	beq.n	801a5f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801a5c0:	6878      	ldr	r0, [r7, #4]
 801a5c2:	f7ff ffad 	bl	801a520 <sync_window>
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801a5ca:	7bfb      	ldrb	r3, [r7, #15]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d113      	bne.n	801a5f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	7858      	ldrb	r0, [r3, #1]
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a5da:	2301      	movs	r3, #1
 801a5dc:	683a      	ldr	r2, [r7, #0]
 801a5de:	f7ff fcd5 	bl	8019f8c <disk_read>
 801a5e2:	4603      	mov	r3, r0
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d004      	beq.n	801a5f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801a5e8:	f04f 33ff 	mov.w	r3, #4294967295
 801a5ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801a5ee:	2301      	movs	r3, #1
 801a5f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	683a      	ldr	r2, [r7, #0]
 801a5f6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801a5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	3710      	adds	r7, #16
 801a5fe:	46bd      	mov	sp, r7
 801a600:	bd80      	pop	{r7, pc}
	...

0801a604 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801a604:	b580      	push	{r7, lr}
 801a606:	b084      	sub	sp, #16
 801a608:	af00      	add	r7, sp, #0
 801a60a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801a60c:	6878      	ldr	r0, [r7, #4]
 801a60e:	f7ff ff87 	bl	801a520 <sync_window>
 801a612:	4603      	mov	r3, r0
 801a614:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801a616:	7bfb      	ldrb	r3, [r7, #15]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d159      	bne.n	801a6d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	781b      	ldrb	r3, [r3, #0]
 801a620:	2b03      	cmp	r3, #3
 801a622:	d149      	bne.n	801a6b8 <sync_fs+0xb4>
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	791b      	ldrb	r3, [r3, #4]
 801a628:	2b01      	cmp	r3, #1
 801a62a:	d145      	bne.n	801a6b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	899b      	ldrh	r3, [r3, #12]
 801a636:	461a      	mov	r2, r3
 801a638:	2100      	movs	r1, #0
 801a63a:	f7ff fda8 	bl	801a18e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	3338      	adds	r3, #56	; 0x38
 801a642:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a646:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7ff fd37 	bl	801a0be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	3338      	adds	r3, #56	; 0x38
 801a654:	4921      	ldr	r1, [pc, #132]	; (801a6dc <sync_fs+0xd8>)
 801a656:	4618      	mov	r0, r3
 801a658:	f7ff fd4c 	bl	801a0f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	3338      	adds	r3, #56	; 0x38
 801a660:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801a664:	491e      	ldr	r1, [pc, #120]	; (801a6e0 <sync_fs+0xdc>)
 801a666:	4618      	mov	r0, r3
 801a668:	f7ff fd44 	bl	801a0f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	3338      	adds	r3, #56	; 0x38
 801a670:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	699b      	ldr	r3, [r3, #24]
 801a678:	4619      	mov	r1, r3
 801a67a:	4610      	mov	r0, r2
 801a67c:	f7ff fd3a 	bl	801a0f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	3338      	adds	r3, #56	; 0x38
 801a684:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	695b      	ldr	r3, [r3, #20]
 801a68c:	4619      	mov	r1, r3
 801a68e:	4610      	mov	r0, r2
 801a690:	f7ff fd30 	bl	801a0f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a698:	1c5a      	adds	r2, r3, #1
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	7858      	ldrb	r0, [r3, #1]
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a6ac:	2301      	movs	r3, #1
 801a6ae:	f7ff fc8d 	bl	8019fcc <disk_write>
			fs->fsi_flag = 0;
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	785b      	ldrb	r3, [r3, #1]
 801a6bc:	2200      	movs	r2, #0
 801a6be:	2100      	movs	r1, #0
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	f7ff fca3 	bl	801a00c <disk_ioctl>
 801a6c6:	4603      	mov	r3, r0
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d001      	beq.n	801a6d0 <sync_fs+0xcc>
 801a6cc:	2301      	movs	r3, #1
 801a6ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801a6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	3710      	adds	r7, #16
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	bd80      	pop	{r7, pc}
 801a6da:	bf00      	nop
 801a6dc:	41615252 	.word	0x41615252
 801a6e0:	61417272 	.word	0x61417272

0801a6e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801a6e4:	b480      	push	{r7}
 801a6e6:	b083      	sub	sp, #12
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
 801a6ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801a6ee:	683b      	ldr	r3, [r7, #0]
 801a6f0:	3b02      	subs	r3, #2
 801a6f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	69db      	ldr	r3, [r3, #28]
 801a6f8:	3b02      	subs	r3, #2
 801a6fa:	683a      	ldr	r2, [r7, #0]
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	d301      	bcc.n	801a704 <clust2sect+0x20>
 801a700:	2300      	movs	r3, #0
 801a702:	e008      	b.n	801a716 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	895b      	ldrh	r3, [r3, #10]
 801a708:	461a      	mov	r2, r3
 801a70a:	683b      	ldr	r3, [r7, #0]
 801a70c:	fb03 f202 	mul.w	r2, r3, r2
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a714:	4413      	add	r3, r2
}
 801a716:	4618      	mov	r0, r3
 801a718:	370c      	adds	r7, #12
 801a71a:	46bd      	mov	sp, r7
 801a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a720:	4770      	bx	lr

0801a722 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801a722:	b580      	push	{r7, lr}
 801a724:	b086      	sub	sp, #24
 801a726:	af00      	add	r7, sp, #0
 801a728:	6078      	str	r0, [r7, #4]
 801a72a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801a732:	683b      	ldr	r3, [r7, #0]
 801a734:	2b01      	cmp	r3, #1
 801a736:	d904      	bls.n	801a742 <get_fat+0x20>
 801a738:	693b      	ldr	r3, [r7, #16]
 801a73a:	69db      	ldr	r3, [r3, #28]
 801a73c:	683a      	ldr	r2, [r7, #0]
 801a73e:	429a      	cmp	r2, r3
 801a740:	d302      	bcc.n	801a748 <get_fat+0x26>
		val = 1;	/* Internal error */
 801a742:	2301      	movs	r3, #1
 801a744:	617b      	str	r3, [r7, #20]
 801a746:	e0bb      	b.n	801a8c0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801a748:	f04f 33ff 	mov.w	r3, #4294967295
 801a74c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801a74e:	693b      	ldr	r3, [r7, #16]
 801a750:	781b      	ldrb	r3, [r3, #0]
 801a752:	2b03      	cmp	r3, #3
 801a754:	f000 8083 	beq.w	801a85e <get_fat+0x13c>
 801a758:	2b03      	cmp	r3, #3
 801a75a:	f300 80a7 	bgt.w	801a8ac <get_fat+0x18a>
 801a75e:	2b01      	cmp	r3, #1
 801a760:	d002      	beq.n	801a768 <get_fat+0x46>
 801a762:	2b02      	cmp	r3, #2
 801a764:	d056      	beq.n	801a814 <get_fat+0xf2>
 801a766:	e0a1      	b.n	801a8ac <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801a768:	683b      	ldr	r3, [r7, #0]
 801a76a:	60fb      	str	r3, [r7, #12]
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	085b      	lsrs	r3, r3, #1
 801a770:	68fa      	ldr	r2, [r7, #12]
 801a772:	4413      	add	r3, r2
 801a774:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a776:	693b      	ldr	r3, [r7, #16]
 801a778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a77a:	693b      	ldr	r3, [r7, #16]
 801a77c:	899b      	ldrh	r3, [r3, #12]
 801a77e:	4619      	mov	r1, r3
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	fbb3 f3f1 	udiv	r3, r3, r1
 801a786:	4413      	add	r3, r2
 801a788:	4619      	mov	r1, r3
 801a78a:	6938      	ldr	r0, [r7, #16]
 801a78c:	f7ff ff0c 	bl	801a5a8 <move_window>
 801a790:	4603      	mov	r3, r0
 801a792:	2b00      	cmp	r3, #0
 801a794:	f040 808d 	bne.w	801a8b2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	1c5a      	adds	r2, r3, #1
 801a79c:	60fa      	str	r2, [r7, #12]
 801a79e:	693a      	ldr	r2, [r7, #16]
 801a7a0:	8992      	ldrh	r2, [r2, #12]
 801a7a2:	fbb3 f1f2 	udiv	r1, r3, r2
 801a7a6:	fb02 f201 	mul.w	r2, r2, r1
 801a7aa:	1a9b      	subs	r3, r3, r2
 801a7ac:	693a      	ldr	r2, [r7, #16]
 801a7ae:	4413      	add	r3, r2
 801a7b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a7b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a7b6:	693b      	ldr	r3, [r7, #16]
 801a7b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a7ba:	693b      	ldr	r3, [r7, #16]
 801a7bc:	899b      	ldrh	r3, [r3, #12]
 801a7be:	4619      	mov	r1, r3
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a7c6:	4413      	add	r3, r2
 801a7c8:	4619      	mov	r1, r3
 801a7ca:	6938      	ldr	r0, [r7, #16]
 801a7cc:	f7ff feec 	bl	801a5a8 <move_window>
 801a7d0:	4603      	mov	r3, r0
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d16f      	bne.n	801a8b6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801a7d6:	693b      	ldr	r3, [r7, #16]
 801a7d8:	899b      	ldrh	r3, [r3, #12]
 801a7da:	461a      	mov	r2, r3
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	fbb3 f1f2 	udiv	r1, r3, r2
 801a7e2:	fb02 f201 	mul.w	r2, r2, r1
 801a7e6:	1a9b      	subs	r3, r3, r2
 801a7e8:	693a      	ldr	r2, [r7, #16]
 801a7ea:	4413      	add	r3, r2
 801a7ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a7f0:	021b      	lsls	r3, r3, #8
 801a7f2:	461a      	mov	r2, r3
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	4313      	orrs	r3, r2
 801a7f8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801a7fa:	683b      	ldr	r3, [r7, #0]
 801a7fc:	f003 0301 	and.w	r3, r3, #1
 801a800:	2b00      	cmp	r3, #0
 801a802:	d002      	beq.n	801a80a <get_fat+0xe8>
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	091b      	lsrs	r3, r3, #4
 801a808:	e002      	b.n	801a810 <get_fat+0xee>
 801a80a:	68bb      	ldr	r3, [r7, #8]
 801a80c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a810:	617b      	str	r3, [r7, #20]
			break;
 801a812:	e055      	b.n	801a8c0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801a814:	693b      	ldr	r3, [r7, #16]
 801a816:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a818:	693b      	ldr	r3, [r7, #16]
 801a81a:	899b      	ldrh	r3, [r3, #12]
 801a81c:	085b      	lsrs	r3, r3, #1
 801a81e:	b29b      	uxth	r3, r3
 801a820:	4619      	mov	r1, r3
 801a822:	683b      	ldr	r3, [r7, #0]
 801a824:	fbb3 f3f1 	udiv	r3, r3, r1
 801a828:	4413      	add	r3, r2
 801a82a:	4619      	mov	r1, r3
 801a82c:	6938      	ldr	r0, [r7, #16]
 801a82e:	f7ff febb 	bl	801a5a8 <move_window>
 801a832:	4603      	mov	r3, r0
 801a834:	2b00      	cmp	r3, #0
 801a836:	d140      	bne.n	801a8ba <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801a838:	693b      	ldr	r3, [r7, #16]
 801a83a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a83e:	683b      	ldr	r3, [r7, #0]
 801a840:	005b      	lsls	r3, r3, #1
 801a842:	693a      	ldr	r2, [r7, #16]
 801a844:	8992      	ldrh	r2, [r2, #12]
 801a846:	fbb3 f0f2 	udiv	r0, r3, r2
 801a84a:	fb02 f200 	mul.w	r2, r2, r0
 801a84e:	1a9b      	subs	r3, r3, r2
 801a850:	440b      	add	r3, r1
 801a852:	4618      	mov	r0, r3
 801a854:	f7ff fbf8 	bl	801a048 <ld_word>
 801a858:	4603      	mov	r3, r0
 801a85a:	617b      	str	r3, [r7, #20]
			break;
 801a85c:	e030      	b.n	801a8c0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801a85e:	693b      	ldr	r3, [r7, #16]
 801a860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a862:	693b      	ldr	r3, [r7, #16]
 801a864:	899b      	ldrh	r3, [r3, #12]
 801a866:	089b      	lsrs	r3, r3, #2
 801a868:	b29b      	uxth	r3, r3
 801a86a:	4619      	mov	r1, r3
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a872:	4413      	add	r3, r2
 801a874:	4619      	mov	r1, r3
 801a876:	6938      	ldr	r0, [r7, #16]
 801a878:	f7ff fe96 	bl	801a5a8 <move_window>
 801a87c:	4603      	mov	r3, r0
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d11d      	bne.n	801a8be <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801a882:	693b      	ldr	r3, [r7, #16]
 801a884:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	009b      	lsls	r3, r3, #2
 801a88c:	693a      	ldr	r2, [r7, #16]
 801a88e:	8992      	ldrh	r2, [r2, #12]
 801a890:	fbb3 f0f2 	udiv	r0, r3, r2
 801a894:	fb02 f200 	mul.w	r2, r2, r0
 801a898:	1a9b      	subs	r3, r3, r2
 801a89a:	440b      	add	r3, r1
 801a89c:	4618      	mov	r0, r3
 801a89e:	f7ff fbeb 	bl	801a078 <ld_dword>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801a8a8:	617b      	str	r3, [r7, #20]
			break;
 801a8aa:	e009      	b.n	801a8c0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801a8ac:	2301      	movs	r3, #1
 801a8ae:	617b      	str	r3, [r7, #20]
 801a8b0:	e006      	b.n	801a8c0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a8b2:	bf00      	nop
 801a8b4:	e004      	b.n	801a8c0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801a8b6:	bf00      	nop
 801a8b8:	e002      	b.n	801a8c0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801a8ba:	bf00      	nop
 801a8bc:	e000      	b.n	801a8c0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801a8be:	bf00      	nop
		}
	}

	return val;
 801a8c0:	697b      	ldr	r3, [r7, #20]
}
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	3718      	adds	r7, #24
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	bd80      	pop	{r7, pc}

0801a8ca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801a8ca:	b590      	push	{r4, r7, lr}
 801a8cc:	b089      	sub	sp, #36	; 0x24
 801a8ce:	af00      	add	r7, sp, #0
 801a8d0:	60f8      	str	r0, [r7, #12]
 801a8d2:	60b9      	str	r1, [r7, #8]
 801a8d4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801a8d6:	2302      	movs	r3, #2
 801a8d8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801a8da:	68bb      	ldr	r3, [r7, #8]
 801a8dc:	2b01      	cmp	r3, #1
 801a8de:	f240 8102 	bls.w	801aae6 <put_fat+0x21c>
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	69db      	ldr	r3, [r3, #28]
 801a8e6:	68ba      	ldr	r2, [r7, #8]
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	f080 80fc 	bcs.w	801aae6 <put_fat+0x21c>
		switch (fs->fs_type) {
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	781b      	ldrb	r3, [r3, #0]
 801a8f2:	2b03      	cmp	r3, #3
 801a8f4:	f000 80b6 	beq.w	801aa64 <put_fat+0x19a>
 801a8f8:	2b03      	cmp	r3, #3
 801a8fa:	f300 80fd 	bgt.w	801aaf8 <put_fat+0x22e>
 801a8fe:	2b01      	cmp	r3, #1
 801a900:	d003      	beq.n	801a90a <put_fat+0x40>
 801a902:	2b02      	cmp	r3, #2
 801a904:	f000 8083 	beq.w	801aa0e <put_fat+0x144>
 801a908:	e0f6      	b.n	801aaf8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801a90a:	68bb      	ldr	r3, [r7, #8]
 801a90c:	61bb      	str	r3, [r7, #24]
 801a90e:	69bb      	ldr	r3, [r7, #24]
 801a910:	085b      	lsrs	r3, r3, #1
 801a912:	69ba      	ldr	r2, [r7, #24]
 801a914:	4413      	add	r3, r2
 801a916:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	899b      	ldrh	r3, [r3, #12]
 801a920:	4619      	mov	r1, r3
 801a922:	69bb      	ldr	r3, [r7, #24]
 801a924:	fbb3 f3f1 	udiv	r3, r3, r1
 801a928:	4413      	add	r3, r2
 801a92a:	4619      	mov	r1, r3
 801a92c:	68f8      	ldr	r0, [r7, #12]
 801a92e:	f7ff fe3b 	bl	801a5a8 <move_window>
 801a932:	4603      	mov	r3, r0
 801a934:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a936:	7ffb      	ldrb	r3, [r7, #31]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	f040 80d6 	bne.w	801aaea <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a944:	69bb      	ldr	r3, [r7, #24]
 801a946:	1c5a      	adds	r2, r3, #1
 801a948:	61ba      	str	r2, [r7, #24]
 801a94a:	68fa      	ldr	r2, [r7, #12]
 801a94c:	8992      	ldrh	r2, [r2, #12]
 801a94e:	fbb3 f0f2 	udiv	r0, r3, r2
 801a952:	fb02 f200 	mul.w	r2, r2, r0
 801a956:	1a9b      	subs	r3, r3, r2
 801a958:	440b      	add	r3, r1
 801a95a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801a95c:	68bb      	ldr	r3, [r7, #8]
 801a95e:	f003 0301 	and.w	r3, r3, #1
 801a962:	2b00      	cmp	r3, #0
 801a964:	d00d      	beq.n	801a982 <put_fat+0xb8>
 801a966:	697b      	ldr	r3, [r7, #20]
 801a968:	781b      	ldrb	r3, [r3, #0]
 801a96a:	b25b      	sxtb	r3, r3
 801a96c:	f003 030f 	and.w	r3, r3, #15
 801a970:	b25a      	sxtb	r2, r3
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	b2db      	uxtb	r3, r3
 801a976:	011b      	lsls	r3, r3, #4
 801a978:	b25b      	sxtb	r3, r3
 801a97a:	4313      	orrs	r3, r2
 801a97c:	b25b      	sxtb	r3, r3
 801a97e:	b2db      	uxtb	r3, r3
 801a980:	e001      	b.n	801a986 <put_fat+0xbc>
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	b2db      	uxtb	r3, r3
 801a986:	697a      	ldr	r2, [r7, #20]
 801a988:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	2201      	movs	r2, #1
 801a98e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	899b      	ldrh	r3, [r3, #12]
 801a998:	4619      	mov	r1, r3
 801a99a:	69bb      	ldr	r3, [r7, #24]
 801a99c:	fbb3 f3f1 	udiv	r3, r3, r1
 801a9a0:	4413      	add	r3, r2
 801a9a2:	4619      	mov	r1, r3
 801a9a4:	68f8      	ldr	r0, [r7, #12]
 801a9a6:	f7ff fdff 	bl	801a5a8 <move_window>
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a9ae:	7ffb      	ldrb	r3, [r7, #31]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	f040 809c 	bne.w	801aaee <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	899b      	ldrh	r3, [r3, #12]
 801a9c0:	461a      	mov	r2, r3
 801a9c2:	69bb      	ldr	r3, [r7, #24]
 801a9c4:	fbb3 f0f2 	udiv	r0, r3, r2
 801a9c8:	fb02 f200 	mul.w	r2, r2, r0
 801a9cc:	1a9b      	subs	r3, r3, r2
 801a9ce:	440b      	add	r3, r1
 801a9d0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	f003 0301 	and.w	r3, r3, #1
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d003      	beq.n	801a9e4 <put_fat+0x11a>
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	091b      	lsrs	r3, r3, #4
 801a9e0:	b2db      	uxtb	r3, r3
 801a9e2:	e00e      	b.n	801aa02 <put_fat+0x138>
 801a9e4:	697b      	ldr	r3, [r7, #20]
 801a9e6:	781b      	ldrb	r3, [r3, #0]
 801a9e8:	b25b      	sxtb	r3, r3
 801a9ea:	f023 030f 	bic.w	r3, r3, #15
 801a9ee:	b25a      	sxtb	r2, r3
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	0a1b      	lsrs	r3, r3, #8
 801a9f4:	b25b      	sxtb	r3, r3
 801a9f6:	f003 030f 	and.w	r3, r3, #15
 801a9fa:	b25b      	sxtb	r3, r3
 801a9fc:	4313      	orrs	r3, r2
 801a9fe:	b25b      	sxtb	r3, r3
 801aa00:	b2db      	uxtb	r3, r3
 801aa02:	697a      	ldr	r2, [r7, #20]
 801aa04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	2201      	movs	r2, #1
 801aa0a:	70da      	strb	r2, [r3, #3]
			break;
 801aa0c:	e074      	b.n	801aaf8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	899b      	ldrh	r3, [r3, #12]
 801aa16:	085b      	lsrs	r3, r3, #1
 801aa18:	b29b      	uxth	r3, r3
 801aa1a:	4619      	mov	r1, r3
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	fbb3 f3f1 	udiv	r3, r3, r1
 801aa22:	4413      	add	r3, r2
 801aa24:	4619      	mov	r1, r3
 801aa26:	68f8      	ldr	r0, [r7, #12]
 801aa28:	f7ff fdbe 	bl	801a5a8 <move_window>
 801aa2c:	4603      	mov	r3, r0
 801aa2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801aa30:	7ffb      	ldrb	r3, [r7, #31]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d15d      	bne.n	801aaf2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801aa3c:	68bb      	ldr	r3, [r7, #8]
 801aa3e:	005b      	lsls	r3, r3, #1
 801aa40:	68fa      	ldr	r2, [r7, #12]
 801aa42:	8992      	ldrh	r2, [r2, #12]
 801aa44:	fbb3 f0f2 	udiv	r0, r3, r2
 801aa48:	fb02 f200 	mul.w	r2, r2, r0
 801aa4c:	1a9b      	subs	r3, r3, r2
 801aa4e:	440b      	add	r3, r1
 801aa50:	687a      	ldr	r2, [r7, #4]
 801aa52:	b292      	uxth	r2, r2
 801aa54:	4611      	mov	r1, r2
 801aa56:	4618      	mov	r0, r3
 801aa58:	f7ff fb31 	bl	801a0be <st_word>
			fs->wflag = 1;
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	2201      	movs	r2, #1
 801aa60:	70da      	strb	r2, [r3, #3]
			break;
 801aa62:	e049      	b.n	801aaf8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	899b      	ldrh	r3, [r3, #12]
 801aa6c:	089b      	lsrs	r3, r3, #2
 801aa6e:	b29b      	uxth	r3, r3
 801aa70:	4619      	mov	r1, r3
 801aa72:	68bb      	ldr	r3, [r7, #8]
 801aa74:	fbb3 f3f1 	udiv	r3, r3, r1
 801aa78:	4413      	add	r3, r2
 801aa7a:	4619      	mov	r1, r3
 801aa7c:	68f8      	ldr	r0, [r7, #12]
 801aa7e:	f7ff fd93 	bl	801a5a8 <move_window>
 801aa82:	4603      	mov	r3, r0
 801aa84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801aa86:	7ffb      	ldrb	r3, [r7, #31]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d134      	bne.n	801aaf6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801aa98:	68bb      	ldr	r3, [r7, #8]
 801aa9a:	009b      	lsls	r3, r3, #2
 801aa9c:	68fa      	ldr	r2, [r7, #12]
 801aa9e:	8992      	ldrh	r2, [r2, #12]
 801aaa0:	fbb3 f0f2 	udiv	r0, r3, r2
 801aaa4:	fb02 f200 	mul.w	r2, r2, r0
 801aaa8:	1a9b      	subs	r3, r3, r2
 801aaaa:	440b      	add	r3, r1
 801aaac:	4618      	mov	r0, r3
 801aaae:	f7ff fae3 	bl	801a078 <ld_dword>
 801aab2:	4603      	mov	r3, r0
 801aab4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801aab8:	4323      	orrs	r3, r4
 801aaba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801aac2:	68bb      	ldr	r3, [r7, #8]
 801aac4:	009b      	lsls	r3, r3, #2
 801aac6:	68fa      	ldr	r2, [r7, #12]
 801aac8:	8992      	ldrh	r2, [r2, #12]
 801aaca:	fbb3 f0f2 	udiv	r0, r3, r2
 801aace:	fb02 f200 	mul.w	r2, r2, r0
 801aad2:	1a9b      	subs	r3, r3, r2
 801aad4:	440b      	add	r3, r1
 801aad6:	6879      	ldr	r1, [r7, #4]
 801aad8:	4618      	mov	r0, r3
 801aada:	f7ff fb0b 	bl	801a0f4 <st_dword>
			fs->wflag = 1;
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	2201      	movs	r2, #1
 801aae2:	70da      	strb	r2, [r3, #3]
			break;
 801aae4:	e008      	b.n	801aaf8 <put_fat+0x22e>
		}
	}
 801aae6:	bf00      	nop
 801aae8:	e006      	b.n	801aaf8 <put_fat+0x22e>
			if (res != FR_OK) break;
 801aaea:	bf00      	nop
 801aaec:	e004      	b.n	801aaf8 <put_fat+0x22e>
			if (res != FR_OK) break;
 801aaee:	bf00      	nop
 801aaf0:	e002      	b.n	801aaf8 <put_fat+0x22e>
			if (res != FR_OK) break;
 801aaf2:	bf00      	nop
 801aaf4:	e000      	b.n	801aaf8 <put_fat+0x22e>
			if (res != FR_OK) break;
 801aaf6:	bf00      	nop
	return res;
 801aaf8:	7ffb      	ldrb	r3, [r7, #31]
}
 801aafa:	4618      	mov	r0, r3
 801aafc:	3724      	adds	r7, #36	; 0x24
 801aafe:	46bd      	mov	sp, r7
 801ab00:	bd90      	pop	{r4, r7, pc}

0801ab02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801ab02:	b580      	push	{r7, lr}
 801ab04:	b088      	sub	sp, #32
 801ab06:	af00      	add	r7, sp, #0
 801ab08:	60f8      	str	r0, [r7, #12]
 801ab0a:	60b9      	str	r1, [r7, #8]
 801ab0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801ab0e:	2300      	movs	r3, #0
 801ab10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	2b01      	cmp	r3, #1
 801ab1c:	d904      	bls.n	801ab28 <remove_chain+0x26>
 801ab1e:	69bb      	ldr	r3, [r7, #24]
 801ab20:	69db      	ldr	r3, [r3, #28]
 801ab22:	68ba      	ldr	r2, [r7, #8]
 801ab24:	429a      	cmp	r2, r3
 801ab26:	d301      	bcc.n	801ab2c <remove_chain+0x2a>
 801ab28:	2302      	movs	r3, #2
 801ab2a:	e04b      	b.n	801abc4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d00c      	beq.n	801ab4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801ab32:	f04f 32ff 	mov.w	r2, #4294967295
 801ab36:	6879      	ldr	r1, [r7, #4]
 801ab38:	69b8      	ldr	r0, [r7, #24]
 801ab3a:	f7ff fec6 	bl	801a8ca <put_fat>
 801ab3e:	4603      	mov	r3, r0
 801ab40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801ab42:	7ffb      	ldrb	r3, [r7, #31]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d001      	beq.n	801ab4c <remove_chain+0x4a>
 801ab48:	7ffb      	ldrb	r3, [r7, #31]
 801ab4a:	e03b      	b.n	801abc4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801ab4c:	68b9      	ldr	r1, [r7, #8]
 801ab4e:	68f8      	ldr	r0, [r7, #12]
 801ab50:	f7ff fde7 	bl	801a722 <get_fat>
 801ab54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801ab56:	697b      	ldr	r3, [r7, #20]
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d031      	beq.n	801abc0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801ab5c:	697b      	ldr	r3, [r7, #20]
 801ab5e:	2b01      	cmp	r3, #1
 801ab60:	d101      	bne.n	801ab66 <remove_chain+0x64>
 801ab62:	2302      	movs	r3, #2
 801ab64:	e02e      	b.n	801abc4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801ab66:	697b      	ldr	r3, [r7, #20]
 801ab68:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab6c:	d101      	bne.n	801ab72 <remove_chain+0x70>
 801ab6e:	2301      	movs	r3, #1
 801ab70:	e028      	b.n	801abc4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801ab72:	2200      	movs	r2, #0
 801ab74:	68b9      	ldr	r1, [r7, #8]
 801ab76:	69b8      	ldr	r0, [r7, #24]
 801ab78:	f7ff fea7 	bl	801a8ca <put_fat>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801ab80:	7ffb      	ldrb	r3, [r7, #31]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d001      	beq.n	801ab8a <remove_chain+0x88>
 801ab86:	7ffb      	ldrb	r3, [r7, #31]
 801ab88:	e01c      	b.n	801abc4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801ab8a:	69bb      	ldr	r3, [r7, #24]
 801ab8c:	699a      	ldr	r2, [r3, #24]
 801ab8e:	69bb      	ldr	r3, [r7, #24]
 801ab90:	69db      	ldr	r3, [r3, #28]
 801ab92:	3b02      	subs	r3, #2
 801ab94:	429a      	cmp	r2, r3
 801ab96:	d20b      	bcs.n	801abb0 <remove_chain+0xae>
			fs->free_clst++;
 801ab98:	69bb      	ldr	r3, [r7, #24]
 801ab9a:	699b      	ldr	r3, [r3, #24]
 801ab9c:	1c5a      	adds	r2, r3, #1
 801ab9e:	69bb      	ldr	r3, [r7, #24]
 801aba0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801aba2:	69bb      	ldr	r3, [r7, #24]
 801aba4:	791b      	ldrb	r3, [r3, #4]
 801aba6:	f043 0301 	orr.w	r3, r3, #1
 801abaa:	b2da      	uxtb	r2, r3
 801abac:	69bb      	ldr	r3, [r7, #24]
 801abae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801abb0:	697b      	ldr	r3, [r7, #20]
 801abb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801abb4:	69bb      	ldr	r3, [r7, #24]
 801abb6:	69db      	ldr	r3, [r3, #28]
 801abb8:	68ba      	ldr	r2, [r7, #8]
 801abba:	429a      	cmp	r2, r3
 801abbc:	d3c6      	bcc.n	801ab4c <remove_chain+0x4a>
 801abbe:	e000      	b.n	801abc2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801abc0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801abc2:	2300      	movs	r3, #0
}
 801abc4:	4618      	mov	r0, r3
 801abc6:	3720      	adds	r7, #32
 801abc8:	46bd      	mov	sp, r7
 801abca:	bd80      	pop	{r7, pc}

0801abcc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801abcc:	b580      	push	{r7, lr}
 801abce:	b088      	sub	sp, #32
 801abd0:	af00      	add	r7, sp, #0
 801abd2:	6078      	str	r0, [r7, #4]
 801abd4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801abdc:	683b      	ldr	r3, [r7, #0]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d10d      	bne.n	801abfe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801abe2:	693b      	ldr	r3, [r7, #16]
 801abe4:	695b      	ldr	r3, [r3, #20]
 801abe6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801abe8:	69bb      	ldr	r3, [r7, #24]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d004      	beq.n	801abf8 <create_chain+0x2c>
 801abee:	693b      	ldr	r3, [r7, #16]
 801abf0:	69db      	ldr	r3, [r3, #28]
 801abf2:	69ba      	ldr	r2, [r7, #24]
 801abf4:	429a      	cmp	r2, r3
 801abf6:	d31b      	bcc.n	801ac30 <create_chain+0x64>
 801abf8:	2301      	movs	r3, #1
 801abfa:	61bb      	str	r3, [r7, #24]
 801abfc:	e018      	b.n	801ac30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801abfe:	6839      	ldr	r1, [r7, #0]
 801ac00:	6878      	ldr	r0, [r7, #4]
 801ac02:	f7ff fd8e 	bl	801a722 <get_fat>
 801ac06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	2b01      	cmp	r3, #1
 801ac0c:	d801      	bhi.n	801ac12 <create_chain+0x46>
 801ac0e:	2301      	movs	r3, #1
 801ac10:	e070      	b.n	801acf4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac18:	d101      	bne.n	801ac1e <create_chain+0x52>
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	e06a      	b.n	801acf4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801ac1e:	693b      	ldr	r3, [r7, #16]
 801ac20:	69db      	ldr	r3, [r3, #28]
 801ac22:	68fa      	ldr	r2, [r7, #12]
 801ac24:	429a      	cmp	r2, r3
 801ac26:	d201      	bcs.n	801ac2c <create_chain+0x60>
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	e063      	b.n	801acf4 <create_chain+0x128>
		scl = clst;
 801ac2c:	683b      	ldr	r3, [r7, #0]
 801ac2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801ac30:	69bb      	ldr	r3, [r7, #24]
 801ac32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801ac34:	69fb      	ldr	r3, [r7, #28]
 801ac36:	3301      	adds	r3, #1
 801ac38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801ac3a:	693b      	ldr	r3, [r7, #16]
 801ac3c:	69db      	ldr	r3, [r3, #28]
 801ac3e:	69fa      	ldr	r2, [r7, #28]
 801ac40:	429a      	cmp	r2, r3
 801ac42:	d307      	bcc.n	801ac54 <create_chain+0x88>
				ncl = 2;
 801ac44:	2302      	movs	r3, #2
 801ac46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801ac48:	69fa      	ldr	r2, [r7, #28]
 801ac4a:	69bb      	ldr	r3, [r7, #24]
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	d901      	bls.n	801ac54 <create_chain+0x88>
 801ac50:	2300      	movs	r3, #0
 801ac52:	e04f      	b.n	801acf4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801ac54:	69f9      	ldr	r1, [r7, #28]
 801ac56:	6878      	ldr	r0, [r7, #4]
 801ac58:	f7ff fd63 	bl	801a722 <get_fat>
 801ac5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d00e      	beq.n	801ac82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	2b01      	cmp	r3, #1
 801ac68:	d003      	beq.n	801ac72 <create_chain+0xa6>
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac70:	d101      	bne.n	801ac76 <create_chain+0xaa>
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	e03e      	b.n	801acf4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801ac76:	69fa      	ldr	r2, [r7, #28]
 801ac78:	69bb      	ldr	r3, [r7, #24]
 801ac7a:	429a      	cmp	r2, r3
 801ac7c:	d1da      	bne.n	801ac34 <create_chain+0x68>
 801ac7e:	2300      	movs	r3, #0
 801ac80:	e038      	b.n	801acf4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801ac82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801ac84:	f04f 32ff 	mov.w	r2, #4294967295
 801ac88:	69f9      	ldr	r1, [r7, #28]
 801ac8a:	6938      	ldr	r0, [r7, #16]
 801ac8c:	f7ff fe1d 	bl	801a8ca <put_fat>
 801ac90:	4603      	mov	r3, r0
 801ac92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801ac94:	7dfb      	ldrb	r3, [r7, #23]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d109      	bne.n	801acae <create_chain+0xe2>
 801ac9a:	683b      	ldr	r3, [r7, #0]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d006      	beq.n	801acae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801aca0:	69fa      	ldr	r2, [r7, #28]
 801aca2:	6839      	ldr	r1, [r7, #0]
 801aca4:	6938      	ldr	r0, [r7, #16]
 801aca6:	f7ff fe10 	bl	801a8ca <put_fat>
 801acaa:	4603      	mov	r3, r0
 801acac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801acae:	7dfb      	ldrb	r3, [r7, #23]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d116      	bne.n	801ace2 <create_chain+0x116>
		fs->last_clst = ncl;
 801acb4:	693b      	ldr	r3, [r7, #16]
 801acb6:	69fa      	ldr	r2, [r7, #28]
 801acb8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801acba:	693b      	ldr	r3, [r7, #16]
 801acbc:	699a      	ldr	r2, [r3, #24]
 801acbe:	693b      	ldr	r3, [r7, #16]
 801acc0:	69db      	ldr	r3, [r3, #28]
 801acc2:	3b02      	subs	r3, #2
 801acc4:	429a      	cmp	r2, r3
 801acc6:	d804      	bhi.n	801acd2 <create_chain+0x106>
 801acc8:	693b      	ldr	r3, [r7, #16]
 801acca:	699b      	ldr	r3, [r3, #24]
 801accc:	1e5a      	subs	r2, r3, #1
 801acce:	693b      	ldr	r3, [r7, #16]
 801acd0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801acd2:	693b      	ldr	r3, [r7, #16]
 801acd4:	791b      	ldrb	r3, [r3, #4]
 801acd6:	f043 0301 	orr.w	r3, r3, #1
 801acda:	b2da      	uxtb	r2, r3
 801acdc:	693b      	ldr	r3, [r7, #16]
 801acde:	711a      	strb	r2, [r3, #4]
 801ace0:	e007      	b.n	801acf2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801ace2:	7dfb      	ldrb	r3, [r7, #23]
 801ace4:	2b01      	cmp	r3, #1
 801ace6:	d102      	bne.n	801acee <create_chain+0x122>
 801ace8:	f04f 33ff 	mov.w	r3, #4294967295
 801acec:	e000      	b.n	801acf0 <create_chain+0x124>
 801acee:	2301      	movs	r3, #1
 801acf0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801acf2:	69fb      	ldr	r3, [r7, #28]
}
 801acf4:	4618      	mov	r0, r3
 801acf6:	3720      	adds	r7, #32
 801acf8:	46bd      	mov	sp, r7
 801acfa:	bd80      	pop	{r7, pc}

0801acfc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801acfc:	b480      	push	{r7}
 801acfe:	b087      	sub	sp, #28
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
 801ad04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad10:	3304      	adds	r3, #4
 801ad12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	899b      	ldrh	r3, [r3, #12]
 801ad18:	461a      	mov	r2, r3
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	fbb3 f3f2 	udiv	r3, r3, r2
 801ad20:	68fa      	ldr	r2, [r7, #12]
 801ad22:	8952      	ldrh	r2, [r2, #10]
 801ad24:	fbb3 f3f2 	udiv	r3, r3, r2
 801ad28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801ad2a:	693b      	ldr	r3, [r7, #16]
 801ad2c:	1d1a      	adds	r2, r3, #4
 801ad2e:	613a      	str	r2, [r7, #16]
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d101      	bne.n	801ad3e <clmt_clust+0x42>
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	e010      	b.n	801ad60 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801ad3e:	697a      	ldr	r2, [r7, #20]
 801ad40:	68bb      	ldr	r3, [r7, #8]
 801ad42:	429a      	cmp	r2, r3
 801ad44:	d307      	bcc.n	801ad56 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801ad46:	697a      	ldr	r2, [r7, #20]
 801ad48:	68bb      	ldr	r3, [r7, #8]
 801ad4a:	1ad3      	subs	r3, r2, r3
 801ad4c:	617b      	str	r3, [r7, #20]
 801ad4e:	693b      	ldr	r3, [r7, #16]
 801ad50:	3304      	adds	r3, #4
 801ad52:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801ad54:	e7e9      	b.n	801ad2a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801ad56:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801ad58:	693b      	ldr	r3, [r7, #16]
 801ad5a:	681a      	ldr	r2, [r3, #0]
 801ad5c:	697b      	ldr	r3, [r7, #20]
 801ad5e:	4413      	add	r3, r2
}
 801ad60:	4618      	mov	r0, r3
 801ad62:	371c      	adds	r7, #28
 801ad64:	46bd      	mov	sp, r7
 801ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6a:	4770      	bx	lr

0801ad6c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b086      	sub	sp, #24
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	6078      	str	r0, [r7, #4]
 801ad74:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801ad7c:	683b      	ldr	r3, [r7, #0]
 801ad7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801ad82:	d204      	bcs.n	801ad8e <dir_sdi+0x22>
 801ad84:	683b      	ldr	r3, [r7, #0]
 801ad86:	f003 031f 	and.w	r3, r3, #31
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d001      	beq.n	801ad92 <dir_sdi+0x26>
		return FR_INT_ERR;
 801ad8e:	2302      	movs	r3, #2
 801ad90:	e071      	b.n	801ae76 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	683a      	ldr	r2, [r7, #0]
 801ad96:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	689b      	ldr	r3, [r3, #8]
 801ad9c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801ad9e:	697b      	ldr	r3, [r7, #20]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d106      	bne.n	801adb2 <dir_sdi+0x46>
 801ada4:	693b      	ldr	r3, [r7, #16]
 801ada6:	781b      	ldrb	r3, [r3, #0]
 801ada8:	2b02      	cmp	r3, #2
 801adaa:	d902      	bls.n	801adb2 <dir_sdi+0x46>
		clst = fs->dirbase;
 801adac:	693b      	ldr	r3, [r7, #16]
 801adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801adb0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801adb2:	697b      	ldr	r3, [r7, #20]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d10c      	bne.n	801add2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801adb8:	683b      	ldr	r3, [r7, #0]
 801adba:	095b      	lsrs	r3, r3, #5
 801adbc:	693a      	ldr	r2, [r7, #16]
 801adbe:	8912      	ldrh	r2, [r2, #8]
 801adc0:	4293      	cmp	r3, r2
 801adc2:	d301      	bcc.n	801adc8 <dir_sdi+0x5c>
 801adc4:	2302      	movs	r3, #2
 801adc6:	e056      	b.n	801ae76 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801adc8:	693b      	ldr	r3, [r7, #16]
 801adca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	61da      	str	r2, [r3, #28]
 801add0:	e02d      	b.n	801ae2e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801add2:	693b      	ldr	r3, [r7, #16]
 801add4:	895b      	ldrh	r3, [r3, #10]
 801add6:	461a      	mov	r2, r3
 801add8:	693b      	ldr	r3, [r7, #16]
 801adda:	899b      	ldrh	r3, [r3, #12]
 801addc:	fb03 f302 	mul.w	r3, r3, r2
 801ade0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801ade2:	e019      	b.n	801ae18 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	6979      	ldr	r1, [r7, #20]
 801ade8:	4618      	mov	r0, r3
 801adea:	f7ff fc9a 	bl	801a722 <get_fat>
 801adee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801adf0:	697b      	ldr	r3, [r7, #20]
 801adf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801adf6:	d101      	bne.n	801adfc <dir_sdi+0x90>
 801adf8:	2301      	movs	r3, #1
 801adfa:	e03c      	b.n	801ae76 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801adfc:	697b      	ldr	r3, [r7, #20]
 801adfe:	2b01      	cmp	r3, #1
 801ae00:	d904      	bls.n	801ae0c <dir_sdi+0xa0>
 801ae02:	693b      	ldr	r3, [r7, #16]
 801ae04:	69db      	ldr	r3, [r3, #28]
 801ae06:	697a      	ldr	r2, [r7, #20]
 801ae08:	429a      	cmp	r2, r3
 801ae0a:	d301      	bcc.n	801ae10 <dir_sdi+0xa4>
 801ae0c:	2302      	movs	r3, #2
 801ae0e:	e032      	b.n	801ae76 <dir_sdi+0x10a>
			ofs -= csz;
 801ae10:	683a      	ldr	r2, [r7, #0]
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	1ad3      	subs	r3, r2, r3
 801ae16:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801ae18:	683a      	ldr	r2, [r7, #0]
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	429a      	cmp	r2, r3
 801ae1e:	d2e1      	bcs.n	801ade4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801ae20:	6979      	ldr	r1, [r7, #20]
 801ae22:	6938      	ldr	r0, [r7, #16]
 801ae24:	f7ff fc5e 	bl	801a6e4 <clust2sect>
 801ae28:	4602      	mov	r2, r0
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	697a      	ldr	r2, [r7, #20]
 801ae32:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	69db      	ldr	r3, [r3, #28]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d101      	bne.n	801ae40 <dir_sdi+0xd4>
 801ae3c:	2302      	movs	r3, #2
 801ae3e:	e01a      	b.n	801ae76 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	69da      	ldr	r2, [r3, #28]
 801ae44:	693b      	ldr	r3, [r7, #16]
 801ae46:	899b      	ldrh	r3, [r3, #12]
 801ae48:	4619      	mov	r1, r3
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	fbb3 f3f1 	udiv	r3, r3, r1
 801ae50:	441a      	add	r2, r3
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801ae56:	693b      	ldr	r3, [r7, #16]
 801ae58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801ae5c:	693b      	ldr	r3, [r7, #16]
 801ae5e:	899b      	ldrh	r3, [r3, #12]
 801ae60:	461a      	mov	r2, r3
 801ae62:	683b      	ldr	r3, [r7, #0]
 801ae64:	fbb3 f0f2 	udiv	r0, r3, r2
 801ae68:	fb02 f200 	mul.w	r2, r2, r0
 801ae6c:	1a9b      	subs	r3, r3, r2
 801ae6e:	18ca      	adds	r2, r1, r3
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801ae74:	2300      	movs	r3, #0
}
 801ae76:	4618      	mov	r0, r3
 801ae78:	3718      	adds	r7, #24
 801ae7a:	46bd      	mov	sp, r7
 801ae7c:	bd80      	pop	{r7, pc}

0801ae7e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801ae7e:	b580      	push	{r7, lr}
 801ae80:	b086      	sub	sp, #24
 801ae82:	af00      	add	r7, sp, #0
 801ae84:	6078      	str	r0, [r7, #4]
 801ae86:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	695b      	ldr	r3, [r3, #20]
 801ae92:	3320      	adds	r3, #32
 801ae94:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	69db      	ldr	r3, [r3, #28]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d003      	beq.n	801aea6 <dir_next+0x28>
 801ae9e:	68bb      	ldr	r3, [r7, #8]
 801aea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801aea4:	d301      	bcc.n	801aeaa <dir_next+0x2c>
 801aea6:	2304      	movs	r3, #4
 801aea8:	e0bb      	b.n	801b022 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	899b      	ldrh	r3, [r3, #12]
 801aeae:	461a      	mov	r2, r3
 801aeb0:	68bb      	ldr	r3, [r7, #8]
 801aeb2:	fbb3 f1f2 	udiv	r1, r3, r2
 801aeb6:	fb02 f201 	mul.w	r2, r2, r1
 801aeba:	1a9b      	subs	r3, r3, r2
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	f040 809d 	bne.w	801affc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	69db      	ldr	r3, [r3, #28]
 801aec6:	1c5a      	adds	r2, r3, #1
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	699b      	ldr	r3, [r3, #24]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d10b      	bne.n	801aeec <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801aed4:	68bb      	ldr	r3, [r7, #8]
 801aed6:	095b      	lsrs	r3, r3, #5
 801aed8:	68fa      	ldr	r2, [r7, #12]
 801aeda:	8912      	ldrh	r2, [r2, #8]
 801aedc:	4293      	cmp	r3, r2
 801aede:	f0c0 808d 	bcc.w	801affc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	2200      	movs	r2, #0
 801aee6:	61da      	str	r2, [r3, #28]
 801aee8:	2304      	movs	r3, #4
 801aeea:	e09a      	b.n	801b022 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	899b      	ldrh	r3, [r3, #12]
 801aef0:	461a      	mov	r2, r3
 801aef2:	68bb      	ldr	r3, [r7, #8]
 801aef4:	fbb3 f3f2 	udiv	r3, r3, r2
 801aef8:	68fa      	ldr	r2, [r7, #12]
 801aefa:	8952      	ldrh	r2, [r2, #10]
 801aefc:	3a01      	subs	r2, #1
 801aefe:	4013      	ands	r3, r2
 801af00:	2b00      	cmp	r3, #0
 801af02:	d17b      	bne.n	801affc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801af04:	687a      	ldr	r2, [r7, #4]
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	699b      	ldr	r3, [r3, #24]
 801af0a:	4619      	mov	r1, r3
 801af0c:	4610      	mov	r0, r2
 801af0e:	f7ff fc08 	bl	801a722 <get_fat>
 801af12:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801af14:	697b      	ldr	r3, [r7, #20]
 801af16:	2b01      	cmp	r3, #1
 801af18:	d801      	bhi.n	801af1e <dir_next+0xa0>
 801af1a:	2302      	movs	r3, #2
 801af1c:	e081      	b.n	801b022 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801af1e:	697b      	ldr	r3, [r7, #20]
 801af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af24:	d101      	bne.n	801af2a <dir_next+0xac>
 801af26:	2301      	movs	r3, #1
 801af28:	e07b      	b.n	801b022 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	69db      	ldr	r3, [r3, #28]
 801af2e:	697a      	ldr	r2, [r7, #20]
 801af30:	429a      	cmp	r2, r3
 801af32:	d359      	bcc.n	801afe8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801af34:	683b      	ldr	r3, [r7, #0]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d104      	bne.n	801af44 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	2200      	movs	r2, #0
 801af3e:	61da      	str	r2, [r3, #28]
 801af40:	2304      	movs	r3, #4
 801af42:	e06e      	b.n	801b022 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801af44:	687a      	ldr	r2, [r7, #4]
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	699b      	ldr	r3, [r3, #24]
 801af4a:	4619      	mov	r1, r3
 801af4c:	4610      	mov	r0, r2
 801af4e:	f7ff fe3d 	bl	801abcc <create_chain>
 801af52:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801af54:	697b      	ldr	r3, [r7, #20]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d101      	bne.n	801af5e <dir_next+0xe0>
 801af5a:	2307      	movs	r3, #7
 801af5c:	e061      	b.n	801b022 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801af5e:	697b      	ldr	r3, [r7, #20]
 801af60:	2b01      	cmp	r3, #1
 801af62:	d101      	bne.n	801af68 <dir_next+0xea>
 801af64:	2302      	movs	r3, #2
 801af66:	e05c      	b.n	801b022 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801af68:	697b      	ldr	r3, [r7, #20]
 801af6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af6e:	d101      	bne.n	801af74 <dir_next+0xf6>
 801af70:	2301      	movs	r3, #1
 801af72:	e056      	b.n	801b022 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801af74:	68f8      	ldr	r0, [r7, #12]
 801af76:	f7ff fad3 	bl	801a520 <sync_window>
 801af7a:	4603      	mov	r3, r0
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d001      	beq.n	801af84 <dir_next+0x106>
 801af80:	2301      	movs	r3, #1
 801af82:	e04e      	b.n	801b022 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	899b      	ldrh	r3, [r3, #12]
 801af8e:	461a      	mov	r2, r3
 801af90:	2100      	movs	r1, #0
 801af92:	f7ff f8fc 	bl	801a18e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801af96:	2300      	movs	r3, #0
 801af98:	613b      	str	r3, [r7, #16]
 801af9a:	6979      	ldr	r1, [r7, #20]
 801af9c:	68f8      	ldr	r0, [r7, #12]
 801af9e:	f7ff fba1 	bl	801a6e4 <clust2sect>
 801afa2:	4602      	mov	r2, r0
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	635a      	str	r2, [r3, #52]	; 0x34
 801afa8:	e012      	b.n	801afd0 <dir_next+0x152>
						fs->wflag = 1;
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	2201      	movs	r2, #1
 801afae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801afb0:	68f8      	ldr	r0, [r7, #12]
 801afb2:	f7ff fab5 	bl	801a520 <sync_window>
 801afb6:	4603      	mov	r3, r0
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d001      	beq.n	801afc0 <dir_next+0x142>
 801afbc:	2301      	movs	r3, #1
 801afbe:	e030      	b.n	801b022 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801afc0:	693b      	ldr	r3, [r7, #16]
 801afc2:	3301      	adds	r3, #1
 801afc4:	613b      	str	r3, [r7, #16]
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801afca:	1c5a      	adds	r2, r3, #1
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	635a      	str	r2, [r3, #52]	; 0x34
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	895b      	ldrh	r3, [r3, #10]
 801afd4:	461a      	mov	r2, r3
 801afd6:	693b      	ldr	r3, [r7, #16]
 801afd8:	4293      	cmp	r3, r2
 801afda:	d3e6      	bcc.n	801afaa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801afe0:	693b      	ldr	r3, [r7, #16]
 801afe2:	1ad2      	subs	r2, r2, r3
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	697a      	ldr	r2, [r7, #20]
 801afec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801afee:	6979      	ldr	r1, [r7, #20]
 801aff0:	68f8      	ldr	r0, [r7, #12]
 801aff2:	f7ff fb77 	bl	801a6e4 <clust2sect>
 801aff6:	4602      	mov	r2, r0
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	68ba      	ldr	r2, [r7, #8]
 801b000:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	899b      	ldrh	r3, [r3, #12]
 801b00c:	461a      	mov	r2, r3
 801b00e:	68bb      	ldr	r3, [r7, #8]
 801b010:	fbb3 f0f2 	udiv	r0, r3, r2
 801b014:	fb02 f200 	mul.w	r2, r2, r0
 801b018:	1a9b      	subs	r3, r3, r2
 801b01a:	18ca      	adds	r2, r1, r3
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b020:	2300      	movs	r3, #0
}
 801b022:	4618      	mov	r0, r3
 801b024:	3718      	adds	r7, #24
 801b026:	46bd      	mov	sp, r7
 801b028:	bd80      	pop	{r7, pc}

0801b02a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b02a:	b580      	push	{r7, lr}
 801b02c:	b086      	sub	sp, #24
 801b02e:	af00      	add	r7, sp, #0
 801b030:	6078      	str	r0, [r7, #4]
 801b032:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b03a:	2100      	movs	r1, #0
 801b03c:	6878      	ldr	r0, [r7, #4]
 801b03e:	f7ff fe95 	bl	801ad6c <dir_sdi>
 801b042:	4603      	mov	r3, r0
 801b044:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b046:	7dfb      	ldrb	r3, [r7, #23]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d12b      	bne.n	801b0a4 <dir_alloc+0x7a>
		n = 0;
 801b04c:	2300      	movs	r3, #0
 801b04e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	69db      	ldr	r3, [r3, #28]
 801b054:	4619      	mov	r1, r3
 801b056:	68f8      	ldr	r0, [r7, #12]
 801b058:	f7ff faa6 	bl	801a5a8 <move_window>
 801b05c:	4603      	mov	r3, r0
 801b05e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b060:	7dfb      	ldrb	r3, [r7, #23]
 801b062:	2b00      	cmp	r3, #0
 801b064:	d11d      	bne.n	801b0a2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	6a1b      	ldr	r3, [r3, #32]
 801b06a:	781b      	ldrb	r3, [r3, #0]
 801b06c:	2be5      	cmp	r3, #229	; 0xe5
 801b06e:	d004      	beq.n	801b07a <dir_alloc+0x50>
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	6a1b      	ldr	r3, [r3, #32]
 801b074:	781b      	ldrb	r3, [r3, #0]
 801b076:	2b00      	cmp	r3, #0
 801b078:	d107      	bne.n	801b08a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b07a:	693b      	ldr	r3, [r7, #16]
 801b07c:	3301      	adds	r3, #1
 801b07e:	613b      	str	r3, [r7, #16]
 801b080:	693a      	ldr	r2, [r7, #16]
 801b082:	683b      	ldr	r3, [r7, #0]
 801b084:	429a      	cmp	r2, r3
 801b086:	d102      	bne.n	801b08e <dir_alloc+0x64>
 801b088:	e00c      	b.n	801b0a4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b08a:	2300      	movs	r3, #0
 801b08c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b08e:	2101      	movs	r1, #1
 801b090:	6878      	ldr	r0, [r7, #4]
 801b092:	f7ff fef4 	bl	801ae7e <dir_next>
 801b096:	4603      	mov	r3, r0
 801b098:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b09a:	7dfb      	ldrb	r3, [r7, #23]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d0d7      	beq.n	801b050 <dir_alloc+0x26>
 801b0a0:	e000      	b.n	801b0a4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b0a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b0a4:	7dfb      	ldrb	r3, [r7, #23]
 801b0a6:	2b04      	cmp	r3, #4
 801b0a8:	d101      	bne.n	801b0ae <dir_alloc+0x84>
 801b0aa:	2307      	movs	r3, #7
 801b0ac:	75fb      	strb	r3, [r7, #23]
	return res;
 801b0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	3718      	adds	r7, #24
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	bd80      	pop	{r7, pc}

0801b0b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b084      	sub	sp, #16
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	6078      	str	r0, [r7, #4]
 801b0c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b0c2:	683b      	ldr	r3, [r7, #0]
 801b0c4:	331a      	adds	r3, #26
 801b0c6:	4618      	mov	r0, r3
 801b0c8:	f7fe ffbe 	bl	801a048 <ld_word>
 801b0cc:	4603      	mov	r3, r0
 801b0ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	781b      	ldrb	r3, [r3, #0]
 801b0d4:	2b03      	cmp	r3, #3
 801b0d6:	d109      	bne.n	801b0ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b0d8:	683b      	ldr	r3, [r7, #0]
 801b0da:	3314      	adds	r3, #20
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f7fe ffb3 	bl	801a048 <ld_word>
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	041b      	lsls	r3, r3, #16
 801b0e6:	68fa      	ldr	r2, [r7, #12]
 801b0e8:	4313      	orrs	r3, r2
 801b0ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b0ec:	68fb      	ldr	r3, [r7, #12]
}
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	3710      	adds	r7, #16
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd80      	pop	{r7, pc}

0801b0f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b0f6:	b580      	push	{r7, lr}
 801b0f8:	b084      	sub	sp, #16
 801b0fa:	af00      	add	r7, sp, #0
 801b0fc:	60f8      	str	r0, [r7, #12]
 801b0fe:	60b9      	str	r1, [r7, #8]
 801b100:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b102:	68bb      	ldr	r3, [r7, #8]
 801b104:	331a      	adds	r3, #26
 801b106:	687a      	ldr	r2, [r7, #4]
 801b108:	b292      	uxth	r2, r2
 801b10a:	4611      	mov	r1, r2
 801b10c:	4618      	mov	r0, r3
 801b10e:	f7fe ffd6 	bl	801a0be <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	781b      	ldrb	r3, [r3, #0]
 801b116:	2b03      	cmp	r3, #3
 801b118:	d109      	bne.n	801b12e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b11a:	68bb      	ldr	r3, [r7, #8]
 801b11c:	f103 0214 	add.w	r2, r3, #20
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	0c1b      	lsrs	r3, r3, #16
 801b124:	b29b      	uxth	r3, r3
 801b126:	4619      	mov	r1, r3
 801b128:	4610      	mov	r0, r2
 801b12a:	f7fe ffc8 	bl	801a0be <st_word>
	}
}
 801b12e:	bf00      	nop
 801b130:	3710      	adds	r7, #16
 801b132:	46bd      	mov	sp, r7
 801b134:	bd80      	pop	{r7, pc}
	...

0801b138 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801b138:	b590      	push	{r4, r7, lr}
 801b13a:	b087      	sub	sp, #28
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
 801b140:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801b142:	683b      	ldr	r3, [r7, #0]
 801b144:	331a      	adds	r3, #26
 801b146:	4618      	mov	r0, r3
 801b148:	f7fe ff7e 	bl	801a048 <ld_word>
 801b14c:	4603      	mov	r3, r0
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d001      	beq.n	801b156 <cmp_lfn+0x1e>
 801b152:	2300      	movs	r3, #0
 801b154:	e059      	b.n	801b20a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801b156:	683b      	ldr	r3, [r7, #0]
 801b158:	781b      	ldrb	r3, [r3, #0]
 801b15a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b15e:	1e5a      	subs	r2, r3, #1
 801b160:	4613      	mov	r3, r2
 801b162:	005b      	lsls	r3, r3, #1
 801b164:	4413      	add	r3, r2
 801b166:	009b      	lsls	r3, r3, #2
 801b168:	4413      	add	r3, r2
 801b16a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b16c:	2301      	movs	r3, #1
 801b16e:	81fb      	strh	r3, [r7, #14]
 801b170:	2300      	movs	r3, #0
 801b172:	613b      	str	r3, [r7, #16]
 801b174:	e033      	b.n	801b1de <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b176:	4a27      	ldr	r2, [pc, #156]	; (801b214 <cmp_lfn+0xdc>)
 801b178:	693b      	ldr	r3, [r7, #16]
 801b17a:	4413      	add	r3, r2
 801b17c:	781b      	ldrb	r3, [r3, #0]
 801b17e:	461a      	mov	r2, r3
 801b180:	683b      	ldr	r3, [r7, #0]
 801b182:	4413      	add	r3, r2
 801b184:	4618      	mov	r0, r3
 801b186:	f7fe ff5f 	bl	801a048 <ld_word>
 801b18a:	4603      	mov	r3, r0
 801b18c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b18e:	89fb      	ldrh	r3, [r7, #14]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d01a      	beq.n	801b1ca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801b194:	697b      	ldr	r3, [r7, #20]
 801b196:	2bfe      	cmp	r3, #254	; 0xfe
 801b198:	d812      	bhi.n	801b1c0 <cmp_lfn+0x88>
 801b19a:	89bb      	ldrh	r3, [r7, #12]
 801b19c:	4618      	mov	r0, r3
 801b19e:	f002 fcd9 	bl	801db54 <ff_wtoupper>
 801b1a2:	4603      	mov	r3, r0
 801b1a4:	461c      	mov	r4, r3
 801b1a6:	697b      	ldr	r3, [r7, #20]
 801b1a8:	1c5a      	adds	r2, r3, #1
 801b1aa:	617a      	str	r2, [r7, #20]
 801b1ac:	005b      	lsls	r3, r3, #1
 801b1ae:	687a      	ldr	r2, [r7, #4]
 801b1b0:	4413      	add	r3, r2
 801b1b2:	881b      	ldrh	r3, [r3, #0]
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	f002 fccd 	bl	801db54 <ff_wtoupper>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	429c      	cmp	r4, r3
 801b1be:	d001      	beq.n	801b1c4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	e022      	b.n	801b20a <cmp_lfn+0xd2>
			}
			wc = uc;
 801b1c4:	89bb      	ldrh	r3, [r7, #12]
 801b1c6:	81fb      	strh	r3, [r7, #14]
 801b1c8:	e006      	b.n	801b1d8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b1ca:	89bb      	ldrh	r3, [r7, #12]
 801b1cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b1d0:	4293      	cmp	r3, r2
 801b1d2:	d001      	beq.n	801b1d8 <cmp_lfn+0xa0>
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	e018      	b.n	801b20a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b1d8:	693b      	ldr	r3, [r7, #16]
 801b1da:	3301      	adds	r3, #1
 801b1dc:	613b      	str	r3, [r7, #16]
 801b1de:	693b      	ldr	r3, [r7, #16]
 801b1e0:	2b0c      	cmp	r3, #12
 801b1e2:	d9c8      	bls.n	801b176 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801b1e4:	683b      	ldr	r3, [r7, #0]
 801b1e6:	781b      	ldrb	r3, [r3, #0]
 801b1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d00b      	beq.n	801b208 <cmp_lfn+0xd0>
 801b1f0:	89fb      	ldrh	r3, [r7, #14]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d008      	beq.n	801b208 <cmp_lfn+0xd0>
 801b1f6:	697b      	ldr	r3, [r7, #20]
 801b1f8:	005b      	lsls	r3, r3, #1
 801b1fa:	687a      	ldr	r2, [r7, #4]
 801b1fc:	4413      	add	r3, r2
 801b1fe:	881b      	ldrh	r3, [r3, #0]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d001      	beq.n	801b208 <cmp_lfn+0xd0>
 801b204:	2300      	movs	r3, #0
 801b206:	e000      	b.n	801b20a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801b208:	2301      	movs	r3, #1
}
 801b20a:	4618      	mov	r0, r3
 801b20c:	371c      	adds	r7, #28
 801b20e:	46bd      	mov	sp, r7
 801b210:	bd90      	pop	{r4, r7, pc}
 801b212:	bf00      	nop
 801b214:	08023f1c 	.word	0x08023f1c

0801b218 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b086      	sub	sp, #24
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
 801b220:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	331a      	adds	r3, #26
 801b226:	4618      	mov	r0, r3
 801b228:	f7fe ff0e 	bl	801a048 <ld_word>
 801b22c:	4603      	mov	r3, r0
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d001      	beq.n	801b236 <pick_lfn+0x1e>
 801b232:	2300      	movs	r3, #0
 801b234:	e04d      	b.n	801b2d2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801b236:	683b      	ldr	r3, [r7, #0]
 801b238:	781b      	ldrb	r3, [r3, #0]
 801b23a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b23e:	1e5a      	subs	r2, r3, #1
 801b240:	4613      	mov	r3, r2
 801b242:	005b      	lsls	r3, r3, #1
 801b244:	4413      	add	r3, r2
 801b246:	009b      	lsls	r3, r3, #2
 801b248:	4413      	add	r3, r2
 801b24a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b24c:	2301      	movs	r3, #1
 801b24e:	81fb      	strh	r3, [r7, #14]
 801b250:	2300      	movs	r3, #0
 801b252:	613b      	str	r3, [r7, #16]
 801b254:	e028      	b.n	801b2a8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b256:	4a21      	ldr	r2, [pc, #132]	; (801b2dc <pick_lfn+0xc4>)
 801b258:	693b      	ldr	r3, [r7, #16]
 801b25a:	4413      	add	r3, r2
 801b25c:	781b      	ldrb	r3, [r3, #0]
 801b25e:	461a      	mov	r2, r3
 801b260:	683b      	ldr	r3, [r7, #0]
 801b262:	4413      	add	r3, r2
 801b264:	4618      	mov	r0, r3
 801b266:	f7fe feef 	bl	801a048 <ld_word>
 801b26a:	4603      	mov	r3, r0
 801b26c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b26e:	89fb      	ldrh	r3, [r7, #14]
 801b270:	2b00      	cmp	r3, #0
 801b272:	d00f      	beq.n	801b294 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801b274:	697b      	ldr	r3, [r7, #20]
 801b276:	2bfe      	cmp	r3, #254	; 0xfe
 801b278:	d901      	bls.n	801b27e <pick_lfn+0x66>
 801b27a:	2300      	movs	r3, #0
 801b27c:	e029      	b.n	801b2d2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801b27e:	89bb      	ldrh	r3, [r7, #12]
 801b280:	81fb      	strh	r3, [r7, #14]
 801b282:	697b      	ldr	r3, [r7, #20]
 801b284:	1c5a      	adds	r2, r3, #1
 801b286:	617a      	str	r2, [r7, #20]
 801b288:	005b      	lsls	r3, r3, #1
 801b28a:	687a      	ldr	r2, [r7, #4]
 801b28c:	4413      	add	r3, r2
 801b28e:	89fa      	ldrh	r2, [r7, #14]
 801b290:	801a      	strh	r2, [r3, #0]
 801b292:	e006      	b.n	801b2a2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b294:	89bb      	ldrh	r3, [r7, #12]
 801b296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b29a:	4293      	cmp	r3, r2
 801b29c:	d001      	beq.n	801b2a2 <pick_lfn+0x8a>
 801b29e:	2300      	movs	r3, #0
 801b2a0:	e017      	b.n	801b2d2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b2a2:	693b      	ldr	r3, [r7, #16]
 801b2a4:	3301      	adds	r3, #1
 801b2a6:	613b      	str	r3, [r7, #16]
 801b2a8:	693b      	ldr	r3, [r7, #16]
 801b2aa:	2b0c      	cmp	r3, #12
 801b2ac:	d9d3      	bls.n	801b256 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801b2ae:	683b      	ldr	r3, [r7, #0]
 801b2b0:	781b      	ldrb	r3, [r3, #0]
 801b2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d00a      	beq.n	801b2d0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801b2ba:	697b      	ldr	r3, [r7, #20]
 801b2bc:	2bfe      	cmp	r3, #254	; 0xfe
 801b2be:	d901      	bls.n	801b2c4 <pick_lfn+0xac>
 801b2c0:	2300      	movs	r3, #0
 801b2c2:	e006      	b.n	801b2d2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	005b      	lsls	r3, r3, #1
 801b2c8:	687a      	ldr	r2, [r7, #4]
 801b2ca:	4413      	add	r3, r2
 801b2cc:	2200      	movs	r2, #0
 801b2ce:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801b2d0:	2301      	movs	r3, #1
}
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	3718      	adds	r7, #24
 801b2d6:	46bd      	mov	sp, r7
 801b2d8:	bd80      	pop	{r7, pc}
 801b2da:	bf00      	nop
 801b2dc:	08023f1c 	.word	0x08023f1c

0801b2e0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801b2e0:	b580      	push	{r7, lr}
 801b2e2:	b088      	sub	sp, #32
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	60f8      	str	r0, [r7, #12]
 801b2e8:	60b9      	str	r1, [r7, #8]
 801b2ea:	4611      	mov	r1, r2
 801b2ec:	461a      	mov	r2, r3
 801b2ee:	460b      	mov	r3, r1
 801b2f0:	71fb      	strb	r3, [r7, #7]
 801b2f2:	4613      	mov	r3, r2
 801b2f4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801b2f6:	68bb      	ldr	r3, [r7, #8]
 801b2f8:	330d      	adds	r3, #13
 801b2fa:	79ba      	ldrb	r2, [r7, #6]
 801b2fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801b2fe:	68bb      	ldr	r3, [r7, #8]
 801b300:	330b      	adds	r3, #11
 801b302:	220f      	movs	r2, #15
 801b304:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801b306:	68bb      	ldr	r3, [r7, #8]
 801b308:	330c      	adds	r3, #12
 801b30a:	2200      	movs	r2, #0
 801b30c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801b30e:	68bb      	ldr	r3, [r7, #8]
 801b310:	331a      	adds	r3, #26
 801b312:	2100      	movs	r1, #0
 801b314:	4618      	mov	r0, r3
 801b316:	f7fe fed2 	bl	801a0be <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801b31a:	79fb      	ldrb	r3, [r7, #7]
 801b31c:	1e5a      	subs	r2, r3, #1
 801b31e:	4613      	mov	r3, r2
 801b320:	005b      	lsls	r3, r3, #1
 801b322:	4413      	add	r3, r2
 801b324:	009b      	lsls	r3, r3, #2
 801b326:	4413      	add	r3, r2
 801b328:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801b32a:	2300      	movs	r3, #0
 801b32c:	82fb      	strh	r3, [r7, #22]
 801b32e:	2300      	movs	r3, #0
 801b330:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801b332:	8afb      	ldrh	r3, [r7, #22]
 801b334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b338:	4293      	cmp	r3, r2
 801b33a:	d007      	beq.n	801b34c <put_lfn+0x6c>
 801b33c:	69fb      	ldr	r3, [r7, #28]
 801b33e:	1c5a      	adds	r2, r3, #1
 801b340:	61fa      	str	r2, [r7, #28]
 801b342:	005b      	lsls	r3, r3, #1
 801b344:	68fa      	ldr	r2, [r7, #12]
 801b346:	4413      	add	r3, r2
 801b348:	881b      	ldrh	r3, [r3, #0]
 801b34a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801b34c:	4a17      	ldr	r2, [pc, #92]	; (801b3ac <put_lfn+0xcc>)
 801b34e:	69bb      	ldr	r3, [r7, #24]
 801b350:	4413      	add	r3, r2
 801b352:	781b      	ldrb	r3, [r3, #0]
 801b354:	461a      	mov	r2, r3
 801b356:	68bb      	ldr	r3, [r7, #8]
 801b358:	4413      	add	r3, r2
 801b35a:	8afa      	ldrh	r2, [r7, #22]
 801b35c:	4611      	mov	r1, r2
 801b35e:	4618      	mov	r0, r3
 801b360:	f7fe fead 	bl	801a0be <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801b364:	8afb      	ldrh	r3, [r7, #22]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d102      	bne.n	801b370 <put_lfn+0x90>
 801b36a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b36e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801b370:	69bb      	ldr	r3, [r7, #24]
 801b372:	3301      	adds	r3, #1
 801b374:	61bb      	str	r3, [r7, #24]
 801b376:	69bb      	ldr	r3, [r7, #24]
 801b378:	2b0c      	cmp	r3, #12
 801b37a:	d9da      	bls.n	801b332 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801b37c:	8afb      	ldrh	r3, [r7, #22]
 801b37e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b382:	4293      	cmp	r3, r2
 801b384:	d006      	beq.n	801b394 <put_lfn+0xb4>
 801b386:	69fb      	ldr	r3, [r7, #28]
 801b388:	005b      	lsls	r3, r3, #1
 801b38a:	68fa      	ldr	r2, [r7, #12]
 801b38c:	4413      	add	r3, r2
 801b38e:	881b      	ldrh	r3, [r3, #0]
 801b390:	2b00      	cmp	r3, #0
 801b392:	d103      	bne.n	801b39c <put_lfn+0xbc>
 801b394:	79fb      	ldrb	r3, [r7, #7]
 801b396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b39a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801b39c:	68bb      	ldr	r3, [r7, #8]
 801b39e:	79fa      	ldrb	r2, [r7, #7]
 801b3a0:	701a      	strb	r2, [r3, #0]
}
 801b3a2:	bf00      	nop
 801b3a4:	3720      	adds	r7, #32
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}
 801b3aa:	bf00      	nop
 801b3ac:	08023f1c 	.word	0x08023f1c

0801b3b0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b08c      	sub	sp, #48	; 0x30
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	60f8      	str	r0, [r7, #12]
 801b3b8:	60b9      	str	r1, [r7, #8]
 801b3ba:	607a      	str	r2, [r7, #4]
 801b3bc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801b3be:	220b      	movs	r2, #11
 801b3c0:	68b9      	ldr	r1, [r7, #8]
 801b3c2:	68f8      	ldr	r0, [r7, #12]
 801b3c4:	f7fe fec2 	bl	801a14c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801b3c8:	683b      	ldr	r3, [r7, #0]
 801b3ca:	2b05      	cmp	r3, #5
 801b3cc:	d929      	bls.n	801b422 <gen_numname+0x72>
		sr = seq;
 801b3ce:	683b      	ldr	r3, [r7, #0]
 801b3d0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801b3d2:	e020      	b.n	801b416 <gen_numname+0x66>
			wc = *lfn++;
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	1c9a      	adds	r2, r3, #2
 801b3d8:	607a      	str	r2, [r7, #4]
 801b3da:	881b      	ldrh	r3, [r3, #0]
 801b3dc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801b3de:	2300      	movs	r3, #0
 801b3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 801b3e2:	e015      	b.n	801b410 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801b3e4:	69fb      	ldr	r3, [r7, #28]
 801b3e6:	005a      	lsls	r2, r3, #1
 801b3e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b3ea:	f003 0301 	and.w	r3, r3, #1
 801b3ee:	4413      	add	r3, r2
 801b3f0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801b3f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b3f4:	085b      	lsrs	r3, r3, #1
 801b3f6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801b3f8:	69fb      	ldr	r3, [r7, #28]
 801b3fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d003      	beq.n	801b40a <gen_numname+0x5a>
 801b402:	69fa      	ldr	r2, [r7, #28]
 801b404:	4b31      	ldr	r3, [pc, #196]	; (801b4cc <gen_numname+0x11c>)
 801b406:	4053      	eors	r3, r2
 801b408:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801b40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b40c:	3301      	adds	r3, #1
 801b40e:	62bb      	str	r3, [r7, #40]	; 0x28
 801b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b412:	2b0f      	cmp	r3, #15
 801b414:	d9e6      	bls.n	801b3e4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	881b      	ldrh	r3, [r3, #0]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d1da      	bne.n	801b3d4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801b41e:	69fb      	ldr	r3, [r7, #28]
 801b420:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801b422:	2307      	movs	r3, #7
 801b424:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801b426:	683b      	ldr	r3, [r7, #0]
 801b428:	b2db      	uxtb	r3, r3
 801b42a:	f003 030f 	and.w	r3, r3, #15
 801b42e:	b2db      	uxtb	r3, r3
 801b430:	3330      	adds	r3, #48	; 0x30
 801b432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801b436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b43a:	2b39      	cmp	r3, #57	; 0x39
 801b43c:	d904      	bls.n	801b448 <gen_numname+0x98>
 801b43e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b442:	3307      	adds	r3, #7
 801b444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801b448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b44a:	1e5a      	subs	r2, r3, #1
 801b44c:	62ba      	str	r2, [r7, #40]	; 0x28
 801b44e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b452:	4413      	add	r3, r2
 801b454:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b458:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801b45c:	683b      	ldr	r3, [r7, #0]
 801b45e:	091b      	lsrs	r3, r3, #4
 801b460:	603b      	str	r3, [r7, #0]
	} while (seq);
 801b462:	683b      	ldr	r3, [r7, #0]
 801b464:	2b00      	cmp	r3, #0
 801b466:	d1de      	bne.n	801b426 <gen_numname+0x76>
	ns[i] = '~';
 801b468:	f107 0214 	add.w	r2, r7, #20
 801b46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b46e:	4413      	add	r3, r2
 801b470:	227e      	movs	r2, #126	; 0x7e
 801b472:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801b474:	2300      	movs	r3, #0
 801b476:	627b      	str	r3, [r7, #36]	; 0x24
 801b478:	e002      	b.n	801b480 <gen_numname+0xd0>
 801b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b47c:	3301      	adds	r3, #1
 801b47e:	627b      	str	r3, [r7, #36]	; 0x24
 801b480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b484:	429a      	cmp	r2, r3
 801b486:	d205      	bcs.n	801b494 <gen_numname+0xe4>
 801b488:	68fa      	ldr	r2, [r7, #12]
 801b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b48c:	4413      	add	r3, r2
 801b48e:	781b      	ldrb	r3, [r3, #0]
 801b490:	2b20      	cmp	r3, #32
 801b492:	d1f2      	bne.n	801b47a <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801b494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b496:	2b07      	cmp	r3, #7
 801b498:	d808      	bhi.n	801b4ac <gen_numname+0xfc>
 801b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b49c:	1c5a      	adds	r2, r3, #1
 801b49e:	62ba      	str	r2, [r7, #40]	; 0x28
 801b4a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b4a4:	4413      	add	r3, r2
 801b4a6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801b4aa:	e000      	b.n	801b4ae <gen_numname+0xfe>
 801b4ac:	2120      	movs	r1, #32
 801b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4b0:	1c5a      	adds	r2, r3, #1
 801b4b2:	627a      	str	r2, [r7, #36]	; 0x24
 801b4b4:	68fa      	ldr	r2, [r7, #12]
 801b4b6:	4413      	add	r3, r2
 801b4b8:	460a      	mov	r2, r1
 801b4ba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4be:	2b07      	cmp	r3, #7
 801b4c0:	d9e8      	bls.n	801b494 <gen_numname+0xe4>
}
 801b4c2:	bf00      	nop
 801b4c4:	bf00      	nop
 801b4c6:	3730      	adds	r7, #48	; 0x30
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	bd80      	pop	{r7, pc}
 801b4cc:	00011021 	.word	0x00011021

0801b4d0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801b4d0:	b480      	push	{r7}
 801b4d2:	b085      	sub	sp, #20
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801b4d8:	2300      	movs	r3, #0
 801b4da:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801b4dc:	230b      	movs	r3, #11
 801b4de:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801b4e0:	7bfb      	ldrb	r3, [r7, #15]
 801b4e2:	b2da      	uxtb	r2, r3
 801b4e4:	0852      	lsrs	r2, r2, #1
 801b4e6:	01db      	lsls	r3, r3, #7
 801b4e8:	4313      	orrs	r3, r2
 801b4ea:	b2da      	uxtb	r2, r3
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	1c59      	adds	r1, r3, #1
 801b4f0:	6079      	str	r1, [r7, #4]
 801b4f2:	781b      	ldrb	r3, [r3, #0]
 801b4f4:	4413      	add	r3, r2
 801b4f6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801b4f8:	68bb      	ldr	r3, [r7, #8]
 801b4fa:	3b01      	subs	r3, #1
 801b4fc:	60bb      	str	r3, [r7, #8]
 801b4fe:	68bb      	ldr	r3, [r7, #8]
 801b500:	2b00      	cmp	r3, #0
 801b502:	d1ed      	bne.n	801b4e0 <sum_sfn+0x10>
	return sum;
 801b504:	7bfb      	ldrb	r3, [r7, #15]
}
 801b506:	4618      	mov	r0, r3
 801b508:	3714      	adds	r7, #20
 801b50a:	46bd      	mov	sp, r7
 801b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b510:	4770      	bx	lr

0801b512 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801b512:	b580      	push	{r7, lr}
 801b514:	b086      	sub	sp, #24
 801b516:	af00      	add	r7, sp, #0
 801b518:	6078      	str	r0, [r7, #4]
 801b51a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801b51c:	2304      	movs	r3, #4
 801b51e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801b526:	23ff      	movs	r3, #255	; 0xff
 801b528:	757b      	strb	r3, [r7, #21]
 801b52a:	23ff      	movs	r3, #255	; 0xff
 801b52c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801b52e:	e081      	b.n	801b634 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	69db      	ldr	r3, [r3, #28]
 801b534:	4619      	mov	r1, r3
 801b536:	6938      	ldr	r0, [r7, #16]
 801b538:	f7ff f836 	bl	801a5a8 <move_window>
 801b53c:	4603      	mov	r3, r0
 801b53e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b540:	7dfb      	ldrb	r3, [r7, #23]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d17c      	bne.n	801b640 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	6a1b      	ldr	r3, [r3, #32]
 801b54a:	781b      	ldrb	r3, [r3, #0]
 801b54c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801b54e:	7dbb      	ldrb	r3, [r7, #22]
 801b550:	2b00      	cmp	r3, #0
 801b552:	d102      	bne.n	801b55a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801b554:	2304      	movs	r3, #4
 801b556:	75fb      	strb	r3, [r7, #23]
 801b558:	e077      	b.n	801b64a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	6a1b      	ldr	r3, [r3, #32]
 801b55e:	330b      	adds	r3, #11
 801b560:	781b      	ldrb	r3, [r3, #0]
 801b562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b566:	73fb      	strb	r3, [r7, #15]
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	7bfa      	ldrb	r2, [r7, #15]
 801b56c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801b56e:	7dbb      	ldrb	r3, [r7, #22]
 801b570:	2be5      	cmp	r3, #229	; 0xe5
 801b572:	d00e      	beq.n	801b592 <dir_read+0x80>
 801b574:	7dbb      	ldrb	r3, [r7, #22]
 801b576:	2b2e      	cmp	r3, #46	; 0x2e
 801b578:	d00b      	beq.n	801b592 <dir_read+0x80>
 801b57a:	7bfb      	ldrb	r3, [r7, #15]
 801b57c:	f023 0320 	bic.w	r3, r3, #32
 801b580:	2b08      	cmp	r3, #8
 801b582:	bf0c      	ite	eq
 801b584:	2301      	moveq	r3, #1
 801b586:	2300      	movne	r3, #0
 801b588:	b2db      	uxtb	r3, r3
 801b58a:	461a      	mov	r2, r3
 801b58c:	683b      	ldr	r3, [r7, #0]
 801b58e:	4293      	cmp	r3, r2
 801b590:	d002      	beq.n	801b598 <dir_read+0x86>
				ord = 0xFF;
 801b592:	23ff      	movs	r3, #255	; 0xff
 801b594:	757b      	strb	r3, [r7, #21]
 801b596:	e044      	b.n	801b622 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801b598:	7bfb      	ldrb	r3, [r7, #15]
 801b59a:	2b0f      	cmp	r3, #15
 801b59c:	d12f      	bne.n	801b5fe <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801b59e:	7dbb      	ldrb	r3, [r7, #22]
 801b5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d00d      	beq.n	801b5c4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	6a1b      	ldr	r3, [r3, #32]
 801b5ac:	7b5b      	ldrb	r3, [r3, #13]
 801b5ae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801b5b0:	7dbb      	ldrb	r3, [r7, #22]
 801b5b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b5b6:	75bb      	strb	r3, [r7, #22]
 801b5b8:	7dbb      	ldrb	r3, [r7, #22]
 801b5ba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	695a      	ldr	r2, [r3, #20]
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801b5c4:	7dba      	ldrb	r2, [r7, #22]
 801b5c6:	7d7b      	ldrb	r3, [r7, #21]
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d115      	bne.n	801b5f8 <dir_read+0xe6>
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	6a1b      	ldr	r3, [r3, #32]
 801b5d0:	330d      	adds	r3, #13
 801b5d2:	781b      	ldrb	r3, [r3, #0]
 801b5d4:	7d3a      	ldrb	r2, [r7, #20]
 801b5d6:	429a      	cmp	r2, r3
 801b5d8:	d10e      	bne.n	801b5f8 <dir_read+0xe6>
 801b5da:	693b      	ldr	r3, [r7, #16]
 801b5dc:	691a      	ldr	r2, [r3, #16]
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	6a1b      	ldr	r3, [r3, #32]
 801b5e2:	4619      	mov	r1, r3
 801b5e4:	4610      	mov	r0, r2
 801b5e6:	f7ff fe17 	bl	801b218 <pick_lfn>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d003      	beq.n	801b5f8 <dir_read+0xe6>
 801b5f0:	7d7b      	ldrb	r3, [r7, #21]
 801b5f2:	3b01      	subs	r3, #1
 801b5f4:	b2db      	uxtb	r3, r3
 801b5f6:	e000      	b.n	801b5fa <dir_read+0xe8>
 801b5f8:	23ff      	movs	r3, #255	; 0xff
 801b5fa:	757b      	strb	r3, [r7, #21]
 801b5fc:	e011      	b.n	801b622 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801b5fe:	7d7b      	ldrb	r3, [r7, #21]
 801b600:	2b00      	cmp	r3, #0
 801b602:	d109      	bne.n	801b618 <dir_read+0x106>
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	6a1b      	ldr	r3, [r3, #32]
 801b608:	4618      	mov	r0, r3
 801b60a:	f7ff ff61 	bl	801b4d0 <sum_sfn>
 801b60e:	4603      	mov	r3, r0
 801b610:	461a      	mov	r2, r3
 801b612:	7d3b      	ldrb	r3, [r7, #20]
 801b614:	4293      	cmp	r3, r2
 801b616:	d015      	beq.n	801b644 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	f04f 32ff 	mov.w	r2, #4294967295
 801b61e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 801b620:	e010      	b.n	801b644 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801b622:	2100      	movs	r1, #0
 801b624:	6878      	ldr	r0, [r7, #4]
 801b626:	f7ff fc2a 	bl	801ae7e <dir_next>
 801b62a:	4603      	mov	r3, r0
 801b62c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b62e:	7dfb      	ldrb	r3, [r7, #23]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d109      	bne.n	801b648 <dir_read+0x136>
	while (dp->sect) {
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	69db      	ldr	r3, [r3, #28]
 801b638:	2b00      	cmp	r3, #0
 801b63a:	f47f af79 	bne.w	801b530 <dir_read+0x1e>
 801b63e:	e004      	b.n	801b64a <dir_read+0x138>
		if (res != FR_OK) break;
 801b640:	bf00      	nop
 801b642:	e002      	b.n	801b64a <dir_read+0x138>
					break;
 801b644:	bf00      	nop
 801b646:	e000      	b.n	801b64a <dir_read+0x138>
		if (res != FR_OK) break;
 801b648:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801b64a:	7dfb      	ldrb	r3, [r7, #23]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d002      	beq.n	801b656 <dir_read+0x144>
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	2200      	movs	r2, #0
 801b654:	61da      	str	r2, [r3, #28]
	return res;
 801b656:	7dfb      	ldrb	r3, [r7, #23]
}
 801b658:	4618      	mov	r0, r3
 801b65a:	3718      	adds	r7, #24
 801b65c:	46bd      	mov	sp, r7
 801b65e:	bd80      	pop	{r7, pc}

0801b660 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801b660:	b580      	push	{r7, lr}
 801b662:	b086      	sub	sp, #24
 801b664:	af00      	add	r7, sp, #0
 801b666:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801b66e:	2100      	movs	r1, #0
 801b670:	6878      	ldr	r0, [r7, #4]
 801b672:	f7ff fb7b 	bl	801ad6c <dir_sdi>
 801b676:	4603      	mov	r3, r0
 801b678:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801b67a:	7dfb      	ldrb	r3, [r7, #23]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d001      	beq.n	801b684 <dir_find+0x24>
 801b680:	7dfb      	ldrb	r3, [r7, #23]
 801b682:	e0a9      	b.n	801b7d8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801b684:	23ff      	movs	r3, #255	; 0xff
 801b686:	753b      	strb	r3, [r7, #20]
 801b688:	7d3b      	ldrb	r3, [r7, #20]
 801b68a:	757b      	strb	r3, [r7, #21]
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	f04f 32ff 	mov.w	r2, #4294967295
 801b692:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	69db      	ldr	r3, [r3, #28]
 801b698:	4619      	mov	r1, r3
 801b69a:	6938      	ldr	r0, [r7, #16]
 801b69c:	f7fe ff84 	bl	801a5a8 <move_window>
 801b6a0:	4603      	mov	r3, r0
 801b6a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b6a4:	7dfb      	ldrb	r3, [r7, #23]
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	f040 8090 	bne.w	801b7cc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	6a1b      	ldr	r3, [r3, #32]
 801b6b0:	781b      	ldrb	r3, [r3, #0]
 801b6b2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801b6b4:	7dbb      	ldrb	r3, [r7, #22]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d102      	bne.n	801b6c0 <dir_find+0x60>
 801b6ba:	2304      	movs	r3, #4
 801b6bc:	75fb      	strb	r3, [r7, #23]
 801b6be:	e08a      	b.n	801b7d6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	6a1b      	ldr	r3, [r3, #32]
 801b6c4:	330b      	adds	r3, #11
 801b6c6:	781b      	ldrb	r3, [r3, #0]
 801b6c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b6cc:	73fb      	strb	r3, [r7, #15]
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	7bfa      	ldrb	r2, [r7, #15]
 801b6d2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801b6d4:	7dbb      	ldrb	r3, [r7, #22]
 801b6d6:	2be5      	cmp	r3, #229	; 0xe5
 801b6d8:	d007      	beq.n	801b6ea <dir_find+0x8a>
 801b6da:	7bfb      	ldrb	r3, [r7, #15]
 801b6dc:	f003 0308 	and.w	r3, r3, #8
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d009      	beq.n	801b6f8 <dir_find+0x98>
 801b6e4:	7bfb      	ldrb	r3, [r7, #15]
 801b6e6:	2b0f      	cmp	r3, #15
 801b6e8:	d006      	beq.n	801b6f8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801b6ea:	23ff      	movs	r3, #255	; 0xff
 801b6ec:	757b      	strb	r3, [r7, #21]
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	f04f 32ff 	mov.w	r2, #4294967295
 801b6f4:	631a      	str	r2, [r3, #48]	; 0x30
 801b6f6:	e05e      	b.n	801b7b6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801b6f8:	7bfb      	ldrb	r3, [r7, #15]
 801b6fa:	2b0f      	cmp	r3, #15
 801b6fc:	d136      	bne.n	801b76c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d154      	bne.n	801b7b6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801b70c:	7dbb      	ldrb	r3, [r7, #22]
 801b70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b712:	2b00      	cmp	r3, #0
 801b714:	d00d      	beq.n	801b732 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	6a1b      	ldr	r3, [r3, #32]
 801b71a:	7b5b      	ldrb	r3, [r3, #13]
 801b71c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801b71e:	7dbb      	ldrb	r3, [r7, #22]
 801b720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b724:	75bb      	strb	r3, [r7, #22]
 801b726:	7dbb      	ldrb	r3, [r7, #22]
 801b728:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	695a      	ldr	r2, [r3, #20]
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801b732:	7dba      	ldrb	r2, [r7, #22]
 801b734:	7d7b      	ldrb	r3, [r7, #21]
 801b736:	429a      	cmp	r2, r3
 801b738:	d115      	bne.n	801b766 <dir_find+0x106>
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	6a1b      	ldr	r3, [r3, #32]
 801b73e:	330d      	adds	r3, #13
 801b740:	781b      	ldrb	r3, [r3, #0]
 801b742:	7d3a      	ldrb	r2, [r7, #20]
 801b744:	429a      	cmp	r2, r3
 801b746:	d10e      	bne.n	801b766 <dir_find+0x106>
 801b748:	693b      	ldr	r3, [r7, #16]
 801b74a:	691a      	ldr	r2, [r3, #16]
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	6a1b      	ldr	r3, [r3, #32]
 801b750:	4619      	mov	r1, r3
 801b752:	4610      	mov	r0, r2
 801b754:	f7ff fcf0 	bl	801b138 <cmp_lfn>
 801b758:	4603      	mov	r3, r0
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d003      	beq.n	801b766 <dir_find+0x106>
 801b75e:	7d7b      	ldrb	r3, [r7, #21]
 801b760:	3b01      	subs	r3, #1
 801b762:	b2db      	uxtb	r3, r3
 801b764:	e000      	b.n	801b768 <dir_find+0x108>
 801b766:	23ff      	movs	r3, #255	; 0xff
 801b768:	757b      	strb	r3, [r7, #21]
 801b76a:	e024      	b.n	801b7b6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801b76c:	7d7b      	ldrb	r3, [r7, #21]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d109      	bne.n	801b786 <dir_find+0x126>
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	6a1b      	ldr	r3, [r3, #32]
 801b776:	4618      	mov	r0, r3
 801b778:	f7ff feaa 	bl	801b4d0 <sum_sfn>
 801b77c:	4603      	mov	r3, r0
 801b77e:	461a      	mov	r2, r3
 801b780:	7d3b      	ldrb	r3, [r7, #20]
 801b782:	4293      	cmp	r3, r2
 801b784:	d024      	beq.n	801b7d0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b78c:	f003 0301 	and.w	r3, r3, #1
 801b790:	2b00      	cmp	r3, #0
 801b792:	d10a      	bne.n	801b7aa <dir_find+0x14a>
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	6a18      	ldr	r0, [r3, #32]
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	3324      	adds	r3, #36	; 0x24
 801b79c:	220b      	movs	r2, #11
 801b79e:	4619      	mov	r1, r3
 801b7a0:	f7fe fd10 	bl	801a1c4 <mem_cmp>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d014      	beq.n	801b7d4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801b7aa:	23ff      	movs	r3, #255	; 0xff
 801b7ac:	757b      	strb	r3, [r7, #21]
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	f04f 32ff 	mov.w	r2, #4294967295
 801b7b4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801b7b6:	2100      	movs	r1, #0
 801b7b8:	6878      	ldr	r0, [r7, #4]
 801b7ba:	f7ff fb60 	bl	801ae7e <dir_next>
 801b7be:	4603      	mov	r3, r0
 801b7c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801b7c2:	7dfb      	ldrb	r3, [r7, #23]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	f43f af65 	beq.w	801b694 <dir_find+0x34>
 801b7ca:	e004      	b.n	801b7d6 <dir_find+0x176>
		if (res != FR_OK) break;
 801b7cc:	bf00      	nop
 801b7ce:	e002      	b.n	801b7d6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801b7d0:	bf00      	nop
 801b7d2:	e000      	b.n	801b7d6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801b7d4:	bf00      	nop

	return res;
 801b7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 801b7d8:	4618      	mov	r0, r3
 801b7da:	3718      	adds	r7, #24
 801b7dc:	46bd      	mov	sp, r7
 801b7de:	bd80      	pop	{r7, pc}

0801b7e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801b7e0:	b580      	push	{r7, lr}
 801b7e2:	b08c      	sub	sp, #48	; 0x30
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	681b      	ldr	r3, [r3, #0]
 801b7ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b7f4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d001      	beq.n	801b800 <dir_register+0x20>
 801b7fc:	2306      	movs	r3, #6
 801b7fe:	e0e0      	b.n	801b9c2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801b800:	2300      	movs	r3, #0
 801b802:	627b      	str	r3, [r7, #36]	; 0x24
 801b804:	e002      	b.n	801b80c <dir_register+0x2c>
 801b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b808:	3301      	adds	r3, #1
 801b80a:	627b      	str	r3, [r7, #36]	; 0x24
 801b80c:	69fb      	ldr	r3, [r7, #28]
 801b80e:	691a      	ldr	r2, [r3, #16]
 801b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b812:	005b      	lsls	r3, r3, #1
 801b814:	4413      	add	r3, r2
 801b816:	881b      	ldrh	r3, [r3, #0]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d1f4      	bne.n	801b806 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801b822:	f107 030c 	add.w	r3, r7, #12
 801b826:	220c      	movs	r2, #12
 801b828:	4618      	mov	r0, r3
 801b82a:	f7fe fc8f 	bl	801a14c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801b82e:	7dfb      	ldrb	r3, [r7, #23]
 801b830:	f003 0301 	and.w	r3, r3, #1
 801b834:	2b00      	cmp	r3, #0
 801b836:	d032      	beq.n	801b89e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	2240      	movs	r2, #64	; 0x40
 801b83c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801b840:	2301      	movs	r3, #1
 801b842:	62bb      	str	r3, [r7, #40]	; 0x28
 801b844:	e016      	b.n	801b874 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801b84c:	69fb      	ldr	r3, [r7, #28]
 801b84e:	691a      	ldr	r2, [r3, #16]
 801b850:	f107 010c 	add.w	r1, r7, #12
 801b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b856:	f7ff fdab 	bl	801b3b0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801b85a:	6878      	ldr	r0, [r7, #4]
 801b85c:	f7ff ff00 	bl	801b660 <dir_find>
 801b860:	4603      	mov	r3, r0
 801b862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801b866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d106      	bne.n	801b87c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b870:	3301      	adds	r3, #1
 801b872:	62bb      	str	r3, [r7, #40]	; 0x28
 801b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b876:	2b63      	cmp	r3, #99	; 0x63
 801b878:	d9e5      	bls.n	801b846 <dir_register+0x66>
 801b87a:	e000      	b.n	801b87e <dir_register+0x9e>
			if (res != FR_OK) break;
 801b87c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b880:	2b64      	cmp	r3, #100	; 0x64
 801b882:	d101      	bne.n	801b888 <dir_register+0xa8>
 801b884:	2307      	movs	r3, #7
 801b886:	e09c      	b.n	801b9c2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801b888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b88c:	2b04      	cmp	r3, #4
 801b88e:	d002      	beq.n	801b896 <dir_register+0xb6>
 801b890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b894:	e095      	b.n	801b9c2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801b896:	7dfa      	ldrb	r2, [r7, #23]
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801b89e:	7dfb      	ldrb	r3, [r7, #23]
 801b8a0:	f003 0302 	and.w	r3, r3, #2
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d007      	beq.n	801b8b8 <dir_register+0xd8>
 801b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8aa:	330c      	adds	r3, #12
 801b8ac:	4a47      	ldr	r2, [pc, #284]	; (801b9cc <dir_register+0x1ec>)
 801b8ae:	fba2 2303 	umull	r2, r3, r2, r3
 801b8b2:	089b      	lsrs	r3, r3, #2
 801b8b4:	3301      	adds	r3, #1
 801b8b6:	e000      	b.n	801b8ba <dir_register+0xda>
 801b8b8:	2301      	movs	r3, #1
 801b8ba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801b8bc:	6a39      	ldr	r1, [r7, #32]
 801b8be:	6878      	ldr	r0, [r7, #4]
 801b8c0:	f7ff fbb3 	bl	801b02a <dir_alloc>
 801b8c4:	4603      	mov	r3, r0
 801b8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801b8ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d148      	bne.n	801b964 <dir_register+0x184>
 801b8d2:	6a3b      	ldr	r3, [r7, #32]
 801b8d4:	3b01      	subs	r3, #1
 801b8d6:	623b      	str	r3, [r7, #32]
 801b8d8:	6a3b      	ldr	r3, [r7, #32]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d042      	beq.n	801b964 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	695a      	ldr	r2, [r3, #20]
 801b8e2:	6a3b      	ldr	r3, [r7, #32]
 801b8e4:	015b      	lsls	r3, r3, #5
 801b8e6:	1ad3      	subs	r3, r2, r3
 801b8e8:	4619      	mov	r1, r3
 801b8ea:	6878      	ldr	r0, [r7, #4]
 801b8ec:	f7ff fa3e 	bl	801ad6c <dir_sdi>
 801b8f0:	4603      	mov	r3, r0
 801b8f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801b8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d132      	bne.n	801b964 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	3324      	adds	r3, #36	; 0x24
 801b902:	4618      	mov	r0, r3
 801b904:	f7ff fde4 	bl	801b4d0 <sum_sfn>
 801b908:	4603      	mov	r3, r0
 801b90a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	69db      	ldr	r3, [r3, #28]
 801b910:	4619      	mov	r1, r3
 801b912:	69f8      	ldr	r0, [r7, #28]
 801b914:	f7fe fe48 	bl	801a5a8 <move_window>
 801b918:	4603      	mov	r3, r0
 801b91a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801b91e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b922:	2b00      	cmp	r3, #0
 801b924:	d11d      	bne.n	801b962 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801b926:	69fb      	ldr	r3, [r7, #28]
 801b928:	6918      	ldr	r0, [r3, #16]
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	6a19      	ldr	r1, [r3, #32]
 801b92e:	6a3b      	ldr	r3, [r7, #32]
 801b930:	b2da      	uxtb	r2, r3
 801b932:	7efb      	ldrb	r3, [r7, #27]
 801b934:	f7ff fcd4 	bl	801b2e0 <put_lfn>
				fs->wflag = 1;
 801b938:	69fb      	ldr	r3, [r7, #28]
 801b93a:	2201      	movs	r2, #1
 801b93c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801b93e:	2100      	movs	r1, #0
 801b940:	6878      	ldr	r0, [r7, #4]
 801b942:	f7ff fa9c 	bl	801ae7e <dir_next>
 801b946:	4603      	mov	r3, r0
 801b948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801b94c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b950:	2b00      	cmp	r3, #0
 801b952:	d107      	bne.n	801b964 <dir_register+0x184>
 801b954:	6a3b      	ldr	r3, [r7, #32]
 801b956:	3b01      	subs	r3, #1
 801b958:	623b      	str	r3, [r7, #32]
 801b95a:	6a3b      	ldr	r3, [r7, #32]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d1d5      	bne.n	801b90c <dir_register+0x12c>
 801b960:	e000      	b.n	801b964 <dir_register+0x184>
				if (res != FR_OK) break;
 801b962:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801b964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d128      	bne.n	801b9be <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	69db      	ldr	r3, [r3, #28]
 801b970:	4619      	mov	r1, r3
 801b972:	69f8      	ldr	r0, [r7, #28]
 801b974:	f7fe fe18 	bl	801a5a8 <move_window>
 801b978:	4603      	mov	r3, r0
 801b97a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801b97e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b982:	2b00      	cmp	r3, #0
 801b984:	d11b      	bne.n	801b9be <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	6a1b      	ldr	r3, [r3, #32]
 801b98a:	2220      	movs	r2, #32
 801b98c:	2100      	movs	r1, #0
 801b98e:	4618      	mov	r0, r3
 801b990:	f7fe fbfd 	bl	801a18e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	6a18      	ldr	r0, [r3, #32]
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	3324      	adds	r3, #36	; 0x24
 801b99c:	220b      	movs	r2, #11
 801b99e:	4619      	mov	r1, r3
 801b9a0:	f7fe fbd4 	bl	801a14c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	6a1b      	ldr	r3, [r3, #32]
 801b9ae:	330c      	adds	r3, #12
 801b9b0:	f002 0218 	and.w	r2, r2, #24
 801b9b4:	b2d2      	uxtb	r2, r2
 801b9b6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801b9b8:	69fb      	ldr	r3, [r7, #28]
 801b9ba:	2201      	movs	r2, #1
 801b9bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801b9be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801b9c2:	4618      	mov	r0, r3
 801b9c4:	3730      	adds	r7, #48	; 0x30
 801b9c6:	46bd      	mov	sp, r7
 801b9c8:	bd80      	pop	{r7, pc}
 801b9ca:	bf00      	nop
 801b9cc:	4ec4ec4f 	.word	0x4ec4ec4f

0801b9d0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b086      	sub	sp, #24
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	695b      	ldr	r3, [r3, #20]
 801b9e2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b9ec:	d007      	beq.n	801b9fe <dir_remove+0x2e>
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9f2:	4619      	mov	r1, r3
 801b9f4:	6878      	ldr	r0, [r7, #4]
 801b9f6:	f7ff f9b9 	bl	801ad6c <dir_sdi>
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	e000      	b.n	801ba00 <dir_remove+0x30>
 801b9fe:	2300      	movs	r3, #0
 801ba00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801ba02:	7dfb      	ldrb	r3, [r7, #23]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d128      	bne.n	801ba5a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	69db      	ldr	r3, [r3, #28]
 801ba0c:	4619      	mov	r1, r3
 801ba0e:	6938      	ldr	r0, [r7, #16]
 801ba10:	f7fe fdca 	bl	801a5a8 <move_window>
 801ba14:	4603      	mov	r3, r0
 801ba16:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ba18:	7dfb      	ldrb	r3, [r7, #23]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d115      	bne.n	801ba4a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	6a1b      	ldr	r3, [r3, #32]
 801ba22:	22e5      	movs	r2, #229	; 0xe5
 801ba24:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801ba26:	693b      	ldr	r3, [r7, #16]
 801ba28:	2201      	movs	r2, #1
 801ba2a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	695b      	ldr	r3, [r3, #20]
 801ba30:	68fa      	ldr	r2, [r7, #12]
 801ba32:	429a      	cmp	r2, r3
 801ba34:	d90b      	bls.n	801ba4e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801ba36:	2100      	movs	r1, #0
 801ba38:	6878      	ldr	r0, [r7, #4]
 801ba3a:	f7ff fa20 	bl	801ae7e <dir_next>
 801ba3e:	4603      	mov	r3, r0
 801ba40:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801ba42:	7dfb      	ldrb	r3, [r7, #23]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d0df      	beq.n	801ba08 <dir_remove+0x38>
 801ba48:	e002      	b.n	801ba50 <dir_remove+0x80>
			if (res != FR_OK) break;
 801ba4a:	bf00      	nop
 801ba4c:	e000      	b.n	801ba50 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801ba4e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801ba50:	7dfb      	ldrb	r3, [r7, #23]
 801ba52:	2b04      	cmp	r3, #4
 801ba54:	d101      	bne.n	801ba5a <dir_remove+0x8a>
 801ba56:	2302      	movs	r3, #2
 801ba58:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801ba5a:	7dfb      	ldrb	r3, [r7, #23]
}
 801ba5c:	4618      	mov	r0, r3
 801ba5e:	3718      	adds	r7, #24
 801ba60:	46bd      	mov	sp, r7
 801ba62:	bd80      	pop	{r7, pc}

0801ba64 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b088      	sub	sp, #32
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	6078      	str	r0, [r7, #4]
 801ba6c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801ba74:	683b      	ldr	r3, [r7, #0]
 801ba76:	2200      	movs	r2, #0
 801ba78:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	69db      	ldr	r3, [r3, #28]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	f000 80c9 	beq.w	801bc16 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba88:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba8c:	d032      	beq.n	801baf4 <get_fileinfo+0x90>
			i = j = 0;
 801ba8e:	2300      	movs	r3, #0
 801ba90:	61bb      	str	r3, [r7, #24]
 801ba92:	69bb      	ldr	r3, [r7, #24]
 801ba94:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801ba96:	e01b      	b.n	801bad0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801ba98:	89fb      	ldrh	r3, [r7, #14]
 801ba9a:	2100      	movs	r1, #0
 801ba9c:	4618      	mov	r0, r3
 801ba9e:	f002 f81d 	bl	801dadc <ff_convert>
 801baa2:	4603      	mov	r3, r0
 801baa4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801baa6:	89fb      	ldrh	r3, [r7, #14]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d102      	bne.n	801bab2 <get_fileinfo+0x4e>
 801baac:	2300      	movs	r3, #0
 801baae:	61fb      	str	r3, [r7, #28]
 801bab0:	e01a      	b.n	801bae8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801bab2:	69fb      	ldr	r3, [r7, #28]
 801bab4:	2bfe      	cmp	r3, #254	; 0xfe
 801bab6:	d902      	bls.n	801babe <get_fileinfo+0x5a>
 801bab8:	2300      	movs	r3, #0
 801baba:	61fb      	str	r3, [r7, #28]
 801babc:	e014      	b.n	801bae8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801babe:	69fb      	ldr	r3, [r7, #28]
 801bac0:	1c5a      	adds	r2, r3, #1
 801bac2:	61fa      	str	r2, [r7, #28]
 801bac4:	89fa      	ldrh	r2, [r7, #14]
 801bac6:	b2d1      	uxtb	r1, r2
 801bac8:	683a      	ldr	r2, [r7, #0]
 801baca:	4413      	add	r3, r2
 801bacc:	460a      	mov	r2, r1
 801bace:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801bad0:	693b      	ldr	r3, [r7, #16]
 801bad2:	691a      	ldr	r2, [r3, #16]
 801bad4:	69bb      	ldr	r3, [r7, #24]
 801bad6:	1c59      	adds	r1, r3, #1
 801bad8:	61b9      	str	r1, [r7, #24]
 801bada:	005b      	lsls	r3, r3, #1
 801badc:	4413      	add	r3, r2
 801bade:	881b      	ldrh	r3, [r3, #0]
 801bae0:	81fb      	strh	r3, [r7, #14]
 801bae2:	89fb      	ldrh	r3, [r7, #14]
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d1d7      	bne.n	801ba98 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801bae8:	683a      	ldr	r2, [r7, #0]
 801baea:	69fb      	ldr	r3, [r7, #28]
 801baec:	4413      	add	r3, r2
 801baee:	3316      	adds	r3, #22
 801baf0:	2200      	movs	r2, #0
 801baf2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801baf4:	2300      	movs	r3, #0
 801baf6:	61bb      	str	r3, [r7, #24]
 801baf8:	69bb      	ldr	r3, [r7, #24]
 801bafa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801bafc:	683a      	ldr	r2, [r7, #0]
 801bafe:	69fb      	ldr	r3, [r7, #28]
 801bb00:	4413      	add	r3, r2
 801bb02:	3316      	adds	r3, #22
 801bb04:	781b      	ldrb	r3, [r3, #0]
 801bb06:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801bb08:	e04c      	b.n	801bba4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	6a1a      	ldr	r2, [r3, #32]
 801bb0e:	69fb      	ldr	r3, [r7, #28]
 801bb10:	1c59      	adds	r1, r3, #1
 801bb12:	61f9      	str	r1, [r7, #28]
 801bb14:	4413      	add	r3, r2
 801bb16:	781b      	ldrb	r3, [r3, #0]
 801bb18:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801bb1a:	7dfb      	ldrb	r3, [r7, #23]
 801bb1c:	2b20      	cmp	r3, #32
 801bb1e:	d100      	bne.n	801bb22 <get_fileinfo+0xbe>
 801bb20:	e040      	b.n	801bba4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801bb22:	7dfb      	ldrb	r3, [r7, #23]
 801bb24:	2b05      	cmp	r3, #5
 801bb26:	d101      	bne.n	801bb2c <get_fileinfo+0xc8>
 801bb28:	23e5      	movs	r3, #229	; 0xe5
 801bb2a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801bb2c:	69fb      	ldr	r3, [r7, #28]
 801bb2e:	2b09      	cmp	r3, #9
 801bb30:	d10f      	bne.n	801bb52 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801bb32:	89bb      	ldrh	r3, [r7, #12]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d105      	bne.n	801bb44 <get_fileinfo+0xe0>
 801bb38:	683a      	ldr	r2, [r7, #0]
 801bb3a:	69bb      	ldr	r3, [r7, #24]
 801bb3c:	4413      	add	r3, r2
 801bb3e:	3316      	adds	r3, #22
 801bb40:	222e      	movs	r2, #46	; 0x2e
 801bb42:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801bb44:	69bb      	ldr	r3, [r7, #24]
 801bb46:	1c5a      	adds	r2, r3, #1
 801bb48:	61ba      	str	r2, [r7, #24]
 801bb4a:	683a      	ldr	r2, [r7, #0]
 801bb4c:	4413      	add	r3, r2
 801bb4e:	222e      	movs	r2, #46	; 0x2e
 801bb50:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801bb52:	683a      	ldr	r2, [r7, #0]
 801bb54:	69bb      	ldr	r3, [r7, #24]
 801bb56:	4413      	add	r3, r2
 801bb58:	3309      	adds	r3, #9
 801bb5a:	7dfa      	ldrb	r2, [r7, #23]
 801bb5c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801bb5e:	89bb      	ldrh	r3, [r7, #12]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d11c      	bne.n	801bb9e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801bb64:	7dfb      	ldrb	r3, [r7, #23]
 801bb66:	2b40      	cmp	r3, #64	; 0x40
 801bb68:	d913      	bls.n	801bb92 <get_fileinfo+0x12e>
 801bb6a:	7dfb      	ldrb	r3, [r7, #23]
 801bb6c:	2b5a      	cmp	r3, #90	; 0x5a
 801bb6e:	d810      	bhi.n	801bb92 <get_fileinfo+0x12e>
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	6a1b      	ldr	r3, [r3, #32]
 801bb74:	330c      	adds	r3, #12
 801bb76:	781b      	ldrb	r3, [r3, #0]
 801bb78:	461a      	mov	r2, r3
 801bb7a:	69fb      	ldr	r3, [r7, #28]
 801bb7c:	2b08      	cmp	r3, #8
 801bb7e:	d901      	bls.n	801bb84 <get_fileinfo+0x120>
 801bb80:	2310      	movs	r3, #16
 801bb82:	e000      	b.n	801bb86 <get_fileinfo+0x122>
 801bb84:	2308      	movs	r3, #8
 801bb86:	4013      	ands	r3, r2
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d002      	beq.n	801bb92 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 801bb8c:	7dfb      	ldrb	r3, [r7, #23]
 801bb8e:	3320      	adds	r3, #32
 801bb90:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801bb92:	683a      	ldr	r2, [r7, #0]
 801bb94:	69bb      	ldr	r3, [r7, #24]
 801bb96:	4413      	add	r3, r2
 801bb98:	3316      	adds	r3, #22
 801bb9a:	7dfa      	ldrb	r2, [r7, #23]
 801bb9c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801bb9e:	69bb      	ldr	r3, [r7, #24]
 801bba0:	3301      	adds	r3, #1
 801bba2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 801bba4:	69fb      	ldr	r3, [r7, #28]
 801bba6:	2b0a      	cmp	r3, #10
 801bba8:	d9af      	bls.n	801bb0a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801bbaa:	89bb      	ldrh	r3, [r7, #12]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d10d      	bne.n	801bbcc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801bbb0:	683a      	ldr	r2, [r7, #0]
 801bbb2:	69bb      	ldr	r3, [r7, #24]
 801bbb4:	4413      	add	r3, r2
 801bbb6:	3316      	adds	r3, #22
 801bbb8:	2200      	movs	r2, #0
 801bbba:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	6a1b      	ldr	r3, [r3, #32]
 801bbc0:	330c      	adds	r3, #12
 801bbc2:	781b      	ldrb	r3, [r3, #0]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d101      	bne.n	801bbcc <get_fileinfo+0x168>
 801bbc8:	2300      	movs	r3, #0
 801bbca:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801bbcc:	683a      	ldr	r2, [r7, #0]
 801bbce:	69bb      	ldr	r3, [r7, #24]
 801bbd0:	4413      	add	r3, r2
 801bbd2:	3309      	adds	r3, #9
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	6a1b      	ldr	r3, [r3, #32]
 801bbdc:	7ada      	ldrb	r2, [r3, #11]
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	6a1b      	ldr	r3, [r3, #32]
 801bbe6:	331c      	adds	r3, #28
 801bbe8:	4618      	mov	r0, r3
 801bbea:	f7fe fa45 	bl	801a078 <ld_dword>
 801bbee:	4602      	mov	r2, r0
 801bbf0:	683b      	ldr	r3, [r7, #0]
 801bbf2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	6a1b      	ldr	r3, [r3, #32]
 801bbf8:	3316      	adds	r3, #22
 801bbfa:	4618      	mov	r0, r3
 801bbfc:	f7fe fa3c 	bl	801a078 <ld_dword>
 801bc00:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801bc02:	68bb      	ldr	r3, [r7, #8]
 801bc04:	b29a      	uxth	r2, r3
 801bc06:	683b      	ldr	r3, [r7, #0]
 801bc08:	80da      	strh	r2, [r3, #6]
 801bc0a:	68bb      	ldr	r3, [r7, #8]
 801bc0c:	0c1b      	lsrs	r3, r3, #16
 801bc0e:	b29a      	uxth	r2, r3
 801bc10:	683b      	ldr	r3, [r7, #0]
 801bc12:	809a      	strh	r2, [r3, #4]
 801bc14:	e000      	b.n	801bc18 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801bc16:	bf00      	nop
}
 801bc18:	3720      	adds	r7, #32
 801bc1a:	46bd      	mov	sp, r7
 801bc1c:	bd80      	pop	{r7, pc}
	...

0801bc20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b08a      	sub	sp, #40	; 0x28
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	6078      	str	r0, [r7, #4]
 801bc28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801bc2a:	683b      	ldr	r3, [r7, #0]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	613b      	str	r3, [r7, #16]
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	691b      	ldr	r3, [r3, #16]
 801bc36:	60fb      	str	r3, [r7, #12]
 801bc38:	2300      	movs	r3, #0
 801bc3a:	617b      	str	r3, [r7, #20]
 801bc3c:	697b      	ldr	r3, [r7, #20]
 801bc3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801bc40:	69bb      	ldr	r3, [r7, #24]
 801bc42:	1c5a      	adds	r2, r3, #1
 801bc44:	61ba      	str	r2, [r7, #24]
 801bc46:	693a      	ldr	r2, [r7, #16]
 801bc48:	4413      	add	r3, r2
 801bc4a:	781b      	ldrb	r3, [r3, #0]
 801bc4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801bc4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc50:	2b1f      	cmp	r3, #31
 801bc52:	d940      	bls.n	801bcd6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801bc54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc56:	2b2f      	cmp	r3, #47	; 0x2f
 801bc58:	d006      	beq.n	801bc68 <create_name+0x48>
 801bc5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc5c:	2b5c      	cmp	r3, #92	; 0x5c
 801bc5e:	d110      	bne.n	801bc82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801bc60:	e002      	b.n	801bc68 <create_name+0x48>
 801bc62:	69bb      	ldr	r3, [r7, #24]
 801bc64:	3301      	adds	r3, #1
 801bc66:	61bb      	str	r3, [r7, #24]
 801bc68:	693a      	ldr	r2, [r7, #16]
 801bc6a:	69bb      	ldr	r3, [r7, #24]
 801bc6c:	4413      	add	r3, r2
 801bc6e:	781b      	ldrb	r3, [r3, #0]
 801bc70:	2b2f      	cmp	r3, #47	; 0x2f
 801bc72:	d0f6      	beq.n	801bc62 <create_name+0x42>
 801bc74:	693a      	ldr	r2, [r7, #16]
 801bc76:	69bb      	ldr	r3, [r7, #24]
 801bc78:	4413      	add	r3, r2
 801bc7a:	781b      	ldrb	r3, [r3, #0]
 801bc7c:	2b5c      	cmp	r3, #92	; 0x5c
 801bc7e:	d0f0      	beq.n	801bc62 <create_name+0x42>
			break;
 801bc80:	e02a      	b.n	801bcd8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801bc82:	697b      	ldr	r3, [r7, #20]
 801bc84:	2bfe      	cmp	r3, #254	; 0xfe
 801bc86:	d901      	bls.n	801bc8c <create_name+0x6c>
 801bc88:	2306      	movs	r3, #6
 801bc8a:	e177      	b.n	801bf7c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801bc8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc8e:	b2db      	uxtb	r3, r3
 801bc90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801bc92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc94:	2101      	movs	r1, #1
 801bc96:	4618      	mov	r0, r3
 801bc98:	f001 ff20 	bl	801dadc <ff_convert>
 801bc9c:	4603      	mov	r3, r0
 801bc9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801bca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d101      	bne.n	801bcaa <create_name+0x8a>
 801bca6:	2306      	movs	r3, #6
 801bca8:	e168      	b.n	801bf7c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801bcaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bcac:	2b7f      	cmp	r3, #127	; 0x7f
 801bcae:	d809      	bhi.n	801bcc4 <create_name+0xa4>
 801bcb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bcb2:	4619      	mov	r1, r3
 801bcb4:	48b3      	ldr	r0, [pc, #716]	; (801bf84 <create_name+0x364>)
 801bcb6:	f7fe faac 	bl	801a212 <chk_chr>
 801bcba:	4603      	mov	r3, r0
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d001      	beq.n	801bcc4 <create_name+0xa4>
 801bcc0:	2306      	movs	r3, #6
 801bcc2:	e15b      	b.n	801bf7c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801bcc4:	697b      	ldr	r3, [r7, #20]
 801bcc6:	1c5a      	adds	r2, r3, #1
 801bcc8:	617a      	str	r2, [r7, #20]
 801bcca:	005b      	lsls	r3, r3, #1
 801bccc:	68fa      	ldr	r2, [r7, #12]
 801bcce:	4413      	add	r3, r2
 801bcd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bcd2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801bcd4:	e7b4      	b.n	801bc40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801bcd6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801bcd8:	693a      	ldr	r2, [r7, #16]
 801bcda:	69bb      	ldr	r3, [r7, #24]
 801bcdc:	441a      	add	r2, r3
 801bcde:	683b      	ldr	r3, [r7, #0]
 801bce0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801bce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bce4:	2b1f      	cmp	r3, #31
 801bce6:	d801      	bhi.n	801bcec <create_name+0xcc>
 801bce8:	2304      	movs	r3, #4
 801bcea:	e000      	b.n	801bcee <create_name+0xce>
 801bcec:	2300      	movs	r3, #0
 801bcee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801bcf2:	e011      	b.n	801bd18 <create_name+0xf8>
		w = lfn[di - 1];
 801bcf4:	697a      	ldr	r2, [r7, #20]
 801bcf6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bcfa:	4413      	add	r3, r2
 801bcfc:	005b      	lsls	r3, r3, #1
 801bcfe:	68fa      	ldr	r2, [r7, #12]
 801bd00:	4413      	add	r3, r2
 801bd02:	881b      	ldrh	r3, [r3, #0]
 801bd04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801bd06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bd08:	2b20      	cmp	r3, #32
 801bd0a:	d002      	beq.n	801bd12 <create_name+0xf2>
 801bd0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bd0e:	2b2e      	cmp	r3, #46	; 0x2e
 801bd10:	d106      	bne.n	801bd20 <create_name+0x100>
		di--;
 801bd12:	697b      	ldr	r3, [r7, #20]
 801bd14:	3b01      	subs	r3, #1
 801bd16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801bd18:	697b      	ldr	r3, [r7, #20]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d1ea      	bne.n	801bcf4 <create_name+0xd4>
 801bd1e:	e000      	b.n	801bd22 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801bd20:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801bd22:	697b      	ldr	r3, [r7, #20]
 801bd24:	005b      	lsls	r3, r3, #1
 801bd26:	68fa      	ldr	r2, [r7, #12]
 801bd28:	4413      	add	r3, r2
 801bd2a:	2200      	movs	r2, #0
 801bd2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801bd2e:	697b      	ldr	r3, [r7, #20]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d101      	bne.n	801bd38 <create_name+0x118>
 801bd34:	2306      	movs	r3, #6
 801bd36:	e121      	b.n	801bf7c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	3324      	adds	r3, #36	; 0x24
 801bd3c:	220b      	movs	r2, #11
 801bd3e:	2120      	movs	r1, #32
 801bd40:	4618      	mov	r0, r3
 801bd42:	f7fe fa24 	bl	801a18e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801bd46:	2300      	movs	r3, #0
 801bd48:	61bb      	str	r3, [r7, #24]
 801bd4a:	e002      	b.n	801bd52 <create_name+0x132>
 801bd4c:	69bb      	ldr	r3, [r7, #24]
 801bd4e:	3301      	adds	r3, #1
 801bd50:	61bb      	str	r3, [r7, #24]
 801bd52:	69bb      	ldr	r3, [r7, #24]
 801bd54:	005b      	lsls	r3, r3, #1
 801bd56:	68fa      	ldr	r2, [r7, #12]
 801bd58:	4413      	add	r3, r2
 801bd5a:	881b      	ldrh	r3, [r3, #0]
 801bd5c:	2b20      	cmp	r3, #32
 801bd5e:	d0f5      	beq.n	801bd4c <create_name+0x12c>
 801bd60:	69bb      	ldr	r3, [r7, #24]
 801bd62:	005b      	lsls	r3, r3, #1
 801bd64:	68fa      	ldr	r2, [r7, #12]
 801bd66:	4413      	add	r3, r2
 801bd68:	881b      	ldrh	r3, [r3, #0]
 801bd6a:	2b2e      	cmp	r3, #46	; 0x2e
 801bd6c:	d0ee      	beq.n	801bd4c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801bd6e:	69bb      	ldr	r3, [r7, #24]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d009      	beq.n	801bd88 <create_name+0x168>
 801bd74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd78:	f043 0303 	orr.w	r3, r3, #3
 801bd7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801bd80:	e002      	b.n	801bd88 <create_name+0x168>
 801bd82:	697b      	ldr	r3, [r7, #20]
 801bd84:	3b01      	subs	r3, #1
 801bd86:	617b      	str	r3, [r7, #20]
 801bd88:	697b      	ldr	r3, [r7, #20]
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d009      	beq.n	801bda2 <create_name+0x182>
 801bd8e:	697a      	ldr	r2, [r7, #20]
 801bd90:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bd94:	4413      	add	r3, r2
 801bd96:	005b      	lsls	r3, r3, #1
 801bd98:	68fa      	ldr	r2, [r7, #12]
 801bd9a:	4413      	add	r3, r2
 801bd9c:	881b      	ldrh	r3, [r3, #0]
 801bd9e:	2b2e      	cmp	r3, #46	; 0x2e
 801bda0:	d1ef      	bne.n	801bd82 <create_name+0x162>

	i = b = 0; ni = 8;
 801bda2:	2300      	movs	r3, #0
 801bda4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801bda8:	2300      	movs	r3, #0
 801bdaa:	623b      	str	r3, [r7, #32]
 801bdac:	2308      	movs	r3, #8
 801bdae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801bdb0:	69bb      	ldr	r3, [r7, #24]
 801bdb2:	1c5a      	adds	r2, r3, #1
 801bdb4:	61ba      	str	r2, [r7, #24]
 801bdb6:	005b      	lsls	r3, r3, #1
 801bdb8:	68fa      	ldr	r2, [r7, #12]
 801bdba:	4413      	add	r3, r2
 801bdbc:	881b      	ldrh	r3, [r3, #0]
 801bdbe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801bdc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	f000 8090 	beq.w	801bee8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801bdc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bdca:	2b20      	cmp	r3, #32
 801bdcc:	d006      	beq.n	801bddc <create_name+0x1bc>
 801bdce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bdd0:	2b2e      	cmp	r3, #46	; 0x2e
 801bdd2:	d10a      	bne.n	801bdea <create_name+0x1ca>
 801bdd4:	69ba      	ldr	r2, [r7, #24]
 801bdd6:	697b      	ldr	r3, [r7, #20]
 801bdd8:	429a      	cmp	r2, r3
 801bdda:	d006      	beq.n	801bdea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801bddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bde0:	f043 0303 	orr.w	r3, r3, #3
 801bde4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bde8:	e07d      	b.n	801bee6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801bdea:	6a3a      	ldr	r2, [r7, #32]
 801bdec:	69fb      	ldr	r3, [r7, #28]
 801bdee:	429a      	cmp	r2, r3
 801bdf0:	d203      	bcs.n	801bdfa <create_name+0x1da>
 801bdf2:	69ba      	ldr	r2, [r7, #24]
 801bdf4:	697b      	ldr	r3, [r7, #20]
 801bdf6:	429a      	cmp	r2, r3
 801bdf8:	d123      	bne.n	801be42 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801bdfa:	69fb      	ldr	r3, [r7, #28]
 801bdfc:	2b0b      	cmp	r3, #11
 801bdfe:	d106      	bne.n	801be0e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801be00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be04:	f043 0303 	orr.w	r3, r3, #3
 801be08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801be0c:	e06f      	b.n	801beee <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801be0e:	69ba      	ldr	r2, [r7, #24]
 801be10:	697b      	ldr	r3, [r7, #20]
 801be12:	429a      	cmp	r2, r3
 801be14:	d005      	beq.n	801be22 <create_name+0x202>
 801be16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be1a:	f043 0303 	orr.w	r3, r3, #3
 801be1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801be22:	69ba      	ldr	r2, [r7, #24]
 801be24:	697b      	ldr	r3, [r7, #20]
 801be26:	429a      	cmp	r2, r3
 801be28:	d860      	bhi.n	801beec <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801be2a:	697b      	ldr	r3, [r7, #20]
 801be2c:	61bb      	str	r3, [r7, #24]
 801be2e:	2308      	movs	r3, #8
 801be30:	623b      	str	r3, [r7, #32]
 801be32:	230b      	movs	r3, #11
 801be34:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801be36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801be3a:	009b      	lsls	r3, r3, #2
 801be3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801be40:	e051      	b.n	801bee6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801be42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801be44:	2b7f      	cmp	r3, #127	; 0x7f
 801be46:	d914      	bls.n	801be72 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801be48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801be4a:	2100      	movs	r1, #0
 801be4c:	4618      	mov	r0, r3
 801be4e:	f001 fe45 	bl	801dadc <ff_convert>
 801be52:	4603      	mov	r3, r0
 801be54:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801be56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d004      	beq.n	801be66 <create_name+0x246>
 801be5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801be5e:	3b80      	subs	r3, #128	; 0x80
 801be60:	4a49      	ldr	r2, [pc, #292]	; (801bf88 <create_name+0x368>)
 801be62:	5cd3      	ldrb	r3, [r2, r3]
 801be64:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801be66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be6a:	f043 0302 	orr.w	r3, r3, #2
 801be6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801be72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801be74:	2b00      	cmp	r3, #0
 801be76:	d007      	beq.n	801be88 <create_name+0x268>
 801be78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801be7a:	4619      	mov	r1, r3
 801be7c:	4843      	ldr	r0, [pc, #268]	; (801bf8c <create_name+0x36c>)
 801be7e:	f7fe f9c8 	bl	801a212 <chk_chr>
 801be82:	4603      	mov	r3, r0
 801be84:	2b00      	cmp	r3, #0
 801be86:	d008      	beq.n	801be9a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801be88:	235f      	movs	r3, #95	; 0x5f
 801be8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801be8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be90:	f043 0303 	orr.w	r3, r3, #3
 801be94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801be98:	e01b      	b.n	801bed2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801be9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801be9c:	2b40      	cmp	r3, #64	; 0x40
 801be9e:	d909      	bls.n	801beb4 <create_name+0x294>
 801bea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bea2:	2b5a      	cmp	r3, #90	; 0x5a
 801bea4:	d806      	bhi.n	801beb4 <create_name+0x294>
					b |= 2;
 801bea6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801beaa:	f043 0302 	orr.w	r3, r3, #2
 801beae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801beb2:	e00e      	b.n	801bed2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801beb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801beb6:	2b60      	cmp	r3, #96	; 0x60
 801beb8:	d90b      	bls.n	801bed2 <create_name+0x2b2>
 801beba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bebc:	2b7a      	cmp	r3, #122	; 0x7a
 801bebe:	d808      	bhi.n	801bed2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801bec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bec4:	f043 0301 	orr.w	r3, r3, #1
 801bec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801becc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bece:	3b20      	subs	r3, #32
 801bed0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801bed2:	6a3b      	ldr	r3, [r7, #32]
 801bed4:	1c5a      	adds	r2, r3, #1
 801bed6:	623a      	str	r2, [r7, #32]
 801bed8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801beda:	b2d1      	uxtb	r1, r2
 801bedc:	687a      	ldr	r2, [r7, #4]
 801bede:	4413      	add	r3, r2
 801bee0:	460a      	mov	r2, r1
 801bee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801bee6:	e763      	b.n	801bdb0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801bee8:	bf00      	nop
 801beea:	e000      	b.n	801beee <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801beec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bef4:	2be5      	cmp	r3, #229	; 0xe5
 801bef6:	d103      	bne.n	801bf00 <create_name+0x2e0>
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	2205      	movs	r2, #5
 801befc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801bf00:	69fb      	ldr	r3, [r7, #28]
 801bf02:	2b08      	cmp	r3, #8
 801bf04:	d104      	bne.n	801bf10 <create_name+0x2f0>
 801bf06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bf0a:	009b      	lsls	r3, r3, #2
 801bf0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801bf10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bf14:	f003 030c 	and.w	r3, r3, #12
 801bf18:	2b0c      	cmp	r3, #12
 801bf1a:	d005      	beq.n	801bf28 <create_name+0x308>
 801bf1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bf20:	f003 0303 	and.w	r3, r3, #3
 801bf24:	2b03      	cmp	r3, #3
 801bf26:	d105      	bne.n	801bf34 <create_name+0x314>
 801bf28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bf2c:	f043 0302 	orr.w	r3, r3, #2
 801bf30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801bf34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bf38:	f003 0302 	and.w	r3, r3, #2
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d117      	bne.n	801bf70 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801bf40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bf44:	f003 0303 	and.w	r3, r3, #3
 801bf48:	2b01      	cmp	r3, #1
 801bf4a:	d105      	bne.n	801bf58 <create_name+0x338>
 801bf4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bf50:	f043 0310 	orr.w	r3, r3, #16
 801bf54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801bf58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bf5c:	f003 030c 	and.w	r3, r3, #12
 801bf60:	2b04      	cmp	r3, #4
 801bf62:	d105      	bne.n	801bf70 <create_name+0x350>
 801bf64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bf68:	f043 0308 	orr.w	r3, r3, #8
 801bf6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801bf76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801bf7a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801bf7c:	4618      	mov	r0, r3
 801bf7e:	3728      	adds	r7, #40	; 0x28
 801bf80:	46bd      	mov	sp, r7
 801bf82:	bd80      	pop	{r7, pc}
 801bf84:	080237c4 	.word	0x080237c4
 801bf88:	08023e9c 	.word	0x08023e9c
 801bf8c:	080237d0 	.word	0x080237d0

0801bf90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b086      	sub	sp, #24
 801bf94:	af00      	add	r7, sp, #0
 801bf96:	6078      	str	r0, [r7, #4]
 801bf98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801bf9e:	693b      	ldr	r3, [r7, #16]
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801bfa4:	e002      	b.n	801bfac <follow_path+0x1c>
 801bfa6:	683b      	ldr	r3, [r7, #0]
 801bfa8:	3301      	adds	r3, #1
 801bfaa:	603b      	str	r3, [r7, #0]
 801bfac:	683b      	ldr	r3, [r7, #0]
 801bfae:	781b      	ldrb	r3, [r3, #0]
 801bfb0:	2b2f      	cmp	r3, #47	; 0x2f
 801bfb2:	d0f8      	beq.n	801bfa6 <follow_path+0x16>
 801bfb4:	683b      	ldr	r3, [r7, #0]
 801bfb6:	781b      	ldrb	r3, [r3, #0]
 801bfb8:	2b5c      	cmp	r3, #92	; 0x5c
 801bfba:	d0f4      	beq.n	801bfa6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801bfbc:	693b      	ldr	r3, [r7, #16]
 801bfbe:	2200      	movs	r2, #0
 801bfc0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801bfc2:	683b      	ldr	r3, [r7, #0]
 801bfc4:	781b      	ldrb	r3, [r3, #0]
 801bfc6:	2b1f      	cmp	r3, #31
 801bfc8:	d80a      	bhi.n	801bfe0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	2280      	movs	r2, #128	; 0x80
 801bfce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801bfd2:	2100      	movs	r1, #0
 801bfd4:	6878      	ldr	r0, [r7, #4]
 801bfd6:	f7fe fec9 	bl	801ad6c <dir_sdi>
 801bfda:	4603      	mov	r3, r0
 801bfdc:	75fb      	strb	r3, [r7, #23]
 801bfde:	e048      	b.n	801c072 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801bfe0:	463b      	mov	r3, r7
 801bfe2:	4619      	mov	r1, r3
 801bfe4:	6878      	ldr	r0, [r7, #4]
 801bfe6:	f7ff fe1b 	bl	801bc20 <create_name>
 801bfea:	4603      	mov	r3, r0
 801bfec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bfee:	7dfb      	ldrb	r3, [r7, #23]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d139      	bne.n	801c068 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801bff4:	6878      	ldr	r0, [r7, #4]
 801bff6:	f7ff fb33 	bl	801b660 <dir_find>
 801bffa:	4603      	mov	r3, r0
 801bffc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801c004:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c006:	7dfb      	ldrb	r3, [r7, #23]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d00a      	beq.n	801c022 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c00c:	7dfb      	ldrb	r3, [r7, #23]
 801c00e:	2b04      	cmp	r3, #4
 801c010:	d12c      	bne.n	801c06c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c012:	7afb      	ldrb	r3, [r7, #11]
 801c014:	f003 0304 	and.w	r3, r3, #4
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d127      	bne.n	801c06c <follow_path+0xdc>
 801c01c:	2305      	movs	r3, #5
 801c01e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c020:	e024      	b.n	801c06c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c022:	7afb      	ldrb	r3, [r7, #11]
 801c024:	f003 0304 	and.w	r3, r3, #4
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d121      	bne.n	801c070 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c02c:	693b      	ldr	r3, [r7, #16]
 801c02e:	799b      	ldrb	r3, [r3, #6]
 801c030:	f003 0310 	and.w	r3, r3, #16
 801c034:	2b00      	cmp	r3, #0
 801c036:	d102      	bne.n	801c03e <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c038:	2305      	movs	r3, #5
 801c03a:	75fb      	strb	r3, [r7, #23]
 801c03c:	e019      	b.n	801c072 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	695b      	ldr	r3, [r3, #20]
 801c048:	68fa      	ldr	r2, [r7, #12]
 801c04a:	8992      	ldrh	r2, [r2, #12]
 801c04c:	fbb3 f0f2 	udiv	r0, r3, r2
 801c050:	fb02 f200 	mul.w	r2, r2, r0
 801c054:	1a9b      	subs	r3, r3, r2
 801c056:	440b      	add	r3, r1
 801c058:	4619      	mov	r1, r3
 801c05a:	68f8      	ldr	r0, [r7, #12]
 801c05c:	f7ff f82c 	bl	801b0b8 <ld_clust>
 801c060:	4602      	mov	r2, r0
 801c062:	693b      	ldr	r3, [r7, #16]
 801c064:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c066:	e7bb      	b.n	801bfe0 <follow_path+0x50>
			if (res != FR_OK) break;
 801c068:	bf00      	nop
 801c06a:	e002      	b.n	801c072 <follow_path+0xe2>
				break;
 801c06c:	bf00      	nop
 801c06e:	e000      	b.n	801c072 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c070:	bf00      	nop
			}
		}
	}

	return res;
 801c072:	7dfb      	ldrb	r3, [r7, #23]
}
 801c074:	4618      	mov	r0, r3
 801c076:	3718      	adds	r7, #24
 801c078:	46bd      	mov	sp, r7
 801c07a:	bd80      	pop	{r7, pc}

0801c07c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c07c:	b480      	push	{r7}
 801c07e:	b087      	sub	sp, #28
 801c080:	af00      	add	r7, sp, #0
 801c082:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c084:	f04f 33ff 	mov.w	r3, #4294967295
 801c088:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d031      	beq.n	801c0f6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	617b      	str	r3, [r7, #20]
 801c098:	e002      	b.n	801c0a0 <get_ldnumber+0x24>
 801c09a:	697b      	ldr	r3, [r7, #20]
 801c09c:	3301      	adds	r3, #1
 801c09e:	617b      	str	r3, [r7, #20]
 801c0a0:	697b      	ldr	r3, [r7, #20]
 801c0a2:	781b      	ldrb	r3, [r3, #0]
 801c0a4:	2b1f      	cmp	r3, #31
 801c0a6:	d903      	bls.n	801c0b0 <get_ldnumber+0x34>
 801c0a8:	697b      	ldr	r3, [r7, #20]
 801c0aa:	781b      	ldrb	r3, [r3, #0]
 801c0ac:	2b3a      	cmp	r3, #58	; 0x3a
 801c0ae:	d1f4      	bne.n	801c09a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c0b0:	697b      	ldr	r3, [r7, #20]
 801c0b2:	781b      	ldrb	r3, [r3, #0]
 801c0b4:	2b3a      	cmp	r3, #58	; 0x3a
 801c0b6:	d11c      	bne.n	801c0f2 <get_ldnumber+0x76>
			tp = *path;
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	1c5a      	adds	r2, r3, #1
 801c0c2:	60fa      	str	r2, [r7, #12]
 801c0c4:	781b      	ldrb	r3, [r3, #0]
 801c0c6:	3b30      	subs	r3, #48	; 0x30
 801c0c8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801c0ca:	68bb      	ldr	r3, [r7, #8]
 801c0cc:	2b09      	cmp	r3, #9
 801c0ce:	d80e      	bhi.n	801c0ee <get_ldnumber+0x72>
 801c0d0:	68fa      	ldr	r2, [r7, #12]
 801c0d2:	697b      	ldr	r3, [r7, #20]
 801c0d4:	429a      	cmp	r2, r3
 801c0d6:	d10a      	bne.n	801c0ee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801c0d8:	68bb      	ldr	r3, [r7, #8]
 801c0da:	2b02      	cmp	r3, #2
 801c0dc:	d807      	bhi.n	801c0ee <get_ldnumber+0x72>
					vol = (int)i;
 801c0de:	68bb      	ldr	r3, [r7, #8]
 801c0e0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801c0e2:	697b      	ldr	r3, [r7, #20]
 801c0e4:	3301      	adds	r3, #1
 801c0e6:	617b      	str	r3, [r7, #20]
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	697a      	ldr	r2, [r7, #20]
 801c0ec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801c0ee:	693b      	ldr	r3, [r7, #16]
 801c0f0:	e002      	b.n	801c0f8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801c0f2:	2300      	movs	r3, #0
 801c0f4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801c0f6:	693b      	ldr	r3, [r7, #16]
}
 801c0f8:	4618      	mov	r0, r3
 801c0fa:	371c      	adds	r7, #28
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c102:	4770      	bx	lr

0801c104 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801c104:	b580      	push	{r7, lr}
 801c106:	b082      	sub	sp, #8
 801c108:	af00      	add	r7, sp, #0
 801c10a:	6078      	str	r0, [r7, #4]
 801c10c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	2200      	movs	r2, #0
 801c112:	70da      	strb	r2, [r3, #3]
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	f04f 32ff 	mov.w	r2, #4294967295
 801c11a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801c11c:	6839      	ldr	r1, [r7, #0]
 801c11e:	6878      	ldr	r0, [r7, #4]
 801c120:	f7fe fa42 	bl	801a5a8 <move_window>
 801c124:	4603      	mov	r3, r0
 801c126:	2b00      	cmp	r3, #0
 801c128:	d001      	beq.n	801c12e <check_fs+0x2a>
 801c12a:	2304      	movs	r3, #4
 801c12c:	e038      	b.n	801c1a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	3338      	adds	r3, #56	; 0x38
 801c132:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c136:	4618      	mov	r0, r3
 801c138:	f7fd ff86 	bl	801a048 <ld_word>
 801c13c:	4603      	mov	r3, r0
 801c13e:	461a      	mov	r2, r3
 801c140:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801c144:	429a      	cmp	r2, r3
 801c146:	d001      	beq.n	801c14c <check_fs+0x48>
 801c148:	2303      	movs	r3, #3
 801c14a:	e029      	b.n	801c1a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c152:	2be9      	cmp	r3, #233	; 0xe9
 801c154:	d009      	beq.n	801c16a <check_fs+0x66>
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c15c:	2beb      	cmp	r3, #235	; 0xeb
 801c15e:	d11e      	bne.n	801c19e <check_fs+0x9a>
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801c166:	2b90      	cmp	r3, #144	; 0x90
 801c168:	d119      	bne.n	801c19e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	3338      	adds	r3, #56	; 0x38
 801c16e:	3336      	adds	r3, #54	; 0x36
 801c170:	4618      	mov	r0, r3
 801c172:	f7fd ff81 	bl	801a078 <ld_dword>
 801c176:	4603      	mov	r3, r0
 801c178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801c17c:	4a0a      	ldr	r2, [pc, #40]	; (801c1a8 <check_fs+0xa4>)
 801c17e:	4293      	cmp	r3, r2
 801c180:	d101      	bne.n	801c186 <check_fs+0x82>
 801c182:	2300      	movs	r3, #0
 801c184:	e00c      	b.n	801c1a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	3338      	adds	r3, #56	; 0x38
 801c18a:	3352      	adds	r3, #82	; 0x52
 801c18c:	4618      	mov	r0, r3
 801c18e:	f7fd ff73 	bl	801a078 <ld_dword>
 801c192:	4603      	mov	r3, r0
 801c194:	4a05      	ldr	r2, [pc, #20]	; (801c1ac <check_fs+0xa8>)
 801c196:	4293      	cmp	r3, r2
 801c198:	d101      	bne.n	801c19e <check_fs+0x9a>
 801c19a:	2300      	movs	r3, #0
 801c19c:	e000      	b.n	801c1a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801c19e:	2302      	movs	r3, #2
}
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	3708      	adds	r7, #8
 801c1a4:	46bd      	mov	sp, r7
 801c1a6:	bd80      	pop	{r7, pc}
 801c1a8:	00544146 	.word	0x00544146
 801c1ac:	33544146 	.word	0x33544146

0801c1b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801c1b0:	b580      	push	{r7, lr}
 801c1b2:	b096      	sub	sp, #88	; 0x58
 801c1b4:	af00      	add	r7, sp, #0
 801c1b6:	60f8      	str	r0, [r7, #12]
 801c1b8:	60b9      	str	r1, [r7, #8]
 801c1ba:	4613      	mov	r3, r2
 801c1bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801c1be:	68bb      	ldr	r3, [r7, #8]
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801c1c4:	68f8      	ldr	r0, [r7, #12]
 801c1c6:	f7ff ff59 	bl	801c07c <get_ldnumber>
 801c1ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801c1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	da01      	bge.n	801c1d6 <find_volume+0x26>
 801c1d2:	230b      	movs	r3, #11
 801c1d4:	e268      	b.n	801c6a8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801c1d6:	4ab0      	ldr	r2, [pc, #704]	; (801c498 <find_volume+0x2e8>)
 801c1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c1de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801c1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d101      	bne.n	801c1ea <find_volume+0x3a>
 801c1e6:	230c      	movs	r3, #12
 801c1e8:	e25e      	b.n	801c6a8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801c1ea:	68bb      	ldr	r3, [r7, #8]
 801c1ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801c1f0:	79fb      	ldrb	r3, [r7, #7]
 801c1f2:	f023 0301 	bic.w	r3, r3, #1
 801c1f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1fa:	781b      	ldrb	r3, [r3, #0]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d01a      	beq.n	801c236 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801c200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c202:	785b      	ldrb	r3, [r3, #1]
 801c204:	4618      	mov	r0, r3
 801c206:	f7fd fe81 	bl	8019f0c <disk_status>
 801c20a:	4603      	mov	r3, r0
 801c20c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801c210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c214:	f003 0301 	and.w	r3, r3, #1
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d10c      	bne.n	801c236 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801c21c:	79fb      	ldrb	r3, [r7, #7]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d007      	beq.n	801c232 <find_volume+0x82>
 801c222:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c226:	f003 0304 	and.w	r3, r3, #4
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d001      	beq.n	801c232 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801c22e:	230a      	movs	r3, #10
 801c230:	e23a      	b.n	801c6a8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801c232:	2300      	movs	r3, #0
 801c234:	e238      	b.n	801c6a8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801c236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c238:	2200      	movs	r2, #0
 801c23a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801c23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c23e:	b2da      	uxtb	r2, r3
 801c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c242:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c246:	785b      	ldrb	r3, [r3, #1]
 801c248:	4618      	mov	r0, r3
 801c24a:	f7fd fe79 	bl	8019f40 <disk_initialize>
 801c24e:	4603      	mov	r3, r0
 801c250:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801c254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c258:	f003 0301 	and.w	r3, r3, #1
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d001      	beq.n	801c264 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801c260:	2303      	movs	r3, #3
 801c262:	e221      	b.n	801c6a8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801c264:	79fb      	ldrb	r3, [r7, #7]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d007      	beq.n	801c27a <find_volume+0xca>
 801c26a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c26e:	f003 0304 	and.w	r3, r3, #4
 801c272:	2b00      	cmp	r3, #0
 801c274:	d001      	beq.n	801c27a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801c276:	230a      	movs	r3, #10
 801c278:	e216      	b.n	801c6a8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801c27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c27c:	7858      	ldrb	r0, [r3, #1]
 801c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c280:	330c      	adds	r3, #12
 801c282:	461a      	mov	r2, r3
 801c284:	2102      	movs	r1, #2
 801c286:	f7fd fec1 	bl	801a00c <disk_ioctl>
 801c28a:	4603      	mov	r3, r0
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d001      	beq.n	801c294 <find_volume+0xe4>
 801c290:	2301      	movs	r3, #1
 801c292:	e209      	b.n	801c6a8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c296:	899b      	ldrh	r3, [r3, #12]
 801c298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c29c:	d80d      	bhi.n	801c2ba <find_volume+0x10a>
 801c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2a0:	899b      	ldrh	r3, [r3, #12]
 801c2a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c2a6:	d308      	bcc.n	801c2ba <find_volume+0x10a>
 801c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2aa:	899b      	ldrh	r3, [r3, #12]
 801c2ac:	461a      	mov	r2, r3
 801c2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2b0:	899b      	ldrh	r3, [r3, #12]
 801c2b2:	3b01      	subs	r3, #1
 801c2b4:	4013      	ands	r3, r2
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d001      	beq.n	801c2be <find_volume+0x10e>
 801c2ba:	2301      	movs	r3, #1
 801c2bc:	e1f4      	b.n	801c6a8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801c2be:	2300      	movs	r3, #0
 801c2c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801c2c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c2c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c2c6:	f7ff ff1d 	bl	801c104 <check_fs>
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801c2d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c2d4:	2b02      	cmp	r3, #2
 801c2d6:	d14b      	bne.n	801c370 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c2d8:	2300      	movs	r3, #0
 801c2da:	643b      	str	r3, [r7, #64]	; 0x40
 801c2dc:	e01f      	b.n	801c31e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801c2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2e0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801c2e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c2e6:	011b      	lsls	r3, r3, #4
 801c2e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801c2ec:	4413      	add	r3, r2
 801c2ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2f2:	3304      	adds	r3, #4
 801c2f4:	781b      	ldrb	r3, [r3, #0]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d006      	beq.n	801c308 <find_volume+0x158>
 801c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2fc:	3308      	adds	r3, #8
 801c2fe:	4618      	mov	r0, r3
 801c300:	f7fd feba 	bl	801a078 <ld_dword>
 801c304:	4602      	mov	r2, r0
 801c306:	e000      	b.n	801c30a <find_volume+0x15a>
 801c308:	2200      	movs	r2, #0
 801c30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c30c:	009b      	lsls	r3, r3, #2
 801c30e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c312:	440b      	add	r3, r1
 801c314:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c31a:	3301      	adds	r3, #1
 801c31c:	643b      	str	r3, [r7, #64]	; 0x40
 801c31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c320:	2b03      	cmp	r3, #3
 801c322:	d9dc      	bls.n	801c2de <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801c324:	2300      	movs	r3, #0
 801c326:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801c328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d002      	beq.n	801c334 <find_volume+0x184>
 801c32e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c330:	3b01      	subs	r3, #1
 801c332:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801c334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c336:	009b      	lsls	r3, r3, #2
 801c338:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801c33c:	4413      	add	r3, r2
 801c33e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c342:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801c344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c346:	2b00      	cmp	r3, #0
 801c348:	d005      	beq.n	801c356 <find_volume+0x1a6>
 801c34a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c34c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c34e:	f7ff fed9 	bl	801c104 <check_fs>
 801c352:	4603      	mov	r3, r0
 801c354:	e000      	b.n	801c358 <find_volume+0x1a8>
 801c356:	2303      	movs	r3, #3
 801c358:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c35c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c360:	2b01      	cmp	r3, #1
 801c362:	d905      	bls.n	801c370 <find_volume+0x1c0>
 801c364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c366:	3301      	adds	r3, #1
 801c368:	643b      	str	r3, [r7, #64]	; 0x40
 801c36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c36c:	2b03      	cmp	r3, #3
 801c36e:	d9e1      	bls.n	801c334 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c374:	2b04      	cmp	r3, #4
 801c376:	d101      	bne.n	801c37c <find_volume+0x1cc>
 801c378:	2301      	movs	r3, #1
 801c37a:	e195      	b.n	801c6a8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c37c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c380:	2b01      	cmp	r3, #1
 801c382:	d901      	bls.n	801c388 <find_volume+0x1d8>
 801c384:	230d      	movs	r3, #13
 801c386:	e18f      	b.n	801c6a8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c38a:	3338      	adds	r3, #56	; 0x38
 801c38c:	330b      	adds	r3, #11
 801c38e:	4618      	mov	r0, r3
 801c390:	f7fd fe5a 	bl	801a048 <ld_word>
 801c394:	4603      	mov	r3, r0
 801c396:	461a      	mov	r2, r3
 801c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c39a:	899b      	ldrh	r3, [r3, #12]
 801c39c:	429a      	cmp	r2, r3
 801c39e:	d001      	beq.n	801c3a4 <find_volume+0x1f4>
 801c3a0:	230d      	movs	r3, #13
 801c3a2:	e181      	b.n	801c6a8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3a6:	3338      	adds	r3, #56	; 0x38
 801c3a8:	3316      	adds	r3, #22
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	f7fd fe4c 	bl	801a048 <ld_word>
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d106      	bne.n	801c3c8 <find_volume+0x218>
 801c3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3bc:	3338      	adds	r3, #56	; 0x38
 801c3be:	3324      	adds	r3, #36	; 0x24
 801c3c0:	4618      	mov	r0, r3
 801c3c2:	f7fd fe59 	bl	801a078 <ld_dword>
 801c3c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c3cc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3d0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3da:	789b      	ldrb	r3, [r3, #2]
 801c3dc:	2b01      	cmp	r3, #1
 801c3de:	d005      	beq.n	801c3ec <find_volume+0x23c>
 801c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3e2:	789b      	ldrb	r3, [r3, #2]
 801c3e4:	2b02      	cmp	r3, #2
 801c3e6:	d001      	beq.n	801c3ec <find_volume+0x23c>
 801c3e8:	230d      	movs	r3, #13
 801c3ea:	e15d      	b.n	801c6a8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3ee:	789b      	ldrb	r3, [r3, #2]
 801c3f0:	461a      	mov	r2, r3
 801c3f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c3f4:	fb02 f303 	mul.w	r3, r2, r3
 801c3f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801c400:	b29a      	uxth	r2, r3
 801c402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c404:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c408:	895b      	ldrh	r3, [r3, #10]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d008      	beq.n	801c420 <find_volume+0x270>
 801c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c410:	895b      	ldrh	r3, [r3, #10]
 801c412:	461a      	mov	r2, r3
 801c414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c416:	895b      	ldrh	r3, [r3, #10]
 801c418:	3b01      	subs	r3, #1
 801c41a:	4013      	ands	r3, r2
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d001      	beq.n	801c424 <find_volume+0x274>
 801c420:	230d      	movs	r3, #13
 801c422:	e141      	b.n	801c6a8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c426:	3338      	adds	r3, #56	; 0x38
 801c428:	3311      	adds	r3, #17
 801c42a:	4618      	mov	r0, r3
 801c42c:	f7fd fe0c 	bl	801a048 <ld_word>
 801c430:	4603      	mov	r3, r0
 801c432:	461a      	mov	r2, r3
 801c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c436:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c43a:	891b      	ldrh	r3, [r3, #8]
 801c43c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c43e:	8992      	ldrh	r2, [r2, #12]
 801c440:	0952      	lsrs	r2, r2, #5
 801c442:	b292      	uxth	r2, r2
 801c444:	fbb3 f1f2 	udiv	r1, r3, r2
 801c448:	fb02 f201 	mul.w	r2, r2, r1
 801c44c:	1a9b      	subs	r3, r3, r2
 801c44e:	b29b      	uxth	r3, r3
 801c450:	2b00      	cmp	r3, #0
 801c452:	d001      	beq.n	801c458 <find_volume+0x2a8>
 801c454:	230d      	movs	r3, #13
 801c456:	e127      	b.n	801c6a8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c45a:	3338      	adds	r3, #56	; 0x38
 801c45c:	3313      	adds	r3, #19
 801c45e:	4618      	mov	r0, r3
 801c460:	f7fd fdf2 	bl	801a048 <ld_word>
 801c464:	4603      	mov	r3, r0
 801c466:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d106      	bne.n	801c47c <find_volume+0x2cc>
 801c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c470:	3338      	adds	r3, #56	; 0x38
 801c472:	3320      	adds	r3, #32
 801c474:	4618      	mov	r0, r3
 801c476:	f7fd fdff 	bl	801a078 <ld_dword>
 801c47a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c47e:	3338      	adds	r3, #56	; 0x38
 801c480:	330e      	adds	r3, #14
 801c482:	4618      	mov	r0, r3
 801c484:	f7fd fde0 	bl	801a048 <ld_word>
 801c488:	4603      	mov	r3, r0
 801c48a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c48c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d104      	bne.n	801c49c <find_volume+0x2ec>
 801c492:	230d      	movs	r3, #13
 801c494:	e108      	b.n	801c6a8 <find_volume+0x4f8>
 801c496:	bf00      	nop
 801c498:	20000bc8 	.word	0x20000bc8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c49c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c4a0:	4413      	add	r3, r2
 801c4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c4a4:	8911      	ldrh	r1, [r2, #8]
 801c4a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c4a8:	8992      	ldrh	r2, [r2, #12]
 801c4aa:	0952      	lsrs	r2, r2, #5
 801c4ac:	b292      	uxth	r2, r2
 801c4ae:	fbb1 f2f2 	udiv	r2, r1, r2
 801c4b2:	b292      	uxth	r2, r2
 801c4b4:	4413      	add	r3, r2
 801c4b6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4bc:	429a      	cmp	r2, r3
 801c4be:	d201      	bcs.n	801c4c4 <find_volume+0x314>
 801c4c0:	230d      	movs	r3, #13
 801c4c2:	e0f1      	b.n	801c6a8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c4c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4c8:	1ad3      	subs	r3, r2, r3
 801c4ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c4cc:	8952      	ldrh	r2, [r2, #10]
 801c4ce:	fbb3 f3f2 	udiv	r3, r3, r2
 801c4d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d101      	bne.n	801c4de <find_volume+0x32e>
 801c4da:	230d      	movs	r3, #13
 801c4dc:	e0e4      	b.n	801c6a8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801c4de:	2303      	movs	r3, #3
 801c4e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4e6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801c4ea:	4293      	cmp	r3, r2
 801c4ec:	d802      	bhi.n	801c4f4 <find_volume+0x344>
 801c4ee:	2302      	movs	r3, #2
 801c4f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f6:	f640 72f5 	movw	r2, #4085	; 0xff5
 801c4fa:	4293      	cmp	r3, r2
 801c4fc:	d802      	bhi.n	801c504 <find_volume+0x354>
 801c4fe:	2301      	movs	r3, #1
 801c500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c506:	1c9a      	adds	r2, r3, #2
 801c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c50a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c50e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c510:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c512:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c516:	441a      	add	r2, r3
 801c518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c51a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801c51c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c520:	441a      	add	r2, r3
 801c522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c524:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801c526:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c52a:	2b03      	cmp	r3, #3
 801c52c:	d11e      	bne.n	801c56c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c530:	3338      	adds	r3, #56	; 0x38
 801c532:	332a      	adds	r3, #42	; 0x2a
 801c534:	4618      	mov	r0, r3
 801c536:	f7fd fd87 	bl	801a048 <ld_word>
 801c53a:	4603      	mov	r3, r0
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d001      	beq.n	801c544 <find_volume+0x394>
 801c540:	230d      	movs	r3, #13
 801c542:	e0b1      	b.n	801c6a8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c546:	891b      	ldrh	r3, [r3, #8]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d001      	beq.n	801c550 <find_volume+0x3a0>
 801c54c:	230d      	movs	r3, #13
 801c54e:	e0ab      	b.n	801c6a8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c552:	3338      	adds	r3, #56	; 0x38
 801c554:	332c      	adds	r3, #44	; 0x2c
 801c556:	4618      	mov	r0, r3
 801c558:	f7fd fd8e 	bl	801a078 <ld_dword>
 801c55c:	4602      	mov	r2, r0
 801c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c560:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c564:	69db      	ldr	r3, [r3, #28]
 801c566:	009b      	lsls	r3, r3, #2
 801c568:	647b      	str	r3, [r7, #68]	; 0x44
 801c56a:	e01f      	b.n	801c5ac <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801c56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c56e:	891b      	ldrh	r3, [r3, #8]
 801c570:	2b00      	cmp	r3, #0
 801c572:	d101      	bne.n	801c578 <find_volume+0x3c8>
 801c574:	230d      	movs	r3, #13
 801c576:	e097      	b.n	801c6a8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c57a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c57c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c57e:	441a      	add	r2, r3
 801c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c582:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801c584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c588:	2b02      	cmp	r3, #2
 801c58a:	d103      	bne.n	801c594 <find_volume+0x3e4>
 801c58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c58e:	69db      	ldr	r3, [r3, #28]
 801c590:	005b      	lsls	r3, r3, #1
 801c592:	e00a      	b.n	801c5aa <find_volume+0x3fa>
 801c594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c596:	69da      	ldr	r2, [r3, #28]
 801c598:	4613      	mov	r3, r2
 801c59a:	005b      	lsls	r3, r3, #1
 801c59c:	4413      	add	r3, r2
 801c59e:	085a      	lsrs	r2, r3, #1
 801c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5a2:	69db      	ldr	r3, [r3, #28]
 801c5a4:	f003 0301 	and.w	r3, r3, #1
 801c5a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801c5aa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5ae:	6a1a      	ldr	r2, [r3, #32]
 801c5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5b2:	899b      	ldrh	r3, [r3, #12]
 801c5b4:	4619      	mov	r1, r3
 801c5b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c5b8:	440b      	add	r3, r1
 801c5ba:	3b01      	subs	r3, #1
 801c5bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c5be:	8989      	ldrh	r1, [r1, #12]
 801c5c0:	fbb3 f3f1 	udiv	r3, r3, r1
 801c5c4:	429a      	cmp	r2, r3
 801c5c6:	d201      	bcs.n	801c5cc <find_volume+0x41c>
 801c5c8:	230d      	movs	r3, #13
 801c5ca:	e06d      	b.n	801c6a8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5ce:	f04f 32ff 	mov.w	r2, #4294967295
 801c5d2:	619a      	str	r2, [r3, #24]
 801c5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5d6:	699a      	ldr	r2, [r3, #24]
 801c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5da:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801c5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5de:	2280      	movs	r2, #128	; 0x80
 801c5e0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801c5e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c5e6:	2b03      	cmp	r3, #3
 801c5e8:	d149      	bne.n	801c67e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801c5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5ec:	3338      	adds	r3, #56	; 0x38
 801c5ee:	3330      	adds	r3, #48	; 0x30
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	f7fd fd29 	bl	801a048 <ld_word>
 801c5f6:	4603      	mov	r3, r0
 801c5f8:	2b01      	cmp	r3, #1
 801c5fa:	d140      	bne.n	801c67e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801c5fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c5fe:	3301      	adds	r3, #1
 801c600:	4619      	mov	r1, r3
 801c602:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c604:	f7fd ffd0 	bl	801a5a8 <move_window>
 801c608:	4603      	mov	r3, r0
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d137      	bne.n	801c67e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c610:	2200      	movs	r2, #0
 801c612:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c616:	3338      	adds	r3, #56	; 0x38
 801c618:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c61c:	4618      	mov	r0, r3
 801c61e:	f7fd fd13 	bl	801a048 <ld_word>
 801c622:	4603      	mov	r3, r0
 801c624:	461a      	mov	r2, r3
 801c626:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801c62a:	429a      	cmp	r2, r3
 801c62c:	d127      	bne.n	801c67e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801c62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c630:	3338      	adds	r3, #56	; 0x38
 801c632:	4618      	mov	r0, r3
 801c634:	f7fd fd20 	bl	801a078 <ld_dword>
 801c638:	4603      	mov	r3, r0
 801c63a:	4a1d      	ldr	r2, [pc, #116]	; (801c6b0 <find_volume+0x500>)
 801c63c:	4293      	cmp	r3, r2
 801c63e:	d11e      	bne.n	801c67e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c642:	3338      	adds	r3, #56	; 0x38
 801c644:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801c648:	4618      	mov	r0, r3
 801c64a:	f7fd fd15 	bl	801a078 <ld_dword>
 801c64e:	4603      	mov	r3, r0
 801c650:	4a18      	ldr	r2, [pc, #96]	; (801c6b4 <find_volume+0x504>)
 801c652:	4293      	cmp	r3, r2
 801c654:	d113      	bne.n	801c67e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c658:	3338      	adds	r3, #56	; 0x38
 801c65a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801c65e:	4618      	mov	r0, r3
 801c660:	f7fd fd0a 	bl	801a078 <ld_dword>
 801c664:	4602      	mov	r2, r0
 801c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c668:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c66c:	3338      	adds	r3, #56	; 0x38
 801c66e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801c672:	4618      	mov	r0, r3
 801c674:	f7fd fd00 	bl	801a078 <ld_dword>
 801c678:	4602      	mov	r2, r0
 801c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c67c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c680:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801c684:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801c686:	4b0c      	ldr	r3, [pc, #48]	; (801c6b8 <find_volume+0x508>)
 801c688:	881b      	ldrh	r3, [r3, #0]
 801c68a:	3301      	adds	r3, #1
 801c68c:	b29a      	uxth	r2, r3
 801c68e:	4b0a      	ldr	r3, [pc, #40]	; (801c6b8 <find_volume+0x508>)
 801c690:	801a      	strh	r2, [r3, #0]
 801c692:	4b09      	ldr	r3, [pc, #36]	; (801c6b8 <find_volume+0x508>)
 801c694:	881a      	ldrh	r2, [r3, #0]
 801c696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c698:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c69c:	4a07      	ldr	r2, [pc, #28]	; (801c6bc <find_volume+0x50c>)
 801c69e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801c6a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c6a2:	f7fd ff19 	bl	801a4d8 <clear_lock>
#endif
	return FR_OK;
 801c6a6:	2300      	movs	r3, #0
}
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	3758      	adds	r7, #88	; 0x58
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	bd80      	pop	{r7, pc}
 801c6b0:	41615252 	.word	0x41615252
 801c6b4:	61417272 	.word	0x61417272
 801c6b8:	20000bd4 	.word	0x20000bd4
 801c6bc:	20000bf8 	.word	0x20000bf8

0801c6c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801c6c0:	b580      	push	{r7, lr}
 801c6c2:	b084      	sub	sp, #16
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	6078      	str	r0, [r7, #4]
 801c6c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801c6ca:	2309      	movs	r3, #9
 801c6cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d01c      	beq.n	801c70e <validate+0x4e>
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d018      	beq.n	801c70e <validate+0x4e>
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	781b      	ldrb	r3, [r3, #0]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d013      	beq.n	801c70e <validate+0x4e>
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	889a      	ldrh	r2, [r3, #4]
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	88db      	ldrh	r3, [r3, #6]
 801c6f0:	429a      	cmp	r2, r3
 801c6f2:	d10c      	bne.n	801c70e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	785b      	ldrb	r3, [r3, #1]
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	f7fd fc06 	bl	8019f0c <disk_status>
 801c700:	4603      	mov	r3, r0
 801c702:	f003 0301 	and.w	r3, r3, #1
 801c706:	2b00      	cmp	r3, #0
 801c708:	d101      	bne.n	801c70e <validate+0x4e>
			res = FR_OK;
 801c70a:	2300      	movs	r3, #0
 801c70c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801c70e:	7bfb      	ldrb	r3, [r7, #15]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d102      	bne.n	801c71a <validate+0x5a>
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	e000      	b.n	801c71c <validate+0x5c>
 801c71a:	2300      	movs	r3, #0
 801c71c:	683a      	ldr	r2, [r7, #0]
 801c71e:	6013      	str	r3, [r2, #0]
	return res;
 801c720:	7bfb      	ldrb	r3, [r7, #15]
}
 801c722:	4618      	mov	r0, r3
 801c724:	3710      	adds	r7, #16
 801c726:	46bd      	mov	sp, r7
 801c728:	bd80      	pop	{r7, pc}
	...

0801c72c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801c72c:	b580      	push	{r7, lr}
 801c72e:	b088      	sub	sp, #32
 801c730:	af00      	add	r7, sp, #0
 801c732:	60f8      	str	r0, [r7, #12]
 801c734:	60b9      	str	r1, [r7, #8]
 801c736:	4613      	mov	r3, r2
 801c738:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801c73a:	68bb      	ldr	r3, [r7, #8]
 801c73c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801c73e:	f107 0310 	add.w	r3, r7, #16
 801c742:	4618      	mov	r0, r3
 801c744:	f7ff fc9a 	bl	801c07c <get_ldnumber>
 801c748:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801c74a:	69fb      	ldr	r3, [r7, #28]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	da01      	bge.n	801c754 <f_mount+0x28>
 801c750:	230b      	movs	r3, #11
 801c752:	e02b      	b.n	801c7ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801c754:	4a17      	ldr	r2, [pc, #92]	; (801c7b4 <f_mount+0x88>)
 801c756:	69fb      	ldr	r3, [r7, #28]
 801c758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c75c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801c75e:	69bb      	ldr	r3, [r7, #24]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d005      	beq.n	801c770 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801c764:	69b8      	ldr	r0, [r7, #24]
 801c766:	f7fd feb7 	bl	801a4d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801c76a:	69bb      	ldr	r3, [r7, #24]
 801c76c:	2200      	movs	r2, #0
 801c76e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	2b00      	cmp	r3, #0
 801c774:	d002      	beq.n	801c77c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	2200      	movs	r2, #0
 801c77a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801c77c:	68fa      	ldr	r2, [r7, #12]
 801c77e:	490d      	ldr	r1, [pc, #52]	; (801c7b4 <f_mount+0x88>)
 801c780:	69fb      	ldr	r3, [r7, #28]
 801c782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d002      	beq.n	801c792 <f_mount+0x66>
 801c78c:	79fb      	ldrb	r3, [r7, #7]
 801c78e:	2b01      	cmp	r3, #1
 801c790:	d001      	beq.n	801c796 <f_mount+0x6a>
 801c792:	2300      	movs	r3, #0
 801c794:	e00a      	b.n	801c7ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c796:	f107 010c 	add.w	r1, r7, #12
 801c79a:	f107 0308 	add.w	r3, r7, #8
 801c79e:	2200      	movs	r2, #0
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	f7ff fd05 	bl	801c1b0 <find_volume>
 801c7a6:	4603      	mov	r3, r0
 801c7a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801c7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 801c7ac:	4618      	mov	r0, r3
 801c7ae:	3720      	adds	r7, #32
 801c7b0:	46bd      	mov	sp, r7
 801c7b2:	bd80      	pop	{r7, pc}
 801c7b4:	20000bc8 	.word	0x20000bc8

0801c7b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801c7b8:	b580      	push	{r7, lr}
 801c7ba:	b09a      	sub	sp, #104	; 0x68
 801c7bc:	af00      	add	r7, sp, #0
 801c7be:	60f8      	str	r0, [r7, #12]
 801c7c0:	60b9      	str	r1, [r7, #8]
 801c7c2:	4613      	mov	r3, r2
 801c7c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d101      	bne.n	801c7d0 <f_open+0x18>
 801c7cc:	2309      	movs	r3, #9
 801c7ce:	e1bb      	b.n	801cb48 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801c7d0:	79fb      	ldrb	r3, [r7, #7]
 801c7d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c7d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801c7d8:	79fa      	ldrb	r2, [r7, #7]
 801c7da:	f107 0114 	add.w	r1, r7, #20
 801c7de:	f107 0308 	add.w	r3, r7, #8
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	f7ff fce4 	bl	801c1b0 <find_volume>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801c7ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	f040 819f 	bne.w	801cb36 <f_open+0x37e>
		dj.obj.fs = fs;
 801c7f8:	697b      	ldr	r3, [r7, #20]
 801c7fa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801c7fc:	68ba      	ldr	r2, [r7, #8]
 801c7fe:	f107 0318 	add.w	r3, r7, #24
 801c802:	4611      	mov	r1, r2
 801c804:	4618      	mov	r0, r3
 801c806:	f7ff fbc3 	bl	801bf90 <follow_path>
 801c80a:	4603      	mov	r3, r0
 801c80c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801c810:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c814:	2b00      	cmp	r3, #0
 801c816:	d11a      	bne.n	801c84e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801c818:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801c81c:	b25b      	sxtb	r3, r3
 801c81e:	2b00      	cmp	r3, #0
 801c820:	da03      	bge.n	801c82a <f_open+0x72>
				res = FR_INVALID_NAME;
 801c822:	2306      	movs	r3, #6
 801c824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c828:	e011      	b.n	801c84e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c82a:	79fb      	ldrb	r3, [r7, #7]
 801c82c:	f023 0301 	bic.w	r3, r3, #1
 801c830:	2b00      	cmp	r3, #0
 801c832:	bf14      	ite	ne
 801c834:	2301      	movne	r3, #1
 801c836:	2300      	moveq	r3, #0
 801c838:	b2db      	uxtb	r3, r3
 801c83a:	461a      	mov	r2, r3
 801c83c:	f107 0318 	add.w	r3, r7, #24
 801c840:	4611      	mov	r1, r2
 801c842:	4618      	mov	r0, r3
 801c844:	f7fd fd00 	bl	801a248 <chk_lock>
 801c848:	4603      	mov	r3, r0
 801c84a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c84e:	79fb      	ldrb	r3, [r7, #7]
 801c850:	f003 031c 	and.w	r3, r3, #28
 801c854:	2b00      	cmp	r3, #0
 801c856:	d07f      	beq.n	801c958 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801c858:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d017      	beq.n	801c890 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801c860:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c864:	2b04      	cmp	r3, #4
 801c866:	d10e      	bne.n	801c886 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c868:	f7fd fd4a 	bl	801a300 <enq_lock>
 801c86c:	4603      	mov	r3, r0
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d006      	beq.n	801c880 <f_open+0xc8>
 801c872:	f107 0318 	add.w	r3, r7, #24
 801c876:	4618      	mov	r0, r3
 801c878:	f7fe ffb2 	bl	801b7e0 <dir_register>
 801c87c:	4603      	mov	r3, r0
 801c87e:	e000      	b.n	801c882 <f_open+0xca>
 801c880:	2312      	movs	r3, #18
 801c882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801c886:	79fb      	ldrb	r3, [r7, #7]
 801c888:	f043 0308 	orr.w	r3, r3, #8
 801c88c:	71fb      	strb	r3, [r7, #7]
 801c88e:	e010      	b.n	801c8b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801c890:	7fbb      	ldrb	r3, [r7, #30]
 801c892:	f003 0311 	and.w	r3, r3, #17
 801c896:	2b00      	cmp	r3, #0
 801c898:	d003      	beq.n	801c8a2 <f_open+0xea>
					res = FR_DENIED;
 801c89a:	2307      	movs	r3, #7
 801c89c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c8a0:	e007      	b.n	801c8b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801c8a2:	79fb      	ldrb	r3, [r7, #7]
 801c8a4:	f003 0304 	and.w	r3, r3, #4
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d002      	beq.n	801c8b2 <f_open+0xfa>
 801c8ac:	2308      	movs	r3, #8
 801c8ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c8b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d168      	bne.n	801c98c <f_open+0x1d4>
 801c8ba:	79fb      	ldrb	r3, [r7, #7]
 801c8bc:	f003 0308 	and.w	r3, r3, #8
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d063      	beq.n	801c98c <f_open+0x1d4>
				dw = GET_FATTIME();
 801c8c4:	f7fa f918 	bl	8016af8 <get_fattime>
 801c8c8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8cc:	330e      	adds	r3, #14
 801c8ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c8d0:	4618      	mov	r0, r3
 801c8d2:	f7fd fc0f 	bl	801a0f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8d8:	3316      	adds	r3, #22
 801c8da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c8dc:	4618      	mov	r0, r3
 801c8de:	f7fd fc09 	bl	801a0f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8e4:	330b      	adds	r3, #11
 801c8e6:	2220      	movs	r2, #32
 801c8e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c8ea:	697b      	ldr	r3, [r7, #20]
 801c8ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c8ee:	4611      	mov	r1, r2
 801c8f0:	4618      	mov	r0, r3
 801c8f2:	f7fe fbe1 	bl	801b0b8 <ld_clust>
 801c8f6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801c8f8:	697b      	ldr	r3, [r7, #20]
 801c8fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c8fc:	2200      	movs	r2, #0
 801c8fe:	4618      	mov	r0, r3
 801c900:	f7fe fbf9 	bl	801b0f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c906:	331c      	adds	r3, #28
 801c908:	2100      	movs	r1, #0
 801c90a:	4618      	mov	r0, r3
 801c90c:	f7fd fbf2 	bl	801a0f4 <st_dword>
					fs->wflag = 1;
 801c910:	697b      	ldr	r3, [r7, #20]
 801c912:	2201      	movs	r2, #1
 801c914:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801c916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d037      	beq.n	801c98c <f_open+0x1d4>
						dw = fs->winsect;
 801c91c:	697b      	ldr	r3, [r7, #20]
 801c91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c920:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801c922:	f107 0318 	add.w	r3, r7, #24
 801c926:	2200      	movs	r2, #0
 801c928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c92a:	4618      	mov	r0, r3
 801c92c:	f7fe f8e9 	bl	801ab02 <remove_chain>
 801c930:	4603      	mov	r3, r0
 801c932:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801c936:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d126      	bne.n	801c98c <f_open+0x1d4>
							res = move_window(fs, dw);
 801c93e:	697b      	ldr	r3, [r7, #20]
 801c940:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c942:	4618      	mov	r0, r3
 801c944:	f7fd fe30 	bl	801a5a8 <move_window>
 801c948:	4603      	mov	r3, r0
 801c94a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c94e:	697b      	ldr	r3, [r7, #20]
 801c950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c952:	3a01      	subs	r2, #1
 801c954:	615a      	str	r2, [r3, #20]
 801c956:	e019      	b.n	801c98c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801c958:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d115      	bne.n	801c98c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801c960:	7fbb      	ldrb	r3, [r7, #30]
 801c962:	f003 0310 	and.w	r3, r3, #16
 801c966:	2b00      	cmp	r3, #0
 801c968:	d003      	beq.n	801c972 <f_open+0x1ba>
					res = FR_NO_FILE;
 801c96a:	2304      	movs	r3, #4
 801c96c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c970:	e00c      	b.n	801c98c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801c972:	79fb      	ldrb	r3, [r7, #7]
 801c974:	f003 0302 	and.w	r3, r3, #2
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d007      	beq.n	801c98c <f_open+0x1d4>
 801c97c:	7fbb      	ldrb	r3, [r7, #30]
 801c97e:	f003 0301 	and.w	r3, r3, #1
 801c982:	2b00      	cmp	r3, #0
 801c984:	d002      	beq.n	801c98c <f_open+0x1d4>
						res = FR_DENIED;
 801c986:	2307      	movs	r3, #7
 801c988:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801c98c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c990:	2b00      	cmp	r3, #0
 801c992:	d128      	bne.n	801c9e6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801c994:	79fb      	ldrb	r3, [r7, #7]
 801c996:	f003 0308 	and.w	r3, r3, #8
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d003      	beq.n	801c9a6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801c99e:	79fb      	ldrb	r3, [r7, #7]
 801c9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c9a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801c9a6:	697b      	ldr	r3, [r7, #20]
 801c9a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801c9ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c9b4:	79fb      	ldrb	r3, [r7, #7]
 801c9b6:	f023 0301 	bic.w	r3, r3, #1
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	bf14      	ite	ne
 801c9be:	2301      	movne	r3, #1
 801c9c0:	2300      	moveq	r3, #0
 801c9c2:	b2db      	uxtb	r3, r3
 801c9c4:	461a      	mov	r2, r3
 801c9c6:	f107 0318 	add.w	r3, r7, #24
 801c9ca:	4611      	mov	r1, r2
 801c9cc:	4618      	mov	r0, r3
 801c9ce:	f7fd fcb9 	bl	801a344 <inc_lock>
 801c9d2:	4602      	mov	r2, r0
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	691b      	ldr	r3, [r3, #16]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d102      	bne.n	801c9e6 <f_open+0x22e>
 801c9e0:	2302      	movs	r3, #2
 801c9e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801c9e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	f040 80a3 	bne.w	801cb36 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801c9f0:	697b      	ldr	r3, [r7, #20]
 801c9f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c9f4:	4611      	mov	r1, r2
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	f7fe fb5e 	bl	801b0b8 <ld_clust>
 801c9fc:	4602      	mov	r2, r0
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca04:	331c      	adds	r3, #28
 801ca06:	4618      	mov	r0, r3
 801ca08:	f7fd fb36 	bl	801a078 <ld_dword>
 801ca0c:	4602      	mov	r2, r0
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	2200      	movs	r2, #0
 801ca16:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801ca18:	697a      	ldr	r2, [r7, #20]
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	88da      	ldrh	r2, [r3, #6]
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	79fa      	ldrb	r2, [r7, #7]
 801ca2a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801ca2c:	68fb      	ldr	r3, [r7, #12]
 801ca2e:	2200      	movs	r2, #0
 801ca30:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	2200      	movs	r2, #0
 801ca36:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801ca38:	68fb      	ldr	r3, [r7, #12]
 801ca3a:	2200      	movs	r2, #0
 801ca3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801ca3e:	68fb      	ldr	r3, [r7, #12]
 801ca40:	3330      	adds	r3, #48	; 0x30
 801ca42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801ca46:	2100      	movs	r1, #0
 801ca48:	4618      	mov	r0, r3
 801ca4a:	f7fd fba0 	bl	801a18e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801ca4e:	79fb      	ldrb	r3, [r7, #7]
 801ca50:	f003 0320 	and.w	r3, r3, #32
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d06e      	beq.n	801cb36 <f_open+0x37e>
 801ca58:	68fb      	ldr	r3, [r7, #12]
 801ca5a:	68db      	ldr	r3, [r3, #12]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d06a      	beq.n	801cb36 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	68da      	ldr	r2, [r3, #12]
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801ca68:	697b      	ldr	r3, [r7, #20]
 801ca6a:	895b      	ldrh	r3, [r3, #10]
 801ca6c:	461a      	mov	r2, r3
 801ca6e:	697b      	ldr	r3, [r7, #20]
 801ca70:	899b      	ldrh	r3, [r3, #12]
 801ca72:	fb03 f302 	mul.w	r3, r3, r2
 801ca76:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	689b      	ldr	r3, [r3, #8]
 801ca7c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	68db      	ldr	r3, [r3, #12]
 801ca82:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ca84:	e016      	b.n	801cab4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	f7fd fe49 	bl	801a722 <get_fat>
 801ca90:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801ca92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ca94:	2b01      	cmp	r3, #1
 801ca96:	d802      	bhi.n	801ca9e <f_open+0x2e6>
 801ca98:	2302      	movs	r3, #2
 801ca9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801ca9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801caa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801caa4:	d102      	bne.n	801caac <f_open+0x2f4>
 801caa6:	2301      	movs	r3, #1
 801caa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801caac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801caae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cab0:	1ad3      	subs	r3, r2, r3
 801cab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cab4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d103      	bne.n	801cac4 <f_open+0x30c>
 801cabc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801cabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cac0:	429a      	cmp	r2, r3
 801cac2:	d8e0      	bhi.n	801ca86 <f_open+0x2ce>
				}
				fp->clust = clst;
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cac8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801caca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d131      	bne.n	801cb36 <f_open+0x37e>
 801cad2:	697b      	ldr	r3, [r7, #20]
 801cad4:	899b      	ldrh	r3, [r3, #12]
 801cad6:	461a      	mov	r2, r3
 801cad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cada:	fbb3 f1f2 	udiv	r1, r3, r2
 801cade:	fb02 f201 	mul.w	r2, r2, r1
 801cae2:	1a9b      	subs	r3, r3, r2
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d026      	beq.n	801cb36 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801cae8:	697b      	ldr	r3, [r7, #20]
 801caea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801caec:	4618      	mov	r0, r3
 801caee:	f7fd fdf9 	bl	801a6e4 <clust2sect>
 801caf2:	64f8      	str	r0, [r7, #76]	; 0x4c
 801caf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d103      	bne.n	801cb02 <f_open+0x34a>
						res = FR_INT_ERR;
 801cafa:	2302      	movs	r3, #2
 801cafc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801cb00:	e019      	b.n	801cb36 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801cb02:	697b      	ldr	r3, [r7, #20]
 801cb04:	899b      	ldrh	r3, [r3, #12]
 801cb06:	461a      	mov	r2, r3
 801cb08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cb0a:	fbb3 f2f2 	udiv	r2, r3, r2
 801cb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cb10:	441a      	add	r2, r3
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801cb16:	697b      	ldr	r3, [r7, #20]
 801cb18:	7858      	ldrb	r0, [r3, #1]
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	6a1a      	ldr	r2, [r3, #32]
 801cb24:	2301      	movs	r3, #1
 801cb26:	f7fd fa31 	bl	8019f8c <disk_read>
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d002      	beq.n	801cb36 <f_open+0x37e>
 801cb30:	2301      	movs	r3, #1
 801cb32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801cb36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d002      	beq.n	801cb44 <f_open+0x38c>
 801cb3e:	68fb      	ldr	r3, [r7, #12]
 801cb40:	2200      	movs	r2, #0
 801cb42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801cb44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801cb48:	4618      	mov	r0, r3
 801cb4a:	3768      	adds	r7, #104	; 0x68
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	bd80      	pop	{r7, pc}

0801cb50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801cb50:	b580      	push	{r7, lr}
 801cb52:	b08c      	sub	sp, #48	; 0x30
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	60f8      	str	r0, [r7, #12]
 801cb58:	60b9      	str	r1, [r7, #8]
 801cb5a:	607a      	str	r2, [r7, #4]
 801cb5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801cb5e:	68bb      	ldr	r3, [r7, #8]
 801cb60:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801cb62:	683b      	ldr	r3, [r7, #0]
 801cb64:	2200      	movs	r2, #0
 801cb66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	f107 0210 	add.w	r2, r7, #16
 801cb6e:	4611      	mov	r1, r2
 801cb70:	4618      	mov	r0, r3
 801cb72:	f7ff fda5 	bl	801c6c0 <validate>
 801cb76:	4603      	mov	r3, r0
 801cb78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801cb7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d107      	bne.n	801cb94 <f_write+0x44>
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	7d5b      	ldrb	r3, [r3, #21]
 801cb88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801cb8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d002      	beq.n	801cb9a <f_write+0x4a>
 801cb94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cb98:	e16a      	b.n	801ce70 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801cb9a:	68fb      	ldr	r3, [r7, #12]
 801cb9c:	7d1b      	ldrb	r3, [r3, #20]
 801cb9e:	f003 0302 	and.w	r3, r3, #2
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d101      	bne.n	801cbaa <f_write+0x5a>
 801cba6:	2307      	movs	r3, #7
 801cba8:	e162      	b.n	801ce70 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	699a      	ldr	r2, [r3, #24]
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	441a      	add	r2, r3
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	699b      	ldr	r3, [r3, #24]
 801cbb6:	429a      	cmp	r2, r3
 801cbb8:	f080 814c 	bcs.w	801ce54 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	699b      	ldr	r3, [r3, #24]
 801cbc0:	43db      	mvns	r3, r3
 801cbc2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801cbc4:	e146      	b.n	801ce54 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	699b      	ldr	r3, [r3, #24]
 801cbca:	693a      	ldr	r2, [r7, #16]
 801cbcc:	8992      	ldrh	r2, [r2, #12]
 801cbce:	fbb3 f1f2 	udiv	r1, r3, r2
 801cbd2:	fb02 f201 	mul.w	r2, r2, r1
 801cbd6:	1a9b      	subs	r3, r3, r2
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	f040 80f1 	bne.w	801cdc0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	699b      	ldr	r3, [r3, #24]
 801cbe2:	693a      	ldr	r2, [r7, #16]
 801cbe4:	8992      	ldrh	r2, [r2, #12]
 801cbe6:	fbb3 f3f2 	udiv	r3, r3, r2
 801cbea:	693a      	ldr	r2, [r7, #16]
 801cbec:	8952      	ldrh	r2, [r2, #10]
 801cbee:	3a01      	subs	r2, #1
 801cbf0:	4013      	ands	r3, r2
 801cbf2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801cbf4:	69bb      	ldr	r3, [r7, #24]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d143      	bne.n	801cc82 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	699b      	ldr	r3, [r3, #24]
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d10c      	bne.n	801cc1c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	689b      	ldr	r3, [r3, #8]
 801cc06:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d11a      	bne.n	801cc44 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801cc0e:	68fb      	ldr	r3, [r7, #12]
 801cc10:	2100      	movs	r1, #0
 801cc12:	4618      	mov	r0, r3
 801cc14:	f7fd ffda 	bl	801abcc <create_chain>
 801cc18:	62b8      	str	r0, [r7, #40]	; 0x28
 801cc1a:	e013      	b.n	801cc44 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801cc1c:	68fb      	ldr	r3, [r7, #12]
 801cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d007      	beq.n	801cc34 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801cc24:	68fb      	ldr	r3, [r7, #12]
 801cc26:	699b      	ldr	r3, [r3, #24]
 801cc28:	4619      	mov	r1, r3
 801cc2a:	68f8      	ldr	r0, [r7, #12]
 801cc2c:	f7fe f866 	bl	801acfc <clmt_clust>
 801cc30:	62b8      	str	r0, [r7, #40]	; 0x28
 801cc32:	e007      	b.n	801cc44 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801cc34:	68fa      	ldr	r2, [r7, #12]
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	69db      	ldr	r3, [r3, #28]
 801cc3a:	4619      	mov	r1, r3
 801cc3c:	4610      	mov	r0, r2
 801cc3e:	f7fd ffc5 	bl	801abcc <create_chain>
 801cc42:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801cc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	f000 8109 	beq.w	801ce5e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc4e:	2b01      	cmp	r3, #1
 801cc50:	d104      	bne.n	801cc5c <f_write+0x10c>
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	2202      	movs	r2, #2
 801cc56:	755a      	strb	r2, [r3, #21]
 801cc58:	2302      	movs	r3, #2
 801cc5a:	e109      	b.n	801ce70 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801cc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc62:	d104      	bne.n	801cc6e <f_write+0x11e>
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	2201      	movs	r2, #1
 801cc68:	755a      	strb	r2, [r3, #21]
 801cc6a:	2301      	movs	r3, #1
 801cc6c:	e100      	b.n	801ce70 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cc72:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	689b      	ldr	r3, [r3, #8]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d102      	bne.n	801cc82 <f_write+0x132>
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cc80:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	7d1b      	ldrb	r3, [r3, #20]
 801cc86:	b25b      	sxtb	r3, r3
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	da18      	bge.n	801ccbe <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801cc8c:	693b      	ldr	r3, [r7, #16]
 801cc8e:	7858      	ldrb	r0, [r3, #1]
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	6a1a      	ldr	r2, [r3, #32]
 801cc9a:	2301      	movs	r3, #1
 801cc9c:	f7fd f996 	bl	8019fcc <disk_write>
 801cca0:	4603      	mov	r3, r0
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d004      	beq.n	801ccb0 <f_write+0x160>
 801cca6:	68fb      	ldr	r3, [r7, #12]
 801cca8:	2201      	movs	r2, #1
 801ccaa:	755a      	strb	r2, [r3, #21]
 801ccac:	2301      	movs	r3, #1
 801ccae:	e0df      	b.n	801ce70 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	7d1b      	ldrb	r3, [r3, #20]
 801ccb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ccb8:	b2da      	uxtb	r2, r3
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801ccbe:	693a      	ldr	r2, [r7, #16]
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	69db      	ldr	r3, [r3, #28]
 801ccc4:	4619      	mov	r1, r3
 801ccc6:	4610      	mov	r0, r2
 801ccc8:	f7fd fd0c 	bl	801a6e4 <clust2sect>
 801cccc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801ccce:	697b      	ldr	r3, [r7, #20]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d104      	bne.n	801ccde <f_write+0x18e>
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	2202      	movs	r2, #2
 801ccd8:	755a      	strb	r2, [r3, #21]
 801ccda:	2302      	movs	r3, #2
 801ccdc:	e0c8      	b.n	801ce70 <f_write+0x320>
			sect += csect;
 801ccde:	697a      	ldr	r2, [r7, #20]
 801cce0:	69bb      	ldr	r3, [r7, #24]
 801cce2:	4413      	add	r3, r2
 801cce4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801cce6:	693b      	ldr	r3, [r7, #16]
 801cce8:	899b      	ldrh	r3, [r3, #12]
 801ccea:	461a      	mov	r2, r3
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	fbb3 f3f2 	udiv	r3, r3, r2
 801ccf2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801ccf4:	6a3b      	ldr	r3, [r7, #32]
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d043      	beq.n	801cd82 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801ccfa:	69ba      	ldr	r2, [r7, #24]
 801ccfc:	6a3b      	ldr	r3, [r7, #32]
 801ccfe:	4413      	add	r3, r2
 801cd00:	693a      	ldr	r2, [r7, #16]
 801cd02:	8952      	ldrh	r2, [r2, #10]
 801cd04:	4293      	cmp	r3, r2
 801cd06:	d905      	bls.n	801cd14 <f_write+0x1c4>
					cc = fs->csize - csect;
 801cd08:	693b      	ldr	r3, [r7, #16]
 801cd0a:	895b      	ldrh	r3, [r3, #10]
 801cd0c:	461a      	mov	r2, r3
 801cd0e:	69bb      	ldr	r3, [r7, #24]
 801cd10:	1ad3      	subs	r3, r2, r3
 801cd12:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801cd14:	693b      	ldr	r3, [r7, #16]
 801cd16:	7858      	ldrb	r0, [r3, #1]
 801cd18:	6a3b      	ldr	r3, [r7, #32]
 801cd1a:	697a      	ldr	r2, [r7, #20]
 801cd1c:	69f9      	ldr	r1, [r7, #28]
 801cd1e:	f7fd f955 	bl	8019fcc <disk_write>
 801cd22:	4603      	mov	r3, r0
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d004      	beq.n	801cd32 <f_write+0x1e2>
 801cd28:	68fb      	ldr	r3, [r7, #12]
 801cd2a:	2201      	movs	r2, #1
 801cd2c:	755a      	strb	r2, [r3, #21]
 801cd2e:	2301      	movs	r3, #1
 801cd30:	e09e      	b.n	801ce70 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801cd32:	68fb      	ldr	r3, [r7, #12]
 801cd34:	6a1a      	ldr	r2, [r3, #32]
 801cd36:	697b      	ldr	r3, [r7, #20]
 801cd38:	1ad3      	subs	r3, r2, r3
 801cd3a:	6a3a      	ldr	r2, [r7, #32]
 801cd3c:	429a      	cmp	r2, r3
 801cd3e:	d918      	bls.n	801cd72 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	6a1a      	ldr	r2, [r3, #32]
 801cd4a:	697b      	ldr	r3, [r7, #20]
 801cd4c:	1ad3      	subs	r3, r2, r3
 801cd4e:	693a      	ldr	r2, [r7, #16]
 801cd50:	8992      	ldrh	r2, [r2, #12]
 801cd52:	fb02 f303 	mul.w	r3, r2, r3
 801cd56:	69fa      	ldr	r2, [r7, #28]
 801cd58:	18d1      	adds	r1, r2, r3
 801cd5a:	693b      	ldr	r3, [r7, #16]
 801cd5c:	899b      	ldrh	r3, [r3, #12]
 801cd5e:	461a      	mov	r2, r3
 801cd60:	f7fd f9f4 	bl	801a14c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801cd64:	68fb      	ldr	r3, [r7, #12]
 801cd66:	7d1b      	ldrb	r3, [r3, #20]
 801cd68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cd6c:	b2da      	uxtb	r2, r3
 801cd6e:	68fb      	ldr	r3, [r7, #12]
 801cd70:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801cd72:	693b      	ldr	r3, [r7, #16]
 801cd74:	899b      	ldrh	r3, [r3, #12]
 801cd76:	461a      	mov	r2, r3
 801cd78:	6a3b      	ldr	r3, [r7, #32]
 801cd7a:	fb02 f303 	mul.w	r3, r2, r3
 801cd7e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801cd80:	e04b      	b.n	801ce1a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	6a1b      	ldr	r3, [r3, #32]
 801cd86:	697a      	ldr	r2, [r7, #20]
 801cd88:	429a      	cmp	r2, r3
 801cd8a:	d016      	beq.n	801cdba <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	699a      	ldr	r2, [r3, #24]
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801cd94:	429a      	cmp	r2, r3
 801cd96:	d210      	bcs.n	801cdba <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801cd98:	693b      	ldr	r3, [r7, #16]
 801cd9a:	7858      	ldrb	r0, [r3, #1]
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cda2:	2301      	movs	r3, #1
 801cda4:	697a      	ldr	r2, [r7, #20]
 801cda6:	f7fd f8f1 	bl	8019f8c <disk_read>
 801cdaa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d004      	beq.n	801cdba <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801cdb0:	68fb      	ldr	r3, [r7, #12]
 801cdb2:	2201      	movs	r2, #1
 801cdb4:	755a      	strb	r2, [r3, #21]
 801cdb6:	2301      	movs	r3, #1
 801cdb8:	e05a      	b.n	801ce70 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801cdba:	68fb      	ldr	r3, [r7, #12]
 801cdbc:	697a      	ldr	r2, [r7, #20]
 801cdbe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801cdc0:	693b      	ldr	r3, [r7, #16]
 801cdc2:	899b      	ldrh	r3, [r3, #12]
 801cdc4:	4618      	mov	r0, r3
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	699b      	ldr	r3, [r3, #24]
 801cdca:	693a      	ldr	r2, [r7, #16]
 801cdcc:	8992      	ldrh	r2, [r2, #12]
 801cdce:	fbb3 f1f2 	udiv	r1, r3, r2
 801cdd2:	fb02 f201 	mul.w	r2, r2, r1
 801cdd6:	1a9b      	subs	r3, r3, r2
 801cdd8:	1ac3      	subs	r3, r0, r3
 801cdda:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801cddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	429a      	cmp	r2, r3
 801cde2:	d901      	bls.n	801cde8 <f_write+0x298>
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	699b      	ldr	r3, [r3, #24]
 801cdf2:	693a      	ldr	r2, [r7, #16]
 801cdf4:	8992      	ldrh	r2, [r2, #12]
 801cdf6:	fbb3 f0f2 	udiv	r0, r3, r2
 801cdfa:	fb02 f200 	mul.w	r2, r2, r0
 801cdfe:	1a9b      	subs	r3, r3, r2
 801ce00:	440b      	add	r3, r1
 801ce02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce04:	69f9      	ldr	r1, [r7, #28]
 801ce06:	4618      	mov	r0, r3
 801ce08:	f7fd f9a0 	bl	801a14c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801ce0c:	68fb      	ldr	r3, [r7, #12]
 801ce0e:	7d1b      	ldrb	r3, [r3, #20]
 801ce10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ce14:	b2da      	uxtb	r2, r3
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801ce1a:	69fa      	ldr	r2, [r7, #28]
 801ce1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce1e:	4413      	add	r3, r2
 801ce20:	61fb      	str	r3, [r7, #28]
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	699a      	ldr	r2, [r3, #24]
 801ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce28:	441a      	add	r2, r3
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	619a      	str	r2, [r3, #24]
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	68da      	ldr	r2, [r3, #12]
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	699b      	ldr	r3, [r3, #24]
 801ce36:	429a      	cmp	r2, r3
 801ce38:	bf38      	it	cc
 801ce3a:	461a      	movcc	r2, r3
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	60da      	str	r2, [r3, #12]
 801ce40:	683b      	ldr	r3, [r7, #0]
 801ce42:	681a      	ldr	r2, [r3, #0]
 801ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce46:	441a      	add	r2, r3
 801ce48:	683b      	ldr	r3, [r7, #0]
 801ce4a:	601a      	str	r2, [r3, #0]
 801ce4c:	687a      	ldr	r2, [r7, #4]
 801ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce50:	1ad3      	subs	r3, r2, r3
 801ce52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	f47f aeb5 	bne.w	801cbc6 <f_write+0x76>
 801ce5c:	e000      	b.n	801ce60 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801ce5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	7d1b      	ldrb	r3, [r3, #20]
 801ce64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce68:	b2da      	uxtb	r2, r3
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801ce6e:	2300      	movs	r3, #0
}
 801ce70:	4618      	mov	r0, r3
 801ce72:	3730      	adds	r7, #48	; 0x30
 801ce74:	46bd      	mov	sp, r7
 801ce76:	bd80      	pop	{r7, pc}

0801ce78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	b086      	sub	sp, #24
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	f107 0208 	add.w	r2, r7, #8
 801ce86:	4611      	mov	r1, r2
 801ce88:	4618      	mov	r0, r3
 801ce8a:	f7ff fc19 	bl	801c6c0 <validate>
 801ce8e:	4603      	mov	r3, r0
 801ce90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801ce92:	7dfb      	ldrb	r3, [r7, #23]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d168      	bne.n	801cf6a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	7d1b      	ldrb	r3, [r3, #20]
 801ce9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d062      	beq.n	801cf6a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	7d1b      	ldrb	r3, [r3, #20]
 801cea8:	b25b      	sxtb	r3, r3
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	da15      	bge.n	801ceda <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801ceae:	68bb      	ldr	r3, [r7, #8]
 801ceb0:	7858      	ldrb	r0, [r3, #1]
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	6a1a      	ldr	r2, [r3, #32]
 801cebc:	2301      	movs	r3, #1
 801cebe:	f7fd f885 	bl	8019fcc <disk_write>
 801cec2:	4603      	mov	r3, r0
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d001      	beq.n	801cecc <f_sync+0x54>
 801cec8:	2301      	movs	r3, #1
 801ceca:	e04f      	b.n	801cf6c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	7d1b      	ldrb	r3, [r3, #20]
 801ced0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ced4:	b2da      	uxtb	r2, r3
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801ceda:	f7f9 fe0d 	bl	8016af8 <get_fattime>
 801cede:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801cee0:	68ba      	ldr	r2, [r7, #8]
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cee6:	4619      	mov	r1, r3
 801cee8:	4610      	mov	r0, r2
 801ceea:	f7fd fb5d 	bl	801a5a8 <move_window>
 801ceee:	4603      	mov	r3, r0
 801cef0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801cef2:	7dfb      	ldrb	r3, [r7, #23]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d138      	bne.n	801cf6a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cefc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	330b      	adds	r3, #11
 801cf02:	781a      	ldrb	r2, [r3, #0]
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	330b      	adds	r3, #11
 801cf08:	f042 0220 	orr.w	r2, r2, #32
 801cf0c:	b2d2      	uxtb	r2, r2
 801cf0e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	6818      	ldr	r0, [r3, #0]
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	689b      	ldr	r3, [r3, #8]
 801cf18:	461a      	mov	r2, r3
 801cf1a:	68f9      	ldr	r1, [r7, #12]
 801cf1c:	f7fe f8eb 	bl	801b0f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801cf20:	68fb      	ldr	r3, [r7, #12]
 801cf22:	f103 021c 	add.w	r2, r3, #28
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	68db      	ldr	r3, [r3, #12]
 801cf2a:	4619      	mov	r1, r3
 801cf2c:	4610      	mov	r0, r2
 801cf2e:	f7fd f8e1 	bl	801a0f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	3316      	adds	r3, #22
 801cf36:	6939      	ldr	r1, [r7, #16]
 801cf38:	4618      	mov	r0, r3
 801cf3a:	f7fd f8db 	bl	801a0f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	3312      	adds	r3, #18
 801cf42:	2100      	movs	r1, #0
 801cf44:	4618      	mov	r0, r3
 801cf46:	f7fd f8ba 	bl	801a0be <st_word>
					fs->wflag = 1;
 801cf4a:	68bb      	ldr	r3, [r7, #8]
 801cf4c:	2201      	movs	r2, #1
 801cf4e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801cf50:	68bb      	ldr	r3, [r7, #8]
 801cf52:	4618      	mov	r0, r3
 801cf54:	f7fd fb56 	bl	801a604 <sync_fs>
 801cf58:	4603      	mov	r3, r0
 801cf5a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	7d1b      	ldrb	r3, [r3, #20]
 801cf60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801cf64:	b2da      	uxtb	r2, r3
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801cf6a:	7dfb      	ldrb	r3, [r7, #23]
}
 801cf6c:	4618      	mov	r0, r3
 801cf6e:	3718      	adds	r7, #24
 801cf70:	46bd      	mov	sp, r7
 801cf72:	bd80      	pop	{r7, pc}

0801cf74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801cf74:	b580      	push	{r7, lr}
 801cf76:	b084      	sub	sp, #16
 801cf78:	af00      	add	r7, sp, #0
 801cf7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801cf7c:	6878      	ldr	r0, [r7, #4]
 801cf7e:	f7ff ff7b 	bl	801ce78 <f_sync>
 801cf82:	4603      	mov	r3, r0
 801cf84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801cf86:	7bfb      	ldrb	r3, [r7, #15]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d118      	bne.n	801cfbe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	f107 0208 	add.w	r2, r7, #8
 801cf92:	4611      	mov	r1, r2
 801cf94:	4618      	mov	r0, r3
 801cf96:	f7ff fb93 	bl	801c6c0 <validate>
 801cf9a:	4603      	mov	r3, r0
 801cf9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801cf9e:	7bfb      	ldrb	r3, [r7, #15]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d10c      	bne.n	801cfbe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	691b      	ldr	r3, [r3, #16]
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	f7fd fa59 	bl	801a460 <dec_lock>
 801cfae:	4603      	mov	r3, r0
 801cfb0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801cfb2:	7bfb      	ldrb	r3, [r7, #15]
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d102      	bne.n	801cfbe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	2200      	movs	r2, #0
 801cfbc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801cfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfc0:	4618      	mov	r0, r3
 801cfc2:	3710      	adds	r7, #16
 801cfc4:	46bd      	mov	sp, r7
 801cfc6:	bd80      	pop	{r7, pc}

0801cfc8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801cfc8:	b580      	push	{r7, lr}
 801cfca:	b090      	sub	sp, #64	; 0x40
 801cfcc:	af00      	add	r7, sp, #0
 801cfce:	6078      	str	r0, [r7, #4]
 801cfd0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	f107 0208 	add.w	r2, r7, #8
 801cfd8:	4611      	mov	r1, r2
 801cfda:	4618      	mov	r0, r3
 801cfdc:	f7ff fb70 	bl	801c6c0 <validate>
 801cfe0:	4603      	mov	r3, r0
 801cfe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801cfe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d103      	bne.n	801cff6 <f_lseek+0x2e>
 801cfee:	687b      	ldr	r3, [r7, #4]
 801cff0:	7d5b      	ldrb	r3, [r3, #21]
 801cff2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801cff6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d002      	beq.n	801d004 <f_lseek+0x3c>
 801cffe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d002:	e201      	b.n	801d408 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d008:	2b00      	cmp	r3, #0
 801d00a:	f000 80d9 	beq.w	801d1c0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801d00e:	683b      	ldr	r3, [r7, #0]
 801d010:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d014:	d15a      	bne.n	801d0cc <f_lseek+0x104>
			tbl = fp->cltbl;
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d01a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d01e:	1d1a      	adds	r2, r3, #4
 801d020:	627a      	str	r2, [r7, #36]	; 0x24
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	617b      	str	r3, [r7, #20]
 801d026:	2302      	movs	r3, #2
 801d028:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	689b      	ldr	r3, [r3, #8]
 801d02e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801d030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d032:	2b00      	cmp	r3, #0
 801d034:	d03a      	beq.n	801d0ac <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801d036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d038:	613b      	str	r3, [r7, #16]
 801d03a:	2300      	movs	r3, #0
 801d03c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d040:	3302      	adds	r3, #2
 801d042:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801d044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d046:	60fb      	str	r3, [r7, #12]
 801d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d04a:	3301      	adds	r3, #1
 801d04c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d052:	4618      	mov	r0, r3
 801d054:	f7fd fb65 	bl	801a722 <get_fat>
 801d058:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801d05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d05c:	2b01      	cmp	r3, #1
 801d05e:	d804      	bhi.n	801d06a <f_lseek+0xa2>
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	2202      	movs	r2, #2
 801d064:	755a      	strb	r2, [r3, #21]
 801d066:	2302      	movs	r3, #2
 801d068:	e1ce      	b.n	801d408 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d070:	d104      	bne.n	801d07c <f_lseek+0xb4>
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	2201      	movs	r2, #1
 801d076:	755a      	strb	r2, [r3, #21]
 801d078:	2301      	movs	r3, #1
 801d07a:	e1c5      	b.n	801d408 <f_lseek+0x440>
					} while (cl == pcl + 1);
 801d07c:	68fb      	ldr	r3, [r7, #12]
 801d07e:	3301      	adds	r3, #1
 801d080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d082:	429a      	cmp	r2, r3
 801d084:	d0de      	beq.n	801d044 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801d086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d088:	697b      	ldr	r3, [r7, #20]
 801d08a:	429a      	cmp	r2, r3
 801d08c:	d809      	bhi.n	801d0a2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801d08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d090:	1d1a      	adds	r2, r3, #4
 801d092:	627a      	str	r2, [r7, #36]	; 0x24
 801d094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d096:	601a      	str	r2, [r3, #0]
 801d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d09a:	1d1a      	adds	r2, r3, #4
 801d09c:	627a      	str	r2, [r7, #36]	; 0x24
 801d09e:	693a      	ldr	r2, [r7, #16]
 801d0a0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801d0a2:	68bb      	ldr	r3, [r7, #8]
 801d0a4:	69db      	ldr	r3, [r3, #28]
 801d0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d0a8:	429a      	cmp	r2, r3
 801d0aa:	d3c4      	bcc.n	801d036 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d0b2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801d0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d0b6:	697b      	ldr	r3, [r7, #20]
 801d0b8:	429a      	cmp	r2, r3
 801d0ba:	d803      	bhi.n	801d0c4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0be:	2200      	movs	r2, #0
 801d0c0:	601a      	str	r2, [r3, #0]
 801d0c2:	e19f      	b.n	801d404 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801d0c4:	2311      	movs	r3, #17
 801d0c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801d0ca:	e19b      	b.n	801d404 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	68db      	ldr	r3, [r3, #12]
 801d0d0:	683a      	ldr	r2, [r7, #0]
 801d0d2:	429a      	cmp	r2, r3
 801d0d4:	d902      	bls.n	801d0dc <f_lseek+0x114>
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	68db      	ldr	r3, [r3, #12]
 801d0da:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	683a      	ldr	r2, [r7, #0]
 801d0e0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801d0e2:	683b      	ldr	r3, [r7, #0]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	f000 818d 	beq.w	801d404 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801d0ea:	683b      	ldr	r3, [r7, #0]
 801d0ec:	3b01      	subs	r3, #1
 801d0ee:	4619      	mov	r1, r3
 801d0f0:	6878      	ldr	r0, [r7, #4]
 801d0f2:	f7fd fe03 	bl	801acfc <clmt_clust>
 801d0f6:	4602      	mov	r2, r0
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801d0fc:	68ba      	ldr	r2, [r7, #8]
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	69db      	ldr	r3, [r3, #28]
 801d102:	4619      	mov	r1, r3
 801d104:	4610      	mov	r0, r2
 801d106:	f7fd faed 	bl	801a6e4 <clust2sect>
 801d10a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801d10c:	69bb      	ldr	r3, [r7, #24]
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d104      	bne.n	801d11c <f_lseek+0x154>
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	2202      	movs	r2, #2
 801d116:	755a      	strb	r2, [r3, #21]
 801d118:	2302      	movs	r3, #2
 801d11a:	e175      	b.n	801d408 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801d11c:	683b      	ldr	r3, [r7, #0]
 801d11e:	3b01      	subs	r3, #1
 801d120:	68ba      	ldr	r2, [r7, #8]
 801d122:	8992      	ldrh	r2, [r2, #12]
 801d124:	fbb3 f3f2 	udiv	r3, r3, r2
 801d128:	68ba      	ldr	r2, [r7, #8]
 801d12a:	8952      	ldrh	r2, [r2, #10]
 801d12c:	3a01      	subs	r2, #1
 801d12e:	4013      	ands	r3, r2
 801d130:	69ba      	ldr	r2, [r7, #24]
 801d132:	4413      	add	r3, r2
 801d134:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	699b      	ldr	r3, [r3, #24]
 801d13a:	68ba      	ldr	r2, [r7, #8]
 801d13c:	8992      	ldrh	r2, [r2, #12]
 801d13e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d142:	fb02 f201 	mul.w	r2, r2, r1
 801d146:	1a9b      	subs	r3, r3, r2
 801d148:	2b00      	cmp	r3, #0
 801d14a:	f000 815b 	beq.w	801d404 <f_lseek+0x43c>
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	6a1b      	ldr	r3, [r3, #32]
 801d152:	69ba      	ldr	r2, [r7, #24]
 801d154:	429a      	cmp	r2, r3
 801d156:	f000 8155 	beq.w	801d404 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	7d1b      	ldrb	r3, [r3, #20]
 801d15e:	b25b      	sxtb	r3, r3
 801d160:	2b00      	cmp	r3, #0
 801d162:	da18      	bge.n	801d196 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d164:	68bb      	ldr	r3, [r7, #8]
 801d166:	7858      	ldrb	r0, [r3, #1]
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	6a1a      	ldr	r2, [r3, #32]
 801d172:	2301      	movs	r3, #1
 801d174:	f7fc ff2a 	bl	8019fcc <disk_write>
 801d178:	4603      	mov	r3, r0
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d004      	beq.n	801d188 <f_lseek+0x1c0>
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	2201      	movs	r2, #1
 801d182:	755a      	strb	r2, [r3, #21]
 801d184:	2301      	movs	r3, #1
 801d186:	e13f      	b.n	801d408 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	7d1b      	ldrb	r3, [r3, #20]
 801d18c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d190:	b2da      	uxtb	r2, r3
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801d196:	68bb      	ldr	r3, [r7, #8]
 801d198:	7858      	ldrb	r0, [r3, #1]
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d1a0:	2301      	movs	r3, #1
 801d1a2:	69ba      	ldr	r2, [r7, #24]
 801d1a4:	f7fc fef2 	bl	8019f8c <disk_read>
 801d1a8:	4603      	mov	r3, r0
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d004      	beq.n	801d1b8 <f_lseek+0x1f0>
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	2201      	movs	r2, #1
 801d1b2:	755a      	strb	r2, [r3, #21]
 801d1b4:	2301      	movs	r3, #1
 801d1b6:	e127      	b.n	801d408 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	69ba      	ldr	r2, [r7, #24]
 801d1bc:	621a      	str	r2, [r3, #32]
 801d1be:	e121      	b.n	801d404 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	68db      	ldr	r3, [r3, #12]
 801d1c4:	683a      	ldr	r2, [r7, #0]
 801d1c6:	429a      	cmp	r2, r3
 801d1c8:	d908      	bls.n	801d1dc <f_lseek+0x214>
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	7d1b      	ldrb	r3, [r3, #20]
 801d1ce:	f003 0302 	and.w	r3, r3, #2
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d102      	bne.n	801d1dc <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	68db      	ldr	r3, [r3, #12]
 801d1da:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	699b      	ldr	r3, [r3, #24]
 801d1e0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801d1e2:	2300      	movs	r3, #0
 801d1e4:	637b      	str	r3, [r7, #52]	; 0x34
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d1ea:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801d1ec:	683b      	ldr	r3, [r7, #0]
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	f000 80b5 	beq.w	801d35e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801d1f4:	68bb      	ldr	r3, [r7, #8]
 801d1f6:	895b      	ldrh	r3, [r3, #10]
 801d1f8:	461a      	mov	r2, r3
 801d1fa:	68bb      	ldr	r3, [r7, #8]
 801d1fc:	899b      	ldrh	r3, [r3, #12]
 801d1fe:	fb03 f302 	mul.w	r3, r3, r2
 801d202:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801d204:	6a3b      	ldr	r3, [r7, #32]
 801d206:	2b00      	cmp	r3, #0
 801d208:	d01b      	beq.n	801d242 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	1e5a      	subs	r2, r3, #1
 801d20e:	69fb      	ldr	r3, [r7, #28]
 801d210:	fbb2 f2f3 	udiv	r2, r2, r3
 801d214:	6a3b      	ldr	r3, [r7, #32]
 801d216:	1e59      	subs	r1, r3, #1
 801d218:	69fb      	ldr	r3, [r7, #28]
 801d21a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801d21e:	429a      	cmp	r2, r3
 801d220:	d30f      	bcc.n	801d242 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801d222:	6a3b      	ldr	r3, [r7, #32]
 801d224:	1e5a      	subs	r2, r3, #1
 801d226:	69fb      	ldr	r3, [r7, #28]
 801d228:	425b      	negs	r3, r3
 801d22a:	401a      	ands	r2, r3
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	699b      	ldr	r3, [r3, #24]
 801d234:	683a      	ldr	r2, [r7, #0]
 801d236:	1ad3      	subs	r3, r2, r3
 801d238:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	69db      	ldr	r3, [r3, #28]
 801d23e:	63bb      	str	r3, [r7, #56]	; 0x38
 801d240:	e022      	b.n	801d288 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	689b      	ldr	r3, [r3, #8]
 801d246:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801d248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d119      	bne.n	801d282 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	2100      	movs	r1, #0
 801d252:	4618      	mov	r0, r3
 801d254:	f7fd fcba 	bl	801abcc <create_chain>
 801d258:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d25c:	2b01      	cmp	r3, #1
 801d25e:	d104      	bne.n	801d26a <f_lseek+0x2a2>
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	2202      	movs	r2, #2
 801d264:	755a      	strb	r2, [r3, #21]
 801d266:	2302      	movs	r3, #2
 801d268:	e0ce      	b.n	801d408 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d270:	d104      	bne.n	801d27c <f_lseek+0x2b4>
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	2201      	movs	r2, #1
 801d276:	755a      	strb	r2, [r3, #21]
 801d278:	2301      	movs	r3, #1
 801d27a:	e0c5      	b.n	801d408 <f_lseek+0x440>
					fp->obj.sclust = clst;
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d280:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d286:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801d288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d067      	beq.n	801d35e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801d28e:	e03a      	b.n	801d306 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801d290:	683a      	ldr	r2, [r7, #0]
 801d292:	69fb      	ldr	r3, [r7, #28]
 801d294:	1ad3      	subs	r3, r2, r3
 801d296:	603b      	str	r3, [r7, #0]
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	699a      	ldr	r2, [r3, #24]
 801d29c:	69fb      	ldr	r3, [r7, #28]
 801d29e:	441a      	add	r2, r3
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	7d1b      	ldrb	r3, [r3, #20]
 801d2a8:	f003 0302 	and.w	r3, r3, #2
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d00b      	beq.n	801d2c8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	f7fd fc89 	bl	801abcc <create_chain>
 801d2ba:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	d108      	bne.n	801d2d4 <f_lseek+0x30c>
							ofs = 0; break;
 801d2c2:	2300      	movs	r3, #0
 801d2c4:	603b      	str	r3, [r7, #0]
 801d2c6:	e022      	b.n	801d30e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d2cc:	4618      	mov	r0, r3
 801d2ce:	f7fd fa28 	bl	801a722 <get_fat>
 801d2d2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d2da:	d104      	bne.n	801d2e6 <f_lseek+0x31e>
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	2201      	movs	r2, #1
 801d2e0:	755a      	strb	r2, [r3, #21]
 801d2e2:	2301      	movs	r3, #1
 801d2e4:	e090      	b.n	801d408 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801d2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2e8:	2b01      	cmp	r3, #1
 801d2ea:	d904      	bls.n	801d2f6 <f_lseek+0x32e>
 801d2ec:	68bb      	ldr	r3, [r7, #8]
 801d2ee:	69db      	ldr	r3, [r3, #28]
 801d2f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d2f2:	429a      	cmp	r2, r3
 801d2f4:	d304      	bcc.n	801d300 <f_lseek+0x338>
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	2202      	movs	r2, #2
 801d2fa:	755a      	strb	r2, [r3, #21]
 801d2fc:	2302      	movs	r3, #2
 801d2fe:	e083      	b.n	801d408 <f_lseek+0x440>
					fp->clust = clst;
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d304:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801d306:	683a      	ldr	r2, [r7, #0]
 801d308:	69fb      	ldr	r3, [r7, #28]
 801d30a:	429a      	cmp	r2, r3
 801d30c:	d8c0      	bhi.n	801d290 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	699a      	ldr	r2, [r3, #24]
 801d312:	683b      	ldr	r3, [r7, #0]
 801d314:	441a      	add	r2, r3
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801d31a:	68bb      	ldr	r3, [r7, #8]
 801d31c:	899b      	ldrh	r3, [r3, #12]
 801d31e:	461a      	mov	r2, r3
 801d320:	683b      	ldr	r3, [r7, #0]
 801d322:	fbb3 f1f2 	udiv	r1, r3, r2
 801d326:	fb02 f201 	mul.w	r2, r2, r1
 801d32a:	1a9b      	subs	r3, r3, r2
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d016      	beq.n	801d35e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801d330:	68bb      	ldr	r3, [r7, #8]
 801d332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d334:	4618      	mov	r0, r3
 801d336:	f7fd f9d5 	bl	801a6e4 <clust2sect>
 801d33a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801d33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d104      	bne.n	801d34c <f_lseek+0x384>
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	2202      	movs	r2, #2
 801d346:	755a      	strb	r2, [r3, #21]
 801d348:	2302      	movs	r3, #2
 801d34a:	e05d      	b.n	801d408 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801d34c:	68bb      	ldr	r3, [r7, #8]
 801d34e:	899b      	ldrh	r3, [r3, #12]
 801d350:	461a      	mov	r2, r3
 801d352:	683b      	ldr	r3, [r7, #0]
 801d354:	fbb3 f3f2 	udiv	r3, r3, r2
 801d358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d35a:	4413      	add	r3, r2
 801d35c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	699a      	ldr	r2, [r3, #24]
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	68db      	ldr	r3, [r3, #12]
 801d366:	429a      	cmp	r2, r3
 801d368:	d90a      	bls.n	801d380 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	699a      	ldr	r2, [r3, #24]
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	7d1b      	ldrb	r3, [r3, #20]
 801d376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d37a:	b2da      	uxtb	r2, r3
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	699b      	ldr	r3, [r3, #24]
 801d384:	68ba      	ldr	r2, [r7, #8]
 801d386:	8992      	ldrh	r2, [r2, #12]
 801d388:	fbb3 f1f2 	udiv	r1, r3, r2
 801d38c:	fb02 f201 	mul.w	r2, r2, r1
 801d390:	1a9b      	subs	r3, r3, r2
 801d392:	2b00      	cmp	r3, #0
 801d394:	d036      	beq.n	801d404 <f_lseek+0x43c>
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	6a1b      	ldr	r3, [r3, #32]
 801d39a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d39c:	429a      	cmp	r2, r3
 801d39e:	d031      	beq.n	801d404 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	7d1b      	ldrb	r3, [r3, #20]
 801d3a4:	b25b      	sxtb	r3, r3
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	da18      	bge.n	801d3dc <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d3aa:	68bb      	ldr	r3, [r7, #8]
 801d3ac:	7858      	ldrb	r0, [r3, #1]
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	6a1a      	ldr	r2, [r3, #32]
 801d3b8:	2301      	movs	r3, #1
 801d3ba:	f7fc fe07 	bl	8019fcc <disk_write>
 801d3be:	4603      	mov	r3, r0
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d004      	beq.n	801d3ce <f_lseek+0x406>
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	2201      	movs	r2, #1
 801d3c8:	755a      	strb	r2, [r3, #21]
 801d3ca:	2301      	movs	r3, #1
 801d3cc:	e01c      	b.n	801d408 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	7d1b      	ldrb	r3, [r3, #20]
 801d3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d3d6:	b2da      	uxtb	r2, r3
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801d3dc:	68bb      	ldr	r3, [r7, #8]
 801d3de:	7858      	ldrb	r0, [r3, #1]
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d3e6:	2301      	movs	r3, #1
 801d3e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d3ea:	f7fc fdcf 	bl	8019f8c <disk_read>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d004      	beq.n	801d3fe <f_lseek+0x436>
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	2201      	movs	r2, #1
 801d3f8:	755a      	strb	r2, [r3, #21]
 801d3fa:	2301      	movs	r3, #1
 801d3fc:	e004      	b.n	801d408 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d402:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801d404:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801d408:	4618      	mov	r0, r3
 801d40a:	3740      	adds	r7, #64	; 0x40
 801d40c:	46bd      	mov	sp, r7
 801d40e:	bd80      	pop	{r7, pc}

0801d410 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b086      	sub	sp, #24
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
 801d418:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d101      	bne.n	801d424 <f_opendir+0x14>
 801d420:	2309      	movs	r3, #9
 801d422:	e064      	b.n	801d4ee <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801d428:	f107 010c 	add.w	r1, r7, #12
 801d42c:	463b      	mov	r3, r7
 801d42e:	2200      	movs	r2, #0
 801d430:	4618      	mov	r0, r3
 801d432:	f7fe febd 	bl	801c1b0 <find_volume>
 801d436:	4603      	mov	r3, r0
 801d438:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d43a:	7dfb      	ldrb	r3, [r7, #23]
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d14f      	bne.n	801d4e0 <f_opendir+0xd0>
		obj->fs = fs;
 801d440:	68fa      	ldr	r2, [r7, #12]
 801d442:	693b      	ldr	r3, [r7, #16]
 801d444:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801d446:	683b      	ldr	r3, [r7, #0]
 801d448:	4619      	mov	r1, r3
 801d44a:	6878      	ldr	r0, [r7, #4]
 801d44c:	f7fe fda0 	bl	801bf90 <follow_path>
 801d450:	4603      	mov	r3, r0
 801d452:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801d454:	7dfb      	ldrb	r3, [r7, #23]
 801d456:	2b00      	cmp	r3, #0
 801d458:	d13d      	bne.n	801d4d6 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801d460:	b25b      	sxtb	r3, r3
 801d462:	2b00      	cmp	r3, #0
 801d464:	db12      	blt.n	801d48c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801d466:	693b      	ldr	r3, [r7, #16]
 801d468:	799b      	ldrb	r3, [r3, #6]
 801d46a:	f003 0310 	and.w	r3, r3, #16
 801d46e:	2b00      	cmp	r3, #0
 801d470:	d00a      	beq.n	801d488 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801d472:	68fa      	ldr	r2, [r7, #12]
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	6a1b      	ldr	r3, [r3, #32]
 801d478:	4619      	mov	r1, r3
 801d47a:	4610      	mov	r0, r2
 801d47c:	f7fd fe1c 	bl	801b0b8 <ld_clust>
 801d480:	4602      	mov	r2, r0
 801d482:	693b      	ldr	r3, [r7, #16]
 801d484:	609a      	str	r2, [r3, #8]
 801d486:	e001      	b.n	801d48c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801d488:	2305      	movs	r3, #5
 801d48a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801d48c:	7dfb      	ldrb	r3, [r7, #23]
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d121      	bne.n	801d4d6 <f_opendir+0xc6>
				obj->id = fs->id;
 801d492:	68fb      	ldr	r3, [r7, #12]
 801d494:	88da      	ldrh	r2, [r3, #6]
 801d496:	693b      	ldr	r3, [r7, #16]
 801d498:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801d49a:	2100      	movs	r1, #0
 801d49c:	6878      	ldr	r0, [r7, #4]
 801d49e:	f7fd fc65 	bl	801ad6c <dir_sdi>
 801d4a2:	4603      	mov	r3, r0
 801d4a4:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801d4a6:	7dfb      	ldrb	r3, [r7, #23]
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d114      	bne.n	801d4d6 <f_opendir+0xc6>
					if (obj->sclust) {
 801d4ac:	693b      	ldr	r3, [r7, #16]
 801d4ae:	689b      	ldr	r3, [r3, #8]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d00d      	beq.n	801d4d0 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801d4b4:	2100      	movs	r1, #0
 801d4b6:	6878      	ldr	r0, [r7, #4]
 801d4b8:	f7fc ff44 	bl	801a344 <inc_lock>
 801d4bc:	4602      	mov	r2, r0
 801d4be:	693b      	ldr	r3, [r7, #16]
 801d4c0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801d4c2:	693b      	ldr	r3, [r7, #16]
 801d4c4:	691b      	ldr	r3, [r3, #16]
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d105      	bne.n	801d4d6 <f_opendir+0xc6>
 801d4ca:	2312      	movs	r3, #18
 801d4cc:	75fb      	strb	r3, [r7, #23]
 801d4ce:	e002      	b.n	801d4d6 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801d4d0:	693b      	ldr	r3, [r7, #16]
 801d4d2:	2200      	movs	r2, #0
 801d4d4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801d4d6:	7dfb      	ldrb	r3, [r7, #23]
 801d4d8:	2b04      	cmp	r3, #4
 801d4da:	d101      	bne.n	801d4e0 <f_opendir+0xd0>
 801d4dc:	2305      	movs	r3, #5
 801d4de:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d4e0:	7dfb      	ldrb	r3, [r7, #23]
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d002      	beq.n	801d4ec <f_opendir+0xdc>
 801d4e6:	693b      	ldr	r3, [r7, #16]
 801d4e8:	2200      	movs	r2, #0
 801d4ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	3718      	adds	r7, #24
 801d4f2:	46bd      	mov	sp, r7
 801d4f4:	bd80      	pop	{r7, pc}

0801d4f6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801d4f6:	b580      	push	{r7, lr}
 801d4f8:	b084      	sub	sp, #16
 801d4fa:	af00      	add	r7, sp, #0
 801d4fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	f107 0208 	add.w	r2, r7, #8
 801d504:	4611      	mov	r1, r2
 801d506:	4618      	mov	r0, r3
 801d508:	f7ff f8da 	bl	801c6c0 <validate>
 801d50c:	4603      	mov	r3, r0
 801d50e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d510:	7bfb      	ldrb	r3, [r7, #15]
 801d512:	2b00      	cmp	r3, #0
 801d514:	d110      	bne.n	801d538 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	691b      	ldr	r3, [r3, #16]
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d006      	beq.n	801d52c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	691b      	ldr	r3, [r3, #16]
 801d522:	4618      	mov	r0, r3
 801d524:	f7fc ff9c 	bl	801a460 <dec_lock>
 801d528:	4603      	mov	r3, r0
 801d52a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801d52c:	7bfb      	ldrb	r3, [r7, #15]
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d102      	bne.n	801d538 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	2200      	movs	r2, #0
 801d536:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801d538:	7bfb      	ldrb	r3, [r7, #15]
}
 801d53a:	4618      	mov	r0, r3
 801d53c:	3710      	adds	r7, #16
 801d53e:	46bd      	mov	sp, r7
 801d540:	bd80      	pop	{r7, pc}

0801d542 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d542:	b580      	push	{r7, lr}
 801d544:	b084      	sub	sp, #16
 801d546:	af00      	add	r7, sp, #0
 801d548:	6078      	str	r0, [r7, #4]
 801d54a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	f107 0208 	add.w	r2, r7, #8
 801d552:	4611      	mov	r1, r2
 801d554:	4618      	mov	r0, r3
 801d556:	f7ff f8b3 	bl	801c6c0 <validate>
 801d55a:	4603      	mov	r3, r0
 801d55c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d55e:	7bfb      	ldrb	r3, [r7, #15]
 801d560:	2b00      	cmp	r3, #0
 801d562:	d126      	bne.n	801d5b2 <f_readdir+0x70>
		if (!fno) {
 801d564:	683b      	ldr	r3, [r7, #0]
 801d566:	2b00      	cmp	r3, #0
 801d568:	d106      	bne.n	801d578 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801d56a:	2100      	movs	r1, #0
 801d56c:	6878      	ldr	r0, [r7, #4]
 801d56e:	f7fd fbfd 	bl	801ad6c <dir_sdi>
 801d572:	4603      	mov	r3, r0
 801d574:	73fb      	strb	r3, [r7, #15]
 801d576:	e01c      	b.n	801d5b2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801d578:	2100      	movs	r1, #0
 801d57a:	6878      	ldr	r0, [r7, #4]
 801d57c:	f7fd ffc9 	bl	801b512 <dir_read>
 801d580:	4603      	mov	r3, r0
 801d582:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801d584:	7bfb      	ldrb	r3, [r7, #15]
 801d586:	2b04      	cmp	r3, #4
 801d588:	d101      	bne.n	801d58e <f_readdir+0x4c>
 801d58a:	2300      	movs	r3, #0
 801d58c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801d58e:	7bfb      	ldrb	r3, [r7, #15]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d10e      	bne.n	801d5b2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801d594:	6839      	ldr	r1, [r7, #0]
 801d596:	6878      	ldr	r0, [r7, #4]
 801d598:	f7fe fa64 	bl	801ba64 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801d59c:	2100      	movs	r1, #0
 801d59e:	6878      	ldr	r0, [r7, #4]
 801d5a0:	f7fd fc6d 	bl	801ae7e <dir_next>
 801d5a4:	4603      	mov	r3, r0
 801d5a6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801d5a8:	7bfb      	ldrb	r3, [r7, #15]
 801d5aa:	2b04      	cmp	r3, #4
 801d5ac:	d101      	bne.n	801d5b2 <f_readdir+0x70>
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801d5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 801d5b4:	4618      	mov	r0, r3
 801d5b6:	3710      	adds	r7, #16
 801d5b8:	46bd      	mov	sp, r7
 801d5ba:	bd80      	pop	{r7, pc}

0801d5bc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b090      	sub	sp, #64	; 0x40
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	6078      	str	r0, [r7, #4]
 801d5c4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801d5c6:	f107 0108 	add.w	r1, r7, #8
 801d5ca:	1d3b      	adds	r3, r7, #4
 801d5cc:	2200      	movs	r2, #0
 801d5ce:	4618      	mov	r0, r3
 801d5d0:	f7fe fdee 	bl	801c1b0 <find_volume>
 801d5d4:	4603      	mov	r3, r0
 801d5d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801d5da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d11f      	bne.n	801d622 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d5e2:	687a      	ldr	r2, [r7, #4]
 801d5e4:	f107 0308 	add.w	r3, r7, #8
 801d5e8:	4611      	mov	r1, r2
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	f7fe fcd0 	bl	801bf90 <follow_path>
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801d5f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d111      	bne.n	801d622 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801d5fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d602:	b25b      	sxtb	r3, r3
 801d604:	2b00      	cmp	r3, #0
 801d606:	da03      	bge.n	801d610 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801d608:	2306      	movs	r3, #6
 801d60a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801d60e:	e008      	b.n	801d622 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801d610:	683b      	ldr	r3, [r7, #0]
 801d612:	2b00      	cmp	r3, #0
 801d614:	d005      	beq.n	801d622 <f_stat+0x66>
 801d616:	f107 0308 	add.w	r3, r7, #8
 801d61a:	6839      	ldr	r1, [r7, #0]
 801d61c:	4618      	mov	r0, r3
 801d61e:	f7fe fa21 	bl	801ba64 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801d622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801d626:	4618      	mov	r0, r3
 801d628:	3740      	adds	r7, #64	; 0x40
 801d62a:	46bd      	mov	sp, r7
 801d62c:	bd80      	pop	{r7, pc}

0801d62e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801d62e:	b580      	push	{r7, lr}
 801d630:	b092      	sub	sp, #72	; 0x48
 801d632:	af00      	add	r7, sp, #0
 801d634:	60f8      	str	r0, [r7, #12]
 801d636:	60b9      	str	r1, [r7, #8]
 801d638:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801d63a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801d63e:	f107 030c 	add.w	r3, r7, #12
 801d642:	2200      	movs	r2, #0
 801d644:	4618      	mov	r0, r3
 801d646:	f7fe fdb3 	bl	801c1b0 <find_volume>
 801d64a:	4603      	mov	r3, r0
 801d64c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801d650:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d654:	2b00      	cmp	r3, #0
 801d656:	f040 8099 	bne.w	801d78c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801d65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d662:	699a      	ldr	r2, [r3, #24]
 801d664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d666:	69db      	ldr	r3, [r3, #28]
 801d668:	3b02      	subs	r3, #2
 801d66a:	429a      	cmp	r2, r3
 801d66c:	d804      	bhi.n	801d678 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d670:	699a      	ldr	r2, [r3, #24]
 801d672:	68bb      	ldr	r3, [r7, #8]
 801d674:	601a      	str	r2, [r3, #0]
 801d676:	e089      	b.n	801d78c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801d678:	2300      	movs	r3, #0
 801d67a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d67e:	781b      	ldrb	r3, [r3, #0]
 801d680:	2b01      	cmp	r3, #1
 801d682:	d128      	bne.n	801d6d6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801d684:	2302      	movs	r3, #2
 801d686:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d68a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801d68c:	f107 0314 	add.w	r3, r7, #20
 801d690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d692:	4618      	mov	r0, r3
 801d694:	f7fd f845 	bl	801a722 <get_fat>
 801d698:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6a0:	d103      	bne.n	801d6aa <f_getfree+0x7c>
 801d6a2:	2301      	movs	r3, #1
 801d6a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801d6a8:	e063      	b.n	801d772 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6ac:	2b01      	cmp	r3, #1
 801d6ae:	d103      	bne.n	801d6b8 <f_getfree+0x8a>
 801d6b0:	2302      	movs	r3, #2
 801d6b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801d6b6:	e05c      	b.n	801d772 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801d6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d102      	bne.n	801d6c4 <f_getfree+0x96>
 801d6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d6c0:	3301      	adds	r3, #1
 801d6c2:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 801d6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6c6:	3301      	adds	r3, #1
 801d6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6cc:	69db      	ldr	r3, [r3, #28]
 801d6ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d6d0:	429a      	cmp	r2, r3
 801d6d2:	d3db      	bcc.n	801d68c <f_getfree+0x5e>
 801d6d4:	e04d      	b.n	801d772 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6d8:	69db      	ldr	r3, [r3, #28]
 801d6da:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6e0:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	637b      	str	r3, [r7, #52]	; 0x34
 801d6e6:	2300      	movs	r3, #0
 801d6e8:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801d6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d113      	bne.n	801d718 <f_getfree+0xea>
							res = move_window(fs, sect++);
 801d6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6f4:	1c5a      	adds	r2, r3, #1
 801d6f6:	63ba      	str	r2, [r7, #56]	; 0x38
 801d6f8:	4619      	mov	r1, r3
 801d6fa:	f7fc ff55 	bl	801a5a8 <move_window>
 801d6fe:	4603      	mov	r3, r0
 801d700:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801d704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d131      	bne.n	801d770 <f_getfree+0x142>
							p = fs->win;
 801d70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d70e:	3338      	adds	r3, #56	; 0x38
 801d710:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 801d712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d714:	899b      	ldrh	r3, [r3, #12]
 801d716:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d71a:	781b      	ldrb	r3, [r3, #0]
 801d71c:	2b02      	cmp	r3, #2
 801d71e:	d10f      	bne.n	801d740 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801d720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d722:	f7fc fc91 	bl	801a048 <ld_word>
 801d726:	4603      	mov	r3, r0
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d102      	bne.n	801d732 <f_getfree+0x104>
 801d72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d72e:	3301      	adds	r3, #1
 801d730:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d734:	3302      	adds	r3, #2
 801d736:	633b      	str	r3, [r7, #48]	; 0x30
 801d738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d73a:	3b02      	subs	r3, #2
 801d73c:	637b      	str	r3, [r7, #52]	; 0x34
 801d73e:	e010      	b.n	801d762 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801d740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d742:	f7fc fc99 	bl	801a078 <ld_dword>
 801d746:	4603      	mov	r3, r0
 801d748:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d102      	bne.n	801d756 <f_getfree+0x128>
 801d750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d752:	3301      	adds	r3, #1
 801d754:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d758:	3304      	adds	r3, #4
 801d75a:	633b      	str	r3, [r7, #48]	; 0x30
 801d75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d75e:	3b04      	subs	r3, #4
 801d760:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801d762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d764:	3b01      	subs	r3, #1
 801d766:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d1bd      	bne.n	801d6ea <f_getfree+0xbc>
 801d76e:	e000      	b.n	801d772 <f_getfree+0x144>
							if (res != FR_OK) break;
 801d770:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801d772:	68bb      	ldr	r3, [r7, #8]
 801d774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d776:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801d778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d77a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d77c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d780:	791a      	ldrb	r2, [r3, #4]
 801d782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d784:	f042 0201 	orr.w	r2, r2, #1
 801d788:	b2d2      	uxtb	r2, r2
 801d78a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801d78c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801d790:	4618      	mov	r0, r3
 801d792:	3748      	adds	r7, #72	; 0x48
 801d794:	46bd      	mov	sp, r7
 801d796:	bd80      	pop	{r7, pc}

0801d798 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d798:	b580      	push	{r7, lr}
 801d79a:	b0a0      	sub	sp, #128	; 0x80
 801d79c:	af00      	add	r7, sp, #0
 801d79e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d7a4:	f107 010c 	add.w	r1, r7, #12
 801d7a8:	1d3b      	adds	r3, r7, #4
 801d7aa:	2202      	movs	r2, #2
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	f7fe fcff 	bl	801c1b0 <find_volume>
 801d7b2:	4603      	mov	r3, r0
 801d7b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 801d7bc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	f040 808e 	bne.w	801d8e2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d7c6:	687a      	ldr	r2, [r7, #4]
 801d7c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d7cc:	4611      	mov	r1, r2
 801d7ce:	4618      	mov	r0, r3
 801d7d0:	f7fe fbde 	bl	801bf90 <follow_path>
 801d7d4:	4603      	mov	r3, r0
 801d7d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d7da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d108      	bne.n	801d7f4 <f_unlink+0x5c>
 801d7e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d7e6:	2102      	movs	r1, #2
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	f7fc fd2d 	bl	801a248 <chk_lock>
 801d7ee:	4603      	mov	r3, r0
 801d7f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801d7f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d172      	bne.n	801d8e2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801d7fc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d800:	b25b      	sxtb	r3, r3
 801d802:	2b00      	cmp	r3, #0
 801d804:	da03      	bge.n	801d80e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801d806:	2306      	movs	r3, #6
 801d808:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d80c:	e008      	b.n	801d820 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801d80e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801d812:	f003 0301 	and.w	r3, r3, #1
 801d816:	2b00      	cmp	r3, #0
 801d818:	d002      	beq.n	801d820 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801d81a:	2307      	movs	r3, #7
 801d81c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 801d820:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d824:	2b00      	cmp	r3, #0
 801d826:	d134      	bne.n	801d892 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d82c:	4611      	mov	r1, r2
 801d82e:	4618      	mov	r0, r3
 801d830:	f7fd fc42 	bl	801b0b8 <ld_clust>
 801d834:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801d836:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801d83a:	f003 0310 	and.w	r3, r3, #16
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d027      	beq.n	801d892 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801d846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d848:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801d84a:	f107 0310 	add.w	r3, r7, #16
 801d84e:	2100      	movs	r1, #0
 801d850:	4618      	mov	r0, r3
 801d852:	f7fd fa8b 	bl	801ad6c <dir_sdi>
 801d856:	4603      	mov	r3, r0
 801d858:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 801d85c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d860:	2b00      	cmp	r3, #0
 801d862:	d116      	bne.n	801d892 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801d864:	f107 0310 	add.w	r3, r7, #16
 801d868:	2100      	movs	r1, #0
 801d86a:	4618      	mov	r0, r3
 801d86c:	f7fd fe51 	bl	801b512 <dir_read>
 801d870:	4603      	mov	r3, r0
 801d872:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801d876:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d102      	bne.n	801d884 <f_unlink+0xec>
 801d87e:	2307      	movs	r3, #7
 801d880:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801d884:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d888:	2b04      	cmp	r3, #4
 801d88a:	d102      	bne.n	801d892 <f_unlink+0xfa>
 801d88c:	2300      	movs	r3, #0
 801d88e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801d892:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d896:	2b00      	cmp	r3, #0
 801d898:	d123      	bne.n	801d8e2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801d89a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f7fe f896 	bl	801b9d0 <dir_remove>
 801d8a4:	4603      	mov	r3, r0
 801d8a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801d8aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d10c      	bne.n	801d8cc <f_unlink+0x134>
 801d8b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d009      	beq.n	801d8cc <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801d8b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d8bc:	2200      	movs	r2, #0
 801d8be:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801d8c0:	4618      	mov	r0, r3
 801d8c2:	f7fd f91e 	bl	801ab02 <remove_chain>
 801d8c6:	4603      	mov	r3, r0
 801d8c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801d8cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d106      	bne.n	801d8e2 <f_unlink+0x14a>
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	4618      	mov	r0, r3
 801d8d8:	f7fc fe94 	bl	801a604 <sync_fs>
 801d8dc:	4603      	mov	r3, r0
 801d8de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801d8e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801d8e6:	4618      	mov	r0, r3
 801d8e8:	3780      	adds	r7, #128	; 0x80
 801d8ea:	46bd      	mov	sp, r7
 801d8ec:	bd80      	pop	{r7, pc}

0801d8ee <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801d8ee:	b580      	push	{r7, lr}
 801d8f0:	b084      	sub	sp, #16
 801d8f2:	af00      	add	r7, sp, #0
 801d8f4:	6078      	str	r0, [r7, #4]
 801d8f6:	460b      	mov	r3, r1
 801d8f8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801d8fa:	78fb      	ldrb	r3, [r7, #3]
 801d8fc:	2b0a      	cmp	r3, #10
 801d8fe:	d103      	bne.n	801d908 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801d900:	210d      	movs	r1, #13
 801d902:	6878      	ldr	r0, [r7, #4]
 801d904:	f7ff fff3 	bl	801d8ee <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	685b      	ldr	r3, [r3, #4]
 801d90c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	2b00      	cmp	r3, #0
 801d912:	db25      	blt.n	801d960 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	1c5a      	adds	r2, r3, #1
 801d918:	60fa      	str	r2, [r7, #12]
 801d91a:	687a      	ldr	r2, [r7, #4]
 801d91c:	4413      	add	r3, r2
 801d91e:	78fa      	ldrb	r2, [r7, #3]
 801d920:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	2b3c      	cmp	r3, #60	; 0x3c
 801d926:	dd12      	ble.n	801d94e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	6818      	ldr	r0, [r3, #0]
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	f103 010c 	add.w	r1, r3, #12
 801d932:	68fa      	ldr	r2, [r7, #12]
 801d934:	f107 0308 	add.w	r3, r7, #8
 801d938:	f7ff f90a 	bl	801cb50 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801d93c:	68ba      	ldr	r2, [r7, #8]
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	429a      	cmp	r2, r3
 801d942:	d101      	bne.n	801d948 <putc_bfd+0x5a>
 801d944:	2300      	movs	r3, #0
 801d946:	e001      	b.n	801d94c <putc_bfd+0x5e>
 801d948:	f04f 33ff 	mov.w	r3, #4294967295
 801d94c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	68fa      	ldr	r2, [r7, #12]
 801d952:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	689b      	ldr	r3, [r3, #8]
 801d958:	1c5a      	adds	r2, r3, #1
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	609a      	str	r2, [r3, #8]
 801d95e:	e000      	b.n	801d962 <putc_bfd+0x74>
	if (i < 0) return;
 801d960:	bf00      	nop
}
 801d962:	3710      	adds	r7, #16
 801d964:	46bd      	mov	sp, r7
 801d966:	bd80      	pop	{r7, pc}

0801d968 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801d968:	b580      	push	{r7, lr}
 801d96a:	b084      	sub	sp, #16
 801d96c:	af00      	add	r7, sp, #0
 801d96e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	685b      	ldr	r3, [r3, #4]
 801d974:	2b00      	cmp	r3, #0
 801d976:	db16      	blt.n	801d9a6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	6818      	ldr	r0, [r3, #0]
 801d97c:	687b      	ldr	r3, [r7, #4]
 801d97e:	f103 010c 	add.w	r1, r3, #12
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	685b      	ldr	r3, [r3, #4]
 801d986:	461a      	mov	r2, r3
 801d988:	f107 030c 	add.w	r3, r7, #12
 801d98c:	f7ff f8e0 	bl	801cb50 <f_write>
 801d990:	4603      	mov	r3, r0
 801d992:	2b00      	cmp	r3, #0
 801d994:	d107      	bne.n	801d9a6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	685b      	ldr	r3, [r3, #4]
 801d99a:	68fa      	ldr	r2, [r7, #12]
 801d99c:	4293      	cmp	r3, r2
 801d99e:	d102      	bne.n	801d9a6 <putc_flush+0x3e>
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	689b      	ldr	r3, [r3, #8]
 801d9a4:	e001      	b.n	801d9aa <putc_flush+0x42>
	return EOF;
 801d9a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d9aa:	4618      	mov	r0, r3
 801d9ac:	3710      	adds	r7, #16
 801d9ae:	46bd      	mov	sp, r7
 801d9b0:	bd80      	pop	{r7, pc}

0801d9b2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801d9b2:	b480      	push	{r7}
 801d9b4:	b083      	sub	sp, #12
 801d9b6:	af00      	add	r7, sp, #0
 801d9b8:	6078      	str	r0, [r7, #4]
 801d9ba:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	683a      	ldr	r2, [r7, #0]
 801d9c0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	2200      	movs	r2, #0
 801d9c6:	605a      	str	r2, [r3, #4]
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	685a      	ldr	r2, [r3, #4]
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	609a      	str	r2, [r3, #8]
}
 801d9d0:	bf00      	nop
 801d9d2:	370c      	adds	r7, #12
 801d9d4:	46bd      	mov	sp, r7
 801d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9da:	4770      	bx	lr

0801d9dc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801d9dc:	b580      	push	{r7, lr}
 801d9de:	b096      	sub	sp, #88	; 0x58
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	6078      	str	r0, [r7, #4]
 801d9e4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801d9e6:	f107 030c 	add.w	r3, r7, #12
 801d9ea:	6839      	ldr	r1, [r7, #0]
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	f7ff ffe0 	bl	801d9b2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801d9f2:	e009      	b.n	801da08 <f_puts+0x2c>
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	1c5a      	adds	r2, r3, #1
 801d9f8:	607a      	str	r2, [r7, #4]
 801d9fa:	781a      	ldrb	r2, [r3, #0]
 801d9fc:	f107 030c 	add.w	r3, r7, #12
 801da00:	4611      	mov	r1, r2
 801da02:	4618      	mov	r0, r3
 801da04:	f7ff ff73 	bl	801d8ee <putc_bfd>
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	781b      	ldrb	r3, [r3, #0]
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d1f1      	bne.n	801d9f4 <f_puts+0x18>
	return putc_flush(&pb);
 801da10:	f107 030c 	add.w	r3, r7, #12
 801da14:	4618      	mov	r0, r3
 801da16:	f7ff ffa7 	bl	801d968 <putc_flush>
 801da1a:	4603      	mov	r3, r0
}
 801da1c:	4618      	mov	r0, r3
 801da1e:	3758      	adds	r7, #88	; 0x58
 801da20:	46bd      	mov	sp, r7
 801da22:	bd80      	pop	{r7, pc}

0801da24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801da24:	b480      	push	{r7}
 801da26:	b087      	sub	sp, #28
 801da28:	af00      	add	r7, sp, #0
 801da2a:	60f8      	str	r0, [r7, #12]
 801da2c:	60b9      	str	r1, [r7, #8]
 801da2e:	4613      	mov	r3, r2
 801da30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801da32:	2301      	movs	r3, #1
 801da34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801da36:	2300      	movs	r3, #0
 801da38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801da3a:	4b1f      	ldr	r3, [pc, #124]	; (801dab8 <FATFS_LinkDriverEx+0x94>)
 801da3c:	7cdb      	ldrb	r3, [r3, #19]
 801da3e:	b2db      	uxtb	r3, r3
 801da40:	2b02      	cmp	r3, #2
 801da42:	d831      	bhi.n	801daa8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801da44:	4b1c      	ldr	r3, [pc, #112]	; (801dab8 <FATFS_LinkDriverEx+0x94>)
 801da46:	7cdb      	ldrb	r3, [r3, #19]
 801da48:	b2db      	uxtb	r3, r3
 801da4a:	461a      	mov	r2, r3
 801da4c:	4b1a      	ldr	r3, [pc, #104]	; (801dab8 <FATFS_LinkDriverEx+0x94>)
 801da4e:	2100      	movs	r1, #0
 801da50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801da52:	4b19      	ldr	r3, [pc, #100]	; (801dab8 <FATFS_LinkDriverEx+0x94>)
 801da54:	7cdb      	ldrb	r3, [r3, #19]
 801da56:	b2db      	uxtb	r3, r3
 801da58:	4a17      	ldr	r2, [pc, #92]	; (801dab8 <FATFS_LinkDriverEx+0x94>)
 801da5a:	009b      	lsls	r3, r3, #2
 801da5c:	4413      	add	r3, r2
 801da5e:	68fa      	ldr	r2, [r7, #12]
 801da60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801da62:	4b15      	ldr	r3, [pc, #84]	; (801dab8 <FATFS_LinkDriverEx+0x94>)
 801da64:	7cdb      	ldrb	r3, [r3, #19]
 801da66:	b2db      	uxtb	r3, r3
 801da68:	461a      	mov	r2, r3
 801da6a:	4b13      	ldr	r3, [pc, #76]	; (801dab8 <FATFS_LinkDriverEx+0x94>)
 801da6c:	4413      	add	r3, r2
 801da6e:	79fa      	ldrb	r2, [r7, #7]
 801da70:	741a      	strb	r2, [r3, #16]
    DiskNum = disk.nbr++;
 801da72:	4b11      	ldr	r3, [pc, #68]	; (801dab8 <FATFS_LinkDriverEx+0x94>)
 801da74:	7cdb      	ldrb	r3, [r3, #19]
 801da76:	b2db      	uxtb	r3, r3
 801da78:	1c5a      	adds	r2, r3, #1
 801da7a:	b2d1      	uxtb	r1, r2
 801da7c:	4a0e      	ldr	r2, [pc, #56]	; (801dab8 <FATFS_LinkDriverEx+0x94>)
 801da7e:	74d1      	strb	r1, [r2, #19]
 801da80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801da82:	7dbb      	ldrb	r3, [r7, #22]
 801da84:	3330      	adds	r3, #48	; 0x30
 801da86:	b2da      	uxtb	r2, r3
 801da88:	68bb      	ldr	r3, [r7, #8]
 801da8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801da8c:	68bb      	ldr	r3, [r7, #8]
 801da8e:	3301      	adds	r3, #1
 801da90:	223a      	movs	r2, #58	; 0x3a
 801da92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801da94:	68bb      	ldr	r3, [r7, #8]
 801da96:	3302      	adds	r3, #2
 801da98:	222f      	movs	r2, #47	; 0x2f
 801da9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801da9c:	68bb      	ldr	r3, [r7, #8]
 801da9e:	3303      	adds	r3, #3
 801daa0:	2200      	movs	r2, #0
 801daa2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801daa4:	2300      	movs	r3, #0
 801daa6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801daa8:	7dfb      	ldrb	r3, [r7, #23]
}
 801daaa:	4618      	mov	r0, r3
 801daac:	371c      	adds	r7, #28
 801daae:	46bd      	mov	sp, r7
 801dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dab4:	4770      	bx	lr
 801dab6:	bf00      	nop
 801dab8:	20000df8 	.word	0x20000df8

0801dabc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801dabc:	b580      	push	{r7, lr}
 801dabe:	b082      	sub	sp, #8
 801dac0:	af00      	add	r7, sp, #0
 801dac2:	6078      	str	r0, [r7, #4]
 801dac4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801dac6:	2200      	movs	r2, #0
 801dac8:	6839      	ldr	r1, [r7, #0]
 801daca:	6878      	ldr	r0, [r7, #4]
 801dacc:	f7ff ffaa 	bl	801da24 <FATFS_LinkDriverEx>
 801dad0:	4603      	mov	r3, r0
}
 801dad2:	4618      	mov	r0, r3
 801dad4:	3708      	adds	r7, #8
 801dad6:	46bd      	mov	sp, r7
 801dad8:	bd80      	pop	{r7, pc}
	...

0801dadc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801dadc:	b480      	push	{r7}
 801dade:	b085      	sub	sp, #20
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	4603      	mov	r3, r0
 801dae4:	6039      	str	r1, [r7, #0]
 801dae6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801dae8:	88fb      	ldrh	r3, [r7, #6]
 801daea:	2b7f      	cmp	r3, #127	; 0x7f
 801daec:	d802      	bhi.n	801daf4 <ff_convert+0x18>
		c = chr;
 801daee:	88fb      	ldrh	r3, [r7, #6]
 801daf0:	81fb      	strh	r3, [r7, #14]
 801daf2:	e025      	b.n	801db40 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801daf4:	683b      	ldr	r3, [r7, #0]
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d00b      	beq.n	801db12 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801dafa:	88fb      	ldrh	r3, [r7, #6]
 801dafc:	2bff      	cmp	r3, #255	; 0xff
 801dafe:	d805      	bhi.n	801db0c <ff_convert+0x30>
 801db00:	88fb      	ldrh	r3, [r7, #6]
 801db02:	3b80      	subs	r3, #128	; 0x80
 801db04:	4a12      	ldr	r2, [pc, #72]	; (801db50 <ff_convert+0x74>)
 801db06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801db0a:	e000      	b.n	801db0e <ff_convert+0x32>
 801db0c:	2300      	movs	r3, #0
 801db0e:	81fb      	strh	r3, [r7, #14]
 801db10:	e016      	b.n	801db40 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801db12:	2300      	movs	r3, #0
 801db14:	81fb      	strh	r3, [r7, #14]
 801db16:	e009      	b.n	801db2c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801db18:	89fb      	ldrh	r3, [r7, #14]
 801db1a:	4a0d      	ldr	r2, [pc, #52]	; (801db50 <ff_convert+0x74>)
 801db1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801db20:	88fa      	ldrh	r2, [r7, #6]
 801db22:	429a      	cmp	r2, r3
 801db24:	d006      	beq.n	801db34 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801db26:	89fb      	ldrh	r3, [r7, #14]
 801db28:	3301      	adds	r3, #1
 801db2a:	81fb      	strh	r3, [r7, #14]
 801db2c:	89fb      	ldrh	r3, [r7, #14]
 801db2e:	2b7f      	cmp	r3, #127	; 0x7f
 801db30:	d9f2      	bls.n	801db18 <ff_convert+0x3c>
 801db32:	e000      	b.n	801db36 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801db34:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801db36:	89fb      	ldrh	r3, [r7, #14]
 801db38:	3380      	adds	r3, #128	; 0x80
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	b2db      	uxtb	r3, r3
 801db3e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801db40:	89fb      	ldrh	r3, [r7, #14]
}
 801db42:	4618      	mov	r0, r3
 801db44:	3714      	adds	r7, #20
 801db46:	46bd      	mov	sp, r7
 801db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db4c:	4770      	bx	lr
 801db4e:	bf00      	nop
 801db50:	08023f2c 	.word	0x08023f2c

0801db54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801db54:	b480      	push	{r7}
 801db56:	b087      	sub	sp, #28
 801db58:	af00      	add	r7, sp, #0
 801db5a:	4603      	mov	r3, r0
 801db5c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801db5e:	88fb      	ldrh	r3, [r7, #6]
 801db60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801db64:	d201      	bcs.n	801db6a <ff_wtoupper+0x16>
 801db66:	4b3e      	ldr	r3, [pc, #248]	; (801dc60 <ff_wtoupper+0x10c>)
 801db68:	e000      	b.n	801db6c <ff_wtoupper+0x18>
 801db6a:	4b3e      	ldr	r3, [pc, #248]	; (801dc64 <ff_wtoupper+0x110>)
 801db6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801db6e:	697b      	ldr	r3, [r7, #20]
 801db70:	1c9a      	adds	r2, r3, #2
 801db72:	617a      	str	r2, [r7, #20]
 801db74:	881b      	ldrh	r3, [r3, #0]
 801db76:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801db78:	8a7b      	ldrh	r3, [r7, #18]
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	d068      	beq.n	801dc50 <ff_wtoupper+0xfc>
 801db7e:	88fa      	ldrh	r2, [r7, #6]
 801db80:	8a7b      	ldrh	r3, [r7, #18]
 801db82:	429a      	cmp	r2, r3
 801db84:	d364      	bcc.n	801dc50 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801db86:	697b      	ldr	r3, [r7, #20]
 801db88:	1c9a      	adds	r2, r3, #2
 801db8a:	617a      	str	r2, [r7, #20]
 801db8c:	881b      	ldrh	r3, [r3, #0]
 801db8e:	823b      	strh	r3, [r7, #16]
 801db90:	8a3b      	ldrh	r3, [r7, #16]
 801db92:	0a1b      	lsrs	r3, r3, #8
 801db94:	81fb      	strh	r3, [r7, #14]
 801db96:	8a3b      	ldrh	r3, [r7, #16]
 801db98:	b2db      	uxtb	r3, r3
 801db9a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801db9c:	88fa      	ldrh	r2, [r7, #6]
 801db9e:	8a79      	ldrh	r1, [r7, #18]
 801dba0:	8a3b      	ldrh	r3, [r7, #16]
 801dba2:	440b      	add	r3, r1
 801dba4:	429a      	cmp	r2, r3
 801dba6:	da49      	bge.n	801dc3c <ff_wtoupper+0xe8>
			switch (cmd) {
 801dba8:	89fb      	ldrh	r3, [r7, #14]
 801dbaa:	2b08      	cmp	r3, #8
 801dbac:	d84f      	bhi.n	801dc4e <ff_wtoupper+0xfa>
 801dbae:	a201      	add	r2, pc, #4	; (adr r2, 801dbb4 <ff_wtoupper+0x60>)
 801dbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbb4:	0801dbd9 	.word	0x0801dbd9
 801dbb8:	0801dbeb 	.word	0x0801dbeb
 801dbbc:	0801dc01 	.word	0x0801dc01
 801dbc0:	0801dc09 	.word	0x0801dc09
 801dbc4:	0801dc11 	.word	0x0801dc11
 801dbc8:	0801dc19 	.word	0x0801dc19
 801dbcc:	0801dc21 	.word	0x0801dc21
 801dbd0:	0801dc29 	.word	0x0801dc29
 801dbd4:	0801dc31 	.word	0x0801dc31
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801dbd8:	88fa      	ldrh	r2, [r7, #6]
 801dbda:	8a7b      	ldrh	r3, [r7, #18]
 801dbdc:	1ad3      	subs	r3, r2, r3
 801dbde:	005b      	lsls	r3, r3, #1
 801dbe0:	697a      	ldr	r2, [r7, #20]
 801dbe2:	4413      	add	r3, r2
 801dbe4:	881b      	ldrh	r3, [r3, #0]
 801dbe6:	80fb      	strh	r3, [r7, #6]
 801dbe8:	e027      	b.n	801dc3a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801dbea:	88fa      	ldrh	r2, [r7, #6]
 801dbec:	8a7b      	ldrh	r3, [r7, #18]
 801dbee:	1ad3      	subs	r3, r2, r3
 801dbf0:	b29b      	uxth	r3, r3
 801dbf2:	f003 0301 	and.w	r3, r3, #1
 801dbf6:	b29b      	uxth	r3, r3
 801dbf8:	88fa      	ldrh	r2, [r7, #6]
 801dbfa:	1ad3      	subs	r3, r2, r3
 801dbfc:	80fb      	strh	r3, [r7, #6]
 801dbfe:	e01c      	b.n	801dc3a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801dc00:	88fb      	ldrh	r3, [r7, #6]
 801dc02:	3b10      	subs	r3, #16
 801dc04:	80fb      	strh	r3, [r7, #6]
 801dc06:	e018      	b.n	801dc3a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801dc08:	88fb      	ldrh	r3, [r7, #6]
 801dc0a:	3b20      	subs	r3, #32
 801dc0c:	80fb      	strh	r3, [r7, #6]
 801dc0e:	e014      	b.n	801dc3a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801dc10:	88fb      	ldrh	r3, [r7, #6]
 801dc12:	3b30      	subs	r3, #48	; 0x30
 801dc14:	80fb      	strh	r3, [r7, #6]
 801dc16:	e010      	b.n	801dc3a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801dc18:	88fb      	ldrh	r3, [r7, #6]
 801dc1a:	3b1a      	subs	r3, #26
 801dc1c:	80fb      	strh	r3, [r7, #6]
 801dc1e:	e00c      	b.n	801dc3a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801dc20:	88fb      	ldrh	r3, [r7, #6]
 801dc22:	3308      	adds	r3, #8
 801dc24:	80fb      	strh	r3, [r7, #6]
 801dc26:	e008      	b.n	801dc3a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801dc28:	88fb      	ldrh	r3, [r7, #6]
 801dc2a:	3b50      	subs	r3, #80	; 0x50
 801dc2c:	80fb      	strh	r3, [r7, #6]
 801dc2e:	e004      	b.n	801dc3a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801dc30:	88fb      	ldrh	r3, [r7, #6]
 801dc32:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801dc36:	80fb      	strh	r3, [r7, #6]
 801dc38:	bf00      	nop
			}
			break;
 801dc3a:	e008      	b.n	801dc4e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801dc3c:	89fb      	ldrh	r3, [r7, #14]
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d195      	bne.n	801db6e <ff_wtoupper+0x1a>
 801dc42:	8a3b      	ldrh	r3, [r7, #16]
 801dc44:	005b      	lsls	r3, r3, #1
 801dc46:	697a      	ldr	r2, [r7, #20]
 801dc48:	4413      	add	r3, r2
 801dc4a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801dc4c:	e78f      	b.n	801db6e <ff_wtoupper+0x1a>
			break;
 801dc4e:	bf00      	nop
	}

	return chr;
 801dc50:	88fb      	ldrh	r3, [r7, #6]
}
 801dc52:	4618      	mov	r0, r3
 801dc54:	371c      	adds	r7, #28
 801dc56:	46bd      	mov	sp, r7
 801dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc5c:	4770      	bx	lr
 801dc5e:	bf00      	nop
 801dc60:	0802402c 	.word	0x0802402c
 801dc64:	08024220 	.word	0x08024220

0801dc68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801dc68:	b580      	push	{r7, lr}
 801dc6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801dc6c:	2201      	movs	r2, #1
 801dc6e:	490e      	ldr	r1, [pc, #56]	; (801dca8 <MX_USB_HOST_Init+0x40>)
 801dc70:	480e      	ldr	r0, [pc, #56]	; (801dcac <MX_USB_HOST_Init+0x44>)
 801dc72:	f7fa fdf3 	bl	801885c <USBH_Init>
 801dc76:	4603      	mov	r3, r0
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d001      	beq.n	801dc80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801dc7c:	f7e9 f888 	bl	8006d90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 801dc80:	490b      	ldr	r1, [pc, #44]	; (801dcb0 <MX_USB_HOST_Init+0x48>)
 801dc82:	480a      	ldr	r0, [pc, #40]	; (801dcac <MX_USB_HOST_Init+0x44>)
 801dc84:	f7fa fe78 	bl	8018978 <USBH_RegisterClass>
 801dc88:	4603      	mov	r3, r0
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	d001      	beq.n	801dc92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801dc8e:	f7e9 f87f 	bl	8006d90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801dc92:	4806      	ldr	r0, [pc, #24]	; (801dcac <MX_USB_HOST_Init+0x44>)
 801dc94:	f7fa fefc 	bl	8018a90 <USBH_Start>
 801dc98:	4603      	mov	r3, r0
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d001      	beq.n	801dca2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801dc9e:	f7e9 f877 	bl	8006d90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801dca2:	bf00      	nop
 801dca4:	bd80      	pop	{r7, pc}
 801dca6:	bf00      	nop
 801dca8:	0801dcc9 	.word	0x0801dcc9
 801dcac:	2000865c 	.word	0x2000865c
 801dcb0:	2000007c 	.word	0x2000007c

0801dcb4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801dcb4:	b580      	push	{r7, lr}
 801dcb6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801dcb8:	4802      	ldr	r0, [pc, #8]	; (801dcc4 <MX_USB_HOST_Process+0x10>)
 801dcba:	f7fa fef9 	bl	8018ab0 <USBH_Process>
}
 801dcbe:	bf00      	nop
 801dcc0:	bd80      	pop	{r7, pc}
 801dcc2:	bf00      	nop
 801dcc4:	2000865c 	.word	0x2000865c

0801dcc8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801dcc8:	b480      	push	{r7}
 801dcca:	b083      	sub	sp, #12
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
 801dcd0:	460b      	mov	r3, r1
 801dcd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801dcd4:	78fb      	ldrb	r3, [r7, #3]
 801dcd6:	3b01      	subs	r3, #1
 801dcd8:	2b04      	cmp	r3, #4
 801dcda:	d819      	bhi.n	801dd10 <USBH_UserProcess+0x48>
 801dcdc:	a201      	add	r2, pc, #4	; (adr r2, 801dce4 <USBH_UserProcess+0x1c>)
 801dcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dce2:	bf00      	nop
 801dce4:	0801dd11 	.word	0x0801dd11
 801dce8:	0801dd01 	.word	0x0801dd01
 801dcec:	0801dd11 	.word	0x0801dd11
 801dcf0:	0801dd09 	.word	0x0801dd09
 801dcf4:	0801dcf9 	.word	0x0801dcf9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801dcf8:	4b09      	ldr	r3, [pc, #36]	; (801dd20 <USBH_UserProcess+0x58>)
 801dcfa:	2203      	movs	r2, #3
 801dcfc:	701a      	strb	r2, [r3, #0]
  break;
 801dcfe:	e008      	b.n	801dd12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801dd00:	4b07      	ldr	r3, [pc, #28]	; (801dd20 <USBH_UserProcess+0x58>)
 801dd02:	2202      	movs	r2, #2
 801dd04:	701a      	strb	r2, [r3, #0]
  break;
 801dd06:	e004      	b.n	801dd12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801dd08:	4b05      	ldr	r3, [pc, #20]	; (801dd20 <USBH_UserProcess+0x58>)
 801dd0a:	2201      	movs	r2, #1
 801dd0c:	701a      	strb	r2, [r3, #0]
  break;
 801dd0e:	e000      	b.n	801dd12 <USBH_UserProcess+0x4a>

  default:
  break;
 801dd10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801dd12:	bf00      	nop
 801dd14:	370c      	adds	r7, #12
 801dd16:	46bd      	mov	sp, r7
 801dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd1c:	4770      	bx	lr
 801dd1e:	bf00      	nop
 801dd20:	20000e0c 	.word	0x20000e0c

0801dd24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b08a      	sub	sp, #40	; 0x28
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dd2c:	f107 0314 	add.w	r3, r7, #20
 801dd30:	2200      	movs	r2, #0
 801dd32:	601a      	str	r2, [r3, #0]
 801dd34:	605a      	str	r2, [r3, #4]
 801dd36:	609a      	str	r2, [r3, #8]
 801dd38:	60da      	str	r2, [r3, #12]
 801dd3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801dd44:	d13c      	bne.n	801ddc0 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801dd46:	4b20      	ldr	r3, [pc, #128]	; (801ddc8 <HAL_HCD_MspInit+0xa4>)
 801dd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd4a:	4a1f      	ldr	r2, [pc, #124]	; (801ddc8 <HAL_HCD_MspInit+0xa4>)
 801dd4c:	f043 0301 	orr.w	r3, r3, #1
 801dd50:	6313      	str	r3, [r2, #48]	; 0x30
 801dd52:	4b1d      	ldr	r3, [pc, #116]	; (801ddc8 <HAL_HCD_MspInit+0xa4>)
 801dd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd56:	f003 0301 	and.w	r3, r3, #1
 801dd5a:	613b      	str	r3, [r7, #16]
 801dd5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801dd5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801dd62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dd64:	2302      	movs	r3, #2
 801dd66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd68:	2300      	movs	r3, #0
 801dd6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dd6c:	2303      	movs	r3, #3
 801dd6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801dd70:	230a      	movs	r3, #10
 801dd72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dd74:	f107 0314 	add.w	r3, r7, #20
 801dd78:	4619      	mov	r1, r3
 801dd7a:	4814      	ldr	r0, [pc, #80]	; (801ddcc <HAL_HCD_MspInit+0xa8>)
 801dd7c:	f7eb fc80 	bl	8009680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801dd80:	4b11      	ldr	r3, [pc, #68]	; (801ddc8 <HAL_HCD_MspInit+0xa4>)
 801dd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dd84:	4a10      	ldr	r2, [pc, #64]	; (801ddc8 <HAL_HCD_MspInit+0xa4>)
 801dd86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd8a:	6353      	str	r3, [r2, #52]	; 0x34
 801dd8c:	4b0e      	ldr	r3, [pc, #56]	; (801ddc8 <HAL_HCD_MspInit+0xa4>)
 801dd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dd90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801dd94:	60fb      	str	r3, [r7, #12]
 801dd96:	68fb      	ldr	r3, [r7, #12]
 801dd98:	4b0b      	ldr	r3, [pc, #44]	; (801ddc8 <HAL_HCD_MspInit+0xa4>)
 801dd9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dd9c:	4a0a      	ldr	r2, [pc, #40]	; (801ddc8 <HAL_HCD_MspInit+0xa4>)
 801dd9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801dda2:	6453      	str	r3, [r2, #68]	; 0x44
 801dda4:	4b08      	ldr	r3, [pc, #32]	; (801ddc8 <HAL_HCD_MspInit+0xa4>)
 801dda6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dda8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ddac:	60bb      	str	r3, [r7, #8]
 801ddae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801ddb0:	2200      	movs	r2, #0
 801ddb2:	2100      	movs	r1, #0
 801ddb4:	2043      	movs	r0, #67	; 0x43
 801ddb6:	f7ea fc28 	bl	800860a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801ddba:	2043      	movs	r0, #67	; 0x43
 801ddbc:	f7ea fc41 	bl	8008642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801ddc0:	bf00      	nop
 801ddc2:	3728      	adds	r7, #40	; 0x28
 801ddc4:	46bd      	mov	sp, r7
 801ddc6:	bd80      	pop	{r7, pc}
 801ddc8:	40023800 	.word	0x40023800
 801ddcc:	40020000 	.word	0x40020000

0801ddd0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801ddd0:	b580      	push	{r7, lr}
 801ddd2:	b082      	sub	sp, #8
 801ddd4:	af00      	add	r7, sp, #0
 801ddd6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7fb fa39 	bl	8019256 <USBH_LL_IncTimer>
}
 801dde4:	bf00      	nop
 801dde6:	3708      	adds	r7, #8
 801dde8:	46bd      	mov	sp, r7
 801ddea:	bd80      	pop	{r7, pc}

0801ddec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801ddec:	b580      	push	{r7, lr}
 801ddee:	b082      	sub	sp, #8
 801ddf0:	af00      	add	r7, sp, #0
 801ddf2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	f7fb fa71 	bl	80192e2 <USBH_LL_Connect>
}
 801de00:	bf00      	nop
 801de02:	3708      	adds	r7, #8
 801de04:	46bd      	mov	sp, r7
 801de06:	bd80      	pop	{r7, pc}

0801de08 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801de08:	b580      	push	{r7, lr}
 801de0a:	b082      	sub	sp, #8
 801de0c:	af00      	add	r7, sp, #0
 801de0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801de16:	4618      	mov	r0, r3
 801de18:	f7fb fa7a 	bl	8019310 <USBH_LL_Disconnect>
}
 801de1c:	bf00      	nop
 801de1e:	3708      	adds	r7, #8
 801de20:	46bd      	mov	sp, r7
 801de22:	bd80      	pop	{r7, pc}

0801de24 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801de24:	b480      	push	{r7}
 801de26:	b083      	sub	sp, #12
 801de28:	af00      	add	r7, sp, #0
 801de2a:	6078      	str	r0, [r7, #4]
 801de2c:	460b      	mov	r3, r1
 801de2e:	70fb      	strb	r3, [r7, #3]
 801de30:	4613      	mov	r3, r2
 801de32:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801de34:	bf00      	nop
 801de36:	370c      	adds	r7, #12
 801de38:	46bd      	mov	sp, r7
 801de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de3e:	4770      	bx	lr

0801de40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801de40:	b580      	push	{r7, lr}
 801de42:	b082      	sub	sp, #8
 801de44:	af00      	add	r7, sp, #0
 801de46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801de4e:	4618      	mov	r0, r3
 801de50:	f7fb fa2b 	bl	80192aa <USBH_LL_PortEnabled>
} 
 801de54:	bf00      	nop
 801de56:	3708      	adds	r7, #8
 801de58:	46bd      	mov	sp, r7
 801de5a:	bd80      	pop	{r7, pc}

0801de5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801de5c:	b580      	push	{r7, lr}
 801de5e:	b082      	sub	sp, #8
 801de60:	af00      	add	r7, sp, #0
 801de62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801de6a:	4618      	mov	r0, r3
 801de6c:	f7fb fa2b 	bl	80192c6 <USBH_LL_PortDisabled>
} 
 801de70:	bf00      	nop
 801de72:	3708      	adds	r7, #8
 801de74:	46bd      	mov	sp, r7
 801de76:	bd80      	pop	{r7, pc}

0801de78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801de78:	b580      	push	{r7, lr}
 801de7a:	b082      	sub	sp, #8
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801de86:	2b01      	cmp	r3, #1
 801de88:	d12a      	bne.n	801dee0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801de8a:	4a18      	ldr	r2, [pc, #96]	; (801deec <USBH_LL_Init+0x74>)
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	4a15      	ldr	r2, [pc, #84]	; (801deec <USBH_LL_Init+0x74>)
 801de96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801de9a:	4b14      	ldr	r3, [pc, #80]	; (801deec <USBH_LL_Init+0x74>)
 801de9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801dea0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801dea2:	4b12      	ldr	r3, [pc, #72]	; (801deec <USBH_LL_Init+0x74>)
 801dea4:	2208      	movs	r2, #8
 801dea6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801dea8:	4b10      	ldr	r3, [pc, #64]	; (801deec <USBH_LL_Init+0x74>)
 801deaa:	2201      	movs	r2, #1
 801deac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801deae:	4b0f      	ldr	r3, [pc, #60]	; (801deec <USBH_LL_Init+0x74>)
 801deb0:	2200      	movs	r2, #0
 801deb2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801deb4:	4b0d      	ldr	r3, [pc, #52]	; (801deec <USBH_LL_Init+0x74>)
 801deb6:	2202      	movs	r2, #2
 801deb8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801deba:	4b0c      	ldr	r3, [pc, #48]	; (801deec <USBH_LL_Init+0x74>)
 801debc:	2200      	movs	r2, #0
 801debe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801dec0:	480a      	ldr	r0, [pc, #40]	; (801deec <USBH_LL_Init+0x74>)
 801dec2:	f7eb fded 	bl	8009aa0 <HAL_HCD_Init>
 801dec6:	4603      	mov	r3, r0
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d001      	beq.n	801ded0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801decc:	f7e8 ff60 	bl	8006d90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801ded0:	4806      	ldr	r0, [pc, #24]	; (801deec <USBH_LL_Init+0x74>)
 801ded2:	f7ec f9f1 	bl	800a2b8 <HAL_HCD_GetCurrentFrame>
 801ded6:	4603      	mov	r3, r0
 801ded8:	4619      	mov	r1, r3
 801deda:	6878      	ldr	r0, [r7, #4]
 801dedc:	f7fb f9ac 	bl	8019238 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801dee0:	2300      	movs	r3, #0
}
 801dee2:	4618      	mov	r0, r3
 801dee4:	3708      	adds	r7, #8
 801dee6:	46bd      	mov	sp, r7
 801dee8:	bd80      	pop	{r7, pc}
 801deea:	bf00      	nop
 801deec:	20019a74 	.word	0x20019a74

0801def0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801def0:	b580      	push	{r7, lr}
 801def2:	b084      	sub	sp, #16
 801def4:	af00      	add	r7, sp, #0
 801def6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801def8:	2300      	movs	r3, #0
 801defa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801defc:	2300      	movs	r3, #0
 801defe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801df06:	4618      	mov	r0, r3
 801df08:	f7ec f95e 	bl	800a1c8 <HAL_HCD_Start>
 801df0c:	4603      	mov	r3, r0
 801df0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801df10:	7bfb      	ldrb	r3, [r7, #15]
 801df12:	4618      	mov	r0, r3
 801df14:	f000 f992 	bl	801e23c <USBH_Get_USB_Status>
 801df18:	4603      	mov	r3, r0
 801df1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801df1c:	7bbb      	ldrb	r3, [r7, #14]
}
 801df1e:	4618      	mov	r0, r3
 801df20:	3710      	adds	r7, #16
 801df22:	46bd      	mov	sp, r7
 801df24:	bd80      	pop	{r7, pc}

0801df26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801df26:	b580      	push	{r7, lr}
 801df28:	b084      	sub	sp, #16
 801df2a:	af00      	add	r7, sp, #0
 801df2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801df2e:	2300      	movs	r3, #0
 801df30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801df32:	2300      	movs	r3, #0
 801df34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801df3c:	4618      	mov	r0, r3
 801df3e:	f7ec f966 	bl	800a20e <HAL_HCD_Stop>
 801df42:	4603      	mov	r3, r0
 801df44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801df46:	7bfb      	ldrb	r3, [r7, #15]
 801df48:	4618      	mov	r0, r3
 801df4a:	f000 f977 	bl	801e23c <USBH_Get_USB_Status>
 801df4e:	4603      	mov	r3, r0
 801df50:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801df52:	7bbb      	ldrb	r3, [r7, #14]
}
 801df54:	4618      	mov	r0, r3
 801df56:	3710      	adds	r7, #16
 801df58:	46bd      	mov	sp, r7
 801df5a:	bd80      	pop	{r7, pc}

0801df5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b084      	sub	sp, #16
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801df64:	2301      	movs	r3, #1
 801df66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801df68:	687b      	ldr	r3, [r7, #4]
 801df6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801df6e:	4618      	mov	r0, r3
 801df70:	f7ec f9b0 	bl	800a2d4 <HAL_HCD_GetCurrentSpeed>
 801df74:	4603      	mov	r3, r0
 801df76:	2b02      	cmp	r3, #2
 801df78:	d00c      	beq.n	801df94 <USBH_LL_GetSpeed+0x38>
 801df7a:	2b02      	cmp	r3, #2
 801df7c:	d80d      	bhi.n	801df9a <USBH_LL_GetSpeed+0x3e>
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d002      	beq.n	801df88 <USBH_LL_GetSpeed+0x2c>
 801df82:	2b01      	cmp	r3, #1
 801df84:	d003      	beq.n	801df8e <USBH_LL_GetSpeed+0x32>
 801df86:	e008      	b.n	801df9a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801df88:	2300      	movs	r3, #0
 801df8a:	73fb      	strb	r3, [r7, #15]
    break;
 801df8c:	e008      	b.n	801dfa0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801df8e:	2301      	movs	r3, #1
 801df90:	73fb      	strb	r3, [r7, #15]
    break;
 801df92:	e005      	b.n	801dfa0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801df94:	2302      	movs	r3, #2
 801df96:	73fb      	strb	r3, [r7, #15]
    break;
 801df98:	e002      	b.n	801dfa0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801df9a:	2301      	movs	r3, #1
 801df9c:	73fb      	strb	r3, [r7, #15]
    break;
 801df9e:	bf00      	nop
  }
  return  speed;
 801dfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	3710      	adds	r7, #16
 801dfa6:	46bd      	mov	sp, r7
 801dfa8:	bd80      	pop	{r7, pc}

0801dfaa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801dfaa:	b580      	push	{r7, lr}
 801dfac:	b084      	sub	sp, #16
 801dfae:	af00      	add	r7, sp, #0
 801dfb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dfb2:	2300      	movs	r3, #0
 801dfb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801dfb6:	2300      	movs	r3, #0
 801dfb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	f7ec f941 	bl	800a248 <HAL_HCD_ResetPort>
 801dfc6:	4603      	mov	r3, r0
 801dfc8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801dfca:	7bfb      	ldrb	r3, [r7, #15]
 801dfcc:	4618      	mov	r0, r3
 801dfce:	f000 f935 	bl	801e23c <USBH_Get_USB_Status>
 801dfd2:	4603      	mov	r3, r0
 801dfd4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801dfd6:	7bbb      	ldrb	r3, [r7, #14]
}
 801dfd8:	4618      	mov	r0, r3
 801dfda:	3710      	adds	r7, #16
 801dfdc:	46bd      	mov	sp, r7
 801dfde:	bd80      	pop	{r7, pc}

0801dfe0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801dfe0:	b580      	push	{r7, lr}
 801dfe2:	b082      	sub	sp, #8
 801dfe4:	af00      	add	r7, sp, #0
 801dfe6:	6078      	str	r0, [r7, #4]
 801dfe8:	460b      	mov	r3, r1
 801dfea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dff2:	78fa      	ldrb	r2, [r7, #3]
 801dff4:	4611      	mov	r1, r2
 801dff6:	4618      	mov	r0, r3
 801dff8:	f7ec f949 	bl	800a28e <HAL_HCD_HC_GetXferCount>
 801dffc:	4603      	mov	r3, r0
}
 801dffe:	4618      	mov	r0, r3
 801e000:	3708      	adds	r7, #8
 801e002:	46bd      	mov	sp, r7
 801e004:	bd80      	pop	{r7, pc}

0801e006 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801e006:	b590      	push	{r4, r7, lr}
 801e008:	b089      	sub	sp, #36	; 0x24
 801e00a:	af04      	add	r7, sp, #16
 801e00c:	6078      	str	r0, [r7, #4]
 801e00e:	4608      	mov	r0, r1
 801e010:	4611      	mov	r1, r2
 801e012:	461a      	mov	r2, r3
 801e014:	4603      	mov	r3, r0
 801e016:	70fb      	strb	r3, [r7, #3]
 801e018:	460b      	mov	r3, r1
 801e01a:	70bb      	strb	r3, [r7, #2]
 801e01c:	4613      	mov	r3, r2
 801e01e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e020:	2300      	movs	r3, #0
 801e022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801e024:	2300      	movs	r3, #0
 801e026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801e02e:	787c      	ldrb	r4, [r7, #1]
 801e030:	78ba      	ldrb	r2, [r7, #2]
 801e032:	78f9      	ldrb	r1, [r7, #3]
 801e034:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801e036:	9302      	str	r3, [sp, #8]
 801e038:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e03c:	9301      	str	r3, [sp, #4]
 801e03e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e042:	9300      	str	r3, [sp, #0]
 801e044:	4623      	mov	r3, r4
 801e046:	f7eb fd8d 	bl	8009b64 <HAL_HCD_HC_Init>
 801e04a:	4603      	mov	r3, r0
 801e04c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801e04e:	7bfb      	ldrb	r3, [r7, #15]
 801e050:	4618      	mov	r0, r3
 801e052:	f000 f8f3 	bl	801e23c <USBH_Get_USB_Status>
 801e056:	4603      	mov	r3, r0
 801e058:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801e05a:	7bbb      	ldrb	r3, [r7, #14]
}
 801e05c:	4618      	mov	r0, r3
 801e05e:	3714      	adds	r7, #20
 801e060:	46bd      	mov	sp, r7
 801e062:	bd90      	pop	{r4, r7, pc}

0801e064 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801e064:	b580      	push	{r7, lr}
 801e066:	b084      	sub	sp, #16
 801e068:	af00      	add	r7, sp, #0
 801e06a:	6078      	str	r0, [r7, #4]
 801e06c:	460b      	mov	r3, r1
 801e06e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e070:	2300      	movs	r3, #0
 801e072:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801e074:	2300      	movs	r3, #0
 801e076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801e07e:	78fa      	ldrb	r2, [r7, #3]
 801e080:	4611      	mov	r1, r2
 801e082:	4618      	mov	r0, r3
 801e084:	f7eb fe06 	bl	8009c94 <HAL_HCD_HC_Halt>
 801e088:	4603      	mov	r3, r0
 801e08a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801e08c:	7bfb      	ldrb	r3, [r7, #15]
 801e08e:	4618      	mov	r0, r3
 801e090:	f000 f8d4 	bl	801e23c <USBH_Get_USB_Status>
 801e094:	4603      	mov	r3, r0
 801e096:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801e098:	7bbb      	ldrb	r3, [r7, #14]
}
 801e09a:	4618      	mov	r0, r3
 801e09c:	3710      	adds	r7, #16
 801e09e:	46bd      	mov	sp, r7
 801e0a0:	bd80      	pop	{r7, pc}

0801e0a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801e0a2:	b590      	push	{r4, r7, lr}
 801e0a4:	b089      	sub	sp, #36	; 0x24
 801e0a6:	af04      	add	r7, sp, #16
 801e0a8:	6078      	str	r0, [r7, #4]
 801e0aa:	4608      	mov	r0, r1
 801e0ac:	4611      	mov	r1, r2
 801e0ae:	461a      	mov	r2, r3
 801e0b0:	4603      	mov	r3, r0
 801e0b2:	70fb      	strb	r3, [r7, #3]
 801e0b4:	460b      	mov	r3, r1
 801e0b6:	70bb      	strb	r3, [r7, #2]
 801e0b8:	4613      	mov	r3, r2
 801e0ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e0bc:	2300      	movs	r3, #0
 801e0be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801e0c0:	2300      	movs	r3, #0
 801e0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801e0ca:	787c      	ldrb	r4, [r7, #1]
 801e0cc:	78ba      	ldrb	r2, [r7, #2]
 801e0ce:	78f9      	ldrb	r1, [r7, #3]
 801e0d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e0d4:	9303      	str	r3, [sp, #12]
 801e0d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801e0d8:	9302      	str	r3, [sp, #8]
 801e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0dc:	9301      	str	r3, [sp, #4]
 801e0de:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e0e2:	9300      	str	r3, [sp, #0]
 801e0e4:	4623      	mov	r3, r4
 801e0e6:	f7eb fdf9 	bl	8009cdc <HAL_HCD_HC_SubmitRequest>
 801e0ea:	4603      	mov	r3, r0
 801e0ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801e0ee:	7bfb      	ldrb	r3, [r7, #15]
 801e0f0:	4618      	mov	r0, r3
 801e0f2:	f000 f8a3 	bl	801e23c <USBH_Get_USB_Status>
 801e0f6:	4603      	mov	r3, r0
 801e0f8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801e0fa:	7bbb      	ldrb	r3, [r7, #14]
}
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	3714      	adds	r7, #20
 801e100:	46bd      	mov	sp, r7
 801e102:	bd90      	pop	{r4, r7, pc}

0801e104 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801e104:	b580      	push	{r7, lr}
 801e106:	b082      	sub	sp, #8
 801e108:	af00      	add	r7, sp, #0
 801e10a:	6078      	str	r0, [r7, #4]
 801e10c:	460b      	mov	r3, r1
 801e10e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801e116:	78fa      	ldrb	r2, [r7, #3]
 801e118:	4611      	mov	r1, r2
 801e11a:	4618      	mov	r0, r3
 801e11c:	f7ec f8a2 	bl	800a264 <HAL_HCD_HC_GetURBState>
 801e120:	4603      	mov	r3, r0
}
 801e122:	4618      	mov	r0, r3
 801e124:	3708      	adds	r7, #8
 801e126:	46bd      	mov	sp, r7
 801e128:	bd80      	pop	{r7, pc}

0801e12a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801e12a:	b580      	push	{r7, lr}
 801e12c:	b082      	sub	sp, #8
 801e12e:	af00      	add	r7, sp, #0
 801e130:	6078      	str	r0, [r7, #4]
 801e132:	460b      	mov	r3, r1
 801e134:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801e13c:	2b01      	cmp	r3, #1
 801e13e:	d103      	bne.n	801e148 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801e140:	78fb      	ldrb	r3, [r7, #3]
 801e142:	4618      	mov	r0, r3
 801e144:	f000 f8a6 	bl	801e294 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801e148:	20c8      	movs	r0, #200	; 0xc8
 801e14a:	f7ea f95f 	bl	800840c <HAL_Delay>
  return USBH_OK;
 801e14e:	2300      	movs	r3, #0
}
 801e150:	4618      	mov	r0, r3
 801e152:	3708      	adds	r7, #8
 801e154:	46bd      	mov	sp, r7
 801e156:	bd80      	pop	{r7, pc}

0801e158 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801e158:	b480      	push	{r7}
 801e15a:	b085      	sub	sp, #20
 801e15c:	af00      	add	r7, sp, #0
 801e15e:	6078      	str	r0, [r7, #4]
 801e160:	460b      	mov	r3, r1
 801e162:	70fb      	strb	r3, [r7, #3]
 801e164:	4613      	mov	r3, r2
 801e166:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801e16e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801e170:	78fa      	ldrb	r2, [r7, #3]
 801e172:	68f9      	ldr	r1, [r7, #12]
 801e174:	4613      	mov	r3, r2
 801e176:	009b      	lsls	r3, r3, #2
 801e178:	4413      	add	r3, r2
 801e17a:	00db      	lsls	r3, r3, #3
 801e17c:	440b      	add	r3, r1
 801e17e:	333b      	adds	r3, #59	; 0x3b
 801e180:	781b      	ldrb	r3, [r3, #0]
 801e182:	2b00      	cmp	r3, #0
 801e184:	d00a      	beq.n	801e19c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801e186:	78fa      	ldrb	r2, [r7, #3]
 801e188:	68f9      	ldr	r1, [r7, #12]
 801e18a:	4613      	mov	r3, r2
 801e18c:	009b      	lsls	r3, r3, #2
 801e18e:	4413      	add	r3, r2
 801e190:	00db      	lsls	r3, r3, #3
 801e192:	440b      	add	r3, r1
 801e194:	3350      	adds	r3, #80	; 0x50
 801e196:	78ba      	ldrb	r2, [r7, #2]
 801e198:	701a      	strb	r2, [r3, #0]
 801e19a:	e009      	b.n	801e1b0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801e19c:	78fa      	ldrb	r2, [r7, #3]
 801e19e:	68f9      	ldr	r1, [r7, #12]
 801e1a0:	4613      	mov	r3, r2
 801e1a2:	009b      	lsls	r3, r3, #2
 801e1a4:	4413      	add	r3, r2
 801e1a6:	00db      	lsls	r3, r3, #3
 801e1a8:	440b      	add	r3, r1
 801e1aa:	3351      	adds	r3, #81	; 0x51
 801e1ac:	78ba      	ldrb	r2, [r7, #2]
 801e1ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801e1b0:	2300      	movs	r3, #0
}
 801e1b2:	4618      	mov	r0, r3
 801e1b4:	3714      	adds	r7, #20
 801e1b6:	46bd      	mov	sp, r7
 801e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1bc:	4770      	bx	lr

0801e1be <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801e1be:	b480      	push	{r7}
 801e1c0:	b085      	sub	sp, #20
 801e1c2:	af00      	add	r7, sp, #0
 801e1c4:	6078      	str	r0, [r7, #4]
 801e1c6:	460b      	mov	r3, r1
 801e1c8:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801e1d4:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801e1d6:	78fa      	ldrb	r2, [r7, #3]
 801e1d8:	68b9      	ldr	r1, [r7, #8]
 801e1da:	4613      	mov	r3, r2
 801e1dc:	009b      	lsls	r3, r3, #2
 801e1de:	4413      	add	r3, r2
 801e1e0:	00db      	lsls	r3, r3, #3
 801e1e2:	440b      	add	r3, r1
 801e1e4:	333b      	adds	r3, #59	; 0x3b
 801e1e6:	781b      	ldrb	r3, [r3, #0]
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d00a      	beq.n	801e202 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801e1ec:	78fa      	ldrb	r2, [r7, #3]
 801e1ee:	68b9      	ldr	r1, [r7, #8]
 801e1f0:	4613      	mov	r3, r2
 801e1f2:	009b      	lsls	r3, r3, #2
 801e1f4:	4413      	add	r3, r2
 801e1f6:	00db      	lsls	r3, r3, #3
 801e1f8:	440b      	add	r3, r1
 801e1fa:	3350      	adds	r3, #80	; 0x50
 801e1fc:	781b      	ldrb	r3, [r3, #0]
 801e1fe:	73fb      	strb	r3, [r7, #15]
 801e200:	e009      	b.n	801e216 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801e202:	78fa      	ldrb	r2, [r7, #3]
 801e204:	68b9      	ldr	r1, [r7, #8]
 801e206:	4613      	mov	r3, r2
 801e208:	009b      	lsls	r3, r3, #2
 801e20a:	4413      	add	r3, r2
 801e20c:	00db      	lsls	r3, r3, #3
 801e20e:	440b      	add	r3, r1
 801e210:	3351      	adds	r3, #81	; 0x51
 801e212:	781b      	ldrb	r3, [r3, #0]
 801e214:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801e216:	7bfb      	ldrb	r3, [r7, #15]
}
 801e218:	4618      	mov	r0, r3
 801e21a:	3714      	adds	r7, #20
 801e21c:	46bd      	mov	sp, r7
 801e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e222:	4770      	bx	lr

0801e224 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801e224:	b580      	push	{r7, lr}
 801e226:	b082      	sub	sp, #8
 801e228:	af00      	add	r7, sp, #0
 801e22a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801e22c:	6878      	ldr	r0, [r7, #4]
 801e22e:	f7ea f8ed 	bl	800840c <HAL_Delay>
}
 801e232:	bf00      	nop
 801e234:	3708      	adds	r7, #8
 801e236:	46bd      	mov	sp, r7
 801e238:	bd80      	pop	{r7, pc}
	...

0801e23c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e23c:	b480      	push	{r7}
 801e23e:	b085      	sub	sp, #20
 801e240:	af00      	add	r7, sp, #0
 801e242:	4603      	mov	r3, r0
 801e244:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801e246:	2300      	movs	r3, #0
 801e248:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e24a:	79fb      	ldrb	r3, [r7, #7]
 801e24c:	2b03      	cmp	r3, #3
 801e24e:	d817      	bhi.n	801e280 <USBH_Get_USB_Status+0x44>
 801e250:	a201      	add	r2, pc, #4	; (adr r2, 801e258 <USBH_Get_USB_Status+0x1c>)
 801e252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e256:	bf00      	nop
 801e258:	0801e269 	.word	0x0801e269
 801e25c:	0801e26f 	.word	0x0801e26f
 801e260:	0801e275 	.word	0x0801e275
 801e264:	0801e27b 	.word	0x0801e27b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801e268:	2300      	movs	r3, #0
 801e26a:	73fb      	strb	r3, [r7, #15]
    break;
 801e26c:	e00b      	b.n	801e286 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801e26e:	2302      	movs	r3, #2
 801e270:	73fb      	strb	r3, [r7, #15]
    break;
 801e272:	e008      	b.n	801e286 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801e274:	2301      	movs	r3, #1
 801e276:	73fb      	strb	r3, [r7, #15]
    break;
 801e278:	e005      	b.n	801e286 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801e27a:	2302      	movs	r3, #2
 801e27c:	73fb      	strb	r3, [r7, #15]
    break;
 801e27e:	e002      	b.n	801e286 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801e280:	2302      	movs	r3, #2
 801e282:	73fb      	strb	r3, [r7, #15]
    break;
 801e284:	bf00      	nop
  }
  return usb_status;
 801e286:	7bfb      	ldrb	r3, [r7, #15]
}
 801e288:	4618      	mov	r0, r3
 801e28a:	3714      	adds	r7, #20
 801e28c:	46bd      	mov	sp, r7
 801e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e292:	4770      	bx	lr

0801e294 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 801e294:	b580      	push	{r7, lr}
 801e296:	b084      	sub	sp, #16
 801e298:	af00      	add	r7, sp, #0
 801e29a:	4603      	mov	r3, r0
 801e29c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 801e29e:	79fb      	ldrb	r3, [r7, #7]
 801e2a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801e2a2:	79fb      	ldrb	r3, [r7, #7]
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	d102      	bne.n	801e2ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 801e2a8:	2301      	movs	r3, #1
 801e2aa:	73fb      	strb	r3, [r7, #15]
 801e2ac:	e001      	b.n	801e2b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801e2ae:	2300      	movs	r3, #0
 801e2b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,(GPIO_PinState)data);
 801e2b2:	7bfb      	ldrb	r3, [r7, #15]
 801e2b4:	461a      	mov	r2, r3
 801e2b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e2ba:	4803      	ldr	r0, [pc, #12]	; (801e2c8 <MX_DriverVbusFS+0x34>)
 801e2bc:	f7eb fba4 	bl	8009a08 <HAL_GPIO_WritePin>
}
 801e2c0:	bf00      	nop
 801e2c2:	3710      	adds	r7, #16
 801e2c4:	46bd      	mov	sp, r7
 801e2c6:	bd80      	pop	{r7, pc}
 801e2c8:	40020000 	.word	0x40020000

0801e2cc <atoi>:
 801e2cc:	220a      	movs	r2, #10
 801e2ce:	2100      	movs	r1, #0
 801e2d0:	f000 bdf0 	b.w	801eeb4 <strtol>

0801e2d4 <__errno>:
 801e2d4:	4b01      	ldr	r3, [pc, #4]	; (801e2dc <__errno+0x8>)
 801e2d6:	6818      	ldr	r0, [r3, #0]
 801e2d8:	4770      	bx	lr
 801e2da:	bf00      	nop
 801e2dc:	2000009c 	.word	0x2000009c

0801e2e0 <__libc_init_array>:
 801e2e0:	b570      	push	{r4, r5, r6, lr}
 801e2e2:	4d0d      	ldr	r5, [pc, #52]	; (801e318 <__libc_init_array+0x38>)
 801e2e4:	4c0d      	ldr	r4, [pc, #52]	; (801e31c <__libc_init_array+0x3c>)
 801e2e6:	1b64      	subs	r4, r4, r5
 801e2e8:	10a4      	asrs	r4, r4, #2
 801e2ea:	2600      	movs	r6, #0
 801e2ec:	42a6      	cmp	r6, r4
 801e2ee:	d109      	bne.n	801e304 <__libc_init_array+0x24>
 801e2f0:	4d0b      	ldr	r5, [pc, #44]	; (801e320 <__libc_init_array+0x40>)
 801e2f2:	4c0c      	ldr	r4, [pc, #48]	; (801e324 <__libc_init_array+0x44>)
 801e2f4:	f002 feb6 	bl	8021064 <_init>
 801e2f8:	1b64      	subs	r4, r4, r5
 801e2fa:	10a4      	asrs	r4, r4, #2
 801e2fc:	2600      	movs	r6, #0
 801e2fe:	42a6      	cmp	r6, r4
 801e300:	d105      	bne.n	801e30e <__libc_init_array+0x2e>
 801e302:	bd70      	pop	{r4, r5, r6, pc}
 801e304:	f855 3b04 	ldr.w	r3, [r5], #4
 801e308:	4798      	blx	r3
 801e30a:	3601      	adds	r6, #1
 801e30c:	e7ee      	b.n	801e2ec <__libc_init_array+0xc>
 801e30e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e312:	4798      	blx	r3
 801e314:	3601      	adds	r6, #1
 801e316:	e7f2      	b.n	801e2fe <__libc_init_array+0x1e>
 801e318:	080246cc 	.word	0x080246cc
 801e31c:	080246cc 	.word	0x080246cc
 801e320:	080246cc 	.word	0x080246cc
 801e324:	080246d0 	.word	0x080246d0

0801e328 <malloc>:
 801e328:	4b02      	ldr	r3, [pc, #8]	; (801e334 <malloc+0xc>)
 801e32a:	4601      	mov	r1, r0
 801e32c:	6818      	ldr	r0, [r3, #0]
 801e32e:	f000 b871 	b.w	801e414 <_malloc_r>
 801e332:	bf00      	nop
 801e334:	2000009c 	.word	0x2000009c

0801e338 <free>:
 801e338:	4b02      	ldr	r3, [pc, #8]	; (801e344 <free+0xc>)
 801e33a:	4601      	mov	r1, r0
 801e33c:	6818      	ldr	r0, [r3, #0]
 801e33e:	f000 b819 	b.w	801e374 <_free_r>
 801e342:	bf00      	nop
 801e344:	2000009c 	.word	0x2000009c

0801e348 <memcpy>:
 801e348:	440a      	add	r2, r1
 801e34a:	4291      	cmp	r1, r2
 801e34c:	f100 33ff 	add.w	r3, r0, #4294967295
 801e350:	d100      	bne.n	801e354 <memcpy+0xc>
 801e352:	4770      	bx	lr
 801e354:	b510      	push	{r4, lr}
 801e356:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e35a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e35e:	4291      	cmp	r1, r2
 801e360:	d1f9      	bne.n	801e356 <memcpy+0xe>
 801e362:	bd10      	pop	{r4, pc}

0801e364 <memset>:
 801e364:	4402      	add	r2, r0
 801e366:	4603      	mov	r3, r0
 801e368:	4293      	cmp	r3, r2
 801e36a:	d100      	bne.n	801e36e <memset+0xa>
 801e36c:	4770      	bx	lr
 801e36e:	f803 1b01 	strb.w	r1, [r3], #1
 801e372:	e7f9      	b.n	801e368 <memset+0x4>

0801e374 <_free_r>:
 801e374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e376:	2900      	cmp	r1, #0
 801e378:	d048      	beq.n	801e40c <_free_r+0x98>
 801e37a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e37e:	9001      	str	r0, [sp, #4]
 801e380:	2b00      	cmp	r3, #0
 801e382:	f1a1 0404 	sub.w	r4, r1, #4
 801e386:	bfb8      	it	lt
 801e388:	18e4      	addlt	r4, r4, r3
 801e38a:	f001 fca9 	bl	801fce0 <__malloc_lock>
 801e38e:	4a20      	ldr	r2, [pc, #128]	; (801e410 <_free_r+0x9c>)
 801e390:	9801      	ldr	r0, [sp, #4]
 801e392:	6813      	ldr	r3, [r2, #0]
 801e394:	4615      	mov	r5, r2
 801e396:	b933      	cbnz	r3, 801e3a6 <_free_r+0x32>
 801e398:	6063      	str	r3, [r4, #4]
 801e39a:	6014      	str	r4, [r2, #0]
 801e39c:	b003      	add	sp, #12
 801e39e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e3a2:	f001 bca3 	b.w	801fcec <__malloc_unlock>
 801e3a6:	42a3      	cmp	r3, r4
 801e3a8:	d90b      	bls.n	801e3c2 <_free_r+0x4e>
 801e3aa:	6821      	ldr	r1, [r4, #0]
 801e3ac:	1862      	adds	r2, r4, r1
 801e3ae:	4293      	cmp	r3, r2
 801e3b0:	bf04      	itt	eq
 801e3b2:	681a      	ldreq	r2, [r3, #0]
 801e3b4:	685b      	ldreq	r3, [r3, #4]
 801e3b6:	6063      	str	r3, [r4, #4]
 801e3b8:	bf04      	itt	eq
 801e3ba:	1852      	addeq	r2, r2, r1
 801e3bc:	6022      	streq	r2, [r4, #0]
 801e3be:	602c      	str	r4, [r5, #0]
 801e3c0:	e7ec      	b.n	801e39c <_free_r+0x28>
 801e3c2:	461a      	mov	r2, r3
 801e3c4:	685b      	ldr	r3, [r3, #4]
 801e3c6:	b10b      	cbz	r3, 801e3cc <_free_r+0x58>
 801e3c8:	42a3      	cmp	r3, r4
 801e3ca:	d9fa      	bls.n	801e3c2 <_free_r+0x4e>
 801e3cc:	6811      	ldr	r1, [r2, #0]
 801e3ce:	1855      	adds	r5, r2, r1
 801e3d0:	42a5      	cmp	r5, r4
 801e3d2:	d10b      	bne.n	801e3ec <_free_r+0x78>
 801e3d4:	6824      	ldr	r4, [r4, #0]
 801e3d6:	4421      	add	r1, r4
 801e3d8:	1854      	adds	r4, r2, r1
 801e3da:	42a3      	cmp	r3, r4
 801e3dc:	6011      	str	r1, [r2, #0]
 801e3de:	d1dd      	bne.n	801e39c <_free_r+0x28>
 801e3e0:	681c      	ldr	r4, [r3, #0]
 801e3e2:	685b      	ldr	r3, [r3, #4]
 801e3e4:	6053      	str	r3, [r2, #4]
 801e3e6:	4421      	add	r1, r4
 801e3e8:	6011      	str	r1, [r2, #0]
 801e3ea:	e7d7      	b.n	801e39c <_free_r+0x28>
 801e3ec:	d902      	bls.n	801e3f4 <_free_r+0x80>
 801e3ee:	230c      	movs	r3, #12
 801e3f0:	6003      	str	r3, [r0, #0]
 801e3f2:	e7d3      	b.n	801e39c <_free_r+0x28>
 801e3f4:	6825      	ldr	r5, [r4, #0]
 801e3f6:	1961      	adds	r1, r4, r5
 801e3f8:	428b      	cmp	r3, r1
 801e3fa:	bf04      	itt	eq
 801e3fc:	6819      	ldreq	r1, [r3, #0]
 801e3fe:	685b      	ldreq	r3, [r3, #4]
 801e400:	6063      	str	r3, [r4, #4]
 801e402:	bf04      	itt	eq
 801e404:	1949      	addeq	r1, r1, r5
 801e406:	6021      	streq	r1, [r4, #0]
 801e408:	6054      	str	r4, [r2, #4]
 801e40a:	e7c7      	b.n	801e39c <_free_r+0x28>
 801e40c:	b003      	add	sp, #12
 801e40e:	bd30      	pop	{r4, r5, pc}
 801e410:	20000e10 	.word	0x20000e10

0801e414 <_malloc_r>:
 801e414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e416:	1ccd      	adds	r5, r1, #3
 801e418:	f025 0503 	bic.w	r5, r5, #3
 801e41c:	3508      	adds	r5, #8
 801e41e:	2d0c      	cmp	r5, #12
 801e420:	bf38      	it	cc
 801e422:	250c      	movcc	r5, #12
 801e424:	2d00      	cmp	r5, #0
 801e426:	4606      	mov	r6, r0
 801e428:	db01      	blt.n	801e42e <_malloc_r+0x1a>
 801e42a:	42a9      	cmp	r1, r5
 801e42c:	d903      	bls.n	801e436 <_malloc_r+0x22>
 801e42e:	230c      	movs	r3, #12
 801e430:	6033      	str	r3, [r6, #0]
 801e432:	2000      	movs	r0, #0
 801e434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e436:	f001 fc53 	bl	801fce0 <__malloc_lock>
 801e43a:	4921      	ldr	r1, [pc, #132]	; (801e4c0 <_malloc_r+0xac>)
 801e43c:	680a      	ldr	r2, [r1, #0]
 801e43e:	4614      	mov	r4, r2
 801e440:	b99c      	cbnz	r4, 801e46a <_malloc_r+0x56>
 801e442:	4f20      	ldr	r7, [pc, #128]	; (801e4c4 <_malloc_r+0xb0>)
 801e444:	683b      	ldr	r3, [r7, #0]
 801e446:	b923      	cbnz	r3, 801e452 <_malloc_r+0x3e>
 801e448:	4621      	mov	r1, r4
 801e44a:	4630      	mov	r0, r6
 801e44c:	f000 fc7e 	bl	801ed4c <_sbrk_r>
 801e450:	6038      	str	r0, [r7, #0]
 801e452:	4629      	mov	r1, r5
 801e454:	4630      	mov	r0, r6
 801e456:	f000 fc79 	bl	801ed4c <_sbrk_r>
 801e45a:	1c43      	adds	r3, r0, #1
 801e45c:	d123      	bne.n	801e4a6 <_malloc_r+0x92>
 801e45e:	230c      	movs	r3, #12
 801e460:	6033      	str	r3, [r6, #0]
 801e462:	4630      	mov	r0, r6
 801e464:	f001 fc42 	bl	801fcec <__malloc_unlock>
 801e468:	e7e3      	b.n	801e432 <_malloc_r+0x1e>
 801e46a:	6823      	ldr	r3, [r4, #0]
 801e46c:	1b5b      	subs	r3, r3, r5
 801e46e:	d417      	bmi.n	801e4a0 <_malloc_r+0x8c>
 801e470:	2b0b      	cmp	r3, #11
 801e472:	d903      	bls.n	801e47c <_malloc_r+0x68>
 801e474:	6023      	str	r3, [r4, #0]
 801e476:	441c      	add	r4, r3
 801e478:	6025      	str	r5, [r4, #0]
 801e47a:	e004      	b.n	801e486 <_malloc_r+0x72>
 801e47c:	6863      	ldr	r3, [r4, #4]
 801e47e:	42a2      	cmp	r2, r4
 801e480:	bf0c      	ite	eq
 801e482:	600b      	streq	r3, [r1, #0]
 801e484:	6053      	strne	r3, [r2, #4]
 801e486:	4630      	mov	r0, r6
 801e488:	f001 fc30 	bl	801fcec <__malloc_unlock>
 801e48c:	f104 000b 	add.w	r0, r4, #11
 801e490:	1d23      	adds	r3, r4, #4
 801e492:	f020 0007 	bic.w	r0, r0, #7
 801e496:	1ac2      	subs	r2, r0, r3
 801e498:	d0cc      	beq.n	801e434 <_malloc_r+0x20>
 801e49a:	1a1b      	subs	r3, r3, r0
 801e49c:	50a3      	str	r3, [r4, r2]
 801e49e:	e7c9      	b.n	801e434 <_malloc_r+0x20>
 801e4a0:	4622      	mov	r2, r4
 801e4a2:	6864      	ldr	r4, [r4, #4]
 801e4a4:	e7cc      	b.n	801e440 <_malloc_r+0x2c>
 801e4a6:	1cc4      	adds	r4, r0, #3
 801e4a8:	f024 0403 	bic.w	r4, r4, #3
 801e4ac:	42a0      	cmp	r0, r4
 801e4ae:	d0e3      	beq.n	801e478 <_malloc_r+0x64>
 801e4b0:	1a21      	subs	r1, r4, r0
 801e4b2:	4630      	mov	r0, r6
 801e4b4:	f000 fc4a 	bl	801ed4c <_sbrk_r>
 801e4b8:	3001      	adds	r0, #1
 801e4ba:	d1dd      	bne.n	801e478 <_malloc_r+0x64>
 801e4bc:	e7cf      	b.n	801e45e <_malloc_r+0x4a>
 801e4be:	bf00      	nop
 801e4c0:	20000e10 	.word	0x20000e10
 801e4c4:	20000e14 	.word	0x20000e14

0801e4c8 <__cvt>:
 801e4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4ca:	ed2d 8b02 	vpush	{d8}
 801e4ce:	eeb0 8b40 	vmov.f64	d8, d0
 801e4d2:	b085      	sub	sp, #20
 801e4d4:	4617      	mov	r7, r2
 801e4d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e4d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e4da:	ee18 2a90 	vmov	r2, s17
 801e4de:	f025 0520 	bic.w	r5, r5, #32
 801e4e2:	2a00      	cmp	r2, #0
 801e4e4:	bfb6      	itet	lt
 801e4e6:	222d      	movlt	r2, #45	; 0x2d
 801e4e8:	2200      	movge	r2, #0
 801e4ea:	eeb1 8b40 	vneglt.f64	d8, d0
 801e4ee:	2d46      	cmp	r5, #70	; 0x46
 801e4f0:	460c      	mov	r4, r1
 801e4f2:	701a      	strb	r2, [r3, #0]
 801e4f4:	d004      	beq.n	801e500 <__cvt+0x38>
 801e4f6:	2d45      	cmp	r5, #69	; 0x45
 801e4f8:	d100      	bne.n	801e4fc <__cvt+0x34>
 801e4fa:	3401      	adds	r4, #1
 801e4fc:	2102      	movs	r1, #2
 801e4fe:	e000      	b.n	801e502 <__cvt+0x3a>
 801e500:	2103      	movs	r1, #3
 801e502:	ab03      	add	r3, sp, #12
 801e504:	9301      	str	r3, [sp, #4]
 801e506:	ab02      	add	r3, sp, #8
 801e508:	9300      	str	r3, [sp, #0]
 801e50a:	4622      	mov	r2, r4
 801e50c:	4633      	mov	r3, r6
 801e50e:	eeb0 0b48 	vmov.f64	d0, d8
 801e512:	f000 fd65 	bl	801efe0 <_dtoa_r>
 801e516:	2d47      	cmp	r5, #71	; 0x47
 801e518:	d109      	bne.n	801e52e <__cvt+0x66>
 801e51a:	07fb      	lsls	r3, r7, #31
 801e51c:	d407      	bmi.n	801e52e <__cvt+0x66>
 801e51e:	9b03      	ldr	r3, [sp, #12]
 801e520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e522:	1a1b      	subs	r3, r3, r0
 801e524:	6013      	str	r3, [r2, #0]
 801e526:	b005      	add	sp, #20
 801e528:	ecbd 8b02 	vpop	{d8}
 801e52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e52e:	2d46      	cmp	r5, #70	; 0x46
 801e530:	eb00 0204 	add.w	r2, r0, r4
 801e534:	d10c      	bne.n	801e550 <__cvt+0x88>
 801e536:	7803      	ldrb	r3, [r0, #0]
 801e538:	2b30      	cmp	r3, #48	; 0x30
 801e53a:	d107      	bne.n	801e54c <__cvt+0x84>
 801e53c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e544:	bf1c      	itt	ne
 801e546:	f1c4 0401 	rsbne	r4, r4, #1
 801e54a:	6034      	strne	r4, [r6, #0]
 801e54c:	6833      	ldr	r3, [r6, #0]
 801e54e:	441a      	add	r2, r3
 801e550:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e558:	bf08      	it	eq
 801e55a:	9203      	streq	r2, [sp, #12]
 801e55c:	2130      	movs	r1, #48	; 0x30
 801e55e:	9b03      	ldr	r3, [sp, #12]
 801e560:	4293      	cmp	r3, r2
 801e562:	d2dc      	bcs.n	801e51e <__cvt+0x56>
 801e564:	1c5c      	adds	r4, r3, #1
 801e566:	9403      	str	r4, [sp, #12]
 801e568:	7019      	strb	r1, [r3, #0]
 801e56a:	e7f8      	b.n	801e55e <__cvt+0x96>

0801e56c <__exponent>:
 801e56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e56e:	4603      	mov	r3, r0
 801e570:	2900      	cmp	r1, #0
 801e572:	bfb8      	it	lt
 801e574:	4249      	neglt	r1, r1
 801e576:	f803 2b02 	strb.w	r2, [r3], #2
 801e57a:	bfb4      	ite	lt
 801e57c:	222d      	movlt	r2, #45	; 0x2d
 801e57e:	222b      	movge	r2, #43	; 0x2b
 801e580:	2909      	cmp	r1, #9
 801e582:	7042      	strb	r2, [r0, #1]
 801e584:	dd2a      	ble.n	801e5dc <__exponent+0x70>
 801e586:	f10d 0407 	add.w	r4, sp, #7
 801e58a:	46a4      	mov	ip, r4
 801e58c:	270a      	movs	r7, #10
 801e58e:	46a6      	mov	lr, r4
 801e590:	460a      	mov	r2, r1
 801e592:	fb91 f6f7 	sdiv	r6, r1, r7
 801e596:	fb07 1516 	mls	r5, r7, r6, r1
 801e59a:	3530      	adds	r5, #48	; 0x30
 801e59c:	2a63      	cmp	r2, #99	; 0x63
 801e59e:	f104 34ff 	add.w	r4, r4, #4294967295
 801e5a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e5a6:	4631      	mov	r1, r6
 801e5a8:	dcf1      	bgt.n	801e58e <__exponent+0x22>
 801e5aa:	3130      	adds	r1, #48	; 0x30
 801e5ac:	f1ae 0502 	sub.w	r5, lr, #2
 801e5b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e5b4:	1c44      	adds	r4, r0, #1
 801e5b6:	4629      	mov	r1, r5
 801e5b8:	4561      	cmp	r1, ip
 801e5ba:	d30a      	bcc.n	801e5d2 <__exponent+0x66>
 801e5bc:	f10d 0209 	add.w	r2, sp, #9
 801e5c0:	eba2 020e 	sub.w	r2, r2, lr
 801e5c4:	4565      	cmp	r5, ip
 801e5c6:	bf88      	it	hi
 801e5c8:	2200      	movhi	r2, #0
 801e5ca:	4413      	add	r3, r2
 801e5cc:	1a18      	subs	r0, r3, r0
 801e5ce:	b003      	add	sp, #12
 801e5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e5d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e5da:	e7ed      	b.n	801e5b8 <__exponent+0x4c>
 801e5dc:	2330      	movs	r3, #48	; 0x30
 801e5de:	3130      	adds	r1, #48	; 0x30
 801e5e0:	7083      	strb	r3, [r0, #2]
 801e5e2:	70c1      	strb	r1, [r0, #3]
 801e5e4:	1d03      	adds	r3, r0, #4
 801e5e6:	e7f1      	b.n	801e5cc <__exponent+0x60>

0801e5e8 <_printf_float>:
 801e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ec:	b08b      	sub	sp, #44	; 0x2c
 801e5ee:	460c      	mov	r4, r1
 801e5f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801e5f4:	4616      	mov	r6, r2
 801e5f6:	461f      	mov	r7, r3
 801e5f8:	4605      	mov	r5, r0
 801e5fa:	f001 fb69 	bl	801fcd0 <_localeconv_r>
 801e5fe:	f8d0 b000 	ldr.w	fp, [r0]
 801e602:	4658      	mov	r0, fp
 801e604:	f7e1 fe26 	bl	8000254 <strlen>
 801e608:	2300      	movs	r3, #0
 801e60a:	9308      	str	r3, [sp, #32]
 801e60c:	f8d8 3000 	ldr.w	r3, [r8]
 801e610:	f894 9018 	ldrb.w	r9, [r4, #24]
 801e614:	6822      	ldr	r2, [r4, #0]
 801e616:	3307      	adds	r3, #7
 801e618:	f023 0307 	bic.w	r3, r3, #7
 801e61c:	f103 0108 	add.w	r1, r3, #8
 801e620:	f8c8 1000 	str.w	r1, [r8]
 801e624:	4682      	mov	sl, r0
 801e626:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e62a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801e62e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801e890 <_printf_float+0x2a8>
 801e632:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801e636:	eeb0 6bc0 	vabs.f64	d6, d0
 801e63a:	eeb4 6b47 	vcmp.f64	d6, d7
 801e63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e642:	dd24      	ble.n	801e68e <_printf_float+0xa6>
 801e644:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e64c:	d502      	bpl.n	801e654 <_printf_float+0x6c>
 801e64e:	232d      	movs	r3, #45	; 0x2d
 801e650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e654:	4b90      	ldr	r3, [pc, #576]	; (801e898 <_printf_float+0x2b0>)
 801e656:	4891      	ldr	r0, [pc, #580]	; (801e89c <_printf_float+0x2b4>)
 801e658:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801e65c:	bf94      	ite	ls
 801e65e:	4698      	movls	r8, r3
 801e660:	4680      	movhi	r8, r0
 801e662:	2303      	movs	r3, #3
 801e664:	6123      	str	r3, [r4, #16]
 801e666:	f022 0204 	bic.w	r2, r2, #4
 801e66a:	2300      	movs	r3, #0
 801e66c:	6022      	str	r2, [r4, #0]
 801e66e:	9304      	str	r3, [sp, #16]
 801e670:	9700      	str	r7, [sp, #0]
 801e672:	4633      	mov	r3, r6
 801e674:	aa09      	add	r2, sp, #36	; 0x24
 801e676:	4621      	mov	r1, r4
 801e678:	4628      	mov	r0, r5
 801e67a:	f000 f9d3 	bl	801ea24 <_printf_common>
 801e67e:	3001      	adds	r0, #1
 801e680:	f040 808a 	bne.w	801e798 <_printf_float+0x1b0>
 801e684:	f04f 30ff 	mov.w	r0, #4294967295
 801e688:	b00b      	add	sp, #44	; 0x2c
 801e68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e68e:	eeb4 0b40 	vcmp.f64	d0, d0
 801e692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e696:	d709      	bvc.n	801e6ac <_printf_float+0xc4>
 801e698:	ee10 3a90 	vmov	r3, s1
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	bfbc      	itt	lt
 801e6a0:	232d      	movlt	r3, #45	; 0x2d
 801e6a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e6a6:	487e      	ldr	r0, [pc, #504]	; (801e8a0 <_printf_float+0x2b8>)
 801e6a8:	4b7e      	ldr	r3, [pc, #504]	; (801e8a4 <_printf_float+0x2bc>)
 801e6aa:	e7d5      	b.n	801e658 <_printf_float+0x70>
 801e6ac:	6863      	ldr	r3, [r4, #4]
 801e6ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801e6b2:	9104      	str	r1, [sp, #16]
 801e6b4:	1c59      	adds	r1, r3, #1
 801e6b6:	d13c      	bne.n	801e732 <_printf_float+0x14a>
 801e6b8:	2306      	movs	r3, #6
 801e6ba:	6063      	str	r3, [r4, #4]
 801e6bc:	2300      	movs	r3, #0
 801e6be:	9303      	str	r3, [sp, #12]
 801e6c0:	ab08      	add	r3, sp, #32
 801e6c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801e6c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e6ca:	ab07      	add	r3, sp, #28
 801e6cc:	6861      	ldr	r1, [r4, #4]
 801e6ce:	9300      	str	r3, [sp, #0]
 801e6d0:	6022      	str	r2, [r4, #0]
 801e6d2:	f10d 031b 	add.w	r3, sp, #27
 801e6d6:	4628      	mov	r0, r5
 801e6d8:	f7ff fef6 	bl	801e4c8 <__cvt>
 801e6dc:	9b04      	ldr	r3, [sp, #16]
 801e6de:	9907      	ldr	r1, [sp, #28]
 801e6e0:	2b47      	cmp	r3, #71	; 0x47
 801e6e2:	4680      	mov	r8, r0
 801e6e4:	d108      	bne.n	801e6f8 <_printf_float+0x110>
 801e6e6:	1cc8      	adds	r0, r1, #3
 801e6e8:	db02      	blt.n	801e6f0 <_printf_float+0x108>
 801e6ea:	6863      	ldr	r3, [r4, #4]
 801e6ec:	4299      	cmp	r1, r3
 801e6ee:	dd41      	ble.n	801e774 <_printf_float+0x18c>
 801e6f0:	f1a9 0902 	sub.w	r9, r9, #2
 801e6f4:	fa5f f989 	uxtb.w	r9, r9
 801e6f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e6fc:	d820      	bhi.n	801e740 <_printf_float+0x158>
 801e6fe:	3901      	subs	r1, #1
 801e700:	464a      	mov	r2, r9
 801e702:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e706:	9107      	str	r1, [sp, #28]
 801e708:	f7ff ff30 	bl	801e56c <__exponent>
 801e70c:	9a08      	ldr	r2, [sp, #32]
 801e70e:	9004      	str	r0, [sp, #16]
 801e710:	1813      	adds	r3, r2, r0
 801e712:	2a01      	cmp	r2, #1
 801e714:	6123      	str	r3, [r4, #16]
 801e716:	dc02      	bgt.n	801e71e <_printf_float+0x136>
 801e718:	6822      	ldr	r2, [r4, #0]
 801e71a:	07d2      	lsls	r2, r2, #31
 801e71c:	d501      	bpl.n	801e722 <_printf_float+0x13a>
 801e71e:	3301      	adds	r3, #1
 801e720:	6123      	str	r3, [r4, #16]
 801e722:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801e726:	2b00      	cmp	r3, #0
 801e728:	d0a2      	beq.n	801e670 <_printf_float+0x88>
 801e72a:	232d      	movs	r3, #45	; 0x2d
 801e72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e730:	e79e      	b.n	801e670 <_printf_float+0x88>
 801e732:	9904      	ldr	r1, [sp, #16]
 801e734:	2947      	cmp	r1, #71	; 0x47
 801e736:	d1c1      	bne.n	801e6bc <_printf_float+0xd4>
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d1bf      	bne.n	801e6bc <_printf_float+0xd4>
 801e73c:	2301      	movs	r3, #1
 801e73e:	e7bc      	b.n	801e6ba <_printf_float+0xd2>
 801e740:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801e744:	d118      	bne.n	801e778 <_printf_float+0x190>
 801e746:	2900      	cmp	r1, #0
 801e748:	6863      	ldr	r3, [r4, #4]
 801e74a:	dd0b      	ble.n	801e764 <_printf_float+0x17c>
 801e74c:	6121      	str	r1, [r4, #16]
 801e74e:	b913      	cbnz	r3, 801e756 <_printf_float+0x16e>
 801e750:	6822      	ldr	r2, [r4, #0]
 801e752:	07d0      	lsls	r0, r2, #31
 801e754:	d502      	bpl.n	801e75c <_printf_float+0x174>
 801e756:	3301      	adds	r3, #1
 801e758:	440b      	add	r3, r1
 801e75a:	6123      	str	r3, [r4, #16]
 801e75c:	2300      	movs	r3, #0
 801e75e:	65a1      	str	r1, [r4, #88]	; 0x58
 801e760:	9304      	str	r3, [sp, #16]
 801e762:	e7de      	b.n	801e722 <_printf_float+0x13a>
 801e764:	b913      	cbnz	r3, 801e76c <_printf_float+0x184>
 801e766:	6822      	ldr	r2, [r4, #0]
 801e768:	07d2      	lsls	r2, r2, #31
 801e76a:	d501      	bpl.n	801e770 <_printf_float+0x188>
 801e76c:	3302      	adds	r3, #2
 801e76e:	e7f4      	b.n	801e75a <_printf_float+0x172>
 801e770:	2301      	movs	r3, #1
 801e772:	e7f2      	b.n	801e75a <_printf_float+0x172>
 801e774:	f04f 0967 	mov.w	r9, #103	; 0x67
 801e778:	9b08      	ldr	r3, [sp, #32]
 801e77a:	4299      	cmp	r1, r3
 801e77c:	db05      	blt.n	801e78a <_printf_float+0x1a2>
 801e77e:	6823      	ldr	r3, [r4, #0]
 801e780:	6121      	str	r1, [r4, #16]
 801e782:	07d8      	lsls	r0, r3, #31
 801e784:	d5ea      	bpl.n	801e75c <_printf_float+0x174>
 801e786:	1c4b      	adds	r3, r1, #1
 801e788:	e7e7      	b.n	801e75a <_printf_float+0x172>
 801e78a:	2900      	cmp	r1, #0
 801e78c:	bfd4      	ite	le
 801e78e:	f1c1 0202 	rsble	r2, r1, #2
 801e792:	2201      	movgt	r2, #1
 801e794:	4413      	add	r3, r2
 801e796:	e7e0      	b.n	801e75a <_printf_float+0x172>
 801e798:	6823      	ldr	r3, [r4, #0]
 801e79a:	055a      	lsls	r2, r3, #21
 801e79c:	d407      	bmi.n	801e7ae <_printf_float+0x1c6>
 801e79e:	6923      	ldr	r3, [r4, #16]
 801e7a0:	4642      	mov	r2, r8
 801e7a2:	4631      	mov	r1, r6
 801e7a4:	4628      	mov	r0, r5
 801e7a6:	47b8      	blx	r7
 801e7a8:	3001      	adds	r0, #1
 801e7aa:	d12a      	bne.n	801e802 <_printf_float+0x21a>
 801e7ac:	e76a      	b.n	801e684 <_printf_float+0x9c>
 801e7ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e7b2:	f240 80e2 	bls.w	801e97a <_printf_float+0x392>
 801e7b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e7ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7c2:	d133      	bne.n	801e82c <_printf_float+0x244>
 801e7c4:	4a38      	ldr	r2, [pc, #224]	; (801e8a8 <_printf_float+0x2c0>)
 801e7c6:	2301      	movs	r3, #1
 801e7c8:	4631      	mov	r1, r6
 801e7ca:	4628      	mov	r0, r5
 801e7cc:	47b8      	blx	r7
 801e7ce:	3001      	adds	r0, #1
 801e7d0:	f43f af58 	beq.w	801e684 <_printf_float+0x9c>
 801e7d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e7d8:	429a      	cmp	r2, r3
 801e7da:	db02      	blt.n	801e7e2 <_printf_float+0x1fa>
 801e7dc:	6823      	ldr	r3, [r4, #0]
 801e7de:	07d8      	lsls	r0, r3, #31
 801e7e0:	d50f      	bpl.n	801e802 <_printf_float+0x21a>
 801e7e2:	4653      	mov	r3, sl
 801e7e4:	465a      	mov	r2, fp
 801e7e6:	4631      	mov	r1, r6
 801e7e8:	4628      	mov	r0, r5
 801e7ea:	47b8      	blx	r7
 801e7ec:	3001      	adds	r0, #1
 801e7ee:	f43f af49 	beq.w	801e684 <_printf_float+0x9c>
 801e7f2:	f04f 0800 	mov.w	r8, #0
 801e7f6:	f104 091a 	add.w	r9, r4, #26
 801e7fa:	9b08      	ldr	r3, [sp, #32]
 801e7fc:	3b01      	subs	r3, #1
 801e7fe:	4543      	cmp	r3, r8
 801e800:	dc09      	bgt.n	801e816 <_printf_float+0x22e>
 801e802:	6823      	ldr	r3, [r4, #0]
 801e804:	079b      	lsls	r3, r3, #30
 801e806:	f100 8108 	bmi.w	801ea1a <_printf_float+0x432>
 801e80a:	68e0      	ldr	r0, [r4, #12]
 801e80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e80e:	4298      	cmp	r0, r3
 801e810:	bfb8      	it	lt
 801e812:	4618      	movlt	r0, r3
 801e814:	e738      	b.n	801e688 <_printf_float+0xa0>
 801e816:	2301      	movs	r3, #1
 801e818:	464a      	mov	r2, r9
 801e81a:	4631      	mov	r1, r6
 801e81c:	4628      	mov	r0, r5
 801e81e:	47b8      	blx	r7
 801e820:	3001      	adds	r0, #1
 801e822:	f43f af2f 	beq.w	801e684 <_printf_float+0x9c>
 801e826:	f108 0801 	add.w	r8, r8, #1
 801e82a:	e7e6      	b.n	801e7fa <_printf_float+0x212>
 801e82c:	9b07      	ldr	r3, [sp, #28]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	dc3c      	bgt.n	801e8ac <_printf_float+0x2c4>
 801e832:	4a1d      	ldr	r2, [pc, #116]	; (801e8a8 <_printf_float+0x2c0>)
 801e834:	2301      	movs	r3, #1
 801e836:	4631      	mov	r1, r6
 801e838:	4628      	mov	r0, r5
 801e83a:	47b8      	blx	r7
 801e83c:	3001      	adds	r0, #1
 801e83e:	f43f af21 	beq.w	801e684 <_printf_float+0x9c>
 801e842:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e846:	4313      	orrs	r3, r2
 801e848:	d102      	bne.n	801e850 <_printf_float+0x268>
 801e84a:	6823      	ldr	r3, [r4, #0]
 801e84c:	07d9      	lsls	r1, r3, #31
 801e84e:	d5d8      	bpl.n	801e802 <_printf_float+0x21a>
 801e850:	4653      	mov	r3, sl
 801e852:	465a      	mov	r2, fp
 801e854:	4631      	mov	r1, r6
 801e856:	4628      	mov	r0, r5
 801e858:	47b8      	blx	r7
 801e85a:	3001      	adds	r0, #1
 801e85c:	f43f af12 	beq.w	801e684 <_printf_float+0x9c>
 801e860:	f04f 0900 	mov.w	r9, #0
 801e864:	f104 0a1a 	add.w	sl, r4, #26
 801e868:	9b07      	ldr	r3, [sp, #28]
 801e86a:	425b      	negs	r3, r3
 801e86c:	454b      	cmp	r3, r9
 801e86e:	dc01      	bgt.n	801e874 <_printf_float+0x28c>
 801e870:	9b08      	ldr	r3, [sp, #32]
 801e872:	e795      	b.n	801e7a0 <_printf_float+0x1b8>
 801e874:	2301      	movs	r3, #1
 801e876:	4652      	mov	r2, sl
 801e878:	4631      	mov	r1, r6
 801e87a:	4628      	mov	r0, r5
 801e87c:	47b8      	blx	r7
 801e87e:	3001      	adds	r0, #1
 801e880:	f43f af00 	beq.w	801e684 <_printf_float+0x9c>
 801e884:	f109 0901 	add.w	r9, r9, #1
 801e888:	e7ee      	b.n	801e868 <_printf_float+0x280>
 801e88a:	bf00      	nop
 801e88c:	f3af 8000 	nop.w
 801e890:	ffffffff 	.word	0xffffffff
 801e894:	7fefffff 	.word	0x7fefffff
 801e898:	080242e0 	.word	0x080242e0
 801e89c:	080242e4 	.word	0x080242e4
 801e8a0:	080242ec 	.word	0x080242ec
 801e8a4:	080242e8 	.word	0x080242e8
 801e8a8:	080242f0 	.word	0x080242f0
 801e8ac:	9a08      	ldr	r2, [sp, #32]
 801e8ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e8b0:	429a      	cmp	r2, r3
 801e8b2:	bfa8      	it	ge
 801e8b4:	461a      	movge	r2, r3
 801e8b6:	2a00      	cmp	r2, #0
 801e8b8:	4691      	mov	r9, r2
 801e8ba:	dc38      	bgt.n	801e92e <_printf_float+0x346>
 801e8bc:	2300      	movs	r3, #0
 801e8be:	9305      	str	r3, [sp, #20]
 801e8c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e8c4:	f104 021a 	add.w	r2, r4, #26
 801e8c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e8ca:	9905      	ldr	r1, [sp, #20]
 801e8cc:	9304      	str	r3, [sp, #16]
 801e8ce:	eba3 0309 	sub.w	r3, r3, r9
 801e8d2:	428b      	cmp	r3, r1
 801e8d4:	dc33      	bgt.n	801e93e <_printf_float+0x356>
 801e8d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e8da:	429a      	cmp	r2, r3
 801e8dc:	db3c      	blt.n	801e958 <_printf_float+0x370>
 801e8de:	6823      	ldr	r3, [r4, #0]
 801e8e0:	07da      	lsls	r2, r3, #31
 801e8e2:	d439      	bmi.n	801e958 <_printf_float+0x370>
 801e8e4:	9a08      	ldr	r2, [sp, #32]
 801e8e6:	9b04      	ldr	r3, [sp, #16]
 801e8e8:	9907      	ldr	r1, [sp, #28]
 801e8ea:	1ad3      	subs	r3, r2, r3
 801e8ec:	eba2 0901 	sub.w	r9, r2, r1
 801e8f0:	4599      	cmp	r9, r3
 801e8f2:	bfa8      	it	ge
 801e8f4:	4699      	movge	r9, r3
 801e8f6:	f1b9 0f00 	cmp.w	r9, #0
 801e8fa:	dc35      	bgt.n	801e968 <_printf_float+0x380>
 801e8fc:	f04f 0800 	mov.w	r8, #0
 801e900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e904:	f104 0a1a 	add.w	sl, r4, #26
 801e908:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e90c:	1a9b      	subs	r3, r3, r2
 801e90e:	eba3 0309 	sub.w	r3, r3, r9
 801e912:	4543      	cmp	r3, r8
 801e914:	f77f af75 	ble.w	801e802 <_printf_float+0x21a>
 801e918:	2301      	movs	r3, #1
 801e91a:	4652      	mov	r2, sl
 801e91c:	4631      	mov	r1, r6
 801e91e:	4628      	mov	r0, r5
 801e920:	47b8      	blx	r7
 801e922:	3001      	adds	r0, #1
 801e924:	f43f aeae 	beq.w	801e684 <_printf_float+0x9c>
 801e928:	f108 0801 	add.w	r8, r8, #1
 801e92c:	e7ec      	b.n	801e908 <_printf_float+0x320>
 801e92e:	4613      	mov	r3, r2
 801e930:	4631      	mov	r1, r6
 801e932:	4642      	mov	r2, r8
 801e934:	4628      	mov	r0, r5
 801e936:	47b8      	blx	r7
 801e938:	3001      	adds	r0, #1
 801e93a:	d1bf      	bne.n	801e8bc <_printf_float+0x2d4>
 801e93c:	e6a2      	b.n	801e684 <_printf_float+0x9c>
 801e93e:	2301      	movs	r3, #1
 801e940:	4631      	mov	r1, r6
 801e942:	4628      	mov	r0, r5
 801e944:	9204      	str	r2, [sp, #16]
 801e946:	47b8      	blx	r7
 801e948:	3001      	adds	r0, #1
 801e94a:	f43f ae9b 	beq.w	801e684 <_printf_float+0x9c>
 801e94e:	9b05      	ldr	r3, [sp, #20]
 801e950:	9a04      	ldr	r2, [sp, #16]
 801e952:	3301      	adds	r3, #1
 801e954:	9305      	str	r3, [sp, #20]
 801e956:	e7b7      	b.n	801e8c8 <_printf_float+0x2e0>
 801e958:	4653      	mov	r3, sl
 801e95a:	465a      	mov	r2, fp
 801e95c:	4631      	mov	r1, r6
 801e95e:	4628      	mov	r0, r5
 801e960:	47b8      	blx	r7
 801e962:	3001      	adds	r0, #1
 801e964:	d1be      	bne.n	801e8e4 <_printf_float+0x2fc>
 801e966:	e68d      	b.n	801e684 <_printf_float+0x9c>
 801e968:	9a04      	ldr	r2, [sp, #16]
 801e96a:	464b      	mov	r3, r9
 801e96c:	4442      	add	r2, r8
 801e96e:	4631      	mov	r1, r6
 801e970:	4628      	mov	r0, r5
 801e972:	47b8      	blx	r7
 801e974:	3001      	adds	r0, #1
 801e976:	d1c1      	bne.n	801e8fc <_printf_float+0x314>
 801e978:	e684      	b.n	801e684 <_printf_float+0x9c>
 801e97a:	9a08      	ldr	r2, [sp, #32]
 801e97c:	2a01      	cmp	r2, #1
 801e97e:	dc01      	bgt.n	801e984 <_printf_float+0x39c>
 801e980:	07db      	lsls	r3, r3, #31
 801e982:	d537      	bpl.n	801e9f4 <_printf_float+0x40c>
 801e984:	2301      	movs	r3, #1
 801e986:	4642      	mov	r2, r8
 801e988:	4631      	mov	r1, r6
 801e98a:	4628      	mov	r0, r5
 801e98c:	47b8      	blx	r7
 801e98e:	3001      	adds	r0, #1
 801e990:	f43f ae78 	beq.w	801e684 <_printf_float+0x9c>
 801e994:	4653      	mov	r3, sl
 801e996:	465a      	mov	r2, fp
 801e998:	4631      	mov	r1, r6
 801e99a:	4628      	mov	r0, r5
 801e99c:	47b8      	blx	r7
 801e99e:	3001      	adds	r0, #1
 801e9a0:	f43f ae70 	beq.w	801e684 <_printf_float+0x9c>
 801e9a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e9a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9b0:	d01b      	beq.n	801e9ea <_printf_float+0x402>
 801e9b2:	9b08      	ldr	r3, [sp, #32]
 801e9b4:	f108 0201 	add.w	r2, r8, #1
 801e9b8:	3b01      	subs	r3, #1
 801e9ba:	4631      	mov	r1, r6
 801e9bc:	4628      	mov	r0, r5
 801e9be:	47b8      	blx	r7
 801e9c0:	3001      	adds	r0, #1
 801e9c2:	d10e      	bne.n	801e9e2 <_printf_float+0x3fa>
 801e9c4:	e65e      	b.n	801e684 <_printf_float+0x9c>
 801e9c6:	2301      	movs	r3, #1
 801e9c8:	464a      	mov	r2, r9
 801e9ca:	4631      	mov	r1, r6
 801e9cc:	4628      	mov	r0, r5
 801e9ce:	47b8      	blx	r7
 801e9d0:	3001      	adds	r0, #1
 801e9d2:	f43f ae57 	beq.w	801e684 <_printf_float+0x9c>
 801e9d6:	f108 0801 	add.w	r8, r8, #1
 801e9da:	9b08      	ldr	r3, [sp, #32]
 801e9dc:	3b01      	subs	r3, #1
 801e9de:	4543      	cmp	r3, r8
 801e9e0:	dcf1      	bgt.n	801e9c6 <_printf_float+0x3de>
 801e9e2:	9b04      	ldr	r3, [sp, #16]
 801e9e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e9e8:	e6db      	b.n	801e7a2 <_printf_float+0x1ba>
 801e9ea:	f04f 0800 	mov.w	r8, #0
 801e9ee:	f104 091a 	add.w	r9, r4, #26
 801e9f2:	e7f2      	b.n	801e9da <_printf_float+0x3f2>
 801e9f4:	2301      	movs	r3, #1
 801e9f6:	4642      	mov	r2, r8
 801e9f8:	e7df      	b.n	801e9ba <_printf_float+0x3d2>
 801e9fa:	2301      	movs	r3, #1
 801e9fc:	464a      	mov	r2, r9
 801e9fe:	4631      	mov	r1, r6
 801ea00:	4628      	mov	r0, r5
 801ea02:	47b8      	blx	r7
 801ea04:	3001      	adds	r0, #1
 801ea06:	f43f ae3d 	beq.w	801e684 <_printf_float+0x9c>
 801ea0a:	f108 0801 	add.w	r8, r8, #1
 801ea0e:	68e3      	ldr	r3, [r4, #12]
 801ea10:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ea12:	1a5b      	subs	r3, r3, r1
 801ea14:	4543      	cmp	r3, r8
 801ea16:	dcf0      	bgt.n	801e9fa <_printf_float+0x412>
 801ea18:	e6f7      	b.n	801e80a <_printf_float+0x222>
 801ea1a:	f04f 0800 	mov.w	r8, #0
 801ea1e:	f104 0919 	add.w	r9, r4, #25
 801ea22:	e7f4      	b.n	801ea0e <_printf_float+0x426>

0801ea24 <_printf_common>:
 801ea24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea28:	4616      	mov	r6, r2
 801ea2a:	4699      	mov	r9, r3
 801ea2c:	688a      	ldr	r2, [r1, #8]
 801ea2e:	690b      	ldr	r3, [r1, #16]
 801ea30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ea34:	4293      	cmp	r3, r2
 801ea36:	bfb8      	it	lt
 801ea38:	4613      	movlt	r3, r2
 801ea3a:	6033      	str	r3, [r6, #0]
 801ea3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ea40:	4607      	mov	r7, r0
 801ea42:	460c      	mov	r4, r1
 801ea44:	b10a      	cbz	r2, 801ea4a <_printf_common+0x26>
 801ea46:	3301      	adds	r3, #1
 801ea48:	6033      	str	r3, [r6, #0]
 801ea4a:	6823      	ldr	r3, [r4, #0]
 801ea4c:	0699      	lsls	r1, r3, #26
 801ea4e:	bf42      	ittt	mi
 801ea50:	6833      	ldrmi	r3, [r6, #0]
 801ea52:	3302      	addmi	r3, #2
 801ea54:	6033      	strmi	r3, [r6, #0]
 801ea56:	6825      	ldr	r5, [r4, #0]
 801ea58:	f015 0506 	ands.w	r5, r5, #6
 801ea5c:	d106      	bne.n	801ea6c <_printf_common+0x48>
 801ea5e:	f104 0a19 	add.w	sl, r4, #25
 801ea62:	68e3      	ldr	r3, [r4, #12]
 801ea64:	6832      	ldr	r2, [r6, #0]
 801ea66:	1a9b      	subs	r3, r3, r2
 801ea68:	42ab      	cmp	r3, r5
 801ea6a:	dc26      	bgt.n	801eaba <_printf_common+0x96>
 801ea6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ea70:	1e13      	subs	r3, r2, #0
 801ea72:	6822      	ldr	r2, [r4, #0]
 801ea74:	bf18      	it	ne
 801ea76:	2301      	movne	r3, #1
 801ea78:	0692      	lsls	r2, r2, #26
 801ea7a:	d42b      	bmi.n	801ead4 <_printf_common+0xb0>
 801ea7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ea80:	4649      	mov	r1, r9
 801ea82:	4638      	mov	r0, r7
 801ea84:	47c0      	blx	r8
 801ea86:	3001      	adds	r0, #1
 801ea88:	d01e      	beq.n	801eac8 <_printf_common+0xa4>
 801ea8a:	6823      	ldr	r3, [r4, #0]
 801ea8c:	68e5      	ldr	r5, [r4, #12]
 801ea8e:	6832      	ldr	r2, [r6, #0]
 801ea90:	f003 0306 	and.w	r3, r3, #6
 801ea94:	2b04      	cmp	r3, #4
 801ea96:	bf08      	it	eq
 801ea98:	1aad      	subeq	r5, r5, r2
 801ea9a:	68a3      	ldr	r3, [r4, #8]
 801ea9c:	6922      	ldr	r2, [r4, #16]
 801ea9e:	bf0c      	ite	eq
 801eaa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801eaa4:	2500      	movne	r5, #0
 801eaa6:	4293      	cmp	r3, r2
 801eaa8:	bfc4      	itt	gt
 801eaaa:	1a9b      	subgt	r3, r3, r2
 801eaac:	18ed      	addgt	r5, r5, r3
 801eaae:	2600      	movs	r6, #0
 801eab0:	341a      	adds	r4, #26
 801eab2:	42b5      	cmp	r5, r6
 801eab4:	d11a      	bne.n	801eaec <_printf_common+0xc8>
 801eab6:	2000      	movs	r0, #0
 801eab8:	e008      	b.n	801eacc <_printf_common+0xa8>
 801eaba:	2301      	movs	r3, #1
 801eabc:	4652      	mov	r2, sl
 801eabe:	4649      	mov	r1, r9
 801eac0:	4638      	mov	r0, r7
 801eac2:	47c0      	blx	r8
 801eac4:	3001      	adds	r0, #1
 801eac6:	d103      	bne.n	801ead0 <_printf_common+0xac>
 801eac8:	f04f 30ff 	mov.w	r0, #4294967295
 801eacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ead0:	3501      	adds	r5, #1
 801ead2:	e7c6      	b.n	801ea62 <_printf_common+0x3e>
 801ead4:	18e1      	adds	r1, r4, r3
 801ead6:	1c5a      	adds	r2, r3, #1
 801ead8:	2030      	movs	r0, #48	; 0x30
 801eada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801eade:	4422      	add	r2, r4
 801eae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801eae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801eae8:	3302      	adds	r3, #2
 801eaea:	e7c7      	b.n	801ea7c <_printf_common+0x58>
 801eaec:	2301      	movs	r3, #1
 801eaee:	4622      	mov	r2, r4
 801eaf0:	4649      	mov	r1, r9
 801eaf2:	4638      	mov	r0, r7
 801eaf4:	47c0      	blx	r8
 801eaf6:	3001      	adds	r0, #1
 801eaf8:	d0e6      	beq.n	801eac8 <_printf_common+0xa4>
 801eafa:	3601      	adds	r6, #1
 801eafc:	e7d9      	b.n	801eab2 <_printf_common+0x8e>
	...

0801eb00 <_printf_i>:
 801eb00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eb04:	460c      	mov	r4, r1
 801eb06:	4691      	mov	r9, r2
 801eb08:	7e27      	ldrb	r7, [r4, #24]
 801eb0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801eb0c:	2f78      	cmp	r7, #120	; 0x78
 801eb0e:	4680      	mov	r8, r0
 801eb10:	469a      	mov	sl, r3
 801eb12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801eb16:	d807      	bhi.n	801eb28 <_printf_i+0x28>
 801eb18:	2f62      	cmp	r7, #98	; 0x62
 801eb1a:	d80a      	bhi.n	801eb32 <_printf_i+0x32>
 801eb1c:	2f00      	cmp	r7, #0
 801eb1e:	f000 80d8 	beq.w	801ecd2 <_printf_i+0x1d2>
 801eb22:	2f58      	cmp	r7, #88	; 0x58
 801eb24:	f000 80a3 	beq.w	801ec6e <_printf_i+0x16e>
 801eb28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801eb2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801eb30:	e03a      	b.n	801eba8 <_printf_i+0xa8>
 801eb32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801eb36:	2b15      	cmp	r3, #21
 801eb38:	d8f6      	bhi.n	801eb28 <_printf_i+0x28>
 801eb3a:	a001      	add	r0, pc, #4	; (adr r0, 801eb40 <_printf_i+0x40>)
 801eb3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801eb40:	0801eb99 	.word	0x0801eb99
 801eb44:	0801ebad 	.word	0x0801ebad
 801eb48:	0801eb29 	.word	0x0801eb29
 801eb4c:	0801eb29 	.word	0x0801eb29
 801eb50:	0801eb29 	.word	0x0801eb29
 801eb54:	0801eb29 	.word	0x0801eb29
 801eb58:	0801ebad 	.word	0x0801ebad
 801eb5c:	0801eb29 	.word	0x0801eb29
 801eb60:	0801eb29 	.word	0x0801eb29
 801eb64:	0801eb29 	.word	0x0801eb29
 801eb68:	0801eb29 	.word	0x0801eb29
 801eb6c:	0801ecb9 	.word	0x0801ecb9
 801eb70:	0801ebdd 	.word	0x0801ebdd
 801eb74:	0801ec9b 	.word	0x0801ec9b
 801eb78:	0801eb29 	.word	0x0801eb29
 801eb7c:	0801eb29 	.word	0x0801eb29
 801eb80:	0801ecdb 	.word	0x0801ecdb
 801eb84:	0801eb29 	.word	0x0801eb29
 801eb88:	0801ebdd 	.word	0x0801ebdd
 801eb8c:	0801eb29 	.word	0x0801eb29
 801eb90:	0801eb29 	.word	0x0801eb29
 801eb94:	0801eca3 	.word	0x0801eca3
 801eb98:	680b      	ldr	r3, [r1, #0]
 801eb9a:	1d1a      	adds	r2, r3, #4
 801eb9c:	681b      	ldr	r3, [r3, #0]
 801eb9e:	600a      	str	r2, [r1, #0]
 801eba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801eba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801eba8:	2301      	movs	r3, #1
 801ebaa:	e0a3      	b.n	801ecf4 <_printf_i+0x1f4>
 801ebac:	6825      	ldr	r5, [r4, #0]
 801ebae:	6808      	ldr	r0, [r1, #0]
 801ebb0:	062e      	lsls	r6, r5, #24
 801ebb2:	f100 0304 	add.w	r3, r0, #4
 801ebb6:	d50a      	bpl.n	801ebce <_printf_i+0xce>
 801ebb8:	6805      	ldr	r5, [r0, #0]
 801ebba:	600b      	str	r3, [r1, #0]
 801ebbc:	2d00      	cmp	r5, #0
 801ebbe:	da03      	bge.n	801ebc8 <_printf_i+0xc8>
 801ebc0:	232d      	movs	r3, #45	; 0x2d
 801ebc2:	426d      	negs	r5, r5
 801ebc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ebc8:	485e      	ldr	r0, [pc, #376]	; (801ed44 <_printf_i+0x244>)
 801ebca:	230a      	movs	r3, #10
 801ebcc:	e019      	b.n	801ec02 <_printf_i+0x102>
 801ebce:	f015 0f40 	tst.w	r5, #64	; 0x40
 801ebd2:	6805      	ldr	r5, [r0, #0]
 801ebd4:	600b      	str	r3, [r1, #0]
 801ebd6:	bf18      	it	ne
 801ebd8:	b22d      	sxthne	r5, r5
 801ebda:	e7ef      	b.n	801ebbc <_printf_i+0xbc>
 801ebdc:	680b      	ldr	r3, [r1, #0]
 801ebde:	6825      	ldr	r5, [r4, #0]
 801ebe0:	1d18      	adds	r0, r3, #4
 801ebe2:	6008      	str	r0, [r1, #0]
 801ebe4:	0628      	lsls	r0, r5, #24
 801ebe6:	d501      	bpl.n	801ebec <_printf_i+0xec>
 801ebe8:	681d      	ldr	r5, [r3, #0]
 801ebea:	e002      	b.n	801ebf2 <_printf_i+0xf2>
 801ebec:	0669      	lsls	r1, r5, #25
 801ebee:	d5fb      	bpl.n	801ebe8 <_printf_i+0xe8>
 801ebf0:	881d      	ldrh	r5, [r3, #0]
 801ebf2:	4854      	ldr	r0, [pc, #336]	; (801ed44 <_printf_i+0x244>)
 801ebf4:	2f6f      	cmp	r7, #111	; 0x6f
 801ebf6:	bf0c      	ite	eq
 801ebf8:	2308      	moveq	r3, #8
 801ebfa:	230a      	movne	r3, #10
 801ebfc:	2100      	movs	r1, #0
 801ebfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ec02:	6866      	ldr	r6, [r4, #4]
 801ec04:	60a6      	str	r6, [r4, #8]
 801ec06:	2e00      	cmp	r6, #0
 801ec08:	bfa2      	ittt	ge
 801ec0a:	6821      	ldrge	r1, [r4, #0]
 801ec0c:	f021 0104 	bicge.w	r1, r1, #4
 801ec10:	6021      	strge	r1, [r4, #0]
 801ec12:	b90d      	cbnz	r5, 801ec18 <_printf_i+0x118>
 801ec14:	2e00      	cmp	r6, #0
 801ec16:	d04d      	beq.n	801ecb4 <_printf_i+0x1b4>
 801ec18:	4616      	mov	r6, r2
 801ec1a:	fbb5 f1f3 	udiv	r1, r5, r3
 801ec1e:	fb03 5711 	mls	r7, r3, r1, r5
 801ec22:	5dc7      	ldrb	r7, [r0, r7]
 801ec24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ec28:	462f      	mov	r7, r5
 801ec2a:	42bb      	cmp	r3, r7
 801ec2c:	460d      	mov	r5, r1
 801ec2e:	d9f4      	bls.n	801ec1a <_printf_i+0x11a>
 801ec30:	2b08      	cmp	r3, #8
 801ec32:	d10b      	bne.n	801ec4c <_printf_i+0x14c>
 801ec34:	6823      	ldr	r3, [r4, #0]
 801ec36:	07df      	lsls	r7, r3, #31
 801ec38:	d508      	bpl.n	801ec4c <_printf_i+0x14c>
 801ec3a:	6923      	ldr	r3, [r4, #16]
 801ec3c:	6861      	ldr	r1, [r4, #4]
 801ec3e:	4299      	cmp	r1, r3
 801ec40:	bfde      	ittt	le
 801ec42:	2330      	movle	r3, #48	; 0x30
 801ec44:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ec48:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ec4c:	1b92      	subs	r2, r2, r6
 801ec4e:	6122      	str	r2, [r4, #16]
 801ec50:	f8cd a000 	str.w	sl, [sp]
 801ec54:	464b      	mov	r3, r9
 801ec56:	aa03      	add	r2, sp, #12
 801ec58:	4621      	mov	r1, r4
 801ec5a:	4640      	mov	r0, r8
 801ec5c:	f7ff fee2 	bl	801ea24 <_printf_common>
 801ec60:	3001      	adds	r0, #1
 801ec62:	d14c      	bne.n	801ecfe <_printf_i+0x1fe>
 801ec64:	f04f 30ff 	mov.w	r0, #4294967295
 801ec68:	b004      	add	sp, #16
 801ec6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec6e:	4835      	ldr	r0, [pc, #212]	; (801ed44 <_printf_i+0x244>)
 801ec70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ec74:	6823      	ldr	r3, [r4, #0]
 801ec76:	680e      	ldr	r6, [r1, #0]
 801ec78:	061f      	lsls	r7, r3, #24
 801ec7a:	f856 5b04 	ldr.w	r5, [r6], #4
 801ec7e:	600e      	str	r6, [r1, #0]
 801ec80:	d514      	bpl.n	801ecac <_printf_i+0x1ac>
 801ec82:	07d9      	lsls	r1, r3, #31
 801ec84:	bf44      	itt	mi
 801ec86:	f043 0320 	orrmi.w	r3, r3, #32
 801ec8a:	6023      	strmi	r3, [r4, #0]
 801ec8c:	b91d      	cbnz	r5, 801ec96 <_printf_i+0x196>
 801ec8e:	6823      	ldr	r3, [r4, #0]
 801ec90:	f023 0320 	bic.w	r3, r3, #32
 801ec94:	6023      	str	r3, [r4, #0]
 801ec96:	2310      	movs	r3, #16
 801ec98:	e7b0      	b.n	801ebfc <_printf_i+0xfc>
 801ec9a:	6823      	ldr	r3, [r4, #0]
 801ec9c:	f043 0320 	orr.w	r3, r3, #32
 801eca0:	6023      	str	r3, [r4, #0]
 801eca2:	2378      	movs	r3, #120	; 0x78
 801eca4:	4828      	ldr	r0, [pc, #160]	; (801ed48 <_printf_i+0x248>)
 801eca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ecaa:	e7e3      	b.n	801ec74 <_printf_i+0x174>
 801ecac:	065e      	lsls	r6, r3, #25
 801ecae:	bf48      	it	mi
 801ecb0:	b2ad      	uxthmi	r5, r5
 801ecb2:	e7e6      	b.n	801ec82 <_printf_i+0x182>
 801ecb4:	4616      	mov	r6, r2
 801ecb6:	e7bb      	b.n	801ec30 <_printf_i+0x130>
 801ecb8:	680b      	ldr	r3, [r1, #0]
 801ecba:	6826      	ldr	r6, [r4, #0]
 801ecbc:	6960      	ldr	r0, [r4, #20]
 801ecbe:	1d1d      	adds	r5, r3, #4
 801ecc0:	600d      	str	r5, [r1, #0]
 801ecc2:	0635      	lsls	r5, r6, #24
 801ecc4:	681b      	ldr	r3, [r3, #0]
 801ecc6:	d501      	bpl.n	801eccc <_printf_i+0x1cc>
 801ecc8:	6018      	str	r0, [r3, #0]
 801ecca:	e002      	b.n	801ecd2 <_printf_i+0x1d2>
 801eccc:	0671      	lsls	r1, r6, #25
 801ecce:	d5fb      	bpl.n	801ecc8 <_printf_i+0x1c8>
 801ecd0:	8018      	strh	r0, [r3, #0]
 801ecd2:	2300      	movs	r3, #0
 801ecd4:	6123      	str	r3, [r4, #16]
 801ecd6:	4616      	mov	r6, r2
 801ecd8:	e7ba      	b.n	801ec50 <_printf_i+0x150>
 801ecda:	680b      	ldr	r3, [r1, #0]
 801ecdc:	1d1a      	adds	r2, r3, #4
 801ecde:	600a      	str	r2, [r1, #0]
 801ece0:	681e      	ldr	r6, [r3, #0]
 801ece2:	6862      	ldr	r2, [r4, #4]
 801ece4:	2100      	movs	r1, #0
 801ece6:	4630      	mov	r0, r6
 801ece8:	f7e1 fac2 	bl	8000270 <memchr>
 801ecec:	b108      	cbz	r0, 801ecf2 <_printf_i+0x1f2>
 801ecee:	1b80      	subs	r0, r0, r6
 801ecf0:	6060      	str	r0, [r4, #4]
 801ecf2:	6863      	ldr	r3, [r4, #4]
 801ecf4:	6123      	str	r3, [r4, #16]
 801ecf6:	2300      	movs	r3, #0
 801ecf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ecfc:	e7a8      	b.n	801ec50 <_printf_i+0x150>
 801ecfe:	6923      	ldr	r3, [r4, #16]
 801ed00:	4632      	mov	r2, r6
 801ed02:	4649      	mov	r1, r9
 801ed04:	4640      	mov	r0, r8
 801ed06:	47d0      	blx	sl
 801ed08:	3001      	adds	r0, #1
 801ed0a:	d0ab      	beq.n	801ec64 <_printf_i+0x164>
 801ed0c:	6823      	ldr	r3, [r4, #0]
 801ed0e:	079b      	lsls	r3, r3, #30
 801ed10:	d413      	bmi.n	801ed3a <_printf_i+0x23a>
 801ed12:	68e0      	ldr	r0, [r4, #12]
 801ed14:	9b03      	ldr	r3, [sp, #12]
 801ed16:	4298      	cmp	r0, r3
 801ed18:	bfb8      	it	lt
 801ed1a:	4618      	movlt	r0, r3
 801ed1c:	e7a4      	b.n	801ec68 <_printf_i+0x168>
 801ed1e:	2301      	movs	r3, #1
 801ed20:	4632      	mov	r2, r6
 801ed22:	4649      	mov	r1, r9
 801ed24:	4640      	mov	r0, r8
 801ed26:	47d0      	blx	sl
 801ed28:	3001      	adds	r0, #1
 801ed2a:	d09b      	beq.n	801ec64 <_printf_i+0x164>
 801ed2c:	3501      	adds	r5, #1
 801ed2e:	68e3      	ldr	r3, [r4, #12]
 801ed30:	9903      	ldr	r1, [sp, #12]
 801ed32:	1a5b      	subs	r3, r3, r1
 801ed34:	42ab      	cmp	r3, r5
 801ed36:	dcf2      	bgt.n	801ed1e <_printf_i+0x21e>
 801ed38:	e7eb      	b.n	801ed12 <_printf_i+0x212>
 801ed3a:	2500      	movs	r5, #0
 801ed3c:	f104 0619 	add.w	r6, r4, #25
 801ed40:	e7f5      	b.n	801ed2e <_printf_i+0x22e>
 801ed42:	bf00      	nop
 801ed44:	080242f2 	.word	0x080242f2
 801ed48:	08024303 	.word	0x08024303

0801ed4c <_sbrk_r>:
 801ed4c:	b538      	push	{r3, r4, r5, lr}
 801ed4e:	4d06      	ldr	r5, [pc, #24]	; (801ed68 <_sbrk_r+0x1c>)
 801ed50:	2300      	movs	r3, #0
 801ed52:	4604      	mov	r4, r0
 801ed54:	4608      	mov	r0, r1
 801ed56:	602b      	str	r3, [r5, #0]
 801ed58:	f7e9 f8dc 	bl	8007f14 <_sbrk>
 801ed5c:	1c43      	adds	r3, r0, #1
 801ed5e:	d102      	bne.n	801ed66 <_sbrk_r+0x1a>
 801ed60:	682b      	ldr	r3, [r5, #0]
 801ed62:	b103      	cbz	r3, 801ed66 <_sbrk_r+0x1a>
 801ed64:	6023      	str	r3, [r4, #0]
 801ed66:	bd38      	pop	{r3, r4, r5, pc}
 801ed68:	20019d44 	.word	0x20019d44

0801ed6c <siprintf>:
 801ed6c:	b40e      	push	{r1, r2, r3}
 801ed6e:	b500      	push	{lr}
 801ed70:	b09c      	sub	sp, #112	; 0x70
 801ed72:	ab1d      	add	r3, sp, #116	; 0x74
 801ed74:	9002      	str	r0, [sp, #8]
 801ed76:	9006      	str	r0, [sp, #24]
 801ed78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ed7c:	4809      	ldr	r0, [pc, #36]	; (801eda4 <siprintf+0x38>)
 801ed7e:	9107      	str	r1, [sp, #28]
 801ed80:	9104      	str	r1, [sp, #16]
 801ed82:	4909      	ldr	r1, [pc, #36]	; (801eda8 <siprintf+0x3c>)
 801ed84:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed88:	9105      	str	r1, [sp, #20]
 801ed8a:	6800      	ldr	r0, [r0, #0]
 801ed8c:	9301      	str	r3, [sp, #4]
 801ed8e:	a902      	add	r1, sp, #8
 801ed90:	f001 fb9a 	bl	80204c8 <_svfiprintf_r>
 801ed94:	9b02      	ldr	r3, [sp, #8]
 801ed96:	2200      	movs	r2, #0
 801ed98:	701a      	strb	r2, [r3, #0]
 801ed9a:	b01c      	add	sp, #112	; 0x70
 801ed9c:	f85d eb04 	ldr.w	lr, [sp], #4
 801eda0:	b003      	add	sp, #12
 801eda2:	4770      	bx	lr
 801eda4:	2000009c 	.word	0x2000009c
 801eda8:	ffff0208 	.word	0xffff0208

0801edac <_strtol_l.isra.0>:
 801edac:	2b01      	cmp	r3, #1
 801edae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801edb2:	d001      	beq.n	801edb8 <_strtol_l.isra.0+0xc>
 801edb4:	2b24      	cmp	r3, #36	; 0x24
 801edb6:	d906      	bls.n	801edc6 <_strtol_l.isra.0+0x1a>
 801edb8:	f7ff fa8c 	bl	801e2d4 <__errno>
 801edbc:	2316      	movs	r3, #22
 801edbe:	6003      	str	r3, [r0, #0]
 801edc0:	2000      	movs	r0, #0
 801edc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801edc6:	4f3a      	ldr	r7, [pc, #232]	; (801eeb0 <_strtol_l.isra.0+0x104>)
 801edc8:	468e      	mov	lr, r1
 801edca:	4676      	mov	r6, lr
 801edcc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801edd0:	5de5      	ldrb	r5, [r4, r7]
 801edd2:	f015 0508 	ands.w	r5, r5, #8
 801edd6:	d1f8      	bne.n	801edca <_strtol_l.isra.0+0x1e>
 801edd8:	2c2d      	cmp	r4, #45	; 0x2d
 801edda:	d134      	bne.n	801ee46 <_strtol_l.isra.0+0x9a>
 801eddc:	f89e 4000 	ldrb.w	r4, [lr]
 801ede0:	f04f 0801 	mov.w	r8, #1
 801ede4:	f106 0e02 	add.w	lr, r6, #2
 801ede8:	2b00      	cmp	r3, #0
 801edea:	d05c      	beq.n	801eea6 <_strtol_l.isra.0+0xfa>
 801edec:	2b10      	cmp	r3, #16
 801edee:	d10c      	bne.n	801ee0a <_strtol_l.isra.0+0x5e>
 801edf0:	2c30      	cmp	r4, #48	; 0x30
 801edf2:	d10a      	bne.n	801ee0a <_strtol_l.isra.0+0x5e>
 801edf4:	f89e 4000 	ldrb.w	r4, [lr]
 801edf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801edfc:	2c58      	cmp	r4, #88	; 0x58
 801edfe:	d14d      	bne.n	801ee9c <_strtol_l.isra.0+0xf0>
 801ee00:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ee04:	2310      	movs	r3, #16
 801ee06:	f10e 0e02 	add.w	lr, lr, #2
 801ee0a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801ee0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ee12:	2600      	movs	r6, #0
 801ee14:	fbbc f9f3 	udiv	r9, ip, r3
 801ee18:	4635      	mov	r5, r6
 801ee1a:	fb03 ca19 	mls	sl, r3, r9, ip
 801ee1e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ee22:	2f09      	cmp	r7, #9
 801ee24:	d818      	bhi.n	801ee58 <_strtol_l.isra.0+0xac>
 801ee26:	463c      	mov	r4, r7
 801ee28:	42a3      	cmp	r3, r4
 801ee2a:	dd24      	ble.n	801ee76 <_strtol_l.isra.0+0xca>
 801ee2c:	2e00      	cmp	r6, #0
 801ee2e:	db1f      	blt.n	801ee70 <_strtol_l.isra.0+0xc4>
 801ee30:	45a9      	cmp	r9, r5
 801ee32:	d31d      	bcc.n	801ee70 <_strtol_l.isra.0+0xc4>
 801ee34:	d101      	bne.n	801ee3a <_strtol_l.isra.0+0x8e>
 801ee36:	45a2      	cmp	sl, r4
 801ee38:	db1a      	blt.n	801ee70 <_strtol_l.isra.0+0xc4>
 801ee3a:	fb05 4503 	mla	r5, r5, r3, r4
 801ee3e:	2601      	movs	r6, #1
 801ee40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ee44:	e7eb      	b.n	801ee1e <_strtol_l.isra.0+0x72>
 801ee46:	2c2b      	cmp	r4, #43	; 0x2b
 801ee48:	bf08      	it	eq
 801ee4a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ee4e:	46a8      	mov	r8, r5
 801ee50:	bf08      	it	eq
 801ee52:	f106 0e02 	addeq.w	lr, r6, #2
 801ee56:	e7c7      	b.n	801ede8 <_strtol_l.isra.0+0x3c>
 801ee58:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801ee5c:	2f19      	cmp	r7, #25
 801ee5e:	d801      	bhi.n	801ee64 <_strtol_l.isra.0+0xb8>
 801ee60:	3c37      	subs	r4, #55	; 0x37
 801ee62:	e7e1      	b.n	801ee28 <_strtol_l.isra.0+0x7c>
 801ee64:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ee68:	2f19      	cmp	r7, #25
 801ee6a:	d804      	bhi.n	801ee76 <_strtol_l.isra.0+0xca>
 801ee6c:	3c57      	subs	r4, #87	; 0x57
 801ee6e:	e7db      	b.n	801ee28 <_strtol_l.isra.0+0x7c>
 801ee70:	f04f 36ff 	mov.w	r6, #4294967295
 801ee74:	e7e4      	b.n	801ee40 <_strtol_l.isra.0+0x94>
 801ee76:	2e00      	cmp	r6, #0
 801ee78:	da05      	bge.n	801ee86 <_strtol_l.isra.0+0xda>
 801ee7a:	2322      	movs	r3, #34	; 0x22
 801ee7c:	6003      	str	r3, [r0, #0]
 801ee7e:	4665      	mov	r5, ip
 801ee80:	b942      	cbnz	r2, 801ee94 <_strtol_l.isra.0+0xe8>
 801ee82:	4628      	mov	r0, r5
 801ee84:	e79d      	b.n	801edc2 <_strtol_l.isra.0+0x16>
 801ee86:	f1b8 0f00 	cmp.w	r8, #0
 801ee8a:	d000      	beq.n	801ee8e <_strtol_l.isra.0+0xe2>
 801ee8c:	426d      	negs	r5, r5
 801ee8e:	2a00      	cmp	r2, #0
 801ee90:	d0f7      	beq.n	801ee82 <_strtol_l.isra.0+0xd6>
 801ee92:	b10e      	cbz	r6, 801ee98 <_strtol_l.isra.0+0xec>
 801ee94:	f10e 31ff 	add.w	r1, lr, #4294967295
 801ee98:	6011      	str	r1, [r2, #0]
 801ee9a:	e7f2      	b.n	801ee82 <_strtol_l.isra.0+0xd6>
 801ee9c:	2430      	movs	r4, #48	; 0x30
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	d1b3      	bne.n	801ee0a <_strtol_l.isra.0+0x5e>
 801eea2:	2308      	movs	r3, #8
 801eea4:	e7b1      	b.n	801ee0a <_strtol_l.isra.0+0x5e>
 801eea6:	2c30      	cmp	r4, #48	; 0x30
 801eea8:	d0a4      	beq.n	801edf4 <_strtol_l.isra.0+0x48>
 801eeaa:	230a      	movs	r3, #10
 801eeac:	e7ad      	b.n	801ee0a <_strtol_l.isra.0+0x5e>
 801eeae:	bf00      	nop
 801eeb0:	08024315 	.word	0x08024315

0801eeb4 <strtol>:
 801eeb4:	4613      	mov	r3, r2
 801eeb6:	460a      	mov	r2, r1
 801eeb8:	4601      	mov	r1, r0
 801eeba:	4802      	ldr	r0, [pc, #8]	; (801eec4 <strtol+0x10>)
 801eebc:	6800      	ldr	r0, [r0, #0]
 801eebe:	f7ff bf75 	b.w	801edac <_strtol_l.isra.0>
 801eec2:	bf00      	nop
 801eec4:	2000009c 	.word	0x2000009c

0801eec8 <quorem>:
 801eec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eecc:	6903      	ldr	r3, [r0, #16]
 801eece:	690c      	ldr	r4, [r1, #16]
 801eed0:	42a3      	cmp	r3, r4
 801eed2:	4607      	mov	r7, r0
 801eed4:	f2c0 8081 	blt.w	801efda <quorem+0x112>
 801eed8:	3c01      	subs	r4, #1
 801eeda:	f101 0814 	add.w	r8, r1, #20
 801eede:	f100 0514 	add.w	r5, r0, #20
 801eee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801eee6:	9301      	str	r3, [sp, #4]
 801eee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801eeec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801eef0:	3301      	adds	r3, #1
 801eef2:	429a      	cmp	r2, r3
 801eef4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801eef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801eefc:	fbb2 f6f3 	udiv	r6, r2, r3
 801ef00:	d331      	bcc.n	801ef66 <quorem+0x9e>
 801ef02:	f04f 0e00 	mov.w	lr, #0
 801ef06:	4640      	mov	r0, r8
 801ef08:	46ac      	mov	ip, r5
 801ef0a:	46f2      	mov	sl, lr
 801ef0c:	f850 2b04 	ldr.w	r2, [r0], #4
 801ef10:	b293      	uxth	r3, r2
 801ef12:	fb06 e303 	mla	r3, r6, r3, lr
 801ef16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ef1a:	b29b      	uxth	r3, r3
 801ef1c:	ebaa 0303 	sub.w	r3, sl, r3
 801ef20:	0c12      	lsrs	r2, r2, #16
 801ef22:	f8dc a000 	ldr.w	sl, [ip]
 801ef26:	fb06 e202 	mla	r2, r6, r2, lr
 801ef2a:	fa13 f38a 	uxtah	r3, r3, sl
 801ef2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ef32:	fa1f fa82 	uxth.w	sl, r2
 801ef36:	f8dc 2000 	ldr.w	r2, [ip]
 801ef3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ef3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ef42:	b29b      	uxth	r3, r3
 801ef44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ef48:	4581      	cmp	r9, r0
 801ef4a:	f84c 3b04 	str.w	r3, [ip], #4
 801ef4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ef52:	d2db      	bcs.n	801ef0c <quorem+0x44>
 801ef54:	f855 300b 	ldr.w	r3, [r5, fp]
 801ef58:	b92b      	cbnz	r3, 801ef66 <quorem+0x9e>
 801ef5a:	9b01      	ldr	r3, [sp, #4]
 801ef5c:	3b04      	subs	r3, #4
 801ef5e:	429d      	cmp	r5, r3
 801ef60:	461a      	mov	r2, r3
 801ef62:	d32e      	bcc.n	801efc2 <quorem+0xfa>
 801ef64:	613c      	str	r4, [r7, #16]
 801ef66:	4638      	mov	r0, r7
 801ef68:	f001 f944 	bl	80201f4 <__mcmp>
 801ef6c:	2800      	cmp	r0, #0
 801ef6e:	db24      	blt.n	801efba <quorem+0xf2>
 801ef70:	3601      	adds	r6, #1
 801ef72:	4628      	mov	r0, r5
 801ef74:	f04f 0c00 	mov.w	ip, #0
 801ef78:	f858 2b04 	ldr.w	r2, [r8], #4
 801ef7c:	f8d0 e000 	ldr.w	lr, [r0]
 801ef80:	b293      	uxth	r3, r2
 801ef82:	ebac 0303 	sub.w	r3, ip, r3
 801ef86:	0c12      	lsrs	r2, r2, #16
 801ef88:	fa13 f38e 	uxtah	r3, r3, lr
 801ef8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ef90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ef94:	b29b      	uxth	r3, r3
 801ef96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ef9a:	45c1      	cmp	r9, r8
 801ef9c:	f840 3b04 	str.w	r3, [r0], #4
 801efa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801efa4:	d2e8      	bcs.n	801ef78 <quorem+0xb0>
 801efa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801efaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801efae:	b922      	cbnz	r2, 801efba <quorem+0xf2>
 801efb0:	3b04      	subs	r3, #4
 801efb2:	429d      	cmp	r5, r3
 801efb4:	461a      	mov	r2, r3
 801efb6:	d30a      	bcc.n	801efce <quorem+0x106>
 801efb8:	613c      	str	r4, [r7, #16]
 801efba:	4630      	mov	r0, r6
 801efbc:	b003      	add	sp, #12
 801efbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efc2:	6812      	ldr	r2, [r2, #0]
 801efc4:	3b04      	subs	r3, #4
 801efc6:	2a00      	cmp	r2, #0
 801efc8:	d1cc      	bne.n	801ef64 <quorem+0x9c>
 801efca:	3c01      	subs	r4, #1
 801efcc:	e7c7      	b.n	801ef5e <quorem+0x96>
 801efce:	6812      	ldr	r2, [r2, #0]
 801efd0:	3b04      	subs	r3, #4
 801efd2:	2a00      	cmp	r2, #0
 801efd4:	d1f0      	bne.n	801efb8 <quorem+0xf0>
 801efd6:	3c01      	subs	r4, #1
 801efd8:	e7eb      	b.n	801efb2 <quorem+0xea>
 801efda:	2000      	movs	r0, #0
 801efdc:	e7ee      	b.n	801efbc <quorem+0xf4>
	...

0801efe0 <_dtoa_r>:
 801efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe4:	ec59 8b10 	vmov	r8, r9, d0
 801efe8:	b095      	sub	sp, #84	; 0x54
 801efea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801efec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801efee:	9107      	str	r1, [sp, #28]
 801eff0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801eff4:	4606      	mov	r6, r0
 801eff6:	9209      	str	r2, [sp, #36]	; 0x24
 801eff8:	9310      	str	r3, [sp, #64]	; 0x40
 801effa:	b975      	cbnz	r5, 801f01a <_dtoa_r+0x3a>
 801effc:	2010      	movs	r0, #16
 801effe:	f7ff f993 	bl	801e328 <malloc>
 801f002:	4602      	mov	r2, r0
 801f004:	6270      	str	r0, [r6, #36]	; 0x24
 801f006:	b920      	cbnz	r0, 801f012 <_dtoa_r+0x32>
 801f008:	4bab      	ldr	r3, [pc, #684]	; (801f2b8 <_dtoa_r+0x2d8>)
 801f00a:	21ea      	movs	r1, #234	; 0xea
 801f00c:	48ab      	ldr	r0, [pc, #684]	; (801f2bc <_dtoa_r+0x2dc>)
 801f00e:	f001 fc71 	bl	80208f4 <__assert_func>
 801f012:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801f016:	6005      	str	r5, [r0, #0]
 801f018:	60c5      	str	r5, [r0, #12]
 801f01a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801f01c:	6819      	ldr	r1, [r3, #0]
 801f01e:	b151      	cbz	r1, 801f036 <_dtoa_r+0x56>
 801f020:	685a      	ldr	r2, [r3, #4]
 801f022:	604a      	str	r2, [r1, #4]
 801f024:	2301      	movs	r3, #1
 801f026:	4093      	lsls	r3, r2
 801f028:	608b      	str	r3, [r1, #8]
 801f02a:	4630      	mov	r0, r6
 801f02c:	f000 fea4 	bl	801fd78 <_Bfree>
 801f030:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801f032:	2200      	movs	r2, #0
 801f034:	601a      	str	r2, [r3, #0]
 801f036:	f1b9 0300 	subs.w	r3, r9, #0
 801f03a:	bfbb      	ittet	lt
 801f03c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801f040:	9303      	strlt	r3, [sp, #12]
 801f042:	2300      	movge	r3, #0
 801f044:	2201      	movlt	r2, #1
 801f046:	bfac      	ite	ge
 801f048:	6023      	strge	r3, [r4, #0]
 801f04a:	6022      	strlt	r2, [r4, #0]
 801f04c:	4b9c      	ldr	r3, [pc, #624]	; (801f2c0 <_dtoa_r+0x2e0>)
 801f04e:	9c03      	ldr	r4, [sp, #12]
 801f050:	43a3      	bics	r3, r4
 801f052:	d11a      	bne.n	801f08a <_dtoa_r+0xaa>
 801f054:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f056:	f242 730f 	movw	r3, #9999	; 0x270f
 801f05a:	6013      	str	r3, [r2, #0]
 801f05c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801f060:	ea53 0308 	orrs.w	r3, r3, r8
 801f064:	f000 8512 	beq.w	801fa8c <_dtoa_r+0xaac>
 801f068:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f06a:	b953      	cbnz	r3, 801f082 <_dtoa_r+0xa2>
 801f06c:	4b95      	ldr	r3, [pc, #596]	; (801f2c4 <_dtoa_r+0x2e4>)
 801f06e:	e01f      	b.n	801f0b0 <_dtoa_r+0xd0>
 801f070:	4b95      	ldr	r3, [pc, #596]	; (801f2c8 <_dtoa_r+0x2e8>)
 801f072:	9300      	str	r3, [sp, #0]
 801f074:	3308      	adds	r3, #8
 801f076:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f078:	6013      	str	r3, [r2, #0]
 801f07a:	9800      	ldr	r0, [sp, #0]
 801f07c:	b015      	add	sp, #84	; 0x54
 801f07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f082:	4b90      	ldr	r3, [pc, #576]	; (801f2c4 <_dtoa_r+0x2e4>)
 801f084:	9300      	str	r3, [sp, #0]
 801f086:	3303      	adds	r3, #3
 801f088:	e7f5      	b.n	801f076 <_dtoa_r+0x96>
 801f08a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f08e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f096:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801f09a:	d10b      	bne.n	801f0b4 <_dtoa_r+0xd4>
 801f09c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f09e:	2301      	movs	r3, #1
 801f0a0:	6013      	str	r3, [r2, #0]
 801f0a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	f000 84ee 	beq.w	801fa86 <_dtoa_r+0xaa6>
 801f0aa:	4888      	ldr	r0, [pc, #544]	; (801f2cc <_dtoa_r+0x2ec>)
 801f0ac:	6018      	str	r0, [r3, #0]
 801f0ae:	1e43      	subs	r3, r0, #1
 801f0b0:	9300      	str	r3, [sp, #0]
 801f0b2:	e7e2      	b.n	801f07a <_dtoa_r+0x9a>
 801f0b4:	a913      	add	r1, sp, #76	; 0x4c
 801f0b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801f0ba:	aa12      	add	r2, sp, #72	; 0x48
 801f0bc:	4630      	mov	r0, r6
 801f0be:	f001 f93d 	bl	802033c <__d2b>
 801f0c2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801f0c6:	4605      	mov	r5, r0
 801f0c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f0ca:	2900      	cmp	r1, #0
 801f0cc:	d047      	beq.n	801f15e <_dtoa_r+0x17e>
 801f0ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f0d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801f0d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f0d8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801f0dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f0e0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801f0e4:	2400      	movs	r4, #0
 801f0e6:	ec43 2b16 	vmov	d6, r2, r3
 801f0ea:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801f0ee:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801f2a0 <_dtoa_r+0x2c0>
 801f0f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 801f0f6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801f2a8 <_dtoa_r+0x2c8>
 801f0fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 801f0fe:	eeb0 7b46 	vmov.f64	d7, d6
 801f102:	ee06 1a90 	vmov	s13, r1
 801f106:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801f10a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801f2b0 <_dtoa_r+0x2d0>
 801f10e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f112:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801f116:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801f11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f11e:	ee16 ba90 	vmov	fp, s13
 801f122:	9411      	str	r4, [sp, #68]	; 0x44
 801f124:	d508      	bpl.n	801f138 <_dtoa_r+0x158>
 801f126:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801f12a:	eeb4 6b47 	vcmp.f64	d6, d7
 801f12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f132:	bf18      	it	ne
 801f134:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801f138:	f1bb 0f16 	cmp.w	fp, #22
 801f13c:	d832      	bhi.n	801f1a4 <_dtoa_r+0x1c4>
 801f13e:	4b64      	ldr	r3, [pc, #400]	; (801f2d0 <_dtoa_r+0x2f0>)
 801f140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f144:	ed93 7b00 	vldr	d7, [r3]
 801f148:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801f14c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f154:	d501      	bpl.n	801f15a <_dtoa_r+0x17a>
 801f156:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f15a:	2300      	movs	r3, #0
 801f15c:	e023      	b.n	801f1a6 <_dtoa_r+0x1c6>
 801f15e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f160:	4401      	add	r1, r0
 801f162:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801f166:	2b20      	cmp	r3, #32
 801f168:	bfc3      	ittte	gt
 801f16a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801f16e:	fa04 f303 	lslgt.w	r3, r4, r3
 801f172:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801f176:	f1c3 0320 	rsble	r3, r3, #32
 801f17a:	bfc6      	itte	gt
 801f17c:	fa28 f804 	lsrgt.w	r8, r8, r4
 801f180:	ea43 0308 	orrgt.w	r3, r3, r8
 801f184:	fa08 f303 	lslle.w	r3, r8, r3
 801f188:	ee07 3a90 	vmov	s15, r3
 801f18c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801f190:	3901      	subs	r1, #1
 801f192:	ed8d 7b00 	vstr	d7, [sp]
 801f196:	9c01      	ldr	r4, [sp, #4]
 801f198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f19c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801f1a0:	2401      	movs	r4, #1
 801f1a2:	e7a0      	b.n	801f0e6 <_dtoa_r+0x106>
 801f1a4:	2301      	movs	r3, #1
 801f1a6:	930f      	str	r3, [sp, #60]	; 0x3c
 801f1a8:	1a43      	subs	r3, r0, r1
 801f1aa:	1e5a      	subs	r2, r3, #1
 801f1ac:	bf45      	ittet	mi
 801f1ae:	f1c3 0301 	rsbmi	r3, r3, #1
 801f1b2:	9305      	strmi	r3, [sp, #20]
 801f1b4:	2300      	movpl	r3, #0
 801f1b6:	2300      	movmi	r3, #0
 801f1b8:	9206      	str	r2, [sp, #24]
 801f1ba:	bf54      	ite	pl
 801f1bc:	9305      	strpl	r3, [sp, #20]
 801f1be:	9306      	strmi	r3, [sp, #24]
 801f1c0:	f1bb 0f00 	cmp.w	fp, #0
 801f1c4:	db18      	blt.n	801f1f8 <_dtoa_r+0x218>
 801f1c6:	9b06      	ldr	r3, [sp, #24]
 801f1c8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801f1cc:	445b      	add	r3, fp
 801f1ce:	9306      	str	r3, [sp, #24]
 801f1d0:	2300      	movs	r3, #0
 801f1d2:	9a07      	ldr	r2, [sp, #28]
 801f1d4:	2a09      	cmp	r2, #9
 801f1d6:	d849      	bhi.n	801f26c <_dtoa_r+0x28c>
 801f1d8:	2a05      	cmp	r2, #5
 801f1da:	bfc4      	itt	gt
 801f1dc:	3a04      	subgt	r2, #4
 801f1de:	9207      	strgt	r2, [sp, #28]
 801f1e0:	9a07      	ldr	r2, [sp, #28]
 801f1e2:	f1a2 0202 	sub.w	r2, r2, #2
 801f1e6:	bfcc      	ite	gt
 801f1e8:	2400      	movgt	r4, #0
 801f1ea:	2401      	movle	r4, #1
 801f1ec:	2a03      	cmp	r2, #3
 801f1ee:	d848      	bhi.n	801f282 <_dtoa_r+0x2a2>
 801f1f0:	e8df f002 	tbb	[pc, r2]
 801f1f4:	3a2c2e0b 	.word	0x3a2c2e0b
 801f1f8:	9b05      	ldr	r3, [sp, #20]
 801f1fa:	2200      	movs	r2, #0
 801f1fc:	eba3 030b 	sub.w	r3, r3, fp
 801f200:	9305      	str	r3, [sp, #20]
 801f202:	920e      	str	r2, [sp, #56]	; 0x38
 801f204:	f1cb 0300 	rsb	r3, fp, #0
 801f208:	e7e3      	b.n	801f1d2 <_dtoa_r+0x1f2>
 801f20a:	2200      	movs	r2, #0
 801f20c:	9208      	str	r2, [sp, #32]
 801f20e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f210:	2a00      	cmp	r2, #0
 801f212:	dc39      	bgt.n	801f288 <_dtoa_r+0x2a8>
 801f214:	f04f 0a01 	mov.w	sl, #1
 801f218:	46d1      	mov	r9, sl
 801f21a:	4652      	mov	r2, sl
 801f21c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801f220:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801f222:	2100      	movs	r1, #0
 801f224:	6079      	str	r1, [r7, #4]
 801f226:	2004      	movs	r0, #4
 801f228:	f100 0c14 	add.w	ip, r0, #20
 801f22c:	4594      	cmp	ip, r2
 801f22e:	6879      	ldr	r1, [r7, #4]
 801f230:	d92f      	bls.n	801f292 <_dtoa_r+0x2b2>
 801f232:	4630      	mov	r0, r6
 801f234:	930c      	str	r3, [sp, #48]	; 0x30
 801f236:	f000 fd5f 	bl	801fcf8 <_Balloc>
 801f23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f23c:	9000      	str	r0, [sp, #0]
 801f23e:	4602      	mov	r2, r0
 801f240:	2800      	cmp	r0, #0
 801f242:	d149      	bne.n	801f2d8 <_dtoa_r+0x2f8>
 801f244:	4b23      	ldr	r3, [pc, #140]	; (801f2d4 <_dtoa_r+0x2f4>)
 801f246:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f24a:	e6df      	b.n	801f00c <_dtoa_r+0x2c>
 801f24c:	2201      	movs	r2, #1
 801f24e:	e7dd      	b.n	801f20c <_dtoa_r+0x22c>
 801f250:	2200      	movs	r2, #0
 801f252:	9208      	str	r2, [sp, #32]
 801f254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f256:	eb0b 0a02 	add.w	sl, fp, r2
 801f25a:	f10a 0901 	add.w	r9, sl, #1
 801f25e:	464a      	mov	r2, r9
 801f260:	2a01      	cmp	r2, #1
 801f262:	bfb8      	it	lt
 801f264:	2201      	movlt	r2, #1
 801f266:	e7db      	b.n	801f220 <_dtoa_r+0x240>
 801f268:	2201      	movs	r2, #1
 801f26a:	e7f2      	b.n	801f252 <_dtoa_r+0x272>
 801f26c:	2401      	movs	r4, #1
 801f26e:	2200      	movs	r2, #0
 801f270:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801f274:	f04f 3aff 	mov.w	sl, #4294967295
 801f278:	2100      	movs	r1, #0
 801f27a:	46d1      	mov	r9, sl
 801f27c:	2212      	movs	r2, #18
 801f27e:	9109      	str	r1, [sp, #36]	; 0x24
 801f280:	e7ce      	b.n	801f220 <_dtoa_r+0x240>
 801f282:	2201      	movs	r2, #1
 801f284:	9208      	str	r2, [sp, #32]
 801f286:	e7f5      	b.n	801f274 <_dtoa_r+0x294>
 801f288:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801f28c:	46d1      	mov	r9, sl
 801f28e:	4652      	mov	r2, sl
 801f290:	e7c6      	b.n	801f220 <_dtoa_r+0x240>
 801f292:	3101      	adds	r1, #1
 801f294:	6079      	str	r1, [r7, #4]
 801f296:	0040      	lsls	r0, r0, #1
 801f298:	e7c6      	b.n	801f228 <_dtoa_r+0x248>
 801f29a:	bf00      	nop
 801f29c:	f3af 8000 	nop.w
 801f2a0:	636f4361 	.word	0x636f4361
 801f2a4:	3fd287a7 	.word	0x3fd287a7
 801f2a8:	8b60c8b3 	.word	0x8b60c8b3
 801f2ac:	3fc68a28 	.word	0x3fc68a28
 801f2b0:	509f79fb 	.word	0x509f79fb
 801f2b4:	3fd34413 	.word	0x3fd34413
 801f2b8:	08024422 	.word	0x08024422
 801f2bc:	08024439 	.word	0x08024439
 801f2c0:	7ff00000 	.word	0x7ff00000
 801f2c4:	0802441e 	.word	0x0802441e
 801f2c8:	08024415 	.word	0x08024415
 801f2cc:	080242f1 	.word	0x080242f1
 801f2d0:	08024598 	.word	0x08024598
 801f2d4:	08024498 	.word	0x08024498
 801f2d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801f2da:	9900      	ldr	r1, [sp, #0]
 801f2dc:	6011      	str	r1, [r2, #0]
 801f2de:	f1b9 0f0e 	cmp.w	r9, #14
 801f2e2:	d872      	bhi.n	801f3ca <_dtoa_r+0x3ea>
 801f2e4:	2c00      	cmp	r4, #0
 801f2e6:	d070      	beq.n	801f3ca <_dtoa_r+0x3ea>
 801f2e8:	f1bb 0f00 	cmp.w	fp, #0
 801f2ec:	f340 80a6 	ble.w	801f43c <_dtoa_r+0x45c>
 801f2f0:	49ca      	ldr	r1, [pc, #808]	; (801f61c <_dtoa_r+0x63c>)
 801f2f2:	f00b 020f 	and.w	r2, fp, #15
 801f2f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801f2fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801f2fe:	ed92 7b00 	vldr	d7, [r2]
 801f302:	ea4f 112b 	mov.w	r1, fp, asr #4
 801f306:	f000 808d 	beq.w	801f424 <_dtoa_r+0x444>
 801f30a:	4ac5      	ldr	r2, [pc, #788]	; (801f620 <_dtoa_r+0x640>)
 801f30c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801f310:	ed92 6b08 	vldr	d6, [r2, #32]
 801f314:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801f318:	ed8d 6b02 	vstr	d6, [sp, #8]
 801f31c:	f001 010f 	and.w	r1, r1, #15
 801f320:	2203      	movs	r2, #3
 801f322:	48bf      	ldr	r0, [pc, #764]	; (801f620 <_dtoa_r+0x640>)
 801f324:	2900      	cmp	r1, #0
 801f326:	d17f      	bne.n	801f428 <_dtoa_r+0x448>
 801f328:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f32c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801f330:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f334:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f336:	2900      	cmp	r1, #0
 801f338:	f000 80b2 	beq.w	801f4a0 <_dtoa_r+0x4c0>
 801f33c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801f340:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f344:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f34c:	f140 80a8 	bpl.w	801f4a0 <_dtoa_r+0x4c0>
 801f350:	f1b9 0f00 	cmp.w	r9, #0
 801f354:	f000 80a4 	beq.w	801f4a0 <_dtoa_r+0x4c0>
 801f358:	f1ba 0f00 	cmp.w	sl, #0
 801f35c:	dd31      	ble.n	801f3c2 <_dtoa_r+0x3e2>
 801f35e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801f362:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f366:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f36a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801f36e:	3201      	adds	r2, #1
 801f370:	4650      	mov	r0, sl
 801f372:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f376:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801f37a:	ee07 2a90 	vmov	s15, r2
 801f37e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f382:	eea7 5b06 	vfma.f64	d5, d7, d6
 801f386:	ed8d 5b02 	vstr	d5, [sp, #8]
 801f38a:	9c03      	ldr	r4, [sp, #12]
 801f38c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801f390:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801f394:	2800      	cmp	r0, #0
 801f396:	f040 8086 	bne.w	801f4a6 <_dtoa_r+0x4c6>
 801f39a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f39e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f3a2:	ec42 1b17 	vmov	d7, r1, r2
 801f3a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3ae:	f300 8272 	bgt.w	801f896 <_dtoa_r+0x8b6>
 801f3b2:	eeb1 7b47 	vneg.f64	d7, d7
 801f3b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3be:	f100 8267 	bmi.w	801f890 <_dtoa_r+0x8b0>
 801f3c2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801f3c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f3ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f3cc:	2a00      	cmp	r2, #0
 801f3ce:	f2c0 8129 	blt.w	801f624 <_dtoa_r+0x644>
 801f3d2:	f1bb 0f0e 	cmp.w	fp, #14
 801f3d6:	f300 8125 	bgt.w	801f624 <_dtoa_r+0x644>
 801f3da:	4b90      	ldr	r3, [pc, #576]	; (801f61c <_dtoa_r+0x63c>)
 801f3dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f3e0:	ed93 6b00 	vldr	d6, [r3]
 801f3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	f280 80c3 	bge.w	801f572 <_dtoa_r+0x592>
 801f3ec:	f1b9 0f00 	cmp.w	r9, #0
 801f3f0:	f300 80bf 	bgt.w	801f572 <_dtoa_r+0x592>
 801f3f4:	f040 824c 	bne.w	801f890 <_dtoa_r+0x8b0>
 801f3f8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f3fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f400:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f404:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f40c:	464c      	mov	r4, r9
 801f40e:	464f      	mov	r7, r9
 801f410:	f280 8222 	bge.w	801f858 <_dtoa_r+0x878>
 801f414:	f8dd 8000 	ldr.w	r8, [sp]
 801f418:	2331      	movs	r3, #49	; 0x31
 801f41a:	f808 3b01 	strb.w	r3, [r8], #1
 801f41e:	f10b 0b01 	add.w	fp, fp, #1
 801f422:	e21e      	b.n	801f862 <_dtoa_r+0x882>
 801f424:	2202      	movs	r2, #2
 801f426:	e77c      	b.n	801f322 <_dtoa_r+0x342>
 801f428:	07cc      	lsls	r4, r1, #31
 801f42a:	d504      	bpl.n	801f436 <_dtoa_r+0x456>
 801f42c:	ed90 6b00 	vldr	d6, [r0]
 801f430:	3201      	adds	r2, #1
 801f432:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f436:	1049      	asrs	r1, r1, #1
 801f438:	3008      	adds	r0, #8
 801f43a:	e773      	b.n	801f324 <_dtoa_r+0x344>
 801f43c:	d02e      	beq.n	801f49c <_dtoa_r+0x4bc>
 801f43e:	f1cb 0100 	rsb	r1, fp, #0
 801f442:	4a76      	ldr	r2, [pc, #472]	; (801f61c <_dtoa_r+0x63c>)
 801f444:	f001 000f 	and.w	r0, r1, #15
 801f448:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801f44c:	ed92 7b00 	vldr	d7, [r2]
 801f450:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801f454:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f458:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f45c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801f460:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801f464:	486e      	ldr	r0, [pc, #440]	; (801f620 <_dtoa_r+0x640>)
 801f466:	1109      	asrs	r1, r1, #4
 801f468:	2400      	movs	r4, #0
 801f46a:	2202      	movs	r2, #2
 801f46c:	b939      	cbnz	r1, 801f47e <_dtoa_r+0x49e>
 801f46e:	2c00      	cmp	r4, #0
 801f470:	f43f af60 	beq.w	801f334 <_dtoa_r+0x354>
 801f474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f47c:	e75a      	b.n	801f334 <_dtoa_r+0x354>
 801f47e:	07cf      	lsls	r7, r1, #31
 801f480:	d509      	bpl.n	801f496 <_dtoa_r+0x4b6>
 801f482:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801f486:	ed90 7b00 	vldr	d7, [r0]
 801f48a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f48e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f492:	3201      	adds	r2, #1
 801f494:	2401      	movs	r4, #1
 801f496:	1049      	asrs	r1, r1, #1
 801f498:	3008      	adds	r0, #8
 801f49a:	e7e7      	b.n	801f46c <_dtoa_r+0x48c>
 801f49c:	2202      	movs	r2, #2
 801f49e:	e749      	b.n	801f334 <_dtoa_r+0x354>
 801f4a0:	465f      	mov	r7, fp
 801f4a2:	4648      	mov	r0, r9
 801f4a4:	e765      	b.n	801f372 <_dtoa_r+0x392>
 801f4a6:	ec42 1b17 	vmov	d7, r1, r2
 801f4aa:	4a5c      	ldr	r2, [pc, #368]	; (801f61c <_dtoa_r+0x63c>)
 801f4ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801f4b0:	ed12 4b02 	vldr	d4, [r2, #-8]
 801f4b4:	9a00      	ldr	r2, [sp, #0]
 801f4b6:	1814      	adds	r4, r2, r0
 801f4b8:	9a08      	ldr	r2, [sp, #32]
 801f4ba:	b352      	cbz	r2, 801f512 <_dtoa_r+0x532>
 801f4bc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801f4c0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801f4c4:	f8dd 8000 	ldr.w	r8, [sp]
 801f4c8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801f4cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f4d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f4d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f4d8:	ee14 2a90 	vmov	r2, s9
 801f4dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f4e0:	3230      	adds	r2, #48	; 0x30
 801f4e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f4e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4ee:	f808 2b01 	strb.w	r2, [r8], #1
 801f4f2:	d439      	bmi.n	801f568 <_dtoa_r+0x588>
 801f4f4:	ee32 5b46 	vsub.f64	d5, d2, d6
 801f4f8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801f4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f500:	d472      	bmi.n	801f5e8 <_dtoa_r+0x608>
 801f502:	45a0      	cmp	r8, r4
 801f504:	f43f af5d 	beq.w	801f3c2 <_dtoa_r+0x3e2>
 801f508:	ee27 7b03 	vmul.f64	d7, d7, d3
 801f50c:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f510:	e7e0      	b.n	801f4d4 <_dtoa_r+0x4f4>
 801f512:	f8dd 8000 	ldr.w	r8, [sp]
 801f516:	ee27 7b04 	vmul.f64	d7, d7, d4
 801f51a:	4621      	mov	r1, r4
 801f51c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f520:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f524:	ee14 2a90 	vmov	r2, s9
 801f528:	3230      	adds	r2, #48	; 0x30
 801f52a:	f808 2b01 	strb.w	r2, [r8], #1
 801f52e:	45a0      	cmp	r8, r4
 801f530:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f534:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f538:	d118      	bne.n	801f56c <_dtoa_r+0x58c>
 801f53a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801f53e:	ee37 4b05 	vadd.f64	d4, d7, d5
 801f542:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801f546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f54a:	dc4d      	bgt.n	801f5e8 <_dtoa_r+0x608>
 801f54c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f550:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f558:	f57f af33 	bpl.w	801f3c2 <_dtoa_r+0x3e2>
 801f55c:	4688      	mov	r8, r1
 801f55e:	3901      	subs	r1, #1
 801f560:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801f564:	2b30      	cmp	r3, #48	; 0x30
 801f566:	d0f9      	beq.n	801f55c <_dtoa_r+0x57c>
 801f568:	46bb      	mov	fp, r7
 801f56a:	e02a      	b.n	801f5c2 <_dtoa_r+0x5e2>
 801f56c:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f570:	e7d6      	b.n	801f520 <_dtoa_r+0x540>
 801f572:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f576:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801f57a:	f8dd 8000 	ldr.w	r8, [sp]
 801f57e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801f582:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801f586:	ee15 3a10 	vmov	r3, s10
 801f58a:	3330      	adds	r3, #48	; 0x30
 801f58c:	f808 3b01 	strb.w	r3, [r8], #1
 801f590:	9b00      	ldr	r3, [sp, #0]
 801f592:	eba8 0303 	sub.w	r3, r8, r3
 801f596:	4599      	cmp	r9, r3
 801f598:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801f59c:	eea3 7b46 	vfms.f64	d7, d3, d6
 801f5a0:	d133      	bne.n	801f60a <_dtoa_r+0x62a>
 801f5a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f5a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5ae:	dc1a      	bgt.n	801f5e6 <_dtoa_r+0x606>
 801f5b0:	eeb4 7b46 	vcmp.f64	d7, d6
 801f5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5b8:	d103      	bne.n	801f5c2 <_dtoa_r+0x5e2>
 801f5ba:	ee15 3a10 	vmov	r3, s10
 801f5be:	07d9      	lsls	r1, r3, #31
 801f5c0:	d411      	bmi.n	801f5e6 <_dtoa_r+0x606>
 801f5c2:	4629      	mov	r1, r5
 801f5c4:	4630      	mov	r0, r6
 801f5c6:	f000 fbd7 	bl	801fd78 <_Bfree>
 801f5ca:	2300      	movs	r3, #0
 801f5cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5ce:	f888 3000 	strb.w	r3, [r8]
 801f5d2:	f10b 0301 	add.w	r3, fp, #1
 801f5d6:	6013      	str	r3, [r2, #0]
 801f5d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	f43f ad4d 	beq.w	801f07a <_dtoa_r+0x9a>
 801f5e0:	f8c3 8000 	str.w	r8, [r3]
 801f5e4:	e549      	b.n	801f07a <_dtoa_r+0x9a>
 801f5e6:	465f      	mov	r7, fp
 801f5e8:	4643      	mov	r3, r8
 801f5ea:	4698      	mov	r8, r3
 801f5ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f5f0:	2a39      	cmp	r2, #57	; 0x39
 801f5f2:	d106      	bne.n	801f602 <_dtoa_r+0x622>
 801f5f4:	9a00      	ldr	r2, [sp, #0]
 801f5f6:	429a      	cmp	r2, r3
 801f5f8:	d1f7      	bne.n	801f5ea <_dtoa_r+0x60a>
 801f5fa:	9900      	ldr	r1, [sp, #0]
 801f5fc:	2230      	movs	r2, #48	; 0x30
 801f5fe:	3701      	adds	r7, #1
 801f600:	700a      	strb	r2, [r1, #0]
 801f602:	781a      	ldrb	r2, [r3, #0]
 801f604:	3201      	adds	r2, #1
 801f606:	701a      	strb	r2, [r3, #0]
 801f608:	e7ae      	b.n	801f568 <_dtoa_r+0x588>
 801f60a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801f60e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f616:	d1b2      	bne.n	801f57e <_dtoa_r+0x59e>
 801f618:	e7d3      	b.n	801f5c2 <_dtoa_r+0x5e2>
 801f61a:	bf00      	nop
 801f61c:	08024598 	.word	0x08024598
 801f620:	08024570 	.word	0x08024570
 801f624:	9908      	ldr	r1, [sp, #32]
 801f626:	2900      	cmp	r1, #0
 801f628:	f000 80d1 	beq.w	801f7ce <_dtoa_r+0x7ee>
 801f62c:	9907      	ldr	r1, [sp, #28]
 801f62e:	2901      	cmp	r1, #1
 801f630:	f300 80b4 	bgt.w	801f79c <_dtoa_r+0x7bc>
 801f634:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f636:	2900      	cmp	r1, #0
 801f638:	f000 80ac 	beq.w	801f794 <_dtoa_r+0x7b4>
 801f63c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f640:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f644:	461c      	mov	r4, r3
 801f646:	930a      	str	r3, [sp, #40]	; 0x28
 801f648:	9b05      	ldr	r3, [sp, #20]
 801f64a:	4413      	add	r3, r2
 801f64c:	9305      	str	r3, [sp, #20]
 801f64e:	9b06      	ldr	r3, [sp, #24]
 801f650:	2101      	movs	r1, #1
 801f652:	4413      	add	r3, r2
 801f654:	4630      	mov	r0, r6
 801f656:	9306      	str	r3, [sp, #24]
 801f658:	f000 fc4a 	bl	801fef0 <__i2b>
 801f65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f65e:	4607      	mov	r7, r0
 801f660:	f1b8 0f00 	cmp.w	r8, #0
 801f664:	dd0d      	ble.n	801f682 <_dtoa_r+0x6a2>
 801f666:	9a06      	ldr	r2, [sp, #24]
 801f668:	2a00      	cmp	r2, #0
 801f66a:	dd0a      	ble.n	801f682 <_dtoa_r+0x6a2>
 801f66c:	4542      	cmp	r2, r8
 801f66e:	9905      	ldr	r1, [sp, #20]
 801f670:	bfa8      	it	ge
 801f672:	4642      	movge	r2, r8
 801f674:	1a89      	subs	r1, r1, r2
 801f676:	9105      	str	r1, [sp, #20]
 801f678:	9906      	ldr	r1, [sp, #24]
 801f67a:	eba8 0802 	sub.w	r8, r8, r2
 801f67e:	1a8a      	subs	r2, r1, r2
 801f680:	9206      	str	r2, [sp, #24]
 801f682:	b303      	cbz	r3, 801f6c6 <_dtoa_r+0x6e6>
 801f684:	9a08      	ldr	r2, [sp, #32]
 801f686:	2a00      	cmp	r2, #0
 801f688:	f000 80a6 	beq.w	801f7d8 <_dtoa_r+0x7f8>
 801f68c:	2c00      	cmp	r4, #0
 801f68e:	dd13      	ble.n	801f6b8 <_dtoa_r+0x6d8>
 801f690:	4639      	mov	r1, r7
 801f692:	4622      	mov	r2, r4
 801f694:	4630      	mov	r0, r6
 801f696:	930c      	str	r3, [sp, #48]	; 0x30
 801f698:	f000 fce6 	bl	8020068 <__pow5mult>
 801f69c:	462a      	mov	r2, r5
 801f69e:	4601      	mov	r1, r0
 801f6a0:	4607      	mov	r7, r0
 801f6a2:	4630      	mov	r0, r6
 801f6a4:	f000 fc3a 	bl	801ff1c <__multiply>
 801f6a8:	4629      	mov	r1, r5
 801f6aa:	900a      	str	r0, [sp, #40]	; 0x28
 801f6ac:	4630      	mov	r0, r6
 801f6ae:	f000 fb63 	bl	801fd78 <_Bfree>
 801f6b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f6b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f6b6:	4615      	mov	r5, r2
 801f6b8:	1b1a      	subs	r2, r3, r4
 801f6ba:	d004      	beq.n	801f6c6 <_dtoa_r+0x6e6>
 801f6bc:	4629      	mov	r1, r5
 801f6be:	4630      	mov	r0, r6
 801f6c0:	f000 fcd2 	bl	8020068 <__pow5mult>
 801f6c4:	4605      	mov	r5, r0
 801f6c6:	2101      	movs	r1, #1
 801f6c8:	4630      	mov	r0, r6
 801f6ca:	f000 fc11 	bl	801fef0 <__i2b>
 801f6ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	4604      	mov	r4, r0
 801f6d4:	f340 8082 	ble.w	801f7dc <_dtoa_r+0x7fc>
 801f6d8:	461a      	mov	r2, r3
 801f6da:	4601      	mov	r1, r0
 801f6dc:	4630      	mov	r0, r6
 801f6de:	f000 fcc3 	bl	8020068 <__pow5mult>
 801f6e2:	9b07      	ldr	r3, [sp, #28]
 801f6e4:	2b01      	cmp	r3, #1
 801f6e6:	4604      	mov	r4, r0
 801f6e8:	dd7b      	ble.n	801f7e2 <_dtoa_r+0x802>
 801f6ea:	2300      	movs	r3, #0
 801f6ec:	930a      	str	r3, [sp, #40]	; 0x28
 801f6ee:	6922      	ldr	r2, [r4, #16]
 801f6f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f6f4:	6910      	ldr	r0, [r2, #16]
 801f6f6:	f000 fbab 	bl	801fe50 <__hi0bits>
 801f6fa:	f1c0 0020 	rsb	r0, r0, #32
 801f6fe:	9b06      	ldr	r3, [sp, #24]
 801f700:	4418      	add	r0, r3
 801f702:	f010 001f 	ands.w	r0, r0, #31
 801f706:	f000 808d 	beq.w	801f824 <_dtoa_r+0x844>
 801f70a:	f1c0 0220 	rsb	r2, r0, #32
 801f70e:	2a04      	cmp	r2, #4
 801f710:	f340 8086 	ble.w	801f820 <_dtoa_r+0x840>
 801f714:	f1c0 001c 	rsb	r0, r0, #28
 801f718:	9b05      	ldr	r3, [sp, #20]
 801f71a:	4403      	add	r3, r0
 801f71c:	9305      	str	r3, [sp, #20]
 801f71e:	9b06      	ldr	r3, [sp, #24]
 801f720:	4403      	add	r3, r0
 801f722:	4480      	add	r8, r0
 801f724:	9306      	str	r3, [sp, #24]
 801f726:	9b05      	ldr	r3, [sp, #20]
 801f728:	2b00      	cmp	r3, #0
 801f72a:	dd05      	ble.n	801f738 <_dtoa_r+0x758>
 801f72c:	4629      	mov	r1, r5
 801f72e:	461a      	mov	r2, r3
 801f730:	4630      	mov	r0, r6
 801f732:	f000 fcf3 	bl	802011c <__lshift>
 801f736:	4605      	mov	r5, r0
 801f738:	9b06      	ldr	r3, [sp, #24]
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	dd05      	ble.n	801f74a <_dtoa_r+0x76a>
 801f73e:	4621      	mov	r1, r4
 801f740:	461a      	mov	r2, r3
 801f742:	4630      	mov	r0, r6
 801f744:	f000 fcea 	bl	802011c <__lshift>
 801f748:	4604      	mov	r4, r0
 801f74a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f74c:	2b00      	cmp	r3, #0
 801f74e:	d06b      	beq.n	801f828 <_dtoa_r+0x848>
 801f750:	4621      	mov	r1, r4
 801f752:	4628      	mov	r0, r5
 801f754:	f000 fd4e 	bl	80201f4 <__mcmp>
 801f758:	2800      	cmp	r0, #0
 801f75a:	da65      	bge.n	801f828 <_dtoa_r+0x848>
 801f75c:	2300      	movs	r3, #0
 801f75e:	4629      	mov	r1, r5
 801f760:	220a      	movs	r2, #10
 801f762:	4630      	mov	r0, r6
 801f764:	f000 fb2a 	bl	801fdbc <__multadd>
 801f768:	9b08      	ldr	r3, [sp, #32]
 801f76a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f76e:	4605      	mov	r5, r0
 801f770:	2b00      	cmp	r3, #0
 801f772:	f000 8192 	beq.w	801fa9a <_dtoa_r+0xaba>
 801f776:	4639      	mov	r1, r7
 801f778:	2300      	movs	r3, #0
 801f77a:	220a      	movs	r2, #10
 801f77c:	4630      	mov	r0, r6
 801f77e:	f000 fb1d 	bl	801fdbc <__multadd>
 801f782:	f1ba 0f00 	cmp.w	sl, #0
 801f786:	4607      	mov	r7, r0
 801f788:	f300 808e 	bgt.w	801f8a8 <_dtoa_r+0x8c8>
 801f78c:	9b07      	ldr	r3, [sp, #28]
 801f78e:	2b02      	cmp	r3, #2
 801f790:	dc51      	bgt.n	801f836 <_dtoa_r+0x856>
 801f792:	e089      	b.n	801f8a8 <_dtoa_r+0x8c8>
 801f794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f796:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f79a:	e751      	b.n	801f640 <_dtoa_r+0x660>
 801f79c:	f109 34ff 	add.w	r4, r9, #4294967295
 801f7a0:	42a3      	cmp	r3, r4
 801f7a2:	bfbf      	itttt	lt
 801f7a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801f7a6:	1ae3      	sublt	r3, r4, r3
 801f7a8:	18d2      	addlt	r2, r2, r3
 801f7aa:	4613      	movlt	r3, r2
 801f7ac:	bfb7      	itett	lt
 801f7ae:	930e      	strlt	r3, [sp, #56]	; 0x38
 801f7b0:	1b1c      	subge	r4, r3, r4
 801f7b2:	4623      	movlt	r3, r4
 801f7b4:	2400      	movlt	r4, #0
 801f7b6:	f1b9 0f00 	cmp.w	r9, #0
 801f7ba:	bfb5      	itete	lt
 801f7bc:	9a05      	ldrlt	r2, [sp, #20]
 801f7be:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801f7c2:	eba2 0809 	sublt.w	r8, r2, r9
 801f7c6:	464a      	movge	r2, r9
 801f7c8:	bfb8      	it	lt
 801f7ca:	2200      	movlt	r2, #0
 801f7cc:	e73b      	b.n	801f646 <_dtoa_r+0x666>
 801f7ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f7d2:	9f08      	ldr	r7, [sp, #32]
 801f7d4:	461c      	mov	r4, r3
 801f7d6:	e743      	b.n	801f660 <_dtoa_r+0x680>
 801f7d8:	461a      	mov	r2, r3
 801f7da:	e76f      	b.n	801f6bc <_dtoa_r+0x6dc>
 801f7dc:	9b07      	ldr	r3, [sp, #28]
 801f7de:	2b01      	cmp	r3, #1
 801f7e0:	dc18      	bgt.n	801f814 <_dtoa_r+0x834>
 801f7e2:	9b02      	ldr	r3, [sp, #8]
 801f7e4:	b9b3      	cbnz	r3, 801f814 <_dtoa_r+0x834>
 801f7e6:	9b03      	ldr	r3, [sp, #12]
 801f7e8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801f7ec:	b9a2      	cbnz	r2, 801f818 <_dtoa_r+0x838>
 801f7ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801f7f2:	0d12      	lsrs	r2, r2, #20
 801f7f4:	0512      	lsls	r2, r2, #20
 801f7f6:	b18a      	cbz	r2, 801f81c <_dtoa_r+0x83c>
 801f7f8:	9b05      	ldr	r3, [sp, #20]
 801f7fa:	3301      	adds	r3, #1
 801f7fc:	9305      	str	r3, [sp, #20]
 801f7fe:	9b06      	ldr	r3, [sp, #24]
 801f800:	3301      	adds	r3, #1
 801f802:	9306      	str	r3, [sp, #24]
 801f804:	2301      	movs	r3, #1
 801f806:	930a      	str	r3, [sp, #40]	; 0x28
 801f808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	f47f af6f 	bne.w	801f6ee <_dtoa_r+0x70e>
 801f810:	2001      	movs	r0, #1
 801f812:	e774      	b.n	801f6fe <_dtoa_r+0x71e>
 801f814:	2300      	movs	r3, #0
 801f816:	e7f6      	b.n	801f806 <_dtoa_r+0x826>
 801f818:	9b02      	ldr	r3, [sp, #8]
 801f81a:	e7f4      	b.n	801f806 <_dtoa_r+0x826>
 801f81c:	920a      	str	r2, [sp, #40]	; 0x28
 801f81e:	e7f3      	b.n	801f808 <_dtoa_r+0x828>
 801f820:	d081      	beq.n	801f726 <_dtoa_r+0x746>
 801f822:	4610      	mov	r0, r2
 801f824:	301c      	adds	r0, #28
 801f826:	e777      	b.n	801f718 <_dtoa_r+0x738>
 801f828:	f1b9 0f00 	cmp.w	r9, #0
 801f82c:	dc37      	bgt.n	801f89e <_dtoa_r+0x8be>
 801f82e:	9b07      	ldr	r3, [sp, #28]
 801f830:	2b02      	cmp	r3, #2
 801f832:	dd34      	ble.n	801f89e <_dtoa_r+0x8be>
 801f834:	46ca      	mov	sl, r9
 801f836:	f1ba 0f00 	cmp.w	sl, #0
 801f83a:	d10d      	bne.n	801f858 <_dtoa_r+0x878>
 801f83c:	4621      	mov	r1, r4
 801f83e:	4653      	mov	r3, sl
 801f840:	2205      	movs	r2, #5
 801f842:	4630      	mov	r0, r6
 801f844:	f000 faba 	bl	801fdbc <__multadd>
 801f848:	4601      	mov	r1, r0
 801f84a:	4604      	mov	r4, r0
 801f84c:	4628      	mov	r0, r5
 801f84e:	f000 fcd1 	bl	80201f4 <__mcmp>
 801f852:	2800      	cmp	r0, #0
 801f854:	f73f adde 	bgt.w	801f414 <_dtoa_r+0x434>
 801f858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f85a:	f8dd 8000 	ldr.w	r8, [sp]
 801f85e:	ea6f 0b03 	mvn.w	fp, r3
 801f862:	f04f 0900 	mov.w	r9, #0
 801f866:	4621      	mov	r1, r4
 801f868:	4630      	mov	r0, r6
 801f86a:	f000 fa85 	bl	801fd78 <_Bfree>
 801f86e:	2f00      	cmp	r7, #0
 801f870:	f43f aea7 	beq.w	801f5c2 <_dtoa_r+0x5e2>
 801f874:	f1b9 0f00 	cmp.w	r9, #0
 801f878:	d005      	beq.n	801f886 <_dtoa_r+0x8a6>
 801f87a:	45b9      	cmp	r9, r7
 801f87c:	d003      	beq.n	801f886 <_dtoa_r+0x8a6>
 801f87e:	4649      	mov	r1, r9
 801f880:	4630      	mov	r0, r6
 801f882:	f000 fa79 	bl	801fd78 <_Bfree>
 801f886:	4639      	mov	r1, r7
 801f888:	4630      	mov	r0, r6
 801f88a:	f000 fa75 	bl	801fd78 <_Bfree>
 801f88e:	e698      	b.n	801f5c2 <_dtoa_r+0x5e2>
 801f890:	2400      	movs	r4, #0
 801f892:	4627      	mov	r7, r4
 801f894:	e7e0      	b.n	801f858 <_dtoa_r+0x878>
 801f896:	46bb      	mov	fp, r7
 801f898:	4604      	mov	r4, r0
 801f89a:	4607      	mov	r7, r0
 801f89c:	e5ba      	b.n	801f414 <_dtoa_r+0x434>
 801f89e:	9b08      	ldr	r3, [sp, #32]
 801f8a0:	46ca      	mov	sl, r9
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	f000 8100 	beq.w	801faa8 <_dtoa_r+0xac8>
 801f8a8:	f1b8 0f00 	cmp.w	r8, #0
 801f8ac:	dd05      	ble.n	801f8ba <_dtoa_r+0x8da>
 801f8ae:	4639      	mov	r1, r7
 801f8b0:	4642      	mov	r2, r8
 801f8b2:	4630      	mov	r0, r6
 801f8b4:	f000 fc32 	bl	802011c <__lshift>
 801f8b8:	4607      	mov	r7, r0
 801f8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	d05d      	beq.n	801f97c <_dtoa_r+0x99c>
 801f8c0:	6879      	ldr	r1, [r7, #4]
 801f8c2:	4630      	mov	r0, r6
 801f8c4:	f000 fa18 	bl	801fcf8 <_Balloc>
 801f8c8:	4680      	mov	r8, r0
 801f8ca:	b928      	cbnz	r0, 801f8d8 <_dtoa_r+0x8f8>
 801f8cc:	4b82      	ldr	r3, [pc, #520]	; (801fad8 <_dtoa_r+0xaf8>)
 801f8ce:	4602      	mov	r2, r0
 801f8d0:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f8d4:	f7ff bb9a 	b.w	801f00c <_dtoa_r+0x2c>
 801f8d8:	693a      	ldr	r2, [r7, #16]
 801f8da:	3202      	adds	r2, #2
 801f8dc:	0092      	lsls	r2, r2, #2
 801f8de:	f107 010c 	add.w	r1, r7, #12
 801f8e2:	300c      	adds	r0, #12
 801f8e4:	f7fe fd30 	bl	801e348 <memcpy>
 801f8e8:	2201      	movs	r2, #1
 801f8ea:	4641      	mov	r1, r8
 801f8ec:	4630      	mov	r0, r6
 801f8ee:	f000 fc15 	bl	802011c <__lshift>
 801f8f2:	9b00      	ldr	r3, [sp, #0]
 801f8f4:	3301      	adds	r3, #1
 801f8f6:	9305      	str	r3, [sp, #20]
 801f8f8:	9b00      	ldr	r3, [sp, #0]
 801f8fa:	4453      	add	r3, sl
 801f8fc:	9309      	str	r3, [sp, #36]	; 0x24
 801f8fe:	9b02      	ldr	r3, [sp, #8]
 801f900:	f003 0301 	and.w	r3, r3, #1
 801f904:	46b9      	mov	r9, r7
 801f906:	9308      	str	r3, [sp, #32]
 801f908:	4607      	mov	r7, r0
 801f90a:	9b05      	ldr	r3, [sp, #20]
 801f90c:	4621      	mov	r1, r4
 801f90e:	3b01      	subs	r3, #1
 801f910:	4628      	mov	r0, r5
 801f912:	9302      	str	r3, [sp, #8]
 801f914:	f7ff fad8 	bl	801eec8 <quorem>
 801f918:	4603      	mov	r3, r0
 801f91a:	3330      	adds	r3, #48	; 0x30
 801f91c:	9006      	str	r0, [sp, #24]
 801f91e:	4649      	mov	r1, r9
 801f920:	4628      	mov	r0, r5
 801f922:	930a      	str	r3, [sp, #40]	; 0x28
 801f924:	f000 fc66 	bl	80201f4 <__mcmp>
 801f928:	463a      	mov	r2, r7
 801f92a:	4682      	mov	sl, r0
 801f92c:	4621      	mov	r1, r4
 801f92e:	4630      	mov	r0, r6
 801f930:	f000 fc7c 	bl	802022c <__mdiff>
 801f934:	68c2      	ldr	r2, [r0, #12]
 801f936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f938:	4680      	mov	r8, r0
 801f93a:	bb0a      	cbnz	r2, 801f980 <_dtoa_r+0x9a0>
 801f93c:	4601      	mov	r1, r0
 801f93e:	4628      	mov	r0, r5
 801f940:	f000 fc58 	bl	80201f4 <__mcmp>
 801f944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f946:	4602      	mov	r2, r0
 801f948:	4641      	mov	r1, r8
 801f94a:	4630      	mov	r0, r6
 801f94c:	920e      	str	r2, [sp, #56]	; 0x38
 801f94e:	930a      	str	r3, [sp, #40]	; 0x28
 801f950:	f000 fa12 	bl	801fd78 <_Bfree>
 801f954:	9b07      	ldr	r3, [sp, #28]
 801f956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f958:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f95c:	ea43 0102 	orr.w	r1, r3, r2
 801f960:	9b08      	ldr	r3, [sp, #32]
 801f962:	430b      	orrs	r3, r1
 801f964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f966:	d10d      	bne.n	801f984 <_dtoa_r+0x9a4>
 801f968:	2b39      	cmp	r3, #57	; 0x39
 801f96a:	d029      	beq.n	801f9c0 <_dtoa_r+0x9e0>
 801f96c:	f1ba 0f00 	cmp.w	sl, #0
 801f970:	dd01      	ble.n	801f976 <_dtoa_r+0x996>
 801f972:	9b06      	ldr	r3, [sp, #24]
 801f974:	3331      	adds	r3, #49	; 0x31
 801f976:	9a02      	ldr	r2, [sp, #8]
 801f978:	7013      	strb	r3, [r2, #0]
 801f97a:	e774      	b.n	801f866 <_dtoa_r+0x886>
 801f97c:	4638      	mov	r0, r7
 801f97e:	e7b8      	b.n	801f8f2 <_dtoa_r+0x912>
 801f980:	2201      	movs	r2, #1
 801f982:	e7e1      	b.n	801f948 <_dtoa_r+0x968>
 801f984:	f1ba 0f00 	cmp.w	sl, #0
 801f988:	db06      	blt.n	801f998 <_dtoa_r+0x9b8>
 801f98a:	9907      	ldr	r1, [sp, #28]
 801f98c:	ea41 0a0a 	orr.w	sl, r1, sl
 801f990:	9908      	ldr	r1, [sp, #32]
 801f992:	ea5a 0101 	orrs.w	r1, sl, r1
 801f996:	d120      	bne.n	801f9da <_dtoa_r+0x9fa>
 801f998:	2a00      	cmp	r2, #0
 801f99a:	ddec      	ble.n	801f976 <_dtoa_r+0x996>
 801f99c:	4629      	mov	r1, r5
 801f99e:	2201      	movs	r2, #1
 801f9a0:	4630      	mov	r0, r6
 801f9a2:	9305      	str	r3, [sp, #20]
 801f9a4:	f000 fbba 	bl	802011c <__lshift>
 801f9a8:	4621      	mov	r1, r4
 801f9aa:	4605      	mov	r5, r0
 801f9ac:	f000 fc22 	bl	80201f4 <__mcmp>
 801f9b0:	2800      	cmp	r0, #0
 801f9b2:	9b05      	ldr	r3, [sp, #20]
 801f9b4:	dc02      	bgt.n	801f9bc <_dtoa_r+0x9dc>
 801f9b6:	d1de      	bne.n	801f976 <_dtoa_r+0x996>
 801f9b8:	07da      	lsls	r2, r3, #31
 801f9ba:	d5dc      	bpl.n	801f976 <_dtoa_r+0x996>
 801f9bc:	2b39      	cmp	r3, #57	; 0x39
 801f9be:	d1d8      	bne.n	801f972 <_dtoa_r+0x992>
 801f9c0:	9a02      	ldr	r2, [sp, #8]
 801f9c2:	2339      	movs	r3, #57	; 0x39
 801f9c4:	7013      	strb	r3, [r2, #0]
 801f9c6:	4643      	mov	r3, r8
 801f9c8:	4698      	mov	r8, r3
 801f9ca:	3b01      	subs	r3, #1
 801f9cc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801f9d0:	2a39      	cmp	r2, #57	; 0x39
 801f9d2:	d051      	beq.n	801fa78 <_dtoa_r+0xa98>
 801f9d4:	3201      	adds	r2, #1
 801f9d6:	701a      	strb	r2, [r3, #0]
 801f9d8:	e745      	b.n	801f866 <_dtoa_r+0x886>
 801f9da:	2a00      	cmp	r2, #0
 801f9dc:	dd03      	ble.n	801f9e6 <_dtoa_r+0xa06>
 801f9de:	2b39      	cmp	r3, #57	; 0x39
 801f9e0:	d0ee      	beq.n	801f9c0 <_dtoa_r+0x9e0>
 801f9e2:	3301      	adds	r3, #1
 801f9e4:	e7c7      	b.n	801f976 <_dtoa_r+0x996>
 801f9e6:	9a05      	ldr	r2, [sp, #20]
 801f9e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f9ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f9ee:	428a      	cmp	r2, r1
 801f9f0:	d02b      	beq.n	801fa4a <_dtoa_r+0xa6a>
 801f9f2:	4629      	mov	r1, r5
 801f9f4:	2300      	movs	r3, #0
 801f9f6:	220a      	movs	r2, #10
 801f9f8:	4630      	mov	r0, r6
 801f9fa:	f000 f9df 	bl	801fdbc <__multadd>
 801f9fe:	45b9      	cmp	r9, r7
 801fa00:	4605      	mov	r5, r0
 801fa02:	f04f 0300 	mov.w	r3, #0
 801fa06:	f04f 020a 	mov.w	r2, #10
 801fa0a:	4649      	mov	r1, r9
 801fa0c:	4630      	mov	r0, r6
 801fa0e:	d107      	bne.n	801fa20 <_dtoa_r+0xa40>
 801fa10:	f000 f9d4 	bl	801fdbc <__multadd>
 801fa14:	4681      	mov	r9, r0
 801fa16:	4607      	mov	r7, r0
 801fa18:	9b05      	ldr	r3, [sp, #20]
 801fa1a:	3301      	adds	r3, #1
 801fa1c:	9305      	str	r3, [sp, #20]
 801fa1e:	e774      	b.n	801f90a <_dtoa_r+0x92a>
 801fa20:	f000 f9cc 	bl	801fdbc <__multadd>
 801fa24:	4639      	mov	r1, r7
 801fa26:	4681      	mov	r9, r0
 801fa28:	2300      	movs	r3, #0
 801fa2a:	220a      	movs	r2, #10
 801fa2c:	4630      	mov	r0, r6
 801fa2e:	f000 f9c5 	bl	801fdbc <__multadd>
 801fa32:	4607      	mov	r7, r0
 801fa34:	e7f0      	b.n	801fa18 <_dtoa_r+0xa38>
 801fa36:	f1ba 0f00 	cmp.w	sl, #0
 801fa3a:	9a00      	ldr	r2, [sp, #0]
 801fa3c:	bfcc      	ite	gt
 801fa3e:	46d0      	movgt	r8, sl
 801fa40:	f04f 0801 	movle.w	r8, #1
 801fa44:	4490      	add	r8, r2
 801fa46:	f04f 0900 	mov.w	r9, #0
 801fa4a:	4629      	mov	r1, r5
 801fa4c:	2201      	movs	r2, #1
 801fa4e:	4630      	mov	r0, r6
 801fa50:	9302      	str	r3, [sp, #8]
 801fa52:	f000 fb63 	bl	802011c <__lshift>
 801fa56:	4621      	mov	r1, r4
 801fa58:	4605      	mov	r5, r0
 801fa5a:	f000 fbcb 	bl	80201f4 <__mcmp>
 801fa5e:	2800      	cmp	r0, #0
 801fa60:	dcb1      	bgt.n	801f9c6 <_dtoa_r+0x9e6>
 801fa62:	d102      	bne.n	801fa6a <_dtoa_r+0xa8a>
 801fa64:	9b02      	ldr	r3, [sp, #8]
 801fa66:	07db      	lsls	r3, r3, #31
 801fa68:	d4ad      	bmi.n	801f9c6 <_dtoa_r+0x9e6>
 801fa6a:	4643      	mov	r3, r8
 801fa6c:	4698      	mov	r8, r3
 801fa6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fa72:	2a30      	cmp	r2, #48	; 0x30
 801fa74:	d0fa      	beq.n	801fa6c <_dtoa_r+0xa8c>
 801fa76:	e6f6      	b.n	801f866 <_dtoa_r+0x886>
 801fa78:	9a00      	ldr	r2, [sp, #0]
 801fa7a:	429a      	cmp	r2, r3
 801fa7c:	d1a4      	bne.n	801f9c8 <_dtoa_r+0x9e8>
 801fa7e:	f10b 0b01 	add.w	fp, fp, #1
 801fa82:	2331      	movs	r3, #49	; 0x31
 801fa84:	e778      	b.n	801f978 <_dtoa_r+0x998>
 801fa86:	4b15      	ldr	r3, [pc, #84]	; (801fadc <_dtoa_r+0xafc>)
 801fa88:	f7ff bb12 	b.w	801f0b0 <_dtoa_r+0xd0>
 801fa8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	f47f aaee 	bne.w	801f070 <_dtoa_r+0x90>
 801fa94:	4b12      	ldr	r3, [pc, #72]	; (801fae0 <_dtoa_r+0xb00>)
 801fa96:	f7ff bb0b 	b.w	801f0b0 <_dtoa_r+0xd0>
 801fa9a:	f1ba 0f00 	cmp.w	sl, #0
 801fa9e:	dc03      	bgt.n	801faa8 <_dtoa_r+0xac8>
 801faa0:	9b07      	ldr	r3, [sp, #28]
 801faa2:	2b02      	cmp	r3, #2
 801faa4:	f73f aec7 	bgt.w	801f836 <_dtoa_r+0x856>
 801faa8:	f8dd 8000 	ldr.w	r8, [sp]
 801faac:	4621      	mov	r1, r4
 801faae:	4628      	mov	r0, r5
 801fab0:	f7ff fa0a 	bl	801eec8 <quorem>
 801fab4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801fab8:	f808 3b01 	strb.w	r3, [r8], #1
 801fabc:	9a00      	ldr	r2, [sp, #0]
 801fabe:	eba8 0202 	sub.w	r2, r8, r2
 801fac2:	4592      	cmp	sl, r2
 801fac4:	ddb7      	ble.n	801fa36 <_dtoa_r+0xa56>
 801fac6:	4629      	mov	r1, r5
 801fac8:	2300      	movs	r3, #0
 801faca:	220a      	movs	r2, #10
 801facc:	4630      	mov	r0, r6
 801face:	f000 f975 	bl	801fdbc <__multadd>
 801fad2:	4605      	mov	r5, r0
 801fad4:	e7ea      	b.n	801faac <_dtoa_r+0xacc>
 801fad6:	bf00      	nop
 801fad8:	08024498 	.word	0x08024498
 801fadc:	080242f0 	.word	0x080242f0
 801fae0:	08024415 	.word	0x08024415

0801fae4 <std>:
 801fae4:	2300      	movs	r3, #0
 801fae6:	b510      	push	{r4, lr}
 801fae8:	4604      	mov	r4, r0
 801faea:	e9c0 3300 	strd	r3, r3, [r0]
 801faee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801faf2:	6083      	str	r3, [r0, #8]
 801faf4:	8181      	strh	r1, [r0, #12]
 801faf6:	6643      	str	r3, [r0, #100]	; 0x64
 801faf8:	81c2      	strh	r2, [r0, #14]
 801fafa:	6183      	str	r3, [r0, #24]
 801fafc:	4619      	mov	r1, r3
 801fafe:	2208      	movs	r2, #8
 801fb00:	305c      	adds	r0, #92	; 0x5c
 801fb02:	f7fe fc2f 	bl	801e364 <memset>
 801fb06:	4b05      	ldr	r3, [pc, #20]	; (801fb1c <std+0x38>)
 801fb08:	6263      	str	r3, [r4, #36]	; 0x24
 801fb0a:	4b05      	ldr	r3, [pc, #20]	; (801fb20 <std+0x3c>)
 801fb0c:	62a3      	str	r3, [r4, #40]	; 0x28
 801fb0e:	4b05      	ldr	r3, [pc, #20]	; (801fb24 <std+0x40>)
 801fb10:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fb12:	4b05      	ldr	r3, [pc, #20]	; (801fb28 <std+0x44>)
 801fb14:	6224      	str	r4, [r4, #32]
 801fb16:	6323      	str	r3, [r4, #48]	; 0x30
 801fb18:	bd10      	pop	{r4, pc}
 801fb1a:	bf00      	nop
 801fb1c:	080206c9 	.word	0x080206c9
 801fb20:	080206eb 	.word	0x080206eb
 801fb24:	08020723 	.word	0x08020723
 801fb28:	08020747 	.word	0x08020747

0801fb2c <_cleanup_r>:
 801fb2c:	4901      	ldr	r1, [pc, #4]	; (801fb34 <_cleanup_r+0x8>)
 801fb2e:	f000 b8af 	b.w	801fc90 <_fwalk_reent>
 801fb32:	bf00      	nop
 801fb34:	08020a5d 	.word	0x08020a5d

0801fb38 <__sfmoreglue>:
 801fb38:	b570      	push	{r4, r5, r6, lr}
 801fb3a:	1e4a      	subs	r2, r1, #1
 801fb3c:	2568      	movs	r5, #104	; 0x68
 801fb3e:	4355      	muls	r5, r2
 801fb40:	460e      	mov	r6, r1
 801fb42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fb46:	f7fe fc65 	bl	801e414 <_malloc_r>
 801fb4a:	4604      	mov	r4, r0
 801fb4c:	b140      	cbz	r0, 801fb60 <__sfmoreglue+0x28>
 801fb4e:	2100      	movs	r1, #0
 801fb50:	e9c0 1600 	strd	r1, r6, [r0]
 801fb54:	300c      	adds	r0, #12
 801fb56:	60a0      	str	r0, [r4, #8]
 801fb58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fb5c:	f7fe fc02 	bl	801e364 <memset>
 801fb60:	4620      	mov	r0, r4
 801fb62:	bd70      	pop	{r4, r5, r6, pc}

0801fb64 <__sfp_lock_acquire>:
 801fb64:	4801      	ldr	r0, [pc, #4]	; (801fb6c <__sfp_lock_acquire+0x8>)
 801fb66:	f000 b8b8 	b.w	801fcda <__retarget_lock_acquire_recursive>
 801fb6a:	bf00      	nop
 801fb6c:	20019d3c 	.word	0x20019d3c

0801fb70 <__sfp_lock_release>:
 801fb70:	4801      	ldr	r0, [pc, #4]	; (801fb78 <__sfp_lock_release+0x8>)
 801fb72:	f000 b8b3 	b.w	801fcdc <__retarget_lock_release_recursive>
 801fb76:	bf00      	nop
 801fb78:	20019d3c 	.word	0x20019d3c

0801fb7c <__sinit_lock_acquire>:
 801fb7c:	4801      	ldr	r0, [pc, #4]	; (801fb84 <__sinit_lock_acquire+0x8>)
 801fb7e:	f000 b8ac 	b.w	801fcda <__retarget_lock_acquire_recursive>
 801fb82:	bf00      	nop
 801fb84:	20019d3b 	.word	0x20019d3b

0801fb88 <__sinit_lock_release>:
 801fb88:	4801      	ldr	r0, [pc, #4]	; (801fb90 <__sinit_lock_release+0x8>)
 801fb8a:	f000 b8a7 	b.w	801fcdc <__retarget_lock_release_recursive>
 801fb8e:	bf00      	nop
 801fb90:	20019d3b 	.word	0x20019d3b

0801fb94 <__sinit>:
 801fb94:	b510      	push	{r4, lr}
 801fb96:	4604      	mov	r4, r0
 801fb98:	f7ff fff0 	bl	801fb7c <__sinit_lock_acquire>
 801fb9c:	69a3      	ldr	r3, [r4, #24]
 801fb9e:	b11b      	cbz	r3, 801fba8 <__sinit+0x14>
 801fba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fba4:	f7ff bff0 	b.w	801fb88 <__sinit_lock_release>
 801fba8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fbac:	6523      	str	r3, [r4, #80]	; 0x50
 801fbae:	4b13      	ldr	r3, [pc, #76]	; (801fbfc <__sinit+0x68>)
 801fbb0:	4a13      	ldr	r2, [pc, #76]	; (801fc00 <__sinit+0x6c>)
 801fbb2:	681b      	ldr	r3, [r3, #0]
 801fbb4:	62a2      	str	r2, [r4, #40]	; 0x28
 801fbb6:	42a3      	cmp	r3, r4
 801fbb8:	bf04      	itt	eq
 801fbba:	2301      	moveq	r3, #1
 801fbbc:	61a3      	streq	r3, [r4, #24]
 801fbbe:	4620      	mov	r0, r4
 801fbc0:	f000 f820 	bl	801fc04 <__sfp>
 801fbc4:	6060      	str	r0, [r4, #4]
 801fbc6:	4620      	mov	r0, r4
 801fbc8:	f000 f81c 	bl	801fc04 <__sfp>
 801fbcc:	60a0      	str	r0, [r4, #8]
 801fbce:	4620      	mov	r0, r4
 801fbd0:	f000 f818 	bl	801fc04 <__sfp>
 801fbd4:	2200      	movs	r2, #0
 801fbd6:	60e0      	str	r0, [r4, #12]
 801fbd8:	2104      	movs	r1, #4
 801fbda:	6860      	ldr	r0, [r4, #4]
 801fbdc:	f7ff ff82 	bl	801fae4 <std>
 801fbe0:	68a0      	ldr	r0, [r4, #8]
 801fbe2:	2201      	movs	r2, #1
 801fbe4:	2109      	movs	r1, #9
 801fbe6:	f7ff ff7d 	bl	801fae4 <std>
 801fbea:	68e0      	ldr	r0, [r4, #12]
 801fbec:	2202      	movs	r2, #2
 801fbee:	2112      	movs	r1, #18
 801fbf0:	f7ff ff78 	bl	801fae4 <std>
 801fbf4:	2301      	movs	r3, #1
 801fbf6:	61a3      	str	r3, [r4, #24]
 801fbf8:	e7d2      	b.n	801fba0 <__sinit+0xc>
 801fbfa:	bf00      	nop
 801fbfc:	080242dc 	.word	0x080242dc
 801fc00:	0801fb2d 	.word	0x0801fb2d

0801fc04 <__sfp>:
 801fc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc06:	4607      	mov	r7, r0
 801fc08:	f7ff ffac 	bl	801fb64 <__sfp_lock_acquire>
 801fc0c:	4b1e      	ldr	r3, [pc, #120]	; (801fc88 <__sfp+0x84>)
 801fc0e:	681e      	ldr	r6, [r3, #0]
 801fc10:	69b3      	ldr	r3, [r6, #24]
 801fc12:	b913      	cbnz	r3, 801fc1a <__sfp+0x16>
 801fc14:	4630      	mov	r0, r6
 801fc16:	f7ff ffbd 	bl	801fb94 <__sinit>
 801fc1a:	3648      	adds	r6, #72	; 0x48
 801fc1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fc20:	3b01      	subs	r3, #1
 801fc22:	d503      	bpl.n	801fc2c <__sfp+0x28>
 801fc24:	6833      	ldr	r3, [r6, #0]
 801fc26:	b30b      	cbz	r3, 801fc6c <__sfp+0x68>
 801fc28:	6836      	ldr	r6, [r6, #0]
 801fc2a:	e7f7      	b.n	801fc1c <__sfp+0x18>
 801fc2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fc30:	b9d5      	cbnz	r5, 801fc68 <__sfp+0x64>
 801fc32:	4b16      	ldr	r3, [pc, #88]	; (801fc8c <__sfp+0x88>)
 801fc34:	60e3      	str	r3, [r4, #12]
 801fc36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fc3a:	6665      	str	r5, [r4, #100]	; 0x64
 801fc3c:	f000 f84c 	bl	801fcd8 <__retarget_lock_init_recursive>
 801fc40:	f7ff ff96 	bl	801fb70 <__sfp_lock_release>
 801fc44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fc48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fc4c:	6025      	str	r5, [r4, #0]
 801fc4e:	61a5      	str	r5, [r4, #24]
 801fc50:	2208      	movs	r2, #8
 801fc52:	4629      	mov	r1, r5
 801fc54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fc58:	f7fe fb84 	bl	801e364 <memset>
 801fc5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fc60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fc64:	4620      	mov	r0, r4
 801fc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fc68:	3468      	adds	r4, #104	; 0x68
 801fc6a:	e7d9      	b.n	801fc20 <__sfp+0x1c>
 801fc6c:	2104      	movs	r1, #4
 801fc6e:	4638      	mov	r0, r7
 801fc70:	f7ff ff62 	bl	801fb38 <__sfmoreglue>
 801fc74:	4604      	mov	r4, r0
 801fc76:	6030      	str	r0, [r6, #0]
 801fc78:	2800      	cmp	r0, #0
 801fc7a:	d1d5      	bne.n	801fc28 <__sfp+0x24>
 801fc7c:	f7ff ff78 	bl	801fb70 <__sfp_lock_release>
 801fc80:	230c      	movs	r3, #12
 801fc82:	603b      	str	r3, [r7, #0]
 801fc84:	e7ee      	b.n	801fc64 <__sfp+0x60>
 801fc86:	bf00      	nop
 801fc88:	080242dc 	.word	0x080242dc
 801fc8c:	ffff0001 	.word	0xffff0001

0801fc90 <_fwalk_reent>:
 801fc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc94:	4606      	mov	r6, r0
 801fc96:	4688      	mov	r8, r1
 801fc98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fc9c:	2700      	movs	r7, #0
 801fc9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fca2:	f1b9 0901 	subs.w	r9, r9, #1
 801fca6:	d505      	bpl.n	801fcb4 <_fwalk_reent+0x24>
 801fca8:	6824      	ldr	r4, [r4, #0]
 801fcaa:	2c00      	cmp	r4, #0
 801fcac:	d1f7      	bne.n	801fc9e <_fwalk_reent+0xe>
 801fcae:	4638      	mov	r0, r7
 801fcb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fcb4:	89ab      	ldrh	r3, [r5, #12]
 801fcb6:	2b01      	cmp	r3, #1
 801fcb8:	d907      	bls.n	801fcca <_fwalk_reent+0x3a>
 801fcba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fcbe:	3301      	adds	r3, #1
 801fcc0:	d003      	beq.n	801fcca <_fwalk_reent+0x3a>
 801fcc2:	4629      	mov	r1, r5
 801fcc4:	4630      	mov	r0, r6
 801fcc6:	47c0      	blx	r8
 801fcc8:	4307      	orrs	r7, r0
 801fcca:	3568      	adds	r5, #104	; 0x68
 801fccc:	e7e9      	b.n	801fca2 <_fwalk_reent+0x12>
	...

0801fcd0 <_localeconv_r>:
 801fcd0:	4800      	ldr	r0, [pc, #0]	; (801fcd4 <_localeconv_r+0x4>)
 801fcd2:	4770      	bx	lr
 801fcd4:	200001f0 	.word	0x200001f0

0801fcd8 <__retarget_lock_init_recursive>:
 801fcd8:	4770      	bx	lr

0801fcda <__retarget_lock_acquire_recursive>:
 801fcda:	4770      	bx	lr

0801fcdc <__retarget_lock_release_recursive>:
 801fcdc:	4770      	bx	lr
	...

0801fce0 <__malloc_lock>:
 801fce0:	4801      	ldr	r0, [pc, #4]	; (801fce8 <__malloc_lock+0x8>)
 801fce2:	f7ff bffa 	b.w	801fcda <__retarget_lock_acquire_recursive>
 801fce6:	bf00      	nop
 801fce8:	20019d38 	.word	0x20019d38

0801fcec <__malloc_unlock>:
 801fcec:	4801      	ldr	r0, [pc, #4]	; (801fcf4 <__malloc_unlock+0x8>)
 801fcee:	f7ff bff5 	b.w	801fcdc <__retarget_lock_release_recursive>
 801fcf2:	bf00      	nop
 801fcf4:	20019d38 	.word	0x20019d38

0801fcf8 <_Balloc>:
 801fcf8:	b570      	push	{r4, r5, r6, lr}
 801fcfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fcfc:	4604      	mov	r4, r0
 801fcfe:	460d      	mov	r5, r1
 801fd00:	b976      	cbnz	r6, 801fd20 <_Balloc+0x28>
 801fd02:	2010      	movs	r0, #16
 801fd04:	f7fe fb10 	bl	801e328 <malloc>
 801fd08:	4602      	mov	r2, r0
 801fd0a:	6260      	str	r0, [r4, #36]	; 0x24
 801fd0c:	b920      	cbnz	r0, 801fd18 <_Balloc+0x20>
 801fd0e:	4b18      	ldr	r3, [pc, #96]	; (801fd70 <_Balloc+0x78>)
 801fd10:	4818      	ldr	r0, [pc, #96]	; (801fd74 <_Balloc+0x7c>)
 801fd12:	2166      	movs	r1, #102	; 0x66
 801fd14:	f000 fdee 	bl	80208f4 <__assert_func>
 801fd18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fd1c:	6006      	str	r6, [r0, #0]
 801fd1e:	60c6      	str	r6, [r0, #12]
 801fd20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801fd22:	68f3      	ldr	r3, [r6, #12]
 801fd24:	b183      	cbz	r3, 801fd48 <_Balloc+0x50>
 801fd26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fd28:	68db      	ldr	r3, [r3, #12]
 801fd2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fd2e:	b9b8      	cbnz	r0, 801fd60 <_Balloc+0x68>
 801fd30:	2101      	movs	r1, #1
 801fd32:	fa01 f605 	lsl.w	r6, r1, r5
 801fd36:	1d72      	adds	r2, r6, #5
 801fd38:	0092      	lsls	r2, r2, #2
 801fd3a:	4620      	mov	r0, r4
 801fd3c:	f000 fb5a 	bl	80203f4 <_calloc_r>
 801fd40:	b160      	cbz	r0, 801fd5c <_Balloc+0x64>
 801fd42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fd46:	e00e      	b.n	801fd66 <_Balloc+0x6e>
 801fd48:	2221      	movs	r2, #33	; 0x21
 801fd4a:	2104      	movs	r1, #4
 801fd4c:	4620      	mov	r0, r4
 801fd4e:	f000 fb51 	bl	80203f4 <_calloc_r>
 801fd52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fd54:	60f0      	str	r0, [r6, #12]
 801fd56:	68db      	ldr	r3, [r3, #12]
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d1e4      	bne.n	801fd26 <_Balloc+0x2e>
 801fd5c:	2000      	movs	r0, #0
 801fd5e:	bd70      	pop	{r4, r5, r6, pc}
 801fd60:	6802      	ldr	r2, [r0, #0]
 801fd62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fd66:	2300      	movs	r3, #0
 801fd68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fd6c:	e7f7      	b.n	801fd5e <_Balloc+0x66>
 801fd6e:	bf00      	nop
 801fd70:	08024422 	.word	0x08024422
 801fd74:	0802450c 	.word	0x0802450c

0801fd78 <_Bfree>:
 801fd78:	b570      	push	{r4, r5, r6, lr}
 801fd7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fd7c:	4605      	mov	r5, r0
 801fd7e:	460c      	mov	r4, r1
 801fd80:	b976      	cbnz	r6, 801fda0 <_Bfree+0x28>
 801fd82:	2010      	movs	r0, #16
 801fd84:	f7fe fad0 	bl	801e328 <malloc>
 801fd88:	4602      	mov	r2, r0
 801fd8a:	6268      	str	r0, [r5, #36]	; 0x24
 801fd8c:	b920      	cbnz	r0, 801fd98 <_Bfree+0x20>
 801fd8e:	4b09      	ldr	r3, [pc, #36]	; (801fdb4 <_Bfree+0x3c>)
 801fd90:	4809      	ldr	r0, [pc, #36]	; (801fdb8 <_Bfree+0x40>)
 801fd92:	218a      	movs	r1, #138	; 0x8a
 801fd94:	f000 fdae 	bl	80208f4 <__assert_func>
 801fd98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fd9c:	6006      	str	r6, [r0, #0]
 801fd9e:	60c6      	str	r6, [r0, #12]
 801fda0:	b13c      	cbz	r4, 801fdb2 <_Bfree+0x3a>
 801fda2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801fda4:	6862      	ldr	r2, [r4, #4]
 801fda6:	68db      	ldr	r3, [r3, #12]
 801fda8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fdac:	6021      	str	r1, [r4, #0]
 801fdae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fdb2:	bd70      	pop	{r4, r5, r6, pc}
 801fdb4:	08024422 	.word	0x08024422
 801fdb8:	0802450c 	.word	0x0802450c

0801fdbc <__multadd>:
 801fdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdc0:	690e      	ldr	r6, [r1, #16]
 801fdc2:	4607      	mov	r7, r0
 801fdc4:	4698      	mov	r8, r3
 801fdc6:	460c      	mov	r4, r1
 801fdc8:	f101 0014 	add.w	r0, r1, #20
 801fdcc:	2300      	movs	r3, #0
 801fdce:	6805      	ldr	r5, [r0, #0]
 801fdd0:	b2a9      	uxth	r1, r5
 801fdd2:	fb02 8101 	mla	r1, r2, r1, r8
 801fdd6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801fdda:	0c2d      	lsrs	r5, r5, #16
 801fddc:	fb02 c505 	mla	r5, r2, r5, ip
 801fde0:	b289      	uxth	r1, r1
 801fde2:	3301      	adds	r3, #1
 801fde4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801fde8:	429e      	cmp	r6, r3
 801fdea:	f840 1b04 	str.w	r1, [r0], #4
 801fdee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801fdf2:	dcec      	bgt.n	801fdce <__multadd+0x12>
 801fdf4:	f1b8 0f00 	cmp.w	r8, #0
 801fdf8:	d022      	beq.n	801fe40 <__multadd+0x84>
 801fdfa:	68a3      	ldr	r3, [r4, #8]
 801fdfc:	42b3      	cmp	r3, r6
 801fdfe:	dc19      	bgt.n	801fe34 <__multadd+0x78>
 801fe00:	6861      	ldr	r1, [r4, #4]
 801fe02:	4638      	mov	r0, r7
 801fe04:	3101      	adds	r1, #1
 801fe06:	f7ff ff77 	bl	801fcf8 <_Balloc>
 801fe0a:	4605      	mov	r5, r0
 801fe0c:	b928      	cbnz	r0, 801fe1a <__multadd+0x5e>
 801fe0e:	4602      	mov	r2, r0
 801fe10:	4b0d      	ldr	r3, [pc, #52]	; (801fe48 <__multadd+0x8c>)
 801fe12:	480e      	ldr	r0, [pc, #56]	; (801fe4c <__multadd+0x90>)
 801fe14:	21b5      	movs	r1, #181	; 0xb5
 801fe16:	f000 fd6d 	bl	80208f4 <__assert_func>
 801fe1a:	6922      	ldr	r2, [r4, #16]
 801fe1c:	3202      	adds	r2, #2
 801fe1e:	f104 010c 	add.w	r1, r4, #12
 801fe22:	0092      	lsls	r2, r2, #2
 801fe24:	300c      	adds	r0, #12
 801fe26:	f7fe fa8f 	bl	801e348 <memcpy>
 801fe2a:	4621      	mov	r1, r4
 801fe2c:	4638      	mov	r0, r7
 801fe2e:	f7ff ffa3 	bl	801fd78 <_Bfree>
 801fe32:	462c      	mov	r4, r5
 801fe34:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801fe38:	3601      	adds	r6, #1
 801fe3a:	f8c3 8014 	str.w	r8, [r3, #20]
 801fe3e:	6126      	str	r6, [r4, #16]
 801fe40:	4620      	mov	r0, r4
 801fe42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe46:	bf00      	nop
 801fe48:	08024498 	.word	0x08024498
 801fe4c:	0802450c 	.word	0x0802450c

0801fe50 <__hi0bits>:
 801fe50:	0c03      	lsrs	r3, r0, #16
 801fe52:	041b      	lsls	r3, r3, #16
 801fe54:	b9d3      	cbnz	r3, 801fe8c <__hi0bits+0x3c>
 801fe56:	0400      	lsls	r0, r0, #16
 801fe58:	2310      	movs	r3, #16
 801fe5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801fe5e:	bf04      	itt	eq
 801fe60:	0200      	lsleq	r0, r0, #8
 801fe62:	3308      	addeq	r3, #8
 801fe64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801fe68:	bf04      	itt	eq
 801fe6a:	0100      	lsleq	r0, r0, #4
 801fe6c:	3304      	addeq	r3, #4
 801fe6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801fe72:	bf04      	itt	eq
 801fe74:	0080      	lsleq	r0, r0, #2
 801fe76:	3302      	addeq	r3, #2
 801fe78:	2800      	cmp	r0, #0
 801fe7a:	db05      	blt.n	801fe88 <__hi0bits+0x38>
 801fe7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801fe80:	f103 0301 	add.w	r3, r3, #1
 801fe84:	bf08      	it	eq
 801fe86:	2320      	moveq	r3, #32
 801fe88:	4618      	mov	r0, r3
 801fe8a:	4770      	bx	lr
 801fe8c:	2300      	movs	r3, #0
 801fe8e:	e7e4      	b.n	801fe5a <__hi0bits+0xa>

0801fe90 <__lo0bits>:
 801fe90:	6803      	ldr	r3, [r0, #0]
 801fe92:	f013 0207 	ands.w	r2, r3, #7
 801fe96:	4601      	mov	r1, r0
 801fe98:	d00b      	beq.n	801feb2 <__lo0bits+0x22>
 801fe9a:	07da      	lsls	r2, r3, #31
 801fe9c:	d424      	bmi.n	801fee8 <__lo0bits+0x58>
 801fe9e:	0798      	lsls	r0, r3, #30
 801fea0:	bf49      	itett	mi
 801fea2:	085b      	lsrmi	r3, r3, #1
 801fea4:	089b      	lsrpl	r3, r3, #2
 801fea6:	2001      	movmi	r0, #1
 801fea8:	600b      	strmi	r3, [r1, #0]
 801feaa:	bf5c      	itt	pl
 801feac:	600b      	strpl	r3, [r1, #0]
 801feae:	2002      	movpl	r0, #2
 801feb0:	4770      	bx	lr
 801feb2:	b298      	uxth	r0, r3
 801feb4:	b9b0      	cbnz	r0, 801fee4 <__lo0bits+0x54>
 801feb6:	0c1b      	lsrs	r3, r3, #16
 801feb8:	2010      	movs	r0, #16
 801feba:	f013 0fff 	tst.w	r3, #255	; 0xff
 801febe:	bf04      	itt	eq
 801fec0:	0a1b      	lsreq	r3, r3, #8
 801fec2:	3008      	addeq	r0, #8
 801fec4:	071a      	lsls	r2, r3, #28
 801fec6:	bf04      	itt	eq
 801fec8:	091b      	lsreq	r3, r3, #4
 801feca:	3004      	addeq	r0, #4
 801fecc:	079a      	lsls	r2, r3, #30
 801fece:	bf04      	itt	eq
 801fed0:	089b      	lsreq	r3, r3, #2
 801fed2:	3002      	addeq	r0, #2
 801fed4:	07da      	lsls	r2, r3, #31
 801fed6:	d403      	bmi.n	801fee0 <__lo0bits+0x50>
 801fed8:	085b      	lsrs	r3, r3, #1
 801feda:	f100 0001 	add.w	r0, r0, #1
 801fede:	d005      	beq.n	801feec <__lo0bits+0x5c>
 801fee0:	600b      	str	r3, [r1, #0]
 801fee2:	4770      	bx	lr
 801fee4:	4610      	mov	r0, r2
 801fee6:	e7e8      	b.n	801feba <__lo0bits+0x2a>
 801fee8:	2000      	movs	r0, #0
 801feea:	4770      	bx	lr
 801feec:	2020      	movs	r0, #32
 801feee:	4770      	bx	lr

0801fef0 <__i2b>:
 801fef0:	b510      	push	{r4, lr}
 801fef2:	460c      	mov	r4, r1
 801fef4:	2101      	movs	r1, #1
 801fef6:	f7ff feff 	bl	801fcf8 <_Balloc>
 801fefa:	4602      	mov	r2, r0
 801fefc:	b928      	cbnz	r0, 801ff0a <__i2b+0x1a>
 801fefe:	4b05      	ldr	r3, [pc, #20]	; (801ff14 <__i2b+0x24>)
 801ff00:	4805      	ldr	r0, [pc, #20]	; (801ff18 <__i2b+0x28>)
 801ff02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ff06:	f000 fcf5 	bl	80208f4 <__assert_func>
 801ff0a:	2301      	movs	r3, #1
 801ff0c:	6144      	str	r4, [r0, #20]
 801ff0e:	6103      	str	r3, [r0, #16]
 801ff10:	bd10      	pop	{r4, pc}
 801ff12:	bf00      	nop
 801ff14:	08024498 	.word	0x08024498
 801ff18:	0802450c 	.word	0x0802450c

0801ff1c <__multiply>:
 801ff1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff20:	4614      	mov	r4, r2
 801ff22:	690a      	ldr	r2, [r1, #16]
 801ff24:	6923      	ldr	r3, [r4, #16]
 801ff26:	429a      	cmp	r2, r3
 801ff28:	bfb8      	it	lt
 801ff2a:	460b      	movlt	r3, r1
 801ff2c:	460d      	mov	r5, r1
 801ff2e:	bfbc      	itt	lt
 801ff30:	4625      	movlt	r5, r4
 801ff32:	461c      	movlt	r4, r3
 801ff34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801ff38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ff3c:	68ab      	ldr	r3, [r5, #8]
 801ff3e:	6869      	ldr	r1, [r5, #4]
 801ff40:	eb0a 0709 	add.w	r7, sl, r9
 801ff44:	42bb      	cmp	r3, r7
 801ff46:	b085      	sub	sp, #20
 801ff48:	bfb8      	it	lt
 801ff4a:	3101      	addlt	r1, #1
 801ff4c:	f7ff fed4 	bl	801fcf8 <_Balloc>
 801ff50:	b930      	cbnz	r0, 801ff60 <__multiply+0x44>
 801ff52:	4602      	mov	r2, r0
 801ff54:	4b42      	ldr	r3, [pc, #264]	; (8020060 <__multiply+0x144>)
 801ff56:	4843      	ldr	r0, [pc, #268]	; (8020064 <__multiply+0x148>)
 801ff58:	f240 115d 	movw	r1, #349	; 0x15d
 801ff5c:	f000 fcca 	bl	80208f4 <__assert_func>
 801ff60:	f100 0614 	add.w	r6, r0, #20
 801ff64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801ff68:	4633      	mov	r3, r6
 801ff6a:	2200      	movs	r2, #0
 801ff6c:	4543      	cmp	r3, r8
 801ff6e:	d31e      	bcc.n	801ffae <__multiply+0x92>
 801ff70:	f105 0c14 	add.w	ip, r5, #20
 801ff74:	f104 0314 	add.w	r3, r4, #20
 801ff78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801ff7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801ff80:	9202      	str	r2, [sp, #8]
 801ff82:	ebac 0205 	sub.w	r2, ip, r5
 801ff86:	3a15      	subs	r2, #21
 801ff88:	f022 0203 	bic.w	r2, r2, #3
 801ff8c:	3204      	adds	r2, #4
 801ff8e:	f105 0115 	add.w	r1, r5, #21
 801ff92:	458c      	cmp	ip, r1
 801ff94:	bf38      	it	cc
 801ff96:	2204      	movcc	r2, #4
 801ff98:	9201      	str	r2, [sp, #4]
 801ff9a:	9a02      	ldr	r2, [sp, #8]
 801ff9c:	9303      	str	r3, [sp, #12]
 801ff9e:	429a      	cmp	r2, r3
 801ffa0:	d808      	bhi.n	801ffb4 <__multiply+0x98>
 801ffa2:	2f00      	cmp	r7, #0
 801ffa4:	dc55      	bgt.n	8020052 <__multiply+0x136>
 801ffa6:	6107      	str	r7, [r0, #16]
 801ffa8:	b005      	add	sp, #20
 801ffaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffae:	f843 2b04 	str.w	r2, [r3], #4
 801ffb2:	e7db      	b.n	801ff6c <__multiply+0x50>
 801ffb4:	f8b3 a000 	ldrh.w	sl, [r3]
 801ffb8:	f1ba 0f00 	cmp.w	sl, #0
 801ffbc:	d020      	beq.n	8020000 <__multiply+0xe4>
 801ffbe:	f105 0e14 	add.w	lr, r5, #20
 801ffc2:	46b1      	mov	r9, r6
 801ffc4:	2200      	movs	r2, #0
 801ffc6:	f85e 4b04 	ldr.w	r4, [lr], #4
 801ffca:	f8d9 b000 	ldr.w	fp, [r9]
 801ffce:	b2a1      	uxth	r1, r4
 801ffd0:	fa1f fb8b 	uxth.w	fp, fp
 801ffd4:	fb0a b101 	mla	r1, sl, r1, fp
 801ffd8:	4411      	add	r1, r2
 801ffda:	f8d9 2000 	ldr.w	r2, [r9]
 801ffde:	0c24      	lsrs	r4, r4, #16
 801ffe0:	0c12      	lsrs	r2, r2, #16
 801ffe2:	fb0a 2404 	mla	r4, sl, r4, r2
 801ffe6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801ffea:	b289      	uxth	r1, r1
 801ffec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801fff0:	45f4      	cmp	ip, lr
 801fff2:	f849 1b04 	str.w	r1, [r9], #4
 801fff6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801fffa:	d8e4      	bhi.n	801ffc6 <__multiply+0xaa>
 801fffc:	9901      	ldr	r1, [sp, #4]
 801fffe:	5072      	str	r2, [r6, r1]
 8020000:	9a03      	ldr	r2, [sp, #12]
 8020002:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8020006:	3304      	adds	r3, #4
 8020008:	f1b9 0f00 	cmp.w	r9, #0
 802000c:	d01f      	beq.n	802004e <__multiply+0x132>
 802000e:	6834      	ldr	r4, [r6, #0]
 8020010:	f105 0114 	add.w	r1, r5, #20
 8020014:	46b6      	mov	lr, r6
 8020016:	f04f 0a00 	mov.w	sl, #0
 802001a:	880a      	ldrh	r2, [r1, #0]
 802001c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020020:	fb09 b202 	mla	r2, r9, r2, fp
 8020024:	4492      	add	sl, r2
 8020026:	b2a4      	uxth	r4, r4
 8020028:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802002c:	f84e 4b04 	str.w	r4, [lr], #4
 8020030:	f851 4b04 	ldr.w	r4, [r1], #4
 8020034:	f8be 2000 	ldrh.w	r2, [lr]
 8020038:	0c24      	lsrs	r4, r4, #16
 802003a:	fb09 2404 	mla	r4, r9, r4, r2
 802003e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8020042:	458c      	cmp	ip, r1
 8020044:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8020048:	d8e7      	bhi.n	802001a <__multiply+0xfe>
 802004a:	9a01      	ldr	r2, [sp, #4]
 802004c:	50b4      	str	r4, [r6, r2]
 802004e:	3604      	adds	r6, #4
 8020050:	e7a3      	b.n	801ff9a <__multiply+0x7e>
 8020052:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020056:	2b00      	cmp	r3, #0
 8020058:	d1a5      	bne.n	801ffa6 <__multiply+0x8a>
 802005a:	3f01      	subs	r7, #1
 802005c:	e7a1      	b.n	801ffa2 <__multiply+0x86>
 802005e:	bf00      	nop
 8020060:	08024498 	.word	0x08024498
 8020064:	0802450c 	.word	0x0802450c

08020068 <__pow5mult>:
 8020068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802006c:	4615      	mov	r5, r2
 802006e:	f012 0203 	ands.w	r2, r2, #3
 8020072:	4606      	mov	r6, r0
 8020074:	460f      	mov	r7, r1
 8020076:	d007      	beq.n	8020088 <__pow5mult+0x20>
 8020078:	4c25      	ldr	r4, [pc, #148]	; (8020110 <__pow5mult+0xa8>)
 802007a:	3a01      	subs	r2, #1
 802007c:	2300      	movs	r3, #0
 802007e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020082:	f7ff fe9b 	bl	801fdbc <__multadd>
 8020086:	4607      	mov	r7, r0
 8020088:	10ad      	asrs	r5, r5, #2
 802008a:	d03d      	beq.n	8020108 <__pow5mult+0xa0>
 802008c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802008e:	b97c      	cbnz	r4, 80200b0 <__pow5mult+0x48>
 8020090:	2010      	movs	r0, #16
 8020092:	f7fe f949 	bl	801e328 <malloc>
 8020096:	4602      	mov	r2, r0
 8020098:	6270      	str	r0, [r6, #36]	; 0x24
 802009a:	b928      	cbnz	r0, 80200a8 <__pow5mult+0x40>
 802009c:	4b1d      	ldr	r3, [pc, #116]	; (8020114 <__pow5mult+0xac>)
 802009e:	481e      	ldr	r0, [pc, #120]	; (8020118 <__pow5mult+0xb0>)
 80200a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80200a4:	f000 fc26 	bl	80208f4 <__assert_func>
 80200a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80200ac:	6004      	str	r4, [r0, #0]
 80200ae:	60c4      	str	r4, [r0, #12]
 80200b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80200b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80200b8:	b94c      	cbnz	r4, 80200ce <__pow5mult+0x66>
 80200ba:	f240 2171 	movw	r1, #625	; 0x271
 80200be:	4630      	mov	r0, r6
 80200c0:	f7ff ff16 	bl	801fef0 <__i2b>
 80200c4:	2300      	movs	r3, #0
 80200c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80200ca:	4604      	mov	r4, r0
 80200cc:	6003      	str	r3, [r0, #0]
 80200ce:	f04f 0900 	mov.w	r9, #0
 80200d2:	07eb      	lsls	r3, r5, #31
 80200d4:	d50a      	bpl.n	80200ec <__pow5mult+0x84>
 80200d6:	4639      	mov	r1, r7
 80200d8:	4622      	mov	r2, r4
 80200da:	4630      	mov	r0, r6
 80200dc:	f7ff ff1e 	bl	801ff1c <__multiply>
 80200e0:	4639      	mov	r1, r7
 80200e2:	4680      	mov	r8, r0
 80200e4:	4630      	mov	r0, r6
 80200e6:	f7ff fe47 	bl	801fd78 <_Bfree>
 80200ea:	4647      	mov	r7, r8
 80200ec:	106d      	asrs	r5, r5, #1
 80200ee:	d00b      	beq.n	8020108 <__pow5mult+0xa0>
 80200f0:	6820      	ldr	r0, [r4, #0]
 80200f2:	b938      	cbnz	r0, 8020104 <__pow5mult+0x9c>
 80200f4:	4622      	mov	r2, r4
 80200f6:	4621      	mov	r1, r4
 80200f8:	4630      	mov	r0, r6
 80200fa:	f7ff ff0f 	bl	801ff1c <__multiply>
 80200fe:	6020      	str	r0, [r4, #0]
 8020100:	f8c0 9000 	str.w	r9, [r0]
 8020104:	4604      	mov	r4, r0
 8020106:	e7e4      	b.n	80200d2 <__pow5mult+0x6a>
 8020108:	4638      	mov	r0, r7
 802010a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802010e:	bf00      	nop
 8020110:	08024660 	.word	0x08024660
 8020114:	08024422 	.word	0x08024422
 8020118:	0802450c 	.word	0x0802450c

0802011c <__lshift>:
 802011c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020120:	460c      	mov	r4, r1
 8020122:	6849      	ldr	r1, [r1, #4]
 8020124:	6923      	ldr	r3, [r4, #16]
 8020126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802012a:	68a3      	ldr	r3, [r4, #8]
 802012c:	4607      	mov	r7, r0
 802012e:	4691      	mov	r9, r2
 8020130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020134:	f108 0601 	add.w	r6, r8, #1
 8020138:	42b3      	cmp	r3, r6
 802013a:	db0b      	blt.n	8020154 <__lshift+0x38>
 802013c:	4638      	mov	r0, r7
 802013e:	f7ff fddb 	bl	801fcf8 <_Balloc>
 8020142:	4605      	mov	r5, r0
 8020144:	b948      	cbnz	r0, 802015a <__lshift+0x3e>
 8020146:	4602      	mov	r2, r0
 8020148:	4b28      	ldr	r3, [pc, #160]	; (80201ec <__lshift+0xd0>)
 802014a:	4829      	ldr	r0, [pc, #164]	; (80201f0 <__lshift+0xd4>)
 802014c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020150:	f000 fbd0 	bl	80208f4 <__assert_func>
 8020154:	3101      	adds	r1, #1
 8020156:	005b      	lsls	r3, r3, #1
 8020158:	e7ee      	b.n	8020138 <__lshift+0x1c>
 802015a:	2300      	movs	r3, #0
 802015c:	f100 0114 	add.w	r1, r0, #20
 8020160:	f100 0210 	add.w	r2, r0, #16
 8020164:	4618      	mov	r0, r3
 8020166:	4553      	cmp	r3, sl
 8020168:	db33      	blt.n	80201d2 <__lshift+0xb6>
 802016a:	6920      	ldr	r0, [r4, #16]
 802016c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020170:	f104 0314 	add.w	r3, r4, #20
 8020174:	f019 091f 	ands.w	r9, r9, #31
 8020178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802017c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020180:	d02b      	beq.n	80201da <__lshift+0xbe>
 8020182:	f1c9 0e20 	rsb	lr, r9, #32
 8020186:	468a      	mov	sl, r1
 8020188:	2200      	movs	r2, #0
 802018a:	6818      	ldr	r0, [r3, #0]
 802018c:	fa00 f009 	lsl.w	r0, r0, r9
 8020190:	4302      	orrs	r2, r0
 8020192:	f84a 2b04 	str.w	r2, [sl], #4
 8020196:	f853 2b04 	ldr.w	r2, [r3], #4
 802019a:	459c      	cmp	ip, r3
 802019c:	fa22 f20e 	lsr.w	r2, r2, lr
 80201a0:	d8f3      	bhi.n	802018a <__lshift+0x6e>
 80201a2:	ebac 0304 	sub.w	r3, ip, r4
 80201a6:	3b15      	subs	r3, #21
 80201a8:	f023 0303 	bic.w	r3, r3, #3
 80201ac:	3304      	adds	r3, #4
 80201ae:	f104 0015 	add.w	r0, r4, #21
 80201b2:	4584      	cmp	ip, r0
 80201b4:	bf38      	it	cc
 80201b6:	2304      	movcc	r3, #4
 80201b8:	50ca      	str	r2, [r1, r3]
 80201ba:	b10a      	cbz	r2, 80201c0 <__lshift+0xa4>
 80201bc:	f108 0602 	add.w	r6, r8, #2
 80201c0:	3e01      	subs	r6, #1
 80201c2:	4638      	mov	r0, r7
 80201c4:	612e      	str	r6, [r5, #16]
 80201c6:	4621      	mov	r1, r4
 80201c8:	f7ff fdd6 	bl	801fd78 <_Bfree>
 80201cc:	4628      	mov	r0, r5
 80201ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80201d6:	3301      	adds	r3, #1
 80201d8:	e7c5      	b.n	8020166 <__lshift+0x4a>
 80201da:	3904      	subs	r1, #4
 80201dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80201e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80201e4:	459c      	cmp	ip, r3
 80201e6:	d8f9      	bhi.n	80201dc <__lshift+0xc0>
 80201e8:	e7ea      	b.n	80201c0 <__lshift+0xa4>
 80201ea:	bf00      	nop
 80201ec:	08024498 	.word	0x08024498
 80201f0:	0802450c 	.word	0x0802450c

080201f4 <__mcmp>:
 80201f4:	b530      	push	{r4, r5, lr}
 80201f6:	6902      	ldr	r2, [r0, #16]
 80201f8:	690c      	ldr	r4, [r1, #16]
 80201fa:	1b12      	subs	r2, r2, r4
 80201fc:	d10e      	bne.n	802021c <__mcmp+0x28>
 80201fe:	f100 0314 	add.w	r3, r0, #20
 8020202:	3114      	adds	r1, #20
 8020204:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020208:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802020c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020210:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020214:	42a5      	cmp	r5, r4
 8020216:	d003      	beq.n	8020220 <__mcmp+0x2c>
 8020218:	d305      	bcc.n	8020226 <__mcmp+0x32>
 802021a:	2201      	movs	r2, #1
 802021c:	4610      	mov	r0, r2
 802021e:	bd30      	pop	{r4, r5, pc}
 8020220:	4283      	cmp	r3, r0
 8020222:	d3f3      	bcc.n	802020c <__mcmp+0x18>
 8020224:	e7fa      	b.n	802021c <__mcmp+0x28>
 8020226:	f04f 32ff 	mov.w	r2, #4294967295
 802022a:	e7f7      	b.n	802021c <__mcmp+0x28>

0802022c <__mdiff>:
 802022c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020230:	460c      	mov	r4, r1
 8020232:	4606      	mov	r6, r0
 8020234:	4611      	mov	r1, r2
 8020236:	4620      	mov	r0, r4
 8020238:	4617      	mov	r7, r2
 802023a:	f7ff ffdb 	bl	80201f4 <__mcmp>
 802023e:	1e05      	subs	r5, r0, #0
 8020240:	d110      	bne.n	8020264 <__mdiff+0x38>
 8020242:	4629      	mov	r1, r5
 8020244:	4630      	mov	r0, r6
 8020246:	f7ff fd57 	bl	801fcf8 <_Balloc>
 802024a:	b930      	cbnz	r0, 802025a <__mdiff+0x2e>
 802024c:	4b39      	ldr	r3, [pc, #228]	; (8020334 <__mdiff+0x108>)
 802024e:	4602      	mov	r2, r0
 8020250:	f240 2132 	movw	r1, #562	; 0x232
 8020254:	4838      	ldr	r0, [pc, #224]	; (8020338 <__mdiff+0x10c>)
 8020256:	f000 fb4d 	bl	80208f4 <__assert_func>
 802025a:	2301      	movs	r3, #1
 802025c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020264:	bfa4      	itt	ge
 8020266:	463b      	movge	r3, r7
 8020268:	4627      	movge	r7, r4
 802026a:	4630      	mov	r0, r6
 802026c:	6879      	ldr	r1, [r7, #4]
 802026e:	bfa6      	itte	ge
 8020270:	461c      	movge	r4, r3
 8020272:	2500      	movge	r5, #0
 8020274:	2501      	movlt	r5, #1
 8020276:	f7ff fd3f 	bl	801fcf8 <_Balloc>
 802027a:	b920      	cbnz	r0, 8020286 <__mdiff+0x5a>
 802027c:	4b2d      	ldr	r3, [pc, #180]	; (8020334 <__mdiff+0x108>)
 802027e:	4602      	mov	r2, r0
 8020280:	f44f 7110 	mov.w	r1, #576	; 0x240
 8020284:	e7e6      	b.n	8020254 <__mdiff+0x28>
 8020286:	693e      	ldr	r6, [r7, #16]
 8020288:	60c5      	str	r5, [r0, #12]
 802028a:	6925      	ldr	r5, [r4, #16]
 802028c:	f107 0114 	add.w	r1, r7, #20
 8020290:	f104 0914 	add.w	r9, r4, #20
 8020294:	f100 0e14 	add.w	lr, r0, #20
 8020298:	f107 0210 	add.w	r2, r7, #16
 802029c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80202a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80202a4:	46f2      	mov	sl, lr
 80202a6:	2700      	movs	r7, #0
 80202a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80202ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80202b0:	fa1f f883 	uxth.w	r8, r3
 80202b4:	fa17 f78b 	uxtah	r7, r7, fp
 80202b8:	0c1b      	lsrs	r3, r3, #16
 80202ba:	eba7 0808 	sub.w	r8, r7, r8
 80202be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80202c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80202c6:	fa1f f888 	uxth.w	r8, r8
 80202ca:	141f      	asrs	r7, r3, #16
 80202cc:	454d      	cmp	r5, r9
 80202ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80202d2:	f84a 3b04 	str.w	r3, [sl], #4
 80202d6:	d8e7      	bhi.n	80202a8 <__mdiff+0x7c>
 80202d8:	1b2b      	subs	r3, r5, r4
 80202da:	3b15      	subs	r3, #21
 80202dc:	f023 0303 	bic.w	r3, r3, #3
 80202e0:	3304      	adds	r3, #4
 80202e2:	3415      	adds	r4, #21
 80202e4:	42a5      	cmp	r5, r4
 80202e6:	bf38      	it	cc
 80202e8:	2304      	movcc	r3, #4
 80202ea:	4419      	add	r1, r3
 80202ec:	4473      	add	r3, lr
 80202ee:	469e      	mov	lr, r3
 80202f0:	460d      	mov	r5, r1
 80202f2:	4565      	cmp	r5, ip
 80202f4:	d30e      	bcc.n	8020314 <__mdiff+0xe8>
 80202f6:	f10c 0203 	add.w	r2, ip, #3
 80202fa:	1a52      	subs	r2, r2, r1
 80202fc:	f022 0203 	bic.w	r2, r2, #3
 8020300:	3903      	subs	r1, #3
 8020302:	458c      	cmp	ip, r1
 8020304:	bf38      	it	cc
 8020306:	2200      	movcc	r2, #0
 8020308:	441a      	add	r2, r3
 802030a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802030e:	b17b      	cbz	r3, 8020330 <__mdiff+0x104>
 8020310:	6106      	str	r6, [r0, #16]
 8020312:	e7a5      	b.n	8020260 <__mdiff+0x34>
 8020314:	f855 8b04 	ldr.w	r8, [r5], #4
 8020318:	fa17 f488 	uxtah	r4, r7, r8
 802031c:	1422      	asrs	r2, r4, #16
 802031e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8020322:	b2a4      	uxth	r4, r4
 8020324:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020328:	f84e 4b04 	str.w	r4, [lr], #4
 802032c:	1417      	asrs	r7, r2, #16
 802032e:	e7e0      	b.n	80202f2 <__mdiff+0xc6>
 8020330:	3e01      	subs	r6, #1
 8020332:	e7ea      	b.n	802030a <__mdiff+0xde>
 8020334:	08024498 	.word	0x08024498
 8020338:	0802450c 	.word	0x0802450c

0802033c <__d2b>:
 802033c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020340:	4689      	mov	r9, r1
 8020342:	2101      	movs	r1, #1
 8020344:	ec57 6b10 	vmov	r6, r7, d0
 8020348:	4690      	mov	r8, r2
 802034a:	f7ff fcd5 	bl	801fcf8 <_Balloc>
 802034e:	4604      	mov	r4, r0
 8020350:	b930      	cbnz	r0, 8020360 <__d2b+0x24>
 8020352:	4602      	mov	r2, r0
 8020354:	4b25      	ldr	r3, [pc, #148]	; (80203ec <__d2b+0xb0>)
 8020356:	4826      	ldr	r0, [pc, #152]	; (80203f0 <__d2b+0xb4>)
 8020358:	f240 310a 	movw	r1, #778	; 0x30a
 802035c:	f000 faca 	bl	80208f4 <__assert_func>
 8020360:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020364:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020368:	bb35      	cbnz	r5, 80203b8 <__d2b+0x7c>
 802036a:	2e00      	cmp	r6, #0
 802036c:	9301      	str	r3, [sp, #4]
 802036e:	d028      	beq.n	80203c2 <__d2b+0x86>
 8020370:	4668      	mov	r0, sp
 8020372:	9600      	str	r6, [sp, #0]
 8020374:	f7ff fd8c 	bl	801fe90 <__lo0bits>
 8020378:	9900      	ldr	r1, [sp, #0]
 802037a:	b300      	cbz	r0, 80203be <__d2b+0x82>
 802037c:	9a01      	ldr	r2, [sp, #4]
 802037e:	f1c0 0320 	rsb	r3, r0, #32
 8020382:	fa02 f303 	lsl.w	r3, r2, r3
 8020386:	430b      	orrs	r3, r1
 8020388:	40c2      	lsrs	r2, r0
 802038a:	6163      	str	r3, [r4, #20]
 802038c:	9201      	str	r2, [sp, #4]
 802038e:	9b01      	ldr	r3, [sp, #4]
 8020390:	61a3      	str	r3, [r4, #24]
 8020392:	2b00      	cmp	r3, #0
 8020394:	bf14      	ite	ne
 8020396:	2202      	movne	r2, #2
 8020398:	2201      	moveq	r2, #1
 802039a:	6122      	str	r2, [r4, #16]
 802039c:	b1d5      	cbz	r5, 80203d4 <__d2b+0x98>
 802039e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80203a2:	4405      	add	r5, r0
 80203a4:	f8c9 5000 	str.w	r5, [r9]
 80203a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80203ac:	f8c8 0000 	str.w	r0, [r8]
 80203b0:	4620      	mov	r0, r4
 80203b2:	b003      	add	sp, #12
 80203b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80203b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203bc:	e7d5      	b.n	802036a <__d2b+0x2e>
 80203be:	6161      	str	r1, [r4, #20]
 80203c0:	e7e5      	b.n	802038e <__d2b+0x52>
 80203c2:	a801      	add	r0, sp, #4
 80203c4:	f7ff fd64 	bl	801fe90 <__lo0bits>
 80203c8:	9b01      	ldr	r3, [sp, #4]
 80203ca:	6163      	str	r3, [r4, #20]
 80203cc:	2201      	movs	r2, #1
 80203ce:	6122      	str	r2, [r4, #16]
 80203d0:	3020      	adds	r0, #32
 80203d2:	e7e3      	b.n	802039c <__d2b+0x60>
 80203d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80203d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80203dc:	f8c9 0000 	str.w	r0, [r9]
 80203e0:	6918      	ldr	r0, [r3, #16]
 80203e2:	f7ff fd35 	bl	801fe50 <__hi0bits>
 80203e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80203ea:	e7df      	b.n	80203ac <__d2b+0x70>
 80203ec:	08024498 	.word	0x08024498
 80203f0:	0802450c 	.word	0x0802450c

080203f4 <_calloc_r>:
 80203f4:	b513      	push	{r0, r1, r4, lr}
 80203f6:	434a      	muls	r2, r1
 80203f8:	4611      	mov	r1, r2
 80203fa:	9201      	str	r2, [sp, #4]
 80203fc:	f7fe f80a 	bl	801e414 <_malloc_r>
 8020400:	4604      	mov	r4, r0
 8020402:	b118      	cbz	r0, 802040c <_calloc_r+0x18>
 8020404:	9a01      	ldr	r2, [sp, #4]
 8020406:	2100      	movs	r1, #0
 8020408:	f7fd ffac 	bl	801e364 <memset>
 802040c:	4620      	mov	r0, r4
 802040e:	b002      	add	sp, #8
 8020410:	bd10      	pop	{r4, pc}

08020412 <__ssputs_r>:
 8020412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020416:	688e      	ldr	r6, [r1, #8]
 8020418:	429e      	cmp	r6, r3
 802041a:	4682      	mov	sl, r0
 802041c:	460c      	mov	r4, r1
 802041e:	4690      	mov	r8, r2
 8020420:	461f      	mov	r7, r3
 8020422:	d838      	bhi.n	8020496 <__ssputs_r+0x84>
 8020424:	898a      	ldrh	r2, [r1, #12]
 8020426:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802042a:	d032      	beq.n	8020492 <__ssputs_r+0x80>
 802042c:	6825      	ldr	r5, [r4, #0]
 802042e:	6909      	ldr	r1, [r1, #16]
 8020430:	eba5 0901 	sub.w	r9, r5, r1
 8020434:	6965      	ldr	r5, [r4, #20]
 8020436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802043a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802043e:	3301      	adds	r3, #1
 8020440:	444b      	add	r3, r9
 8020442:	106d      	asrs	r5, r5, #1
 8020444:	429d      	cmp	r5, r3
 8020446:	bf38      	it	cc
 8020448:	461d      	movcc	r5, r3
 802044a:	0553      	lsls	r3, r2, #21
 802044c:	d531      	bpl.n	80204b2 <__ssputs_r+0xa0>
 802044e:	4629      	mov	r1, r5
 8020450:	f7fd ffe0 	bl	801e414 <_malloc_r>
 8020454:	4606      	mov	r6, r0
 8020456:	b950      	cbnz	r0, 802046e <__ssputs_r+0x5c>
 8020458:	230c      	movs	r3, #12
 802045a:	f8ca 3000 	str.w	r3, [sl]
 802045e:	89a3      	ldrh	r3, [r4, #12]
 8020460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020464:	81a3      	strh	r3, [r4, #12]
 8020466:	f04f 30ff 	mov.w	r0, #4294967295
 802046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802046e:	6921      	ldr	r1, [r4, #16]
 8020470:	464a      	mov	r2, r9
 8020472:	f7fd ff69 	bl	801e348 <memcpy>
 8020476:	89a3      	ldrh	r3, [r4, #12]
 8020478:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802047c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020480:	81a3      	strh	r3, [r4, #12]
 8020482:	6126      	str	r6, [r4, #16]
 8020484:	6165      	str	r5, [r4, #20]
 8020486:	444e      	add	r6, r9
 8020488:	eba5 0509 	sub.w	r5, r5, r9
 802048c:	6026      	str	r6, [r4, #0]
 802048e:	60a5      	str	r5, [r4, #8]
 8020490:	463e      	mov	r6, r7
 8020492:	42be      	cmp	r6, r7
 8020494:	d900      	bls.n	8020498 <__ssputs_r+0x86>
 8020496:	463e      	mov	r6, r7
 8020498:	4632      	mov	r2, r6
 802049a:	6820      	ldr	r0, [r4, #0]
 802049c:	4641      	mov	r1, r8
 802049e:	f000 fbb3 	bl	8020c08 <memmove>
 80204a2:	68a3      	ldr	r3, [r4, #8]
 80204a4:	6822      	ldr	r2, [r4, #0]
 80204a6:	1b9b      	subs	r3, r3, r6
 80204a8:	4432      	add	r2, r6
 80204aa:	60a3      	str	r3, [r4, #8]
 80204ac:	6022      	str	r2, [r4, #0]
 80204ae:	2000      	movs	r0, #0
 80204b0:	e7db      	b.n	802046a <__ssputs_r+0x58>
 80204b2:	462a      	mov	r2, r5
 80204b4:	f000 fbc2 	bl	8020c3c <_realloc_r>
 80204b8:	4606      	mov	r6, r0
 80204ba:	2800      	cmp	r0, #0
 80204bc:	d1e1      	bne.n	8020482 <__ssputs_r+0x70>
 80204be:	6921      	ldr	r1, [r4, #16]
 80204c0:	4650      	mov	r0, sl
 80204c2:	f7fd ff57 	bl	801e374 <_free_r>
 80204c6:	e7c7      	b.n	8020458 <__ssputs_r+0x46>

080204c8 <_svfiprintf_r>:
 80204c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204cc:	4698      	mov	r8, r3
 80204ce:	898b      	ldrh	r3, [r1, #12]
 80204d0:	061b      	lsls	r3, r3, #24
 80204d2:	b09d      	sub	sp, #116	; 0x74
 80204d4:	4607      	mov	r7, r0
 80204d6:	460d      	mov	r5, r1
 80204d8:	4614      	mov	r4, r2
 80204da:	d50e      	bpl.n	80204fa <_svfiprintf_r+0x32>
 80204dc:	690b      	ldr	r3, [r1, #16]
 80204de:	b963      	cbnz	r3, 80204fa <_svfiprintf_r+0x32>
 80204e0:	2140      	movs	r1, #64	; 0x40
 80204e2:	f7fd ff97 	bl	801e414 <_malloc_r>
 80204e6:	6028      	str	r0, [r5, #0]
 80204e8:	6128      	str	r0, [r5, #16]
 80204ea:	b920      	cbnz	r0, 80204f6 <_svfiprintf_r+0x2e>
 80204ec:	230c      	movs	r3, #12
 80204ee:	603b      	str	r3, [r7, #0]
 80204f0:	f04f 30ff 	mov.w	r0, #4294967295
 80204f4:	e0d1      	b.n	802069a <_svfiprintf_r+0x1d2>
 80204f6:	2340      	movs	r3, #64	; 0x40
 80204f8:	616b      	str	r3, [r5, #20]
 80204fa:	2300      	movs	r3, #0
 80204fc:	9309      	str	r3, [sp, #36]	; 0x24
 80204fe:	2320      	movs	r3, #32
 8020500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020504:	f8cd 800c 	str.w	r8, [sp, #12]
 8020508:	2330      	movs	r3, #48	; 0x30
 802050a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80206b4 <_svfiprintf_r+0x1ec>
 802050e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020512:	f04f 0901 	mov.w	r9, #1
 8020516:	4623      	mov	r3, r4
 8020518:	469a      	mov	sl, r3
 802051a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802051e:	b10a      	cbz	r2, 8020524 <_svfiprintf_r+0x5c>
 8020520:	2a25      	cmp	r2, #37	; 0x25
 8020522:	d1f9      	bne.n	8020518 <_svfiprintf_r+0x50>
 8020524:	ebba 0b04 	subs.w	fp, sl, r4
 8020528:	d00b      	beq.n	8020542 <_svfiprintf_r+0x7a>
 802052a:	465b      	mov	r3, fp
 802052c:	4622      	mov	r2, r4
 802052e:	4629      	mov	r1, r5
 8020530:	4638      	mov	r0, r7
 8020532:	f7ff ff6e 	bl	8020412 <__ssputs_r>
 8020536:	3001      	adds	r0, #1
 8020538:	f000 80aa 	beq.w	8020690 <_svfiprintf_r+0x1c8>
 802053c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802053e:	445a      	add	r2, fp
 8020540:	9209      	str	r2, [sp, #36]	; 0x24
 8020542:	f89a 3000 	ldrb.w	r3, [sl]
 8020546:	2b00      	cmp	r3, #0
 8020548:	f000 80a2 	beq.w	8020690 <_svfiprintf_r+0x1c8>
 802054c:	2300      	movs	r3, #0
 802054e:	f04f 32ff 	mov.w	r2, #4294967295
 8020552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020556:	f10a 0a01 	add.w	sl, sl, #1
 802055a:	9304      	str	r3, [sp, #16]
 802055c:	9307      	str	r3, [sp, #28]
 802055e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020562:	931a      	str	r3, [sp, #104]	; 0x68
 8020564:	4654      	mov	r4, sl
 8020566:	2205      	movs	r2, #5
 8020568:	f814 1b01 	ldrb.w	r1, [r4], #1
 802056c:	4851      	ldr	r0, [pc, #324]	; (80206b4 <_svfiprintf_r+0x1ec>)
 802056e:	f7df fe7f 	bl	8000270 <memchr>
 8020572:	9a04      	ldr	r2, [sp, #16]
 8020574:	b9d8      	cbnz	r0, 80205ae <_svfiprintf_r+0xe6>
 8020576:	06d0      	lsls	r0, r2, #27
 8020578:	bf44      	itt	mi
 802057a:	2320      	movmi	r3, #32
 802057c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020580:	0711      	lsls	r1, r2, #28
 8020582:	bf44      	itt	mi
 8020584:	232b      	movmi	r3, #43	; 0x2b
 8020586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802058a:	f89a 3000 	ldrb.w	r3, [sl]
 802058e:	2b2a      	cmp	r3, #42	; 0x2a
 8020590:	d015      	beq.n	80205be <_svfiprintf_r+0xf6>
 8020592:	9a07      	ldr	r2, [sp, #28]
 8020594:	4654      	mov	r4, sl
 8020596:	2000      	movs	r0, #0
 8020598:	f04f 0c0a 	mov.w	ip, #10
 802059c:	4621      	mov	r1, r4
 802059e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80205a2:	3b30      	subs	r3, #48	; 0x30
 80205a4:	2b09      	cmp	r3, #9
 80205a6:	d94e      	bls.n	8020646 <_svfiprintf_r+0x17e>
 80205a8:	b1b0      	cbz	r0, 80205d8 <_svfiprintf_r+0x110>
 80205aa:	9207      	str	r2, [sp, #28]
 80205ac:	e014      	b.n	80205d8 <_svfiprintf_r+0x110>
 80205ae:	eba0 0308 	sub.w	r3, r0, r8
 80205b2:	fa09 f303 	lsl.w	r3, r9, r3
 80205b6:	4313      	orrs	r3, r2
 80205b8:	9304      	str	r3, [sp, #16]
 80205ba:	46a2      	mov	sl, r4
 80205bc:	e7d2      	b.n	8020564 <_svfiprintf_r+0x9c>
 80205be:	9b03      	ldr	r3, [sp, #12]
 80205c0:	1d19      	adds	r1, r3, #4
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	9103      	str	r1, [sp, #12]
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	bfbb      	ittet	lt
 80205ca:	425b      	neglt	r3, r3
 80205cc:	f042 0202 	orrlt.w	r2, r2, #2
 80205d0:	9307      	strge	r3, [sp, #28]
 80205d2:	9307      	strlt	r3, [sp, #28]
 80205d4:	bfb8      	it	lt
 80205d6:	9204      	strlt	r2, [sp, #16]
 80205d8:	7823      	ldrb	r3, [r4, #0]
 80205da:	2b2e      	cmp	r3, #46	; 0x2e
 80205dc:	d10c      	bne.n	80205f8 <_svfiprintf_r+0x130>
 80205de:	7863      	ldrb	r3, [r4, #1]
 80205e0:	2b2a      	cmp	r3, #42	; 0x2a
 80205e2:	d135      	bne.n	8020650 <_svfiprintf_r+0x188>
 80205e4:	9b03      	ldr	r3, [sp, #12]
 80205e6:	1d1a      	adds	r2, r3, #4
 80205e8:	681b      	ldr	r3, [r3, #0]
 80205ea:	9203      	str	r2, [sp, #12]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	bfb8      	it	lt
 80205f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80205f4:	3402      	adds	r4, #2
 80205f6:	9305      	str	r3, [sp, #20]
 80205f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80206c4 <_svfiprintf_r+0x1fc>
 80205fc:	7821      	ldrb	r1, [r4, #0]
 80205fe:	2203      	movs	r2, #3
 8020600:	4650      	mov	r0, sl
 8020602:	f7df fe35 	bl	8000270 <memchr>
 8020606:	b140      	cbz	r0, 802061a <_svfiprintf_r+0x152>
 8020608:	2340      	movs	r3, #64	; 0x40
 802060a:	eba0 000a 	sub.w	r0, r0, sl
 802060e:	fa03 f000 	lsl.w	r0, r3, r0
 8020612:	9b04      	ldr	r3, [sp, #16]
 8020614:	4303      	orrs	r3, r0
 8020616:	3401      	adds	r4, #1
 8020618:	9304      	str	r3, [sp, #16]
 802061a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802061e:	4826      	ldr	r0, [pc, #152]	; (80206b8 <_svfiprintf_r+0x1f0>)
 8020620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020624:	2206      	movs	r2, #6
 8020626:	f7df fe23 	bl	8000270 <memchr>
 802062a:	2800      	cmp	r0, #0
 802062c:	d038      	beq.n	80206a0 <_svfiprintf_r+0x1d8>
 802062e:	4b23      	ldr	r3, [pc, #140]	; (80206bc <_svfiprintf_r+0x1f4>)
 8020630:	bb1b      	cbnz	r3, 802067a <_svfiprintf_r+0x1b2>
 8020632:	9b03      	ldr	r3, [sp, #12]
 8020634:	3307      	adds	r3, #7
 8020636:	f023 0307 	bic.w	r3, r3, #7
 802063a:	3308      	adds	r3, #8
 802063c:	9303      	str	r3, [sp, #12]
 802063e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020640:	4433      	add	r3, r6
 8020642:	9309      	str	r3, [sp, #36]	; 0x24
 8020644:	e767      	b.n	8020516 <_svfiprintf_r+0x4e>
 8020646:	fb0c 3202 	mla	r2, ip, r2, r3
 802064a:	460c      	mov	r4, r1
 802064c:	2001      	movs	r0, #1
 802064e:	e7a5      	b.n	802059c <_svfiprintf_r+0xd4>
 8020650:	2300      	movs	r3, #0
 8020652:	3401      	adds	r4, #1
 8020654:	9305      	str	r3, [sp, #20]
 8020656:	4619      	mov	r1, r3
 8020658:	f04f 0c0a 	mov.w	ip, #10
 802065c:	4620      	mov	r0, r4
 802065e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020662:	3a30      	subs	r2, #48	; 0x30
 8020664:	2a09      	cmp	r2, #9
 8020666:	d903      	bls.n	8020670 <_svfiprintf_r+0x1a8>
 8020668:	2b00      	cmp	r3, #0
 802066a:	d0c5      	beq.n	80205f8 <_svfiprintf_r+0x130>
 802066c:	9105      	str	r1, [sp, #20]
 802066e:	e7c3      	b.n	80205f8 <_svfiprintf_r+0x130>
 8020670:	fb0c 2101 	mla	r1, ip, r1, r2
 8020674:	4604      	mov	r4, r0
 8020676:	2301      	movs	r3, #1
 8020678:	e7f0      	b.n	802065c <_svfiprintf_r+0x194>
 802067a:	ab03      	add	r3, sp, #12
 802067c:	9300      	str	r3, [sp, #0]
 802067e:	462a      	mov	r2, r5
 8020680:	4b0f      	ldr	r3, [pc, #60]	; (80206c0 <_svfiprintf_r+0x1f8>)
 8020682:	a904      	add	r1, sp, #16
 8020684:	4638      	mov	r0, r7
 8020686:	f7fd ffaf 	bl	801e5e8 <_printf_float>
 802068a:	1c42      	adds	r2, r0, #1
 802068c:	4606      	mov	r6, r0
 802068e:	d1d6      	bne.n	802063e <_svfiprintf_r+0x176>
 8020690:	89ab      	ldrh	r3, [r5, #12]
 8020692:	065b      	lsls	r3, r3, #25
 8020694:	f53f af2c 	bmi.w	80204f0 <_svfiprintf_r+0x28>
 8020698:	9809      	ldr	r0, [sp, #36]	; 0x24
 802069a:	b01d      	add	sp, #116	; 0x74
 802069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206a0:	ab03      	add	r3, sp, #12
 80206a2:	9300      	str	r3, [sp, #0]
 80206a4:	462a      	mov	r2, r5
 80206a6:	4b06      	ldr	r3, [pc, #24]	; (80206c0 <_svfiprintf_r+0x1f8>)
 80206a8:	a904      	add	r1, sp, #16
 80206aa:	4638      	mov	r0, r7
 80206ac:	f7fe fa28 	bl	801eb00 <_printf_i>
 80206b0:	e7eb      	b.n	802068a <_svfiprintf_r+0x1c2>
 80206b2:	bf00      	nop
 80206b4:	0802466c 	.word	0x0802466c
 80206b8:	08024676 	.word	0x08024676
 80206bc:	0801e5e9 	.word	0x0801e5e9
 80206c0:	08020413 	.word	0x08020413
 80206c4:	08024672 	.word	0x08024672

080206c8 <__sread>:
 80206c8:	b510      	push	{r4, lr}
 80206ca:	460c      	mov	r4, r1
 80206cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80206d0:	f000 fc34 	bl	8020f3c <_read_r>
 80206d4:	2800      	cmp	r0, #0
 80206d6:	bfab      	itete	ge
 80206d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80206da:	89a3      	ldrhlt	r3, [r4, #12]
 80206dc:	181b      	addge	r3, r3, r0
 80206de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80206e2:	bfac      	ite	ge
 80206e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80206e6:	81a3      	strhlt	r3, [r4, #12]
 80206e8:	bd10      	pop	{r4, pc}

080206ea <__swrite>:
 80206ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206ee:	461f      	mov	r7, r3
 80206f0:	898b      	ldrh	r3, [r1, #12]
 80206f2:	05db      	lsls	r3, r3, #23
 80206f4:	4605      	mov	r5, r0
 80206f6:	460c      	mov	r4, r1
 80206f8:	4616      	mov	r6, r2
 80206fa:	d505      	bpl.n	8020708 <__swrite+0x1e>
 80206fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020700:	2302      	movs	r3, #2
 8020702:	2200      	movs	r2, #0
 8020704:	f000 f9f8 	bl	8020af8 <_lseek_r>
 8020708:	89a3      	ldrh	r3, [r4, #12]
 802070a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802070e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020712:	81a3      	strh	r3, [r4, #12]
 8020714:	4632      	mov	r2, r6
 8020716:	463b      	mov	r3, r7
 8020718:	4628      	mov	r0, r5
 802071a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802071e:	f000 b869 	b.w	80207f4 <_write_r>

08020722 <__sseek>:
 8020722:	b510      	push	{r4, lr}
 8020724:	460c      	mov	r4, r1
 8020726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802072a:	f000 f9e5 	bl	8020af8 <_lseek_r>
 802072e:	1c43      	adds	r3, r0, #1
 8020730:	89a3      	ldrh	r3, [r4, #12]
 8020732:	bf15      	itete	ne
 8020734:	6560      	strne	r0, [r4, #84]	; 0x54
 8020736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802073a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802073e:	81a3      	strheq	r3, [r4, #12]
 8020740:	bf18      	it	ne
 8020742:	81a3      	strhne	r3, [r4, #12]
 8020744:	bd10      	pop	{r4, pc}

08020746 <__sclose>:
 8020746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802074a:	f000 b8f1 	b.w	8020930 <_close_r>
	...

08020750 <__swbuf_r>:
 8020750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020752:	460e      	mov	r6, r1
 8020754:	4614      	mov	r4, r2
 8020756:	4605      	mov	r5, r0
 8020758:	b118      	cbz	r0, 8020762 <__swbuf_r+0x12>
 802075a:	6983      	ldr	r3, [r0, #24]
 802075c:	b90b      	cbnz	r3, 8020762 <__swbuf_r+0x12>
 802075e:	f7ff fa19 	bl	801fb94 <__sinit>
 8020762:	4b21      	ldr	r3, [pc, #132]	; (80207e8 <__swbuf_r+0x98>)
 8020764:	429c      	cmp	r4, r3
 8020766:	d12b      	bne.n	80207c0 <__swbuf_r+0x70>
 8020768:	686c      	ldr	r4, [r5, #4]
 802076a:	69a3      	ldr	r3, [r4, #24]
 802076c:	60a3      	str	r3, [r4, #8]
 802076e:	89a3      	ldrh	r3, [r4, #12]
 8020770:	071a      	lsls	r2, r3, #28
 8020772:	d52f      	bpl.n	80207d4 <__swbuf_r+0x84>
 8020774:	6923      	ldr	r3, [r4, #16]
 8020776:	b36b      	cbz	r3, 80207d4 <__swbuf_r+0x84>
 8020778:	6923      	ldr	r3, [r4, #16]
 802077a:	6820      	ldr	r0, [r4, #0]
 802077c:	1ac0      	subs	r0, r0, r3
 802077e:	6963      	ldr	r3, [r4, #20]
 8020780:	b2f6      	uxtb	r6, r6
 8020782:	4283      	cmp	r3, r0
 8020784:	4637      	mov	r7, r6
 8020786:	dc04      	bgt.n	8020792 <__swbuf_r+0x42>
 8020788:	4621      	mov	r1, r4
 802078a:	4628      	mov	r0, r5
 802078c:	f000 f966 	bl	8020a5c <_fflush_r>
 8020790:	bb30      	cbnz	r0, 80207e0 <__swbuf_r+0x90>
 8020792:	68a3      	ldr	r3, [r4, #8]
 8020794:	3b01      	subs	r3, #1
 8020796:	60a3      	str	r3, [r4, #8]
 8020798:	6823      	ldr	r3, [r4, #0]
 802079a:	1c5a      	adds	r2, r3, #1
 802079c:	6022      	str	r2, [r4, #0]
 802079e:	701e      	strb	r6, [r3, #0]
 80207a0:	6963      	ldr	r3, [r4, #20]
 80207a2:	3001      	adds	r0, #1
 80207a4:	4283      	cmp	r3, r0
 80207a6:	d004      	beq.n	80207b2 <__swbuf_r+0x62>
 80207a8:	89a3      	ldrh	r3, [r4, #12]
 80207aa:	07db      	lsls	r3, r3, #31
 80207ac:	d506      	bpl.n	80207bc <__swbuf_r+0x6c>
 80207ae:	2e0a      	cmp	r6, #10
 80207b0:	d104      	bne.n	80207bc <__swbuf_r+0x6c>
 80207b2:	4621      	mov	r1, r4
 80207b4:	4628      	mov	r0, r5
 80207b6:	f000 f951 	bl	8020a5c <_fflush_r>
 80207ba:	b988      	cbnz	r0, 80207e0 <__swbuf_r+0x90>
 80207bc:	4638      	mov	r0, r7
 80207be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80207c0:	4b0a      	ldr	r3, [pc, #40]	; (80207ec <__swbuf_r+0x9c>)
 80207c2:	429c      	cmp	r4, r3
 80207c4:	d101      	bne.n	80207ca <__swbuf_r+0x7a>
 80207c6:	68ac      	ldr	r4, [r5, #8]
 80207c8:	e7cf      	b.n	802076a <__swbuf_r+0x1a>
 80207ca:	4b09      	ldr	r3, [pc, #36]	; (80207f0 <__swbuf_r+0xa0>)
 80207cc:	429c      	cmp	r4, r3
 80207ce:	bf08      	it	eq
 80207d0:	68ec      	ldreq	r4, [r5, #12]
 80207d2:	e7ca      	b.n	802076a <__swbuf_r+0x1a>
 80207d4:	4621      	mov	r1, r4
 80207d6:	4628      	mov	r0, r5
 80207d8:	f000 f81e 	bl	8020818 <__swsetup_r>
 80207dc:	2800      	cmp	r0, #0
 80207de:	d0cb      	beq.n	8020778 <__swbuf_r+0x28>
 80207e0:	f04f 37ff 	mov.w	r7, #4294967295
 80207e4:	e7ea      	b.n	80207bc <__swbuf_r+0x6c>
 80207e6:	bf00      	nop
 80207e8:	080244cc 	.word	0x080244cc
 80207ec:	080244ec 	.word	0x080244ec
 80207f0:	080244ac 	.word	0x080244ac

080207f4 <_write_r>:
 80207f4:	b538      	push	{r3, r4, r5, lr}
 80207f6:	4d07      	ldr	r5, [pc, #28]	; (8020814 <_write_r+0x20>)
 80207f8:	4604      	mov	r4, r0
 80207fa:	4608      	mov	r0, r1
 80207fc:	4611      	mov	r1, r2
 80207fe:	2200      	movs	r2, #0
 8020800:	602a      	str	r2, [r5, #0]
 8020802:	461a      	mov	r2, r3
 8020804:	f7e7 fb35 	bl	8007e72 <_write>
 8020808:	1c43      	adds	r3, r0, #1
 802080a:	d102      	bne.n	8020812 <_write_r+0x1e>
 802080c:	682b      	ldr	r3, [r5, #0]
 802080e:	b103      	cbz	r3, 8020812 <_write_r+0x1e>
 8020810:	6023      	str	r3, [r4, #0]
 8020812:	bd38      	pop	{r3, r4, r5, pc}
 8020814:	20019d44 	.word	0x20019d44

08020818 <__swsetup_r>:
 8020818:	4b32      	ldr	r3, [pc, #200]	; (80208e4 <__swsetup_r+0xcc>)
 802081a:	b570      	push	{r4, r5, r6, lr}
 802081c:	681d      	ldr	r5, [r3, #0]
 802081e:	4606      	mov	r6, r0
 8020820:	460c      	mov	r4, r1
 8020822:	b125      	cbz	r5, 802082e <__swsetup_r+0x16>
 8020824:	69ab      	ldr	r3, [r5, #24]
 8020826:	b913      	cbnz	r3, 802082e <__swsetup_r+0x16>
 8020828:	4628      	mov	r0, r5
 802082a:	f7ff f9b3 	bl	801fb94 <__sinit>
 802082e:	4b2e      	ldr	r3, [pc, #184]	; (80208e8 <__swsetup_r+0xd0>)
 8020830:	429c      	cmp	r4, r3
 8020832:	d10f      	bne.n	8020854 <__swsetup_r+0x3c>
 8020834:	686c      	ldr	r4, [r5, #4]
 8020836:	89a3      	ldrh	r3, [r4, #12]
 8020838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802083c:	0719      	lsls	r1, r3, #28
 802083e:	d42c      	bmi.n	802089a <__swsetup_r+0x82>
 8020840:	06dd      	lsls	r5, r3, #27
 8020842:	d411      	bmi.n	8020868 <__swsetup_r+0x50>
 8020844:	2309      	movs	r3, #9
 8020846:	6033      	str	r3, [r6, #0]
 8020848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802084c:	81a3      	strh	r3, [r4, #12]
 802084e:	f04f 30ff 	mov.w	r0, #4294967295
 8020852:	e03e      	b.n	80208d2 <__swsetup_r+0xba>
 8020854:	4b25      	ldr	r3, [pc, #148]	; (80208ec <__swsetup_r+0xd4>)
 8020856:	429c      	cmp	r4, r3
 8020858:	d101      	bne.n	802085e <__swsetup_r+0x46>
 802085a:	68ac      	ldr	r4, [r5, #8]
 802085c:	e7eb      	b.n	8020836 <__swsetup_r+0x1e>
 802085e:	4b24      	ldr	r3, [pc, #144]	; (80208f0 <__swsetup_r+0xd8>)
 8020860:	429c      	cmp	r4, r3
 8020862:	bf08      	it	eq
 8020864:	68ec      	ldreq	r4, [r5, #12]
 8020866:	e7e6      	b.n	8020836 <__swsetup_r+0x1e>
 8020868:	0758      	lsls	r0, r3, #29
 802086a:	d512      	bpl.n	8020892 <__swsetup_r+0x7a>
 802086c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802086e:	b141      	cbz	r1, 8020882 <__swsetup_r+0x6a>
 8020870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020874:	4299      	cmp	r1, r3
 8020876:	d002      	beq.n	802087e <__swsetup_r+0x66>
 8020878:	4630      	mov	r0, r6
 802087a:	f7fd fd7b 	bl	801e374 <_free_r>
 802087e:	2300      	movs	r3, #0
 8020880:	6363      	str	r3, [r4, #52]	; 0x34
 8020882:	89a3      	ldrh	r3, [r4, #12]
 8020884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020888:	81a3      	strh	r3, [r4, #12]
 802088a:	2300      	movs	r3, #0
 802088c:	6063      	str	r3, [r4, #4]
 802088e:	6923      	ldr	r3, [r4, #16]
 8020890:	6023      	str	r3, [r4, #0]
 8020892:	89a3      	ldrh	r3, [r4, #12]
 8020894:	f043 0308 	orr.w	r3, r3, #8
 8020898:	81a3      	strh	r3, [r4, #12]
 802089a:	6923      	ldr	r3, [r4, #16]
 802089c:	b94b      	cbnz	r3, 80208b2 <__swsetup_r+0x9a>
 802089e:	89a3      	ldrh	r3, [r4, #12]
 80208a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80208a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80208a8:	d003      	beq.n	80208b2 <__swsetup_r+0x9a>
 80208aa:	4621      	mov	r1, r4
 80208ac:	4630      	mov	r0, r6
 80208ae:	f000 f959 	bl	8020b64 <__smakebuf_r>
 80208b2:	89a0      	ldrh	r0, [r4, #12]
 80208b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80208b8:	f010 0301 	ands.w	r3, r0, #1
 80208bc:	d00a      	beq.n	80208d4 <__swsetup_r+0xbc>
 80208be:	2300      	movs	r3, #0
 80208c0:	60a3      	str	r3, [r4, #8]
 80208c2:	6963      	ldr	r3, [r4, #20]
 80208c4:	425b      	negs	r3, r3
 80208c6:	61a3      	str	r3, [r4, #24]
 80208c8:	6923      	ldr	r3, [r4, #16]
 80208ca:	b943      	cbnz	r3, 80208de <__swsetup_r+0xc6>
 80208cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80208d0:	d1ba      	bne.n	8020848 <__swsetup_r+0x30>
 80208d2:	bd70      	pop	{r4, r5, r6, pc}
 80208d4:	0781      	lsls	r1, r0, #30
 80208d6:	bf58      	it	pl
 80208d8:	6963      	ldrpl	r3, [r4, #20]
 80208da:	60a3      	str	r3, [r4, #8]
 80208dc:	e7f4      	b.n	80208c8 <__swsetup_r+0xb0>
 80208de:	2000      	movs	r0, #0
 80208e0:	e7f7      	b.n	80208d2 <__swsetup_r+0xba>
 80208e2:	bf00      	nop
 80208e4:	2000009c 	.word	0x2000009c
 80208e8:	080244cc 	.word	0x080244cc
 80208ec:	080244ec 	.word	0x080244ec
 80208f0:	080244ac 	.word	0x080244ac

080208f4 <__assert_func>:
 80208f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80208f6:	4614      	mov	r4, r2
 80208f8:	461a      	mov	r2, r3
 80208fa:	4b09      	ldr	r3, [pc, #36]	; (8020920 <__assert_func+0x2c>)
 80208fc:	681b      	ldr	r3, [r3, #0]
 80208fe:	4605      	mov	r5, r0
 8020900:	68d8      	ldr	r0, [r3, #12]
 8020902:	b14c      	cbz	r4, 8020918 <__assert_func+0x24>
 8020904:	4b07      	ldr	r3, [pc, #28]	; (8020924 <__assert_func+0x30>)
 8020906:	9100      	str	r1, [sp, #0]
 8020908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802090c:	4906      	ldr	r1, [pc, #24]	; (8020928 <__assert_func+0x34>)
 802090e:	462b      	mov	r3, r5
 8020910:	f000 f8e0 	bl	8020ad4 <fiprintf>
 8020914:	f000 fb31 	bl	8020f7a <abort>
 8020918:	4b04      	ldr	r3, [pc, #16]	; (802092c <__assert_func+0x38>)
 802091a:	461c      	mov	r4, r3
 802091c:	e7f3      	b.n	8020906 <__assert_func+0x12>
 802091e:	bf00      	nop
 8020920:	2000009c 	.word	0x2000009c
 8020924:	0802467d 	.word	0x0802467d
 8020928:	0802468a 	.word	0x0802468a
 802092c:	080246b8 	.word	0x080246b8

08020930 <_close_r>:
 8020930:	b538      	push	{r3, r4, r5, lr}
 8020932:	4d06      	ldr	r5, [pc, #24]	; (802094c <_close_r+0x1c>)
 8020934:	2300      	movs	r3, #0
 8020936:	4604      	mov	r4, r0
 8020938:	4608      	mov	r0, r1
 802093a:	602b      	str	r3, [r5, #0]
 802093c:	f7e7 fab5 	bl	8007eaa <_close>
 8020940:	1c43      	adds	r3, r0, #1
 8020942:	d102      	bne.n	802094a <_close_r+0x1a>
 8020944:	682b      	ldr	r3, [r5, #0]
 8020946:	b103      	cbz	r3, 802094a <_close_r+0x1a>
 8020948:	6023      	str	r3, [r4, #0]
 802094a:	bd38      	pop	{r3, r4, r5, pc}
 802094c:	20019d44 	.word	0x20019d44

08020950 <__sflush_r>:
 8020950:	898a      	ldrh	r2, [r1, #12]
 8020952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020956:	4605      	mov	r5, r0
 8020958:	0710      	lsls	r0, r2, #28
 802095a:	460c      	mov	r4, r1
 802095c:	d458      	bmi.n	8020a10 <__sflush_r+0xc0>
 802095e:	684b      	ldr	r3, [r1, #4]
 8020960:	2b00      	cmp	r3, #0
 8020962:	dc05      	bgt.n	8020970 <__sflush_r+0x20>
 8020964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020966:	2b00      	cmp	r3, #0
 8020968:	dc02      	bgt.n	8020970 <__sflush_r+0x20>
 802096a:	2000      	movs	r0, #0
 802096c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020972:	2e00      	cmp	r6, #0
 8020974:	d0f9      	beq.n	802096a <__sflush_r+0x1a>
 8020976:	2300      	movs	r3, #0
 8020978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802097c:	682f      	ldr	r7, [r5, #0]
 802097e:	602b      	str	r3, [r5, #0]
 8020980:	d032      	beq.n	80209e8 <__sflush_r+0x98>
 8020982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020984:	89a3      	ldrh	r3, [r4, #12]
 8020986:	075a      	lsls	r2, r3, #29
 8020988:	d505      	bpl.n	8020996 <__sflush_r+0x46>
 802098a:	6863      	ldr	r3, [r4, #4]
 802098c:	1ac0      	subs	r0, r0, r3
 802098e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020990:	b10b      	cbz	r3, 8020996 <__sflush_r+0x46>
 8020992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020994:	1ac0      	subs	r0, r0, r3
 8020996:	2300      	movs	r3, #0
 8020998:	4602      	mov	r2, r0
 802099a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802099c:	6a21      	ldr	r1, [r4, #32]
 802099e:	4628      	mov	r0, r5
 80209a0:	47b0      	blx	r6
 80209a2:	1c43      	adds	r3, r0, #1
 80209a4:	89a3      	ldrh	r3, [r4, #12]
 80209a6:	d106      	bne.n	80209b6 <__sflush_r+0x66>
 80209a8:	6829      	ldr	r1, [r5, #0]
 80209aa:	291d      	cmp	r1, #29
 80209ac:	d82c      	bhi.n	8020a08 <__sflush_r+0xb8>
 80209ae:	4a2a      	ldr	r2, [pc, #168]	; (8020a58 <__sflush_r+0x108>)
 80209b0:	40ca      	lsrs	r2, r1
 80209b2:	07d6      	lsls	r6, r2, #31
 80209b4:	d528      	bpl.n	8020a08 <__sflush_r+0xb8>
 80209b6:	2200      	movs	r2, #0
 80209b8:	6062      	str	r2, [r4, #4]
 80209ba:	04d9      	lsls	r1, r3, #19
 80209bc:	6922      	ldr	r2, [r4, #16]
 80209be:	6022      	str	r2, [r4, #0]
 80209c0:	d504      	bpl.n	80209cc <__sflush_r+0x7c>
 80209c2:	1c42      	adds	r2, r0, #1
 80209c4:	d101      	bne.n	80209ca <__sflush_r+0x7a>
 80209c6:	682b      	ldr	r3, [r5, #0]
 80209c8:	b903      	cbnz	r3, 80209cc <__sflush_r+0x7c>
 80209ca:	6560      	str	r0, [r4, #84]	; 0x54
 80209cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80209ce:	602f      	str	r7, [r5, #0]
 80209d0:	2900      	cmp	r1, #0
 80209d2:	d0ca      	beq.n	802096a <__sflush_r+0x1a>
 80209d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80209d8:	4299      	cmp	r1, r3
 80209da:	d002      	beq.n	80209e2 <__sflush_r+0x92>
 80209dc:	4628      	mov	r0, r5
 80209de:	f7fd fcc9 	bl	801e374 <_free_r>
 80209e2:	2000      	movs	r0, #0
 80209e4:	6360      	str	r0, [r4, #52]	; 0x34
 80209e6:	e7c1      	b.n	802096c <__sflush_r+0x1c>
 80209e8:	6a21      	ldr	r1, [r4, #32]
 80209ea:	2301      	movs	r3, #1
 80209ec:	4628      	mov	r0, r5
 80209ee:	47b0      	blx	r6
 80209f0:	1c41      	adds	r1, r0, #1
 80209f2:	d1c7      	bne.n	8020984 <__sflush_r+0x34>
 80209f4:	682b      	ldr	r3, [r5, #0]
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d0c4      	beq.n	8020984 <__sflush_r+0x34>
 80209fa:	2b1d      	cmp	r3, #29
 80209fc:	d001      	beq.n	8020a02 <__sflush_r+0xb2>
 80209fe:	2b16      	cmp	r3, #22
 8020a00:	d101      	bne.n	8020a06 <__sflush_r+0xb6>
 8020a02:	602f      	str	r7, [r5, #0]
 8020a04:	e7b1      	b.n	802096a <__sflush_r+0x1a>
 8020a06:	89a3      	ldrh	r3, [r4, #12]
 8020a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a0c:	81a3      	strh	r3, [r4, #12]
 8020a0e:	e7ad      	b.n	802096c <__sflush_r+0x1c>
 8020a10:	690f      	ldr	r7, [r1, #16]
 8020a12:	2f00      	cmp	r7, #0
 8020a14:	d0a9      	beq.n	802096a <__sflush_r+0x1a>
 8020a16:	0793      	lsls	r3, r2, #30
 8020a18:	680e      	ldr	r6, [r1, #0]
 8020a1a:	bf08      	it	eq
 8020a1c:	694b      	ldreq	r3, [r1, #20]
 8020a1e:	600f      	str	r7, [r1, #0]
 8020a20:	bf18      	it	ne
 8020a22:	2300      	movne	r3, #0
 8020a24:	eba6 0807 	sub.w	r8, r6, r7
 8020a28:	608b      	str	r3, [r1, #8]
 8020a2a:	f1b8 0f00 	cmp.w	r8, #0
 8020a2e:	dd9c      	ble.n	802096a <__sflush_r+0x1a>
 8020a30:	6a21      	ldr	r1, [r4, #32]
 8020a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020a34:	4643      	mov	r3, r8
 8020a36:	463a      	mov	r2, r7
 8020a38:	4628      	mov	r0, r5
 8020a3a:	47b0      	blx	r6
 8020a3c:	2800      	cmp	r0, #0
 8020a3e:	dc06      	bgt.n	8020a4e <__sflush_r+0xfe>
 8020a40:	89a3      	ldrh	r3, [r4, #12]
 8020a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a46:	81a3      	strh	r3, [r4, #12]
 8020a48:	f04f 30ff 	mov.w	r0, #4294967295
 8020a4c:	e78e      	b.n	802096c <__sflush_r+0x1c>
 8020a4e:	4407      	add	r7, r0
 8020a50:	eba8 0800 	sub.w	r8, r8, r0
 8020a54:	e7e9      	b.n	8020a2a <__sflush_r+0xda>
 8020a56:	bf00      	nop
 8020a58:	20400001 	.word	0x20400001

08020a5c <_fflush_r>:
 8020a5c:	b538      	push	{r3, r4, r5, lr}
 8020a5e:	690b      	ldr	r3, [r1, #16]
 8020a60:	4605      	mov	r5, r0
 8020a62:	460c      	mov	r4, r1
 8020a64:	b913      	cbnz	r3, 8020a6c <_fflush_r+0x10>
 8020a66:	2500      	movs	r5, #0
 8020a68:	4628      	mov	r0, r5
 8020a6a:	bd38      	pop	{r3, r4, r5, pc}
 8020a6c:	b118      	cbz	r0, 8020a76 <_fflush_r+0x1a>
 8020a6e:	6983      	ldr	r3, [r0, #24]
 8020a70:	b90b      	cbnz	r3, 8020a76 <_fflush_r+0x1a>
 8020a72:	f7ff f88f 	bl	801fb94 <__sinit>
 8020a76:	4b14      	ldr	r3, [pc, #80]	; (8020ac8 <_fflush_r+0x6c>)
 8020a78:	429c      	cmp	r4, r3
 8020a7a:	d11b      	bne.n	8020ab4 <_fflush_r+0x58>
 8020a7c:	686c      	ldr	r4, [r5, #4]
 8020a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	d0ef      	beq.n	8020a66 <_fflush_r+0xa>
 8020a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020a88:	07d0      	lsls	r0, r2, #31
 8020a8a:	d404      	bmi.n	8020a96 <_fflush_r+0x3a>
 8020a8c:	0599      	lsls	r1, r3, #22
 8020a8e:	d402      	bmi.n	8020a96 <_fflush_r+0x3a>
 8020a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a92:	f7ff f922 	bl	801fcda <__retarget_lock_acquire_recursive>
 8020a96:	4628      	mov	r0, r5
 8020a98:	4621      	mov	r1, r4
 8020a9a:	f7ff ff59 	bl	8020950 <__sflush_r>
 8020a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020aa0:	07da      	lsls	r2, r3, #31
 8020aa2:	4605      	mov	r5, r0
 8020aa4:	d4e0      	bmi.n	8020a68 <_fflush_r+0xc>
 8020aa6:	89a3      	ldrh	r3, [r4, #12]
 8020aa8:	059b      	lsls	r3, r3, #22
 8020aaa:	d4dd      	bmi.n	8020a68 <_fflush_r+0xc>
 8020aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020aae:	f7ff f915 	bl	801fcdc <__retarget_lock_release_recursive>
 8020ab2:	e7d9      	b.n	8020a68 <_fflush_r+0xc>
 8020ab4:	4b05      	ldr	r3, [pc, #20]	; (8020acc <_fflush_r+0x70>)
 8020ab6:	429c      	cmp	r4, r3
 8020ab8:	d101      	bne.n	8020abe <_fflush_r+0x62>
 8020aba:	68ac      	ldr	r4, [r5, #8]
 8020abc:	e7df      	b.n	8020a7e <_fflush_r+0x22>
 8020abe:	4b04      	ldr	r3, [pc, #16]	; (8020ad0 <_fflush_r+0x74>)
 8020ac0:	429c      	cmp	r4, r3
 8020ac2:	bf08      	it	eq
 8020ac4:	68ec      	ldreq	r4, [r5, #12]
 8020ac6:	e7da      	b.n	8020a7e <_fflush_r+0x22>
 8020ac8:	080244cc 	.word	0x080244cc
 8020acc:	080244ec 	.word	0x080244ec
 8020ad0:	080244ac 	.word	0x080244ac

08020ad4 <fiprintf>:
 8020ad4:	b40e      	push	{r1, r2, r3}
 8020ad6:	b503      	push	{r0, r1, lr}
 8020ad8:	4601      	mov	r1, r0
 8020ada:	ab03      	add	r3, sp, #12
 8020adc:	4805      	ldr	r0, [pc, #20]	; (8020af4 <fiprintf+0x20>)
 8020ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ae2:	6800      	ldr	r0, [r0, #0]
 8020ae4:	9301      	str	r3, [sp, #4]
 8020ae6:	f000 f8f9 	bl	8020cdc <_vfiprintf_r>
 8020aea:	b002      	add	sp, #8
 8020aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8020af0:	b003      	add	sp, #12
 8020af2:	4770      	bx	lr
 8020af4:	2000009c 	.word	0x2000009c

08020af8 <_lseek_r>:
 8020af8:	b538      	push	{r3, r4, r5, lr}
 8020afa:	4d07      	ldr	r5, [pc, #28]	; (8020b18 <_lseek_r+0x20>)
 8020afc:	4604      	mov	r4, r0
 8020afe:	4608      	mov	r0, r1
 8020b00:	4611      	mov	r1, r2
 8020b02:	2200      	movs	r2, #0
 8020b04:	602a      	str	r2, [r5, #0]
 8020b06:	461a      	mov	r2, r3
 8020b08:	f7e7 f9f6 	bl	8007ef8 <_lseek>
 8020b0c:	1c43      	adds	r3, r0, #1
 8020b0e:	d102      	bne.n	8020b16 <_lseek_r+0x1e>
 8020b10:	682b      	ldr	r3, [r5, #0]
 8020b12:	b103      	cbz	r3, 8020b16 <_lseek_r+0x1e>
 8020b14:	6023      	str	r3, [r4, #0]
 8020b16:	bd38      	pop	{r3, r4, r5, pc}
 8020b18:	20019d44 	.word	0x20019d44

08020b1c <__swhatbuf_r>:
 8020b1c:	b570      	push	{r4, r5, r6, lr}
 8020b1e:	460e      	mov	r6, r1
 8020b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b24:	2900      	cmp	r1, #0
 8020b26:	b096      	sub	sp, #88	; 0x58
 8020b28:	4614      	mov	r4, r2
 8020b2a:	461d      	mov	r5, r3
 8020b2c:	da07      	bge.n	8020b3e <__swhatbuf_r+0x22>
 8020b2e:	2300      	movs	r3, #0
 8020b30:	602b      	str	r3, [r5, #0]
 8020b32:	89b3      	ldrh	r3, [r6, #12]
 8020b34:	061a      	lsls	r2, r3, #24
 8020b36:	d410      	bmi.n	8020b5a <__swhatbuf_r+0x3e>
 8020b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020b3c:	e00e      	b.n	8020b5c <__swhatbuf_r+0x40>
 8020b3e:	466a      	mov	r2, sp
 8020b40:	f000 fa22 	bl	8020f88 <_fstat_r>
 8020b44:	2800      	cmp	r0, #0
 8020b46:	dbf2      	blt.n	8020b2e <__swhatbuf_r+0x12>
 8020b48:	9a01      	ldr	r2, [sp, #4]
 8020b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020b52:	425a      	negs	r2, r3
 8020b54:	415a      	adcs	r2, r3
 8020b56:	602a      	str	r2, [r5, #0]
 8020b58:	e7ee      	b.n	8020b38 <__swhatbuf_r+0x1c>
 8020b5a:	2340      	movs	r3, #64	; 0x40
 8020b5c:	2000      	movs	r0, #0
 8020b5e:	6023      	str	r3, [r4, #0]
 8020b60:	b016      	add	sp, #88	; 0x58
 8020b62:	bd70      	pop	{r4, r5, r6, pc}

08020b64 <__smakebuf_r>:
 8020b64:	898b      	ldrh	r3, [r1, #12]
 8020b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020b68:	079d      	lsls	r5, r3, #30
 8020b6a:	4606      	mov	r6, r0
 8020b6c:	460c      	mov	r4, r1
 8020b6e:	d507      	bpl.n	8020b80 <__smakebuf_r+0x1c>
 8020b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020b74:	6023      	str	r3, [r4, #0]
 8020b76:	6123      	str	r3, [r4, #16]
 8020b78:	2301      	movs	r3, #1
 8020b7a:	6163      	str	r3, [r4, #20]
 8020b7c:	b002      	add	sp, #8
 8020b7e:	bd70      	pop	{r4, r5, r6, pc}
 8020b80:	ab01      	add	r3, sp, #4
 8020b82:	466a      	mov	r2, sp
 8020b84:	f7ff ffca 	bl	8020b1c <__swhatbuf_r>
 8020b88:	9900      	ldr	r1, [sp, #0]
 8020b8a:	4605      	mov	r5, r0
 8020b8c:	4630      	mov	r0, r6
 8020b8e:	f7fd fc41 	bl	801e414 <_malloc_r>
 8020b92:	b948      	cbnz	r0, 8020ba8 <__smakebuf_r+0x44>
 8020b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b98:	059a      	lsls	r2, r3, #22
 8020b9a:	d4ef      	bmi.n	8020b7c <__smakebuf_r+0x18>
 8020b9c:	f023 0303 	bic.w	r3, r3, #3
 8020ba0:	f043 0302 	orr.w	r3, r3, #2
 8020ba4:	81a3      	strh	r3, [r4, #12]
 8020ba6:	e7e3      	b.n	8020b70 <__smakebuf_r+0xc>
 8020ba8:	4b0d      	ldr	r3, [pc, #52]	; (8020be0 <__smakebuf_r+0x7c>)
 8020baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8020bac:	89a3      	ldrh	r3, [r4, #12]
 8020bae:	6020      	str	r0, [r4, #0]
 8020bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020bb4:	81a3      	strh	r3, [r4, #12]
 8020bb6:	9b00      	ldr	r3, [sp, #0]
 8020bb8:	6163      	str	r3, [r4, #20]
 8020bba:	9b01      	ldr	r3, [sp, #4]
 8020bbc:	6120      	str	r0, [r4, #16]
 8020bbe:	b15b      	cbz	r3, 8020bd8 <__smakebuf_r+0x74>
 8020bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020bc4:	4630      	mov	r0, r6
 8020bc6:	f000 f9f1 	bl	8020fac <_isatty_r>
 8020bca:	b128      	cbz	r0, 8020bd8 <__smakebuf_r+0x74>
 8020bcc:	89a3      	ldrh	r3, [r4, #12]
 8020bce:	f023 0303 	bic.w	r3, r3, #3
 8020bd2:	f043 0301 	orr.w	r3, r3, #1
 8020bd6:	81a3      	strh	r3, [r4, #12]
 8020bd8:	89a0      	ldrh	r0, [r4, #12]
 8020bda:	4305      	orrs	r5, r0
 8020bdc:	81a5      	strh	r5, [r4, #12]
 8020bde:	e7cd      	b.n	8020b7c <__smakebuf_r+0x18>
 8020be0:	0801fb2d 	.word	0x0801fb2d

08020be4 <__ascii_mbtowc>:
 8020be4:	b082      	sub	sp, #8
 8020be6:	b901      	cbnz	r1, 8020bea <__ascii_mbtowc+0x6>
 8020be8:	a901      	add	r1, sp, #4
 8020bea:	b142      	cbz	r2, 8020bfe <__ascii_mbtowc+0x1a>
 8020bec:	b14b      	cbz	r3, 8020c02 <__ascii_mbtowc+0x1e>
 8020bee:	7813      	ldrb	r3, [r2, #0]
 8020bf0:	600b      	str	r3, [r1, #0]
 8020bf2:	7812      	ldrb	r2, [r2, #0]
 8020bf4:	1e10      	subs	r0, r2, #0
 8020bf6:	bf18      	it	ne
 8020bf8:	2001      	movne	r0, #1
 8020bfa:	b002      	add	sp, #8
 8020bfc:	4770      	bx	lr
 8020bfe:	4610      	mov	r0, r2
 8020c00:	e7fb      	b.n	8020bfa <__ascii_mbtowc+0x16>
 8020c02:	f06f 0001 	mvn.w	r0, #1
 8020c06:	e7f8      	b.n	8020bfa <__ascii_mbtowc+0x16>

08020c08 <memmove>:
 8020c08:	4288      	cmp	r0, r1
 8020c0a:	b510      	push	{r4, lr}
 8020c0c:	eb01 0402 	add.w	r4, r1, r2
 8020c10:	d902      	bls.n	8020c18 <memmove+0x10>
 8020c12:	4284      	cmp	r4, r0
 8020c14:	4623      	mov	r3, r4
 8020c16:	d807      	bhi.n	8020c28 <memmove+0x20>
 8020c18:	1e43      	subs	r3, r0, #1
 8020c1a:	42a1      	cmp	r1, r4
 8020c1c:	d008      	beq.n	8020c30 <memmove+0x28>
 8020c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020c26:	e7f8      	b.n	8020c1a <memmove+0x12>
 8020c28:	4402      	add	r2, r0
 8020c2a:	4601      	mov	r1, r0
 8020c2c:	428a      	cmp	r2, r1
 8020c2e:	d100      	bne.n	8020c32 <memmove+0x2a>
 8020c30:	bd10      	pop	{r4, pc}
 8020c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020c3a:	e7f7      	b.n	8020c2c <memmove+0x24>

08020c3c <_realloc_r>:
 8020c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c3e:	4607      	mov	r7, r0
 8020c40:	4614      	mov	r4, r2
 8020c42:	460e      	mov	r6, r1
 8020c44:	b921      	cbnz	r1, 8020c50 <_realloc_r+0x14>
 8020c46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020c4a:	4611      	mov	r1, r2
 8020c4c:	f7fd bbe2 	b.w	801e414 <_malloc_r>
 8020c50:	b922      	cbnz	r2, 8020c5c <_realloc_r+0x20>
 8020c52:	f7fd fb8f 	bl	801e374 <_free_r>
 8020c56:	4625      	mov	r5, r4
 8020c58:	4628      	mov	r0, r5
 8020c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c5c:	f000 f9b6 	bl	8020fcc <_malloc_usable_size_r>
 8020c60:	42a0      	cmp	r0, r4
 8020c62:	d20f      	bcs.n	8020c84 <_realloc_r+0x48>
 8020c64:	4621      	mov	r1, r4
 8020c66:	4638      	mov	r0, r7
 8020c68:	f7fd fbd4 	bl	801e414 <_malloc_r>
 8020c6c:	4605      	mov	r5, r0
 8020c6e:	2800      	cmp	r0, #0
 8020c70:	d0f2      	beq.n	8020c58 <_realloc_r+0x1c>
 8020c72:	4631      	mov	r1, r6
 8020c74:	4622      	mov	r2, r4
 8020c76:	f7fd fb67 	bl	801e348 <memcpy>
 8020c7a:	4631      	mov	r1, r6
 8020c7c:	4638      	mov	r0, r7
 8020c7e:	f7fd fb79 	bl	801e374 <_free_r>
 8020c82:	e7e9      	b.n	8020c58 <_realloc_r+0x1c>
 8020c84:	4635      	mov	r5, r6
 8020c86:	e7e7      	b.n	8020c58 <_realloc_r+0x1c>

08020c88 <__sfputc_r>:
 8020c88:	6893      	ldr	r3, [r2, #8]
 8020c8a:	3b01      	subs	r3, #1
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	b410      	push	{r4}
 8020c90:	6093      	str	r3, [r2, #8]
 8020c92:	da08      	bge.n	8020ca6 <__sfputc_r+0x1e>
 8020c94:	6994      	ldr	r4, [r2, #24]
 8020c96:	42a3      	cmp	r3, r4
 8020c98:	db01      	blt.n	8020c9e <__sfputc_r+0x16>
 8020c9a:	290a      	cmp	r1, #10
 8020c9c:	d103      	bne.n	8020ca6 <__sfputc_r+0x1e>
 8020c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020ca2:	f7ff bd55 	b.w	8020750 <__swbuf_r>
 8020ca6:	6813      	ldr	r3, [r2, #0]
 8020ca8:	1c58      	adds	r0, r3, #1
 8020caa:	6010      	str	r0, [r2, #0]
 8020cac:	7019      	strb	r1, [r3, #0]
 8020cae:	4608      	mov	r0, r1
 8020cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020cb4:	4770      	bx	lr

08020cb6 <__sfputs_r>:
 8020cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020cb8:	4606      	mov	r6, r0
 8020cba:	460f      	mov	r7, r1
 8020cbc:	4614      	mov	r4, r2
 8020cbe:	18d5      	adds	r5, r2, r3
 8020cc0:	42ac      	cmp	r4, r5
 8020cc2:	d101      	bne.n	8020cc8 <__sfputs_r+0x12>
 8020cc4:	2000      	movs	r0, #0
 8020cc6:	e007      	b.n	8020cd8 <__sfputs_r+0x22>
 8020cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ccc:	463a      	mov	r2, r7
 8020cce:	4630      	mov	r0, r6
 8020cd0:	f7ff ffda 	bl	8020c88 <__sfputc_r>
 8020cd4:	1c43      	adds	r3, r0, #1
 8020cd6:	d1f3      	bne.n	8020cc0 <__sfputs_r+0xa>
 8020cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020cdc <_vfiprintf_r>:
 8020cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ce0:	460d      	mov	r5, r1
 8020ce2:	b09d      	sub	sp, #116	; 0x74
 8020ce4:	4614      	mov	r4, r2
 8020ce6:	4698      	mov	r8, r3
 8020ce8:	4606      	mov	r6, r0
 8020cea:	b118      	cbz	r0, 8020cf4 <_vfiprintf_r+0x18>
 8020cec:	6983      	ldr	r3, [r0, #24]
 8020cee:	b90b      	cbnz	r3, 8020cf4 <_vfiprintf_r+0x18>
 8020cf0:	f7fe ff50 	bl	801fb94 <__sinit>
 8020cf4:	4b89      	ldr	r3, [pc, #548]	; (8020f1c <_vfiprintf_r+0x240>)
 8020cf6:	429d      	cmp	r5, r3
 8020cf8:	d11b      	bne.n	8020d32 <_vfiprintf_r+0x56>
 8020cfa:	6875      	ldr	r5, [r6, #4]
 8020cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020cfe:	07d9      	lsls	r1, r3, #31
 8020d00:	d405      	bmi.n	8020d0e <_vfiprintf_r+0x32>
 8020d02:	89ab      	ldrh	r3, [r5, #12]
 8020d04:	059a      	lsls	r2, r3, #22
 8020d06:	d402      	bmi.n	8020d0e <_vfiprintf_r+0x32>
 8020d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d0a:	f7fe ffe6 	bl	801fcda <__retarget_lock_acquire_recursive>
 8020d0e:	89ab      	ldrh	r3, [r5, #12]
 8020d10:	071b      	lsls	r3, r3, #28
 8020d12:	d501      	bpl.n	8020d18 <_vfiprintf_r+0x3c>
 8020d14:	692b      	ldr	r3, [r5, #16]
 8020d16:	b9eb      	cbnz	r3, 8020d54 <_vfiprintf_r+0x78>
 8020d18:	4629      	mov	r1, r5
 8020d1a:	4630      	mov	r0, r6
 8020d1c:	f7ff fd7c 	bl	8020818 <__swsetup_r>
 8020d20:	b1c0      	cbz	r0, 8020d54 <_vfiprintf_r+0x78>
 8020d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d24:	07dc      	lsls	r4, r3, #31
 8020d26:	d50e      	bpl.n	8020d46 <_vfiprintf_r+0x6a>
 8020d28:	f04f 30ff 	mov.w	r0, #4294967295
 8020d2c:	b01d      	add	sp, #116	; 0x74
 8020d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d32:	4b7b      	ldr	r3, [pc, #492]	; (8020f20 <_vfiprintf_r+0x244>)
 8020d34:	429d      	cmp	r5, r3
 8020d36:	d101      	bne.n	8020d3c <_vfiprintf_r+0x60>
 8020d38:	68b5      	ldr	r5, [r6, #8]
 8020d3a:	e7df      	b.n	8020cfc <_vfiprintf_r+0x20>
 8020d3c:	4b79      	ldr	r3, [pc, #484]	; (8020f24 <_vfiprintf_r+0x248>)
 8020d3e:	429d      	cmp	r5, r3
 8020d40:	bf08      	it	eq
 8020d42:	68f5      	ldreq	r5, [r6, #12]
 8020d44:	e7da      	b.n	8020cfc <_vfiprintf_r+0x20>
 8020d46:	89ab      	ldrh	r3, [r5, #12]
 8020d48:	0598      	lsls	r0, r3, #22
 8020d4a:	d4ed      	bmi.n	8020d28 <_vfiprintf_r+0x4c>
 8020d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d4e:	f7fe ffc5 	bl	801fcdc <__retarget_lock_release_recursive>
 8020d52:	e7e9      	b.n	8020d28 <_vfiprintf_r+0x4c>
 8020d54:	2300      	movs	r3, #0
 8020d56:	9309      	str	r3, [sp, #36]	; 0x24
 8020d58:	2320      	movs	r3, #32
 8020d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020d62:	2330      	movs	r3, #48	; 0x30
 8020d64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020f28 <_vfiprintf_r+0x24c>
 8020d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020d6c:	f04f 0901 	mov.w	r9, #1
 8020d70:	4623      	mov	r3, r4
 8020d72:	469a      	mov	sl, r3
 8020d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020d78:	b10a      	cbz	r2, 8020d7e <_vfiprintf_r+0xa2>
 8020d7a:	2a25      	cmp	r2, #37	; 0x25
 8020d7c:	d1f9      	bne.n	8020d72 <_vfiprintf_r+0x96>
 8020d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8020d82:	d00b      	beq.n	8020d9c <_vfiprintf_r+0xc0>
 8020d84:	465b      	mov	r3, fp
 8020d86:	4622      	mov	r2, r4
 8020d88:	4629      	mov	r1, r5
 8020d8a:	4630      	mov	r0, r6
 8020d8c:	f7ff ff93 	bl	8020cb6 <__sfputs_r>
 8020d90:	3001      	adds	r0, #1
 8020d92:	f000 80aa 	beq.w	8020eea <_vfiprintf_r+0x20e>
 8020d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d98:	445a      	add	r2, fp
 8020d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8020d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	f000 80a2 	beq.w	8020eea <_vfiprintf_r+0x20e>
 8020da6:	2300      	movs	r3, #0
 8020da8:	f04f 32ff 	mov.w	r2, #4294967295
 8020dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020db0:	f10a 0a01 	add.w	sl, sl, #1
 8020db4:	9304      	str	r3, [sp, #16]
 8020db6:	9307      	str	r3, [sp, #28]
 8020db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8020dbe:	4654      	mov	r4, sl
 8020dc0:	2205      	movs	r2, #5
 8020dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020dc6:	4858      	ldr	r0, [pc, #352]	; (8020f28 <_vfiprintf_r+0x24c>)
 8020dc8:	f7df fa52 	bl	8000270 <memchr>
 8020dcc:	9a04      	ldr	r2, [sp, #16]
 8020dce:	b9d8      	cbnz	r0, 8020e08 <_vfiprintf_r+0x12c>
 8020dd0:	06d1      	lsls	r1, r2, #27
 8020dd2:	bf44      	itt	mi
 8020dd4:	2320      	movmi	r3, #32
 8020dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020dda:	0713      	lsls	r3, r2, #28
 8020ddc:	bf44      	itt	mi
 8020dde:	232b      	movmi	r3, #43	; 0x2b
 8020de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020de4:	f89a 3000 	ldrb.w	r3, [sl]
 8020de8:	2b2a      	cmp	r3, #42	; 0x2a
 8020dea:	d015      	beq.n	8020e18 <_vfiprintf_r+0x13c>
 8020dec:	9a07      	ldr	r2, [sp, #28]
 8020dee:	4654      	mov	r4, sl
 8020df0:	2000      	movs	r0, #0
 8020df2:	f04f 0c0a 	mov.w	ip, #10
 8020df6:	4621      	mov	r1, r4
 8020df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020dfc:	3b30      	subs	r3, #48	; 0x30
 8020dfe:	2b09      	cmp	r3, #9
 8020e00:	d94e      	bls.n	8020ea0 <_vfiprintf_r+0x1c4>
 8020e02:	b1b0      	cbz	r0, 8020e32 <_vfiprintf_r+0x156>
 8020e04:	9207      	str	r2, [sp, #28]
 8020e06:	e014      	b.n	8020e32 <_vfiprintf_r+0x156>
 8020e08:	eba0 0308 	sub.w	r3, r0, r8
 8020e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8020e10:	4313      	orrs	r3, r2
 8020e12:	9304      	str	r3, [sp, #16]
 8020e14:	46a2      	mov	sl, r4
 8020e16:	e7d2      	b.n	8020dbe <_vfiprintf_r+0xe2>
 8020e18:	9b03      	ldr	r3, [sp, #12]
 8020e1a:	1d19      	adds	r1, r3, #4
 8020e1c:	681b      	ldr	r3, [r3, #0]
 8020e1e:	9103      	str	r1, [sp, #12]
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	bfbb      	ittet	lt
 8020e24:	425b      	neglt	r3, r3
 8020e26:	f042 0202 	orrlt.w	r2, r2, #2
 8020e2a:	9307      	strge	r3, [sp, #28]
 8020e2c:	9307      	strlt	r3, [sp, #28]
 8020e2e:	bfb8      	it	lt
 8020e30:	9204      	strlt	r2, [sp, #16]
 8020e32:	7823      	ldrb	r3, [r4, #0]
 8020e34:	2b2e      	cmp	r3, #46	; 0x2e
 8020e36:	d10c      	bne.n	8020e52 <_vfiprintf_r+0x176>
 8020e38:	7863      	ldrb	r3, [r4, #1]
 8020e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8020e3c:	d135      	bne.n	8020eaa <_vfiprintf_r+0x1ce>
 8020e3e:	9b03      	ldr	r3, [sp, #12]
 8020e40:	1d1a      	adds	r2, r3, #4
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	9203      	str	r2, [sp, #12]
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	bfb8      	it	lt
 8020e4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8020e4e:	3402      	adds	r4, #2
 8020e50:	9305      	str	r3, [sp, #20]
 8020e52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020f38 <_vfiprintf_r+0x25c>
 8020e56:	7821      	ldrb	r1, [r4, #0]
 8020e58:	2203      	movs	r2, #3
 8020e5a:	4650      	mov	r0, sl
 8020e5c:	f7df fa08 	bl	8000270 <memchr>
 8020e60:	b140      	cbz	r0, 8020e74 <_vfiprintf_r+0x198>
 8020e62:	2340      	movs	r3, #64	; 0x40
 8020e64:	eba0 000a 	sub.w	r0, r0, sl
 8020e68:	fa03 f000 	lsl.w	r0, r3, r0
 8020e6c:	9b04      	ldr	r3, [sp, #16]
 8020e6e:	4303      	orrs	r3, r0
 8020e70:	3401      	adds	r4, #1
 8020e72:	9304      	str	r3, [sp, #16]
 8020e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e78:	482c      	ldr	r0, [pc, #176]	; (8020f2c <_vfiprintf_r+0x250>)
 8020e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020e7e:	2206      	movs	r2, #6
 8020e80:	f7df f9f6 	bl	8000270 <memchr>
 8020e84:	2800      	cmp	r0, #0
 8020e86:	d03f      	beq.n	8020f08 <_vfiprintf_r+0x22c>
 8020e88:	4b29      	ldr	r3, [pc, #164]	; (8020f30 <_vfiprintf_r+0x254>)
 8020e8a:	bb1b      	cbnz	r3, 8020ed4 <_vfiprintf_r+0x1f8>
 8020e8c:	9b03      	ldr	r3, [sp, #12]
 8020e8e:	3307      	adds	r3, #7
 8020e90:	f023 0307 	bic.w	r3, r3, #7
 8020e94:	3308      	adds	r3, #8
 8020e96:	9303      	str	r3, [sp, #12]
 8020e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e9a:	443b      	add	r3, r7
 8020e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8020e9e:	e767      	b.n	8020d70 <_vfiprintf_r+0x94>
 8020ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8020ea4:	460c      	mov	r4, r1
 8020ea6:	2001      	movs	r0, #1
 8020ea8:	e7a5      	b.n	8020df6 <_vfiprintf_r+0x11a>
 8020eaa:	2300      	movs	r3, #0
 8020eac:	3401      	adds	r4, #1
 8020eae:	9305      	str	r3, [sp, #20]
 8020eb0:	4619      	mov	r1, r3
 8020eb2:	f04f 0c0a 	mov.w	ip, #10
 8020eb6:	4620      	mov	r0, r4
 8020eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ebc:	3a30      	subs	r2, #48	; 0x30
 8020ebe:	2a09      	cmp	r2, #9
 8020ec0:	d903      	bls.n	8020eca <_vfiprintf_r+0x1ee>
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d0c5      	beq.n	8020e52 <_vfiprintf_r+0x176>
 8020ec6:	9105      	str	r1, [sp, #20]
 8020ec8:	e7c3      	b.n	8020e52 <_vfiprintf_r+0x176>
 8020eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8020ece:	4604      	mov	r4, r0
 8020ed0:	2301      	movs	r3, #1
 8020ed2:	e7f0      	b.n	8020eb6 <_vfiprintf_r+0x1da>
 8020ed4:	ab03      	add	r3, sp, #12
 8020ed6:	9300      	str	r3, [sp, #0]
 8020ed8:	462a      	mov	r2, r5
 8020eda:	4b16      	ldr	r3, [pc, #88]	; (8020f34 <_vfiprintf_r+0x258>)
 8020edc:	a904      	add	r1, sp, #16
 8020ede:	4630      	mov	r0, r6
 8020ee0:	f7fd fb82 	bl	801e5e8 <_printf_float>
 8020ee4:	4607      	mov	r7, r0
 8020ee6:	1c78      	adds	r0, r7, #1
 8020ee8:	d1d6      	bne.n	8020e98 <_vfiprintf_r+0x1bc>
 8020eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020eec:	07d9      	lsls	r1, r3, #31
 8020eee:	d405      	bmi.n	8020efc <_vfiprintf_r+0x220>
 8020ef0:	89ab      	ldrh	r3, [r5, #12]
 8020ef2:	059a      	lsls	r2, r3, #22
 8020ef4:	d402      	bmi.n	8020efc <_vfiprintf_r+0x220>
 8020ef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020ef8:	f7fe fef0 	bl	801fcdc <__retarget_lock_release_recursive>
 8020efc:	89ab      	ldrh	r3, [r5, #12]
 8020efe:	065b      	lsls	r3, r3, #25
 8020f00:	f53f af12 	bmi.w	8020d28 <_vfiprintf_r+0x4c>
 8020f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020f06:	e711      	b.n	8020d2c <_vfiprintf_r+0x50>
 8020f08:	ab03      	add	r3, sp, #12
 8020f0a:	9300      	str	r3, [sp, #0]
 8020f0c:	462a      	mov	r2, r5
 8020f0e:	4b09      	ldr	r3, [pc, #36]	; (8020f34 <_vfiprintf_r+0x258>)
 8020f10:	a904      	add	r1, sp, #16
 8020f12:	4630      	mov	r0, r6
 8020f14:	f7fd fdf4 	bl	801eb00 <_printf_i>
 8020f18:	e7e4      	b.n	8020ee4 <_vfiprintf_r+0x208>
 8020f1a:	bf00      	nop
 8020f1c:	080244cc 	.word	0x080244cc
 8020f20:	080244ec 	.word	0x080244ec
 8020f24:	080244ac 	.word	0x080244ac
 8020f28:	0802466c 	.word	0x0802466c
 8020f2c:	08024676 	.word	0x08024676
 8020f30:	0801e5e9 	.word	0x0801e5e9
 8020f34:	08020cb7 	.word	0x08020cb7
 8020f38:	08024672 	.word	0x08024672

08020f3c <_read_r>:
 8020f3c:	b538      	push	{r3, r4, r5, lr}
 8020f3e:	4d07      	ldr	r5, [pc, #28]	; (8020f5c <_read_r+0x20>)
 8020f40:	4604      	mov	r4, r0
 8020f42:	4608      	mov	r0, r1
 8020f44:	4611      	mov	r1, r2
 8020f46:	2200      	movs	r2, #0
 8020f48:	602a      	str	r2, [r5, #0]
 8020f4a:	461a      	mov	r2, r3
 8020f4c:	f7e6 ff74 	bl	8007e38 <_read>
 8020f50:	1c43      	adds	r3, r0, #1
 8020f52:	d102      	bne.n	8020f5a <_read_r+0x1e>
 8020f54:	682b      	ldr	r3, [r5, #0]
 8020f56:	b103      	cbz	r3, 8020f5a <_read_r+0x1e>
 8020f58:	6023      	str	r3, [r4, #0]
 8020f5a:	bd38      	pop	{r3, r4, r5, pc}
 8020f5c:	20019d44 	.word	0x20019d44

08020f60 <__ascii_wctomb>:
 8020f60:	b149      	cbz	r1, 8020f76 <__ascii_wctomb+0x16>
 8020f62:	2aff      	cmp	r2, #255	; 0xff
 8020f64:	bf85      	ittet	hi
 8020f66:	238a      	movhi	r3, #138	; 0x8a
 8020f68:	6003      	strhi	r3, [r0, #0]
 8020f6a:	700a      	strbls	r2, [r1, #0]
 8020f6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8020f70:	bf98      	it	ls
 8020f72:	2001      	movls	r0, #1
 8020f74:	4770      	bx	lr
 8020f76:	4608      	mov	r0, r1
 8020f78:	4770      	bx	lr

08020f7a <abort>:
 8020f7a:	b508      	push	{r3, lr}
 8020f7c:	2006      	movs	r0, #6
 8020f7e:	f000 f855 	bl	802102c <raise>
 8020f82:	2001      	movs	r0, #1
 8020f84:	f7e6 ff4e 	bl	8007e24 <_exit>

08020f88 <_fstat_r>:
 8020f88:	b538      	push	{r3, r4, r5, lr}
 8020f8a:	4d07      	ldr	r5, [pc, #28]	; (8020fa8 <_fstat_r+0x20>)
 8020f8c:	2300      	movs	r3, #0
 8020f8e:	4604      	mov	r4, r0
 8020f90:	4608      	mov	r0, r1
 8020f92:	4611      	mov	r1, r2
 8020f94:	602b      	str	r3, [r5, #0]
 8020f96:	f7e6 ff94 	bl	8007ec2 <_fstat>
 8020f9a:	1c43      	adds	r3, r0, #1
 8020f9c:	d102      	bne.n	8020fa4 <_fstat_r+0x1c>
 8020f9e:	682b      	ldr	r3, [r5, #0]
 8020fa0:	b103      	cbz	r3, 8020fa4 <_fstat_r+0x1c>
 8020fa2:	6023      	str	r3, [r4, #0]
 8020fa4:	bd38      	pop	{r3, r4, r5, pc}
 8020fa6:	bf00      	nop
 8020fa8:	20019d44 	.word	0x20019d44

08020fac <_isatty_r>:
 8020fac:	b538      	push	{r3, r4, r5, lr}
 8020fae:	4d06      	ldr	r5, [pc, #24]	; (8020fc8 <_isatty_r+0x1c>)
 8020fb0:	2300      	movs	r3, #0
 8020fb2:	4604      	mov	r4, r0
 8020fb4:	4608      	mov	r0, r1
 8020fb6:	602b      	str	r3, [r5, #0]
 8020fb8:	f7e6 ff93 	bl	8007ee2 <_isatty>
 8020fbc:	1c43      	adds	r3, r0, #1
 8020fbe:	d102      	bne.n	8020fc6 <_isatty_r+0x1a>
 8020fc0:	682b      	ldr	r3, [r5, #0]
 8020fc2:	b103      	cbz	r3, 8020fc6 <_isatty_r+0x1a>
 8020fc4:	6023      	str	r3, [r4, #0]
 8020fc6:	bd38      	pop	{r3, r4, r5, pc}
 8020fc8:	20019d44 	.word	0x20019d44

08020fcc <_malloc_usable_size_r>:
 8020fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020fd0:	1f18      	subs	r0, r3, #4
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	bfbc      	itt	lt
 8020fd6:	580b      	ldrlt	r3, [r1, r0]
 8020fd8:	18c0      	addlt	r0, r0, r3
 8020fda:	4770      	bx	lr

08020fdc <_raise_r>:
 8020fdc:	291f      	cmp	r1, #31
 8020fde:	b538      	push	{r3, r4, r5, lr}
 8020fe0:	4604      	mov	r4, r0
 8020fe2:	460d      	mov	r5, r1
 8020fe4:	d904      	bls.n	8020ff0 <_raise_r+0x14>
 8020fe6:	2316      	movs	r3, #22
 8020fe8:	6003      	str	r3, [r0, #0]
 8020fea:	f04f 30ff 	mov.w	r0, #4294967295
 8020fee:	bd38      	pop	{r3, r4, r5, pc}
 8020ff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020ff2:	b112      	cbz	r2, 8020ffa <_raise_r+0x1e>
 8020ff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020ff8:	b94b      	cbnz	r3, 802100e <_raise_r+0x32>
 8020ffa:	4620      	mov	r0, r4
 8020ffc:	f000 f830 	bl	8021060 <_getpid_r>
 8021000:	462a      	mov	r2, r5
 8021002:	4601      	mov	r1, r0
 8021004:	4620      	mov	r0, r4
 8021006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802100a:	f000 b817 	b.w	802103c <_kill_r>
 802100e:	2b01      	cmp	r3, #1
 8021010:	d00a      	beq.n	8021028 <_raise_r+0x4c>
 8021012:	1c59      	adds	r1, r3, #1
 8021014:	d103      	bne.n	802101e <_raise_r+0x42>
 8021016:	2316      	movs	r3, #22
 8021018:	6003      	str	r3, [r0, #0]
 802101a:	2001      	movs	r0, #1
 802101c:	e7e7      	b.n	8020fee <_raise_r+0x12>
 802101e:	2400      	movs	r4, #0
 8021020:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021024:	4628      	mov	r0, r5
 8021026:	4798      	blx	r3
 8021028:	2000      	movs	r0, #0
 802102a:	e7e0      	b.n	8020fee <_raise_r+0x12>

0802102c <raise>:
 802102c:	4b02      	ldr	r3, [pc, #8]	; (8021038 <raise+0xc>)
 802102e:	4601      	mov	r1, r0
 8021030:	6818      	ldr	r0, [r3, #0]
 8021032:	f7ff bfd3 	b.w	8020fdc <_raise_r>
 8021036:	bf00      	nop
 8021038:	2000009c 	.word	0x2000009c

0802103c <_kill_r>:
 802103c:	b538      	push	{r3, r4, r5, lr}
 802103e:	4d07      	ldr	r5, [pc, #28]	; (802105c <_kill_r+0x20>)
 8021040:	2300      	movs	r3, #0
 8021042:	4604      	mov	r4, r0
 8021044:	4608      	mov	r0, r1
 8021046:	4611      	mov	r1, r2
 8021048:	602b      	str	r3, [r5, #0]
 802104a:	f7e6 fedb 	bl	8007e04 <_kill>
 802104e:	1c43      	adds	r3, r0, #1
 8021050:	d102      	bne.n	8021058 <_kill_r+0x1c>
 8021052:	682b      	ldr	r3, [r5, #0]
 8021054:	b103      	cbz	r3, 8021058 <_kill_r+0x1c>
 8021056:	6023      	str	r3, [r4, #0]
 8021058:	bd38      	pop	{r3, r4, r5, pc}
 802105a:	bf00      	nop
 802105c:	20019d44 	.word	0x20019d44

08021060 <_getpid_r>:
 8021060:	f7e6 bec8 	b.w	8007df4 <_getpid>

08021064 <_init>:
 8021064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021066:	bf00      	nop
 8021068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802106a:	bc08      	pop	{r3}
 802106c:	469e      	mov	lr, r3
 802106e:	4770      	bx	lr

08021070 <_fini>:
 8021070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021072:	bf00      	nop
 8021074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021076:	bc08      	pop	{r3}
 8021078:	469e      	mov	lr, r3
 802107a:	4770      	bx	lr

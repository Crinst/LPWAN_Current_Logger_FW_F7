
DP_STM32F767VIT_LQFP100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fff4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003518  080201f8  080201f8  000301f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023710  08023710  0004026c  2**0
                  CONTENTS
  4 .ARM          00000008  08023710  08023710  00033710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023718  08023718  0004026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023718  08023718  00033718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802371c  0802371c  0003371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08023720  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019acc  20000270  0802398c  00040270  2**3
                  ALLOC
 10 ._user_heap_stack 00024004  20019d3c  0802398c  00049d3c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000c3a50  00000000  00000000  0004029a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009b15  00000000  00000000  00103cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00004a08  00000000  00000000  0010d800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004598  00000000  00000000  00112208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036c75  00000000  00000000  001167a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00036da4  00000000  00000000  0014d415  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00131969  00000000  00000000  001841b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002b5b22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014628  00000000  00000000  002b5ba0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000270 	.word	0x20000270
 800021c:	00000000 	.word	0x00000000
 8000220:	080201dc 	.word	0x080201dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000274 	.word	0x20000274
 800023c:	080201dc 	.word	0x080201dc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800044e:	f1a4 0401 	sub.w	r4, r4, #1
 8000452:	d1e9      	bne.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b99a 	b.w	80009d4 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f82e 	bl	8000708 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80006f8 <__aeabi_d2ulz+0x40>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000700 <__aeabi_d2ulz+0x48>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	f84d bd04 	str.w	fp, [sp, #-4]!
 80006d0:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d4:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d8:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80006dc:	f04f 0b00 	mov.w	fp, #0
 80006e0:	ee17 3a10 	vmov	r3, s14
 80006e4:	ee16 1a10 	vmov	r1, s12
 80006e8:	ea4b 0003 	orr.w	r0, fp, r3
 80006ec:	f85d bb04 	ldr.w	fp, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	4688      	mov	r8, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14b      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000716:	428a      	cmp	r2, r1
 8000718:	4615      	mov	r5, r2
 800071a:	d967      	bls.n	80007ec <__udivmoddi4+0xe4>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0720 	rsb	r7, r2, #32
 8000726:	fa01 f302 	lsl.w	r3, r1, r2
 800072a:	fa20 f707 	lsr.w	r7, r0, r7
 800072e:	4095      	lsls	r5, r2
 8000730:	ea47 0803 	orr.w	r8, r7, r3
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000740:	fa1f fc85 	uxth.w	ip, r5
 8000744:	fb0e 8817 	mls	r8, lr, r7, r8
 8000748:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074c:	fb07 f10c 	mul.w	r1, r7, ip
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18eb      	adds	r3, r5, r3
 8000756:	f107 30ff 	add.w	r0, r7, #4294967295
 800075a:	f080 811b 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8118 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000764:	3f02      	subs	r7, #2
 8000766:	442b      	add	r3, r5
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000770:	fb0e 3310 	mls	r3, lr, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fc0c 	mul.w	ip, r0, ip
 800077c:	45a4      	cmp	ip, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	192c      	adds	r4, r5, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8107 	bcs.w	8000998 <__udivmoddi4+0x290>
 800078a:	45a4      	cmp	ip, r4
 800078c:	f240 8104 	bls.w	8000998 <__udivmoddi4+0x290>
 8000790:	3802      	subs	r0, #2
 8000792:	442c      	add	r4, r5
 8000794:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000798:	eba4 040c 	sub.w	r4, r4, ip
 800079c:	2700      	movs	r7, #0
 800079e:	b11e      	cbz	r6, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c6 4300 	strd	r4, r3, [r6]
 80007a8:	4639      	mov	r1, r7
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0xbe>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80eb 	beq.w	800098e <__udivmoddi4+0x286>
 80007b8:	2700      	movs	r7, #0
 80007ba:	e9c6 0100 	strd	r0, r1, [r6]
 80007be:	4638      	mov	r0, r7
 80007c0:	4639      	mov	r1, r7
 80007c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c6:	fab3 f783 	clz	r7, r3
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d147      	bne.n	800085e <__udivmoddi4+0x156>
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d302      	bcc.n	80007d8 <__udivmoddi4+0xd0>
 80007d2:	4282      	cmp	r2, r0
 80007d4:	f200 80fa 	bhi.w	80009cc <__udivmoddi4+0x2c4>
 80007d8:	1a84      	subs	r4, r0, r2
 80007da:	eb61 0303 	sbc.w	r3, r1, r3
 80007de:	2001      	movs	r0, #1
 80007e0:	4698      	mov	r8, r3
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d0e0      	beq.n	80007a8 <__udivmoddi4+0xa0>
 80007e6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ea:	e7dd      	b.n	80007a8 <__udivmoddi4+0xa0>
 80007ec:	b902      	cbnz	r2, 80007f0 <__udivmoddi4+0xe8>
 80007ee:	deff      	udf	#255	; 0xff
 80007f0:	fab2 f282 	clz	r2, r2
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	f040 808f 	bne.w	8000918 <__udivmoddi4+0x210>
 80007fa:	1b49      	subs	r1, r1, r5
 80007fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000800:	fa1f f885 	uxth.w	r8, r5
 8000804:	2701      	movs	r7, #1
 8000806:	fbb1 fcfe 	udiv	ip, r1, lr
 800080a:	0c23      	lsrs	r3, r4, #16
 800080c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000810:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000814:	fb08 f10c 	mul.w	r1, r8, ip
 8000818:	4299      	cmp	r1, r3
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x124>
 800081c:	18eb      	adds	r3, r5, r3
 800081e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4299      	cmp	r1, r3
 8000826:	f200 80cd 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 800082a:	4684      	mov	ip, r0
 800082c:	1a59      	subs	r1, r3, r1
 800082e:	b2a3      	uxth	r3, r4
 8000830:	fbb1 f0fe 	udiv	r0, r1, lr
 8000834:	fb0e 1410 	mls	r4, lr, r0, r1
 8000838:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800083c:	fb08 f800 	mul.w	r8, r8, r0
 8000840:	45a0      	cmp	r8, r4
 8000842:	d907      	bls.n	8000854 <__udivmoddi4+0x14c>
 8000844:	192c      	adds	r4, r5, r4
 8000846:	f100 33ff 	add.w	r3, r0, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x14a>
 800084c:	45a0      	cmp	r8, r4
 800084e:	f200 80b6 	bhi.w	80009be <__udivmoddi4+0x2b6>
 8000852:	4618      	mov	r0, r3
 8000854:	eba4 0408 	sub.w	r4, r4, r8
 8000858:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800085c:	e79f      	b.n	800079e <__udivmoddi4+0x96>
 800085e:	f1c7 0c20 	rsb	ip, r7, #32
 8000862:	40bb      	lsls	r3, r7
 8000864:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000868:	ea4e 0e03 	orr.w	lr, lr, r3
 800086c:	fa01 f407 	lsl.w	r4, r1, r7
 8000870:	fa20 f50c 	lsr.w	r5, r0, ip
 8000874:	fa21 f30c 	lsr.w	r3, r1, ip
 8000878:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800087c:	4325      	orrs	r5, r4
 800087e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000882:	0c2c      	lsrs	r4, r5, #16
 8000884:	fb08 3319 	mls	r3, r8, r9, r3
 8000888:	fa1f fa8e 	uxth.w	sl, lr
 800088c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000890:	fb09 f40a 	mul.w	r4, r9, sl
 8000894:	429c      	cmp	r4, r3
 8000896:	fa02 f207 	lsl.w	r2, r2, r7
 800089a:	fa00 f107 	lsl.w	r1, r0, r7
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1e 0303 	adds.w	r3, lr, r3
 80008a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80008a8:	f080 8087 	bcs.w	80009ba <__udivmoddi4+0x2b2>
 80008ac:	429c      	cmp	r4, r3
 80008ae:	f240 8084 	bls.w	80009ba <__udivmoddi4+0x2b2>
 80008b2:	f1a9 0902 	sub.w	r9, r9, #2
 80008b6:	4473      	add	r3, lr
 80008b8:	1b1b      	subs	r3, r3, r4
 80008ba:	b2ad      	uxth	r5, r5
 80008bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c0:	fb08 3310 	mls	r3, r8, r0, r3
 80008c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008cc:	45a2      	cmp	sl, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1e 0404 	adds.w	r4, lr, r4
 80008d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008d8:	d26b      	bcs.n	80009b2 <__udivmoddi4+0x2aa>
 80008da:	45a2      	cmp	sl, r4
 80008dc:	d969      	bls.n	80009b2 <__udivmoddi4+0x2aa>
 80008de:	3802      	subs	r0, #2
 80008e0:	4474      	add	r4, lr
 80008e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008e6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ea:	eba4 040a 	sub.w	r4, r4, sl
 80008ee:	454c      	cmp	r4, r9
 80008f0:	46c2      	mov	sl, r8
 80008f2:	464b      	mov	r3, r9
 80008f4:	d354      	bcc.n	80009a0 <__udivmoddi4+0x298>
 80008f6:	d051      	beq.n	800099c <__udivmoddi4+0x294>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d069      	beq.n	80009d0 <__udivmoddi4+0x2c8>
 80008fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000900:	eb64 0403 	sbc.w	r4, r4, r3
 8000904:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000908:	40fd      	lsrs	r5, r7
 800090a:	40fc      	lsrs	r4, r7
 800090c:	ea4c 0505 	orr.w	r5, ip, r5
 8000910:	e9c6 5400 	strd	r5, r4, [r6]
 8000914:	2700      	movs	r7, #0
 8000916:	e747      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000918:	f1c2 0320 	rsb	r3, r2, #32
 800091c:	fa20 f703 	lsr.w	r7, r0, r3
 8000920:	4095      	lsls	r5, r2
 8000922:	fa01 f002 	lsl.w	r0, r1, r2
 8000926:	fa21 f303 	lsr.w	r3, r1, r3
 800092a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800092e:	4338      	orrs	r0, r7
 8000930:	0c01      	lsrs	r1, r0, #16
 8000932:	fbb3 f7fe 	udiv	r7, r3, lr
 8000936:	fa1f f885 	uxth.w	r8, r5
 800093a:	fb0e 3317 	mls	r3, lr, r7, r3
 800093e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000942:	fb07 f308 	mul.w	r3, r7, r8
 8000946:	428b      	cmp	r3, r1
 8000948:	fa04 f402 	lsl.w	r4, r4, r2
 800094c:	d907      	bls.n	800095e <__udivmoddi4+0x256>
 800094e:	1869      	adds	r1, r5, r1
 8000950:	f107 3cff 	add.w	ip, r7, #4294967295
 8000954:	d22f      	bcs.n	80009b6 <__udivmoddi4+0x2ae>
 8000956:	428b      	cmp	r3, r1
 8000958:	d92d      	bls.n	80009b6 <__udivmoddi4+0x2ae>
 800095a:	3f02      	subs	r7, #2
 800095c:	4429      	add	r1, r5
 800095e:	1acb      	subs	r3, r1, r3
 8000960:	b281      	uxth	r1, r0
 8000962:	fbb3 f0fe 	udiv	r0, r3, lr
 8000966:	fb0e 3310 	mls	r3, lr, r0, r3
 800096a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800096e:	fb00 f308 	mul.w	r3, r0, r8
 8000972:	428b      	cmp	r3, r1
 8000974:	d907      	bls.n	8000986 <__udivmoddi4+0x27e>
 8000976:	1869      	adds	r1, r5, r1
 8000978:	f100 3cff 	add.w	ip, r0, #4294967295
 800097c:	d217      	bcs.n	80009ae <__udivmoddi4+0x2a6>
 800097e:	428b      	cmp	r3, r1
 8000980:	d915      	bls.n	80009ae <__udivmoddi4+0x2a6>
 8000982:	3802      	subs	r0, #2
 8000984:	4429      	add	r1, r5
 8000986:	1ac9      	subs	r1, r1, r3
 8000988:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800098c:	e73b      	b.n	8000806 <__udivmoddi4+0xfe>
 800098e:	4637      	mov	r7, r6
 8000990:	4630      	mov	r0, r6
 8000992:	e709      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000994:	4607      	mov	r7, r0
 8000996:	e6e7      	b.n	8000768 <__udivmoddi4+0x60>
 8000998:	4618      	mov	r0, r3
 800099a:	e6fb      	b.n	8000794 <__udivmoddi4+0x8c>
 800099c:	4541      	cmp	r1, r8
 800099e:	d2ab      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80009a4:	eb69 020e 	sbc.w	r2, r9, lr
 80009a8:	3801      	subs	r0, #1
 80009aa:	4613      	mov	r3, r2
 80009ac:	e7a4      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009ae:	4660      	mov	r0, ip
 80009b0:	e7e9      	b.n	8000986 <__udivmoddi4+0x27e>
 80009b2:	4618      	mov	r0, r3
 80009b4:	e795      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b6:	4667      	mov	r7, ip
 80009b8:	e7d1      	b.n	800095e <__udivmoddi4+0x256>
 80009ba:	4681      	mov	r9, r0
 80009bc:	e77c      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009be:	3802      	subs	r0, #2
 80009c0:	442c      	add	r4, r5
 80009c2:	e747      	b.n	8000854 <__udivmoddi4+0x14c>
 80009c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c8:	442b      	add	r3, r5
 80009ca:	e72f      	b.n	800082c <__udivmoddi4+0x124>
 80009cc:	4638      	mov	r0, r7
 80009ce:	e708      	b.n	80007e2 <__udivmoddi4+0xda>
 80009d0:	4637      	mov	r7, r6
 80009d2:	e6e9      	b.n	80007a8 <__udivmoddi4+0xa0>

080009d4 <__aeabi_idiv0>:
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <Send_Uart>:
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff fc37 	bl	8000254 <strlen>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <Send_Uart+0x28>)
 80009f2:	f010 fb2f 	bl	8011054 <HAL_UART_Transmit>
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20011dec 	.word	0x20011dec

08000a04 <Mount_SD>:
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <Mount_SD+0x38>)
 8000a12:	f01b fd8d 	bl	801c530 <f_mount>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <Mount_SD+0x3c>)
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <Mount_SD+0x3c>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d003      	beq.n	8000a2e <Mount_SD+0x2a>
 8000a26:	4807      	ldr	r0, [pc, #28]	; (8000a44 <Mount_SD+0x40>)
 8000a28:	f7ff ffd6 	bl	80009d8 <Send_Uart>
 8000a2c:	e002      	b.n	8000a34 <Mount_SD+0x30>
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <Mount_SD+0x44>)
 8000a30:	f7ff ffd2 	bl	80009d8 <Send_Uart>
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20001f78 	.word	0x20001f78
 8000a40:	20001e50 	.word	0x20001e50
 8000a44:	080201f8 	.word	0x080201f8
 8000a48:	0802021c 	.word	0x0802021c

08000a4c <Unmount_SD>:
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	2201      	movs	r2, #1
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f01b fd69 	bl	801c530 <f_mount>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <Unmount_SD+0x38>)
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <Unmount_SD+0x38>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <Unmount_SD+0x2a>
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <Unmount_SD+0x3c>)
 8000a70:	f7ff ffb2 	bl	80009d8 <Send_Uart>
 8000a74:	e002      	b.n	8000a7c <Unmount_SD+0x30>
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <Unmount_SD+0x40>)
 8000a78:	f7ff ffae 	bl	80009d8 <Send_Uart>
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20001e50 	.word	0x20001e50
 8000a88:	08020240 	.word	0x08020240
 8000a8c:	08020268 	.word	0x08020268

08000a90 <Format_SD>:
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	2014      	movs	r0, #20
 8000a98:	f01d fb48 	bl	801e12c <malloc>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8000aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa2:	4929      	ldr	r1, [pc, #164]	; (8000b48 <Format_SD+0xb8>)
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	8013      	strh	r3, [r2, #0]
 8000aac:	463b      	mov	r3, r7
 8000aae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f01c fbaf 	bl	801d214 <f_opendir>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <Format_SD+0xbc>)
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <Format_SD+0xbc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d136      	bne.n	8000b34 <Format_SD+0xa4>
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4921      	ldr	r1, [pc, #132]	; (8000b50 <Format_SD+0xc0>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f01c fc3b 	bl	801d346 <f_readdir>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Format_SD+0xbc>)
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <Format_SD+0xbc>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d125      	bne.n	8000b2c <Format_SD+0x9c>
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <Format_SD+0xc0>)
 8000ae2:	7d9b      	ldrb	r3, [r3, #22]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d021      	beq.n	8000b2c <Format_SD+0x9c>
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <Format_SD+0xc0>)
 8000aea:	7a1b      	ldrb	r3, [r3, #8]
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d011      	beq.n	8000b18 <Format_SD+0x88>
 8000af4:	4917      	ldr	r1, [pc, #92]	; (8000b54 <Format_SD+0xc4>)
 8000af6:	4818      	ldr	r0, [pc, #96]	; (8000b58 <Format_SD+0xc8>)
 8000af8:	f7ff fba2 	bl	8000240 <strcmp>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d012      	beq.n	8000b28 <Format_SD+0x98>
 8000b02:	4814      	ldr	r0, [pc, #80]	; (8000b54 <Format_SD+0xc4>)
 8000b04:	f01c fd4a 	bl	801d59c <f_unlink>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <Format_SD+0xbc>)
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <Format_SD+0xbc>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b07      	cmp	r3, #7
 8000b16:	e7d6      	b.n	8000ac6 <Format_SD+0x36>
 8000b18:	480e      	ldr	r0, [pc, #56]	; (8000b54 <Format_SD+0xc4>)
 8000b1a:	f01c fd3f 	bl	801d59c <f_unlink>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <Format_SD+0xbc>)
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e7ce      	b.n	8000ac6 <Format_SD+0x36>
 8000b28:	bf00      	nop
 8000b2a:	e7cc      	b.n	8000ac6 <Format_SD+0x36>
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f01c fbe3 	bl	801d2fa <f_closedir>
 8000b34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b36:	f01d fb01 	bl	801e13c <free>
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <Format_SD+0xbc>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3738      	adds	r7, #56	; 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	080202b8 	.word	0x080202b8
 8000b4c:	20001e50 	.word	0x20001e50
 8000b50:	20001e5c 	.word	0x20001e5c
 8000b54:	20001e72 	.word	0x20001e72
 8000b58:	0802028c 	.word	0x0802028c

08000b5c <Write_File>:
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	494d      	ldr	r1, [pc, #308]	; (8000c9c <Write_File+0x140>)
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f01c fc29 	bl	801d3c0 <f_stat>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <Write_File+0x144>)
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <Write_File+0x144>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d012      	beq.n	8000ba4 <Write_File+0x48>
 8000b7e:	2064      	movs	r0, #100	; 0x64
 8000b80:	f01d fad4 	bl	801e12c <malloc>
 8000b84:	4603      	mov	r3, r0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4946      	ldr	r1, [pc, #280]	; (8000ca4 <Write_File+0x148>)
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f01d ffe3 	bl	801eb58 <siprintf>
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff ff20 	bl	80009d8 <Send_Uart>
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f01d facf 	bl	801e13c <free>
 8000b9e:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <Write_File+0x144>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	e077      	b.n	8000c94 <Write_File+0x138>
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	483f      	ldr	r0, [pc, #252]	; (8000ca8 <Write_File+0x14c>)
 8000baa:	f01b fd07 	bl	801c5bc <f_open>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <Write_File+0x144>)
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <Write_File+0x144>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d015      	beq.n	8000bea <Write_File+0x8e>
 8000bbe:	2064      	movs	r0, #100	; 0x64
 8000bc0:	f01d fab4 	bl	801e12c <malloc>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <Write_File+0x144>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4936      	ldr	r1, [pc, #216]	; (8000cac <Write_File+0x150>)
 8000bd2:	6938      	ldr	r0, [r7, #16]
 8000bd4:	f01d ffc0 	bl	801eb58 <siprintf>
 8000bd8:	6938      	ldr	r0, [r7, #16]
 8000bda:	f7ff fefd 	bl	80009d8 <Send_Uart>
 8000bde:	6938      	ldr	r0, [r7, #16]
 8000be0:	f01d faac 	bl	801e13c <free>
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <Write_File+0x144>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	e054      	b.n	8000c94 <Write_File+0x138>
 8000bea:	6838      	ldr	r0, [r7, #0]
 8000bec:	f7ff fb32 	bl	8000254 <strlen>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <Write_File+0x154>)
 8000bf4:	6839      	ldr	r1, [r7, #0]
 8000bf6:	482c      	ldr	r0, [pc, #176]	; (8000ca8 <Write_File+0x14c>)
 8000bf8:	f01b feac 	bl	801c954 <f_write>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <Write_File+0x144>)
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <Write_File+0x144>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d012      	beq.n	8000c32 <Write_File+0xd6>
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f01d fa8d 	bl	801e12c <malloc>
 8000c12:	4603      	mov	r3, r0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <Write_File+0x144>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4925      	ldr	r1, [pc, #148]	; (8000cb4 <Write_File+0x158>)
 8000c20:	69f8      	ldr	r0, [r7, #28]
 8000c22:	f01d ff99 	bl	801eb58 <siprintf>
 8000c26:	69f8      	ldr	r0, [r7, #28]
 8000c28:	f7ff fed6 	bl	80009d8 <Send_Uart>
 8000c2c:	69f8      	ldr	r0, [r7, #28]
 8000c2e:	f01d fa85 	bl	801e13c <free>
 8000c32:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <Write_File+0x14c>)
 8000c34:	f01c f8a0 	bl	801cd78 <f_close>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <Write_File+0x144>)
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <Write_File+0x144>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d013      	beq.n	8000c70 <Write_File+0x114>
 8000c48:	2064      	movs	r0, #100	; 0x64
 8000c4a:	f01d fa6f 	bl	801e12c <malloc>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <Write_File+0x144>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4917      	ldr	r1, [pc, #92]	; (8000cb8 <Write_File+0x15c>)
 8000c5c:	6978      	ldr	r0, [r7, #20]
 8000c5e:	f01d ff7b 	bl	801eb58 <siprintf>
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff feb8 	bl	80009d8 <Send_Uart>
 8000c68:	6978      	ldr	r0, [r7, #20]
 8000c6a:	f01d fa67 	bl	801e13c <free>
 8000c6e:	e00f      	b.n	8000c90 <Write_File+0x134>
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f01d fa5b 	bl	801e12c <malloc>
 8000c76:	4603      	mov	r3, r0
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	490f      	ldr	r1, [pc, #60]	; (8000cbc <Write_File+0x160>)
 8000c7e:	69b8      	ldr	r0, [r7, #24]
 8000c80:	f01d ff6a 	bl	801eb58 <siprintf>
 8000c84:	69b8      	ldr	r0, [r7, #24]
 8000c86:	f7ff fea7 	bl	80009d8 <Send_Uart>
 8000c8a:	69b8      	ldr	r0, [r7, #24]
 8000c8c:	f01d fa56 	bl	801e13c <free>
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <Write_File+0x144>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20001e5c 	.word	0x20001e5c
 8000ca0:	20001e50 	.word	0x20001e50
 8000ca4:	080202bc 	.word	0x080202bc
 8000ca8:	20000e20 	.word	0x20000e20
 8000cac:	080202dc 	.word	0x080202dc
 8000cb0:	20000e18 	.word	0x20000e18
 8000cb4:	08020304 	.word	0x08020304
 8000cb8:	08020338 	.word	0x08020338
 8000cbc:	08020370 	.word	0x08020370

08000cc0 <Create_File>:
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	4943      	ldr	r1, [pc, #268]	; (8000dd8 <Create_File+0x118>)
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f01c fb78 	bl	801d3c0 <f_stat>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <Create_File+0x11c>)
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <Create_File+0x11c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d112      	bne.n	8000d06 <Create_File+0x46>
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f01d fa23 	bl	801e12c <malloc>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	493c      	ldr	r1, [pc, #240]	; (8000de0 <Create_File+0x120>)
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f01d ff32 	bl	801eb58 <siprintf>
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff fe6f 	bl	80009d8 <Send_Uart>
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f01d fa1e 	bl	801e13c <free>
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <Create_File+0x11c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	e063      	b.n	8000dce <Create_File+0x10e>
 8000d06:	220b      	movs	r2, #11
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4836      	ldr	r0, [pc, #216]	; (8000de4 <Create_File+0x124>)
 8000d0c:	f01b fc56 	bl	801c5bc <f_open>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <Create_File+0x11c>)
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <Create_File+0x11c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d015      	beq.n	8000d4c <Create_File+0x8c>
 8000d20:	2064      	movs	r0, #100	; 0x64
 8000d22:	f01d fa03 	bl	801e12c <malloc>
 8000d26:	4603      	mov	r3, r0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <Create_File+0x11c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	492d      	ldr	r1, [pc, #180]	; (8000de8 <Create_File+0x128>)
 8000d34:	6938      	ldr	r0, [r7, #16]
 8000d36:	f01d ff0f 	bl	801eb58 <siprintf>
 8000d3a:	6938      	ldr	r0, [r7, #16]
 8000d3c:	f7ff fe4c 	bl	80009d8 <Send_Uart>
 8000d40:	6938      	ldr	r0, [r7, #16]
 8000d42:	f01d f9fb 	bl	801e13c <free>
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <Create_File+0x11c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	e040      	b.n	8000dce <Create_File+0x10e>
 8000d4c:	2064      	movs	r0, #100	; 0x64
 8000d4e:	f01d f9ed 	bl	801e12c <malloc>
 8000d52:	4603      	mov	r3, r0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4924      	ldr	r1, [pc, #144]	; (8000dec <Create_File+0x12c>)
 8000d5a:	69f8      	ldr	r0, [r7, #28]
 8000d5c:	f01d fefc 	bl	801eb58 <siprintf>
 8000d60:	69f8      	ldr	r0, [r7, #28]
 8000d62:	f7ff fe39 	bl	80009d8 <Send_Uart>
 8000d66:	69f8      	ldr	r0, [r7, #28]
 8000d68:	f01d f9e8 	bl	801e13c <free>
 8000d6c:	481d      	ldr	r0, [pc, #116]	; (8000de4 <Create_File+0x124>)
 8000d6e:	f01c f803 	bl	801cd78 <f_close>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <Create_File+0x11c>)
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <Create_File+0x11c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d013      	beq.n	8000daa <Create_File+0xea>
 8000d82:	2064      	movs	r0, #100	; 0x64
 8000d84:	f01d f9d2 	bl	801e12c <malloc>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <Create_File+0x11c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4916      	ldr	r1, [pc, #88]	; (8000df0 <Create_File+0x130>)
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f01d fede 	bl	801eb58 <siprintf>
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff fe1b 	bl	80009d8 <Send_Uart>
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f01d f9ca 	bl	801e13c <free>
 8000da8:	e00f      	b.n	8000dca <Create_File+0x10a>
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f01d f9be 	bl	801e12c <malloc>
 8000db0:	4603      	mov	r3, r0
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	490f      	ldr	r1, [pc, #60]	; (8000df4 <Create_File+0x134>)
 8000db8:	69b8      	ldr	r0, [r7, #24]
 8000dba:	f01d fecd 	bl	801eb58 <siprintf>
 8000dbe:	69b8      	ldr	r0, [r7, #24]
 8000dc0:	f7ff fe0a 	bl	80009d8 <Send_Uart>
 8000dc4:	69b8      	ldr	r0, [r7, #24]
 8000dc6:	f01d f9b9 	bl	801e13c <free>
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <Create_File+0x11c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001e5c 	.word	0x20001e5c
 8000ddc:	20001e50 	.word	0x20001e50
 8000de0:	08020434 	.word	0x08020434
 8000de4:	20000e20 	.word	0x20000e20
 8000de8:	0802046c 	.word	0x0802046c
 8000dec:	08020494 	.word	0x08020494
 8000df0:	080204d4 	.word	0x080204d4
 8000df4:	08020414 	.word	0x08020414

08000df8 <SELECT>:
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <SELECT+0x14>)
 8000e02:	f008 fd27 	bl	8009854 <HAL_GPIO_WritePin>
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <DESELECT>:
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	2201      	movs	r2, #1
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <DESELECT+0x14>)
 8000e1a:	f008 fd1b 	bl	8009854 <HAL_GPIO_WritePin>
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <SPI_TxByte>:
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	bf00      	nop
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <SPI_TxByte+0x30>)
 8000e36:	f00f fa3b 	bl	80102b0 <HAL_SPI_GetState>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d1f9      	bne.n	8000e34 <SPI_TxByte+0xc>
 8000e40:	1df9      	adds	r1, r7, #7
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	2201      	movs	r2, #1
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <SPI_TxByte+0x30>)
 8000e4a:	f00e fb53 	bl	800f4f4 <HAL_SPI_Transmit>
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200059bc 	.word	0x200059bc

08000e5c <SPI_RxByte>:
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	23ff      	movs	r3, #255	; 0xff
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	2300      	movs	r3, #0
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	bf00      	nop
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <SPI_RxByte+0x38>)
 8000e6e:	f00f fa1f 	bl	80102b0 <HAL_SPI_GetState>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d1f9      	bne.n	8000e6c <SPI_RxByte+0x10>
 8000e78:	1dba      	adds	r2, r7, #6
 8000e7a:	1df9      	adds	r1, r7, #7
 8000e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <SPI_RxByte+0x38>)
 8000e86:	f00e fc9b 	bl	800f7c0 <HAL_SPI_TransmitReceive>
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200059bc 	.word	0x200059bc

08000e98 <SPI_RxBytePtr>:
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	f7ff ffdc 	bl	8000e5c <SPI_RxByte>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <SD_ReadyWait>:
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <SD_ReadyWait+0x34>)
 8000ebc:	2232      	movs	r2, #50	; 0x32
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	f7ff ffcc 	bl	8000e5c <SPI_RxByte>
 8000ec4:	f7ff ffca 	bl	8000e5c <SPI_RxByte>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2bff      	cmp	r3, #255	; 0xff
 8000ed0:	d004      	beq.n	8000edc <SD_ReadyWait+0x28>
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SD_ReadyWait+0x34>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1f3      	bne.n	8000ec4 <SD_ReadyWait+0x10>
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20014951 	.word	0x20014951

08000eec <SD_PowerOn>:
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	f7ff ff8a 	bl	8000e10 <DESELECT>
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e005      	b.n	8000f0e <SD_PowerOn+0x22>
 8000f02:	20ff      	movs	r0, #255	; 0xff
 8000f04:	f7ff ff90 	bl	8000e28 <SPI_TxByte>
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b09      	cmp	r3, #9
 8000f12:	ddf6      	ble.n	8000f02 <SD_PowerOn+0x16>
 8000f14:	f7ff ff70 	bl	8000df8 <SELECT>
 8000f18:	2340      	movs	r3, #64	; 0x40
 8000f1a:	713b      	strb	r3, [r7, #4]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	717b      	strb	r3, [r7, #5]
 8000f20:	2300      	movs	r3, #0
 8000f22:	71bb      	strb	r3, [r7, #6]
 8000f24:	2300      	movs	r3, #0
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	723b      	strb	r3, [r7, #8]
 8000f2c:	2395      	movs	r3, #149	; 0x95
 8000f2e:	727b      	strb	r3, [r7, #9]
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e009      	b.n	8000f4a <SD_PowerOn+0x5e>
 8000f36:	1d3a      	adds	r2, r7, #4
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff72 	bl	8000e28 <SPI_TxByte>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3301      	adds	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2b05      	cmp	r3, #5
 8000f4e:	ddf2      	ble.n	8000f36 <SD_PowerOn+0x4a>
 8000f50:	e002      	b.n	8000f58 <SD_PowerOn+0x6c>
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	f7ff ff80 	bl	8000e5c <SPI_RxByte>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d002      	beq.n	8000f68 <SD_PowerOn+0x7c>
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f4      	bne.n	8000f52 <SD_PowerOn+0x66>
 8000f68:	f7ff ff52 	bl	8000e10 <DESELECT>
 8000f6c:	20ff      	movs	r0, #255	; 0xff
 8000f6e:	f7ff ff5b 	bl	8000e28 <SPI_TxByte>
 8000f72:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <SD_PowerOn+0x94>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000028d 	.word	0x2000028d

08000f84 <SD_PowerOff>:
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <SD_PowerOff+0x14>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	2000028d 	.word	0x2000028d

08000f9c <SD_CheckPower>:
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <SD_CheckPower+0x14>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000028d 	.word	0x2000028d

08000fb4 <SD_RxDataBlock>:
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <SD_RxDataBlock+0x68>)
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	f7ff ff4a 	bl	8000e5c <SPI_RxByte>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2bff      	cmp	r3, #255	; 0xff
 8000fd0:	d104      	bne.n	8000fdc <SD_RxDataBlock+0x28>
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <SD_RxDataBlock+0x68>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f3      	bne.n	8000fc4 <SD_RxDataBlock+0x10>
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2bfe      	cmp	r3, #254	; 0xfe
 8000fe0:	d001      	beq.n	8000fe6 <SD_RxDataBlock+0x32>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e016      	b.n	8001014 <SD_RxDataBlock+0x60>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff53 	bl	8000e98 <SPI_RxBytePtr>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff4d 	bl	8000e98 <SPI_RxBytePtr>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3b02      	subs	r3, #2
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1ed      	bne.n	8000fe6 <SD_RxDataBlock+0x32>
 800100a:	f7ff ff27 	bl	8000e5c <SPI_RxByte>
 800100e:	f7ff ff25 	bl	8000e5c <SPI_RxByte>
 8001012:	2301      	movs	r3, #1
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20014950 	.word	0x20014950

08001020 <SD_TxDataBlock>:
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
 800102c:	2300      	movs	r3, #0
 800102e:	737b      	strb	r3, [r7, #13]
 8001030:	f7ff ff40 	bl	8000eb4 <SD_ReadyWait>
 8001034:	4603      	mov	r3, r0
 8001036:	2bff      	cmp	r3, #255	; 0xff
 8001038:	d001      	beq.n	800103e <SD_TxDataBlock+0x1e>
 800103a:	2300      	movs	r3, #0
 800103c:	e040      	b.n	80010c0 <SD_TxDataBlock+0xa0>
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fef1 	bl	8000e28 <SPI_TxByte>
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	2bfd      	cmp	r3, #253	; 0xfd
 800104a:	d031      	beq.n	80010b0 <SD_TxDataBlock+0x90>
 800104c:	2300      	movs	r3, #0
 800104e:	73bb      	strb	r3, [r7, #14]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fee5 	bl	8000e28 <SPI_TxByte>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fede 	bl	8000e28 <SPI_TxByte>
 800106c:	7bbb      	ldrb	r3, [r7, #14]
 800106e:	3b01      	subs	r3, #1
 8001070:	73bb      	strb	r3, [r7, #14]
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1eb      	bne.n	8001050 <SD_TxDataBlock+0x30>
 8001078:	f7ff fef0 	bl	8000e5c <SPI_RxByte>
 800107c:	f7ff feee 	bl	8000e5c <SPI_RxByte>
 8001080:	e00b      	b.n	800109a <SD_TxDataBlock+0x7a>
 8001082:	f7ff feeb 	bl	8000e5c <SPI_RxByte>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	2b05      	cmp	r3, #5
 8001092:	d006      	beq.n	80010a2 <SD_TxDataBlock+0x82>
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	3301      	adds	r3, #1
 8001098:	737b      	strb	r3, [r7, #13]
 800109a:	7b7b      	ldrb	r3, [r7, #13]
 800109c:	2b40      	cmp	r3, #64	; 0x40
 800109e:	d9f0      	bls.n	8001082 <SD_TxDataBlock+0x62>
 80010a0:	e000      	b.n	80010a4 <SD_TxDataBlock+0x84>
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	f7ff fed9 	bl	8000e5c <SPI_RxByte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0fa      	beq.n	80010a6 <SD_TxDataBlock+0x86>
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d101      	bne.n	80010be <SD_TxDataBlock+0x9e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <SD_TxDataBlock+0xa0>
 80010be:	2300      	movs	r3, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <SD_SendCmd>:
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	f7ff feee 	bl	8000eb4 <SD_ReadyWait>
 80010d8:	4603      	mov	r3, r0
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	d001      	beq.n	80010e2 <SD_SendCmd+0x1a>
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	e040      	b.n	8001164 <SD_SendCmd+0x9c>
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fe9f 	bl	8000e28 <SPI_TxByte>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	0e1b      	lsrs	r3, r3, #24
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fe99 	bl	8000e28 <SPI_TxByte>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	0c1b      	lsrs	r3, r3, #16
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe93 	bl	8000e28 <SPI_TxByte>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fe8d 	bl	8000e28 <SPI_TxByte>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe88 	bl	8000e28 <SPI_TxByte>
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b40      	cmp	r3, #64	; 0x40
 8001120:	d101      	bne.n	8001126 <SD_SendCmd+0x5e>
 8001122:	2395      	movs	r3, #149	; 0x95
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b48      	cmp	r3, #72	; 0x48
 800112a:	d101      	bne.n	8001130 <SD_SendCmd+0x68>
 800112c:	2387      	movs	r3, #135	; 0x87
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fe78 	bl	8000e28 <SPI_TxByte>
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b4c      	cmp	r3, #76	; 0x4c
 800113c:	d101      	bne.n	8001142 <SD_SendCmd+0x7a>
 800113e:	f7ff fe8d 	bl	8000e5c <SPI_RxByte>
 8001142:	230a      	movs	r3, #10
 8001144:	73bb      	strb	r3, [r7, #14]
 8001146:	f7ff fe89 	bl	8000e5c <SPI_RxByte>
 800114a:	4603      	mov	r3, r0
 800114c:	737b      	strb	r3, [r7, #13]
 800114e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001152:	2b00      	cmp	r3, #0
 8001154:	da05      	bge.n	8001162 <SD_SendCmd+0x9a>
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	3b01      	subs	r3, #1
 800115a:	73bb      	strb	r3, [r7, #14]
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f1      	bne.n	8001146 <SD_SendCmd+0x7e>
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <SD_disk_initialize>:
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SD_disk_initialize+0x14>
 800117c:	2301      	movs	r3, #1
 800117e:	e0d5      	b.n	800132c <SD_disk_initialize+0x1c0>
 8001180:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <SD_disk_initialize+0x1c8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <SD_disk_initialize+0x2a>
 800118e:	4b69      	ldr	r3, [pc, #420]	; (8001334 <SD_disk_initialize+0x1c8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	e0ca      	b.n	800132c <SD_disk_initialize+0x1c0>
 8001196:	f7ff fea9 	bl	8000eec <SD_PowerOn>
 800119a:	f7ff fe2d 	bl	8000df8 <SELECT>
 800119e:	2300      	movs	r3, #0
 80011a0:	73bb      	strb	r3, [r7, #14]
 80011a2:	2100      	movs	r1, #0
 80011a4:	2040      	movs	r0, #64	; 0x40
 80011a6:	f7ff ff8f 	bl	80010c8 <SD_SendCmd>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	f040 80a5 	bne.w	80012fc <SD_disk_initialize+0x190>
 80011b2:	4b61      	ldr	r3, [pc, #388]	; (8001338 <SD_disk_initialize+0x1cc>)
 80011b4:	2264      	movs	r2, #100	; 0x64
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011bc:	2048      	movs	r0, #72	; 0x48
 80011be:	f7ff ff83 	bl	80010c8 <SD_SendCmd>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d158      	bne.n	800127a <SD_disk_initialize+0x10e>
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e00c      	b.n	80011e8 <SD_disk_initialize+0x7c>
 80011ce:	7bfc      	ldrb	r4, [r7, #15]
 80011d0:	f7ff fe44 	bl	8000e5c <SPI_RxByte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4423      	add	r3, r4
 80011de:	f803 2c08 	strb.w	r2, [r3, #-8]
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	3301      	adds	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d9ef      	bls.n	80011ce <SD_disk_initialize+0x62>
 80011ee:	7abb      	ldrb	r3, [r7, #10]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	f040 8083 	bne.w	80012fc <SD_disk_initialize+0x190>
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	2baa      	cmp	r3, #170	; 0xaa
 80011fa:	d17f      	bne.n	80012fc <SD_disk_initialize+0x190>
 80011fc:	2100      	movs	r1, #0
 80011fe:	2077      	movs	r0, #119	; 0x77
 8001200:	f7ff ff62 	bl	80010c8 <SD_SendCmd>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d807      	bhi.n	800121a <SD_disk_initialize+0xae>
 800120a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800120e:	2069      	movs	r0, #105	; 0x69
 8001210:	f7ff ff5a 	bl	80010c8 <SD_SendCmd>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <SD_disk_initialize+0xba>
 800121a:	4b47      	ldr	r3, [pc, #284]	; (8001338 <SD_disk_initialize+0x1cc>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1eb      	bne.n	80011fc <SD_disk_initialize+0x90>
 8001224:	e000      	b.n	8001228 <SD_disk_initialize+0xbc>
 8001226:	bf00      	nop
 8001228:	4b43      	ldr	r3, [pc, #268]	; (8001338 <SD_disk_initialize+0x1cc>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d064      	beq.n	80012fc <SD_disk_initialize+0x190>
 8001232:	2100      	movs	r1, #0
 8001234:	207a      	movs	r0, #122	; 0x7a
 8001236:	f7ff ff47 	bl	80010c8 <SD_SendCmd>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d15d      	bne.n	80012fc <SD_disk_initialize+0x190>
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e00c      	b.n	8001260 <SD_disk_initialize+0xf4>
 8001246:	7bfc      	ldrb	r4, [r7, #15]
 8001248:	f7ff fe08 	bl	8000e5c <SPI_RxByte>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4423      	add	r3, r4
 8001256:	f803 2c08 	strb.w	r2, [r3, #-8]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3301      	adds	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d9ef      	bls.n	8001246 <SD_disk_initialize+0xda>
 8001266:	7a3b      	ldrb	r3, [r7, #8]
 8001268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SD_disk_initialize+0x108>
 8001270:	2306      	movs	r3, #6
 8001272:	e000      	b.n	8001276 <SD_disk_initialize+0x10a>
 8001274:	2302      	movs	r3, #2
 8001276:	73bb      	strb	r3, [r7, #14]
 8001278:	e040      	b.n	80012fc <SD_disk_initialize+0x190>
 800127a:	2100      	movs	r1, #0
 800127c:	2077      	movs	r0, #119	; 0x77
 800127e:	f7ff ff23 	bl	80010c8 <SD_SendCmd>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d808      	bhi.n	800129a <SD_disk_initialize+0x12e>
 8001288:	2100      	movs	r1, #0
 800128a:	2069      	movs	r0, #105	; 0x69
 800128c:	f7ff ff1c 	bl	80010c8 <SD_SendCmd>
 8001290:	4603      	mov	r3, r0
 8001292:	2b01      	cmp	r3, #1
 8001294:	d801      	bhi.n	800129a <SD_disk_initialize+0x12e>
 8001296:	2302      	movs	r3, #2
 8001298:	e000      	b.n	800129c <SD_disk_initialize+0x130>
 800129a:	2301      	movs	r3, #1
 800129c:	73bb      	strb	r3, [r7, #14]
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d10e      	bne.n	80012c2 <SD_disk_initialize+0x156>
 80012a4:	2100      	movs	r1, #0
 80012a6:	2077      	movs	r0, #119	; 0x77
 80012a8:	f7ff ff0e 	bl	80010c8 <SD_SendCmd>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d80e      	bhi.n	80012d0 <SD_disk_initialize+0x164>
 80012b2:	2100      	movs	r1, #0
 80012b4:	2069      	movs	r0, #105	; 0x69
 80012b6:	f7ff ff07 	bl	80010c8 <SD_SendCmd>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d107      	bne.n	80012d0 <SD_disk_initialize+0x164>
 80012c0:	e00d      	b.n	80012de <SD_disk_initialize+0x172>
 80012c2:	2100      	movs	r1, #0
 80012c4:	2041      	movs	r0, #65	; 0x41
 80012c6:	f7ff feff 	bl	80010c8 <SD_SendCmd>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <SD_disk_initialize+0x170>
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <SD_disk_initialize+0x1cc>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e1      	bne.n	800129e <SD_disk_initialize+0x132>
 80012da:	e000      	b.n	80012de <SD_disk_initialize+0x172>
 80012dc:	bf00      	nop
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <SD_disk_initialize+0x1cc>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <SD_disk_initialize+0x18c>
 80012e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ec:	2050      	movs	r0, #80	; 0x50
 80012ee:	f7ff feeb 	bl	80010c8 <SD_SendCmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SD_disk_initialize+0x190>
 80012f8:	2300      	movs	r3, #0
 80012fa:	73bb      	strb	r3, [r7, #14]
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <SD_disk_initialize+0x1d0>)
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	7013      	strb	r3, [r2, #0]
 8001302:	f7ff fd85 	bl	8000e10 <DESELECT>
 8001306:	f7ff fda9 	bl	8000e5c <SPI_RxByte>
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <SD_disk_initialize+0x1b6>
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <SD_disk_initialize+0x1c8>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SD_disk_initialize+0x1c8>)
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e001      	b.n	8001326 <SD_disk_initialize+0x1ba>
 8001322:	f7ff fe2f 	bl	8000f84 <SD_PowerOff>
 8001326:	4b03      	ldr	r3, [pc, #12]	; (8001334 <SD_disk_initialize+0x1c8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20014950 	.word	0x20014950
 800133c:	2000028c 	.word	0x2000028c

08001340 <SD_disk_status>:
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SD_disk_status+0x14>
 8001350:	2301      	movs	r3, #1
 8001352:	e002      	b.n	800135a <SD_disk_status+0x1a>
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SD_disk_status+0x28>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000

0800136c <SD_disk_read>:
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <SD_disk_read+0x1c>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <SD_disk_read+0x20>
 8001388:	2304      	movs	r3, #4
 800138a:	e051      	b.n	8001430 <SD_disk_read+0xc4>
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <SD_disk_read+0xcc>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SD_disk_read+0x32>
 800139a:	2303      	movs	r3, #3
 800139c:	e048      	b.n	8001430 <SD_disk_read+0xc4>
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <SD_disk_read+0xd0>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <SD_disk_read+0x44>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	f7ff fd22 	bl	8000df8 <SELECT>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d111      	bne.n	80013de <SD_disk_read+0x72>
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	2051      	movs	r0, #81	; 0x51
 80013be:	f7ff fe83 	bl	80010c8 <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d129      	bne.n	800141c <SD_disk_read+0xb0>
 80013c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013cc:	68b8      	ldr	r0, [r7, #8]
 80013ce:	f7ff fdf1 	bl	8000fb4 <SD_RxDataBlock>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d021      	beq.n	800141c <SD_disk_read+0xb0>
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	e01e      	b.n	800141c <SD_disk_read+0xb0>
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	2052      	movs	r0, #82	; 0x52
 80013e2:	f7ff fe71 	bl	80010c8 <SD_SendCmd>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d117      	bne.n	800141c <SD_disk_read+0xb0>
 80013ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7ff fddf 	bl	8000fb4 <SD_RxDataBlock>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <SD_disk_read+0xa6>
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3b01      	subs	r3, #1
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ed      	bne.n	80013ec <SD_disk_read+0x80>
 8001410:	e000      	b.n	8001414 <SD_disk_read+0xa8>
 8001412:	bf00      	nop
 8001414:	2100      	movs	r1, #0
 8001416:	204c      	movs	r0, #76	; 0x4c
 8001418:	f7ff fe56 	bl	80010c8 <SD_SendCmd>
 800141c:	f7ff fcf8 	bl	8000e10 <DESELECT>
 8001420:	f7ff fd1c 	bl	8000e5c <SPI_RxByte>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf14      	ite	ne
 800142a:	2301      	movne	r3, #1
 800142c:	2300      	moveq	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	2000028c 	.word	0x2000028c

08001440 <SD_disk_write>:
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <SD_disk_write+0x1c>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <SD_disk_write+0x20>
 800145c:	2304      	movs	r3, #4
 800145e:	e06b      	b.n	8001538 <SD_disk_write+0xf8>
 8001460:	4b37      	ldr	r3, [pc, #220]	; (8001540 <SD_disk_write+0x100>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SD_disk_write+0x32>
 800146e:	2303      	movs	r3, #3
 8001470:	e062      	b.n	8001538 <SD_disk_write+0xf8>
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <SD_disk_write+0x100>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SD_disk_write+0x44>
 8001480:	2302      	movs	r3, #2
 8001482:	e059      	b.n	8001538 <SD_disk_write+0xf8>
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <SD_disk_write+0x104>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <SD_disk_write+0x56>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	f7ff fcaf 	bl	8000df8 <SELECT>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d110      	bne.n	80014c2 <SD_disk_write+0x82>
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	2058      	movs	r0, #88	; 0x58
 80014a4:	f7ff fe10 	bl	80010c8 <SD_SendCmd>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d13a      	bne.n	8001524 <SD_disk_write+0xe4>
 80014ae:	21fe      	movs	r1, #254	; 0xfe
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f7ff fdb5 	bl	8001020 <SD_TxDataBlock>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d033      	beq.n	8001524 <SD_disk_write+0xe4>
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	e030      	b.n	8001524 <SD_disk_write+0xe4>
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <SD_disk_write+0x104>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <SD_disk_write+0x9e>
 80014ce:	2100      	movs	r1, #0
 80014d0:	2077      	movs	r0, #119	; 0x77
 80014d2:	f7ff fdf9 	bl	80010c8 <SD_SendCmd>
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	2057      	movs	r0, #87	; 0x57
 80014da:	f7ff fdf5 	bl	80010c8 <SD_SendCmd>
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2059      	movs	r0, #89	; 0x59
 80014e2:	f7ff fdf1 	bl	80010c8 <SD_SendCmd>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d11b      	bne.n	8001524 <SD_disk_write+0xe4>
 80014ec:	21fc      	movs	r1, #252	; 0xfc
 80014ee:	68b8      	ldr	r0, [r7, #8]
 80014f0:	f7ff fd96 	bl	8001020 <SD_TxDataBlock>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <SD_disk_write+0xd0>
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3b01      	subs	r3, #1
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <SD_disk_write+0xac>
 800150e:	e000      	b.n	8001512 <SD_disk_write+0xd2>
 8001510:	bf00      	nop
 8001512:	21fd      	movs	r1, #253	; 0xfd
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff fd83 	bl	8001020 <SD_TxDataBlock>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <SD_disk_write+0xe4>
 8001520:	2301      	movs	r3, #1
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	f7ff fc74 	bl	8000e10 <DESELECT>
 8001528:	f7ff fc98 	bl	8000e5c <SPI_RxByte>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	2000028c 	.word	0x2000028c

08001548 <SD_disk_ioctl>:
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b08b      	sub	sp, #44	; 0x2c
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	603a      	str	r2, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	460b      	mov	r3, r1
 8001556:	71bb      	strb	r3, [r7, #6]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	623b      	str	r3, [r7, #32]
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SD_disk_ioctl+0x1e>
 8001562:	2304      	movs	r3, #4
 8001564:	e117      	b.n	8001796 <SD_disk_ioctl+0x24e>
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d126      	bne.n	80015c0 <SD_disk_ioctl+0x78>
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d00e      	beq.n	8001598 <SD_disk_ioctl+0x50>
 800157a:	2b02      	cmp	r3, #2
 800157c:	d012      	beq.n	80015a4 <SD_disk_ioctl+0x5c>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11a      	bne.n	80015b8 <SD_disk_ioctl+0x70>
 8001582:	f7ff fd0b 	bl	8000f9c <SD_CheckPower>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SD_disk_ioctl+0x48>
 800158c:	f7ff fcfa 	bl	8000f84 <SD_PowerOff>
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001596:	e0fc      	b.n	8001792 <SD_disk_ioctl+0x24a>
 8001598:	f7ff fca8 	bl	8000eec <SD_PowerOn>
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015a2:	e0f6      	b.n	8001792 <SD_disk_ioctl+0x24a>
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	1c5c      	adds	r4, r3, #1
 80015a8:	f7ff fcf8 	bl	8000f9c <SD_CheckPower>
 80015ac:	4603      	mov	r3, r0
 80015ae:	7023      	strb	r3, [r4, #0]
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015b6:	e0ec      	b.n	8001792 <SD_disk_ioctl+0x24a>
 80015b8:	2304      	movs	r3, #4
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015be:	e0e8      	b.n	8001792 <SD_disk_ioctl+0x24a>
 80015c0:	4b77      	ldr	r3, [pc, #476]	; (80017a0 <SD_disk_ioctl+0x258>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SD_disk_ioctl+0x8a>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0e1      	b.n	8001796 <SD_disk_ioctl+0x24e>
 80015d2:	f7ff fc11 	bl	8000df8 <SELECT>
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	2b0d      	cmp	r3, #13
 80015da:	f200 80cb 	bhi.w	8001774 <SD_disk_ioctl+0x22c>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <SD_disk_ioctl+0x9c>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080016df 	.word	0x080016df
 80015e8:	0800161d 	.word	0x0800161d
 80015ec:	080016cf 	.word	0x080016cf
 80015f0:	08001775 	.word	0x08001775
 80015f4:	08001775 	.word	0x08001775
 80015f8:	08001775 	.word	0x08001775
 80015fc:	08001775 	.word	0x08001775
 8001600:	08001775 	.word	0x08001775
 8001604:	08001775 	.word	0x08001775
 8001608:	08001775 	.word	0x08001775
 800160c:	08001775 	.word	0x08001775
 8001610:	080016f1 	.word	0x080016f1
 8001614:	08001715 	.word	0x08001715
 8001618:	08001739 	.word	0x08001739
 800161c:	2100      	movs	r1, #0
 800161e:	2049      	movs	r0, #73	; 0x49
 8001620:	f7ff fd52 	bl	80010c8 <SD_SendCmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 80a8 	bne.w	800177c <SD_disk_ioctl+0x234>
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2110      	movs	r1, #16
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fcbe 	bl	8000fb4 <SD_RxDataBlock>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 809e 	beq.w	800177c <SD_disk_ioctl+0x234>
 8001640:	7b3b      	ldrb	r3, [r7, #12]
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d10e      	bne.n	8001668 <SD_disk_ioctl+0x120>
 800164a:	7d7b      	ldrb	r3, [r7, #21]
 800164c:	b29a      	uxth	r2, r3
 800164e:	7d3b      	ldrb	r3, [r7, #20]
 8001650:	b29b      	uxth	r3, r3
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b29b      	uxth	r3, r3
 8001656:	4413      	add	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	3301      	adds	r3, #1
 800165c:	83fb      	strh	r3, [r7, #30]
 800165e:	8bfb      	ldrh	r3, [r7, #30]
 8001660:	029a      	lsls	r2, r3, #10
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e02e      	b.n	80016c6 <SD_disk_ioctl+0x17e>
 8001668:	7c7b      	ldrb	r3, [r7, #17]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	b2da      	uxtb	r2, r3
 8001670:	7dbb      	ldrb	r3, [r7, #22]
 8001672:	09db      	lsrs	r3, r3, #7
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b2da      	uxtb	r2, r3
 800167a:	7d7b      	ldrb	r3, [r7, #21]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0306 	and.w	r3, r3, #6
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4413      	add	r3, r2
 8001688:	b2db      	uxtb	r3, r3
 800168a:	3302      	adds	r3, #2
 800168c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001690:	7d3b      	ldrb	r3, [r7, #20]
 8001692:	099b      	lsrs	r3, r3, #6
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b29a      	uxth	r2, r3
 8001698:	7cfb      	ldrb	r3, [r7, #19]
 800169a:	b29b      	uxth	r3, r3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	7cbb      	ldrb	r3, [r7, #18]
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	83fb      	strh	r3, [r7, #30]
 80016b8:	8bfa      	ldrh	r2, [r7, #30]
 80016ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016be:	3b09      	subs	r3, #9
 80016c0:	409a      	lsls	r2, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016cc:	e056      	b.n	800177c <SD_disk_ioctl+0x234>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d4:	801a      	strh	r2, [r3, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016dc:	e055      	b.n	800178a <SD_disk_ioctl+0x242>
 80016de:	f7ff fbe9 	bl	8000eb4 <SD_ReadyWait>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2bff      	cmp	r3, #255	; 0xff
 80016e6:	d14b      	bne.n	8001780 <SD_disk_ioctl+0x238>
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016ee:	e047      	b.n	8001780 <SD_disk_ioctl+0x238>
 80016f0:	2100      	movs	r1, #0
 80016f2:	2049      	movs	r0, #73	; 0x49
 80016f4:	f7ff fce8 	bl	80010c8 <SD_SendCmd>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d142      	bne.n	8001784 <SD_disk_ioctl+0x23c>
 80016fe:	2110      	movs	r1, #16
 8001700:	6a38      	ldr	r0, [r7, #32]
 8001702:	f7ff fc57 	bl	8000fb4 <SD_RxDataBlock>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d03b      	beq.n	8001784 <SD_disk_ioctl+0x23c>
 800170c:	2300      	movs	r3, #0
 800170e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001712:	e037      	b.n	8001784 <SD_disk_ioctl+0x23c>
 8001714:	2100      	movs	r1, #0
 8001716:	204a      	movs	r0, #74	; 0x4a
 8001718:	f7ff fcd6 	bl	80010c8 <SD_SendCmd>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d132      	bne.n	8001788 <SD_disk_ioctl+0x240>
 8001722:	2110      	movs	r1, #16
 8001724:	6a38      	ldr	r0, [r7, #32]
 8001726:	f7ff fc45 	bl	8000fb4 <SD_RxDataBlock>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02b      	beq.n	8001788 <SD_disk_ioctl+0x240>
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001736:	e027      	b.n	8001788 <SD_disk_ioctl+0x240>
 8001738:	2100      	movs	r1, #0
 800173a:	207a      	movs	r0, #122	; 0x7a
 800173c:	f7ff fcc4 	bl	80010c8 <SD_SendCmd>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <SD_disk_ioctl+0x22c>
 8001746:	2300      	movs	r3, #0
 8001748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800174c:	e00b      	b.n	8001766 <SD_disk_ioctl+0x21e>
 800174e:	6a3c      	ldr	r4, [r7, #32]
 8001750:	1c63      	adds	r3, r4, #1
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	f7ff fb82 	bl	8000e5c <SPI_RxByte>
 8001758:	4603      	mov	r3, r0
 800175a:	7023      	strb	r3, [r4, #0]
 800175c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001760:	3301      	adds	r3, #1
 8001762:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800176a:	2b03      	cmp	r3, #3
 800176c:	d9ef      	bls.n	800174e <SD_disk_ioctl+0x206>
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001774:	2304      	movs	r3, #4
 8001776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800177a:	e006      	b.n	800178a <SD_disk_ioctl+0x242>
 800177c:	bf00      	nop
 800177e:	e004      	b.n	800178a <SD_disk_ioctl+0x242>
 8001780:	bf00      	nop
 8001782:	e002      	b.n	800178a <SD_disk_ioctl+0x242>
 8001784:	bf00      	nop
 8001786:	e000      	b.n	800178a <SD_disk_ioctl+0x242>
 8001788:	bf00      	nop
 800178a:	f7ff fb41 	bl	8000e10 <DESELECT>
 800178e:	f7ff fb65 	bl	8000e5c <SPI_RxByte>
 8001792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001796:	4618      	mov	r0, r3
 8001798:	372c      	adds	r7, #44	; 0x2c
 800179a:	46bd      	mov	sp, r7
 800179c:	bd90      	pop	{r4, r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000000 	.word	0x20000000

080017a4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017ac:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <SCB_EnableICache+0x3c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80017b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <SCB_EnableICache+0x3c>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <SCB_EnableICache+0x3c>)
 80017c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <SCB_EnableDCache+0x7c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017f2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <SCB_EnableDCache+0x7c>)
 80017f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017fc:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0b5b      	lsrs	r3, r3, #13
 8001802:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001806:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001810:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800181a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001820:	490f      	ldr	r1, [pc, #60]	; (8001860 <SCB_EnableDCache+0x7c>)
 8001822:	4313      	orrs	r3, r2
 8001824:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ef      	bne.n	8001812 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	60fa      	str	r2, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e5      	bne.n	8001808 <SCB_EnableDCache+0x24>
 800183c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <SCB_EnableDCache+0x7c>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <SCB_EnableDCache+0x7c>)
 8001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184a:	6153      	str	r3, [r2, #20]
 800184c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001850:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8001876:	2320      	movs	r3, #32
 8001878:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800187a:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800187e:	e00b      	b.n	8001898 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <SCB_CleanDCache_by_Addr+0x50>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4413      	add	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dcf0      	bgt.n	8001880 <SCB_CleanDCache_by_Addr+0x1c>
 800189e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018a2:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80018a6:	bf00      	nop
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <HAL_SPI_TxRxCpltCallback>:
/* USER CODE BEGIN 0 */



//void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

	isWaitingForData = 0;
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]

}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000001 	.word	0x20000001

080018d8 <BSP_SD_WriteCpltCallback>:


void BSP_SD_WriteCpltCallback(void){
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0


	isReadyForNext = 1;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <BSP_SD_WriteCpltCallback+0x14>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]

}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20000002 	.word	0x20000002

080018f0 <HAL_GPIO_EXTI_Callback>:
}*/



// user button instrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ADC_RSV_PIN) {
			isAdcDone = 1;
	}
	*/

	if( ( __HAL_TIM_GET_COUNTER(&htim5) - previousButtonPress ) >=  buttonPressInterval ){
 80018fa:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x160>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001900:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x164>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	1ad2      	subs	r2, r2, r3
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x168>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	f0c0 808f 	bcc.w	8001a2e <HAL_GPIO_EXTI_Callback+0x13e>
		previousButtonPress += ( ( __HAL_TIM_GET_COUNTER(&htim5) ) - previousButtonPress );
 8001910:	4b4f      	ldr	r3, [pc, #316]	; (8001a50 <HAL_GPIO_EXTI_Callback+0x160>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001916:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x164>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1ad2      	subs	r2, r2, r3
 800191c:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x164>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4413      	add	r3, r2
 8001922:	4a4c      	ldr	r2, [pc, #304]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x164>)
 8001924:	6013      	str	r3, [r2, #0]


	if (GPIO_Pin == BUTTON_MEASURE_PIN) {
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d14e      	bne.n	80019ca <HAL_GPIO_EXTI_Callback+0xda>

		if (isMeasuring == 0) {
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x16c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d125      	bne.n	8001982 <HAL_GPIO_EXTI_Callback+0x92>

			if( settings.powerSourceEnableMode == 1 ){
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x170>)
 8001938:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10a      	bne.n	8001956 <HAL_GPIO_EXTI_Callback+0x66>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	2110      	movs	r1, #16
 8001944:	4847      	ldr	r0, [pc, #284]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x174>)
 8001946:	f007 ff85 	bl	8009854 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001950:	4845      	ldr	r0, [pc, #276]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x178>)
 8001952:	f007 ff7f 	bl	8009854 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 1;
				  //send_uart3("Power Source: ENABLED\n");
			 }

			//isLoggingToConsole = 1;
			if(settings.isTriggerActive == 0)
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x170>)
 8001958:	7b5b      	ldrb	r3, [r3, #13]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <HAL_GPIO_EXTI_Callback+0x74>
				isMeasuring = 1;
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 1;
 8001964:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x17c>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 0;
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x180>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001976:	483f      	ldr	r0, [pc, #252]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x184>)
 8001978:	f007 ff6c 	bl	8009854 <HAL_GPIO_WritePin>
			buzzerOn();
 800197c:	f000 f88a 	bl	8001a94 <buzzerOn>
 8001980:	e023      	b.n	80019ca <HAL_GPIO_EXTI_Callback+0xda>

		} else {


			if( settings.powerSourceEnableMode == 1){
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x170>)
 8001984:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10a      	bne.n	80019a2 <HAL_GPIO_EXTI_Callback+0xb2>
				  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2110      	movs	r1, #16
 8001990:	4834      	ldr	r0, [pc, #208]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x174>)
 8001992:	f007 ff5f 	bl	8009854 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800199c:	4832      	ldr	r0, [pc, #200]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x178>)
 800199e:	f007 ff59 	bl	8009854 <HAL_GPIO_WritePin>
				  settings.powerSourceEnable == 0;
				  //send_uart3("Power Source: DISABLED\n");
			 }

			isMeasuring = 0;
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x16c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
			isTriggered = 0;
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x188>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
			startOfMeasurement = 0;
 80019ae:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x17c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
			endOfMeasurement = 1;
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x180>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c0:	482c      	ldr	r0, [pc, #176]	; (8001a74 <HAL_GPIO_EXTI_Callback+0x184>)
 80019c2:	f007 ff47 	bl	8009854 <HAL_GPIO_WritePin>
			buzzerOff();
 80019c6:	f000 f86c 	bl	8001aa2 <buzzerOff>
		}

	}
	if (GPIO_Pin == ADC_ALARM_PIN && settings.isTriggerActive == 1) {
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	2b04      	cmp	r3, #4
		//isMeasuring = 1;

	}

	if(GPIO_Pin == BUTTON_ENTER_PIN){
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d4:	d103      	bne.n	80019de <HAL_GPIO_EXTI_Callback+0xee>

		isEnterTriggered = 1;
 80019d6:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x18c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
		//isEnterTriggered = 0;

	}


}
 80019dc:	e033      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_ESC_PIN){
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e4:	d103      	bne.n	80019ee <HAL_GPIO_EXTI_Callback+0xfe>
		isEscTriggered = 1;
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x190>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
}
 80019ec:	e02b      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if(GPIO_Pin == BUTTON_UP_PIN){
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f4:	d103      	bne.n	80019fe <HAL_GPIO_EXTI_Callback+0x10e>
		isUpTriggered = 1;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x194>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
}
 80019fc:	e023      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_DOWN_PIN){
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a04:	d103      	bne.n	8001a0e <HAL_GPIO_EXTI_Callback+0x11e>
		isDownTriggered = 1;
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x198>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
}
 8001a0c:	e01b      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_LEFT_PIN){
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a14:	d103      	bne.n	8001a1e <HAL_GPIO_EXTI_Callback+0x12e>
		isLeftTriggered = 1;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
}
 8001a1c:	e013      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
	else if (GPIO_Pin == BUTTON_RIGHT_PIN){
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a24:	d10f      	bne.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
		isRightTriggered = 1;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
}
 8001a2c:	e00b      	b.n	8001a46 <HAL_GPIO_EXTI_Callback+0x156>
		isDownTriggered = 0;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x198>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
		isUpTriggered = 0;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x194>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
		isLeftTriggered = 0;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		isRightTriggered = 0;
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20011f98 	.word	0x20011f98
 8001a54:	2000031c 	.word	0x2000031c
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	20000322 	.word	0x20000322
 8001a60:	20000018 	.word	0x20000018
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	20000320 	.word	0x20000320
 8001a70:	20000321 	.word	0x20000321
 8001a74:	40021000 	.word	0x40021000
 8001a78:	20000314 	.word	0x20000314
 8001a7c:	20000315 	.word	0x20000315
 8001a80:	20000316 	.word	0x20000316
 8001a84:	20000317 	.word	0x20000317
 8001a88:	20000318 	.word	0x20000318
 8001a8c:	20000319 	.word	0x20000319
 8001a90:	2000031a 	.word	0x2000031a

08001a94 <buzzerOn>:

// Enable buzzer
void buzzerOn(){
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
	//htim1.Instance->CCR1 = 75;
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <buzzerOff>:

// Disable buzzer
void buzzerOff(){
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_ConfigChannel(&htim1, &sCo, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	//HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <send_uart>:

/* to send the data to the uart */
void send_uart(char *string) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7fe fbcb 	bl	8000254 <strlen>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	81fb      	strh	r3, [r7, #14]

	SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fecc 	bl	8001864 <SCB_CleanDCache_by_Addr>

	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking

	//isReadyForNext = 0;
	HAL_UART_Transmit_DMA(&huart6, (uint8_t*) string, len);
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <send_uart+0x30>)
 8001ad4:	f00f fb50 	bl	8011178 <HAL_UART_Transmit_DMA>
	//while(isReadyForNext == 0);

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20011dec 	.word	0x20011dec

08001ae4 <send_uart2>:

void send_uart2(char *string) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7fe fbb1 	bl	8000254 <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	81fb      	strh	r3, [r7, #14]

	//HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 10); // transmit in blocking mode
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*) string, len); // transmit in non blocking
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);

	UARTAddToTxBuff2(string, len);
 8001af6:	89fb      	ldrh	r3, [r7, #14]
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f006 f9a4 	bl	8007e48 <UARTAddToTxBuff2>

	// usb test
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t *) string, len);
	//CDC_Transmit_FS((uint8_t*) string, len);
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <send_uart3>:

void send_uart3(char *string) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7fe fb9f 	bl	8000254 <strlen>
 8001b16:	4603      	mov	r3, r0
 8001b18:	81fb      	strh	r3, [r7, #14]

	//SCB_CleanDCache_by_Addr((uint32_t*)&string[0], len);
	//HAL_UART_Transmit_DMA(&huart3, (uint8_t*) string, len);
	//HAL_UART_Transmit_DMA(&huart7, (uint8_t*) string, len);
	UARTAddToTxBuff(string, len);
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f006 f97e 	bl	8007e20 <UARTAddToTxBuff>

}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <bufclear>:
	return i;
}

/* to clear buffer */
void bufclear(void)  // clear buffer
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	e007      	b.n	8001b48 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b38:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <bufclear+0x30>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3301      	adds	r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	dbf3      	blt.n	8001b38 <bufclear+0xc>
	}
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20003040 	.word	0x20003040

08001b60 <microDelay>:

// 1us base delay function
void microDelay(uint16_t delay) {
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <microDelay+0x2c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim4) < delay);
 8001b72:	bf00      	nop
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <microDelay+0x2c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3f9      	bcc.n	8001b74 <microDelay+0x14>

}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20011f58 	.word	0x20011f58

08001b90 <eepromReadEEPROM>:


HAL_StatusTypeDef eepromReadEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	80fb      	strh	r3, [r7, #6]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8001ba8:	e03b      	b.n	8001c22 <eepromReadEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 8001baa:	88ba      	ldrh	r2, [r7, #4]
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 8001bb2:	897b      	ldrh	r3, [r7, #10]
 8001bb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001bb6:	d918      	bls.n	8001bea <eepromReadEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <eepromReadEEPROM+0xac>)
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b299      	uxth	r1, r3
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2232      	movs	r2, #50	; 0x32
 8001bcc:	9202      	str	r2, [sp, #8]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	460a      	mov	r2, r1
 8001bd8:	21a0      	movs	r1, #160	; 0xa0
 8001bda:	f009 ff07 	bl	800b9ec <HAL_I2C_Mem_Read>
 8001bde:	4603      	mov	r3, r0
 8001be0:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 8001be2:	89fb      	ldrh	r3, [r7, #14]
 8001be4:	3340      	adds	r3, #64	; 0x40
 8001be6:	81fb      	strh	r3, [r7, #14]
 8001be8:	e018      	b.n	8001c1c <eepromReadEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Read(i2c_port, EEPROM_ADDRESS,
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <eepromReadEEPROM+0xac>)
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	88fa      	ldrh	r2, [r7, #6]
 8001bf0:	89fb      	ldrh	r3, [r7, #14]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b299      	uxth	r1, r3
 8001bf6:	89fb      	ldrh	r3, [r7, #14]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2232      	movs	r2, #50	; 0x32
 8001bfe:	9202      	str	r2, [sp, #8]
 8001c00:	897a      	ldrh	r2, [r7, #10]
 8001c02:	9201      	str	r2, [sp, #4]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2302      	movs	r3, #2
 8001c08:	460a      	mov	r2, r1
 8001c0a:	21a0      	movs	r1, #160	; 0xa0
 8001c0c:	f009 feee 	bl	800b9ec <HAL_I2C_Mem_Read>
 8001c10:	4603      	mov	r3, r0
 8001c12:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 8001c14:	89fa      	ldrh	r2, [r7, #14]
 8001c16:	897b      	ldrh	r3, [r7, #10]
 8001c18:	4413      	add	r3, r2
 8001c1a:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE / 2);
 8001c1c:	2005      	movs	r0, #5
 8001c1e:	f006 fb1f 	bl	8008260 <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 8001c22:	89fa      	ldrh	r2, [r7, #14]
 8001c24:	88bb      	ldrh	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d202      	bcs.n	8001c30 <eepromReadEEPROM+0xa0>
 8001c2a:	7b7b      	ldrb	r3, [r7, #13]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0bc      	beq.n	8001baa <eepromReadEEPROM+0x1a>
	}
	return Result;
 8001c30:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000010 	.word	0x20000010

08001c40 <eepromWriteEEPROM>:

HAL_StatusTypeDef eepromWriteEEPROM(uint16_t address, uint8_t* MemTarget, uint16_t Size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	80fb      	strh	r3, [r7, #6]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	80bb      	strh	r3, [r7, #4]
	uint16_t Counter = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef Result = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	737b      	strb	r3, [r7, #13]
	while (Counter < Size && Result == HAL_OK)
 8001c58:	e03b      	b.n	8001cd2 <eepromWriteEEPROM+0x92>
	{
		uint16_t Diff = Size - Counter;
 8001c5a:	88ba      	ldrh	r2, [r7, #4]
 8001c5c:	89fb      	ldrh	r3, [r7, #14]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	817b      	strh	r3, [r7, #10]

		if (Diff >= EEPROM_MAXPKT)
 8001c62:	897b      	ldrh	r3, [r7, #10]
 8001c64:	2b3f      	cmp	r3, #63	; 0x3f
 8001c66:	d918      	bls.n	8001c9a <eepromWriteEEPROM+0x5a>
		{
			//Multi-Byte
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <eepromWriteEEPROM+0xac>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	88fa      	ldrh	r2, [r7, #6]
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	4413      	add	r3, r2
 8001c72:	b299      	uxth	r1, r3
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	2232      	movs	r2, #50	; 0x32
 8001c7c:	9202      	str	r2, [sp, #8]
 8001c7e:	2240      	movs	r2, #64	; 0x40
 8001c80:	9201      	str	r2, [sp, #4]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2302      	movs	r3, #2
 8001c86:	460a      	mov	r2, r1
 8001c88:	21a0      	movs	r1, #160	; 0xa0
 8001c8a:	f009 fd9b 	bl	800b7c4 <HAL_I2C_Mem_Write>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], EEPROM_MAXPKT, EEPROM_TIMEOUT);
			Counter += EEPROM_MAXPKT;
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	3340      	adds	r3, #64	; 0x40
 8001c96:	81fb      	strh	r3, [r7, #14]
 8001c98:	e018      	b.n	8001ccc <eepromWriteEEPROM+0x8c>
		}
		else
		{
			//and the remaining ones...low packet size
			Result = HAL_I2C_Mem_Write(i2c_port, EEPROM_ADDRESS,
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <eepromWriteEEPROM+0xac>)
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	88fa      	ldrh	r2, [r7, #6]
 8001ca0:	89fb      	ldrh	r3, [r7, #14]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b299      	uxth	r1, r3
 8001ca6:	89fb      	ldrh	r3, [r7, #14]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	2232      	movs	r2, #50	; 0x32
 8001cae:	9202      	str	r2, [sp, #8]
 8001cb0:	897a      	ldrh	r2, [r7, #10]
 8001cb2:	9201      	str	r2, [sp, #4]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	460a      	mov	r2, r1
 8001cba:	21a0      	movs	r1, #160	; 0xa0
 8001cbc:	f009 fd82 	bl	800b7c4 <HAL_I2C_Mem_Write>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	737b      	strb	r3, [r7, #13]
					address + Counter, I2C_MEMADD_SIZE_16BIT,
					&MemTarget[Counter], Diff, EEPROM_TIMEOUT);
			Counter += Diff;
 8001cc4:	89fa      	ldrh	r2, [r7, #14]
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	4413      	add	r3, r2
 8001cca:	81fb      	strh	r3, [r7, #14]
		}
		HAL_Delay(EEPROM_WRITE);
 8001ccc:	200a      	movs	r0, #10
 8001cce:	f006 fac7 	bl	8008260 <HAL_Delay>
	while (Counter < Size && Result == HAL_OK)
 8001cd2:	89fa      	ldrh	r2, [r7, #14]
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d202      	bcs.n	8001ce0 <eepromWriteEEPROM+0xa0>
 8001cda:	7b7b      	ldrb	r3, [r7, #13]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0bc      	beq.n	8001c5a <eepromWriteEEPROM+0x1a>
	}
	return Result;
 8001ce0:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000010 	.word	0x20000010

08001cf0 <writeEEPROM_AT24>:
	uint8_t isLoggingToEthernet;
	//double ADC_RESOLUTION;

};*/

void writeEEPROM_AT24(){
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	466b      	mov	r3, sp
 8001cf8:	461d      	mov	r5, r3

	uint8_t dataLength = 36;
 8001cfa:	2324      	movs	r3, #36	; 0x24
 8001cfc:	75fb      	strb	r3, [r7, #23]
	uint8_t dataBuffer [dataLength];
 8001cfe:	7df8      	ldrb	r0, [r7, #23]
 8001d00:	4603      	mov	r3, r0
 8001d02:	3b01      	subs	r3, #1
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	b2c1      	uxtb	r1, r0
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	f04f 0400 	mov.w	r4, #0
 8001d14:	00d4      	lsls	r4, r2, #3
 8001d16:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d1a:	00cb      	lsls	r3, r1, #3
 8001d1c:	b2c1      	uxtb	r1, r0
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	f04f 0400 	mov.w	r4, #0
 8001d2a:	00d4      	lsls	r4, r2, #3
 8001d2c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d30:	00cb      	lsls	r3, r1, #3
 8001d32:	4603      	mov	r3, r0
 8001d34:	3307      	adds	r3, #7
 8001d36:	08db      	lsrs	r3, r3, #3
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	ebad 0d03 	sub.w	sp, sp, r3
 8001d3e:	466b      	mov	r3, sp
 8001d40:	3300      	adds	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
	uint64_t buffer64 = 0;
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	f04f 0400 	mov.w	r4, #0
 8001d4c:	e9c7 3400 	strd	r3, r4, [r7]


	dataBuffer[0] = settings.isLoggingToConsole;
 8001d50:	4ba3      	ldr	r3, [pc, #652]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	701a      	strb	r2, [r3, #0]
	dataBuffer[1] = settings.isLoggingToSD;
 8001d58:	4ba1      	ldr	r3, [pc, #644]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d5a:	785a      	ldrb	r2, [r3, #1]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	705a      	strb	r2, [r3, #1]
	dataBuffer[2] = settings.measuringInterval>>24;
 8001d60:	4b9f      	ldr	r3, [pc, #636]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	0e1b      	lsrs	r3, r3, #24
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	709a      	strb	r2, [r3, #2]
	dataBuffer[3] = settings.measuringInterval>>16;
 8001d6c:	4b9c      	ldr	r3, [pc, #624]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	70da      	strb	r2, [r3, #3]
	dataBuffer[4] = settings.measuringInterval>>8;
 8001d78:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	711a      	strb	r2, [r3, #4]
	dataBuffer[5] = settings.measuringInterval;
 8001d84:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	715a      	strb	r2, [r3, #5]
	dataBuffer[6] = settings.samplingInterval>>24;
 8001d8e:	4b94      	ldr	r3, [pc, #592]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0e1b      	lsrs	r3, r3, #24
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	719a      	strb	r2, [r3, #6]
	dataBuffer[7] = settings.samplingInterval>>16;
 8001d9a:	4b91      	ldr	r3, [pc, #580]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	71da      	strb	r2, [r3, #7]
	dataBuffer[8] = settings.samplingInterval>>8;
 8001da6:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	721a      	strb	r2, [r3, #8]
	dataBuffer[9] = settings.samplingInterval;
 8001db2:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	725a      	strb	r2, [r3, #9]
	dataBuffer[10] = settings.isAveraging;
 8001dbc:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001dbe:	7b1a      	ldrb	r2, [r3, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	729a      	strb	r2, [r3, #10]
	dataBuffer[11] = settings.isTriggerActive;
 8001dc4:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001dc6:	7b5a      	ldrb	r2, [r3, #13]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	72da      	strb	r2, [r3, #11]

	buffer64 = settings.triggerLevel*1000000000;
 8001dcc:	4b84      	ldr	r3, [pc, #528]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001dce:	ed93 7b04 	vldr	d7, [r3, #16]
 8001dd2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001fd8 <writeEEPROM_AT24+0x2e8>
 8001dd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dda:	ec51 0b17 	vmov	r0, r1, d7
 8001dde:	f7fe fc6b 	bl	80006b8 <__aeabi_d2ulz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	e9c7 3400 	strd	r3, r4, [r7]
	dataBuffer[12] = buffer64>>56;
 8001dea:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	f04f 0400 	mov.w	r4, #0
 8001df6:	0e13      	lsrs	r3, r2, #24
 8001df8:	2400      	movs	r4, #0
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	731a      	strb	r2, [r3, #12]
	dataBuffer[13] = buffer64>>48;
 8001e00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	f04f 0400 	mov.w	r4, #0
 8001e0c:	0c13      	lsrs	r3, r2, #16
 8001e0e:	2400      	movs	r4, #0
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	735a      	strb	r2, [r3, #13]
	dataBuffer[14] = buffer64>>40;
 8001e16:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	f04f 0400 	mov.w	r4, #0
 8001e22:	0a13      	lsrs	r3, r2, #8
 8001e24:	2400      	movs	r4, #0
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	739a      	strb	r2, [r3, #14]
	dataBuffer[15] = buffer64>>32;
 8001e2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f04f 0400 	mov.w	r4, #0
 8001e38:	0013      	movs	r3, r2
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	73da      	strb	r2, [r3, #15]
	dataBuffer[16] = buffer64>>24;
 8001e42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f04f 0400 	mov.w	r4, #0
 8001e4e:	0e0b      	lsrs	r3, r1, #24
 8001e50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e54:	0e14      	lsrs	r4, r2, #24
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	741a      	strb	r2, [r3, #16]
	dataBuffer[17] = buffer64>>16;
 8001e5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	f04f 0400 	mov.w	r4, #0
 8001e68:	0c0b      	lsrs	r3, r1, #16
 8001e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e6e:	0c14      	lsrs	r4, r2, #16
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	745a      	strb	r2, [r3, #17]
	dataBuffer[18] = buffer64>>8;
 8001e76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	f04f 0400 	mov.w	r4, #0
 8001e82:	0a0b      	lsrs	r3, r1, #8
 8001e84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e88:	0a14      	lsrs	r4, r2, #8
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	749a      	strb	r2, [r3, #18]
	dataBuffer[19] = buffer64;
 8001e90:	783a      	ldrb	r2, [r7, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	74da      	strb	r2, [r3, #19]

	buffer64 = settings.lastOffsetValue*1000000000;
 8001e96:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001e98:	ed93 7b06 	vldr	d7, [r3, #24]
 8001e9c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001fd8 <writeEEPROM_AT24+0x2e8>
 8001ea0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ea4:	ec51 0b17 	vmov	r0, r1, d7
 8001ea8:	f7fe fc06 	bl	80006b8 <__aeabi_d2ulz>
 8001eac:	4603      	mov	r3, r0
 8001eae:	460c      	mov	r4, r1
 8001eb0:	e9c7 3400 	strd	r3, r4, [r7]
	dataBuffer[20] = buffer64>>56;
 8001eb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	f04f 0400 	mov.w	r4, #0
 8001ec0:	0e13      	lsrs	r3, r2, #24
 8001ec2:	2400      	movs	r4, #0
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	751a      	strb	r2, [r3, #20]
	dataBuffer[21] = buffer64>>48;
 8001eca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	f04f 0400 	mov.w	r4, #0
 8001ed6:	0c13      	lsrs	r3, r2, #16
 8001ed8:	2400      	movs	r4, #0
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	755a      	strb	r2, [r3, #21]
	dataBuffer[22] = buffer64>>40;
 8001ee0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	f04f 0400 	mov.w	r4, #0
 8001eec:	0a13      	lsrs	r3, r2, #8
 8001eee:	2400      	movs	r4, #0
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	759a      	strb	r2, [r3, #22]
	dataBuffer[23] = buffer64>>32;
 8001ef6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	f04f 0400 	mov.w	r4, #0
 8001f02:	0013      	movs	r3, r2
 8001f04:	2400      	movs	r4, #0
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	75da      	strb	r2, [r3, #23]
	dataBuffer[24] = buffer64>>24;
 8001f0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	f04f 0400 	mov.w	r4, #0
 8001f18:	0e0b      	lsrs	r3, r1, #24
 8001f1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f1e:	0e14      	lsrs	r4, r2, #24
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	761a      	strb	r2, [r3, #24]
	dataBuffer[25] = buffer64>>16;
 8001f26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	f04f 0400 	mov.w	r4, #0
 8001f32:	0c0b      	lsrs	r3, r1, #16
 8001f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001f38:	0c14      	lsrs	r4, r2, #16
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	765a      	strb	r2, [r3, #25]
	dataBuffer[26] = buffer64>>8;
 8001f40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	f04f 0400 	mov.w	r4, #0
 8001f4c:	0a0b      	lsrs	r3, r1, #8
 8001f4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f52:	0a14      	lsrs	r4, r2, #8
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	769a      	strb	r2, [r3, #26]
	dataBuffer[27] = buffer64;
 8001f5a:	783a      	ldrb	r2, [r7, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	76da      	strb	r2, [r3, #27]

	dataBuffer[28] = settings.powerSourceVoltage>>8;
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f62:	8c1b      	ldrh	r3, [r3, #32]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	771a      	strb	r2, [r3, #28]
	dataBuffer[29] = settings.powerSourceVoltage;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f70:	8c1b      	ldrh	r3, [r3, #32]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	775a      	strb	r2, [r3, #29]

	dataBuffer[30] = settings.powerSourceCurrent>>8;
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	779a      	strb	r2, [r3, #30]
	dataBuffer[31] = settings.powerSourceCurrent;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f88:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	77da      	strb	r2, [r3, #31]

	dataBuffer[32] = settings.powerSourceEnable;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f92:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f883 2020 	strb.w	r2, [r3, #32]
	dataBuffer[33] = settings.powerSourceEnableMode;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001f9e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	dataBuffer[34] = settings.isLoggingToUSB;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001faa:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dataBuffer[35] = settings.isLoggingToEthernet;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <writeEEPROM_AT24+0x2f0>)
 8001fb6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	//at24_HAL_WriteBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, dataLength);
	eepromWriteEEPROM(0, &dataBuffer, dataLength);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	7dfa      	ldrb	r2, [r7, #23]
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fe39 	bl	8001c40 <eepromWriteEEPROM>
 8001fce:	46ad      	mov	sp, r5


}
 8001fd0:	bf00      	nop
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	41cdcd65 	.word	0x41cdcd65
 8001fe0:	20000018 	.word	0x20000018
 8001fe4:	00000000 	.word	0x00000000

08001fe8 <readEEPROM_AT24>:

void readEEPROM_AT24(){
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b097      	sub	sp, #92	; 0x5c
 8001fec:	af00      	add	r7, sp, #0

	uint8_t buffer8 = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t buffer32 = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t buffer16 = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint64_t buffer64 = 0;
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	f04f 0400 	mov.w	r4, #0
 8002006:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	uint8_t dataBuffer [64];

	//at24_HAL_ReadBytes(&hi2c4, i2cDeviceAddress, 0, &dataBuffer, 12);
	eepromReadEEPROM( 0, &dataBuffer, 64);
 800200a:	463b      	mov	r3, r7
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	4619      	mov	r1, r3
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff fdbd 	bl	8001b90 <eepromReadEEPROM>

	settings.isLoggingToConsole = dataBuffer[0];
 8002016:	783a      	ldrb	r2, [r7, #0]
 8002018:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <readEEPROM_AT24+0x200>)
 800201a:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = dataBuffer[1];
 800201c:	787a      	ldrb	r2, [r7, #1]
 800201e:	4b72      	ldr	r3, [pc, #456]	; (80021e8 <readEEPROM_AT24+0x200>)
 8002020:	705a      	strb	r2, [r3, #1]

	buffer32 = dataBuffer[5] | dataBuffer[4] << 8 | dataBuffer[3] << 16 | dataBuffer[2] << 24;
 8002022:	797b      	ldrb	r3, [r7, #5]
 8002024:	461a      	mov	r2, r3
 8002026:	793b      	ldrb	r3, [r7, #4]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	431a      	orrs	r2, r3
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	431a      	orrs	r2, r3
 8002032:	78bb      	ldrb	r3, [r7, #2]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	4313      	orrs	r3, r2
 8002038:	653b      	str	r3, [r7, #80]	; 0x50
	settings.measuringInterval = buffer32;
 800203a:	4a6b      	ldr	r2, [pc, #428]	; (80021e8 <readEEPROM_AT24+0x200>)
 800203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203e:	6053      	str	r3, [r2, #4]

	buffer32 = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	653b      	str	r3, [r7, #80]	; 0x50
	buffer32 = dataBuffer[9] | dataBuffer[8] << 8 | dataBuffer[7] << 16 | dataBuffer[6] << 24;
 8002044:	7a7b      	ldrb	r3, [r7, #9]
 8002046:	461a      	mov	r2, r3
 8002048:	7a3b      	ldrb	r3, [r7, #8]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	431a      	orrs	r2, r3
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	431a      	orrs	r2, r3
 8002054:	79bb      	ldrb	r3, [r7, #6]
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	4313      	orrs	r3, r2
 800205a:	653b      	str	r3, [r7, #80]	; 0x50
	settings.samplingInterval = buffer32;
 800205c:	4a62      	ldr	r2, [pc, #392]	; (80021e8 <readEEPROM_AT24+0x200>)
 800205e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002060:	6093      	str	r3, [r2, #8]

	settings.isAveraging = dataBuffer[10];
 8002062:	7aba      	ldrb	r2, [r7, #10]
 8002064:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <readEEPROM_AT24+0x200>)
 8002066:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = dataBuffer[11];
 8002068:	7afa      	ldrb	r2, [r7, #11]
 800206a:	4b5f      	ldr	r3, [pc, #380]	; (80021e8 <readEEPROM_AT24+0x200>)
 800206c:	735a      	strb	r2, [r3, #13]

	buffer64 = 0;
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	f04f 0400 	mov.w	r4, #0
 8002076:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	buffer64 = dataBuffer[19] | dataBuffer[18] << 8 | dataBuffer[17] << 16 | dataBuffer[16] << 24 | dataBuffer[15] << 32 | dataBuffer[14] << 40 | dataBuffer[13] << 48 | dataBuffer[12] << 56;
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	461a      	mov	r2, r3
 800207e:	7cbb      	ldrb	r3, [r7, #18]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	431a      	orrs	r2, r3
 8002084:	7c7b      	ldrb	r3, [r7, #17]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	431a      	orrs	r2, r3
 800208a:	7c3b      	ldrb	r3, [r7, #16]
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	431a      	orrs	r2, r3
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	4619      	mov	r1, r3
 8002094:	2320      	movs	r3, #32
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	431a      	orrs	r2, r3
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	4619      	mov	r1, r3
 80020a0:	2328      	movs	r3, #40	; 0x28
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	431a      	orrs	r2, r3
 80020a8:	7b7b      	ldrb	r3, [r7, #13]
 80020aa:	4619      	mov	r1, r3
 80020ac:	2330      	movs	r3, #48	; 0x30
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	431a      	orrs	r2, r3
 80020b4:	7b3b      	ldrb	r3, [r7, #12]
 80020b6:	4619      	mov	r1, r3
 80020b8:	2338      	movs	r3, #56	; 0x38
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80020c4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	settings.triggerLevel = buffer64;
 80020c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80020cc:	f7fe faa6 	bl	800061c <__aeabi_ul2d>
 80020d0:	4603      	mov	r3, r0
 80020d2:	460c      	mov	r4, r1
 80020d4:	4a44      	ldr	r2, [pc, #272]	; (80021e8 <readEEPROM_AT24+0x200>)
 80020d6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	settings.triggerLevel /= 1000000000;
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <readEEPROM_AT24+0x200>)
 80020dc:	ed93 6b04 	vldr	d6, [r3, #16]
 80020e0:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 80021e0 <readEEPROM_AT24+0x1f8>
 80020e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020e8:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <readEEPROM_AT24+0x200>)
 80020ea:	ed83 7b04 	vstr	d7, [r3, #16]

	buffer64 = 0;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	f04f 0400 	mov.w	r4, #0
 80020f6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	buffer64 = dataBuffer[27] | dataBuffer[26] << 8 | dataBuffer[25] << 16 | dataBuffer[24] << 24 | dataBuffer[23] << 32 | dataBuffer[22] << 40 | dataBuffer[21] << 48 | dataBuffer[20] << 56;
 80020fa:	7efb      	ldrb	r3, [r7, #27]
 80020fc:	461a      	mov	r2, r3
 80020fe:	7ebb      	ldrb	r3, [r7, #26]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	431a      	orrs	r2, r3
 8002104:	7e7b      	ldrb	r3, [r7, #25]
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	431a      	orrs	r2, r3
 800210a:	7e3b      	ldrb	r3, [r7, #24]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	431a      	orrs	r2, r3
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	4619      	mov	r1, r3
 8002114:	2320      	movs	r3, #32
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	431a      	orrs	r2, r3
 800211c:	7dbb      	ldrb	r3, [r7, #22]
 800211e:	4619      	mov	r1, r3
 8002120:	2328      	movs	r3, #40	; 0x28
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	431a      	orrs	r2, r3
 8002128:	7d7b      	ldrb	r3, [r7, #21]
 800212a:	4619      	mov	r1, r3
 800212c:	2330      	movs	r3, #48	; 0x30
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	431a      	orrs	r2, r3
 8002134:	7d3b      	ldrb	r3, [r7, #20]
 8002136:	4619      	mov	r1, r3
 8002138:	2338      	movs	r3, #56	; 0x38
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002144:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	settings.lastOffsetValue = buffer64;
 8002148:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800214c:	f7fe fa66 	bl	800061c <__aeabi_ul2d>
 8002150:	4603      	mov	r3, r0
 8002152:	460c      	mov	r4, r1
 8002154:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <readEEPROM_AT24+0x200>)
 8002156:	e9c2 3406 	strd	r3, r4, [r2, #24]
	settings.lastOffsetValue /= 1000000000;
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <readEEPROM_AT24+0x200>)
 800215c:	ed93 6b06 	vldr	d6, [r3, #24]
 8002160:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80021e0 <readEEPROM_AT24+0x1f8>
 8002164:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <readEEPROM_AT24+0x200>)
 800216a:	ed83 7b06 	vstr	d7, [r3, #24]

	buffer16 = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[29] | dataBuffer[28] << 8;
 8002174:	7f7b      	ldrb	r3, [r7, #29]
 8002176:	b21a      	sxth	r2, r3
 8002178:	7f3b      	ldrb	r3, [r7, #28]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	b21b      	sxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	b21b      	sxth	r3, r3
 8002182:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceVoltage = buffer16;
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <readEEPROM_AT24+0x200>)
 8002188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800218c:	8413      	strh	r3, [r2, #32]

	buffer16 = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	buffer16 = dataBuffer[31] | dataBuffer[30] << 8;
 8002194:	7ffb      	ldrb	r3, [r7, #31]
 8002196:	b21a      	sxth	r2, r3
 8002198:	7fbb      	ldrb	r3, [r7, #30]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	settings.powerSourceCurrent = buffer16;
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021ac:	8453      	strh	r3, [r2, #34]	; 0x22

	settings.powerSourceEnable = dataBuffer[32];
 80021ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = dataBuffer[33];
 80021b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	settings.isLoggingToUSB = dataBuffer[34];
 80021c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = dataBuffer[35];
 80021cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <readEEPROM_AT24+0x200>)
 80021d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27



}
 80021d6:	bf00      	nop
 80021d8:	375c      	adds	r7, #92	; 0x5c
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	bf00      	nop
 80021e0:	00000000 	.word	0x00000000
 80021e4:	41cdcd65 	.word	0x41cdcd65
 80021e8:	20000018 	.word	0x20000018
 80021ec:	00000000 	.word	0x00000000

080021f0 <initEEPROM>:

void initEEPROM (){
 80021f0:	b490      	push	{r4, r7}
 80021f2:	af00      	add	r7, sp, #0

	settings.isLoggingToConsole = 1;
 80021f4:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <initEEPROM+0x80>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
	settings.isLoggingToSD = 0;
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <initEEPROM+0x80>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	705a      	strb	r2, [r3, #1]
	settings.isLoggingToUSB = 0;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <initEEPROM+0x80>)
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	settings.isLoggingToEthernet = 0;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <initEEPROM+0x80>)
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	settings.measuringInterval = 5;
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <initEEPROM+0x80>)
 8002212:	2205      	movs	r2, #5
 8002214:	605a      	str	r2, [r3, #4]
	settings.samplingInterval = 100;
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <initEEPROM+0x80>)
 8002218:	2264      	movs	r2, #100	; 0x64
 800221a:	609a      	str	r2, [r3, #8]
	settings.isAveraging = 0;
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <initEEPROM+0x80>)
 800221e:	2200      	movs	r2, #0
 8002220:	731a      	strb	r2, [r3, #12]
	settings.isTriggerActive = 0;
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <initEEPROM+0x80>)
 8002224:	2200      	movs	r2, #0
 8002226:	735a      	strb	r2, [r3, #13]
	settings.triggerLevel = 0.0001;
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <initEEPROM+0x80>)
 800222a:	a40f      	add	r4, pc, #60	; (adr r4, 8002268 <initEEPROM+0x78>)
 800222c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002230:	e9c2 3404 	strd	r3, r4, [r2, #16]
	settings.lastOffsetValue = 0.0;
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <initEEPROM+0x80>)
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	settings.powerSourceVoltage = 2500;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <initEEPROM+0x80>)
 8002244:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002248:	841a      	strh	r2, [r3, #32]
	settings.powerSourceCurrent = 250;
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <initEEPROM+0x80>)
 800224c:	22fa      	movs	r2, #250	; 0xfa
 800224e:	845a      	strh	r2, [r3, #34]	; 0x22
	settings.powerSourceEnable = 1;
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <initEEPROM+0x80>)
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	settings.powerSourceEnableMode = 0;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <initEEPROM+0x80>)
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//eepromSaveObject(settings.isAveraging, 1);


}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc90      	pop	{r4, r7}
 8002266:	4770      	bx	lr
 8002268:	eb1c432d 	.word	0xeb1c432d
 800226c:	3f1a36e2 	.word	0x3f1a36e2
 8002270:	20000018 	.word	0x20000018
 8002274:	00000000 	.word	0x00000000

08002278 <setPotenciomenters>:
 * // Pot A = Voltage control, Pot B = current limit control
	uint8_t i2cWiperAdressPotA = 0x18;
	uint8_t i2cWiperAdressPotB = 0x4E;
 *
 */
void setPotenciomenters(){
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b08d      	sub	sp, #52	; 0x34
 800227c:	af02      	add	r7, sp, #8

	uint8_t temp8 = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	double tempDouble = 0;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	f04f 0400 	mov.w	r4, #0
 800228c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double tempDouble2 = 0;
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	f04f 0400 	mov.w	r4, #0
 8002298:	e9c7 3404 	strd	r3, r4, [r7, #16]

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 800229c:	4b64      	ldr	r3, [pc, #400]	; (8002430 <setPotenciomenters+0x1b8>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 80022a4:	4b62      	ldr	r3, [pc, #392]	; (8002430 <setPotenciomenters+0x1b8>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	73bb      	strb	r3, [r7, #14]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 80022b4:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <setPotenciomenters+0x1bc>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	737b      	strb	r3, [r7, #13]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 80022bc:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <setPotenciomenters+0x1bc>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	733b      	strb	r3, [r7, #12]

	/*Voltage settings*/
	tempDouble2 = settings.powerSourceVoltage;
 80022cc:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <setPotenciomenters+0x1c0>)
 80022ce:	8c1b      	ldrh	r3, [r3, #32]
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80022d8:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( (tempDouble2 / 1000) / ( VOLTAGE_SENSE_CURRENT * LT3045_NUMBER ) ) - 4700;
 80022dc:	ed97 7b04 	vldr	d7, [r7, #16]
 80022e0:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8002408 <setPotenciomenters+0x190>
 80022e4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022e8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8002410 <setPotenciomenters+0x198>
 80022ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022f0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002418 <setPotenciomenters+0x1a0>
 80022f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022f8:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_A_RESOLUTION;
 80022fc:	4b4f      	ldr	r3, [pc, #316]	; (800243c <setPotenciomenters+0x1c4>)
 80022fe:	ed93 6b00 	vldr	d6, [r3]
 8002302:	ed97 5b06 	vldr	d5, [r7, #24]
 8002306:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800230a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800230e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002312:	793b      	ldrb	r3, [r7, #4]
 8002314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8002318:	4b49      	ldr	r3, [pc, #292]	; (8002440 <setPotenciomenters+0x1c8>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 800231e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002322:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8002326:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800232a:	33fe      	adds	r3, #254	; 0xfe
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b44      	ldr	r3, [pc, #272]	; (8002440 <setPotenciomenters+0x1c8>)
 8002330:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 8002332:	4b43      	ldr	r3, [pc, #268]	; (8002440 <setPotenciomenters+0x1c8>)
 8002334:	2200      	movs	r2, #0
 8002336:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrA, &i2cDataToWrite, 2, 1000);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	b299      	uxth	r1, r3
 800233c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2302      	movs	r3, #2
 8002344:	4a3e      	ldr	r2, [pc, #248]	; (8002440 <setPotenciomenters+0x1c8>)
 8002346:	483f      	ldr	r0, [pc, #252]	; (8002444 <setPotenciomenters+0x1cc>)
 8002348:	f009 f852 	bl	800b3f0 <HAL_I2C_Master_Transmit>

	/*Current settings*/
	temp8 = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tempDouble = 0;
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	f04f 0400 	mov.w	r4, #0
 800235a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	tempDouble2 = 0;
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	f04f 0400 	mov.w	r4, #0
 8002366:	e9c7 3404 	strd	r3, r4, [r7, #16]

	HAL_Delay(100);
 800236a:	2064      	movs	r0, #100	; 0x64
 800236c:	f005 ff78 	bl	8008260 <HAL_Delay>

	tempDouble2 = settings.powerSourceCurrent;
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <setPotenciomenters+0x1c0>)
 8002372:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800237c:	ed87 7b04 	vstr	d7, [r7, #16]
	tempDouble = ( 150 / tempDouble2 ) * 1000;
 8002380:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8002420 <setPotenciomenters+0x1a8>
 8002384:	ed97 6b04 	vldr	d6, [r7, #16]
 8002388:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800238c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002408 <setPotenciomenters+0x190>
 8002390:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002394:	ed87 7b06 	vstr	d7, [r7, #24]
	tempDouble *= LT3045_NUMBER;
	tempDouble -= 330; /// by design 330 ohm inserted
 8002398:	ed97 7b06 	vldr	d7, [r7, #24]
 800239c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8002428 <setPotenciomenters+0x1b0>
 80023a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023a4:	ed87 7b06 	vstr	d7, [r7, #24]
	temp8 = tempDouble / POT_B_RESOLUTION;
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <setPotenciomenters+0x1d0>)
 80023aa:	ed93 6b00 	vldr	d6, [r3]
 80023ae:	ed97 5b06 	vldr	d5, [r7, #24]
 80023b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80023be:	793b      	ldrb	r3, [r7, #4]
 80023c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <setPotenciomenters+0x1c8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0xFF - 1 - temp8;		// data 8 bits
 80023ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ce:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80023d2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80023d6:	33fe      	adds	r3, #254	; 0xfe
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <setPotenciomenters+0x1c8>)
 80023dc:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <setPotenciomenters+0x1c8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, writeAddrB, &i2cDataToWrite, 2, 1000);
 80023e4:	7b7b      	ldrb	r3, [r7, #13]
 80023e6:	b299      	uxth	r1, r3
 80023e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2302      	movs	r3, #2
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <setPotenciomenters+0x1c8>)
 80023f2:	4814      	ldr	r0, [pc, #80]	; (8002444 <setPotenciomenters+0x1cc>)
 80023f4:	f008 fffc 	bl	800b3f0 <HAL_I2C_Master_Transmit>


	HAL_Delay(100);
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	f005 ff31 	bl	8008260 <HAL_Delay>

}
 80023fe:	bf00      	nop
 8002400:	372c      	adds	r7, #44	; 0x2c
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
 8002406:	bf00      	nop
 8002408:	00000000 	.word	0x00000000
 800240c:	408f4000 	.word	0x408f4000
 8002410:	eb1c432d 	.word	0xeb1c432d
 8002414:	3f1a36e2 	.word	0x3f1a36e2
 8002418:	00000000 	.word	0x00000000
 800241c:	40b25c00 	.word	0x40b25c00
 8002420:	00000000 	.word	0x00000000
 8002424:	4062c000 	.word	0x4062c000
 8002428:	00000000 	.word	0x00000000
 800242c:	4074a000 	.word	0x4074a000
 8002430:	20000058 	.word	0x20000058
 8002434:	20000059 	.word	0x20000059
 8002438:	20000018 	.word	0x20000018
 800243c:	20000048 	.word	0x20000048
 8002440:	20011eac 	.word	0x20011eac
 8002444:	20007568 	.word	0x20007568
 8002448:	20000050 	.word	0x20000050

0800244c <readPotenciometers>:

void readPotenciometers(){
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af02      	add	r7, sp, #8

	// write mode LSB bite is low level, read mode LSB bite is high level
	uint8_t writeAddrA = (i2cWiperAdressPotA << 1) | 0x00 ;
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <readPotenciometers+0xe8>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	71fb      	strb	r3, [r7, #7]
	uint8_t readAddrA = (i2cWiperAdressPotA << 1) | 0x01 ;
 800245a:	4b36      	ldr	r3, [pc, #216]	; (8002534 <readPotenciometers+0xe8>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	b25b      	sxtb	r3, r3
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	b25b      	sxtb	r3, r3
 8002468:	71bb      	strb	r3, [r7, #6]

	uint8_t writeAddrB = (i2cWiperAdressPotB << 1) | 0x00 ;
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <readPotenciometers+0xec>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	717b      	strb	r3, [r7, #5]
	uint8_t readAddrB = (i2cWiperAdressPotB << 1) | 0x01 ;
 8002472:	4b31      	ldr	r3, [pc, #196]	; (8002538 <readPotenciometers+0xec>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	b25b      	sxtb	r3, r3
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	b25b      	sxtb	r3, r3
 8002480:	713b      	strb	r3, [r7, #4]

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 8002482:	4b2e      	ldr	r3, [pc, #184]	; (800253c <readPotenciometers+0xf0>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <readPotenciometers+0xf0>)
 800248a:	2200      	movs	r2, #0
 800248c:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0x00;
 800248e:	4b2b      	ldr	r3, [pc, #172]	; (800253c <readPotenciometers+0xf0>)
 8002490:	2200      	movs	r2, #0
 8002492:	709a      	strb	r2, [r3, #2]

	// voltage control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrA, &i2cDataToWrite, 1, 1000);
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	b299      	uxth	r1, r3
 8002498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	4a26      	ldr	r2, [pc, #152]	; (800253c <readPotenciometers+0xf0>)
 80024a2:	4827      	ldr	r0, [pc, #156]	; (8002540 <readPotenciometers+0xf4>)
 80024a4:	f008 ffa4 	bl	800b3f0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrA, &i2cDataToRead, 1, 1000);
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	b299      	uxth	r1, r3
 80024ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	4a23      	ldr	r2, [pc, #140]	; (8002544 <readPotenciometers+0xf8>)
 80024b6:	4822      	ldr	r0, [pc, #136]	; (8002540 <readPotenciometers+0xf4>)
 80024b8:	f009 f88e 	bl	800b5d8 <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot A - Voltage Control - read value: %d\n", i2cDataToRead[0]);
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <readPotenciometers+0xf8>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4921      	ldr	r1, [pc, #132]	; (8002548 <readPotenciometers+0xfc>)
 80024c4:	4821      	ldr	r0, [pc, #132]	; (800254c <readPotenciometers+0x100>)
 80024c6:	f01c fb47 	bl	801eb58 <siprintf>
	send_uart3(uartBufferTx);
 80024ca:	4820      	ldr	r0, [pc, #128]	; (800254c <readPotenciometers+0x100>)
 80024cc:	f7ff fb1c 	bl	8001b08 <send_uart3>

	HAL_Delay(100);
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f005 fec5 	bl	8008260 <HAL_Delay>

	i2cDataToWrite [0] = 0x00;		// instruction 0x00 - RDAC, 0x20 - EEPROM, 0x40 - write protect
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <readPotenciometers+0xf0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
	i2cDataToWrite [1] = 0x00;		// data 8 bits
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <readPotenciometers+0xf0>)
 80024de:	2200      	movs	r2, #0
 80024e0:	705a      	strb	r2, [r3, #1]
	i2cDataToWrite [2] = 0;
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <readPotenciometers+0xf0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	709a      	strb	r2, [r3, #2]

	// current control - set value
	HAL_I2C_Master_Transmit(&hi2c4, readAddrB, &i2cDataToWrite, 1, 1000);
 80024e8:	793b      	ldrb	r3, [r7, #4]
 80024ea:	b299      	uxth	r1, r3
 80024ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2301      	movs	r3, #1
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <readPotenciometers+0xf0>)
 80024f6:	4812      	ldr	r0, [pc, #72]	; (8002540 <readPotenciometers+0xf4>)
 80024f8:	f008 ff7a 	bl	800b3f0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c4, readAddrB, &i2cDataToRead, 1, 1000);
 80024fc:	793b      	ldrb	r3, [r7, #4]
 80024fe:	b299      	uxth	r1, r3
 8002500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2301      	movs	r3, #1
 8002508:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <readPotenciometers+0xf8>)
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <readPotenciometers+0xf4>)
 800250c:	f009 f864 	bl	800b5d8 <HAL_I2C_Master_Receive>

	sprintf(uartBufferTx, "\nPot B - Current Control - read value: %d\n", i2cDataToRead[0]);
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <readPotenciometers+0xf8>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	490e      	ldr	r1, [pc, #56]	; (8002550 <readPotenciometers+0x104>)
 8002518:	480c      	ldr	r0, [pc, #48]	; (800254c <readPotenciometers+0x100>)
 800251a:	f01c fb1d 	bl	801eb58 <siprintf>
	send_uart3(uartBufferTx);
 800251e:	480b      	ldr	r0, [pc, #44]	; (800254c <readPotenciometers+0x100>)
 8002520:	f7ff faf2 	bl	8001b08 <send_uart3>

	HAL_Delay(100);
 8002524:	2064      	movs	r0, #100	; 0x64
 8002526:	f005 fe9b 	bl	8008260 <HAL_Delay>


}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000058 	.word	0x20000058
 8002538:	20000059 	.word	0x20000059
 800253c:	20011eac 	.word	0x20011eac
 8002540:	20007568 	.word	0x20007568
 8002544:	200075c8 	.word	0x200075c8
 8002548:	0802060c 	.word	0x0802060c
 800254c:	20011e6c 	.word	0x20011e6c
 8002550:	08020638 	.word	0x08020638

08002554 <saveToSD>:
#endif

}

// logging to SD card
void saveToSD (char *string){
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]


	if(startOfMeasurement == 1){
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <saveToSD+0xf8>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d119      	bne.n	8002598 <saveToSD+0x44>
		// file name format "20YYMMDD_HHMM" example "20200120_1022"
		sprintf(loggingFileName, "20%2d%2d%2d_%2d%2d.txt", Date.Year, Date.Month, Date.Date, Time.Hours,Time.Minutes);
		//uint8_t len = strlen(loggingFileName);
	*/
		/* Mount SD Card */
		fresult = f_mount(&fs, "", 0);
 8002564:	2200      	movs	r2, #0
 8002566:	493a      	ldr	r1, [pc, #232]	; (8002650 <saveToSD+0xfc>)
 8002568:	483a      	ldr	r0, [pc, #232]	; (8002654 <saveToSD+0x100>)
 800256a:	f019 ffe1 	bl	801c530 <f_mount>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <saveToSD+0x104>)
 8002574:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 8002576:	4b38      	ldr	r3, [pc, #224]	; (8002658 <saveToSD+0x104>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <saveToSD+0x3e>
			isMeasuring = 0;
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <saveToSD+0x108>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
			send_uart("!!! Sampling stopped !!!\n");
 8002584:	4836      	ldr	r0, [pc, #216]	; (8002660 <saveToSD+0x10c>)
 8002586:	f7ff fa93 	bl	8001ab0 <send_uart>

			//#ifdef DEBUG
				return send_uart("!!! ERROR: mounting SD CARD !!!\n");
 800258a:	4836      	ldr	r0, [pc, #216]	; (8002664 <saveToSD+0x110>)
 800258c:	f7ff fa90 	bl	8001ab0 <send_uart>
 8002590:	e058      	b.n	8002644 <saveToSD+0xf0>
			//#endif
		} else {
			#ifdef DEBUG
				send_uart("SD CARD mounted successfully...\n");
 8002592:	4835      	ldr	r0, [pc, #212]	; (8002668 <saveToSD+0x114>)
 8002594:	f7ff fa8c 	bl	8001ab0 <send_uart>
		startOfMeasurement == 0;

	}

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8002598:	4a34      	ldr	r2, [pc, #208]	; (800266c <saveToSD+0x118>)
 800259a:	4935      	ldr	r1, [pc, #212]	; (8002670 <saveToSD+0x11c>)
 800259c:	482c      	ldr	r0, [pc, #176]	; (8002650 <saveToSD+0xfc>)
 800259e:	f01a ff48 	bl	801d432 <f_getfree>


	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80025a2:	4b32      	ldr	r3, [pc, #200]	; (800266c <saveToSD+0x118>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	895b      	ldrh	r3, [r3, #10]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b31      	ldr	r3, [pc, #196]	; (8002670 <saveToSD+0x11c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	fb03 f302 	mul.w	r3, r3, r2
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025ba:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80025be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80025c6:	ee17 2a90 	vmov	r2, s15
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <saveToSD+0x120>)
 80025cc:	601a      	str	r2, [r3, #0]

	#ifdef DEBUG
		bufclear();
 80025ce:	f7ff faad 	bl	8001b2c <bufclear>
		sprintf(buffer, "SD CARD Free Space: \t%lu\n", free_space);
 80025d2:	4b28      	ldr	r3, [pc, #160]	; (8002674 <saveToSD+0x120>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4927      	ldr	r1, [pc, #156]	; (8002678 <saveToSD+0x124>)
 80025da:	4828      	ldr	r0, [pc, #160]	; (800267c <saveToSD+0x128>)
 80025dc:	f01c fabc 	bl	801eb58 <siprintf>
		send_uart(buffer);
 80025e0:	4826      	ldr	r0, [pc, #152]	; (800267c <saveToSD+0x128>)
 80025e2:	f7ff fa65 	bl	8001ab0 <send_uart>
	#endif

	if( free_space < strlen(string) ){
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fd fe34 	bl	8000254 <strlen>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <saveToSD+0x120>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d909      	bls.n	800260a <saveToSD+0xb6>
		isMeasuring = 0;
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <saveToSD+0x108>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
		send_uart("!!! Sampling stopped !!!\n");
 80025fc:	4818      	ldr	r0, [pc, #96]	; (8002660 <saveToSD+0x10c>)
 80025fe:	f7ff fa57 	bl	8001ab0 <send_uart>

		return send_uart("!!! ERROR: SD card capacity !!!\n");
 8002602:	481f      	ldr	r0, [pc, #124]	; (8002680 <saveToSD+0x12c>)
 8002604:	f7ff fa54 	bl	8001ab0 <send_uart>
 8002608:	e01c      	b.n	8002644 <saveToSD+0xf0>

	}


	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&fil, loggingFileName,	FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800260a:	2213      	movs	r2, #19
 800260c:	491d      	ldr	r1, [pc, #116]	; (8002684 <saveToSD+0x130>)
 800260e:	481e      	ldr	r0, [pc, #120]	; (8002688 <saveToSD+0x134>)
 8002610:	f019 ffd4 	bl	801c5bc <f_open>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <saveToSD+0x104>)
 800261a:	701a      	strb	r2, [r3, #0]

	/* Move to offset to the end of the file */
	fresult = f_lseek(&fil, &fil.fptr);
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <saveToSD+0x138>)
 800261e:	4619      	mov	r1, r3
 8002620:	4819      	ldr	r0, [pc, #100]	; (8002688 <saveToSD+0x134>)
 8002622:	f01a fbd3 	bl	801cdcc <f_lseek>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <saveToSD+0x104>)
 800262c:	701a      	strb	r2, [r3, #0]

	/* write the string to the file */
	fresult = f_puts(string, &fil);
 800262e:	4916      	ldr	r1, [pc, #88]	; (8002688 <saveToSD+0x134>)
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f01b f8d6 	bl	801d7e2 <f_puts>
 8002636:	4603      	mov	r3, r0
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <saveToSD+0x104>)
 800263c:	701a      	strb	r2, [r3, #0]

	/* Close file */
	f_close(&fil);
 800263e:	4812      	ldr	r0, [pc, #72]	; (8002688 <saveToSD+0x134>)
 8002640:	f01a fb9a 	bl	801cd78 <f_close>
	//bufclear();




}
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000320 	.word	0x20000320
 8002650:	08020664 	.word	0x08020664
 8002654:	20001f78 	.word	0x20001f78
 8002658:	20001e50 	.word	0x20001e50
 800265c:	20000322 	.word	0x20000322
 8002660:	08020854 	.word	0x08020854
 8002664:	08020870 	.word	0x08020870
 8002668:	08020688 	.word	0x08020688
 800266c:	20000e1c 	.word	0x20000e1c
 8002670:	20001e58 	.word	0x20001e58
 8002674:	20001e54 	.word	0x20001e54
 8002678:	080206c8 	.word	0x080206c8
 800267c:	20003040 	.word	0x20003040
 8002680:	08020894 	.word	0x08020894
 8002684:	20005794 	.word	0x20005794
 8002688:	20000e20 	.word	0x20000e20
 800268c:	20000e38 	.word	0x20000e38

08002690 <setRangeNA>:


// function to set selected range ON/OFF
// ON --> selection = 1
// OFF --> selection = 0
void setRangeNA(uint8_t selection){
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]

	if(selection){
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00c      	beq.n	80026ba <setRangeNA+0x2a>
		// nA range ON
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);
		// NA_TRANS port E pin 1 HIGH
		GPIOE->ODR |= (1<<1);
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <setRangeNA+0x50>)
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <setRangeNA+0x50>)
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	6153      	str	r3, [r2, #20]
		// AS4 port E pin 3 LOW
		GPIOE->ODR &= ~(1<<3);
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <setRangeNA+0x50>)
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <setRangeNA+0x50>)
 80026b2:	f023 0308 	bic.w	r3, r3, #8
 80026b6:	6153      	str	r3, [r2, #20]
		// AS4 port E pin 3 HIGH
		GPIOE->ODR |= (1<<3);

	}

}
 80026b8:	e00b      	b.n	80026d2 <setRangeNA+0x42>
		GPIOE->ODR &= ~(1<<1);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <setRangeNA+0x50>)
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <setRangeNA+0x50>)
 80026c0:	f023 0302 	bic.w	r3, r3, #2
 80026c4:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= (1<<3);
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <setRangeNA+0x50>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <setRangeNA+0x50>)
 80026cc:	f043 0308 	orr.w	r3, r3, #8
 80026d0:	6153      	str	r3, [r2, #20]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <setRangeUA>:

void setRangeUA (uint8_t selection){
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]

	if(selection){
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <setRangeUA+0x2a>
		// uA range ON
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_RESET);
		// UA_TRANS port E pin 0 HIGH
		GPIOE->ODR |= (1<<0);
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <setRangeUA+0x50>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <setRangeUA+0x50>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6153      	str	r3, [r2, #20]
		// AS3 port E pin 5 LOW
		GPIOE->ODR &= ~(1<<5);
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <setRangeUA+0x50>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <setRangeUA+0x50>)
 8002706:	f023 0320 	bic.w	r3, r3, #32
 800270a:	6153      	str	r3, [r2, #20]
		GPIOE->ODR &= ~(1<<0);
		// AS3 port E pin 5 HIGH
		GPIOE->ODR |= (1<<5);

	}
}
 800270c:	e00b      	b.n	8002726 <setRangeUA+0x42>
		GPIOE->ODR &= ~(1<<0);
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <setRangeUA+0x50>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <setRangeUA+0x50>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= (1<<5);
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <setRangeUA+0x50>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <setRangeUA+0x50>)
 8002720:	f043 0320 	orr.w	r3, r3, #32
 8002724:	6153      	str	r3, [r2, #20]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <setRangeMA>:

void setRangeMA (uint8_t selection){
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]

	if(selection){
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00c      	beq.n	8002762 <setRangeMA+0x2a>
		// mA range ON
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_SET);
		//HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_RESET);
		// MA_TRANS port B pin 9 HIGH
		GPIOB->ODR |= (1<<9);
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <setRangeMA+0x50>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <setRangeMA+0x50>)
 800274e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002752:	6153      	str	r3, [r2, #20]
		// AS2 port E pin 4 LOW
		GPIOE->ODR &= ~(1<<4);
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <setRangeMA+0x54>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <setRangeMA+0x54>)
 800275a:	f023 0310 	bic.w	r3, r3, #16
 800275e:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<9);
		// AS2 port E pin 4 HIGH
		GPIOE->ODR |= (1<<4);

	}
}
 8002760:	e00b      	b.n	800277a <setRangeMA+0x42>
		GPIOB->ODR &= ~(1<<9);
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <setRangeMA+0x50>)
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <setRangeMA+0x50>)
 8002768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800276c:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= (1<<4);
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <setRangeMA+0x54>)
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4a06      	ldr	r2, [pc, #24]	; (800278c <setRangeMA+0x54>)
 8002774:	f043 0310 	orr.w	r3, r3, #16
 8002778:	6153      	str	r3, [r2, #20]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40020400 	.word	0x40020400
 800278c:	40021000 	.word	0x40021000

08002790 <change_range>:


// simple range changing , no linear regression, based on measured value and hard limits
void change_range(float measuredValue) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	ed87 0a01 	vstr	s0, [r7, #4]

	// change from nA to uA
	if (currentRange == 0 & measuredValue >= RANGE_UPPER_LIMIT_NA) {
 800279a:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <change_range+0x140>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80027b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	bfac      	ite	ge
 80027ba:	2301      	movge	r3, #1
 80027bc:	2300      	movlt	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	4013      	ands	r3, r2
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <change_range+0x50>
		currentRange = 1;
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <change_range+0x140>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]

		setRangeNA(0);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7ff ff5e 	bl	8002690 <setRangeNA>
		setRangeUA(1);
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7ff ff85 	bl	80026e4 <setRangeUA>
		setRangeMA(0);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7ff ffac 	bl	8002738 <setRangeMA>
		*/

	}

	// change from uA to mA
	if (currentRange == 1 & measuredValue >= RANGE_UPPER_LIMIT_UA) {
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <change_range+0x140>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80027f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	bfac      	ite	ge
 8002800:	2301      	movge	r3, #1
 8002802:	2300      	movlt	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4013      	ands	r3, r2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <change_range+0x98>
	//else if (currentRange == 1 & measuredValue >= RANGE_UPPER_LIMIT_UA) {
		currentRange = 2;
 800280e:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <change_range+0x140>)
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]

		setRangeNA(0);
 8002814:	2000      	movs	r0, #0
 8002816:	f7ff ff3b 	bl	8002690 <setRangeNA>
		setRangeUA(0);
 800281a:	2000      	movs	r0, #0
 800281c:	f7ff ff62 	bl	80026e4 <setRangeUA>
		setRangeMA(1);
 8002820:	2001      	movs	r0, #1
 8002822:	f7ff ff89 	bl	8002738 <setRangeMA>
	 HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);

	 }
	 */

}
 8002826:	e04a      	b.n	80028be <change_range+0x12e>
	else if (currentRange == 2 & measuredValue <= RANGE_LOWER_LIMIT_MA) {
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <change_range+0x140>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2da      	uxtb	r2, r3
 8002836:	edd7 7a01 	vldr	s15, [r7, #4]
 800283a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800283e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80028c8 <change_range+0x138>
 8002842:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	bf94      	ite	ls
 800284c:	2301      	movls	r3, #1
 800284e:	2300      	movhi	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4013      	ands	r3, r2
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00c      	beq.n	8002874 <change_range+0xe4>
		currentRange = 1;
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <change_range+0x140>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
		setRangeNA(0);
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff ff15 	bl	8002690 <setRangeNA>
		setRangeUA(1);
 8002866:	2001      	movs	r0, #1
 8002868:	f7ff ff3c 	bl	80026e4 <setRangeUA>
		setRangeMA(0);
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff ff63 	bl	8002738 <setRangeMA>
}
 8002872:	e024      	b.n	80028be <change_range+0x12e>
	else if (currentRange == 1 & measuredValue <= RANGE_LOWER_LIMIT_UA) {
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <change_range+0x140>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2da      	uxtb	r2, r3
 8002882:	edd7 7a01 	vldr	s15, [r7, #4]
 8002886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800288a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80028c8 <change_range+0x138>
 800288e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002896:	bf94      	ite	ls
 8002898:	2301      	movls	r3, #1
 800289a:	2300      	movhi	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4013      	ands	r3, r2
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <change_range+0x12e>
		currentRange = 0;
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <change_range+0x140>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
		setRangeNA(1);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7ff feef 	bl	8002690 <setRangeNA>
		setRangeUA(0);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7ff ff16 	bl	80026e4 <setRangeUA>
		setRangeMA(0);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7ff ff3d 	bl	8002738 <setRangeMA>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80028cc:	3f50624d 	.word	0x3f50624d
 80028d0:	20000344 	.word	0x20000344

080028d4 <adc_write_data>:
	 }
	 */

}

void adc_write_data(uint8_t command, uint8_t regAdrr, uint8_t dataValueMS, uint8_t dataValueLS){
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	4603      	mov	r3, r0
 80028e8:	71bb      	strb	r3, [r7, #6]
 80028ea:	460b      	mov	r3, r1
 80028ec:	717b      	strb	r3, [r7, #5]
 80028ee:	4613      	mov	r3, r2
 80028f0:	713b      	strb	r3, [r7, #4]

	isWaitingForData = 1;
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <adc_write_data+0xbc>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]

	uint8_t bufferTx [4];
	uint8_t bufferRx [4];

	bufferTx [0] = command;				// write 8 bit command word
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	733b      	strb	r3, [r7, #12]
	bufferTx [1] = regAdrr;				// write 8 bit register address
 80028fc:	79bb      	ldrb	r3, [r7, #6]
 80028fe:	737b      	strb	r3, [r7, #13]
	bufferTx [2] = dataValueMS;			// 16 bit register value --> 8 MSB bit into register
 8002900:	797b      	ldrb	r3, [r7, #5]
 8002902:	73bb      	strb	r3, [r7, #14]
	bufferTx [3] = dataValueLS;			// 16 bit register value --> 8 LSB bit into register
 8002904:	793b      	ldrb	r3, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]

	// to GPI LOW
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	; 0x40
 800290c:	4821      	ldr	r0, [pc, #132]	; (8002994 <adc_write_data+0xc0>)
 800290e:	f006 ffa1 	bl	8009854 <HAL_GPIO_WritePin>
	microDelay(50);
 8002912:	2032      	movs	r0, #50	; 0x32
 8002914:	f7ff f924 	bl	8001b60 <microDelay>

	HAL_SPI_TransmitReceive_IT(&hspi1, bufferTx, bufferRx, 4);
 8002918:	f107 0208 	add.w	r2, r7, #8
 800291c:	f107 010c 	add.w	r1, r7, #12
 8002920:	2304      	movs	r3, #4
 8002922:	481d      	ldr	r0, [pc, #116]	; (8002998 <adc_write_data+0xc4>)
 8002924:	f00d f960 	bl	800fbe8 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, bufferTx, bufferRx, 4);

	while (isWaitingForData > 0);
 8002928:	bf00      	nop
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <adc_write_data+0xbc>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1fb      	bne.n	800292a <adc_write_data+0x56>

	microDelay(50);
 8002932:	2032      	movs	r0, #50	; 0x32
 8002934:	f7ff f914 	bl	8001b60 <microDelay>
	// to GPI HIGH
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	2140      	movs	r1, #64	; 0x40
 800293c:	4815      	ldr	r0, [pc, #84]	; (8002994 <adc_write_data+0xc0>)
 800293e:	f006 ff89 	bl	8009854 <HAL_GPIO_WritePin>

	microDelay(50);
 8002942:	2032      	movs	r0, #50	; 0x32
 8002944:	f7ff f90c 	bl	8001b60 <microDelay>

	// to GPI LOW
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	2140      	movs	r1, #64	; 0x40
 800294c:	4811      	ldr	r0, [pc, #68]	; (8002994 <adc_write_data+0xc0>)
 800294e:	f006 ff81 	bl	8009854 <HAL_GPIO_WritePin>
	microDelay(50);
 8002952:	2032      	movs	r0, #50	; 0x32
 8002954:	f7ff f904 	bl	8001b60 <microDelay>

	HAL_SPI_TransmitReceive_IT(&hspi1, bufferTx, bufferRx, 4);
 8002958:	f107 0208 	add.w	r2, r7, #8
 800295c:	f107 010c 	add.w	r1, r7, #12
 8002960:	2304      	movs	r3, #4
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <adc_write_data+0xc4>)
 8002964:	f00d f940 	bl	800fbe8 <HAL_SPI_TransmitReceive_IT>
	//HAL_SPI_TransmitReceive_DMA(&hspi1, bufferTx, bufferRx, 4);

	while (isWaitingForData > 0);
 8002968:	bf00      	nop
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <adc_write_data+0xbc>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1fb      	bne.n	800296a <adc_write_data+0x96>

	microDelay(50);
 8002972:	2032      	movs	r0, #50	; 0x32
 8002974:	f7ff f8f4 	bl	8001b60 <microDelay>
	// to GPI HIGH
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002978:	2201      	movs	r2, #1
 800297a:	2140      	movs	r1, #64	; 0x40
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <adc_write_data+0xc0>)
 800297e:	f006 ff69 	bl	8009854 <HAL_GPIO_WritePin>

	microDelay(50);
 8002982:	2032      	movs	r0, #50	; 0x32
 8002984:	f7ff f8ec 	bl	8001b60 <microDelay>


}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	20000001 	.word	0x20000001
 8002994:	40020c00 	.word	0x40020c00
 8002998:	200057b8 	.word	0x200057b8

0800299c <adc_config>:

// sequence to config ADC after reset or power up
uint8_t adc_config() {
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <adc_config+0x1c>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]

	// SETTING ADC PGA AND WORKING RANGE
	adc_write_data(ADC_WRITE, ADC_RANGE_SEL_REG, 0x0, ADC_RANGE_UNIDIR_125REF_INT_REF);
 80029a6:	230b      	movs	r3, #11
 80029a8:	2200      	movs	r2, #0
 80029aa:	2114      	movs	r1, #20
 80029ac:	20d0      	movs	r0, #208	; 0xd0
 80029ae:	f7ff ff91 	bl	80028d4 <adc_write_data>
	returnValue = HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
*/

}
 80029b2:	bf00      	nop
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000001 	.word	0x20000001

080029bc <adc_compensateOffset>:

	send_uart3("ADC resetted\n");

}

void adc_compensateOffset(){
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0

	double result = 0;
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f04f 0400 	mov.w	r4, #0
 80029ca:	e9c7 3402 	strd	r3, r4, [r7, #8]
	uint16_t offsetSamples = 500;
 80029ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029d2:	807b      	strh	r3, [r7, #2]

	HAL_Delay(50);
 80029d4:	2032      	movs	r0, #50	; 0x32
 80029d6:	f005 fc43 	bl	8008260 <HAL_Delay>

	// stabilize components anf flush buffer
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 80029da:	2300      	movs	r3, #0
 80029dc:	71fb      	strb	r3, [r7, #7]
 80029de:	e007      	b.n	80029f0 <adc_compensateOffset+0x34>
		adc_sample();
 80029e0:	f000 f866 	bl	8002ab0 <adc_sample>
		//result += previousValues[SAMPLES-1];
		microDelay(100);
 80029e4:	2064      	movs	r0, #100	; 0x64
 80029e6:	f7ff f8bb 	bl	8001b60 <microDelay>
	for(uint8_t i = 0; i < offsetSamples/10; i++){
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	3301      	adds	r3, #1
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	4926      	ldr	r1, [pc, #152]	; (8002a90 <adc_compensateOffset+0xd4>)
 80029f8:	fba1 1303 	umull	r1, r3, r1, r3
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d3ed      	bcc.n	80029e0 <adc_compensateOffset+0x24>
	}

	for(uint16_t i = 0; i < offsetSamples; i++){
 8002a04:	2300      	movs	r3, #0
 8002a06:	80bb      	strh	r3, [r7, #4]
 8002a08:	e021      	b.n	8002a4e <adc_compensateOffset+0x92>
		adc_sample();
 8002a0a:	f000 f851 	bl	8002ab0 <adc_sample>
		//result += measuredValue; //previousValues[SAMPLES-1];
		result += previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
 8002a0e:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <adc_compensateOffset+0xd8>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f103 0109 	add.w	r1, r3, #9
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <adc_compensateOffset+0xdc>)
 8002a18:	fb83 2301 	smull	r2, r3, r3, r1
 8002a1c:	109a      	asrs	r2, r3, #2
 8002a1e:	17cb      	asrs	r3, r1, #31
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	1aca      	subs	r2, r1, r3
 8002a2c:	491b      	ldr	r1, [pc, #108]	; (8002a9c <adc_compensateOffset+0xe0>)
 8002a2e:	00d3      	lsls	r3, r2, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	ed93 7b00 	vldr	d7, [r3]
 8002a36:	ed97 6b02 	vldr	d6, [r7, #8]
 8002a3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a3e:	ed87 7b02 	vstr	d7, [r7, #8]
		microDelay(50);
 8002a42:	2032      	movs	r0, #50	; 0x32
 8002a44:	f7ff f88c 	bl	8001b60 <microDelay>
	for(uint16_t i = 0; i < offsetSamples; i++){
 8002a48:	88bb      	ldrh	r3, [r7, #4]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	80bb      	strh	r3, [r7, #4]
 8002a4e:	88ba      	ldrh	r2, [r7, #4]
 8002a50:	887b      	ldrh	r3, [r7, #2]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d3d9      	bcc.n	8002a0a <adc_compensateOffset+0x4e>
	}

	settings.lastOffsetValue = result / offsetSamples;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	ee07 3a90 	vmov	s15, r3
 8002a5c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002a60:	ed97 5b02 	vldr	d5, [r7, #8]
 8002a64:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <adc_compensateOffset+0xe4>)
 8002a6a:	ed83 7b06 	vstr	d7, [r3, #24]

	sprintf(uartBufferTx, "ADC offset: %.12f\n", settings.lastOffsetValue);
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <adc_compensateOffset+0xe4>)
 8002a70:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	490a      	ldr	r1, [pc, #40]	; (8002aa4 <adc_compensateOffset+0xe8>)
 8002a7a:	480b      	ldr	r0, [pc, #44]	; (8002aa8 <adc_compensateOffset+0xec>)
 8002a7c:	f01c f86c 	bl	801eb58 <siprintf>
	send_uart3(uartBufferTx);
 8002a80:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <adc_compensateOffset+0xec>)
 8002a82:	f7ff f841 	bl	8001b08 <send_uart3>


}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	cccccccd 	.word	0xcccccccd
 8002a94:	20000345 	.word	0x20000345
 8002a98:	66666667 	.word	0x66666667
 8002a9c:	2000ccc0 	.word	0x2000ccc0
 8002aa0:	20000018 	.word	0x20000018
 8002aa4:	080208c8 	.word	0x080208c8
 8002aa8:	20011e6c 	.word	0x20011e6c
 8002aac:	00000000 	.word	0x00000000

08002ab0 <adc_sample>:


}

// NEW ADC TI ADS8910 18bit, 1Msps, differencial
void adc_sample() {
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <adc_sample+0x1e0>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
	uint32_t receivedValue = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	607b      	str	r3, [r7, #4]
	isAdcDone = 0;
 8002ac0:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <adc_sample+0x1e4>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]

	// dummy data to clock data out of ADC = No operation command
	spiDataTx[0] = 0x00;	// 0000 1000
 8002ac6:	4b74      	ldr	r3, [pc, #464]	; (8002c98 <adc_sample+0x1e8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
	spiDataTx[1] = 0x00;	// 0000 0000
 8002acc:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <adc_sample+0x1e8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	705a      	strb	r2, [r3, #1]
	spiDataTx[2] = 0x00;	// 0000 0000
 8002ad2:	4b71      	ldr	r3, [pc, #452]	; (8002c98 <adc_sample+0x1e8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	709a      	strb	r2, [r3, #2]

	// starting conversion
	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_SET);
	// CONV port B pin 5
	// SET HIGH
	GPIOB->ODR |= (1<<5);
 8002ad8:	4b70      	ldr	r3, [pc, #448]	; (8002c9c <adc_sample+0x1ec>)
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	4a6f      	ldr	r2, [pc, #444]	; (8002c9c <adc_sample+0x1ec>)
 8002ade:	f043 0320 	orr.w	r3, r3, #32
 8002ae2:	6153      	str	r3, [r2, #20]
	//microDelay(1);

	//HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
	// CONV port B pin 5
	// SET LOW
	GPIOB->ODR &= ~(1<<5);
 8002ae4:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <adc_sample+0x1ec>)
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	4a6c      	ldr	r2, [pc, #432]	; (8002c9c <adc_sample+0x1ec>)
 8002aea:	f023 0320 	bic.w	r3, r3, #32
 8002aee:	6153      	str	r3, [r2, #20]

	// RVS port D pin 5 check for transition LOW-->HIGH
	//while( (GPIOD->IDR & 0x20) != 1);
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8002af0:	bf00      	nop
 8002af2:	2120      	movs	r1, #32
 8002af4:	486a      	ldr	r0, [pc, #424]	; (8002ca0 <adc_sample+0x1f0>)
 8002af6:	f006 fe95 	bl	8009824 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d1f8      	bne.n	8002af2 <adc_sample+0x42>
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002b00:	4b67      	ldr	r3, [pc, #412]	; (8002ca0 <adc_sample+0x1f0>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	4a66      	ldr	r2, [pc, #408]	; (8002ca0 <adc_sample+0x1f0>)
 8002b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0a:	6153      	str	r3, [r2, #20]

	//HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	4a65      	ldr	r2, [pc, #404]	; (8002ca4 <adc_sample+0x1f4>)
 8002b10:	4961      	ldr	r1, [pc, #388]	; (8002c98 <adc_sample+0x1e8>)
 8002b12:	4865      	ldr	r0, [pc, #404]	; (8002ca8 <adc_sample+0x1f8>)
 8002b14:	f00d f918 	bl	800fd48 <HAL_SPI_TransmitReceive_DMA>
	//HAL_SPI_TransmitReceive_IT(&hspi1, spiDataTx, spiDataRx, 4);
	//HAL_SPI_Receive_DMA(&hspi1, spiDataRx, 4);

	while (isWaitingForData > 0);
 8002b18:	bf00      	nop
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <adc_sample+0x1e0>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1fb      	bne.n	8002b1a <adc_sample+0x6a>

	// to CS HIGH
 	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 	// CS port D pin 6
 	// SET HIGH
 	GPIOD->ODR |= (1<<6);
 8002b22:	4b5f      	ldr	r3, [pc, #380]	; (8002ca0 <adc_sample+0x1f0>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4a5e      	ldr	r2, [pc, #376]	; (8002ca0 <adc_sample+0x1f0>)
 8002b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2c:	6153      	str	r3, [r2, #20]

	//shifting received byte data into final value
 	// ADS8690  // ADS8910
	receivedValue = (spiDataRx[2] >> 6) | (spiDataRx[1] << 2)	| (spiDataRx[0] << 10);
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <adc_sample+0x1f4>)
 8002b30:	789b      	ldrb	r3, [r3, #2]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <adc_sample+0x1f4>)
 8002b3a:	785b      	ldrb	r3, [r3, #1]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	4b58      	ldr	r3, [pc, #352]	; (8002ca4 <adc_sample+0x1f4>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	4313      	orrs	r3, r2
 8002b48:	607b      	str	r3, [r7, #4]

	measuredValue = receivedValue;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b54:	4b55      	ldr	r3, [pc, #340]	; (8002cac <adc_sample+0x1fc>)
 8002b56:	ed83 7b00 	vstr	d7, [r3]

	if(receivedValue <= 131071){
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b60:	d228      	bcs.n	8002bb4 <adc_sample+0x104>
		measuredValue = receivedValue;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b6c:	4b4f      	ldr	r3, [pc, #316]	; (8002cac <adc_sample+0x1fc>)
 8002b6e:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = (measuredValue * ADC_RESOLUTION);
 8002b72:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <adc_sample+0x1fc>)
 8002b74:	ed93 6b00 	vldr	d6, [r3]
 8002b78:	4b4d      	ldr	r3, [pc, #308]	; (8002cb0 <adc_sample+0x200>)
 8002b7a:	ed93 7b00 	vldr	d7, [r3]
 8002b7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <adc_sample+0x1fc>)
 8002b84:	ed83 7b00 	vstr	d7, [r3]
		// adding bidirectional offset value
		//measuredValue = measuredValue - (ADC_REF_VALUE * ADC_PGA*ADC_BIDIRECTIONAL);
		// shifting from mV to V value
		measuredValue /= 1000;
 8002b88:	4b48      	ldr	r3, [pc, #288]	; (8002cac <adc_sample+0x1fc>)
 8002b8a:	ed93 6b00 	vldr	d6, [r3]
 8002b8e:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002c80 <adc_sample+0x1d0>
 8002b92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b96:	4b45      	ldr	r3, [pc, #276]	; (8002cac <adc_sample+0x1fc>)
 8002b98:	ed83 7b00 	vstr	d7, [r3]
		//measuredValue *=2.186;
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 8002b9c:	4b43      	ldr	r3, [pc, #268]	; (8002cac <adc_sample+0x1fc>)
 8002b9e:	ed93 6b00 	vldr	d6, [r3]
 8002ba2:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <adc_sample+0x204>)
 8002ba4:	ed93 7b06 	vldr	d7, [r3, #24]
 8002ba8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bac:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <adc_sample+0x1fc>)
 8002bae:	ed83 7b00 	vstr	d7, [r3]
 8002bb2:	e033      	b.n	8002c1c <adc_sample+0x16c>
	}
	else{
		measuredValue = receivedValue - 0x1FFFF;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <adc_sample+0x208>)
 8002bb8:	4413      	add	r3, r2
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002bc2:	4b3a      	ldr	r3, [pc, #232]	; (8002cac <adc_sample+0x1fc>)
 8002bc4:	ed83 7b00 	vstr	d7, [r3]

		measuredValue = measuredValue * ADC_RESOLUTION; //(-ADC_REF_VALUE + temp);
 8002bc8:	4b38      	ldr	r3, [pc, #224]	; (8002cac <adc_sample+0x1fc>)
 8002bca:	ed93 6b00 	vldr	d6, [r3]
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <adc_sample+0x200>)
 8002bd0:	ed93 7b00 	vldr	d7, [r3]
 8002bd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bd8:	4b34      	ldr	r3, [pc, #208]	; (8002cac <adc_sample+0x1fc>)
 8002bda:	ed83 7b00 	vstr	d7, [r3]
		measuredValue = measuredValue - ADC_REF_VALUE;
 8002bde:	4b33      	ldr	r3, [pc, #204]	; (8002cac <adc_sample+0x1fc>)
 8002be0:	ed93 7b00 	vldr	d7, [r3]
 8002be4:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002c88 <adc_sample+0x1d8>
 8002be8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bec:	4b2f      	ldr	r3, [pc, #188]	; (8002cac <adc_sample+0x1fc>)
 8002bee:	ed83 7b00 	vstr	d7, [r3]
		// shifting from mV to V value
		measuredValue /= 1000;
 8002bf2:	4b2e      	ldr	r3, [pc, #184]	; (8002cac <adc_sample+0x1fc>)
 8002bf4:	ed93 6b00 	vldr	d6, [r3]
 8002bf8:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002c80 <adc_sample+0x1d0>
 8002bfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <adc_sample+0x1fc>)
 8002c02:	ed83 7b00 	vstr	d7, [r3]
		// adding measured DC offset value
		measuredValue -= settings.lastOffsetValue;
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <adc_sample+0x1fc>)
 8002c08:	ed93 6b00 	vldr	d6, [r3]
 8002c0c:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <adc_sample+0x204>)
 8002c0e:	ed93 7b06 	vldr	d7, [r3, #24]
 8002c12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c16:	4b25      	ldr	r3, [pc, #148]	; (8002cac <adc_sample+0x1fc>)
 8002c18:	ed83 7b00 	vstr	d7, [r3]
	}
*/

	// change range filling values
	//previousValues[SAMPLES - 1] = measuredValue;
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <adc_sample+0x20c>)
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <adc_sample+0x210>)
 8002c22:	fba3 1302 	umull	r1, r3, r3, r2
 8002c26:	08d9      	lsrs	r1, r3, #3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <adc_sample+0x1fc>)
 8002c38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c3c:	4921      	ldr	r1, [pc, #132]	; (8002cc4 <adc_sample+0x214>)
 8002c3e:	00d2      	lsls	r2, r2, #3
 8002c40:	440a      	add	r2, r1
 8002c42:	e9c2 3400 	strd	r3, r4, [r2]
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <adc_sample+0x20c>)
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <adc_sample+0x210>)
 8002c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c50:	08d9      	lsrs	r1, r3, #3
 8002c52:	460b      	mov	r3, r1
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <adc_sample+0x218>)
 8002c62:	7819      	ldrb	r1, [r3, #0]
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <adc_sample+0x21c>)
 8002c66:	5499      	strb	r1, [r3, r2]
	currentValuePosition++;
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <adc_sample+0x20c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <adc_sample+0x20c>)
 8002c72:	701a      	strb	r2, [r3, #0]


}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}
 8002c7c:	f3af 8000 	nop.w
 8002c80:	00000000 	.word	0x00000000
 8002c84:	408f4000 	.word	0x408f4000
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	40b38800 	.word	0x40b38800
 8002c90:	20000001 	.word	0x20000001
 8002c94:	20000323 	.word	0x20000323
 8002c98:	200059b0 	.word	0x200059b0
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40020c00 	.word	0x40020c00
 8002ca4:	2000dd14 	.word	0x2000dd14
 8002ca8:	200057b8 	.word	0x200057b8
 8002cac:	20000348 	.word	0x20000348
 8002cb0:	20000040 	.word	0x20000040
 8002cb4:	20000018 	.word	0x20000018
 8002cb8:	fffe0001 	.word	0xfffe0001
 8002cbc:	20000345 	.word	0x20000345
 8002cc0:	cccccccd 	.word	0xcccccccd
 8002cc4:	2000ccc0 	.word	0x2000ccc0
 8002cc8:	20000344 	.word	0x20000344
 8002ccc:	200075b8 	.word	0x200075b8

08002cd0 <adc_sample_ads8691>:


// OLD ADC TI ADS8691 18bit, 1Msps, with buffer, single ended
void adc_sample_ads8691() {
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0

	isWaitingForData = 1;
 8002cd6:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <adc_sample_ads8691+0x160>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
	uint32_t receivedValue = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]
	isAdcDone = 0;
 8002ce0:	4b54      	ldr	r3, [pc, #336]	; (8002e34 <adc_sample_ads8691+0x164>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]

	// dummy data to clock data out of ADC = No operation command
	spiDataTx[0] = 0x00;	// 0000 1000
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <adc_sample_ads8691+0x168>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
	spiDataTx[1] = 0x00;	// 0000 0000
 8002cec:	4b52      	ldr	r3, [pc, #328]	; (8002e38 <adc_sample_ads8691+0x168>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	705a      	strb	r2, [r3, #1]
	spiDataTx[2] = 0x00;	// 0000 0000
 8002cf2:	4b51      	ldr	r3, [pc, #324]	; (8002e38 <adc_sample_ads8691+0x168>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	709a      	strb	r2, [r3, #2]
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002cf8:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	4a4f      	ldr	r2, [pc, #316]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d02:	6153      	str	r3, [r2, #20]

	// to CS HIGH
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
	// CS port D pin 6
	// SET HIGH
	GPIOD->ODR |= (1<<6);
 8002d04:	4b4d      	ldr	r3, [pc, #308]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	4a4c      	ldr	r2, [pc, #304]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0e:	6153      	str	r3, [r2, #20]

	// RVS port D pin 5 check for transition LOW-->HIGH
	//while( (GPIOD->IDR & 0x20) != 1);
	while(HAL_GPIO_ReadPin(ADC_RSV_PORT, ADC_RSV_PIN) != GPIO_PIN_SET);
 8002d10:	bf00      	nop
 8002d12:	2120      	movs	r1, #32
 8002d14:	4849      	ldr	r0, [pc, #292]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d16:	f006 fd85 	bl	8009824 <HAL_GPIO_ReadPin>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d1f8      	bne.n	8002d12 <adc_sample_ads8691+0x42>
	// acquiring measured data
	// to CS LOW
	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
	// CS port D pin 6
	// SET LOW
	GPIOD->ODR &= ~(1<<6);
 8002d20:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	4a45      	ldr	r2, [pc, #276]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d2a:	6153      	str	r3, [r2, #20]

	//HAL_SPI_TransmitReceive(&hspi1, spiDataTx, spiDataRx, 4, 1000);
	HAL_SPI_TransmitReceive_DMA(&hspi1, spiDataTx, spiDataRx, 3);
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	4a44      	ldr	r2, [pc, #272]	; (8002e40 <adc_sample_ads8691+0x170>)
 8002d30:	4941      	ldr	r1, [pc, #260]	; (8002e38 <adc_sample_ads8691+0x168>)
 8002d32:	4844      	ldr	r0, [pc, #272]	; (8002e44 <adc_sample_ads8691+0x174>)
 8002d34:	f00d f808 	bl	800fd48 <HAL_SPI_TransmitReceive_DMA>
	//HAL_SPI_TransmitReceive_IT(&hspi1, spiDataTx, spiDataRx, 4);
	//HAL_SPI_Receive_DMA(&hspi1, spiDataRx, 4);

	while (isWaitingForData > 0);
 8002d38:	bf00      	nop
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <adc_sample_ads8691+0x160>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1fb      	bne.n	8002d3a <adc_sample_ads8691+0x6a>

	// to CS HIGH
 	//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 	// CS port D pin 6
 	// SET HIGH
 	GPIOD->ODR |= (1<<6);
 8002d42:	4b3e      	ldr	r3, [pc, #248]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4a3d      	ldr	r2, [pc, #244]	; (8002e3c <adc_sample_ads8691+0x16c>)
 8002d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d4c:	6153      	str	r3, [r2, #20]

	//shifting received byte data into final value
 	// ADS8690  // ADS8910
	receivedValue = (spiDataRx[2] >> 6) | (spiDataRx[1] << 2)	| (spiDataRx[0] << 10);
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	; (8002e40 <adc_sample_ads8691+0x170>)
 8002d50:	789b      	ldrb	r3, [r3, #2]
 8002d52:	099b      	lsrs	r3, r3, #6
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <adc_sample_ads8691+0x170>)
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <adc_sample_ads8691+0x170>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	029b      	lsls	r3, r3, #10
 8002d66:	4313      	orrs	r3, r2
 8002d68:	607b      	str	r3, [r7, #4]

	measuredValue = receivedValue;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d76:	ed83 7b00 	vstr	d7, [r3]
	//measuredValue = (measuredValue * (0.09375));
	measuredValue = (measuredValue * ADC_RESOLUTION);
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d7c:	ed93 6b00 	vldr	d6, [r3]
 8002d80:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <adc_sample_ads8691+0x17c>)
 8002d82:	ed93 7b00 	vldr	d7, [r3]
 8002d86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d8c:	ed83 7b00 	vstr	d7, [r3]
	//measuredValue = ( measuredValue * ( (ADC_REF_VALUE*ADC_PGA*2) / ADC_SCALE ) );

	// adding bidirectional offset value
	measuredValue = measuredValue - (ADC_REF_VALUE * ADC_PGA*ADC_BIDIRECTIONAL);
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d96:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d98:	e9c2 3400 	strd	r3, r4, [r2]
	// shifting from mV to V value
	measuredValue /= 1000;
 8002d9c:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002d9e:	ed93 6b00 	vldr	d6, [r3]
 8002da2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002e28 <adc_sample_ads8691+0x158>
 8002da6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002daa:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002dac:	ed83 7b00 	vstr	d7, [r3]
	// adding measured DC offset value
	measuredValue -= settings.lastOffsetValue;
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002db2:	ed93 6b00 	vldr	d6, [r3]
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <adc_sample_ads8691+0x180>)
 8002db8:	ed93 7b06 	vldr	d7, [r3, #24]
 8002dbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002dc2:	ed83 7b00 	vstr	d7, [r3]
	}
*/

	// change range filling values
	//previousValues[SAMPLES - 1] = measuredValue;
	previousValues[currentValuePosition % SAMPLES] = measuredValue;
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <adc_sample_ads8691+0x184>)
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <adc_sample_ads8691+0x188>)
 8002dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd0:	08d9      	lsrs	r1, r3, #3
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <adc_sample_ads8691+0x178>)
 8002de2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002de6:	491d      	ldr	r1, [pc, #116]	; (8002e5c <adc_sample_ads8691+0x18c>)
 8002de8:	00d2      	lsls	r2, r2, #3
 8002dea:	440a      	add	r2, r1
 8002dec:	e9c2 3400 	strd	r3, r4, [r2]
	previousValuesRange[currentValuePosition % SAMPLES]= currentRange;
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <adc_sample_ads8691+0x184>)
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <adc_sample_ads8691+0x188>)
 8002df6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfa:	08d9      	lsrs	r1, r3, #3
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <adc_sample_ads8691+0x190>)
 8002e0c:	7819      	ldrb	r1, [r3, #0]
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <adc_sample_ads8691+0x194>)
 8002e10:	5499      	strb	r1, [r3, r2]
	currentValuePosition++;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <adc_sample_ads8691+0x184>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <adc_sample_ads8691+0x184>)
 8002e1c:	701a      	strb	r2, [r3, #0]


}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}
 8002e26:	bf00      	nop
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	408f4000 	.word	0x408f4000
 8002e30:	20000001 	.word	0x20000001
 8002e34:	20000323 	.word	0x20000323
 8002e38:	200059b0 	.word	0x200059b0
 8002e3c:	40020c00 	.word	0x40020c00
 8002e40:	2000dd14 	.word	0x2000dd14
 8002e44:	200057b8 	.word	0x200057b8
 8002e48:	20000348 	.word	0x20000348
 8002e4c:	20000040 	.word	0x20000040
 8002e50:	20000018 	.word	0x20000018
 8002e54:	20000345 	.word	0x20000345
 8002e58:	cccccccd 	.word	0xcccccccd
 8002e5c:	2000ccc0 	.word	0x2000ccc0
 8002e60:	20000344 	.word	0x20000344
 8002e64:	200075b8 	.word	0x200075b8

08002e68 <ranges>:

void ranges() {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
		//check_range_linear(previousValues[SAMPLES - 1], b);
		check_range_linear(previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES], b);
	}
	else{

		if(rangeMode == 4){
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <ranges+0xe0>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11a      	bne.n	8002eaa <ranges+0x42>
			change_range((float)previousValues[ (currentValuePosition + SAMPLES - 1)%SAMPLES]);
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <ranges+0xe4>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f103 0109 	add.w	r1, r3, #9
 8002e7c:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <ranges+0xe8>)
 8002e7e:	fb83 2301 	smull	r2, r3, r3, r1
 8002e82:	109a      	asrs	r2, r3, #2
 8002e84:	17cb      	asrs	r3, r1, #31
 8002e86:	1ad2      	subs	r2, r2, r3
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	1aca      	subs	r2, r1, r3
 8002e92:	4930      	ldr	r1, [pc, #192]	; (8002f54 <ranges+0xec>)
 8002e94:	00d3      	lsls	r3, r2, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	ed93 7b00 	vldr	d7, [r3]
 8002e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea4:	f7ff fc74 	bl	8002790 <change_range>


	//change_range((float)previousValues[ (currentValuePosition + SAMPLES - 1)%SAMPLES]);


}
 8002ea8:	e04c      	b.n	8002f44 <ranges+0xdc>
		else if(rangeMode == 0){
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <ranges+0xe0>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <ranges+0x64>
			currentRange = 0;
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <ranges+0xf0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
			setRangeNA(1);
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7ff fbe9 	bl	8002690 <setRangeNA>
			setRangeUA(0);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7ff fc10 	bl	80026e4 <setRangeUA>
			setRangeMA(0);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7ff fc37 	bl	8002738 <setRangeMA>
}
 8002eca:	e03b      	b.n	8002f44 <ranges+0xdc>
		else if(rangeMode == 1){
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <ranges+0xe0>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10c      	bne.n	8002eee <ranges+0x86>
			currentRange = 1;
 8002ed4:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <ranges+0xf0>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
			setRangeNA(0);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7ff fbd8 	bl	8002690 <setRangeNA>
			setRangeUA(1);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7ff fbff 	bl	80026e4 <setRangeUA>
			setRangeMA(0);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7ff fc26 	bl	8002738 <setRangeMA>
}
 8002eec:	e02a      	b.n	8002f44 <ranges+0xdc>
		else if(rangeMode == 2){
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <ranges+0xe0>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d10c      	bne.n	8002f10 <ranges+0xa8>
			currentRange = 2;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <ranges+0xf0>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
			setRangeNA(0);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7ff fbc7 	bl	8002690 <setRangeNA>
			setRangeUA(0);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7ff fbee 	bl	80026e4 <setRangeUA>
			setRangeMA(1);
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f7ff fc15 	bl	8002738 <setRangeMA>
}
 8002f0e:	e019      	b.n	8002f44 <ranges+0xdc>
			change_range((float)previousValues[ (currentValuePosition + SAMPLES - 1)%SAMPLES]);
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <ranges+0xe4>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f103 0109 	add.w	r1, r3, #9
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <ranges+0xe8>)
 8002f1a:	fb83 2301 	smull	r2, r3, r3, r1
 8002f1e:	109a      	asrs	r2, r3, #2
 8002f20:	17cb      	asrs	r3, r1, #31
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	1aca      	subs	r2, r1, r3
 8002f2e:	4909      	ldr	r1, [pc, #36]	; (8002f54 <ranges+0xec>)
 8002f30:	00d3      	lsls	r3, r2, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	ed93 7b00 	vldr	d7, [r3]
 8002f38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	f7ff fc26 	bl	8002790 <change_range>
}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	2000000c 	.word	0x2000000c
 8002f4c:	20000345 	.word	0x20000345
 8002f50:	66666667 	.word	0x66666667
 8002f54:	2000ccc0 	.word	0x2000ccc0
 8002f58:	20000344 	.word	0x20000344
 8002f5c:	00000000 	.word	0x00000000

08002f60 <previousValueToCurrent>:

// convert measured voltage and its range to final current value
double previousValueToCurrent (uint8_t index){
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]

	// nA
	if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 0){
 8002f6a:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <previousValueToCurrent+0x170>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f103 020a 	add.w	r2, r3, #10
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	1ad1      	subs	r1, r2, r3
 8002f76:	4b57      	ldr	r3, [pc, #348]	; (80030d4 <previousValueToCurrent+0x174>)
 8002f78:	fb83 2301 	smull	r2, r3, r3, r1
 8002f7c:	109a      	asrs	r2, r3, #2
 8002f7e:	17cb      	asrs	r3, r1, #31
 8002f80:	1ad2      	subs	r2, r2, r3
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	1aca      	subs	r2, r1, r3
 8002f8c:	4b52      	ldr	r3, [pc, #328]	; (80030d8 <previousValueToCurrent+0x178>)
 8002f8e:	5c9b      	ldrb	r3, [r3, r2]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d11a      	bne.n	8002fca <previousValueToCurrent+0x6a>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000000);
 8002f94:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <previousValueToCurrent+0x170>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	f103 020a 	add.w	r2, r3, #10
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	1ad1      	subs	r1, r2, r3
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <previousValueToCurrent+0x174>)
 8002fa2:	fb83 2301 	smull	r2, r3, r3, r1
 8002fa6:	109a      	asrs	r2, r3, #2
 8002fa8:	17cb      	asrs	r3, r1, #31
 8002faa:	1ad2      	subs	r2, r2, r3
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	1aca      	subs	r2, r1, r3
 8002fb6:	4949      	ldr	r1, [pc, #292]	; (80030dc <previousValueToCurrent+0x17c>)
 8002fb8:	00d3      	lsls	r3, r2, #3
 8002fba:	440b      	add	r3, r1
 8002fbc:	ed93 6b00 	vldr	d6, [r3]
 8002fc0:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 80030c0 <previousValueToCurrent+0x160>
 8002fc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002fc8:	e071      	b.n	80030ae <previousValueToCurrent+0x14e>
	}
	// uA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 1){
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <previousValueToCurrent+0x170>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	f103 020a 	add.w	r2, r3, #10
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	1ad1      	subs	r1, r2, r3
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <previousValueToCurrent+0x174>)
 8002fd8:	fb83 2301 	smull	r2, r3, r3, r1
 8002fdc:	109a      	asrs	r2, r3, #2
 8002fde:	17cb      	asrs	r3, r1, #31
 8002fe0:	1ad2      	subs	r2, r2, r3
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	1aca      	subs	r2, r1, r3
 8002fec:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <previousValueToCurrent+0x178>)
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d11a      	bne.n	800302a <previousValueToCurrent+0xca>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES] / 1000);
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <previousValueToCurrent+0x170>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	f103 020a 	add.w	r2, r3, #10
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	1ad1      	subs	r1, r2, r3
 8003000:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <previousValueToCurrent+0x174>)
 8003002:	fb83 2301 	smull	r2, r3, r3, r1
 8003006:	109a      	asrs	r2, r3, #2
 8003008:	17cb      	asrs	r3, r1, #31
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	1aca      	subs	r2, r1, r3
 8003016:	4931      	ldr	r1, [pc, #196]	; (80030dc <previousValueToCurrent+0x17c>)
 8003018:	00d3      	lsls	r3, r2, #3
 800301a:	440b      	add	r3, r1
 800301c:	ed93 6b00 	vldr	d6, [r3]
 8003020:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80030c8 <previousValueToCurrent+0x168>
 8003024:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003028:	e041      	b.n	80030ae <previousValueToCurrent+0x14e>
	}
	// mA
	else if (previousValuesRange[(currentValuePosition + SAMPLES - index)%SAMPLES] == 2){
 800302a:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <previousValueToCurrent+0x170>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	f103 020a 	add.w	r2, r3, #10
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	1ad1      	subs	r1, r2, r3
 8003036:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <previousValueToCurrent+0x174>)
 8003038:	fb83 2301 	smull	r2, r3, r3, r1
 800303c:	109a      	asrs	r2, r3, #2
 800303e:	17cb      	asrs	r3, r1, #31
 8003040:	1ad2      	subs	r2, r2, r3
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	1aca      	subs	r2, r1, r3
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <previousValueToCurrent+0x178>)
 800304e:	5c9b      	ldrb	r3, [r3, r2]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d116      	bne.n	8003082 <previousValueToCurrent+0x122>
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 8003054:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <previousValueToCurrent+0x170>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	f103 020a 	add.w	r2, r3, #10
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	1ad1      	subs	r1, r2, r3
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <previousValueToCurrent+0x174>)
 8003062:	fb83 2301 	smull	r2, r3, r3, r1
 8003066:	109a      	asrs	r2, r3, #2
 8003068:	17cb      	asrs	r3, r1, #31
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	1aca      	subs	r2, r1, r3
 8003076:	4919      	ldr	r1, [pc, #100]	; (80030dc <previousValueToCurrent+0x17c>)
 8003078:	00d3      	lsls	r3, r2, #3
 800307a:	440b      	add	r3, r1
 800307c:	ed93 7b00 	vldr	d7, [r3]
 8003080:	e015      	b.n	80030ae <previousValueToCurrent+0x14e>
	}
	else{
		// leaving as is indicating error during operation
		return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <previousValueToCurrent+0x170>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	f103 020a 	add.w	r2, r3, #10
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	1ad1      	subs	r1, r2, r3
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <previousValueToCurrent+0x174>)
 8003090:	fb83 2301 	smull	r2, r3, r3, r1
 8003094:	109a      	asrs	r2, r3, #2
 8003096:	17cb      	asrs	r3, r1, #31
 8003098:	1ad2      	subs	r2, r2, r3
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	1aca      	subs	r2, r1, r3
 80030a4:	490d      	ldr	r1, [pc, #52]	; (80030dc <previousValueToCurrent+0x17c>)
 80030a6:	00d3      	lsls	r3, r2, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	ed93 7b00 	vldr	d7, [r3]
	}

	return (previousValues[(currentValuePosition + SAMPLES - index)%SAMPLES]);


}
 80030ae:	eeb0 0b47 	vmov.f64	d0, d7
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	f3af 8000 	nop.w
 80030c0:	00000000 	.word	0x00000000
 80030c4:	412e8480 	.word	0x412e8480
 80030c8:	00000000 	.word	0x00000000
 80030cc:	408f4000 	.word	0x408f4000
 80030d0:	20000345 	.word	0x20000345
 80030d4:	66666667 	.word	0x66666667
 80030d8:	200075b8 	.word	0x200075b8
 80030dc:	2000ccc0 	.word	0x2000ccc0

080030e0 <averaging>:

double averaging (){
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0

	double resultValue = 0;
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if(settings.isAveraging == 1){
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <averaging+0xa4>)
 80030f4:	7b1b      	ldrb	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d136      	bne.n	8003168 <averaging+0x88>

		if(settings.samplingInterval >= 100){
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <averaging+0xa4>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b63      	cmp	r3, #99	; 0x63
 8003100:	d916      	bls.n	8003130 <averaging+0x50>

			for (uint8_t i = 1;  i < 4; i++)
 8003102:	2301      	movs	r3, #1
 8003104:	71fb      	strb	r3, [r7, #7]
 8003106:	e008      	b.n	800311a <averaging+0x3a>
				//resultValue += previousValues[SAMPLES - i];
				//resultValue += previousValues[(currentValuePosition + SAMPLES - i)%SAMPLES];
				resultValue = previousValueToCurrent((uint8_t)i);
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff28 	bl	8002f60 <previousValueToCurrent>
 8003110:	ed87 0b02 	vstr	d0, [r7, #8]
			for (uint8_t i = 1;  i < 4; i++)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	3301      	adds	r3, #1
 8003118:	71fb      	strb	r3, [r7, #7]
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d9f3      	bls.n	8003108 <averaging+0x28>

			resultValue /= 3;
 8003120:	ed97 6b02 	vldr	d6, [r7, #8]
 8003124:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003128:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800312c:	ed87 7b02 	vstr	d7, [r7, #8]

		}
		if(settings.samplingInterval >= 200){
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <averaging+0xa4>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2bc7      	cmp	r3, #199	; 0xc7
 8003136:	d91c      	bls.n	8003172 <averaging+0x92>

			for (uint8_t i = 1;  i < 7; i++)
 8003138:	2301      	movs	r3, #1
 800313a:	71bb      	strb	r3, [r7, #6]
 800313c:	e008      	b.n	8003150 <averaging+0x70>
				//resultValue += previousValues[SAMPLES - i];
				//resultValue += previousValues[(currentValuePosition + SAMPLES - i)%SAMPLES];
				resultValue = previousValueToCurrent((uint8_t)i);
 800313e:	79bb      	ldrb	r3, [r7, #6]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff0d 	bl	8002f60 <previousValueToCurrent>
 8003146:	ed87 0b02 	vstr	d0, [r7, #8]
			for (uint8_t i = 1;  i < 7; i++)
 800314a:	79bb      	ldrb	r3, [r7, #6]
 800314c:	3301      	adds	r3, #1
 800314e:	71bb      	strb	r3, [r7, #6]
 8003150:	79bb      	ldrb	r3, [r7, #6]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d9f3      	bls.n	800313e <averaging+0x5e>

			resultValue /= 6;
 8003156:	ed97 6b02 	vldr	d6, [r7, #8]
 800315a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800315e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003162:	ed87 7b02 	vstr	d7, [r7, #8]
 8003166:	e004      	b.n	8003172 <averaging+0x92>
	}
	else{

		//resultValue = previousValues[SAMPLES-1];
		//resultValue = previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES];
		resultValue = previousValueToCurrent((uint8_t)1);
 8003168:	2001      	movs	r0, #1
 800316a:	f7ff fef9 	bl	8002f60 <previousValueToCurrent>
 800316e:	ed87 0b02 	vstr	d0, [r7, #8]
	}


	return resultValue;
 8003172:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003176:	ec44 3b17 	vmov	d7, r3, r4



}
 800317a:	eeb0 0b47 	vmov.f64	d0, d7
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	20000018 	.word	0x20000018

08003188 <triggerMenu>:


// program will check every measuring period if sample value is greater or equal to trigger level
// and also if trigger menu is activated plus if it was activated before --> if all check in it then starts measurement
// TODO - possibly implement HW trigger (ADC8691) allows settings High and Low + hysteresis values and send interrupt when exceeding values
void triggerMenu(){
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0

	//if(previousValues[SAMPLES-1] >= triggerLevel && isTriggered == 0 && isTriggerActive == 1){
	if(averaging() >= settings.triggerLevel && isTriggered == 0 && settings.isTriggerActive == 1){
 800318c:	f7ff ffa8 	bl	80030e0 <averaging>
 8003190:	eeb0 6b40 	vmov.f64	d6, d0
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <triggerMenu+0x40>)
 8003196:	ed93 7b04 	vldr	d7, [r3, #16]
 800319a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a2:	da00      	bge.n	80031a6 <triggerMenu+0x1e>
		isMeasuring = 1;

	}


}
 80031a4:	e00d      	b.n	80031c2 <triggerMenu+0x3a>
	if(averaging() >= settings.triggerLevel && isTriggered == 0 && settings.isTriggerActive == 1){
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <triggerMenu+0x44>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <triggerMenu+0x3a>
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <triggerMenu+0x40>)
 80031b0:	7b5b      	ldrb	r3, [r3, #13]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d105      	bne.n	80031c2 <triggerMenu+0x3a>
		isTriggered = 1;
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <triggerMenu+0x44>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
		isMeasuring = 1;
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <triggerMenu+0x48>)
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000018 	.word	0x20000018
 80031cc:	20000314 	.word	0x20000314
 80031d0:	20000322 	.word	0x20000322

080031d4 <decimalToHex>:

// convert 1 Byte decimal value to 1 byte hex value
uint8_t decimalToHex(uint8_t decimal){
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]

	uint8_t highValue = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
	uint8_t lowValue = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73bb      	strb	r3, [r7, #14]
	uint8_t result = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	737b      	strb	r3, [r7, #13]

	lowValue = decimal%16;
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	73bb      	strb	r3, [r7, #14]

	while(decimal >=16){
 80031f2:	e005      	b.n	8003200 <decimalToHex+0x2c>
		highValue++;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	3301      	adds	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
		decimal -=16;
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	3b10      	subs	r3, #16
 80031fe:	71fb      	strb	r3, [r7, #7]
	while(decimal >=16){
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d8f6      	bhi.n	80031f4 <decimalToHex+0x20>
	}

	result = lowValue | highValue << 4;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	b25a      	sxtb	r2, r3
 800320c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003210:	4313      	orrs	r3, r2
 8003212:	b25b      	sxtb	r3, r3
 8003214:	737b      	strb	r3, [r7, #13]

	return result;
 8003216:	7b7b      	ldrb	r3, [r7, #13]


}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <convertInputToInt>:
	return 999;


}*/

uint16_t convertInputToInt (uint8_t expectedLength, uint8_t *inputWord){
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	71fb      	strb	r3, [r7, #7]

	uint8_t inputLen = strlen(inputWord);
 8003230:	6838      	ldr	r0, [r7, #0]
 8003232:	f7fd f80f 	bl	8000254 <strlen>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]

	if (expectedLength + 2 >= inputLen) {
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	429a      	cmp	r2, r3
 8003242:	db05      	blt.n	8003250 <convertInputToInt+0x2c>
		return atoi(inputWord);
 8003244:	6838      	ldr	r0, [r7, #0]
 8003246:	f01a ff43 	bl	801e0d0 <atoi>
 800324a:	4603      	mov	r3, r0
 800324c:	b29b      	uxth	r3, r3
 800324e:	e001      	b.n	8003254 <convertInputToInt+0x30>
	} else {
		//send_uart("\nERR-Command length mismatch\n");
		return 999;
 8003250:	f240 33e7 	movw	r3, #999	; 0x3e7

	return 999;



}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <flushUart>:



}*/

void flushUart(){
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0

	uint8_t dummy = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	71fb      	strb	r3, [r7, #7]

	while(UART_RX_AVAILABLE_BYTE() > 0)
 8003266:	e004      	b.n	8003272 <flushUart+0x16>
		UART_RX_Read(&dummy, 1);
 8003268:	1dfb      	adds	r3, r7, #7
 800326a:	2101      	movs	r1, #1
 800326c:	4618      	mov	r0, r3
 800326e:	f004 ff41 	bl	80080f4 <UART_RX_Read>
	while(UART_RX_AVAILABLE_BYTE() > 0)
 8003272:	f004 ff53 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f5      	bne.n	8003268 <flushUart+0xc>

}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <printSettingsValues>:

void printSettingsValues(){
 8003284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003286:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 800328a:	af0e      	add	r7, sp, #56	; 0x38

	//send_uart("\nSettings\n");
	uint8_t txBuffer [1024];
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
			" Trigger level [A]: %1.12f\n Offset value [mV]: %1.12f\n Power source - Voltage [mV]: %d\n Power source - Current limit [mA]: %d\n Power source enabled: %d\n Power source enable mode: %d\n",
			settings.isLoggingToConsole,
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <printSettingsValues+0xb0>)
 800328e:	781b      	ldrb	r3, [r3, #0]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8003290:	469c      	mov	ip, r3
			settings.isLoggingToSD,
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <printSettingsValues+0xb0>)
 8003294:	785b      	ldrb	r3, [r3, #1]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 8003296:	469e      	mov	lr, r3
			settings.isLoggingToUSB,
 8003298:	4b26      	ldr	r3, [pc, #152]	; (8003334 <printSettingsValues+0xb0>)
 800329a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 800329e:	61fb      	str	r3, [r7, #28]
			settings.isLoggingToEthernet,
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <printSettingsValues+0xb0>)
 80032a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	4b22      	ldr	r3, [pc, #136]	; (8003334 <printSettingsValues+0xb0>)
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	617a      	str	r2, [r7, #20]
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <printSettingsValues+0xb0>)
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	6139      	str	r1, [r7, #16]
			settings.measuringInterval,
			settings.samplingInterval,
			settings.isAveraging,
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <printSettingsValues+0xb0>)
 80032b6:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032b8:	60fb      	str	r3, [r7, #12]
			settings.isTriggerActive,
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <printSettingsValues+0xb0>)
 80032bc:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <printSettingsValues+0xb0>)
 80032c2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <printSettingsValues+0xb0>)
 80032c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
			settings.triggerLevel,
			settings.lastOffsetValue,
			settings.powerSourceVoltage,
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <printSettingsValues+0xb0>)
 80032ce:	8c1b      	ldrh	r3, [r3, #32]
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032d0:	607b      	str	r3, [r7, #4]
			settings.powerSourceCurrent,
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <printSettingsValues+0xb0>)
 80032d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032d6:	603b      	str	r3, [r7, #0]
			settings.powerSourceEnable,
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <printSettingsValues+0xb0>)
 80032da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032de:	461e      	mov	r6, r3
			settings.powerSourceEnableMode);
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <printSettingsValues+0xb0>)
 80032e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	sprintf(txBuffer, "\nSettings\n Logging to console: %d\n Logging to SD card: %d\n Logging to USB flash drive: %d\n Logging to Ethernet: %d\n Measuring interval [us]: %d\n Sampling interval [us]: %d\n Averaging function enabled: %d\n Trigger function eneabled: %d\n"
 80032e6:	f107 0020 	add.w	r0, r7, #32
 80032ea:	930d      	str	r3, [sp, #52]	; 0x34
 80032ec:	960c      	str	r6, [sp, #48]	; 0x30
 80032ee:	683e      	ldr	r6, [r7, #0]
 80032f0:	960b      	str	r6, [sp, #44]	; 0x2c
 80032f2:	687e      	ldr	r6, [r7, #4]
 80032f4:	960a      	str	r6, [sp, #40]	; 0x28
 80032f6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80032fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80032fe:	68bc      	ldr	r4, [r7, #8]
 8003300:	9405      	str	r4, [sp, #20]
 8003302:	68fc      	ldr	r4, [r7, #12]
 8003304:	9404      	str	r4, [sp, #16]
 8003306:	6939      	ldr	r1, [r7, #16]
 8003308:	9103      	str	r1, [sp, #12]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	9202      	str	r2, [sp, #8]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	9201      	str	r2, [sp, #4]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	4673      	mov	r3, lr
 8003318:	4662      	mov	r2, ip
 800331a:	4907      	ldr	r1, [pc, #28]	; (8003338 <printSettingsValues+0xb4>)
 800331c:	f01b fc1c 	bl	801eb58 <siprintf>
	send_uart3(txBuffer);
 8003320:	f107 0320 	add.w	r3, r7, #32
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fbef 	bl	8001b08 <send_uart3>



}
 800332a:	bf00      	nop
 800332c:	f207 4724 	addw	r7, r7, #1060	; 0x424
 8003330:	46bd      	mov	sp, r7
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003334:	20000018 	.word	0x20000018
 8003338:	080208dc 	.word	0x080208dc

0800333c <printLastMeasuredValues>:


void printLastMeasuredValues(){
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b09d      	sub	sp, #116	; 0x74
 8003340:	af02      	add	r7, sp, #8

	uint8_t txBuffer [100];

	send_uart3("\nLast measured values\n");
 8003342:	481a      	ldr	r0, [pc, #104]	; (80033ac <printLastMeasuredValues+0x70>)
 8003344:	f7fe fbe0 	bl	8001b08 <send_uart3>
	sprintf(txBuffer, "Buffer contains: %d samples\n", SAMPLES);
 8003348:	463b      	mov	r3, r7
 800334a:	220a      	movs	r2, #10
 800334c:	4918      	ldr	r1, [pc, #96]	; (80033b0 <printLastMeasuredValues+0x74>)
 800334e:	4618      	mov	r0, r3
 8003350:	f01b fc02 	bl	801eb58 <siprintf>
	send_uart3(txBuffer);
 8003354:	463b      	mov	r3, r7
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fbd6 	bl	8001b08 <send_uart3>

	for(uint8_t i = SAMPLES; i > 0; i--){
 800335c:	230a      	movs	r3, #10
 800335e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003362:	e01b      	b.n	800339c <printLastMeasuredValues+0x60>
		sprintf(txBuffer,"Measured value %3d [A]: %1.12f\n", (i+SAMPLES-1%SAMPLES), previousValueToCurrent(i));
 8003364:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003368:	f103 0409 	add.w	r4, r3, #9
 800336c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fdf5 	bl	8002f60 <previousValueToCurrent>
 8003376:	eeb0 7b40 	vmov.f64	d7, d0
 800337a:	463b      	mov	r3, r7
 800337c:	ed8d 7b00 	vstr	d7, [sp]
 8003380:	4622      	mov	r2, r4
 8003382:	490c      	ldr	r1, [pc, #48]	; (80033b4 <printLastMeasuredValues+0x78>)
 8003384:	4618      	mov	r0, r3
 8003386:	f01b fbe7 	bl	801eb58 <siprintf>
		send_uart3(txBuffer);
 800338a:	463b      	mov	r3, r7
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe fbbb 	bl	8001b08 <send_uart3>
	for(uint8_t i = SAMPLES; i > 0; i--){
 8003392:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003396:	3b01      	subs	r3, #1
 8003398:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800339c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1df      	bne.n	8003364 <printLastMeasuredValues+0x28>


	}
}
 80033a4:	bf00      	nop
 80033a6:	376c      	adds	r7, #108	; 0x6c
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	08020a80 	.word	0x08020a80
 80033b0:	08020a98 	.word	0x08020a98
 80033b4:	08020ab8 	.word	0x08020ab8

080033b8 <printCurrentTimeDate>:

void printCurrentTimeDate(){
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b0c5      	sub	sp, #276	; 0x114
 80033bc:	af04      	add	r7, sp, #16

	uint8_t txBuffer [250];

	/* Get the RTC current Time and Date */
	 HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80033be:	2200      	movs	r2, #0
 80033c0:	4917      	ldr	r1, [pc, #92]	; (8003420 <printCurrentTimeDate+0x68>)
 80033c2:	4818      	ldr	r0, [pc, #96]	; (8003424 <printCurrentTimeDate+0x6c>)
 80033c4:	f00a f9f0 	bl	800d7a8 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80033c8:	2200      	movs	r2, #0
 80033ca:	4917      	ldr	r1, [pc, #92]	; (8003428 <printCurrentTimeDate+0x70>)
 80033cc:	4815      	ldr	r0, [pc, #84]	; (8003424 <printCurrentTimeDate+0x6c>)
 80033ce:	f00a faf1 	bl	800d9b4 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss */
	/* Display date Format: dd-mm-yy */
	sprintf(txBuffer,"Time [hh:mm:ss] and Date [dd-mm-yy]\n %02d:%02d:%02d_%02d-%02d-%2d\n",Time.Hours, Time.Minutes, Time.Seconds, Date.Date, Date.Month, 2000 + Date.Year);
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <printCurrentTimeDate+0x68>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461d      	mov	r5, r3
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <printCurrentTimeDate+0x68>)
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	461e      	mov	r6, r3
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <printCurrentTimeDate+0x68>)
 80033e0:	789b      	ldrb	r3, [r3, #2]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <printCurrentTimeDate+0x70>)
 80033e6:	789b      	ldrb	r3, [r3, #2]
 80033e8:	4619      	mov	r1, r3
 80033ea:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <printCurrentTimeDate+0x70>)
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	461c      	mov	r4, r3
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <printCurrentTimeDate+0x70>)
 80033f2:	78db      	ldrb	r3, [r3, #3]
 80033f4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80033f8:	1d38      	adds	r0, r7, #4
 80033fa:	9303      	str	r3, [sp, #12]
 80033fc:	9402      	str	r4, [sp, #8]
 80033fe:	9101      	str	r1, [sp, #4]
 8003400:	9200      	str	r2, [sp, #0]
 8003402:	4633      	mov	r3, r6
 8003404:	462a      	mov	r2, r5
 8003406:	4909      	ldr	r1, [pc, #36]	; (800342c <printCurrentTimeDate+0x74>)
 8003408:	f01b fba6 	bl	801eb58 <siprintf>

	send_uart3(txBuffer);
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fb7a 	bl	8001b08 <send_uart3>

}
 8003414:	bf00      	nop
 8003416:	f507 7782 	add.w	r7, r7, #260	; 0x104
 800341a:	46bd      	mov	sp, r7
 800341c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800341e:	bf00      	nop
 8003420:	20008c44 	.word	0x20008c44
 8003424:	20003440 	.word	0x20003440
 8003428:	200072a0 	.word	0x200072a0
 800342c:	08020ad8 	.word	0x08020ad8

08003430 <getConsoleInput>:

}*/

// function to read defined number of chars from uart ring buffer
// if timeout value will be 0 then it will act as blocking function waiting for atleast 1 char otherwise it will wait for defined number of chars or timeout
uint8_t getConsoleInput(uint8_t *buffer, uint8_t commandLength, uint32_t timeoutValue){
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	460b      	mov	r3, r1
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	72fb      	strb	r3, [r7, #11]

	// set flags
	//isWaitingForData = 1;
	uint32_t consoleInputTime = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
	// reset timer
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003442:	4b3c      	ldr	r3, [pc, #240]	; (8003534 <getConsoleInput+0x104>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
	// null buffer
	for(uint8_t i = 0; i < 10; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e007      	b.n	8003460 <getConsoleInput+0x30>
		buffer[i] = 0;
 8003450:	7ffb      	ldrb	r3, [r7, #31]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 10; i++)
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	3301      	adds	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	7ffb      	ldrb	r3, [r7, #31]
 8003462:	2b09      	cmp	r3, #9
 8003464:	d9f4      	bls.n	8003450 <getConsoleInput+0x20>
	// blocking and timeout
	if(timeoutValue > 1){
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d929      	bls.n	80034c0 <getConsoleInput+0x90>

		while (UART_RX_AVAILABLE_BYTE() < 1	&& __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue);
 800346c:	bf00      	nop
 800346e:	f004 fe55 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <getConsoleInput+0x54>
 8003478:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <getConsoleInput+0x104>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d8f4      	bhi.n	800346e <getConsoleInput+0x3e>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8003484:	f004 fe4a 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 8003488:	4603      	mov	r3, r0
 800348a:	757b      	strb	r3, [r7, #21]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 800348c:	4b29      	ldr	r3, [pc, #164]	; (8003534 <getConsoleInput+0x104>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	61bb      	str	r3, [r7, #24]

		UART_RX_Read(buffer, commandLength + 2);
 8003494:	7afb      	ldrb	r3, [r7, #11]
 8003496:	3302      	adds	r3, #2
 8003498:	b2db      	uxtb	r3, r3
 800349a:	4619      	mov	r1, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f004 fe29 	bl	80080f4 <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 80034a2:	f7ff fedb 	bl	800325c <flushUart>
		//while(isWaitingForData == 1 && __HAL_TIM_GET_COUNTER(&htim14) < timeoutValue );

		//consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);

		// timeout report
		if (UART_RX_AVAILABLE_BYTE() < 1 || consoleInputTime > timeoutValue) {
 80034a6:	f004 fe39 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <getConsoleInput+0x88>
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d901      	bls.n	80034bc <getConsoleInput+0x8c>
			return 99;
 80034b8:	2363      	movs	r3, #99	; 0x63
 80034ba:	e036      	b.n	800352a <getConsoleInput+0xfa>
		}

		return 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	e034      	b.n	800352a <getConsoleInput+0xfa>

		// blocking, no timeout
	} else if(timeoutValue == 1) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d118      	bne.n	80034f8 <getConsoleInput+0xc8>
		 return 99;
		 }

		 return 0;
		 */
		while(UART_RX_AVAILABLE_BYTE() < 1);
 80034c6:	bf00      	nop
 80034c8:	f004 fe28 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0fa      	beq.n	80034c8 <getConsoleInput+0x98>
		uint8_t byte = UART_RX_AVAILABLE_BYTE();
 80034d2:	f004 fe23 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75bb      	strb	r3, [r7, #22]
		//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
		consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <getConsoleInput+0x104>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	61bb      	str	r3, [r7, #24]
		UART_RX_Read(buffer, commandLength + 2);
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	3302      	adds	r3, #2
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f004 fe02 	bl	80080f4 <UART_RX_Read>
		//send_uart(dataToRead);
		flushUart();
 80034f0:	f7ff feb4 	bl	800325c <flushUart>

		return 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e018      	b.n	800352a <getConsoleInput+0xfa>


	}
	// non blocking, no timeout
	else{
		if (UART_RX_AVAILABLE_BYTE() > 0) {
 80034f8:	f004 fe10 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <getConsoleInput+0xf8>
			uint8_t byte = UART_RX_AVAILABLE_BYTE();
 8003502:	f004 fe0b 	bl	800811c <UART_RX_AVAILABLE_BYTE>
 8003506:	4603      	mov	r3, r0
 8003508:	75fb      	strb	r3, [r7, #23]
			//while(UART_RX_AVAILABLE_BYTE() < commandLength+1);
			consoleInputTime = __HAL_TIM_GET_COUNTER(&htim14);
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <getConsoleInput+0x104>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	61bb      	str	r3, [r7, #24]

			UART_RX_Read(buffer, commandLength + 2);
 8003512:	7afb      	ldrb	r3, [r7, #11]
 8003514:	3302      	adds	r3, #2
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4619      	mov	r1, r3
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f004 fdea 	bl	80080f4 <UART_RX_Read>
			//send_uart(dataToRead);
			flushUart();
 8003520:	f7ff fe9c 	bl	800325c <flushUart>

		} else
			return 99;

		return 0;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <getConsoleInput+0xfa>
			return 99;
 8003528:	2363      	movs	r3, #99	; 0x63
	}

	return 0;


}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	2000dd18 	.word	0x2000dd18

08003538 <consoleMeasuringInterface>:
*		[206] *Set trigger threshold
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

void consoleMeasuringInterface(){
 8003538:	b580      	push	{r7, lr}
 800353a:	b08e      	sub	sp, #56	; 0x38
 800353c:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nMeasuring settings menu\n[201] Show measuring settings menu\n[202] Set measuring period\n[203] Set sampling period\n[204] Enable averaging function\n[205]Enable trigger function\n[206] Set trigger threshold\n"
 8003542:	4896      	ldr	r0, [pc, #600]	; (800379c <consoleMeasuringInterface+0x264>)
 8003544:	f7fe fae0 	bl	8001b08 <send_uart3>
			"[888] Go to Main menu\n[999] Go to Main menu\n");

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8003548:	2201      	movs	r2, #1
 800354a:	2103      	movs	r1, #3
 800354c:	4894      	ldr	r0, [pc, #592]	; (80037a0 <consoleMeasuringInterface+0x268>)
 800354e:	f7ff ff6f 	bl	8003430 <getConsoleInput>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 8003558:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800355c:	2b63      	cmp	r3, #99	; 0x63
 800355e:	f000 8119 	beq.w	8003794 <consoleMeasuringInterface+0x25c>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 8003562:	498f      	ldr	r1, [pc, #572]	; (80037a0 <consoleMeasuringInterface+0x268>)
 8003564:	2003      	movs	r0, #3
 8003566:	f7ff fe5d 	bl	8003224 <convertInputToInt>
 800356a:	4603      	mov	r3, r0
 800356c:	2bcc      	cmp	r3, #204	; 0xcc
 800356e:	d077      	beq.n	8003660 <consoleMeasuringInterface+0x128>
 8003570:	2bcc      	cmp	r3, #204	; 0xcc
 8003572:	dc06      	bgt.n	8003582 <consoleMeasuringInterface+0x4a>
 8003574:	2bca      	cmp	r3, #202	; 0xca
 8003576:	d017      	beq.n	80035a8 <consoleMeasuringInterface+0x70>
 8003578:	2bca      	cmp	r3, #202	; 0xca
 800357a:	dc43      	bgt.n	8003604 <consoleMeasuringInterface+0xcc>
 800357c:	2bc9      	cmp	r3, #201	; 0xc9
 800357e:	d010      	beq.n	80035a2 <consoleMeasuringInterface+0x6a>
 8003580:	e102      	b.n	8003788 <consoleMeasuringInterface+0x250>
 8003582:	2bce      	cmp	r3, #206	; 0xce
 8003584:	f000 80ba 	beq.w	80036fc <consoleMeasuringInterface+0x1c4>
 8003588:	2bce      	cmp	r3, #206	; 0xce
 800358a:	f2c0 8090 	blt.w	80036ae <consoleMeasuringInterface+0x176>
 800358e:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8003592:	f000 80eb 	beq.w	800376c <consoleMeasuringInterface+0x234>
 8003596:	f240 32e7 	movw	r2, #999	; 0x3e7
 800359a:	4293      	cmp	r3, r2
 800359c:	f000 80ed 	beq.w	800377a <consoleMeasuringInterface+0x242>
 80035a0:	e0f2      	b.n	8003788 <consoleMeasuringInterface+0x250>
		// show measuring settings menu
		case 201:
			return consoleMeasuringInterface();
 80035a2:	f7ff ffc9 	bl	8003538 <consoleMeasuringInterface>
 80035a6:	e0f6      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// set measuring period
		case 202:
			temp16 = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired measuring interval in us (anywhere between 1us - 1000000us/1sec) or enter 0 to exit without change\n");
 80035ac:	487d      	ldr	r0, [pc, #500]	; (80037a4 <consoleMeasuringInterface+0x26c>)
 80035ae:	f7fe faab 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80035b2:	2201      	movs	r2, #1
 80035b4:	210a      	movs	r1, #10
 80035b6:	487a      	ldr	r0, [pc, #488]	; (80037a0 <consoleMeasuringInterface+0x268>)
 80035b8:	f7ff ff3a 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80035bc:	4978      	ldr	r1, [pc, #480]	; (80037a0 <consoleMeasuringInterface+0x268>)
 80035be:	200a      	movs	r0, #10
 80035c0:	f7ff fe30 	bl	8003224 <convertInputToInt>
 80035c4:	4603      	mov	r3, r0
 80035c6:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 1000000){
 80035c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <consoleMeasuringInterface+0xb2>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 80035ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80035d0:	463b      	mov	r3, r7
 80035d2:	4975      	ldr	r1, [pc, #468]	; (80037a8 <consoleMeasuringInterface+0x270>)
 80035d4:	4618      	mov	r0, r3
 80035d6:	f01b fabf 	bl	801eb58 <siprintf>
				send_uart3(tempBuf);
 80035da:	463b      	mov	r3, r7
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fa93 	bl	8001b08 <send_uart3>
				settings.measuringInterval = temp16;
 80035e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035e4:	4a71      	ldr	r2, [pc, #452]	; (80037ac <consoleMeasuringInterface+0x274>)
 80035e6:	6053      	str	r3, [r2, #4]
 80035e8:	e009      	b.n	80035fe <consoleMeasuringInterface+0xc6>
			}
			else if(temp16 == 0){
 80035ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d103      	bne.n	80035f8 <consoleMeasuringInterface+0xc0>
				send_uart3("\nMeasuring period: UNCHANGED\n");
 80035f0:	486f      	ldr	r0, [pc, #444]	; (80037b0 <consoleMeasuringInterface+0x278>)
 80035f2:	f7fe fa89 	bl	8001b08 <send_uart3>
 80035f6:	e002      	b.n	80035fe <consoleMeasuringInterface+0xc6>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 80035f8:	486e      	ldr	r0, [pc, #440]	; (80037b4 <consoleMeasuringInterface+0x27c>)
 80035fa:	f7fe fa85 	bl	8001b08 <send_uart3>
			}
			return consoleMeasuringInterface();
 80035fe:	f7ff ff9b 	bl	8003538 <consoleMeasuringInterface>
 8003602:	e0c8      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// set sampling period
		case 203:
			temp16 = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired sampling interval in us (anywhere between 1us - 10000000us/10sec) or enter 0 to exit without change\n");
 8003608:	486b      	ldr	r0, [pc, #428]	; (80037b8 <consoleMeasuringInterface+0x280>)
 800360a:	f7fe fa7d 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 800360e:	2201      	movs	r2, #1
 8003610:	210a      	movs	r1, #10
 8003612:	4863      	ldr	r0, [pc, #396]	; (80037a0 <consoleMeasuringInterface+0x268>)
 8003614:	f7ff ff0c 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8003618:	4961      	ldr	r1, [pc, #388]	; (80037a0 <consoleMeasuringInterface+0x268>)
 800361a:	200a      	movs	r0, #10
 800361c:	f7ff fe02 	bl	8003224 <convertInputToInt>
 8003620:	4603      	mov	r3, r0
 8003622:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 10000000){
 8003624:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <consoleMeasuringInterface+0x10e>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"New entered value is: %d us\n", temp16);
 800362a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800362c:	463b      	mov	r3, r7
 800362e:	495e      	ldr	r1, [pc, #376]	; (80037a8 <consoleMeasuringInterface+0x270>)
 8003630:	4618      	mov	r0, r3
 8003632:	f01b fa91 	bl	801eb58 <siprintf>
				send_uart3(tempBuf);
 8003636:	463b      	mov	r3, r7
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fa65 	bl	8001b08 <send_uart3>
				settings.samplingInterval = temp16;
 800363e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003640:	4a5a      	ldr	r2, [pc, #360]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003642:	6093      	str	r3, [r2, #8]
 8003644:	e009      	b.n	800365a <consoleMeasuringInterface+0x122>
			}
			else if(temp16 == 0){
 8003646:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <consoleMeasuringInterface+0x11c>
				send_uart3("\nSampling period: UNCHANGED\n");
 800364c:	485b      	ldr	r0, [pc, #364]	; (80037bc <consoleMeasuringInterface+0x284>)
 800364e:	f7fe fa5b 	bl	8001b08 <send_uart3>
 8003652:	e002      	b.n	800365a <consoleMeasuringInterface+0x122>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8003654:	4857      	ldr	r0, [pc, #348]	; (80037b4 <consoleMeasuringInterface+0x27c>)
 8003656:	f7fe fa57 	bl	8001b08 <send_uart3>
			}
			return consoleMeasuringInterface();
 800365a:	f7ff ff6d 	bl	8003538 <consoleMeasuringInterface>
 800365e:	e09a      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// enable averaging
		case 204:
			send_uart3("\nDo you want to enable averaging function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 8003660:	4857      	ldr	r0, [pc, #348]	; (80037c0 <consoleMeasuringInterface+0x288>)
 8003662:	f7fe fa51 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8003666:	2201      	movs	r2, #1
 8003668:	2101      	movs	r1, #1
 800366a:	484d      	ldr	r0, [pc, #308]	; (80037a0 <consoleMeasuringInterface+0x268>)
 800366c:	f7ff fee0 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003670:	494b      	ldr	r1, [pc, #300]	; (80037a0 <consoleMeasuringInterface+0x268>)
 8003672:	2001      	movs	r0, #1
 8003674:	f7ff fdd6 	bl	8003224 <convertInputToInt>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d002      	beq.n	8003684 <consoleMeasuringInterface+0x14c>
 800367e:	2b02      	cmp	r3, #2
 8003680:	d007      	beq.n	8003692 <consoleMeasuringInterface+0x15a>
 8003682:	e00d      	b.n	80036a0 <consoleMeasuringInterface+0x168>
			case 1:
				settings.isAveraging = 1;
 8003684:	4b49      	ldr	r3, [pc, #292]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003686:	2201      	movs	r2, #1
 8003688:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: ENABLED\n");
 800368a:	484e      	ldr	r0, [pc, #312]	; (80037c4 <consoleMeasuringInterface+0x28c>)
 800368c:	f7fe fa3c 	bl	8001b08 <send_uart3>
				break;
 8003690:	e00a      	b.n	80036a8 <consoleMeasuringInterface+0x170>
			case 2:
				settings.isAveraging = 0;
 8003692:	4b46      	ldr	r3, [pc, #280]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003694:	2200      	movs	r2, #0
 8003696:	731a      	strb	r2, [r3, #12]
				send_uart3("\nAVERAGING FUNCTION: DISABLED\n");
 8003698:	484b      	ldr	r0, [pc, #300]	; (80037c8 <consoleMeasuringInterface+0x290>)
 800369a:	f7fe fa35 	bl	8001b08 <send_uart3>
				break;
 800369e:	e003      	b.n	80036a8 <consoleMeasuringInterface+0x170>
			default:
				send_uart3("\nAVERAGING FUNCTION: NO CHANGE\n");
 80036a0:	484a      	ldr	r0, [pc, #296]	; (80037cc <consoleMeasuringInterface+0x294>)
 80036a2:	f7fe fa31 	bl	8001b08 <send_uart3>
				break;
 80036a6:	bf00      	nop
			}
			return consoleMeasuringInterface();
 80036a8:	f7ff ff46 	bl	8003538 <consoleMeasuringInterface>
 80036ac:	e073      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// enable trigger
		case 205:
			send_uart3("\nDo you want to enable trigger function\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n 0 - EXIT without change\n");
 80036ae:	4848      	ldr	r0, [pc, #288]	; (80037d0 <consoleMeasuringInterface+0x298>)
 80036b0:	f7fe fa2a 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 80036b4:	2201      	movs	r2, #1
 80036b6:	2101      	movs	r1, #1
 80036b8:	4839      	ldr	r0, [pc, #228]	; (80037a0 <consoleMeasuringInterface+0x268>)
 80036ba:	f7ff feb9 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 80036be:	4938      	ldr	r1, [pc, #224]	; (80037a0 <consoleMeasuringInterface+0x268>)
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7ff fdaf 	bl	8003224 <convertInputToInt>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d002      	beq.n	80036d2 <consoleMeasuringInterface+0x19a>
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d007      	beq.n	80036e0 <consoleMeasuringInterface+0x1a8>
 80036d0:	e00d      	b.n	80036ee <consoleMeasuringInterface+0x1b6>
			case 1:
				settings.isTriggerActive = 1;
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <consoleMeasuringInterface+0x274>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER FUNCTION: ENABLED\n");
 80036d8:	483e      	ldr	r0, [pc, #248]	; (80037d4 <consoleMeasuringInterface+0x29c>)
 80036da:	f7fe fa15 	bl	8001b08 <send_uart3>
				break;
 80036de:	e00a      	b.n	80036f6 <consoleMeasuringInterface+0x1be>
			case 2:
				settings.isTriggerActive = 0;
 80036e0:	4b32      	ldr	r3, [pc, #200]	; (80037ac <consoleMeasuringInterface+0x274>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	735a      	strb	r2, [r3, #13]
				send_uart3("\nTRIGGER: DISABLED\n");
 80036e6:	483c      	ldr	r0, [pc, #240]	; (80037d8 <consoleMeasuringInterface+0x2a0>)
 80036e8:	f7fe fa0e 	bl	8001b08 <send_uart3>
				break;
 80036ec:	e003      	b.n	80036f6 <consoleMeasuringInterface+0x1be>
			default:
				send_uart3("\nTRIGGER: NO CHANGE\n");
 80036ee:	483b      	ldr	r0, [pc, #236]	; (80037dc <consoleMeasuringInterface+0x2a4>)
 80036f0:	f7fe fa0a 	bl	8001b08 <send_uart3>
				break;
 80036f4:	bf00      	nop
			}
			return consoleMeasuringInterface();
 80036f6:	f7ff ff1f 	bl	8003538 <consoleMeasuringInterface>
 80036fa:	e04c      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// set trigger level
		case 206:
			temp16 = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired trigger menu threashold in multiples of nA (anywhere between 5nA - 4A) or enter 0 to exit without change\n");
 8003700:	4837      	ldr	r0, [pc, #220]	; (80037e0 <consoleMeasuringInterface+0x2a8>)
 8003702:	f7fe fa01 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003706:	2201      	movs	r2, #1
 8003708:	210a      	movs	r1, #10
 800370a:	4825      	ldr	r0, [pc, #148]	; (80037a0 <consoleMeasuringInterface+0x268>)
 800370c:	f7ff fe90 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8003710:	4923      	ldr	r1, [pc, #140]	; (80037a0 <consoleMeasuringInterface+0x268>)
 8003712:	200a      	movs	r0, #10
 8003714:	f7ff fd86 	bl	8003224 <convertInputToInt>
 8003718:	4603      	mov	r3, r0
 800371a:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 5 & temp16 <= 4000000){
 800371c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800371e:	2b04      	cmp	r3, #4
 8003720:	d917      	bls.n	8003752 <consoleMeasuringInterface+0x21a>
				uint8_t tempBuf [50];
				settings.samplingInterval = temp16;
 8003722:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003724:	4a21      	ldr	r2, [pc, #132]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003726:	6093      	str	r3, [r2, #8]
				settings.samplingInterval /= 1000000000;
 8003728:	4b20      	ldr	r3, [pc, #128]	; (80037ac <consoleMeasuringInterface+0x274>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	0a5b      	lsrs	r3, r3, #9
 800372e:	4a2d      	ldr	r2, [pc, #180]	; (80037e4 <consoleMeasuringInterface+0x2ac>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	09db      	lsrs	r3, r3, #7
 8003736:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <consoleMeasuringInterface+0x274>)
 8003738:	6093      	str	r3, [r2, #8]
				sprintf(tempBuf,"New entered value is: %1.12f A\n", settings.samplingInterval);
 800373a:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <consoleMeasuringInterface+0x274>)
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	463b      	mov	r3, r7
 8003740:	4929      	ldr	r1, [pc, #164]	; (80037e8 <consoleMeasuringInterface+0x2b0>)
 8003742:	4618      	mov	r0, r3
 8003744:	f01b fa08 	bl	801eb58 <siprintf>
				send_uart3(tempBuf);
 8003748:	463b      	mov	r3, r7
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe f9dc 	bl	8001b08 <send_uart3>
 8003750:	e009      	b.n	8003766 <consoleMeasuringInterface+0x22e>

			}
			else if(temp16 == 0){
 8003752:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003754:	2b00      	cmp	r3, #0
 8003756:	d103      	bne.n	8003760 <consoleMeasuringInterface+0x228>
				send_uart3("\nSampling period: UNCHANGED\n");
 8003758:	4818      	ldr	r0, [pc, #96]	; (80037bc <consoleMeasuringInterface+0x284>)
 800375a:	f7fe f9d5 	bl	8001b08 <send_uart3>
 800375e:	e002      	b.n	8003766 <consoleMeasuringInterface+0x22e>
			}
			else{
				send_uart3("\nEntered value if out of range\n");
 8003760:	4814      	ldr	r0, [pc, #80]	; (80037b4 <consoleMeasuringInterface+0x27c>)
 8003762:	f7fe f9d1 	bl	8001b08 <send_uart3>
			}
			return consoleMeasuringInterface();
 8003766:	f7ff fee7 	bl	8003538 <consoleMeasuringInterface>
 800376a:	e014      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;

			// main menu + print main menu structure
		case 888:
			send_uart3("\nGoing back to Main menu\n");
 800376c:	481f      	ldr	r0, [pc, #124]	; (80037ec <consoleMeasuringInterface+0x2b4>)
 800376e:	f7fe f9cb 	bl	8001b08 <send_uart3>
			return consoleInterface(123);
 8003772:	207b      	movs	r0, #123	; 0x7b
 8003774:	f000 fdfe 	bl	8004374 <consoleInterface>
 8003778:	e00d      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;
		// main menu + print main menu structure
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 800377a:	481c      	ldr	r0, [pc, #112]	; (80037ec <consoleMeasuringInterface+0x2b4>)
 800377c:	f7fe f9c4 	bl	8001b08 <send_uart3>
			return consoleInterface(123);
 8003780:	207b      	movs	r0, #123	; 0x7b
 8003782:	f000 fdf7 	bl	8004374 <consoleInterface>
 8003786:	e006      	b.n	8003796 <consoleMeasuringInterface+0x25e>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 8003788:	4819      	ldr	r0, [pc, #100]	; (80037f0 <consoleMeasuringInterface+0x2b8>)
 800378a:	f7fe f9bd 	bl	8001b08 <send_uart3>
			return consoleMeasuringInterface();
 800378e:	f7ff fed3 	bl	8003538 <consoleMeasuringInterface>
 8003792:	e000      	b.n	8003796 <consoleMeasuringInterface+0x25e>
		return;
 8003794:	bf00      	nop
			break;
	}

	return consoleMeasuringInterface();

}
 8003796:	3738      	adds	r7, #56	; 0x38
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	08020b1c 	.word	0x08020b1c
 80037a0:	20008c38 	.word	0x20008c38
 80037a4:	08020c14 	.word	0x08020c14
 80037a8:	08020c88 	.word	0x08020c88
 80037ac:	20000018 	.word	0x20000018
 80037b0:	08020ca8 	.word	0x08020ca8
 80037b4:	08020cc8 	.word	0x08020cc8
 80037b8:	08020ce8 	.word	0x08020ce8
 80037bc:	08020d5c 	.word	0x08020d5c
 80037c0:	08020d7c 	.word	0x08020d7c
 80037c4:	08020de4 	.word	0x08020de4
 80037c8:	08020e04 	.word	0x08020e04
 80037cc:	08020e24 	.word	0x08020e24
 80037d0:	08020e44 	.word	0x08020e44
 80037d4:	08020ea8 	.word	0x08020ea8
 80037d8:	08020ec4 	.word	0x08020ec4
 80037dc:	08020ed8 	.word	0x08020ed8
 80037e0:	08020ef0 	.word	0x08020ef0
 80037e4:	00044b83 	.word	0x00044b83
 80037e8:	08020f6c 	.word	0x08020f6c
 80037ec:	08020f8c 	.word	0x08020f8c
 80037f0:	08020fa8 	.word	0x08020fa8

080037f4 <consoleRTCSettings>:
*		[888] *Go to Device settings menu
*		[999] *Go to main menu
*/

// menu for setting RTC clock
void consoleRTCSettings(){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	; 0x38
 80037f8:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	86fb      	strh	r3, [r7, #54]	; 0x36
	// print menu structure
	send_uart3("\nRTC settings menu\n[302] Show RTC settings menu\n[321] Show current time and date\n[322] Set Time - Hours, Minutes\n[323] Set Date - Day\n[324] Set Date - Month\n[325] Set Date - Year\n"
 80037fe:	48bc      	ldr	r0, [pc, #752]	; (8003af0 <consoleRTCSettings+0x2fc>)
 8003800:	f7fe f982 	bl	8001b08 <send_uart3>
			"[888] Go to Device settings menu\n[999] Go to Main menu\n");

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8003804:	2200      	movs	r2, #0
 8003806:	49bb      	ldr	r1, [pc, #748]	; (8003af4 <consoleRTCSettings+0x300>)
 8003808:	48bb      	ldr	r0, [pc, #748]	; (8003af8 <consoleRTCSettings+0x304>)
 800380a:	f009 ffcd 	bl	800d7a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800380e:	2200      	movs	r2, #0
 8003810:	49ba      	ldr	r1, [pc, #744]	; (8003afc <consoleRTCSettings+0x308>)
 8003812:	48b9      	ldr	r0, [pc, #740]	; (8003af8 <consoleRTCSettings+0x304>)
 8003814:	f00a f8ce 	bl	800d9b4 <HAL_RTC_GetDate>

	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8003818:	2201      	movs	r2, #1
 800381a:	2103      	movs	r1, #3
 800381c:	48b8      	ldr	r0, [pc, #736]	; (8003b00 <consoleRTCSettings+0x30c>)
 800381e:	f7ff fe07 	bl	8003430 <getConsoleInput>
 8003822:	4603      	mov	r3, r0
 8003824:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if (stateFlag == 99) {
 8003828:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800382c:	2b63      	cmp	r3, #99	; 0x63
 800382e:	f000 82e9 	beq.w	8003e04 <consoleRTCSettings+0x610>
		//send_uart("Timeout");
		//microDelay(50);
		return;
	}

	switch (convertInputToInt(3, inputData)) {
 8003832:	49b3      	ldr	r1, [pc, #716]	; (8003b00 <consoleRTCSettings+0x30c>)
 8003834:	2003      	movs	r0, #3
 8003836:	f7ff fcf5 	bl	8003224 <convertInputToInt>
 800383a:	4603      	mov	r3, r0
 800383c:	f240 1243 	movw	r2, #323	; 0x143
 8003840:	4293      	cmp	r3, r2
 8003842:	f000 80ab 	beq.w	800399c <consoleRTCSettings+0x1a8>
 8003846:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 800384a:	da0a      	bge.n	8003862 <consoleRTCSettings+0x6e>
 800384c:	f240 1241 	movw	r2, #321	; 0x141
 8003850:	4293      	cmp	r3, r2
 8003852:	d01c      	beq.n	800388e <consoleRTCSettings+0x9a>
 8003854:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8003858:	da1e      	bge.n	8003898 <consoleRTCSettings+0xa4>
 800385a:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800385e:	d013      	beq.n	8003888 <consoleRTCSettings+0x94>
 8003860:	e2ca      	b.n	8003df8 <consoleRTCSettings+0x604>
 8003862:	f240 1245 	movw	r2, #325	; 0x145
 8003866:	4293      	cmp	r3, r2
 8003868:	f000 826b 	beq.w	8003d42 <consoleRTCSettings+0x54e>
 800386c:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8003870:	f340 80e0 	ble.w	8003a34 <consoleRTCSettings+0x240>
 8003874:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8003878:	f000 82b1 	beq.w	8003dde <consoleRTCSettings+0x5ea>
 800387c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003880:	4293      	cmp	r3, r2
 8003882:	f000 82b2 	beq.w	8003dea <consoleRTCSettings+0x5f6>
 8003886:	e2b7      	b.n	8003df8 <consoleRTCSettings+0x604>
		// show rtc settings menu
		case 302:
			return consoleRTCSettings();
 8003888:	f7ff ffb4 	bl	80037f4 <consoleRTCSettings>
 800388c:	e2bb      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// show current time and date
		case 321:
			printCurrentTimeDate();
 800388e:	f7ff fd93 	bl	80033b8 <printCurrentTimeDate>
			return consoleRTCSettings();
 8003892:	f7ff ffaf 	bl	80037f4 <consoleRTCSettings>
 8003896:	e2b6      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// set time - hours, minutes
		case 322:
			temp16 = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter time, first hours in 24h format then when prompted minutes and finally seconds\n\n ENTER hours\n");
 800389c:	4899      	ldr	r0, [pc, #612]	; (8003b04 <consoleRTCSettings+0x310>)
 800389e:	f7fe f933 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80038a2:	2201      	movs	r2, #1
 80038a4:	210a      	movs	r1, #10
 80038a6:	4896      	ldr	r0, [pc, #600]	; (8003b00 <consoleRTCSettings+0x30c>)
 80038a8:	f7ff fdc2 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80038ac:	4994      	ldr	r1, [pc, #592]	; (8003b00 <consoleRTCSettings+0x30c>)
 80038ae:	200a      	movs	r0, #10
 80038b0:	f7ff fcb8 	bl	8003224 <convertInputToInt>
 80038b4:	4603      	mov	r3, r0
 80038b6:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 0 & temp16 <= 24){
 80038b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038ba:	2b18      	cmp	r3, #24
 80038bc:	d868      	bhi.n	8003990 <consoleRTCSettings+0x19c>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered time - hours: %d\n", temp16);
 80038be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038c0:	463b      	mov	r3, r7
 80038c2:	4991      	ldr	r1, [pc, #580]	; (8003b08 <consoleRTCSettings+0x314>)
 80038c4:	4618      	mov	r0, r3
 80038c6:	f01b f947 	bl	801eb58 <siprintf>
				send_uart3(tempBuf);
 80038ca:	463b      	mov	r3, r7
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe f91b 	bl	8001b08 <send_uart3>
				Time.Hours = temp16;
 80038d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4b87      	ldr	r3, [pc, #540]	; (8003af4 <consoleRTCSettings+0x300>)
 80038d8:	701a      	strb	r2, [r3, #0]

				temp16 = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	86fb      	strh	r3, [r7, #54]	; 0x36
				send_uart3("\n ENTER minutes\n");
 80038de:	488b      	ldr	r0, [pc, #556]	; (8003b0c <consoleRTCSettings+0x318>)
 80038e0:	f7fe f912 	bl	8001b08 <send_uart3>
				getConsoleInput(&inputData, 10, 1);
 80038e4:	2201      	movs	r2, #1
 80038e6:	210a      	movs	r1, #10
 80038e8:	4885      	ldr	r0, [pc, #532]	; (8003b00 <consoleRTCSettings+0x30c>)
 80038ea:	f7ff fda1 	bl	8003430 <getConsoleInput>
				temp16 = convertInputToInt(10, &inputData);
 80038ee:	4984      	ldr	r1, [pc, #528]	; (8003b00 <consoleRTCSettings+0x30c>)
 80038f0:	200a      	movs	r0, #10
 80038f2:	f7ff fc97 	bl	8003224 <convertInputToInt>
 80038f6:	4603      	mov	r3, r0
 80038f8:	86fb      	strh	r3, [r7, #54]	; 0x36
				if(temp16 >= 0 & temp16 <= 60){
 80038fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038fc:	2b3c      	cmp	r3, #60	; 0x3c
 80038fe:	d84a      	bhi.n	8003996 <consoleRTCSettings+0x1a2>
					sprintf(tempBuf,"  Entered time - minutes: %d\n", temp16);
 8003900:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003902:	463b      	mov	r3, r7
 8003904:	4982      	ldr	r1, [pc, #520]	; (8003b10 <consoleRTCSettings+0x31c>)
 8003906:	4618      	mov	r0, r3
 8003908:	f01b f926 	bl	801eb58 <siprintf>
					send_uart3(tempBuf);
 800390c:	463b      	mov	r3, r7
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe f8fa 	bl	8001b08 <send_uart3>
					Time.Minutes = temp16;
 8003914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <consoleRTCSettings+0x300>)
 800391a:	705a      	strb	r2, [r3, #1]

					temp16 = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	86fb      	strh	r3, [r7, #54]	; 0x36
					send_uart3("\n ENTER seconds\n");
 8003920:	487c      	ldr	r0, [pc, #496]	; (8003b14 <consoleRTCSettings+0x320>)
 8003922:	f7fe f8f1 	bl	8001b08 <send_uart3>
					getConsoleInput(&inputData, 10, 1);
 8003926:	2201      	movs	r2, #1
 8003928:	210a      	movs	r1, #10
 800392a:	4875      	ldr	r0, [pc, #468]	; (8003b00 <consoleRTCSettings+0x30c>)
 800392c:	f7ff fd80 	bl	8003430 <getConsoleInput>
					temp16 = convertInputToInt(10, &inputData);
 8003930:	4973      	ldr	r1, [pc, #460]	; (8003b00 <consoleRTCSettings+0x30c>)
 8003932:	200a      	movs	r0, #10
 8003934:	f7ff fc76 	bl	8003224 <convertInputToInt>
 8003938:	4603      	mov	r3, r0
 800393a:	86fb      	strh	r3, [r7, #54]	; 0x36
					if(temp16 >= 0 & temp16 <= 60){
 800393c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800393e:	2b3c      	cmp	r3, #60	; 0x3c
 8003940:	d829      	bhi.n	8003996 <consoleRTCSettings+0x1a2>
						sprintf(tempBuf,"  Entered time - seconds: %d\n", temp16);
 8003942:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003944:	463b      	mov	r3, r7
 8003946:	4974      	ldr	r1, [pc, #464]	; (8003b18 <consoleRTCSettings+0x324>)
 8003948:	4618      	mov	r0, r3
 800394a:	f01b f905 	bl	801eb58 <siprintf>
						send_uart3(tempBuf);
 800394e:	463b      	mov	r3, r7
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe f8d9 	bl	8001b08 <send_uart3>
						Time.Seconds = temp16;
 8003956:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <consoleRTCSettings+0x300>)
 800395c:	709a      	strb	r2, [r3, #2]

						Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800395e:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <consoleRTCSettings+0x300>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
						Time.StoreOperation = RTC_STOREOPERATION_RESET;
 8003964:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <consoleRTCSettings+0x300>)
 8003966:	2200      	movs	r2, #0
 8003968:	615a      	str	r2, [r3, #20]
						if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 800396a:	2200      	movs	r2, #0
 800396c:	4961      	ldr	r1, [pc, #388]	; (8003af4 <consoleRTCSettings+0x300>)
 800396e:	4862      	ldr	r0, [pc, #392]	; (8003af8 <consoleRTCSettings+0x304>)
 8003970:	f009 fe5c 	bl	800d62c <HAL_RTC_SetTime>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <consoleRTCSettings+0x18e>
						{
							send_uart3("ERROR - SAVING TIME\n");
 800397a:	4868      	ldr	r0, [pc, #416]	; (8003b1c <consoleRTCSettings+0x328>)
 800397c:	f7fe f8c4 	bl	8001b08 <send_uart3>
 8003980:	e009      	b.n	8003996 <consoleRTCSettings+0x1a2>
						}
						else
							HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003982:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003986:	2101      	movs	r1, #1
 8003988:	485b      	ldr	r0, [pc, #364]	; (8003af8 <consoleRTCSettings+0x304>)
 800398a:	f00a f8f3 	bl	800db74 <HAL_RTCEx_BKUPWrite>
 800398e:	e002      	b.n	8003996 <consoleRTCSettings+0x1a2>
					}
				}
			}
			else{
				send_uart3("\nEntered value if out of range\n Time not set");
 8003990:	4863      	ldr	r0, [pc, #396]	; (8003b20 <consoleRTCSettings+0x32c>)
 8003992:	f7fe f8b9 	bl	8001b08 <send_uart3>
			}
			return consoleRTCSettings();
 8003996:	f7ff ff2d 	bl	80037f4 <consoleRTCSettings>
 800399a:	e234      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// set date - day
		case 323:
			temp16 = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - day in format from 1 to 31\n");
 80039a0:	4860      	ldr	r0, [pc, #384]	; (8003b24 <consoleRTCSettings+0x330>)
 80039a2:	f7fe f8b1 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80039a6:	2201      	movs	r2, #1
 80039a8:	210a      	movs	r1, #10
 80039aa:	4855      	ldr	r0, [pc, #340]	; (8003b00 <consoleRTCSettings+0x30c>)
 80039ac:	f7ff fd40 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80039b0:	4953      	ldr	r1, [pc, #332]	; (8003b00 <consoleRTCSettings+0x30c>)
 80039b2:	200a      	movs	r0, #10
 80039b4:	f7ff fc36 	bl	8003224 <convertInputToInt>
 80039b8:	4603      	mov	r3, r0
 80039ba:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 80039bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf14      	ite	ne
 80039c2:	2301      	movne	r3, #1
 80039c4:	2300      	moveq	r3, #0
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039ca:	2b1f      	cmp	r3, #31
 80039cc:	bf94      	ite	ls
 80039ce:	2301      	movls	r3, #1
 80039d0:	2300      	movhi	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	4013      	ands	r3, r2
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d025      	beq.n	8003a28 <consoleRTCSettings+0x234>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered day: %d\n", temp16);
 80039dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80039de:	463b      	mov	r3, r7
 80039e0:	4951      	ldr	r1, [pc, #324]	; (8003b28 <consoleRTCSettings+0x334>)
 80039e2:	4618      	mov	r0, r3
 80039e4:	f01b f8b8 	bl	801eb58 <siprintf>
				send_uart3(tempBuf);
 80039e8:	463b      	mov	r3, r7
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe f88c 	bl	8001b08 <send_uart3>
				Date.Date = decimalToHex((uint8_t)temp16);
 80039f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fbed 	bl	80031d4 <decimalToHex>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <consoleRTCSettings+0x308>)
 8003a00:	709a      	strb	r2, [r3, #2]
				//Date.Date = temp16;
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003a02:	2200      	movs	r2, #0
 8003a04:	493d      	ldr	r1, [pc, #244]	; (8003afc <consoleRTCSettings+0x308>)
 8003a06:	483c      	ldr	r0, [pc, #240]	; (8003af8 <consoleRTCSettings+0x304>)
 8003a08:	f009 ff2c 	bl	800d864 <HAL_RTC_SetDate>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <consoleRTCSettings+0x226>
				{
					send_uart3("ERROR - SAVING DATE\n");
 8003a12:	4846      	ldr	r0, [pc, #280]	; (8003b2c <consoleRTCSettings+0x338>)
 8003a14:	f7fe f878 	bl	8001b08 <send_uart3>
 8003a18:	e009      	b.n	8003a2e <consoleRTCSettings+0x23a>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003a1a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4835      	ldr	r0, [pc, #212]	; (8003af8 <consoleRTCSettings+0x304>)
 8003a22:	f00a f8a7 	bl	800db74 <HAL_RTCEx_BKUPWrite>
 8003a26:	e002      	b.n	8003a2e <consoleRTCSettings+0x23a>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8003a28:	4841      	ldr	r0, [pc, #260]	; (8003b30 <consoleRTCSettings+0x33c>)
 8003a2a:	f7fe f86d 	bl	8001b08 <send_uart3>
			}
			return consoleRTCSettings();
 8003a2e:	f7ff fee1 	bl	80037f4 <consoleRTCSettings>
 8003a32:	e1e8      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// set date - month
		case 324:
			send_uart3("\nEnter number corresponding to month(1 - January, 2 - February, ...)\n");
 8003a34:	483f      	ldr	r0, [pc, #252]	; (8003b34 <consoleRTCSettings+0x340>)
 8003a36:	f7fe f867 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	210a      	movs	r1, #10
 8003a3e:	4830      	ldr	r0, [pc, #192]	; (8003b00 <consoleRTCSettings+0x30c>)
 8003a40:	f7ff fcf6 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(10, &inputData)) {
 8003a44:	492e      	ldr	r1, [pc, #184]	; (8003b00 <consoleRTCSettings+0x30c>)
 8003a46:	200a      	movs	r0, #10
 8003a48:	f7ff fbec 	bl	8003224 <convertInputToInt>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	2b0b      	cmp	r3, #11
 8003a52:	f200 816f 	bhi.w	8003d34 <consoleRTCSettings+0x540>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <consoleRTCSettings+0x268>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003abf 	.word	0x08003abf
 8003a64:	08003b41 	.word	0x08003b41
 8003a68:	08003b73 	.word	0x08003b73
 8003a6c:	08003ba5 	.word	0x08003ba5
 8003a70:	08003bd7 	.word	0x08003bd7
 8003a74:	08003c09 	.word	0x08003c09
 8003a78:	08003c3b 	.word	0x08003c3b
 8003a7c:	08003c6d 	.word	0x08003c6d
 8003a80:	08003c9f 	.word	0x08003c9f
 8003a84:	08003cd1 	.word	0x08003cd1
 8003a88:	08003d03 	.word	0x08003d03
				case 1:
					Date.Month = RTC_MONTH_JANUARY;
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <consoleRTCSettings+0x308>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: January / 1\n");
 8003a92:	4829      	ldr	r0, [pc, #164]	; (8003b38 <consoleRTCSettings+0x344>)
 8003a94:	f7fe f838 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	4918      	ldr	r1, [pc, #96]	; (8003afc <consoleRTCSettings+0x308>)
 8003a9c:	4816      	ldr	r0, [pc, #88]	; (8003af8 <consoleRTCSettings+0x304>)
 8003a9e:	f009 fee1 	bl	800d864 <HAL_RTC_SetDate>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <consoleRTCSettings+0x2bc>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003aa8:	4820      	ldr	r0, [pc, #128]	; (8003b2c <consoleRTCSettings+0x338>)
 8003aaa:	f7fe f82d 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003aae:	e145      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003ab0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4810      	ldr	r0, [pc, #64]	; (8003af8 <consoleRTCSettings+0x304>)
 8003ab8:	f00a f85c 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003abc:	e13e      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 2:
					Date.Month = RTC_MONTH_FEBRUARY;
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <consoleRTCSettings+0x308>)
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: February / 2\n");
 8003ac4:	481d      	ldr	r0, [pc, #116]	; (8003b3c <consoleRTCSettings+0x348>)
 8003ac6:	f7fe f81f 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003aca:	2200      	movs	r2, #0
 8003acc:	490b      	ldr	r1, [pc, #44]	; (8003afc <consoleRTCSettings+0x308>)
 8003ace:	480a      	ldr	r0, [pc, #40]	; (8003af8 <consoleRTCSettings+0x304>)
 8003ad0:	f009 fec8 	bl	800d864 <HAL_RTC_SetDate>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <consoleRTCSettings+0x2ee>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003ada:	4814      	ldr	r0, [pc, #80]	; (8003b2c <consoleRTCSettings+0x338>)
 8003adc:	f7fe f814 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003ae0:	e12c      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003ae2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	4803      	ldr	r0, [pc, #12]	; (8003af8 <consoleRTCSettings+0x304>)
 8003aea:	f00a f843 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003aee:	e125      	b.n	8003d3c <consoleRTCSettings+0x548>
 8003af0:	08020fc0 	.word	0x08020fc0
 8003af4:	20008c44 	.word	0x20008c44
 8003af8:	20003440 	.word	0x20003440
 8003afc:	200072a0 	.word	0x200072a0
 8003b00:	20008c38 	.word	0x20008c38
 8003b04:	080210ac 	.word	0x080210ac
 8003b08:	08021114 	.word	0x08021114
 8003b0c:	08021130 	.word	0x08021130
 8003b10:	08021144 	.word	0x08021144
 8003b14:	08021164 	.word	0x08021164
 8003b18:	08021178 	.word	0x08021178
 8003b1c:	08021198 	.word	0x08021198
 8003b20:	080211b0 	.word	0x080211b0
 8003b24:	080211e0 	.word	0x080211e0
 8003b28:	0802120c 	.word	0x0802120c
 8003b2c:	08021220 	.word	0x08021220
 8003b30:	08021238 	.word	0x08021238
 8003b34:	08021268 	.word	0x08021268
 8003b38:	080212b0 	.word	0x080212b0
 8003b3c:	080212cc 	.word	0x080212cc
				case 3:
					Date.Month = RTC_MONTH_MARCH;
 8003b40:	4bb2      	ldr	r3, [pc, #712]	; (8003e0c <consoleRTCSettings+0x618>)
 8003b42:	2203      	movs	r2, #3
 8003b44:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: March / 3\n");
 8003b46:	48b2      	ldr	r0, [pc, #712]	; (8003e10 <consoleRTCSettings+0x61c>)
 8003b48:	f7fd ffde 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	49af      	ldr	r1, [pc, #700]	; (8003e0c <consoleRTCSettings+0x618>)
 8003b50:	48b0      	ldr	r0, [pc, #704]	; (8003e14 <consoleRTCSettings+0x620>)
 8003b52:	f009 fe87 	bl	800d864 <HAL_RTC_SetDate>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <consoleRTCSettings+0x370>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003b5c:	48ae      	ldr	r0, [pc, #696]	; (8003e18 <consoleRTCSettings+0x624>)
 8003b5e:	f7fd ffd3 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003b62:	e0eb      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003b64:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003b68:	2101      	movs	r1, #1
 8003b6a:	48aa      	ldr	r0, [pc, #680]	; (8003e14 <consoleRTCSettings+0x620>)
 8003b6c:	f00a f802 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003b70:	e0e4      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 4:
					Date.Month = RTC_MONTH_APRIL;
 8003b72:	4ba6      	ldr	r3, [pc, #664]	; (8003e0c <consoleRTCSettings+0x618>)
 8003b74:	2204      	movs	r2, #4
 8003b76:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: April / 4\n");
 8003b78:	48a8      	ldr	r0, [pc, #672]	; (8003e1c <consoleRTCSettings+0x628>)
 8003b7a:	f7fd ffc5 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	49a2      	ldr	r1, [pc, #648]	; (8003e0c <consoleRTCSettings+0x618>)
 8003b82:	48a4      	ldr	r0, [pc, #656]	; (8003e14 <consoleRTCSettings+0x620>)
 8003b84:	f009 fe6e 	bl	800d864 <HAL_RTC_SetDate>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <consoleRTCSettings+0x3a2>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003b8e:	48a2      	ldr	r0, [pc, #648]	; (8003e18 <consoleRTCSettings+0x624>)
 8003b90:	f7fd ffba 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003b94:	e0d2      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003b96:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	489d      	ldr	r0, [pc, #628]	; (8003e14 <consoleRTCSettings+0x620>)
 8003b9e:	f009 ffe9 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003ba2:	e0cb      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 5:
					Date.Month = RTC_MONTH_MAY;
 8003ba4:	4b99      	ldr	r3, [pc, #612]	; (8003e0c <consoleRTCSettings+0x618>)
 8003ba6:	2205      	movs	r2, #5
 8003ba8:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: May / 5\n");
 8003baa:	489d      	ldr	r0, [pc, #628]	; (8003e20 <consoleRTCSettings+0x62c>)
 8003bac:	f7fd ffac 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4996      	ldr	r1, [pc, #600]	; (8003e0c <consoleRTCSettings+0x618>)
 8003bb4:	4897      	ldr	r0, [pc, #604]	; (8003e14 <consoleRTCSettings+0x620>)
 8003bb6:	f009 fe55 	bl	800d864 <HAL_RTC_SetDate>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <consoleRTCSettings+0x3d4>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003bc0:	4895      	ldr	r0, [pc, #596]	; (8003e18 <consoleRTCSettings+0x624>)
 8003bc2:	f7fd ffa1 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003bc6:	e0b9      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003bc8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4891      	ldr	r0, [pc, #580]	; (8003e14 <consoleRTCSettings+0x620>)
 8003bd0:	f009 ffd0 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003bd4:	e0b2      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 6:
					Date.Month = RTC_MONTH_JUNE;
 8003bd6:	4b8d      	ldr	r3, [pc, #564]	; (8003e0c <consoleRTCSettings+0x618>)
 8003bd8:	2206      	movs	r2, #6
 8003bda:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: June / 6\n");
 8003bdc:	4891      	ldr	r0, [pc, #580]	; (8003e24 <consoleRTCSettings+0x630>)
 8003bde:	f7fd ff93 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003be2:	2200      	movs	r2, #0
 8003be4:	4989      	ldr	r1, [pc, #548]	; (8003e0c <consoleRTCSettings+0x618>)
 8003be6:	488b      	ldr	r0, [pc, #556]	; (8003e14 <consoleRTCSettings+0x620>)
 8003be8:	f009 fe3c 	bl	800d864 <HAL_RTC_SetDate>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <consoleRTCSettings+0x406>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003bf2:	4889      	ldr	r0, [pc, #548]	; (8003e18 <consoleRTCSettings+0x624>)
 8003bf4:	f7fd ff88 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003bf8:	e0a0      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003bfa:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4884      	ldr	r0, [pc, #528]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c02:	f009 ffb7 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003c06:	e099      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 7:
					Date.Month = RTC_MONTH_JULY;
 8003c08:	4b80      	ldr	r3, [pc, #512]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: July / 7\n");
 8003c0e:	4886      	ldr	r0, [pc, #536]	; (8003e28 <consoleRTCSettings+0x634>)
 8003c10:	f7fd ff7a 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c14:	2200      	movs	r2, #0
 8003c16:	497d      	ldr	r1, [pc, #500]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c18:	487e      	ldr	r0, [pc, #504]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c1a:	f009 fe23 	bl	800d864 <HAL_RTC_SetDate>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <consoleRTCSettings+0x438>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003c24:	487c      	ldr	r0, [pc, #496]	; (8003e18 <consoleRTCSettings+0x624>)
 8003c26:	f7fd ff6f 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003c2a:	e087      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003c2c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003c30:	2101      	movs	r1, #1
 8003c32:	4878      	ldr	r0, [pc, #480]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c34:	f009 ff9e 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003c38:	e080      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 8:
					Date.Month = RTC_MONTH_AUGUST;
 8003c3a:	4b74      	ldr	r3, [pc, #464]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: August / 8\n");
 8003c40:	487a      	ldr	r0, [pc, #488]	; (8003e2c <consoleRTCSettings+0x638>)
 8003c42:	f7fd ff61 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c46:	2200      	movs	r2, #0
 8003c48:	4970      	ldr	r1, [pc, #448]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c4a:	4872      	ldr	r0, [pc, #456]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c4c:	f009 fe0a 	bl	800d864 <HAL_RTC_SetDate>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <consoleRTCSettings+0x46a>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003c56:	4870      	ldr	r0, [pc, #448]	; (8003e18 <consoleRTCSettings+0x624>)
 8003c58:	f7fd ff56 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003c5c:	e06e      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003c5e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003c62:	2101      	movs	r1, #1
 8003c64:	486b      	ldr	r0, [pc, #428]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c66:	f009 ff85 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003c6a:	e067      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 9:
					Date.Month = RTC_MONTH_SEPTEMBER;
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c6e:	2209      	movs	r2, #9
 8003c70:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: September / 9\n");
 8003c72:	486f      	ldr	r0, [pc, #444]	; (8003e30 <consoleRTCSettings+0x63c>)
 8003c74:	f7fd ff48 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4964      	ldr	r1, [pc, #400]	; (8003e0c <consoleRTCSettings+0x618>)
 8003c7c:	4865      	ldr	r0, [pc, #404]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c7e:	f009 fdf1 	bl	800d864 <HAL_RTC_SetDate>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <consoleRTCSettings+0x49c>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003c88:	4863      	ldr	r0, [pc, #396]	; (8003e18 <consoleRTCSettings+0x624>)
 8003c8a:	f7fd ff3d 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003c8e:	e055      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003c90:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003c94:	2101      	movs	r1, #1
 8003c96:	485f      	ldr	r0, [pc, #380]	; (8003e14 <consoleRTCSettings+0x620>)
 8003c98:	f009 ff6c 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003c9c:	e04e      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 10:
					Date.Month = RTC_MONTH_OCTOBER;
 8003c9e:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <consoleRTCSettings+0x618>)
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: October / 10\n");
 8003ca4:	4863      	ldr	r0, [pc, #396]	; (8003e34 <consoleRTCSettings+0x640>)
 8003ca6:	f7fd ff2f 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003caa:	2200      	movs	r2, #0
 8003cac:	4957      	ldr	r1, [pc, #348]	; (8003e0c <consoleRTCSettings+0x618>)
 8003cae:	4859      	ldr	r0, [pc, #356]	; (8003e14 <consoleRTCSettings+0x620>)
 8003cb0:	f009 fdd8 	bl	800d864 <HAL_RTC_SetDate>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <consoleRTCSettings+0x4ce>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003cba:	4857      	ldr	r0, [pc, #348]	; (8003e18 <consoleRTCSettings+0x624>)
 8003cbc:	f7fd ff24 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003cc0:	e03c      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003cc2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4852      	ldr	r0, [pc, #328]	; (8003e14 <consoleRTCSettings+0x620>)
 8003cca:	f009 ff53 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003cce:	e035      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 11:
					Date.Month = RTC_MONTH_NOVEMBER;
 8003cd0:	4b4e      	ldr	r3, [pc, #312]	; (8003e0c <consoleRTCSettings+0x618>)
 8003cd2:	2211      	movs	r2, #17
 8003cd4:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: November / 11\n");
 8003cd6:	4858      	ldr	r0, [pc, #352]	; (8003e38 <consoleRTCSettings+0x644>)
 8003cd8:	f7fd ff16 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	494b      	ldr	r1, [pc, #300]	; (8003e0c <consoleRTCSettings+0x618>)
 8003ce0:	484c      	ldr	r0, [pc, #304]	; (8003e14 <consoleRTCSettings+0x620>)
 8003ce2:	f009 fdbf 	bl	800d864 <HAL_RTC_SetDate>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <consoleRTCSettings+0x500>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003cec:	484a      	ldr	r0, [pc, #296]	; (8003e18 <consoleRTCSettings+0x624>)
 8003cee:	f7fd ff0b 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003cf2:	e023      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003cf4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4846      	ldr	r0, [pc, #280]	; (8003e14 <consoleRTCSettings+0x620>)
 8003cfc:	f009 ff3a 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003d00:	e01c      	b.n	8003d3c <consoleRTCSettings+0x548>
				case 12:
					Date.Month = RTC_MONTH_DECEMBER;
 8003d02:	4b42      	ldr	r3, [pc, #264]	; (8003e0c <consoleRTCSettings+0x618>)
 8003d04:	2212      	movs	r2, #18
 8003d06:	705a      	strb	r2, [r3, #1]
					send_uart3("Entered month: December / 12\n");
 8003d08:	484c      	ldr	r0, [pc, #304]	; (8003e3c <consoleRTCSettings+0x648>)
 8003d0a:	f7fd fefd 	bl	8001b08 <send_uart3>
					if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	493e      	ldr	r1, [pc, #248]	; (8003e0c <consoleRTCSettings+0x618>)
 8003d12:	4840      	ldr	r0, [pc, #256]	; (8003e14 <consoleRTCSettings+0x620>)
 8003d14:	f009 fda6 	bl	800d864 <HAL_RTC_SetDate>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <consoleRTCSettings+0x532>
					{
						send_uart3("ERROR - SAVING DATE\n");
 8003d1e:	483e      	ldr	r0, [pc, #248]	; (8003e18 <consoleRTCSettings+0x624>)
 8003d20:	f7fd fef2 	bl	8001b08 <send_uart3>
					}
					else
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
					break;
 8003d24:	e00a      	b.n	8003d3c <consoleRTCSettings+0x548>
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003d26:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4839      	ldr	r0, [pc, #228]	; (8003e14 <consoleRTCSettings+0x620>)
 8003d2e:	f009 ff21 	bl	800db74 <HAL_RTCEx_BKUPWrite>
					break;
 8003d32:	e003      	b.n	8003d3c <consoleRTCSettings+0x548>
				default:
					send_uart3("\nEntered value if out of range\n Date not set");
 8003d34:	4842      	ldr	r0, [pc, #264]	; (8003e40 <consoleRTCSettings+0x64c>)
 8003d36:	f7fd fee7 	bl	8001b08 <send_uart3>
					break;
 8003d3a:	bf00      	nop
			}
			return consoleRTCSettings();
 8003d3c:	f7ff fd5a 	bl	80037f4 <consoleRTCSettings>
 8003d40:	e061      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// set date - year
		case 325:
			temp16 = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter date - year in format of last 2 digits (ex. 2020 means entering 20)\n");
 8003d46:	483f      	ldr	r0, [pc, #252]	; (8003e44 <consoleRTCSettings+0x650>)
 8003d48:	f7fd fede 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	210a      	movs	r1, #10
 8003d50:	483d      	ldr	r0, [pc, #244]	; (8003e48 <consoleRTCSettings+0x654>)
 8003d52:	f7ff fb6d 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 8003d56:	493c      	ldr	r1, [pc, #240]	; (8003e48 <consoleRTCSettings+0x654>)
 8003d58:	200a      	movs	r0, #10
 8003d5a:	f7ff fa63 	bl	8003224 <convertInputToInt>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 1 & temp16 <= 31){
 8003d62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d70:	2b1f      	cmp	r3, #31
 8003d72:	bf94      	ite	ls
 8003d74:	2301      	movls	r3, #1
 8003d76:	2300      	movhi	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d027      	beq.n	8003dd2 <consoleRTCSettings+0x5de>
				uint8_t tempBuf [50];
				sprintf(tempBuf,"  Entered year: %d\n", 2000 + temp16);
 8003d82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d84:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8003d88:	463b      	mov	r3, r7
 8003d8a:	4930      	ldr	r1, [pc, #192]	; (8003e4c <consoleRTCSettings+0x658>)
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f01a fee3 	bl	801eb58 <siprintf>
				send_uart3(tempBuf);
 8003d92:	463b      	mov	r3, r7
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd feb7 	bl	8001b08 <send_uart3>
				Date.Year = decimalToHex((uint8_t)temp16);
 8003d9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fa18 	bl	80031d4 <decimalToHex>
 8003da4:	4603      	mov	r3, r0
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <consoleRTCSettings+0x618>)
 8003daa:	70da      	strb	r2, [r3, #3]
				if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 8003dac:	2200      	movs	r2, #0
 8003dae:	4917      	ldr	r1, [pc, #92]	; (8003e0c <consoleRTCSettings+0x618>)
 8003db0:	4818      	ldr	r0, [pc, #96]	; (8003e14 <consoleRTCSettings+0x620>)
 8003db2:	f009 fd57 	bl	800d864 <HAL_RTC_SetDate>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <consoleRTCSettings+0x5d0>
				{
					send_uart3("ERROR - SAVING DATE\n");
 8003dbc:	4816      	ldr	r0, [pc, #88]	; (8003e18 <consoleRTCSettings+0x624>)
 8003dbe:	f7fd fea3 	bl	8001b08 <send_uart3>
 8003dc2:	e009      	b.n	8003dd8 <consoleRTCSettings+0x5e4>
				}
				else
					HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8003dc4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4812      	ldr	r0, [pc, #72]	; (8003e14 <consoleRTCSettings+0x620>)
 8003dcc:	f009 fed2 	bl	800db74 <HAL_RTCEx_BKUPWrite>
 8003dd0:	e002      	b.n	8003dd8 <consoleRTCSettings+0x5e4>
			}
			else{
				send_uart3("\nEntered value if out of range\n Date not set");
 8003dd2:	481b      	ldr	r0, [pc, #108]	; (8003e40 <consoleRTCSettings+0x64c>)
 8003dd4:	f7fd fe98 	bl	8001b08 <send_uart3>
			}
			return consoleRTCSettings();
 8003dd8:	f7ff fd0c 	bl	80037f4 <consoleRTCSettings>
 8003ddc:	e013      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;

		// device settings menu
		case 888:
			send_uart3("\nGoing back to Device settings menu\n");
 8003dde:	481c      	ldr	r0, [pc, #112]	; (8003e50 <consoleRTCSettings+0x65c>)
 8003de0:	f7fd fe92 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 8003de4:	f000 f83a 	bl	8003e5c <consoleDeviceInterface>
 8003de8:	e00d      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;
		// main menu
		case 999:
			send_uart3("\nGoing back to Main menu\n");
 8003dea:	481a      	ldr	r0, [pc, #104]	; (8003e54 <consoleRTCSettings+0x660>)
 8003dec:	f7fd fe8c 	bl	8001b08 <send_uart3>
			return consoleInterface(123);
 8003df0:	207b      	movs	r0, #123	; 0x7b
 8003df2:	f000 fabf 	bl	8004374 <consoleInterface>
 8003df6:	e006      	b.n	8003e06 <consoleRTCSettings+0x612>
			break;

		default:
			send_uart3("\nUNDEFINED SELECTION\n");
 8003df8:	4817      	ldr	r0, [pc, #92]	; (8003e58 <consoleRTCSettings+0x664>)
 8003dfa:	f7fd fe85 	bl	8001b08 <send_uart3>
			return consoleRTCSettings();
 8003dfe:	f7ff fcf9 	bl	80037f4 <consoleRTCSettings>
 8003e02:	e000      	b.n	8003e06 <consoleRTCSettings+0x612>
		return;
 8003e04:	bf00      	nop


	return consoleRTCSettings();


}
 8003e06:	3738      	adds	r7, #56	; 0x38
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	200072a0 	.word	0x200072a0
 8003e10:	080212ec 	.word	0x080212ec
 8003e14:	20003440 	.word	0x20003440
 8003e18:	08021220 	.word	0x08021220
 8003e1c:	08021308 	.word	0x08021308
 8003e20:	08021324 	.word	0x08021324
 8003e24:	0802133c 	.word	0x0802133c
 8003e28:	08021358 	.word	0x08021358
 8003e2c:	08021374 	.word	0x08021374
 8003e30:	08021390 	.word	0x08021390
 8003e34:	080213b0 	.word	0x080213b0
 8003e38:	080213d0 	.word	0x080213d0
 8003e3c:	080213f0 	.word	0x080213f0
 8003e40:	08021238 	.word	0x08021238
 8003e44:	08021410 	.word	0x08021410
 8003e48:	20008c38 	.word	0x20008c38
 8003e4c:	0802145c 	.word	0x0802145c
 8003e50:	08021470 	.word	0x08021470
 8003e54:	08020f8c 	.word	0x08020f8c
 8003e58:	08020fa8 	.word	0x08020fa8

08003e5c <consoleDeviceInterface>:
*		[888] *Go to main menu
*		[999] *Go to main menu
*/

// subfunction to hanhle console inputs for device settings menu
void consoleDeviceInterface(){
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b08f      	sub	sp, #60	; 0x3c
 8003e60:	af00      	add	r7, sp, #0

	uint16_t temp16 = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	86fb      	strh	r3, [r7, #54]	; 0x36

	// print menu structure
	send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 8003e66:	48b2      	ldr	r0, [pc, #712]	; (8004130 <consoleDeviceInterface+0x2d4>)
 8003e68:	f7fd fe4e 	bl	8001b08 <send_uart3>
			"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");


	// get input command
	uint8_t stateFlag = getConsoleInput(inputData, 3, 1);
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2103      	movs	r1, #3
 8003e70:	48b0      	ldr	r0, [pc, #704]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003e72:	f7ff fadd 	bl	8003430 <getConsoleInput>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	// timeout or no data handler
	if(stateFlag == 99){
 8003e7c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003e80:	2b63      	cmp	r3, #99	; 0x63
 8003e82:	f000 824d 	beq.w	8004320 <consoleDeviceInterface+0x4c4>
		return;
	}

	switch(convertInputToInt(3, inputData)){
 8003e86:	49ab      	ldr	r1, [pc, #684]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003e88:	2003      	movs	r0, #3
 8003e8a:	f7ff f9cb 	bl	8003224 <convertInputToInt>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f240 1233 	movw	r2, #307	; 0x133
 8003e94:	4293      	cmp	r3, r2
 8003e96:	f000 80cd 	beq.w	8004034 <consoleDeviceInterface+0x1d8>
 8003e9a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8003e9e:	da18      	bge.n	8003ed2 <consoleDeviceInterface+0x76>
 8003ea0:	f240 122f 	movw	r2, #303	; 0x12f
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d03b      	beq.n	8003f20 <consoleDeviceInterface+0xc4>
 8003ea8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003eac:	da07      	bge.n	8003ebe <consoleDeviceInterface+0x62>
 8003eae:	f240 122d 	movw	r2, #301	; 0x12d
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02b      	beq.n	8003f0e <consoleDeviceInterface+0xb2>
 8003eb6:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8003eba:	d02e      	beq.n	8003f1a <consoleDeviceInterface+0xbe>
 8003ebc:	e22a      	b.n	8004314 <consoleDeviceInterface+0x4b8>
 8003ebe:	f240 1231 	movw	r2, #305	; 0x131
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	f000 8081 	beq.w	8003fca <consoleDeviceInterface+0x16e>
 8003ec8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8003ecc:	f280 8083 	bge.w	8003fd6 <consoleDeviceInterface+0x17a>
 8003ed0:	e075      	b.n	8003fbe <consoleDeviceInterface+0x162>
 8003ed2:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003ed6:	f000 815b 	beq.w	8004190 <consoleDeviceInterface+0x334>
 8003eda:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003ede:	dc09      	bgt.n	8003ef4 <consoleDeviceInterface+0x98>
 8003ee0:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8003ee4:	f000 80d8 	beq.w	8004098 <consoleDeviceInterface+0x23c>
 8003ee8:	f240 1235 	movw	r2, #309	; 0x135
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f000 80dc 	beq.w	80040aa <consoleDeviceInterface+0x24e>
 8003ef2:	e20f      	b.n	8004314 <consoleDeviceInterface+0x4b8>
 8003ef4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003ef8:	f000 81c8 	beq.w	800428c <consoleDeviceInterface+0x430>
 8003efc:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003f00:	f2c0 8185 	blt.w	800420e <consoleDeviceInterface+0x3b2>
 8003f04:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8003f08:	f000 81fd 	beq.w	8004306 <consoleDeviceInterface+0x4aa>
 8003f0c:	e202      	b.n	8004314 <consoleDeviceInterface+0x4b8>
		// show device settings menu
		case 301:
			send_uart3("\nDevice settings menu\n[301] Show device settings menu\n[302] RTC settings\n[303] Choosing storing method\n[304] Check SD card\n[305] Check USB Flash drive\n[306] Perform offset calibration\n[307] Perform zero offset calibration\n"
 8003f0e:	4888      	ldr	r0, [pc, #544]	; (8004130 <consoleDeviceInterface+0x2d4>)
 8003f10:	f7fd fdfa 	bl	8001b08 <send_uart3>
						"[308] Perform device selfcheck\n[309] Adjust power source - voltage\n[310] Adjust power source - current limit\n[311] Enable power source\n[312] Set power source enabling mode\n[888] Go to Main menu\n[999] Go to Main menu\n");
			return consoleDeviceInterface();
 8003f14:	f7ff ffa2 	bl	8003e5c <consoleDeviceInterface>
 8003f18:	e203      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// go to RTC settings submenu
		case 302:
			return consoleRTCSettings();
 8003f1a:	f7ff fc6b 	bl	80037f4 <consoleRTCSettings>
 8003f1e:	e200      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// choose storing method
		case 303:
			send_uart3("\nChoose storing method\n\n 1 - COM port\n 2 - SD Card\n 3 - USB Flash Drive\n 0 - Exit, no change\n");
 8003f20:	4885      	ldr	r0, [pc, #532]	; (8004138 <consoleDeviceInterface+0x2dc>)
 8003f22:	f7fd fdf1 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8003f26:	2201      	movs	r2, #1
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4882      	ldr	r0, [pc, #520]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003f2c:	f7ff fa80 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003f30:	4980      	ldr	r1, [pc, #512]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003f32:	2001      	movs	r0, #1
 8003f34:	f7ff f976 	bl	8003224 <convertInputToInt>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d838      	bhi.n	8003fb0 <consoleDeviceInterface+0x154>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <consoleDeviceInterface+0xe8>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003fa9 	.word	0x08003fa9
 8003f48:	08003f55 	.word	0x08003f55
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f8d 	.word	0x08003f8d
			case 1:
				settings.isLoggingToConsole = 1;
 8003f54:	4b79      	ldr	r3, [pc, #484]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 8003f5a:	4b78      	ldr	r3, [pc, #480]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 8003f60:	4b76      	ldr	r3, [pc, #472]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: COM port\n");
 8003f68:	4875      	ldr	r0, [pc, #468]	; (8004140 <consoleDeviceInterface+0x2e4>)
 8003f6a:	f7fd fdcd 	bl	8001b08 <send_uart3>
				break;
 8003f6e:	e023      	b.n	8003fb8 <consoleDeviceInterface+0x15c>
			case 2:
				settings.isLoggingToConsole = 0;
 8003f70:	4b72      	ldr	r3, [pc, #456]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 1;
 8003f76:	4b71      	ldr	r3, [pc, #452]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 0;
 8003f7c:	4b6f      	ldr	r3, [pc, #444]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				send_uart3("\nStoring method: SD Card\n");
 8003f84:	486f      	ldr	r0, [pc, #444]	; (8004144 <consoleDeviceInterface+0x2e8>)
 8003f86:	f7fd fdbf 	bl	8001b08 <send_uart3>
				break;
 8003f8a:	e015      	b.n	8003fb8 <consoleDeviceInterface+0x15c>
			case 3:
				settings.isLoggingToConsole = 0;
 8003f8c:	4b6b      	ldr	r3, [pc, #428]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
				settings.isLoggingToSD = 0;
 8003f92:	4b6a      	ldr	r3, [pc, #424]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	705a      	strb	r2, [r3, #1]
				settings.isLoggingToUSB = 1;
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <consoleDeviceInterface+0x2e0>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				//isLoggingToConsole = 1;
				//isLoggingToSD = 1;
				send_uart3("\nStoring method: USB Flash Drive\n");
 8003fa0:	4869      	ldr	r0, [pc, #420]	; (8004148 <consoleDeviceInterface+0x2ec>)
 8003fa2:	f7fd fdb1 	bl	8001b08 <send_uart3>
				break;
 8003fa6:	e007      	b.n	8003fb8 <consoleDeviceInterface+0x15c>
			case 0:
				send_uart3("\nStoring method: UNCHANGED\n");
 8003fa8:	4868      	ldr	r0, [pc, #416]	; (800414c <consoleDeviceInterface+0x2f0>)
 8003faa:	f7fd fdad 	bl	8001b08 <send_uart3>
				break;
 8003fae:	e003      	b.n	8003fb8 <consoleDeviceInterface+0x15c>
			default:
				send_uart3("\nStoring method: UNDEFINED\n");
 8003fb0:	4867      	ldr	r0, [pc, #412]	; (8004150 <consoleDeviceInterface+0x2f4>)
 8003fb2:	f7fd fda9 	bl	8001b08 <send_uart3>
				break;
 8003fb6:	bf00      	nop
			}
			return consoleDeviceInterface();
 8003fb8:	f7ff ff50 	bl	8003e5c <consoleDeviceInterface>
 8003fbc:	e1b1      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// check SD card
		case 304:
			send_uart3("\nChecking SD card\n");
 8003fbe:	4865      	ldr	r0, [pc, #404]	; (8004154 <consoleDeviceInterface+0x2f8>)
 8003fc0:	f7fd fda2 	bl	8001b08 <send_uart3>

			return consoleDeviceInterface();
 8003fc4:	f7ff ff4a 	bl	8003e5c <consoleDeviceInterface>
 8003fc8:	e1ab      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// check USB flash drive
		case 305:
			send_uart3("\nChecking USB flash drive\n");
 8003fca:	4863      	ldr	r0, [pc, #396]	; (8004158 <consoleDeviceInterface+0x2fc>)
 8003fcc:	f7fd fd9c 	bl	8001b08 <send_uart3>

			return consoleDeviceInterface();
 8003fd0:	f7ff ff44 	bl	8003e5c <consoleDeviceInterface>
 8003fd4:	e1a5      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// perform DC offset calibration
		case 306:
			send_uart3("\nDo you really want to perform offset calibration (You will lose previous DC offset calibration value)\n 1 - YES, PERFORM CALIBRATION\n 2 - NO, I DONT WANT TO\n"
 8003fd6:	4861      	ldr	r0, [pc, #388]	; (800415c <consoleDeviceInterface+0x300>)
 8003fd8:	f7fd fd96 	bl	8001b08 <send_uart3>
					" !! BEFORE YOU ANSWER !!\n UNPLUG all measured devices from device (inc. measuring plugs) and then start procedure)\n");
			getConsoleInput(&inputData, 1, 1);
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2101      	movs	r1, #1
 8003fe0:	4854      	ldr	r0, [pc, #336]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003fe2:	f7ff fa25 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8003fe6:	4953      	ldr	r1, [pc, #332]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f7ff f91b 	bl	8003224 <convertInputToInt>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d002      	beq.n	8003ffa <consoleDeviceInterface+0x19e>
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d012      	beq.n	800401e <consoleDeviceInterface+0x1c2>
 8003ff8:	e015      	b.n	8004026 <consoleDeviceInterface+0x1ca>
			case 1:
				send_uart3("\nOffset calibration - started\n");
 8003ffa:	4859      	ldr	r0, [pc, #356]	; (8004160 <consoleDeviceInterface+0x304>)
 8003ffc:	f7fd fd84 	bl	8001b08 <send_uart3>
				adc_compensateOffset();
 8004000:	f7fe fcdc 	bl	80029bc <adc_compensateOffset>
				send_uart3("\nOffset calibration - finished\n");
 8004004:	4857      	ldr	r0, [pc, #348]	; (8004164 <consoleDeviceInterface+0x308>)
 8004006:	f7fd fd7f 	bl	8001b08 <send_uart3>
				writeEEPROM_AT24();
 800400a:	f7fd fe71 	bl	8001cf0 <writeEEPROM_AT24>
				microDelay(5);
 800400e:	2005      	movs	r0, #5
 8004010:	f7fd fda6 	bl	8001b60 <microDelay>
				readEEPROM_AT24();
 8004014:	f7fd ffe8 	bl	8001fe8 <readEEPROM_AT24>
				printSettingsValues();
 8004018:	f7ff f934 	bl	8003284 <printSettingsValues>
				break;
 800401c:	e007      	b.n	800402e <consoleDeviceInterface+0x1d2>
			case 2:
				send_uart3("\nOffset value: UNCHANGED\n");
 800401e:	4852      	ldr	r0, [pc, #328]	; (8004168 <consoleDeviceInterface+0x30c>)
 8004020:	f7fd fd72 	bl	8001b08 <send_uart3>
				break;
 8004024:	e003      	b.n	800402e <consoleDeviceInterface+0x1d2>
			default:
				send_uart3("\nOffset value: UNCHANGED\n");
 8004026:	4850      	ldr	r0, [pc, #320]	; (8004168 <consoleDeviceInterface+0x30c>)
 8004028:	f7fd fd6e 	bl	8001b08 <send_uart3>
				break;
 800402c:	bf00      	nop
			}

			return consoleDeviceInterface();
 800402e:	f7ff ff15 	bl	8003e5c <consoleDeviceInterface>
 8004032:	e176      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			break;
		// zero DC offset value / disable calibration
		case 307:
			send_uart3("\nDo you really want to zero offset calibration value (You will lose DC offset calibration)\n 1 - YES, ZERO DC OFFSET\n 2 - NO, I DONT WANT TO\n");
 8004034:	484d      	ldr	r0, [pc, #308]	; (800416c <consoleDeviceInterface+0x310>)
 8004036:	f7fd fd67 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 800403a:	2201      	movs	r2, #1
 800403c:	2101      	movs	r1, #1
 800403e:	483d      	ldr	r0, [pc, #244]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8004040:	f7ff f9f6 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8004044:	493b      	ldr	r1, [pc, #236]	; (8004134 <consoleDeviceInterface+0x2d8>)
 8004046:	2001      	movs	r0, #1
 8004048:	f7ff f8ec 	bl	8003224 <convertInputToInt>
 800404c:	4603      	mov	r3, r0
 800404e:	2b01      	cmp	r3, #1
 8004050:	d002      	beq.n	8004058 <consoleDeviceInterface+0x1fc>
 8004052:	2b02      	cmp	r3, #2
 8004054:	d014      	beq.n	8004080 <consoleDeviceInterface+0x224>
 8004056:	e017      	b.n	8004088 <consoleDeviceInterface+0x22c>
			case 1:
				settings.lastOffsetValue = 0.0;
 8004058:	4a38      	ldr	r2, [pc, #224]	; (800413c <consoleDeviceInterface+0x2e0>)
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	f04f 0400 	mov.w	r4, #0
 8004062:	e9c2 3406 	strd	r3, r4, [r2, #24]
				writeEEPROM_AT24();
 8004066:	f7fd fe43 	bl	8001cf0 <writeEEPROM_AT24>
				microDelay(5);
 800406a:	2005      	movs	r0, #5
 800406c:	f7fd fd78 	bl	8001b60 <microDelay>
				readEEPROM_AT24();
 8004070:	f7fd ffba 	bl	8001fe8 <readEEPROM_AT24>
				printSettingsValues();
 8004074:	f7ff f906 	bl	8003284 <printSettingsValues>
				send_uart3("\nDC offset value: ZEROED\n");
 8004078:	483d      	ldr	r0, [pc, #244]	; (8004170 <consoleDeviceInterface+0x314>)
 800407a:	f7fd fd45 	bl	8001b08 <send_uart3>
				break;
 800407e:	e007      	b.n	8004090 <consoleDeviceInterface+0x234>
			case 2:
				send_uart3("\nDC offset value: UNCHANGED\n");
 8004080:	483c      	ldr	r0, [pc, #240]	; (8004174 <consoleDeviceInterface+0x318>)
 8004082:	f7fd fd41 	bl	8001b08 <send_uart3>
				break;
 8004086:	e003      	b.n	8004090 <consoleDeviceInterface+0x234>
			default:
				send_uart3("\nDC offset value: UNCHANGED\n");
 8004088:	483a      	ldr	r0, [pc, #232]	; (8004174 <consoleDeviceInterface+0x318>)
 800408a:	f7fd fd3d 	bl	8001b08 <send_uart3>
				break;
 800408e:	bf00      	nop
			}
			break;
 8004090:	bf00      	nop
			send_uart3("\nUNDEFINED SELECTION\n");
			return consoleDeviceInterface();
			break;
	}

	return consoleDeviceInterface();
 8004092:	f7ff fee3 	bl	8003e5c <consoleDeviceInterface>
 8004096:	e144      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nDevice selfcheck - started\n");
 8004098:	4837      	ldr	r0, [pc, #220]	; (8004178 <consoleDeviceInterface+0x31c>)
 800409a:	f7fd fd35 	bl	8001b08 <send_uart3>
			send_uart3("\nDevice selfcheck - finished\n");
 800409e:	4837      	ldr	r0, [pc, #220]	; (800417c <consoleDeviceInterface+0x320>)
 80040a0:	f7fd fd32 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 80040a4:	f7ff feda 	bl	8003e5c <consoleDeviceInterface>
 80040a8:	e13b      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			temp16 = settings.powerSourceVoltage;
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <consoleDeviceInterface+0x2e0>)
 80040ac:	8c1b      	ldrh	r3, [r3, #32]
 80040ae:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source voltage in mV (anywhere between 500 mV - 5500 mV) or enter 0 to exit without change\n");
 80040b0:	4833      	ldr	r0, [pc, #204]	; (8004180 <consoleDeviceInterface+0x324>)
 80040b2:	f7fd fd29 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 80040b6:	2201      	movs	r2, #1
 80040b8:	210a      	movs	r1, #10
 80040ba:	481e      	ldr	r0, [pc, #120]	; (8004134 <consoleDeviceInterface+0x2d8>)
 80040bc:	f7ff f9b8 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80040c0:	491c      	ldr	r1, [pc, #112]	; (8004134 <consoleDeviceInterface+0x2d8>)
 80040c2:	200a      	movs	r0, #10
 80040c4:	f7ff f8ae 	bl	8003224 <convertInputToInt>
 80040c8:	4603      	mov	r3, r0
 80040ca:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 500 & temp16 <= 5500){
 80040cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040ce:	f240 12f3 	movw	r2, #499	; 0x1f3
 80040d2:	4293      	cmp	r3, r2
 80040d4:	bf8c      	ite	hi
 80040d6:	2301      	movhi	r3, #1
 80040d8:	2300      	movls	r3, #0
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040de:	f241 517c 	movw	r1, #5500	; 0x157c
 80040e2:	428b      	cmp	r3, r1
 80040e4:	bf94      	ite	ls
 80040e6:	2301      	movls	r3, #1
 80040e8:	2300      	movhi	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	4013      	ands	r3, r2
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00f      	beq.n	8004114 <consoleDeviceInterface+0x2b8>
				sprintf(tempBuf,"New entered value is: %d mV\n", temp16);
 80040f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80040f6:	463b      	mov	r3, r7
 80040f8:	4922      	ldr	r1, [pc, #136]	; (8004184 <consoleDeviceInterface+0x328>)
 80040fa:	4618      	mov	r0, r3
 80040fc:	f01a fd2c 	bl	801eb58 <siprintf>
				send_uart3(tempBuf);
 8004100:	463b      	mov	r3, r7
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd fd00 	bl	8001b08 <send_uart3>
				settings.powerSourceVoltage = temp16;
 8004108:	4a0c      	ldr	r2, [pc, #48]	; (800413c <consoleDeviceInterface+0x2e0>)
 800410a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800410c:	8413      	strh	r3, [r2, #32]
				setPotenciomenters();
 800410e:	f7fe f8b3 	bl	8002278 <setPotenciomenters>
 8004112:	e009      	b.n	8004128 <consoleDeviceInterface+0x2cc>
			else if(temp16 == 0){
 8004114:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <consoleDeviceInterface+0x2c6>
				send_uart3("\nPower source - Voltage: UNCHANGED\n");
 800411a:	481b      	ldr	r0, [pc, #108]	; (8004188 <consoleDeviceInterface+0x32c>)
 800411c:	f7fd fcf4 	bl	8001b08 <send_uart3>
 8004120:	e002      	b.n	8004128 <consoleDeviceInterface+0x2cc>
				send_uart3("\nEntered value if out of range\n");
 8004122:	481a      	ldr	r0, [pc, #104]	; (800418c <consoleDeviceInterface+0x330>)
 8004124:	f7fd fcf0 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 8004128:	f7ff fe98 	bl	8003e5c <consoleDeviceInterface>
 800412c:	e0f9      	b.n	8004322 <consoleDeviceInterface+0x4c6>
 800412e:	bf00      	nop
 8004130:	08021498 	.word	0x08021498
 8004134:	20008c38 	.word	0x20008c38
 8004138:	08021650 	.word	0x08021650
 800413c:	20000018 	.word	0x20000018
 8004140:	080216b0 	.word	0x080216b0
 8004144:	080216cc 	.word	0x080216cc
 8004148:	080216e8 	.word	0x080216e8
 800414c:	0802170c 	.word	0x0802170c
 8004150:	08021728 	.word	0x08021728
 8004154:	08021744 	.word	0x08021744
 8004158:	08021758 	.word	0x08021758
 800415c:	08021774 	.word	0x08021774
 8004160:	08021888 	.word	0x08021888
 8004164:	080218a8 	.word	0x080218a8
 8004168:	080218c8 	.word	0x080218c8
 800416c:	080218e4 	.word	0x080218e4
 8004170:	08021974 	.word	0x08021974
 8004174:	08021990 	.word	0x08021990
 8004178:	080219b0 	.word	0x080219b0
 800417c:	080219d0 	.word	0x080219d0
 8004180:	080219f0 	.word	0x080219f0
 8004184:	08021a64 	.word	0x08021a64
 8004188:	08021a84 	.word	0x08021a84
 800418c:	08020cc8 	.word	0x08020cc8
			temp16 = settings.powerSourceCurrent;
 8004190:	4b65      	ldr	r3, [pc, #404]	; (8004328 <consoleDeviceInterface+0x4cc>)
 8004192:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004194:	86fb      	strh	r3, [r7, #54]	; 0x36
			send_uart3("\nEnter desired power source current limit in mA (anywhere between 10 mA - 500 mA) or enter 0 to exit without change\n");
 8004196:	4865      	ldr	r0, [pc, #404]	; (800432c <consoleDeviceInterface+0x4d0>)
 8004198:	f7fd fcb6 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 10, 1);
 800419c:	2201      	movs	r2, #1
 800419e:	210a      	movs	r1, #10
 80041a0:	4863      	ldr	r0, [pc, #396]	; (8004330 <consoleDeviceInterface+0x4d4>)
 80041a2:	f7ff f945 	bl	8003430 <getConsoleInput>
			temp16 = convertInputToInt(10, &inputData);
 80041a6:	4962      	ldr	r1, [pc, #392]	; (8004330 <consoleDeviceInterface+0x4d4>)
 80041a8:	200a      	movs	r0, #10
 80041aa:	f7ff f83b 	bl	8003224 <convertInputToInt>
 80041ae:	4603      	mov	r3, r0
 80041b0:	86fb      	strh	r3, [r7, #54]	; 0x36
			if(temp16 >= 10 & temp16 <= 500){
 80041b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	bf8c      	ite	hi
 80041b8:	2301      	movhi	r3, #1
 80041ba:	2300      	movls	r3, #0
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041c4:	bf94      	ite	ls
 80041c6:	2301      	movls	r3, #1
 80041c8:	2300      	movhi	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4013      	ands	r3, r2
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00f      	beq.n	80041f4 <consoleDeviceInterface+0x398>
				sprintf(tempBuf,"New entered value is: %d mA\n", temp16);
 80041d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80041d6:	463b      	mov	r3, r7
 80041d8:	4956      	ldr	r1, [pc, #344]	; (8004334 <consoleDeviceInterface+0x4d8>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f01a fcbc 	bl	801eb58 <siprintf>
				send_uart3(tempBuf);
 80041e0:	463b      	mov	r3, r7
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fc90 	bl	8001b08 <send_uart3>
				settings.powerSourceCurrent = temp16;
 80041e8:	4a4f      	ldr	r2, [pc, #316]	; (8004328 <consoleDeviceInterface+0x4cc>)
 80041ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ec:	8453      	strh	r3, [r2, #34]	; 0x22
				setPotenciomenters();
 80041ee:	f7fe f843 	bl	8002278 <setPotenciomenters>
 80041f2:	e009      	b.n	8004208 <consoleDeviceInterface+0x3ac>
			else if(temp16 == 0){
 80041f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <consoleDeviceInterface+0x3a6>
				send_uart3("\nPower source - Current: UNCHANGED\n");
 80041fa:	484f      	ldr	r0, [pc, #316]	; (8004338 <consoleDeviceInterface+0x4dc>)
 80041fc:	f7fd fc84 	bl	8001b08 <send_uart3>
 8004200:	e002      	b.n	8004208 <consoleDeviceInterface+0x3ac>
				send_uart3("\nEntered value if out of range\n");
 8004202:	484e      	ldr	r0, [pc, #312]	; (800433c <consoleDeviceInterface+0x4e0>)
 8004204:	f7fd fc80 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 8004208:	f7ff fe28 	bl	8003e5c <consoleDeviceInterface>
 800420c:	e089      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nDo you want to enable power source\n 1 - YES, ENABLE\n 2 - NO, DISABLE\n");
 800420e:	484c      	ldr	r0, [pc, #304]	; (8004340 <consoleDeviceInterface+0x4e4>)
 8004210:	f7fd fc7a 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8004214:	2201      	movs	r2, #1
 8004216:	2101      	movs	r1, #1
 8004218:	4845      	ldr	r0, [pc, #276]	; (8004330 <consoleDeviceInterface+0x4d4>)
 800421a:	f7ff f909 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 800421e:	4944      	ldr	r1, [pc, #272]	; (8004330 <consoleDeviceInterface+0x4d4>)
 8004220:	2001      	movs	r0, #1
 8004222:	f7fe ffff 	bl	8003224 <convertInputToInt>
 8004226:	4603      	mov	r3, r0
 8004228:	2b01      	cmp	r3, #1
 800422a:	d002      	beq.n	8004232 <consoleDeviceInterface+0x3d6>
 800422c:	2b02      	cmp	r3, #2
 800422e:	d013      	beq.n	8004258 <consoleDeviceInterface+0x3fc>
 8004230:	e025      	b.n	800427e <consoleDeviceInterface+0x422>
				settings.powerSourceEnable = 1;
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <consoleDeviceInterface+0x4cc>)
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 800423a:	2201      	movs	r2, #1
 800423c:	2110      	movs	r1, #16
 800423e:	4841      	ldr	r0, [pc, #260]	; (8004344 <consoleDeviceInterface+0x4e8>)
 8004240:	f005 fb08 	bl	8009854 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8004244:	2201      	movs	r2, #1
 8004246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800424a:	483f      	ldr	r0, [pc, #252]	; (8004348 <consoleDeviceInterface+0x4ec>)
 800424c:	f005 fb02 	bl	8009854 <HAL_GPIO_WritePin>
				send_uart3("\nPower source: ENABLED\n");
 8004250:	483e      	ldr	r0, [pc, #248]	; (800434c <consoleDeviceInterface+0x4f0>)
 8004252:	f7fd fc59 	bl	8001b08 <send_uart3>
				break;
 8004256:	e016      	b.n	8004286 <consoleDeviceInterface+0x42a>
				settings.powerSourceEnable = 0;
 8004258:	4b33      	ldr	r3, [pc, #204]	; (8004328 <consoleDeviceInterface+0x4cc>)
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				send_uart3("\nPower source: DISABLED\n");
 8004260:	483b      	ldr	r0, [pc, #236]	; (8004350 <consoleDeviceInterface+0x4f4>)
 8004262:	f7fd fc51 	bl	8001b08 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8004266:	2200      	movs	r2, #0
 8004268:	2110      	movs	r1, #16
 800426a:	4836      	ldr	r0, [pc, #216]	; (8004344 <consoleDeviceInterface+0x4e8>)
 800426c:	f005 faf2 	bl	8009854 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8004270:	2200      	movs	r2, #0
 8004272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004276:	4834      	ldr	r0, [pc, #208]	; (8004348 <consoleDeviceInterface+0x4ec>)
 8004278:	f005 faec 	bl	8009854 <HAL_GPIO_WritePin>
				break;
 800427c:	e003      	b.n	8004286 <consoleDeviceInterface+0x42a>
				send_uart3("\nPower source: NO CHANGE\n");
 800427e:	4835      	ldr	r0, [pc, #212]	; (8004354 <consoleDeviceInterface+0x4f8>)
 8004280:	f7fd fc42 	bl	8001b08 <send_uart3>
				break;
 8004284:	bf00      	nop
			return consoleDeviceInterface();
 8004286:	f7ff fde9 	bl	8003e5c <consoleDeviceInterface>
 800428a:	e04a      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nChoose behaviour of power source\n 1 - Enable when starting measuring\n 2 - Enable when starting device\n 3 - Leave to user (manually enable/disable)\n 4 - Exit without change\n");
 800428c:	4832      	ldr	r0, [pc, #200]	; (8004358 <consoleDeviceInterface+0x4fc>)
 800428e:	f7fd fc3b 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8004292:	2201      	movs	r2, #1
 8004294:	2101      	movs	r1, #1
 8004296:	4826      	ldr	r0, [pc, #152]	; (8004330 <consoleDeviceInterface+0x4d4>)
 8004298:	f7ff f8ca 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 800429c:	4924      	ldr	r1, [pc, #144]	; (8004330 <consoleDeviceInterface+0x4d4>)
 800429e:	2001      	movs	r0, #1
 80042a0:	f7fe ffc0 	bl	8003224 <convertInputToInt>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d00b      	beq.n	80042c2 <consoleDeviceInterface+0x466>
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d01c      	beq.n	80042e8 <consoleDeviceInterface+0x48c>
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d122      	bne.n	80042f8 <consoleDeviceInterface+0x49c>
				settings.powerSourceEnableMode = 1;
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <consoleDeviceInterface+0x4cc>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting measuring\n");
 80042ba:	4828      	ldr	r0, [pc, #160]	; (800435c <consoleDeviceInterface+0x500>)
 80042bc:	f7fd fc24 	bl	8001b08 <send_uart3>
				break;
 80042c0:	e01e      	b.n	8004300 <consoleDeviceInterface+0x4a4>
				settings.powerSourceEnableMode = 2;
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <consoleDeviceInterface+0x4cc>)
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable when starting device\n");
 80042ca:	4825      	ldr	r0, [pc, #148]	; (8004360 <consoleDeviceInterface+0x504>)
 80042cc:	f7fd fc1c 	bl	8001b08 <send_uart3>
				HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 80042d0:	2201      	movs	r2, #1
 80042d2:	2110      	movs	r1, #16
 80042d4:	481b      	ldr	r0, [pc, #108]	; (8004344 <consoleDeviceInterface+0x4e8>)
 80042d6:	f005 fabd 	bl	8009854 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 80042da:	2201      	movs	r2, #1
 80042dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042e0:	4819      	ldr	r0, [pc, #100]	; (8004348 <consoleDeviceInterface+0x4ec>)
 80042e2:	f005 fab7 	bl	8009854 <HAL_GPIO_WritePin>
				break;
 80042e6:	e00b      	b.n	8004300 <consoleDeviceInterface+0x4a4>
				settings.powerSourceEnableMode = 0;
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <consoleDeviceInterface+0x4cc>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				send_uart3("\nPower source enable mode: Enable by user\n");
 80042f0:	481c      	ldr	r0, [pc, #112]	; (8004364 <consoleDeviceInterface+0x508>)
 80042f2:	f7fd fc09 	bl	8001b08 <send_uart3>
				break;
 80042f6:	e003      	b.n	8004300 <consoleDeviceInterface+0x4a4>
				send_uart3("\nPower source enable mode: NO CHANGE\n");
 80042f8:	481b      	ldr	r0, [pc, #108]	; (8004368 <consoleDeviceInterface+0x50c>)
 80042fa:	f7fd fc05 	bl	8001b08 <send_uart3>
				break;
 80042fe:	bf00      	nop
			return consoleDeviceInterface();
 8004300:	f7ff fdac 	bl	8003e5c <consoleDeviceInterface>
 8004304:	e00d      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nGoing back to Main menu\n");
 8004306:	4819      	ldr	r0, [pc, #100]	; (800436c <consoleDeviceInterface+0x510>)
 8004308:	f7fd fbfe 	bl	8001b08 <send_uart3>
			return consoleInterface(123);
 800430c:	207b      	movs	r0, #123	; 0x7b
 800430e:	f000 f831 	bl	8004374 <consoleInterface>
 8004312:	e006      	b.n	8004322 <consoleDeviceInterface+0x4c6>
			send_uart3("\nUNDEFINED SELECTION\n");
 8004314:	4816      	ldr	r0, [pc, #88]	; (8004370 <consoleDeviceInterface+0x514>)
 8004316:	f7fd fbf7 	bl	8001b08 <send_uart3>
			return consoleDeviceInterface();
 800431a:	f7ff fd9f 	bl	8003e5c <consoleDeviceInterface>
 800431e:	e000      	b.n	8004322 <consoleDeviceInterface+0x4c6>
		return;
 8004320:	bf00      	nop


}
 8004322:	373c      	adds	r7, #60	; 0x3c
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}
 8004328:	20000018 	.word	0x20000018
 800432c:	08021aa8 	.word	0x08021aa8
 8004330:	20008c38 	.word	0x20008c38
 8004334:	08021b20 	.word	0x08021b20
 8004338:	08021b40 	.word	0x08021b40
 800433c:	08020cc8 	.word	0x08020cc8
 8004340:	08021b64 	.word	0x08021b64
 8004344:	40020000 	.word	0x40020000
 8004348:	40020400 	.word	0x40020400
 800434c:	08021bac 	.word	0x08021bac
 8004350:	08021bc4 	.word	0x08021bc4
 8004354:	08021be0 	.word	0x08021be0
 8004358:	08021bfc 	.word	0x08021bfc
 800435c:	08021cac 	.word	0x08021cac
 8004360:	08021ce8 	.word	0x08021ce8
 8004364:	08021d20 	.word	0x08021d20
 8004368:	08021d4c 	.word	0x08021d4c
 800436c:	08020f8c 	.word	0x08020f8c
 8004370:	08020fa8 	.word	0x08020fa8

08004374 <consoleInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void consoleInterface(uint8_t flag){
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]

	uint8_t stateFlag = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]

	if(flag == 0){
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10d      	bne.n	80043a4 <consoleInterface+0x30>
		HAL_UART_Receive_IT(&huart6, inputData, 3);
		while(isWaitingForData == 1);
		*/
		//send_uart("flag0");
		//microDelay(50);
		microDelay(1);
 8004388:	2001      	movs	r0, #1
 800438a:	f7fd fbe9 	bl	8001b60 <microDelay>
		return;
	}


	// get input command
	stateFlag = getConsoleInput(inputData, 3, 0);
 800438e:	2200      	movs	r2, #0
 8004390:	2103      	movs	r1, #3
 8004392:	4864      	ldr	r0, [pc, #400]	; (8004524 <consoleInterface+0x1b0>)
 8004394:	f7ff f84c 	bl	8003430 <getConsoleInput>
 8004398:	4603      	mov	r3, r0
 800439a:	73fb      	strb	r3, [r7, #15]

	// timeout or no data handler
	if(stateFlag == 99){
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b63      	cmp	r3, #99	; 0x63
 80043a0:	d10b      	bne.n	80043ba <consoleInterface+0x46>
		return;
 80043a2:	e0bc      	b.n	800451e <consoleInterface+0x1aa>
	else if(flag == 11){
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	2b0b      	cmp	r3, #11
 80043a8:	d103      	bne.n	80043b2 <consoleInterface+0x3e>
		send_uart3("Input timeout");
 80043aa:	485f      	ldr	r0, [pc, #380]	; (8004528 <consoleInterface+0x1b4>)
 80043ac:	f7fd fbac 	bl	8001b08 <send_uart3>
		return;
 80043b0:	e0b5      	b.n	800451e <consoleInterface+0x1aa>
		send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 80043b2:	485e      	ldr	r0, [pc, #376]	; (800452c <consoleInterface+0x1b8>)
 80043b4:	f7fd fba8 	bl	8001b08 <send_uart3>
		return;
 80043b8:	e0b1      	b.n	800451e <consoleInterface+0x1aa>
	}

	switch(convertInputToInt(3, inputData)){
 80043ba:	495a      	ldr	r1, [pc, #360]	; (8004524 <consoleInterface+0x1b0>)
 80043bc:	2003      	movs	r0, #3
 80043be:	f7fe ff31 	bl	8003224 <convertInputToInt>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b68      	cmp	r3, #104	; 0x68
 80043c6:	d02e      	beq.n	8004426 <consoleInterface+0xb2>
 80043c8:	2b68      	cmp	r3, #104	; 0x68
 80043ca:	dc0c      	bgt.n	80043e6 <consoleInterface+0x72>
 80043cc:	2b65      	cmp	r3, #101	; 0x65
 80043ce:	d01a      	beq.n	8004406 <consoleInterface+0x92>
 80043d0:	2b65      	cmp	r3, #101	; 0x65
 80043d2:	dc03      	bgt.n	80043dc <consoleInterface+0x68>
 80043d4:	2b63      	cmp	r3, #99	; 0x63
 80043d6:	f000 8094 	beq.w	8004502 <consoleInterface+0x18e>
 80043da:	e099      	b.n	8004510 <consoleInterface+0x19c>
 80043dc:	2b66      	cmp	r3, #102	; 0x66
 80043de:	d01c      	beq.n	800441a <consoleInterface+0xa6>
 80043e0:	2b67      	cmp	r3, #103	; 0x67
 80043e2:	d01d      	beq.n	8004420 <consoleInterface+0xac>
 80043e4:	e094      	b.n	8004510 <consoleInterface+0x19c>
 80043e6:	2b6f      	cmp	r3, #111	; 0x6f
 80043e8:	d05c      	beq.n	80044a4 <consoleInterface+0x130>
 80043ea:	2b6f      	cmp	r3, #111	; 0x6f
 80043ec:	dc04      	bgt.n	80043f8 <consoleInterface+0x84>
 80043ee:	2b69      	cmp	r3, #105	; 0x69
 80043f0:	d021      	beq.n	8004436 <consoleInterface+0xc2>
 80043f2:	2b6a      	cmp	r3, #106	; 0x6a
 80043f4:	d02c      	beq.n	8004450 <consoleInterface+0xdc>
 80043f6:	e08b      	b.n	8004510 <consoleInterface+0x19c>
 80043f8:	2bc9      	cmp	r3, #201	; 0xc9
 80043fa:	d008      	beq.n	800440e <consoleInterface+0x9a>
 80043fc:	f240 122d 	movw	r2, #301	; 0x12d
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <consoleInterface+0xa0>
 8004404:	e084      	b.n	8004510 <consoleInterface+0x19c>
	//switch (convertInputToInt(3, &getConsoleInput(3))){
	//switch (convertInputToInt(3, &inputData)) {
		// Show default menu
		case 101:
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8004406:	4849      	ldr	r0, [pc, #292]	; (800452c <consoleInterface+0x1b8>)
 8004408:	f7fd fb7e 	bl	8001b08 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 800440c:	e087      	b.n	800451e <consoleInterface+0x1aa>
		// Show measuring settings menu
		case 201:
			consoleMeasuringInterface();
 800440e:	f7ff f893 	bl	8003538 <consoleMeasuringInterface>
			break;
 8004412:	e084      	b.n	800451e <consoleInterface+0x1aa>
		// Show device settings menu
		case 301:
			consoleDeviceInterface();
 8004414:	f7ff fd22 	bl	8003e5c <consoleDeviceInterface>
			break;
 8004418:	e081      	b.n	800451e <consoleInterface+0x1aa>
		// Show current settings
		case 102:
			printSettingsValues();
 800441a:	f7fe ff33 	bl	8003284 <printSettingsValues>
			break;
 800441e:	e07e      	b.n	800451e <consoleInterface+0x1aa>
		// show last measured values
		case 103:
			printLastMeasuredValues();
 8004420:	f7fe ff8c 	bl	800333c <printLastMeasuredValues>
			break;
 8004424:	e07b      	b.n	800451e <consoleInterface+0x1aa>
		// read EEPROM
		case 104:
			readEEPROM_AT24();
 8004426:	f7fd fddf 	bl	8001fe8 <readEEPROM_AT24>
			printSettingsValues();
 800442a:	f7fe ff2b 	bl	8003284 <printSettingsValues>
			send_uart3("\n EEPROM read\n");
 800442e:	4840      	ldr	r0, [pc, #256]	; (8004530 <consoleInterface+0x1bc>)
 8004430:	f7fd fb6a 	bl	8001b08 <send_uart3>
			break;
 8004434:	e073      	b.n	800451e <consoleInterface+0x1aa>
		// write EEPROM
		case 105:
			writeEEPROM_AT24();
 8004436:	f7fd fc5b 	bl	8001cf0 <writeEEPROM_AT24>
			microDelay(5);
 800443a:	2005      	movs	r0, #5
 800443c:	f7fd fb90 	bl	8001b60 <microDelay>
			readEEPROM_AT24();
 8004440:	f7fd fdd2 	bl	8001fe8 <readEEPROM_AT24>
			printSettingsValues();
 8004444:	f7fe ff1e 	bl	8003284 <printSettingsValues>
			send_uart3("\n EEPROM written and read back\n");
 8004448:	483a      	ldr	r0, [pc, #232]	; (8004534 <consoleInterface+0x1c0>)
 800444a:	f7fd fb5d 	bl	8001b08 <send_uart3>
			break;
 800444e:	e066      	b.n	800451e <consoleInterface+0x1aa>
		// initialize EEPROM
		case 106:
			send_uart3("\nDou you really want to initialize EEPROM (You will lose all user settings)?\n\n1 - YES, INIT AND SAVE\n2 - NO, I DONT WANT TO\n");
 8004450:	4839      	ldr	r0, [pc, #228]	; (8004538 <consoleInterface+0x1c4>)
 8004452:	f7fd fb59 	bl	8001b08 <send_uart3>
			getConsoleInput(&inputData, 1, 1);
 8004456:	2201      	movs	r2, #1
 8004458:	2101      	movs	r1, #1
 800445a:	4832      	ldr	r0, [pc, #200]	; (8004524 <consoleInterface+0x1b0>)
 800445c:	f7fe ffe8 	bl	8003430 <getConsoleInput>
			switch (convertInputToInt(1, &inputData)) {
 8004460:	4930      	ldr	r1, [pc, #192]	; (8004524 <consoleInterface+0x1b0>)
 8004462:	2001      	movs	r0, #1
 8004464:	f7fe fede 	bl	8003224 <convertInputToInt>
 8004468:	4603      	mov	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d002      	beq.n	8004474 <consoleInterface+0x100>
 800446e:	2b02      	cmp	r3, #2
 8004470:	d00f      	beq.n	8004492 <consoleInterface+0x11e>
 8004472:	e012      	b.n	800449a <consoleInterface+0x126>
			case 1:
				initEEPROM();
 8004474:	f7fd febc 	bl	80021f0 <initEEPROM>
				writeEEPROM_AT24();
 8004478:	f7fd fc3a 	bl	8001cf0 <writeEEPROM_AT24>
				microDelay(5);
 800447c:	2005      	movs	r0, #5
 800447e:	f7fd fb6f 	bl	8001b60 <microDelay>
				readEEPROM_AT24();
 8004482:	f7fd fdb1 	bl	8001fe8 <readEEPROM_AT24>
				printSettingsValues();
 8004486:	f7fe fefd 	bl	8003284 <printSettingsValues>
				send_uart3("\n\nEEPROM INITIALIZED\n");
 800448a:	482c      	ldr	r0, [pc, #176]	; (800453c <consoleInterface+0x1c8>)
 800448c:	f7fd fb3c 	bl	8001b08 <send_uart3>
				break;
 8004490:	e007      	b.n	80044a2 <consoleInterface+0x12e>
			case 2:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 8004492:	482b      	ldr	r0, [pc, #172]	; (8004540 <consoleInterface+0x1cc>)
 8004494:	f7fd fb38 	bl	8001b08 <send_uart3>
				break;
 8004498:	e003      	b.n	80044a2 <consoleInterface+0x12e>
			default:
				send_uart3("\nEEPROM NOT INITIALIZED\n");
 800449a:	4829      	ldr	r0, [pc, #164]	; (8004540 <consoleInterface+0x1cc>)
 800449c:	f7fd fb34 	bl	8001b08 <send_uart3>
				break;
 80044a0:	bf00      	nop
			}
			break;
 80044a2:	e03c      	b.n	800451e <consoleInterface+0x1aa>
		// start measuring
		case 111:
			send_uart3("\n Measuring - started\n");
 80044a4:	4827      	ldr	r0, [pc, #156]	; (8004544 <consoleInterface+0x1d0>)
 80044a6:	f7fd fb2f 	bl	8001b08 <send_uart3>
			if (isMeasuring == 0) {
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <consoleInterface+0x1d4>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d113      	bne.n	80044dc <consoleInterface+0x168>
				//isLoggingToConsole = 1;
				if (settings.isTriggerActive == 0)
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <consoleInterface+0x1d8>)
 80044b6:	7b5b      	ldrb	r3, [r3, #13]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <consoleInterface+0x14e>
					isMeasuring = 1;
 80044bc:	4b22      	ldr	r3, [pc, #136]	; (8004548 <consoleInterface+0x1d4>)
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 1;
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <consoleInterface+0x1dc>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 0;
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <consoleInterface+0x1e0>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80044ce:	2201      	movs	r2, #1
 80044d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044d4:	4820      	ldr	r0, [pc, #128]	; (8004558 <consoleInterface+0x1e4>)
 80044d6:	f005 f9bd 	bl	8009854 <HAL_GPIO_WritePin>
				startOfMeasurement = 0;
				endOfMeasurement = 1;

				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
			}
			break;
 80044da:	e020      	b.n	800451e <consoleInterface+0x1aa>
				isMeasuring = 0;
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <consoleInterface+0x1d4>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
				isTriggered = 0;
 80044e2:	4b1e      	ldr	r3, [pc, #120]	; (800455c <consoleInterface+0x1e8>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	701a      	strb	r2, [r3, #0]
				startOfMeasurement = 0;
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <consoleInterface+0x1dc>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
				endOfMeasurement = 1;
 80044ee:	4b19      	ldr	r3, [pc, #100]	; (8004554 <consoleInterface+0x1e0>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80044f4:	2200      	movs	r2, #0
 80044f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044fa:	4817      	ldr	r0, [pc, #92]	; (8004558 <consoleInterface+0x1e4>)
 80044fc:	f005 f9aa 	bl	8009854 <HAL_GPIO_WritePin>
			break;
 8004500:	e00d      	b.n	800451e <consoleInterface+0x1aa>
		// timeout error output
		case 99:
			send_uart3("\nERR-Input timeout\n");
 8004502:	4817      	ldr	r0, [pc, #92]	; (8004560 <consoleInterface+0x1ec>)
 8004504:	f7fd fb00 	bl	8001b08 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8004508:	4808      	ldr	r0, [pc, #32]	; (800452c <consoleInterface+0x1b8>)
 800450a:	f7fd fafd 	bl	8001b08 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 800450e:	e006      	b.n	800451e <consoleInterface+0x1aa>
		// all outher input combination output
		default:
			send_uart3("\nERR-Invalid input\n");
 8004510:	4814      	ldr	r0, [pc, #80]	; (8004564 <consoleInterface+0x1f0>)
 8004512:	f7fd faf9 	bl	8001b08 <send_uart3>
			send_uart3("[101] Show default menu\n[102] Show current settings\n[103] Show last measured values\n[104] Read EEPROM\n[105] Write EEPROM\n[106] Initialize EEPROM\n"
 8004516:	4805      	ldr	r0, [pc, #20]	; (800452c <consoleInterface+0x1b8>)
 8004518:	f7fd faf6 	bl	8001b08 <send_uart3>
							"[111] Start measuring\n[201] Go to measuring settings\n[301] Go to device settings\n");
			break;
 800451c:	bf00      	nop





}
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20008c38 	.word	0x20008c38
 8004528:	08021d74 	.word	0x08021d74
 800452c:	08021d84 	.word	0x08021d84
 8004530:	08021e68 	.word	0x08021e68
 8004534:	08021e78 	.word	0x08021e78
 8004538:	08021e98 	.word	0x08021e98
 800453c:	08021f18 	.word	0x08021f18
 8004540:	08021f30 	.word	0x08021f30
 8004544:	08021f4c 	.word	0x08021f4c
 8004548:	20000322 	.word	0x20000322
 800454c:	20000018 	.word	0x20000018
 8004550:	20000320 	.word	0x20000320
 8004554:	20000321 	.word	0x20000321
 8004558:	40021000 	.word	0x40021000
 800455c:	20000314 	.word	0x20000314
 8004560:	08021f64 	.word	0x08021f64
 8004564:	08021f78 	.word	0x08021f78

08004568 <u8x8_stm32_gpio_and_delay>:

}



uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr){
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	72fb      	strb	r3, [r7, #11]
 8004576:	4613      	mov	r3, r2
 8004578:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	3b28      	subs	r3, #40	; 0x28
 800457e:	2b2d      	cmp	r3, #45	; 0x2d
 8004580:	f200 80a3 	bhi.w	80046ca <u8x8_stm32_gpio_and_delay+0x162>
 8004584:	a201      	add	r2, pc, #4	; (adr r2, 800458c <u8x8_stm32_gpio_and_delay+0x24>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	08004645 	.word	0x08004645
 8004590:	0800464d 	.word	0x0800464d
 8004594:	080046cb 	.word	0x080046cb
 8004598:	080046cb 	.word	0x080046cb
 800459c:	080046cb 	.word	0x080046cb
 80045a0:	080046cb 	.word	0x080046cb
 80045a4:	080046cb 	.word	0x080046cb
 80045a8:	080046cb 	.word	0x080046cb
 80045ac:	080046cb 	.word	0x080046cb
 80045b0:	080046cb 	.word	0x080046cb
 80045b4:	080046cb 	.word	0x080046cb
 80045b8:	080046cb 	.word	0x080046cb
 80045bc:	080046cb 	.word	0x080046cb
 80045c0:	080046cb 	.word	0x080046cb
 80045c4:	080046cb 	.word	0x080046cb
 80045c8:	080046cb 	.word	0x080046cb
 80045cc:	080046cb 	.word	0x080046cb
 80045d0:	080046cb 	.word	0x080046cb
 80045d4:	080046cb 	.word	0x080046cb
 80045d8:	080046cb 	.word	0x080046cb
 80045dc:	080046cb 	.word	0x080046cb
 80045e0:	080046cb 	.word	0x080046cb
 80045e4:	080046cb 	.word	0x080046cb
 80045e8:	080046cb 	.word	0x080046cb
 80045ec:	080046cb 	.word	0x080046cb
 80045f0:	080046cb 	.word	0x080046cb
 80045f4:	080046cb 	.word	0x080046cb
 80045f8:	080046cb 	.word	0x080046cb
 80045fc:	080046cb 	.word	0x080046cb
 8004600:	080046cb 	.word	0x080046cb
 8004604:	080046cb 	.word	0x080046cb
 8004608:	080046cb 	.word	0x080046cb
 800460c:	080046cb 	.word	0x080046cb
 8004610:	080046cb 	.word	0x080046cb
 8004614:	080046d5 	.word	0x080046d5
 8004618:	08004657 	.word	0x08004657
 800461c:	080046cb 	.word	0x080046cb
 8004620:	080046cb 	.word	0x080046cb
 8004624:	080046cb 	.word	0x080046cb
 8004628:	080046cb 	.word	0x080046cb
 800462c:	08004683 	.word	0x08004683
 8004630:	0800468f 	.word	0x0800468f
 8004634:	0800469b 	.word	0x0800469b
 8004638:	080046bf 	.word	0x080046bf
 800463c:	080046a7 	.word	0x080046a7
 8004640:	080046b3 	.word	0x080046b3
  {
  case U8X8_MSG_GPIO_AND_DELAY_INIT:
    HAL_Delay(1);
 8004644:	2001      	movs	r0, #1
 8004646:	f003 fe0b 	bl	8008260 <HAL_Delay>
    break;
 800464a:	e044      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 800464c:	7abb      	ldrb	r3, [r7, #10]
 800464e:	4618      	mov	r0, r3
 8004650:	f003 fe06 	bl	8008260 <HAL_Delay>
    //microDelay(arg_int*10);
    break;
 8004654:	e03f      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
    //HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
	//HAL_Delay(1);
    break;
  case U8X8_MSG_GPIO_RESET:
    //HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
	isDownTriggered=0;
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <u8x8_stm32_gpio_and_delay+0x178>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
	isEnterTriggered=0;
 800465c:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <u8x8_stm32_gpio_and_delay+0x17c>)
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
	isEscTriggered=0;
 8004662:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <u8x8_stm32_gpio_and_delay+0x180>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
	isUpTriggered=0;
 8004668:	4b20      	ldr	r3, [pc, #128]	; (80046ec <u8x8_stm32_gpio_and_delay+0x184>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
	isLeftTriggered=0;
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <u8x8_stm32_gpio_and_delay+0x188>)
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
	isRightTriggered=0;
 8004674:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <u8x8_stm32_gpio_and_delay+0x18c>)
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
	microDelay(1);
 800467a:	2001      	movs	r0, #1
 800467c:	f7fd fa70 	bl	8001b60 <microDelay>
	//HAL_Delay(1);
	break;
 8004680:	e029      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_SELECT:
	u8x8_SetGPIOResult(u8x8, isEnterTriggered);
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <u8x8_stm32_gpio_and_delay+0x17c>)
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
	break;
 800468c:	e023      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_NEXT:
	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 800468e:	4b17      	ldr	r3, [pc, #92]	; (80046ec <u8x8_stm32_gpio_and_delay+0x184>)
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 8004698:	e01d      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_PREV:
	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 800469a:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <u8x8_stm32_gpio_and_delay+0x178>)
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 80046a4:	e017      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_UP:
  	u8x8_SetGPIOResult(u8x8, isUpTriggered);
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <u8x8_stm32_gpio_and_delay+0x184>)
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 80046b0:	e011      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_DOWN:
  	u8x8_SetGPIOResult(u8x8, isDownTriggered);
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <u8x8_stm32_gpio_and_delay+0x178>)
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN));
  	break;
 80046bc:	e00b      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  case U8X8_MSG_GPIO_MENU_HOME:
	u8x8_SetGPIOResult(u8x8, isEscTriggered);
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <u8x8_stm32_gpio_and_delay+0x180>)
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//u8x8_SetGPIOResult(u8x8, gpioState(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN));
	break;
 80046c8:	e005      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
  default:
	u8x8_SetGPIOResult(u8x8, 1);			// default return value
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	break;
 80046d2:	e000      	b.n	80046d6 <u8x8_stm32_gpio_and_delay+0x16e>
    break;
 80046d4:	bf00      	nop
  }

  return 1;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000318 	.word	0x20000318
 80046e4:	20000315 	.word	0x20000315
 80046e8:	20000316 	.word	0x20000316
 80046ec:	20000317 	.word	0x20000317
 80046f0:	20000319 	.word	0x20000319
 80046f4:	2000031a 	.word	0x2000031a

080046f8 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	72fb      	strb	r3, [r7, #11]
 8004706:	4613      	mov	r3, r2
 8004708:	72bb      	strb	r3, [r7, #10]
  static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
  static uint8_t buf_idx;
  uint8_t *data;

  switch(msg)
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	3b14      	subs	r3, #20
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d862      	bhi.n	80047d8 <u8x8_byte_i2c+0xe0>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <u8x8_byte_i2c+0x20>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	0800477d 	.word	0x0800477d
 800471c:	080047d9 	.word	0x080047d9
 8004720:	080047d9 	.word	0x080047d9
 8004724:	0800474d 	.word	0x0800474d
 8004728:	080047af 	.word	0x080047af
 800472c:	080047b7 	.word	0x080047b7
 8004730:	080047d9 	.word	0x080047d9
 8004734:	080047d9 	.word	0x080047d9
 8004738:	080047d9 	.word	0x080047d9
 800473c:	080047d9 	.word	0x080047d9
 8004740:	080047d9 	.word	0x080047d9
 8004744:	080047d9 	.word	0x080047d9
 8004748:	080047dd 	.word	0x080047dd
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	617b      	str	r3, [r7, #20]
      while( arg_int > 0 )
 8004750:	e010      	b.n	8004774 <u8x8_byte_i2c+0x7c>
      {
    	  buffer[buf_idx++] = *data;
 8004752:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <u8x8_byte_i2c+0xf0>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	b2d1      	uxtb	r1, r2
 800475a:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <u8x8_byte_i2c+0xf0>)
 800475c:	7011      	strb	r1, [r2, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	7819      	ldrb	r1, [r3, #0]
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <u8x8_byte_i2c+0xf4>)
 8004766:	5499      	strb	r1, [r3, r2]
    	  data++;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3301      	adds	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
    	  arg_int--;
 800476e:	7abb      	ldrb	r3, [r7, #10]
 8004770:	3b01      	subs	r3, #1
 8004772:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8004774:	7abb      	ldrb	r3, [r7, #10]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1eb      	bne.n	8004752 <u8x8_byte_i2c+0x5a>
      }
      break;
 800477a:	e030      	b.n	80047de <u8x8_byte_i2c+0xe6>
    case U8X8_MSG_BYTE_INIT:
      /* add your custom code to init i2c subsystem */
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 800477c:	2201      	movs	r2, #1
 800477e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004782:	481b      	ldr	r0, [pc, #108]	; (80047f0 <u8x8_byte_i2c+0xf8>)
 8004784:	f005 f866 	bl	8009854 <HAL_GPIO_WritePin>
    	// Hardware display reset
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_RESET);
 8004788:	2200      	movs	r2, #0
 800478a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800478e:	4818      	ldr	r0, [pc, #96]	; (80047f0 <u8x8_byte_i2c+0xf8>)
 8004790:	f005 f860 	bl	8009854 <HAL_GPIO_WritePin>
    	HAL_Delay(1);	// The minimum reset "L" pulse width (tRW) is 1us at VDD=3.3V and 2us at VDD=1.8V
 8004794:	2001      	movs	r0, #1
 8004796:	f003 fd63 	bl	8008260 <HAL_Delay>
    	HAL_GPIO_WritePin(LCD_RST_GPIO_Port,LCD_RST_Pin, GPIO_PIN_SET);
 800479a:	2201      	movs	r2, #1
 800479c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047a0:	4813      	ldr	r0, [pc, #76]	; (80047f0 <u8x8_byte_i2c+0xf8>)
 80047a2:	f005 f857 	bl	8009854 <HAL_GPIO_WritePin>
    	HAL_Delay(2); // The maximum reset duration (tR) is 1us at VDD=3.3V and 2us at VDD=1.8V
 80047a6:	2002      	movs	r0, #2
 80047a8:	f003 fd5a 	bl	8008260 <HAL_Delay>
      break;
 80047ac:	e017      	b.n	80047de <u8x8_byte_i2c+0xe6>
    case U8X8_MSG_BYTE_SET_DC:
      /* ignored for i2c */
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      buf_idx = 0;
 80047ae:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <u8x8_byte_i2c+0xf0>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
      //buffer[buf_idx++] = 0;
      break;
 80047b4:	e013      	b.n	80047de <u8x8_byte_i2c+0xe6>
    case U8X8_MSG_BYTE_END_TRANSFER:
      //i2c_transfer(u8x8_GetI2CAddress(u8x8) >> 1, buf_idx, buffer);
      //HAL_I2C_Master_Transmit(&hi2c4, i2cDeviceAddress, (uint8_t *) arg_ptr, arg_int, 1000);
      //HAL_I2C_Master_Transmit(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 1000);
      HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx, 5);
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <u8x8_byte_i2c+0xfc>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b299      	uxth	r1, r3
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <u8x8_byte_i2c+0xf0>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	2305      	movs	r3, #5
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <u8x8_byte_i2c+0xf4>)
 80047ca:	480b      	ldr	r0, [pc, #44]	; (80047f8 <u8x8_byte_i2c+0x100>)
 80047cc:	f006 fe10 	bl	800b3f0 <HAL_I2C_Master_Transmit>
      //HAL_I2C_Master_Transmit_DMA(&hi2c4, (uint16_t) i2cDeviceAddressOLED, &buffer[0], buf_idx);
      microDelay(1);
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7fd f9c5 	bl	8001b60 <microDelay>
      break;
 80047d6:	e002      	b.n	80047de <u8x8_byte_i2c+0xe6>
    default:
      return 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	e001      	b.n	80047e0 <u8x8_byte_i2c+0xe8>
      break;
 80047dc:	bf00      	nop
  }
  return 1;
 80047de:	2301      	movs	r3, #1
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000350 	.word	0x20000350
 80047ec:	20000354 	.word	0x20000354
 80047f0:	40020000 	.word	0x40020000
 80047f4:	2000005a 	.word	0x2000005a
 80047f8:	200074bc 	.word	0x200074bc

080047fc <u8x8_GetMenuEvent>:
}
*/


uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
 8004804:	2300      	movs	r3, #0
 8004806:	73fb      	strb	r3, [r7, #15]

  HAL_Delay(5);
 8004808:	2005      	movs	r0, #5
 800480a:	f003 fd29 	bl	8008260 <HAL_Delay>

  if(isEnterTriggered == 1){
 800480e:	4b4a      	ldr	r3, [pc, #296]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d113      	bne.n	800483e <u8x8_GetMenuEvent+0x42>
	  //isEnterTriggered = 0;
	  isDownTriggered = 0;
 8004816:	4b49      	ldr	r3, [pc, #292]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 800481c:	4b46      	ldr	r3, [pc, #280]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8004822:	4b47      	ldr	r3, [pc, #284]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004828:	4b46      	ldr	r3, [pc, #280]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800482e:	4b46      	ldr	r3, [pc, #280]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004834:	4b45      	ldr	r3, [pc, #276]	; (800494c <u8x8_GetMenuEvent+0x150>)
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_SELECT;
 800483a:	2350      	movs	r3, #80	; 0x50
 800483c:	e078      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else if(isEscTriggered == 1){
 800483e:	4b40      	ldr	r3, [pc, #256]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d113      	bne.n	800486e <u8x8_GetMenuEvent+0x72>
	  //isEscTriggered = 0;
	  isDownTriggered = 0;
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 800484c:	4b3a      	ldr	r3, [pc, #232]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8004852:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004858:	4b3a      	ldr	r3, [pc, #232]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800485e:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004864:	4b39      	ldr	r3, [pc, #228]	; (800494c <u8x8_GetMenuEvent+0x150>)
 8004866:	2200      	movs	r2, #0
 8004868:	701a      	strb	r2, [r3, #0]
	  return U8X8_MSG_GPIO_MENU_HOME;
 800486a:	2353      	movs	r3, #83	; 0x53
 800486c:	e060      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else if(isLeftTriggered== 1){
 800486e:	4b36      	ldr	r3, [pc, #216]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d113      	bne.n	800489e <u8x8_GetMenuEvent+0xa2>
  	  //isLeftTriggered = 0;
	  isDownTriggered = 0;
 8004876:	4b31      	ldr	r3, [pc, #196]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 800487c:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8004882:	4b2f      	ldr	r3, [pc, #188]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004888:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800488e:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004894:	4b2d      	ldr	r3, [pc, #180]	; (800494c <u8x8_GetMenuEvent+0x150>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_PREV;
 800489a:	2352      	movs	r3, #82	; 0x52
 800489c:	e048      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else if(isRightTriggered == 1){
 800489e:	4b2b      	ldr	r3, [pc, #172]	; (800494c <u8x8_GetMenuEvent+0x150>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d113      	bne.n	80048ce <u8x8_GetMenuEvent+0xd2>
  	  //isRightTriggered = 0;
	  isDownTriggered = 0;
 80048a6:	4b25      	ldr	r3, [pc, #148]	; (800493c <u8x8_GetMenuEvent+0x140>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 80048ac:	4b22      	ldr	r3, [pc, #136]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 80048b8:	4b22      	ldr	r3, [pc, #136]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 80048be:	4b22      	ldr	r3, [pc, #136]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <u8x8_GetMenuEvent+0x150>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_NEXT;
 80048ca:	2351      	movs	r3, #81	; 0x51
 80048cc:	e030      	b.n	8004930 <u8x8_GetMenuEvent+0x134>
	  return U8X8_MSG_GPIO_MENU_PREV;
  }
  else if(HAL_GPIO_ReadPin(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET){
  	  return U8X8_MSG_GPIO_MENU_NEXT;
  }*/
  else if(isUpTriggered == 1){
 80048ce:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d113      	bne.n	80048fe <u8x8_GetMenuEvent+0x102>
	  //isUpTriggered = 0;
	  isDownTriggered = 0;
 80048d6:	4b19      	ldr	r3, [pc, #100]	; (800493c <u8x8_GetMenuEvent+0x140>)
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 80048dc:	4b16      	ldr	r3, [pc, #88]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 80048e2:	4b17      	ldr	r3, [pc, #92]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 80048e8:	4b16      	ldr	r3, [pc, #88]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 80048ee:	4b16      	ldr	r3, [pc, #88]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 80048f4:	4b15      	ldr	r3, [pc, #84]	; (800494c <u8x8_GetMenuEvent+0x150>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_UP;
 80048fa:	2354      	movs	r3, #84	; 0x54
 80048fc:	e018      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else if(isDownTriggered == 1){
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d113      	bne.n	800492e <u8x8_GetMenuEvent+0x132>
	  //isDownTriggered = 0;
	  isDownTriggered = 0;
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <u8x8_GetMenuEvent+0x140>)
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
	  isEnterTriggered = 0;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <u8x8_GetMenuEvent+0x13c>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
	  isEscTriggered = 0;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <u8x8_GetMenuEvent+0x144>)
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
	  isUpTriggered = 0;
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <u8x8_GetMenuEvent+0x148>)
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
	  isLeftTriggered = 0;
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <u8x8_GetMenuEvent+0x14c>)
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
	  isRightTriggered = 0;
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <u8x8_GetMenuEvent+0x150>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
  	  return U8X8_MSG_GPIO_MENU_DOWN;
 800492a:	2355      	movs	r3, #85	; 0x55
 800492c:	e000      	b.n	8004930 <u8x8_GetMenuEvent+0x134>

  }
  else{
	  return 0;
 800492e:	2300      	movs	r3, #0
  }



  return result_msg;
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000315 	.word	0x20000315
 800493c:	20000318 	.word	0x20000318
 8004940:	20000316 	.word	0x20000316
 8004944:	20000317 	.word	0x20000317
 8004948:	20000319 	.word	0x20000319
 800494c:	2000031a 	.word	0x2000031a

08004950 <screenInfoPanel>:



}

void screenInfoPanel(){
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af02      	add	r7, sp, #8
	//u8g2_ClearDisplay(&u8g2);
	//u8g2_SetFontMode(&u8g2, 1);
	//u8g2_SetFontDirection(&u8g2, 0);
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf

	u8g2_ClearBuffer(&u8g2);
 8004956:	4853      	ldr	r0, [pc, #332]	; (8004aa4 <screenInfoPanel+0x154>)
 8004958:	f00f f8d4 	bl	8013b04 <u8g2_ClearBuffer>

	u8g2_DrawStr(&u8g2, 15 , 7, "InfoPanel");
 800495c:	4b52      	ldr	r3, [pc, #328]	; (8004aa8 <screenInfoPanel+0x158>)
 800495e:	2207      	movs	r2, #7
 8004960:	210f      	movs	r1, #15
 8004962:	4850      	ldr	r0, [pc, #320]	; (8004aa4 <screenInfoPanel+0x154>)
 8004964:	f00f ff14 	bl	8014790 <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 70 , 7, "Range: Auto");
	u8g2_DrawStr(&u8g2, 70 , 7, "Range: ");
 8004968:	4b50      	ldr	r3, [pc, #320]	; (8004aac <screenInfoPanel+0x15c>)
 800496a:	2207      	movs	r2, #7
 800496c:	2146      	movs	r1, #70	; 0x46
 800496e:	484d      	ldr	r0, [pc, #308]	; (8004aa4 <screenInfoPanel+0x154>)
 8004970:	f00f ff0e 	bl	8014790 <u8g2_DrawStr>
	if(rangeMode == 0)
 8004974:	4b4e      	ldr	r3, [pc, #312]	; (8004ab0 <screenInfoPanel+0x160>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <screenInfoPanel+0x3a>
		u8g2_DrawStr(&u8g2, 98 , 7, "nA");
 800497c:	4b4d      	ldr	r3, [pc, #308]	; (8004ab4 <screenInfoPanel+0x164>)
 800497e:	2207      	movs	r2, #7
 8004980:	2162      	movs	r1, #98	; 0x62
 8004982:	4848      	ldr	r0, [pc, #288]	; (8004aa4 <screenInfoPanel+0x154>)
 8004984:	f00f ff04 	bl	8014790 <u8g2_DrawStr>
 8004988:	e01b      	b.n	80049c2 <screenInfoPanel+0x72>
	else if(rangeMode == 1)
 800498a:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <screenInfoPanel+0x160>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d106      	bne.n	80049a0 <screenInfoPanel+0x50>
		u8g2_DrawStr(&u8g2, 98 , 7, "uA");
 8004992:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <screenInfoPanel+0x168>)
 8004994:	2207      	movs	r2, #7
 8004996:	2162      	movs	r1, #98	; 0x62
 8004998:	4842      	ldr	r0, [pc, #264]	; (8004aa4 <screenInfoPanel+0x154>)
 800499a:	f00f fef9 	bl	8014790 <u8g2_DrawStr>
 800499e:	e010      	b.n	80049c2 <screenInfoPanel+0x72>
	else if(rangeMode == 2)
 80049a0:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <screenInfoPanel+0x160>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d106      	bne.n	80049b6 <screenInfoPanel+0x66>
		u8g2_DrawStr(&u8g2, 98 , 7, "mA");
 80049a8:	4b44      	ldr	r3, [pc, #272]	; (8004abc <screenInfoPanel+0x16c>)
 80049aa:	2207      	movs	r2, #7
 80049ac:	2162      	movs	r1, #98	; 0x62
 80049ae:	483d      	ldr	r0, [pc, #244]	; (8004aa4 <screenInfoPanel+0x154>)
 80049b0:	f00f feee 	bl	8014790 <u8g2_DrawStr>
 80049b4:	e005      	b.n	80049c2 <screenInfoPanel+0x72>
	else
		u8g2_DrawStr(&u8g2, 98 , 7, "Auto");
 80049b6:	4b42      	ldr	r3, [pc, #264]	; (8004ac0 <screenInfoPanel+0x170>)
 80049b8:	2207      	movs	r2, #7
 80049ba:	2162      	movs	r1, #98	; 0x62
 80049bc:	4839      	ldr	r0, [pc, #228]	; (8004aa4 <screenInfoPanel+0x154>)
 80049be:	f00f fee7 	bl	8014790 <u8g2_DrawStr>

	//u8g2_DrawGlyph(u8g2, x, y, encoding)
	u8g2_DrawLine(&u8g2, 0, 10, 128, 10);
 80049c2:	230a      	movs	r3, #10
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	220a      	movs	r2, #10
 80049ca:	2100      	movs	r1, #0
 80049cc:	4835      	ldr	r0, [pc, #212]	; (8004aa4 <screenInfoPanel+0x154>)
 80049ce:	f010 fb6f 	bl	80150b0 <u8g2_DrawLine>
	u8g2_DrawLine(&u8g2, 64, 0, 64, 10);
 80049d2:	230a      	movs	r3, #10
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	2340      	movs	r3, #64	; 0x40
 80049d8:	2200      	movs	r2, #0
 80049da:	2140      	movs	r1, #64	; 0x40
 80049dc:	4831      	ldr	r0, [pc, #196]	; (8004aa4 <screenInfoPanel+0x154>)
 80049de:	f010 fb67 	bl	80150b0 <u8g2_DrawLine>

	sprintf(buffer, "OUT voltage [mV]: %d", settings.powerSourceVoltage);
 80049e2:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <screenInfoPanel+0x174>)
 80049e4:	8c1b      	ldrh	r3, [r3, #32]
 80049e6:	461a      	mov	r2, r3
 80049e8:	4937      	ldr	r1, [pc, #220]	; (8004ac8 <screenInfoPanel+0x178>)
 80049ea:	4838      	ldr	r0, [pc, #224]	; (8004acc <screenInfoPanel+0x17c>)
 80049ec:	f01a f8b4 	bl	801eb58 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 20, buffer);
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <screenInfoPanel+0x17c>)
 80049f2:	2214      	movs	r2, #20
 80049f4:	210a      	movs	r1, #10
 80049f6:	482b      	ldr	r0, [pc, #172]	; (8004aa4 <screenInfoPanel+0x154>)
 80049f8:	f00f feca 	bl	8014790 <u8g2_DrawStr>
	sprintf(buffer, "OUT current limit [mA]: %d", settings.powerSourceCurrent);
 80049fc:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <screenInfoPanel+0x174>)
 80049fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004a00:	461a      	mov	r2, r3
 8004a02:	4933      	ldr	r1, [pc, #204]	; (8004ad0 <screenInfoPanel+0x180>)
 8004a04:	4831      	ldr	r0, [pc, #196]	; (8004acc <screenInfoPanel+0x17c>)
 8004a06:	f01a f8a7 	bl	801eb58 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 30, buffer);
 8004a0a:	4b30      	ldr	r3, [pc, #192]	; (8004acc <screenInfoPanel+0x17c>)
 8004a0c:	221e      	movs	r2, #30
 8004a0e:	210a      	movs	r1, #10
 8004a10:	4824      	ldr	r0, [pc, #144]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a12:	f00f febd 	bl	8014790 <u8g2_DrawStr>
	sprintf(buffer, "Sampling interval [us]: %d", settings.samplingInterval);
 8004a16:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	492d      	ldr	r1, [pc, #180]	; (8004ad4 <screenInfoPanel+0x184>)
 8004a1e:	482b      	ldr	r0, [pc, #172]	; (8004acc <screenInfoPanel+0x17c>)
 8004a20:	f01a f89a 	bl	801eb58 <siprintf>
	u8g2_DrawStr(&u8g2, 10 , 40, buffer);
 8004a24:	4b29      	ldr	r3, [pc, #164]	; (8004acc <screenInfoPanel+0x17c>)
 8004a26:	2228      	movs	r2, #40	; 0x28
 8004a28:	210a      	movs	r1, #10
 8004a2a:	481e      	ldr	r0, [pc, #120]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a2c:	f00f feb0 	bl	8014790 <u8g2_DrawStr>

	//u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: NA");
	u8g2_DrawStr(&u8g2, 10 , 50, "Storing method: ");
 8004a30:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <screenInfoPanel+0x188>)
 8004a32:	2232      	movs	r2, #50	; 0x32
 8004a34:	210a      	movs	r1, #10
 8004a36:	481b      	ldr	r0, [pc, #108]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a38:	f00f feaa 	bl	8014790 <u8g2_DrawStr>
	if(settings.isLoggingToConsole == 1)
 8004a3c:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d106      	bne.n	8004a52 <screenInfoPanel+0x102>
		u8g2_DrawStr(&u8g2, 74 , 50, "PC");
 8004a44:	4b25      	ldr	r3, [pc, #148]	; (8004adc <screenInfoPanel+0x18c>)
 8004a46:	2232      	movs	r2, #50	; 0x32
 8004a48:	214a      	movs	r1, #74	; 0x4a
 8004a4a:	4816      	ldr	r0, [pc, #88]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a4c:	f00f fea0 	bl	8014790 <u8g2_DrawStr>
 8004a50:	e021      	b.n	8004a96 <screenInfoPanel+0x146>
	else if(settings.isLoggingToSD == 1)
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d106      	bne.n	8004a68 <screenInfoPanel+0x118>
		u8g2_DrawStr(&u8g2, 74 , 50, "SD");
 8004a5a:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <screenInfoPanel+0x190>)
 8004a5c:	2232      	movs	r2, #50	; 0x32
 8004a5e:	214a      	movs	r1, #74	; 0x4a
 8004a60:	4810      	ldr	r0, [pc, #64]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a62:	f00f fe95 	bl	8014790 <u8g2_DrawStr>
 8004a66:	e016      	b.n	8004a96 <screenInfoPanel+0x146>
	else if(settings.isLoggingToUSB == 1)
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a6a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d106      	bne.n	8004a80 <screenInfoPanel+0x130>
		u8g2_DrawStr(&u8g2, 74 , 50, "USB");
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <screenInfoPanel+0x194>)
 8004a74:	2232      	movs	r2, #50	; 0x32
 8004a76:	214a      	movs	r1, #74	; 0x4a
 8004a78:	480a      	ldr	r0, [pc, #40]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a7a:	f00f fe89 	bl	8014790 <u8g2_DrawStr>
 8004a7e:	e00a      	b.n	8004a96 <screenInfoPanel+0x146>
	else if(settings.isLoggingToEthernet == 1)
 8004a80:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <screenInfoPanel+0x174>)
 8004a82:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d105      	bne.n	8004a96 <screenInfoPanel+0x146>
		u8g2_DrawStr(&u8g2, 74 , 50, "Eth");
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <screenInfoPanel+0x198>)
 8004a8c:	2232      	movs	r2, #50	; 0x32
 8004a8e:	214a      	movs	r1, #74	; 0x4a
 8004a90:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a92:	f00f fe7d 	bl	8014790 <u8g2_DrawStr>

	u8g2_SendBuffer(&u8g2);
 8004a96:	4803      	ldr	r0, [pc, #12]	; (8004aa4 <screenInfoPanel+0x154>)
 8004a98:	f00f f8a7 	bl	8013bea <u8g2_SendBuffer>
	//HAL_Delay(50);



}
 8004a9c:	bf00      	nop
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000290 	.word	0x20000290
 8004aa8:	0802201c 	.word	0x0802201c
 8004aac:	08022028 	.word	0x08022028
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	08022030 	.word	0x08022030
 8004ab8:	08022034 	.word	0x08022034
 8004abc:	08022038 	.word	0x08022038
 8004ac0:	0802203c 	.word	0x0802203c
 8004ac4:	20000018 	.word	0x20000018
 8004ac8:	08022044 	.word	0x08022044
 8004acc:	20003040 	.word	0x20003040
 8004ad0:	0802205c 	.word	0x0802205c
 8004ad4:	08022078 	.word	0x08022078
 8004ad8:	08022094 	.word	0x08022094
 8004adc:	080220a8 	.word	0x080220a8
 8004ae0:	080220ac 	.word	0x080220ac
 8004ae4:	080220b0 	.word	0x080220b0
 8004ae8:	080220b4 	.word	0x080220b4

08004aec <screenDeviceSettings>:
 *		[312] *Behaviour mode of power source - DIF SUBMENU
 *		[888] *Go to main menu
 *		[999] *Go to main menu
*/

void screenDeviceSettings(){
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af02      	add	r7, sp, #8
	sprintf(buffer, "Test uint32: %d", settings.samplingInterval);
	send_uart(buffer);
	HAL_Delay(10000);
	*/

	u8g2_ClearDisplay(&u8g2);
 8004af2:	48c0      	ldr	r0, [pc, #768]	; (8004df4 <screenDeviceSettings+0x308>)
 8004af4:	f00f f8ec 	bl	8013cd0 <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8004af8:	48be      	ldr	r0, [pc, #760]	; (8004df4 <screenDeviceSettings+0x308>)
 8004afa:	f00f f803 	bl	8013b04 <u8g2_ClearBuffer>

	uint32_t temp32 = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Device menu", 1,"Storing method\nCheck SD card\nCheck USB drive\nOffset calibration\nNull offset\nBack to Main")) {
 8004b02:	4bbd      	ldr	r3, [pc, #756]	; (8004df8 <screenDeviceSettings+0x30c>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	49bd      	ldr	r1, [pc, #756]	; (8004dfc <screenDeviceSettings+0x310>)
 8004b08:	48ba      	ldr	r0, [pc, #744]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b0a:	f010 febe 	bl	801588a <u8g2_UserInterfaceSelectionList>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b05      	cmp	r3, #5
 8004b12:	f200 8166 	bhi.w	8004de2 <screenDeviceSettings+0x2f6>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <screenDeviceSettings+0x30>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b35 	.word	0x08004b35
 8004b20:	08004b41 	.word	0x08004b41
 8004b24:	08004ca5 	.word	0x08004ca5
 8004b28:	08004cd1 	.word	0x08004cd1
 8004b2c:	08004cfd 	.word	0x08004cfd
 8004b30:	08004d6b 	.word	0x08004d6b
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 8004b34:	4bb2      	ldr	r3, [pc, #712]	; (8004e00 <screenDeviceSettings+0x314>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004b3a:	f000 fe5f 	bl	80057fc <screenInterface>
 8004b3e:	e155      	b.n	8004dec <screenDeviceSettings+0x300>
	// storing method
	case 1:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Storing method", 1,"COM port\nSD Card\nUSB Drive\nEthernet\nExit");
 8004b40:	4bb0      	ldr	r3, [pc, #704]	; (8004e04 <screenDeviceSettings+0x318>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	49b0      	ldr	r1, [pc, #704]	; (8004e08 <screenDeviceSettings+0x31c>)
 8004b46:	48ab      	ldr	r0, [pc, #684]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b48:	f010 fe9f 	bl	801588a <u8g2_UserInterfaceSelectionList>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	607b      	str	r3, [r7, #4]
		if (temp32 == 1) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d121      	bne.n	8004b9a <screenDeviceSettings+0xae>
			u8g2_ClearDisplay(&u8g2);
 8004b56:	48a7      	ldr	r0, [pc, #668]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b58:	f00f f8ba 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004b5c:	48a5      	ldr	r0, [pc, #660]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b5e:	f00e ffd1 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: COM Port");
 8004b62:	4baa      	ldr	r3, [pc, #680]	; (8004e0c <screenDeviceSettings+0x320>)
 8004b64:	2223      	movs	r2, #35	; 0x23
 8004b66:	2114      	movs	r1, #20
 8004b68:	48a2      	ldr	r0, [pc, #648]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b6a:	f00f fe11 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004b6e:	48a1      	ldr	r0, [pc, #644]	; (8004df4 <screenDeviceSettings+0x308>)
 8004b70:	f00f f83b 	bl	8013bea <u8g2_SendBuffer>
			settings.isLoggingToConsole = 1;
 8004b74:	4ba6      	ldr	r3, [pc, #664]	; (8004e10 <screenDeviceSettings+0x324>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8004b7a:	4ba5      	ldr	r3, [pc, #660]	; (8004e10 <screenDeviceSettings+0x324>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8004b80:	4ba3      	ldr	r3, [pc, #652]	; (8004e10 <screenDeviceSettings+0x324>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8004b88:	4ba1      	ldr	r3, [pc, #644]	; (8004e10 <screenDeviceSettings+0x324>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 8004b90:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004b94:	f003 fb64 	bl	8008260 <HAL_Delay>
 8004b98:	e081      	b.n	8004c9e <screenDeviceSettings+0x1b2>
		} else if (temp32 == 2) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d121      	bne.n	8004be4 <screenDeviceSettings+0xf8>
			u8g2_ClearDisplay(&u8g2);
 8004ba0:	4894      	ldr	r0, [pc, #592]	; (8004df4 <screenDeviceSettings+0x308>)
 8004ba2:	f00f f895 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004ba6:	4893      	ldr	r0, [pc, #588]	; (8004df4 <screenDeviceSettings+0x308>)
 8004ba8:	f00e ffac 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: SD Card");
 8004bac:	4b99      	ldr	r3, [pc, #612]	; (8004e14 <screenDeviceSettings+0x328>)
 8004bae:	2223      	movs	r2, #35	; 0x23
 8004bb0:	2114      	movs	r1, #20
 8004bb2:	4890      	ldr	r0, [pc, #576]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bb4:	f00f fdec 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004bb8:	488e      	ldr	r0, [pc, #568]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bba:	f00f f816 	bl	8013bea <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8004bbe:	4b94      	ldr	r3, [pc, #592]	; (8004e10 <screenDeviceSettings+0x324>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 1;
 8004bc4:	4b92      	ldr	r3, [pc, #584]	; (8004e10 <screenDeviceSettings+0x324>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8004bca:	4b91      	ldr	r3, [pc, #580]	; (8004e10 <screenDeviceSettings+0x324>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8004bd2:	4b8f      	ldr	r3, [pc, #572]	; (8004e10 <screenDeviceSettings+0x324>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			HAL_Delay(1500);
 8004bda:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004bde:	f003 fb3f 	bl	8008260 <HAL_Delay>
 8004be2:	e05c      	b.n	8004c9e <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d121      	bne.n	8004c2e <screenDeviceSettings+0x142>
			u8g2_ClearDisplay(&u8g2);
 8004bea:	4882      	ldr	r0, [pc, #520]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bec:	f00f f870 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004bf0:	4880      	ldr	r0, [pc, #512]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bf2:	f00e ff87 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: USB Drive");
 8004bf6:	4b88      	ldr	r3, [pc, #544]	; (8004e18 <screenDeviceSettings+0x32c>)
 8004bf8:	2223      	movs	r2, #35	; 0x23
 8004bfa:	2114      	movs	r1, #20
 8004bfc:	487d      	ldr	r0, [pc, #500]	; (8004df4 <screenDeviceSettings+0x308>)
 8004bfe:	f00f fdc7 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004c02:	487c      	ldr	r0, [pc, #496]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c04:	f00e fff1 	bl	8013bea <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8004c08:	4b81      	ldr	r3, [pc, #516]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8004c0e:	4b80      	ldr	r3, [pc, #512]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 1;
 8004c14:	4b7e      	ldr	r3, [pc, #504]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 0;
 8004c1c:	4b7c      	ldr	r3, [pc, #496]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 8004c24:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004c28:	f003 fb1a 	bl	8008260 <HAL_Delay>
 8004c2c:	e037      	b.n	8004c9e <screenDeviceSettings+0x1b2>
		} else if (temp32 == 3) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d121      	bne.n	8004c78 <screenDeviceSettings+0x18c>
			u8g2_ClearDisplay(&u8g2);
 8004c34:	486f      	ldr	r0, [pc, #444]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c36:	f00f f84b 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004c3a:	486e      	ldr	r0, [pc, #440]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c3c:	f00e ff62 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: Ethernet");
 8004c40:	4b76      	ldr	r3, [pc, #472]	; (8004e1c <screenDeviceSettings+0x330>)
 8004c42:	2223      	movs	r2, #35	; 0x23
 8004c44:	2114      	movs	r1, #20
 8004c46:	486b      	ldr	r0, [pc, #428]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c48:	f00f fda2 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004c4c:	4869      	ldr	r0, [pc, #420]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c4e:	f00e ffcc 	bl	8013bea <u8g2_SendBuffer>
			settings.isLoggingToConsole = 0;
 8004c52:	4b6f      	ldr	r3, [pc, #444]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
			settings.isLoggingToSD = 0;
 8004c58:	4b6d      	ldr	r3, [pc, #436]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	705a      	strb	r2, [r3, #1]
			settings.isLoggingToUSB = 0;
 8004c5e:	4b6c      	ldr	r3, [pc, #432]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			settings.isLoggingToEthernet = 1;
 8004c66:	4b6a      	ldr	r3, [pc, #424]	; (8004e10 <screenDeviceSettings+0x324>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			//settings.isLoggingToConsole = 1;
			//settings.isLoggingToSD = 1;
			HAL_Delay(1500);
 8004c6e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004c72:	f003 faf5 	bl	8008260 <HAL_Delay>
 8004c76:	e012      	b.n	8004c9e <screenDeviceSettings+0x1b2>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004c78:	485e      	ldr	r0, [pc, #376]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c7a:	f00f f829 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004c7e:	485d      	ldr	r0, [pc, #372]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c80:	f00e ff40 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "STORE METHOD: UNCHANGED");
 8004c84:	4b66      	ldr	r3, [pc, #408]	; (8004e20 <screenDeviceSettings+0x334>)
 8004c86:	2223      	movs	r2, #35	; 0x23
 8004c88:	2114      	movs	r1, #20
 8004c8a:	485a      	ldr	r0, [pc, #360]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c8c:	f00f fd80 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004c90:	4858      	ldr	r0, [pc, #352]	; (8004df4 <screenDeviceSettings+0x308>)
 8004c92:	f00e ffaa 	bl	8013bea <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004c96:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004c9a:	f003 fae1 	bl	8008260 <HAL_Delay>
		}
		return screenDeviceSettings();
 8004c9e:	f7ff ff25 	bl	8004aec <screenDeviceSettings>
 8004ca2:	e0a3      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// check sd card
	case 2:
		u8g2_ClearDisplay(&u8g2);
 8004ca4:	4853      	ldr	r0, [pc, #332]	; (8004df4 <screenDeviceSettings+0x308>)
 8004ca6:	f00f f813 	bl	8013cd0 <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 8004caa:	4852      	ldr	r0, [pc, #328]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cac:	f00e ff2a 	bl	8013b04 <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "SD CARD: OK");
 8004cb0:	4b5c      	ldr	r3, [pc, #368]	; (8004e24 <screenDeviceSettings+0x338>)
 8004cb2:	2223      	movs	r2, #35	; 0x23
 8004cb4:	2114      	movs	r1, #20
 8004cb6:	484f      	ldr	r0, [pc, #316]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cb8:	f00f fd6a 	bl	8014790 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8004cbc:	484d      	ldr	r0, [pc, #308]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cbe:	f00e ff94 	bl	8013bea <u8g2_SendBuffer>
		HAL_Delay(1500);
 8004cc2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004cc6:	f003 facb 	bl	8008260 <HAL_Delay>
		return screenDeviceSettings();
 8004cca:	f7ff ff0f 	bl	8004aec <screenDeviceSettings>
 8004cce:	e08d      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// check usb flash drive
	case 3:
		u8g2_ClearDisplay(&u8g2);
 8004cd0:	4848      	ldr	r0, [pc, #288]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cd2:	f00e fffd 	bl	8013cd0 <u8g2_ClearDisplay>
		u8g2_ClearBuffer(&u8g2);
 8004cd6:	4847      	ldr	r0, [pc, #284]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cd8:	f00e ff14 	bl	8013b04 <u8g2_ClearBuffer>
		u8g2_DrawStr(&u8g2, 20, 35, "USB DRIVE: OK");
 8004cdc:	4b52      	ldr	r3, [pc, #328]	; (8004e28 <screenDeviceSettings+0x33c>)
 8004cde:	2223      	movs	r2, #35	; 0x23
 8004ce0:	2114      	movs	r1, #20
 8004ce2:	4844      	ldr	r0, [pc, #272]	; (8004df4 <screenDeviceSettings+0x308>)
 8004ce4:	f00f fd54 	bl	8014790 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8004ce8:	4842      	ldr	r0, [pc, #264]	; (8004df4 <screenDeviceSettings+0x308>)
 8004cea:	f00e ff7e 	bl	8013bea <u8g2_SendBuffer>
		HAL_Delay(1500);
 8004cee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004cf2:	f003 fab5 	bl	8008260 <HAL_Delay>
		return screenDeviceSettings();
 8004cf6:	f7ff fef9 	bl	8004aec <screenDeviceSettings>
 8004cfa:	e077      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// perform zero offset calibration
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Offset calibration", NULL, NULL," YES \n NO ") == 1) {
 8004cfc:	4b4b      	ldr	r3, [pc, #300]	; (8004e2c <screenDeviceSettings+0x340>)
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	2200      	movs	r2, #0
 8004d04:	494a      	ldr	r1, [pc, #296]	; (8004e30 <screenDeviceSettings+0x344>)
 8004d06:	483b      	ldr	r0, [pc, #236]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d08:	f010 fb8b 	bl	8015422 <u8g2_UserInterfaceMessage>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d115      	bne.n	8004d3e <screenDeviceSettings+0x252>
			adc_compensateOffset();
 8004d12:	f7fd fe53 	bl	80029bc <adc_compensateOffset>
			u8g2_ClearDisplay(&u8g2);
 8004d16:	4837      	ldr	r0, [pc, #220]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d18:	f00e ffda 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004d1c:	4835      	ldr	r0, [pc, #212]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d1e:	f00e fef1 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: CALIBRATED");
 8004d22:	4b44      	ldr	r3, [pc, #272]	; (8004e34 <screenDeviceSettings+0x348>)
 8004d24:	2223      	movs	r2, #35	; 0x23
 8004d26:	2114      	movs	r1, #20
 8004d28:	4832      	ldr	r0, [pc, #200]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d2a:	f00f fd31 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004d2e:	4831      	ldr	r0, [pc, #196]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d30:	f00e ff5b 	bl	8013bea <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004d34:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004d38:	f003 fa92 	bl	8008260 <HAL_Delay>
 8004d3c:	e012      	b.n	8004d64 <screenDeviceSettings+0x278>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004d3e:	482d      	ldr	r0, [pc, #180]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d40:	f00e ffc6 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004d44:	482b      	ldr	r0, [pc, #172]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d46:	f00e fedd 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <screenDeviceSettings+0x34c>)
 8004d4c:	2223      	movs	r2, #35	; 0x23
 8004d4e:	210f      	movs	r1, #15
 8004d50:	4828      	ldr	r0, [pc, #160]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d52:	f00f fd1d 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004d56:	4827      	ldr	r0, [pc, #156]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d58:	f00e ff47 	bl	8013bea <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004d5c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004d60:	f003 fa7e 	bl	8008260 <HAL_Delay>
		}
		return screenDeviceSettings();
 8004d64:	f7ff fec2 	bl	8004aec <screenDeviceSettings>
 8004d68:	e040      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// zero offset value
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Zero offset value", NULL, NULL," YES \n NO ") == 1) {
 8004d6a:	4b30      	ldr	r3, [pc, #192]	; (8004e2c <screenDeviceSettings+0x340>)
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2200      	movs	r2, #0
 8004d72:	4932      	ldr	r1, [pc, #200]	; (8004e3c <screenDeviceSettings+0x350>)
 8004d74:	481f      	ldr	r0, [pc, #124]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d76:	f010 fb54 	bl	8015422 <u8g2_UserInterfaceMessage>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d11a      	bne.n	8004db6 <screenDeviceSettings+0x2ca>
			u8g2_ClearDisplay(&u8g2);
 8004d80:	481c      	ldr	r0, [pc, #112]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d82:	f00e ffa5 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004d86:	481b      	ldr	r0, [pc, #108]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d88:	f00e febc 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "OFFSET: ZEROED");
 8004d8c:	4b2c      	ldr	r3, [pc, #176]	; (8004e40 <screenDeviceSettings+0x354>)
 8004d8e:	2223      	movs	r2, #35	; 0x23
 8004d90:	2114      	movs	r1, #20
 8004d92:	4818      	ldr	r0, [pc, #96]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d94:	f00f fcfc 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004d98:	4816      	ldr	r0, [pc, #88]	; (8004df4 <screenDeviceSettings+0x308>)
 8004d9a:	f00e ff26 	bl	8013bea <u8g2_SendBuffer>
			settings.lastOffsetValue = 0.0;
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <screenDeviceSettings+0x324>)
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	f04f 0400 	mov.w	r4, #0
 8004da8:	e9c2 3406 	strd	r3, r4, [r2, #24]
			HAL_Delay(1500);
 8004dac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004db0:	f003 fa56 	bl	8008260 <HAL_Delay>
 8004db4:	e012      	b.n	8004ddc <screenDeviceSettings+0x2f0>
		} else {
			u8g2_ClearDisplay(&u8g2);
 8004db6:	480f      	ldr	r0, [pc, #60]	; (8004df4 <screenDeviceSettings+0x308>)
 8004db8:	f00e ff8a 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004dbc:	480d      	ldr	r0, [pc, #52]	; (8004df4 <screenDeviceSettings+0x308>)
 8004dbe:	f00e fea1 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "OFFSET: UNCHANGED");
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <screenDeviceSettings+0x34c>)
 8004dc4:	2223      	movs	r2, #35	; 0x23
 8004dc6:	210f      	movs	r1, #15
 8004dc8:	480a      	ldr	r0, [pc, #40]	; (8004df4 <screenDeviceSettings+0x308>)
 8004dca:	f00f fce1 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004dce:	4809      	ldr	r0, [pc, #36]	; (8004df4 <screenDeviceSettings+0x308>)
 8004dd0:	f00e ff0b 	bl	8013bea <u8g2_SendBuffer>
			HAL_Delay(1500);
 8004dd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004dd8:	f003 fa42 	bl	8008260 <HAL_Delay>
		}
		return screenDeviceSettings();
 8004ddc:	f7ff fe86 	bl	8004aec <screenDeviceSettings>
 8004de0:	e004      	b.n	8004dec <screenDeviceSettings+0x300>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 8004de2:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <screenDeviceSettings+0x314>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004de8:	f000 fd08 	bl	80057fc <screenInterface>

	}



}
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd90      	pop	{r4, r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000290 	.word	0x20000290
 8004df8:	080220b8 	.word	0x080220b8
 8004dfc:	08022114 	.word	0x08022114
 8004e00:	20000315 	.word	0x20000315
 8004e04:	08022120 	.word	0x08022120
 8004e08:	0802214c 	.word	0x0802214c
 8004e0c:	0802215c 	.word	0x0802215c
 8004e10:	20000018 	.word	0x20000018
 8004e14:	08022174 	.word	0x08022174
 8004e18:	0802218c 	.word	0x0802218c
 8004e1c:	080221a4 	.word	0x080221a4
 8004e20:	080221bc 	.word	0x080221bc
 8004e24:	080221d4 	.word	0x080221d4
 8004e28:	080221e0 	.word	0x080221e0
 8004e2c:	08022204 	.word	0x08022204
 8004e30:	080221f0 	.word	0x080221f0
 8004e34:	08022210 	.word	0x08022210
 8004e38:	08022224 	.word	0x08022224
 8004e3c:	08022238 	.word	0x08022238
 8004e40:	0802224c 	.word	0x0802224c
 8004e44:	00000000 	.word	0x00000000

08004e48 <screenMeasuringSettings>:
 *		[205] *Enabling trigger menu
 *		[206] *Set trigger threshold
 *		[888] *Go to main menu
 *		[999] *Go to main menu
 */
void screenMeasuringSettings(){
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 8004e4e:	487c      	ldr	r0, [pc, #496]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004e50:	f00e ff3e 	bl	8013cd0 <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8004e54:	487a      	ldr	r0, [pc, #488]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004e56:	f00e fe55 	bl	8013b04 <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 20, 35, "Measuring Settings");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/

	uint32_t temp32 = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]

	switch(u8g2_UserInterfaceSelectionList(&u8g2, "Measuring menu", 1, "Current settings\nMeasuring period\nSampling period\nEnable averaging\nEnable trigger\nTrigger threshold\nBack to Main")){
 8004e5e:	4b79      	ldr	r3, [pc, #484]	; (8005044 <screenMeasuringSettings+0x1fc>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	4979      	ldr	r1, [pc, #484]	; (8005048 <screenMeasuringSettings+0x200>)
 8004e64:	4876      	ldr	r0, [pc, #472]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004e66:	f010 fd10 	bl	801588a <u8g2_UserInterfaceSelectionList>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	f200 80da 	bhi.w	8005026 <screenMeasuringSettings+0x1de>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <screenMeasuringSettings+0x30>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004e95 	.word	0x08004e95
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ea7 	.word	0x08004ea7
 8004e84:	08004ec9 	.word	0x08004ec9
 8004e88:	08004eed 	.word	0x08004eed
 8004e8c:	08004f63 	.word	0x08004f63
 8004e90:	08004fd9 	.word	0x08004fd9
	case 0:
		isEnterTriggered = 1;
 8004e94:	4b6d      	ldr	r3, [pc, #436]	; (800504c <screenMeasuringSettings+0x204>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 8004e9a:	f000 fcaf 	bl	80057fc <screenInterface>
 8004e9e:	e0c7      	b.n	8005030 <screenMeasuringSettings+0x1e8>

	// current settings
	case 1:
		screenInfoPanel();
 8004ea0:	f7ff fd56 	bl	8004950 <screenInfoPanel>
		break;
 8004ea4:	e0c4      	b.n	8005030 <screenMeasuringSettings+0x1e8>
	// measuring period
	case 2:
		u8g2_UserInterfaceInputValue32(&u8g2, "Measuring period", "", &settings.measuringInterval, 1, 100000, 5, " us");
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <screenMeasuringSettings+0x208>)
 8004ea8:	9303      	str	r3, [sp, #12]
 8004eaa:	2305      	movs	r3, #5
 8004eac:	9302      	str	r3, [sp, #8]
 8004eae:	4b69      	ldr	r3, [pc, #420]	; (8005054 <screenMeasuringSettings+0x20c>)
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	4b68      	ldr	r3, [pc, #416]	; (8005058 <screenMeasuringSettings+0x210>)
 8004eb8:	4a68      	ldr	r2, [pc, #416]	; (800505c <screenMeasuringSettings+0x214>)
 8004eba:	4969      	ldr	r1, [pc, #420]	; (8005060 <screenMeasuringSettings+0x218>)
 8004ebc:	4860      	ldr	r0, [pc, #384]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004ebe:	f00f ff07 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8004ec2:	f7ff ffc1 	bl	8004e48 <screenMeasuringSettings>
 8004ec6:	e0b3      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	// sampling period
	case 3:
		u8g2_UserInterfaceInputValue32(&u8g2, "Sampling period", "", &settings.samplingInterval, 1, 50000, 5, " us");
 8004ec8:	4b61      	ldr	r3, [pc, #388]	; (8005050 <screenMeasuringSettings+0x208>)
 8004eca:	9303      	str	r3, [sp, #12]
 8004ecc:	2305      	movs	r3, #5
 8004ece:	9302      	str	r3, [sp, #8]
 8004ed0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	4b62      	ldr	r3, [pc, #392]	; (8005064 <screenMeasuringSettings+0x21c>)
 8004edc:	4a5f      	ldr	r2, [pc, #380]	; (800505c <screenMeasuringSettings+0x214>)
 8004ede:	4962      	ldr	r1, [pc, #392]	; (8005068 <screenMeasuringSettings+0x220>)
 8004ee0:	4857      	ldr	r0, [pc, #348]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004ee2:	f00f fef5 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
		return screenMeasuringSettings();
 8004ee6:	f7ff ffaf 	bl	8004e48 <screenMeasuringSettings>
 8004eea:	e0a1      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	// enable averaging
	case 4:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable averaging function", NULL, NULL," YES \n NO ") == 1) {
 8004eec:	4b5f      	ldr	r3, [pc, #380]	; (800506c <screenMeasuringSettings+0x224>)
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	495e      	ldr	r1, [pc, #376]	; (8005070 <screenMeasuringSettings+0x228>)
 8004ef6:	4852      	ldr	r0, [pc, #328]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004ef8:	f010 fa93 	bl	8015422 <u8g2_UserInterfaceMessage>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d116      	bne.n	8004f30 <screenMeasuringSettings+0xe8>
			u8g2_ClearDisplay(&u8g2);
 8004f02:	484f      	ldr	r0, [pc, #316]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f04:	f00e fee4 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004f08:	484d      	ldr	r0, [pc, #308]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f0a:	f00e fdfb 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "AVERAGING: ENABLED");
 8004f0e:	4b59      	ldr	r3, [pc, #356]	; (8005074 <screenMeasuringSettings+0x22c>)
 8004f10:	2223      	movs	r2, #35	; 0x23
 8004f12:	2114      	movs	r1, #20
 8004f14:	484a      	ldr	r0, [pc, #296]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f16:	f00f fc3b 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004f1a:	4849      	ldr	r0, [pc, #292]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f1c:	f00e fe65 	bl	8013bea <u8g2_SendBuffer>
			settings.isAveraging = 1;
 8004f20:	4b55      	ldr	r3, [pc, #340]	; (8005078 <screenMeasuringSettings+0x230>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8004f26:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004f2a:	f003 f999 	bl	8008260 <HAL_Delay>
 8004f2e:	e015      	b.n	8004f5c <screenMeasuringSettings+0x114>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 8004f30:	4843      	ldr	r0, [pc, #268]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f32:	f00e fecd 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004f36:	4842      	ldr	r0, [pc, #264]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f38:	f00e fde4 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "AVERAGING: DISABLED");
 8004f3c:	4b4f      	ldr	r3, [pc, #316]	; (800507c <screenMeasuringSettings+0x234>)
 8004f3e:	2223      	movs	r2, #35	; 0x23
 8004f40:	210f      	movs	r1, #15
 8004f42:	483f      	ldr	r0, [pc, #252]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f44:	f00f fc24 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004f48:	483d      	ldr	r0, [pc, #244]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f4a:	f00e fe4e 	bl	8013bea <u8g2_SendBuffer>
			settings.isAveraging = 0;
 8004f4e:	4b4a      	ldr	r3, [pc, #296]	; (8005078 <screenMeasuringSettings+0x230>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8004f54:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004f58:	f003 f982 	bl	8008260 <HAL_Delay>
		}
		return screenMeasuringSettings();
 8004f5c:	f7ff ff74 	bl	8004e48 <screenMeasuringSettings>
 8004f60:	e066      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	// enable trigger
	case 5:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable trigger function", NULL, NULL," YES \n NO ") == 1) {
 8004f62:	4b42      	ldr	r3, [pc, #264]	; (800506c <screenMeasuringSettings+0x224>)
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2300      	movs	r3, #0
 8004f68:	2200      	movs	r2, #0
 8004f6a:	4945      	ldr	r1, [pc, #276]	; (8005080 <screenMeasuringSettings+0x238>)
 8004f6c:	4834      	ldr	r0, [pc, #208]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f6e:	f010 fa58 	bl	8015422 <u8g2_UserInterfaceMessage>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d116      	bne.n	8004fa6 <screenMeasuringSettings+0x15e>
			u8g2_ClearDisplay(&u8g2);
 8004f78:	4831      	ldr	r0, [pc, #196]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f7a:	f00e fea9 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004f7e:	4830      	ldr	r0, [pc, #192]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f80:	f00e fdc0 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TRIGGER: ENABLED");
 8004f84:	4b3f      	ldr	r3, [pc, #252]	; (8005084 <screenMeasuringSettings+0x23c>)
 8004f86:	2223      	movs	r2, #35	; 0x23
 8004f88:	2114      	movs	r1, #20
 8004f8a:	482d      	ldr	r0, [pc, #180]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f8c:	f00f fc00 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004f90:	482b      	ldr	r0, [pc, #172]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004f92:	f00e fe2a 	bl	8013bea <u8g2_SendBuffer>
			settings.isTriggerActive = 1;
 8004f96:	4b38      	ldr	r3, [pc, #224]	; (8005078 <screenMeasuringSettings+0x230>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8004f9c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004fa0:	f003 f95e 	bl	8008260 <HAL_Delay>
 8004fa4:	e015      	b.n	8004fd2 <screenMeasuringSettings+0x18a>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 8004fa6:	4826      	ldr	r0, [pc, #152]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004fa8:	f00e fe92 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8004fac:	4824      	ldr	r0, [pc, #144]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004fae:	f00e fda9 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "TRIGGER: DISABLED");
 8004fb2:	4b35      	ldr	r3, [pc, #212]	; (8005088 <screenMeasuringSettings+0x240>)
 8004fb4:	2223      	movs	r2, #35	; 0x23
 8004fb6:	210f      	movs	r1, #15
 8004fb8:	4821      	ldr	r0, [pc, #132]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004fba:	f00f fbe9 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8004fbe:	4820      	ldr	r0, [pc, #128]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004fc0:	f00e fe13 	bl	8013bea <u8g2_SendBuffer>
			settings.isTriggerActive = 0;
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	; (8005078 <screenMeasuringSettings+0x230>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	735a      	strb	r2, [r3, #13]
			HAL_Delay(1500);
 8004fca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004fce:	f003 f947 	bl	8008260 <HAL_Delay>
		}
		return screenMeasuringSettings();
 8004fd2:	f7ff ff39 	bl	8004e48 <screenMeasuringSettings>
 8004fd6:	e02b      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	// trigger level
	case 6:
		u8g2_UserInterfaceInputValue32(&u8g2, "Trigger level", "x100 nA", &temp32, 1, 10000000, 5, " nA");
 8004fd8:	1d3a      	adds	r2, r7, #4
 8004fda:	4b2c      	ldr	r3, [pc, #176]	; (800508c <screenMeasuringSettings+0x244>)
 8004fdc:	9303      	str	r3, [sp, #12]
 8004fde:	2305      	movs	r3, #5
 8004fe0:	9302      	str	r3, [sp, #8]
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	; (8005090 <screenMeasuringSettings+0x248>)
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	4a29      	ldr	r2, [pc, #164]	; (8005094 <screenMeasuringSettings+0x24c>)
 8004fee:	492a      	ldr	r1, [pc, #168]	; (8005098 <screenMeasuringSettings+0x250>)
 8004ff0:	4813      	ldr	r0, [pc, #76]	; (8005040 <screenMeasuringSettings+0x1f8>)
 8004ff2:	f00f fe6d 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
		settings.triggerLevel = temp32*100;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2264      	movs	r2, #100	; 0x64
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005006:	4b1c      	ldr	r3, [pc, #112]	; (8005078 <screenMeasuringSettings+0x230>)
 8005008:	ed83 7b04 	vstr	d7, [r3, #16]
		settings.triggerLevel /= 10000000;
 800500c:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <screenMeasuringSettings+0x230>)
 800500e:	ed93 6b04 	vldr	d6, [r3, #16]
 8005012:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8005038 <screenMeasuringSettings+0x1f0>
 8005016:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800501a:	4b17      	ldr	r3, [pc, #92]	; (8005078 <screenMeasuringSettings+0x230>)
 800501c:	ed83 7b04 	vstr	d7, [r3, #16]
		return screenMeasuringSettings();
 8005020:	f7ff ff12 	bl	8004e48 <screenMeasuringSettings>
 8005024:	e004      	b.n	8005030 <screenMeasuringSettings+0x1e8>
		break;
	default:
		isEnterTriggered = 1;
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <screenMeasuringSettings+0x204>)
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 800502c:	f000 fbe6 	bl	80057fc <screenInterface>
		break;

	}


}
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	00000000 	.word	0x00000000
 800503c:	416312d0 	.word	0x416312d0
 8005040:	20000290 	.word	0x20000290
 8005044:	0802225c 	.word	0x0802225c
 8005048:	080222d0 	.word	0x080222d0
 800504c:	20000315 	.word	0x20000315
 8005050:	080222f4 	.word	0x080222f4
 8005054:	000186a0 	.word	0x000186a0
 8005058:	2000001c 	.word	0x2000001c
 800505c:	08020664 	.word	0x08020664
 8005060:	080222e0 	.word	0x080222e0
 8005064:	20000020 	.word	0x20000020
 8005068:	080222f8 	.word	0x080222f8
 800506c:	08022204 	.word	0x08022204
 8005070:	08022308 	.word	0x08022308
 8005074:	08022324 	.word	0x08022324
 8005078:	20000018 	.word	0x20000018
 800507c:	08022338 	.word	0x08022338
 8005080:	0802234c 	.word	0x0802234c
 8005084:	08022364 	.word	0x08022364
 8005088:	08022378 	.word	0x08022378
 800508c:	080223a4 	.word	0x080223a4
 8005090:	00989680 	.word	0x00989680
 8005094:	0802238c 	.word	0x0802238c
 8005098:	08022394 	.word	0x08022394

0800509c <screenPowerSourceControl>:
*		[310] *Adjust current limit for power source
*		[311] *Enable power source
*		[312] *Behaviour mode of power source
*/

void screenPowerSourceControl(){
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af04      	add	r7, sp, #16
	u8g2_ClearBuffer(&u8g2);
	u8g2_DrawStr(&u8g2, 15, 35, "Power Source Control");
	u8g2_SendBuffer(&u8g2);
	HAL_Delay(1000);
	*/
	u8g2_ClearDisplay(&u8g2);
 80050a2:	4891      	ldr	r0, [pc, #580]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80050a4:	f00e fe14 	bl	8013cd0 <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 80050a8:	488f      	ldr	r0, [pc, #572]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80050aa:	f00e fd2b 	bl	8013b04 <u8g2_ClearBuffer>


	uint32_t temp32 = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "Power source menu", 1,"Adjust voltage\nAdjust current limit\nEnable source\nEnable mode\nBack to Main")) {
 80050b2:	4b8e      	ldr	r3, [pc, #568]	; (80052ec <screenPowerSourceControl+0x250>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	498e      	ldr	r1, [pc, #568]	; (80052f0 <screenPowerSourceControl+0x254>)
 80050b8:	488b      	ldr	r0, [pc, #556]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80050ba:	f010 fbe6 	bl	801588a <u8g2_UserInterfaceSelectionList>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	f200 8109 	bhi.w	80052d8 <screenPowerSourceControl+0x23c>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <screenPowerSourceControl+0x30>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050e1 	.word	0x080050e1
 80050d0:	080050ed 	.word	0x080050ed
 80050d4:	08005121 	.word	0x08005121
 80050d8:	08005153 	.word	0x08005153
 80050dc:	080051e9 	.word	0x080051e9
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 80050e0:	4b84      	ldr	r3, [pc, #528]	; (80052f4 <screenPowerSourceControl+0x258>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80050e6:	f000 fb89 	bl	80057fc <screenInterface>
 80050ea:	e0fa      	b.n	80052e2 <screenPowerSourceControl+0x246>
	// adjust voltage
	case 1:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source voltage", "",&settings.powerSourceVoltage, 500, 5500, 5, " mV");
 80050ec:	4b82      	ldr	r3, [pc, #520]	; (80052f8 <screenPowerSourceControl+0x25c>)
 80050ee:	9303      	str	r3, [sp, #12]
 80050f0:	2305      	movs	r3, #5
 80050f2:	9302      	str	r3, [sp, #8]
 80050f4:	f241 537c 	movw	r3, #5500	; 0x157c
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	4b7e      	ldr	r3, [pc, #504]	; (80052fc <screenPowerSourceControl+0x260>)
 8005102:	4a7f      	ldr	r2, [pc, #508]	; (8005300 <screenPowerSourceControl+0x264>)
 8005104:	497f      	ldr	r1, [pc, #508]	; (8005304 <screenPowerSourceControl+0x268>)
 8005106:	4878      	ldr	r0, [pc, #480]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005108:	f00f fde2 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
 800510c:	4603      	mov	r3, r0
 800510e:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <screenPowerSourceControl+0x7e>
			setPotenciomenters();
 8005116:	f7fd f8af 	bl	8002278 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 800511a:	f7ff ffbf 	bl	800509c <screenPowerSourceControl>
 800511e:	e0e0      	b.n	80052e2 <screenPowerSourceControl+0x246>
		break;
	// adjust current limit
	case 2:
		temp32 = u8g2_UserInterfaceInputValue32(&u8g2, "Source current limit", "",&settings.powerSourceCurrent, 10, 500, 5, " mA");
 8005120:	4b79      	ldr	r3, [pc, #484]	; (8005308 <screenPowerSourceControl+0x26c>)
 8005122:	9303      	str	r3, [sp, #12]
 8005124:	2305      	movs	r3, #5
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	230a      	movs	r3, #10
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	4b76      	ldr	r3, [pc, #472]	; (800530c <screenPowerSourceControl+0x270>)
 8005134:	4a72      	ldr	r2, [pc, #456]	; (8005300 <screenPowerSourceControl+0x264>)
 8005136:	4976      	ldr	r1, [pc, #472]	; (8005310 <screenPowerSourceControl+0x274>)
 8005138:	486b      	ldr	r0, [pc, #428]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800513a:	f00f fdc9 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
 800513e:	4603      	mov	r3, r0
 8005140:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <screenPowerSourceControl+0xb0>
			setPotenciomenters();
 8005148:	f7fd f896 	bl	8002278 <setPotenciomenters>
		}
		return screenPowerSourceControl();
 800514c:	f7ff ffa6 	bl	800509c <screenPowerSourceControl>
 8005150:	e0c7      	b.n	80052e2 <screenPowerSourceControl+0x246>
		break;
	// enable source
	case 3:
		if (u8g2_UserInterfaceMessage(&u8g2, "Enable power souce", NULL, NULL," YES \n NO ") == 1) {
 8005152:	4b70      	ldr	r3, [pc, #448]	; (8005314 <screenPowerSourceControl+0x278>)
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	2200      	movs	r2, #0
 800515a:	496f      	ldr	r1, [pc, #444]	; (8005318 <screenPowerSourceControl+0x27c>)
 800515c:	4862      	ldr	r0, [pc, #392]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800515e:	f010 f960 	bl	8015422 <u8g2_UserInterfaceMessage>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d11e      	bne.n	80051a6 <screenPowerSourceControl+0x10a>
			u8g2_ClearDisplay(&u8g2);
 8005168:	485f      	ldr	r0, [pc, #380]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800516a:	f00e fdb1 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800516e:	485e      	ldr	r0, [pc, #376]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005170:	f00e fcc8 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "SOURCE: ENABLED");
 8005174:	4b69      	ldr	r3, [pc, #420]	; (800531c <screenPowerSourceControl+0x280>)
 8005176:	2223      	movs	r2, #35	; 0x23
 8005178:	2114      	movs	r1, #20
 800517a:	485b      	ldr	r0, [pc, #364]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800517c:	f00f fb08 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005180:	4859      	ldr	r0, [pc, #356]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005182:	f00e fd32 	bl	8013bea <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8005186:	2201      	movs	r2, #1
 8005188:	2110      	movs	r1, #16
 800518a:	4865      	ldr	r0, [pc, #404]	; (8005320 <screenPowerSourceControl+0x284>)
 800518c:	f004 fb62 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8005190:	2201      	movs	r2, #1
 8005192:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005196:	4863      	ldr	r0, [pc, #396]	; (8005324 <screenPowerSourceControl+0x288>)
 8005198:	f004 fb5c 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 800519c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80051a0:	f003 f85e 	bl	8008260 <HAL_Delay>
 80051a4:	e01d      	b.n	80051e2 <screenPowerSourceControl+0x146>
		}
		else {
			u8g2_ClearDisplay(&u8g2);
 80051a6:	4850      	ldr	r0, [pc, #320]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051a8:	f00e fd92 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80051ac:	484e      	ldr	r0, [pc, #312]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051ae:	f00e fca9 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 15, 35, "SOURCE: DISABLED");
 80051b2:	4b5d      	ldr	r3, [pc, #372]	; (8005328 <screenPowerSourceControl+0x28c>)
 80051b4:	2223      	movs	r2, #35	; 0x23
 80051b6:	210f      	movs	r1, #15
 80051b8:	484b      	ldr	r0, [pc, #300]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051ba:	f00f fae9 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80051be:	484a      	ldr	r0, [pc, #296]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051c0:	f00e fd13 	bl	8013bea <u8g2_SendBuffer>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 80051c4:	2200      	movs	r2, #0
 80051c6:	2110      	movs	r1, #16
 80051c8:	4855      	ldr	r0, [pc, #340]	; (8005320 <screenPowerSourceControl+0x284>)
 80051ca:	f004 fb43 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 80051ce:	2200      	movs	r2, #0
 80051d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051d4:	4853      	ldr	r0, [pc, #332]	; (8005324 <screenPowerSourceControl+0x288>)
 80051d6:	f004 fb3d 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_Delay(1500);
 80051da:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80051de:	f003 f83f 	bl	8008260 <HAL_Delay>
		}
		return screenPowerSourceControl();
 80051e2:	f7ff ff5b 	bl	800509c <screenPowerSourceControl>
 80051e6:	e07c      	b.n	80052e2 <screenPowerSourceControl+0x246>
		break;
	// enable mode
	case 4:
		temp32 = u8g2_UserInterfaceSelectionList(&u8g2, "Enable mode", 1,"Enable on measuring\nEnable on boot\nManual mode\nExit");
 80051e8:	4b50      	ldr	r3, [pc, #320]	; (800532c <screenPowerSourceControl+0x290>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	4950      	ldr	r1, [pc, #320]	; (8005330 <screenPowerSourceControl+0x294>)
 80051ee:	483e      	ldr	r0, [pc, #248]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80051f0:	f010 fb4b 	bl	801588a <u8g2_UserInterfaceSelectionList>
 80051f4:	4603      	mov	r3, r0
 80051f6:	607b      	str	r3, [r7, #4]
		if(temp32 == 1){
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d117      	bne.n	800522e <screenPowerSourceControl+0x192>
			u8g2_ClearDisplay(&u8g2);
 80051fe:	483a      	ldr	r0, [pc, #232]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005200:	f00e fd66 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005204:	4838      	ldr	r0, [pc, #224]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005206:	f00e fc7d 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: START MEAS");
 800520a:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <screenPowerSourceControl+0x298>)
 800520c:	2223      	movs	r2, #35	; 0x23
 800520e:	2114      	movs	r1, #20
 8005210:	4835      	ldr	r0, [pc, #212]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005212:	f00f fabd 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005216:	4834      	ldr	r0, [pc, #208]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005218:	f00e fce7 	bl	8013bea <u8g2_SendBuffer>
			settings.powerSourceEnableMode = 1;
 800521c:	4b46      	ldr	r3, [pc, #280]	; (8005338 <screenPowerSourceControl+0x29c>)
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			HAL_Delay(1500);
 8005224:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005228:	f003 f81a 	bl	8008260 <HAL_Delay>
 800522c:	e051      	b.n	80052d2 <screenPowerSourceControl+0x236>
		}
		else if(temp32 == 2){
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d121      	bne.n	8005278 <screenPowerSourceControl+0x1dc>
			u8g2_ClearDisplay(&u8g2);
 8005234:	482c      	ldr	r0, [pc, #176]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005236:	f00e fd4b 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 800523a:	482b      	ldr	r0, [pc, #172]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800523c:	f00e fc62 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: DURING BOOT");
 8005240:	4b3e      	ldr	r3, [pc, #248]	; (800533c <screenPowerSourceControl+0x2a0>)
 8005242:	2223      	movs	r2, #35	; 0x23
 8005244:	2114      	movs	r1, #20
 8005246:	4828      	ldr	r0, [pc, #160]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005248:	f00f faa2 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 800524c:	4826      	ldr	r0, [pc, #152]	; (80052e8 <screenPowerSourceControl+0x24c>)
 800524e:	f00e fccc 	bl	8013bea <u8g2_SendBuffer>
			settings.isAveraging = 2;
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <screenPowerSourceControl+0x29c>)
 8005254:	2202      	movs	r2, #2
 8005256:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 8005258:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800525c:	f003 f800 	bl	8008260 <HAL_Delay>
			HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8005260:	2201      	movs	r2, #1
 8005262:	2110      	movs	r1, #16
 8005264:	482e      	ldr	r0, [pc, #184]	; (8005320 <screenPowerSourceControl+0x284>)
 8005266:	f004 faf5 	bl	8009854 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 800526a:	2201      	movs	r2, #1
 800526c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005270:	482c      	ldr	r0, [pc, #176]	; (8005324 <screenPowerSourceControl+0x288>)
 8005272:	f004 faef 	bl	8009854 <HAL_GPIO_WritePin>
 8005276:	e02c      	b.n	80052d2 <screenPowerSourceControl+0x236>

		}
		else if(temp32 == 3){
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d116      	bne.n	80052ac <screenPowerSourceControl+0x210>
			u8g2_ClearDisplay(&u8g2);
 800527e:	481a      	ldr	r0, [pc, #104]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005280:	f00e fd26 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005284:	4818      	ldr	r0, [pc, #96]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005286:	f00e fc3d 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: MANUAL");
 800528a:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <screenPowerSourceControl+0x2a4>)
 800528c:	2223      	movs	r2, #35	; 0x23
 800528e:	2114      	movs	r1, #20
 8005290:	4815      	ldr	r0, [pc, #84]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005292:	f00f fa7d 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 8005296:	4814      	ldr	r0, [pc, #80]	; (80052e8 <screenPowerSourceControl+0x24c>)
 8005298:	f00e fca7 	bl	8013bea <u8g2_SendBuffer>
			settings.isAveraging = 0;
 800529c:	4b26      	ldr	r3, [pc, #152]	; (8005338 <screenPowerSourceControl+0x29c>)
 800529e:	2200      	movs	r2, #0
 80052a0:	731a      	strb	r2, [r3, #12]
			HAL_Delay(1500);
 80052a2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80052a6:	f002 ffdb 	bl	8008260 <HAL_Delay>
 80052aa:	e012      	b.n	80052d2 <screenPowerSourceControl+0x236>
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 80052ac:	480e      	ldr	r0, [pc, #56]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80052ae:	f00e fd0f 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80052b2:	480d      	ldr	r0, [pc, #52]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80052b4:	f00e fc26 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "ENABLE: NO CHANGE");
 80052b8:	4b22      	ldr	r3, [pc, #136]	; (8005344 <screenPowerSourceControl+0x2a8>)
 80052ba:	2223      	movs	r2, #35	; 0x23
 80052bc:	2114      	movs	r1, #20
 80052be:	480a      	ldr	r0, [pc, #40]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80052c0:	f00f fa66 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80052c4:	4808      	ldr	r0, [pc, #32]	; (80052e8 <screenPowerSourceControl+0x24c>)
 80052c6:	f00e fc90 	bl	8013bea <u8g2_SendBuffer>
			HAL_Delay(1500);
 80052ca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80052ce:	f002 ffc7 	bl	8008260 <HAL_Delay>
			//settings.powerSourceEnableMode = 1;
		}
		return screenPowerSourceControl();
 80052d2:	f7ff fee3 	bl	800509c <screenPowerSourceControl>
 80052d6:	e004      	b.n	80052e2 <screenPowerSourceControl+0x246>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <screenPowerSourceControl+0x258>)
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80052de:	f000 fa8d 	bl	80057fc <screenInterface>
		break;

	}


}
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000290 	.word	0x20000290
 80052ec:	080223a8 	.word	0x080223a8
 80052f0:	080223f4 	.word	0x080223f4
 80052f4:	20000315 	.word	0x20000315
 80052f8:	08022418 	.word	0x08022418
 80052fc:	20000038 	.word	0x20000038
 8005300:	08020664 	.word	0x08020664
 8005304:	08022408 	.word	0x08022408
 8005308:	08022434 	.word	0x08022434
 800530c:	2000003a 	.word	0x2000003a
 8005310:	0802241c 	.word	0x0802241c
 8005314:	08022204 	.word	0x08022204
 8005318:	08022438 	.word	0x08022438
 800531c:	0802244c 	.word	0x0802244c
 8005320:	40020000 	.word	0x40020000
 8005324:	40020400 	.word	0x40020400
 8005328:	0802245c 	.word	0x0802245c
 800532c:	08022470 	.word	0x08022470
 8005330:	080224a4 	.word	0x080224a4
 8005334:	080224b0 	.word	0x080224b0
 8005338:	20000018 	.word	0x20000018
 800533c:	080224c4 	.word	0x080224c4
 8005340:	080224d8 	.word	0x080224d8
 8005344:	080224e8 	.word	0x080224e8

08005348 <screenRtcSettings>:
 *		[325] *Set Date - Year
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 */

void screenRtcSettings(){
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af04      	add	r7, sp, #16

	u8g2_ClearDisplay(&u8g2);
 800534e:	48b4      	ldr	r0, [pc, #720]	; (8005620 <screenRtcSettings+0x2d8>)
 8005350:	f00e fcbe 	bl	8013cd0 <u8g2_ClearDisplay>
	u8g2_ClearBuffer(&u8g2);
 8005354:	48b2      	ldr	r0, [pc, #712]	; (8005620 <screenRtcSettings+0x2d8>)
 8005356:	f00e fbd5 	bl	8013b04 <u8g2_ClearBuffer>

	/* Get the RTC current Time and Date */
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 800535a:	2200      	movs	r2, #0
 800535c:	49b1      	ldr	r1, [pc, #708]	; (8005624 <screenRtcSettings+0x2dc>)
 800535e:	48b2      	ldr	r0, [pc, #712]	; (8005628 <screenRtcSettings+0x2e0>)
 8005360:	f008 fa22 	bl	800d7a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8005364:	2200      	movs	r2, #0
 8005366:	49b1      	ldr	r1, [pc, #708]	; (800562c <screenRtcSettings+0x2e4>)
 8005368:	48af      	ldr	r0, [pc, #700]	; (8005628 <screenRtcSettings+0x2e0>)
 800536a:	f008 fb23 	bl	800d9b4 <HAL_RTC_GetDate>

	uint32_t temp32 = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]

	switch (u8g2_UserInterfaceSelectionList(&u8g2, "RTC menu", 1,"Set Time\nSet Date - Days\nSet Date - Month\nSet Date - Year\nBack to Main")) {
 8005372:	4baf      	ldr	r3, [pc, #700]	; (8005630 <screenRtcSettings+0x2e8>)
 8005374:	2201      	movs	r2, #1
 8005376:	49af      	ldr	r1, [pc, #700]	; (8005634 <screenRtcSettings+0x2ec>)
 8005378:	48a9      	ldr	r0, [pc, #676]	; (8005620 <screenRtcSettings+0x2d8>)
 800537a:	f010 fa86 	bl	801588a <u8g2_UserInterfaceSelectionList>
 800537e:	4603      	mov	r3, r0
 8005380:	2b04      	cmp	r3, #4
 8005382:	f200 8218 	bhi.w	80057b6 <screenRtcSettings+0x46e>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <screenRtcSettings+0x44>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053a1 	.word	0x080053a1
 8005390:	080053ad 	.word	0x080053ad
 8005394:	0800550d 	.word	0x0800550d
 8005398:	080055c7 	.word	0x080055c7
 800539c:	080056fd 	.word	0x080056fd
	// exit back to main menu
	case 0:
		isEnterTriggered = 1;
 80053a0:	4ba5      	ldr	r3, [pc, #660]	; (8005638 <screenRtcSettings+0x2f0>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80053a6:	f000 fa29 	bl	80057fc <screenInterface>
 80053aa:	e209      	b.n	80057c0 <screenRtcSettings+0x478>
	// set time - hours, minutes, seconds
	case 1:
		temp32 = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	607b      	str	r3, [r7, #4]
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - hours", "1 .. 24",&Time.Hours, 1, 24, 5, " h") == 1){
 80053b0:	4ba2      	ldr	r3, [pc, #648]	; (800563c <screenRtcSettings+0x2f4>)
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	2305      	movs	r3, #5
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	2318      	movs	r3, #24
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	2301      	movs	r3, #1
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	4b98      	ldr	r3, [pc, #608]	; (8005624 <screenRtcSettings+0x2dc>)
 80053c2:	4a9f      	ldr	r2, [pc, #636]	; (8005640 <screenRtcSettings+0x2f8>)
 80053c4:	499f      	ldr	r1, [pc, #636]	; (8005644 <screenRtcSettings+0x2fc>)
 80053c6:	4896      	ldr	r0, [pc, #600]	; (8005620 <screenRtcSettings+0x2d8>)
 80053c8:	f00f fc82 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 8086 	bne.w	80054e0 <screenRtcSettings+0x198>
			if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - minutes", "0 .. 59",&Time.Minutes, 0, 59, 5, " min") == 1){
 80053d4:	4b9c      	ldr	r3, [pc, #624]	; (8005648 <screenRtcSettings+0x300>)
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	2305      	movs	r3, #5
 80053da:	9302      	str	r3, [sp, #8]
 80053dc:	233b      	movs	r3, #59	; 0x3b
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	2300      	movs	r3, #0
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	4b99      	ldr	r3, [pc, #612]	; (800564c <screenRtcSettings+0x304>)
 80053e6:	4a9a      	ldr	r2, [pc, #616]	; (8005650 <screenRtcSettings+0x308>)
 80053e8:	499a      	ldr	r1, [pc, #616]	; (8005654 <screenRtcSettings+0x30c>)
 80053ea:	488d      	ldr	r0, [pc, #564]	; (8005620 <screenRtcSettings+0x2d8>)
 80053ec:	f00f fc70 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d160      	bne.n	80054b8 <screenRtcSettings+0x170>
				if(u8g2_UserInterfaceInputValue32(&u8g2, "Enter time - seconds", "0 .. 59",&Time.Seconds, 0, 59, 5, " sec") == 1){
 80053f6:	4b98      	ldr	r3, [pc, #608]	; (8005658 <screenRtcSettings+0x310>)
 80053f8:	9303      	str	r3, [sp, #12]
 80053fa:	2305      	movs	r3, #5
 80053fc:	9302      	str	r3, [sp, #8]
 80053fe:	233b      	movs	r3, #59	; 0x3b
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	2300      	movs	r3, #0
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4b95      	ldr	r3, [pc, #596]	; (800565c <screenRtcSettings+0x314>)
 8005408:	4a91      	ldr	r2, [pc, #580]	; (8005650 <screenRtcSettings+0x308>)
 800540a:	4995      	ldr	r1, [pc, #596]	; (8005660 <screenRtcSettings+0x318>)
 800540c:	4884      	ldr	r0, [pc, #528]	; (8005620 <screenRtcSettings+0x2d8>)
 800540e:	f00f fc5f 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d13b      	bne.n	8005490 <screenRtcSettings+0x148>

					Time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005418:	4b82      	ldr	r3, [pc, #520]	; (8005624 <screenRtcSettings+0x2dc>)
 800541a:	2200      	movs	r2, #0
 800541c:	611a      	str	r2, [r3, #16]
					Time.StoreOperation = RTC_STOREOPERATION_RESET;
 800541e:	4b81      	ldr	r3, [pc, #516]	; (8005624 <screenRtcSettings+0x2dc>)
 8005420:	2200      	movs	r2, #0
 8005422:	615a      	str	r2, [r3, #20]
					if (HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 8005424:	2200      	movs	r2, #0
 8005426:	497f      	ldr	r1, [pc, #508]	; (8005624 <screenRtcSettings+0x2dc>)
 8005428:	487f      	ldr	r0, [pc, #508]	; (8005628 <screenRtcSettings+0x2e0>)
 800542a:	f008 f8ff 	bl	800d62c <HAL_RTC_SetTime>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <screenRtcSettings+0x114>
					{
						u8g2_ClearDisplay(&u8g2);
 8005434:	487a      	ldr	r0, [pc, #488]	; (8005620 <screenRtcSettings+0x2d8>)
 8005436:	f00e fc4b 	bl	8013cd0 <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 800543a:	4879      	ldr	r0, [pc, #484]	; (8005620 <screenRtcSettings+0x2d8>)
 800543c:	f00e fb62 	bl	8013b04 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: ERROR");
 8005440:	4b88      	ldr	r3, [pc, #544]	; (8005664 <screenRtcSettings+0x31c>)
 8005442:	2223      	movs	r2, #35	; 0x23
 8005444:	2114      	movs	r1, #20
 8005446:	4876      	ldr	r0, [pc, #472]	; (8005620 <screenRtcSettings+0x2d8>)
 8005448:	f00f f9a2 	bl	8014790 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 800544c:	4874      	ldr	r0, [pc, #464]	; (8005620 <screenRtcSettings+0x2d8>)
 800544e:	f00e fbcc 	bl	8013bea <u8g2_SendBuffer>
						HAL_Delay(1500);
 8005452:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005456:	f002 ff03 	bl	8008260 <HAL_Delay>
 800545a:	e054      	b.n	8005506 <screenRtcSettings+0x1be>
					}
					else{
						HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800545c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8005460:	2101      	movs	r1, #1
 8005462:	4871      	ldr	r0, [pc, #452]	; (8005628 <screenRtcSettings+0x2e0>)
 8005464:	f008 fb86 	bl	800db74 <HAL_RTCEx_BKUPWrite>

						u8g2_ClearDisplay(&u8g2);
 8005468:	486d      	ldr	r0, [pc, #436]	; (8005620 <screenRtcSettings+0x2d8>)
 800546a:	f00e fc31 	bl	8013cd0 <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 800546e:	486c      	ldr	r0, [pc, #432]	; (8005620 <screenRtcSettings+0x2d8>)
 8005470:	f00e fb48 	bl	8013b04 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "TIME: SAVED");
 8005474:	4b7c      	ldr	r3, [pc, #496]	; (8005668 <screenRtcSettings+0x320>)
 8005476:	2223      	movs	r2, #35	; 0x23
 8005478:	2114      	movs	r1, #20
 800547a:	4869      	ldr	r0, [pc, #420]	; (8005620 <screenRtcSettings+0x2d8>)
 800547c:	f00f f988 	bl	8014790 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8005480:	4867      	ldr	r0, [pc, #412]	; (8005620 <screenRtcSettings+0x2d8>)
 8005482:	f00e fbb2 	bl	8013bea <u8g2_SendBuffer>
						HAL_Delay(1500);
 8005486:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800548a:	f002 fee9 	bl	8008260 <HAL_Delay>
 800548e:	e03a      	b.n	8005506 <screenRtcSettings+0x1be>
					}

				}
				else{
					u8g2_ClearDisplay(&u8g2);
 8005490:	4863      	ldr	r0, [pc, #396]	; (8005620 <screenRtcSettings+0x2d8>)
 8005492:	f00e fc1d 	bl	8013cd0 <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 8005496:	4862      	ldr	r0, [pc, #392]	; (8005620 <screenRtcSettings+0x2d8>)
 8005498:	f00e fb34 	bl	8013b04 <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 800549c:	4b73      	ldr	r3, [pc, #460]	; (800566c <screenRtcSettings+0x324>)
 800549e:	2223      	movs	r2, #35	; 0x23
 80054a0:	2114      	movs	r1, #20
 80054a2:	485f      	ldr	r0, [pc, #380]	; (8005620 <screenRtcSettings+0x2d8>)
 80054a4:	f00f f974 	bl	8014790 <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 80054a8:	485d      	ldr	r0, [pc, #372]	; (8005620 <screenRtcSettings+0x2d8>)
 80054aa:	f00e fb9e 	bl	8013bea <u8g2_SendBuffer>
					HAL_Delay(1500);
 80054ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80054b2:	f002 fed5 	bl	8008260 <HAL_Delay>
 80054b6:	e026      	b.n	8005506 <screenRtcSettings+0x1be>

				}

			}
			else{
				u8g2_ClearDisplay(&u8g2);
 80054b8:	4859      	ldr	r0, [pc, #356]	; (8005620 <screenRtcSettings+0x2d8>)
 80054ba:	f00e fc09 	bl	8013cd0 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80054be:	4858      	ldr	r0, [pc, #352]	; (8005620 <screenRtcSettings+0x2d8>)
 80054c0:	f00e fb20 	bl	8013b04 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 80054c4:	4b69      	ldr	r3, [pc, #420]	; (800566c <screenRtcSettings+0x324>)
 80054c6:	2223      	movs	r2, #35	; 0x23
 80054c8:	2114      	movs	r1, #20
 80054ca:	4855      	ldr	r0, [pc, #340]	; (8005620 <screenRtcSettings+0x2d8>)
 80054cc:	f00f f960 	bl	8014790 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80054d0:	4853      	ldr	r0, [pc, #332]	; (8005620 <screenRtcSettings+0x2d8>)
 80054d2:	f00e fb8a 	bl	8013bea <u8g2_SendBuffer>
				HAL_Delay(1500);
 80054d6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80054da:	f002 fec1 	bl	8008260 <HAL_Delay>
 80054de:	e012      	b.n	8005506 <screenRtcSettings+0x1be>
			}
		}
		else{
			u8g2_ClearDisplay(&u8g2);
 80054e0:	484f      	ldr	r0, [pc, #316]	; (8005620 <screenRtcSettings+0x2d8>)
 80054e2:	f00e fbf5 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80054e6:	484e      	ldr	r0, [pc, #312]	; (8005620 <screenRtcSettings+0x2d8>)
 80054e8:	f00e fb0c 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "TIME: NOT SAVED");
 80054ec:	4b5f      	ldr	r3, [pc, #380]	; (800566c <screenRtcSettings+0x324>)
 80054ee:	2223      	movs	r2, #35	; 0x23
 80054f0:	2114      	movs	r1, #20
 80054f2:	484b      	ldr	r0, [pc, #300]	; (8005620 <screenRtcSettings+0x2d8>)
 80054f4:	f00f f94c 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80054f8:	4849      	ldr	r0, [pc, #292]	; (8005620 <screenRtcSettings+0x2d8>)
 80054fa:	f00e fb76 	bl	8013bea <u8g2_SendBuffer>
			HAL_Delay(1500);
 80054fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005502:	f002 fead 	bl	8008260 <HAL_Delay>

		}

		return screenRtcSettings();
 8005506:	f7ff ff1f 	bl	8005348 <screenRtcSettings>
 800550a:	e159      	b.n	80057c0 <screenRtcSettings+0x478>
		break;
	// set date day
	case 2:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - day", "1 .. 31",&Date.Date, 1, 31, 5, "") == 1){
 800550c:	4b58      	ldr	r3, [pc, #352]	; (8005670 <screenRtcSettings+0x328>)
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	2305      	movs	r3, #5
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	231f      	movs	r3, #31
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	2301      	movs	r3, #1
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	4b55      	ldr	r3, [pc, #340]	; (8005674 <screenRtcSettings+0x32c>)
 800551e:	4a56      	ldr	r2, [pc, #344]	; (8005678 <screenRtcSettings+0x330>)
 8005520:	4956      	ldr	r1, [pc, #344]	; (800567c <screenRtcSettings+0x334>)
 8005522:	483f      	ldr	r0, [pc, #252]	; (8005620 <screenRtcSettings+0x2d8>)
 8005524:	f00f fbd4 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
 8005528:	4603      	mov	r3, r0
 800552a:	2b01      	cmp	r3, #1
 800552c:	d135      	bne.n	800559a <screenRtcSettings+0x252>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800552e:	2200      	movs	r2, #0
 8005530:	493e      	ldr	r1, [pc, #248]	; (800562c <screenRtcSettings+0x2e4>)
 8005532:	483d      	ldr	r0, [pc, #244]	; (8005628 <screenRtcSettings+0x2e0>)
 8005534:	f008 f996 	bl	800d864 <HAL_RTC_SetDate>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d013      	beq.n	8005566 <screenRtcSettings+0x21e>
			{
				u8g2_ClearDisplay(&u8g2);
 800553e:	4838      	ldr	r0, [pc, #224]	; (8005620 <screenRtcSettings+0x2d8>)
 8005540:	f00e fbc6 	bl	8013cd0 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005544:	4836      	ldr	r0, [pc, #216]	; (8005620 <screenRtcSettings+0x2d8>)
 8005546:	f00e fadd 	bl	8013b04 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: ERROR");
 800554a:	4b4d      	ldr	r3, [pc, #308]	; (8005680 <screenRtcSettings+0x338>)
 800554c:	2223      	movs	r2, #35	; 0x23
 800554e:	2114      	movs	r1, #20
 8005550:	4833      	ldr	r0, [pc, #204]	; (8005620 <screenRtcSettings+0x2d8>)
 8005552:	f00f f91d 	bl	8014790 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005556:	4832      	ldr	r0, [pc, #200]	; (8005620 <screenRtcSettings+0x2d8>)
 8005558:	f00e fb47 	bl	8013bea <u8g2_SendBuffer>
				HAL_Delay(1500);
 800555c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005560:	f002 fe7e 	bl	8008260 <HAL_Delay>
 8005564:	e02c      	b.n	80055c0 <screenRtcSettings+0x278>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8005566:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800556a:	2101      	movs	r1, #1
 800556c:	482e      	ldr	r0, [pc, #184]	; (8005628 <screenRtcSettings+0x2e0>)
 800556e:	f008 fb01 	bl	800db74 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 8005572:	482b      	ldr	r0, [pc, #172]	; (8005620 <screenRtcSettings+0x2d8>)
 8005574:	f00e fbac 	bl	8013cd0 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005578:	4829      	ldr	r0, [pc, #164]	; (8005620 <screenRtcSettings+0x2d8>)
 800557a:	f00e fac3 	bl	8013b04 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "DAY: SAVED");
 800557e:	4b41      	ldr	r3, [pc, #260]	; (8005684 <screenRtcSettings+0x33c>)
 8005580:	2223      	movs	r2, #35	; 0x23
 8005582:	2114      	movs	r1, #20
 8005584:	4826      	ldr	r0, [pc, #152]	; (8005620 <screenRtcSettings+0x2d8>)
 8005586:	f00f f903 	bl	8014790 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 800558a:	4825      	ldr	r0, [pc, #148]	; (8005620 <screenRtcSettings+0x2d8>)
 800558c:	f00e fb2d 	bl	8013bea <u8g2_SendBuffer>
				HAL_Delay(1500);
 8005590:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005594:	f002 fe64 	bl	8008260 <HAL_Delay>
 8005598:	e012      	b.n	80055c0 <screenRtcSettings+0x278>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 800559a:	4821      	ldr	r0, [pc, #132]	; (8005620 <screenRtcSettings+0x2d8>)
 800559c:	f00e fb98 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80055a0:	481f      	ldr	r0, [pc, #124]	; (8005620 <screenRtcSettings+0x2d8>)
 80055a2:	f00e faaf 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "DAY: NOT SAVED");
 80055a6:	4b38      	ldr	r3, [pc, #224]	; (8005688 <screenRtcSettings+0x340>)
 80055a8:	2223      	movs	r2, #35	; 0x23
 80055aa:	2114      	movs	r1, #20
 80055ac:	481c      	ldr	r0, [pc, #112]	; (8005620 <screenRtcSettings+0x2d8>)
 80055ae:	f00f f8ef 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80055b2:	481b      	ldr	r0, [pc, #108]	; (8005620 <screenRtcSettings+0x2d8>)
 80055b4:	f00e fb19 	bl	8013bea <u8g2_SendBuffer>
			HAL_Delay(1500);
 80055b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80055bc:	f002 fe50 	bl	8008260 <HAL_Delay>
		}
		return screenRtcSettings();
 80055c0:	f7ff fec2 	bl	8005348 <screenRtcSettings>
 80055c4:	e0fc      	b.n	80057c0 <screenRtcSettings+0x478>
		break;
	// set date month
	case 3:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - month", "1 .. 12",&Date.Month, 1, 12, 5, "") == 1){
 80055c6:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <screenRtcSettings+0x328>)
 80055c8:	9303      	str	r3, [sp, #12]
 80055ca:	2305      	movs	r3, #5
 80055cc:	9302      	str	r3, [sp, #8]
 80055ce:	230c      	movs	r3, #12
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	2301      	movs	r3, #1
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	4b2d      	ldr	r3, [pc, #180]	; (800568c <screenRtcSettings+0x344>)
 80055d8:	4a2d      	ldr	r2, [pc, #180]	; (8005690 <screenRtcSettings+0x348>)
 80055da:	492e      	ldr	r1, [pc, #184]	; (8005694 <screenRtcSettings+0x34c>)
 80055dc:	4810      	ldr	r0, [pc, #64]	; (8005620 <screenRtcSettings+0x2d8>)
 80055de:	f00f fb77 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d173      	bne.n	80056d0 <screenRtcSettings+0x388>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 80055e8:	2200      	movs	r2, #0
 80055ea:	4910      	ldr	r1, [pc, #64]	; (800562c <screenRtcSettings+0x2e4>)
 80055ec:	480e      	ldr	r0, [pc, #56]	; (8005628 <screenRtcSettings+0x2e0>)
 80055ee:	f008 f939 	bl	800d864 <HAL_RTC_SetDate>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d051      	beq.n	800569c <screenRtcSettings+0x354>
			{
				u8g2_ClearDisplay(&u8g2);
 80055f8:	4809      	ldr	r0, [pc, #36]	; (8005620 <screenRtcSettings+0x2d8>)
 80055fa:	f00e fb69 	bl	8013cd0 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80055fe:	4808      	ldr	r0, [pc, #32]	; (8005620 <screenRtcSettings+0x2d8>)
 8005600:	f00e fa80 	bl	8013b04 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: ERROR");
 8005604:	4b24      	ldr	r3, [pc, #144]	; (8005698 <screenRtcSettings+0x350>)
 8005606:	2223      	movs	r2, #35	; 0x23
 8005608:	2114      	movs	r1, #20
 800560a:	4805      	ldr	r0, [pc, #20]	; (8005620 <screenRtcSettings+0x2d8>)
 800560c:	f00f f8c0 	bl	8014790 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005610:	4803      	ldr	r0, [pc, #12]	; (8005620 <screenRtcSettings+0x2d8>)
 8005612:	f00e faea 	bl	8013bea <u8g2_SendBuffer>
				HAL_Delay(1500);
 8005616:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800561a:	f002 fe21 	bl	8008260 <HAL_Delay>
 800561e:	e06a      	b.n	80056f6 <screenRtcSettings+0x3ae>
 8005620:	20000290 	.word	0x20000290
 8005624:	20008c44 	.word	0x20008c44
 8005628:	20003440 	.word	0x20003440
 800562c:	200072a0 	.word	0x200072a0
 8005630:	080224fc 	.word	0x080224fc
 8005634:	08022544 	.word	0x08022544
 8005638:	20000315 	.word	0x20000315
 800563c:	0802256c 	.word	0x0802256c
 8005640:	08022550 	.word	0x08022550
 8005644:	08022558 	.word	0x08022558
 8005648:	08022590 	.word	0x08022590
 800564c:	20008c45 	.word	0x20008c45
 8005650:	08022570 	.word	0x08022570
 8005654:	08022578 	.word	0x08022578
 8005658:	080225b0 	.word	0x080225b0
 800565c:	20008c46 	.word	0x20008c46
 8005660:	08022598 	.word	0x08022598
 8005664:	080225b8 	.word	0x080225b8
 8005668:	080225c4 	.word	0x080225c4
 800566c:	080225d0 	.word	0x080225d0
 8005670:	08020664 	.word	0x08020664
 8005674:	200072a2 	.word	0x200072a2
 8005678:	080225e0 	.word	0x080225e0
 800567c:	080225e8 	.word	0x080225e8
 8005680:	080225f8 	.word	0x080225f8
 8005684:	08022604 	.word	0x08022604
 8005688:	08022610 	.word	0x08022610
 800568c:	200072a1 	.word	0x200072a1
 8005690:	08022620 	.word	0x08022620
 8005694:	08022628 	.word	0x08022628
 8005698:	0802263c 	.word	0x0802263c
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800569c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80056a0:	2101      	movs	r1, #1
 80056a2:	4849      	ldr	r0, [pc, #292]	; (80057c8 <screenRtcSettings+0x480>)
 80056a4:	f008 fa66 	bl	800db74 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 80056a8:	4848      	ldr	r0, [pc, #288]	; (80057cc <screenRtcSettings+0x484>)
 80056aa:	f00e fb11 	bl	8013cd0 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 80056ae:	4847      	ldr	r0, [pc, #284]	; (80057cc <screenRtcSettings+0x484>)
 80056b0:	f00e fa28 	bl	8013b04 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "MONTH: SAVED");
 80056b4:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <screenRtcSettings+0x488>)
 80056b6:	2223      	movs	r2, #35	; 0x23
 80056b8:	2114      	movs	r1, #20
 80056ba:	4844      	ldr	r0, [pc, #272]	; (80057cc <screenRtcSettings+0x484>)
 80056bc:	f00f f868 	bl	8014790 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 80056c0:	4842      	ldr	r0, [pc, #264]	; (80057cc <screenRtcSettings+0x484>)
 80056c2:	f00e fa92 	bl	8013bea <u8g2_SendBuffer>
				HAL_Delay(1500);
 80056c6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80056ca:	f002 fdc9 	bl	8008260 <HAL_Delay>
 80056ce:	e012      	b.n	80056f6 <screenRtcSettings+0x3ae>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 80056d0:	483e      	ldr	r0, [pc, #248]	; (80057cc <screenRtcSettings+0x484>)
 80056d2:	f00e fafd 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 80056d6:	483d      	ldr	r0, [pc, #244]	; (80057cc <screenRtcSettings+0x484>)
 80056d8:	f00e fa14 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "MONTH: NOT SAVED");
 80056dc:	4b3d      	ldr	r3, [pc, #244]	; (80057d4 <screenRtcSettings+0x48c>)
 80056de:	2223      	movs	r2, #35	; 0x23
 80056e0:	2114      	movs	r1, #20
 80056e2:	483a      	ldr	r0, [pc, #232]	; (80057cc <screenRtcSettings+0x484>)
 80056e4:	f00f f854 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80056e8:	4838      	ldr	r0, [pc, #224]	; (80057cc <screenRtcSettings+0x484>)
 80056ea:	f00e fa7e 	bl	8013bea <u8g2_SendBuffer>
			HAL_Delay(1500);
 80056ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80056f2:	f002 fdb5 	bl	8008260 <HAL_Delay>
		}
		return screenRtcSettings();
 80056f6:	f7ff fe27 	bl	8005348 <screenRtcSettings>
 80056fa:	e061      	b.n	80057c0 <screenRtcSettings+0x478>
		break;
	// set date year
	case 4:
		if(u8g2_UserInterfaceInputValue32(&u8g2, "Set date - year", "20XX 0 .. 100",&Date.Year, 0, 100, 5, "") == 1){
 80056fc:	4b36      	ldr	r3, [pc, #216]	; (80057d8 <screenRtcSettings+0x490>)
 80056fe:	9303      	str	r3, [sp, #12]
 8005700:	2305      	movs	r3, #5
 8005702:	9302      	str	r3, [sp, #8]
 8005704:	2364      	movs	r3, #100	; 0x64
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	2300      	movs	r3, #0
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	4b33      	ldr	r3, [pc, #204]	; (80057dc <screenRtcSettings+0x494>)
 800570e:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <screenRtcSettings+0x498>)
 8005710:	4934      	ldr	r1, [pc, #208]	; (80057e4 <screenRtcSettings+0x49c>)
 8005712:	482e      	ldr	r0, [pc, #184]	; (80057cc <screenRtcSettings+0x484>)
 8005714:	f00f fadc 	bl	8014cd0 <u8g2_UserInterfaceInputValue32>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d135      	bne.n	800578a <screenRtcSettings+0x442>

			if (HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800571e:	2200      	movs	r2, #0
 8005720:	4931      	ldr	r1, [pc, #196]	; (80057e8 <screenRtcSettings+0x4a0>)
 8005722:	4829      	ldr	r0, [pc, #164]	; (80057c8 <screenRtcSettings+0x480>)
 8005724:	f008 f89e 	bl	800d864 <HAL_RTC_SetDate>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d013      	beq.n	8005756 <screenRtcSettings+0x40e>
			{
				u8g2_ClearDisplay(&u8g2);
 800572e:	4827      	ldr	r0, [pc, #156]	; (80057cc <screenRtcSettings+0x484>)
 8005730:	f00e face 	bl	8013cd0 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005734:	4825      	ldr	r0, [pc, #148]	; (80057cc <screenRtcSettings+0x484>)
 8005736:	f00e f9e5 	bl	8013b04 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: ERROR");
 800573a:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <screenRtcSettings+0x4a4>)
 800573c:	2223      	movs	r2, #35	; 0x23
 800573e:	2114      	movs	r1, #20
 8005740:	4822      	ldr	r0, [pc, #136]	; (80057cc <screenRtcSettings+0x484>)
 8005742:	f00f f825 	bl	8014790 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 8005746:	4821      	ldr	r0, [pc, #132]	; (80057cc <screenRtcSettings+0x484>)
 8005748:	f00e fa4f 	bl	8013bea <u8g2_SendBuffer>
				HAL_Delay(1500);
 800574c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005750:	f002 fd86 	bl	8008260 <HAL_Delay>
 8005754:	e02c      	b.n	80057b0 <screenRtcSettings+0x468>
			}
			else{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8005756:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800575a:	2101      	movs	r1, #1
 800575c:	481a      	ldr	r0, [pc, #104]	; (80057c8 <screenRtcSettings+0x480>)
 800575e:	f008 fa09 	bl	800db74 <HAL_RTCEx_BKUPWrite>

				u8g2_ClearDisplay(&u8g2);
 8005762:	481a      	ldr	r0, [pc, #104]	; (80057cc <screenRtcSettings+0x484>)
 8005764:	f00e fab4 	bl	8013cd0 <u8g2_ClearDisplay>
				u8g2_ClearBuffer(&u8g2);
 8005768:	4818      	ldr	r0, [pc, #96]	; (80057cc <screenRtcSettings+0x484>)
 800576a:	f00e f9cb 	bl	8013b04 <u8g2_ClearBuffer>
				u8g2_DrawStr(&u8g2, 20, 35, "YEAR: SAVED");
 800576e:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <screenRtcSettings+0x4a8>)
 8005770:	2223      	movs	r2, #35	; 0x23
 8005772:	2114      	movs	r1, #20
 8005774:	4815      	ldr	r0, [pc, #84]	; (80057cc <screenRtcSettings+0x484>)
 8005776:	f00f f80b 	bl	8014790 <u8g2_DrawStr>
				u8g2_SendBuffer(&u8g2);
 800577a:	4814      	ldr	r0, [pc, #80]	; (80057cc <screenRtcSettings+0x484>)
 800577c:	f00e fa35 	bl	8013bea <u8g2_SendBuffer>
				HAL_Delay(1500);
 8005780:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005784:	f002 fd6c 	bl	8008260 <HAL_Delay>
 8005788:	e012      	b.n	80057b0 <screenRtcSettings+0x468>

			}

		}
		else{
			u8g2_ClearDisplay(&u8g2);
 800578a:	4810      	ldr	r0, [pc, #64]	; (80057cc <screenRtcSettings+0x484>)
 800578c:	f00e faa0 	bl	8013cd0 <u8g2_ClearDisplay>
			u8g2_ClearBuffer(&u8g2);
 8005790:	480e      	ldr	r0, [pc, #56]	; (80057cc <screenRtcSettings+0x484>)
 8005792:	f00e f9b7 	bl	8013b04 <u8g2_ClearBuffer>
			u8g2_DrawStr(&u8g2, 20, 35, "YEAR: NOT SAVED");
 8005796:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <screenRtcSettings+0x4ac>)
 8005798:	2223      	movs	r2, #35	; 0x23
 800579a:	2114      	movs	r1, #20
 800579c:	480b      	ldr	r0, [pc, #44]	; (80057cc <screenRtcSettings+0x484>)
 800579e:	f00e fff7 	bl	8014790 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
 80057a2:	480a      	ldr	r0, [pc, #40]	; (80057cc <screenRtcSettings+0x484>)
 80057a4:	f00e fa21 	bl	8013bea <u8g2_SendBuffer>
			HAL_Delay(1500);
 80057a8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80057ac:	f002 fd58 	bl	8008260 <HAL_Delay>
		}
		return screenRtcSettings();
 80057b0:	f7ff fdca 	bl	8005348 <screenRtcSettings>
 80057b4:	e004      	b.n	80057c0 <screenRtcSettings+0x478>
		break;
	// default handle
	default:
		isEnterTriggered = 1;
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <screenRtcSettings+0x4b0>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
		return screenInterface();
 80057bc:	f000 f81e 	bl	80057fc <screenInterface>
	}




}
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20003440 	.word	0x20003440
 80057cc:	20000290 	.word	0x20000290
 80057d0:	0802264c 	.word	0x0802264c
 80057d4:	0802265c 	.word	0x0802265c
 80057d8:	08020664 	.word	0x08020664
 80057dc:	200072a3 	.word	0x200072a3
 80057e0:	08022670 	.word	0x08022670
 80057e4:	08022680 	.word	0x08022680
 80057e8:	200072a0 	.word	0x200072a0
 80057ec:	08022690 	.word	0x08022690
 80057f0:	0802269c 	.word	0x0802269c
 80057f4:	080226a8 	.word	0x080226a8
 80057f8:	20000315 	.word	0x20000315

080057fc <screenInterface>:
 *		[888] *Go to Device settings menu
 *		[999] *Go to main menu
 *
 *
 */
void screenInterface(){
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af02      	add	r7, sp, #8
	//u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf


	//isDownTriggered = 0;
	//isUpTriggered = 0;
	isLeftTriggered = 0;
 8005802:	4b66      	ldr	r3, [pc, #408]	; (800599c <screenInterface+0x1a0>)
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
	isRightTriggered = 0;
 8005808:	4b65      	ldr	r3, [pc, #404]	; (80059a0 <screenInterface+0x1a4>)
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
	isEscTriggered = 0;
 800580e:	4b65      	ldr	r3, [pc, #404]	; (80059a4 <screenInterface+0x1a8>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]

	if(isUpTriggered){
 8005814:	4b64      	ldr	r3, [pc, #400]	; (80059a8 <screenInterface+0x1ac>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00f      	beq.n	800583c <screenInterface+0x40>
		isUpTriggered = 0;
 800581c:	4b62      	ldr	r3, [pc, #392]	; (80059a8 <screenInterface+0x1ac>)
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
		rangeMode++;
 8005822:	4b62      	ldr	r3, [pc, #392]	; (80059ac <screenInterface+0x1b0>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b60      	ldr	r3, [pc, #384]	; (80059ac <screenInterface+0x1b0>)
 800582c:	701a      	strb	r2, [r3, #0]

		if(rangeMode > 4)
 800582e:	4b5f      	ldr	r3, [pc, #380]	; (80059ac <screenInterface+0x1b0>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b04      	cmp	r3, #4
 8005834:	d902      	bls.n	800583c <screenInterface+0x40>
			rangeMode = 0;
 8005836:	4b5d      	ldr	r3, [pc, #372]	; (80059ac <screenInterface+0x1b0>)
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
	}
	if(isDownTriggered){
 800583c:	4b5c      	ldr	r3, [pc, #368]	; (80059b0 <screenInterface+0x1b4>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <screenInterface+0x5a>
		isDownTriggered = 0;
 8005844:	4b5a      	ldr	r3, [pc, #360]	; (80059b0 <screenInterface+0x1b4>)
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
		rangeMode--;
 800584a:	4b58      	ldr	r3, [pc, #352]	; (80059ac <screenInterface+0x1b0>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	b2da      	uxtb	r2, r3
 8005852:	4b56      	ldr	r3, [pc, #344]	; (80059ac <screenInterface+0x1b0>)
 8005854:	701a      	strb	r2, [r3, #0]
		if(rangeMode < 0)
			rangeMode = 4;

	}

	if(isEnterTriggered == 1){
 8005856:	4b57      	ldr	r3, [pc, #348]	; (80059b4 <screenInterface+0x1b8>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b01      	cmp	r3, #1
 800585c:	f040 8098 	bne.w	8005990 <screenInterface+0x194>
		isEnterTriggered = 0;
 8005860:	4b54      	ldr	r3, [pc, #336]	; (80059b4 <screenInterface+0x1b8>)
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
		u8g2_ClearBuffer(&u8g2);
 8005866:	4854      	ldr	r0, [pc, #336]	; (80059b8 <screenInterface+0x1bc>)
 8005868:	f00e f94c 	bl	8013b04 <u8g2_ClearBuffer>


		switch(u8g2_UserInterfaceSelectionList(&u8g2, "MENU", 1, "Device Settings\nMeasuring settings\nStart measuring\nPower source control\nRTC Settings\nBack to InfoPanel")){
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <screenInterface+0x1c0>)
 800586e:	2201      	movs	r2, #1
 8005870:	4953      	ldr	r1, [pc, #332]	; (80059c0 <screenInterface+0x1c4>)
 8005872:	4851      	ldr	r0, [pc, #324]	; (80059b8 <screenInterface+0x1bc>)
 8005874:	f010 f809 	bl	801588a <u8g2_UserInterfaceSelectionList>
 8005878:	4603      	mov	r3, r0
 800587a:	2b05      	cmp	r3, #5
 800587c:	f200 8084 	bhi.w	8005988 <screenInterface+0x18c>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <screenInterface+0x8c>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058a1 	.word	0x080058a1
 800588c:	080058a7 	.word	0x080058a7
 8005890:	080058ad 	.word	0x080058ad
 8005894:	080058b3 	.word	0x080058b3
 8005898:	0800597d 	.word	0x0800597d
 800589c:	08005983 	.word	0x08005983
			// back to info panel
			case 0:
				screenInfoPanel();
 80058a0:	f7ff f856 	bl	8004950 <screenInfoPanel>
				break;
 80058a4:	e076      	b.n	8005994 <screenInterface+0x198>
			// device settings
			case 1:
				screenDeviceSettings();
 80058a6:	f7ff f921 	bl	8004aec <screenDeviceSettings>
				break;
 80058aa:	e073      	b.n	8005994 <screenInterface+0x198>
			// measuring settings
			case 2:
				screenMeasuringSettings();
 80058ac:	f7ff facc 	bl	8004e48 <screenMeasuringSettings>
				break;
 80058b0:	e070      	b.n	8005994 <screenInterface+0x198>
			// Start measuring
			case 3:
				if(u8g2_UserInterfaceMessage(&u8g2, "Start measuring", NULL, NULL, " YES \n NO ") == 1){
 80058b2:	4b44      	ldr	r3, [pc, #272]	; (80059c4 <screenInterface+0x1c8>)
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	2300      	movs	r3, #0
 80058b8:	2200      	movs	r2, #0
 80058ba:	4943      	ldr	r1, [pc, #268]	; (80059c8 <screenInterface+0x1cc>)
 80058bc:	483e      	ldr	r0, [pc, #248]	; (80059b8 <screenInterface+0x1bc>)
 80058be:	f00f fdb0 	bl	8015422 <u8g2_UserInterfaceMessage>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d149      	bne.n	800595c <screenInterface+0x160>
					if (isMeasuring == 0) {
 80058c8:	4b40      	ldr	r3, [pc, #256]	; (80059cc <screenInterface+0x1d0>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d122      	bne.n	8005918 <screenInterface+0x11c>
						//isLoggingToConsole = 1;
						if (settings.isTriggerActive == 0)
 80058d2:	4b3f      	ldr	r3, [pc, #252]	; (80059d0 <screenInterface+0x1d4>)
 80058d4:	7b5b      	ldrb	r3, [r3, #13]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <screenInterface+0xe4>
							isMeasuring = 1;
 80058da:	4b3c      	ldr	r3, [pc, #240]	; (80059cc <screenInterface+0x1d0>)
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 1;
 80058e0:	4b3c      	ldr	r3, [pc, #240]	; (80059d4 <screenInterface+0x1d8>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 0;
 80058e6:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <screenInterface+0x1dc>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]

						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80058ec:	2201      	movs	r2, #1
 80058ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058f2:	483a      	ldr	r0, [pc, #232]	; (80059dc <screenInterface+0x1e0>)
 80058f4:	f003 ffae 	bl	8009854 <HAL_GPIO_WritePin>

						u8g2_ClearDisplay(&u8g2);
 80058f8:	482f      	ldr	r0, [pc, #188]	; (80059b8 <screenInterface+0x1bc>)
 80058fa:	f00e f9e9 	bl	8013cd0 <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 80058fe:	482e      	ldr	r0, [pc, #184]	; (80059b8 <screenInterface+0x1bc>)
 8005900:	f00e f900 	bl	8013b04 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STARTED!");
 8005904:	4b36      	ldr	r3, [pc, #216]	; (80059e0 <screenInterface+0x1e4>)
 8005906:	2223      	movs	r2, #35	; 0x23
 8005908:	2114      	movs	r1, #20
 800590a:	482b      	ldr	r0, [pc, #172]	; (80059b8 <screenInterface+0x1bc>)
 800590c:	f00e ff40 	bl	8014790 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8005910:	4829      	ldr	r0, [pc, #164]	; (80059b8 <screenInterface+0x1bc>)
 8005912:	f00e f96a 	bl	8013bea <u8g2_SendBuffer>
					u8g2_ClearDisplay(&u8g2);
					u8g2_ClearBuffer(&u8g2);
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
					u8g2_SendBuffer(&u8g2);
				}
				break;
 8005916:	e03d      	b.n	8005994 <screenInterface+0x198>
						isMeasuring = 0;
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <screenInterface+0x1d0>)
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
						isTriggered = 0;
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <screenInterface+0x1e8>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
						startOfMeasurement = 0;
 8005924:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <screenInterface+0x1d8>)
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
						endOfMeasurement = 1;
 800592a:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <screenInterface+0x1dc>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005930:	2200      	movs	r2, #0
 8005932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005936:	4829      	ldr	r0, [pc, #164]	; (80059dc <screenInterface+0x1e0>)
 8005938:	f003 ff8c 	bl	8009854 <HAL_GPIO_WritePin>
						u8g2_ClearDisplay(&u8g2);
 800593c:	481e      	ldr	r0, [pc, #120]	; (80059b8 <screenInterface+0x1bc>)
 800593e:	f00e f9c7 	bl	8013cd0 <u8g2_ClearDisplay>
						u8g2_ClearBuffer(&u8g2);
 8005942:	481d      	ldr	r0, [pc, #116]	; (80059b8 <screenInterface+0x1bc>)
 8005944:	f00e f8de 	bl	8013b04 <u8g2_ClearBuffer>
						u8g2_DrawStr(&u8g2, 20, 35, "Measuring STOPPED!");
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <screenInterface+0x1ec>)
 800594a:	2223      	movs	r2, #35	; 0x23
 800594c:	2114      	movs	r1, #20
 800594e:	481a      	ldr	r0, [pc, #104]	; (80059b8 <screenInterface+0x1bc>)
 8005950:	f00e ff1e 	bl	8014790 <u8g2_DrawStr>
						u8g2_SendBuffer(&u8g2);
 8005954:	4818      	ldr	r0, [pc, #96]	; (80059b8 <screenInterface+0x1bc>)
 8005956:	f00e f948 	bl	8013bea <u8g2_SendBuffer>
				break;
 800595a:	e01b      	b.n	8005994 <screenInterface+0x198>
					u8g2_ClearDisplay(&u8g2);
 800595c:	4816      	ldr	r0, [pc, #88]	; (80059b8 <screenInterface+0x1bc>)
 800595e:	f00e f9b7 	bl	8013cd0 <u8g2_ClearDisplay>
					u8g2_ClearBuffer(&u8g2);
 8005962:	4815      	ldr	r0, [pc, #84]	; (80059b8 <screenInterface+0x1bc>)
 8005964:	f00e f8ce 	bl	8013b04 <u8g2_ClearBuffer>
					u8g2_DrawStr(&u8g2,15 , 35, "Start measuring CANCELED!");
 8005968:	4b20      	ldr	r3, [pc, #128]	; (80059ec <screenInterface+0x1f0>)
 800596a:	2223      	movs	r2, #35	; 0x23
 800596c:	210f      	movs	r1, #15
 800596e:	4812      	ldr	r0, [pc, #72]	; (80059b8 <screenInterface+0x1bc>)
 8005970:	f00e ff0e 	bl	8014790 <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
 8005974:	4810      	ldr	r0, [pc, #64]	; (80059b8 <screenInterface+0x1bc>)
 8005976:	f00e f938 	bl	8013bea <u8g2_SendBuffer>
				break;
 800597a:	e00b      	b.n	8005994 <screenInterface+0x198>
			// Power source control
			case 4:
				screenPowerSourceControl();
 800597c:	f7ff fb8e 	bl	800509c <screenPowerSourceControl>
				break;
 8005980:	e008      	b.n	8005994 <screenInterface+0x198>
			// rtc settings
			case 5:
				screenRtcSettings();
 8005982:	f7ff fce1 	bl	8005348 <screenRtcSettings>
				break;
 8005986:	e005      	b.n	8005994 <screenInterface+0x198>
			default:
				screenInfoPanel();
 8005988:	f7fe ffe2 	bl	8004950 <screenInfoPanel>
				break;
 800598c:	bf00      	nop
 800598e:	e001      	b.n	8005994 <screenInterface+0x198>


	}

	else{
		screenInfoPanel();
 8005990:	f7fe ffde 	bl	8004950 <screenInfoPanel>
	}




}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000319 	.word	0x20000319
 80059a0:	2000031a 	.word	0x2000031a
 80059a4:	20000316 	.word	0x20000316
 80059a8:	20000317 	.word	0x20000317
 80059ac:	2000000c 	.word	0x2000000c
 80059b0:	20000318 	.word	0x20000318
 80059b4:	20000315 	.word	0x20000315
 80059b8:	20000290 	.word	0x20000290
 80059bc:	080226b8 	.word	0x080226b8
 80059c0:	08022014 	.word	0x08022014
 80059c4:	08022204 	.word	0x08022204
 80059c8:	08022720 	.word	0x08022720
 80059cc:	20000322 	.word	0x20000322
 80059d0:	20000018 	.word	0x20000018
 80059d4:	20000320 	.word	0x20000320
 80059d8:	20000321 	.word	0x20000321
 80059dc:	40021000 	.word	0x40021000
 80059e0:	08022730 	.word	0x08022730
 80059e4:	20000314 	.word	0x20000314
 80059e8:	08022744 	.word	0x08022744
 80059ec:	08022758 	.word	0x08022758

080059f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059f0:	b590      	push	{r4, r7, lr}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80059f6:	f7fb fed5 	bl	80017a4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80059fa:	f7fb fef3 	bl	80017e4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059fe:	f002 fbc3 	bl	8008188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a02:	f000 fbbb 	bl	800617c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a06:	f000 ffdf 	bl	80069c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005a0a:	f000 ff83 	bl	8006914 <MX_DMA_Init>
  MX_ETH_Init();
 8005a0e:	f000 fc6d 	bl	80062ec <MX_ETH_Init>
  MX_I2C4_Init();
 8005a12:	f000 fceb 	bl	80063ec <MX_I2C4_Init>
  MX_RTC_Init();
 8005a16:	f000 fd29 	bl	800646c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8005a1a:	f000 fd83 	bl	8006524 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8005a1e:	f000 fda1 	bl	8006564 <MX_SPI1_Init>
  MX_SPI4_Init();
 8005a22:	f000 fddd 	bl	80065e0 <MX_SPI4_Init>
  MX_UART7_Init();
 8005a26:	f000 ff11 	bl	800684c <MX_UART7_Init>
  MX_FATFS_Init();
 8005a2a:	f010 ff49 	bl	80168c0 <MX_FATFS_Init>
  MX_TIM4_Init();
 8005a2e:	f000 fe15 	bl	800665c <MX_TIM4_Init>
  MX_TIM5_Init();
 8005a32:	f000 fe61 	bl	80066f8 <MX_TIM5_Init>
  MX_TIM7_Init();
 8005a36:	f000 fead 	bl	8006794 <MX_TIM7_Init>
  MX_TIM14_Init();
 8005a3a:	f000 fee1 	bl	8006800 <MX_TIM14_Init>
  MX_USB_HOST_Init();
 8005a3e:	f018 f817 	bl	801da70 <MX_USB_HOST_Init>
  MX_I2C1_Init();
 8005a42:	f000 fc93 	bl	800636c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8005a46:	f000 ff33 	bl	80068b0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */


  // init 32 bit TIM5 in normal mode for 1 us delay
  HAL_TIM_Base_Start(&htim5);
 8005a4a:	48c4      	ldr	r0, [pc, #784]	; (8005d5c <main+0x36c>)
 8005a4c:	f00b f808 	bl	8010a60 <HAL_TIM_Base_Start>
  // init 16 bit TIM4 in normal mode for 1 us delay
  HAL_TIM_Base_Start(&htim4);
 8005a50:	48c3      	ldr	r0, [pc, #780]	; (8005d60 <main+0x370>)
 8005a52:	f00b f805 	bl	8010a60 <HAL_TIM_Base_Start>

  // init 16 bit TIM14 for timeout interrupt
  HAL_TIM_Base_Start(&htim14);
 8005a56:	48c3      	ldr	r0, [pc, #780]	; (8005d64 <main+0x374>)
 8005a58:	f00b f802 	bl	8010a60 <HAL_TIM_Base_Start>

  // unit indication LED
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a62:	48c1      	ldr	r0, [pc, #772]	; (8005d68 <main+0x378>)
 8005a64:	f003 fef6 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a6e:	48be      	ldr	r0, [pc, #760]	; (8005d68 <main+0x378>)
 8005a70:	f003 fef0 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8005a74:	2200      	movs	r2, #0
 8005a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a7a:	48bc      	ldr	r0, [pc, #752]	; (8005d6c <main+0x37c>)
 8005a7c:	f003 feea 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005a80:	20fa      	movs	r0, #250	; 0xfa
 8005a82:	f002 fbed 	bl	8008260 <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8005a86:	2201      	movs	r2, #1
 8005a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a8c:	48b6      	ldr	r0, [pc, #728]	; (8005d68 <main+0x378>)
 8005a8e:	f003 fee1 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8005a92:	2201      	movs	r2, #1
 8005a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a98:	48b3      	ldr	r0, [pc, #716]	; (8005d68 <main+0x378>)
 8005a9a:	f003 fedb 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005aa4:	48b1      	ldr	r0, [pc, #708]	; (8005d6c <main+0x37c>)
 8005aa6:	f003 fed5 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005aaa:	20fa      	movs	r0, #250	; 0xfa
 8005aac:	f002 fbd8 	bl	8008260 <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ab6:	48ac      	ldr	r0, [pc, #688]	; (8005d68 <main+0x378>)
 8005ab8:	f003 fecc 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ac2:	48a9      	ldr	r0, [pc, #676]	; (8005d68 <main+0x378>)
 8005ac4:	f003 fec6 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ace:	48a7      	ldr	r0, [pc, #668]	; (8005d6c <main+0x37c>)
 8005ad0:	f003 fec0 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005ad4:	20fa      	movs	r0, #250	; 0xfa
 8005ad6:	f002 fbc3 	bl	8008260 <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 8005ada:	2201      	movs	r2, #1
 8005adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ae0:	48a1      	ldr	r0, [pc, #644]	; (8005d68 <main+0x378>)
 8005ae2:	f003 feb7 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005aec:	489e      	ldr	r0, [pc, #632]	; (8005d68 <main+0x378>)
 8005aee:	f003 feb1 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 8005af2:	2201      	movs	r2, #1
 8005af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005af8:	489c      	ldr	r0, [pc, #624]	; (8005d6c <main+0x37c>)
 8005afa:	f003 feab 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8005afe:	20fa      	movs	r0, #250	; 0xfa
 8005b00:	f002 fbae 	bl	8008260 <HAL_Delay>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005b04:	2200      	movs	r2, #0
 8005b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b0a:	4897      	ldr	r0, [pc, #604]	; (8005d68 <main+0x378>)
 8005b0c:	f003 fea2 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8005b10:	2200      	movs	r2, #0
 8005b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b16:	4894      	ldr	r0, [pc, #592]	; (8005d68 <main+0x378>)
 8005b18:	f003 fe9c 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b22:	4892      	ldr	r0, [pc, #584]	; (8005d6c <main+0x37c>)
 8005b24:	f003 fe96 	bl	8009854 <HAL_GPIO_WritePin>

  // default setting for ranges
  // mA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_SET);
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2110      	movs	r1, #16
 8005b2c:	488e      	ldr	r0, [pc, #568]	; (8005d68 <main+0x378>)
 8005b2e:	f003 fe91 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_RESET);
 8005b32:	2200      	movs	r2, #0
 8005b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b38:	488c      	ldr	r0, [pc, #560]	; (8005d6c <main+0x37c>)
 8005b3a:	f003 fe8b 	bl	8009854 <HAL_GPIO_WritePin>

  // uA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 8005b3e:	2201      	movs	r2, #1
 8005b40:	2120      	movs	r1, #32
 8005b42:	4889      	ldr	r0, [pc, #548]	; (8005d68 <main+0x378>)
 8005b44:	f003 fe86 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4886      	ldr	r0, [pc, #536]	; (8005d68 <main+0x378>)
 8005b4e:	f003 fe81 	bl	8009854 <HAL_GPIO_WritePin>

  // nA range ON
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_RESET);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2108      	movs	r1, #8
 8005b56:	4884      	ldr	r0, [pc, #528]	; (8005d68 <main+0x378>)
 8005b58:	f003 fe7c 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_SET);
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	2102      	movs	r1, #2
 8005b60:	4881      	ldr	r0, [pc, #516]	; (8005d68 <main+0x378>)
 8005b62:	f003 fe77 	bl	8009854 <HAL_GPIO_WritePin>

  // GND range ON
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_GND_PORT, RANGE_SELECT_PIN_AS_GND, GPIO_PIN_RESET);
 8005b66:	2200      	movs	r2, #0
 8005b68:	2104      	movs	r1, #4
 8005b6a:	487f      	ldr	r0, [pc, #508]	; (8005d68 <main+0x378>)
 8005b6c:	f003 fe72 	bl	8009854 <HAL_GPIO_WritePin>


  // set adc conv pin to default/low level
  HAL_GPIO_WritePin(ADC_CONV_PORT, ADC_CONV_PIN, GPIO_PIN_RESET);
 8005b70:	2200      	movs	r2, #0
 8005b72:	2120      	movs	r1, #32
 8005b74:	487d      	ldr	r0, [pc, #500]	; (8005d6c <main+0x37c>)
 8005b76:	f003 fe6d 	bl	8009854 <HAL_GPIO_WritePin>

  /***************** set mA range on -- TEST only ********************************/
  currentRange = 2;
 8005b7a:	4b7d      	ldr	r3, [pc, #500]	; (8005d70 <main+0x380>)
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	701a      	strb	r2, [r3, #0]

  // mA range ON
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_MA_PORT, RANGE_SELECT_PIN_AS_MA, GPIO_PIN_RESET);
 8005b80:	2200      	movs	r2, #0
 8005b82:	2110      	movs	r1, #16
 8005b84:	4878      	ldr	r0, [pc, #480]	; (8005d68 <main+0x378>)
 8005b86:	f003 fe65 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_MA_PORT, RANGE_SELECT_PIN_TRANS_MA, GPIO_PIN_SET);
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b90:	4876      	ldr	r0, [pc, #472]	; (8005d6c <main+0x37c>)
 8005b92:	f003 fe5f 	bl	8009854 <HAL_GPIO_WritePin>

  // uA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_UA_PORT, RANGE_SELECT_PIN_AS_UA, GPIO_PIN_SET);
 8005b96:	2201      	movs	r2, #1
 8005b98:	2120      	movs	r1, #32
 8005b9a:	4873      	ldr	r0, [pc, #460]	; (8005d68 <main+0x378>)
 8005b9c:	f003 fe5a 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_UA_PORT, RANGE_SELECT_PIN_TRANS_UA, GPIO_PIN_RESET);
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	4870      	ldr	r0, [pc, #448]	; (8005d68 <main+0x378>)
 8005ba6:	f003 fe55 	bl	8009854 <HAL_GPIO_WritePin>

  // nA range OFF
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_AS_NA_PORT, RANGE_SELECT_PIN_AS_NA, GPIO_PIN_SET);
 8005baa:	2201      	movs	r2, #1
 8005bac:	2108      	movs	r1, #8
 8005bae:	486e      	ldr	r0, [pc, #440]	; (8005d68 <main+0x378>)
 8005bb0:	f003 fe50 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RANGE_SELECT_PIN_TRANS_NA_PORT, RANGE_SELECT_PIN_TRANS_NA, GPIO_PIN_RESET);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2102      	movs	r1, #2
 8005bb8:	486b      	ldr	r0, [pc, #428]	; (8005d68 <main+0x378>)
 8005bba:	f003 fe4b 	bl	8009854 <HAL_GPIO_WritePin>


  // USB OTG Power Enable
  HAL_GPIO_WritePin(USB_OTG_POWER_EN_PORT, USB_OTG_POWER_EN_PIN, GPIO_PIN_SET);
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bc4:	486b      	ldr	r0, [pc, #428]	; (8005d74 <main+0x384>)
 8005bc6:	f003 fe45 	bl	8009854 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005bca:	2001      	movs	r0, #1
 8005bcc:	f002 fb48 	bl	8008260 <HAL_Delay>
  //u8g2_SetPowerSave(&u8g2, 0);
  // SCREEN INIT

  //u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c
  //u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = 256 bytes]  //u8x8_byte_sw_i2c // 180 degree rotation
  u8g2_Setup_st7528_i2c_nhd_c160100_f(&u8g2, U8G2_R2, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay); //[page buffer, size = full page XYZ bytes]  //u8x8_byte_sw_i2c
 8005bd0:	4b69      	ldr	r3, [pc, #420]	; (8005d78 <main+0x388>)
 8005bd2:	4a6a      	ldr	r2, [pc, #424]	; (8005d7c <main+0x38c>)
 8005bd4:	496a      	ldr	r1, [pc, #424]	; (8005d80 <main+0x390>)
 8005bd6:	486b      	ldr	r0, [pc, #428]	; (8005d84 <main+0x394>)
 8005bd8:	f00e f8a0 	bl	8013d1c <u8g2_Setup_st7528_i2c_nhd_c160100_f>
  u8g2_InitDisplay(&u8g2);
 8005bdc:	4869      	ldr	r0, [pc, #420]	; (8005d84 <main+0x394>)
 8005bde:	f010 fca7 	bl	8016530 <u8x8_InitDisplay>

  u8g2_SetPowerSave(&u8g2, 0);
 8005be2:	2100      	movs	r1, #0
 8005be4:	4867      	ldr	r0, [pc, #412]	; (8005d84 <main+0x394>)
 8005be6:	f010 fcb2 	bl	801654e <u8x8_SetPowerSave>
  u8g2_SetFlipMode(&u8g2, 1);
 8005bea:	2101      	movs	r1, #1
 8005bec:	4865      	ldr	r0, [pc, #404]	; (8005d84 <main+0x394>)
 8005bee:	f010 fcbf 	bl	8016570 <u8x8_SetFlipMode>
  u8g2_ClearDisplay(&u8g2);
 8005bf2:	4864      	ldr	r0, [pc, #400]	; (8005d84 <main+0x394>)
 8005bf4:	f00e f86c 	bl	8013cd0 <u8g2_ClearDisplay>
  //u8g2_Clear(&u8g2);
  u8g2_SetFontMode(&u8g2, 0);
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4862      	ldr	r0, [pc, #392]	; (8005d84 <main+0x394>)
 8005bfc:	f00e fd0a 	bl	8014614 <u8g2_SetFontMode>
  u8g2_SetContrast(&u8g2, 80);
 8005c00:	2150      	movs	r1, #80	; 0x50
 8005c02:	4860      	ldr	r0, [pc, #384]	; (8005d84 <main+0x394>)
 8005c04:	f010 fcc5 	bl	8016592 <u8x8_SetContrast>
  u8g2_SetFontDirection(&u8g2, 0);
 8005c08:	2100      	movs	r1, #0
 8005c0a:	485e      	ldr	r0, [pc, #376]	; (8005d84 <main+0x394>)
 8005c0c:	f00e fefa 	bl	8014a04 <u8g2_SetFontDirection>
  u8g2_SetFont(&u8g2, u8g2_font_4x6_tf);		//u8g2_font_4x6_tf		//u8g2_font_6x10_tf
 8005c10:	495d      	ldr	r1, [pc, #372]	; (8005d88 <main+0x398>)
 8005c12:	485c      	ldr	r0, [pc, #368]	; (8005d84 <main+0x394>)
 8005c14:	f00e fe78 	bl	8014908 <u8g2_SetFont>
  u8g2_ClearBuffer(&u8g2);
 8005c18:	485a      	ldr	r0, [pc, #360]	; (8005d84 <main+0x394>)
 8005c1a:	f00d ff73 	bl	8013b04 <u8g2_ClearBuffer>
  //ST7528_Contrast(ST7528_RREG_72, ST7528_BIAS_11, 10);
  //ST7528_Clear();
  //ST7528_SetYDir(SCR_INVERT_OFF);
  //u8g2_DrawStr(&u8g2, 10, 10, "Hello World!");
  //u8g2_DrawLine(&u8g2, 5, 5, 155, 15);
  u8g2_SendBuffer(&u8g2);
 8005c1e:	4859      	ldr	r0, [pc, #356]	; (8005d84 <main+0x394>)
 8005c20:	f00d ffe3 	bl	8013bea <u8g2_SendBuffer>
  u8g2_UpdateDisplay(&u8g2);
 8005c24:	4857      	ldr	r0, [pc, #348]	; (8005d84 <main+0x394>)
 8005c26:	f00e f848 	bl	8013cba <u8g2_UpdateDisplay>
  HAL_Delay(100);
 8005c2a:	2064      	movs	r0, #100	; 0x64
 8005c2c:	f002 fb18 	bl	8008260 <HAL_Delay>
  	LCD_Circle(30, 44, 4, 15);
  	ST7528_Flush();
  	HAL_Delay(500);
*/

  u8g2_DrawStr(&u8g2, 20, 20, "Current logger");
 8005c30:	4b56      	ldr	r3, [pc, #344]	; (8005d8c <main+0x39c>)
 8005c32:	2214      	movs	r2, #20
 8005c34:	2114      	movs	r1, #20
 8005c36:	4853      	ldr	r0, [pc, #332]	; (8005d84 <main+0x394>)
 8005c38:	f00e fdaa 	bl	8014790 <u8g2_DrawStr>
  u8g2_DrawStr(&u8g2, 20, 40, "Firmware version 1.0.0");
 8005c3c:	4b54      	ldr	r3, [pc, #336]	; (8005d90 <main+0x3a0>)
 8005c3e:	2228      	movs	r2, #40	; 0x28
 8005c40:	2114      	movs	r1, #20
 8005c42:	4850      	ldr	r0, [pc, #320]	; (8005d84 <main+0x394>)
 8005c44:	f00e fda4 	bl	8014790 <u8g2_DrawStr>
  u8g2_SendBuffer(&u8g2);
 8005c48:	484e      	ldr	r0, [pc, #312]	; (8005d84 <main+0x394>)
 8005c4a:	f00d ffce 	bl	8013bea <u8g2_SendBuffer>
  u8g2_UpdateDisplay(&u8g2);
 8005c4e:	484d      	ldr	r0, [pc, #308]	; (8005d84 <main+0x394>)
 8005c50:	f00e f833 	bl	8013cba <u8g2_UpdateDisplay>


	HAL_Delay(1000);
 8005c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c58:	f002 fb02 	bl	8008260 <HAL_Delay>

  // init uart ring buffers
  UARTRXInit();
 8005c5c:	f002 f9c0 	bl	8007fe0 <UARTRXInit>
  UARTTXInit();
 8005c60:	f002 f8c6 	bl	8007df0 <UARTTXInit>
  writeEEPROM_AT24();
  HAL_Delay(5);
  send_uart3("EEEPROM - DATA WRITE - DONE\n");
  microDelay(50);
  */
  send_uart3("EEPROM - DATA READ - START\n");
 8005c64:	484b      	ldr	r0, [pc, #300]	; (8005d94 <main+0x3a4>)
 8005c66:	f7fb ff4f 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005c6a:	2032      	movs	r0, #50	; 0x32
 8005c6c:	f7fb ff78 	bl	8001b60 <microDelay>

  readEEPROM_AT24();
 8005c70:	f7fc f9ba 	bl	8001fe8 <readEEPROM_AT24>
  printSettingsValues();
 8005c74:	f7fd fb06 	bl	8003284 <printSettingsValues>

  send_uart3("EEPROM - DATA READ - DONE\n");
 8005c78:	4847      	ldr	r0, [pc, #284]	; (8005d98 <main+0x3a8>)
 8005c7a:	f7fb ff45 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005c7e:	2032      	movs	r0, #50	; 0x32
 8005c80:	f7fb ff6e 	bl	8001b60 <microDelay>


  // config ADC
  // reset pin
  HAL_GPIO_WritePin(ADC_RESET_PORT, ADC_RESET_PIN, GPIO_PIN_SET);
 8005c84:	2201      	movs	r2, #1
 8005c86:	2140      	movs	r1, #64	; 0x40
 8005c88:	4838      	ldr	r0, [pc, #224]	; (8005d6c <main+0x37c>)
 8005c8a:	f003 fde3 	bl	8009854 <HAL_GPIO_WritePin>

  adc_config();
 8005c8e:	f7fc fe85 	bl	800299c <adc_config>

  microDelay(500);
 8005c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c96:	f7fb ff63 	bl	8001b60 <microDelay>

  // measure adc offset
  //adc_compensateOffset();
  microDelay(50);
 8005c9a:	2032      	movs	r0, #50	; 0x32
 8005c9c:	f7fb ff60 	bl	8001b60 <microDelay>
  //u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
  //u8g2_DrawStr(&u8g2, 0, 15, "Hello World!");
  //u8g2_DrawCircle(&u8g2, 64, 40, 10, U8G2_DRAW_ALL);

  // getting time and date for formatting as name of new logged file
  HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	493e      	ldr	r1, [pc, #248]	; (8005d9c <main+0x3ac>)
 8005ca4:	483e      	ldr	r0, [pc, #248]	; (8005da0 <main+0x3b0>)
 8005ca6:	f007 fd7f 	bl	800d7a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 8005caa:	2200      	movs	r2, #0
 8005cac:	493d      	ldr	r1, [pc, #244]	; (8005da4 <main+0x3b4>)
 8005cae:	483c      	ldr	r0, [pc, #240]	; (8005da0 <main+0x3b0>)
 8005cb0:	f007 fe80 	bl	800d9b4 <HAL_RTC_GetDate>
  // file name format "20YYMMDD_HHMM" example "20200120_1022" = 20.1.2020 10:22
  sprintf(uartBufferTx, "\n%2d%02d%02d_%02d%02d.txt\n", 2000 + Date.Year, Date.Month, Date.Date, Time.Hours,Time.Minutes);
 8005cb4:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <main+0x3b4>)
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8005cbc:	4b39      	ldr	r3, [pc, #228]	; (8005da4 <main+0x3b4>)
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	461c      	mov	r4, r3
 8005cc2:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <main+0x3b4>)
 8005cc4:	789b      	ldrb	r3, [r3, #2]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4b34      	ldr	r3, [pc, #208]	; (8005d9c <main+0x3ac>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	4b33      	ldr	r3, [pc, #204]	; (8005d9c <main+0x3ac>)
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	9001      	str	r0, [sp, #4]
 8005cd6:	9100      	str	r1, [sp, #0]
 8005cd8:	4623      	mov	r3, r4
 8005cda:	4933      	ldr	r1, [pc, #204]	; (8005da8 <main+0x3b8>)
 8005cdc:	4833      	ldr	r0, [pc, #204]	; (8005dac <main+0x3bc>)
 8005cde:	f018 ff3b 	bl	801eb58 <siprintf>

  send_uart3(uartBufferTx);
 8005ce2:	4832      	ldr	r0, [pc, #200]	; (8005dac <main+0x3bc>)
 8005ce4:	f7fb ff10 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005ce8:	2032      	movs	r0, #50	; 0x32
 8005cea:	f7fb ff39 	bl	8001b60 <microDelay>
  //HAL_RTC_SetTime(&hrtc, &Time, FORMAT_BCD);
  //HAL_RTC_SetDate(&hrtc, &Date, FORMAT_BCD);


  send_uart3("Power source - Init - START\n");
 8005cee:	4830      	ldr	r0, [pc, #192]	; (8005db0 <main+0x3c0>)
 8005cf0:	f7fb ff0a 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005cf4:	2032      	movs	r0, #50	; 0x32
 8005cf6:	f7fb ff33 	bl	8001b60 <microDelay>

  setPotenciomenters();
 8005cfa:	f7fc fabd 	bl	8002278 <setPotenciomenters>

  readPotenciometers();
 8005cfe:	f7fc fba5 	bl	800244c <readPotenciometers>

  if( (settings.powerSourceEnableMode == 0 & settings.powerSourceEnable == 1 ) | settings.powerSourceEnableMode == 2 ){
 8005d02:	4b2c      	ldr	r3, [pc, #176]	; (8005db4 <main+0x3c4>)
 8005d04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <main+0x3c4>)
 8005d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	4013      	ands	r3, r2
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <main+0x3c4>)
 8005d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d03e      	beq.n	8005dbc <main+0x3cc>
	  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_SET);
 8005d3e:	2201      	movs	r2, #1
 8005d40:	2110      	movs	r1, #16
 8005d42:	480c      	ldr	r0, [pc, #48]	; (8005d74 <main+0x384>)
 8005d44:	f003 fd86 	bl	8009854 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, SET);
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d4e:	4807      	ldr	r0, [pc, #28]	; (8005d6c <main+0x37c>)
 8005d50:	f003 fd80 	bl	8009854 <HAL_GPIO_WritePin>
	  send_uart3("Power Source: ENABLED\n");
 8005d54:	4818      	ldr	r0, [pc, #96]	; (8005db8 <main+0x3c8>)
 8005d56:	f7fb fed7 	bl	8001b08 <send_uart3>
 8005d5a:	e03d      	b.n	8005dd8 <main+0x3e8>
 8005d5c:	20011f98 	.word	0x20011f98
 8005d60:	20011f58 	.word	0x20011f58
 8005d64:	2000dd18 	.word	0x2000dd18
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	40020400 	.word	0x40020400
 8005d70:	20000344 	.word	0x20000344
 8005d74:	40020000 	.word	0x40020000
 8005d78:	08004569 	.word	0x08004569
 8005d7c:	080046f9 	.word	0x080046f9
 8005d80:	08022f68 	.word	0x08022f68
 8005d84:	20000290 	.word	0x20000290
 8005d88:	080229a0 	.word	0x080229a0
 8005d8c:	08022774 	.word	0x08022774
 8005d90:	08022784 	.word	0x08022784
 8005d94:	0802279c 	.word	0x0802279c
 8005d98:	080227b8 	.word	0x080227b8
 8005d9c:	20008c44 	.word	0x20008c44
 8005da0:	20003440 	.word	0x20003440
 8005da4:	200072a0 	.word	0x200072a0
 8005da8:	080227d4 	.word	0x080227d4
 8005dac:	20011e6c 	.word	0x20011e6c
 8005db0:	080227f0 	.word	0x080227f0
 8005db4:	20000018 	.word	0x20000018
 8005db8:	08022810 	.word	0x08022810
  }
  else{
	  HAL_GPIO_WritePin(PS_EN_PORT, PS_EN_PIN, GPIO_PIN_RESET);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2110      	movs	r1, #16
 8005dc0:	48a7      	ldr	r0, [pc, #668]	; (8006060 <main+0x670>)
 8005dc2:	f003 fd47 	bl	8009854 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, RESET);
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dcc:	48a5      	ldr	r0, [pc, #660]	; (8006064 <main+0x674>)
 8005dce:	f003 fd41 	bl	8009854 <HAL_GPIO_WritePin>
	  send_uart3("Power Source: DISABLED\n");
 8005dd2:	48a5      	ldr	r0, [pc, #660]	; (8006068 <main+0x678>)
 8005dd4:	f7fb fe98 	bl	8001b08 <send_uart3>
	  HAL_Delay(1000);

  }
*/

  send_uart3("Power source - Init - DONE\n");
 8005dd8:	48a4      	ldr	r0, [pc, #656]	; (800606c <main+0x67c>)
 8005dda:	f7fb fe95 	bl	8001b08 <send_uart3>
  microDelay(50);
 8005dde:	2032      	movs	r0, #50	; 0x32
 8005de0:	f7fb febe 	bl	8001b60 <microDelay>

  //sd_card_test();

  send_uart3("Memory devices - Init - START\n");
 8005de4:	48a2      	ldr	r0, [pc, #648]	; (8006070 <main+0x680>)
 8005de6:	f7fb fe8f 	bl	8001b08 <send_uart3>


  Mount_SD("/");
 8005dea:	48a2      	ldr	r0, [pc, #648]	; (8006074 <main+0x684>)
 8005dec:	f7fa fe0a 	bl	8000a04 <Mount_SD>
  Format_SD();
 8005df0:	f7fa fe4e 	bl	8000a90 <Format_SD>
  Create_File("FILE1.TXT");
 8005df4:	48a0      	ldr	r0, [pc, #640]	; (8006078 <main+0x688>)
 8005df6:	f7fa ff63 	bl	8000cc0 <Create_File>
  Write_File("FILE1.TXT", "test123");
 8005dfa:	49a0      	ldr	r1, [pc, #640]	; (800607c <main+0x68c>)
 8005dfc:	489e      	ldr	r0, [pc, #632]	; (8006078 <main+0x688>)
 8005dfe:	f7fa fead 	bl	8000b5c <Write_File>
  Create_File("FILE2.TXT");
 8005e02:	489f      	ldr	r0, [pc, #636]	; (8006080 <main+0x690>)
 8005e04:	f7fa ff5c 	bl	8000cc0 <Create_File>
  Unmount_SD("/");
 8005e08:	489a      	ldr	r0, [pc, #616]	; (8006074 <main+0x684>)
 8005e0a:	f7fa fe1f 	bl	8000a4c <Unmount_SD>
  send_uart3("FS DONE\n");
 8005e0e:	489d      	ldr	r0, [pc, #628]	; (8006084 <main+0x694>)
 8005e10:	f7fb fe7a 	bl	8001b08 <send_uart3>
  */

  // SD Card


  send_uart3("Memory devices - Init - DONE\n");
 8005e14:	489c      	ldr	r0, [pc, #624]	; (8006088 <main+0x698>)
 8005e16:	f7fb fe77 	bl	8001b08 <send_uart3>

  send_uart3("\nINITDONE\n");
 8005e1a:	489c      	ldr	r0, [pc, #624]	; (800608c <main+0x69c>)
 8005e1c:	f7fb fe74 	bl	8001b08 <send_uart3>
  send_uart2("\nINITDONE\n");
 8005e20:	489a      	ldr	r0, [pc, #616]	; (800608c <main+0x69c>)
 8005e22:	f7fb fe5f 	bl	8001ae4 <send_uart2>
  microDelay(50);
 8005e26:	2032      	movs	r0, #50	; 0x32
 8005e28:	f7fb fe9a 	bl	8001b60 <microDelay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // cycle measurement
	  	  	if ( ( TIM5->CNT - previousMeasuringTime ) >=  settings.measuringInterval) {
 8005e2c:	4b98      	ldr	r3, [pc, #608]	; (8006090 <main+0x6a0>)
 8005e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e30:	4b98      	ldr	r3, [pc, #608]	; (8006094 <main+0x6a4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	1ad2      	subs	r2, r2, r3
 8005e36:	4b98      	ldr	r3, [pc, #608]	; (8006098 <main+0x6a8>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d318      	bcc.n	8005e70 <main+0x480>
	  	  		timeWindowMeasuring = ( TIM5->CNT - previousMeasuringTime );
 8005e3e:	4b94      	ldr	r3, [pc, #592]	; (8006090 <main+0x6a0>)
 8005e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e42:	4b94      	ldr	r3, [pc, #592]	; (8006094 <main+0x6a4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	4a94      	ldr	r2, [pc, #592]	; (800609c <main+0x6ac>)
 8005e4a:	6013      	str	r3, [r2, #0]
	  		//if ( ( __HAL_TIM_GET_COUNTER(&htim5) - previousMeasuringTime ) >=  settings.measuringInterval) {
	  			//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  			//timeWindowMeasuring = ( __HAL_TIM_GET_COUNTER(&htim5) - previousMeasuringTime );
	  			previousMeasuringTime += timeWindowMeasuring;
 8005e4c:	4b91      	ldr	r3, [pc, #580]	; (8006094 <main+0x6a4>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b92      	ldr	r3, [pc, #584]	; (800609c <main+0x6ac>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4413      	add	r3, r2
 8005e56:	4a8f      	ldr	r2, [pc, #572]	; (8006094 <main+0x6a4>)
 8005e58:	6013      	str	r3, [r2, #0]

	  			// External ADC convertor - 18b
	  			//adc_sample();
	  			adc_sample_ads8691();
 8005e5a:	f7fc ff39 	bl	8002cd0 <adc_sample_ads8691>


	  			//microDelay(20);

	  			// calculate and change measuring range accordingly
	  			ranges();
 8005e5e:	f7fd f803 	bl	8002e68 <ranges>

	  			triggerMenu();
 8005e62:	f7fd f991 	bl	8003188 <triggerMenu>
	  			}
	  			*/

	  			//HAL_ADC_Start_IT (&hadc1);

	  			cycleNumber++;
 8005e66:	4b8e      	ldr	r3, [pc, #568]	; (80060a0 <main+0x6b0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	4a8c      	ldr	r2, [pc, #560]	; (80060a0 <main+0x6b0>)
 8005e6e:	6013      	str	r3, [r2, #0]


	  		}

	  		// cycle sample storing
	  	    if ( ( ( TIM5->CNT - previousSamplingTime) >=  (settings.samplingInterval - SAMPLING_TOLERANCE) )  && isMeasuring == 1 && isReadyForNext == 1) {
 8005e70:	4b87      	ldr	r3, [pc, #540]	; (8006090 <main+0x6a0>)
 8005e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e74:	4b8b      	ldr	r3, [pc, #556]	; (80060a4 <main+0x6b4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	4b87      	ldr	r3, [pc, #540]	; (8006098 <main+0x6a8>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	3b0a      	subs	r3, #10
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d372      	bcc.n	8005f6a <main+0x57a>
 8005e84:	4b88      	ldr	r3, [pc, #544]	; (80060a8 <main+0x6b8>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d16d      	bne.n	8005f6a <main+0x57a>
 8005e8e:	4b87      	ldr	r3, [pc, #540]	; (80060ac <main+0x6bc>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d169      	bne.n	8005f6a <main+0x57a>
	  	    	timeWindowSampling = ( TIM5->CNT - previousSamplingTime );
 8005e96:	4b7e      	ldr	r3, [pc, #504]	; (8006090 <main+0x6a0>)
 8005e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e9a:	4b82      	ldr	r3, [pc, #520]	; (80060a4 <main+0x6b4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	4a83      	ldr	r2, [pc, #524]	; (80060b0 <main+0x6c0>)
 8005ea2:	6013      	str	r3, [r2, #0]
	  		//if ( ( (__HAL_TIM_GET_COUNTER(&htim5) - previousSamplingTime) >=  (settings.samplingInterval - SAMPLING_TOLERANCE) )  && isMeasuring == 1 && isReadyForNext == 1) {
	  			//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  			//timeWindowSampling = ( __HAL_TIM_GET_COUNTER(&htim5) - previousSamplingTime );
	  			previousSamplingTime += timeWindowSampling;
 8005ea4:	4b7f      	ldr	r3, [pc, #508]	; (80060a4 <main+0x6b4>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b81      	ldr	r3, [pc, #516]	; (80060b0 <main+0x6c0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	4a7d      	ldr	r2, [pc, #500]	; (80060a4 <main+0x6b4>)
 8005eb0:	6013      	str	r3, [r2, #0]

	  			measuringNumber++;
 8005eb2:	4b80      	ldr	r3, [pc, #512]	; (80060b4 <main+0x6c4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	4a7e      	ldr	r2, [pc, #504]	; (80060b4 <main+0x6c4>)
 8005eba:	6013      	str	r3, [r2, #0]

	  			if(startOfMeasurement == 1){
 8005ebc:	4b7e      	ldr	r3, [pc, #504]	; (80060b8 <main+0x6c8>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d123      	bne.n	8005f0c <main+0x51c>

	  				// getting time and date for formatting as name of new logged file
	  				//HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BCD);
	  				//HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BCD);
	  				HAL_RTC_GetTime(&hrtc, &Time, FORMAT_BIN);
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	497d      	ldr	r1, [pc, #500]	; (80060bc <main+0x6cc>)
 8005ec8:	487d      	ldr	r0, [pc, #500]	; (80060c0 <main+0x6d0>)
 8005eca:	f007 fc6d 	bl	800d7a8 <HAL_RTC_GetTime>
	  				HAL_RTC_GetDate(&hrtc, &Date, FORMAT_BIN);
 8005ece:	2200      	movs	r2, #0
 8005ed0:	497c      	ldr	r1, [pc, #496]	; (80060c4 <main+0x6d4>)
 8005ed2:	487b      	ldr	r0, [pc, #492]	; (80060c0 <main+0x6d0>)
 8005ed4:	f007 fd6e 	bl	800d9b4 <HAL_RTC_GetDate>

	  				// file name format "20YYMMDD_HHMM" example "20200120_1022"
	  				sprintf(loggingFileName, "\n20%2d%2d%2d_%2d%2d.txt\n\n", Date.Year, Date.Month, Date.Date, Time.Hours,Time.Minutes);
 8005ed8:	4b7a      	ldr	r3, [pc, #488]	; (80060c4 <main+0x6d4>)
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	4618      	mov	r0, r3
 8005ede:	4b79      	ldr	r3, [pc, #484]	; (80060c4 <main+0x6d4>)
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	461c      	mov	r4, r3
 8005ee4:	4b77      	ldr	r3, [pc, #476]	; (80060c4 <main+0x6d4>)
 8005ee6:	789b      	ldrb	r3, [r3, #2]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b74      	ldr	r3, [pc, #464]	; (80060bc <main+0x6cc>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4b72      	ldr	r3, [pc, #456]	; (80060bc <main+0x6cc>)
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	9302      	str	r3, [sp, #8]
 8005ef6:	9101      	str	r1, [sp, #4]
 8005ef8:	9200      	str	r2, [sp, #0]
 8005efa:	4623      	mov	r3, r4
 8005efc:	4602      	mov	r2, r0
 8005efe:	4972      	ldr	r1, [pc, #456]	; (80060c8 <main+0x6d8>)
 8005f00:	4872      	ldr	r0, [pc, #456]	; (80060cc <main+0x6dc>)
 8005f02:	f018 fe29 	bl	801eb58 <siprintf>
	  				measuringNumber = 0;
 8005f06:	4b6b      	ldr	r3, [pc, #428]	; (80060b4 <main+0x6c4>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
	  			//bufclear();
	  			//sprintf(uartBufferTx, "%d %d %6.10f %6.12f\n", measuringNumber, currentRange, measuredValue, measuredValueCurrent);
	  			//uartBufferTxJumbo += uartBufferTx;
	  			//sprintf(uartBufferTx, "%d %d %6.16f\n", measuringNumber, currentRange, measuredValue);
	  			//sprintf(uartBufferTx, "%d %.12f\n", measuringNumber, measuredValueCurrent);
	  			sprintf(uartBufferTx, "%d %.12f\n", measuringNumber, averaging());
 8005f0c:	4b69      	ldr	r3, [pc, #420]	; (80060b4 <main+0x6c4>)
 8005f0e:	681c      	ldr	r4, [r3, #0]
 8005f10:	f7fd f8e6 	bl	80030e0 <averaging>
 8005f14:	eeb0 7b40 	vmov.f64	d7, d0
 8005f18:	ed8d 7b00 	vstr	d7, [sp]
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	496c      	ldr	r1, [pc, #432]	; (80060d0 <main+0x6e0>)
 8005f20:	486c      	ldr	r0, [pc, #432]	; (80060d4 <main+0x6e4>)
 8005f22:	f018 fe19 	bl	801eb58 <siprintf>
	  			//sprintf(uartBufferTx, "%d %d %6.16f\n", measuringNumber, previousValuesRange[(currentValuePosition + SAMPLES - 1)%SAMPLES], previousValues[(currentValuePosition + SAMPLES - 1)%SAMPLES]);
	  			//sprintf(uartBufferTx, "%d %.12f\n", measuringNumber, measuredValueCurrent);

	  			if(settings.isLoggingToConsole == 1){
 8005f26:	4b5c      	ldr	r3, [pc, #368]	; (8006098 <main+0x6a8>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10f      	bne.n	8005f4e <main+0x55e>

	  				isReadyForNext = 0;
 8005f2e:	4b5f      	ldr	r3, [pc, #380]	; (80060ac <main+0x6bc>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]

	  				if(startOfMeasurement == 1){
 8005f34:	4b60      	ldr	r3, [pc, #384]	; (80060b8 <main+0x6c8>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d105      	bne.n	8005f48 <main+0x558>
	  					send_uart3(loggingFileName);
 8005f3c:	4863      	ldr	r0, [pc, #396]	; (80060cc <main+0x6dc>)
 8005f3e:	f7fb fde3 	bl	8001b08 <send_uart3>
	  					send_uart3("\n\n\n");
 8005f42:	4865      	ldr	r0, [pc, #404]	; (80060d8 <main+0x6e8>)
 8005f44:	f7fb fde0 	bl	8001b08 <send_uart3>
	  				}

	  				send_uart3(uartBufferTx);
 8005f48:	4862      	ldr	r0, [pc, #392]	; (80060d4 <main+0x6e4>)
 8005f4a:	f7fb fddd 	bl	8001b08 <send_uart3>

	  			}

	  			if(settings.isLoggingToSD == 1){
 8005f4e:	4b52      	ldr	r3, [pc, #328]	; (8006098 <main+0x6a8>)
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d102      	bne.n	8005f5c <main+0x56c>

	  				saveToSD(uartBufferTx);
 8005f56:	485f      	ldr	r0, [pc, #380]	; (80060d4 <main+0x6e4>)
 8005f58:	f7fc fafc 	bl	8002554 <saveToSD>
	  			if(settings.isLoggingToEthernet == 1){

	  				// empty
	  			}

	  			if(startOfMeasurement == 1)
 8005f5c:	4b56      	ldr	r3, [pc, #344]	; (80060b8 <main+0x6c8>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d102      	bne.n	8005f6a <main+0x57a>
	  				startOfMeasurement = 0;
 8005f64:	4b54      	ldr	r3, [pc, #336]	; (80060b8 <main+0x6c8>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
	  		//sprintf(uartBufferTx, "Time between measuring voltage: %d\n", timeWindowMeasuring);
	  		//sprintf(uartBufferTx, "MT: %d ST: %d\n", timeWindowMeasuring, timeWindowSampling);
	  		//send_uart2(uartBufferTx);
	  		//send_uart3(uartBufferTx);

	  		if(endOfMeasurement == 1 && settings.isLoggingToSD == 1){
 8005f6a:	4b5c      	ldr	r3, [pc, #368]	; (80060dc <main+0x6ec>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d113      	bne.n	8005f9a <main+0x5aa>
 8005f72:	4b49      	ldr	r3, [pc, #292]	; (8006098 <main+0x6a8>)
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d10f      	bne.n	8005f9a <main+0x5aa>

	  			/* Unmount SDCARD */

	  			fresult = f_mount(NULL, "", 1);
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4958      	ldr	r1, [pc, #352]	; (80060e0 <main+0x6f0>)
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f016 fad6 	bl	801c530 <f_mount>
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	4b56      	ldr	r3, [pc, #344]	; (80060e4 <main+0x6f4>)
 8005f8a:	701a      	strb	r2, [r3, #0]
	  			if (fresult == FR_OK) {
 8005f8c:	4b55      	ldr	r3, [pc, #340]	; (80060e4 <main+0x6f4>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <main+0x5aa>
	  				#ifdef DEBUG
	  					send_uart3("SD CARD UNMOUNTED successfully...\n");
 8005f94:	4854      	ldr	r0, [pc, #336]	; (80060e8 <main+0x6f8>)
 8005f96:	f7fb fdb7 	bl	8001b08 <send_uart3>


	  		}


	  		if ( ( ( TIM5->CNT - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 1) {
 8005f9a:	4b3d      	ldr	r3, [pc, #244]	; (8006090 <main+0x6a0>)
 8005f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f9e:	4b53      	ldr	r3, [pc, #332]	; (80060ec <main+0x6fc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	1ad2      	subs	r2, r2, r3
 8005fa4:	4b52      	ldr	r3, [pc, #328]	; (80060f0 <main+0x700>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d325      	bcc.n	8005ff8 <main+0x608>
 8005fac:	4b3e      	ldr	r3, [pc, #248]	; (80060a8 <main+0x6b8>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d120      	bne.n	8005ff8 <main+0x608>
	  		//if ( ( (__HAL_TIM_GET_COUNTER(&htim5) - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 1) {


	  			// timeout or no data handler
	  			if(getConsoleInput(inputData, 1, 0) != 99){
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2101      	movs	r1, #1
 8005fba:	484e      	ldr	r0, [pc, #312]	; (80060f4 <main+0x704>)
 8005fbc:	f7fd fa38 	bl	8003430 <getConsoleInput>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b63      	cmp	r3, #99	; 0x63
 8005fc4:	d014      	beq.n	8005ff0 <main+0x600>
	  				send_uart3("\nEND MEASURING\n");
 8005fc6:	484c      	ldr	r0, [pc, #304]	; (80060f8 <main+0x708>)
 8005fc8:	f7fb fd9e 	bl	8001b08 <send_uart3>
	  				isMeasuring = 0;
 8005fcc:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <main+0x6b8>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]
	  				isTriggered = 0;
 8005fd2:	4b4a      	ldr	r3, [pc, #296]	; (80060fc <main+0x70c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
	  				startOfMeasurement = 0;
 8005fd8:	4b37      	ldr	r3, [pc, #220]	; (80060b8 <main+0x6c8>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
	  				endOfMeasurement = 1;
 8005fde:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <main+0x6ec>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
	  				HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fea:	4845      	ldr	r0, [pc, #276]	; (8006100 <main+0x710>)
 8005fec:	f003 fc32 	bl	8009854 <HAL_GPIO_WritePin>

	  			}

	  			previousConsoleInteraction = TIM5->CNT;
 8005ff0:	4b27      	ldr	r3, [pc, #156]	; (8006090 <main+0x6a0>)
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	4a3d      	ldr	r2, [pc, #244]	; (80060ec <main+0x6fc>)
 8005ff6:	6013      	str	r3, [r2, #0]
	  			//previousConsoleInteraction = __HAL_TIM_GET_COUNTER(&htim5);

	  		}

	  		// cycle user interfaces
	  		if ( ( ( TIM5->CNT - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 0) {
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <main+0x6a0>)
 8005ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ffc:	4b3b      	ldr	r3, [pc, #236]	; (80060ec <main+0x6fc>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	1ad2      	subs	r2, r2, r3
 8006002:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <main+0x700>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d30d      	bcc.n	8006026 <main+0x636>
 800600a:	4b27      	ldr	r3, [pc, #156]	; (80060a8 <main+0x6b8>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d108      	bne.n	8006026 <main+0x636>
	  		//if ( ( (__HAL_TIM_GET_COUNTER(&htim5) - previousConsoleInteraction) >=  consoleInteractionInterval  )  && isMeasuring == 0) {

	  			screenInterface();
 8006014:	f7ff fbf2 	bl	80057fc <screenInterface>

	  			consoleInterface(0);
 8006018:	2000      	movs	r0, #0
 800601a:	f7fe f9ab 	bl	8004374 <consoleInterface>

	  			previousConsoleInteraction = TIM5->CNT;
 800601e:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <main+0x6a0>)
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	4a32      	ldr	r2, [pc, #200]	; (80060ec <main+0x6fc>)
 8006024:	6013      	str	r3, [r2, #0]

	  		}

	  		// constrol print of sampling and measuring cycle times in us

	  		if(cycleNumber%10 == 1){
 8006026:	4b1e      	ldr	r3, [pc, #120]	; (80060a0 <main+0x6b0>)
 8006028:	6819      	ldr	r1, [r3, #0]
 800602a:	4b36      	ldr	r3, [pc, #216]	; (8006104 <main+0x714>)
 800602c:	fba3 2301 	umull	r2, r3, r3, r1
 8006030:	08da      	lsrs	r2, r3, #3
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	1aca      	subs	r2, r1, r3
 800603c:	2a01      	cmp	r2, #1
 800603e:	d10a      	bne.n	8006056 <main+0x666>
	  			sprintf(uartBufferTx, "MT:%d_ST:%d\n", timeWindowMeasuring, timeWindowSampling);
 8006040:	4b16      	ldr	r3, [pc, #88]	; (800609c <main+0x6ac>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b1a      	ldr	r3, [pc, #104]	; (80060b0 <main+0x6c0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	492f      	ldr	r1, [pc, #188]	; (8006108 <main+0x718>)
 800604a:	4822      	ldr	r0, [pc, #136]	; (80060d4 <main+0x6e4>)
 800604c:	f018 fd84 	bl	801eb58 <siprintf>
	  			//send_uart2(uartBufferTx);
	  			//send_uart(uartBufferTx);
	  			send_uart2(uartBufferTx);
 8006050:	4820      	ldr	r0, [pc, #128]	; (80060d4 <main+0x6e4>)
 8006052:	f7fb fd47 	bl	8001ae4 <send_uart2>
	  		}

	  		//i2c_tests();

	  		if (isMeasuring == 1) {
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <main+0x6b8>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	e056      	b.n	800610c <main+0x71c>
 800605e:	bf00      	nop
 8006060:	40020000 	.word	0x40020000
 8006064:	40020400 	.word	0x40020400
 8006068:	08022828 	.word	0x08022828
 800606c:	08022840 	.word	0x08022840
 8006070:	0802285c 	.word	0x0802285c
 8006074:	0802287c 	.word	0x0802287c
 8006078:	08022880 	.word	0x08022880
 800607c:	0802288c 	.word	0x0802288c
 8006080:	08022894 	.word	0x08022894
 8006084:	080228a0 	.word	0x080228a0
 8006088:	080228ac 	.word	0x080228ac
 800608c:	080228cc 	.word	0x080228cc
 8006090:	40000c00 	.word	0x40000c00
 8006094:	20000338 	.word	0x20000338
 8006098:	20000018 	.word	0x20000018
 800609c:	20000324 	.word	0x20000324
 80060a0:	20000330 	.word	0x20000330
 80060a4:	2000033c 	.word	0x2000033c
 80060a8:	20000322 	.word	0x20000322
 80060ac:	20000002 	.word	0x20000002
 80060b0:	20000328 	.word	0x20000328
 80060b4:	2000032c 	.word	0x2000032c
 80060b8:	20000320 	.word	0x20000320
 80060bc:	20008c44 	.word	0x20008c44
 80060c0:	20003440 	.word	0x20003440
 80060c4:	200072a0 	.word	0x200072a0
 80060c8:	080228d8 	.word	0x080228d8
 80060cc:	20005794 	.word	0x20005794
 80060d0:	080228f4 	.word	0x080228f4
 80060d4:	20011e6c 	.word	0x20011e6c
 80060d8:	08022900 	.word	0x08022900
 80060dc:	20000321 	.word	0x20000321
 80060e0:	08020664 	.word	0x08020664
 80060e4:	20001e50 	.word	0x20001e50
 80060e8:	080207ac 	.word	0x080207ac
 80060ec:	20000340 	.word	0x20000340
 80060f0:	20000008 	.word	0x20000008
 80060f4:	20008c38 	.word	0x20008c38
 80060f8:	08022904 	.word	0x08022904
 80060fc:	20000314 	.word	0x20000314
 8006100:	40021000 	.word	0x40021000
 8006104:	cccccccd 	.word	0xcccccccd
 8006108:	08022914 	.word	0x08022914
 800610c:	2b01      	cmp	r3, #1
 800610e:	d110      	bne.n	8006132 <main+0x742>

	  			if (( TIM5->CNT - previousBlinkTime) >= 150000) {
 8006110:	4b14      	ldr	r3, [pc, #80]	; (8006164 <main+0x774>)
 8006112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006114:	4b14      	ldr	r3, [pc, #80]	; (8006168 <main+0x778>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	4a14      	ldr	r2, [pc, #80]	; (800616c <main+0x77c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d908      	bls.n	8006132 <main+0x742>
	  			//if (( __HAL_TIM_GET_COUNTER(&htim5) - previousBlinkTime) >= 150000) {
	  				//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  				previousBlinkTime = TIM5->CNT;
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <main+0x774>)
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	4a10      	ldr	r2, [pc, #64]	; (8006168 <main+0x778>)
 8006126:	6013      	str	r3, [r2, #0]
	  				//previousBlinkTime = __HAL_TIM_GET_COUNTER(&htim5);
	  				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8006128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800612c:	4810      	ldr	r0, [pc, #64]	; (8006170 <main+0x780>)
 800612e:	f003 fbaa 	bl	8009886 <HAL_GPIO_TogglePin>

	  			}
	  		}
	  		if (isMeasuring == 0) {
 8006132:	4b10      	ldr	r3, [pc, #64]	; (8006174 <main+0x784>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d110      	bne.n	800615e <main+0x76e>

	  				if (( TIM5->CNT - previousBlinkTime) >= 500000) {
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <main+0x774>)
 800613e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006140:	4b09      	ldr	r3, [pc, #36]	; (8006168 <main+0x778>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	4a0c      	ldr	r2, [pc, #48]	; (8006178 <main+0x788>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d908      	bls.n	800615e <main+0x76e>
	  				//if (( __HAL_TIM_GET_COUNTER(&htim5) - previousBlinkTime) >= 500000) {
	  					//__HAL_TIM_SET_COUNTER(&htim4, 0);
	  					previousBlinkTime = TIM5->CNT;
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <main+0x774>)
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	4a05      	ldr	r2, [pc, #20]	; (8006168 <main+0x778>)
 8006152:	6013      	str	r3, [r2, #0]
	  					//previousBlinkTime = __HAL_TIM_GET_COUNTER(&htim5);
	  					HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8006154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006158:	4805      	ldr	r0, [pc, #20]	; (8006170 <main+0x780>)
 800615a:	f003 fb94 	bl	8009886 <HAL_GPIO_TogglePin>
	  		}



    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800615e:	f017 fcad 	bl	801dabc <MX_USB_HOST_Process>
	  	  	if ( ( TIM5->CNT - previousMeasuringTime ) >=  settings.measuringInterval) {
 8006162:	e663      	b.n	8005e2c <main+0x43c>
 8006164:	40000c00 	.word	0x40000c00
 8006168:	20000334 	.word	0x20000334
 800616c:	000249ef 	.word	0x000249ef
 8006170:	40021000 	.word	0x40021000
 8006174:	20000322 	.word	0x20000322
 8006178:	0007a11f 	.word	0x0007a11f

0800617c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b0b8      	sub	sp, #224	; 0xe0
 8006180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006182:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006186:	2234      	movs	r2, #52	; 0x34
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f017 ffe9 	bl	801e162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006190:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	605a      	str	r2, [r3, #4]
 800619a:	609a      	str	r2, [r3, #8]
 800619c:	60da      	str	r2, [r3, #12]
 800619e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80061a0:	f107 0308 	add.w	r3, r7, #8
 80061a4:	2290      	movs	r2, #144	; 0x90
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f017 ffda 	bl	801e162 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80061ae:	f006 f857 	bl	800c260 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 80061b2:	4b4b      	ldr	r3, [pc, #300]	; (80062e0 <SystemClock_Config+0x164>)
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	f023 0318 	bic.w	r3, r3, #24
 80061ba:	4a49      	ldr	r2, [pc, #292]	; (80062e0 <SystemClock_Config+0x164>)
 80061bc:	f043 0310 	orr.w	r3, r3, #16
 80061c0:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80061c2:	4b47      	ldr	r3, [pc, #284]	; (80062e0 <SystemClock_Config+0x164>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	4a46      	ldr	r2, [pc, #280]	; (80062e0 <SystemClock_Config+0x164>)
 80061c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061cc:	6413      	str	r3, [r2, #64]	; 0x40
 80061ce:	4b44      	ldr	r3, [pc, #272]	; (80062e0 <SystemClock_Config+0x164>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d6:	607b      	str	r3, [r7, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061da:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <SystemClock_Config+0x168>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a41      	ldr	r2, [pc, #260]	; (80062e4 <SystemClock_Config+0x168>)
 80061e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	4b3f      	ldr	r3, [pc, #252]	; (80062e4 <SystemClock_Config+0x168>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80061f2:	2307      	movs	r3, #7
 80061f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80061f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006200:	2301      	movs	r3, #1
 8006202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006206:	2301      	movs	r3, #1
 8006208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800620c:	2310      	movs	r3, #16
 800620e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006212:	2302      	movs	r3, #2
 8006214:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006218:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800621c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 10;
 8006220:	230a      	movs	r3, #10
 8006222:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006226:	23d8      	movs	r3, #216	; 0xd8
 8006228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800622c:	2302      	movs	r3, #2
 800622e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006232:	2309      	movs	r3, #9
 8006234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006238:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800623c:	4618      	mov	r0, r3
 800623e:	f006 f86f 	bl	800c320 <HAL_RCC_OscConfig>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8006248:	f000 fd5e 	bl	8006d08 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800624c:	f006 f818 	bl	800c280 <HAL_PWREx_EnableOverDrive>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8006256:	f000 fd57 	bl	8006d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800625a:	230f      	movs	r3, #15
 800625c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006260:	2302      	movs	r3, #2
 8006262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006266:	2300      	movs	r3, #0
 8006268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800626c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800627c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006280:	2107      	movs	r1, #7
 8006282:	4618      	mov	r0, r3
 8006284:	f006 fafa 	bl	800c87c <HAL_RCC_ClockConfig>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800628e:	f000 fd3b 	bl	8006d08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 8006292:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <SystemClock_Config+0x16c>)
 8006294:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800629a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800629c:	2300      	movs	r3, #0
 800629e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80062a0:	2300      	movs	r3, #0
 80062a2:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80062a4:	2300      	movs	r3, #0
 80062a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80062a8:	2300      	movs	r3, #0
 80062aa:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062b8:	f107 0308 	add.w	r3, r7, #8
 80062bc:	4618      	mov	r0, r3
 80062be:	f006 fd13 	bl	800cce8 <HAL_RCCEx_PeriphCLKConfig>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <SystemClock_Config+0x150>
  {
    Error_Handler();
 80062c8:	f000 fd1e 	bl	8006d08 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80062cc:	2200      	movs	r2, #0
 80062ce:	2100      	movs	r1, #0
 80062d0:	2000      	movs	r0, #0
 80062d2:	f006 fbbf 	bl	800ca54 <HAL_RCC_MCOConfig>
}
 80062d6:	bf00      	nop
 80062d8:	37e0      	adds	r7, #224	; 0xe0
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40023800 	.word	0x40023800
 80062e4:	40007000 	.word	0x40007000
 80062e8:	00a25820 	.word	0x00a25820

080062ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80062f0:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <MX_ETH_Init+0x78>)
 80062f2:	4a1d      	ldr	r2, [pc, #116]	; (8006368 <MX_ETH_Init+0x7c>)
 80062f4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80062f6:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <MX_ETH_Init+0x78>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <MX_ETH_Init+0x78>)
 80062fe:	2201      	movs	r2, #1
 8006300:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8006302:	4b18      	ldr	r3, [pc, #96]	; (8006364 <MX_ETH_Init+0x78>)
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <MX_ETH_Init+0x78>)
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	3301      	adds	r3, #1
 8006310:	2280      	movs	r2, #128	; 0x80
 8006312:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8006314:	4b13      	ldr	r3, [pc, #76]	; (8006364 <MX_ETH_Init+0x78>)
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	3302      	adds	r3, #2
 800631a:	22e1      	movs	r2, #225	; 0xe1
 800631c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <MX_ETH_Init+0x78>)
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	3303      	adds	r3, #3
 8006324:	2200      	movs	r2, #0
 8006326:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <MX_ETH_Init+0x78>)
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	3304      	adds	r3, #4
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <MX_ETH_Init+0x78>)
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	3305      	adds	r3, #5
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <MX_ETH_Init+0x78>)
 800633e:	2200      	movs	r2, #0
 8006340:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <MX_ETH_Init+0x78>)
 8006344:	2200      	movs	r2, #0
 8006346:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006348:	4b06      	ldr	r3, [pc, #24]	; (8006364 <MX_ETH_Init+0x78>)
 800634a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800634e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8006350:	4804      	ldr	r0, [pc, #16]	; (8006364 <MX_ETH_Init+0x78>)
 8006352:	f002 fc51 	bl	8008bf8 <HAL_ETH_Init>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 800635c:	f000 fcd4 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8006360:	bf00      	nop
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20007258 	.word	0x20007258
 8006368:	40028000 	.word	0x40028000

0800636c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006370:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <MX_I2C1_Init+0x78>)
 8006374:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8006376:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006378:	4a1b      	ldr	r2, [pc, #108]	; (80063e8 <MX_I2C1_Init+0x7c>)
 800637a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800637c:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <MX_I2C1_Init+0x74>)
 800637e:	2200      	movs	r2, #0
 8006380:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006382:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006384:	2201      	movs	r2, #1
 8006386:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <MX_I2C1_Init+0x74>)
 800638a:	2200      	movs	r2, #0
 800638c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800638e:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006390:	2200      	movs	r2, #0
 8006392:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <MX_I2C1_Init+0x74>)
 8006396:	2200      	movs	r2, #0
 8006398:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <MX_I2C1_Init+0x74>)
 800639c:	2200      	movs	r2, #0
 800639e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063a0:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <MX_I2C1_Init+0x74>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063a6:	480e      	ldr	r0, [pc, #56]	; (80063e0 <MX_I2C1_Init+0x74>)
 80063a8:	f004 ff92 	bl	800b2d0 <HAL_I2C_Init>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80063b2:	f000 fca9 	bl	8006d08 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80063b6:	2100      	movs	r1, #0
 80063b8:	4809      	ldr	r0, [pc, #36]	; (80063e0 <MX_I2C1_Init+0x74>)
 80063ba:	f005 feb9 	bl	800c130 <HAL_I2CEx_ConfigAnalogFilter>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80063c4:	f000 fca0 	bl	8006d08 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80063c8:	2100      	movs	r1, #0
 80063ca:	4805      	ldr	r0, [pc, #20]	; (80063e0 <MX_I2C1_Init+0x74>)
 80063cc:	f005 fefb 	bl	800c1c6 <HAL_I2CEx_ConfigDigitalFilter>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80063d6:	f000 fc97 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80063da:	bf00      	nop
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	200074bc 	.word	0x200074bc
 80063e4:	40005400 	.word	0x40005400
 80063e8:	6000030d 	.word	0x6000030d

080063ec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <MX_I2C4_Init+0x74>)
 80063f2:	4a1c      	ldr	r2, [pc, #112]	; (8006464 <MX_I2C4_Init+0x78>)
 80063f4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x6000030D;
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <MX_I2C4_Init+0x74>)
 80063f8:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <MX_I2C4_Init+0x7c>)
 80063fa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80063fc:	4b18      	ldr	r3, [pc, #96]	; (8006460 <MX_I2C4_Init+0x74>)
 80063fe:	2200      	movs	r2, #0
 8006400:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006402:	4b17      	ldr	r3, [pc, #92]	; (8006460 <MX_I2C4_Init+0x74>)
 8006404:	2201      	movs	r2, #1
 8006406:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006408:	4b15      	ldr	r3, [pc, #84]	; (8006460 <MX_I2C4_Init+0x74>)
 800640a:	2200      	movs	r2, #0
 800640c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800640e:	4b14      	ldr	r3, [pc, #80]	; (8006460 <MX_I2C4_Init+0x74>)
 8006410:	2200      	movs	r2, #0
 8006412:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006414:	4b12      	ldr	r3, [pc, #72]	; (8006460 <MX_I2C4_Init+0x74>)
 8006416:	2200      	movs	r2, #0
 8006418:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800641a:	4b11      	ldr	r3, [pc, #68]	; (8006460 <MX_I2C4_Init+0x74>)
 800641c:	2200      	movs	r2, #0
 800641e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <MX_I2C4_Init+0x74>)
 8006422:	2200      	movs	r2, #0
 8006424:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8006426:	480e      	ldr	r0, [pc, #56]	; (8006460 <MX_I2C4_Init+0x74>)
 8006428:	f004 ff52 	bl	800b2d0 <HAL_I2C_Init>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8006432:	f000 fc69 	bl	8006d08 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006436:	2100      	movs	r1, #0
 8006438:	4809      	ldr	r0, [pc, #36]	; (8006460 <MX_I2C4_Init+0x74>)
 800643a:	f005 fe79 	bl	800c130 <HAL_I2CEx_ConfigAnalogFilter>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8006444:	f000 fc60 	bl	8006d08 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8006448:	2100      	movs	r1, #0
 800644a:	4805      	ldr	r0, [pc, #20]	; (8006460 <MX_I2C4_Init+0x74>)
 800644c:	f005 febb 	bl	800c1c6 <HAL_I2CEx_ConfigDigitalFilter>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8006456:	f000 fc57 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20007568 	.word	0x20007568
 8006464:	40006000 	.word	0x40006000
 8006468:	6000030d 	.word	0x6000030d

0800646c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	609a      	str	r2, [r3, #8]
 800647e:	60da      	str	r2, [r3, #12]
 8006480:	611a      	str	r2, [r3, #16]
 8006482:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8006484:	2300      	movs	r3, #0
 8006486:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8006488:	4b24      	ldr	r3, [pc, #144]	; (800651c <MX_RTC_Init+0xb0>)
 800648a:	4a25      	ldr	r2, [pc, #148]	; (8006520 <MX_RTC_Init+0xb4>)
 800648c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800648e:	4b23      	ldr	r3, [pc, #140]	; (800651c <MX_RTC_Init+0xb0>)
 8006490:	2200      	movs	r2, #0
 8006492:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006494:	4b21      	ldr	r3, [pc, #132]	; (800651c <MX_RTC_Init+0xb0>)
 8006496:	227f      	movs	r2, #127	; 0x7f
 8006498:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800649a:	4b20      	ldr	r3, [pc, #128]	; (800651c <MX_RTC_Init+0xb0>)
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80064a0:	4b1e      	ldr	r3, [pc, #120]	; (800651c <MX_RTC_Init+0xb0>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80064a6:	4b1d      	ldr	r3, [pc, #116]	; (800651c <MX_RTC_Init+0xb0>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80064ac:	4b1b      	ldr	r3, [pc, #108]	; (800651c <MX_RTC_Init+0xb0>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80064b2:	481a      	ldr	r0, [pc, #104]	; (800651c <MX_RTC_Init+0xb0>)
 80064b4:	f007 f83e 	bl	800d534 <HAL_RTC_Init>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80064be:	f000 fc23 	bl	8006d08 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x12;
 80064c2:	2312      	movs	r3, #18
 80064c4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x32;
 80064c6:	2332      	movs	r3, #50	; 0x32
 80064c8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80064d6:	f107 0308 	add.w	r3, r7, #8
 80064da:	2201      	movs	r2, #1
 80064dc:	4619      	mov	r1, r3
 80064de:	480f      	ldr	r0, [pc, #60]	; (800651c <MX_RTC_Init+0xb0>)
 80064e0:	f007 f8a4 	bl	800d62c <HAL_RTC_SetTime>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80064ea:	f000 fc0d 	bl	8006d08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80064ee:	2301      	movs	r3, #1
 80064f0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80064f2:	2302      	movs	r3, #2
 80064f4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x8;
 80064f6:	2308      	movs	r3, #8
 80064f8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x14;
 80064fa:	2314      	movs	r3, #20
 80064fc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	2201      	movs	r2, #1
 8006502:	4619      	mov	r1, r3
 8006504:	4805      	ldr	r0, [pc, #20]	; (800651c <MX_RTC_Init+0xb0>)
 8006506:	f007 f9ad 	bl	800d864 <HAL_RTC_SetDate>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8006510:	f000 fbfa 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006514:	bf00      	nop
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20003440 	.word	0x20003440
 8006520:	40002800 	.word	0x40002800

08006524 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 800652a:	4a0d      	ldr	r2, [pc, #52]	; (8006560 <MX_SDMMC1_SD_Init+0x3c>)
 800652c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 8006530:	2200      	movs	r2, #0
 8006532:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8006534:	4b09      	ldr	r3, [pc, #36]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 800653c:	2200      	movs	r2, #0
 800653e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8006540:	4b06      	ldr	r3, [pc, #24]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 8006542:	2200      	movs	r2, #0
 8006544:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 8006548:	2200      	movs	r2, #0
 800654a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 800654c:	4b03      	ldr	r3, [pc, #12]	; (800655c <MX_SDMMC1_SD_Init+0x38>)
 800654e:	2204      	movs	r2, #4
 8006550:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8006552:	bf00      	nop
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	20002fbc 	.word	0x20002fbc
 8006560:	40012c00 	.word	0x40012c00

08006564 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006568:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <MX_SPI1_Init+0x74>)
 800656a:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <MX_SPI1_Init+0x78>)
 800656c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800656e:	4b1a      	ldr	r3, [pc, #104]	; (80065d8 <MX_SPI1_Init+0x74>)
 8006570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <MX_SPI1_Init+0x74>)
 8006578:	2200      	movs	r2, #0
 800657a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800657c:	4b16      	ldr	r3, [pc, #88]	; (80065d8 <MX_SPI1_Init+0x74>)
 800657e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006582:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006584:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <MX_SPI1_Init+0x74>)
 8006586:	2200      	movs	r2, #0
 8006588:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800658a:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <MX_SPI1_Init+0x74>)
 800658c:	2200      	movs	r2, #0
 800658e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <MX_SPI1_Init+0x74>)
 8006592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006596:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <MX_SPI1_Init+0x74>)
 800659a:	2200      	movs	r2, #0
 800659c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80065b0:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065b2:	2207      	movs	r2, #7
 80065b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80065b6:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065be:	2208      	movs	r2, #8
 80065c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80065c2:	4805      	ldr	r0, [pc, #20]	; (80065d8 <MX_SPI1_Init+0x74>)
 80065c4:	f008 ff04 	bl	800f3d0 <HAL_SPI_Init>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80065ce:	f000 fb9b 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80065d2:	bf00      	nop
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	200057b8 	.word	0x200057b8
 80065dc:	40013000 	.word	0x40013000

080065e0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <MX_SPI4_Init+0x74>)
 80065e6:	4a1c      	ldr	r2, [pc, #112]	; (8006658 <MX_SPI4_Init+0x78>)
 80065e8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <MX_SPI4_Init+0x74>)
 80065ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065f0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80065f2:	4b18      	ldr	r3, [pc, #96]	; (8006654 <MX_SPI4_Init+0x74>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80065f8:	4b16      	ldr	r3, [pc, #88]	; (8006654 <MX_SPI4_Init+0x74>)
 80065fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80065fe:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <MX_SPI4_Init+0x74>)
 8006602:	2200      	movs	r2, #0
 8006604:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006606:	4b13      	ldr	r3, [pc, #76]	; (8006654 <MX_SPI4_Init+0x74>)
 8006608:	2200      	movs	r2, #0
 800660a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800660c:	4b11      	ldr	r3, [pc, #68]	; (8006654 <MX_SPI4_Init+0x74>)
 800660e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006612:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <MX_SPI4_Init+0x74>)
 8006616:	2200      	movs	r2, #0
 8006618:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800661a:	4b0e      	ldr	r3, [pc, #56]	; (8006654 <MX_SPI4_Init+0x74>)
 800661c:	2200      	movs	r2, #0
 800661e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <MX_SPI4_Init+0x74>)
 8006622:	2200      	movs	r2, #0
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006626:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <MX_SPI4_Init+0x74>)
 8006628:	2200      	movs	r2, #0
 800662a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <MX_SPI4_Init+0x74>)
 800662e:	2207      	movs	r2, #7
 8006630:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006632:	4b08      	ldr	r3, [pc, #32]	; (8006654 <MX_SPI4_Init+0x74>)
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006638:	4b06      	ldr	r3, [pc, #24]	; (8006654 <MX_SPI4_Init+0x74>)
 800663a:	2208      	movs	r2, #8
 800663c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800663e:	4805      	ldr	r0, [pc, #20]	; (8006654 <MX_SPI4_Init+0x74>)
 8006640:	f008 fec6 	bl	800f3d0 <HAL_SPI_Init>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800664a:	f000 fb5d 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800664e:	bf00      	nop
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	200059bc 	.word	0x200059bc
 8006658:	40013400 	.word	0x40013400

0800665c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006662:	f107 0310 	add.w	r3, r7, #16
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	605a      	str	r2, [r3, #4]
 8006678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800667a:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <MX_TIM4_Init+0x94>)
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <MX_TIM4_Init+0x98>)
 800667e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108;
 8006680:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <MX_TIM4_Init+0x94>)
 8006682:	226c      	movs	r2, #108	; 0x6c
 8006684:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006686:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <MX_TIM4_Init+0x94>)
 8006688:	2200      	movs	r2, #0
 800668a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 800668c:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <MX_TIM4_Init+0x94>)
 800668e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006692:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006694:	4b16      	ldr	r3, [pc, #88]	; (80066f0 <MX_TIM4_Init+0x94>)
 8006696:	2200      	movs	r2, #0
 8006698:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800669a:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <MX_TIM4_Init+0x94>)
 800669c:	2200      	movs	r2, #0
 800669e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80066a0:	4813      	ldr	r0, [pc, #76]	; (80066f0 <MX_TIM4_Init+0x94>)
 80066a2:	f00a f9b2 	bl	8010a0a <HAL_TIM_Base_Init>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80066ac:	f000 fb2c 	bl	8006d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80066b6:	f107 0310 	add.w	r3, r7, #16
 80066ba:	4619      	mov	r1, r3
 80066bc:	480c      	ldr	r0, [pc, #48]	; (80066f0 <MX_TIM4_Init+0x94>)
 80066be:	f00a f9f9 	bl	8010ab4 <HAL_TIM_ConfigClockSource>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80066c8:	f000 fb1e 	bl	8006d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066cc:	2300      	movs	r3, #0
 80066ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80066d4:	1d3b      	adds	r3, r7, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	4805      	ldr	r0, [pc, #20]	; (80066f0 <MX_TIM4_Init+0x94>)
 80066da:	f00a fbdf 	bl	8010e9c <HAL_TIMEx_MasterConfigSynchronization>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80066e4:	f000 fb10 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80066e8:	bf00      	nop
 80066ea:	3720      	adds	r7, #32
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20011f58 	.word	0x20011f58
 80066f4:	40000800 	.word	0x40000800

080066f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066fe:	f107 0310 	add.w	r3, r7, #16
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	605a      	str	r2, [r3, #4]
 8006708:	609a      	str	r2, [r3, #8]
 800670a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800670c:	1d3b      	adds	r3, r7, #4
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006716:	4b1d      	ldr	r3, [pc, #116]	; (800678c <MX_TIM5_Init+0x94>)
 8006718:	4a1d      	ldr	r2, [pc, #116]	; (8006790 <MX_TIM5_Init+0x98>)
 800671a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108;
 800671c:	4b1b      	ldr	r3, [pc, #108]	; (800678c <MX_TIM5_Init+0x94>)
 800671e:	226c      	movs	r2, #108	; 0x6c
 8006720:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006722:	4b1a      	ldr	r3, [pc, #104]	; (800678c <MX_TIM5_Init+0x94>)
 8006724:	2200      	movs	r2, #0
 8006726:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF-1;
 8006728:	4b18      	ldr	r3, [pc, #96]	; (800678c <MX_TIM5_Init+0x94>)
 800672a:	f06f 0201 	mvn.w	r2, #1
 800672e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006730:	4b16      	ldr	r3, [pc, #88]	; (800678c <MX_TIM5_Init+0x94>)
 8006732:	2200      	movs	r2, #0
 8006734:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006736:	4b15      	ldr	r3, [pc, #84]	; (800678c <MX_TIM5_Init+0x94>)
 8006738:	2200      	movs	r2, #0
 800673a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800673c:	4813      	ldr	r0, [pc, #76]	; (800678c <MX_TIM5_Init+0x94>)
 800673e:	f00a f964 	bl	8010a0a <HAL_TIM_Base_Init>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8006748:	f000 fade 	bl	8006d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800674c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006752:	f107 0310 	add.w	r3, r7, #16
 8006756:	4619      	mov	r1, r3
 8006758:	480c      	ldr	r0, [pc, #48]	; (800678c <MX_TIM5_Init+0x94>)
 800675a:	f00a f9ab 	bl	8010ab4 <HAL_TIM_ConfigClockSource>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8006764:	f000 fad0 	bl	8006d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006768:	2300      	movs	r3, #0
 800676a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006770:	1d3b      	adds	r3, r7, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4805      	ldr	r0, [pc, #20]	; (800678c <MX_TIM5_Init+0x94>)
 8006776:	f00a fb91 	bl	8010e9c <HAL_TIMEx_MasterConfigSynchronization>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8006780:	f000 fac2 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006784:	bf00      	nop
 8006786:	3720      	adds	r7, #32
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	20011f98 	.word	0x20011f98
 8006790:	40000c00 	.word	0x40000c00

08006794 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80067a4:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067a6:	4a15      	ldr	r2, [pc, #84]	; (80067fc <MX_TIM7_Init+0x68>)
 80067a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067b0:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067bc:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80067c2:	480d      	ldr	r0, [pc, #52]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067c4:	f00a f921 	bl	8010a0a <HAL_TIM_Base_Init>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80067ce:	f000 fa9b 	bl	8006d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067d2:	2300      	movs	r3, #0
 80067d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80067da:	1d3b      	adds	r3, r7, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4806      	ldr	r0, [pc, #24]	; (80067f8 <MX_TIM7_Init+0x64>)
 80067e0:	f00a fb5c 	bl	8010e9c <HAL_TIMEx_MasterConfigSynchronization>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80067ea:	f000 fa8d 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20012910 	.word	0x20012910
 80067fc:	40001400 	.word	0x40001400

08006800 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006804:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <MX_TIM14_Init+0x44>)
 8006806:	4a10      	ldr	r2, [pc, #64]	; (8006848 <MX_TIM14_Init+0x48>)
 8006808:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 54000;
 800680a:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <MX_TIM14_Init+0x44>)
 800680c:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8006810:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006812:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <MX_TIM14_Init+0x44>)
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0xFFFF-1;
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <MX_TIM14_Init+0x44>)
 800681a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800681e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8006820:	4b08      	ldr	r3, [pc, #32]	; (8006844 <MX_TIM14_Init+0x44>)
 8006822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006826:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <MX_TIM14_Init+0x44>)
 800682a:	2200      	movs	r2, #0
 800682c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <MX_TIM14_Init+0x44>)
 8006830:	f00a f8eb 	bl	8010a0a <HAL_TIM_Base_Init>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <MX_TIM14_Init+0x3e>
  {
    Error_Handler();
 800683a:	f000 fa65 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800683e:	bf00      	nop
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	2000dd18 	.word	0x2000dd18
 8006848:	40002000 	.word	0x40002000

0800684c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006850:	4b14      	ldr	r3, [pc, #80]	; (80068a4 <MX_UART7_Init+0x58>)
 8006852:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <MX_UART7_Init+0x5c>)
 8006854:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 3000000;
 8006856:	4b13      	ldr	r3, [pc, #76]	; (80068a4 <MX_UART7_Init+0x58>)
 8006858:	4a14      	ldr	r2, [pc, #80]	; (80068ac <MX_UART7_Init+0x60>)
 800685a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800685c:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <MX_UART7_Init+0x58>)
 800685e:	2200      	movs	r2, #0
 8006860:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006862:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <MX_UART7_Init+0x58>)
 8006864:	2200      	movs	r2, #0
 8006866:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8006868:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <MX_UART7_Init+0x58>)
 800686a:	2200      	movs	r2, #0
 800686c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <MX_UART7_Init+0x58>)
 8006870:	220c      	movs	r2, #12
 8006872:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <MX_UART7_Init+0x58>)
 8006876:	2200      	movs	r2, #0
 8006878:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_8;
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <MX_UART7_Init+0x58>)
 800687c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006880:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <MX_UART7_Init+0x58>)
 8006884:	2200      	movs	r2, #0
 8006886:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006888:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <MX_UART7_Init+0x58>)
 800688a:	2200      	movs	r2, #0
 800688c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800688e:	4805      	ldr	r0, [pc, #20]	; (80068a4 <MX_UART7_Init+0x58>)
 8006890:	f00a fb92 	bl	8010fb8 <HAL_UART_Init>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800689a:	f000 fa35 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800689e:	bf00      	nop
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20011d68 	.word	0x20011d68
 80068a8:	40007800 	.word	0x40007800
 80068ac:	002dc6c0 	.word	0x002dc6c0

080068b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80068b4:	4b14      	ldr	r3, [pc, #80]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068b6:	4a15      	ldr	r2, [pc, #84]	; (800690c <MX_USART6_UART_Init+0x5c>)
 80068b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 3000000;
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068bc:	4a14      	ldr	r2, [pc, #80]	; (8006910 <MX_USART6_UART_Init+0x60>)
 80068be:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80068c0:	4b11      	ldr	r3, [pc, #68]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80068c6:	4b10      	ldr	r3, [pc, #64]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80068cc:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068d4:	220c      	movs	r2, #12
 80068d6:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068d8:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068da:	2200      	movs	r2, #0
 80068dc:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 80068de:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80068e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068e6:	4b08      	ldr	r3, [pc, #32]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80068f2:	4805      	ldr	r0, [pc, #20]	; (8006908 <MX_USART6_UART_Init+0x58>)
 80068f4:	f00a fb60 	bl	8010fb8 <HAL_UART_Init>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80068fe:	f000 fa03 	bl	8006d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006902:	bf00      	nop
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20011dec 	.word	0x20011dec
 800690c:	40011400 	.word	0x40011400
 8006910:	002dc6c0 	.word	0x002dc6c0

08006914 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800691a:	4b2a      	ldr	r3, [pc, #168]	; (80069c4 <MX_DMA_Init+0xb0>)
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	4a29      	ldr	r2, [pc, #164]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006924:	6313      	str	r3, [r2, #48]	; 0x30
 8006926:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006932:	4b24      	ldr	r3, [pc, #144]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	4a23      	ldr	r2, [pc, #140]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800693c:	6313      	str	r3, [r2, #48]	; 0x30
 800693e:	4b21      	ldr	r3, [pc, #132]	; (80069c4 <MX_DMA_Init+0xb0>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800694a:	2200      	movs	r2, #0
 800694c:	2102      	movs	r1, #2
 800694e:	200c      	movs	r0, #12
 8006950:	f001 fd83 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006954:	200c      	movs	r0, #12
 8006956:	f001 fd9c 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800695a:	2200      	movs	r2, #0
 800695c:	2100      	movs	r1, #0
 800695e:	200e      	movs	r0, #14
 8006960:	f001 fd7b 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8006964:	200e      	movs	r0, #14
 8006966:	f001 fd94 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800696a:	2200      	movs	r2, #0
 800696c:	2102      	movs	r1, #2
 800696e:	2038      	movs	r0, #56	; 0x38
 8006970:	f001 fd73 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006974:	2038      	movs	r0, #56	; 0x38
 8006976:	f001 fd8c 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	2039      	movs	r0, #57	; 0x39
 8006980:	f001 fd6b 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006984:	2039      	movs	r0, #57	; 0x39
 8006986:	f001 fd84 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800698a:	2200      	movs	r2, #0
 800698c:	2100      	movs	r1, #0
 800698e:	203b      	movs	r0, #59	; 0x3b
 8006990:	f001 fd63 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006994:	203b      	movs	r0, #59	; 0x3b
 8006996:	f001 fd7c 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 2, 0);
 800699a:	2200      	movs	r2, #0
 800699c:	2102      	movs	r1, #2
 800699e:	2044      	movs	r0, #68	; 0x44
 80069a0:	f001 fd5b 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80069a4:	2044      	movs	r0, #68	; 0x44
 80069a6:	f001 fd74 	bl	8008492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80069aa:	2200      	movs	r2, #0
 80069ac:	2100      	movs	r1, #0
 80069ae:	2045      	movs	r0, #69	; 0x45
 80069b0:	f001 fd53 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80069b4:	2045      	movs	r0, #69	; 0x45
 80069b6:	f001 fd6c 	bl	8008492 <HAL_NVIC_EnableIRQ>

}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40023800 	.word	0x40023800

080069c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08c      	sub	sp, #48	; 0x30
 80069cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ce:	f107 031c 	add.w	r3, r7, #28
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	605a      	str	r2, [r3, #4]
 80069d8:	609a      	str	r2, [r3, #8]
 80069da:	60da      	str	r2, [r3, #12]
 80069dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80069de:	4bbc      	ldr	r3, [pc, #752]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	4abb      	ldr	r2, [pc, #748]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069e4:	f043 0310 	orr.w	r3, r3, #16
 80069e8:	6313      	str	r3, [r2, #48]	; 0x30
 80069ea:	4bb9      	ldr	r3, [pc, #740]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80069f6:	4bb6      	ldr	r3, [pc, #728]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	4ab5      	ldr	r2, [pc, #724]	; (8006cd0 <MX_GPIO_Init+0x308>)
 80069fc:	f043 0304 	orr.w	r3, r3, #4
 8006a00:	6313      	str	r3, [r2, #48]	; 0x30
 8006a02:	4bb3      	ldr	r3, [pc, #716]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a0e:	4bb0      	ldr	r3, [pc, #704]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	4aaf      	ldr	r2, [pc, #700]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a18:	6313      	str	r3, [r2, #48]	; 0x30
 8006a1a:	4bad      	ldr	r3, [pc, #692]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a26:	4baa      	ldr	r3, [pc, #680]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	4aa9      	ldr	r2, [pc, #676]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6313      	str	r3, [r2, #48]	; 0x30
 8006a32:	4ba7      	ldr	r3, [pc, #668]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a3e:	4ba4      	ldr	r3, [pc, #656]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	4aa3      	ldr	r2, [pc, #652]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a44:	f043 0302 	orr.w	r3, r3, #2
 8006a48:	6313      	str	r3, [r2, #48]	; 0x30
 8006a4a:	4ba1      	ldr	r3, [pc, #644]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	60bb      	str	r3, [r7, #8]
 8006a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a56:	4b9e      	ldr	r3, [pc, #632]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	4a9d      	ldr	r2, [pc, #628]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a5c:	f043 0308 	orr.w	r3, r3, #8
 8006a60:	6313      	str	r3, [r2, #48]	; 0x30
 8006a62:	4b9b      	ldr	r3, [pc, #620]	; (8006cd0 <MX_GPIO_Init+0x308>)
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin, GPIO_PIN_SET);
 8006a6e:	2201      	movs	r2, #1
 8006a70:	213c      	movs	r1, #60	; 0x3c
 8006a72:	4898      	ldr	r0, [pc, #608]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006a74:	f002 feee 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE6_Pin|LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin 
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f648 0143 	movw	r1, #34883	; 0x8843
 8006a7e:	4895      	ldr	r0, [pc, #596]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006a80:	f002 fee8 	bl	8009854 <HAL_GPIO_WritePin>
                          |RANGE_NA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC13_Pin|PC2_Pin|PC3_Pin, GPIO_PIN_RESET);
 8006a84:	2200      	movs	r2, #0
 8006a86:	f242 010c 	movw	r1, #8204	; 0x200c
 8006a8a:	4893      	ldr	r0, [pc, #588]	; (8006cd8 <MX_GPIO_Init+0x310>)
 8006a8c:	f002 fee2 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA0_Pin|PA3_Pin|PS_EN_Pin|USB_OTG_FS_VBUS_Pin 
 8006a90:	2200      	movs	r2, #0
 8006a92:	f248 6119 	movw	r1, #34329	; 0x8619
 8006a96:	4891      	ldr	r0, [pc, #580]	; (8006cdc <MX_GPIO_Init+0x314>)
 8006a98:	f002 fedc 	bl	8009854 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin|PA15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ADC_CONV_Pin|RANGE_MA_Pin, GPIO_PIN_RESET);
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8006aa2:	488f      	ldr	r0, [pc, #572]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006aa4:	f002 fed6 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDMMC1_WP_GPIO_Port, SDMMC1_WP_Pin, GPIO_PIN_RESET);
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2102      	movs	r1, #2
 8006aac:	488d      	ldr	r0, [pc, #564]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006aae:	f002 fed1 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	2140      	movs	r1, #64	; 0x40
 8006ab6:	488b      	ldr	r0, [pc, #556]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006ab8:	f002 fecc 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_RST_GPIO_Port, ADC_RST_Pin, GPIO_PIN_SET);
 8006abc:	2201      	movs	r2, #1
 8006abe:	2140      	movs	r1, #64	; 0x40
 8006ac0:	4887      	ldr	r0, [pc, #540]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006ac2:	f002 fec7 	bl	8009854 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ASW1_Pin ASW4_Pin ASW2_Pin ASW3_Pin 
                           LED_BLUE_Pin LED_GREEN_Pin RANGE_UA_Pin RANGE_NA_Pin */
  GPIO_InitStruct.Pin = ASW1_Pin|ASW4_Pin|ASW2_Pin|ASW3_Pin 
 8006ac6:	f648 033f 	movw	r3, #34879	; 0x883f
 8006aca:	61fb      	str	r3, [r7, #28]
                          |LED_BLUE_Pin|LED_GREEN_Pin|RANGE_UA_Pin|RANGE_NA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006acc:	2301      	movs	r3, #1
 8006ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ad8:	f107 031c 	add.w	r3, r7, #28
 8006adc:	4619      	mov	r1, r3
 8006ade:	487d      	ldr	r0, [pc, #500]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006ae0:	f002 fcf6 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6_Pin */
  GPIO_InitStruct.Pin = PE6_Pin;
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006af0:	2300      	movs	r3, #0
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PE6_GPIO_Port, &GPIO_InitStruct);
 8006af4:	f107 031c 	add.w	r3, r7, #28
 8006af8:	4619      	mov	r1, r3
 8006afa:	4876      	ldr	r0, [pc, #472]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006afc:	f002 fce8 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_Pin PC2_Pin PC3_Pin */
  GPIO_InitStruct.Pin = PC13_Pin|PC2_Pin|PC3_Pin;
 8006b00:	f242 030c 	movw	r3, #8204	; 0x200c
 8006b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b06:	2301      	movs	r3, #1
 8006b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b12:	f107 031c 	add.w	r3, r7, #28
 8006b16:	4619      	mov	r1, r3
 8006b18:	486f      	ldr	r0, [pc, #444]	; (8006cd8 <MX_GPIO_Init+0x310>)
 8006b1a:	f002 fcd9 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0_Pin PA3_Pin USB_OTG_FS_VBUS_Pin LCD_RST_Pin 
                           PA15_Pin */
  GPIO_InitStruct.Pin = PA0_Pin|PA3_Pin|USB_OTG_FS_VBUS_Pin|LCD_RST_Pin 
 8006b1e:	f248 6309 	movw	r3, #34313	; 0x8609
 8006b22:	61fb      	str	r3, [r7, #28]
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b24:	2301      	movs	r3, #1
 8006b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b30:	f107 031c 	add.w	r3, r7, #28
 8006b34:	4619      	mov	r1, r3
 8006b36:	4869      	ldr	r0, [pc, #420]	; (8006cdc <MX_GPIO_Init+0x314>)
 8006b38:	f002 fcca 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS_EN_Pin */
  GPIO_InitStruct.Pin = PS_EN_Pin;
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b40:	2301      	movs	r3, #1
 8006b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PS_EN_GPIO_Port, &GPIO_InitStruct);
 8006b4c:	f107 031c 	add.w	r3, r7, #28
 8006b50:	4619      	mov	r1, r3
 8006b52:	4862      	ldr	r0, [pc, #392]	; (8006cdc <MX_GPIO_Init+0x314>)
 8006b54:	f002 fcbc 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OverCurrent_Pin;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b5c:	4b62      	ldr	r3, [pc, #392]	; (8006ce8 <MX_GPIO_Init+0x320>)
 8006b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8006b64:	f107 031c 	add.w	r3, r7, #28
 8006b68:	4619      	mov	r1, r3
 8006b6a:	485d      	ldr	r0, [pc, #372]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006b6c:	f002 fcb0 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_MEASURING_Pin Extra_GPIO_Pin BUTTON_DOWN_Pin BUTTON_PREV_Pin */
  GPIO_InitStruct.Pin = BUTTON_MEASURING_Pin|Extra_GPIO_Pin|BUTTON_DOWN_Pin|BUTTON_PREV_Pin;
 8006b70:	f24c 0306 	movw	r3, #49158	; 0xc006
 8006b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006b76:	4b5d      	ldr	r3, [pc, #372]	; (8006cec <MX_GPIO_Init+0x324>)
 8006b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b7e:	f107 031c 	add.w	r3, r7, #28
 8006b82:	4619      	mov	r1, r3
 8006b84:	4856      	ldr	r0, [pc, #344]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006b86:	f002 fca3 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8006b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b90:	2302      	movs	r3, #2
 8006b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8006ba0:	f107 031c 	add.w	r3, r7, #28
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	484b      	ldr	r0, [pc, #300]	; (8006cd4 <MX_GPIO_Init+0x30c>)
 8006ba8:	f002 fc92 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin ADC_CONV_Pin ADC_RST_Pin RANGE_MA_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ADC_CONV_Pin|ADC_RST_Pin|RANGE_MA_Pin;
 8006bac:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8006bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bbe:	f107 031c 	add.w	r3, r7, #28
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4846      	ldr	r0, [pc, #280]	; (8006ce0 <MX_GPIO_Init+0x318>)
 8006bc6:	f002 fc83 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_NEXT_Pin BUTTON_UP_Pin BUTTON_ESC_Pin BUTTON_ENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_NEXT_Pin|BUTTON_UP_Pin|BUTTON_ESC_Pin|BUTTON_ENTER_Pin;
 8006bca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006bd0:	4b46      	ldr	r3, [pc, #280]	; (8006cec <MX_GPIO_Init+0x324>)
 8006bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bd8:	f107 031c 	add.w	r3, r7, #28
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4841      	ldr	r0, [pc, #260]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006be0:	f002 fc76 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bea:	2302      	movs	r3, #2
 8006bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bfa:	f107 031c 	add.w	r3, r7, #28
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4836      	ldr	r0, [pc, #216]	; (8006cdc <MX_GPIO_Init+0x314>)
 8006c02:	f002 fc65 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin ADC_RVS_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|ADC_RVS_Pin;
 8006c06:	2321      	movs	r3, #33	; 0x21
 8006c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c12:	f107 031c 	add.w	r3, r7, #28
 8006c16:	4619      	mov	r1, r3
 8006c18:	4832      	ldr	r0, [pc, #200]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006c1a:	f002 fc59 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC1_WP_Pin */
  GPIO_InitStruct.Pin = SDMMC1_WP_Pin;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c22:	2301      	movs	r3, #1
 8006c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c26:	2302      	movs	r3, #2
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SDMMC1_WP_GPIO_Port, &GPIO_InitStruct);
 8006c2e:	f107 031c 	add.w	r3, r7, #28
 8006c32:	4619      	mov	r1, r3
 8006c34:	482b      	ldr	r0, [pc, #172]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006c36:	f002 fc4b 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3_Pin PD4_Pin */
  GPIO_InitStruct.Pin = PD3_Pin|PD4_Pin;
 8006c3a:	2318      	movs	r3, #24
 8006c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006c3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ce8 <MX_GPIO_Init+0x320>)
 8006c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c46:	f107 031c 	add.w	r3, r7, #28
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4825      	ldr	r0, [pc, #148]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006c4e:	f002 fc3f 	bl	80094d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c56:	2301      	movs	r3, #1
 8006c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8006c62:	f107 031c 	add.w	r3, r7, #28
 8006c66:	4619      	mov	r1, r3
 8006c68:	481e      	ldr	r0, [pc, #120]	; (8006ce4 <MX_GPIO_Init+0x31c>)
 8006c6a:	f002 fc31 	bl	80094d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2101      	movs	r1, #1
 8006c72:	2006      	movs	r0, #6
 8006c74:	f001 fbf1 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006c78:	2006      	movs	r0, #6
 8006c7a:	f001 fc0a 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2101      	movs	r1, #1
 8006c82:	2007      	movs	r0, #7
 8006c84:	f001 fbe9 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8006c88:	2007      	movs	r0, #7
 8006c8a:	f001 fc02 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2101      	movs	r1, #1
 8006c92:	2008      	movs	r0, #8
 8006c94:	f001 fbe1 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006c98:	2008      	movs	r0, #8
 8006c9a:	f001 fbfa 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	2009      	movs	r0, #9
 8006ca4:	f001 fbd9 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006ca8:	2009      	movs	r0, #9
 8006caa:	f001 fbf2 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	200a      	movs	r0, #10
 8006cb4:	f001 fbd1 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006cb8:	200a      	movs	r0, #10
 8006cba:	f001 fbea 	bl	8008492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	2017      	movs	r0, #23
 8006cc4:	f001 fbc9 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006cc8:	2017      	movs	r0, #23
 8006cca:	f001 fbe2 	bl	8008492 <HAL_NVIC_EnableIRQ>
 8006cce:	e00f      	b.n	8006cf0 <MX_GPIO_Init+0x328>
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	40020800 	.word	0x40020800
 8006cdc:	40020000 	.word	0x40020000
 8006ce0:	40020400 	.word	0x40020400
 8006ce4:	40020c00 	.word	0x40020c00
 8006ce8:	10110000 	.word	0x10110000
 8006cec:	10210000 	.word	0x10210000

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	2028      	movs	r0, #40	; 0x28
 8006cf6:	f001 fbb0 	bl	800845a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006cfa:	2028      	movs	r0, #40	; 0x28
 8006cfc:	f001 fbc9 	bl	8008492 <HAL_NVIC_EnableIRQ>

}
 8006d00:	bf00      	nop
 8006d02:	3730      	adds	r7, #48	; 0x30
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006d0c:	bf00      	nop
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <ringbuff_init>:
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <ringbuff_init+0x1e>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <ringbuff_init+0x1e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <ringbuff_init+0x22>
 8006d34:	2300      	movs	r3, #0
 8006d36:	e00b      	b.n	8006d50 <ringbuff_init+0x3a>
 8006d38:	2210      	movs	r2, #16
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f017 fa10 	bl	801e162 <memset>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	605a      	str	r2, [r3, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <ringbuff_write>:
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <ringbuff_write+0x2c>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d006      	beq.n	8006d84 <ringbuff_write+0x2c>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <ringbuff_write+0x2c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <ringbuff_write+0x30>
 8006d84:	2300      	movs	r3, #0
 8006d86:	e047      	b.n	8006e18 <ringbuff_write+0xc0>
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f8ad 	bl	8006ee8 <ringbuff_get_free>
 8006d8e:	61b8      	str	r0, [r7, #24]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	4293      	cmp	r3, r2
 8006d96:	bf28      	it	cs
 8006d98:	4613      	movcs	r3, r2
 8006d9a:	607b      	str	r3, [r7, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <ringbuff_write+0x4e>
 8006da2:	2300      	movs	r3, #0
 8006da4:	e038      	b.n	8006e18 <ringbuff_write+0xc0>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bf28      	it	cs
 8006db6:	4613      	movcs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	69f9      	ldr	r1, [r7, #28]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f017 f9bf 	bl	801e14c <memcpy>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	60da      	str	r2, [r3, #12]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	607b      	str	r3, [r7, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <ringbuff_write+0xa8>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	4413      	add	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	4619      	mov	r1, r3
 8006df6:	f017 f9a9 	bl	801e14c <memcpy>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	60da      	str	r2, [r3, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d302      	bcc.n	8006e12 <ringbuff_write+0xba>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	60da      	str	r2, [r3, #12]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4413      	add	r3, r2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <ringbuff_read>:
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <ringbuff_read+0x2c>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d006      	beq.n	8006e4c <ringbuff_read+0x2c>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <ringbuff_read+0x2c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <ringbuff_read+0x30>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e047      	b.n	8006ee0 <ringbuff_read+0xc0>
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f880 	bl	8006f56 <ringbuff_get_full>
 8006e56:	61b8      	str	r0, [r7, #24]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	bf28      	it	cs
 8006e60:	4613      	movcs	r3, r2
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <ringbuff_read+0x4e>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e038      	b.n	8006ee0 <ringbuff_read+0xc0>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	bf28      	it	cs
 8006e7e:	4613      	movcs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	69f8      	ldr	r0, [r7, #28]
 8006e92:	f017 f95b 	bl	801e14c <memcpy>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	609a      	str	r2, [r3, #8]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <ringbuff_read+0xa8>
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	18d0      	adds	r0, r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	f017 f945 	bl	801e14c <memcpy>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d302      	bcc.n	8006eda <ringbuff_read+0xba>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4413      	add	r3, r2
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <ringbuff_get_free>:
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <ringbuff_get_free+0x1e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <ringbuff_get_free+0x1e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <ringbuff_get_free+0x22>
 8006f06:	2300      	movs	r3, #0
 8006f08:	e01f      	b.n	8006f4a <ringbuff_get_free+0x62>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d103      	bne.n	8006f26 <ringbuff_get_free+0x3e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e00f      	b.n	8006f46 <ringbuff_get_free+0x5e>
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d904      	bls.n	8006f38 <ringbuff_get_free+0x50>
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e006      	b.n	8006f46 <ringbuff_get_free+0x5e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	68f9      	ldr	r1, [r7, #12]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1acb      	subs	r3, r1, r3
 8006f42:	4413      	add	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <ringbuff_get_full>:
 8006f56:	b480      	push	{r7}
 8006f58:	b087      	sub	sp, #28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <ringbuff_get_full+0x1e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <ringbuff_get_full+0x1e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <ringbuff_get_full+0x22>
 8006f74:	2300      	movs	r3, #0
 8006f76:	e01d      	b.n	8006fb4 <ringbuff_get_full+0x5e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d102      	bne.n	8006f92 <ringbuff_get_full+0x3c>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e00f      	b.n	8006fb2 <ringbuff_get_full+0x5c>
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d904      	bls.n	8006fa4 <ringbuff_get_full+0x4e>
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	e006      	b.n	8006fb2 <ringbuff_get_full+0x5c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	6939      	ldr	r1, [r7, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1acb      	subs	r3, r1, r3
 8006fae:	4413      	add	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <ringbuff_get_linear_block_read_address>:
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <ringbuff_get_linear_block_read_address+0x1e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <ringbuff_get_linear_block_read_address+0x1e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <ringbuff_get_linear_block_read_address+0x22>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e004      	b.n	8006fec <ringbuff_get_linear_block_read_address+0x2c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	4413      	add	r3, r2
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <ringbuff_get_linear_block_read_length>:
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <ringbuff_get_linear_block_read_length+0x1e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <ringbuff_get_linear_block_read_length+0x1e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <ringbuff_get_linear_block_read_length+0x22>
 8007016:	2300      	movs	r3, #0
 8007018:	e01b      	b.n	8007052 <ringbuff_get_linear_block_read_length+0x5a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	429a      	cmp	r2, r3
 800702c:	d904      	bls.n	8007038 <ringbuff_get_linear_block_read_length+0x40>
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e00b      	b.n	8007050 <ringbuff_get_linear_block_read_length+0x58>
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	429a      	cmp	r2, r3
 800703e:	d905      	bls.n	800704c <ringbuff_get_linear_block_read_length+0x54>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	e001      	b.n	8007050 <ringbuff_get_linear_block_read_length+0x58>
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	4618      	mov	r0, r3
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <ringbuff_skip>:
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <ringbuff_skip+0x26>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <ringbuff_skip+0x26>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <ringbuff_skip+0x26>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <ringbuff_skip+0x2a>
 8007084:	2300      	movs	r3, #0
 8007086:	e01b      	b.n	80070c0 <ringbuff_skip+0x62>
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff ff64 	bl	8006f56 <ringbuff_get_full>
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	428b      	cmp	r3, r1
 800709a:	bf28      	it	cs
 800709c:	460b      	movcs	r3, r1
 800709e:	441a      	add	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	609a      	str	r2, [r3, #8]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d306      	bcc.n	80070be <ringbuff_skip+0x60>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	1ad2      	subs	r2, r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	609a      	str	r2, [r3, #8]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <ringbuff_advance>:
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00a      	beq.n	80070ee <ringbuff_advance+0x26>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <ringbuff_advance+0x26>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <ringbuff_advance+0x26>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <ringbuff_advance+0x2a>
 80070ee:	2300      	movs	r3, #0
 80070f0:	e01b      	b.n	800712a <ringbuff_advance+0x62>
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fef8 	bl	8006ee8 <ringbuff_get_free>
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	428b      	cmp	r3, r1
 8007104:	bf28      	it	cs
 8007106:	460b      	movcs	r3, r1
 8007108:	441a      	add	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d306      	bcc.n	8007128 <ringbuff_advance+0x60>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <HAL_MspInit>:
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <HAL_MspInit+0x44>)
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	4a0e      	ldr	r2, [pc, #56]	; (8007178 <HAL_MspInit+0x44>)
 8007140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007144:	6413      	str	r3, [r2, #64]	; 0x40
 8007146:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <HAL_MspInit+0x44>)
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800714e:	607b      	str	r3, [r7, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_MspInit+0x44>)
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	4a08      	ldr	r2, [pc, #32]	; (8007178 <HAL_MspInit+0x44>)
 8007158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800715c:	6453      	str	r3, [r2, #68]	; 0x44
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <HAL_MspInit+0x44>)
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40023800 	.word	0x40023800

0800717c <HAL_ETH_MspInit>:
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	605a      	str	r2, [r3, #4]
 800718e:	609a      	str	r2, [r3, #8]
 8007190:	60da      	str	r2, [r3, #12]
 8007192:	611a      	str	r2, [r3, #16]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a3f      	ldr	r2, [pc, #252]	; (8007298 <HAL_ETH_MspInit+0x11c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d178      	bne.n	8007290 <HAL_ETH_MspInit+0x114>
 800719e:	4b3f      	ldr	r3, [pc, #252]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	4a3e      	ldr	r2, [pc, #248]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071a8:	6313      	str	r3, [r2, #48]	; 0x30
 80071aa:	4b3c      	ldr	r3, [pc, #240]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b2:	623b      	str	r3, [r7, #32]
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	4b39      	ldr	r3, [pc, #228]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	4a38      	ldr	r2, [pc, #224]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071c0:	6313      	str	r3, [r2, #48]	; 0x30
 80071c2:	4b36      	ldr	r3, [pc, #216]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4b33      	ldr	r3, [pc, #204]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	4a32      	ldr	r2, [pc, #200]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071d8:	6313      	str	r3, [r2, #48]	; 0x30
 80071da:	4b30      	ldr	r3, [pc, #192]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	4b2d      	ldr	r3, [pc, #180]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	4a2c      	ldr	r2, [pc, #176]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071ec:	f043 0304 	orr.w	r3, r3, #4
 80071f0:	6313      	str	r3, [r2, #48]	; 0x30
 80071f2:	4b2a      	ldr	r3, [pc, #168]	; (800729c <HAL_ETH_MspInit+0x120>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	4b27      	ldr	r3, [pc, #156]	; (800729c <HAL_ETH_MspInit+0x120>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	4a26      	ldr	r2, [pc, #152]	; (800729c <HAL_ETH_MspInit+0x120>)
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	6313      	str	r3, [r2, #48]	; 0x30
 800720a:	4b24      	ldr	r3, [pc, #144]	; (800729c <HAL_ETH_MspInit+0x120>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4b21      	ldr	r3, [pc, #132]	; (800729c <HAL_ETH_MspInit+0x120>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	4a20      	ldr	r2, [pc, #128]	; (800729c <HAL_ETH_MspInit+0x120>)
 800721c:	f043 0302 	orr.w	r3, r3, #2
 8007220:	6313      	str	r3, [r2, #48]	; 0x30
 8007222:	4b1e      	ldr	r3, [pc, #120]	; (800729c <HAL_ETH_MspInit+0x120>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2332      	movs	r3, #50	; 0x32
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
 8007232:	2302      	movs	r3, #2
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28
 8007236:	2300      	movs	r3, #0
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800723a:	2303      	movs	r3, #3
 800723c:	633b      	str	r3, [r7, #48]	; 0x30
 800723e:	230b      	movs	r3, #11
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
 8007242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007246:	4619      	mov	r1, r3
 8007248:	4815      	ldr	r0, [pc, #84]	; (80072a0 <HAL_ETH_MspInit+0x124>)
 800724a:	f002 f941 	bl	80094d0 <HAL_GPIO_Init>
 800724e:	2386      	movs	r3, #134	; 0x86
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
 8007252:	2302      	movs	r3, #2
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28
 8007256:	2300      	movs	r3, #0
 8007258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800725a:	2303      	movs	r3, #3
 800725c:	633b      	str	r3, [r7, #48]	; 0x30
 800725e:	230b      	movs	r3, #11
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
 8007262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007266:	4619      	mov	r1, r3
 8007268:	480e      	ldr	r0, [pc, #56]	; (80072a4 <HAL_ETH_MspInit+0x128>)
 800726a:	f002 f931 	bl	80094d0 <HAL_GPIO_Init>
 800726e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
 8007274:	2302      	movs	r3, #2
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
 8007278:	2300      	movs	r3, #0
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800727c:	2303      	movs	r3, #3
 800727e:	633b      	str	r3, [r7, #48]	; 0x30
 8007280:	230b      	movs	r3, #11
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
 8007284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007288:	4619      	mov	r1, r3
 800728a:	4807      	ldr	r0, [pc, #28]	; (80072a8 <HAL_ETH_MspInit+0x12c>)
 800728c:	f002 f920 	bl	80094d0 <HAL_GPIO_Init>
 8007290:	bf00      	nop
 8007292:	3738      	adds	r7, #56	; 0x38
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40028000 	.word	0x40028000
 800729c:	40023800 	.word	0x40023800
 80072a0:	40020800 	.word	0x40020800
 80072a4:	40020000 	.word	0x40020000
 80072a8:	40020400 	.word	0x40020400

080072ac <HAL_I2C_MspInit>:
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08c      	sub	sp, #48	; 0x30
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	f107 031c 	add.w	r3, r7, #28
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	60da      	str	r2, [r3, #12]
 80072c2:	611a      	str	r2, [r3, #16]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a2f      	ldr	r2, [pc, #188]	; (8007388 <HAL_I2C_MspInit+0xdc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d129      	bne.n	8007322 <HAL_I2C_MspInit+0x76>
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <HAL_I2C_MspInit+0xe0>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	4a2e      	ldr	r2, [pc, #184]	; (800738c <HAL_I2C_MspInit+0xe0>)
 80072d4:	f043 0302 	orr.w	r3, r3, #2
 80072d8:	6313      	str	r3, [r2, #48]	; 0x30
 80072da:	4b2c      	ldr	r3, [pc, #176]	; (800738c <HAL_I2C_MspInit+0xe0>)
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	2312      	movs	r3, #18
 80072ee:	623b      	str	r3, [r7, #32]
 80072f0:	2301      	movs	r3, #1
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
 80072f4:	2303      	movs	r3, #3
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f8:	2304      	movs	r3, #4
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fc:	f107 031c 	add.w	r3, r7, #28
 8007300:	4619      	mov	r1, r3
 8007302:	4823      	ldr	r0, [pc, #140]	; (8007390 <HAL_I2C_MspInit+0xe4>)
 8007304:	f002 f8e4 	bl	80094d0 <HAL_GPIO_Init>
 8007308:	4b20      	ldr	r3, [pc, #128]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	4a1f      	ldr	r2, [pc, #124]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800730e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007312:	6413      	str	r3, [r2, #64]	; 0x40
 8007314:	4b1d      	ldr	r3, [pc, #116]	; (800738c <HAL_I2C_MspInit+0xe0>)
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	e02d      	b.n	800737e <HAL_I2C_MspInit+0xd2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1b      	ldr	r2, [pc, #108]	; (8007394 <HAL_I2C_MspInit+0xe8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d128      	bne.n	800737e <HAL_I2C_MspInit+0xd2>
 800732c:	4b17      	ldr	r3, [pc, #92]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	4a16      	ldr	r2, [pc, #88]	; (800738c <HAL_I2C_MspInit+0xe0>)
 8007332:	f043 0308 	orr.w	r3, r3, #8
 8007336:	6313      	str	r3, [r2, #48]	; 0x30
 8007338:	4b14      	ldr	r3, [pc, #80]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	2312      	movs	r3, #18
 800734c:	623b      	str	r3, [r7, #32]
 800734e:	2301      	movs	r3, #1
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
 8007352:	2303      	movs	r3, #3
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
 8007356:	2304      	movs	r3, #4
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800735a:	f107 031c 	add.w	r3, r7, #28
 800735e:	4619      	mov	r1, r3
 8007360:	480d      	ldr	r0, [pc, #52]	; (8007398 <HAL_I2C_MspInit+0xec>)
 8007362:	f002 f8b5 	bl	80094d0 <HAL_GPIO_Init>
 8007366:	4b09      	ldr	r3, [pc, #36]	; (800738c <HAL_I2C_MspInit+0xe0>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	4a08      	ldr	r2, [pc, #32]	; (800738c <HAL_I2C_MspInit+0xe0>)
 800736c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007370:	6413      	str	r3, [r2, #64]	; 0x40
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <HAL_I2C_MspInit+0xe0>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	bf00      	nop
 8007380:	3730      	adds	r7, #48	; 0x30
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40005400 	.word	0x40005400
 800738c:	40023800 	.word	0x40023800
 8007390:	40020400 	.word	0x40020400
 8007394:	40006000 	.word	0x40006000
 8007398:	40020c00 	.word	0x40020c00

0800739c <HAL_RTC_MspInit>:
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a07      	ldr	r2, [pc, #28]	; (80073c8 <HAL_RTC_MspInit+0x2c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d105      	bne.n	80073ba <HAL_RTC_MspInit+0x1e>
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <HAL_RTC_MspInit+0x30>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b2:	4a06      	ldr	r2, [pc, #24]	; (80073cc <HAL_RTC_MspInit+0x30>)
 80073b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b8:	6713      	str	r3, [r2, #112]	; 0x70
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40002800 	.word	0x40002800
 80073cc:	40023800 	.word	0x40023800

080073d0 <HAL_SD_MspInit>:
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	; 0x28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	f107 0314 	add.w	r3, r7, #20
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	609a      	str	r2, [r3, #8]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	611a      	str	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a47      	ldr	r2, [pc, #284]	; (800750c <HAL_SD_MspInit+0x13c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	f040 8088 	bne.w	8007504 <HAL_SD_MspInit+0x134>
 80073f4:	4b46      	ldr	r3, [pc, #280]	; (8007510 <HAL_SD_MspInit+0x140>)
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	4a45      	ldr	r2, [pc, #276]	; (8007510 <HAL_SD_MspInit+0x140>)
 80073fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073fe:	6453      	str	r3, [r2, #68]	; 0x44
 8007400:	4b43      	ldr	r3, [pc, #268]	; (8007510 <HAL_SD_MspInit+0x140>)
 8007402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	4b40      	ldr	r3, [pc, #256]	; (8007510 <HAL_SD_MspInit+0x140>)
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	4a3f      	ldr	r2, [pc, #252]	; (8007510 <HAL_SD_MspInit+0x140>)
 8007412:	f043 0304 	orr.w	r3, r3, #4
 8007416:	6313      	str	r3, [r2, #48]	; 0x30
 8007418:	4b3d      	ldr	r3, [pc, #244]	; (8007510 <HAL_SD_MspInit+0x140>)
 800741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4b3a      	ldr	r3, [pc, #232]	; (8007510 <HAL_SD_MspInit+0x140>)
 8007426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007428:	4a39      	ldr	r2, [pc, #228]	; (8007510 <HAL_SD_MspInit+0x140>)
 800742a:	f043 0308 	orr.w	r3, r3, #8
 800742e:	6313      	str	r3, [r2, #48]	; 0x30
 8007430:	4b37      	ldr	r3, [pc, #220]	; (8007510 <HAL_SD_MspInit+0x140>)
 8007432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007434:	f003 0308 	and.w	r3, r3, #8
 8007438:	60bb      	str	r3, [r7, #8]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	2302      	movs	r3, #2
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]
 800744a:	2303      	movs	r3, #3
 800744c:	623b      	str	r3, [r7, #32]
 800744e:	230c      	movs	r3, #12
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
 8007452:	f107 0314 	add.w	r3, r7, #20
 8007456:	4619      	mov	r1, r3
 8007458:	482e      	ldr	r0, [pc, #184]	; (8007514 <HAL_SD_MspInit+0x144>)
 800745a:	f002 f839 	bl	80094d0 <HAL_GPIO_Init>
 800745e:	2304      	movs	r3, #4
 8007460:	617b      	str	r3, [r7, #20]
 8007462:	2302      	movs	r3, #2
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	2303      	movs	r3, #3
 800746c:	623b      	str	r3, [r7, #32]
 800746e:	230c      	movs	r3, #12
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
 8007472:	f107 0314 	add.w	r3, r7, #20
 8007476:	4619      	mov	r1, r3
 8007478:	4827      	ldr	r0, [pc, #156]	; (8007518 <HAL_SD_MspInit+0x148>)
 800747a:	f002 f829 	bl	80094d0 <HAL_GPIO_Init>
 800747e:	4b27      	ldr	r3, [pc, #156]	; (800751c <HAL_SD_MspInit+0x14c>)
 8007480:	4a27      	ldr	r2, [pc, #156]	; (8007520 <HAL_SD_MspInit+0x150>)
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	4b25      	ldr	r3, [pc, #148]	; (800751c <HAL_SD_MspInit+0x14c>)
 8007486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800748a:	605a      	str	r2, [r3, #4]
 800748c:	4b23      	ldr	r3, [pc, #140]	; (800751c <HAL_SD_MspInit+0x14c>)
 800748e:	2240      	movs	r2, #64	; 0x40
 8007490:	609a      	str	r2, [r3, #8]
 8007492:	4b22      	ldr	r3, [pc, #136]	; (800751c <HAL_SD_MspInit+0x14c>)
 8007494:	2200      	movs	r2, #0
 8007496:	60da      	str	r2, [r3, #12]
 8007498:	4b20      	ldr	r3, [pc, #128]	; (800751c <HAL_SD_MspInit+0x14c>)
 800749a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800749e:	611a      	str	r2, [r3, #16]
 80074a0:	4b1e      	ldr	r3, [pc, #120]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074a6:	615a      	str	r2, [r3, #20]
 80074a8:	4b1c      	ldr	r3, [pc, #112]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074ae:	619a      	str	r2, [r3, #24]
 80074b0:	4b1a      	ldr	r3, [pc, #104]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074b2:	2220      	movs	r2, #32
 80074b4:	61da      	str	r2, [r3, #28]
 80074b6:	4b19      	ldr	r3, [pc, #100]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	621a      	str	r2, [r3, #32]
 80074bc:	4b17      	ldr	r3, [pc, #92]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074be:	2204      	movs	r2, #4
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
 80074c2:	4b16      	ldr	r3, [pc, #88]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074c4:	2203      	movs	r2, #3
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28
 80074c8:	4b14      	ldr	r3, [pc, #80]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80074d0:	4b12      	ldr	r3, [pc, #72]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30
 80074d8:	4810      	ldr	r0, [pc, #64]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074da:	f000 fff5 	bl	80084c8 <HAL_DMA_Init>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_SD_MspInit+0x118>
 80074e4:	f7ff fc10 	bl	8006d08 <Error_Handler>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a0c      	ldr	r2, [pc, #48]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80074ee:	4a0b      	ldr	r2, [pc, #44]	; (800751c <HAL_SD_MspInit+0x14c>)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6393      	str	r3, [r2, #56]	; 0x38
 80074f4:	2200      	movs	r2, #0
 80074f6:	2100      	movs	r1, #0
 80074f8:	2031      	movs	r0, #49	; 0x31
 80074fa:	f000 ffae 	bl	800845a <HAL_NVIC_SetPriority>
 80074fe:	2031      	movs	r0, #49	; 0x31
 8007500:	f000 ffc7 	bl	8008492 <HAL_NVIC_EnableIRQ>
 8007504:	bf00      	nop
 8007506:	3728      	adds	r7, #40	; 0x28
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40012c00 	.word	0x40012c00
 8007510:	40023800 	.word	0x40023800
 8007514:	40020800 	.word	0x40020800
 8007518:	40020c00 	.word	0x40020c00
 800751c:	20003460 	.word	0x20003460
 8007520:	40026458 	.word	0x40026458

08007524 <HAL_SPI_MspInit>:
 8007524:	b580      	push	{r7, lr}
 8007526:	b08e      	sub	sp, #56	; 0x38
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	605a      	str	r2, [r3, #4]
 8007536:	609a      	str	r2, [r3, #8]
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	611a      	str	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a7e      	ldr	r2, [pc, #504]	; (800773c <HAL_SPI_MspInit+0x218>)
 8007542:	4293      	cmp	r3, r2
 8007544:	f040 80c7 	bne.w	80076d6 <HAL_SPI_MspInit+0x1b2>
 8007548:	4b7d      	ldr	r3, [pc, #500]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754c:	4a7c      	ldr	r2, [pc, #496]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800754e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007552:	6453      	str	r3, [r2, #68]	; 0x44
 8007554:	4b7a      	ldr	r3, [pc, #488]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800755c:	623b      	str	r3, [r7, #32]
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	4b77      	ldr	r3, [pc, #476]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	4a76      	ldr	r2, [pc, #472]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	6313      	str	r3, [r2, #48]	; 0x30
 800756c:	4b74      	ldr	r3, [pc, #464]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4b71      	ldr	r3, [pc, #452]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	4a70      	ldr	r2, [pc, #448]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800757e:	f043 0308 	orr.w	r3, r3, #8
 8007582:	6313      	str	r3, [r2, #48]	; 0x30
 8007584:	4b6e      	ldr	r3, [pc, #440]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	4b6b      	ldr	r3, [pc, #428]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	4a6a      	ldr	r2, [pc, #424]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007596:	f043 0302 	orr.w	r3, r3, #2
 800759a:	6313      	str	r3, [r2, #48]	; 0x30
 800759c:	4b68      	ldr	r3, [pc, #416]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2320      	movs	r3, #32
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
 80075ac:	2302      	movs	r3, #2
 80075ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80075b0:	2300      	movs	r3, #0
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b4:	2303      	movs	r3, #3
 80075b6:	633b      	str	r3, [r7, #48]	; 0x30
 80075b8:	2305      	movs	r3, #5
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
 80075bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075c0:	4619      	mov	r1, r3
 80075c2:	4860      	ldr	r0, [pc, #384]	; (8007744 <HAL_SPI_MspInit+0x220>)
 80075c4:	f001 ff84 	bl	80094d0 <HAL_GPIO_Init>
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
 80075cc:	2302      	movs	r3, #2
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d0:	2300      	movs	r3, #0
 80075d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075d4:	2303      	movs	r3, #3
 80075d6:	633b      	str	r3, [r7, #48]	; 0x30
 80075d8:	2305      	movs	r3, #5
 80075da:	637b      	str	r3, [r7, #52]	; 0x34
 80075dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075e0:	4619      	mov	r1, r3
 80075e2:	4859      	ldr	r0, [pc, #356]	; (8007748 <HAL_SPI_MspInit+0x224>)
 80075e4:	f001 ff74 	bl	80094d0 <HAL_GPIO_Init>
 80075e8:	2310      	movs	r3, #16
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
 80075ec:	2302      	movs	r3, #2
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80075f0:	2300      	movs	r3, #0
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f4:	2303      	movs	r3, #3
 80075f6:	633b      	str	r3, [r7, #48]	; 0x30
 80075f8:	2305      	movs	r3, #5
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
 80075fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007600:	4619      	mov	r1, r3
 8007602:	4852      	ldr	r0, [pc, #328]	; (800774c <HAL_SPI_MspInit+0x228>)
 8007604:	f001 ff64 	bl	80094d0 <HAL_GPIO_Init>
 8007608:	4b51      	ldr	r3, [pc, #324]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800760a:	4a52      	ldr	r2, [pc, #328]	; (8007754 <HAL_SPI_MspInit+0x230>)
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	4b50      	ldr	r3, [pc, #320]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007610:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	4b4e      	ldr	r3, [pc, #312]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007618:	2200      	movs	r2, #0
 800761a:	609a      	str	r2, [r3, #8]
 800761c:	4b4c      	ldr	r3, [pc, #304]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800761e:	2200      	movs	r2, #0
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	4b4b      	ldr	r3, [pc, #300]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007628:	611a      	str	r2, [r3, #16]
 800762a:	4b49      	ldr	r3, [pc, #292]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800762c:	2200      	movs	r2, #0
 800762e:	615a      	str	r2, [r3, #20]
 8007630:	4b47      	ldr	r3, [pc, #284]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007632:	2200      	movs	r2, #0
 8007634:	619a      	str	r2, [r3, #24]
 8007636:	4b46      	ldr	r3, [pc, #280]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007638:	2200      	movs	r2, #0
 800763a:	61da      	str	r2, [r3, #28]
 800763c:	4b44      	ldr	r3, [pc, #272]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800763e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007642:	621a      	str	r2, [r3, #32]
 8007644:	4b42      	ldr	r3, [pc, #264]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007646:	2200      	movs	r2, #0
 8007648:	625a      	str	r2, [r3, #36]	; 0x24
 800764a:	4841      	ldr	r0, [pc, #260]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800764c:	f000 ff3c 	bl	80084c8 <HAL_DMA_Init>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <HAL_SPI_MspInit+0x136>
 8007656:	f7ff fb57 	bl	8006d08 <Error_Handler>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a3c      	ldr	r2, [pc, #240]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 800765e:	659a      	str	r2, [r3, #88]	; 0x58
 8007660:	4a3b      	ldr	r2, [pc, #236]	; (8007750 <HAL_SPI_MspInit+0x22c>)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6393      	str	r3, [r2, #56]	; 0x38
 8007666:	4b3c      	ldr	r3, [pc, #240]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007668:	4a3c      	ldr	r2, [pc, #240]	; (800775c <HAL_SPI_MspInit+0x238>)
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	4b3a      	ldr	r3, [pc, #232]	; (8007758 <HAL_SPI_MspInit+0x234>)
 800766e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007672:	605a      	str	r2, [r3, #4]
 8007674:	4b38      	ldr	r3, [pc, #224]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007676:	2240      	movs	r2, #64	; 0x40
 8007678:	609a      	str	r2, [r3, #8]
 800767a:	4b37      	ldr	r3, [pc, #220]	; (8007758 <HAL_SPI_MspInit+0x234>)
 800767c:	2200      	movs	r2, #0
 800767e:	60da      	str	r2, [r3, #12]
 8007680:	4b35      	ldr	r3, [pc, #212]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007686:	611a      	str	r2, [r3, #16]
 8007688:	4b33      	ldr	r3, [pc, #204]	; (8007758 <HAL_SPI_MspInit+0x234>)
 800768a:	2200      	movs	r2, #0
 800768c:	615a      	str	r2, [r3, #20]
 800768e:	4b32      	ldr	r3, [pc, #200]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007690:	2200      	movs	r2, #0
 8007692:	619a      	str	r2, [r3, #24]
 8007694:	4b30      	ldr	r3, [pc, #192]	; (8007758 <HAL_SPI_MspInit+0x234>)
 8007696:	2200      	movs	r2, #0
 8007698:	61da      	str	r2, [r3, #28]
 800769a:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <HAL_SPI_MspInit+0x234>)
 800769c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80076a0:	621a      	str	r2, [r3, #32]
 80076a2:	4b2d      	ldr	r3, [pc, #180]	; (8007758 <HAL_SPI_MspInit+0x234>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	625a      	str	r2, [r3, #36]	; 0x24
 80076a8:	482b      	ldr	r0, [pc, #172]	; (8007758 <HAL_SPI_MspInit+0x234>)
 80076aa:	f000 ff0d 	bl	80084c8 <HAL_DMA_Init>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_SPI_MspInit+0x194>
 80076b4:	f7ff fb28 	bl	8006d08 <Error_Handler>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a27      	ldr	r2, [pc, #156]	; (8007758 <HAL_SPI_MspInit+0x234>)
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
 80076be:	4a26      	ldr	r2, [pc, #152]	; (8007758 <HAL_SPI_MspInit+0x234>)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6393      	str	r3, [r2, #56]	; 0x38
 80076c4:	2200      	movs	r2, #0
 80076c6:	2103      	movs	r1, #3
 80076c8:	2023      	movs	r0, #35	; 0x23
 80076ca:	f000 fec6 	bl	800845a <HAL_NVIC_SetPriority>
 80076ce:	2023      	movs	r0, #35	; 0x23
 80076d0:	f000 fedf 	bl	8008492 <HAL_NVIC_EnableIRQ>
 80076d4:	e02d      	b.n	8007732 <HAL_SPI_MspInit+0x20e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a21      	ldr	r2, [pc, #132]	; (8007760 <HAL_SPI_MspInit+0x23c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d128      	bne.n	8007732 <HAL_SPI_MspInit+0x20e>
 80076e0:	4b17      	ldr	r3, [pc, #92]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e4:	4a16      	ldr	r2, [pc, #88]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076ea:	6453      	str	r3, [r2, #68]	; 0x44
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	4a10      	ldr	r2, [pc, #64]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 80076fe:	f043 0310 	orr.w	r3, r3, #16
 8007702:	6313      	str	r3, [r2, #48]	; 0x30
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <HAL_SPI_MspInit+0x21c>)
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	f003 0310 	and.w	r3, r3, #16
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
 8007716:	2302      	movs	r3, #2
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
 800771a:	2300      	movs	r3, #0
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771e:	2303      	movs	r3, #3
 8007720:	633b      	str	r3, [r7, #48]	; 0x30
 8007722:	2305      	movs	r3, #5
 8007724:	637b      	str	r3, [r7, #52]	; 0x34
 8007726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800772a:	4619      	mov	r1, r3
 800772c:	480d      	ldr	r0, [pc, #52]	; (8007764 <HAL_SPI_MspInit+0x240>)
 800772e:	f001 fecf 	bl	80094d0 <HAL_GPIO_Init>
 8007732:	bf00      	nop
 8007734:	3738      	adds	r7, #56	; 0x38
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40013000 	.word	0x40013000
 8007740:	40023800 	.word	0x40023800
 8007744:	40020000 	.word	0x40020000
 8007748:	40020c00 	.word	0x40020c00
 800774c:	40020400 	.word	0x40020400
 8007750:	20011ee4 	.word	0x20011ee4
 8007754:	40026410 	.word	0x40026410
 8007758:	20007508 	.word	0x20007508
 800775c:	40026488 	.word	0x40026488
 8007760:	40013400 	.word	0x40013400
 8007764:	40021000 	.word	0x40021000

08007768 <HAL_TIM_Base_MspInit>:
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a25      	ldr	r2, [pc, #148]	; (800780c <HAL_TIM_Base_MspInit+0xa4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d10c      	bne.n	8007794 <HAL_TIM_Base_MspInit+0x2c>
 800777a:	4b25      	ldr	r3, [pc, #148]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	4a24      	ldr	r2, [pc, #144]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 8007780:	f043 0304 	orr.w	r3, r3, #4
 8007784:	6413      	str	r3, [r2, #64]	; 0x40
 8007786:	4b22      	ldr	r3, [pc, #136]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f003 0304 	and.w	r3, r3, #4
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	e034      	b.n	80077fe <HAL_TIM_Base_MspInit+0x96>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <HAL_TIM_Base_MspInit+0xac>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d10c      	bne.n	80077b8 <HAL_TIM_Base_MspInit+0x50>
 800779e:	4b1c      	ldr	r3, [pc, #112]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	4a1b      	ldr	r2, [pc, #108]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077a4:	f043 0308 	orr.w	r3, r3, #8
 80077a8:	6413      	str	r3, [r2, #64]	; 0x40
 80077aa:	4b19      	ldr	r3, [pc, #100]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	e022      	b.n	80077fe <HAL_TIM_Base_MspInit+0x96>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a16      	ldr	r2, [pc, #88]	; (8007818 <HAL_TIM_Base_MspInit+0xb0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d10c      	bne.n	80077dc <HAL_TIM_Base_MspInit+0x74>
 80077c2:	4b13      	ldr	r3, [pc, #76]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	4a12      	ldr	r2, [pc, #72]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077c8:	f043 0320 	orr.w	r3, r3, #32
 80077cc:	6413      	str	r3, [r2, #64]	; 0x40
 80077ce:	4b10      	ldr	r3, [pc, #64]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e010      	b.n	80077fe <HAL_TIM_Base_MspInit+0x96>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a0e      	ldr	r2, [pc, #56]	; (800781c <HAL_TIM_Base_MspInit+0xb4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d10b      	bne.n	80077fe <HAL_TIM_Base_MspInit+0x96>
 80077e6:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	4a09      	ldr	r2, [pc, #36]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f0:	6413      	str	r3, [r2, #64]	; 0x40
 80077f2:	4b07      	ldr	r3, [pc, #28]	; (8007810 <HAL_TIM_Base_MspInit+0xa8>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fa:	60bb      	str	r3, [r7, #8]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40000800 	.word	0x40000800
 8007810:	40023800 	.word	0x40023800
 8007814:	40000c00 	.word	0x40000c00
 8007818:	40001400 	.word	0x40001400
 800781c:	40002000 	.word	0x40002000

08007820 <HAL_UART_MspInit>:
 8007820:	b580      	push	{r7, lr}
 8007822:	b08c      	sub	sp, #48	; 0x30
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	f107 031c 	add.w	r3, r7, #28
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	605a      	str	r2, [r3, #4]
 8007832:	609a      	str	r2, [r3, #8]
 8007834:	60da      	str	r2, [r3, #12]
 8007836:	611a      	str	r2, [r3, #16]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a9f      	ldr	r2, [pc, #636]	; (8007abc <HAL_UART_MspInit+0x29c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	f040 809a 	bne.w	8007978 <HAL_UART_MspInit+0x158>
 8007844:	4b9e      	ldr	r3, [pc, #632]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	4a9d      	ldr	r2, [pc, #628]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800784a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800784e:	6413      	str	r3, [r2, #64]	; 0x40
 8007850:	4b9b      	ldr	r3, [pc, #620]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	4b98      	ldr	r3, [pc, #608]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	4a97      	ldr	r2, [pc, #604]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007862:	f043 0310 	orr.w	r3, r3, #16
 8007866:	6313      	str	r3, [r2, #48]	; 0x30
 8007868:	4b95      	ldr	r3, [pc, #596]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	2302      	movs	r3, #2
 800787c:	623b      	str	r3, [r7, #32]
 800787e:	2300      	movs	r3, #0
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
 8007882:	2303      	movs	r3, #3
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
 8007886:	2308      	movs	r3, #8
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800788a:	f107 031c 	add.w	r3, r7, #28
 800788e:	4619      	mov	r1, r3
 8007890:	488c      	ldr	r0, [pc, #560]	; (8007ac4 <HAL_UART_MspInit+0x2a4>)
 8007892:	f001 fe1d 	bl	80094d0 <HAL_GPIO_Init>
 8007896:	4b8c      	ldr	r3, [pc, #560]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 8007898:	4a8c      	ldr	r2, [pc, #560]	; (8007acc <HAL_UART_MspInit+0x2ac>)
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	4b8a      	ldr	r3, [pc, #552]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 800789e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80078a2:	605a      	str	r2, [r3, #4]
 80078a4:	4b88      	ldr	r3, [pc, #544]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078a6:	2240      	movs	r2, #64	; 0x40
 80078a8:	609a      	str	r2, [r3, #8]
 80078aa:	4b87      	ldr	r3, [pc, #540]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	60da      	str	r2, [r3, #12]
 80078b0:	4b85      	ldr	r3, [pc, #532]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078b6:	611a      	str	r2, [r3, #16]
 80078b8:	4b83      	ldr	r3, [pc, #524]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	615a      	str	r2, [r3, #20]
 80078be:	4b82      	ldr	r3, [pc, #520]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	619a      	str	r2, [r3, #24]
 80078c4:	4b80      	ldr	r3, [pc, #512]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	61da      	str	r2, [r3, #28]
 80078ca:	4b7f      	ldr	r3, [pc, #508]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80078d0:	621a      	str	r2, [r3, #32]
 80078d2:	4b7d      	ldr	r3, [pc, #500]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078d4:	2204      	movs	r2, #4
 80078d6:	625a      	str	r2, [r3, #36]	; 0x24
 80078d8:	4b7b      	ldr	r3, [pc, #492]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078da:	2203      	movs	r2, #3
 80078dc:	629a      	str	r2, [r3, #40]	; 0x28
 80078de:	4b7a      	ldr	r3, [pc, #488]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80078e4:	4b78      	ldr	r3, [pc, #480]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30
 80078ea:	4877      	ldr	r0, [pc, #476]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078ec:	f000 fdec 	bl	80084c8 <HAL_DMA_Init>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <HAL_UART_MspInit+0xda>
 80078f6:	f7ff fa07 	bl	8006d08 <Error_Handler>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a72      	ldr	r2, [pc, #456]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 80078fe:	669a      	str	r2, [r3, #104]	; 0x68
 8007900:	4a71      	ldr	r2, [pc, #452]	; (8007ac8 <HAL_UART_MspInit+0x2a8>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6393      	str	r3, [r2, #56]	; 0x38
 8007906:	4b72      	ldr	r3, [pc, #456]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007908:	4a72      	ldr	r2, [pc, #456]	; (8007ad4 <HAL_UART_MspInit+0x2b4>)
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	4b70      	ldr	r3, [pc, #448]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800790e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007912:	605a      	str	r2, [r3, #4]
 8007914:	4b6e      	ldr	r3, [pc, #440]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007916:	2200      	movs	r2, #0
 8007918:	609a      	str	r2, [r3, #8]
 800791a:	4b6d      	ldr	r3, [pc, #436]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800791c:	2200      	movs	r2, #0
 800791e:	60da      	str	r2, [r3, #12]
 8007920:	4b6b      	ldr	r3, [pc, #428]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007926:	611a      	str	r2, [r3, #16]
 8007928:	4b69      	ldr	r3, [pc, #420]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800792a:	2200      	movs	r2, #0
 800792c:	615a      	str	r2, [r3, #20]
 800792e:	4b68      	ldr	r3, [pc, #416]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007930:	2200      	movs	r2, #0
 8007932:	619a      	str	r2, [r3, #24]
 8007934:	4b66      	ldr	r3, [pc, #408]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800793a:	61da      	str	r2, [r3, #28]
 800793c:	4b64      	ldr	r3, [pc, #400]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800793e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007942:	621a      	str	r2, [r3, #32]
 8007944:	4b62      	ldr	r3, [pc, #392]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007946:	2200      	movs	r2, #0
 8007948:	625a      	str	r2, [r3, #36]	; 0x24
 800794a:	4861      	ldr	r0, [pc, #388]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800794c:	f000 fdbc 	bl	80084c8 <HAL_DMA_Init>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_UART_MspInit+0x13a>
 8007956:	f7ff f9d7 	bl	8006d08 <Error_Handler>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a5c      	ldr	r2, [pc, #368]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 800795e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007960:	4a5b      	ldr	r2, [pc, #364]	; (8007ad0 <HAL_UART_MspInit+0x2b0>)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6393      	str	r3, [r2, #56]	; 0x38
 8007966:	2200      	movs	r2, #0
 8007968:	2105      	movs	r1, #5
 800796a:	2052      	movs	r0, #82	; 0x52
 800796c:	f000 fd75 	bl	800845a <HAL_NVIC_SetPriority>
 8007970:	2052      	movs	r0, #82	; 0x52
 8007972:	f000 fd8e 	bl	8008492 <HAL_NVIC_EnableIRQ>
 8007976:	e09d      	b.n	8007ab4 <HAL_UART_MspInit+0x294>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a56      	ldr	r2, [pc, #344]	; (8007ad8 <HAL_UART_MspInit+0x2b8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	f040 8098 	bne.w	8007ab4 <HAL_UART_MspInit+0x294>
 8007984:	4b4e      	ldr	r3, [pc, #312]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007988:	4a4d      	ldr	r2, [pc, #308]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800798a:	f043 0320 	orr.w	r3, r3, #32
 800798e:	6453      	str	r3, [r2, #68]	; 0x44
 8007990:	4b4b      	ldr	r3, [pc, #300]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	4b48      	ldr	r3, [pc, #288]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	4a47      	ldr	r2, [pc, #284]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 80079a2:	f043 0304 	orr.w	r3, r3, #4
 80079a6:	6313      	str	r3, [r2, #48]	; 0x30
 80079a8:	4b45      	ldr	r3, [pc, #276]	; (8007ac0 <HAL_UART_MspInit+0x2a0>)
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	23c0      	movs	r3, #192	; 0xc0
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	2302      	movs	r3, #2
 80079ba:	623b      	str	r3, [r7, #32]
 80079bc:	2300      	movs	r3, #0
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
 80079c0:	2303      	movs	r3, #3
 80079c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80079c4:	2308      	movs	r3, #8
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079c8:	f107 031c 	add.w	r3, r7, #28
 80079cc:	4619      	mov	r1, r3
 80079ce:	4843      	ldr	r0, [pc, #268]	; (8007adc <HAL_UART_MspInit+0x2bc>)
 80079d0:	f001 fd7e 	bl	80094d0 <HAL_GPIO_Init>
 80079d4:	4b42      	ldr	r3, [pc, #264]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079d6:	4a43      	ldr	r2, [pc, #268]	; (8007ae4 <HAL_UART_MspInit+0x2c4>)
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	4b41      	ldr	r3, [pc, #260]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079dc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80079e0:	605a      	str	r2, [r3, #4]
 80079e2:	4b3f      	ldr	r3, [pc, #252]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	609a      	str	r2, [r3, #8]
 80079e8:	4b3d      	ldr	r3, [pc, #244]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	60da      	str	r2, [r3, #12]
 80079ee:	4b3c      	ldr	r3, [pc, #240]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079f4:	611a      	str	r2, [r3, #16]
 80079f6:	4b3a      	ldr	r3, [pc, #232]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	615a      	str	r2, [r3, #20]
 80079fc:	4b38      	ldr	r3, [pc, #224]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	619a      	str	r2, [r3, #24]
 8007a02:	4b37      	ldr	r3, [pc, #220]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a08:	61da      	str	r2, [r3, #28]
 8007a0a:	4b35      	ldr	r3, [pc, #212]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007a10:	621a      	str	r2, [r3, #32]
 8007a12:	4b33      	ldr	r3, [pc, #204]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	625a      	str	r2, [r3, #36]	; 0x24
 8007a18:	4831      	ldr	r0, [pc, #196]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a1a:	f000 fd55 	bl	80084c8 <HAL_DMA_Init>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HAL_UART_MspInit+0x208>
 8007a24:	f7ff f970 	bl	8006d08 <Error_Handler>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a2d      	ldr	r2, [pc, #180]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a2c:	66da      	str	r2, [r3, #108]	; 0x6c
 8007a2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ae0 <HAL_UART_MspInit+0x2c0>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6393      	str	r3, [r2, #56]	; 0x38
 8007a34:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a36:	4a2d      	ldr	r2, [pc, #180]	; (8007aec <HAL_UART_MspInit+0x2cc>)
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	4b2b      	ldr	r3, [pc, #172]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a3c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007a40:	605a      	str	r2, [r3, #4]
 8007a42:	4b29      	ldr	r3, [pc, #164]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a44:	2240      	movs	r2, #64	; 0x40
 8007a46:	609a      	str	r2, [r3, #8]
 8007a48:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	60da      	str	r2, [r3, #12]
 8007a4e:	4b26      	ldr	r3, [pc, #152]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a54:	611a      	str	r2, [r3, #16]
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	615a      	str	r2, [r3, #20]
 8007a5c:	4b22      	ldr	r3, [pc, #136]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	619a      	str	r2, [r3, #24]
 8007a62:	4b21      	ldr	r3, [pc, #132]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	61da      	str	r2, [r3, #28]
 8007a68:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007a6e:	621a      	str	r2, [r3, #32]
 8007a70:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a72:	2204      	movs	r2, #4
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24
 8007a76:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a78:	2203      	movs	r2, #3
 8007a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a82:	4b19      	ldr	r3, [pc, #100]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
 8007a88:	4817      	ldr	r0, [pc, #92]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a8a:	f000 fd1d 	bl	80084c8 <HAL_DMA_Init>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <HAL_UART_MspInit+0x278>
 8007a94:	f7ff f938 	bl	8006d08 <Error_Handler>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a13      	ldr	r2, [pc, #76]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007a9c:	669a      	str	r2, [r3, #104]	; 0x68
 8007a9e:	4a12      	ldr	r2, [pc, #72]	; (8007ae8 <HAL_UART_MspInit+0x2c8>)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6393      	str	r3, [r2, #56]	; 0x38
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	2047      	movs	r0, #71	; 0x47
 8007aaa:	f000 fcd6 	bl	800845a <HAL_NVIC_SetPriority>
 8007aae:	2047      	movs	r0, #71	; 0x47
 8007ab0:	f000 fcef 	bl	8008492 <HAL_NVIC_EnableIRQ>
 8007ab4:	bf00      	nop
 8007ab6:	3730      	adds	r7, #48	; 0x30
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40007800 	.word	0x40007800
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	2000cc5c 	.word	0x2000cc5c
 8007acc:	40026028 	.word	0x40026028
 8007ad0:	200034c4 	.word	0x200034c4
 8007ad4:	40026058 	.word	0x40026058
 8007ad8:	40011400 	.word	0x40011400
 8007adc:	40020800 	.word	0x40020800
 8007ae0:	200075cc 	.word	0x200075cc
 8007ae4:	40026428 	.word	0x40026428
 8007ae8:	200127e8 	.word	0x200127e8
 8007aec:	400264a0 	.word	0x400264a0

08007af0 <SDTimer_Handler>:
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <SDTimer_Handler+0x40>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d006      	beq.n	8007b0c <SDTimer_Handler+0x1c>
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <SDTimer_Handler+0x40>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <SDTimer_Handler+0x40>)
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <SDTimer_Handler+0x44>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d006      	beq.n	8007b24 <SDTimer_Handler+0x34>
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <SDTimer_Handler+0x44>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	4b04      	ldr	r3, [pc, #16]	; (8007b34 <SDTimer_Handler+0x44>)
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	bf00      	nop
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20014950 	.word	0x20014950
 8007b34:	20014951 	.word	0x20014951

08007b38 <NMI_Handler>:
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	bf00      	nop
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <HardFault_Handler>:
 8007b46:	b480      	push	{r7}
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	e7fe      	b.n	8007b4a <HardFault_Handler+0x4>

08007b4c <MemManage_Handler>:
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	e7fe      	b.n	8007b50 <MemManage_Handler+0x4>

08007b52 <BusFault_Handler>:
 8007b52:	b480      	push	{r7}
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	e7fe      	b.n	8007b56 <BusFault_Handler+0x4>

08007b58 <UsageFault_Handler>:
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	e7fe      	b.n	8007b5c <UsageFault_Handler+0x4>

08007b5e <SVC_Handler>:
 8007b5e:	b480      	push	{r7}
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	bf00      	nop
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <DebugMon_Handler>:
 8007b6c:	b480      	push	{r7}
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	bf00      	nop
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <PendSV_Handler>:
 8007b7a:	b480      	push	{r7}
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	bf00      	nop
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <SysTick_Handler>:
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <SysTick_Handler+0x30>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	3301      	adds	r3, #1
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <SysTick_Handler+0x30>)
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <SysTick_Handler+0x30>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	d904      	bls.n	8007bae <SysTick_Handler+0x26>
 8007ba4:	4b04      	ldr	r3, [pc, #16]	; (8007bb8 <SysTick_Handler+0x30>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	f7ff ffa1 	bl	8007af0 <SDTimer_Handler>
 8007bae:	f000 fb37 	bl	8008220 <HAL_IncTick>
 8007bb2:	bf00      	nop
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000374 	.word	0x20000374

08007bbc <EXTI0_IRQHandler>:
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	f001 fe7b 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007bc6:	bf00      	nop
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <EXTI1_IRQHandler>:
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	2002      	movs	r0, #2
 8007bd0:	f001 fe74 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007bd4:	bf00      	nop
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <EXTI2_IRQHandler>:
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	2004      	movs	r0, #4
 8007bde:	f001 fe6d 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007be2:	bf00      	nop
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <EXTI3_IRQHandler>:
 8007be6:	b580      	push	{r7, lr}
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	2008      	movs	r0, #8
 8007bec:	f001 fe66 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007bf0:	bf00      	nop
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <EXTI4_IRQHandler>:
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	2010      	movs	r0, #16
 8007bfa:	f001 fe5f 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007bfe:	bf00      	nop
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <DMA1_Stream1_IRQHandler>:
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	4802      	ldr	r0, [pc, #8]	; (8007c14 <DMA1_Stream1_IRQHandler+0x10>)
 8007c0a:	f000 fd8d 	bl	8008728 <HAL_DMA_IRQHandler>
 8007c0e:	bf00      	nop
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	2000cc5c 	.word	0x2000cc5c

08007c18 <DMA1_Stream3_IRQHandler>:
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	4802      	ldr	r0, [pc, #8]	; (8007c28 <DMA1_Stream3_IRQHandler+0x10>)
 8007c1e:	f000 fd83 	bl	8008728 <HAL_DMA_IRQHandler>
 8007c22:	bf00      	nop
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	200034c4 	.word	0x200034c4

08007c2c <EXTI9_5_IRQHandler>:
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c34:	f001 fe42 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007c38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c3c:	f001 fe3e 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007c40:	bf00      	nop
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <SPI1_IRQHandler>:
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	4802      	ldr	r0, [pc, #8]	; (8007c54 <SPI1_IRQHandler+0x10>)
 8007c4a:	f008 fa09 	bl	8010060 <HAL_SPI_IRQHandler>
 8007c4e:	bf00      	nop
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	200057b8 	.word	0x200057b8

08007c58 <EXTI15_10_IRQHandler>:
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007c60:	f001 fe2c 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007c64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c68:	f001 fe28 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007c6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007c70:	f001 fe24 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007c74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c78:	f001 fe20 	bl	80098bc <HAL_GPIO_EXTI_IRQHandler>
 8007c7c:	bf00      	nop
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <SDMMC1_IRQHandler>:
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	4802      	ldr	r0, [pc, #8]	; (8007c90 <SDMMC1_IRQHandler+0x10>)
 8007c86:	f006 fbbf 	bl	800e408 <HAL_SD_IRQHandler>
 8007c8a:	bf00      	nop
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20002fbc 	.word	0x20002fbc

08007c94 <DMA2_Stream0_IRQHandler>:
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	4802      	ldr	r0, [pc, #8]	; (8007ca4 <DMA2_Stream0_IRQHandler+0x10>)
 8007c9a:	f000 fd45 	bl	8008728 <HAL_DMA_IRQHandler>
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20011ee4 	.word	0x20011ee4

08007ca8 <DMA2_Stream1_IRQHandler>:
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	4802      	ldr	r0, [pc, #8]	; (8007cb8 <DMA2_Stream1_IRQHandler+0x10>)
 8007cae:	f000 fd3b 	bl	8008728 <HAL_DMA_IRQHandler>
 8007cb2:	bf00      	nop
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200075cc 	.word	0x200075cc

08007cbc <DMA2_Stream3_IRQHandler>:
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	4802      	ldr	r0, [pc, #8]	; (8007ccc <DMA2_Stream3_IRQHandler+0x10>)
 8007cc2:	f000 fd31 	bl	8008728 <HAL_DMA_IRQHandler>
 8007cc6:	bf00      	nop
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20003460 	.word	0x20003460

08007cd0 <OTG_FS_IRQHandler>:
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	4802      	ldr	r0, [pc, #8]	; (8007ce0 <OTG_FS_IRQHandler+0x10>)
 8007cd6:	f002 f899 	bl	8009e0c <HAL_HCD_IRQHandler>
 8007cda:	bf00      	nop
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20019a74 	.word	0x20019a74

08007ce4 <DMA2_Stream5_IRQHandler>:
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	4802      	ldr	r0, [pc, #8]	; (8007cf4 <DMA2_Stream5_IRQHandler+0x10>)
 8007cea:	f000 fd1d 	bl	8008728 <HAL_DMA_IRQHandler>
 8007cee:	bf00      	nop
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20007508 	.word	0x20007508

08007cf8 <DMA2_Stream6_IRQHandler>:
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	4802      	ldr	r0, [pc, #8]	; (8007d08 <DMA2_Stream6_IRQHandler+0x10>)
 8007cfe:	f000 fd13 	bl	8008728 <HAL_DMA_IRQHandler>
 8007d02:	bf00      	nop
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200127e8 	.word	0x200127e8

08007d0c <USART6_IRQHandler>:
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	4809      	ldr	r0, [pc, #36]	; (8007d38 <USART6_IRQHandler+0x2c>)
 8007d12:	f009 fb31 	bl	8011378 <HAL_UART_IRQHandler>
 8007d16:	4b08      	ldr	r3, [pc, #32]	; (8007d38 <USART6_IRQHandler+0x2c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d106      	bne.n	8007d32 <USART6_IRQHandler+0x26>
 8007d24:	4804      	ldr	r0, [pc, #16]	; (8007d38 <USART6_IRQHandler+0x2c>)
 8007d26:	f000 f9c5 	bl	80080b4 <HAL_UART_RxCpltCallback>
 8007d2a:	4b03      	ldr	r3, [pc, #12]	; (8007d38 <USART6_IRQHandler+0x2c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2210      	movs	r2, #16
 8007d30:	621a      	str	r2, [r3, #32]
 8007d32:	bf00      	nop
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20011dec 	.word	0x20011dec

08007d3c <UART7_IRQHandler>:
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	4809      	ldr	r0, [pc, #36]	; (8007d68 <UART7_IRQHandler+0x2c>)
 8007d42:	f009 fb19 	bl	8011378 <HAL_UART_IRQHandler>
 8007d46:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <UART7_IRQHandler+0x2c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d106      	bne.n	8007d62 <UART7_IRQHandler+0x26>
 8007d54:	4804      	ldr	r0, [pc, #16]	; (8007d68 <UART7_IRQHandler+0x2c>)
 8007d56:	f000 f9ad 	bl	80080b4 <HAL_UART_RxCpltCallback>
 8007d5a:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <UART7_IRQHandler+0x2c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2210      	movs	r2, #16
 8007d60:	621a      	str	r2, [r3, #32]
 8007d62:	bf00      	nop
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20011d68 	.word	0x20011d68

08007d6c <_sbrk>:
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	4b11      	ldr	r3, [pc, #68]	; (8007dbc <_sbrk+0x50>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <_sbrk+0x16>
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <_sbrk+0x50>)
 8007d7e:	4a10      	ldr	r2, [pc, #64]	; (8007dc0 <_sbrk+0x54>)
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	4b0e      	ldr	r3, [pc, #56]	; (8007dbc <_sbrk+0x50>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <_sbrk+0x50>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4413      	add	r3, r2
 8007d90:	466a      	mov	r2, sp
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d907      	bls.n	8007da6 <_sbrk+0x3a>
 8007d96:	f016 f99f 	bl	801e0d8 <__errno>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	230c      	movs	r3, #12
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	f04f 33ff 	mov.w	r3, #4294967295
 8007da4:	e006      	b.n	8007db4 <_sbrk+0x48>
 8007da6:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <_sbrk+0x50>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4413      	add	r3, r2
 8007dae:	4a03      	ldr	r2, [pc, #12]	; (8007dbc <_sbrk+0x50>)
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20000378 	.word	0x20000378
 8007dc0:	20019d40 	.word	0x20019d40

08007dc4 <SystemInit>:
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	4b08      	ldr	r3, [pc, #32]	; (8007dec <SystemInit+0x28>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dce:	4a07      	ldr	r2, [pc, #28]	; (8007dec <SystemInit+0x28>)
 8007dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <SystemInit+0x28>)
 8007dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007dde:	609a      	str	r2, [r3, #8]
 8007de0:	bf00      	nop
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	e000ed00 	.word	0xe000ed00

08007df0 <UARTTXInit>:
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007df8:	4905      	ldr	r1, [pc, #20]	; (8007e10 <UARTTXInit+0x20>)
 8007dfa:	4806      	ldr	r0, [pc, #24]	; (8007e14 <UARTTXInit+0x24>)
 8007dfc:	f7fe ff8b 	bl	8006d16 <ringbuff_init>
 8007e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e04:	4904      	ldr	r1, [pc, #16]	; (8007e18 <UARTTXInit+0x28>)
 8007e06:	4805      	ldr	r0, [pc, #20]	; (8007e1c <UARTTXInit+0x2c>)
 8007e08:	f7fe ff85 	bl	8006d16 <ringbuff_init>
 8007e0c:	bf00      	nop
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20008c5c 	.word	0x20008c5c
 8007e14:	20011f44 	.word	0x20011f44
 8007e18:	20006a50 	.word	0x20006a50
 8007e1c:	2000dd58 	.word	0x2000dd58

08007e20 <UARTAddToTxBuff>:
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	807b      	strh	r3, [r7, #2]
 8007e2c:	887b      	ldrh	r3, [r7, #2]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	4804      	ldr	r0, [pc, #16]	; (8007e44 <UARTAddToTxBuff+0x24>)
 8007e34:	f7fe ff90 	bl	8006d58 <ringbuff_write>
 8007e38:	f000 f81a 	bl	8007e70 <UARTTxData>
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20011f44 	.word	0x20011f44

08007e48 <UARTAddToTxBuff2>:
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	807b      	strh	r3, [r7, #2]
 8007e54:	887b      	ldrh	r3, [r7, #2]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	4804      	ldr	r0, [pc, #16]	; (8007e6c <UARTAddToTxBuff2+0x24>)
 8007e5c:	f7fe ff7c 	bl	8006d58 <ringbuff_write>
 8007e60:	f000 f82e 	bl	8007ec0 <UARTTxData2>
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	2000dd58 	.word	0x2000dd58

08007e70 <UARTTxData>:
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <UARTTxData+0x44>)
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d116      	bne.n	8007eac <UARTTxData+0x3c>
 8007e7e:	480e      	ldr	r0, [pc, #56]	; (8007eb8 <UARTTxData+0x48>)
 8007e80:	f7ff f8ba 	bl	8006ff8 <ringbuff_get_linear_block_read_length>
 8007e84:	4603      	mov	r3, r0
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <UARTTxData+0x44>)
 8007e8a:	801a      	strh	r2, [r3, #0]
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <UARTTxData+0x44>)
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00c      	beq.n	8007eae <UARTTxData+0x3e>
 8007e94:	4808      	ldr	r0, [pc, #32]	; (8007eb8 <UARTTxData+0x48>)
 8007e96:	f7ff f893 	bl	8006fc0 <ringbuff_get_linear_block_read_address>
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <UARTTxData+0x44>)
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4805      	ldr	r0, [pc, #20]	; (8007ebc <UARTTxData+0x4c>)
 8007ea6:	f009 f967 	bl	8011178 <HAL_UART_Transmit_DMA>
 8007eaa:	e000      	b.n	8007eae <UARTTxData+0x3e>
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	200059b4 	.word	0x200059b4
 8007eb8:	20011f44 	.word	0x20011f44
 8007ebc:	20011dec 	.word	0x20011dec

08007ec0 <UARTTxData2>:
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <UARTTxData2+0x44>)
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d116      	bne.n	8007efc <UARTTxData2+0x3c>
 8007ece:	480e      	ldr	r0, [pc, #56]	; (8007f08 <UARTTxData2+0x48>)
 8007ed0:	f7ff f892 	bl	8006ff8 <ringbuff_get_linear_block_read_length>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <UARTTxData2+0x44>)
 8007eda:	801a      	strh	r2, [r3, #0]
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <UARTTxData2+0x44>)
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00c      	beq.n	8007efe <UARTTxData2+0x3e>
 8007ee4:	4808      	ldr	r0, [pc, #32]	; (8007f08 <UARTTxData2+0x48>)
 8007ee6:	f7ff f86b 	bl	8006fc0 <ringbuff_get_linear_block_read_address>
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <UARTTxData2+0x44>)
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4805      	ldr	r0, [pc, #20]	; (8007f0c <UARTTxData2+0x4c>)
 8007ef6:	f009 f93f 	bl	8011178 <HAL_UART_Transmit_DMA>
 8007efa:	e000      	b.n	8007efe <UARTTxData2+0x3e>
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	2000dd10 	.word	0x2000dd10
 8007f08:	2000dd58 	.word	0x2000dd58
 8007f0c:	20011d68 	.word	0x20011d68

08007f10 <UARTTxComplete>:
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	4b08      	ldr	r3, [pc, #32]	; (8007f38 <UARTTxComplete+0x28>)
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <UARTTxComplete+0x22>
 8007f1c:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <UARTTxComplete+0x28>)
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	4619      	mov	r1, r3
 8007f22:	4806      	ldr	r0, [pc, #24]	; (8007f3c <UARTTxComplete+0x2c>)
 8007f24:	f7ff f89b 	bl	800705e <ringbuff_skip>
 8007f28:	4b03      	ldr	r3, [pc, #12]	; (8007f38 <UARTTxComplete+0x28>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	801a      	strh	r2, [r3, #0]
 8007f2e:	f7ff ff9f 	bl	8007e70 <UARTTxData>
 8007f32:	bf00      	nop
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	200059b4 	.word	0x200059b4
 8007f3c:	20011f44 	.word	0x20011f44

08007f40 <UARTTxComplete2>:
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <UARTTxComplete2+0x28>)
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <UARTTxComplete2+0x22>
 8007f4c:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <UARTTxComplete2+0x28>)
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	4619      	mov	r1, r3
 8007f52:	4806      	ldr	r0, [pc, #24]	; (8007f6c <UARTTxComplete2+0x2c>)
 8007f54:	f7ff f883 	bl	800705e <ringbuff_skip>
 8007f58:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <UARTTxComplete2+0x28>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	801a      	strh	r2, [r3, #0]
 8007f5e:	f7ff ffaf 	bl	8007ec0 <UARTTxData2>
 8007f62:	bf00      	nop
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	2000dd10 	.word	0x2000dd10
 8007f6c:	2000dd58 	.word	0x2000dd58

08007f70 <HAL_UART_TxCpltCallback>:
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a15      	ldr	r2, [pc, #84]	; (8007fd4 <HAL_UART_TxCpltCallback+0x64>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d10f      	bne.n	8007fa2 <HAL_UART_TxCpltCallback+0x32>
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <HAL_UART_TxCpltCallback+0x68>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	701a      	strb	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	675a      	str	r2, [r3, #116]	; 0x74
 8007f9e:	f7ff ffb7 	bl	8007f10 <UARTTxComplete>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a0d      	ldr	r2, [pc, #52]	; (8007fdc <HAL_UART_TxCpltCallback+0x6c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d10f      	bne.n	8007fcc <HAL_UART_TxCpltCallback+0x5c>
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <HAL_UART_TxCpltCallback+0x68>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	675a      	str	r2, [r3, #116]	; 0x74
 8007fc8:	f7ff ffba 	bl	8007f40 <UARTTxComplete2>
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40011400 	.word	0x40011400
 8007fd8:	20000002 	.word	0x20000002
 8007fdc:	40007800 	.word	0x40007800

08007fe0 <UARTRXInit>:
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe8:	4910      	ldr	r1, [pc, #64]	; (800802c <UARTRXInit+0x4c>)
 8007fea:	4811      	ldr	r0, [pc, #68]	; (8008030 <UARTRXInit+0x50>)
 8007fec:	f7fe fe93 	bl	8006d16 <ringbuff_init>
 8007ff0:	4b10      	ldr	r3, [pc, #64]	; (8008034 <UARTRXInit+0x54>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <UARTRXInit+0x58>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	; (800803c <UARTRXInit+0x5c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	4b0e      	ldr	r3, [pc, #56]	; (800803c <UARTRXInit+0x5c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0210 	orr.w	r2, r2, #16
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <UARTRXInit+0x60>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <UARTRXInit+0x60>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0208 	bic.w	r2, r2, #8
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008020:	4902      	ldr	r1, [pc, #8]	; (800802c <UARTRXInit+0x4c>)
 8008022:	4806      	ldr	r0, [pc, #24]	; (800803c <UARTRXInit+0x5c>)
 8008024:	f009 f924 	bl	8011270 <HAL_UART_Receive_DMA>
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20011fd8 	.word	0x20011fd8
 8008030:	200127d8 	.word	0x200127d8
 8008034:	20011ea8 	.word	0x20011ea8
 8008038:	20011eb0 	.word	0x20011eb0
 800803c:	20011dec 	.word	0x20011dec
 8008040:	200075cc 	.word	0x200075cc

08008044 <UARTRxComplete>:
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	4b16      	ldr	r3, [pc, #88]	; (80080a4 <UARTRxComplete+0x60>)
 800804c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	b29b      	uxth	r3, r3
 8008054:	425b      	negs	r3, r3
 8008056:	b29b      	uxth	r3, r3
 8008058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800805c:	b29a      	uxth	r2, r3
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <UARTRxComplete+0x64>)
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <UARTRxComplete+0x64>)
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	4b10      	ldr	r3, [pc, #64]	; (80080ac <UARTRxComplete+0x68>)
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008072:	425a      	negs	r2, r3
 8008074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008078:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800807c:	bf58      	it	pl
 800807e:	4253      	negpl	r3, r2
 8008080:	80fb      	strh	r3, [r7, #6]
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008088:	d808      	bhi.n	800809c <UARTRxComplete+0x58>
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	4619      	mov	r1, r3
 800808e:	4808      	ldr	r0, [pc, #32]	; (80080b0 <UARTRxComplete+0x6c>)
 8008090:	f7ff f81a 	bl	80070c8 <ringbuff_advance>
 8008094:	4b04      	ldr	r3, [pc, #16]	; (80080a8 <UARTRxComplete+0x64>)
 8008096:	881a      	ldrh	r2, [r3, #0]
 8008098:	4b04      	ldr	r3, [pc, #16]	; (80080ac <UARTRxComplete+0x68>)
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20011dec 	.word	0x20011dec
 80080a8:	20011eb0 	.word	0x20011eb0
 80080ac:	20011ea8 	.word	0x20011ea8
 80080b0:	200127d8 	.word	0x200127d8

080080b4 <HAL_UART_RxCpltCallback>:
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <HAL_UART_RxCpltCallback+0x34>)
 80080be:	2200      	movs	r2, #0
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a09      	ldr	r2, [pc, #36]	; (80080ec <HAL_UART_RxCpltCallback+0x38>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d108      	bne.n	80080de <HAL_UART_RxCpltCallback+0x2a>
 80080cc:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <HAL_UART_RxCpltCallback+0x3c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d101      	bne.n	80080de <HAL_UART_RxCpltCallback+0x2a>
 80080da:	f7ff ffb3 	bl	8008044 <UARTRxComplete>
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000001 	.word	0x20000001
 80080ec:	40011400 	.word	0x40011400
 80080f0:	20011dec 	.word	0x20011dec

080080f4 <UART_RX_Read>:
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	461a      	mov	r2, r3
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	4804      	ldr	r0, [pc, #16]	; (8008118 <UART_RX_Read+0x24>)
 8008108:	f7fe fe8a 	bl	8006e20 <ringbuff_read>
 800810c:	4603      	mov	r3, r0
 800810e:	b2db      	uxtb	r3, r3
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	200127d8 	.word	0x200127d8

0800811c <UART_RX_AVAILABLE_BYTE>:
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
 8008120:	4803      	ldr	r0, [pc, #12]	; (8008130 <UART_RX_AVAILABLE_BYTE+0x14>)
 8008122:	f7fe ff18 	bl	8006f56 <ringbuff_get_full>
 8008126:	4603      	mov	r3, r0
 8008128:	b29b      	uxth	r3, r3
 800812a:	4618      	mov	r0, r3
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	200127d8 	.word	0x200127d8

08008134 <Reset_Handler>:
 8008134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800816c <LoopFillZerobss+0x14>
 8008138:	2100      	movs	r1, #0
 800813a:	e003      	b.n	8008144 <LoopCopyDataInit>

0800813c <CopyDataInit>:
 800813c:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <LoopFillZerobss+0x18>)
 800813e:	585b      	ldr	r3, [r3, r1]
 8008140:	5043      	str	r3, [r0, r1]
 8008142:	3104      	adds	r1, #4

08008144 <LoopCopyDataInit>:
 8008144:	480b      	ldr	r0, [pc, #44]	; (8008174 <LoopFillZerobss+0x1c>)
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <LoopFillZerobss+0x20>)
 8008148:	1842      	adds	r2, r0, r1
 800814a:	429a      	cmp	r2, r3
 800814c:	d3f6      	bcc.n	800813c <CopyDataInit>
 800814e:	4a0b      	ldr	r2, [pc, #44]	; (800817c <LoopFillZerobss+0x24>)
 8008150:	e002      	b.n	8008158 <LoopFillZerobss>

08008152 <FillZerobss>:
 8008152:	2300      	movs	r3, #0
 8008154:	f842 3b04 	str.w	r3, [r2], #4

08008158 <LoopFillZerobss>:
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <LoopFillZerobss+0x28>)
 800815a:	429a      	cmp	r2, r3
 800815c:	d3f9      	bcc.n	8008152 <FillZerobss>
 800815e:	f7ff fe31 	bl	8007dc4 <SystemInit>
 8008162:	f015 ffbf 	bl	801e0e4 <__libc_init_array>
 8008166:	f7fd fc43 	bl	80059f0 <main>
 800816a:	4770      	bx	lr
 800816c:	20080000 	.word	0x20080000
 8008170:	08023720 	.word	0x08023720
 8008174:	20000000 	.word	0x20000000
 8008178:	2000026c 	.word	0x2000026c
 800817c:	20000270 	.word	0x20000270
 8008180:	20019d3c 	.word	0x20019d3c

08008184 <ADC_IRQHandler>:
 8008184:	e7fe      	b.n	8008184 <ADC_IRQHandler>
	...

08008188 <HAL_Init>:
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <HAL_Init+0x34>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0a      	ldr	r2, [pc, #40]	; (80081bc <HAL_Init+0x34>)
 8008192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	4b08      	ldr	r3, [pc, #32]	; (80081bc <HAL_Init+0x34>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a07      	ldr	r2, [pc, #28]	; (80081bc <HAL_Init+0x34>)
 800819e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	2003      	movs	r0, #3
 80081a6:	f000 f94d 	bl	8008444 <HAL_NVIC_SetPriorityGrouping>
 80081aa:	2000      	movs	r0, #0
 80081ac:	f000 f808 	bl	80081c0 <HAL_InitTick>
 80081b0:	f7fe ffc0 	bl	8007134 <HAL_MspInit>
 80081b4:	2300      	movs	r3, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40023c00 	.word	0x40023c00

080081c0 <HAL_InitTick>:
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	4b12      	ldr	r3, [pc, #72]	; (8008214 <HAL_InitTick+0x54>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	4b12      	ldr	r3, [pc, #72]	; (8008218 <HAL_InitTick+0x58>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	4619      	mov	r1, r3
 80081d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081da:	fbb2 f3f3 	udiv	r3, r2, r3
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 f965 	bl	80084ae <HAL_SYSTICK_Config>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_InitTick+0x2e>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e00e      	b.n	800820c <HAL_InitTick+0x4c>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b0f      	cmp	r3, #15
 80081f2:	d80a      	bhi.n	800820a <HAL_InitTick+0x4a>
 80081f4:	2200      	movs	r2, #0
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	f000 f92d 	bl	800845a <HAL_NVIC_SetPriority>
 8008200:	4a06      	ldr	r2, [pc, #24]	; (800821c <HAL_InitTick+0x5c>)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	e000      	b.n	800820c <HAL_InitTick+0x4c>
 800820a:	2301      	movs	r3, #1
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	2000005c 	.word	0x2000005c
 8008218:	20000064 	.word	0x20000064
 800821c:	20000060 	.word	0x20000060

08008220 <HAL_IncTick>:
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
 8008224:	4b06      	ldr	r3, [pc, #24]	; (8008240 <HAL_IncTick+0x20>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <HAL_IncTick+0x24>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4413      	add	r3, r2
 8008230:	4a04      	ldr	r2, [pc, #16]	; (8008244 <HAL_IncTick+0x24>)
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20000064 	.word	0x20000064
 8008244:	20014954 	.word	0x20014954

08008248 <HAL_GetTick>:
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
 800824c:	4b03      	ldr	r3, [pc, #12]	; (800825c <HAL_GetTick+0x14>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4618      	mov	r0, r3
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20014954 	.word	0x20014954

08008260 <HAL_Delay>:
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	f7ff ffee 	bl	8008248 <HAL_GetTick>
 800826c:	60b8      	str	r0, [r7, #8]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008278:	d005      	beq.n	8008286 <HAL_Delay+0x26>
 800827a:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <HAL_Delay+0x40>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4413      	add	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	bf00      	nop
 8008288:	f7ff ffde 	bl	8008248 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	429a      	cmp	r2, r3
 8008296:	d8f7      	bhi.n	8008288 <HAL_Delay+0x28>
 8008298:	bf00      	nop
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000064 	.word	0x20000064

080082a4 <__NVIC_SetPriorityGrouping>:
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <__NVIC_SetPriorityGrouping+0x40>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80082c0:	4013      	ands	r3, r2
 80082c2:	60bb      	str	r3, [r7, #8]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	021a      	lsls	r2, r3, #8
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	431a      	orrs	r2, r3
 80082cc:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <__NVIC_SetPriorityGrouping+0x44>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	4a04      	ldr	r2, [pc, #16]	; (80082e4 <__NVIC_SetPriorityGrouping+0x40>)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	60d3      	str	r3, [r2, #12]
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	e000ed00 	.word	0xe000ed00
 80082e8:	05fa0000 	.word	0x05fa0000

080082ec <__NVIC_GetPriorityGrouping>:
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <__NVIC_GetPriorityGrouping+0x18>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	4618      	mov	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	e000ed00 	.word	0xe000ed00

08008308 <__NVIC_EnableIRQ>:
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
 8008312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008316:	2b00      	cmp	r3, #0
 8008318:	db0b      	blt.n	8008332 <__NVIC_EnableIRQ+0x2a>
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	f003 021f 	and.w	r2, r3, #31
 8008320:	4907      	ldr	r1, [pc, #28]	; (8008340 <__NVIC_EnableIRQ+0x38>)
 8008322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	2001      	movs	r0, #1
 800832a:	fa00 f202 	lsl.w	r2, r0, r2
 800832e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	e000e100 	.word	0xe000e100

08008344 <__NVIC_SetPriority>:
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
 8008350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008354:	2b00      	cmp	r3, #0
 8008356:	db0a      	blt.n	800836e <__NVIC_SetPriority+0x2a>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	b2da      	uxtb	r2, r3
 800835c:	490c      	ldr	r1, [pc, #48]	; (8008390 <__NVIC_SetPriority+0x4c>)
 800835e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008362:	0112      	lsls	r2, r2, #4
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	440b      	add	r3, r1
 8008368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800836c:	e00a      	b.n	8008384 <__NVIC_SetPriority+0x40>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	b2da      	uxtb	r2, r3
 8008372:	4908      	ldr	r1, [pc, #32]	; (8008394 <__NVIC_SetPriority+0x50>)
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	f003 030f 	and.w	r3, r3, #15
 800837a:	3b04      	subs	r3, #4
 800837c:	0112      	lsls	r2, r2, #4
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	440b      	add	r3, r1
 8008382:	761a      	strb	r2, [r3, #24]
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	e000e100 	.word	0xe000e100
 8008394:	e000ed00 	.word	0xe000ed00

08008398 <NVIC_EncodePriority>:
 8008398:	b480      	push	{r7}
 800839a:	b089      	sub	sp, #36	; 0x24
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	61fb      	str	r3, [r7, #28]
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f1c3 0307 	rsb	r3, r3, #7
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	bf28      	it	cs
 80083b6:	2304      	movcs	r3, #4
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	3304      	adds	r3, #4
 80083be:	2b06      	cmp	r3, #6
 80083c0:	d902      	bls.n	80083c8 <NVIC_EncodePriority+0x30>
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	3b03      	subs	r3, #3
 80083c6:	e000      	b.n	80083ca <NVIC_EncodePriority+0x32>
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	43da      	mvns	r2, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	401a      	ands	r2, r3
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	409a      	lsls	r2, r3
 80083e0:	f04f 31ff 	mov.w	r1, #4294967295
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	fa01 f303 	lsl.w	r3, r1, r3
 80083ea:	43d9      	mvns	r1, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	400b      	ands	r3, r1
 80083f0:	4313      	orrs	r3, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	3724      	adds	r7, #36	; 0x24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
	...

08008400 <SysTick_Config>:
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3b01      	subs	r3, #1
 800840c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008410:	d301      	bcc.n	8008416 <SysTick_Config+0x16>
 8008412:	2301      	movs	r3, #1
 8008414:	e00f      	b.n	8008436 <SysTick_Config+0x36>
 8008416:	4a0a      	ldr	r2, [pc, #40]	; (8008440 <SysTick_Config+0x40>)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3b01      	subs	r3, #1
 800841c:	6053      	str	r3, [r2, #4]
 800841e:	210f      	movs	r1, #15
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	f7ff ff8e 	bl	8008344 <__NVIC_SetPriority>
 8008428:	4b05      	ldr	r3, [pc, #20]	; (8008440 <SysTick_Config+0x40>)
 800842a:	2200      	movs	r2, #0
 800842c:	609a      	str	r2, [r3, #8]
 800842e:	4b04      	ldr	r3, [pc, #16]	; (8008440 <SysTick_Config+0x40>)
 8008430:	2207      	movs	r2, #7
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	2300      	movs	r3, #0
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	e000e010 	.word	0xe000e010

08008444 <HAL_NVIC_SetPriorityGrouping>:
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff ff29 	bl	80082a4 <__NVIC_SetPriorityGrouping>
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_NVIC_SetPriority>:
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	4603      	mov	r3, r0
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	73fb      	strb	r3, [r7, #15]
 8008468:	2300      	movs	r3, #0
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	f7ff ff3e 	bl	80082ec <__NVIC_GetPriorityGrouping>
 8008470:	6178      	str	r0, [r7, #20]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	6978      	ldr	r0, [r7, #20]
 8008478:	f7ff ff8e 	bl	8008398 <NVIC_EncodePriority>
 800847c:	4602      	mov	r2, r0
 800847e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008482:	4611      	mov	r1, r2
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff ff5d 	bl	8008344 <__NVIC_SetPriority>
 800848a:	bf00      	nop
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_NVIC_EnableIRQ>:
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	4603      	mov	r3, r0
 800849a:	71fb      	strb	r3, [r7, #7]
 800849c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff ff31 	bl	8008308 <__NVIC_EnableIRQ>
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_SYSTICK_Config>:
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff ffa2 	bl	8008400 <SysTick_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <HAL_DMA_Init>:
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	f7ff feb8 	bl	8008248 <HAL_GetTick>
 80084d8:	6138      	str	r0, [r7, #16]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <HAL_DMA_Init+0x1c>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e099      	b.n	8008618 <HAL_DMA_Init+0x150>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	e00f      	b.n	8008526 <HAL_DMA_Init+0x5e>
 8008506:	f7ff fe9f 	bl	8008248 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b05      	cmp	r3, #5
 8008512:	d908      	bls.n	8008526 <HAL_DMA_Init+0x5e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	655a      	str	r2, [r3, #84]	; 0x54
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2203      	movs	r2, #3
 800851e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008522:	2303      	movs	r3, #3
 8008524:	e078      	b.n	8008618 <HAL_DMA_Init+0x150>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e8      	bne.n	8008506 <HAL_DMA_Init+0x3e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	4b38      	ldr	r3, [pc, #224]	; (8008620 <HAL_DMA_Init+0x158>)
 8008540:	4013      	ands	r3, r2
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	431a      	orrs	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	431a      	orrs	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	431a      	orrs	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	431a      	orrs	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	4313      	orrs	r3, r2
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	4313      	orrs	r3, r2
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	2b04      	cmp	r3, #4
 800857e:	d107      	bne.n	8008590 <HAL_DMA_Init+0xc8>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	4313      	orrs	r3, r2
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d117      	bne.n	80085ea <HAL_DMA_Init+0x122>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00e      	beq.n	80085ea <HAL_DMA_Init+0x122>
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fa99 	bl	8008b04 <DMA_CheckFifoParam>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d008      	beq.n	80085ea <HAL_DMA_Init+0x122>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2240      	movs	r2, #64	; 0x40
 80085dc:	655a      	str	r2, [r3, #84]	; 0x54
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80085e6:	2301      	movs	r3, #1
 80085e8:	e016      	b.n	8008618 <HAL_DMA_Init+0x150>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	615a      	str	r2, [r3, #20]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa50 	bl	8008a98 <DMA_CalcBaseAndBitshift>
 80085f8:	4603      	mov	r3, r0
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008600:	223f      	movs	r2, #63	; 0x3f
 8008602:	409a      	lsls	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	609a      	str	r2, [r3, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	655a      	str	r2, [r3, #84]	; 0x54
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008616:	2300      	movs	r3, #0
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	e010803f 	.word	0xe010803f

08008624 <HAL_DMA_Start_IT>:
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863a:	613b      	str	r3, [r7, #16]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008642:	2b01      	cmp	r3, #1
 8008644:	d101      	bne.n	800864a <HAL_DMA_Start_IT+0x26>
 8008646:	2302      	movs	r3, #2
 8008648:	e048      	b.n	80086dc <HAL_DMA_Start_IT+0xb8>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b01      	cmp	r3, #1
 800865c:	d137      	bne.n	80086ce <HAL_DMA_Start_IT+0xaa>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2202      	movs	r2, #2
 8008662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	655a      	str	r2, [r3, #84]	; 0x54
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f9e2 	bl	8008a3c <DMA_SetConfig>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800867c:	223f      	movs	r2, #63	; 0x3f
 800867e:	409a      	lsls	r2, r3
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	609a      	str	r2, [r3, #8]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0216 	orr.w	r2, r2, #22
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	695a      	ldr	r2, [r3, #20]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086a2:	615a      	str	r2, [r3, #20]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <HAL_DMA_Start_IT+0x98>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0208 	orr.w	r2, r2, #8
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0201 	orr.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e005      	b.n	80086da <HAL_DMA_Start_IT+0xb6>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80086d6:	2302      	movs	r3, #2
 80086d8:	75fb      	strb	r3, [r7, #23]
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	4618      	mov	r0, r3
 80086de:	3718      	adds	r7, #24
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_DMA_Abort_IT>:
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d004      	beq.n	8008702 <HAL_DMA_Abort_IT+0x1e>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2280      	movs	r2, #128	; 0x80
 80086fc:	655a      	str	r2, [r3, #84]	; 0x54
 80086fe:	2301      	movs	r3, #1
 8008700:	e00c      	b.n	800871c <HAL_DMA_Abort_IT+0x38>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2205      	movs	r2, #5
 8008706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 0201 	bic.w	r2, r2, #1
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	2300      	movs	r3, #0
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_DMA_IRQHandler>:
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	2300      	movs	r3, #0
 8008732:	60bb      	str	r3, [r7, #8]
 8008734:	4b92      	ldr	r3, [pc, #584]	; (8008980 <HAL_DMA_IRQHandler+0x258>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a92      	ldr	r2, [pc, #584]	; (8008984 <HAL_DMA_IRQHandler+0x25c>)
 800873a:	fba2 2303 	umull	r2, r3, r2, r3
 800873e:	0a9b      	lsrs	r3, r3, #10
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008746:	613b      	str	r3, [r7, #16]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008752:	2208      	movs	r2, #8
 8008754:	409a      	lsls	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4013      	ands	r3, r2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d01a      	beq.n	8008794 <HAL_DMA_IRQHandler+0x6c>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d013      	beq.n	8008794 <HAL_DMA_IRQHandler+0x6c>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0204 	bic.w	r2, r2, #4
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008780:	2208      	movs	r2, #8
 8008782:	409a      	lsls	r2, r3
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	609a      	str	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878c:	f043 0201 	orr.w	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	655a      	str	r2, [r3, #84]	; 0x54
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008798:	2201      	movs	r2, #1
 800879a:	409a      	lsls	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4013      	ands	r3, r2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d012      	beq.n	80087ca <HAL_DMA_IRQHandler+0xa2>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <HAL_DMA_IRQHandler+0xa2>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b6:	2201      	movs	r2, #1
 80087b8:	409a      	lsls	r2, r3
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	609a      	str	r2, [r3, #8]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	f043 0202 	orr.w	r2, r3, #2
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	655a      	str	r2, [r3, #84]	; 0x54
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ce:	2204      	movs	r2, #4
 80087d0:	409a      	lsls	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4013      	ands	r3, r2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d012      	beq.n	8008800 <HAL_DMA_IRQHandler+0xd8>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <HAL_DMA_IRQHandler+0xd8>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ec:	2204      	movs	r2, #4
 80087ee:	409a      	lsls	r2, r3
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	609a      	str	r2, [r3, #8]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f8:	f043 0204 	orr.w	r2, r3, #4
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	655a      	str	r2, [r3, #84]	; 0x54
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008804:	2210      	movs	r2, #16
 8008806:	409a      	lsls	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4013      	ands	r3, r2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d043      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d03c      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008822:	2210      	movs	r2, #16
 8008824:	409a      	lsls	r2, r3
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	609a      	str	r2, [r3, #8]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d018      	beq.n	800886a <HAL_DMA_IRQHandler+0x142>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d108      	bne.n	8008858 <HAL_DMA_IRQHandler+0x130>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d024      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
 8008856:	e01f      	b.n	8008898 <HAL_DMA_IRQHandler+0x170>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01b      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	4798      	blx	r3
 8008868:	e016      	b.n	8008898 <HAL_DMA_IRQHandler+0x170>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008874:	2b00      	cmp	r3, #0
 8008876:	d107      	bne.n	8008888 <HAL_DMA_IRQHandler+0x160>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0208 	bic.w	r2, r2, #8
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_DMA_IRQHandler+0x170>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	4798      	blx	r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800889c:	2220      	movs	r2, #32
 800889e:	409a      	lsls	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 808e 	beq.w	80089c6 <HAL_DMA_IRQHandler+0x29e>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0310 	and.w	r3, r3, #16
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 8086 	beq.w	80089c6 <HAL_DMA_IRQHandler+0x29e>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088be:	2220      	movs	r2, #32
 80088c0:	409a      	lsls	r2, r3
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	609a      	str	r2, [r3, #8]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	d136      	bne.n	8008940 <HAL_DMA_IRQHandler+0x218>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0216 	bic.w	r2, r2, #22
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	695a      	ldr	r2, [r3, #20]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088f0:	615a      	str	r2, [r3, #20]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <HAL_DMA_IRQHandler+0x1da>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <HAL_DMA_IRQHandler+0x1ea>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0208 	bic.w	r2, r2, #8
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008916:	223f      	movs	r2, #63	; 0x3f
 8008918:	409a      	lsls	r2, r3
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	609a      	str	r2, [r3, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008932:	2b00      	cmp	r3, #0
 8008934:	d07d      	beq.n	8008a32 <HAL_DMA_IRQHandler+0x30a>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
 800893e:	e078      	b.n	8008a32 <HAL_DMA_IRQHandler+0x30a>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01c      	beq.n	8008988 <HAL_DMA_IRQHandler+0x260>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d108      	bne.n	800896e <HAL_DMA_IRQHandler+0x246>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	2b00      	cmp	r3, #0
 8008962:	d030      	beq.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4798      	blx	r3
 800896c:	e02b      	b.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d027      	beq.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3
 800897e:	e022      	b.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
 8008980:	2000005c 	.word	0x2000005c
 8008984:	1b4e81b5 	.word	0x1b4e81b5
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10f      	bne.n	80089b6 <HAL_DMA_IRQHandler+0x28e>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0210 	bic.w	r2, r2, #16
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_DMA_IRQHandler+0x29e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d032      	beq.n	8008a34 <HAL_DMA_IRQHandler+0x30c>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d022      	beq.n	8008a20 <HAL_DMA_IRQHandler+0x2f8>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2205      	movs	r2, #5
 80089de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0201 	bic.w	r2, r2, #1
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	3301      	adds	r3, #1
 80089f6:	60bb      	str	r3, [r7, #8]
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d307      	bcc.n	8008a0e <HAL_DMA_IRQHandler+0x2e6>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f2      	bne.n	80089f2 <HAL_DMA_IRQHandler+0x2ca>
 8008a0c:	e000      	b.n	8008a10 <HAL_DMA_IRQHandler+0x2e8>
 8008a0e:	bf00      	nop
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_DMA_IRQHandler+0x30c>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	4798      	blx	r3
 8008a30:	e000      	b.n	8008a34 <HAL_DMA_IRQHandler+0x30c>
 8008a32:	bf00      	nop
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop

08008a3c <DMA_SetConfig>:
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	603b      	str	r3, [r7, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	605a      	str	r2, [r3, #4]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2b40      	cmp	r3, #64	; 0x40
 8008a68:	d108      	bne.n	8008a7c <DMA_SetConfig+0x40>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	609a      	str	r2, [r3, #8]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	60da      	str	r2, [r3, #12]
 8008a7a:	e007      	b.n	8008a8c <DMA_SetConfig+0x50>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	609a      	str	r2, [r3, #8]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	60da      	str	r2, [r3, #12]
 8008a8c:	bf00      	nop
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <DMA_CalcBaseAndBitshift>:
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	3b10      	subs	r3, #16
 8008aa8:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <DMA_CalcBaseAndBitshift+0x60>)
 8008aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008aae:	091b      	lsrs	r3, r3, #4
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	4a12      	ldr	r2, [pc, #72]	; (8008afc <DMA_CalcBaseAndBitshift+0x64>)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d908      	bls.n	8008ad8 <DMA_CalcBaseAndBitshift+0x40>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <DMA_CalcBaseAndBitshift+0x68>)
 8008ace:	4013      	ands	r3, r2
 8008ad0:	1d1a      	adds	r2, r3, #4
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	659a      	str	r2, [r3, #88]	; 0x58
 8008ad6:	e006      	b.n	8008ae6 <DMA_CalcBaseAndBitshift+0x4e>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	461a      	mov	r2, r3
 8008ade:	4b08      	ldr	r3, [pc, #32]	; (8008b00 <DMA_CalcBaseAndBitshift+0x68>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	aaaaaaab 	.word	0xaaaaaaab
 8008afc:	08022998 	.word	0x08022998
 8008b00:	fffffc00 	.word	0xfffffc00

08008b04 <DMA_CheckFifoParam>:
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b14:	60bb      	str	r3, [r7, #8]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d11f      	bne.n	8008b5e <DMA_CheckFifoParam+0x5a>
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d855      	bhi.n	8008bd0 <DMA_CheckFifoParam+0xcc>
 8008b24:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <DMA_CheckFifoParam+0x28>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b3d 	.word	0x08008b3d
 8008b30:	08008b4f 	.word	0x08008b4f
 8008b34:	08008b3d 	.word	0x08008b3d
 8008b38:	08008bd1 	.word	0x08008bd1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d045      	beq.n	8008bd4 <DMA_CheckFifoParam+0xd0>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
 8008b4c:	e042      	b.n	8008bd4 <DMA_CheckFifoParam+0xd0>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b56:	d13f      	bne.n	8008bd8 <DMA_CheckFifoParam+0xd4>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	73fb      	strb	r3, [r7, #15]
 8008b5c:	e03c      	b.n	8008bd8 <DMA_CheckFifoParam+0xd4>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b66:	d121      	bne.n	8008bac <DMA_CheckFifoParam+0xa8>
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d836      	bhi.n	8008bdc <DMA_CheckFifoParam+0xd8>
 8008b6e:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <DMA_CheckFifoParam+0x70>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008b85 	.word	0x08008b85
 8008b78:	08008b8b 	.word	0x08008b8b
 8008b7c:	08008b85 	.word	0x08008b85
 8008b80:	08008b9d 	.word	0x08008b9d
 8008b84:	2301      	movs	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]
 8008b88:	e02f      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d024      	beq.n	8008be0 <DMA_CheckFifoParam+0xdc>
 8008b96:	2301      	movs	r3, #1
 8008b98:	73fb      	strb	r3, [r7, #15]
 8008b9a:	e021      	b.n	8008be0 <DMA_CheckFifoParam+0xdc>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ba4:	d11e      	bne.n	8008be4 <DMA_CheckFifoParam+0xe0>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
 8008baa:	e01b      	b.n	8008be4 <DMA_CheckFifoParam+0xe0>
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d902      	bls.n	8008bb8 <DMA_CheckFifoParam+0xb4>
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d003      	beq.n	8008bbe <DMA_CheckFifoParam+0xba>
 8008bb6:	e018      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]
 8008bbc:	e015      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00e      	beq.n	8008be8 <DMA_CheckFifoParam+0xe4>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	73fb      	strb	r3, [r7, #15]
 8008bce:	e00b      	b.n	8008be8 <DMA_CheckFifoParam+0xe4>
 8008bd0:	bf00      	nop
 8008bd2:	e00a      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
 8008bd4:	bf00      	nop
 8008bd6:	e008      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
 8008bd8:	bf00      	nop
 8008bda:	e006      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
 8008bdc:	bf00      	nop
 8008bde:	e004      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
 8008be0:	bf00      	nop
 8008be2:	e002      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
 8008be4:	bf00      	nop
 8008be6:	e000      	b.n	8008bea <DMA_CheckFifoParam+0xe6>
 8008be8:	bf00      	nop
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_ETH_Init>:
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	2300      	movs	r3, #0
 8008c02:	61fb      	str	r3, [r7, #28]
 8008c04:	2300      	movs	r3, #0
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	4ba9      	ldr	r3, [pc, #676]	; (8008eb0 <HAL_ETH_Init+0x2b8>)
 8008c0a:	61bb      	str	r3, [r7, #24]
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_ETH_Init+0x26>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e183      	b.n	8008f26 <HAL_ETH_Init+0x32e>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <HAL_ETH_Init+0x40>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7fe faa2 	bl	800717c <HAL_ETH_MspInit>
 8008c38:	4b9e      	ldr	r3, [pc, #632]	; (8008eb4 <HAL_ETH_Init+0x2bc>)
 8008c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3c:	4a9d      	ldr	r2, [pc, #628]	; (8008eb4 <HAL_ETH_Init+0x2bc>)
 8008c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c42:	6453      	str	r3, [r2, #68]	; 0x44
 8008c44:	4b9b      	ldr	r3, [pc, #620]	; (8008eb4 <HAL_ETH_Init+0x2bc>)
 8008c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4c:	60bb      	str	r3, [r7, #8]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	4b99      	ldr	r3, [pc, #612]	; (8008eb8 <HAL_ETH_Init+0x2c0>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	4a98      	ldr	r2, [pc, #608]	; (8008eb8 <HAL_ETH_Init+0x2c0>)
 8008c56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c5a:	6053      	str	r3, [r2, #4]
 8008c5c:	4b96      	ldr	r3, [pc, #600]	; (8008eb8 <HAL_ETH_Init+0x2c0>)
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	4994      	ldr	r1, [pc, #592]	; (8008eb8 <HAL_ETH_Init+0x2c0>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	604b      	str	r3, [r1, #4]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f042 0201 	orr.w	r2, r2, #1
 8008c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	f7ff fae1 	bl	8008248 <HAL_GetTick>
 8008c86:	6178      	str	r0, [r7, #20]
 8008c88:	e011      	b.n	8008cae <HAL_ETH_Init+0xb6>
 8008c8a:	f7ff fadd 	bl	8008248 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008c98:	d909      	bls.n	8008cae <HAL_ETH_Init+0xb6>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2203      	movs	r2, #3
 8008c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008caa:	2303      	movs	r3, #3
 8008cac:	e13b      	b.n	8008f26 <HAL_ETH_Init+0x32e>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e4      	bne.n	8008c8a <HAL_ETH_Init+0x92>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	61fb      	str	r3, [r7, #28]
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f023 031c 	bic.w	r3, r3, #28
 8008cce:	61fb      	str	r3, [r7, #28]
 8008cd0:	f003 ffd6 	bl	800cc80 <HAL_RCC_GetHCLKFreq>
 8008cd4:	61b8      	str	r0, [r7, #24]
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	4a78      	ldr	r2, [pc, #480]	; (8008ebc <HAL_ETH_Init+0x2c4>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d908      	bls.n	8008cf0 <HAL_ETH_Init+0xf8>
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	4a77      	ldr	r2, [pc, #476]	; (8008ec0 <HAL_ETH_Init+0x2c8>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d804      	bhi.n	8008cf0 <HAL_ETH_Init+0xf8>
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	f043 0308 	orr.w	r3, r3, #8
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	e027      	b.n	8008d40 <HAL_ETH_Init+0x148>
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	4a73      	ldr	r2, [pc, #460]	; (8008ec0 <HAL_ETH_Init+0x2c8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d908      	bls.n	8008d0a <HAL_ETH_Init+0x112>
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	4a72      	ldr	r2, [pc, #456]	; (8008ec4 <HAL_ETH_Init+0x2cc>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d804      	bhi.n	8008d0a <HAL_ETH_Init+0x112>
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	f043 030c 	orr.w	r3, r3, #12
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	e01a      	b.n	8008d40 <HAL_ETH_Init+0x148>
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	4a6d      	ldr	r2, [pc, #436]	; (8008ec4 <HAL_ETH_Init+0x2cc>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d903      	bls.n	8008d1a <HAL_ETH_Init+0x122>
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	4a6c      	ldr	r2, [pc, #432]	; (8008ec8 <HAL_ETH_Init+0x2d0>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d911      	bls.n	8008d3e <HAL_ETH_Init+0x146>
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	4a6a      	ldr	r2, [pc, #424]	; (8008ec8 <HAL_ETH_Init+0x2d0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d908      	bls.n	8008d34 <HAL_ETH_Init+0x13c>
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	4a69      	ldr	r2, [pc, #420]	; (8008ecc <HAL_ETH_Init+0x2d4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d804      	bhi.n	8008d34 <HAL_ETH_Init+0x13c>
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	f043 0304 	orr.w	r3, r3, #4
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e005      	b.n	8008d40 <HAL_ETH_Init+0x148>
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f043 0310 	orr.w	r3, r3, #16
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	e000      	b.n	8008d40 <HAL_ETH_Init+0x148>
 8008d3e:	bf00      	nop
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69fa      	ldr	r2, [r7, #28]
 8008d46:	611a      	str	r2, [r3, #16]
 8008d48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f956 	bl	8009000 <HAL_ETH_WritePHYRegister>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00b      	beq.n	8008d72 <HAL_ETH_Init+0x17a>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	613b      	str	r3, [r7, #16]
 8008d5e:	6939      	ldr	r1, [r7, #16]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f9b3 	bl	80090cc <ETH_MACDMAConfig>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e0d9      	b.n	8008f26 <HAL_ETH_Init+0x32e>
 8008d72:	20ff      	movs	r0, #255	; 0xff
 8008d74:	f7ff fa74 	bl	8008260 <HAL_Delay>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80a7 	beq.w	8008ed0 <HAL_ETH_Init+0x2d8>
 8008d82:	f7ff fa61 	bl	8008248 <HAL_GetTick>
 8008d86:	6178      	str	r0, [r7, #20]
 8008d88:	f107 030c 	add.w	r3, r7, #12
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2101      	movs	r1, #1
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f8cd 	bl	8008f30 <HAL_ETH_ReadPHYRegister>
 8008d96:	f7ff fa57 	bl	8008248 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d90f      	bls.n	8008dc8 <HAL_ETH_Init+0x1d0>
 8008da8:	2301      	movs	r3, #1
 8008daa:	613b      	str	r3, [r7, #16]
 8008dac:	6939      	ldr	r1, [r7, #16]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f98c 	bl	80090cc <ETH_MACDMAConfig>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e0ae      	b.n	8008f26 <HAL_ETH_Init+0x32e>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0da      	beq.n	8008d88 <HAL_ETH_Init+0x190>
 8008dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f911 	bl	8009000 <HAL_ETH_WritePHYRegister>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <HAL_ETH_Init+0x204>
 8008de4:	2301      	movs	r3, #1
 8008de6:	613b      	str	r3, [r7, #16]
 8008de8:	6939      	ldr	r1, [r7, #16]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f96e 	bl	80090cc <ETH_MACDMAConfig>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e094      	b.n	8008f26 <HAL_ETH_Init+0x32e>
 8008dfc:	f7ff fa24 	bl	8008248 <HAL_GetTick>
 8008e00:	6178      	str	r0, [r7, #20]
 8008e02:	f107 030c 	add.w	r3, r7, #12
 8008e06:	461a      	mov	r2, r3
 8008e08:	2101      	movs	r1, #1
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f890 	bl	8008f30 <HAL_ETH_ReadPHYRegister>
 8008e10:	f7ff fa1a 	bl	8008248 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d90f      	bls.n	8008e42 <HAL_ETH_Init+0x24a>
 8008e22:	2301      	movs	r3, #1
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	6939      	ldr	r1, [r7, #16]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f94f 	bl	80090cc <ETH_MACDMAConfig>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e071      	b.n	8008f26 <HAL_ETH_Init+0x32e>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f003 0320 	and.w	r3, r3, #32
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0da      	beq.n	8008e02 <HAL_ETH_Init+0x20a>
 8008e4c:	f107 030c 	add.w	r3, r7, #12
 8008e50:	461a      	mov	r2, r3
 8008e52:	211f      	movs	r1, #31
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f86b 	bl	8008f30 <HAL_ETH_ReadPHYRegister>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00b      	beq.n	8008e78 <HAL_ETH_Init+0x280>
 8008e60:	2301      	movs	r3, #1
 8008e62:	613b      	str	r3, [r7, #16]
 8008e64:	6939      	ldr	r1, [r7, #16]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f930 	bl	80090cc <ETH_MACDMAConfig>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e74:	2301      	movs	r3, #1
 8008e76:	e056      	b.n	8008f26 <HAL_ETH_Init+0x32e>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d004      	beq.n	8008e8c <HAL_ETH_Init+0x294>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e88:	60da      	str	r2, [r3, #12]
 8008e8a:	e002      	b.n	8008e92 <HAL_ETH_Init+0x29a>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	60da      	str	r2, [r3, #12]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_ETH_Init+0x2ac>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	609a      	str	r2, [r3, #8]
 8008ea2:	e037      	b.n	8008f14 <HAL_ETH_Init+0x31c>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008eaa:	609a      	str	r2, [r3, #8]
 8008eac:	e032      	b.n	8008f14 <HAL_ETH_Init+0x31c>
 8008eae:	bf00      	nop
 8008eb0:	03938700 	.word	0x03938700
 8008eb4:	40023800 	.word	0x40023800
 8008eb8:	40013800 	.word	0x40013800
 8008ebc:	01312cff 	.word	0x01312cff
 8008ec0:	02160ebf 	.word	0x02160ebf
 8008ec4:	039386ff 	.word	0x039386ff
 8008ec8:	05f5e0ff 	.word	0x05f5e0ff
 8008ecc:	08f0d17f 	.word	0x08f0d17f
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	08db      	lsrs	r3, r3, #3
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	085b      	lsrs	r3, r3, #1
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f889 	bl	8009000 <HAL_ETH_WritePHYRegister>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00b      	beq.n	8008f0c <HAL_ETH_Init+0x314>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	6939      	ldr	r1, [r7, #16]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f8e6 	bl	80090cc <ETH_MACDMAConfig>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e00c      	b.n	8008f26 <HAL_ETH_Init+0x32e>
 8008f0c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008f10:	f7ff f9a6 	bl	8008260 <HAL_Delay>
 8008f14:	6939      	ldr	r1, [r7, #16]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f8d8 	bl	80090cc <ETH_MACDMAConfig>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f24:	2300      	movs	r3, #0
 8008f26:	4618      	mov	r0, r3
 8008f28:	3720      	adds	r7, #32
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop

08008f30 <HAL_ETH_ReadPHYRegister>:
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	817b      	strh	r3, [r7, #10]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	2300      	movs	r3, #0
 8008f44:	613b      	str	r3, [r7, #16]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b82      	cmp	r3, #130	; 0x82
 8008f50:	d101      	bne.n	8008f56 <HAL_ETH_ReadPHYRegister+0x26>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e050      	b.n	8008ff8 <HAL_ETH_ReadPHYRegister+0xc8>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2282      	movs	r2, #130	; 0x82
 8008f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f003 031c 	and.w	r3, r3, #28
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8a1b      	ldrh	r3, [r3, #16]
 8008f72:	02db      	lsls	r3, r3, #11
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	617b      	str	r3, [r7, #20]
 8008f7c:	897b      	ldrh	r3, [r7, #10]
 8008f7e:	019b      	lsls	r3, r3, #6
 8008f80:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	617b      	str	r3, [r7, #20]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f023 0302 	bic.w	r3, r3, #2
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f043 0301 	orr.w	r3, r3, #1
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	611a      	str	r2, [r3, #16]
 8008fa2:	f7ff f951 	bl	8008248 <HAL_GetTick>
 8008fa6:	6138      	str	r0, [r7, #16]
 8008fa8:	e015      	b.n	8008fd6 <HAL_ETH_ReadPHYRegister+0xa6>
 8008faa:	f7ff f94d 	bl	8008248 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb8:	d309      	bcc.n	8008fce <HAL_ETH_ReadPHYRegister+0x9e>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e014      	b.n	8008ff8 <HAL_ETH_ReadPHYRegister+0xc8>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e4      	bne.n	8008faa <HAL_ETH_ReadPHYRegister+0x7a>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_ETH_WritePHYRegister>:
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	460b      	mov	r3, r1
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	817b      	strh	r3, [r7, #10]
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	2300      	movs	r3, #0
 8009014:	613b      	str	r3, [r7, #16]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b42      	cmp	r3, #66	; 0x42
 8009020:	d101      	bne.n	8009026 <HAL_ETH_WritePHYRegister+0x26>
 8009022:	2302      	movs	r3, #2
 8009024:	e04e      	b.n	80090c4 <HAL_ETH_WritePHYRegister+0xc4>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2242      	movs	r2, #66	; 0x42
 800902a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	617b      	str	r3, [r7, #20]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f003 031c 	and.w	r3, r3, #28
 800903c:	617b      	str	r3, [r7, #20]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8a1b      	ldrh	r3, [r3, #16]
 8009042:	02db      	lsls	r3, r3, #11
 8009044:	b29b      	uxth	r3, r3
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	4313      	orrs	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
 800904c:	897b      	ldrh	r3, [r7, #10]
 800904e:	019b      	lsls	r3, r3, #6
 8009050:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f043 0302 	orr.w	r3, r3, #2
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f043 0301 	orr.w	r3, r3, #1
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	615a      	str	r2, [r3, #20]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	611a      	str	r2, [r3, #16]
 800907c:	f7ff f8e4 	bl	8008248 <HAL_GetTick>
 8009080:	6138      	str	r0, [r7, #16]
 8009082:	e015      	b.n	80090b0 <HAL_ETH_WritePHYRegister+0xb0>
 8009084:	f7ff f8e0 	bl	8008248 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009092:	d309      	bcc.n	80090a8 <HAL_ETH_WritePHYRegister+0xa8>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090a4:	2303      	movs	r3, #3
 80090a6:	e00d      	b.n	80090c4 <HAL_ETH_WritePHYRegister+0xc4>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e4      	bne.n	8009084 <HAL_ETH_WritePHYRegister+0x84>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090c2:	2300      	movs	r3, #0
 80090c4:	4618      	mov	r0, r3
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <ETH_MACDMAConfig>:
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b0b0      	sub	sp, #192	; 0xc0
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	2300      	movs	r3, #0
 80090d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <ETH_MACDMAConfig+0x26>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090e8:	60da      	str	r2, [r3, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80090f0:	609a      	str	r2, [r3, #8]
 80090f2:	2300      	movs	r3, #0
 80090f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090f6:	2300      	movs	r3, #0
 80090f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090fa:	2300      	movs	r3, #0
 80090fc:	653b      	str	r3, [r7, #80]	; 0x50
 80090fe:	2300      	movs	r3, #0
 8009100:	657b      	str	r3, [r7, #84]	; 0x54
 8009102:	2300      	movs	r3, #0
 8009104:	65bb      	str	r3, [r7, #88]	; 0x58
 8009106:	2300      	movs	r3, #0
 8009108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d103      	bne.n	800911a <ETH_MACDMAConfig+0x4e>
 8009112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009116:	663b      	str	r3, [r7, #96]	; 0x60
 8009118:	e001      	b.n	800911e <ETH_MACDMAConfig+0x52>
 800911a:	2300      	movs	r3, #0
 800911c:	663b      	str	r3, [r7, #96]	; 0x60
 800911e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009122:	667b      	str	r3, [r7, #100]	; 0x64
 8009124:	2300      	movs	r3, #0
 8009126:	66bb      	str	r3, [r7, #104]	; 0x68
 8009128:	2300      	movs	r3, #0
 800912a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800912c:	2300      	movs	r3, #0
 800912e:	673b      	str	r3, [r7, #112]	; 0x70
 8009130:	2300      	movs	r3, #0
 8009132:	677b      	str	r3, [r7, #116]	; 0x74
 8009134:	2300      	movs	r3, #0
 8009136:	67bb      	str	r3, [r7, #120]	; 0x78
 8009138:	2340      	movs	r3, #64	; 0x40
 800913a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800913c:	2300      	movs	r3, #0
 800913e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009142:	2300      	movs	r3, #0
 8009144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009148:	2300      	movs	r3, #0
 800914a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800914e:	2300      	movs	r3, #0
 8009150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009154:	2300      	movs	r3, #0
 8009156:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800915a:	2300      	movs	r3, #0
 800915c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009160:	2300      	movs	r3, #0
 8009162:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009166:	2300      	movs	r3, #0
 8009168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800916c:	2380      	movs	r3, #128	; 0x80
 800916e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009172:	2300      	movs	r3, #0
 8009174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009178:	2300      	movs	r3, #0
 800917a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800917e:	2300      	movs	r3, #0
 8009180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009184:	2300      	movs	r3, #0
 8009186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800918a:	2300      	movs	r3, #0
 800918c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009190:	2300      	movs	r3, #0
 8009192:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80091a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091a4:	4bab      	ldr	r3, [pc, #684]	; (8009454 <ETH_MACDMAConfig+0x388>)
 80091a6:	4013      	ands	r3, r2
 80091a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80091ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b0:	431a      	orrs	r2, r3
 80091b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b4:	431a      	orrs	r2, r3
 80091b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091b8:	431a      	orrs	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	431a      	orrs	r2, r3
 80091c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091c2:	431a      	orrs	r2, r3
 80091c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	431a      	orrs	r2, r3
 80091ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091d0:	431a      	orrs	r2, r3
 80091d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091d4:	431a      	orrs	r2, r3
 80091d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091d8:	431a      	orrs	r2, r3
 80091da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091dc:	431a      	orrs	r2, r3
 80091de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091e0:	4313      	orrs	r3, r2
 80091e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009200:	2001      	movs	r0, #1
 8009202:	f7ff f82d 	bl	8008260 <HAL_Delay>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009214:	431a      	orrs	r2, r3
 8009216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009218:	431a      	orrs	r2, r3
 800921a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800921e:	431a      	orrs	r2, r3
 8009220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009224:	431a      	orrs	r2, r3
 8009226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800922a:	431a      	orrs	r2, r3
 800922c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009230:	ea42 0103 	orr.w	r1, r2, r3
 8009234:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	605a      	str	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800924a:	2001      	movs	r0, #1
 800924c:	f7ff f808 	bl	8008260 <HAL_Delay>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009258:	605a      	str	r2, [r3, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009262:	609a      	str	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800926c:	60da      	str	r2, [r3, #12]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009278:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800927c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8009280:	4013      	ands	r3, r2
 8009282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800928a:	041a      	lsls	r2, r3, #16
 800928c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009290:	431a      	orrs	r2, r3
 8009292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009296:	431a      	orrs	r2, r3
 8009298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800929c:	431a      	orrs	r2, r3
 800929e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092a2:	431a      	orrs	r2, r3
 80092a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092a8:	4313      	orrs	r3, r2
 80092aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092ae:	4313      	orrs	r3, r2
 80092b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092bc:	619a      	str	r2, [r3, #24]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092c8:	2001      	movs	r0, #1
 80092ca:	f7fe ffc9 	bl	8008260 <HAL_Delay>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092d6:	619a      	str	r2, [r3, #24]
 80092d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80092dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	61da      	str	r2, [r3, #28]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092f2:	2001      	movs	r0, #1
 80092f4:	f7fe ffb4 	bl	8008260 <HAL_Delay>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009300:	61da      	str	r2, [r3, #28]
 8009302:	2300      	movs	r3, #0
 8009304:	60bb      	str	r3, [r7, #8]
 8009306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	2300      	movs	r3, #0
 800930e:	613b      	str	r3, [r7, #16]
 8009310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	2300      	movs	r3, #0
 8009318:	61bb      	str	r3, [r7, #24]
 800931a:	2300      	movs	r3, #0
 800931c:	61fb      	str	r3, [r7, #28]
 800931e:	2300      	movs	r3, #0
 8009320:	623b      	str	r3, [r7, #32]
 8009322:	2300      	movs	r3, #0
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
 8009326:	2304      	movs	r3, #4
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28
 800932a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009334:	633b      	str	r3, [r7, #48]	; 0x30
 8009336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800933a:	637b      	str	r3, [r7, #52]	; 0x34
 800933c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009340:	63bb      	str	r3, [r7, #56]	; 0x38
 8009342:	2380      	movs	r3, #128	; 0x80
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009346:	2300      	movs	r3, #0
 8009348:	643b      	str	r3, [r7, #64]	; 0x40
 800934a:	2300      	movs	r3, #0
 800934c:	647b      	str	r3, [r7, #68]	; 0x44
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	f241 0318 	movw	r3, #4120	; 0x1018
 8009356:	4413      	add	r3, r2
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800935e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009362:	4b3d      	ldr	r3, [pc, #244]	; (8009458 <ETH_MACDMAConfig+0x38c>)
 8009364:	4013      	ands	r3, r2
 8009366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	431a      	orrs	r2, r3
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	431a      	orrs	r2, r3
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	431a      	orrs	r2, r3
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	431a      	orrs	r2, r3
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	431a      	orrs	r2, r3
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	431a      	orrs	r2, r3
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	431a      	orrs	r2, r3
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	4313      	orrs	r3, r2
 800938c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009390:	4313      	orrs	r3, r2
 8009392:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	f241 0318 	movw	r3, #4120	; 0x1018
 800939e:	4413      	add	r3, r2
 80093a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80093ae:	4413      	add	r3, r2
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093b6:	2001      	movs	r0, #1
 80093b8:	f7fe ff52 	bl	8008260 <HAL_Delay>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80093c4:	4413      	add	r3, r2
 80093c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	431a      	orrs	r2, r3
 80093d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d4:	431a      	orrs	r2, r3
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	431a      	orrs	r2, r3
 80093da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093dc:	431a      	orrs	r2, r3
 80093de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	431a      	orrs	r2, r3
 80093e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e6:	431a      	orrs	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80093f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009404:	2001      	movs	r0, #1
 8009406:	f7fe ff2b 	bl	8008260 <HAL_Delay>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d10d      	bne.n	800943c <ETH_MACDMAConfig+0x370>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	f241 031c 	movw	r3, #4124	; 0x101c
 8009428:	4413      	add	r3, r2
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6811      	ldr	r1, [r2, #0]
 8009430:	4a0a      	ldr	r2, [pc, #40]	; (800945c <ETH_MACDMAConfig+0x390>)
 8009432:	431a      	orrs	r2, r3
 8009434:	f241 031c 	movw	r3, #4124	; 0x101c
 8009438:	440b      	add	r3, r1
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	461a      	mov	r2, r3
 8009442:	2100      	movs	r1, #0
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f80b 	bl	8009460 <ETH_MACAddressConfig>
 800944a:	bf00      	nop
 800944c:	37c0      	adds	r7, #192	; 0xc0
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	ff20810f 	.word	0xff20810f
 8009458:	f8de3f23 	.word	0xf8de3f23
 800945c:	00010040 	.word	0x00010040

08009460 <ETH_MACAddressConfig>:
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3305      	adds	r3, #5
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	3204      	adds	r2, #4
 8009478:	7812      	ldrb	r2, [r2, #0]
 800947a:	4313      	orrs	r3, r2
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <ETH_MACAddressConfig+0x68>)
 8009482:	4413      	add	r3, r2
 8009484:	461a      	mov	r2, r3
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3303      	adds	r3, #3
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	061a      	lsls	r2, r3, #24
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3302      	adds	r3, #2
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	041b      	lsls	r3, r3, #16
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3301      	adds	r3, #1
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	021b      	lsls	r3, r3, #8
 80094a4:	4313      	orrs	r3, r2
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	7812      	ldrb	r2, [r2, #0]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	4b06      	ldr	r3, [pc, #24]	; (80094cc <ETH_MACAddressConfig+0x6c>)
 80094b2:	4413      	add	r3, r2
 80094b4:	461a      	mov	r2, r3
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	bf00      	nop
 80094bc:	371c      	adds	r7, #28
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	40028040 	.word	0x40028040
 80094cc:	40028044 	.word	0x40028044

080094d0 <HAL_GPIO_Init>:
 80094d0:	b480      	push	{r7}
 80094d2:	b089      	sub	sp, #36	; 0x24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
 80094da:	2300      	movs	r3, #0
 80094dc:	61fb      	str	r3, [r7, #28]
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	2300      	movs	r3, #0
 80094e4:	613b      	str	r3, [r7, #16]
 80094e6:	2300      	movs	r3, #0
 80094e8:	61bb      	str	r3, [r7, #24]
 80094ea:	2300      	movs	r3, #0
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	e175      	b.n	80097dc <HAL_GPIO_Init+0x30c>
 80094f0:	2201      	movs	r2, #1
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	fa02 f303 	lsl.w	r3, r2, r3
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4013      	ands	r3, r2
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	429a      	cmp	r2, r3
 800950a:	f040 8164 	bne.w	80097d6 <HAL_GPIO_Init+0x306>
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d00b      	beq.n	800952e <HAL_GPIO_Init+0x5e>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	2b02      	cmp	r3, #2
 800951c:	d007      	beq.n	800952e <HAL_GPIO_Init+0x5e>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2b11      	cmp	r3, #17
 8009524:	d003      	beq.n	800952e <HAL_GPIO_Init+0x5e>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2b12      	cmp	r3, #18
 800952c:	d130      	bne.n	8009590 <HAL_GPIO_Init+0xc0>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	61bb      	str	r3, [r7, #24]
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	2203      	movs	r2, #3
 800953a:	fa02 f303 	lsl.w	r3, r2, r3
 800953e:	43db      	mvns	r3, r3
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	4013      	ands	r3, r2
 8009544:	61bb      	str	r3, [r7, #24]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	fa02 f303 	lsl.w	r3, r2, r3
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	4313      	orrs	r3, r2
 8009556:	61bb      	str	r3, [r7, #24]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	609a      	str	r2, [r3, #8]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	61bb      	str	r3, [r7, #24]
 8009564:	2201      	movs	r2, #1
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	fa02 f303 	lsl.w	r3, r2, r3
 800956c:	43db      	mvns	r3, r3
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	4013      	ands	r3, r2
 8009572:	61bb      	str	r3, [r7, #24]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	091b      	lsrs	r3, r3, #4
 800957a:	f003 0201 	and.w	r2, r3, #1
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	fa02 f303 	lsl.w	r3, r2, r3
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	4313      	orrs	r3, r2
 8009588:	61bb      	str	r3, [r7, #24]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	605a      	str	r2, [r3, #4]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	61bb      	str	r3, [r7, #24]
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	2203      	movs	r2, #3
 800959c:	fa02 f303 	lsl.w	r3, r2, r3
 80095a0:	43db      	mvns	r3, r3
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	4013      	ands	r3, r2
 80095a6:	61bb      	str	r3, [r7, #24]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	fa02 f303 	lsl.w	r3, r2, r3
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	61bb      	str	r3, [r7, #24]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	60da      	str	r2, [r3, #12]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d003      	beq.n	80095d0 <HAL_GPIO_Init+0x100>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	2b12      	cmp	r3, #18
 80095ce:	d123      	bne.n	8009618 <HAL_GPIO_Init+0x148>
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	08da      	lsrs	r2, r3, #3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3208      	adds	r2, #8
 80095d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095dc:	61bb      	str	r3, [r7, #24]
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	f003 0307 	and.w	r3, r3, #7
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	220f      	movs	r2, #15
 80095e8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ec:	43db      	mvns	r3, r3
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	4013      	ands	r3, r2
 80095f2:	61bb      	str	r3, [r7, #24]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	691a      	ldr	r2, [r3, #16]
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	f003 0307 	and.w	r3, r3, #7
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	fa02 f303 	lsl.w	r3, r2, r3
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	4313      	orrs	r3, r2
 8009608:	61bb      	str	r3, [r7, #24]
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	08da      	lsrs	r2, r3, #3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3208      	adds	r2, #8
 8009612:	69b9      	ldr	r1, [r7, #24]
 8009614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	61bb      	str	r3, [r7, #24]
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	2203      	movs	r2, #3
 8009624:	fa02 f303 	lsl.w	r3, r2, r3
 8009628:	43db      	mvns	r3, r3
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	4013      	ands	r3, r2
 800962e:	61bb      	str	r3, [r7, #24]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	f003 0203 	and.w	r2, r3, #3
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	fa02 f303 	lsl.w	r3, r2, r3
 8009640:	69ba      	ldr	r2, [r7, #24]
 8009642:	4313      	orrs	r3, r2
 8009644:	61bb      	str	r3, [r7, #24]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80be 	beq.w	80097d6 <HAL_GPIO_Init+0x306>
 800965a:	4b65      	ldr	r3, [pc, #404]	; (80097f0 <HAL_GPIO_Init+0x320>)
 800965c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965e:	4a64      	ldr	r2, [pc, #400]	; (80097f0 <HAL_GPIO_Init+0x320>)
 8009660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009664:	6453      	str	r3, [r2, #68]	; 0x44
 8009666:	4b62      	ldr	r3, [pc, #392]	; (80097f0 <HAL_GPIO_Init+0x320>)
 8009668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4a60      	ldr	r2, [pc, #384]	; (80097f4 <HAL_GPIO_Init+0x324>)
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	089b      	lsrs	r3, r3, #2
 8009678:	3302      	adds	r3, #2
 800967a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800967e:	61bb      	str	r3, [r7, #24]
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	220f      	movs	r2, #15
 800968a:	fa02 f303 	lsl.w	r3, r2, r3
 800968e:	43db      	mvns	r3, r3
 8009690:	69ba      	ldr	r2, [r7, #24]
 8009692:	4013      	ands	r3, r2
 8009694:	61bb      	str	r3, [r7, #24]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a57      	ldr	r2, [pc, #348]	; (80097f8 <HAL_GPIO_Init+0x328>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d037      	beq.n	800970e <HAL_GPIO_Init+0x23e>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a56      	ldr	r2, [pc, #344]	; (80097fc <HAL_GPIO_Init+0x32c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d031      	beq.n	800970a <HAL_GPIO_Init+0x23a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a55      	ldr	r2, [pc, #340]	; (8009800 <HAL_GPIO_Init+0x330>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d02b      	beq.n	8009706 <HAL_GPIO_Init+0x236>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a54      	ldr	r2, [pc, #336]	; (8009804 <HAL_GPIO_Init+0x334>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d025      	beq.n	8009702 <HAL_GPIO_Init+0x232>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a53      	ldr	r2, [pc, #332]	; (8009808 <HAL_GPIO_Init+0x338>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d01f      	beq.n	80096fe <HAL_GPIO_Init+0x22e>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a52      	ldr	r2, [pc, #328]	; (800980c <HAL_GPIO_Init+0x33c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d019      	beq.n	80096fa <HAL_GPIO_Init+0x22a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a51      	ldr	r2, [pc, #324]	; (8009810 <HAL_GPIO_Init+0x340>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d013      	beq.n	80096f6 <HAL_GPIO_Init+0x226>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a50      	ldr	r2, [pc, #320]	; (8009814 <HAL_GPIO_Init+0x344>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d00d      	beq.n	80096f2 <HAL_GPIO_Init+0x222>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a4f      	ldr	r2, [pc, #316]	; (8009818 <HAL_GPIO_Init+0x348>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d007      	beq.n	80096ee <HAL_GPIO_Init+0x21e>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a4e      	ldr	r2, [pc, #312]	; (800981c <HAL_GPIO_Init+0x34c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d101      	bne.n	80096ea <HAL_GPIO_Init+0x21a>
 80096e6:	2309      	movs	r3, #9
 80096e8:	e012      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096ea:	230a      	movs	r3, #10
 80096ec:	e010      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096ee:	2308      	movs	r3, #8
 80096f0:	e00e      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096f2:	2307      	movs	r3, #7
 80096f4:	e00c      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096f6:	2306      	movs	r3, #6
 80096f8:	e00a      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096fa:	2305      	movs	r3, #5
 80096fc:	e008      	b.n	8009710 <HAL_GPIO_Init+0x240>
 80096fe:	2304      	movs	r3, #4
 8009700:	e006      	b.n	8009710 <HAL_GPIO_Init+0x240>
 8009702:	2303      	movs	r3, #3
 8009704:	e004      	b.n	8009710 <HAL_GPIO_Init+0x240>
 8009706:	2302      	movs	r3, #2
 8009708:	e002      	b.n	8009710 <HAL_GPIO_Init+0x240>
 800970a:	2301      	movs	r3, #1
 800970c:	e000      	b.n	8009710 <HAL_GPIO_Init+0x240>
 800970e:	2300      	movs	r3, #0
 8009710:	69fa      	ldr	r2, [r7, #28]
 8009712:	f002 0203 	and.w	r2, r2, #3
 8009716:	0092      	lsls	r2, r2, #2
 8009718:	4093      	lsls	r3, r2
 800971a:	69ba      	ldr	r2, [r7, #24]
 800971c:	4313      	orrs	r3, r2
 800971e:	61bb      	str	r3, [r7, #24]
 8009720:	4934      	ldr	r1, [pc, #208]	; (80097f4 <HAL_GPIO_Init+0x324>)
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	089b      	lsrs	r3, r3, #2
 8009726:	3302      	adds	r3, #2
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800972e:	4b3c      	ldr	r3, [pc, #240]	; (8009820 <HAL_GPIO_Init+0x350>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	43db      	mvns	r3, r3
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	4013      	ands	r3, r2
 800973c:	61bb      	str	r3, [r7, #24]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <HAL_GPIO_Init+0x282>
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	61bb      	str	r3, [r7, #24]
 8009752:	4a33      	ldr	r2, [pc, #204]	; (8009820 <HAL_GPIO_Init+0x350>)
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	4b31      	ldr	r3, [pc, #196]	; (8009820 <HAL_GPIO_Init+0x350>)
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	61bb      	str	r3, [r7, #24]
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	43db      	mvns	r3, r3
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	4013      	ands	r3, r2
 8009766:	61bb      	str	r3, [r7, #24]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <HAL_GPIO_Init+0x2ac>
 8009774:	69ba      	ldr	r2, [r7, #24]
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	61bb      	str	r3, [r7, #24]
 800977c:	4a28      	ldr	r2, [pc, #160]	; (8009820 <HAL_GPIO_Init+0x350>)
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	6053      	str	r3, [r2, #4]
 8009782:	4b27      	ldr	r3, [pc, #156]	; (8009820 <HAL_GPIO_Init+0x350>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	43db      	mvns	r3, r3
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	4013      	ands	r3, r2
 8009790:	61bb      	str	r3, [r7, #24]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <HAL_GPIO_Init+0x2d6>
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	61bb      	str	r3, [r7, #24]
 80097a6:	4a1e      	ldr	r2, [pc, #120]	; (8009820 <HAL_GPIO_Init+0x350>)
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	6093      	str	r3, [r2, #8]
 80097ac:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <HAL_GPIO_Init+0x350>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	61bb      	str	r3, [r7, #24]
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	43db      	mvns	r3, r3
 80097b6:	69ba      	ldr	r2, [r7, #24]
 80097b8:	4013      	ands	r3, r2
 80097ba:	61bb      	str	r3, [r7, #24]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <HAL_GPIO_Init+0x300>
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	61bb      	str	r3, [r7, #24]
 80097d0:	4a13      	ldr	r2, [pc, #76]	; (8009820 <HAL_GPIO_Init+0x350>)
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	60d3      	str	r3, [r2, #12]
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	3301      	adds	r3, #1
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	2b0f      	cmp	r3, #15
 80097e0:	f67f ae86 	bls.w	80094f0 <HAL_GPIO_Init+0x20>
 80097e4:	bf00      	nop
 80097e6:	3724      	adds	r7, #36	; 0x24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	40023800 	.word	0x40023800
 80097f4:	40013800 	.word	0x40013800
 80097f8:	40020000 	.word	0x40020000
 80097fc:	40020400 	.word	0x40020400
 8009800:	40020800 	.word	0x40020800
 8009804:	40020c00 	.word	0x40020c00
 8009808:	40021000 	.word	0x40021000
 800980c:	40021400 	.word	0x40021400
 8009810:	40021800 	.word	0x40021800
 8009814:	40021c00 	.word	0x40021c00
 8009818:	40022000 	.word	0x40022000
 800981c:	40022400 	.word	0x40022400
 8009820:	40013c00 	.word	0x40013c00

08009824 <HAL_GPIO_ReadPin>:
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	807b      	strh	r3, [r7, #2]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691a      	ldr	r2, [r3, #16]
 8009834:	887b      	ldrh	r3, [r7, #2]
 8009836:	4013      	ands	r3, r2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <HAL_GPIO_ReadPin+0x1e>
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
 8009840:	e001      	b.n	8009846 <HAL_GPIO_ReadPin+0x22>
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_GPIO_WritePin>:
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	807b      	strh	r3, [r7, #2]
 8009860:	4613      	mov	r3, r2
 8009862:	707b      	strb	r3, [r7, #1]
 8009864:	787b      	ldrb	r3, [r7, #1]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <HAL_GPIO_WritePin+0x1e>
 800986a:	887a      	ldrh	r2, [r7, #2]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	619a      	str	r2, [r3, #24]
 8009870:	e003      	b.n	800987a <HAL_GPIO_WritePin+0x26>
 8009872:	887b      	ldrh	r3, [r7, #2]
 8009874:	041a      	lsls	r2, r3, #16
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	619a      	str	r2, [r3, #24]
 800987a:	bf00      	nop
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <HAL_GPIO_TogglePin>:
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	807b      	strh	r3, [r7, #2]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695a      	ldr	r2, [r3, #20]
 8009896:	887b      	ldrh	r3, [r7, #2]
 8009898:	4013      	ands	r3, r2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d004      	beq.n	80098a8 <HAL_GPIO_TogglePin+0x22>
 800989e:	887b      	ldrh	r3, [r7, #2]
 80098a0:	041a      	lsls	r2, r3, #16
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	619a      	str	r2, [r3, #24]
 80098a6:	e002      	b.n	80098ae <HAL_GPIO_TogglePin+0x28>
 80098a8:	887a      	ldrh	r2, [r7, #2]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	619a      	str	r2, [r3, #24]
 80098ae:	bf00      	nop
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
	...

080098bc <HAL_GPIO_EXTI_IRQHandler>:
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	80fb      	strh	r3, [r7, #6]
 80098c6:	4b08      	ldr	r3, [pc, #32]	; (80098e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098c8:	695a      	ldr	r2, [r3, #20]
 80098ca:	88fb      	ldrh	r3, [r7, #6]
 80098cc:	4013      	ands	r3, r2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d006      	beq.n	80098e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80098d2:	4a05      	ldr	r2, [pc, #20]	; (80098e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	6153      	str	r3, [r2, #20]
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	4618      	mov	r0, r3
 80098dc:	f7f8 f808 	bl	80018f0 <HAL_GPIO_EXTI_Callback>
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	40013c00 	.word	0x40013c00

080098ec <HAL_HCD_Init>:
 80098ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ee:	b08f      	sub	sp, #60	; 0x3c
 80098f0:	af0a      	add	r7, sp, #40	; 0x28
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_HCD_Init+0x12>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e054      	b.n	80099a8 <HAL_HCD_Init+0xbc>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d106      	bne.n	800991e <HAL_HCD_Init+0x32>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f014 f907 	bl	801db2c <HAL_HCD_MspInit>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2203      	movs	r2, #3
 8009922:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <HAL_HCD_Init+0x4c>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	611a      	str	r2, [r3, #16]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4618      	mov	r0, r3
 800993e:	f009 f97c 	bl	8012c3a <USB_DisableGlobalInt>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	687e      	ldr	r6, [r7, #4]
 800994a:	466d      	mov	r5, sp
 800994c:	f106 0410 	add.w	r4, r6, #16
 8009950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009958:	e894 0003 	ldmia.w	r4, {r0, r1}
 800995c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009960:	1d33      	adds	r3, r6, #4
 8009962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009964:	6838      	ldr	r0, [r7, #0]
 8009966:	f009 f8ff 	bl	8012b68 <USB_CoreInit>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2101      	movs	r1, #1
 8009970:	4618      	mov	r0, r3
 8009972:	f009 f973 	bl	8012c5c <USB_SetCurrentMode>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	687e      	ldr	r6, [r7, #4]
 800997e:	466d      	mov	r5, sp
 8009980:	f106 0410 	add.w	r4, r6, #16
 8009984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800998a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800998c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009990:	e885 0003 	stmia.w	r5, {r0, r1}
 8009994:	1d33      	adds	r3, r6, #4
 8009996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009998:	6838      	ldr	r0, [r7, #0]
 800999a:	f009 fa85 	bl	8012ea8 <USB_HostInit>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 80099a6:	2300      	movs	r3, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099b0 <HAL_HCD_HC_Init>:
 80099b0:	b590      	push	{r4, r7, lr}
 80099b2:	b089      	sub	sp, #36	; 0x24
 80099b4:	af04      	add	r7, sp, #16
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	4608      	mov	r0, r1
 80099ba:	4611      	mov	r1, r2
 80099bc:	461a      	mov	r2, r3
 80099be:	4603      	mov	r3, r0
 80099c0:	70fb      	strb	r3, [r7, #3]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70bb      	strb	r3, [r7, #2]
 80099c6:	4613      	mov	r3, r2
 80099c8:	707b      	strb	r3, [r7, #1]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d101      	bne.n	80099d8 <HAL_HCD_HC_Init+0x28>
 80099d4:	2302      	movs	r3, #2
 80099d6:	e07f      	b.n	8009ad8 <HAL_HCD_HC_Init+0x128>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80099e0:	78fa      	ldrb	r2, [r7, #3]
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	440b      	add	r3, r1
 80099ee:	333d      	adds	r3, #61	; 0x3d
 80099f0:	2200      	movs	r2, #0
 80099f2:	701a      	strb	r2, [r3, #0]
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	440b      	add	r3, r1
 8009a02:	3338      	adds	r3, #56	; 0x38
 8009a04:	787a      	ldrb	r2, [r7, #1]
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	78fa      	ldrb	r2, [r7, #3]
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	440b      	add	r3, r1
 8009a16:	3340      	adds	r3, #64	; 0x40
 8009a18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009a1a:	801a      	strh	r2, [r3, #0]
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	440b      	add	r3, r1
 8009a2a:	3339      	adds	r3, #57	; 0x39
 8009a2c:	78fa      	ldrb	r2, [r7, #3]
 8009a2e:	701a      	strb	r2, [r3, #0]
 8009a30:	78fa      	ldrb	r2, [r7, #3]
 8009a32:	6879      	ldr	r1, [r7, #4]
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	440b      	add	r3, r1
 8009a3e:	333f      	adds	r3, #63	; 0x3f
 8009a40:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009a44:	701a      	strb	r2, [r3, #0]
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	78bb      	ldrb	r3, [r7, #2]
 8009a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a4e:	b2d8      	uxtb	r0, r3
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	440b      	add	r3, r1
 8009a5c:	333a      	adds	r3, #58	; 0x3a
 8009a5e:	4602      	mov	r2, r0
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	da0a      	bge.n	8009a80 <HAL_HCD_HC_Init+0xd0>
 8009a6a:	78fa      	ldrb	r2, [r7, #3]
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	440b      	add	r3, r1
 8009a78:	333b      	adds	r3, #59	; 0x3b
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	e009      	b.n	8009a94 <HAL_HCD_HC_Init+0xe4>
 8009a80:	78fa      	ldrb	r2, [r7, #3]
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	440b      	add	r3, r1
 8009a8e:	333b      	adds	r3, #59	; 0x3b
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]
 8009a94:	78fa      	ldrb	r2, [r7, #3]
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	440b      	add	r3, r1
 8009aa2:	333c      	adds	r3, #60	; 0x3c
 8009aa4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	787c      	ldrb	r4, [r7, #1]
 8009ab0:	78ba      	ldrb	r2, [r7, #2]
 8009ab2:	78f9      	ldrb	r1, [r7, #3]
 8009ab4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ab6:	9302      	str	r3, [sp, #8]
 8009ab8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	f009 fb65 	bl	8013194 <USB_HC_Init>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd90      	pop	{r4, r7, pc}

08009ae0 <HAL_HCD_HC_Halt>:
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
 8009aec:	2300      	movs	r3, #0
 8009aee:	73fb      	strb	r3, [r7, #15]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d101      	bne.n	8009afe <HAL_HCD_HC_Halt+0x1e>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e00f      	b.n	8009b1e <HAL_HCD_HC_Halt+0x3e>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	78fa      	ldrb	r2, [r7, #3]
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f009 fd9f 	bl	8013652 <USB_HC_Halt>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <HAL_HCD_HC_SubmitRequest>:
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	4608      	mov	r0, r1
 8009b32:	4611      	mov	r1, r2
 8009b34:	461a      	mov	r2, r3
 8009b36:	4603      	mov	r3, r0
 8009b38:	70fb      	strb	r3, [r7, #3]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70bb      	strb	r3, [r7, #2]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	707b      	strb	r3, [r7, #1]
 8009b42:	78fa      	ldrb	r2, [r7, #3]
 8009b44:	6879      	ldr	r1, [r7, #4]
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	440b      	add	r3, r1
 8009b50:	333b      	adds	r3, #59	; 0x3b
 8009b52:	78ba      	ldrb	r2, [r7, #2]
 8009b54:	701a      	strb	r2, [r3, #0]
 8009b56:	78fa      	ldrb	r2, [r7, #3]
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	00db      	lsls	r3, r3, #3
 8009b62:	440b      	add	r3, r1
 8009b64:	333f      	adds	r3, #63	; 0x3f
 8009b66:	787a      	ldrb	r2, [r7, #1]
 8009b68:	701a      	strb	r2, [r3, #0]
 8009b6a:	7c3b      	ldrb	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d114      	bne.n	8009b9a <HAL_HCD_HC_SubmitRequest+0x72>
 8009b70:	78fa      	ldrb	r2, [r7, #3]
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	440b      	add	r3, r1
 8009b7e:	3342      	adds	r3, #66	; 0x42
 8009b80:	2203      	movs	r2, #3
 8009b82:	701a      	strb	r2, [r3, #0]
 8009b84:	78fa      	ldrb	r2, [r7, #3]
 8009b86:	6879      	ldr	r1, [r7, #4]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	440b      	add	r3, r1
 8009b92:	333d      	adds	r3, #61	; 0x3d
 8009b94:	7f3a      	ldrb	r2, [r7, #28]
 8009b96:	701a      	strb	r2, [r3, #0]
 8009b98:	e009      	b.n	8009bae <HAL_HCD_HC_SubmitRequest+0x86>
 8009b9a:	78fa      	ldrb	r2, [r7, #3]
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	440b      	add	r3, r1
 8009ba8:	3342      	adds	r3, #66	; 0x42
 8009baa:	2202      	movs	r2, #2
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	787b      	ldrb	r3, [r7, #1]
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	f200 80d6 	bhi.w	8009d62 <HAL_HCD_HC_SubmitRequest+0x23a>
 8009bb6:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <HAL_HCD_HC_SubmitRequest+0x94>)
 8009bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbc:	08009bcd 	.word	0x08009bcd
 8009bc0:	08009d4d 	.word	0x08009d4d
 8009bc4:	08009c39 	.word	0x08009c39
 8009bc8:	08009cc3 	.word	0x08009cc3
 8009bcc:	7c3b      	ldrb	r3, [r7, #16]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	f040 80c9 	bne.w	8009d66 <HAL_HCD_HC_SubmitRequest+0x23e>
 8009bd4:	78bb      	ldrb	r3, [r7, #2]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f040 80c5 	bne.w	8009d66 <HAL_HCD_HC_SubmitRequest+0x23e>
 8009bdc:	8b3b      	ldrh	r3, [r7, #24]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <HAL_HCD_HC_SubmitRequest+0xce>
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	00db      	lsls	r3, r3, #3
 8009bee:	440b      	add	r3, r1
 8009bf0:	3351      	adds	r3, #81	; 0x51
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	701a      	strb	r2, [r3, #0]
 8009bf6:	78fa      	ldrb	r2, [r7, #3]
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	440b      	add	r3, r1
 8009c04:	3351      	adds	r3, #81	; 0x51
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10a      	bne.n	8009c22 <HAL_HCD_HC_SubmitRequest+0xfa>
 8009c0c:	78fa      	ldrb	r2, [r7, #3]
 8009c0e:	6879      	ldr	r1, [r7, #4]
 8009c10:	4613      	mov	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	440b      	add	r3, r1
 8009c1a:	3342      	adds	r3, #66	; 0x42
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	701a      	strb	r2, [r3, #0]
 8009c20:	e0a1      	b.n	8009d66 <HAL_HCD_HC_SubmitRequest+0x23e>
 8009c22:	78fa      	ldrb	r2, [r7, #3]
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	440b      	add	r3, r1
 8009c30:	3342      	adds	r3, #66	; 0x42
 8009c32:	2202      	movs	r2, #2
 8009c34:	701a      	strb	r2, [r3, #0]
 8009c36:	e096      	b.n	8009d66 <HAL_HCD_HC_SubmitRequest+0x23e>
 8009c38:	78bb      	ldrb	r3, [r7, #2]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d120      	bne.n	8009c80 <HAL_HCD_HC_SubmitRequest+0x158>
 8009c3e:	78fa      	ldrb	r2, [r7, #3]
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	4613      	mov	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	440b      	add	r3, r1
 8009c4c:	3351      	adds	r3, #81	; 0x51
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <HAL_HCD_HC_SubmitRequest+0x142>
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	440b      	add	r3, r1
 8009c62:	3342      	adds	r3, #66	; 0x42
 8009c64:	2200      	movs	r2, #0
 8009c66:	701a      	strb	r2, [r3, #0]
 8009c68:	e07e      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009c6a:	78fa      	ldrb	r2, [r7, #3]
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	440b      	add	r3, r1
 8009c78:	3342      	adds	r3, #66	; 0x42
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	701a      	strb	r2, [r3, #0]
 8009c7e:	e073      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009c80:	78fa      	ldrb	r2, [r7, #3]
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	4613      	mov	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	440b      	add	r3, r1
 8009c8e:	3350      	adds	r3, #80	; 0x50
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10a      	bne.n	8009cac <HAL_HCD_HC_SubmitRequest+0x184>
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	440b      	add	r3, r1
 8009ca4:	3342      	adds	r3, #66	; 0x42
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	701a      	strb	r2, [r3, #0]
 8009caa:	e05d      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009cac:	78fa      	ldrb	r2, [r7, #3]
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	440b      	add	r3, r1
 8009cba:	3342      	adds	r3, #66	; 0x42
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	e052      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009cc2:	78bb      	ldrb	r3, [r7, #2]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d120      	bne.n	8009d0a <HAL_HCD_HC_SubmitRequest+0x1e2>
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	440b      	add	r3, r1
 8009cd6:	3351      	adds	r3, #81	; 0x51
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10a      	bne.n	8009cf4 <HAL_HCD_HC_SubmitRequest+0x1cc>
 8009cde:	78fa      	ldrb	r2, [r7, #3]
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	00db      	lsls	r3, r3, #3
 8009cea:	440b      	add	r3, r1
 8009cec:	3342      	adds	r3, #66	; 0x42
 8009cee:	2200      	movs	r2, #0
 8009cf0:	701a      	strb	r2, [r3, #0]
 8009cf2:	e039      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009cf4:	78fa      	ldrb	r2, [r7, #3]
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	440b      	add	r3, r1
 8009d02:	3342      	adds	r3, #66	; 0x42
 8009d04:	2202      	movs	r2, #2
 8009d06:	701a      	strb	r2, [r3, #0]
 8009d08:	e02e      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	440b      	add	r3, r1
 8009d18:	3350      	adds	r3, #80	; 0x50
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <HAL_HCD_HC_SubmitRequest+0x20e>
 8009d20:	78fa      	ldrb	r2, [r7, #3]
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	440b      	add	r3, r1
 8009d2e:	3342      	adds	r3, #66	; 0x42
 8009d30:	2200      	movs	r2, #0
 8009d32:	701a      	strb	r2, [r3, #0]
 8009d34:	e018      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009d36:	78fa      	ldrb	r2, [r7, #3]
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	440b      	add	r3, r1
 8009d44:	3342      	adds	r3, #66	; 0x42
 8009d46:	2202      	movs	r2, #2
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	e00d      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009d4c:	78fa      	ldrb	r2, [r7, #3]
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	00db      	lsls	r3, r3, #3
 8009d58:	440b      	add	r3, r1
 8009d5a:	3342      	adds	r3, #66	; 0x42
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	e002      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009d62:	bf00      	nop
 8009d64:	e000      	b.n	8009d68 <HAL_HCD_HC_SubmitRequest+0x240>
 8009d66:	bf00      	nop
 8009d68:	78fa      	ldrb	r2, [r7, #3]
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	00db      	lsls	r3, r3, #3
 8009d74:	440b      	add	r3, r1
 8009d76:	3344      	adds	r3, #68	; 0x44
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	78fa      	ldrb	r2, [r7, #3]
 8009d7e:	8b39      	ldrh	r1, [r7, #24]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	00db      	lsls	r3, r3, #3
 8009d8a:	4403      	add	r3, r0
 8009d8c:	3348      	adds	r3, #72	; 0x48
 8009d8e:	6019      	str	r1, [r3, #0]
 8009d90:	78fa      	ldrb	r2, [r7, #3]
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	4613      	mov	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	440b      	add	r3, r1
 8009d9e:	335c      	adds	r3, #92	; 0x5c
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	78fa      	ldrb	r2, [r7, #3]
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	00db      	lsls	r3, r3, #3
 8009db0:	440b      	add	r3, r1
 8009db2:	334c      	adds	r3, #76	; 0x4c
 8009db4:	2200      	movs	r2, #0
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	78fa      	ldrb	r2, [r7, #3]
 8009dba:	6879      	ldr	r1, [r7, #4]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	440b      	add	r3, r1
 8009dc6:	3339      	adds	r3, #57	; 0x39
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	701a      	strb	r2, [r3, #0]
 8009dcc:	78fa      	ldrb	r2, [r7, #3]
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	440b      	add	r3, r1
 8009dda:	335d      	adds	r3, #93	; 0x5d
 8009ddc:	2200      	movs	r2, #0
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	3338      	adds	r3, #56	; 0x38
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	18d1      	adds	r1, r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f009 fad4 	bl	80133a8 <USB_HC_StartXfer>
 8009e00:	4603      	mov	r3, r0
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop

08009e0c <HAL_HCD_IRQHandler>:
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f008 fffd 	bl	8012e22 <USB_GetMode>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	f040 80ef 	bne.w	800a00e <HAL_HCD_IRQHandler+0x202>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f008 ffe1 	bl	8012dfc <USB_ReadInterrupts>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 80e5 	beq.w	800a00c <HAL_HCD_IRQHandler+0x200>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f008 ffd8 	bl	8012dfc <USB_ReadInterrupts>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e56:	d104      	bne.n	8009e62 <HAL_HCD_IRQHandler+0x56>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009e60:	615a      	str	r2, [r3, #20]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f008 ffc8 	bl	8012dfc <USB_ReadInterrupts>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e76:	d104      	bne.n	8009e82 <HAL_HCD_IRQHandler+0x76>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e80:	615a      	str	r2, [r3, #20]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f008 ffb8 	bl	8012dfc <USB_ReadInterrupts>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e96:	d104      	bne.n	8009ea2 <HAL_HCD_IRQHandler+0x96>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009ea0:	615a      	str	r2, [r3, #20]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f008 ffa8 	bl	8012dfc <USB_ReadInterrupts>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d103      	bne.n	8009ebe <HAL_HCD_IRQHandler+0xb2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	615a      	str	r2, [r3, #20]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f008 ff9a 	bl	8012dfc <USB_ReadInterrupts>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ed2:	d115      	bne.n	8009f00 <HAL_HCD_IRQHandler+0xf4>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009edc:	615a      	str	r2, [r3, #20]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d108      	bne.n	8009f00 <HAL_HCD_IRQHandler+0xf4>
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f013 fe8e 	bl	801dc10 <HAL_HCD_Disconnect_Callback>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2101      	movs	r1, #1
 8009efa:	4618      	mov	r0, r3
 8009efc:	f009 f884 	bl	8013008 <USB_InitFSLSPClkSel>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f008 ff79 	bl	8012dfc <USB_ReadInterrupts>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f14:	d102      	bne.n	8009f1c <HAL_HCD_IRQHandler+0x110>
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 f966 	bl	800b1e8 <HCD_Port_IRQHandler>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f008 ff6b 	bl	8012dfc <USB_ReadInterrupts>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f003 0308 	and.w	r3, r3, #8
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d106      	bne.n	8009f3e <HAL_HCD_IRQHandler+0x132>
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f013 fe51 	bl	801dbd8 <HAL_HCD_SOF_Callback>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2208      	movs	r2, #8
 8009f3c:	615a      	str	r2, [r3, #20]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f008 ff5a 	bl	8012dfc <USB_ReadInterrupts>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f52:	d138      	bne.n	8009fc6 <HAL_HCD_IRQHandler+0x1ba>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f009 fb69 	bl	8013630 <USB_HC_ReadInterrupt>
 8009f5e:	60b8      	str	r0, [r7, #8]
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e025      	b.n	8009fb2 <HAL_HCD_IRQHandler+0x1a6>
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f003 030f 	and.w	r3, r3, #15
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d018      	beq.n	8009fac <HAL_HCD_IRQHandler+0x1a0>
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f90:	d106      	bne.n	8009fa0 <HAL_HCD_IRQHandler+0x194>
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f8cf 	bl	800a13c <HCD_HC_IN_IRQHandler>
 8009f9e:	e005      	b.n	8009fac <HAL_HCD_IRQHandler+0x1a0>
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fcfd 	bl	800a9a6 <HCD_HC_OUT_IRQHandler>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d3d4      	bcc.n	8009f66 <HAL_HCD_IRQHandler+0x15a>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009fc4:	615a      	str	r2, [r3, #20]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f008 ff16 	bl	8012dfc <USB_ReadInterrupts>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f003 0310 	and.w	r3, r3, #16
 8009fd6:	2b10      	cmp	r3, #16
 8009fd8:	d101      	bne.n	8009fde <HAL_HCD_IRQHandler+0x1d2>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e000      	b.n	8009fe0 <HAL_HCD_IRQHandler+0x1d4>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d014      	beq.n	800a00e <HAL_HCD_IRQHandler+0x202>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	699a      	ldr	r2, [r3, #24]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f022 0210 	bic.w	r2, r2, #16
 8009ff2:	619a      	str	r2, [r3, #24]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 f84b 	bl	800b090 <HCD_RXQLVL_IRQHandler>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	699a      	ldr	r2, [r3, #24]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 0210 	orr.w	r2, r2, #16
 800a008:	619a      	str	r2, [r3, #24]
 800a00a:	e000      	b.n	800a00e <HAL_HCD_IRQHandler+0x202>
 800a00c:	bf00      	nop
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <HAL_HCD_Start>:
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <HAL_HCD_Start+0x16>
 800a026:	2302      	movs	r3, #2
 800a028:	e013      	b.n	800a052 <HAL_HCD_Start+0x3e>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4618      	mov	r0, r3
 800a038:	f008 fdee 	bl	8012c18 <USB_EnableGlobalInt>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2101      	movs	r1, #1
 800a042:	4618      	mov	r0, r3
 800a044:	f009 f844 	bl	80130d0 <USB_DriveVbus>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800a050:	2300      	movs	r3, #0
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_HCD_Stop>:
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d101      	bne.n	800a070 <HAL_HCD_Stop+0x16>
 800a06c:	2302      	movs	r3, #2
 800a06e:	e00d      	b.n	800a08c <HAL_HCD_Stop+0x32>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f009 fc23 	bl	80138c8 <USB_StopHost>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 800a08a:	2300      	movs	r3, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <HAL_HCD_ResetPort>:
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f008 ffeb 	bl	801307c <USB_ResetPort>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_HCD_HC_GetURBState>:
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
 800a0bc:	78fa      	ldrb	r2, [r7, #3]
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	440b      	add	r3, r1
 800a0ca:	335c      	adds	r3, #92	; 0x5c
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <HAL_HCD_HC_GetXferCount>:
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
 800a0e6:	78fa      	ldrb	r2, [r7, #3]
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	440b      	add	r3, r1
 800a0f4:	334c      	adds	r3, #76	; 0x4c
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_HCD_GetCurrentFrame>:
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4618      	mov	r0, r3
 800a112:	f009 f82d 	bl	8013170 <USB_GetCurrentFrame>
 800a116:	4603      	mov	r3, r0
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_HCD_GetCurrentSpeed>:
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f009 f808 	bl	8013142 <USB_GetHostSpeed>
 800a132:	4603      	mov	r3, r0
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HCD_HC_IN_IRQHandler>:
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	613b      	str	r3, [r7, #16]
 800a152:	78fb      	ldrb	r3, [r7, #3]
 800a154:	60fb      	str	r3, [r7, #12]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d119      	bne.n	800a1a0 <HCD_HC_IN_IRQHandler+0x64>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	4413      	add	r3, r2
 800a174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a178:	461a      	mov	r2, r3
 800a17a:	2304      	movs	r3, #4
 800a17c:	6093      	str	r3, [r2, #8]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	4413      	add	r3, r2
 800a186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	0151      	lsls	r1, r2, #5
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	440a      	add	r2, r1
 800a194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a198:	f043 0302 	orr.w	r3, r3, #2
 800a19c:	60d3      	str	r3, [r2, #12]
 800a19e:	e0ce      	b.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b6:	d12c      	bne.n	800a212 <HCD_HC_IN_IRQHandler+0xd6>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1ca:	6093      	str	r3, [r2, #8]
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	440b      	add	r3, r1
 800a1da:	335d      	adds	r3, #93	; 0x5d
 800a1dc:	2207      	movs	r2, #7
 800a1de:	701a      	strb	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	0151      	lsls	r1, r2, #5
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	440a      	add	r2, r1
 800a1f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1fa:	f043 0302 	orr.w	r3, r3, #2
 800a1fe:	60d3      	str	r3, [r2, #12]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f009 fa21 	bl	8013652 <USB_HC_Halt>
 800a210:	e095      	b.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f003 0320 	and.w	r3, r3, #32
 800a224:	2b20      	cmp	r3, #32
 800a226:	d109      	bne.n	800a23c <HCD_HC_IN_IRQHandler+0x100>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a234:	461a      	mov	r2, r3
 800a236:	2320      	movs	r3, #32
 800a238:	6093      	str	r3, [r2, #8]
 800a23a:	e080      	b.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	4413      	add	r3, r2
 800a244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	f003 0308 	and.w	r3, r3, #8
 800a24e:	2b08      	cmp	r3, #8
 800a250:	d134      	bne.n	800a2bc <HCD_HC_IN_IRQHandler+0x180>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	0151      	lsls	r1, r2, #5
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	440a      	add	r2, r1
 800a268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a26c:	f043 0302 	orr.w	r3, r3, #2
 800a270:	60d3      	str	r3, [r2, #12]
 800a272:	6879      	ldr	r1, [r7, #4]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	440b      	add	r3, r1
 800a280:	335d      	adds	r3, #93	; 0x5d
 800a282:	2205      	movs	r2, #5
 800a284:	701a      	strb	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	015a      	lsls	r2, r3, #5
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	4413      	add	r3, r2
 800a28e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a292:	461a      	mov	r2, r3
 800a294:	2310      	movs	r3, #16
 800a296:	6093      	str	r3, [r2, #8]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	015a      	lsls	r2, r3, #5
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	2308      	movs	r3, #8
 800a2a8:	6093      	str	r3, [r2, #8]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	b2d2      	uxtb	r2, r2
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f009 f9cc 	bl	8013652 <USB_HC_Halt>
 800a2ba:	e040      	b.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d2:	d134      	bne.n	800a33e <HCD_HC_IN_IRQHandler+0x202>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	0151      	lsls	r1, r2, #5
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	440a      	add	r2, r1
 800a2ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2ee:	f043 0302 	orr.w	r3, r3, #2
 800a2f2:	60d3      	str	r3, [r2, #12]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	b2d2      	uxtb	r2, r2
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f009 f9a7 	bl	8013652 <USB_HC_Halt>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a310:	461a      	mov	r2, r3
 800a312:	2310      	movs	r3, #16
 800a314:	6093      	str	r3, [r2, #8]
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4613      	mov	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	440b      	add	r3, r1
 800a324:	335d      	adds	r3, #93	; 0x5d
 800a326:	2208      	movs	r2, #8
 800a328:	701a      	strb	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	4413      	add	r3, r2
 800a332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a336:	461a      	mov	r2, r3
 800a338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a33c:	6093      	str	r3, [r2, #8]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	4413      	add	r3, r2
 800a346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a354:	d122      	bne.n	800a39c <HCD_HC_IN_IRQHandler+0x260>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a370:	f043 0302 	orr.w	r3, r3, #2
 800a374:	60d3      	str	r3, [r2, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	b2d2      	uxtb	r2, r2
 800a37e:	4611      	mov	r1, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f009 f966 	bl	8013652 <USB_HC_Halt>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a392:	461a      	mov	r2, r3
 800a394:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a398:	6093      	str	r3, [r2, #8]
 800a39a:	e300      	b.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	f040 80fd 	bne.w	800a5ae <HCD_HC_IN_IRQHandler+0x472>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d01b      	beq.n	800a3f4 <HCD_HC_IN_IRQHandler+0x2b8>
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	440b      	add	r3, r1
 800a3ca:	3348      	adds	r3, #72	; 0x48
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	0159      	lsls	r1, r3, #5
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	440b      	add	r3, r1
 800a3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3e0:	1ad1      	subs	r1, r2, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	4403      	add	r3, r0
 800a3f0:	334c      	adds	r3, #76	; 0x4c
 800a3f2:	6019      	str	r1, [r3, #0]
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	00db      	lsls	r3, r3, #3
 800a400:	440b      	add	r3, r1
 800a402:	335d      	adds	r3, #93	; 0x5d
 800a404:	2201      	movs	r2, #1
 800a406:	701a      	strb	r2, [r3, #0]
 800a408:	6879      	ldr	r1, [r7, #4]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	4613      	mov	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4413      	add	r3, r2
 800a412:	00db      	lsls	r3, r3, #3
 800a414:	440b      	add	r3, r1
 800a416:	3358      	adds	r3, #88	; 0x58
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	4413      	add	r3, r2
 800a424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a428:	461a      	mov	r2, r3
 800a42a:	2301      	movs	r3, #1
 800a42c:	6093      	str	r3, [r2, #8]
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4613      	mov	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	440b      	add	r3, r1
 800a43c:	333f      	adds	r3, #63	; 0x3f
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <HCD_HC_IN_IRQHandler+0x31e>
 800a444:	6879      	ldr	r1, [r7, #4]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	440b      	add	r3, r1
 800a452:	333f      	adds	r3, #63	; 0x3f
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b02      	cmp	r3, #2
 800a458:	d121      	bne.n	800a49e <HCD_HC_IN_IRQHandler+0x362>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	4413      	add	r3, r2
 800a462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	0151      	lsls	r1, r2, #5
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	440a      	add	r2, r1
 800a470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a474:	f043 0302 	orr.w	r3, r3, #2
 800a478:	60d3      	str	r3, [r2, #12]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	4611      	mov	r1, r2
 800a484:	4618      	mov	r0, r3
 800a486:	f009 f8e4 	bl	8013652 <USB_HC_Halt>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	4413      	add	r3, r2
 800a492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a496:	461a      	mov	r2, r3
 800a498:	2310      	movs	r3, #16
 800a49a:	6093      	str	r3, [r2, #8]
 800a49c:	e070      	b.n	800a580 <HCD_HC_IN_IRQHandler+0x444>
 800a49e:	6879      	ldr	r1, [r7, #4]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	440b      	add	r3, r1
 800a4ac:	333f      	adds	r3, #63	; 0x3f
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d12a      	bne.n	800a50a <HCD_HC_IN_IRQHandler+0x3ce>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	0151      	lsls	r1, r2, #5
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	440a      	add	r2, r1
 800a4ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	440b      	add	r3, r1
 800a4e2:	335c      	adds	r3, #92	; 0x5c
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	b2d8      	uxtb	r0, r3
 800a4ec:	6879      	ldr	r1, [r7, #4]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	440b      	add	r3, r1
 800a4fa:	335c      	adds	r3, #92	; 0x5c
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	4601      	mov	r1, r0
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f013 fb92 	bl	801dc2c <HAL_HCD_HC_NotifyURBChange_Callback>
 800a508:	e03a      	b.n	800a580 <HCD_HC_IN_IRQHandler+0x444>
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4613      	mov	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	00db      	lsls	r3, r3, #3
 800a516:	440b      	add	r3, r1
 800a518:	333f      	adds	r3, #63	; 0x3f
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d12f      	bne.n	800a580 <HCD_HC_IN_IRQHandler+0x444>
 800a520:	6879      	ldr	r1, [r7, #4]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	4613      	mov	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	440b      	add	r3, r1
 800a52e:	335c      	adds	r3, #92	; 0x5c
 800a530:	2201      	movs	r2, #1
 800a532:	701a      	strb	r2, [r3, #0]
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	4613      	mov	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	440b      	add	r3, r1
 800a542:	3350      	adds	r3, #80	; 0x50
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	f083 0301 	eor.w	r3, r3, #1
 800a54a:	b2d8      	uxtb	r0, r3
 800a54c:	6879      	ldr	r1, [r7, #4]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	440b      	add	r3, r1
 800a55a:	3350      	adds	r3, #80	; 0x50
 800a55c:	4602      	mov	r2, r0
 800a55e:	701a      	strb	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	b2d8      	uxtb	r0, r3
 800a564:	6879      	ldr	r1, [r7, #4]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	4613      	mov	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	440b      	add	r3, r1
 800a572:	335c      	adds	r3, #92	; 0x5c
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	4601      	mov	r1, r0
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f013 fb56 	bl	801dc2c <HAL_HCD_HC_NotifyURBChange_Callback>
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	440b      	add	r3, r1
 800a58e:	3350      	adds	r3, #80	; 0x50
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	f083 0301 	eor.w	r3, r3, #1
 800a596:	b2d8      	uxtb	r0, r3
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4613      	mov	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	440b      	add	r3, r1
 800a5a6:	3350      	adds	r3, #80	; 0x50
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	701a      	strb	r2, [r3, #0]
 800a5ac:	e1f7      	b.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f003 0302 	and.w	r3, r3, #2
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	f040 811a 	bne.w	800a7fa <HCD_HC_IN_IRQHandler+0x6be>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	015a      	lsls	r2, r3, #5
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	0151      	lsls	r1, r2, #5
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	440a      	add	r2, r1
 800a5dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5e0:	f023 0302 	bic.w	r3, r3, #2
 800a5e4:	60d3      	str	r3, [r2, #12]
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	440b      	add	r3, r1
 800a5f4:	335d      	adds	r3, #93	; 0x5d
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d10a      	bne.n	800a612 <HCD_HC_IN_IRQHandler+0x4d6>
 800a5fc:	6879      	ldr	r1, [r7, #4]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	4613      	mov	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	00db      	lsls	r3, r3, #3
 800a608:	440b      	add	r3, r1
 800a60a:	335c      	adds	r3, #92	; 0x5c
 800a60c:	2201      	movs	r2, #1
 800a60e:	701a      	strb	r2, [r3, #0]
 800a610:	e0d9      	b.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	440b      	add	r3, r1
 800a620:	335d      	adds	r3, #93	; 0x5d
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b05      	cmp	r3, #5
 800a626:	d10a      	bne.n	800a63e <HCD_HC_IN_IRQHandler+0x502>
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	440b      	add	r3, r1
 800a636:	335c      	adds	r3, #92	; 0x5c
 800a638:	2205      	movs	r2, #5
 800a63a:	701a      	strb	r2, [r3, #0]
 800a63c:	e0c3      	b.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	4613      	mov	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4413      	add	r3, r2
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	440b      	add	r3, r1
 800a64c:	335d      	adds	r3, #93	; 0x5d
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	2b06      	cmp	r3, #6
 800a652:	d00a      	beq.n	800a66a <HCD_HC_IN_IRQHandler+0x52e>
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4613      	mov	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	440b      	add	r3, r1
 800a662:	335d      	adds	r3, #93	; 0x5d
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b08      	cmp	r3, #8
 800a668:	d156      	bne.n	800a718 <HCD_HC_IN_IRQHandler+0x5dc>
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	440b      	add	r3, r1
 800a678:	3358      	adds	r3, #88	; 0x58
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	1c59      	adds	r1, r3, #1
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	4613      	mov	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	00db      	lsls	r3, r3, #3
 800a68a:	4403      	add	r3, r0
 800a68c:	3358      	adds	r3, #88	; 0x58
 800a68e:	6019      	str	r1, [r3, #0]
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	4613      	mov	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	440b      	add	r3, r1
 800a69e:	3358      	adds	r3, #88	; 0x58
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d914      	bls.n	800a6d0 <HCD_HC_IN_IRQHandler+0x594>
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	440b      	add	r3, r1
 800a6b4:	3358      	adds	r3, #88	; 0x58
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	00db      	lsls	r3, r3, #3
 800a6c6:	440b      	add	r3, r1
 800a6c8:	335c      	adds	r3, #92	; 0x5c
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	701a      	strb	r2, [r3, #0]
 800a6ce:	e009      	b.n	800a6e4 <HCD_HC_IN_IRQHandler+0x5a8>
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	440b      	add	r3, r1
 800a6de:	335c      	adds	r3, #92	; 0x5c
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	701a      	strb	r2, [r3, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	60bb      	str	r3, [r7, #8]
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6fa:	60bb      	str	r3, [r7, #8]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a702:	60bb      	str	r3, [r7, #8]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	015a      	lsls	r2, r3, #5
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	4413      	add	r3, r2
 800a70c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a710:	461a      	mov	r2, r3
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	e056      	b.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	440b      	add	r3, r1
 800a726:	335d      	adds	r3, #93	; 0x5d
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d123      	bne.n	800a776 <HCD_HC_IN_IRQHandler+0x63a>
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4613      	mov	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	440b      	add	r3, r1
 800a73c:	335c      	adds	r3, #92	; 0x5c
 800a73e:	2202      	movs	r2, #2
 800a740:	701a      	strb	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60bb      	str	r3, [r7, #8]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a758:	60bb      	str	r3, [r7, #8]
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a760:	60bb      	str	r3, [r7, #8]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a76e:	461a      	mov	r2, r3
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	e027      	b.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	00db      	lsls	r3, r3, #3
 800a782:	440b      	add	r3, r1
 800a784:	335d      	adds	r3, #93	; 0x5d
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	2b07      	cmp	r3, #7
 800a78a:	d11c      	bne.n	800a7c6 <HCD_HC_IN_IRQHandler+0x68a>
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	440b      	add	r3, r1
 800a79a:	3358      	adds	r3, #88	; 0x58
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	1c59      	adds	r1, r3, #1
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4403      	add	r3, r0
 800a7ae:	3358      	adds	r3, #88	; 0x58
 800a7b0:	6019      	str	r1, [r3, #0]
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	00db      	lsls	r3, r3, #3
 800a7be:	440b      	add	r3, r1
 800a7c0:	335c      	adds	r3, #92	; 0x5c
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	701a      	strb	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	015a      	lsls	r2, r3, #5
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	6093      	str	r3, [r2, #8]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	b2d8      	uxtb	r0, r3
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	440b      	add	r3, r1
 800a7ea:	335c      	adds	r3, #92	; 0x5c
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	4601      	mov	r1, r0
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f013 fa1a 	bl	801dc2c <HAL_HCD_HC_NotifyURBChange_Callback>
 800a7f8:	e0d1      	b.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	4413      	add	r3, r2
 800a802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80c:	2b80      	cmp	r3, #128	; 0x80
 800a80e:	d13e      	bne.n	800a88e <HCD_HC_IN_IRQHandler+0x752>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	015a      	lsls	r2, r3, #5
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	4413      	add	r3, r2
 800a818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	0151      	lsls	r1, r2, #5
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	440a      	add	r2, r1
 800a826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a82a:	f043 0302 	orr.w	r3, r3, #2
 800a82e:	60d3      	str	r3, [r2, #12]
 800a830:	6879      	ldr	r1, [r7, #4]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	440b      	add	r3, r1
 800a83e:	3358      	adds	r3, #88	; 0x58
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	1c59      	adds	r1, r3, #1
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	4403      	add	r3, r0
 800a852:	3358      	adds	r3, #88	; 0x58
 800a854:	6019      	str	r1, [r3, #0]
 800a856:	6879      	ldr	r1, [r7, #4]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	00db      	lsls	r3, r3, #3
 800a862:	440b      	add	r3, r1
 800a864:	335d      	adds	r3, #93	; 0x5d
 800a866:	2206      	movs	r2, #6
 800a868:	701a      	strb	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	b2d2      	uxtb	r2, r2
 800a872:	4611      	mov	r1, r2
 800a874:	4618      	mov	r0, r3
 800a876:	f008 feec 	bl	8013652 <USB_HC_Halt>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	4413      	add	r3, r2
 800a882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a886:	461a      	mov	r2, r3
 800a888:	2380      	movs	r3, #128	; 0x80
 800a88a:	6093      	str	r3, [r2, #8]
 800a88c:	e087      	b.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	4413      	add	r3, r2
 800a896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f003 0310 	and.w	r3, r3, #16
 800a8a0:	2b10      	cmp	r3, #16
 800a8a2:	d17c      	bne.n	800a99e <HCD_HC_IN_IRQHandler+0x862>
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	00db      	lsls	r3, r3, #3
 800a8b0:	440b      	add	r3, r1
 800a8b2:	333f      	adds	r3, #63	; 0x3f
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	d122      	bne.n	800a900 <HCD_HC_IN_IRQHandler+0x7c4>
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3358      	adds	r3, #88	; 0x58
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	015a      	lsls	r2, r3, #5
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	0151      	lsls	r1, r2, #5
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	440a      	add	r2, r1
 800a8e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8e8:	f043 0302 	orr.w	r3, r3, #2
 800a8ec:	60d3      	str	r3, [r2, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	b2d2      	uxtb	r2, r2
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f008 feaa 	bl	8013652 <USB_HC_Halt>
 800a8fe:	e045      	b.n	800a98c <HCD_HC_IN_IRQHandler+0x850>
 800a900:	6879      	ldr	r1, [r7, #4]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	00db      	lsls	r3, r3, #3
 800a90c:	440b      	add	r3, r1
 800a90e:	333f      	adds	r3, #63	; 0x3f
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00a      	beq.n	800a92c <HCD_HC_IN_IRQHandler+0x7f0>
 800a916:	6879      	ldr	r1, [r7, #4]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	00db      	lsls	r3, r3, #3
 800a922:	440b      	add	r3, r1
 800a924:	333f      	adds	r3, #63	; 0x3f
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d12f      	bne.n	800a98c <HCD_HC_IN_IRQHandler+0x850>
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	4613      	mov	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	00db      	lsls	r3, r3, #3
 800a938:	440b      	add	r3, r1
 800a93a:	3358      	adds	r3, #88	; 0x58
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d121      	bne.n	800a98c <HCD_HC_IN_IRQHandler+0x850>
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	440b      	add	r3, r1
 800a956:	335d      	adds	r3, #93	; 0x5d
 800a958:	2203      	movs	r2, #3
 800a95a:	701a      	strb	r2, [r3, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	4413      	add	r3, r2
 800a964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	0151      	lsls	r1, r2, #5
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	440a      	add	r2, r1
 800a972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a976:	f043 0302 	orr.w	r3, r3, #2
 800a97a:	60d3      	str	r3, [r2, #12]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	b2d2      	uxtb	r2, r2
 800a984:	4611      	mov	r1, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f008 fe63 	bl	8013652 <USB_HC_Halt>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	015a      	lsls	r2, r3, #5
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	4413      	add	r3, r2
 800a994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a998:	461a      	mov	r2, r3
 800a99a:	2310      	movs	r3, #16
 800a99c:	6093      	str	r3, [r2, #8]
 800a99e:	bf00      	nop
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <HCD_HC_OUT_IRQHandler>:
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b086      	sub	sp, #24
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	70fb      	strb	r3, [r7, #3]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	617b      	str	r3, [r7, #20]
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	613b      	str	r3, [r7, #16]
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d119      	bne.n	800aa0a <HCD_HC_OUT_IRQHandler+0x64>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	2304      	movs	r3, #4
 800a9e6:	6093      	str	r3, [r2, #8]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	0151      	lsls	r1, r2, #5
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	440a      	add	r2, r1
 800a9fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa02:	f043 0302 	orr.w	r3, r3, #2
 800aa06:	60d3      	str	r3, [r2, #12]
 800aa08:	e33e      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	f003 0320 	and.w	r3, r3, #32
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	d141      	bne.n	800aaa4 <HCD_HC_OUT_IRQHandler+0xfe>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	015a      	lsls	r2, r3, #5
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	4413      	add	r3, r2
 800aa28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	2320      	movs	r3, #32
 800aa30:	6093      	str	r3, [r2, #8]
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4613      	mov	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	440b      	add	r3, r1
 800aa40:	333d      	adds	r3, #61	; 0x3d
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	f040 831f 	bne.w	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800aa4a:	6879      	ldr	r1, [r7, #4]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	00db      	lsls	r3, r3, #3
 800aa56:	440b      	add	r3, r1
 800aa58:	333d      	adds	r3, #61	; 0x3d
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4613      	mov	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	440b      	add	r3, r1
 800aa6c:	335c      	adds	r3, #92	; 0x5c
 800aa6e:	2202      	movs	r2, #2
 800aa70:	701a      	strb	r2, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	0151      	lsls	r1, r2, #5
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	440a      	add	r2, r1
 800aa88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa8c:	f043 0302 	orr.w	r3, r3, #2
 800aa90:	60d3      	str	r3, [r2, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f008 fdd8 	bl	8013652 <USB_HC_Halt>
 800aaa2:	e2f1      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab6:	2b40      	cmp	r3, #64	; 0x40
 800aab8:	d13f      	bne.n	800ab3a <HCD_HC_OUT_IRQHandler+0x194>
 800aaba:	6879      	ldr	r1, [r7, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	00db      	lsls	r3, r3, #3
 800aac6:	440b      	add	r3, r1
 800aac8:	335d      	adds	r3, #93	; 0x5d
 800aaca:	2204      	movs	r2, #4
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	4613      	mov	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	440b      	add	r3, r1
 800aadc:	333d      	adds	r3, #61	; 0x3d
 800aade:	2201      	movs	r2, #1
 800aae0:	701a      	strb	r2, [r3, #0]
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	440b      	add	r3, r1
 800aaf0:	3358      	adds	r3, #88	; 0x58
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	0151      	lsls	r1, r2, #5
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	440a      	add	r2, r1
 800ab0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab10:	f043 0302 	orr.w	r3, r3, #2
 800ab14:	60d3      	str	r3, [r2, #12]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	b2d2      	uxtb	r2, r2
 800ab1e:	4611      	mov	r1, r2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f008 fd96 	bl	8013652 <USB_HC_Halt>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab32:	461a      	mov	r2, r3
 800ab34:	2340      	movs	r3, #64	; 0x40
 800ab36:	6093      	str	r3, [r2, #8]
 800ab38:	e2a6      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab50:	d122      	bne.n	800ab98 <HCD_HC_OUT_IRQHandler+0x1f2>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	0151      	lsls	r1, r2, #5
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	440a      	add	r2, r1
 800ab68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab6c:	f043 0302 	orr.w	r3, r3, #2
 800ab70:	60d3      	str	r3, [r2, #12]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	b2d2      	uxtb	r2, r2
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f008 fd68 	bl	8013652 <USB_HC_Halt>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab94:	6093      	str	r3, [r2, #8]
 800ab96:	e277      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d135      	bne.n	800ac1a <HCD_HC_OUT_IRQHandler+0x274>
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	00db      	lsls	r3, r3, #3
 800abba:	440b      	add	r3, r1
 800abbc:	3358      	adds	r3, #88	; 0x58
 800abbe:	2200      	movs	r2, #0
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	0151      	lsls	r1, r2, #5
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	440a      	add	r2, r1
 800abd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abdc:	f043 0302 	orr.w	r3, r3, #2
 800abe0:	60d3      	str	r3, [r2, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	b2d2      	uxtb	r2, r2
 800abea:	4611      	mov	r1, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f008 fd30 	bl	8013652 <USB_HC_Halt>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	015a      	lsls	r2, r3, #5
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abfe:	461a      	mov	r2, r3
 800ac00:	2301      	movs	r3, #1
 800ac02:	6093      	str	r3, [r2, #8]
 800ac04:	6879      	ldr	r1, [r7, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	440b      	add	r3, r1
 800ac12:	335d      	adds	r3, #93	; 0x5d
 800ac14:	2201      	movs	r2, #1
 800ac16:	701a      	strb	r2, [r3, #0]
 800ac18:	e236      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	015a      	lsls	r2, r3, #5
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	4413      	add	r3, r2
 800ac22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d12b      	bne.n	800ac88 <HCD_HC_OUT_IRQHandler+0x2e2>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	015a      	lsls	r2, r3, #5
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	4413      	add	r3, r2
 800ac38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	2308      	movs	r3, #8
 800ac40:	6093      	str	r3, [r2, #8]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	015a      	lsls	r2, r3, #5
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	4413      	add	r3, r2
 800ac4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	0151      	lsls	r1, r2, #5
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	440a      	add	r2, r1
 800ac58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac5c:	f043 0302 	orr.w	r3, r3, #2
 800ac60:	60d3      	str	r3, [r2, #12]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	b2d2      	uxtb	r2, r2
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f008 fcf0 	bl	8013652 <USB_HC_Halt>
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4613      	mov	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	440b      	add	r3, r1
 800ac80:	335d      	adds	r3, #93	; 0x5d
 800ac82:	2205      	movs	r2, #5
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	e1ff      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f003 0310 	and.w	r3, r3, #16
 800ac9a:	2b10      	cmp	r3, #16
 800ac9c:	d155      	bne.n	800ad4a <HCD_HC_OUT_IRQHandler+0x3a4>
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4613      	mov	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	440b      	add	r3, r1
 800acac:	3358      	adds	r3, #88	; 0x58
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	440b      	add	r3, r1
 800acc0:	335d      	adds	r3, #93	; 0x5d
 800acc2:	2203      	movs	r2, #3
 800acc4:	701a      	strb	r2, [r3, #0]
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4613      	mov	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	440b      	add	r3, r1
 800acd4:	333d      	adds	r3, #61	; 0x3d
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d114      	bne.n	800ad06 <HCD_HC_OUT_IRQHandler+0x360>
 800acdc:	6879      	ldr	r1, [r7, #4]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4613      	mov	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	00db      	lsls	r3, r3, #3
 800ace8:	440b      	add	r3, r1
 800acea:	333c      	adds	r3, #60	; 0x3c
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d109      	bne.n	800ad06 <HCD_HC_OUT_IRQHandler+0x360>
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	4613      	mov	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	440b      	add	r3, r1
 800ad00:	333d      	adds	r3, #61	; 0x3d
 800ad02:	2201      	movs	r2, #1
 800ad04:	701a      	strb	r2, [r3, #0]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	0151      	lsls	r1, r2, #5
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	440a      	add	r2, r1
 800ad1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad20:	f043 0302 	orr.w	r3, r3, #2
 800ad24:	60d3      	str	r3, [r2, #12]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	b2d2      	uxtb	r2, r2
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f008 fc8e 	bl	8013652 <USB_HC_Halt>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad42:	461a      	mov	r2, r3
 800ad44:	2310      	movs	r3, #16
 800ad46:	6093      	str	r3, [r2, #8]
 800ad48:	e19e      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	015a      	lsls	r2, r3, #5
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	4413      	add	r3, r2
 800ad52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad5c:	2b80      	cmp	r3, #128	; 0x80
 800ad5e:	d12b      	bne.n	800adb8 <HCD_HC_OUT_IRQHandler+0x412>
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	015a      	lsls	r2, r3, #5
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	4413      	add	r3, r2
 800ad68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	0151      	lsls	r1, r2, #5
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	440a      	add	r2, r1
 800ad76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad7a:	f043 0302 	orr.w	r3, r3, #2
 800ad7e:	60d3      	str	r3, [r2, #12]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	b2d2      	uxtb	r2, r2
 800ad88:	4611      	mov	r1, r2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f008 fc61 	bl	8013652 <USB_HC_Halt>
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	440b      	add	r3, r1
 800ad9e:	335d      	adds	r3, #93	; 0x5d
 800ada0:	2206      	movs	r2, #6
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	015a      	lsls	r2, r3, #5
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	4413      	add	r3, r2
 800adac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb0:	461a      	mov	r2, r3
 800adb2:	2380      	movs	r3, #128	; 0x80
 800adb4:	6093      	str	r3, [r2, #8]
 800adb6:	e167      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adce:	d135      	bne.n	800ae3c <HCD_HC_OUT_IRQHandler+0x496>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	4413      	add	r3, r2
 800add8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	0151      	lsls	r1, r2, #5
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	440a      	add	r2, r1
 800ade6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adea:	f043 0302 	orr.w	r3, r3, #2
 800adee:	60d3      	str	r3, [r2, #12]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	b2d2      	uxtb	r2, r2
 800adf8:	4611      	mov	r1, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f008 fc29 	bl	8013652 <USB_HC_Halt>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	2310      	movs	r3, #16
 800ae10:	6093      	str	r3, [r2, #8]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae24:	6093      	str	r3, [r2, #8]
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	440b      	add	r3, r1
 800ae34:	335d      	adds	r3, #93	; 0x5d
 800ae36:	2208      	movs	r2, #8
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	e125      	b.n	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	f040 811a 	bne.w	800b088 <HCD_HC_OUT_IRQHandler+0x6e2>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	0151      	lsls	r1, r2, #5
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	440a      	add	r2, r1
 800ae6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae6e:	f023 0302 	bic.w	r3, r3, #2
 800ae72:	60d3      	str	r3, [r2, #12]
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	00db      	lsls	r3, r3, #3
 800ae80:	440b      	add	r3, r1
 800ae82:	335d      	adds	r3, #93	; 0x5d
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d137      	bne.n	800aefa <HCD_HC_OUT_IRQHandler+0x554>
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	440b      	add	r3, r1
 800ae98:	335c      	adds	r3, #92	; 0x5c
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4613      	mov	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	00db      	lsls	r3, r3, #3
 800aeaa:	440b      	add	r3, r1
 800aeac:	333f      	adds	r3, #63	; 0x3f
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d00b      	beq.n	800aecc <HCD_HC_OUT_IRQHandler+0x526>
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	440b      	add	r3, r1
 800aec2:	333f      	adds	r3, #63	; 0x3f
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	f040 80c5 	bne.w	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
 800aecc:	6879      	ldr	r1, [r7, #4]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	4613      	mov	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	440b      	add	r3, r1
 800aeda:	3351      	adds	r3, #81	; 0x51
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	f083 0301 	eor.w	r3, r3, #1
 800aee2:	b2d8      	uxtb	r0, r3
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	440b      	add	r3, r1
 800aef2:	3351      	adds	r3, #81	; 0x51
 800aef4:	4602      	mov	r2, r0
 800aef6:	701a      	strb	r2, [r3, #0]
 800aef8:	e0ad      	b.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	4613      	mov	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	440b      	add	r3, r1
 800af08:	335d      	adds	r3, #93	; 0x5d
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b03      	cmp	r3, #3
 800af0e:	d10a      	bne.n	800af26 <HCD_HC_OUT_IRQHandler+0x580>
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	440b      	add	r3, r1
 800af1e:	335c      	adds	r3, #92	; 0x5c
 800af20:	2202      	movs	r2, #2
 800af22:	701a      	strb	r2, [r3, #0]
 800af24:	e097      	b.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	00db      	lsls	r3, r3, #3
 800af32:	440b      	add	r3, r1
 800af34:	335d      	adds	r3, #93	; 0x5d
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d10a      	bne.n	800af52 <HCD_HC_OUT_IRQHandler+0x5ac>
 800af3c:	6879      	ldr	r1, [r7, #4]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	00db      	lsls	r3, r3, #3
 800af48:	440b      	add	r3, r1
 800af4a:	335c      	adds	r3, #92	; 0x5c
 800af4c:	2202      	movs	r2, #2
 800af4e:	701a      	strb	r2, [r3, #0]
 800af50:	e081      	b.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4613      	mov	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	440b      	add	r3, r1
 800af60:	335d      	adds	r3, #93	; 0x5d
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b05      	cmp	r3, #5
 800af66:	d10a      	bne.n	800af7e <HCD_HC_OUT_IRQHandler+0x5d8>
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	4613      	mov	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	00db      	lsls	r3, r3, #3
 800af74:	440b      	add	r3, r1
 800af76:	335c      	adds	r3, #92	; 0x5c
 800af78:	2205      	movs	r2, #5
 800af7a:	701a      	strb	r2, [r3, #0]
 800af7c:	e06b      	b.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
 800af7e:	6879      	ldr	r1, [r7, #4]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	00db      	lsls	r3, r3, #3
 800af8a:	440b      	add	r3, r1
 800af8c:	335d      	adds	r3, #93	; 0x5d
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	2b06      	cmp	r3, #6
 800af92:	d00a      	beq.n	800afaa <HCD_HC_OUT_IRQHandler+0x604>
 800af94:	6879      	ldr	r1, [r7, #4]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	4613      	mov	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	00db      	lsls	r3, r3, #3
 800afa0:	440b      	add	r3, r1
 800afa2:	335d      	adds	r3, #93	; 0x5d
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	2b08      	cmp	r3, #8
 800afa8:	d155      	bne.n	800b056 <HCD_HC_OUT_IRQHandler+0x6b0>
 800afaa:	6879      	ldr	r1, [r7, #4]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	440b      	add	r3, r1
 800afb8:	3358      	adds	r3, #88	; 0x58
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	1c59      	adds	r1, r3, #1
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	4613      	mov	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4413      	add	r3, r2
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	4403      	add	r3, r0
 800afcc:	3358      	adds	r3, #88	; 0x58
 800afce:	6019      	str	r1, [r3, #0]
 800afd0:	6879      	ldr	r1, [r7, #4]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	4613      	mov	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	00db      	lsls	r3, r3, #3
 800afdc:	440b      	add	r3, r1
 800afde:	3358      	adds	r3, #88	; 0x58
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d914      	bls.n	800b010 <HCD_HC_OUT_IRQHandler+0x66a>
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	4613      	mov	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	00db      	lsls	r3, r3, #3
 800aff2:	440b      	add	r3, r1
 800aff4:	3358      	adds	r3, #88	; 0x58
 800aff6:	2200      	movs	r2, #0
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	440b      	add	r3, r1
 800b008:	335c      	adds	r3, #92	; 0x5c
 800b00a:	2204      	movs	r2, #4
 800b00c:	701a      	strb	r2, [r3, #0]
 800b00e:	e009      	b.n	800b024 <HCD_HC_OUT_IRQHandler+0x67e>
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	4613      	mov	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	440b      	add	r3, r1
 800b01e:	335c      	adds	r3, #92	; 0x5c
 800b020:	2202      	movs	r2, #2
 800b022:	701a      	strb	r2, [r3, #0]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60bb      	str	r3, [r7, #8]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b03a:	60bb      	str	r3, [r7, #8]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b042:	60bb      	str	r3, [r7, #8]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b050:	461a      	mov	r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	6013      	str	r3, [r2, #0]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b062:	461a      	mov	r2, r3
 800b064:	2302      	movs	r3, #2
 800b066:	6093      	str	r3, [r2, #8]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	b2d8      	uxtb	r0, r3
 800b06c:	6879      	ldr	r1, [r7, #4]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	4613      	mov	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	440b      	add	r3, r1
 800b07a:	335c      	adds	r3, #92	; 0x5c
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	4601      	mov	r1, r0
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f012 fdd2 	bl	801dc2c <HAL_HCD_HC_NotifyURBChange_Callback>
 800b088:	bf00      	nop
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HCD_RXQLVL_IRQHandler>:
 800b090:	b580      	push	{r7, lr}
 800b092:	b08a      	sub	sp, #40	; 0x28
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	623b      	str	r3, [r7, #32]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	61fb      	str	r3, [r7, #28]
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	f003 030f 	and.w	r3, r3, #15
 800b0b0:	61bb      	str	r3, [r7, #24]
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	0c5b      	lsrs	r3, r3, #17
 800b0b6:	f003 030f 	and.w	r3, r3, #15
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	091b      	lsrs	r3, r3, #4
 800b0c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0c4:	613b      	str	r3, [r7, #16]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d003      	beq.n	800b0d4 <HCD_RXQLVL_IRQHandler+0x44>
 800b0cc:	2b05      	cmp	r3, #5
 800b0ce:	f000 8082 	beq.w	800b1d6 <HCD_RXQLVL_IRQHandler+0x146>
 800b0d2:	e083      	b.n	800b1dc <HCD_RXQLVL_IRQHandler+0x14c>
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d07f      	beq.n	800b1da <HCD_RXQLVL_IRQHandler+0x14a>
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	00db      	lsls	r3, r3, #3
 800b0e6:	440b      	add	r3, r1
 800b0e8:	3344      	adds	r3, #68	; 0x44
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d074      	beq.n	800b1da <HCD_RXQLVL_IRQHandler+0x14a>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6818      	ldr	r0, [r3, #0]
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	69ba      	ldr	r2, [r7, #24]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	440b      	add	r3, r1
 800b102:	3344      	adds	r3, #68	; 0x44
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	b292      	uxth	r2, r2
 800b10a:	4619      	mov	r1, r3
 800b10c:	f007 fe4d 	bl	8012daa <USB_ReadPacket>
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	440b      	add	r3, r1
 800b11e:	3344      	adds	r3, #68	; 0x44
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	18d1      	adds	r1, r2, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	69ba      	ldr	r2, [r7, #24]
 800b12a:	4613      	mov	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4413      	add	r3, r2
 800b130:	00db      	lsls	r3, r3, #3
 800b132:	4403      	add	r3, r0
 800b134:	3344      	adds	r3, #68	; 0x44
 800b136:	6019      	str	r1, [r3, #0]
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	69ba      	ldr	r2, [r7, #24]
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	440b      	add	r3, r1
 800b146:	334c      	adds	r3, #76	; 0x4c
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	18d1      	adds	r1, r2, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	00db      	lsls	r3, r3, #3
 800b15a:	4403      	add	r3, r0
 800b15c:	334c      	adds	r3, #76	; 0x4c
 800b15e:	6019      	str	r1, [r3, #0]
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	6a3b      	ldr	r3, [r7, #32]
 800b166:	4413      	add	r3, r2
 800b168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b16c:	691a      	ldr	r2, [r3, #16]
 800b16e:	4b1d      	ldr	r3, [pc, #116]	; (800b1e4 <HCD_RXQLVL_IRQHandler+0x154>)
 800b170:	4013      	ands	r3, r2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d031      	beq.n	800b1da <HCD_RXQLVL_IRQHandler+0x14a>
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b194:	60fb      	str	r3, [r7, #12]
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	6879      	ldr	r1, [r7, #4]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	440b      	add	r3, r1
 800b1b6:	3350      	adds	r3, #80	; 0x50
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	f083 0301 	eor.w	r3, r3, #1
 800b1be:	b2d8      	uxtb	r0, r3
 800b1c0:	6879      	ldr	r1, [r7, #4]
 800b1c2:	69ba      	ldr	r2, [r7, #24]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	440b      	add	r3, r1
 800b1ce:	3350      	adds	r3, #80	; 0x50
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	701a      	strb	r2, [r3, #0]
 800b1d4:	e001      	b.n	800b1da <HCD_RXQLVL_IRQHandler+0x14a>
 800b1d6:	bf00      	nop
 800b1d8:	e000      	b.n	800b1dc <HCD_RXQLVL_IRQHandler+0x14c>
 800b1da:	bf00      	nop
 800b1dc:	bf00      	nop
 800b1de:	3728      	adds	r7, #40	; 0x28
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	1ff80000 	.word	0x1ff80000

0800b1e8 <HCD_Port_IRQHandler>:
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	617b      	str	r3, [r7, #20]
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	613b      	str	r3, [r7, #16]
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	60bb      	str	r3, [r7, #8]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b214:	60bb      	str	r3, [r7, #8]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f003 0302 	and.w	r3, r3, #2
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d10b      	bne.n	800b238 <HCD_Port_IRQHandler+0x50>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b01      	cmp	r3, #1
 800b228:	d102      	bne.n	800b230 <HCD_Port_IRQHandler+0x48>
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f012 fce2 	bl	801dbf4 <HAL_HCD_Connect_Callback>
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	f043 0302 	orr.w	r3, r3, #2
 800b236:	60bb      	str	r3, [r7, #8]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f003 0308 	and.w	r3, r3, #8
 800b23e:	2b08      	cmp	r3, #8
 800b240:	d132      	bne.n	800b2a8 <HCD_Port_IRQHandler+0xc0>
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	f043 0308 	orr.w	r3, r3, #8
 800b248:	60bb      	str	r3, [r7, #8]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b04      	cmp	r3, #4
 800b252:	d126      	bne.n	800b2a2 <HCD_Port_IRQHandler+0xba>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d113      	bne.n	800b284 <HCD_Port_IRQHandler+0x9c>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b266:	d106      	bne.n	800b276 <HCD_Port_IRQHandler+0x8e>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2102      	movs	r1, #2
 800b26e:	4618      	mov	r0, r3
 800b270:	f007 feca 	bl	8013008 <USB_InitFSLSPClkSel>
 800b274:	e011      	b.n	800b29a <HCD_Port_IRQHandler+0xb2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2101      	movs	r1, #1
 800b27c:	4618      	mov	r0, r3
 800b27e:	f007 fec3 	bl	8013008 <USB_InitFSLSPClkSel>
 800b282:	e00a      	b.n	800b29a <HCD_Port_IRQHandler+0xb2>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d106      	bne.n	800b29a <HCD_Port_IRQHandler+0xb2>
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b292:	461a      	mov	r2, r3
 800b294:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b298:	6053      	str	r3, [r2, #4]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f012 fcd4 	bl	801dc48 <HAL_HCD_PortEnabled_Callback>
 800b2a0:	e002      	b.n	800b2a8 <HCD_Port_IRQHandler+0xc0>
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f012 fcde 	bl	801dc64 <HAL_HCD_PortDisabled_Callback>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f003 0320 	and.w	r3, r3, #32
 800b2ae:	2b20      	cmp	r3, #32
 800b2b0:	d103      	bne.n	800b2ba <HCD_Port_IRQHandler+0xd2>
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f043 0320 	orr.w	r3, r3, #32
 800b2b8:	60bb      	str	r3, [r7, #8]
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	bf00      	nop
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <HAL_I2C_Init>:
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <HAL_I2C_Init+0x12>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e07f      	b.n	800b3e2 <HAL_I2C_Init+0x112>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d106      	bne.n	800b2fc <HAL_I2C_Init+0x2c>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7fb ffd8 	bl	80072ac <HAL_I2C_MspInit>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2224      	movs	r2, #36	; 0x24
 800b300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 0201 	bic.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b320:	611a      	str	r2, [r3, #16]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	689a      	ldr	r2, [r3, #8]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b330:	609a      	str	r2, [r3, #8]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d107      	bne.n	800b34a <HAL_I2C_Init+0x7a>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689a      	ldr	r2, [r3, #8]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b346:	609a      	str	r2, [r3, #8]
 800b348:	e006      	b.n	800b358 <HAL_I2C_Init+0x88>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	689a      	ldr	r2, [r3, #8]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b356:	609a      	str	r2, [r3, #8]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d104      	bne.n	800b36a <HAL_I2C_Init+0x9a>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b368:	605a      	str	r2, [r3, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6859      	ldr	r1, [r3, #4]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	4b1d      	ldr	r3, [pc, #116]	; (800b3ec <HAL_I2C_Init+0x11c>)
 800b376:	430b      	orrs	r3, r1
 800b378:	6053      	str	r3, [r2, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68da      	ldr	r2, [r3, #12]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b388:	60da      	str	r2, [r3, #12]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	691a      	ldr	r2, [r3, #16]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	ea42 0103 	orr.w	r1, r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	021a      	lsls	r2, r3, #8
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	60da      	str	r2, [r3, #12]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	69d9      	ldr	r1, [r3, #28]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1a      	ldr	r2, [r3, #32]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f042 0201 	orr.w	r2, r2, #1
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	645a      	str	r2, [r3, #68]	; 0x44
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	631a      	str	r2, [r3, #48]	; 0x30
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	02008000 	.word	0x02008000

0800b3f0 <HAL_I2C_Master_Transmit>:
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b088      	sub	sp, #32
 800b3f4:	af02      	add	r7, sp, #8
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	607a      	str	r2, [r7, #4]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	817b      	strh	r3, [r7, #10]
 800b400:	4613      	mov	r3, r2
 800b402:	813b      	strh	r3, [r7, #8]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b20      	cmp	r3, #32
 800b40e:	f040 80da 	bne.w	800b5c6 <HAL_I2C_Master_Transmit+0x1d6>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d101      	bne.n	800b420 <HAL_I2C_Master_Transmit+0x30>
 800b41c:	2302      	movs	r3, #2
 800b41e:	e0d3      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b428:	f7fc ff0e 	bl	8008248 <HAL_GetTick>
 800b42c:	6178      	str	r0, [r7, #20]
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	2319      	movs	r3, #25
 800b434:	2201      	movs	r2, #1
 800b436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 fcbc 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <HAL_I2C_Master_Transmit+0x5a>
 800b446:	2301      	movs	r3, #1
 800b448:	e0be      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2221      	movs	r2, #33	; 0x21
 800b44e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2210      	movs	r2, #16
 800b456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	645a      	str	r2, [r3, #68]	; 0x44
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	625a      	str	r2, [r3, #36]	; 0x24
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	893a      	ldrh	r2, [r7, #8]
 800b46a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2200      	movs	r2, #0
 800b470:	635a      	str	r2, [r3, #52]	; 0x34
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b476:	b29b      	uxth	r3, r3
 800b478:	2bff      	cmp	r3, #255	; 0xff
 800b47a:	d90e      	bls.n	800b49a <HAL_I2C_Master_Transmit+0xaa>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	22ff      	movs	r2, #255	; 0xff
 800b480:	851a      	strh	r2, [r3, #40]	; 0x28
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b486:	b2da      	uxtb	r2, r3
 800b488:	8979      	ldrh	r1, [r7, #10]
 800b48a:	4b51      	ldr	r3, [pc, #324]	; (800b5d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 fe1e 	bl	800c0d4 <I2C_TransferConfig>
 800b498:	e06c      	b.n	800b574 <HAL_I2C_Master_Transmit+0x184>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	851a      	strh	r2, [r3, #40]	; 0x28
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	8979      	ldrh	r1, [r7, #10]
 800b4ac:	4b48      	ldr	r3, [pc, #288]	; (800b5d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 fe0d 	bl	800c0d4 <I2C_TransferConfig>
 800b4ba:	e05b      	b.n	800b574 <HAL_I2C_Master_Transmit+0x184>
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	6a39      	ldr	r1, [r7, #32]
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f000 fcb9 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <HAL_I2C_Master_Transmit+0xe0>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e07b      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d4:	781a      	ldrb	r2, [r3, #0]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	629a      	str	r2, [r3, #40]	; 0x28
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	1c5a      	adds	r2, r3, #1
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	625a      	str	r2, [r3, #36]	; 0x24
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f8:	3b01      	subs	r3, #1
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	851a      	strh	r2, [r3, #40]	; 0x28
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b504:	b29b      	uxth	r3, r3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d034      	beq.n	800b574 <HAL_I2C_Master_Transmit+0x184>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d130      	bne.n	800b574 <HAL_I2C_Master_Transmit+0x184>
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	2200      	movs	r2, #0
 800b51a:	2180      	movs	r1, #128	; 0x80
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 fc4b 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <HAL_I2C_Master_Transmit+0x13c>
 800b528:	2301      	movs	r3, #1
 800b52a:	e04d      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b530:	b29b      	uxth	r3, r3
 800b532:	2bff      	cmp	r3, #255	; 0xff
 800b534:	d90e      	bls.n	800b554 <HAL_I2C_Master_Transmit+0x164>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	22ff      	movs	r2, #255	; 0xff
 800b53a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b540:	b2da      	uxtb	r2, r3
 800b542:	8979      	ldrh	r1, [r7, #10]
 800b544:	2300      	movs	r3, #0
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f000 fdc1 	bl	800c0d4 <I2C_TransferConfig>
 800b552:	e00f      	b.n	800b574 <HAL_I2C_Master_Transmit+0x184>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b558:	b29a      	uxth	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	851a      	strh	r2, [r3, #40]	; 0x28
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b562:	b2da      	uxtb	r2, r3
 800b564:	8979      	ldrh	r1, [r7, #10]
 800b566:	2300      	movs	r3, #0
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 fdb0 	bl	800c0d4 <I2C_TransferConfig>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b578:	b29b      	uxth	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d19e      	bne.n	800b4bc <HAL_I2C_Master_Transmit+0xcc>
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	6a39      	ldr	r1, [r7, #32]
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 fc98 	bl	800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d001      	beq.n	800b592 <HAL_I2C_Master_Transmit+0x1a2>
 800b58e:	2301      	movs	r3, #1
 800b590:	e01a      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2220      	movs	r2, #32
 800b598:	61da      	str	r2, [r3, #28]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6859      	ldr	r1, [r3, #4]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <HAL_I2C_Master_Transmit+0x1e4>)
 800b5a6:	400b      	ands	r3, r1
 800b5a8:	6053      	str	r3, [r2, #4]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e000      	b.n	800b5c8 <HAL_I2C_Master_Transmit+0x1d8>
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	80002000 	.word	0x80002000
 800b5d4:	fe00e800 	.word	0xfe00e800

0800b5d8 <HAL_I2C_Master_Receive>:
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	607a      	str	r2, [r7, #4]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	817b      	strh	r3, [r7, #10]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	813b      	strh	r3, [r7, #8]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	f040 80db 	bne.w	800b7b0 <HAL_I2C_Master_Receive+0x1d8>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b600:	2b01      	cmp	r3, #1
 800b602:	d101      	bne.n	800b608 <HAL_I2C_Master_Receive+0x30>
 800b604:	2302      	movs	r3, #2
 800b606:	e0d4      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b610:	f7fc fe1a 	bl	8008248 <HAL_GetTick>
 800b614:	6178      	str	r0, [r7, #20]
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	2319      	movs	r3, #25
 800b61c:	2201      	movs	r2, #1
 800b61e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f000 fbc8 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <HAL_I2C_Master_Receive+0x5a>
 800b62e:	2301      	movs	r3, #1
 800b630:	e0bf      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2222      	movs	r2, #34	; 0x22
 800b636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2210      	movs	r2, #16
 800b63e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	645a      	str	r2, [r3, #68]	; 0x44
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	625a      	str	r2, [r3, #36]	; 0x24
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	893a      	ldrh	r2, [r7, #8]
 800b652:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	635a      	str	r2, [r3, #52]	; 0x34
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b65e:	b29b      	uxth	r3, r3
 800b660:	2bff      	cmp	r3, #255	; 0xff
 800b662:	d90e      	bls.n	800b682 <HAL_I2C_Master_Receive+0xaa>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	22ff      	movs	r2, #255	; 0xff
 800b668:	851a      	strh	r2, [r3, #40]	; 0x28
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	8979      	ldrh	r1, [r7, #10]
 800b672:	4b52      	ldr	r3, [pc, #328]	; (800b7bc <HAL_I2C_Master_Receive+0x1e4>)
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 fd2a 	bl	800c0d4 <I2C_TransferConfig>
 800b680:	e06d      	b.n	800b75e <HAL_I2C_Master_Receive+0x186>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b686:	b29a      	uxth	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b690:	b2da      	uxtb	r2, r3
 800b692:	8979      	ldrh	r1, [r7, #10]
 800b694:	4b49      	ldr	r3, [pc, #292]	; (800b7bc <HAL_I2C_Master_Receive+0x1e4>)
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 fd19 	bl	800c0d4 <I2C_TransferConfig>
 800b6a2:	e05c      	b.n	800b75e <HAL_I2C_Master_Receive+0x186>
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	6a39      	ldr	r1, [r7, #32]
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f000 fc41 	bl	800bf30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <HAL_I2C_Master_Receive+0xe0>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e07c      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	625a      	str	r2, [r3, #36]	; 0x24
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	851a      	strh	r2, [r3, #40]	; 0x28
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d034      	beq.n	800b75e <HAL_I2C_Master_Receive+0x186>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d130      	bne.n	800b75e <HAL_I2C_Master_Receive+0x186>
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	2200      	movs	r2, #0
 800b704:	2180      	movs	r1, #128	; 0x80
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 fb56 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <HAL_I2C_Master_Receive+0x13e>
 800b712:	2301      	movs	r3, #1
 800b714:	e04d      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	2bff      	cmp	r3, #255	; 0xff
 800b71e:	d90e      	bls.n	800b73e <HAL_I2C_Master_Receive+0x166>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	22ff      	movs	r2, #255	; 0xff
 800b724:	851a      	strh	r2, [r3, #40]	; 0x28
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	8979      	ldrh	r1, [r7, #10]
 800b72e:	2300      	movs	r3, #0
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 fccc 	bl	800c0d4 <I2C_TransferConfig>
 800b73c:	e00f      	b.n	800b75e <HAL_I2C_Master_Receive+0x186>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b742:	b29a      	uxth	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	851a      	strh	r2, [r3, #40]	; 0x28
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b74c:	b2da      	uxtb	r2, r3
 800b74e:	8979      	ldrh	r1, [r7, #10]
 800b750:	2300      	movs	r3, #0
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 fcbb 	bl	800c0d4 <I2C_TransferConfig>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b762:	b29b      	uxth	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d19d      	bne.n	800b6a4 <HAL_I2C_Master_Receive+0xcc>
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	6a39      	ldr	r1, [r7, #32]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 fba3 	bl	800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <HAL_I2C_Master_Receive+0x1a4>
 800b778:	2301      	movs	r3, #1
 800b77a:	e01a      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2220      	movs	r2, #32
 800b782:	61da      	str	r2, [r3, #28]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6859      	ldr	r1, [r3, #4]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <HAL_I2C_Master_Receive+0x1e8>)
 800b790:	400b      	ands	r3, r1
 800b792:	6053      	str	r3, [r2, #4]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2220      	movs	r2, #32
 800b798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	e000      	b.n	800b7b2 <HAL_I2C_Master_Receive+0x1da>
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3718      	adds	r7, #24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	80002400 	.word	0x80002400
 800b7c0:	fe00e800 	.word	0xfe00e800

0800b7c4 <HAL_I2C_Mem_Write>:
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b088      	sub	sp, #32
 800b7c8:	af02      	add	r7, sp, #8
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	4608      	mov	r0, r1
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	817b      	strh	r3, [r7, #10]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	813b      	strh	r3, [r7, #8]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	80fb      	strh	r3, [r7, #6]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b20      	cmp	r3, #32
 800b7e8:	f040 80f9 	bne.w	800b9de <HAL_I2C_Mem_Write+0x21a>
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <HAL_I2C_Mem_Write+0x34>
 800b7f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d105      	bne.n	800b804 <HAL_I2C_Mem_Write+0x40>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7fe:	645a      	str	r2, [r3, #68]	; 0x44
 800b800:	2301      	movs	r3, #1
 800b802:	e0ed      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d101      	bne.n	800b812 <HAL_I2C_Mem_Write+0x4e>
 800b80e:	2302      	movs	r3, #2
 800b810:	e0e6      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b81a:	f7fc fd15 	bl	8008248 <HAL_GetTick>
 800b81e:	6178      	str	r0, [r7, #20]
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	2319      	movs	r3, #25
 800b826:	2201      	movs	r2, #1
 800b828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 fac3 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <HAL_I2C_Mem_Write+0x78>
 800b838:	2301      	movs	r3, #1
 800b83a:	e0d1      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2221      	movs	r2, #33	; 0x21
 800b840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2240      	movs	r2, #64	; 0x40
 800b848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	645a      	str	r2, [r3, #68]	; 0x44
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6a3a      	ldr	r2, [r7, #32]
 800b856:	625a      	str	r2, [r3, #36]	; 0x24
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b85c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	635a      	str	r2, [r3, #52]	; 0x34
 800b864:	88f8      	ldrh	r0, [r7, #6]
 800b866:	893a      	ldrh	r2, [r7, #8]
 800b868:	8979      	ldrh	r1, [r7, #10]
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	4603      	mov	r3, r0
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 f9d3 	bl	800bc20 <I2C_RequestMemoryWrite>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d005      	beq.n	800b88c <HAL_I2C_Mem_Write+0xc8>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b888:	2301      	movs	r3, #1
 800b88a:	e0a9      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b890:	b29b      	uxth	r3, r3
 800b892:	2bff      	cmp	r3, #255	; 0xff
 800b894:	d90e      	bls.n	800b8b4 <HAL_I2C_Mem_Write+0xf0>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	22ff      	movs	r2, #255	; 0xff
 800b89a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a0:	b2da      	uxtb	r2, r3
 800b8a2:	8979      	ldrh	r1, [r7, #10]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f000 fc11 	bl	800c0d4 <I2C_TransferConfig>
 800b8b2:	e00f      	b.n	800b8d4 <HAL_I2C_Mem_Write+0x110>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	851a      	strh	r2, [r3, #40]	; 0x28
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	8979      	ldrh	r1, [r7, #10]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 fc00 	bl	800c0d4 <I2C_TransferConfig>
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 faad 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <HAL_I2C_Mem_Write+0x124>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e07b      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	781a      	ldrb	r2, [r3, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	629a      	str	r2, [r3, #40]	; 0x28
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	625a      	str	r2, [r3, #36]	; 0x24
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b902:	b29b      	uxth	r3, r3
 800b904:	3b01      	subs	r3, #1
 800b906:	b29a      	uxth	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b910:	3b01      	subs	r3, #1
 800b912:	b29a      	uxth	r2, r3
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	851a      	strh	r2, [r3, #40]	; 0x28
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d034      	beq.n	800b98c <HAL_I2C_Mem_Write+0x1c8>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b926:	2b00      	cmp	r3, #0
 800b928:	d130      	bne.n	800b98c <HAL_I2C_Mem_Write+0x1c8>
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	2200      	movs	r2, #0
 800b932:	2180      	movs	r1, #128	; 0x80
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f000 fa3f 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <HAL_I2C_Mem_Write+0x180>
 800b940:	2301      	movs	r3, #1
 800b942:	e04d      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b948:	b29b      	uxth	r3, r3
 800b94a:	2bff      	cmp	r3, #255	; 0xff
 800b94c:	d90e      	bls.n	800b96c <HAL_I2C_Mem_Write+0x1a8>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	22ff      	movs	r2, #255	; 0xff
 800b952:	851a      	strh	r2, [r3, #40]	; 0x28
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	8979      	ldrh	r1, [r7, #10]
 800b95c:	2300      	movs	r3, #0
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 fbb5 	bl	800c0d4 <I2C_TransferConfig>
 800b96a:	e00f      	b.n	800b98c <HAL_I2C_Mem_Write+0x1c8>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b970:	b29a      	uxth	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	851a      	strh	r2, [r3, #40]	; 0x28
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	8979      	ldrh	r1, [r7, #10]
 800b97e:	2300      	movs	r3, #0
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 fba4 	bl	800c0d4 <I2C_TransferConfig>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b990:	b29b      	uxth	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d19e      	bne.n	800b8d4 <HAL_I2C_Mem_Write+0x110>
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 fa8c 	bl	800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <HAL_I2C_Mem_Write+0x1e6>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e01a      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2220      	movs	r2, #32
 800b9b0:	61da      	str	r2, [r3, #28]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6859      	ldr	r1, [r3, #4]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <HAL_I2C_Mem_Write+0x224>)
 800b9be:	400b      	ands	r3, r1
 800b9c0:	6053      	str	r3, [r2, #4]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2220      	movs	r2, #32
 800b9c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9da:	2300      	movs	r3, #0
 800b9dc:	e000      	b.n	800b9e0 <HAL_I2C_Mem_Write+0x21c>
 800b9de:	2302      	movs	r3, #2
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	fe00e800 	.word	0xfe00e800

0800b9ec <HAL_I2C_Mem_Read>:
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	817b      	strh	r3, [r7, #10]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	813b      	strh	r3, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	80fb      	strh	r3, [r7, #6]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	f040 80fd 	bne.w	800bc0e <HAL_I2C_Mem_Read+0x222>
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <HAL_I2C_Mem_Read+0x34>
 800ba1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d105      	bne.n	800ba2c <HAL_I2C_Mem_Read+0x40>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba26:	645a      	str	r2, [r3, #68]	; 0x44
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e0f1      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d101      	bne.n	800ba3a <HAL_I2C_Mem_Read+0x4e>
 800ba36:	2302      	movs	r3, #2
 800ba38:	e0ea      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba42:	f7fc fc01 	bl	8008248 <HAL_GetTick>
 800ba46:	6178      	str	r0, [r7, #20]
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	2319      	movs	r3, #25
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 f9af 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <HAL_I2C_Mem_Read+0x78>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e0d5      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2222      	movs	r2, #34	; 0x22
 800ba68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2240      	movs	r2, #64	; 0x40
 800ba70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	645a      	str	r2, [r3, #68]	; 0x44
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6a3a      	ldr	r2, [r7, #32]
 800ba7e:	625a      	str	r2, [r3, #36]	; 0x24
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba84:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	635a      	str	r2, [r3, #52]	; 0x34
 800ba8c:	88f8      	ldrh	r0, [r7, #6]
 800ba8e:	893a      	ldrh	r2, [r7, #8]
 800ba90:	8979      	ldrh	r1, [r7, #10]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f000 f913 	bl	800bcc8 <I2C_RequestMemoryRead>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d005      	beq.n	800bab4 <HAL_I2C_Mem_Read+0xc8>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bab0:	2301      	movs	r3, #1
 800bab2:	e0ad      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bab8:	b29b      	uxth	r3, r3
 800baba:	2bff      	cmp	r3, #255	; 0xff
 800babc:	d90e      	bls.n	800badc <HAL_I2C_Mem_Read+0xf0>
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	22ff      	movs	r2, #255	; 0xff
 800bac2:	851a      	strh	r2, [r3, #40]	; 0x28
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	8979      	ldrh	r1, [r7, #10]
 800bacc:	4b52      	ldr	r3, [pc, #328]	; (800bc18 <HAL_I2C_Mem_Read+0x22c>)
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 fafd 	bl	800c0d4 <I2C_TransferConfig>
 800bada:	e00f      	b.n	800bafc <HAL_I2C_Mem_Read+0x110>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	851a      	strh	r2, [r3, #40]	; 0x28
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baea:	b2da      	uxtb	r2, r3
 800baec:	8979      	ldrh	r1, [r7, #10]
 800baee:	4b4a      	ldr	r3, [pc, #296]	; (800bc18 <HAL_I2C_Mem_Read+0x22c>)
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 faec 	bl	800c0d4 <I2C_TransferConfig>
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	2200      	movs	r2, #0
 800bb04:	2104      	movs	r1, #4
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f000 f956 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <HAL_I2C_Mem_Read+0x12a>
 800bb12:	2301      	movs	r3, #1
 800bb14:	e07c      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	b2d2      	uxtb	r2, r2
 800bb22:	701a      	strb	r2, [r3, #0]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	625a      	str	r2, [r3, #36]	; 0x24
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb32:	3b01      	subs	r3, #1
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	851a      	strh	r2, [r3, #40]	; 0x28
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	3b01      	subs	r3, #1
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d034      	beq.n	800bbbc <HAL_I2C_Mem_Read+0x1d0>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d130      	bne.n	800bbbc <HAL_I2C_Mem_Read+0x1d0>
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb60:	2200      	movs	r2, #0
 800bb62:	2180      	movs	r1, #128	; 0x80
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f927 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <HAL_I2C_Mem_Read+0x188>
 800bb70:	2301      	movs	r3, #1
 800bb72:	e04d      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	2bff      	cmp	r3, #255	; 0xff
 800bb7c:	d90e      	bls.n	800bb9c <HAL_I2C_Mem_Read+0x1b0>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	22ff      	movs	r2, #255	; 0xff
 800bb82:	851a      	strh	r2, [r3, #40]	; 0x28
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	8979      	ldrh	r1, [r7, #10]
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 fa9d 	bl	800c0d4 <I2C_TransferConfig>
 800bb9a:	e00f      	b.n	800bbbc <HAL_I2C_Mem_Read+0x1d0>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	851a      	strh	r2, [r3, #40]	; 0x28
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbaa:	b2da      	uxtb	r2, r3
 800bbac:	8979      	ldrh	r1, [r7, #10]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 fa8c 	bl	800c0d4 <I2C_TransferConfig>
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d19a      	bne.n	800bafc <HAL_I2C_Mem_Read+0x110>
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 f974 	bl	800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <HAL_I2C_Mem_Read+0x1ee>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e01a      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2220      	movs	r2, #32
 800bbe0:	61da      	str	r2, [r3, #28]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6859      	ldr	r1, [r3, #4]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	4b0b      	ldr	r3, [pc, #44]	; (800bc1c <HAL_I2C_Mem_Read+0x230>)
 800bbee:	400b      	ands	r3, r1
 800bbf0:	6053      	str	r3, [r2, #4]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2220      	movs	r2, #32
 800bbf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e000      	b.n	800bc10 <HAL_I2C_Mem_Read+0x224>
 800bc0e:	2302      	movs	r3, #2
 800bc10:	4618      	mov	r0, r3
 800bc12:	3718      	adds	r7, #24
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	80002400 	.word	0x80002400
 800bc1c:	fe00e800 	.word	0xfe00e800

0800bc20 <I2C_RequestMemoryWrite>:
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	4608      	mov	r0, r1
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	4603      	mov	r3, r0
 800bc30:	817b      	strh	r3, [r7, #10]
 800bc32:	460b      	mov	r3, r1
 800bc34:	813b      	strh	r3, [r7, #8]
 800bc36:	4613      	mov	r3, r2
 800bc38:	80fb      	strh	r3, [r7, #6]
 800bc3a:	88fb      	ldrh	r3, [r7, #6]
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	8979      	ldrh	r1, [r7, #10]
 800bc40:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <I2C_RequestMemoryWrite+0xa4>)
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 fa43 	bl	800c0d4 <I2C_TransferConfig>
 800bc4e:	69fa      	ldr	r2, [r7, #28]
 800bc50:	69b9      	ldr	r1, [r7, #24]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 f8f0 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <I2C_RequestMemoryWrite+0x42>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e02c      	b.n	800bcbc <I2C_RequestMemoryWrite+0x9c>
 800bc62:	88fb      	ldrh	r3, [r7, #6]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d105      	bne.n	800bc74 <I2C_RequestMemoryWrite+0x54>
 800bc68:	893b      	ldrh	r3, [r7, #8]
 800bc6a:	b2da      	uxtb	r2, r3
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	629a      	str	r2, [r3, #40]	; 0x28
 800bc72:	e015      	b.n	800bca0 <I2C_RequestMemoryWrite+0x80>
 800bc74:	893b      	ldrh	r3, [r7, #8]
 800bc76:	0a1b      	lsrs	r3, r3, #8
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	629a      	str	r2, [r3, #40]	; 0x28
 800bc82:	69fa      	ldr	r2, [r7, #28]
 800bc84:	69b9      	ldr	r1, [r7, #24]
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 f8d6 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <I2C_RequestMemoryWrite+0x76>
 800bc92:	2301      	movs	r3, #1
 800bc94:	e012      	b.n	800bcbc <I2C_RequestMemoryWrite+0x9c>
 800bc96:	893b      	ldrh	r3, [r7, #8]
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	629a      	str	r2, [r3, #40]	; 0x28
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	2200      	movs	r2, #0
 800bca8:	2180      	movs	r1, #128	; 0x80
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 f884 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <I2C_RequestMemoryWrite+0x9a>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e000      	b.n	800bcbc <I2C_RequestMemoryWrite+0x9c>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	80002000 	.word	0x80002000

0800bcc8 <I2C_RequestMemoryRead>:
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af02      	add	r7, sp, #8
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	817b      	strh	r3, [r7, #10]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	813b      	strh	r3, [r7, #8]
 800bcde:	4613      	mov	r3, r2
 800bce0:	80fb      	strh	r3, [r7, #6]
 800bce2:	88fb      	ldrh	r3, [r7, #6]
 800bce4:	b2da      	uxtb	r2, r3
 800bce6:	8979      	ldrh	r1, [r7, #10]
 800bce8:	4b20      	ldr	r3, [pc, #128]	; (800bd6c <I2C_RequestMemoryRead+0xa4>)
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	2300      	movs	r3, #0
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f000 f9f0 	bl	800c0d4 <I2C_TransferConfig>
 800bcf4:	69fa      	ldr	r2, [r7, #28]
 800bcf6:	69b9      	ldr	r1, [r7, #24]
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 f89d 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <I2C_RequestMemoryRead+0x40>
 800bd04:	2301      	movs	r3, #1
 800bd06:	e02c      	b.n	800bd62 <I2C_RequestMemoryRead+0x9a>
 800bd08:	88fb      	ldrh	r3, [r7, #6]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d105      	bne.n	800bd1a <I2C_RequestMemoryRead+0x52>
 800bd0e:	893b      	ldrh	r3, [r7, #8]
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	629a      	str	r2, [r3, #40]	; 0x28
 800bd18:	e015      	b.n	800bd46 <I2C_RequestMemoryRead+0x7e>
 800bd1a:	893b      	ldrh	r3, [r7, #8]
 800bd1c:	0a1b      	lsrs	r3, r3, #8
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	629a      	str	r2, [r3, #40]	; 0x28
 800bd28:	69fa      	ldr	r2, [r7, #28]
 800bd2a:	69b9      	ldr	r1, [r7, #24]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 f883 	bl	800be38 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <I2C_RequestMemoryRead+0x74>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e012      	b.n	800bd62 <I2C_RequestMemoryRead+0x9a>
 800bd3c:	893b      	ldrh	r3, [r7, #8]
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	629a      	str	r2, [r3, #40]	; 0x28
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	2140      	movs	r1, #64	; 0x40
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 f831 	bl	800bdb8 <I2C_WaitOnFlagUntilTimeout>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <I2C_RequestMemoryRead+0x98>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e000      	b.n	800bd62 <I2C_RequestMemoryRead+0x9a>
 800bd60:	2300      	movs	r3, #0
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	80002000 	.word	0x80002000

0800bd70 <I2C_Flush_TXDR>:
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	f003 0302 	and.w	r3, r3, #2
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d103      	bne.n	800bd8e <I2C_Flush_TXDR+0x1e>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	629a      	str	r2, [r3, #40]	; 0x28
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d007      	beq.n	800bdac <I2C_Flush_TXDR+0x3c>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	699a      	ldr	r2, [r3, #24]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f042 0201 	orr.w	r2, r2, #1
 800bdaa:	619a      	str	r2, [r3, #24]
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <I2C_WaitOnFlagUntilTimeout>:
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	603b      	str	r3, [r7, #0]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	71fb      	strb	r3, [r7, #7]
 800bdc8:	e022      	b.n	800be10 <I2C_WaitOnFlagUntilTimeout+0x58>
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd0:	d01e      	beq.n	800be10 <I2C_WaitOnFlagUntilTimeout+0x58>
 800bdd2:	f7fc fa39 	bl	8008248 <HAL_GetTick>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	683a      	ldr	r2, [r7, #0]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d302      	bcc.n	800bde8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d113      	bne.n	800be10 <I2C_WaitOnFlagUntilTimeout+0x58>
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdec:	f043 0220 	orr.w	r2, r3, #32
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	645a      	str	r2, [r3, #68]	; 0x44
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2220      	movs	r2, #32
 800bdf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be0c:	2301      	movs	r3, #1
 800be0e:	e00f      	b.n	800be30 <I2C_WaitOnFlagUntilTimeout+0x78>
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	699a      	ldr	r2, [r3, #24]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	4013      	ands	r3, r2
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	bf0c      	ite	eq
 800be20:	2301      	moveq	r3, #1
 800be22:	2300      	movne	r3, #0
 800be24:	b2db      	uxtb	r3, r3
 800be26:	461a      	mov	r2, r3
 800be28:	79fb      	ldrb	r3, [r7, #7]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d0cd      	beq.n	800bdca <I2C_WaitOnFlagUntilTimeout+0x12>
 800be2e:	2300      	movs	r3, #0
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <I2C_WaitOnTXISFlagUntilTimeout>:
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	e02c      	b.n	800bea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	68b9      	ldr	r1, [r7, #8]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 f8dc 	bl	800c008 <I2C_IsAcknowledgeFailed>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d001      	beq.n	800be5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 800be56:	2301      	movs	r3, #1
 800be58:	e02a      	b.n	800beb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be60:	d01e      	beq.n	800bea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800be62:	f7fc f9f1 	bl	8008248 <HAL_GetTick>
 800be66:	4602      	mov	r2, r0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d302      	bcc.n	800be78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d113      	bne.n	800bea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be7c:	f043 0220 	orr.w	r2, r3, #32
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	645a      	str	r2, [r3, #68]	; 0x44
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2220      	movs	r2, #32
 800be88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be9c:	2301      	movs	r3, #1
 800be9e:	e007      	b.n	800beb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	f003 0302 	and.w	r3, r3, #2
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d1cb      	bne.n	800be46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 800beae:	2300      	movs	r3, #0
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	e028      	b.n	800bf18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f000 f89c 	bl	800c008 <I2C_IsAcknowledgeFailed>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d001      	beq.n	800beda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 800bed6:	2301      	movs	r3, #1
 800bed8:	e026      	b.n	800bf28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 800beda:	f7fc f9b5 	bl	8008248 <HAL_GetTick>
 800bede:	4602      	mov	r2, r0
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d302      	bcc.n	800bef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d113      	bne.n	800bf18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef4:	f043 0220 	orr.w	r2, r3, #32
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	645a      	str	r2, [r3, #68]	; 0x44
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2220      	movs	r2, #32
 800bf00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf14:	2301      	movs	r3, #1
 800bf16:	e007      	b.n	800bf28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	f003 0320 	and.w	r3, r3, #32
 800bf22:	2b20      	cmp	r3, #32
 800bf24:	d1cf      	bne.n	800bec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 800bf26:	2300      	movs	r3, #0
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <I2C_WaitOnRXNEFlagUntilTimeout>:
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
 800bf3c:	e055      	b.n	800bfea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	68b9      	ldr	r1, [r7, #8]
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f000 f860 	bl	800c008 <I2C_IsAcknowledgeFailed>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e053      	b.n	800bffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	f003 0320 	and.w	r3, r3, #32
 800bf5c:	2b20      	cmp	r3, #32
 800bf5e:	d129      	bne.n	800bfb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	f003 0304 	and.w	r3, r3, #4
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	d105      	bne.n	800bf7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bf76:	2300      	movs	r3, #0
 800bf78:	e03f      	b.n	800bffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	61da      	str	r2, [r3, #28]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	6859      	ldr	r1, [r3, #4]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	4b1d      	ldr	r3, [pc, #116]	; (800c004 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800bf8e:	400b      	ands	r3, r1
 800bf90:	6053      	str	r3, [r2, #4]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	645a      	str	r2, [r3, #68]	; 0x44
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2220      	movs	r2, #32
 800bf9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e022      	b.n	800bffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
 800bfb4:	f7fc f948 	bl	8008248 <HAL_GetTick>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d302      	bcc.n	800bfca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10f      	bne.n	800bfea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfce:	f043 0220 	orr.w	r2, r3, #32
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	645a      	str	r2, [r3, #68]	; 0x44
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2220      	movs	r2, #32
 800bfda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e007      	b.n	800bffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	f003 0304 	and.w	r3, r3, #4
 800bff4:	2b04      	cmp	r3, #4
 800bff6:	d1a2      	bne.n	800bf3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 800bff8:	2300      	movs	r3, #0
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	fe00e800 	.word	0xfe00e800

0800c008 <I2C_IsAcknowledgeFailed>:
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	f003 0310 	and.w	r3, r3, #16
 800c01e:	2b10      	cmp	r3, #16
 800c020:	d151      	bne.n	800c0c6 <I2C_IsAcknowledgeFailed+0xbe>
 800c022:	e022      	b.n	800c06a <I2C_IsAcknowledgeFailed+0x62>
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02a:	d01e      	beq.n	800c06a <I2C_IsAcknowledgeFailed+0x62>
 800c02c:	f7fc f90c 	bl	8008248 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d302      	bcc.n	800c042 <I2C_IsAcknowledgeFailed+0x3a>
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d113      	bne.n	800c06a <I2C_IsAcknowledgeFailed+0x62>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c046:	f043 0220 	orr.w	r2, r3, #32
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	645a      	str	r2, [r3, #68]	; 0x44
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2220      	movs	r2, #32
 800c052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c066:	2301      	movs	r3, #1
 800c068:	e02e      	b.n	800c0c8 <I2C_IsAcknowledgeFailed+0xc0>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	f003 0320 	and.w	r3, r3, #32
 800c074:	2b20      	cmp	r3, #32
 800c076:	d1d5      	bne.n	800c024 <I2C_IsAcknowledgeFailed+0x1c>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2210      	movs	r2, #16
 800c07e:	61da      	str	r2, [r3, #28]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2220      	movs	r2, #32
 800c086:	61da      	str	r2, [r3, #28]
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f7ff fe71 	bl	800bd70 <I2C_Flush_TXDR>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6859      	ldr	r1, [r3, #4]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	4b0d      	ldr	r3, [pc, #52]	; (800c0d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800c09a:	400b      	ands	r3, r1
 800c09c:	6053      	str	r3, [r2, #4]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0a2:	f043 0204 	orr.w	r2, r3, #4
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	645a      	str	r2, [r3, #68]	; 0x44
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2220      	movs	r2, #32
 800c0ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e000      	b.n	800c0c8 <I2C_IsAcknowledgeFailed+0xc0>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	fe00e800 	.word	0xfe00e800

0800c0d4 <I2C_TransferConfig>:
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	607b      	str	r3, [r7, #4]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	817b      	strh	r3, [r7, #10]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	727b      	strb	r3, [r7, #9]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	0d5b      	lsrs	r3, r3, #21
 800c0f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <I2C_TransferConfig+0x58>)
 800c0f6:	430b      	orrs	r3, r1
 800c0f8:	43db      	mvns	r3, r3
 800c0fa:	ea02 0103 	and.w	r1, r2, r3
 800c0fe:	897b      	ldrh	r3, [r7, #10]
 800c100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c104:	7a7b      	ldrb	r3, [r7, #9]
 800c106:	041b      	lsls	r3, r3, #16
 800c108:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c10c:	431a      	orrs	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	431a      	orrs	r2, r3
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	431a      	orrs	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	430a      	orrs	r2, r1
 800c11c:	605a      	str	r2, [r3, #4]
 800c11e:	bf00      	nop
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	03ff63ff 	.word	0x03ff63ff

0800c130 <HAL_I2CEx_ConfigAnalogFilter>:
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c140:	b2db      	uxtb	r3, r3
 800c142:	2b20      	cmp	r3, #32
 800c144:	d138      	bne.n	800c1b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d101      	bne.n	800c154 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c150:	2302      	movs	r3, #2
 800c152:	e032      	b.n	800c1ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2224      	movs	r2, #36	; 0x24
 800c160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f022 0201 	bic.w	r2, r2, #1
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6819      	ldr	r1, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	430a      	orrs	r2, r1
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f042 0201 	orr.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	e000      	b.n	800c1ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <HAL_I2CEx_ConfigDigitalFilter>:
 800c1c6:	b480      	push	{r7}
 800c1c8:	b085      	sub	sp, #20
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6039      	str	r1, [r7, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	d139      	bne.n	800c250 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d101      	bne.n	800c1ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	e033      	b.n	800c252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2224      	movs	r2, #36	; 0x24
 800c1f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f022 0201 	bic.w	r2, r2, #1
 800c208:	601a      	str	r2, [r3, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	60fb      	str	r3, [r7, #12]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	021b      	lsls	r3, r3, #8
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	4313      	orrs	r3, r2
 800c222:	60fb      	str	r3, [r7, #12]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	601a      	str	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f042 0201 	orr.w	r2, r2, #1
 800c23a:	601a      	str	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2220      	movs	r2, #32
 800c240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c24c:	2300      	movs	r3, #0
 800c24e:	e000      	b.n	800c252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c250:	2302      	movs	r3, #2
 800c252:	4618      	mov	r0, r3
 800c254:	3714      	adds	r7, #20
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
	...

0800c260 <HAL_PWR_EnableBkUpAccess>:
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0
 800c264:	4b05      	ldr	r3, [pc, #20]	; (800c27c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a04      	ldr	r2, [pc, #16]	; (800c27c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c26a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c26e:	6013      	str	r3, [r2, #0]
 800c270:	bf00      	nop
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	40007000 	.word	0x40007000

0800c280 <HAL_PWREx_EnableOverDrive>:
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	2300      	movs	r3, #0
 800c288:	607b      	str	r3, [r7, #4]
 800c28a:	4b23      	ldr	r3, [pc, #140]	; (800c318 <HAL_PWREx_EnableOverDrive+0x98>)
 800c28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28e:	4a22      	ldr	r2, [pc, #136]	; (800c318 <HAL_PWREx_EnableOverDrive+0x98>)
 800c290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c294:	6413      	str	r3, [r2, #64]	; 0x40
 800c296:	4b20      	ldr	r3, [pc, #128]	; (800c318 <HAL_PWREx_EnableOverDrive+0x98>)
 800c298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c29e:	603b      	str	r3, [r7, #0]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	4b1e      	ldr	r3, [pc, #120]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a1d      	ldr	r2, [pc, #116]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	f7fb ffcb 	bl	8008248 <HAL_GetTick>
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	e009      	b.n	800c2ca <HAL_PWREx_EnableOverDrive+0x4a>
 800c2b6:	f7fb ffc7 	bl	8008248 <HAL_GetTick>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2c4:	d901      	bls.n	800c2ca <HAL_PWREx_EnableOverDrive+0x4a>
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	e022      	b.n	800c310 <HAL_PWREx_EnableOverDrive+0x90>
 800c2ca:	4b14      	ldr	r3, [pc, #80]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2d6:	d1ee      	bne.n	800c2b6 <HAL_PWREx_EnableOverDrive+0x36>
 800c2d8:	4b10      	ldr	r3, [pc, #64]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a0f      	ldr	r2, [pc, #60]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	f7fb ffb0 	bl	8008248 <HAL_GetTick>
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	e009      	b.n	800c300 <HAL_PWREx_EnableOverDrive+0x80>
 800c2ec:	f7fb ffac 	bl	8008248 <HAL_GetTick>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2fa:	d901      	bls.n	800c300 <HAL_PWREx_EnableOverDrive+0x80>
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e007      	b.n	800c310 <HAL_PWREx_EnableOverDrive+0x90>
 800c300:	4b06      	ldr	r3, [pc, #24]	; (800c31c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c30c:	d1ee      	bne.n	800c2ec <HAL_PWREx_EnableOverDrive+0x6c>
 800c30e:	2300      	movs	r3, #0
 800c310:	4618      	mov	r0, r3
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	40023800 	.word	0x40023800
 800c31c:	40007000 	.word	0x40007000

0800c320 <HAL_RCC_OscConfig>:
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	2300      	movs	r3, #0
 800c32a:	75fb      	strb	r3, [r7, #23]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <HAL_RCC_OscConfig+0x16>
 800c332:	2301      	movs	r3, #1
 800c334:	e29b      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 8087 	beq.w	800c452 <HAL_RCC_OscConfig+0x132>
 800c344:	4b96      	ldr	r3, [pc, #600]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	f003 030c 	and.w	r3, r3, #12
 800c34c:	2b04      	cmp	r3, #4
 800c34e:	d00c      	beq.n	800c36a <HAL_RCC_OscConfig+0x4a>
 800c350:	4b93      	ldr	r3, [pc, #588]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	f003 030c 	and.w	r3, r3, #12
 800c358:	2b08      	cmp	r3, #8
 800c35a:	d112      	bne.n	800c382 <HAL_RCC_OscConfig+0x62>
 800c35c:	4b90      	ldr	r3, [pc, #576]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c368:	d10b      	bne.n	800c382 <HAL_RCC_OscConfig+0x62>
 800c36a:	4b8d      	ldr	r3, [pc, #564]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c372:	2b00      	cmp	r3, #0
 800c374:	d06c      	beq.n	800c450 <HAL_RCC_OscConfig+0x130>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d168      	bne.n	800c450 <HAL_RCC_OscConfig+0x130>
 800c37e:	2301      	movs	r3, #1
 800c380:	e275      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c38a:	d106      	bne.n	800c39a <HAL_RCC_OscConfig+0x7a>
 800c38c:	4b84      	ldr	r3, [pc, #528]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a83      	ldr	r2, [pc, #524]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	e02e      	b.n	800c3f8 <HAL_RCC_OscConfig+0xd8>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10c      	bne.n	800c3bc <HAL_RCC_OscConfig+0x9c>
 800c3a2:	4b7f      	ldr	r3, [pc, #508]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a7e      	ldr	r2, [pc, #504]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	4b7c      	ldr	r3, [pc, #496]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a7b      	ldr	r2, [pc, #492]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3b8:	6013      	str	r3, [r2, #0]
 800c3ba:	e01d      	b.n	800c3f8 <HAL_RCC_OscConfig+0xd8>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3c4:	d10c      	bne.n	800c3e0 <HAL_RCC_OscConfig+0xc0>
 800c3c6:	4b76      	ldr	r3, [pc, #472]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a75      	ldr	r2, [pc, #468]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	4b73      	ldr	r3, [pc, #460]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a72      	ldr	r2, [pc, #456]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	e00b      	b.n	800c3f8 <HAL_RCC_OscConfig+0xd8>
 800c3e0:	4b6f      	ldr	r3, [pc, #444]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a6e      	ldr	r2, [pc, #440]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3ea:	6013      	str	r3, [r2, #0]
 800c3ec:	4b6c      	ldr	r3, [pc, #432]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a6b      	ldr	r2, [pc, #428]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c3f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d013      	beq.n	800c428 <HAL_RCC_OscConfig+0x108>
 800c400:	f7fb ff22 	bl	8008248 <HAL_GetTick>
 800c404:	6138      	str	r0, [r7, #16]
 800c406:	e008      	b.n	800c41a <HAL_RCC_OscConfig+0xfa>
 800c408:	f7fb ff1e 	bl	8008248 <HAL_GetTick>
 800c40c:	4602      	mov	r2, r0
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	2b64      	cmp	r3, #100	; 0x64
 800c414:	d901      	bls.n	800c41a <HAL_RCC_OscConfig+0xfa>
 800c416:	2303      	movs	r3, #3
 800c418:	e229      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c41a:	4b61      	ldr	r3, [pc, #388]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0f0      	beq.n	800c408 <HAL_RCC_OscConfig+0xe8>
 800c426:	e014      	b.n	800c452 <HAL_RCC_OscConfig+0x132>
 800c428:	f7fb ff0e 	bl	8008248 <HAL_GetTick>
 800c42c:	6138      	str	r0, [r7, #16]
 800c42e:	e008      	b.n	800c442 <HAL_RCC_OscConfig+0x122>
 800c430:	f7fb ff0a 	bl	8008248 <HAL_GetTick>
 800c434:	4602      	mov	r2, r0
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	2b64      	cmp	r3, #100	; 0x64
 800c43c:	d901      	bls.n	800c442 <HAL_RCC_OscConfig+0x122>
 800c43e:	2303      	movs	r3, #3
 800c440:	e215      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c442:	4b57      	ldr	r3, [pc, #348]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1f0      	bne.n	800c430 <HAL_RCC_OscConfig+0x110>
 800c44e:	e000      	b.n	800c452 <HAL_RCC_OscConfig+0x132>
 800c450:	bf00      	nop
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 0302 	and.w	r3, r3, #2
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d069      	beq.n	800c532 <HAL_RCC_OscConfig+0x212>
 800c45e:	4b50      	ldr	r3, [pc, #320]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	f003 030c 	and.w	r3, r3, #12
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00b      	beq.n	800c482 <HAL_RCC_OscConfig+0x162>
 800c46a:	4b4d      	ldr	r3, [pc, #308]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	f003 030c 	and.w	r3, r3, #12
 800c472:	2b08      	cmp	r3, #8
 800c474:	d11c      	bne.n	800c4b0 <HAL_RCC_OscConfig+0x190>
 800c476:	4b4a      	ldr	r3, [pc, #296]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d116      	bne.n	800c4b0 <HAL_RCC_OscConfig+0x190>
 800c482:	4b47      	ldr	r3, [pc, #284]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 0302 	and.w	r3, r3, #2
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d005      	beq.n	800c49a <HAL_RCC_OscConfig+0x17a>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d001      	beq.n	800c49a <HAL_RCC_OscConfig+0x17a>
 800c496:	2301      	movs	r3, #1
 800c498:	e1e9      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c49a:	4b41      	ldr	r3, [pc, #260]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	00db      	lsls	r3, r3, #3
 800c4a8:	493d      	ldr	r1, [pc, #244]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	600b      	str	r3, [r1, #0]
 800c4ae:	e040      	b.n	800c532 <HAL_RCC_OscConfig+0x212>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d023      	beq.n	800c500 <HAL_RCC_OscConfig+0x1e0>
 800c4b8:	4b39      	ldr	r3, [pc, #228]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a38      	ldr	r2, [pc, #224]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4be:	f043 0301 	orr.w	r3, r3, #1
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	f7fb fec0 	bl	8008248 <HAL_GetTick>
 800c4c8:	6138      	str	r0, [r7, #16]
 800c4ca:	e008      	b.n	800c4de <HAL_RCC_OscConfig+0x1be>
 800c4cc:	f7fb febc 	bl	8008248 <HAL_GetTick>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d901      	bls.n	800c4de <HAL_RCC_OscConfig+0x1be>
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e1c7      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c4de:	4b30      	ldr	r3, [pc, #192]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d0f0      	beq.n	800c4cc <HAL_RCC_OscConfig+0x1ac>
 800c4ea:	4b2d      	ldr	r3, [pc, #180]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	4929      	ldr	r1, [pc, #164]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	600b      	str	r3, [r1, #0]
 800c4fe:	e018      	b.n	800c532 <HAL_RCC_OscConfig+0x212>
 800c500:	4b27      	ldr	r3, [pc, #156]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a26      	ldr	r2, [pc, #152]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c506:	f023 0301 	bic.w	r3, r3, #1
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	f7fb fe9c 	bl	8008248 <HAL_GetTick>
 800c510:	6138      	str	r0, [r7, #16]
 800c512:	e008      	b.n	800c526 <HAL_RCC_OscConfig+0x206>
 800c514:	f7fb fe98 	bl	8008248 <HAL_GetTick>
 800c518:	4602      	mov	r2, r0
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d901      	bls.n	800c526 <HAL_RCC_OscConfig+0x206>
 800c522:	2303      	movs	r3, #3
 800c524:	e1a3      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c526:	4b1e      	ldr	r3, [pc, #120]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1f0      	bne.n	800c514 <HAL_RCC_OscConfig+0x1f4>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 0308 	and.w	r3, r3, #8
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d038      	beq.n	800c5b0 <HAL_RCC_OscConfig+0x290>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d019      	beq.n	800c57a <HAL_RCC_OscConfig+0x25a>
 800c546:	4b16      	ldr	r3, [pc, #88]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c54a:	4a15      	ldr	r2, [pc, #84]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c54c:	f043 0301 	orr.w	r3, r3, #1
 800c550:	6753      	str	r3, [r2, #116]	; 0x74
 800c552:	f7fb fe79 	bl	8008248 <HAL_GetTick>
 800c556:	6138      	str	r0, [r7, #16]
 800c558:	e008      	b.n	800c56c <HAL_RCC_OscConfig+0x24c>
 800c55a:	f7fb fe75 	bl	8008248 <HAL_GetTick>
 800c55e:	4602      	mov	r2, r0
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	2b02      	cmp	r3, #2
 800c566:	d901      	bls.n	800c56c <HAL_RCC_OscConfig+0x24c>
 800c568:	2303      	movs	r3, #3
 800c56a:	e180      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c56c:	4b0c      	ldr	r3, [pc, #48]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c56e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c570:	f003 0302 	and.w	r3, r3, #2
 800c574:	2b00      	cmp	r3, #0
 800c576:	d0f0      	beq.n	800c55a <HAL_RCC_OscConfig+0x23a>
 800c578:	e01a      	b.n	800c5b0 <HAL_RCC_OscConfig+0x290>
 800c57a:	4b09      	ldr	r3, [pc, #36]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c57c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c57e:	4a08      	ldr	r2, [pc, #32]	; (800c5a0 <HAL_RCC_OscConfig+0x280>)
 800c580:	f023 0301 	bic.w	r3, r3, #1
 800c584:	6753      	str	r3, [r2, #116]	; 0x74
 800c586:	f7fb fe5f 	bl	8008248 <HAL_GetTick>
 800c58a:	6138      	str	r0, [r7, #16]
 800c58c:	e00a      	b.n	800c5a4 <HAL_RCC_OscConfig+0x284>
 800c58e:	f7fb fe5b 	bl	8008248 <HAL_GetTick>
 800c592:	4602      	mov	r2, r0
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d903      	bls.n	800c5a4 <HAL_RCC_OscConfig+0x284>
 800c59c:	2303      	movs	r3, #3
 800c59e:	e166      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c5a0:	40023800 	.word	0x40023800
 800c5a4:	4b92      	ldr	r3, [pc, #584]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5a8:	f003 0302 	and.w	r3, r3, #2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1ee      	bne.n	800c58e <HAL_RCC_OscConfig+0x26e>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 80a4 	beq.w	800c706 <HAL_RCC_OscConfig+0x3e6>
 800c5be:	4b8c      	ldr	r3, [pc, #560]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10d      	bne.n	800c5e6 <HAL_RCC_OscConfig+0x2c6>
 800c5ca:	4b89      	ldr	r3, [pc, #548]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ce:	4a88      	ldr	r2, [pc, #544]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5d4:	6413      	str	r3, [r2, #64]	; 0x40
 800c5d6:	4b86      	ldr	r3, [pc, #536]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5de:	60bb      	str	r3, [r7, #8]
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	75fb      	strb	r3, [r7, #23]
 800c5e6:	4b83      	ldr	r3, [pc, #524]	; (800c7f4 <HAL_RCC_OscConfig+0x4d4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d118      	bne.n	800c624 <HAL_RCC_OscConfig+0x304>
 800c5f2:	4b80      	ldr	r3, [pc, #512]	; (800c7f4 <HAL_RCC_OscConfig+0x4d4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4a7f      	ldr	r2, [pc, #508]	; (800c7f4 <HAL_RCC_OscConfig+0x4d4>)
 800c5f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	f7fb fe23 	bl	8008248 <HAL_GetTick>
 800c602:	6138      	str	r0, [r7, #16]
 800c604:	e008      	b.n	800c618 <HAL_RCC_OscConfig+0x2f8>
 800c606:	f7fb fe1f 	bl	8008248 <HAL_GetTick>
 800c60a:	4602      	mov	r2, r0
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	2b64      	cmp	r3, #100	; 0x64
 800c612:	d901      	bls.n	800c618 <HAL_RCC_OscConfig+0x2f8>
 800c614:	2303      	movs	r3, #3
 800c616:	e12a      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c618:	4b76      	ldr	r3, [pc, #472]	; (800c7f4 <HAL_RCC_OscConfig+0x4d4>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c620:	2b00      	cmp	r3, #0
 800c622:	d0f0      	beq.n	800c606 <HAL_RCC_OscConfig+0x2e6>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d106      	bne.n	800c63a <HAL_RCC_OscConfig+0x31a>
 800c62c:	4b70      	ldr	r3, [pc, #448]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c630:	4a6f      	ldr	r2, [pc, #444]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	6713      	str	r3, [r2, #112]	; 0x70
 800c638:	e02d      	b.n	800c696 <HAL_RCC_OscConfig+0x376>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10c      	bne.n	800c65c <HAL_RCC_OscConfig+0x33c>
 800c642:	4b6b      	ldr	r3, [pc, #428]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c646:	4a6a      	ldr	r2, [pc, #424]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c648:	f023 0301 	bic.w	r3, r3, #1
 800c64c:	6713      	str	r3, [r2, #112]	; 0x70
 800c64e:	4b68      	ldr	r3, [pc, #416]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c652:	4a67      	ldr	r2, [pc, #412]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c654:	f023 0304 	bic.w	r3, r3, #4
 800c658:	6713      	str	r3, [r2, #112]	; 0x70
 800c65a:	e01c      	b.n	800c696 <HAL_RCC_OscConfig+0x376>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	2b05      	cmp	r3, #5
 800c662:	d10c      	bne.n	800c67e <HAL_RCC_OscConfig+0x35e>
 800c664:	4b62      	ldr	r3, [pc, #392]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c668:	4a61      	ldr	r2, [pc, #388]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c66a:	f043 0304 	orr.w	r3, r3, #4
 800c66e:	6713      	str	r3, [r2, #112]	; 0x70
 800c670:	4b5f      	ldr	r3, [pc, #380]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c674:	4a5e      	ldr	r2, [pc, #376]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c676:	f043 0301 	orr.w	r3, r3, #1
 800c67a:	6713      	str	r3, [r2, #112]	; 0x70
 800c67c:	e00b      	b.n	800c696 <HAL_RCC_OscConfig+0x376>
 800c67e:	4b5c      	ldr	r3, [pc, #368]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c682:	4a5b      	ldr	r2, [pc, #364]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c684:	f023 0301 	bic.w	r3, r3, #1
 800c688:	6713      	str	r3, [r2, #112]	; 0x70
 800c68a:	4b59      	ldr	r3, [pc, #356]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68e:	4a58      	ldr	r2, [pc, #352]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c690:	f023 0304 	bic.w	r3, r3, #4
 800c694:	6713      	str	r3, [r2, #112]	; 0x70
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d015      	beq.n	800c6ca <HAL_RCC_OscConfig+0x3aa>
 800c69e:	f7fb fdd3 	bl	8008248 <HAL_GetTick>
 800c6a2:	6138      	str	r0, [r7, #16]
 800c6a4:	e00a      	b.n	800c6bc <HAL_RCC_OscConfig+0x39c>
 800c6a6:	f7fb fdcf 	bl	8008248 <HAL_GetTick>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d901      	bls.n	800c6bc <HAL_RCC_OscConfig+0x39c>
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	e0d8      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c6bc:	4b4c      	ldr	r3, [pc, #304]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c0:	f003 0302 	and.w	r3, r3, #2
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0ee      	beq.n	800c6a6 <HAL_RCC_OscConfig+0x386>
 800c6c8:	e014      	b.n	800c6f4 <HAL_RCC_OscConfig+0x3d4>
 800c6ca:	f7fb fdbd 	bl	8008248 <HAL_GetTick>
 800c6ce:	6138      	str	r0, [r7, #16]
 800c6d0:	e00a      	b.n	800c6e8 <HAL_RCC_OscConfig+0x3c8>
 800c6d2:	f7fb fdb9 	bl	8008248 <HAL_GetTick>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d901      	bls.n	800c6e8 <HAL_RCC_OscConfig+0x3c8>
 800c6e4:	2303      	movs	r3, #3
 800c6e6:	e0c2      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c6e8:	4b41      	ldr	r3, [pc, #260]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1ee      	bne.n	800c6d2 <HAL_RCC_OscConfig+0x3b2>
 800c6f4:	7dfb      	ldrb	r3, [r7, #23]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d105      	bne.n	800c706 <HAL_RCC_OscConfig+0x3e6>
 800c6fa:	4b3d      	ldr	r3, [pc, #244]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fe:	4a3c      	ldr	r2, [pc, #240]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c704:	6413      	str	r3, [r2, #64]	; 0x40
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 80ae 	beq.w	800c86c <HAL_RCC_OscConfig+0x54c>
 800c710:	4b37      	ldr	r3, [pc, #220]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	f003 030c 	and.w	r3, r3, #12
 800c718:	2b08      	cmp	r3, #8
 800c71a:	d06d      	beq.n	800c7f8 <HAL_RCC_OscConfig+0x4d8>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	2b02      	cmp	r3, #2
 800c722:	d14b      	bne.n	800c7bc <HAL_RCC_OscConfig+0x49c>
 800c724:	4b32      	ldr	r3, [pc, #200]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a31      	ldr	r2, [pc, #196]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c72a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	f7fb fd8a 	bl	8008248 <HAL_GetTick>
 800c734:	6138      	str	r0, [r7, #16]
 800c736:	e008      	b.n	800c74a <HAL_RCC_OscConfig+0x42a>
 800c738:	f7fb fd86 	bl	8008248 <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b02      	cmp	r3, #2
 800c744:	d901      	bls.n	800c74a <HAL_RCC_OscConfig+0x42a>
 800c746:	2303      	movs	r3, #3
 800c748:	e091      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c74a:	4b29      	ldr	r3, [pc, #164]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1f0      	bne.n	800c738 <HAL_RCC_OscConfig+0x418>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	69da      	ldr	r2, [r3, #28]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	431a      	orrs	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c764:	019b      	lsls	r3, r3, #6
 800c766:	431a      	orrs	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	3b01      	subs	r3, #1
 800c770:	041b      	lsls	r3, r3, #16
 800c772:	431a      	orrs	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	061b      	lsls	r3, r3, #24
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c780:	071b      	lsls	r3, r3, #28
 800c782:	491b      	ldr	r1, [pc, #108]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c784:	4313      	orrs	r3, r2
 800c786:	604b      	str	r3, [r1, #4]
 800c788:	4b19      	ldr	r3, [pc, #100]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a18      	ldr	r2, [pc, #96]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c78e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c792:	6013      	str	r3, [r2, #0]
 800c794:	f7fb fd58 	bl	8008248 <HAL_GetTick>
 800c798:	6138      	str	r0, [r7, #16]
 800c79a:	e008      	b.n	800c7ae <HAL_RCC_OscConfig+0x48e>
 800c79c:	f7fb fd54 	bl	8008248 <HAL_GetTick>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d901      	bls.n	800c7ae <HAL_RCC_OscConfig+0x48e>
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e05f      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c7ae:	4b10      	ldr	r3, [pc, #64]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0f0      	beq.n	800c79c <HAL_RCC_OscConfig+0x47c>
 800c7ba:	e057      	b.n	800c86c <HAL_RCC_OscConfig+0x54c>
 800c7bc:	4b0c      	ldr	r3, [pc, #48]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a0b      	ldr	r2, [pc, #44]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c7c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7c6:	6013      	str	r3, [r2, #0]
 800c7c8:	f7fb fd3e 	bl	8008248 <HAL_GetTick>
 800c7cc:	6138      	str	r0, [r7, #16]
 800c7ce:	e008      	b.n	800c7e2 <HAL_RCC_OscConfig+0x4c2>
 800c7d0:	f7fb fd3a 	bl	8008248 <HAL_GetTick>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	1ad3      	subs	r3, r2, r3
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d901      	bls.n	800c7e2 <HAL_RCC_OscConfig+0x4c2>
 800c7de:	2303      	movs	r3, #3
 800c7e0:	e045      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c7e2:	4b03      	ldr	r3, [pc, #12]	; (800c7f0 <HAL_RCC_OscConfig+0x4d0>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1f0      	bne.n	800c7d0 <HAL_RCC_OscConfig+0x4b0>
 800c7ee:	e03d      	b.n	800c86c <HAL_RCC_OscConfig+0x54c>
 800c7f0:	40023800 	.word	0x40023800
 800c7f4:	40007000 	.word	0x40007000
 800c7f8:	4b1f      	ldr	r3, [pc, #124]	; (800c878 <HAL_RCC_OscConfig+0x558>)
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d030      	beq.n	800c868 <HAL_RCC_OscConfig+0x548>
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	69db      	ldr	r3, [r3, #28]
 800c810:	429a      	cmp	r2, r3
 800c812:	d129      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d122      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c828:	4013      	ands	r3, r2
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c82e:	0192      	lsls	r2, r2, #6
 800c830:	4293      	cmp	r3, r2
 800c832:	d119      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83e:	085b      	lsrs	r3, r3, #1
 800c840:	3b01      	subs	r3, #1
 800c842:	041b      	lsls	r3, r3, #16
 800c844:	429a      	cmp	r2, r3
 800c846:	d10f      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c852:	061b      	lsls	r3, r3, #24
 800c854:	429a      	cmp	r2, r3
 800c856:	d107      	bne.n	800c868 <HAL_RCC_OscConfig+0x548>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c862:	071b      	lsls	r3, r3, #28
 800c864:	429a      	cmp	r2, r3
 800c866:	d001      	beq.n	800c86c <HAL_RCC_OscConfig+0x54c>
 800c868:	2301      	movs	r3, #1
 800c86a:	e000      	b.n	800c86e <HAL_RCC_OscConfig+0x54e>
 800c86c:	2300      	movs	r3, #0
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	40023800 	.word	0x40023800

0800c87c <HAL_RCC_ClockConfig>:
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
 800c886:	2300      	movs	r3, #0
 800c888:	60fb      	str	r3, [r7, #12]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <HAL_RCC_ClockConfig+0x18>
 800c890:	2301      	movs	r3, #1
 800c892:	e0d0      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
 800c894:	4b6a      	ldr	r3, [pc, #424]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f003 030f 	and.w	r3, r3, #15
 800c89c:	683a      	ldr	r2, [r7, #0]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d910      	bls.n	800c8c4 <HAL_RCC_ClockConfig+0x48>
 800c8a2:	4b67      	ldr	r3, [pc, #412]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f023 020f 	bic.w	r2, r3, #15
 800c8aa:	4965      	ldr	r1, [pc, #404]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	600b      	str	r3, [r1, #0]
 800c8b2:	4b63      	ldr	r3, [pc, #396]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f003 030f 	and.w	r3, r3, #15
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d001      	beq.n	800c8c4 <HAL_RCC_ClockConfig+0x48>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e0b8      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d020      	beq.n	800c912 <HAL_RCC_ClockConfig+0x96>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 0304 	and.w	r3, r3, #4
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d005      	beq.n	800c8e8 <HAL_RCC_ClockConfig+0x6c>
 800c8dc:	4b59      	ldr	r3, [pc, #356]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	4a58      	ldr	r2, [pc, #352]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c8e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c8e6:	6093      	str	r3, [r2, #8]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0308 	and.w	r3, r3, #8
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d005      	beq.n	800c900 <HAL_RCC_ClockConfig+0x84>
 800c8f4:	4b53      	ldr	r3, [pc, #332]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	4a52      	ldr	r2, [pc, #328]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c8fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c8fe:	6093      	str	r3, [r2, #8]
 800c900:	4b50      	ldr	r3, [pc, #320]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	494d      	ldr	r1, [pc, #308]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c90e:	4313      	orrs	r3, r2
 800c910:	608b      	str	r3, [r1, #8]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d040      	beq.n	800c9a0 <HAL_RCC_ClockConfig+0x124>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	2b01      	cmp	r3, #1
 800c924:	d107      	bne.n	800c936 <HAL_RCC_ClockConfig+0xba>
 800c926:	4b47      	ldr	r3, [pc, #284]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d115      	bne.n	800c95e <HAL_RCC_ClockConfig+0xe2>
 800c932:	2301      	movs	r3, #1
 800c934:	e07f      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d107      	bne.n	800c94e <HAL_RCC_ClockConfig+0xd2>
 800c93e:	4b41      	ldr	r3, [pc, #260]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c946:	2b00      	cmp	r3, #0
 800c948:	d109      	bne.n	800c95e <HAL_RCC_ClockConfig+0xe2>
 800c94a:	2301      	movs	r3, #1
 800c94c:	e073      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
 800c94e:	4b3d      	ldr	r3, [pc, #244]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0302 	and.w	r3, r3, #2
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <HAL_RCC_ClockConfig+0xe2>
 800c95a:	2301      	movs	r3, #1
 800c95c:	e06b      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
 800c95e:	4b39      	ldr	r3, [pc, #228]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	f023 0203 	bic.w	r2, r3, #3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	4936      	ldr	r1, [pc, #216]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c96c:	4313      	orrs	r3, r2
 800c96e:	608b      	str	r3, [r1, #8]
 800c970:	f7fb fc6a 	bl	8008248 <HAL_GetTick>
 800c974:	60f8      	str	r0, [r7, #12]
 800c976:	e00a      	b.n	800c98e <HAL_RCC_ClockConfig+0x112>
 800c978:	f7fb fc66 	bl	8008248 <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	f241 3288 	movw	r2, #5000	; 0x1388
 800c986:	4293      	cmp	r3, r2
 800c988:	d901      	bls.n	800c98e <HAL_RCC_ClockConfig+0x112>
 800c98a:	2303      	movs	r3, #3
 800c98c:	e053      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
 800c98e:	4b2d      	ldr	r3, [pc, #180]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	f003 020c 	and.w	r2, r3, #12
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d1eb      	bne.n	800c978 <HAL_RCC_ClockConfig+0xfc>
 800c9a0:	4b27      	ldr	r3, [pc, #156]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 030f 	and.w	r3, r3, #15
 800c9a8:	683a      	ldr	r2, [r7, #0]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d210      	bcs.n	800c9d0 <HAL_RCC_ClockConfig+0x154>
 800c9ae:	4b24      	ldr	r3, [pc, #144]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f023 020f 	bic.w	r2, r3, #15
 800c9b6:	4922      	ldr	r1, [pc, #136]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	600b      	str	r3, [r1, #0]
 800c9be:	4b20      	ldr	r3, [pc, #128]	; (800ca40 <HAL_RCC_ClockConfig+0x1c4>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 030f 	and.w	r3, r3, #15
 800c9c6:	683a      	ldr	r2, [r7, #0]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d001      	beq.n	800c9d0 <HAL_RCC_ClockConfig+0x154>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e032      	b.n	800ca36 <HAL_RCC_ClockConfig+0x1ba>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 0304 	and.w	r3, r3, #4
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d008      	beq.n	800c9ee <HAL_RCC_ClockConfig+0x172>
 800c9dc:	4b19      	ldr	r3, [pc, #100]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	4916      	ldr	r1, [pc, #88]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	608b      	str	r3, [r1, #8]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f003 0308 	and.w	r3, r3, #8
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d009      	beq.n	800ca0e <HAL_RCC_ClockConfig+0x192>
 800c9fa:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	00db      	lsls	r3, r3, #3
 800ca08:	490e      	ldr	r1, [pc, #56]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	608b      	str	r3, [r1, #8]
 800ca0e:	f000 f885 	bl	800cb1c <HAL_RCC_GetSysClockFreq>
 800ca12:	4601      	mov	r1, r0
 800ca14:	4b0b      	ldr	r3, [pc, #44]	; (800ca44 <HAL_RCC_ClockConfig+0x1c8>)
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	091b      	lsrs	r3, r3, #4
 800ca1a:	f003 030f 	and.w	r3, r3, #15
 800ca1e:	4a0a      	ldr	r2, [pc, #40]	; (800ca48 <HAL_RCC_ClockConfig+0x1cc>)
 800ca20:	5cd3      	ldrb	r3, [r2, r3]
 800ca22:	fa21 f303 	lsr.w	r3, r1, r3
 800ca26:	4a09      	ldr	r2, [pc, #36]	; (800ca4c <HAL_RCC_ClockConfig+0x1d0>)
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	4b09      	ldr	r3, [pc, #36]	; (800ca50 <HAL_RCC_ClockConfig+0x1d4>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fb fbc6 	bl	80081c0 <HAL_InitTick>
 800ca34:	2300      	movs	r3, #0
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	40023c00 	.word	0x40023c00
 800ca44:	40023800 	.word	0x40023800
 800ca48:	08022980 	.word	0x08022980
 800ca4c:	2000005c 	.word	0x2000005c
 800ca50:	20000060 	.word	0x20000060

0800ca54 <HAL_RCC_MCOConfig>:
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08c      	sub	sp, #48	; 0x30
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d127      	bne.n	800cab6 <HAL_RCC_MCOConfig+0x62>
 800ca66:	4b2a      	ldr	r3, [pc, #168]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800ca68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6a:	4a29      	ldr	r2, [pc, #164]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800ca6c:	f043 0301 	orr.w	r3, r3, #1
 800ca70:	6313      	str	r3, [r2, #48]	; 0x30
 800ca72:	4b27      	ldr	r3, [pc, #156]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800ca74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	61bb      	str	r3, [r7, #24]
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca82:	61fb      	str	r3, [r7, #28]
 800ca84:	2302      	movs	r3, #2
 800ca86:	623b      	str	r3, [r7, #32]
 800ca88:	2303      	movs	r3, #3
 800ca8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ca90:	2300      	movs	r3, #0
 800ca92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca94:	f107 031c 	add.w	r3, r7, #28
 800ca98:	4619      	mov	r1, r3
 800ca9a:	481e      	ldr	r0, [pc, #120]	; (800cb14 <HAL_RCC_MCOConfig+0xc0>)
 800ca9c:	f7fc fd18 	bl	80094d0 <HAL_GPIO_Init>
 800caa0:	4b1b      	ldr	r3, [pc, #108]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800caa8:	68b9      	ldr	r1, [r7, #8]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	430b      	orrs	r3, r1
 800caae:	4918      	ldr	r1, [pc, #96]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cab0:	4313      	orrs	r3, r2
 800cab2:	608b      	str	r3, [r1, #8]
 800cab4:	e027      	b.n	800cb06 <HAL_RCC_MCOConfig+0xb2>
 800cab6:	4b16      	ldr	r3, [pc, #88]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caba:	4a15      	ldr	r2, [pc, #84]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cabc:	f043 0304 	orr.w	r3, r3, #4
 800cac0:	6313      	str	r3, [r2, #48]	; 0x30
 800cac2:	4b13      	ldr	r3, [pc, #76]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac6:	f003 0304 	and.w	r3, r3, #4
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cad2:	61fb      	str	r3, [r7, #28]
 800cad4:	2302      	movs	r3, #2
 800cad6:	623b      	str	r3, [r7, #32]
 800cad8:	2303      	movs	r3, #3
 800cada:	62bb      	str	r3, [r7, #40]	; 0x28
 800cadc:	2300      	movs	r3, #0
 800cade:	627b      	str	r3, [r7, #36]	; 0x24
 800cae0:	2300      	movs	r3, #0
 800cae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cae4:	f107 031c 	add.w	r3, r7, #28
 800cae8:	4619      	mov	r1, r3
 800caea:	480b      	ldr	r0, [pc, #44]	; (800cb18 <HAL_RCC_MCOConfig+0xc4>)
 800caec:	f7fc fcf0 	bl	80094d0 <HAL_GPIO_Init>
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	00d9      	lsls	r1, r3, #3
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	430b      	orrs	r3, r1
 800cb00:	4903      	ldr	r1, [pc, #12]	; (800cb10 <HAL_RCC_MCOConfig+0xbc>)
 800cb02:	4313      	orrs	r3, r2
 800cb04:	608b      	str	r3, [r1, #8]
 800cb06:	bf00      	nop
 800cb08:	3730      	adds	r7, #48	; 0x30
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	40023800 	.word	0x40023800
 800cb14:	40020000 	.word	0x40020000
 800cb18:	40020800 	.word	0x40020800

0800cb1c <HAL_RCC_GetSysClockFreq>:
 800cb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb1e:	b085      	sub	sp, #20
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	2300      	movs	r3, #0
 800cb24:	607b      	str	r3, [r7, #4]
 800cb26:	2300      	movs	r3, #0
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	603b      	str	r3, [r7, #0]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	60bb      	str	r3, [r7, #8]
 800cb32:	4b50      	ldr	r3, [pc, #320]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f003 030c 	and.w	r3, r3, #12
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	d007      	beq.n	800cb4e <HAL_RCC_GetSysClockFreq+0x32>
 800cb3e:	2b08      	cmp	r3, #8
 800cb40:	d008      	beq.n	800cb54 <HAL_RCC_GetSysClockFreq+0x38>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f040 808d 	bne.w	800cc62 <HAL_RCC_GetSysClockFreq+0x146>
 800cb48:	4b4b      	ldr	r3, [pc, #300]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cb4a:	60bb      	str	r3, [r7, #8]
 800cb4c:	e08c      	b.n	800cc68 <HAL_RCC_GetSysClockFreq+0x14c>
 800cb4e:	4b4b      	ldr	r3, [pc, #300]	; (800cc7c <HAL_RCC_GetSysClockFreq+0x160>)
 800cb50:	60bb      	str	r3, [r7, #8]
 800cb52:	e089      	b.n	800cc68 <HAL_RCC_GetSysClockFreq+0x14c>
 800cb54:	4b47      	ldr	r3, [pc, #284]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb5c:	607b      	str	r3, [r7, #4]
 800cb5e:	4b45      	ldr	r3, [pc, #276]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d023      	beq.n	800cbb2 <HAL_RCC_GetSysClockFreq+0x96>
 800cb6a:	4b42      	ldr	r3, [pc, #264]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	099b      	lsrs	r3, r3, #6
 800cb70:	f04f 0400 	mov.w	r4, #0
 800cb74:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cb78:	f04f 0200 	mov.w	r2, #0
 800cb7c:	ea03 0501 	and.w	r5, r3, r1
 800cb80:	ea04 0602 	and.w	r6, r4, r2
 800cb84:	4a3d      	ldr	r2, [pc, #244]	; (800cc7c <HAL_RCC_GetSysClockFreq+0x160>)
 800cb86:	fb02 f106 	mul.w	r1, r2, r6
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	fb02 f205 	mul.w	r2, r2, r5
 800cb90:	440a      	add	r2, r1
 800cb92:	493a      	ldr	r1, [pc, #232]	; (800cc7c <HAL_RCC_GetSysClockFreq+0x160>)
 800cb94:	fba5 0101 	umull	r0, r1, r5, r1
 800cb98:	1853      	adds	r3, r2, r1
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f04f 0400 	mov.w	r4, #0
 800cba2:	461a      	mov	r2, r3
 800cba4:	4623      	mov	r3, r4
 800cba6:	f7f3 fd6f 	bl	8000688 <__aeabi_uldivmod>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	460c      	mov	r4, r1
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	e049      	b.n	800cc46 <HAL_RCC_GetSysClockFreq+0x12a>
 800cbb2:	4b30      	ldr	r3, [pc, #192]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	099b      	lsrs	r3, r3, #6
 800cbb8:	f04f 0400 	mov.w	r4, #0
 800cbbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cbc0:	f04f 0200 	mov.w	r2, #0
 800cbc4:	ea03 0501 	and.w	r5, r3, r1
 800cbc8:	ea04 0602 	and.w	r6, r4, r2
 800cbcc:	4629      	mov	r1, r5
 800cbce:	4632      	mov	r2, r6
 800cbd0:	f04f 0300 	mov.w	r3, #0
 800cbd4:	f04f 0400 	mov.w	r4, #0
 800cbd8:	0154      	lsls	r4, r2, #5
 800cbda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cbde:	014b      	lsls	r3, r1, #5
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4622      	mov	r2, r4
 800cbe4:	1b49      	subs	r1, r1, r5
 800cbe6:	eb62 0206 	sbc.w	r2, r2, r6
 800cbea:	f04f 0300 	mov.w	r3, #0
 800cbee:	f04f 0400 	mov.w	r4, #0
 800cbf2:	0194      	lsls	r4, r2, #6
 800cbf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cbf8:	018b      	lsls	r3, r1, #6
 800cbfa:	1a5b      	subs	r3, r3, r1
 800cbfc:	eb64 0402 	sbc.w	r4, r4, r2
 800cc00:	f04f 0100 	mov.w	r1, #0
 800cc04:	f04f 0200 	mov.w	r2, #0
 800cc08:	00e2      	lsls	r2, r4, #3
 800cc0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cc0e:	00d9      	lsls	r1, r3, #3
 800cc10:	460b      	mov	r3, r1
 800cc12:	4614      	mov	r4, r2
 800cc14:	195b      	adds	r3, r3, r5
 800cc16:	eb44 0406 	adc.w	r4, r4, r6
 800cc1a:	f04f 0100 	mov.w	r1, #0
 800cc1e:	f04f 0200 	mov.w	r2, #0
 800cc22:	02a2      	lsls	r2, r4, #10
 800cc24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cc28:	0299      	lsls	r1, r3, #10
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4614      	mov	r4, r2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	4621      	mov	r1, r4
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f04f 0400 	mov.w	r4, #0
 800cc38:	461a      	mov	r2, r3
 800cc3a:	4623      	mov	r3, r4
 800cc3c:	f7f3 fd24 	bl	8000688 <__aeabi_uldivmod>
 800cc40:	4603      	mov	r3, r0
 800cc42:	460c      	mov	r4, r1
 800cc44:	60fb      	str	r3, [r7, #12]
 800cc46:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	0c1b      	lsrs	r3, r3, #16
 800cc4c:	f003 0303 	and.w	r3, r3, #3
 800cc50:	3301      	adds	r3, #1
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	603b      	str	r3, [r7, #0]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc5e:	60bb      	str	r3, [r7, #8]
 800cc60:	e002      	b.n	800cc68 <HAL_RCC_GetSysClockFreq+0x14c>
 800cc62:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cc64:	60bb      	str	r3, [r7, #8]
 800cc66:	bf00      	nop
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc72:	bf00      	nop
 800cc74:	40023800 	.word	0x40023800
 800cc78:	00f42400 	.word	0x00f42400
 800cc7c:	01312d00 	.word	0x01312d00

0800cc80 <HAL_RCC_GetHCLKFreq>:
 800cc80:	b480      	push	{r7}
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	4b03      	ldr	r3, [pc, #12]	; (800cc94 <HAL_RCC_GetHCLKFreq+0x14>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	2000005c 	.word	0x2000005c

0800cc98 <HAL_RCC_GetPCLK1Freq>:
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	f7ff fff0 	bl	800cc80 <HAL_RCC_GetHCLKFreq>
 800cca0:	4601      	mov	r1, r0
 800cca2:	4b05      	ldr	r3, [pc, #20]	; (800ccb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	0a9b      	lsrs	r3, r3, #10
 800cca8:	f003 0307 	and.w	r3, r3, #7
 800ccac:	4a03      	ldr	r2, [pc, #12]	; (800ccbc <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccae:	5cd3      	ldrb	r3, [r2, r3]
 800ccb0:	fa21 f303 	lsr.w	r3, r1, r3
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	40023800 	.word	0x40023800
 800ccbc:	08022990 	.word	0x08022990

0800ccc0 <HAL_RCC_GetPCLK2Freq>:
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	f7ff ffdc 	bl	800cc80 <HAL_RCC_GetHCLKFreq>
 800ccc8:	4601      	mov	r1, r0
 800ccca:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	0b5b      	lsrs	r3, r3, #13
 800ccd0:	f003 0307 	and.w	r3, r3, #7
 800ccd4:	4a03      	ldr	r2, [pc, #12]	; (800cce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ccd6:	5cd3      	ldrb	r3, [r2, r3]
 800ccd8:	fa21 f303 	lsr.w	r3, r1, r3
 800ccdc:	4618      	mov	r0, r3
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	40023800 	.word	0x40023800
 800cce4:	08022990 	.word	0x08022990

0800cce8 <HAL_RCCEx_PeriphCLKConfig>:
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b088      	sub	sp, #32
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	613b      	str	r3, [r7, #16]
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	61fb      	str	r3, [r7, #28]
 800cd00:	2300      	movs	r3, #0
 800cd02:	61bb      	str	r3, [r7, #24]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d012      	beq.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800cd10:	4b69      	ldr	r3, [pc, #420]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	4a68      	ldr	r2, [pc, #416]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cd1a:	6093      	str	r3, [r2, #8]
 800cd1c:	4b66      	ldr	r3, [pc, #408]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd1e:	689a      	ldr	r2, [r3, #8]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd24:	4964      	ldr	r1, [pc, #400]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd26:	4313      	orrs	r3, r2
 800cd28:	608b      	str	r3, [r1, #8]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800cd32:	2301      	movs	r3, #1
 800cd34:	61fb      	str	r3, [r7, #28]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d017      	beq.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800cd42:	4b5d      	ldr	r3, [pc, #372]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd50:	4959      	ldr	r1, [pc, #356]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd52:	4313      	orrs	r3, r2
 800cd54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd60:	d101      	bne.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800cd62:	2301      	movs	r3, #1
 800cd64:	61fb      	str	r3, [r7, #28]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	61bb      	str	r3, [r7, #24]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d017      	beq.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800cd7e:	4b4e      	ldr	r3, [pc, #312]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8c:	494a      	ldr	r1, [pc, #296]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd9c:	d101      	bne.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0xba>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	61fb      	str	r3, [r7, #28]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	61bb      	str	r3, [r7, #24]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	61fb      	str	r3, [r7, #28]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 0320 	and.w	r3, r3, #32
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 808b 	beq.w	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800cdcc:	4b3a      	ldr	r3, [pc, #232]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd0:	4a39      	ldr	r2, [pc, #228]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdd6:	6413      	str	r3, [r2, #64]	; 0x40
 800cdd8:	4b37      	ldr	r3, [pc, #220]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cde0:	60bb      	str	r3, [r7, #8]
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	4b35      	ldr	r3, [pc, #212]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a34      	ldr	r2, [pc, #208]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cdea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdee:	6013      	str	r3, [r2, #0]
 800cdf0:	f7fb fa2a 	bl	8008248 <HAL_GetTick>
 800cdf4:	6178      	str	r0, [r7, #20]
 800cdf6:	e008      	b.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x122>
 800cdf8:	f7fb fa26 	bl	8008248 <HAL_GetTick>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	2b64      	cmp	r3, #100	; 0x64
 800ce04:	d901      	bls.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x122>
 800ce06:	2303      	movs	r3, #3
 800ce08:	e38d      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800ce0a:	4b2c      	ldr	r3, [pc, #176]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d0f0      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ce16:	4b28      	ldr	r3, [pc, #160]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce1e:	613b      	str	r3, [r7, #16]
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d035      	beq.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d02e      	beq.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ce34:	4b20      	ldr	r3, [pc, #128]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce3c:	613b      	str	r3, [r7, #16]
 800ce3e:	4b1e      	ldr	r3, [pc, #120]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce42:	4a1d      	ldr	r2, [pc, #116]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce48:	6713      	str	r3, [r2, #112]	; 0x70
 800ce4a:	4b1b      	ldr	r3, [pc, #108]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce4e:	4a1a      	ldr	r2, [pc, #104]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce54:	6713      	str	r3, [r2, #112]	; 0x70
 800ce56:	4a18      	ldr	r2, [pc, #96]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	6713      	str	r3, [r2, #112]	; 0x70
 800ce5c:	4b16      	ldr	r3, [pc, #88]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce60:	f003 0301 	and.w	r3, r3, #1
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d114      	bne.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ce68:	f7fb f9ee 	bl	8008248 <HAL_GetTick>
 800ce6c:	6178      	str	r0, [r7, #20]
 800ce6e:	e00a      	b.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800ce70:	f7fb f9ea 	bl	8008248 <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d901      	bls.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800ce82:	2303      	movs	r3, #3
 800ce84:	e34f      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800ce86:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8a:	f003 0302 	and.w	r3, r3, #2
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0ee      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce9e:	d111      	bne.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cea0:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ceac:	4b04      	ldr	r3, [pc, #16]	; (800cec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ceae:	400b      	ands	r3, r1
 800ceb0:	4901      	ldr	r1, [pc, #4]	; (800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	608b      	str	r3, [r1, #8]
 800ceb6:	e00b      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ceb8:	40023800 	.word	0x40023800
 800cebc:	40007000 	.word	0x40007000
 800cec0:	0ffffcff 	.word	0x0ffffcff
 800cec4:	4bb3      	ldr	r3, [pc, #716]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	4ab2      	ldr	r2, [pc, #712]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ceca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cece:	6093      	str	r3, [r2, #8]
 800ced0:	4bb0      	ldr	r3, [pc, #704]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ced2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cedc:	49ad      	ldr	r1, [pc, #692]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cede:	4313      	orrs	r3, r2
 800cee0:	670b      	str	r3, [r1, #112]	; 0x70
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0310 	and.w	r3, r3, #16
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d010      	beq.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800ceee:	4ba9      	ldr	r3, [pc, #676]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cef4:	4aa7      	ldr	r2, [pc, #668]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cefa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cefe:	4ba5      	ldr	r3, [pc, #660]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf08:	49a2      	ldr	r1, [pc, #648]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00a      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800cf1c:	4b9d      	ldr	r3, [pc, #628]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf2a:	499a      	ldr	r1, [pc, #616]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00a      	beq.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800cf3e:	4b95      	ldr	r3, [pc, #596]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf4c:	4991      	ldr	r1, [pc, #580]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00a      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800cf60:	4b8c      	ldr	r3, [pc, #560]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf6e:	4989      	ldr	r1, [pc, #548]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf70:	4313      	orrs	r3, r2
 800cf72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00a      	beq.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800cf82:	4b84      	ldr	r3, [pc, #528]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf90:	4980      	ldr	r1, [pc, #512]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00a      	beq.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800cfa4:	4b7b      	ldr	r3, [pc, #492]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfaa:	f023 0203 	bic.w	r2, r3, #3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb2:	4978      	ldr	r1, [pc, #480]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00a      	beq.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800cfc6:	4b73      	ldr	r3, [pc, #460]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfcc:	f023 020c 	bic.w	r2, r3, #12
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfd4:	496f      	ldr	r1, [pc, #444]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00a      	beq.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x316>
 800cfe8:	4b6a      	ldr	r3, [pc, #424]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cff6:	4967      	ldr	r1, [pc, #412]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cff8:	4313      	orrs	r3, r2
 800cffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00a      	beq.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x338>
 800d00a:	4b62      	ldr	r3, [pc, #392]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d010:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d018:	495e      	ldr	r1, [pc, #376]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d01a:	4313      	orrs	r3, r2
 800d01c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00a      	beq.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800d02c:	4b59      	ldr	r3, [pc, #356]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d03a:	4956      	ldr	r1, [pc, #344]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d03c:	4313      	orrs	r3, r2
 800d03e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00a      	beq.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800d04e:	4b51      	ldr	r3, [pc, #324]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d054:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d05c:	494d      	ldr	r1, [pc, #308]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d05e:	4313      	orrs	r3, r2
 800d060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00a      	beq.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 800d070:	4b48      	ldr	r3, [pc, #288]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d076:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d07e:	4945      	ldr	r1, [pc, #276]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d080:	4313      	orrs	r3, r2
 800d082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00a      	beq.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800d092:	4b40      	ldr	r3, [pc, #256]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d098:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0a0:	493c      	ldr	r1, [pc, #240]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00a      	beq.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800d0b4:	4b37      	ldr	r3, [pc, #220]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0c2:	4934      	ldr	r1, [pc, #208]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d011      	beq.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x412>
 800d0d6:	4b2f      	ldr	r3, [pc, #188]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e4:	492b      	ldr	r1, [pc, #172]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0f4:	d101      	bne.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x412>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	61bb      	str	r3, [r7, #24]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 0308 	and.w	r3, r3, #8
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x422>
 800d106:	2301      	movs	r3, #1
 800d108:	61bb      	str	r3, [r7, #24]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00a      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x444>
 800d116:	4b1f      	ldr	r3, [pc, #124]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d11c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d124:	491b      	ldr	r1, [pc, #108]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d126:	4313      	orrs	r3, r2
 800d128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00b      	beq.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800d138:	4b16      	ldr	r3, [pc, #88]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d13e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d148:	4912      	ldr	r1, [pc, #72]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d14a:	4313      	orrs	r3, r2
 800d14c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800d15c:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d162:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d16c:	4909      	ldr	r1, [pc, #36]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d16e:	4313      	orrs	r3, r2
 800d170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00f      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800d180:	4b04      	ldr	r3, [pc, #16]	; (800d194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d186:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d190:	e002      	b.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800d192:	bf00      	nop
 800d194:	40023800 	.word	0x40023800
 800d198:	4985      	ldr	r1, [pc, #532]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d19a:	4313      	orrs	r3, r2
 800d19c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00b      	beq.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800d1ac:	4b80      	ldr	r3, [pc, #512]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1bc:	497c      	ldr	r1, [pc, #496]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d005      	beq.n	800d1d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1d2:	f040 80d6 	bne.w	800d382 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800d1d6:	4b76      	ldr	r3, [pc, #472]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a75      	ldr	r2, [pc, #468]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	f7fb f831 	bl	8008248 <HAL_GetTick>
 800d1e6:	6178      	str	r0, [r7, #20]
 800d1e8:	e008      	b.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d1ea:	f7fb f82d 	bl	8008248 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	2b64      	cmp	r3, #100	; 0x64
 800d1f6:	d901      	bls.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	e194      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d1fc:	4b6c      	ldr	r3, [pc, #432]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1f0      	bne.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x502>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 0301 	and.w	r3, r3, #1
 800d210:	2b00      	cmp	r3, #0
 800d212:	d021      	beq.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d11d      	bne.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800d21c:	4b64      	ldr	r3, [pc, #400]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d222:	0c1b      	lsrs	r3, r3, #16
 800d224:	f003 0303 	and.w	r3, r3, #3
 800d228:	613b      	str	r3, [r7, #16]
 800d22a:	4b61      	ldr	r3, [pc, #388]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d230:	0e1b      	lsrs	r3, r3, #24
 800d232:	f003 030f 	and.w	r3, r3, #15
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	019a      	lsls	r2, r3, #6
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	041b      	lsls	r3, r3, #16
 800d242:	431a      	orrs	r2, r3
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	061b      	lsls	r3, r3, #24
 800d248:	431a      	orrs	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	071b      	lsls	r3, r3, #28
 800d250:	4957      	ldr	r1, [pc, #348]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d252:	4313      	orrs	r3, r2
 800d254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d004      	beq.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d26c:	d00a      	beq.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d276:	2b00      	cmp	r3, #0
 800d278:	d02e      	beq.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d282:	d129      	bne.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 800d284:	4b4a      	ldr	r3, [pc, #296]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d28a:	0c1b      	lsrs	r3, r3, #16
 800d28c:	f003 0303 	and.w	r3, r3, #3
 800d290:	613b      	str	r3, [r7, #16]
 800d292:	4b47      	ldr	r3, [pc, #284]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d298:	0f1b      	lsrs	r3, r3, #28
 800d29a:	f003 0307 	and.w	r3, r3, #7
 800d29e:	60fb      	str	r3, [r7, #12]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	019a      	lsls	r2, r3, #6
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	041b      	lsls	r3, r3, #16
 800d2aa:	431a      	orrs	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	061b      	lsls	r3, r3, #24
 800d2b2:	431a      	orrs	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	071b      	lsls	r3, r3, #28
 800d2b8:	493d      	ldr	r1, [pc, #244]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800d2c0:	4b3b      	ldr	r3, [pc, #236]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2c6:	f023 021f 	bic.w	r2, r3, #31
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	4937      	ldr	r1, [pc, #220]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d01d      	beq.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800d2e4:	4b32      	ldr	r3, [pc, #200]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2ea:	0e1b      	lsrs	r3, r3, #24
 800d2ec:	f003 030f 	and.w	r3, r3, #15
 800d2f0:	613b      	str	r3, [r7, #16]
 800d2f2:	4b2f      	ldr	r3, [pc, #188]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2f8:	0f1b      	lsrs	r3, r3, #28
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	019a      	lsls	r2, r3, #6
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	041b      	lsls	r3, r3, #16
 800d30c:	431a      	orrs	r2, r3
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	061b      	lsls	r3, r3, #24
 800d312:	431a      	orrs	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	071b      	lsls	r3, r3, #28
 800d318:	4925      	ldr	r1, [pc, #148]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d31a:	4313      	orrs	r3, r2
 800d31c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d011      	beq.n	800d350 <HAL_RCCEx_PeriphCLKConfig+0x668>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	019a      	lsls	r2, r3, #6
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	041b      	lsls	r3, r3, #16
 800d338:	431a      	orrs	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	061b      	lsls	r3, r3, #24
 800d340:	431a      	orrs	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	071b      	lsls	r3, r3, #28
 800d348:	4919      	ldr	r1, [pc, #100]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d34a:	4313      	orrs	r3, r2
 800d34c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800d350:	4b17      	ldr	r3, [pc, #92]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a16      	ldr	r2, [pc, #88]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d356:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d35a:	6013      	str	r3, [r2, #0]
 800d35c:	f7fa ff74 	bl	8008248 <HAL_GetTick>
 800d360:	6178      	str	r0, [r7, #20]
 800d362:	e008      	b.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800d364:	f7fa ff70 	bl	8008248 <HAL_GetTick>
 800d368:	4602      	mov	r2, r0
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	2b64      	cmp	r3, #100	; 0x64
 800d370:	d901      	bls.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800d372:	2303      	movs	r3, #3
 800d374:	e0d7      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d376:	4b0e      	ldr	r3, [pc, #56]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0f0      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	2b01      	cmp	r3, #1
 800d386:	f040 80cd 	bne.w	800d524 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800d38a:	4b09      	ldr	r3, [pc, #36]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a08      	ldr	r2, [pc, #32]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d394:	6013      	str	r3, [r2, #0]
 800d396:	f7fa ff57 	bl	8008248 <HAL_GetTick>
 800d39a:	6178      	str	r0, [r7, #20]
 800d39c:	e00a      	b.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d39e:	f7fa ff53 	bl	8008248 <HAL_GetTick>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	2b64      	cmp	r3, #100	; 0x64
 800d3aa:	d903      	bls.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e0ba      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d3b0:	40023800 	.word	0x40023800
 800d3b4:	4b5e      	ldr	r3, [pc, #376]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3c0:	d0ed      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d009      	beq.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x702>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d02e      	beq.n	800d440 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d12a      	bne.n	800d440 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800d3ea:	4b51      	ldr	r3, [pc, #324]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3f0:	0c1b      	lsrs	r3, r3, #16
 800d3f2:	f003 0303 	and.w	r3, r3, #3
 800d3f6:	613b      	str	r3, [r7, #16]
 800d3f8:	4b4d      	ldr	r3, [pc, #308]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3fe:	0f1b      	lsrs	r3, r3, #28
 800d400:	f003 0307 	and.w	r3, r3, #7
 800d404:	60fb      	str	r3, [r7, #12]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	019a      	lsls	r2, r3, #6
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	041b      	lsls	r3, r3, #16
 800d410:	431a      	orrs	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	061b      	lsls	r3, r3, #24
 800d418:	431a      	orrs	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	071b      	lsls	r3, r3, #28
 800d41e:	4944      	ldr	r1, [pc, #272]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d420:	4313      	orrs	r3, r2
 800d422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d426:	4b42      	ldr	r3, [pc, #264]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d42c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d434:	3b01      	subs	r3, #1
 800d436:	021b      	lsls	r3, r3, #8
 800d438:	493d      	ldr	r1, [pc, #244]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d43a:	4313      	orrs	r3, r2
 800d43c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d022      	beq.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d454:	d11d      	bne.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800d456:	4b36      	ldr	r3, [pc, #216]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d45c:	0e1b      	lsrs	r3, r3, #24
 800d45e:	f003 030f 	and.w	r3, r3, #15
 800d462:	613b      	str	r3, [r7, #16]
 800d464:	4b32      	ldr	r3, [pc, #200]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d46a:	0f1b      	lsrs	r3, r3, #28
 800d46c:	f003 0307 	and.w	r3, r3, #7
 800d470:	60fb      	str	r3, [r7, #12]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	695b      	ldr	r3, [r3, #20]
 800d476:	019a      	lsls	r2, r3, #6
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a1b      	ldr	r3, [r3, #32]
 800d47c:	041b      	lsls	r3, r3, #16
 800d47e:	431a      	orrs	r2, r3
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	061b      	lsls	r3, r3, #24
 800d484:	431a      	orrs	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	071b      	lsls	r3, r3, #28
 800d48a:	4929      	ldr	r1, [pc, #164]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d48c:	4313      	orrs	r3, r2
 800d48e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f003 0308 	and.w	r3, r3, #8
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d028      	beq.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800d49e:	4b24      	ldr	r3, [pc, #144]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4a4:	0e1b      	lsrs	r3, r3, #24
 800d4a6:	f003 030f 	and.w	r3, r3, #15
 800d4aa:	613b      	str	r3, [r7, #16]
 800d4ac:	4b20      	ldr	r3, [pc, #128]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b2:	0c1b      	lsrs	r3, r3, #16
 800d4b4:	f003 0303 	and.w	r3, r3, #3
 800d4b8:	60fb      	str	r3, [r7, #12]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	019a      	lsls	r2, r3, #6
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	041b      	lsls	r3, r3, #16
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	061b      	lsls	r3, r3, #24
 800d4ca:	431a      	orrs	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	69db      	ldr	r3, [r3, #28]
 800d4d0:	071b      	lsls	r3, r3, #28
 800d4d2:	4917      	ldr	r1, [pc, #92]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d4da:	4b15      	ldr	r3, [pc, #84]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	4911      	ldr	r1, [pc, #68]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800d4f0:	4b0f      	ldr	r3, [pc, #60]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a0e      	ldr	r2, [pc, #56]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4fa:	6013      	str	r3, [r2, #0]
 800d4fc:	f7fa fea4 	bl	8008248 <HAL_GetTick>
 800d500:	6178      	str	r0, [r7, #20]
 800d502:	e008      	b.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800d504:	f7fa fea0 	bl	8008248 <HAL_GetTick>
 800d508:	4602      	mov	r2, r0
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	2b64      	cmp	r3, #100	; 0x64
 800d510:	d901      	bls.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800d512:	2303      	movs	r3, #3
 800d514:	e007      	b.n	800d526 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d516:	4b06      	ldr	r3, [pc, #24]	; (800d530 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d51e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d522:	d1ef      	bne.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800d524:	2300      	movs	r3, #0
 800d526:	4618      	mov	r0, r3
 800d528:	3720      	adds	r7, #32
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	40023800 	.word	0x40023800

0800d534 <HAL_RTC_Init>:
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <HAL_RTC_Init+0x12>
 800d542:	2301      	movs	r3, #1
 800d544:	e06b      	b.n	800d61e <HAL_RTC_Init+0xea>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	7f5b      	ldrb	r3, [r3, #29]
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d105      	bne.n	800d55c <HAL_RTC_Init+0x28>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	771a      	strb	r2, [r3, #28]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7f9 ff20 	bl	800739c <HAL_RTC_MspInit>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2202      	movs	r2, #2
 800d560:	775a      	strb	r2, [r3, #29]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	22ca      	movs	r2, #202	; 0xca
 800d568:	625a      	str	r2, [r3, #36]	; 0x24
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2253      	movs	r2, #83	; 0x53
 800d570:	625a      	str	r2, [r3, #36]	; 0x24
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 fa96 	bl	800daa4 <RTC_EnterInitMode>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d008      	beq.n	800d590 <HAL_RTC_Init+0x5c>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	22ff      	movs	r2, #255	; 0xff
 800d584:	625a      	str	r2, [r3, #36]	; 0x24
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2204      	movs	r2, #4
 800d58a:	775a      	strb	r2, [r3, #29]
 800d58c:	2301      	movs	r3, #1
 800d58e:	e046      	b.n	800d61e <HAL_RTC_Init+0xea>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6899      	ldr	r1, [r3, #8]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4b23      	ldr	r3, [pc, #140]	; (800d628 <HAL_RTC_Init+0xf4>)
 800d59c:	400b      	ands	r3, r1
 800d59e:	6093      	str	r3, [r2, #8]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	6899      	ldr	r1, [r3, #8]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685a      	ldr	r2, [r3, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	431a      	orrs	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	695b      	ldr	r3, [r3, #20]
 800d5b4:	431a      	orrs	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	430a      	orrs	r2, r1
 800d5bc:	609a      	str	r2, [r3, #8]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	68d2      	ldr	r2, [r2, #12]
 800d5c6:	611a      	str	r2, [r3, #16]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6919      	ldr	r1, [r3, #16]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	041a      	lsls	r2, r3, #16
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	430a      	orrs	r2, r1
 800d5da:	611a      	str	r2, [r3, #16]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	68da      	ldr	r2, [r3, #12]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5ea:	60da      	str	r2, [r3, #12]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f022 0208 	bic.w	r2, r2, #8
 800d5fa:	64da      	str	r2, [r3, #76]	; 0x4c
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	699a      	ldr	r2, [r3, #24]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	430a      	orrs	r2, r1
 800d60c:	64da      	str	r2, [r3, #76]	; 0x4c
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	22ff      	movs	r2, #255	; 0xff
 800d614:	625a      	str	r2, [r3, #36]	; 0x24
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	775a      	strb	r2, [r3, #29]
 800d61c:	2300      	movs	r3, #0
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	ff8fffbf 	.word	0xff8fffbf

0800d62c <HAL_RTC_SetTime>:
 800d62c:	b590      	push	{r4, r7, lr}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
 800d638:	2300      	movs	r3, #0
 800d63a:	617b      	str	r3, [r7, #20]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	7f1b      	ldrb	r3, [r3, #28]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d101      	bne.n	800d648 <HAL_RTC_SetTime+0x1c>
 800d644:	2302      	movs	r3, #2
 800d646:	e0a8      	b.n	800d79a <HAL_RTC_SetTime+0x16e>
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2201      	movs	r2, #1
 800d64c:	771a      	strb	r2, [r3, #28]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2202      	movs	r2, #2
 800d652:	775a      	strb	r2, [r3, #29]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d126      	bne.n	800d6a8 <HAL_RTC_SetTime+0x7c>
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <HAL_RTC_SetTime+0x42>
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	2200      	movs	r2, #0
 800d66c:	731a      	strb	r2, [r3, #12]
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	4618      	mov	r0, r3
 800d674:	f000 fa42 	bl	800dafc <RTC_ByteToBcd2>
 800d678:	4603      	mov	r3, r0
 800d67a:	041c      	lsls	r4, r3, #16
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	785b      	ldrb	r3, [r3, #1]
 800d680:	4618      	mov	r0, r3
 800d682:	f000 fa3b 	bl	800dafc <RTC_ByteToBcd2>
 800d686:	4603      	mov	r3, r0
 800d688:	021b      	lsls	r3, r3, #8
 800d68a:	431c      	orrs	r4, r3
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	789b      	ldrb	r3, [r3, #2]
 800d690:	4618      	mov	r0, r3
 800d692:	f000 fa33 	bl	800dafc <RTC_ByteToBcd2>
 800d696:	4603      	mov	r3, r0
 800d698:	ea44 0203 	orr.w	r2, r4, r3
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	7b1b      	ldrb	r3, [r3, #12]
 800d6a0:	041b      	lsls	r3, r3, #16
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	617b      	str	r3, [r7, #20]
 800d6a6:	e018      	b.n	800d6da <HAL_RTC_SetTime+0xae>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d102      	bne.n	800d6bc <HAL_RTC_SetTime+0x90>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	731a      	strb	r2, [r3, #12]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	041a      	lsls	r2, r3, #16
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	785b      	ldrb	r3, [r3, #1]
 800d6c6:	021b      	lsls	r3, r3, #8
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	7892      	ldrb	r2, [r2, #2]
 800d6ce:	431a      	orrs	r2, r3
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	7b1b      	ldrb	r3, [r3, #12]
 800d6d4:	041b      	lsls	r3, r3, #16
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	617b      	str	r3, [r7, #20]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	22ca      	movs	r2, #202	; 0xca
 800d6e0:	625a      	str	r2, [r3, #36]	; 0x24
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2253      	movs	r2, #83	; 0x53
 800d6e8:	625a      	str	r2, [r3, #36]	; 0x24
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f000 f9da 	bl	800daa4 <RTC_EnterInitMode>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00b      	beq.n	800d70e <HAL_RTC_SetTime+0xe2>
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	22ff      	movs	r2, #255	; 0xff
 800d6fc:	625a      	str	r2, [r3, #36]	; 0x24
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2204      	movs	r2, #4
 800d702:	775a      	strb	r2, [r3, #29]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2200      	movs	r2, #0
 800d708:	771a      	strb	r2, [r3, #28]
 800d70a:	2301      	movs	r3, #1
 800d70c:	e045      	b.n	800d79a <HAL_RTC_SetTime+0x16e>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	6979      	ldr	r1, [r7, #20]
 800d714:	4b23      	ldr	r3, [pc, #140]	; (800d7a4 <HAL_RTC_SetTime+0x178>)
 800d716:	400b      	ands	r3, r1
 800d718:	6013      	str	r3, [r2, #0]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	689a      	ldr	r2, [r3, #8]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d728:	609a      	str	r2, [r3, #8]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6899      	ldr	r1, [r3, #8]
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	691a      	ldr	r2, [r3, #16]
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	431a      	orrs	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	430a      	orrs	r2, r1
 800d740:	609a      	str	r2, [r3, #8]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68da      	ldr	r2, [r3, #12]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d750:	60da      	str	r2, [r3, #12]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f003 0320 	and.w	r3, r3, #32
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d111      	bne.n	800d784 <HAL_RTC_SetTime+0x158>
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 f977 	bl	800da54 <HAL_RTC_WaitForSynchro>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00b      	beq.n	800d784 <HAL_RTC_SetTime+0x158>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	22ff      	movs	r2, #255	; 0xff
 800d772:	625a      	str	r2, [r3, #36]	; 0x24
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2204      	movs	r2, #4
 800d778:	775a      	strb	r2, [r3, #29]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2200      	movs	r2, #0
 800d77e:	771a      	strb	r2, [r3, #28]
 800d780:	2301      	movs	r3, #1
 800d782:	e00a      	b.n	800d79a <HAL_RTC_SetTime+0x16e>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	22ff      	movs	r2, #255	; 0xff
 800d78a:	625a      	str	r2, [r3, #36]	; 0x24
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2201      	movs	r2, #1
 800d790:	775a      	strb	r2, [r3, #29]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2200      	movs	r2, #0
 800d796:	771a      	strb	r2, [r3, #28]
 800d798:	2300      	movs	r3, #0
 800d79a:	4618      	mov	r0, r3
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd90      	pop	{r4, r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	007f7f7f 	.word	0x007f7f7f

0800d7a8 <HAL_RTC_GetTime>:
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	617b      	str	r3, [r7, #20]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	605a      	str	r2, [r3, #4]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	609a      	str	r2, [r3, #8]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	4b22      	ldr	r3, [pc, #136]	; (800d860 <HAL_RTC_GetTime+0xb8>)
 800d7d8:	4013      	ands	r3, r2
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	0c1b      	lsrs	r3, r3, #16
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	701a      	strb	r2, [r3, #0]
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	0a1b      	lsrs	r3, r3, #8
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	705a      	strb	r2, [r3, #1]
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d804:	b2da      	uxtb	r2, r3
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	709a      	strb	r2, [r3, #2]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	0c1b      	lsrs	r3, r3, #16
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d814:	b2da      	uxtb	r2, r3
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	731a      	strb	r2, [r3, #12]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d11a      	bne.n	800d856 <HAL_RTC_GetTime+0xae>
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	4618      	mov	r0, r3
 800d826:	f000 f987 	bl	800db38 <RTC_Bcd2ToByte>
 800d82a:	4603      	mov	r3, r0
 800d82c:	461a      	mov	r2, r3
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	701a      	strb	r2, [r3, #0]
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	785b      	ldrb	r3, [r3, #1]
 800d836:	4618      	mov	r0, r3
 800d838:	f000 f97e 	bl	800db38 <RTC_Bcd2ToByte>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	705a      	strb	r2, [r3, #1]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	789b      	ldrb	r3, [r3, #2]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 f975 	bl	800db38 <RTC_Bcd2ToByte>
 800d84e:	4603      	mov	r3, r0
 800d850:	461a      	mov	r2, r3
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	709a      	strb	r2, [r3, #2]
 800d856:	2300      	movs	r3, #0
 800d858:	4618      	mov	r0, r3
 800d85a:	3718      	adds	r7, #24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	007f7f7f 	.word	0x007f7f7f

0800d864 <HAL_RTC_SetDate>:
 800d864:	b590      	push	{r4, r7, lr}
 800d866:	b087      	sub	sp, #28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	2300      	movs	r3, #0
 800d872:	617b      	str	r3, [r7, #20]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	7f1b      	ldrb	r3, [r3, #28]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d101      	bne.n	800d880 <HAL_RTC_SetDate+0x1c>
 800d87c:	2302      	movs	r3, #2
 800d87e:	e092      	b.n	800d9a6 <HAL_RTC_SetDate+0x142>
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2201      	movs	r2, #1
 800d884:	771a      	strb	r2, [r3, #28]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2202      	movs	r2, #2
 800d88a:	775a      	strb	r2, [r3, #29]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d10e      	bne.n	800d8b0 <HAL_RTC_SetDate+0x4c>
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	785b      	ldrb	r3, [r3, #1]
 800d896:	f003 0310 	and.w	r3, r3, #16
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d008      	beq.n	800d8b0 <HAL_RTC_SetDate+0x4c>
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	785b      	ldrb	r3, [r3, #1]
 800d8a2:	f023 0310 	bic.w	r3, r3, #16
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	330a      	adds	r3, #10
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	705a      	strb	r2, [r3, #1]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d11c      	bne.n	800d8f0 <HAL_RTC_SetDate+0x8c>
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	78db      	ldrb	r3, [r3, #3]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f91e 	bl	800dafc <RTC_ByteToBcd2>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	041c      	lsls	r4, r3, #16
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	785b      	ldrb	r3, [r3, #1]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f000 f917 	bl	800dafc <RTC_ByteToBcd2>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	021b      	lsls	r3, r3, #8
 800d8d2:	431c      	orrs	r4, r3
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	789b      	ldrb	r3, [r3, #2]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 f90f 	bl	800dafc <RTC_ByteToBcd2>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	ea44 0203 	orr.w	r2, r4, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	035b      	lsls	r3, r3, #13
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	617b      	str	r3, [r7, #20]
 800d8ee:	e00e      	b.n	800d90e <HAL_RTC_SetDate+0xaa>
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	78db      	ldrb	r3, [r3, #3]
 800d8f4:	041a      	lsls	r2, r3, #16
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	785b      	ldrb	r3, [r3, #1]
 800d8fa:	021b      	lsls	r3, r3, #8
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	7892      	ldrb	r2, [r2, #2]
 800d902:	431a      	orrs	r2, r3
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	035b      	lsls	r3, r3, #13
 800d90a:	4313      	orrs	r3, r2
 800d90c:	617b      	str	r3, [r7, #20]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	22ca      	movs	r2, #202	; 0xca
 800d914:	625a      	str	r2, [r3, #36]	; 0x24
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2253      	movs	r2, #83	; 0x53
 800d91c:	625a      	str	r2, [r3, #36]	; 0x24
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f000 f8c0 	bl	800daa4 <RTC_EnterInitMode>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00b      	beq.n	800d942 <HAL_RTC_SetDate+0xde>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	22ff      	movs	r2, #255	; 0xff
 800d930:	625a      	str	r2, [r3, #36]	; 0x24
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2204      	movs	r2, #4
 800d936:	775a      	strb	r2, [r3, #29]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	771a      	strb	r2, [r3, #28]
 800d93e:	2301      	movs	r3, #1
 800d940:	e031      	b.n	800d9a6 <HAL_RTC_SetDate+0x142>
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	6979      	ldr	r1, [r7, #20]
 800d948:	4b19      	ldr	r3, [pc, #100]	; (800d9b0 <HAL_RTC_SetDate+0x14c>)
 800d94a:	400b      	ands	r3, r1
 800d94c:	6053      	str	r3, [r2, #4]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d95c:	60da      	str	r2, [r3, #12]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	f003 0320 	and.w	r3, r3, #32
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d111      	bne.n	800d990 <HAL_RTC_SetDate+0x12c>
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f000 f871 	bl	800da54 <HAL_RTC_WaitForSynchro>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00b      	beq.n	800d990 <HAL_RTC_SetDate+0x12c>
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	22ff      	movs	r2, #255	; 0xff
 800d97e:	625a      	str	r2, [r3, #36]	; 0x24
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2204      	movs	r2, #4
 800d984:	775a      	strb	r2, [r3, #29]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2200      	movs	r2, #0
 800d98a:	771a      	strb	r2, [r3, #28]
 800d98c:	2301      	movs	r3, #1
 800d98e:	e00a      	b.n	800d9a6 <HAL_RTC_SetDate+0x142>
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	22ff      	movs	r2, #255	; 0xff
 800d996:	625a      	str	r2, [r3, #36]	; 0x24
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2201      	movs	r2, #1
 800d99c:	775a      	strb	r2, [r3, #29]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	771a      	strb	r2, [r3, #28]
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	371c      	adds	r7, #28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd90      	pop	{r4, r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	00ffff3f 	.word	0x00ffff3f

0800d9b4 <HAL_RTC_GetDate>:
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	617b      	str	r3, [r7, #20]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	685a      	ldr	r2, [r3, #4]
 800d9ca:	4b21      	ldr	r3, [pc, #132]	; (800da50 <HAL_RTC_GetDate+0x9c>)
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	0c1b      	lsrs	r3, r3, #16
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	70da      	strb	r2, [r3, #3]
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	0a1b      	lsrs	r3, r3, #8
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	f003 031f 	and.w	r3, r3, #31
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	705a      	strb	r2, [r3, #1]
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9f2:	b2da      	uxtb	r2, r3
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	709a      	strb	r2, [r3, #2]
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	0b5b      	lsrs	r3, r3, #13
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 0307 	and.w	r3, r3, #7
 800da02:	b2da      	uxtb	r2, r3
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	701a      	strb	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d11a      	bne.n	800da44 <HAL_RTC_GetDate+0x90>
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	78db      	ldrb	r3, [r3, #3]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f890 	bl	800db38 <RTC_Bcd2ToByte>
 800da18:	4603      	mov	r3, r0
 800da1a:	461a      	mov	r2, r3
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	70da      	strb	r2, [r3, #3]
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	785b      	ldrb	r3, [r3, #1]
 800da24:	4618      	mov	r0, r3
 800da26:	f000 f887 	bl	800db38 <RTC_Bcd2ToByte>
 800da2a:	4603      	mov	r3, r0
 800da2c:	461a      	mov	r2, r3
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	705a      	strb	r2, [r3, #1]
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	789b      	ldrb	r3, [r3, #2]
 800da36:	4618      	mov	r0, r3
 800da38:	f000 f87e 	bl	800db38 <RTC_Bcd2ToByte>
 800da3c:	4603      	mov	r3, r0
 800da3e:	461a      	mov	r2, r3
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	709a      	strb	r2, [r3, #2]
 800da44:	2300      	movs	r3, #0
 800da46:	4618      	mov	r0, r3
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	00ffff3f 	.word	0x00ffff3f

0800da54 <HAL_RTC_WaitForSynchro>:
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	2300      	movs	r3, #0
 800da5e:	60fb      	str	r3, [r7, #12]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68da      	ldr	r2, [r3, #12]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800da6e:	60da      	str	r2, [r3, #12]
 800da70:	f7fa fbea 	bl	8008248 <HAL_GetTick>
 800da74:	60f8      	str	r0, [r7, #12]
 800da76:	e009      	b.n	800da8c <HAL_RTC_WaitForSynchro+0x38>
 800da78:	f7fa fbe6 	bl	8008248 <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da86:	d901      	bls.n	800da8c <HAL_RTC_WaitForSynchro+0x38>
 800da88:	2303      	movs	r3, #3
 800da8a:	e007      	b.n	800da9c <HAL_RTC_WaitForSynchro+0x48>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	f003 0320 	and.w	r3, r3, #32
 800da96:	2b00      	cmp	r3, #0
 800da98:	d0ee      	beq.n	800da78 <HAL_RTC_WaitForSynchro+0x24>
 800da9a:	2300      	movs	r3, #0
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <RTC_EnterInitMode>:
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	2300      	movs	r3, #0
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d119      	bne.n	800daf2 <RTC_EnterInitMode+0x4e>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f04f 32ff 	mov.w	r2, #4294967295
 800dac6:	60da      	str	r2, [r3, #12]
 800dac8:	f7fa fbbe 	bl	8008248 <HAL_GetTick>
 800dacc:	60f8      	str	r0, [r7, #12]
 800dace:	e009      	b.n	800dae4 <RTC_EnterInitMode+0x40>
 800dad0:	f7fa fbba 	bl	8008248 <HAL_GetTick>
 800dad4:	4602      	mov	r2, r0
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dade:	d901      	bls.n	800dae4 <RTC_EnterInitMode+0x40>
 800dae0:	2303      	movs	r3, #3
 800dae2:	e007      	b.n	800daf4 <RTC_EnterInitMode+0x50>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d0ee      	beq.n	800dad0 <RTC_EnterInitMode+0x2c>
 800daf2:	2300      	movs	r3, #0
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <RTC_ByteToBcd2>:
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	71fb      	strb	r3, [r7, #7]
 800db06:	2300      	movs	r3, #0
 800db08:	60fb      	str	r3, [r7, #12]
 800db0a:	e005      	b.n	800db18 <RTC_ByteToBcd2+0x1c>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3301      	adds	r3, #1
 800db10:	60fb      	str	r3, [r7, #12]
 800db12:	79fb      	ldrb	r3, [r7, #7]
 800db14:	3b0a      	subs	r3, #10
 800db16:	71fb      	strb	r3, [r7, #7]
 800db18:	79fb      	ldrb	r3, [r7, #7]
 800db1a:	2b09      	cmp	r3, #9
 800db1c:	d8f6      	bhi.n	800db0c <RTC_ByteToBcd2+0x10>
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	b2db      	uxtb	r3, r3
 800db22:	011b      	lsls	r3, r3, #4
 800db24:	b2da      	uxtb	r2, r3
 800db26:	79fb      	ldrb	r3, [r7, #7]
 800db28:	4313      	orrs	r3, r2
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <RTC_Bcd2ToByte>:
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	4603      	mov	r3, r0
 800db40:	71fb      	strb	r3, [r7, #7]
 800db42:	2300      	movs	r3, #0
 800db44:	60fb      	str	r3, [r7, #12]
 800db46:	79fb      	ldrb	r3, [r7, #7]
 800db48:	091b      	lsrs	r3, r3, #4
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	461a      	mov	r2, r3
 800db4e:	4613      	mov	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	005b      	lsls	r3, r3, #1
 800db56:	60fb      	str	r3, [r7, #12]
 800db58:	79fb      	ldrb	r3, [r7, #7]
 800db5a:	f003 030f 	and.w	r3, r3, #15
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	b2db      	uxtb	r3, r3
 800db64:	4413      	add	r3, r2
 800db66:	b2db      	uxtb	r3, r3
 800db68:	4618      	mov	r0, r3
 800db6a:	3714      	adds	r7, #20
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <HAL_RTCEx_BKUPWrite>:
 800db74:	b480      	push	{r7}
 800db76:	b087      	sub	sp, #28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	2300      	movs	r3, #0
 800db82:	617b      	str	r3, [r7, #20]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3350      	adds	r3, #80	; 0x50
 800db8a:	617b      	str	r3, [r7, #20]
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	4413      	add	r3, r2
 800db94:	617b      	str	r3, [r7, #20]
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	601a      	str	r2, [r3, #0]
 800db9c:	bf00      	nop
 800db9e:	371c      	adds	r7, #28
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <HAL_SD_Init>:
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d101      	bne.n	800dbba <HAL_SD_Init+0x12>
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e022      	b.n	800dc00 <HAL_SD_Init+0x58>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d105      	bne.n	800dbd2 <HAL_SD_Init+0x2a>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	771a      	strb	r2, [r3, #28]
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7f9 fbff 	bl	80073d0 <HAL_SD_MspInit>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2203      	movs	r2, #3
 800dbd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 f814 	bl	800dc08 <HAL_SD_InitCard>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <HAL_SD_Init+0x42>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e00a      	b.n	800dc00 <HAL_SD_Init+0x58>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	639a      	str	r2, [r3, #56]	; 0x38
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	631a      	str	r2, [r3, #48]	; 0x30
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dbfe:	2300      	movs	r3, #0
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <HAL_SD_InitCard>:
 800dc08:	b5b0      	push	{r4, r5, r7, lr}
 800dc0a:	b08e      	sub	sp, #56	; 0x38
 800dc0c:	af04      	add	r7, sp, #16
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	2300      	movs	r3, #0
 800dc12:	60bb      	str	r3, [r7, #8]
 800dc14:	2300      	movs	r3, #0
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	2300      	movs	r3, #0
 800dc1a:	613b      	str	r3, [r7, #16]
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	2300      	movs	r3, #0
 800dc22:	61bb      	str	r3, [r7, #24]
 800dc24:	2376      	movs	r3, #118	; 0x76
 800dc26:	61fb      	str	r3, [r7, #28]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681d      	ldr	r5, [r3, #0]
 800dc2c:	466c      	mov	r4, sp
 800dc2e:	f107 0314 	add.w	r3, r7, #20
 800dc32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc3a:	f107 0308 	add.w	r3, r7, #8
 800dc3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc40:	4628      	mov	r0, r5
 800dc42:	f004 fa29 	bl	8012098 <SDMMC_Init>
 800dc46:	4603      	mov	r3, r0
 800dc48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d001      	beq.n	800dc58 <HAL_SD_InitCard+0x50>
 800dc54:	2301      	movs	r3, #1
 800dc56:	e03b      	b.n	800dcd0 <HAL_SD_InitCard+0xc8>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc66:	605a      	str	r2, [r3, #4]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f004 fa5d 	bl	801212c <SDMMC_PowerState_ON>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	685a      	ldr	r2, [r3, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc80:	605a      	str	r2, [r3, #4]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f001 f8e8 	bl	800ee58 <SD_PowerON>
 800dc88:	6238      	str	r0, [r7, #32]
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00b      	beq.n	800dca8 <HAL_SD_InitCard+0xa0>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	639a      	str	r2, [r3, #56]	; 0x38
 800dca4:	2301      	movs	r3, #1
 800dca6:	e013      	b.n	800dcd0 <HAL_SD_InitCard+0xc8>
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f001 f807 	bl	800ecbc <SD_InitCard>
 800dcae:	6238      	str	r0, [r7, #32]
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00b      	beq.n	800dcce <HAL_SD_InitCard+0xc6>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc2:	6a3b      	ldr	r3, [r7, #32]
 800dcc4:	431a      	orrs	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcca:	2301      	movs	r3, #1
 800dccc:	e000      	b.n	800dcd0 <HAL_SD_InitCard+0xc8>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3728      	adds	r7, #40	; 0x28
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bdb0      	pop	{r4, r5, r7, pc}

0800dcd8 <HAL_SD_ReadBlocks>:
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b092      	sub	sp, #72	; 0x48
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
 800dce4:	603b      	str	r3, [r7, #0]
 800dce6:	f7fa faaf 	bl	8008248 <HAL_GetTick>
 800dcea:	6338      	str	r0, [r7, #48]	; 0x30
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	63bb      	str	r3, [r7, #56]	; 0x38
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	637b      	str	r3, [r7, #52]	; 0x34
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d107      	bne.n	800dd0a <HAL_SD_ReadBlocks+0x32>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	639a      	str	r2, [r3, #56]	; 0x38
 800dd06:	2301      	movs	r3, #1
 800dd08:	e1d7      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	f040 81ca 	bne.w	800e0ac <HAL_SD_ReadBlocks+0x3d4>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	639a      	str	r2, [r3, #56]	; 0x38
 800dd1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	441a      	add	r2, r3
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d907      	bls.n	800dd3c <HAL_SD_ReadBlocks+0x64>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd30:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	639a      	str	r2, [r3, #56]	; 0x38
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e1be      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2203      	movs	r2, #3
 800dd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	62da      	str	r2, [r3, #44]	; 0x2c
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d002      	beq.n	800dd5a <HAL_SD_ReadBlocks+0x82>
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	025b      	lsls	r3, r3, #9
 800dd58:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd62:	4618      	mov	r0, r3
 800dd64:	f004 fa76 	bl	8012254 <SDMMC_CmdBlockLength>
 800dd68:	6478      	str	r0, [r7, #68]	; 0x44
 800dd6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00f      	beq.n	800dd90 <HAL_SD_ReadBlocks+0xb8>
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a9a      	ldr	r2, [pc, #616]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800dd76:	639a      	str	r2, [r3, #56]	; 0x38
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd7e:	431a      	orrs	r2, r3
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	639a      	str	r2, [r3, #56]	; 0x38
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2201      	movs	r2, #1
 800dd88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e194      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800dd90:	f04f 33ff 	mov.w	r3, #4294967295
 800dd94:	617b      	str	r3, [r7, #20]
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	025b      	lsls	r3, r3, #9
 800dd9a:	61bb      	str	r3, [r7, #24]
 800dd9c:	2390      	movs	r3, #144	; 0x90
 800dd9e:	61fb      	str	r3, [r7, #28]
 800dda0:	2302      	movs	r3, #2
 800dda2:	623b      	str	r3, [r7, #32]
 800dda4:	2300      	movs	r3, #0
 800dda6:	627b      	str	r3, [r7, #36]	; 0x24
 800dda8:	2301      	movs	r3, #1
 800ddaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f107 0214 	add.w	r2, r7, #20
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f004 fa20 	bl	80121fc <SDMMC_ConfigData>
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d90a      	bls.n	800ddd8 <HAL_SD_ReadBlocks+0x100>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2202      	movs	r2, #2
 800ddc6:	631a      	str	r2, [r3, #48]	; 0x30
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f004 fa84 	bl	80122dc <SDMMC_CmdReadMultiBlock>
 800ddd4:	6478      	str	r0, [r7, #68]	; 0x44
 800ddd6:	e009      	b.n	800ddec <HAL_SD_ReadBlocks+0x114>
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2201      	movs	r2, #1
 800dddc:	631a      	str	r2, [r3, #48]	; 0x30
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dde4:	4618      	mov	r0, r3
 800dde6:	f004 fa57 	bl	8012298 <SDMMC_CmdReadSingleBlock>
 800ddea:	6478      	str	r0, [r7, #68]	; 0x44
 800ddec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d012      	beq.n	800de18 <HAL_SD_ReadBlocks+0x140>
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a7a      	ldr	r2, [pc, #488]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800ddf8:	639a      	str	r2, [r3, #56]	; 0x38
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de00:	431a      	orrs	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	639a      	str	r2, [r3, #56]	; 0x38
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2201      	movs	r2, #1
 800de0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	631a      	str	r2, [r3, #48]	; 0x30
 800de14:	2301      	movs	r3, #1
 800de16:	e150      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de1c:	e061      	b.n	800dee2 <HAL_SD_ReadBlocks+0x20a>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d03c      	beq.n	800dea6 <HAL_SD_ReadBlocks+0x1ce>
 800de2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d039      	beq.n	800dea6 <HAL_SD_ReadBlocks+0x1ce>
 800de32:	2300      	movs	r3, #0
 800de34:	643b      	str	r3, [r7, #64]	; 0x40
 800de36:	e033      	b.n	800dea0 <HAL_SD_ReadBlocks+0x1c8>
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f004 f957 	bl	80120f0 <SDMMC_ReadFIFO>
 800de42:	62f8      	str	r0, [r7, #44]	; 0x2c
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	b2da      	uxtb	r2, r3
 800de48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4a:	701a      	strb	r2, [r3, #0]
 800de4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4e:	3301      	adds	r3, #1
 800de50:	637b      	str	r3, [r7, #52]	; 0x34
 800de52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de54:	3b01      	subs	r3, #1
 800de56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5a:	0a1b      	lsrs	r3, r3, #8
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de60:	701a      	strb	r2, [r3, #0]
 800de62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de64:	3301      	adds	r3, #1
 800de66:	637b      	str	r3, [r7, #52]	; 0x34
 800de68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de6a:	3b01      	subs	r3, #1
 800de6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de70:	0c1b      	lsrs	r3, r3, #16
 800de72:	b2da      	uxtb	r2, r3
 800de74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de76:	701a      	strb	r2, [r3, #0]
 800de78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de7a:	3301      	adds	r3, #1
 800de7c:	637b      	str	r3, [r7, #52]	; 0x34
 800de7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de80:	3b01      	subs	r3, #1
 800de82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	0e1b      	lsrs	r3, r3, #24
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de8c:	701a      	strb	r2, [r3, #0]
 800de8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de90:	3301      	adds	r3, #1
 800de92:	637b      	str	r3, [r7, #52]	; 0x34
 800de94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de96:	3b01      	subs	r3, #1
 800de98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de9c:	3301      	adds	r3, #1
 800de9e:	643b      	str	r3, [r7, #64]	; 0x40
 800dea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea2:	2b07      	cmp	r3, #7
 800dea4:	d9c8      	bls.n	800de38 <HAL_SD_ReadBlocks+0x160>
 800dea6:	f7fa f9cf 	bl	8008248 <HAL_GetTick>
 800deaa:	4602      	mov	r2, r0
 800deac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d902      	bls.n	800debc <HAL_SD_ReadBlocks+0x1e4>
 800deb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d112      	bne.n	800dee2 <HAL_SD_ReadBlocks+0x20a>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a47      	ldr	r2, [pc, #284]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800dec2:	639a      	str	r2, [r3, #56]	; 0x38
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	639a      	str	r2, [r3, #56]	; 0x38
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2200      	movs	r2, #0
 800dedc:	631a      	str	r2, [r3, #48]	; 0x30
 800dede:	2303      	movs	r3, #3
 800dee0:	e0eb      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dee8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800deec:	2b00      	cmp	r3, #0
 800deee:	d096      	beq.n	800de1e <HAL_SD_ReadBlocks+0x146>
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800defa:	2b00      	cmp	r3, #0
 800defc:	d022      	beq.n	800df44 <HAL_SD_ReadBlocks+0x26c>
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d91f      	bls.n	800df44 <HAL_SD_ReadBlocks+0x26c>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df08:	2b03      	cmp	r3, #3
 800df0a:	d01b      	beq.n	800df44 <HAL_SD_ReadBlocks+0x26c>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4618      	mov	r0, r3
 800df12:	f004 fa49 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800df16:	6478      	str	r0, [r7, #68]	; 0x44
 800df18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d012      	beq.n	800df44 <HAL_SD_ReadBlocks+0x26c>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a2f      	ldr	r2, [pc, #188]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800df24:	639a      	str	r2, [r3, #56]	; 0x38
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df2c:	431a      	orrs	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	639a      	str	r2, [r3, #56]	; 0x38
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2201      	movs	r2, #1
 800df36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2200      	movs	r2, #0
 800df3e:	631a      	str	r2, [r3, #48]	; 0x30
 800df40:	2301      	movs	r3, #1
 800df42:	e0ba      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df4a:	f003 0308 	and.w	r3, r3, #8
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d012      	beq.n	800df78 <HAL_SD_ReadBlocks+0x2a0>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a22      	ldr	r2, [pc, #136]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800df58:	639a      	str	r2, [r3, #56]	; 0x38
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5e:	f043 0208 	orr.w	r2, r3, #8
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	639a      	str	r2, [r3, #56]	; 0x38
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2201      	movs	r2, #1
 800df6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2200      	movs	r2, #0
 800df72:	631a      	str	r2, [r3, #48]	; 0x30
 800df74:	2301      	movs	r3, #1
 800df76:	e0a0      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7e:	f003 0302 	and.w	r3, r3, #2
 800df82:	2b00      	cmp	r3, #0
 800df84:	d012      	beq.n	800dfac <HAL_SD_ReadBlocks+0x2d4>
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a15      	ldr	r2, [pc, #84]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800df8c:	639a      	str	r2, [r3, #56]	; 0x38
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df92:	f043 0202 	orr.w	r2, r3, #2
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	639a      	str	r2, [r3, #56]	; 0x38
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2201      	movs	r2, #1
 800df9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	631a      	str	r2, [r3, #48]	; 0x30
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e086      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfb2:	f003 0320 	and.w	r3, r3, #32
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d063      	beq.n	800e082 <HAL_SD_ReadBlocks+0x3aa>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a08      	ldr	r2, [pc, #32]	; (800dfe0 <HAL_SD_ReadBlocks+0x308>)
 800dfc0:	639a      	str	r2, [r3, #56]	; 0x38
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc6:	f043 0220 	orr.w	r2, r3, #32
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	639a      	str	r2, [r3, #56]	; 0x38
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	631a      	str	r2, [r3, #48]	; 0x30
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e06c      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800dfe0:	004005ff 	.word	0x004005ff
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f004 f881 	bl	80120f0 <SDMMC_ReadFIFO>
 800dfee:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dff6:	701a      	strb	r2, [r3, #0]
 800dff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dffa:	3301      	adds	r3, #1
 800dffc:	637b      	str	r3, [r7, #52]	; 0x34
 800dffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e000:	3b01      	subs	r3, #1
 800e002:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e006:	0a1b      	lsrs	r3, r3, #8
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e00c:	701a      	strb	r2, [r3, #0]
 800e00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e010:	3301      	adds	r3, #1
 800e012:	637b      	str	r3, [r7, #52]	; 0x34
 800e014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e016:	3b01      	subs	r3, #1
 800e018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	0c1b      	lsrs	r3, r3, #16
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e022:	701a      	strb	r2, [r3, #0]
 800e024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e026:	3301      	adds	r3, #1
 800e028:	637b      	str	r3, [r7, #52]	; 0x34
 800e02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02c:	3b01      	subs	r3, #1
 800e02e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	0e1b      	lsrs	r3, r3, #24
 800e034:	b2da      	uxtb	r2, r3
 800e036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e038:	701a      	strb	r2, [r3, #0]
 800e03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03c:	3301      	adds	r3, #1
 800e03e:	637b      	str	r3, [r7, #52]	; 0x34
 800e040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e042:	3b01      	subs	r3, #1
 800e044:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e046:	f7fa f8ff 	bl	8008248 <HAL_GetTick>
 800e04a:	4602      	mov	r2, r0
 800e04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e052:	429a      	cmp	r2, r3
 800e054:	d902      	bls.n	800e05c <HAL_SD_ReadBlocks+0x384>
 800e056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d112      	bne.n	800e082 <HAL_SD_ReadBlocks+0x3aa>
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a18      	ldr	r2, [pc, #96]	; (800e0c4 <HAL_SD_ReadBlocks+0x3ec>)
 800e062:	639a      	str	r2, [r3, #56]	; 0x38
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e068:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	639a      	str	r2, [r3, #56]	; 0x38
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	631a      	str	r2, [r3, #48]	; 0x30
 800e07e:	2301      	movs	r3, #1
 800e080:	e01b      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <HAL_SD_ReadBlocks+0x3be>
 800e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1a6      	bne.n	800dfe4 <HAL_SD_ReadBlocks+0x30c>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f240 523a 	movw	r2, #1338	; 0x53a
 800e09e:	639a      	str	r2, [r3, #56]	; 0x38
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	e006      	b.n	800e0ba <HAL_SD_ReadBlocks+0x3e2>
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	639a      	str	r2, [r3, #56]	; 0x38
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3748      	adds	r7, #72	; 0x48
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	004005ff 	.word	0x004005ff

0800e0c8 <HAL_SD_WriteBlocks>:
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b092      	sub	sp, #72	; 0x48
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	603b      	str	r3, [r7, #0]
 800e0d6:	f7fa f8b7 	bl	8008248 <HAL_GetTick>
 800e0da:	6338      	str	r0, [r7, #48]	; 0x30
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	637b      	str	r3, [r7, #52]	; 0x34
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d107      	bne.n	800e0fa <HAL_SD_WriteBlocks+0x32>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	639a      	str	r2, [r3, #56]	; 0x38
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	e182      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b01      	cmp	r3, #1
 800e104:	f040 8175 	bne.w	800e3f2 <HAL_SD_WriteBlocks+0x32a>
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	639a      	str	r2, [r3, #56]	; 0x38
 800e10e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	441a      	add	r2, r3
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e118:	429a      	cmp	r2, r3
 800e11a:	d907      	bls.n	800e12c <HAL_SD_WriteBlocks+0x64>
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e120:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	639a      	str	r2, [r3, #56]	; 0x38
 800e128:	2301      	movs	r3, #1
 800e12a:	e169      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2203      	movs	r2, #3
 800e130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2200      	movs	r2, #0
 800e13a:	62da      	str	r2, [r3, #44]	; 0x2c
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e140:	2b01      	cmp	r3, #1
 800e142:	d002      	beq.n	800e14a <HAL_SD_WriteBlocks+0x82>
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	025b      	lsls	r3, r3, #9
 800e148:	63bb      	str	r3, [r7, #56]	; 0x38
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e152:	4618      	mov	r0, r3
 800e154:	f004 f87e 	bl	8012254 <SDMMC_CmdBlockLength>
 800e158:	6478      	str	r0, [r7, #68]	; 0x44
 800e15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00f      	beq.n	800e180 <HAL_SD_WriteBlocks+0xb8>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a9c      	ldr	r2, [pc, #624]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e166:	639a      	str	r2, [r3, #56]	; 0x38
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e16e:	431a      	orrs	r2, r3
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	639a      	str	r2, [r3, #56]	; 0x38
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e17c:	2301      	movs	r3, #1
 800e17e:	e13f      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e180:	f04f 33ff 	mov.w	r3, #4294967295
 800e184:	61bb      	str	r3, [r7, #24]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	025b      	lsls	r3, r3, #9
 800e18a:	61fb      	str	r3, [r7, #28]
 800e18c:	2390      	movs	r3, #144	; 0x90
 800e18e:	623b      	str	r3, [r7, #32]
 800e190:	2300      	movs	r3, #0
 800e192:	627b      	str	r3, [r7, #36]	; 0x24
 800e194:	2300      	movs	r3, #0
 800e196:	62bb      	str	r3, [r7, #40]	; 0x28
 800e198:	2301      	movs	r3, #1
 800e19a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f107 0218 	add.w	r2, r7, #24
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f004 f828 	bl	80121fc <SDMMC_ConfigData>
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d90a      	bls.n	800e1c8 <HAL_SD_WriteBlocks+0x100>
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2220      	movs	r2, #32
 800e1b6:	631a      	str	r2, [r3, #48]	; 0x30
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f004 f8d0 	bl	8012364 <SDMMC_CmdWriteMultiBlock>
 800e1c4:	6478      	str	r0, [r7, #68]	; 0x44
 800e1c6:	e009      	b.n	800e1dc <HAL_SD_WriteBlocks+0x114>
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2210      	movs	r2, #16
 800e1cc:	631a      	str	r2, [r3, #48]	; 0x30
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f004 f8a3 	bl	8012320 <SDMMC_CmdWriteSingleBlock>
 800e1da:	6478      	str	r0, [r7, #68]	; 0x44
 800e1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d012      	beq.n	800e208 <HAL_SD_WriteBlocks+0x140>
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a7c      	ldr	r2, [pc, #496]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e1e8:	639a      	str	r2, [r3, #56]	; 0x38
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1f0:	431a      	orrs	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	639a      	str	r2, [r3, #56]	; 0x38
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	631a      	str	r2, [r3, #48]	; 0x30
 800e204:	2301      	movs	r3, #1
 800e206:	e0fb      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e20c:	e065      	b.n	800e2da <HAL_SD_WriteBlocks+0x212>
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d040      	beq.n	800e29e <HAL_SD_WriteBlocks+0x1d6>
 800e21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d03d      	beq.n	800e29e <HAL_SD_WriteBlocks+0x1d6>
 800e222:	2300      	movs	r3, #0
 800e224:	643b      	str	r3, [r7, #64]	; 0x40
 800e226:	e037      	b.n	800e298 <HAL_SD_WriteBlocks+0x1d0>
 800e228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	617b      	str	r3, [r7, #20]
 800e22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e230:	3301      	adds	r3, #1
 800e232:	637b      	str	r3, [r7, #52]	; 0x34
 800e234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e236:	3b01      	subs	r3, #1
 800e238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	021a      	lsls	r2, r3, #8
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	4313      	orrs	r3, r2
 800e244:	617b      	str	r3, [r7, #20]
 800e246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e248:	3301      	adds	r3, #1
 800e24a:	637b      	str	r3, [r7, #52]	; 0x34
 800e24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e24e:	3b01      	subs	r3, #1
 800e250:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	041a      	lsls	r2, r3, #16
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	617b      	str	r3, [r7, #20]
 800e25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e260:	3301      	adds	r3, #1
 800e262:	637b      	str	r3, [r7, #52]	; 0x34
 800e264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e266:	3b01      	subs	r3, #1
 800e268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	061a      	lsls	r2, r3, #24
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	4313      	orrs	r3, r2
 800e274:	617b      	str	r3, [r7, #20]
 800e276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e278:	3301      	adds	r3, #1
 800e27a:	637b      	str	r3, [r7, #52]	; 0x34
 800e27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e27e:	3b01      	subs	r3, #1
 800e280:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f107 0214 	add.w	r2, r7, #20
 800e28a:	4611      	mov	r1, r2
 800e28c:	4618      	mov	r0, r3
 800e28e:	f003 ff3c 	bl	801210a <SDMMC_WriteFIFO>
 800e292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e294:	3301      	adds	r3, #1
 800e296:	643b      	str	r3, [r7, #64]	; 0x40
 800e298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e29a:	2b07      	cmp	r3, #7
 800e29c:	d9c4      	bls.n	800e228 <HAL_SD_WriteBlocks+0x160>
 800e29e:	f7f9 ffd3 	bl	8008248 <HAL_GetTick>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d902      	bls.n	800e2b4 <HAL_SD_WriteBlocks+0x1ec>
 800e2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d112      	bne.n	800e2da <HAL_SD_WriteBlocks+0x212>
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a47      	ldr	r2, [pc, #284]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e2ba:	639a      	str	r2, [r3, #56]	; 0x38
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c2:	431a      	orrs	r2, r3
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	639a      	str	r2, [r3, #56]	; 0x38
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	631a      	str	r2, [r3, #48]	; 0x30
 800e2d6:	2303      	movs	r3, #3
 800e2d8:	e092      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d092      	beq.n	800e20e <HAL_SD_WriteBlocks+0x146>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d022      	beq.n	800e33c <HAL_SD_WriteBlocks+0x274>
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d91f      	bls.n	800e33c <HAL_SD_WriteBlocks+0x274>
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e300:	2b03      	cmp	r3, #3
 800e302:	d01b      	beq.n	800e33c <HAL_SD_WriteBlocks+0x274>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4618      	mov	r0, r3
 800e30a:	f004 f84d 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800e30e:	6478      	str	r0, [r7, #68]	; 0x44
 800e310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e312:	2b00      	cmp	r3, #0
 800e314:	d012      	beq.n	800e33c <HAL_SD_WriteBlocks+0x274>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a2f      	ldr	r2, [pc, #188]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e31c:	639a      	str	r2, [r3, #56]	; 0x38
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e324:	431a      	orrs	r2, r3
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	639a      	str	r2, [r3, #56]	; 0x38
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	631a      	str	r2, [r3, #48]	; 0x30
 800e338:	2301      	movs	r3, #1
 800e33a:	e061      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e342:	f003 0308 	and.w	r3, r3, #8
 800e346:	2b00      	cmp	r3, #0
 800e348:	d012      	beq.n	800e370 <HAL_SD_WriteBlocks+0x2a8>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a22      	ldr	r2, [pc, #136]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e350:	639a      	str	r2, [r3, #56]	; 0x38
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e356:	f043 0208 	orr.w	r2, r3, #8
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	639a      	str	r2, [r3, #56]	; 0x38
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2201      	movs	r2, #1
 800e362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	631a      	str	r2, [r3, #48]	; 0x30
 800e36c:	2301      	movs	r3, #1
 800e36e:	e047      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e376:	f003 0302 	and.w	r3, r3, #2
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d012      	beq.n	800e3a4 <HAL_SD_WriteBlocks+0x2dc>
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a15      	ldr	r2, [pc, #84]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e384:	639a      	str	r2, [r3, #56]	; 0x38
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38a:	f043 0202 	orr.w	r2, r3, #2
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	639a      	str	r2, [r3, #56]	; 0x38
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2201      	movs	r2, #1
 800e396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	631a      	str	r2, [r3, #48]	; 0x30
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e02d      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3aa:	f003 0310 	and.w	r3, r3, #16
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d014      	beq.n	800e3dc <HAL_SD_WriteBlocks+0x314>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a08      	ldr	r2, [pc, #32]	; (800e3d8 <HAL_SD_WriteBlocks+0x310>)
 800e3b8:	639a      	str	r2, [r3, #56]	; 0x38
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3be:	f043 0210 	orr.w	r2, r3, #16
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	639a      	str	r2, [r3, #56]	; 0x38
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	631a      	str	r2, [r3, #48]	; 0x30
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e013      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e3d8:	004005ff 	.word	0x004005ff
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f240 523a 	movw	r2, #1338	; 0x53a
 800e3e4:	639a      	str	r2, [r3, #56]	; 0x38
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	e006      	b.n	800e400 <HAL_SD_WriteBlocks+0x338>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	639a      	str	r2, [r3, #56]	; 0x38
 800e3fe:	2301      	movs	r3, #1
 800e400:	4618      	mov	r0, r3
 800e402:	3748      	adds	r7, #72	; 0x48
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <HAL_SD_IRQHandler>:
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e414:	60fb      	str	r3, [r7, #12]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e41c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d008      	beq.n	800e436 <HAL_SD_IRQHandler+0x2e>
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f003 0308 	and.w	r3, r3, #8
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d003      	beq.n	800e436 <HAL_SD_IRQHandler+0x2e>
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 ff28 	bl	800f284 <SD_Read_IT>
 800e434:	e153      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 808d 	beq.w	800e560 <HAL_SD_IRQHandler+0x158>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e44e:	639a      	str	r2, [r3, #56]	; 0x38
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	4ba3      	ldr	r3, [pc, #652]	; (800e6e8 <HAL_SD_IRQHandler+0x2e0>)
 800e45c:	400b      	ands	r3, r1
 800e45e:	63d3      	str	r3, [r2, #60]	; 0x3c
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f022 0201 	bic.w	r2, r2, #1
 800e46e:	62da      	str	r2, [r3, #44]	; 0x2c
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f003 0308 	and.w	r3, r3, #8
 800e476:	2b00      	cmp	r3, #0
 800e478:	d039      	beq.n	800e4ee <HAL_SD_IRQHandler+0xe6>
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f003 0302 	and.w	r3, r3, #2
 800e480:	2b00      	cmp	r3, #0
 800e482:	d104      	bne.n	800e48e <HAL_SD_IRQHandler+0x86>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f003 0320 	and.w	r3, r3, #32
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d011      	beq.n	800e4b2 <HAL_SD_IRQHandler+0xaa>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4618      	mov	r0, r3
 800e494:	f003 ff88 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800e498:	60b8      	str	r0, [r7, #8]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d008      	beq.n	800e4b2 <HAL_SD_IRQHandler+0xaa>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	431a      	orrs	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	639a      	str	r2, [r3, #56]	; 0x38
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f921 	bl	800e6f4 <HAL_SD_ErrorCallback>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f240 523a 	movw	r2, #1338	; 0x53a
 800e4ba:	639a      	str	r2, [r3, #56]	; 0x38
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	631a      	str	r2, [r3, #48]	; 0x30
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d104      	bne.n	800e4de <HAL_SD_IRQHandler+0xd6>
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f003 0302 	and.w	r3, r3, #2
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d003      	beq.n	800e4e6 <HAL_SD_IRQHandler+0xde>
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f008 fab8 	bl	8016a54 <HAL_SD_RxCpltCallback>
 800e4e4:	e0fb      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f008 faaa 	bl	8016a40 <HAL_SD_TxCpltCallback>
 800e4ec:	e0f7      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 80f2 	beq.w	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f003 0320 	and.w	r3, r3, #32
 800e500:	2b00      	cmp	r3, #0
 800e502:	d011      	beq.n	800e528 <HAL_SD_IRQHandler+0x120>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4618      	mov	r0, r3
 800e50a:	f003 ff4d 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800e50e:	60b8      	str	r0, [r7, #8]
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d008      	beq.n	800e528 <HAL_SD_IRQHandler+0x120>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	431a      	orrs	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	639a      	str	r2, [r3, #56]	; 0x38
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f8e6 	bl	800e6f4 <HAL_SD_ErrorCallback>
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f040 80d5 	bne.w	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f003 0302 	and.w	r3, r3, #2
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 80cf 	bne.w	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f022 0208 	bic.w	r2, r2, #8
 800e54e:	62da      	str	r2, [r3, #44]	; 0x2c
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f008 fa71 	bl	8016a40 <HAL_SD_TxCpltCallback>
 800e55e:	e0be      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d008      	beq.n	800e580 <HAL_SD_IRQHandler+0x178>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f003 0308 	and.w	r3, r3, #8
 800e574:	2b00      	cmp	r3, #0
 800e576:	d003      	beq.n	800e580 <HAL_SD_IRQHandler+0x178>
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 fed4 	bl	800f326 <SD_Write_IT>
 800e57e:	e0ae      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e586:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f000 80a7 	beq.w	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e596:	f003 0302 	and.w	r3, r3, #2
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d005      	beq.n	800e5aa <HAL_SD_IRQHandler+0x1a2>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a2:	f043 0202 	orr.w	r2, r3, #2
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	639a      	str	r2, [r3, #56]	; 0x38
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b0:	f003 0308 	and.w	r3, r3, #8
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d005      	beq.n	800e5c4 <HAL_SD_IRQHandler+0x1bc>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5bc:	f043 0208 	orr.w	r2, r3, #8
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	639a      	str	r2, [r3, #56]	; 0x38
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ca:	f003 0320 	and.w	r3, r3, #32
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d005      	beq.n	800e5de <HAL_SD_IRQHandler+0x1d6>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d6:	f043 0220 	orr.w	r2, r3, #32
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	639a      	str	r2, [r3, #56]	; 0x38
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e4:	f003 0310 	and.w	r3, r3, #16
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d005      	beq.n	800e5f8 <HAL_SD_IRQHandler+0x1f0>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f0:	f043 0210 	orr.w	r2, r3, #16
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	639a      	str	r2, [r3, #56]	; 0x38
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f240 523a 	movw	r2, #1338	; 0x53a
 800e600:	639a      	str	r2, [r3, #56]	; 0x38
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e610:	63da      	str	r2, [r3, #60]	; 0x3c
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4618      	mov	r0, r3
 800e618:	f003 fec6 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800e61c:	4602      	mov	r2, r0
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e622:	431a      	orrs	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	639a      	str	r2, [r3, #56]	; 0x38
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f003 0308 	and.w	r3, r3, #8
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00a      	beq.n	800e648 <HAL_SD_IRQHandler+0x240>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	631a      	str	r2, [r3, #48]	; 0x30
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 f857 	bl	800e6f4 <HAL_SD_ErrorCallback>
 800e646:	e04a      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d045      	beq.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f003 0310 	and.w	r3, r3, #16
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d104      	bne.n	800e666 <HAL_SD_IRQHandler+0x25e>
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f003 0320 	and.w	r3, r3, #32
 800e662:	2b00      	cmp	r3, #0
 800e664:	d011      	beq.n	800e68a <HAL_SD_IRQHandler+0x282>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e66a:	4a20      	ldr	r2, [pc, #128]	; (800e6ec <HAL_SD_IRQHandler+0x2e4>)
 800e66c:	651a      	str	r2, [r3, #80]	; 0x50
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e672:	4618      	mov	r0, r3
 800e674:	f7fa f836 	bl	80086e4 <HAL_DMA_Abort_IT>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d02f      	beq.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e682:	4618      	mov	r0, r3
 800e684:	f000 faac 	bl	800ebe0 <SD_DMATxAbort>
 800e688:	e029      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d104      	bne.n	800e69e <HAL_SD_IRQHandler+0x296>
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f003 0302 	and.w	r3, r3, #2
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d011      	beq.n	800e6c2 <HAL_SD_IRQHandler+0x2ba>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a2:	4a13      	ldr	r2, [pc, #76]	; (800e6f0 <HAL_SD_IRQHandler+0x2e8>)
 800e6a4:	651a      	str	r2, [r3, #80]	; 0x50
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fa f81a 	bl	80086e4 <HAL_DMA_Abort_IT>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d013      	beq.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 fac7 	bl	800ec4e <SD_DMARxAbort>
 800e6c0:	e00d      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	639a      	str	r2, [r3, #56]	; 0x38
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	631a      	str	r2, [r3, #48]	; 0x30
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f008 f9a8 	bl	8016a2c <HAL_SD_AbortCallback>
 800e6dc:	e7ff      	b.n	800e6de <HAL_SD_IRQHandler+0x2d6>
 800e6de:	bf00      	nop
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	ffff3ec5 	.word	0xffff3ec5
 800e6ec:	0800ebe1 	.word	0x0800ebe1
 800e6f0:	0800ec4f 	.word	0x0800ec4f

0800e6f4 <HAL_SD_ErrorCallback>:
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <HAL_SD_GetCardCSD>:
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e716:	0f9b      	lsrs	r3, r3, #30
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	701a      	strb	r2, [r3, #0]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e722:	0e9b      	lsrs	r3, r3, #26
 800e724:	b2db      	uxtb	r3, r3
 800e726:	f003 030f 	and.w	r3, r3, #15
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	705a      	strb	r2, [r3, #1]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e734:	0e1b      	lsrs	r3, r3, #24
 800e736:	b2db      	uxtb	r3, r3
 800e738:	f003 0303 	and.w	r3, r3, #3
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	709a      	strb	r2, [r3, #2]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e746:	0c1b      	lsrs	r3, r3, #16
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	70da      	strb	r2, [r3, #3]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e752:	0a1b      	lsrs	r3, r3, #8
 800e754:	b2da      	uxtb	r2, r3
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	711a      	strb	r2, [r3, #4]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	715a      	strb	r2, [r3, #5]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e768:	0d1b      	lsrs	r3, r3, #20
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	80da      	strh	r2, [r3, #6]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e774:	0c1b      	lsrs	r3, r3, #16
 800e776:	b2db      	uxtb	r3, r3
 800e778:	f003 030f 	and.w	r3, r3, #15
 800e77c:	b2da      	uxtb	r2, r3
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	721a      	strb	r2, [r3, #8]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e786:	0bdb      	lsrs	r3, r3, #15
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	f003 0301 	and.w	r3, r3, #1
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	725a      	strb	r2, [r3, #9]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e798:	0b9b      	lsrs	r3, r3, #14
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	f003 0301 	and.w	r3, r3, #1
 800e7a0:	b2da      	uxtb	r2, r3
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	729a      	strb	r2, [r3, #10]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7aa:	0b5b      	lsrs	r3, r3, #13
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	f003 0301 	and.w	r3, r3, #1
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	72da      	strb	r2, [r3, #11]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7bc:	0b1b      	lsrs	r3, r3, #12
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	b2da      	uxtb	r2, r3
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	731a      	strb	r2, [r3, #12]
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	735a      	strb	r2, [r3, #13]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d163      	bne.n	800e8a0 <HAL_SD_GetCardCSD+0x198>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7dc:	009a      	lsls	r2, r3, #2
 800e7de:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e7e8:	0f92      	lsrs	r2, r2, #30
 800e7ea:	431a      	orrs	r2, r3
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	611a      	str	r2, [r3, #16]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f4:	0edb      	lsrs	r3, r3, #27
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	f003 0307 	and.w	r3, r3, #7
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	751a      	strb	r2, [r3, #20]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e806:	0e1b      	lsrs	r3, r3, #24
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	f003 0307 	and.w	r3, r3, #7
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	755a      	strb	r2, [r3, #21]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e818:	0d5b      	lsrs	r3, r3, #21
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	f003 0307 	and.w	r3, r3, #7
 800e820:	b2da      	uxtb	r2, r3
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	759a      	strb	r2, [r3, #22]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e82a:	0c9b      	lsrs	r3, r3, #18
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	f003 0307 	and.w	r3, r3, #7
 800e832:	b2da      	uxtb	r2, r3
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	75da      	strb	r2, [r3, #23]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e83c:	0bdb      	lsrs	r3, r3, #15
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	f003 0307 	and.w	r3, r3, #7
 800e844:	b2da      	uxtb	r2, r3
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	761a      	strb	r2, [r3, #24]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	691b      	ldr	r3, [r3, #16]
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	655a      	str	r2, [r3, #84]	; 0x54
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	7e1b      	ldrb	r3, [r3, #24]
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	f003 0307 	and.w	r3, r3, #7
 800e85e:	3302      	adds	r3, #2
 800e860:	2201      	movs	r2, #1
 800e862:	fa02 f303 	lsl.w	r3, r2, r3
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e86a:	fb02 f203 	mul.w	r2, r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	655a      	str	r2, [r3, #84]	; 0x54
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	7a1b      	ldrb	r3, [r3, #8]
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f003 030f 	and.w	r3, r3, #15
 800e87c:	2201      	movs	r2, #1
 800e87e:	409a      	lsls	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	659a      	str	r2, [r3, #88]	; 0x58
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e88c:	0a52      	lsrs	r2, r2, #9
 800e88e:	fb02 f203 	mul.w	r2, r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	65da      	str	r2, [r3, #92]	; 0x5c
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e89c:	661a      	str	r2, [r3, #96]	; 0x60
 800e89e:	e031      	b.n	800e904 <HAL_SD_GetCardCSD+0x1fc>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d11d      	bne.n	800e8e4 <HAL_SD_GetCardCSD+0x1dc>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ac:	041b      	lsls	r3, r3, #16
 800e8ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b6:	0c1b      	lsrs	r3, r3, #16
 800e8b8:	431a      	orrs	r2, r3
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	611a      	str	r2, [r3, #16]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	029a      	lsls	r2, r3, #10
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	655a      	str	r2, [r3, #84]	; 0x54
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	65da      	str	r2, [r3, #92]	; 0x5c
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8d8:	659a      	str	r2, [r3, #88]	; 0x58
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	661a      	str	r2, [r3, #96]	; 0x60
 800e8e2:	e00f      	b.n	800e904 <HAL_SD_GetCardCSD+0x1fc>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a58      	ldr	r2, [pc, #352]	; (800ea4c <HAL_SD_GetCardCSD+0x344>)
 800e8ea:	639a      	str	r2, [r3, #56]	; 0x38
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	639a      	str	r2, [r3, #56]	; 0x38
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800e900:	2301      	movs	r3, #1
 800e902:	e09d      	b.n	800ea40 <HAL_SD_GetCardCSD+0x338>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e908:	0b9b      	lsrs	r3, r3, #14
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	f003 0301 	and.w	r3, r3, #1
 800e910:	b2da      	uxtb	r2, r3
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	765a      	strb	r2, [r3, #25]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e91a:	09db      	lsrs	r3, r3, #7
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e922:	b2da      	uxtb	r2, r3
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	769a      	strb	r2, [r3, #26]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e932:	b2da      	uxtb	r2, r3
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	76da      	strb	r2, [r3, #27]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e93c:	0fdb      	lsrs	r3, r3, #31
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	771a      	strb	r2, [r3, #28]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e948:	0f5b      	lsrs	r3, r3, #29
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	f003 0303 	and.w	r3, r3, #3
 800e950:	b2da      	uxtb	r2, r3
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	775a      	strb	r2, [r3, #29]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e95a:	0e9b      	lsrs	r3, r3, #26
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	f003 0307 	and.w	r3, r3, #7
 800e962:	b2da      	uxtb	r2, r3
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	779a      	strb	r2, [r3, #30]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e96c:	0d9b      	lsrs	r3, r3, #22
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	f003 030f 	and.w	r3, r3, #15
 800e974:	b2da      	uxtb	r2, r3
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	77da      	strb	r2, [r3, #31]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e97e:	0d5b      	lsrs	r3, r3, #21
 800e980:	b2db      	uxtb	r3, r3
 800e982:	f003 0301 	and.w	r3, r3, #1
 800e986:	b2da      	uxtb	r2, r3
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	f883 2020 	strb.w	r2, [r3, #32]
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2200      	movs	r2, #0
 800e992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e99a:	0c1b      	lsrs	r3, r3, #16
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ae:	0bdb      	lsrs	r3, r3, #15
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c2:	0b9b      	lsrs	r3, r3, #14
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d6:	0b5b      	lsrs	r3, r3, #13
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ea:	0b1b      	lsrs	r3, r3, #12
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9fe:	0a9b      	lsrs	r3, r3, #10
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	f003 0303 	and.w	r3, r3, #3
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea12:	0a1b      	lsrs	r3, r3, #8
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	f003 0303 	and.w	r3, r3, #3
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea26:	085b      	lsrs	r3, r3, #1
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea2e:	b2da      	uxtb	r2, r3
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800ea3e:	2300      	movs	r3, #0
 800ea40:	4618      	mov	r0, r3
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	004005ff 	.word	0x004005ff

0800ea50 <HAL_SD_GetCardInfo>:
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	605a      	str	r2, [r3, #4]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	609a      	str	r2, [r3, #8]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	60da      	str	r2, [r3, #12]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	611a      	str	r2, [r3, #16]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	615a      	str	r2, [r3, #20]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	619a      	str	r2, [r3, #24]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	61da      	str	r2, [r3, #28]
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <HAL_SD_ConfigWideBusOperation>:
 800eaa8:	b5b0      	push	{r4, r5, r7, lr}
 800eaaa:	b08e      	sub	sp, #56	; 0x38
 800eaac:	af04      	add	r7, sp, #16
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2203      	movs	r2, #3
 800eab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eabe:	2b03      	cmp	r3, #3
 800eac0:	d02e      	beq.n	800eb20 <HAL_SD_ConfigWideBusOperation+0x78>
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eac8:	d106      	bne.n	800ead8 <HAL_SD_ConfigWideBusOperation+0x30>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eace:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	639a      	str	r2, [r3, #56]	; 0x38
 800ead6:	e029      	b.n	800eb2c <HAL_SD_ConfigWideBusOperation+0x84>
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eade:	d10a      	bne.n	800eaf6 <HAL_SD_ConfigWideBusOperation+0x4e>
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f000 fa6f 	bl	800efc4 <SD_WideBus_Enable>
 800eae6:	6278      	str	r0, [r7, #36]	; 0x24
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	431a      	orrs	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	639a      	str	r2, [r3, #56]	; 0x38
 800eaf4:	e01a      	b.n	800eb2c <HAL_SD_ConfigWideBusOperation+0x84>
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10a      	bne.n	800eb12 <HAL_SD_ConfigWideBusOperation+0x6a>
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 faac 	bl	800f05a <SD_WideBus_Disable>
 800eb02:	6278      	str	r0, [r7, #36]	; 0x24
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	431a      	orrs	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	639a      	str	r2, [r3, #56]	; 0x38
 800eb10:	e00c      	b.n	800eb2c <HAL_SD_ConfigWideBusOperation+0x84>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	639a      	str	r2, [r3, #56]	; 0x38
 800eb1e:	e005      	b.n	800eb2c <HAL_SD_ConfigWideBusOperation+0x84>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	639a      	str	r2, [r3, #56]	; 0x38
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d009      	beq.n	800eb48 <HAL_SD_ConfigWideBusOperation+0xa0>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a18      	ldr	r2, [pc, #96]	; (800eb9c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800eb3a:	639a      	str	r2, [r3, #56]	; 0x38
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800eb44:	2301      	movs	r3, #1
 800eb46:	e024      	b.n	800eb92 <HAL_SD_ConfigWideBusOperation+0xea>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	60fb      	str	r3, [r7, #12]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	613b      	str	r3, [r7, #16]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	617b      	str	r3, [r7, #20]
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	61bb      	str	r3, [r7, #24]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	61fb      	str	r3, [r7, #28]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	623b      	str	r3, [r7, #32]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681d      	ldr	r5, [r3, #0]
 800eb6e:	466c      	mov	r4, sp
 800eb70:	f107 0318 	add.w	r3, r7, #24
 800eb74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800eb7c:	f107 030c 	add.w	r3, r7, #12
 800eb80:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eb82:	4628      	mov	r0, r5
 800eb84:	f003 fa88 	bl	8012098 <SDMMC_Init>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800eb90:	2300      	movs	r3, #0
 800eb92:	4618      	mov	r0, r3
 800eb94:	3728      	adds	r7, #40	; 0x28
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bdb0      	pop	{r4, r5, r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	004005ff 	.word	0x004005ff

0800eba0 <HAL_SD_GetCardState>:
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	2300      	movs	r3, #0
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	f107 030c 	add.w	r3, r7, #12
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 f9de 	bl	800ef74 <SD_SendStatus>
 800ebb8:	6178      	str	r0, [r7, #20]
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d005      	beq.n	800ebcc <HAL_SD_GetCardState+0x2c>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	431a      	orrs	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	639a      	str	r2, [r3, #56]	; 0x38
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	0a5b      	lsrs	r3, r3, #9
 800ebd0:	f003 030f 	and.w	r3, r3, #15
 800ebd4:	613b      	str	r3, [r7, #16]
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <SD_DMATxAbort>:
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebec:	60fb      	str	r3, [r7, #12]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f240 523a 	movw	r2, #1338	; 0x53a
 800ebf6:	639a      	str	r2, [r3, #56]	; 0x38
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	f7ff ffd1 	bl	800eba0 <HAL_SD_GetCardState>
 800ebfe:	60b8      	str	r0, [r7, #8]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	631a      	str	r2, [r3, #48]	; 0x30
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	2b06      	cmp	r3, #6
 800ec12:	d002      	beq.n	800ec1a <SD_DMATxAbort+0x3a>
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	2b05      	cmp	r3, #5
 800ec18:	d10a      	bne.n	800ec30 <SD_DMATxAbort+0x50>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f003 fbc2 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800ec24:	4602      	mov	r2, r0
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec2a:	431a      	orrs	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	639a      	str	r2, [r3, #56]	; 0x38
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d103      	bne.n	800ec40 <SD_DMATxAbort+0x60>
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f007 fef7 	bl	8016a2c <HAL_SD_AbortCallback>
 800ec3e:	e002      	b.n	800ec46 <SD_DMATxAbort+0x66>
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f7ff fd57 	bl	800e6f4 <HAL_SD_ErrorCallback>
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <SD_DMARxAbort>:
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f240 523a 	movw	r2, #1338	; 0x53a
 800ec64:	639a      	str	r2, [r3, #56]	; 0x38
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f7ff ff9a 	bl	800eba0 <HAL_SD_GetCardState>
 800ec6c:	60b8      	str	r0, [r7, #8]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2201      	movs	r2, #1
 800ec72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	631a      	str	r2, [r3, #48]	; 0x30
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	2b06      	cmp	r3, #6
 800ec80:	d002      	beq.n	800ec88 <SD_DMARxAbort+0x3a>
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	2b05      	cmp	r3, #5
 800ec86:	d10a      	bne.n	800ec9e <SD_DMARxAbort+0x50>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f003 fb8b 	bl	80123a8 <SDMMC_CmdStopTransfer>
 800ec92:	4602      	mov	r2, r0
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec98:	431a      	orrs	r2, r3
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	639a      	str	r2, [r3, #56]	; 0x38
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d103      	bne.n	800ecae <SD_DMARxAbort+0x60>
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f007 fec0 	bl	8016a2c <HAL_SD_AbortCallback>
 800ecac:	e002      	b.n	800ecb4 <SD_DMARxAbort+0x66>
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f7ff fd20 	bl	800e6f4 <HAL_SD_ErrorCallback>
 800ecb4:	bf00      	nop
 800ecb6:	3710      	adds	r7, #16
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <SD_InitCard>:
 800ecbc:	b5b0      	push	{r4, r5, r7, lr}
 800ecbe:	b094      	sub	sp, #80	; 0x50
 800ecc0:	af04      	add	r7, sp, #16
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	81fb      	strh	r3, [r7, #14]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4618      	mov	r0, r3
 800ecce:	f003 fa3c 	bl	801214a <SDMMC_GetPowerState>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d102      	bne.n	800ecde <SD_InitCard+0x22>
 800ecd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ecdc:	e0b7      	b.n	800ee4e <SD_InitCard+0x192>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ece2:	2b03      	cmp	r3, #3
 800ece4:	d02f      	beq.n	800ed46 <SD_InitCard+0x8a>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f003 fc67 	bl	80125be <SDMMC_CmdSendCID>
 800ecf0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ecf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d001      	beq.n	800ecfc <SD_InitCard+0x40>
 800ecf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfa:	e0a8      	b.n	800ee4e <SD_InitCard+0x192>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2100      	movs	r1, #0
 800ed02:	4618      	mov	r0, r3
 800ed04:	f003 fa67 	bl	80121d6 <SDMMC_GetResponse>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	675a      	str	r2, [r3, #116]	; 0x74
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	2104      	movs	r1, #4
 800ed14:	4618      	mov	r0, r3
 800ed16:	f003 fa5e 	bl	80121d6 <SDMMC_GetResponse>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	679a      	str	r2, [r3, #120]	; 0x78
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2108      	movs	r1, #8
 800ed26:	4618      	mov	r0, r3
 800ed28:	f003 fa55 	bl	80121d6 <SDMMC_GetResponse>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	67da      	str	r2, [r3, #124]	; 0x7c
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	210c      	movs	r1, #12
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f003 fa4c 	bl	80121d6 <SDMMC_GetResponse>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed4a:	2b03      	cmp	r3, #3
 800ed4c:	d00d      	beq.n	800ed6a <SD_InitCard+0xae>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f107 020e 	add.w	r2, r7, #14
 800ed56:	4611      	mov	r1, r2
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f003 fc6d 	bl	8012638 <SDMMC_CmdSetRelAdd>
 800ed5e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ed60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <SD_InitCard+0xae>
 800ed66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed68:	e071      	b.n	800ee4e <SD_InitCard+0x192>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d036      	beq.n	800ede0 <SD_InitCard+0x124>
 800ed72:	89fb      	ldrh	r3, [r7, #14]
 800ed74:	461a      	mov	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	651a      	str	r2, [r3, #80]	; 0x50
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed82:	041b      	lsls	r3, r3, #16
 800ed84:	4619      	mov	r1, r3
 800ed86:	4610      	mov	r0, r2
 800ed88:	f003 fc37 	bl	80125fa <SDMMC_CmdSendCSD>
 800ed8c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ed8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <SD_InitCard+0xdc>
 800ed94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed96:	e05a      	b.n	800ee4e <SD_InitCard+0x192>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f003 fa19 	bl	80121d6 <SDMMC_GetResponse>
 800eda4:	4602      	mov	r2, r0
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	665a      	str	r2, [r3, #100]	; 0x64
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2104      	movs	r1, #4
 800edb0:	4618      	mov	r0, r3
 800edb2:	f003 fa10 	bl	80121d6 <SDMMC_GetResponse>
 800edb6:	4602      	mov	r2, r0
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	669a      	str	r2, [r3, #104]	; 0x68
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2108      	movs	r1, #8
 800edc2:	4618      	mov	r0, r3
 800edc4:	f003 fa07 	bl	80121d6 <SDMMC_GetResponse>
 800edc8:	4602      	mov	r2, r0
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	66da      	str	r2, [r3, #108]	; 0x6c
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	210c      	movs	r1, #12
 800edd4:	4618      	mov	r0, r3
 800edd6:	f003 f9fe 	bl	80121d6 <SDMMC_GetResponse>
 800edda:	4602      	mov	r2, r0
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	671a      	str	r2, [r3, #112]	; 0x70
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2104      	movs	r1, #4
 800ede6:	4618      	mov	r0, r3
 800ede8:	f003 f9f5 	bl	80121d6 <SDMMC_GetResponse>
 800edec:	4603      	mov	r3, r0
 800edee:	0d1a      	lsrs	r2, r3, #20
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	64da      	str	r2, [r3, #76]	; 0x4c
 800edf4:	f107 0310 	add.w	r3, r7, #16
 800edf8:	4619      	mov	r1, r3
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f7ff fc84 	bl	800e708 <HAL_SD_GetCardCSD>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d002      	beq.n	800ee0c <SD_InitCard+0x150>
 800ee06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ee0a:	e020      	b.n	800ee4e <SD_InitCard+0x192>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6819      	ldr	r1, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee14:	041b      	lsls	r3, r3, #16
 800ee16:	f04f 0400 	mov.w	r4, #0
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	4623      	mov	r3, r4
 800ee1e:	4608      	mov	r0, r1
 800ee20:	f003 fae4 	bl	80123ec <SDMMC_CmdSelDesel>
 800ee24:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ee26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d001      	beq.n	800ee30 <SD_InitCard+0x174>
 800ee2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee2e:	e00e      	b.n	800ee4e <SD_InitCard+0x192>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681d      	ldr	r5, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	466c      	mov	r4, sp
 800ee38:	f103 0210 	add.w	r2, r3, #16
 800ee3c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ee3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ee42:	3304      	adds	r3, #4
 800ee44:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee46:	4628      	mov	r0, r5
 800ee48:	f003 f926 	bl	8012098 <SDMMC_Init>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3740      	adds	r7, #64	; 0x40
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ee58 <SD_PowerON>:
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	2300      	movs	r3, #0
 800ee62:	60bb      	str	r3, [r7, #8]
 800ee64:	2300      	movs	r3, #0
 800ee66:	617b      	str	r3, [r7, #20]
 800ee68:	2300      	movs	r3, #0
 800ee6a:	613b      	str	r3, [r7, #16]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f003 fade 	bl	8012432 <SDMMC_CmdGoIdleState>
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d001      	beq.n	800ee82 <SD_PowerON+0x2a>
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	e072      	b.n	800ef68 <SD_PowerON+0x110>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4618      	mov	r0, r3
 800ee88:	f003 faf1 	bl	801246e <SDMMC_CmdOperCond>
 800ee8c:	60f8      	str	r0, [r7, #12]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00d      	beq.n	800eeb0 <SD_PowerON+0x58>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	649a      	str	r2, [r3, #72]	; 0x48
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f003 fac7 	bl	8012432 <SDMMC_CmdGoIdleState>
 800eea4:	60f8      	str	r0, [r7, #12]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d004      	beq.n	800eeb6 <SD_PowerON+0x5e>
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	e05b      	b.n	800ef68 <SD_PowerON+0x110>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	649a      	str	r2, [r3, #72]	; 0x48
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eeba:	2b01      	cmp	r3, #1
 800eebc:	d137      	bne.n	800ef2e <SD_PowerON+0xd6>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2100      	movs	r1, #0
 800eec4:	4618      	mov	r0, r3
 800eec6:	f003 faf1 	bl	80124ac <SDMMC_CmdAppCommand>
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d02d      	beq.n	800ef2e <SD_PowerON+0xd6>
 800eed2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eed6:	e047      	b.n	800ef68 <SD_PowerON+0x110>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2100      	movs	r1, #0
 800eede:	4618      	mov	r0, r3
 800eee0:	f003 fae4 	bl	80124ac <SDMMC_CmdAppCommand>
 800eee4:	60f8      	str	r0, [r7, #12]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d001      	beq.n	800eef0 <SD_PowerON+0x98>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	e03b      	b.n	800ef68 <SD_PowerON+0x110>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	491e      	ldr	r1, [pc, #120]	; (800ef70 <SD_PowerON+0x118>)
 800eef6:	4618      	mov	r0, r3
 800eef8:	f003 fafa 	bl	80124f0 <SDMMC_CmdAppOperCommand>
 800eefc:	60f8      	str	r0, [r7, #12]
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <SD_PowerON+0xb2>
 800ef04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ef08:	e02e      	b.n	800ef68 <SD_PowerON+0x110>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2100      	movs	r1, #0
 800ef10:	4618      	mov	r0, r3
 800ef12:	f003 f960 	bl	80121d6 <SDMMC_GetResponse>
 800ef16:	6178      	str	r0, [r7, #20]
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	0fdb      	lsrs	r3, r3, #31
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d101      	bne.n	800ef24 <SD_PowerON+0xcc>
 800ef20:	2301      	movs	r3, #1
 800ef22:	e000      	b.n	800ef26 <SD_PowerON+0xce>
 800ef24:	2300      	movs	r3, #0
 800ef26:	613b      	str	r3, [r7, #16]
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	60bb      	str	r3, [r7, #8]
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d802      	bhi.n	800ef3e <SD_PowerON+0xe6>
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d0cc      	beq.n	800eed8 <SD_PowerON+0x80>
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d902      	bls.n	800ef4e <SD_PowerON+0xf6>
 800ef48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ef4c:	e00c      	b.n	800ef68 <SD_PowerON+0x110>
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d003      	beq.n	800ef60 <SD_PowerON+0x108>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	645a      	str	r2, [r3, #68]	; 0x44
 800ef5e:	e002      	b.n	800ef66 <SD_PowerON+0x10e>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	645a      	str	r2, [r3, #68]	; 0x44
 800ef66:	2300      	movs	r3, #0
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	c1100000 	.word	0xc1100000

0800ef74 <SD_SendStatus>:
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d102      	bne.n	800ef8a <SD_SendStatus+0x16>
 800ef84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef88:	e018      	b.n	800efbc <SD_SendStatus+0x48>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef92:	041b      	lsls	r3, r3, #16
 800ef94:	4619      	mov	r1, r3
 800ef96:	4610      	mov	r0, r2
 800ef98:	f003 fb6f 	bl	801267a <SDMMC_CmdSendStatus>
 800ef9c:	60f8      	str	r0, [r7, #12]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d001      	beq.n	800efa8 <SD_SendStatus+0x34>
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	e009      	b.n	800efbc <SD_SendStatus+0x48>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2100      	movs	r1, #0
 800efae:	4618      	mov	r0, r3
 800efb0:	f003 f911 	bl	80121d6 <SDMMC_GetResponse>
 800efb4:	4602      	mov	r2, r0
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	601a      	str	r2, [r3, #0]
 800efba:	2300      	movs	r3, #0
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <SD_WideBus_Enable>:
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	2300      	movs	r3, #0
 800efce:	60fb      	str	r3, [r7, #12]
 800efd0:	2300      	movs	r3, #0
 800efd2:	613b      	str	r3, [r7, #16]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2100      	movs	r1, #0
 800efda:	4618      	mov	r0, r3
 800efdc:	f003 f8fb 	bl	80121d6 <SDMMC_GetResponse>
 800efe0:	4603      	mov	r3, r0
 800efe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800efea:	d102      	bne.n	800eff2 <SD_WideBus_Enable+0x2e>
 800efec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eff0:	e02f      	b.n	800f052 <SD_WideBus_Enable+0x8e>
 800eff2:	f107 030c 	add.w	r3, r7, #12
 800eff6:	4619      	mov	r1, r3
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 f879 	bl	800f0f0 <SD_FindSCR>
 800effe:	6178      	str	r0, [r7, #20]
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <SD_WideBus_Enable+0x46>
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	e023      	b.n	800f052 <SD_WideBus_Enable+0x8e>
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f010:	2b00      	cmp	r3, #0
 800f012:	d01c      	beq.n	800f04e <SD_WideBus_Enable+0x8a>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f01c:	041b      	lsls	r3, r3, #16
 800f01e:	4619      	mov	r1, r3
 800f020:	4610      	mov	r0, r2
 800f022:	f003 fa43 	bl	80124ac <SDMMC_CmdAppCommand>
 800f026:	6178      	str	r0, [r7, #20]
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d001      	beq.n	800f032 <SD_WideBus_Enable+0x6e>
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	e00f      	b.n	800f052 <SD_WideBus_Enable+0x8e>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2102      	movs	r1, #2
 800f038:	4618      	mov	r0, r3
 800f03a:	f003 fa7d 	bl	8012538 <SDMMC_CmdBusWidth>
 800f03e:	6178      	str	r0, [r7, #20]
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <SD_WideBus_Enable+0x86>
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	e003      	b.n	800f052 <SD_WideBus_Enable+0x8e>
 800f04a:	2300      	movs	r3, #0
 800f04c:	e001      	b.n	800f052 <SD_WideBus_Enable+0x8e>
 800f04e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f052:	4618      	mov	r0, r3
 800f054:	3718      	adds	r7, #24
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <SD_WideBus_Disable>:
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b086      	sub	sp, #24
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
 800f062:	2300      	movs	r3, #0
 800f064:	60fb      	str	r3, [r7, #12]
 800f066:	2300      	movs	r3, #0
 800f068:	613b      	str	r3, [r7, #16]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2100      	movs	r1, #0
 800f070:	4618      	mov	r0, r3
 800f072:	f003 f8b0 	bl	80121d6 <SDMMC_GetResponse>
 800f076:	4603      	mov	r3, r0
 800f078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f07c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f080:	d102      	bne.n	800f088 <SD_WideBus_Disable+0x2e>
 800f082:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f086:	e02f      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
 800f088:	f107 030c 	add.w	r3, r7, #12
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f82e 	bl	800f0f0 <SD_FindSCR>
 800f094:	6178      	str	r0, [r7, #20]
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d001      	beq.n	800f0a0 <SD_WideBus_Disable+0x46>
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	e023      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d01c      	beq.n	800f0e4 <SD_WideBus_Disable+0x8a>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0b2:	041b      	lsls	r3, r3, #16
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	f003 f9f8 	bl	80124ac <SDMMC_CmdAppCommand>
 800f0bc:	6178      	str	r0, [r7, #20]
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <SD_WideBus_Disable+0x6e>
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	e00f      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f003 fa32 	bl	8012538 <SDMMC_CmdBusWidth>
 800f0d4:	6178      	str	r0, [r7, #20]
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <SD_WideBus_Disable+0x86>
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	e003      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e001      	b.n	800f0e8 <SD_WideBus_Disable+0x8e>
 800f0e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <SD_FindSCR>:
 800f0f0:	b590      	push	{r4, r7, lr}
 800f0f2:	b08f      	sub	sp, #60	; 0x3c
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
 800f0fa:	f7f9 f8a5 	bl	8008248 <HAL_GetTick>
 800f0fe:	6338      	str	r0, [r7, #48]	; 0x30
 800f100:	2300      	movs	r3, #0
 800f102:	637b      	str	r3, [r7, #52]	; 0x34
 800f104:	2300      	movs	r3, #0
 800f106:	60bb      	str	r3, [r7, #8]
 800f108:	2300      	movs	r3, #0
 800f10a:	60fb      	str	r3, [r7, #12]
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2108      	movs	r1, #8
 800f116:	4618      	mov	r0, r3
 800f118:	f003 f89c 	bl	8012254 <SDMMC_CmdBlockLength>
 800f11c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f120:	2b00      	cmp	r3, #0
 800f122:	d001      	beq.n	800f128 <SD_FindSCR+0x38>
 800f124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f126:	e0a9      	b.n	800f27c <SD_FindSCR+0x18c>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f130:	041b      	lsls	r3, r3, #16
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	f003 f9b9 	bl	80124ac <SDMMC_CmdAppCommand>
 800f13a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d001      	beq.n	800f146 <SD_FindSCR+0x56>
 800f142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f144:	e09a      	b.n	800f27c <SD_FindSCR+0x18c>
 800f146:	f04f 33ff 	mov.w	r3, #4294967295
 800f14a:	613b      	str	r3, [r7, #16]
 800f14c:	2308      	movs	r3, #8
 800f14e:	617b      	str	r3, [r7, #20]
 800f150:	2330      	movs	r3, #48	; 0x30
 800f152:	61bb      	str	r3, [r7, #24]
 800f154:	2302      	movs	r3, #2
 800f156:	61fb      	str	r3, [r7, #28]
 800f158:	2300      	movs	r3, #0
 800f15a:	623b      	str	r3, [r7, #32]
 800f15c:	2301      	movs	r3, #1
 800f15e:	627b      	str	r3, [r7, #36]	; 0x24
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f107 0210 	add.w	r2, r7, #16
 800f168:	4611      	mov	r1, r2
 800f16a:	4618      	mov	r0, r3
 800f16c:	f003 f846 	bl	80121fc <SDMMC_ConfigData>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4618      	mov	r0, r3
 800f176:	f003 fa01 	bl	801257c <SDMMC_CmdSendSCR>
 800f17a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d022      	beq.n	800f1c8 <SD_FindSCR+0xd8>
 800f182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f184:	e07a      	b.n	800f27c <SD_FindSCR+0x18c>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f18c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f190:	2b00      	cmp	r3, #0
 800f192:	d00e      	beq.n	800f1b2 <SD_FindSCR+0xc2>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6819      	ldr	r1, [r3, #0]
 800f198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	f107 0208 	add.w	r2, r7, #8
 800f1a0:	18d4      	adds	r4, r2, r3
 800f1a2:	4608      	mov	r0, r1
 800f1a4:	f002 ffa4 	bl	80120f0 <SDMMC_ReadFIFO>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	6023      	str	r3, [r4, #0]
 800f1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	637b      	str	r3, [r7, #52]	; 0x34
 800f1b2:	f7f9 f849 	bl	8008248 <HAL_GetTick>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c0:	d102      	bne.n	800f1c8 <SD_FindSCR+0xd8>
 800f1c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f1c6:	e059      	b.n	800f27c <SD_FindSCR+0x18c>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1ce:	f240 432a 	movw	r3, #1066	; 0x42a
 800f1d2:	4013      	ands	r3, r2
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d0d6      	beq.n	800f186 <SD_FindSCR+0x96>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1de:	f003 0308 	and.w	r3, r3, #8
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d005      	beq.n	800f1f2 <SD_FindSCR+0x102>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2208      	movs	r2, #8
 800f1ec:	639a      	str	r2, [r3, #56]	; 0x38
 800f1ee:	2308      	movs	r3, #8
 800f1f0:	e044      	b.n	800f27c <SD_FindSCR+0x18c>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1f8:	f003 0302 	and.w	r3, r3, #2
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d005      	beq.n	800f20c <SD_FindSCR+0x11c>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2202      	movs	r2, #2
 800f206:	639a      	str	r2, [r3, #56]	; 0x38
 800f208:	2302      	movs	r3, #2
 800f20a:	e037      	b.n	800f27c <SD_FindSCR+0x18c>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f212:	f003 0320 	and.w	r3, r3, #32
 800f216:	2b00      	cmp	r3, #0
 800f218:	d005      	beq.n	800f226 <SD_FindSCR+0x136>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2220      	movs	r2, #32
 800f220:	639a      	str	r2, [r3, #56]	; 0x38
 800f222:	2320      	movs	r3, #32
 800f224:	e02a      	b.n	800f27c <SD_FindSCR+0x18c>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f240 523a 	movw	r2, #1338	; 0x53a
 800f22e:	639a      	str	r2, [r3, #56]	; 0x38
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	061a      	lsls	r2, r3, #24
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	021b      	lsls	r3, r3, #8
 800f238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f23c:	431a      	orrs	r2, r3
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	0a1b      	lsrs	r3, r3, #8
 800f242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f246:	431a      	orrs	r2, r3
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	0e1b      	lsrs	r3, r3, #24
 800f24c:	431a      	orrs	r2, r3
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	601a      	str	r2, [r3, #0]
 800f252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f254:	3304      	adds	r3, #4
 800f256:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	061a      	lsls	r2, r3, #24
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	021b      	lsls	r3, r3, #8
 800f260:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f264:	431a      	orrs	r2, r3
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	0a1b      	lsrs	r3, r3, #8
 800f26a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f26e:	431a      	orrs	r2, r3
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	0e1b      	lsrs	r3, r3, #24
 800f274:	431a      	orrs	r2, r3
 800f276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	2300      	movs	r3, #0
 800f27c:	4618      	mov	r0, r3
 800f27e:	373c      	adds	r7, #60	; 0x3c
 800f280:	46bd      	mov	sp, r7
 800f282:	bd90      	pop	{r4, r7, pc}

0800f284 <SD_Read_IT>:
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f290:	60fb      	str	r3, [r7, #12]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f296:	613b      	str	r3, [r7, #16]
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d03f      	beq.n	800f31e <SD_Read_IT+0x9a>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	617b      	str	r3, [r7, #20]
 800f2a2:	e033      	b.n	800f30c <SD_Read_IT+0x88>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f002 ff21 	bl	80120f0 <SDMMC_ReadFIFO>
 800f2ae:	60b8      	str	r0, [r7, #8]
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	b2da      	uxtb	r2, r3
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	701a      	strb	r2, [r3, #0]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	60fb      	str	r3, [r7, #12]
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	3b01      	subs	r3, #1
 800f2c2:	613b      	str	r3, [r7, #16]
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	0a1b      	lsrs	r3, r3, #8
 800f2c8:	b2da      	uxtb	r2, r3
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	701a      	strb	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	60fb      	str	r3, [r7, #12]
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	613b      	str	r3, [r7, #16]
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	0c1b      	lsrs	r3, r3, #16
 800f2de:	b2da      	uxtb	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	701a      	strb	r2, [r3, #0]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	60fb      	str	r3, [r7, #12]
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	613b      	str	r3, [r7, #16]
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	0e1b      	lsrs	r3, r3, #24
 800f2f4:	b2da      	uxtb	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	701a      	strb	r2, [r3, #0]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	60fb      	str	r3, [r7, #12]
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	3b01      	subs	r3, #1
 800f304:	613b      	str	r3, [r7, #16]
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	3301      	adds	r3, #1
 800f30a:	617b      	str	r3, [r7, #20]
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	2b07      	cmp	r3, #7
 800f310:	d9c8      	bls.n	800f2a4 <SD_Read_IT+0x20>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	68fa      	ldr	r2, [r7, #12]
 800f316:	629a      	str	r2, [r3, #40]	; 0x28
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	693a      	ldr	r2, [r7, #16]
 800f31c:	62da      	str	r2, [r3, #44]	; 0x2c
 800f31e:	bf00      	nop
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <SD_Write_IT>:
 800f326:	b580      	push	{r7, lr}
 800f328:	b086      	sub	sp, #24
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a1b      	ldr	r3, [r3, #32]
 800f332:	60fb      	str	r3, [r7, #12]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f338:	613b      	str	r3, [r7, #16]
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d043      	beq.n	800f3c8 <SD_Write_IT+0xa2>
 800f340:	2300      	movs	r3, #0
 800f342:	617b      	str	r3, [r7, #20]
 800f344:	e037      	b.n	800f3b6 <SD_Write_IT+0x90>
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	60bb      	str	r3, [r7, #8]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	3301      	adds	r3, #1
 800f350:	60fb      	str	r3, [r7, #12]
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	3b01      	subs	r3, #1
 800f356:	613b      	str	r3, [r7, #16]
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	021a      	lsls	r2, r3, #8
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	4313      	orrs	r3, r2
 800f362:	60bb      	str	r3, [r7, #8]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	3301      	adds	r3, #1
 800f368:	60fb      	str	r3, [r7, #12]
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	613b      	str	r3, [r7, #16]
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	041a      	lsls	r2, r3, #16
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	4313      	orrs	r3, r2
 800f37a:	60bb      	str	r3, [r7, #8]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3301      	adds	r3, #1
 800f380:	60fb      	str	r3, [r7, #12]
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	3b01      	subs	r3, #1
 800f386:	613b      	str	r3, [r7, #16]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	061a      	lsls	r2, r3, #24
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	4313      	orrs	r3, r2
 800f392:	60bb      	str	r3, [r7, #8]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	3301      	adds	r3, #1
 800f398:	60fb      	str	r3, [r7, #12]
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	613b      	str	r3, [r7, #16]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f107 0208 	add.w	r2, r7, #8
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f002 fead 	bl	801210a <SDMMC_WriteFIFO>
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	617b      	str	r3, [r7, #20]
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	2b07      	cmp	r3, #7
 800f3ba:	d9c4      	bls.n	800f346 <SD_Write_IT+0x20>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	621a      	str	r2, [r3, #32]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	693a      	ldr	r2, [r7, #16]
 800f3c6:	625a      	str	r2, [r3, #36]	; 0x24
 800f3c8:	bf00      	nop
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <HAL_SPI_Init>:
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d101      	bne.n	800f3e2 <HAL_SPI_Init+0x12>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e084      	b.n	800f4ec <HAL_SPI_Init+0x11c>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	629a      	str	r2, [r3, #40]	; 0x28
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d106      	bne.n	800f402 <HAL_SPI_Init+0x32>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7f8 f891 	bl	8007524 <HAL_SPI_MspInit>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2202      	movs	r2, #2
 800f406:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f418:	601a      	str	r2, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f422:	d902      	bls.n	800f42a <HAL_SPI_Init+0x5a>
 800f424:	2300      	movs	r3, #0
 800f426:	60fb      	str	r3, [r7, #12]
 800f428:	e002      	b.n	800f430 <HAL_SPI_Init+0x60>
 800f42a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f42e:	60fb      	str	r3, [r7, #12]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800f438:	d007      	beq.n	800f44a <HAL_SPI_Init+0x7a>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f442:	d002      	beq.n	800f44a <HAL_SPI_Init+0x7a>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	629a      	str	r2, [r3, #40]	; 0x28
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10b      	bne.n	800f46a <HAL_SPI_Init+0x9a>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f45a:	d903      	bls.n	800f464 <HAL_SPI_Init+0x94>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2202      	movs	r2, #2
 800f460:	631a      	str	r2, [r3, #48]	; 0x30
 800f462:	e002      	b.n	800f46a <HAL_SPI_Init+0x9a>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2201      	movs	r2, #1
 800f468:	631a      	str	r2, [r3, #48]	; 0x30
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	685a      	ldr	r2, [r3, #4]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	689b      	ldr	r3, [r3, #8]
 800f472:	431a      	orrs	r2, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	431a      	orrs	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	695b      	ldr	r3, [r3, #20]
 800f47e:	431a      	orrs	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	699b      	ldr	r3, [r3, #24]
 800f484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f488:	431a      	orrs	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	69db      	ldr	r3, [r3, #28]
 800f48e:	431a      	orrs	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6a1b      	ldr	r3, [r3, #32]
 800f494:	ea42 0103 	orr.w	r1, r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	601a      	str	r2, [r3, #0]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	699b      	ldr	r3, [r3, #24]
 800f4a8:	0c1b      	lsrs	r3, r3, #16
 800f4aa:	f003 0204 	and.w	r2, r3, #4
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b2:	431a      	orrs	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b8:	431a      	orrs	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	ea42 0103 	orr.w	r1, r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	430a      	orrs	r2, r1
 800f4ca:	605a      	str	r2, [r3, #4]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	69da      	ldr	r2, [r3, #28]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f4da:	61da      	str	r2, [r3, #28]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	661a      	str	r2, [r3, #96]	; 0x60
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3710      	adds	r7, #16
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <HAL_SPI_Transmit>:
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b088      	sub	sp, #32
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	603b      	str	r3, [r7, #0]
 800f500:	4613      	mov	r3, r2
 800f502:	80fb      	strh	r3, [r7, #6]
 800f504:	2300      	movs	r3, #0
 800f506:	77fb      	strb	r3, [r7, #31]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d101      	bne.n	800f516 <HAL_SPI_Transmit+0x22>
 800f512:	2302      	movs	r3, #2
 800f514:	e150      	b.n	800f7b8 <HAL_SPI_Transmit+0x2c4>
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2201      	movs	r2, #1
 800f51a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800f51e:	f7f8 fe93 	bl	8008248 <HAL_GetTick>
 800f522:	61b8      	str	r0, [r7, #24]
 800f524:	88fb      	ldrh	r3, [r7, #6]
 800f526:	82fb      	strh	r3, [r7, #22]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	2b01      	cmp	r3, #1
 800f532:	d002      	beq.n	800f53a <HAL_SPI_Transmit+0x46>
 800f534:	2302      	movs	r3, #2
 800f536:	77fb      	strb	r3, [r7, #31]
 800f538:	e135      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <HAL_SPI_Transmit+0x52>
 800f540:	88fb      	ldrh	r3, [r7, #6]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d102      	bne.n	800f54c <HAL_SPI_Transmit+0x58>
 800f546:	2301      	movs	r3, #1
 800f548:	77fb      	strb	r3, [r7, #31]
 800f54a:	e12c      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2203      	movs	r2, #3
 800f550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2200      	movs	r2, #0
 800f558:	661a      	str	r2, [r3, #96]	; 0x60
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	639a      	str	r2, [r3, #56]	; 0x38
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	88fa      	ldrh	r2, [r7, #6]
 800f564:	879a      	strh	r2, [r3, #60]	; 0x3c
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	88fa      	ldrh	r2, [r7, #6]
 800f56a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2200      	movs	r2, #0
 800f570:	641a      	str	r2, [r3, #64]	; 0x40
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2200      	movs	r2, #0
 800f576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2200      	movs	r2, #0
 800f57e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	651a      	str	r2, [r3, #80]	; 0x50
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2200      	movs	r2, #0
 800f58c:	64da      	str	r2, [r3, #76]	; 0x4c
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	689b      	ldr	r3, [r3, #8]
 800f592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f596:	d107      	bne.n	800f5a8 <HAL_SPI_Transmit+0xb4>
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f5a6:	601a      	str	r2, [r3, #0]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5b2:	2b40      	cmp	r3, #64	; 0x40
 800f5b4:	d007      	beq.n	800f5c6 <HAL_SPI_Transmit+0xd2>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f5c4:	601a      	str	r2, [r3, #0]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f5ce:	d94b      	bls.n	800f668 <HAL_SPI_Transmit+0x174>
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d002      	beq.n	800f5de <HAL_SPI_Transmit+0xea>
 800f5d8:	8afb      	ldrh	r3, [r7, #22]
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d13e      	bne.n	800f65c <HAL_SPI_Transmit+0x168>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5e2:	881a      	ldrh	r2, [r3, #0]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	60da      	str	r2, [r3, #12]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ee:	1c9a      	adds	r2, r3, #2
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	639a      	str	r2, [r3, #56]	; 0x38
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	3b01      	subs	r3, #1
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f602:	e02b      	b.n	800f65c <HAL_SPI_Transmit+0x168>
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f003 0302 	and.w	r3, r3, #2
 800f60e:	2b02      	cmp	r3, #2
 800f610:	d112      	bne.n	800f638 <HAL_SPI_Transmit+0x144>
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f616:	881a      	ldrh	r2, [r3, #0]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	60da      	str	r2, [r3, #12]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f622:	1c9a      	adds	r2, r3, #2
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	639a      	str	r2, [r3, #56]	; 0x38
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	3b01      	subs	r3, #1
 800f630:	b29a      	uxth	r2, r3
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f636:	e011      	b.n	800f65c <HAL_SPI_Transmit+0x168>
 800f638:	f7f8 fe06 	bl	8008248 <HAL_GetTick>
 800f63c:	4602      	mov	r2, r0
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	429a      	cmp	r2, r3
 800f646:	d803      	bhi.n	800f650 <HAL_SPI_Transmit+0x15c>
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f64e:	d102      	bne.n	800f656 <HAL_SPI_Transmit+0x162>
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d102      	bne.n	800f65c <HAL_SPI_Transmit+0x168>
 800f656:	2303      	movs	r3, #3
 800f658:	77fb      	strb	r3, [r7, #31]
 800f65a:	e0a4      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f660:	b29b      	uxth	r3, r3
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1ce      	bne.n	800f604 <HAL_SPI_Transmit+0x110>
 800f666:	e07c      	b.n	800f762 <HAL_SPI_Transmit+0x26e>
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d002      	beq.n	800f676 <HAL_SPI_Transmit+0x182>
 800f670:	8afb      	ldrh	r3, [r7, #22]
 800f672:	2b01      	cmp	r3, #1
 800f674:	d170      	bne.n	800f758 <HAL_SPI_Transmit+0x264>
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d912      	bls.n	800f6a6 <HAL_SPI_Transmit+0x1b2>
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f684:	881a      	ldrh	r2, [r3, #0]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	60da      	str	r2, [r3, #12]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f690:	1c9a      	adds	r2, r3, #2
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	639a      	str	r2, [r3, #56]	; 0x38
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	3b02      	subs	r3, #2
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f6a4:	e058      	b.n	800f758 <HAL_SPI_Transmit+0x264>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	330c      	adds	r3, #12
 800f6b0:	7812      	ldrb	r2, [r2, #0]
 800f6b2:	701a      	strb	r2, [r3, #0]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	639a      	str	r2, [r3, #56]	; 0x38
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	b29a      	uxth	r2, r3
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f6cc:	e044      	b.n	800f758 <HAL_SPI_Transmit+0x264>
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	f003 0302 	and.w	r3, r3, #2
 800f6d8:	2b02      	cmp	r3, #2
 800f6da:	d12b      	bne.n	800f734 <HAL_SPI_Transmit+0x240>
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d912      	bls.n	800f70c <HAL_SPI_Transmit+0x218>
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ea:	881a      	ldrh	r2, [r3, #0]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	60da      	str	r2, [r3, #12]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6f6:	1c9a      	adds	r2, r3, #2
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	639a      	str	r2, [r3, #56]	; 0x38
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f700:	b29b      	uxth	r3, r3
 800f702:	3b02      	subs	r3, #2
 800f704:	b29a      	uxth	r2, r3
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f70a:	e025      	b.n	800f758 <HAL_SPI_Transmit+0x264>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	330c      	adds	r3, #12
 800f716:	7812      	ldrb	r2, [r2, #0]
 800f718:	701a      	strb	r2, [r3, #0]
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f71e:	1c5a      	adds	r2, r3, #1
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	639a      	str	r2, [r3, #56]	; 0x38
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f728:	b29b      	uxth	r3, r3
 800f72a:	3b01      	subs	r3, #1
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f732:	e011      	b.n	800f758 <HAL_SPI_Transmit+0x264>
 800f734:	f7f8 fd88 	bl	8008248 <HAL_GetTick>
 800f738:	4602      	mov	r2, r0
 800f73a:	69bb      	ldr	r3, [r7, #24]
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	683a      	ldr	r2, [r7, #0]
 800f740:	429a      	cmp	r2, r3
 800f742:	d803      	bhi.n	800f74c <HAL_SPI_Transmit+0x258>
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f74a:	d102      	bne.n	800f752 <HAL_SPI_Transmit+0x25e>
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d102      	bne.n	800f758 <HAL_SPI_Transmit+0x264>
 800f752:	2303      	movs	r3, #3
 800f754:	77fb      	strb	r3, [r7, #31]
 800f756:	e026      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1b5      	bne.n	800f6ce <HAL_SPI_Transmit+0x1da>
 800f762:	69ba      	ldr	r2, [r7, #24]
 800f764:	6839      	ldr	r1, [r7, #0]
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f001 f8c7 	bl	80108fa <SPI_EndRxTxTransaction>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <HAL_SPI_Transmit+0x284>
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2220      	movs	r2, #32
 800f776:	661a      	str	r2, [r3, #96]	; 0x60
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d10a      	bne.n	800f796 <HAL_SPI_Transmit+0x2a2>
 800f780:	2300      	movs	r3, #0
 800f782:	613b      	str	r3, [r7, #16]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	613b      	str	r3, [r7, #16]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	613b      	str	r3, [r7, #16]
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d002      	beq.n	800f7a4 <HAL_SPI_Transmit+0x2b0>
 800f79e:	2301      	movs	r3, #1
 800f7a0:	77fb      	strb	r3, [r7, #31]
 800f7a2:	e000      	b.n	800f7a6 <HAL_SPI_Transmit+0x2b2>
 800f7a4:	bf00      	nop
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800f7b6:	7ffb      	ldrb	r3, [r7, #31]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3720      	adds	r7, #32
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <HAL_SPI_TransmitReceive>:
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b08a      	sub	sp, #40	; 0x28
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
 800f7cc:	807b      	strh	r3, [r7, #2]
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d101      	bne.n	800f7e6 <HAL_SPI_TransmitReceive+0x26>
 800f7e2:	2302      	movs	r3, #2
 800f7e4:	e1fb      	b.n	800fbde <HAL_SPI_TransmitReceive+0x41e>
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800f7ee:	f7f8 fd2b 	bl	8008248 <HAL_GetTick>
 800f7f2:	61f8      	str	r0, [r7, #28]
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f7fa:	76fb      	strb	r3, [r7, #27]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	617b      	str	r3, [r7, #20]
 800f802:	887b      	ldrh	r3, [r7, #2]
 800f804:	827b      	strh	r3, [r7, #18]
 800f806:	887b      	ldrh	r3, [r7, #2]
 800f808:	823b      	strh	r3, [r7, #16]
 800f80a:	7efb      	ldrb	r3, [r7, #27]
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d00e      	beq.n	800f82e <HAL_SPI_TransmitReceive+0x6e>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f816:	d106      	bne.n	800f826 <HAL_SPI_TransmitReceive+0x66>
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d102      	bne.n	800f826 <HAL_SPI_TransmitReceive+0x66>
 800f820:	7efb      	ldrb	r3, [r7, #27]
 800f822:	2b04      	cmp	r3, #4
 800f824:	d003      	beq.n	800f82e <HAL_SPI_TransmitReceive+0x6e>
 800f826:	2302      	movs	r3, #2
 800f828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f82c:	e1cd      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d005      	beq.n	800f840 <HAL_SPI_TransmitReceive+0x80>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d002      	beq.n	800f840 <HAL_SPI_TransmitReceive+0x80>
 800f83a:	887b      	ldrh	r3, [r7, #2]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d103      	bne.n	800f848 <HAL_SPI_TransmitReceive+0x88>
 800f840:	2301      	movs	r3, #1
 800f842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f846:	e1c0      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	2b04      	cmp	r3, #4
 800f852:	d003      	beq.n	800f85c <HAL_SPI_TransmitReceive+0x9c>
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2205      	movs	r2, #5
 800f858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2200      	movs	r2, #0
 800f860:	661a      	str	r2, [r3, #96]	; 0x60
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	641a      	str	r2, [r3, #64]	; 0x40
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	887a      	ldrh	r2, [r7, #2]
 800f86c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	887a      	ldrh	r2, [r7, #2]
 800f874:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	68ba      	ldr	r2, [r7, #8]
 800f87c:	639a      	str	r2, [r3, #56]	; 0x38
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	887a      	ldrh	r2, [r7, #2]
 800f882:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	887a      	ldrh	r2, [r7, #2]
 800f888:	879a      	strh	r2, [r3, #60]	; 0x3c
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	64da      	str	r2, [r3, #76]	; 0x4c
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	651a      	str	r2, [r3, #80]	; 0x50
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f89e:	d802      	bhi.n	800f8a6 <HAL_SPI_TransmitReceive+0xe6>
 800f8a0:	8a3b      	ldrh	r3, [r7, #16]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d908      	bls.n	800f8b8 <HAL_SPI_TransmitReceive+0xf8>
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f8b4:	605a      	str	r2, [r3, #4]
 800f8b6:	e007      	b.n	800f8c8 <HAL_SPI_TransmitReceive+0x108>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	685a      	ldr	r2, [r3, #4]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f8c6:	605a      	str	r2, [r3, #4]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8d2:	2b40      	cmp	r3, #64	; 0x40
 800f8d4:	d007      	beq.n	800f8e6 <HAL_SPI_TransmitReceive+0x126>
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f8e4:	601a      	str	r2, [r3, #0]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f8ee:	d97c      	bls.n	800f9ea <HAL_SPI_TransmitReceive+0x22a>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d002      	beq.n	800f8fe <HAL_SPI_TransmitReceive+0x13e>
 800f8f8:	8a7b      	ldrh	r3, [r7, #18]
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d169      	bne.n	800f9d2 <HAL_SPI_TransmitReceive+0x212>
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f902:	881a      	ldrh	r2, [r3, #0]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	60da      	str	r2, [r3, #12]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f90e:	1c9a      	adds	r2, r3, #2
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	639a      	str	r2, [r3, #56]	; 0x38
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f918:	b29b      	uxth	r3, r3
 800f91a:	3b01      	subs	r3, #1
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f922:	e056      	b.n	800f9d2 <HAL_SPI_TransmitReceive+0x212>
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	f003 0302 	and.w	r3, r3, #2
 800f92e:	2b02      	cmp	r3, #2
 800f930:	d11b      	bne.n	800f96a <HAL_SPI_TransmitReceive+0x1aa>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f936:	b29b      	uxth	r3, r3
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d016      	beq.n	800f96a <HAL_SPI_TransmitReceive+0x1aa>
 800f93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d113      	bne.n	800f96a <HAL_SPI_TransmitReceive+0x1aa>
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f946:	881a      	ldrh	r2, [r3, #0]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	60da      	str	r2, [r3, #12]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f952:	1c9a      	adds	r2, r3, #2
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	639a      	str	r2, [r3, #56]	; 0x38
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	3b01      	subs	r3, #1
 800f960:	b29a      	uxth	r2, r3
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f966:	2300      	movs	r3, #0
 800f968:	627b      	str	r3, [r7, #36]	; 0x24
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f003 0301 	and.w	r3, r3, #1
 800f974:	2b01      	cmp	r3, #1
 800f976:	d11c      	bne.n	800f9b2 <HAL_SPI_TransmitReceive+0x1f2>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f97e:	b29b      	uxth	r3, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	d016      	beq.n	800f9b2 <HAL_SPI_TransmitReceive+0x1f2>
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68da      	ldr	r2, [r3, #12]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f98e:	b292      	uxth	r2, r2
 800f990:	801a      	strh	r2, [r3, #0]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f996:	1c9a      	adds	r2, r3, #2
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	641a      	str	r2, [r3, #64]	; 0x40
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	627b      	str	r3, [r7, #36]	; 0x24
 800f9b2:	f7f8 fc49 	bl	8008248 <HAL_GetTick>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	69fb      	ldr	r3, [r7, #28]
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d807      	bhi.n	800f9d2 <HAL_SPI_TransmitReceive+0x212>
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c8:	d003      	beq.n	800f9d2 <HAL_SPI_TransmitReceive+0x212>
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f9d0:	e0fb      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1a3      	bne.n	800f924 <HAL_SPI_TransmitReceive+0x164>
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d19d      	bne.n	800f924 <HAL_SPI_TransmitReceive+0x164>
 800f9e8:	e0df      	b.n	800fbaa <HAL_SPI_TransmitReceive+0x3ea>
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d003      	beq.n	800f9fa <HAL_SPI_TransmitReceive+0x23a>
 800f9f2:	8a7b      	ldrh	r3, [r7, #18]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	f040 80cb 	bne.w	800fb90 <HAL_SPI_TransmitReceive+0x3d0>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d912      	bls.n	800fa2a <HAL_SPI_TransmitReceive+0x26a>
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa08:	881a      	ldrh	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	60da      	str	r2, [r3, #12]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa14:	1c9a      	adds	r2, r3, #2
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	639a      	str	r2, [r3, #56]	; 0x38
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	3b02      	subs	r3, #2
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fa28:	e0b2      	b.n	800fb90 <HAL_SPI_TransmitReceive+0x3d0>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	330c      	adds	r3, #12
 800fa34:	7812      	ldrb	r2, [r2, #0]
 800fa36:	701a      	strb	r2, [r3, #0]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa3c:	1c5a      	adds	r2, r3, #1
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	639a      	str	r2, [r3, #56]	; 0x38
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fa50:	e09e      	b.n	800fb90 <HAL_SPI_TransmitReceive+0x3d0>
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	689b      	ldr	r3, [r3, #8]
 800fa58:	f003 0302 	and.w	r3, r3, #2
 800fa5c:	2b02      	cmp	r3, #2
 800fa5e:	d134      	bne.n	800faca <HAL_SPI_TransmitReceive+0x30a>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d02f      	beq.n	800faca <HAL_SPI_TransmitReceive+0x30a>
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d12c      	bne.n	800faca <HAL_SPI_TransmitReceive+0x30a>
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d912      	bls.n	800faa0 <HAL_SPI_TransmitReceive+0x2e0>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa7e:	881a      	ldrh	r2, [r3, #0]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	60da      	str	r2, [r3, #12]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa8a:	1c9a      	adds	r2, r3, #2
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	639a      	str	r2, [r3, #56]	; 0x38
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	3b02      	subs	r3, #2
 800fa98:	b29a      	uxth	r2, r3
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fa9e:	e012      	b.n	800fac6 <HAL_SPI_TransmitReceive+0x306>
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	330c      	adds	r3, #12
 800faaa:	7812      	ldrb	r2, [r2, #0]
 800faac:	701a      	strb	r2, [r3, #0]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	639a      	str	r2, [r3, #56]	; 0x38
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	3b01      	subs	r3, #1
 800fac0:	b29a      	uxth	r2, r3
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fac6:	2300      	movs	r3, #0
 800fac8:	627b      	str	r3, [r7, #36]	; 0x24
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	f003 0301 	and.w	r3, r3, #1
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d148      	bne.n	800fb6a <HAL_SPI_TransmitReceive+0x3aa>
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fade:	b29b      	uxth	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d042      	beq.n	800fb6a <HAL_SPI_TransmitReceive+0x3aa>
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800faea:	b29b      	uxth	r3, r3
 800faec:	2b01      	cmp	r3, #1
 800faee:	d923      	bls.n	800fb38 <HAL_SPI_TransmitReceive+0x378>
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	68da      	ldr	r2, [r3, #12]
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fafa:	b292      	uxth	r2, r2
 800fafc:	801a      	strh	r2, [r3, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb02:	1c9a      	adds	r2, r3, #2
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	641a      	str	r2, [r3, #64]	; 0x40
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	3b02      	subs	r3, #2
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d81f      	bhi.n	800fb66 <HAL_SPI_TransmitReceive+0x3a6>
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	685a      	ldr	r2, [r3, #4]
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fb34:	605a      	str	r2, [r3, #4]
 800fb36:	e016      	b.n	800fb66 <HAL_SPI_TransmitReceive+0x3a6>
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f103 020c 	add.w	r2, r3, #12
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb44:	7812      	ldrb	r2, [r2, #0]
 800fb46:	b2d2      	uxtb	r2, r2
 800fb48:	701a      	strb	r2, [r3, #0]
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb4e:	1c5a      	adds	r2, r3, #1
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	641a      	str	r2, [r3, #64]	; 0x40
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	3b01      	subs	r3, #1
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800fb66:	2301      	movs	r3, #1
 800fb68:	627b      	str	r3, [r7, #36]	; 0x24
 800fb6a:	f7f8 fb6d 	bl	8008248 <HAL_GetTick>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	1ad3      	subs	r3, r2, r3
 800fb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d803      	bhi.n	800fb82 <HAL_SPI_TransmitReceive+0x3c2>
 800fb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb80:	d102      	bne.n	800fb88 <HAL_SPI_TransmitReceive+0x3c8>
 800fb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d103      	bne.n	800fb90 <HAL_SPI_TransmitReceive+0x3d0>
 800fb88:	2303      	movs	r3, #3
 800fb8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fb8e:	e01c      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	f47f af5b 	bne.w	800fa52 <HAL_SPI_TransmitReceive+0x292>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f47f af54 	bne.w	800fa52 <HAL_SPI_TransmitReceive+0x292>
 800fbaa:	69fa      	ldr	r2, [r7, #28]
 800fbac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	f000 fea3 	bl	80108fa <SPI_EndRxTxTransaction>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d006      	beq.n	800fbc8 <HAL_SPI_TransmitReceive+0x408>
 800fbba:	2301      	movs	r3, #1
 800fbbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2220      	movs	r2, #32
 800fbc4:	661a      	str	r2, [r3, #96]	; 0x60
 800fbc6:	e000      	b.n	800fbca <HAL_SPI_TransmitReceive+0x40a>
 800fbc8:	bf00      	nop
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800fbda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3728      	adds	r7, #40	; 0x28
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
	...

0800fbe8 <HAL_SPI_TransmitReceive_IT>:
 800fbe8:	b480      	push	{r7}
 800fbea:	b087      	sub	sp, #28
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	607a      	str	r2, [r7, #4]
 800fbf4:	807b      	strh	r3, [r7, #2]
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	75fb      	strb	r3, [r7, #23]
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d101      	bne.n	800fc08 <HAL_SPI_TransmitReceive_IT+0x20>
 800fc04:	2302      	movs	r3, #2
 800fc06:	e091      	b.n	800fd2c <HAL_SPI_TransmitReceive_IT+0x144>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fc16:	75bb      	strb	r3, [r7, #22]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	613b      	str	r3, [r7, #16]
 800fc1e:	7dbb      	ldrb	r3, [r7, #22]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d00d      	beq.n	800fc40 <HAL_SPI_TransmitReceive_IT+0x58>
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc2a:	d106      	bne.n	800fc3a <HAL_SPI_TransmitReceive_IT+0x52>
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d102      	bne.n	800fc3a <HAL_SPI_TransmitReceive_IT+0x52>
 800fc34:	7dbb      	ldrb	r3, [r7, #22]
 800fc36:	2b04      	cmp	r3, #4
 800fc38:	d002      	beq.n	800fc40 <HAL_SPI_TransmitReceive_IT+0x58>
 800fc3a:	2302      	movs	r3, #2
 800fc3c:	75fb      	strb	r3, [r7, #23]
 800fc3e:	e070      	b.n	800fd22 <HAL_SPI_TransmitReceive_IT+0x13a>
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d005      	beq.n	800fc52 <HAL_SPI_TransmitReceive_IT+0x6a>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d002      	beq.n	800fc52 <HAL_SPI_TransmitReceive_IT+0x6a>
 800fc4c:	887b      	ldrh	r3, [r7, #2]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d102      	bne.n	800fc58 <HAL_SPI_TransmitReceive_IT+0x70>
 800fc52:	2301      	movs	r3, #1
 800fc54:	75fb      	strb	r3, [r7, #23]
 800fc56:	e064      	b.n	800fd22 <HAL_SPI_TransmitReceive_IT+0x13a>
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	2b04      	cmp	r3, #4
 800fc62:	d003      	beq.n	800fc6c <HAL_SPI_TransmitReceive_IT+0x84>
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2205      	movs	r2, #5
 800fc68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	661a      	str	r2, [r3, #96]	; 0x60
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	68ba      	ldr	r2, [r7, #8]
 800fc76:	639a      	str	r2, [r3, #56]	; 0x38
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	887a      	ldrh	r2, [r7, #2]
 800fc7c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	887a      	ldrh	r2, [r7, #2]
 800fc82:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	641a      	str	r2, [r3, #64]	; 0x40
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	887a      	ldrh	r2, [r7, #2]
 800fc8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	887a      	ldrh	r2, [r7, #2]
 800fc96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fca2:	d906      	bls.n	800fcb2 <HAL_SPI_TransmitReceive_IT+0xca>
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	4a24      	ldr	r2, [pc, #144]	; (800fd38 <HAL_SPI_TransmitReceive_IT+0x150>)
 800fca8:	64da      	str	r2, [r3, #76]	; 0x4c
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	4a23      	ldr	r2, [pc, #140]	; (800fd3c <HAL_SPI_TransmitReceive_IT+0x154>)
 800fcae:	651a      	str	r2, [r3, #80]	; 0x50
 800fcb0:	e005      	b.n	800fcbe <HAL_SPI_TransmitReceive_IT+0xd6>
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	4a22      	ldr	r2, [pc, #136]	; (800fd40 <HAL_SPI_TransmitReceive_IT+0x158>)
 800fcb6:	64da      	str	r2, [r3, #76]	; 0x4c
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	4a22      	ldr	r2, [pc, #136]	; (800fd44 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800fcbc:	651a      	str	r2, [r3, #80]	; 0x50
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fcc6:	d802      	bhi.n	800fcce <HAL_SPI_TransmitReceive_IT+0xe6>
 800fcc8:	887b      	ldrh	r3, [r7, #2]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d908      	bls.n	800fce0 <HAL_SPI_TransmitReceive_IT+0xf8>
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	685a      	ldr	r2, [r3, #4]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fcdc:	605a      	str	r2, [r3, #4]
 800fcde:	e007      	b.n	800fcf0 <HAL_SPI_TransmitReceive_IT+0x108>
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	685a      	ldr	r2, [r3, #4]
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fcee:	605a      	str	r2, [r3, #4]
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	685a      	ldr	r2, [r3, #4]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800fcfe:	605a      	str	r2, [r3, #4]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd0a:	2b40      	cmp	r3, #64	; 0x40
 800fd0c:	d008      	beq.n	800fd20 <HAL_SPI_TransmitReceive_IT+0x138>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd1c:	601a      	str	r2, [r3, #0]
 800fd1e:	e000      	b.n	800fd22 <HAL_SPI_TransmitReceive_IT+0x13a>
 800fd20:	bf00      	nop
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800fd2a:	7dfb      	ldrb	r3, [r7, #23]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	371c      	adds	r7, #28
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	080105d7 	.word	0x080105d7
 800fd3c:	0801063d 	.word	0x0801063d
 800fd40:	08010487 	.word	0x08010487
 800fd44:	08010545 	.word	0x08010545

0800fd48 <HAL_SPI_TransmitReceive_DMA>:
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b086      	sub	sp, #24
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	607a      	str	r2, [r7, #4]
 800fd54:	807b      	strh	r3, [r7, #2]
 800fd56:	2300      	movs	r3, #0
 800fd58:	75fb      	strb	r3, [r7, #23]
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d101      	bne.n	800fd68 <HAL_SPI_TransmitReceive_DMA+0x20>
 800fd64:	2302      	movs	r3, #2
 800fd66:	e16c      	b.n	8010042 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fd76:	75bb      	strb	r3, [r7, #22]
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	613b      	str	r3, [r7, #16]
 800fd7e:	7dbb      	ldrb	r3, [r7, #22]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d00d      	beq.n	800fda0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fd8a:	d106      	bne.n	800fd9a <HAL_SPI_TransmitReceive_DMA+0x52>
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d102      	bne.n	800fd9a <HAL_SPI_TransmitReceive_DMA+0x52>
 800fd94:	7dbb      	ldrb	r3, [r7, #22]
 800fd96:	2b04      	cmp	r3, #4
 800fd98:	d002      	beq.n	800fda0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800fd9a:	2302      	movs	r3, #2
 800fd9c:	75fb      	strb	r3, [r7, #23]
 800fd9e:	e14b      	b.n	8010038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d005      	beq.n	800fdb2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d002      	beq.n	800fdb2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800fdac:	887b      	ldrh	r3, [r7, #2]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d102      	bne.n	800fdb8 <HAL_SPI_TransmitReceive_DMA+0x70>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	75fb      	strb	r3, [r7, #23]
 800fdb6:	e13f      	b.n	8010038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b04      	cmp	r3, #4
 800fdc2:	d003      	beq.n	800fdcc <HAL_SPI_TransmitReceive_DMA+0x84>
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2205      	movs	r2, #5
 800fdc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	661a      	str	r2, [r3, #96]	; 0x60
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	68ba      	ldr	r2, [r7, #8]
 800fdd6:	639a      	str	r2, [r3, #56]	; 0x38
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	887a      	ldrh	r2, [r7, #2]
 800fddc:	879a      	strh	r2, [r3, #60]	; 0x3c
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	887a      	ldrh	r2, [r7, #2]
 800fde2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	641a      	str	r2, [r3, #64]	; 0x40
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	887a      	ldrh	r2, [r7, #2]
 800fdee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	887a      	ldrh	r2, [r7, #2]
 800fdf6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	64da      	str	r2, [r3, #76]	; 0x4c
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2200      	movs	r2, #0
 800fe04:	651a      	str	r2, [r3, #80]	; 0x50
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	685a      	ldr	r2, [r3, #4]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800fe14:	605a      	str	r2, [r3, #4]
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fe1e:	d908      	bls.n	800fe32 <HAL_SPI_TransmitReceive_DMA+0xea>
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	685a      	ldr	r2, [r3, #4]
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fe2e:	605a      	str	r2, [r3, #4]
 800fe30:	e06f      	b.n	800ff12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	685a      	ldr	r2, [r3, #4]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fe40:	605a      	str	r2, [r3, #4]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe46:	699b      	ldr	r3, [r3, #24]
 800fe48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe4c:	d126      	bne.n	800fe9c <HAL_SPI_TransmitReceive_DMA+0x154>
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800fe52:	f003 0301 	and.w	r3, r3, #1
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d10f      	bne.n	800fe7a <HAL_SPI_TransmitReceive_DMA+0x132>
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	685a      	ldr	r2, [r3, #4]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fe68:	605a      	str	r2, [r3, #4]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	085b      	lsrs	r3, r3, #1
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fe78:	e010      	b.n	800fe9c <HAL_SPI_TransmitReceive_DMA+0x154>
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	685a      	ldr	r2, [r3, #4]
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fe88:	605a      	str	r2, [r3, #4]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	085b      	lsrs	r3, r3, #1
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	3301      	adds	r3, #1
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fea0:	699b      	ldr	r3, [r3, #24]
 800fea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fea6:	d134      	bne.n	800ff12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800feb6:	605a      	str	r2, [r3, #4]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800febe:	b29b      	uxth	r3, r3
 800fec0:	f003 0301 	and.w	r3, r3, #1
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d111      	bne.n	800feec <HAL_SPI_TransmitReceive_DMA+0x1a4>
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fed6:	605a      	str	r2, [r3, #4]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800fede:	b29b      	uxth	r3, r3
 800fee0:	085b      	lsrs	r3, r3, #1
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800feea:	e012      	b.n	800ff12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	685a      	ldr	r2, [r3, #4]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fefa:	605a      	str	r2, [r3, #4]
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	085b      	lsrs	r3, r3, #1
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	3301      	adds	r3, #1
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	2b04      	cmp	r3, #4
 800ff1c:	d108      	bne.n	800ff30 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff22:	4a4a      	ldr	r2, [pc, #296]	; (801004c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800ff24:	641a      	str	r2, [r3, #64]	; 0x40
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff2a:	4a49      	ldr	r2, [pc, #292]	; (8010050 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800ff2c:	63da      	str	r2, [r3, #60]	; 0x3c
 800ff2e:	e007      	b.n	800ff40 <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff34:	4a47      	ldr	r2, [pc, #284]	; (8010054 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800ff36:	641a      	str	r2, [r3, #64]	; 0x40
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff3c:	4a46      	ldr	r2, [pc, #280]	; (8010058 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800ff3e:	63da      	str	r2, [r3, #60]	; 0x3c
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff44:	4a45      	ldr	r2, [pc, #276]	; (801005c <HAL_SPI_TransmitReceive_DMA+0x314>)
 800ff46:	64da      	str	r2, [r3, #76]	; 0x4c
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	651a      	str	r2, [r3, #80]	; 0x50
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	330c      	adds	r3, #12
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff60:	461a      	mov	r2, r3
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	f7f8 fb5b 	bl	8008624 <HAL_DMA_Start_IT>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00c      	beq.n	800ff8e <HAL_SPI_TransmitReceive_DMA+0x246>
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff78:	f043 0210 	orr.w	r2, r3, #16
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	661a      	str	r2, [r3, #96]	; 0x60
 800ff80:	2301      	movs	r3, #1
 800ff82:	75fb      	strb	r3, [r7, #23]
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2201      	movs	r2, #1
 800ff88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800ff8c:	e054      	b.n	8010038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f042 0201 	orr.w	r2, r2, #1
 800ff9c:	605a      	str	r2, [r3, #4]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	641a      	str	r2, [r3, #64]	; 0x40
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffaa:	2200      	movs	r2, #0
 800ffac:	63da      	str	r2, [r3, #60]	; 0x3c
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	64da      	str	r2, [r3, #76]	; 0x4c
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffba:	2200      	movs	r2, #0
 800ffbc:	651a      	str	r2, [r3, #80]	; 0x50
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	330c      	adds	r3, #12
 800ffce:	461a      	mov	r2, r3
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	f7f8 fb25 	bl	8008624 <HAL_DMA_Start_IT>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00c      	beq.n	800fffa <HAL_SPI_TransmitReceive_DMA+0x2b2>
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ffe4:	f043 0210 	orr.w	r2, r3, #16
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	661a      	str	r2, [r3, #96]	; 0x60
 800ffec:	2301      	movs	r3, #1
 800ffee:	75fb      	strb	r3, [r7, #23]
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2201      	movs	r2, #1
 800fff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800fff8:	e01e      	b.n	8010038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010004:	2b40      	cmp	r3, #64	; 0x40
 8010006:	d007      	beq.n	8010018 <HAL_SPI_TransmitReceive_DMA+0x2d0>
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010016:	601a      	str	r2, [r3, #0]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	685a      	ldr	r2, [r3, #4]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f042 0220 	orr.w	r2, r2, #32
 8010026:	605a      	str	r2, [r3, #4]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	685a      	ldr	r2, [r3, #4]
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f042 0202 	orr.w	r2, r2, #2
 8010036:	605a      	str	r2, [r3, #4]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8010040:	7dfb      	ldrb	r3, [r7, #23]
 8010042:	4618      	mov	r0, r3
 8010044:	3718      	adds	r7, #24
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	080103e5 	.word	0x080103e5
 8010050:	080102cd 	.word	0x080102cd
 8010054:	08010401 	.word	0x08010401
 8010058:	08010353 	.word	0x08010353
 801005c:	0801041d 	.word	0x0801041d

08010060 <HAL_SPI_IRQHandler>:
 8010060:	b580      	push	{r7, lr}
 8010062:	b088      	sub	sp, #32
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	61fb      	str	r3, [r7, #28]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	689b      	ldr	r3, [r3, #8]
 8010076:	61bb      	str	r3, [r7, #24]
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	099b      	lsrs	r3, r3, #6
 801007c:	f003 0301 	and.w	r3, r3, #1
 8010080:	2b00      	cmp	r3, #0
 8010082:	d10f      	bne.n	80100a4 <HAL_SPI_IRQHandler+0x44>
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	f003 0301 	and.w	r3, r3, #1
 801008a:	2b00      	cmp	r3, #0
 801008c:	d00a      	beq.n	80100a4 <HAL_SPI_IRQHandler+0x44>
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	099b      	lsrs	r3, r3, #6
 8010092:	f003 0301 	and.w	r3, r3, #1
 8010096:	2b00      	cmp	r3, #0
 8010098:	d004      	beq.n	80100a4 <HAL_SPI_IRQHandler+0x44>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	4798      	blx	r3
 80100a2:	e0d8      	b.n	8010256 <HAL_SPI_IRQHandler+0x1f6>
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	085b      	lsrs	r3, r3, #1
 80100a8:	f003 0301 	and.w	r3, r3, #1
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00a      	beq.n	80100c6 <HAL_SPI_IRQHandler+0x66>
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	09db      	lsrs	r3, r3, #7
 80100b4:	f003 0301 	and.w	r3, r3, #1
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d004      	beq.n	80100c6 <HAL_SPI_IRQHandler+0x66>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	4798      	blx	r3
 80100c4:	e0c7      	b.n	8010256 <HAL_SPI_IRQHandler+0x1f6>
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	095b      	lsrs	r3, r3, #5
 80100ca:	f003 0301 	and.w	r3, r3, #1
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d10c      	bne.n	80100ec <HAL_SPI_IRQHandler+0x8c>
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	099b      	lsrs	r3, r3, #6
 80100d6:	f003 0301 	and.w	r3, r3, #1
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d106      	bne.n	80100ec <HAL_SPI_IRQHandler+0x8c>
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	0a1b      	lsrs	r3, r3, #8
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f000 80b5 	beq.w	8010256 <HAL_SPI_IRQHandler+0x1f6>
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	095b      	lsrs	r3, r3, #5
 80100f0:	f003 0301 	and.w	r3, r3, #1
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	f000 80ae 	beq.w	8010256 <HAL_SPI_IRQHandler+0x1f6>
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	099b      	lsrs	r3, r3, #6
 80100fe:	f003 0301 	and.w	r3, r3, #1
 8010102:	2b00      	cmp	r3, #0
 8010104:	d023      	beq.n	801014e <HAL_SPI_IRQHandler+0xee>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801010c:	b2db      	uxtb	r3, r3
 801010e:	2b03      	cmp	r3, #3
 8010110:	d011      	beq.n	8010136 <HAL_SPI_IRQHandler+0xd6>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010116:	f043 0204 	orr.w	r2, r3, #4
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	661a      	str	r2, [r3, #96]	; 0x60
 801011e:	2300      	movs	r3, #0
 8010120:	617b      	str	r3, [r7, #20]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	617b      	str	r3, [r7, #20]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	617b      	str	r3, [r7, #20]
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	e00b      	b.n	801014e <HAL_SPI_IRQHandler+0xee>
 8010136:	2300      	movs	r3, #0
 8010138:	613b      	str	r3, [r7, #16]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	613b      	str	r3, [r7, #16]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	613b      	str	r3, [r7, #16]
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	e083      	b.n	8010256 <HAL_SPI_IRQHandler+0x1f6>
 801014e:	69bb      	ldr	r3, [r7, #24]
 8010150:	095b      	lsrs	r3, r3, #5
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	d014      	beq.n	8010184 <HAL_SPI_IRQHandler+0x124>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801015e:	f043 0201 	orr.w	r2, r3, #1
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	661a      	str	r2, [r3, #96]	; 0x60
 8010166:	2300      	movs	r3, #0
 8010168:	60fb      	str	r3, [r7, #12]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	60fb      	str	r3, [r7, #12]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010180:	601a      	str	r2, [r3, #0]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	0a1b      	lsrs	r3, r3, #8
 8010188:	f003 0301 	and.w	r3, r3, #1
 801018c:	2b00      	cmp	r3, #0
 801018e:	d00c      	beq.n	80101aa <HAL_SPI_IRQHandler+0x14a>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010194:	f043 0208 	orr.w	r2, r3, #8
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	661a      	str	r2, [r3, #96]	; 0x60
 801019c:	2300      	movs	r3, #0
 801019e:	60bb      	str	r3, [r7, #8]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	60bb      	str	r3, [r7, #8]
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d050      	beq.n	8010254 <HAL_SPI_IRQHandler+0x1f4>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	685a      	ldr	r2, [r3, #4]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80101c0:	605a      	str	r2, [r3, #4]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2201      	movs	r2, #1
 80101c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	f003 0302 	and.w	r3, r3, #2
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d104      	bne.n	80101de <HAL_SPI_IRQHandler+0x17e>
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	f003 0301 	and.w	r3, r3, #1
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d034      	beq.n	8010248 <HAL_SPI_IRQHandler+0x1e8>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	685a      	ldr	r2, [r3, #4]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f022 0203 	bic.w	r2, r2, #3
 80101ec:	605a      	str	r2, [r3, #4]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d011      	beq.n	801021a <HAL_SPI_IRQHandler+0x1ba>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101fa:	4a18      	ldr	r2, [pc, #96]	; (801025c <HAL_SPI_IRQHandler+0x1fc>)
 80101fc:	651a      	str	r2, [r3, #80]	; 0x50
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010202:	4618      	mov	r0, r3
 8010204:	f7f8 fa6e 	bl	80086e4 <HAL_DMA_Abort_IT>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d005      	beq.n	801021a <HAL_SPI_IRQHandler+0x1ba>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010212:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	661a      	str	r2, [r3, #96]	; 0x60
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801021e:	2b00      	cmp	r3, #0
 8010220:	d016      	beq.n	8010250 <HAL_SPI_IRQHandler+0x1f0>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010226:	4a0d      	ldr	r2, [pc, #52]	; (801025c <HAL_SPI_IRQHandler+0x1fc>)
 8010228:	651a      	str	r2, [r3, #80]	; 0x50
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801022e:	4618      	mov	r0, r3
 8010230:	f7f8 fa58 	bl	80086e4 <HAL_DMA_Abort_IT>
 8010234:	4603      	mov	r3, r0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00a      	beq.n	8010250 <HAL_SPI_IRQHandler+0x1f0>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801023e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	661a      	str	r2, [r3, #96]	; 0x60
 8010246:	e003      	b.n	8010250 <HAL_SPI_IRQHandler+0x1f0>
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f000 f827 	bl	801029c <HAL_SPI_ErrorCallback>
 801024e:	e000      	b.n	8010252 <HAL_SPI_IRQHandler+0x1f2>
 8010250:	bf00      	nop
 8010252:	bf00      	nop
 8010254:	bf00      	nop
 8010256:	3720      	adds	r7, #32
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	0801045d 	.word	0x0801045d

08010260 <HAL_SPI_RxCpltCallback>:
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	bf00      	nop
 801026a:	370c      	adds	r7, #12
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr

08010274 <HAL_SPI_RxHalfCpltCallback>:
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	bf00      	nop
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <HAL_SPI_TxRxHalfCpltCallback>:
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	bf00      	nop
 8010292:	370c      	adds	r7, #12
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <HAL_SPI_ErrorCallback>:
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	bf00      	nop
 80102a6:	370c      	adds	r7, #12
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <HAL_SPI_GetState>:
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	4618      	mov	r0, r3
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <SPI_DMAReceiveCplt>:
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102d8:	60fb      	str	r3, [r7, #12]
 80102da:	f7f7 ffb5 	bl	8008248 <HAL_GetTick>
 80102de:	60b8      	str	r0, [r7, #8]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102ee:	d02a      	beq.n	8010346 <SPI_DMAReceiveCplt+0x7a>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	685a      	ldr	r2, [r3, #4]
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f022 0220 	bic.w	r2, r2, #32
 80102fe:	605a      	str	r2, [r3, #4]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	685a      	ldr	r2, [r3, #4]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	f022 0203 	bic.w	r2, r2, #3
 801030e:	605a      	str	r2, [r3, #4]
 8010310:	68ba      	ldr	r2, [r7, #8]
 8010312:	2164      	movs	r1, #100	; 0x64
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f000 fa98 	bl	801084a <SPI_EndRxTransaction>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d002      	beq.n	8010326 <SPI_DMAReceiveCplt+0x5a>
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2220      	movs	r2, #32
 8010324:	661a      	str	r2, [r3, #96]	; 0x60
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2201      	movs	r2, #1
 8010332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801033a:	2b00      	cmp	r3, #0
 801033c:	d003      	beq.n	8010346 <SPI_DMAReceiveCplt+0x7a>
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f7ff ffac 	bl	801029c <HAL_SPI_ErrorCallback>
 8010344:	e002      	b.n	801034c <SPI_DMAReceiveCplt+0x80>
 8010346:	68f8      	ldr	r0, [r7, #12]
 8010348:	f7ff ff8a 	bl	8010260 <HAL_SPI_RxCpltCallback>
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <SPI_DMATransmitReceiveCplt>:
 8010352:	b580      	push	{r7, lr}
 8010354:	b084      	sub	sp, #16
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801035e:	60fb      	str	r3, [r7, #12]
 8010360:	f7f7 ff72 	bl	8008248 <HAL_GetTick>
 8010364:	60b8      	str	r0, [r7, #8]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010374:	d030      	beq.n	80103d8 <SPI_DMATransmitReceiveCplt+0x86>
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	685a      	ldr	r2, [r3, #4]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f022 0220 	bic.w	r2, r2, #32
 8010384:	605a      	str	r2, [r3, #4]
 8010386:	68ba      	ldr	r2, [r7, #8]
 8010388:	2164      	movs	r1, #100	; 0x64
 801038a:	68f8      	ldr	r0, [r7, #12]
 801038c:	f000 fab5 	bl	80108fa <SPI_EndRxTxTransaction>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d005      	beq.n	80103a2 <SPI_DMATransmitReceiveCplt+0x50>
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801039a:	f043 0220 	orr.w	r2, r3, #32
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	661a      	str	r2, [r3, #96]	; 0x60
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	685a      	ldr	r2, [r3, #4]
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f022 0203 	bic.w	r2, r2, #3
 80103b0:	605a      	str	r2, [r3, #4]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2200      	movs	r2, #0
 80103bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2201      	movs	r2, #1
 80103c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d003      	beq.n	80103d8 <SPI_DMATransmitReceiveCplt+0x86>
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f7ff ff63 	bl	801029c <HAL_SPI_ErrorCallback>
 80103d6:	e002      	b.n	80103de <SPI_DMATransmitReceiveCplt+0x8c>
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f7f1 fa6d 	bl	80018b8 <HAL_SPI_TxRxCpltCallback>
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <SPI_DMAHalfReceiveCplt>:
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f0:	60fb      	str	r3, [r7, #12]
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	f7ff ff3e 	bl	8010274 <HAL_SPI_RxHalfCpltCallback>
 80103f8:	bf00      	nop
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <SPI_DMAHalfTransmitReceiveCplt>:
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801040c:	60fb      	str	r3, [r7, #12]
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f7ff ff3a 	bl	8010288 <HAL_SPI_TxRxHalfCpltCallback>
 8010414:	bf00      	nop
 8010416:	3710      	adds	r7, #16
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <SPI_DMAError>:
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010428:	60fb      	str	r3, [r7, #12]
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	685a      	ldr	r2, [r3, #4]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f022 0203 	bic.w	r2, r2, #3
 8010438:	605a      	str	r2, [r3, #4]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801043e:	f043 0210 	orr.w	r2, r3, #16
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	661a      	str	r2, [r3, #96]	; 0x60
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2201      	movs	r2, #1
 801044a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f7ff ff24 	bl	801029c <HAL_SPI_ErrorCallback>
 8010454:	bf00      	nop
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <SPI_DMAAbortOnError>:
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010468:	60fb      	str	r3, [r7, #12]
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2200      	movs	r2, #0
 801046e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2200      	movs	r2, #0
 8010476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010478:	68f8      	ldr	r0, [r7, #12]
 801047a:	f7ff ff0f 	bl	801029c <HAL_SPI_ErrorCallback>
 801047e:	bf00      	nop
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <SPI_2linesRxISR_8BIT>:
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010494:	b29b      	uxth	r3, r3
 8010496:	2b01      	cmp	r3, #1
 8010498:	d923      	bls.n	80104e2 <SPI_2linesRxISR_8BIT+0x5c>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	68da      	ldr	r2, [r3, #12]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104a4:	b292      	uxth	r2, r2
 80104a6:	801a      	strh	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ac:	1c9a      	adds	r2, r3, #2
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	641a      	str	r2, [r3, #64]	; 0x40
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	3b02      	subs	r3, #2
 80104bc:	b29a      	uxth	r2, r3
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d11f      	bne.n	8010510 <SPI_2linesRxISR_8BIT+0x8a>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	685a      	ldr	r2, [r3, #4]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80104de:	605a      	str	r2, [r3, #4]
 80104e0:	e016      	b.n	8010510 <SPI_2linesRxISR_8BIT+0x8a>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f103 020c 	add.w	r2, r3, #12
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ee:	7812      	ldrb	r2, [r2, #0]
 80104f0:	b2d2      	uxtb	r2, r2
 80104f2:	701a      	strb	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f8:	1c5a      	adds	r2, r3, #1
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	641a      	str	r2, [r3, #64]	; 0x40
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010504:	b29b      	uxth	r3, r3
 8010506:	3b01      	subs	r3, #1
 8010508:	b29a      	uxth	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010516:	b29b      	uxth	r3, r3
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10f      	bne.n	801053c <SPI_2linesRxISR_8BIT+0xb6>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	685a      	ldr	r2, [r3, #4]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801052a:	605a      	str	r2, [r3, #4]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010530:	b29b      	uxth	r3, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d102      	bne.n	801053c <SPI_2linesRxISR_8BIT+0xb6>
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 fa25 	bl	8010986 <SPI_CloseRxTx_ISR>
 801053c:	bf00      	nop
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <SPI_2linesTxISR_8BIT>:
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010550:	b29b      	uxth	r3, r3
 8010552:	2b01      	cmp	r3, #1
 8010554:	d912      	bls.n	801057c <SPI_2linesTxISR_8BIT+0x38>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801055a:	881a      	ldrh	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	60da      	str	r2, [r3, #12]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010566:	1c9a      	adds	r2, r3, #2
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	639a      	str	r2, [r3, #56]	; 0x38
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010570:	b29b      	uxth	r3, r3
 8010572:	3b02      	subs	r3, #2
 8010574:	b29a      	uxth	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	87da      	strh	r2, [r3, #62]	; 0x3e
 801057a:	e012      	b.n	80105a2 <SPI_2linesTxISR_8BIT+0x5e>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	330c      	adds	r3, #12
 8010586:	7812      	ldrb	r2, [r2, #0]
 8010588:	701a      	strb	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801058e:	1c5a      	adds	r2, r3, #1
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	639a      	str	r2, [r3, #56]	; 0x38
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010598:	b29b      	uxth	r3, r3
 801059a:	3b01      	subs	r3, #1
 801059c:	b29a      	uxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d110      	bne.n	80105ce <SPI_2linesTxISR_8BIT+0x8a>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	685a      	ldr	r2, [r3, #4]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80105ba:	605a      	str	r2, [r3, #4]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d102      	bne.n	80105ce <SPI_2linesTxISR_8BIT+0x8a>
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 f9dc 	bl	8010986 <SPI_CloseRxTx_ISR>
 80105ce:	bf00      	nop
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <SPI_2linesRxISR_16BIT>:
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b082      	sub	sp, #8
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	68da      	ldr	r2, [r3, #12]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105e8:	b292      	uxth	r2, r2
 80105ea:	801a      	strh	r2, [r3, #0]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105f0:	1c9a      	adds	r2, r3, #2
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	641a      	str	r2, [r3, #64]	; 0x40
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	3b01      	subs	r3, #1
 8010600:	b29a      	uxth	r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801060e:	b29b      	uxth	r3, r3
 8010610:	2b00      	cmp	r3, #0
 8010612:	d10f      	bne.n	8010634 <SPI_2linesRxISR_16BIT+0x5e>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	685a      	ldr	r2, [r3, #4]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010622:	605a      	str	r2, [r3, #4]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010628:	b29b      	uxth	r3, r3
 801062a:	2b00      	cmp	r3, #0
 801062c:	d102      	bne.n	8010634 <SPI_2linesRxISR_16BIT+0x5e>
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 f9a9 	bl	8010986 <SPI_CloseRxTx_ISR>
 8010634:	bf00      	nop
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <SPI_2linesTxISR_16BIT>:
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010648:	881a      	ldrh	r2, [r3, #0]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	60da      	str	r2, [r3, #12]
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010654:	1c9a      	adds	r2, r3, #2
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	639a      	str	r2, [r3, #56]	; 0x38
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801065e:	b29b      	uxth	r3, r3
 8010660:	3b01      	subs	r3, #1
 8010662:	b29a      	uxth	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801066c:	b29b      	uxth	r3, r3
 801066e:	2b00      	cmp	r3, #0
 8010670:	d110      	bne.n	8010694 <SPI_2linesTxISR_16BIT+0x58>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	685a      	ldr	r2, [r3, #4]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010680:	605a      	str	r2, [r3, #4]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010688:	b29b      	uxth	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d102      	bne.n	8010694 <SPI_2linesTxISR_16BIT+0x58>
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 f979 	bl	8010986 <SPI_CloseRxTx_ISR>
 8010694:	bf00      	nop
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <SPI_WaitFlagStateUntilTimeout>:
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	603b      	str	r3, [r7, #0]
 80106a8:	4613      	mov	r3, r2
 80106aa:	71fb      	strb	r3, [r7, #7]
 80106ac:	e04c      	b.n	8010748 <SPI_WaitFlagStateUntilTimeout+0xac>
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b4:	d048      	beq.n	8010748 <SPI_WaitFlagStateUntilTimeout+0xac>
 80106b6:	f7f7 fdc7 	bl	8008248 <HAL_GetTick>
 80106ba:	4602      	mov	r2, r0
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	1ad3      	subs	r3, r2, r3
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d902      	bls.n	80106cc <SPI_WaitFlagStateUntilTimeout+0x30>
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d13d      	bne.n	8010748 <SPI_WaitFlagStateUntilTimeout+0xac>
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	685a      	ldr	r2, [r3, #4]
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80106da:	605a      	str	r2, [r3, #4]
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80106e4:	d111      	bne.n	801070a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	689b      	ldr	r3, [r3, #8]
 80106ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106ee:	d004      	beq.n	80106fa <SPI_WaitFlagStateUntilTimeout+0x5e>
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106f8:	d107      	bne.n	801070a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010708:	601a      	str	r2, [r3, #0]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801070e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010712:	d10f      	bne.n	8010734 <SPI_WaitFlagStateUntilTimeout+0x98>
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010722:	601a      	str	r2, [r3, #0]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010732:	601a      	str	r2, [r3, #0]
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2201      	movs	r2, #1
 8010738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2200      	movs	r2, #0
 8010740:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8010744:	2303      	movs	r3, #3
 8010746:	e00f      	b.n	8010768 <SPI_WaitFlagStateUntilTimeout+0xcc>
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	689a      	ldr	r2, [r3, #8]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	4013      	ands	r3, r2
 8010752:	68ba      	ldr	r2, [r7, #8]
 8010754:	429a      	cmp	r2, r3
 8010756:	bf0c      	ite	eq
 8010758:	2301      	moveq	r3, #1
 801075a:	2300      	movne	r3, #0
 801075c:	b2db      	uxtb	r3, r3
 801075e:	461a      	mov	r2, r3
 8010760:	79fb      	ldrb	r3, [r7, #7]
 8010762:	429a      	cmp	r2, r3
 8010764:	d1a3      	bne.n	80106ae <SPI_WaitFlagStateUntilTimeout+0x12>
 8010766:	2300      	movs	r3, #0
 8010768:	4618      	mov	r0, r3
 801076a:	3710      	adds	r7, #16
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <SPI_WaitFifoStateUntilTimeout>:
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	603b      	str	r3, [r7, #0]
 801077e:	e057      	b.n	8010830 <SPI_WaitFifoStateUntilTimeout+0xc0>
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010786:	d106      	bne.n	8010796 <SPI_WaitFifoStateUntilTimeout+0x26>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d103      	bne.n	8010796 <SPI_WaitFifoStateUntilTimeout+0x26>
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	330c      	adds	r3, #12
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801079c:	d048      	beq.n	8010830 <SPI_WaitFifoStateUntilTimeout+0xc0>
 801079e:	f7f7 fd53 	bl	8008248 <HAL_GetTick>
 80107a2:	4602      	mov	r2, r0
 80107a4:	69bb      	ldr	r3, [r7, #24]
 80107a6:	1ad3      	subs	r3, r2, r3
 80107a8:	683a      	ldr	r2, [r7, #0]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d902      	bls.n	80107b4 <SPI_WaitFifoStateUntilTimeout+0x44>
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d13d      	bne.n	8010830 <SPI_WaitFifoStateUntilTimeout+0xc0>
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	685a      	ldr	r2, [r3, #4]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80107c2:	605a      	str	r2, [r3, #4]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80107cc:	d111      	bne.n	80107f2 <SPI_WaitFifoStateUntilTimeout+0x82>
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	689b      	ldr	r3, [r3, #8]
 80107d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80107d6:	d004      	beq.n	80107e2 <SPI_WaitFifoStateUntilTimeout+0x72>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	689b      	ldr	r3, [r3, #8]
 80107dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80107e0:	d107      	bne.n	80107f2 <SPI_WaitFifoStateUntilTimeout+0x82>
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80107f0:	601a      	str	r2, [r3, #0]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80107fa:	d10f      	bne.n	801081c <SPI_WaitFifoStateUntilTimeout+0xac>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801080a:	601a      	str	r2, [r3, #0]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801081a:	601a      	str	r2, [r3, #0]
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2201      	movs	r2, #1
 8010820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2200      	movs	r2, #0
 8010828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 801082c:	2303      	movs	r3, #3
 801082e:	e008      	b.n	8010842 <SPI_WaitFifoStateUntilTimeout+0xd2>
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	689a      	ldr	r2, [r3, #8]
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	4013      	ands	r3, r2
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	429a      	cmp	r2, r3
 801083e:	d19f      	bne.n	8010780 <SPI_WaitFifoStateUntilTimeout+0x10>
 8010840:	2300      	movs	r3, #0
 8010842:	4618      	mov	r0, r3
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <SPI_EndRxTransaction>:
 801084a:	b580      	push	{r7, lr}
 801084c:	b086      	sub	sp, #24
 801084e:	af02      	add	r7, sp, #8
 8010850:	60f8      	str	r0, [r7, #12]
 8010852:	60b9      	str	r1, [r7, #8]
 8010854:	607a      	str	r2, [r7, #4]
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801085e:	d111      	bne.n	8010884 <SPI_EndRxTransaction+0x3a>
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	689b      	ldr	r3, [r3, #8]
 8010864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010868:	d004      	beq.n	8010874 <SPI_EndRxTransaction+0x2a>
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	689b      	ldr	r3, [r3, #8]
 801086e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010872:	d107      	bne.n	8010884 <SPI_EndRxTransaction+0x3a>
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	9300      	str	r3, [sp, #0]
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	2200      	movs	r2, #0
 801088c:	2180      	movs	r1, #128	; 0x80
 801088e:	68f8      	ldr	r0, [r7, #12]
 8010890:	f7ff ff04 	bl	801069c <SPI_WaitFlagStateUntilTimeout>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d007      	beq.n	80108aa <SPI_EndRxTransaction+0x60>
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801089e:	f043 0220 	orr.w	r2, r3, #32
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	661a      	str	r2, [r3, #96]	; 0x60
 80108a6:	2303      	movs	r3, #3
 80108a8:	e023      	b.n	80108f2 <SPI_EndRxTransaction+0xa8>
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	685b      	ldr	r3, [r3, #4]
 80108ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80108b2:	d11d      	bne.n	80108f0 <SPI_EndRxTransaction+0xa6>
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108bc:	d004      	beq.n	80108c8 <SPI_EndRxTransaction+0x7e>
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80108c6:	d113      	bne.n	80108f0 <SPI_EndRxTransaction+0xa6>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f7ff ff4b 	bl	8010770 <SPI_WaitFifoStateUntilTimeout>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d007      	beq.n	80108f0 <SPI_EndRxTransaction+0xa6>
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80108e4:	f043 0220 	orr.w	r2, r3, #32
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	661a      	str	r2, [r3, #96]	; 0x60
 80108ec:	2303      	movs	r3, #3
 80108ee:	e000      	b.n	80108f2 <SPI_EndRxTransaction+0xa8>
 80108f0:	2300      	movs	r3, #0
 80108f2:	4618      	mov	r0, r3
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <SPI_EndRxTxTransaction>:
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b086      	sub	sp, #24
 80108fe:	af02      	add	r7, sp, #8
 8010900:	60f8      	str	r0, [r7, #12]
 8010902:	60b9      	str	r1, [r7, #8]
 8010904:	607a      	str	r2, [r7, #4]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	9300      	str	r3, [sp, #0]
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	2200      	movs	r2, #0
 801090e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010912:	68f8      	ldr	r0, [r7, #12]
 8010914:	f7ff ff2c 	bl	8010770 <SPI_WaitFifoStateUntilTimeout>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d007      	beq.n	801092e <SPI_EndRxTxTransaction+0x34>
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010922:	f043 0220 	orr.w	r2, r3, #32
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	661a      	str	r2, [r3, #96]	; 0x60
 801092a:	2303      	movs	r3, #3
 801092c:	e027      	b.n	801097e <SPI_EndRxTxTransaction+0x84>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	2200      	movs	r2, #0
 8010936:	2180      	movs	r1, #128	; 0x80
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	f7ff feaf 	bl	801069c <SPI_WaitFlagStateUntilTimeout>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d007      	beq.n	8010954 <SPI_EndRxTxTransaction+0x5a>
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010948:	f043 0220 	orr.w	r2, r3, #32
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	661a      	str	r2, [r3, #96]	; 0x60
 8010950:	2303      	movs	r3, #3
 8010952:	e014      	b.n	801097e <SPI_EndRxTxTransaction+0x84>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	2200      	movs	r2, #0
 801095c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f7ff ff05 	bl	8010770 <SPI_WaitFifoStateUntilTimeout>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d007      	beq.n	801097c <SPI_EndRxTxTransaction+0x82>
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010970:	f043 0220 	orr.w	r2, r3, #32
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	661a      	str	r2, [r3, #96]	; 0x60
 8010978:	2303      	movs	r3, #3
 801097a:	e000      	b.n	801097e <SPI_EndRxTxTransaction+0x84>
 801097c:	2300      	movs	r3, #0
 801097e:	4618      	mov	r0, r3
 8010980:	3710      	adds	r7, #16
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <SPI_CloseRxTx_ISR>:
 8010986:	b580      	push	{r7, lr}
 8010988:	b084      	sub	sp, #16
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
 801098e:	f7f7 fc5b 	bl	8008248 <HAL_GetTick>
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	685a      	ldr	r2, [r3, #4]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f022 0220 	bic.w	r2, r2, #32
 80109a2:	605a      	str	r2, [r3, #4]
 80109a4:	68fa      	ldr	r2, [r7, #12]
 80109a6:	2164      	movs	r1, #100	; 0x64
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff ffa6 	bl	80108fa <SPI_EndRxTxTransaction>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d005      	beq.n	80109c0 <SPI_CloseRxTx_ISR+0x3a>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109b8:	f043 0220 	orr.w	r2, r3, #32
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	661a      	str	r2, [r3, #96]	; 0x60
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d115      	bne.n	80109f4 <SPI_CloseRxTx_ISR+0x6e>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	2b04      	cmp	r3, #4
 80109d2:	d107      	bne.n	80109e4 <SPI_CloseRxTx_ISR+0x5e>
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2201      	movs	r2, #1
 80109d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f7ff fc3f 	bl	8010260 <HAL_SPI_RxCpltCallback>
 80109e2:	e00e      	b.n	8010a02 <SPI_CloseRxTx_ISR+0x7c>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2201      	movs	r2, #1
 80109e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7f0 ff63 	bl	80018b8 <HAL_SPI_TxRxCpltCallback>
 80109f2:	e006      	b.n	8010a02 <SPI_CloseRxTx_ISR+0x7c>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2201      	movs	r2, #1
 80109f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f7ff fc4d 	bl	801029c <HAL_SPI_ErrorCallback>
 8010a02:	bf00      	nop
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <HAL_TIM_Base_Init>:
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	b082      	sub	sp, #8
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d101      	bne.n	8010a1c <HAL_TIM_Base_Init+0x12>
 8010a18:	2301      	movs	r3, #1
 8010a1a:	e01d      	b.n	8010a58 <HAL_TIM_Base_Init+0x4e>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d106      	bne.n	8010a36 <HAL_TIM_Base_Init+0x2c>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f7f6 fe99 	bl	8007768 <HAL_TIM_Base_MspInit>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2202      	movs	r2, #2
 8010a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	3304      	adds	r3, #4
 8010a46:	4619      	mov	r1, r3
 8010a48:	4610      	mov	r0, r2
 8010a4a:	f000 f8ed 	bl	8010c28 <TIM_Base_SetConfig>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2201      	movs	r2, #1
 8010a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010a56:	2300      	movs	r3, #0
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <HAL_TIM_Base_Start>:
 8010a60:	b480      	push	{r7}
 8010a62:	b085      	sub	sp, #20
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2202      	movs	r2, #2
 8010a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	689a      	ldr	r2, [r3, #8]
 8010a76:	4b0e      	ldr	r3, [pc, #56]	; (8010ab0 <HAL_TIM_Base_Start+0x50>)
 8010a78:	4013      	ands	r3, r2
 8010a7a:	60fb      	str	r3, [r7, #12]
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2b06      	cmp	r3, #6
 8010a80:	d00b      	beq.n	8010a9a <HAL_TIM_Base_Start+0x3a>
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a88:	d007      	beq.n	8010a9a <HAL_TIM_Base_Start+0x3a>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f042 0201 	orr.w	r2, r2, #1
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3714      	adds	r7, #20
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr
 8010ab0:	00010007 	.word	0x00010007

08010ab4 <HAL_TIM_ConfigClockSource>:
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d101      	bne.n	8010acc <HAL_TIM_ConfigClockSource+0x18>
 8010ac8:	2302      	movs	r3, #2
 8010aca:	e0a6      	b.n	8010c1a <HAL_TIM_ConfigClockSource+0x166>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2202      	movs	r2, #2
 8010ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	60fb      	str	r3, [r7, #12]
 8010ae4:	68fa      	ldr	r2, [r7, #12]
 8010ae6:	4b4f      	ldr	r3, [pc, #316]	; (8010c24 <HAL_TIM_ConfigClockSource+0x170>)
 8010ae8:	4013      	ands	r3, r2
 8010aea:	60fb      	str	r3, [r7, #12]
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010af2:	60fb      	str	r3, [r7, #12]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	68fa      	ldr	r2, [r7, #12]
 8010afa:	609a      	str	r2, [r3, #8]
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b40      	cmp	r3, #64	; 0x40
 8010b02:	d067      	beq.n	8010bd4 <HAL_TIM_ConfigClockSource+0x120>
 8010b04:	2b40      	cmp	r3, #64	; 0x40
 8010b06:	d80b      	bhi.n	8010b20 <HAL_TIM_ConfigClockSource+0x6c>
 8010b08:	2b10      	cmp	r3, #16
 8010b0a:	d073      	beq.n	8010bf4 <HAL_TIM_ConfigClockSource+0x140>
 8010b0c:	2b10      	cmp	r3, #16
 8010b0e:	d802      	bhi.n	8010b16 <HAL_TIM_ConfigClockSource+0x62>
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d06f      	beq.n	8010bf4 <HAL_TIM_ConfigClockSource+0x140>
 8010b14:	e078      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010b16:	2b20      	cmp	r3, #32
 8010b18:	d06c      	beq.n	8010bf4 <HAL_TIM_ConfigClockSource+0x140>
 8010b1a:	2b30      	cmp	r3, #48	; 0x30
 8010b1c:	d06a      	beq.n	8010bf4 <HAL_TIM_ConfigClockSource+0x140>
 8010b1e:	e073      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010b20:	2b70      	cmp	r3, #112	; 0x70
 8010b22:	d00d      	beq.n	8010b40 <HAL_TIM_ConfigClockSource+0x8c>
 8010b24:	2b70      	cmp	r3, #112	; 0x70
 8010b26:	d804      	bhi.n	8010b32 <HAL_TIM_ConfigClockSource+0x7e>
 8010b28:	2b50      	cmp	r3, #80	; 0x50
 8010b2a:	d033      	beq.n	8010b94 <HAL_TIM_ConfigClockSource+0xe0>
 8010b2c:	2b60      	cmp	r3, #96	; 0x60
 8010b2e:	d041      	beq.n	8010bb4 <HAL_TIM_ConfigClockSource+0x100>
 8010b30:	e06a      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b36:	d066      	beq.n	8010c06 <HAL_TIM_ConfigClockSource+0x152>
 8010b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b3c:	d017      	beq.n	8010b6e <HAL_TIM_ConfigClockSource+0xba>
 8010b3e:	e063      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6818      	ldr	r0, [r3, #0]
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	6899      	ldr	r1, [r3, #8]
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	685a      	ldr	r2, [r3, #4]
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	f000 f984 	bl	8010e5c <TIM_ETR_SetConfig>
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	60fb      	str	r3, [r7, #12]
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010b62:	60fb      	str	r3, [r7, #12]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	609a      	str	r2, [r3, #8]
 8010b6c:	e04c      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6818      	ldr	r0, [r3, #0]
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	6899      	ldr	r1, [r3, #8]
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	685a      	ldr	r2, [r3, #4]
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	f000 f96d 	bl	8010e5c <TIM_ETR_SetConfig>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	689a      	ldr	r2, [r3, #8]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010b90:	609a      	str	r2, [r3, #8]
 8010b92:	e039      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6818      	ldr	r0, [r3, #0]
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	6859      	ldr	r1, [r3, #4]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	f000 f8e1 	bl	8010d68 <TIM_TI1_ConfigInputStage>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	2150      	movs	r1, #80	; 0x50
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 f93a 	bl	8010e26 <TIM_ITRx_SetConfig>
 8010bb2:	e029      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6818      	ldr	r0, [r3, #0]
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	6859      	ldr	r1, [r3, #4]
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	f000 f900 	bl	8010dc6 <TIM_TI2_ConfigInputStage>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2160      	movs	r1, #96	; 0x60
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f000 f92a 	bl	8010e26 <TIM_ITRx_SetConfig>
 8010bd2:	e019      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6818      	ldr	r0, [r3, #0]
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	6859      	ldr	r1, [r3, #4]
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	68db      	ldr	r3, [r3, #12]
 8010be0:	461a      	mov	r2, r3
 8010be2:	f000 f8c1 	bl	8010d68 <TIM_TI1_ConfigInputStage>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2140      	movs	r1, #64	; 0x40
 8010bec:	4618      	mov	r0, r3
 8010bee:	f000 f91a 	bl	8010e26 <TIM_ITRx_SetConfig>
 8010bf2:	e009      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	4610      	mov	r0, r2
 8010c00:	f000 f911 	bl	8010e26 <TIM_ITRx_SetConfig>
 8010c04:	e000      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x154>
 8010c06:	bf00      	nop
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010c18:	2300      	movs	r3, #0
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	fffeff88 	.word	0xfffeff88

08010c28 <TIM_Base_SetConfig>:
 8010c28:	b480      	push	{r7}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	60fb      	str	r3, [r7, #12]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	4a40      	ldr	r2, [pc, #256]	; (8010d3c <TIM_Base_SetConfig+0x114>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d013      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c46:	d00f      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	4a3d      	ldr	r2, [pc, #244]	; (8010d40 <TIM_Base_SetConfig+0x118>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d00b      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4a3c      	ldr	r2, [pc, #240]	; (8010d44 <TIM_Base_SetConfig+0x11c>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d007      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	4a3b      	ldr	r2, [pc, #236]	; (8010d48 <TIM_Base_SetConfig+0x120>)
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d003      	beq.n	8010c68 <TIM_Base_SetConfig+0x40>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	4a3a      	ldr	r2, [pc, #232]	; (8010d4c <TIM_Base_SetConfig+0x124>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d108      	bne.n	8010c7a <TIM_Base_SetConfig+0x52>
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c6e:	60fb      	str	r3, [r7, #12]
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	68fa      	ldr	r2, [r7, #12]
 8010c76:	4313      	orrs	r3, r2
 8010c78:	60fb      	str	r3, [r7, #12]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4a2f      	ldr	r2, [pc, #188]	; (8010d3c <TIM_Base_SetConfig+0x114>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d02b      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c88:	d027      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4a2c      	ldr	r2, [pc, #176]	; (8010d40 <TIM_Base_SetConfig+0x118>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d023      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	4a2b      	ldr	r2, [pc, #172]	; (8010d44 <TIM_Base_SetConfig+0x11c>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d01f      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	4a2a      	ldr	r2, [pc, #168]	; (8010d48 <TIM_Base_SetConfig+0x120>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d01b      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4a29      	ldr	r2, [pc, #164]	; (8010d4c <TIM_Base_SetConfig+0x124>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d017      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a28      	ldr	r2, [pc, #160]	; (8010d50 <TIM_Base_SetConfig+0x128>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d013      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4a27      	ldr	r2, [pc, #156]	; (8010d54 <TIM_Base_SetConfig+0x12c>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d00f      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4a26      	ldr	r2, [pc, #152]	; (8010d58 <TIM_Base_SetConfig+0x130>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d00b      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	4a25      	ldr	r2, [pc, #148]	; (8010d5c <TIM_Base_SetConfig+0x134>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d007      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4a24      	ldr	r2, [pc, #144]	; (8010d60 <TIM_Base_SetConfig+0x138>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d003      	beq.n	8010cda <TIM_Base_SetConfig+0xb2>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	4a23      	ldr	r2, [pc, #140]	; (8010d64 <TIM_Base_SetConfig+0x13c>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d108      	bne.n	8010cec <TIM_Base_SetConfig+0xc4>
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ce0:	60fb      	str	r3, [r7, #12]
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	68db      	ldr	r3, [r3, #12]
 8010ce6:	68fa      	ldr	r2, [r7, #12]
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	60fb      	str	r3, [r7, #12]
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	60fb      	str	r3, [r7, #12]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	68fa      	ldr	r2, [r7, #12]
 8010cfe:	601a      	str	r2, [r3, #0]
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	689a      	ldr	r2, [r3, #8]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	62da      	str	r2, [r3, #44]	; 0x2c
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	4a0a      	ldr	r2, [pc, #40]	; (8010d3c <TIM_Base_SetConfig+0x114>)
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d003      	beq.n	8010d20 <TIM_Base_SetConfig+0xf8>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	4a0c      	ldr	r2, [pc, #48]	; (8010d4c <TIM_Base_SetConfig+0x124>)
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d103      	bne.n	8010d28 <TIM_Base_SetConfig+0x100>
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	691a      	ldr	r2, [r3, #16]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	631a      	str	r2, [r3, #48]	; 0x30
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	615a      	str	r2, [r3, #20]
 8010d2e:	bf00      	nop
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	40010000 	.word	0x40010000
 8010d40:	40000400 	.word	0x40000400
 8010d44:	40000800 	.word	0x40000800
 8010d48:	40000c00 	.word	0x40000c00
 8010d4c:	40010400 	.word	0x40010400
 8010d50:	40014000 	.word	0x40014000
 8010d54:	40014400 	.word	0x40014400
 8010d58:	40014800 	.word	0x40014800
 8010d5c:	40001800 	.word	0x40001800
 8010d60:	40001c00 	.word	0x40001c00
 8010d64:	40002000 	.word	0x40002000

08010d68 <TIM_TI1_ConfigInputStage>:
 8010d68:	b480      	push	{r7}
 8010d6a:	b087      	sub	sp, #28
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	60b9      	str	r1, [r7, #8]
 8010d72:	607a      	str	r2, [r7, #4]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	6a1b      	ldr	r3, [r3, #32]
 8010d78:	617b      	str	r3, [r7, #20]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	6a1b      	ldr	r3, [r3, #32]
 8010d7e:	f023 0201 	bic.w	r2, r3, #1
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	621a      	str	r2, [r3, #32]
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	699b      	ldr	r3, [r3, #24]
 8010d8a:	613b      	str	r3, [r7, #16]
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010d92:	613b      	str	r3, [r7, #16]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	011b      	lsls	r3, r3, #4
 8010d98:	693a      	ldr	r2, [r7, #16]
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	613b      	str	r3, [r7, #16]
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	f023 030a 	bic.w	r3, r3, #10
 8010da4:	617b      	str	r3, [r7, #20]
 8010da6:	697a      	ldr	r2, [r7, #20]
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	4313      	orrs	r3, r2
 8010dac:	617b      	str	r3, [r7, #20]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	693a      	ldr	r2, [r7, #16]
 8010db2:	619a      	str	r2, [r3, #24]
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	697a      	ldr	r2, [r7, #20]
 8010db8:	621a      	str	r2, [r3, #32]
 8010dba:	bf00      	nop
 8010dbc:	371c      	adds	r7, #28
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr

08010dc6 <TIM_TI2_ConfigInputStage>:
 8010dc6:	b480      	push	{r7}
 8010dc8:	b087      	sub	sp, #28
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	60f8      	str	r0, [r7, #12]
 8010dce:	60b9      	str	r1, [r7, #8]
 8010dd0:	607a      	str	r2, [r7, #4]
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	6a1b      	ldr	r3, [r3, #32]
 8010dd6:	f023 0210 	bic.w	r2, r3, #16
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	621a      	str	r2, [r3, #32]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	699b      	ldr	r3, [r3, #24]
 8010de2:	617b      	str	r3, [r7, #20]
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6a1b      	ldr	r3, [r3, #32]
 8010de8:	613b      	str	r3, [r7, #16]
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010df0:	617b      	str	r3, [r7, #20]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	031b      	lsls	r3, r3, #12
 8010df6:	697a      	ldr	r2, [r7, #20]
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	617b      	str	r3, [r7, #20]
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010e02:	613b      	str	r3, [r7, #16]
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	011b      	lsls	r3, r3, #4
 8010e08:	693a      	ldr	r2, [r7, #16]
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	613b      	str	r3, [r7, #16]
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	697a      	ldr	r2, [r7, #20]
 8010e12:	619a      	str	r2, [r3, #24]
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	693a      	ldr	r2, [r7, #16]
 8010e18:	621a      	str	r2, [r3, #32]
 8010e1a:	bf00      	nop
 8010e1c:	371c      	adds	r7, #28
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e24:	4770      	bx	lr

08010e26 <TIM_ITRx_SetConfig>:
 8010e26:	b480      	push	{r7}
 8010e28:	b085      	sub	sp, #20
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	6039      	str	r1, [r7, #0]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	60fb      	str	r3, [r7, #12]
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e3c:	60fb      	str	r3, [r7, #12]
 8010e3e:	683a      	ldr	r2, [r7, #0]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	4313      	orrs	r3, r2
 8010e44:	f043 0307 	orr.w	r3, r3, #7
 8010e48:	60fb      	str	r3, [r7, #12]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	68fa      	ldr	r2, [r7, #12]
 8010e4e:	609a      	str	r2, [r3, #8]
 8010e50:	bf00      	nop
 8010e52:	3714      	adds	r7, #20
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <TIM_ETR_SetConfig>:
 8010e5c:	b480      	push	{r7}
 8010e5e:	b087      	sub	sp, #28
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
 8010e68:	603b      	str	r3, [r7, #0]
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	689b      	ldr	r3, [r3, #8]
 8010e6e:	617b      	str	r3, [r7, #20]
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010e76:	617b      	str	r3, [r7, #20]
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	021a      	lsls	r2, r3, #8
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	431a      	orrs	r2, r3
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	4313      	orrs	r3, r2
 8010e84:	697a      	ldr	r2, [r7, #20]
 8010e86:	4313      	orrs	r3, r2
 8010e88:	617b      	str	r3, [r7, #20]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	697a      	ldr	r2, [r7, #20]
 8010e8e:	609a      	str	r2, [r3, #8]
 8010e90:	bf00      	nop
 8010e92:	371c      	adds	r7, #28
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <HAL_TIMEx_MasterConfigSynchronization>:
 8010e9c:	b480      	push	{r7}
 8010e9e:	b085      	sub	sp, #20
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	6039      	str	r1, [r7, #0]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d101      	bne.n	8010eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010eb0:	2302      	movs	r3, #2
 8010eb2:	e06d      	b.n	8010f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2202      	movs	r2, #2
 8010ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	60fb      	str	r3, [r7, #12]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	689b      	ldr	r3, [r3, #8]
 8010ed2:	60bb      	str	r3, [r7, #8]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a30      	ldr	r2, [pc, #192]	; (8010f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d004      	beq.n	8010ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	4a2f      	ldr	r2, [pc, #188]	; (8010fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	d108      	bne.n	8010efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010eee:	60fb      	str	r3, [r7, #12]
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	60fb      	str	r3, [r7, #12]
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f00:	60fb      	str	r3, [r7, #12]
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	68fa      	ldr	r2, [r7, #12]
 8010f08:	4313      	orrs	r3, r2
 8010f0a:	60fb      	str	r3, [r7, #12]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	605a      	str	r2, [r3, #4]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	4a20      	ldr	r2, [pc, #128]	; (8010f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d022      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f26:	d01d      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a1d      	ldr	r2, [pc, #116]	; (8010fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d018      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4a1c      	ldr	r2, [pc, #112]	; (8010fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d013      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4a1a      	ldr	r2, [pc, #104]	; (8010fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d00e      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4a15      	ldr	r2, [pc, #84]	; (8010fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d009      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a16      	ldr	r2, [pc, #88]	; (8010fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d004      	beq.n	8010f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4a15      	ldr	r2, [pc, #84]	; (8010fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d10c      	bne.n	8010f7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f6a:	60bb      	str	r3, [r7, #8]
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	60bb      	str	r3, [r7, #8]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	68ba      	ldr	r2, [r7, #8]
 8010f7c:	609a      	str	r2, [r3, #8]
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010f8e:	2300      	movs	r3, #0
 8010f90:	4618      	mov	r0, r3
 8010f92:	3714      	adds	r7, #20
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	40010000 	.word	0x40010000
 8010fa0:	40010400 	.word	0x40010400
 8010fa4:	40000400 	.word	0x40000400
 8010fa8:	40000800 	.word	0x40000800
 8010fac:	40000c00 	.word	0x40000c00
 8010fb0:	40014000 	.word	0x40014000
 8010fb4:	40001800 	.word	0x40001800

08010fb8 <HAL_UART_Init>:
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <HAL_UART_Init+0x12>
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	e040      	b.n	801104c <HAL_UART_Init+0x94>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d106      	bne.n	8010fe0 <HAL_UART_Init+0x28>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f7f6 fc20 	bl	8007820 <HAL_UART_MspInit>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2224      	movs	r2, #36	; 0x24
 8010fe4:	675a      	str	r2, [r3, #116]	; 0x74
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f022 0201 	bic.w	r2, r2, #1
 8010ff4:	601a      	str	r2, [r3, #0]
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 fb2c 	bl	8011654 <UART_SetConfig>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d101      	bne.n	8011006 <HAL_UART_Init+0x4e>
 8011002:	2301      	movs	r3, #1
 8011004:	e022      	b.n	801104c <HAL_UART_Init+0x94>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801100a:	2b00      	cmp	r3, #0
 801100c:	d002      	beq.n	8011014 <HAL_UART_Init+0x5c>
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f000 fdca 	bl	8011ba8 <UART_AdvFeatureConfig>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011022:	605a      	str	r2, [r3, #4]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	689a      	ldr	r2, [r3, #8]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011032:	609a      	str	r2, [r3, #8]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f042 0201 	orr.w	r2, r2, #1
 8011042:	601a      	str	r2, [r3, #0]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 fe51 	bl	8011cec <UART_CheckIdleState>
 801104a:	4603      	mov	r3, r0
 801104c:	4618      	mov	r0, r3
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <HAL_UART_Transmit>:
 8011054:	b580      	push	{r7, lr}
 8011056:	b08a      	sub	sp, #40	; 0x28
 8011058:	af02      	add	r7, sp, #8
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	603b      	str	r3, [r7, #0]
 8011060:	4613      	mov	r3, r2
 8011062:	80fb      	strh	r3, [r7, #6]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011068:	2b20      	cmp	r3, #32
 801106a:	d17f      	bne.n	801116c <HAL_UART_Transmit+0x118>
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d002      	beq.n	8011078 <HAL_UART_Transmit+0x24>
 8011072:	88fb      	ldrh	r3, [r7, #6]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d101      	bne.n	801107c <HAL_UART_Transmit+0x28>
 8011078:	2301      	movs	r3, #1
 801107a:	e078      	b.n	801116e <HAL_UART_Transmit+0x11a>
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011082:	2b01      	cmp	r3, #1
 8011084:	d101      	bne.n	801108a <HAL_UART_Transmit+0x36>
 8011086:	2302      	movs	r3, #2
 8011088:	e071      	b.n	801116e <HAL_UART_Transmit+0x11a>
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2201      	movs	r2, #1
 801108e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2200      	movs	r2, #0
 8011096:	67da      	str	r2, [r3, #124]	; 0x7c
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2221      	movs	r2, #33	; 0x21
 801109c:	675a      	str	r2, [r3, #116]	; 0x74
 801109e:	f7f7 f8d3 	bl	8008248 <HAL_GetTick>
 80110a2:	6178      	str	r0, [r7, #20]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	88fa      	ldrh	r2, [r7, #6]
 80110a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	88fa      	ldrh	r2, [r7, #6]
 80110b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110bc:	d108      	bne.n	80110d0 <HAL_UART_Transmit+0x7c>
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	691b      	ldr	r3, [r3, #16]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d104      	bne.n	80110d0 <HAL_UART_Transmit+0x7c>
 80110c6:	2300      	movs	r3, #0
 80110c8:	61fb      	str	r3, [r7, #28]
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	61bb      	str	r3, [r7, #24]
 80110ce:	e003      	b.n	80110d8 <HAL_UART_Transmit+0x84>
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	61fb      	str	r3, [r7, #28]
 80110d4:	2300      	movs	r3, #0
 80110d6:	61bb      	str	r3, [r7, #24]
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2200      	movs	r2, #0
 80110dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80110e0:	e02c      	b.n	801113c <HAL_UART_Transmit+0xe8>
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	2200      	movs	r2, #0
 80110ea:	2180      	movs	r1, #128	; 0x80
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f000 fe42 	bl	8011d76 <UART_WaitOnFlagUntilTimeout>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d001      	beq.n	80110fc <HAL_UART_Transmit+0xa8>
 80110f8:	2303      	movs	r3, #3
 80110fa:	e038      	b.n	801116e <HAL_UART_Transmit+0x11a>
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d10b      	bne.n	801111a <HAL_UART_Transmit+0xc6>
 8011102:	69bb      	ldr	r3, [r7, #24]
 8011104:	881b      	ldrh	r3, [r3, #0]
 8011106:	461a      	mov	r2, r3
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011110:	629a      	str	r2, [r3, #40]	; 0x28
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	3302      	adds	r3, #2
 8011116:	61bb      	str	r3, [r7, #24]
 8011118:	e007      	b.n	801112a <HAL_UART_Transmit+0xd6>
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	781a      	ldrb	r2, [r3, #0]
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	629a      	str	r2, [r3, #40]	; 0x28
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	3301      	adds	r3, #1
 8011128:	61fb      	str	r3, [r7, #28]
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011130:	b29b      	uxth	r3, r3
 8011132:	3b01      	subs	r3, #1
 8011134:	b29a      	uxth	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011142:	b29b      	uxth	r3, r3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1cc      	bne.n	80110e2 <HAL_UART_Transmit+0x8e>
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	9300      	str	r3, [sp, #0]
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	2200      	movs	r2, #0
 8011150:	2140      	movs	r1, #64	; 0x40
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f000 fe0f 	bl	8011d76 <UART_WaitOnFlagUntilTimeout>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d001      	beq.n	8011162 <HAL_UART_Transmit+0x10e>
 801115e:	2303      	movs	r3, #3
 8011160:	e005      	b.n	801116e <HAL_UART_Transmit+0x11a>
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2220      	movs	r2, #32
 8011166:	675a      	str	r2, [r3, #116]	; 0x74
 8011168:	2300      	movs	r3, #0
 801116a:	e000      	b.n	801116e <HAL_UART_Transmit+0x11a>
 801116c:	2302      	movs	r3, #2
 801116e:	4618      	mov	r0, r3
 8011170:	3720      	adds	r7, #32
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
	...

08011178 <HAL_UART_Transmit_DMA>:
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	60b9      	str	r1, [r7, #8]
 8011182:	4613      	mov	r3, r2
 8011184:	80fb      	strh	r3, [r7, #6]
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118a:	2b20      	cmp	r3, #32
 801118c:	d164      	bne.n	8011258 <HAL_UART_Transmit_DMA+0xe0>
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d002      	beq.n	801119a <HAL_UART_Transmit_DMA+0x22>
 8011194:	88fb      	ldrh	r3, [r7, #6]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d101      	bne.n	801119e <HAL_UART_Transmit_DMA+0x26>
 801119a:	2301      	movs	r3, #1
 801119c:	e05d      	b.n	801125a <HAL_UART_Transmit_DMA+0xe2>
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d101      	bne.n	80111ac <HAL_UART_Transmit_DMA+0x34>
 80111a8:	2302      	movs	r3, #2
 80111aa:	e056      	b.n	801125a <HAL_UART_Transmit_DMA+0xe2>
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2201      	movs	r2, #1
 80111b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	68ba      	ldr	r2, [r7, #8]
 80111b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	88fa      	ldrh	r2, [r7, #6]
 80111be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	88fa      	ldrh	r2, [r7, #6]
 80111c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2200      	movs	r2, #0
 80111ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2221      	movs	r2, #33	; 0x21
 80111d4:	675a      	str	r2, [r3, #116]	; 0x74
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d02a      	beq.n	8011234 <HAL_UART_Transmit_DMA+0xbc>
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111e2:	4a20      	ldr	r2, [pc, #128]	; (8011264 <HAL_UART_Transmit_DMA+0xec>)
 80111e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111ea:	4a1f      	ldr	r2, [pc, #124]	; (8011268 <HAL_UART_Transmit_DMA+0xf0>)
 80111ec:	641a      	str	r2, [r3, #64]	; 0x40
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111f2:	4a1e      	ldr	r2, [pc, #120]	; (801126c <HAL_UART_Transmit_DMA+0xf4>)
 80111f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111fa:	2200      	movs	r2, #0
 80111fc:	651a      	str	r2, [r3, #80]	; 0x50
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011206:	4619      	mov	r1, r3
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	3328      	adds	r3, #40	; 0x28
 801120e:	461a      	mov	r2, r3
 8011210:	88fb      	ldrh	r3, [r7, #6]
 8011212:	f7f7 fa07 	bl	8008624 <HAL_DMA_Start_IT>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d00b      	beq.n	8011234 <HAL_UART_Transmit_DMA+0xbc>
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2210      	movs	r2, #16
 8011220:	67da      	str	r2, [r3, #124]	; 0x7c
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	2200      	movs	r2, #0
 8011226:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2220      	movs	r2, #32
 801122e:	675a      	str	r2, [r3, #116]	; 0x74
 8011230:	2301      	movs	r3, #1
 8011232:	e012      	b.n	801125a <HAL_UART_Transmit_DMA+0xe2>
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2240      	movs	r2, #64	; 0x40
 801123a:	621a      	str	r2, [r3, #32]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2200      	movs	r2, #0
 8011240:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	689a      	ldr	r2, [r3, #8]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011252:	609a      	str	r2, [r3, #8]
 8011254:	2300      	movs	r3, #0
 8011256:	e000      	b.n	801125a <HAL_UART_Transmit_DMA+0xe2>
 8011258:	2302      	movs	r3, #2
 801125a:	4618      	mov	r0, r3
 801125c:	3710      	adds	r7, #16
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	08011ed7 	.word	0x08011ed7
 8011268:	08011f27 	.word	0x08011f27
 801126c:	08011fc3 	.word	0x08011fc3

08011270 <HAL_UART_Receive_DMA>:
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	4613      	mov	r3, r2
 801127c:	80fb      	strh	r3, [r7, #6]
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011282:	2b20      	cmp	r3, #32
 8011284:	d16c      	bne.n	8011360 <HAL_UART_Receive_DMA+0xf0>
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d002      	beq.n	8011292 <HAL_UART_Receive_DMA+0x22>
 801128c:	88fb      	ldrh	r3, [r7, #6]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d101      	bne.n	8011296 <HAL_UART_Receive_DMA+0x26>
 8011292:	2301      	movs	r3, #1
 8011294:	e065      	b.n	8011362 <HAL_UART_Receive_DMA+0xf2>
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801129c:	2b01      	cmp	r3, #1
 801129e:	d101      	bne.n	80112a4 <HAL_UART_Receive_DMA+0x34>
 80112a0:	2302      	movs	r3, #2
 80112a2:	e05e      	b.n	8011362 <HAL_UART_Receive_DMA+0xf2>
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2201      	movs	r2, #1
 80112a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	655a      	str	r2, [r3, #84]	; 0x54
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	88fa      	ldrh	r2, [r7, #6]
 80112b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2200      	movs	r2, #0
 80112be:	67da      	str	r2, [r3, #124]	; 0x7c
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2222      	movs	r2, #34	; 0x22
 80112c4:	679a      	str	r2, [r3, #120]	; 0x78
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d02a      	beq.n	8011324 <HAL_UART_Receive_DMA+0xb4>
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112d2:	4a26      	ldr	r2, [pc, #152]	; (801136c <HAL_UART_Receive_DMA+0xfc>)
 80112d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112da:	4a25      	ldr	r2, [pc, #148]	; (8011370 <HAL_UART_Receive_DMA+0x100>)
 80112dc:	641a      	str	r2, [r3, #64]	; 0x40
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112e2:	4a24      	ldr	r2, [pc, #144]	; (8011374 <HAL_UART_Receive_DMA+0x104>)
 80112e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ea:	2200      	movs	r2, #0
 80112ec:	651a      	str	r2, [r3, #80]	; 0x50
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	3324      	adds	r3, #36	; 0x24
 80112f8:	4619      	mov	r1, r3
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112fe:	461a      	mov	r2, r3
 8011300:	88fb      	ldrh	r3, [r7, #6]
 8011302:	f7f7 f98f 	bl	8008624 <HAL_DMA_Start_IT>
 8011306:	4603      	mov	r3, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00b      	beq.n	8011324 <HAL_UART_Receive_DMA+0xb4>
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2210      	movs	r2, #16
 8011310:	67da      	str	r2, [r3, #124]	; 0x7c
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2220      	movs	r2, #32
 801131e:	675a      	str	r2, [r3, #116]	; 0x74
 8011320:	2301      	movs	r3, #1
 8011322:	e01e      	b.n	8011362 <HAL_UART_Receive_DMA+0xf2>
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2200      	movs	r2, #0
 8011328:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801133a:	601a      	str	r2, [r3, #0]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	689a      	ldr	r2, [r3, #8]
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f042 0201 	orr.w	r2, r2, #1
 801134a:	609a      	str	r2, [r3, #8]
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	689a      	ldr	r2, [r3, #8]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801135a:	609a      	str	r2, [r3, #8]
 801135c:	2300      	movs	r3, #0
 801135e:	e000      	b.n	8011362 <HAL_UART_Receive_DMA+0xf2>
 8011360:	2302      	movs	r3, #2
 8011362:	4618      	mov	r0, r3
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	08011f43 	.word	0x08011f43
 8011370:	08011fa7 	.word	0x08011fa7
 8011374:	08011fc3 	.word	0x08011fc3

08011378 <HAL_UART_IRQHandler>:
 8011378:	b580      	push	{r7, lr}
 801137a:	b088      	sub	sp, #32
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	69db      	ldr	r3, [r3, #28]
 8011386:	61fb      	str	r3, [r7, #28]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	61bb      	str	r3, [r7, #24]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	617b      	str	r3, [r7, #20]
 8011398:	69fa      	ldr	r2, [r7, #28]
 801139a:	f640 030f 	movw	r3, #2063	; 0x80f
 801139e:	4013      	ands	r3, r2
 80113a0:	613b      	str	r3, [r7, #16]
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d113      	bne.n	80113d0 <HAL_UART_IRQHandler+0x58>
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	f003 0320 	and.w	r3, r3, #32
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d00e      	beq.n	80113d0 <HAL_UART_IRQHandler+0x58>
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	f003 0320 	and.w	r3, r3, #32
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d009      	beq.n	80113d0 <HAL_UART_IRQHandler+0x58>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f000 8114 	beq.w	80115ee <HAL_UART_IRQHandler+0x276>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	4798      	blx	r3
 80113ce:	e10e      	b.n	80115ee <HAL_UART_IRQHandler+0x276>
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	f000 80d6 	beq.w	8011584 <HAL_UART_IRQHandler+0x20c>
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	f003 0301 	and.w	r3, r3, #1
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d105      	bne.n	80113ee <HAL_UART_IRQHandler+0x76>
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f000 80cb 	beq.w	8011584 <HAL_UART_IRQHandler+0x20c>
 80113ee:	69fb      	ldr	r3, [r7, #28]
 80113f0:	f003 0301 	and.w	r3, r3, #1
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d00e      	beq.n	8011416 <HAL_UART_IRQHandler+0x9e>
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d009      	beq.n	8011416 <HAL_UART_IRQHandler+0x9e>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2201      	movs	r2, #1
 8011408:	621a      	str	r2, [r3, #32]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801140e:	f043 0201 	orr.w	r2, r3, #1
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	67da      	str	r2, [r3, #124]	; 0x7c
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	f003 0302 	and.w	r3, r3, #2
 801141c:	2b00      	cmp	r3, #0
 801141e:	d00e      	beq.n	801143e <HAL_UART_IRQHandler+0xc6>
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	f003 0301 	and.w	r3, r3, #1
 8011426:	2b00      	cmp	r3, #0
 8011428:	d009      	beq.n	801143e <HAL_UART_IRQHandler+0xc6>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2202      	movs	r2, #2
 8011430:	621a      	str	r2, [r3, #32]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011436:	f043 0204 	orr.w	r2, r3, #4
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	67da      	str	r2, [r3, #124]	; 0x7c
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	f003 0304 	and.w	r3, r3, #4
 8011444:	2b00      	cmp	r3, #0
 8011446:	d00e      	beq.n	8011466 <HAL_UART_IRQHandler+0xee>
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	f003 0301 	and.w	r3, r3, #1
 801144e:	2b00      	cmp	r3, #0
 8011450:	d009      	beq.n	8011466 <HAL_UART_IRQHandler+0xee>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2204      	movs	r2, #4
 8011458:	621a      	str	r2, [r3, #32]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801145e:	f043 0202 	orr.w	r2, r3, #2
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	67da      	str	r2, [r3, #124]	; 0x7c
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	f003 0308 	and.w	r3, r3, #8
 801146c:	2b00      	cmp	r3, #0
 801146e:	d013      	beq.n	8011498 <HAL_UART_IRQHandler+0x120>
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	f003 0320 	and.w	r3, r3, #32
 8011476:	2b00      	cmp	r3, #0
 8011478:	d104      	bne.n	8011484 <HAL_UART_IRQHandler+0x10c>
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	f003 0301 	and.w	r3, r3, #1
 8011480:	2b00      	cmp	r3, #0
 8011482:	d009      	beq.n	8011498 <HAL_UART_IRQHandler+0x120>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2208      	movs	r2, #8
 801148a:	621a      	str	r2, [r3, #32]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011490:	f043 0208 	orr.w	r2, r3, #8
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	67da      	str	r2, [r3, #124]	; 0x7c
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00f      	beq.n	80114c2 <HAL_UART_IRQHandler+0x14a>
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00a      	beq.n	80114c2 <HAL_UART_IRQHandler+0x14a>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114b4:	621a      	str	r2, [r3, #32]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114ba:	f043 0220 	orr.w	r2, r3, #32
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	67da      	str	r2, [r3, #124]	; 0x7c
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	f000 8093 	beq.w	80115f2 <HAL_UART_IRQHandler+0x27a>
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	f003 0320 	and.w	r3, r3, #32
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00c      	beq.n	80114f0 <HAL_UART_IRQHandler+0x178>
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	f003 0320 	and.w	r3, r3, #32
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d007      	beq.n	80114f0 <HAL_UART_IRQHandler+0x178>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d003      	beq.n	80114f0 <HAL_UART_IRQHandler+0x178>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	4798      	blx	r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114f4:	60fb      	str	r3, [r7, #12]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011500:	2b40      	cmp	r3, #64	; 0x40
 8011502:	d004      	beq.n	801150e <HAL_UART_IRQHandler+0x196>
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801150a:	2b00      	cmp	r3, #0
 801150c:	d031      	beq.n	8011572 <HAL_UART_IRQHandler+0x1fa>
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f000 fcc1 	bl	8011e96 <UART_EndRxTransfer>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	689b      	ldr	r3, [r3, #8]
 801151a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801151e:	2b40      	cmp	r3, #64	; 0x40
 8011520:	d123      	bne.n	801156a <HAL_UART_IRQHandler+0x1f2>
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	689a      	ldr	r2, [r3, #8]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011530:	609a      	str	r2, [r3, #8]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011536:	2b00      	cmp	r3, #0
 8011538:	d013      	beq.n	8011562 <HAL_UART_IRQHandler+0x1ea>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801153e:	4a30      	ldr	r2, [pc, #192]	; (8011600 <HAL_UART_IRQHandler+0x288>)
 8011540:	651a      	str	r2, [r3, #80]	; 0x50
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011546:	4618      	mov	r0, r3
 8011548:	f7f7 f8cc 	bl	80086e4 <HAL_DMA_Abort_IT>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d016      	beq.n	8011580 <HAL_UART_IRQHandler+0x208>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801155c:	4610      	mov	r0, r2
 801155e:	4798      	blx	r3
 8011560:	e00e      	b.n	8011580 <HAL_UART_IRQHandler+0x208>
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 f862 	bl	801162c <HAL_UART_ErrorCallback>
 8011568:	e00a      	b.n	8011580 <HAL_UART_IRQHandler+0x208>
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f000 f85e 	bl	801162c <HAL_UART_ErrorCallback>
 8011570:	e006      	b.n	8011580 <HAL_UART_IRQHandler+0x208>
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 f85a 	bl	801162c <HAL_UART_ErrorCallback>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2200      	movs	r2, #0
 801157c:	67da      	str	r2, [r3, #124]	; 0x7c
 801157e:	e038      	b.n	80115f2 <HAL_UART_IRQHandler+0x27a>
 8011580:	bf00      	nop
 8011582:	e036      	b.n	80115f2 <HAL_UART_IRQHandler+0x27a>
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801158a:	2b00      	cmp	r3, #0
 801158c:	d00d      	beq.n	80115aa <HAL_UART_IRQHandler+0x232>
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011594:	2b00      	cmp	r3, #0
 8011596:	d008      	beq.n	80115aa <HAL_UART_IRQHandler+0x232>
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80115a0:	621a      	str	r2, [r3, #32]
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 f84c 	bl	8011640 <HAL_UARTEx_WakeupCallback>
 80115a8:	e026      	b.n	80115f8 <HAL_UART_IRQHandler+0x280>
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00d      	beq.n	80115d0 <HAL_UART_IRQHandler+0x258>
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d008      	beq.n	80115d0 <HAL_UART_IRQHandler+0x258>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d017      	beq.n	80115f6 <HAL_UART_IRQHandler+0x27e>
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	4798      	blx	r3
 80115ce:	e012      	b.n	80115f6 <HAL_UART_IRQHandler+0x27e>
 80115d0:	69fb      	ldr	r3, [r7, #28]
 80115d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00e      	beq.n	80115f8 <HAL_UART_IRQHandler+0x280>
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d009      	beq.n	80115f8 <HAL_UART_IRQHandler+0x280>
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f000 fd3e 	bl	8012066 <UART_EndTransmit_IT>
 80115ea:	bf00      	nop
 80115ec:	e004      	b.n	80115f8 <HAL_UART_IRQHandler+0x280>
 80115ee:	bf00      	nop
 80115f0:	e002      	b.n	80115f8 <HAL_UART_IRQHandler+0x280>
 80115f2:	bf00      	nop
 80115f4:	e000      	b.n	80115f8 <HAL_UART_IRQHandler+0x280>
 80115f6:	bf00      	nop
 80115f8:	3720      	adds	r7, #32
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	0801203b 	.word	0x0801203b

08011604 <HAL_UART_TxHalfCpltCallback>:
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	bf00      	nop
 801160e:	370c      	adds	r7, #12
 8011610:	46bd      	mov	sp, r7
 8011612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011616:	4770      	bx	lr

08011618 <HAL_UART_RxHalfCpltCallback>:
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	bf00      	nop
 8011622:	370c      	adds	r7, #12
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <HAL_UART_ErrorCallback>:
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	bf00      	nop
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <HAL_UARTEx_WakeupCallback>:
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	bf00      	nop
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <UART_SetConfig>:
 8011654:	b580      	push	{r7, lr}
 8011656:	b088      	sub	sp, #32
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	2300      	movs	r3, #0
 801165e:	61bb      	str	r3, [r7, #24]
 8011660:	2300      	movs	r3, #0
 8011662:	75fb      	strb	r3, [r7, #23]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	689a      	ldr	r2, [r3, #8]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	431a      	orrs	r2, r3
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	695b      	ldr	r3, [r3, #20]
 8011672:	431a      	orrs	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	69db      	ldr	r3, [r3, #28]
 8011678:	4313      	orrs	r3, r2
 801167a:	613b      	str	r3, [r7, #16]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	4bb1      	ldr	r3, [pc, #708]	; (8011948 <UART_SetConfig+0x2f4>)
 8011684:	4013      	ands	r3, r2
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	6812      	ldr	r2, [r2, #0]
 801168a:	6939      	ldr	r1, [r7, #16]
 801168c:	430b      	orrs	r3, r1
 801168e:	6013      	str	r3, [r2, #0]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	68da      	ldr	r2, [r3, #12]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	430a      	orrs	r2, r1
 80116a4:	605a      	str	r2, [r3, #4]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	699b      	ldr	r3, [r3, #24]
 80116aa:	613b      	str	r3, [r7, #16]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6a1b      	ldr	r3, [r3, #32]
 80116b0:	693a      	ldr	r2, [r7, #16]
 80116b2:	4313      	orrs	r3, r2
 80116b4:	613b      	str	r3, [r7, #16]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	693a      	ldr	r2, [r7, #16]
 80116c6:	430a      	orrs	r2, r1
 80116c8:	609a      	str	r2, [r3, #8]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	4a9f      	ldr	r2, [pc, #636]	; (801194c <UART_SetConfig+0x2f8>)
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d121      	bne.n	8011718 <UART_SetConfig+0xc4>
 80116d4:	4b9e      	ldr	r3, [pc, #632]	; (8011950 <UART_SetConfig+0x2fc>)
 80116d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116da:	f003 0303 	and.w	r3, r3, #3
 80116de:	2b03      	cmp	r3, #3
 80116e0:	d816      	bhi.n	8011710 <UART_SetConfig+0xbc>
 80116e2:	a201      	add	r2, pc, #4	; (adr r2, 80116e8 <UART_SetConfig+0x94>)
 80116e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e8:	080116f9 	.word	0x080116f9
 80116ec:	08011705 	.word	0x08011705
 80116f0:	080116ff 	.word	0x080116ff
 80116f4:	0801170b 	.word	0x0801170b
 80116f8:	2301      	movs	r3, #1
 80116fa:	77fb      	strb	r3, [r7, #31]
 80116fc:	e151      	b.n	80119a2 <UART_SetConfig+0x34e>
 80116fe:	2302      	movs	r3, #2
 8011700:	77fb      	strb	r3, [r7, #31]
 8011702:	e14e      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011704:	2304      	movs	r3, #4
 8011706:	77fb      	strb	r3, [r7, #31]
 8011708:	e14b      	b.n	80119a2 <UART_SetConfig+0x34e>
 801170a:	2308      	movs	r3, #8
 801170c:	77fb      	strb	r3, [r7, #31]
 801170e:	e148      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011710:	2310      	movs	r3, #16
 8011712:	77fb      	strb	r3, [r7, #31]
 8011714:	bf00      	nop
 8011716:	e144      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4a8d      	ldr	r2, [pc, #564]	; (8011954 <UART_SetConfig+0x300>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d134      	bne.n	801178c <UART_SetConfig+0x138>
 8011722:	4b8b      	ldr	r3, [pc, #556]	; (8011950 <UART_SetConfig+0x2fc>)
 8011724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011728:	f003 030c 	and.w	r3, r3, #12
 801172c:	2b0c      	cmp	r3, #12
 801172e:	d829      	bhi.n	8011784 <UART_SetConfig+0x130>
 8011730:	a201      	add	r2, pc, #4	; (adr r2, 8011738 <UART_SetConfig+0xe4>)
 8011732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011736:	bf00      	nop
 8011738:	0801176d 	.word	0x0801176d
 801173c:	08011785 	.word	0x08011785
 8011740:	08011785 	.word	0x08011785
 8011744:	08011785 	.word	0x08011785
 8011748:	08011779 	.word	0x08011779
 801174c:	08011785 	.word	0x08011785
 8011750:	08011785 	.word	0x08011785
 8011754:	08011785 	.word	0x08011785
 8011758:	08011773 	.word	0x08011773
 801175c:	08011785 	.word	0x08011785
 8011760:	08011785 	.word	0x08011785
 8011764:	08011785 	.word	0x08011785
 8011768:	0801177f 	.word	0x0801177f
 801176c:	2300      	movs	r3, #0
 801176e:	77fb      	strb	r3, [r7, #31]
 8011770:	e117      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011772:	2302      	movs	r3, #2
 8011774:	77fb      	strb	r3, [r7, #31]
 8011776:	e114      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011778:	2304      	movs	r3, #4
 801177a:	77fb      	strb	r3, [r7, #31]
 801177c:	e111      	b.n	80119a2 <UART_SetConfig+0x34e>
 801177e:	2308      	movs	r3, #8
 8011780:	77fb      	strb	r3, [r7, #31]
 8011782:	e10e      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011784:	2310      	movs	r3, #16
 8011786:	77fb      	strb	r3, [r7, #31]
 8011788:	bf00      	nop
 801178a:	e10a      	b.n	80119a2 <UART_SetConfig+0x34e>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4a71      	ldr	r2, [pc, #452]	; (8011958 <UART_SetConfig+0x304>)
 8011792:	4293      	cmp	r3, r2
 8011794:	d120      	bne.n	80117d8 <UART_SetConfig+0x184>
 8011796:	4b6e      	ldr	r3, [pc, #440]	; (8011950 <UART_SetConfig+0x2fc>)
 8011798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801179c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80117a0:	2b10      	cmp	r3, #16
 80117a2:	d00f      	beq.n	80117c4 <UART_SetConfig+0x170>
 80117a4:	2b10      	cmp	r3, #16
 80117a6:	d802      	bhi.n	80117ae <UART_SetConfig+0x15a>
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d005      	beq.n	80117b8 <UART_SetConfig+0x164>
 80117ac:	e010      	b.n	80117d0 <UART_SetConfig+0x17c>
 80117ae:	2b20      	cmp	r3, #32
 80117b0:	d005      	beq.n	80117be <UART_SetConfig+0x16a>
 80117b2:	2b30      	cmp	r3, #48	; 0x30
 80117b4:	d009      	beq.n	80117ca <UART_SetConfig+0x176>
 80117b6:	e00b      	b.n	80117d0 <UART_SetConfig+0x17c>
 80117b8:	2300      	movs	r3, #0
 80117ba:	77fb      	strb	r3, [r7, #31]
 80117bc:	e0f1      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117be:	2302      	movs	r3, #2
 80117c0:	77fb      	strb	r3, [r7, #31]
 80117c2:	e0ee      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117c4:	2304      	movs	r3, #4
 80117c6:	77fb      	strb	r3, [r7, #31]
 80117c8:	e0eb      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117ca:	2308      	movs	r3, #8
 80117cc:	77fb      	strb	r3, [r7, #31]
 80117ce:	e0e8      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117d0:	2310      	movs	r3, #16
 80117d2:	77fb      	strb	r3, [r7, #31]
 80117d4:	bf00      	nop
 80117d6:	e0e4      	b.n	80119a2 <UART_SetConfig+0x34e>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	4a5f      	ldr	r2, [pc, #380]	; (801195c <UART_SetConfig+0x308>)
 80117de:	4293      	cmp	r3, r2
 80117e0:	d120      	bne.n	8011824 <UART_SetConfig+0x1d0>
 80117e2:	4b5b      	ldr	r3, [pc, #364]	; (8011950 <UART_SetConfig+0x2fc>)
 80117e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80117ec:	2b40      	cmp	r3, #64	; 0x40
 80117ee:	d00f      	beq.n	8011810 <UART_SetConfig+0x1bc>
 80117f0:	2b40      	cmp	r3, #64	; 0x40
 80117f2:	d802      	bhi.n	80117fa <UART_SetConfig+0x1a6>
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d005      	beq.n	8011804 <UART_SetConfig+0x1b0>
 80117f8:	e010      	b.n	801181c <UART_SetConfig+0x1c8>
 80117fa:	2b80      	cmp	r3, #128	; 0x80
 80117fc:	d005      	beq.n	801180a <UART_SetConfig+0x1b6>
 80117fe:	2bc0      	cmp	r3, #192	; 0xc0
 8011800:	d009      	beq.n	8011816 <UART_SetConfig+0x1c2>
 8011802:	e00b      	b.n	801181c <UART_SetConfig+0x1c8>
 8011804:	2300      	movs	r3, #0
 8011806:	77fb      	strb	r3, [r7, #31]
 8011808:	e0cb      	b.n	80119a2 <UART_SetConfig+0x34e>
 801180a:	2302      	movs	r3, #2
 801180c:	77fb      	strb	r3, [r7, #31]
 801180e:	e0c8      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011810:	2304      	movs	r3, #4
 8011812:	77fb      	strb	r3, [r7, #31]
 8011814:	e0c5      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011816:	2308      	movs	r3, #8
 8011818:	77fb      	strb	r3, [r7, #31]
 801181a:	e0c2      	b.n	80119a2 <UART_SetConfig+0x34e>
 801181c:	2310      	movs	r3, #16
 801181e:	77fb      	strb	r3, [r7, #31]
 8011820:	bf00      	nop
 8011822:	e0be      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4a4d      	ldr	r2, [pc, #308]	; (8011960 <UART_SetConfig+0x30c>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d124      	bne.n	8011878 <UART_SetConfig+0x224>
 801182e:	4b48      	ldr	r3, [pc, #288]	; (8011950 <UART_SetConfig+0x2fc>)
 8011830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801183c:	d012      	beq.n	8011864 <UART_SetConfig+0x210>
 801183e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011842:	d802      	bhi.n	801184a <UART_SetConfig+0x1f6>
 8011844:	2b00      	cmp	r3, #0
 8011846:	d007      	beq.n	8011858 <UART_SetConfig+0x204>
 8011848:	e012      	b.n	8011870 <UART_SetConfig+0x21c>
 801184a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801184e:	d006      	beq.n	801185e <UART_SetConfig+0x20a>
 8011850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011854:	d009      	beq.n	801186a <UART_SetConfig+0x216>
 8011856:	e00b      	b.n	8011870 <UART_SetConfig+0x21c>
 8011858:	2300      	movs	r3, #0
 801185a:	77fb      	strb	r3, [r7, #31]
 801185c:	e0a1      	b.n	80119a2 <UART_SetConfig+0x34e>
 801185e:	2302      	movs	r3, #2
 8011860:	77fb      	strb	r3, [r7, #31]
 8011862:	e09e      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011864:	2304      	movs	r3, #4
 8011866:	77fb      	strb	r3, [r7, #31]
 8011868:	e09b      	b.n	80119a2 <UART_SetConfig+0x34e>
 801186a:	2308      	movs	r3, #8
 801186c:	77fb      	strb	r3, [r7, #31]
 801186e:	e098      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011870:	2310      	movs	r3, #16
 8011872:	77fb      	strb	r3, [r7, #31]
 8011874:	bf00      	nop
 8011876:	e094      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	4a39      	ldr	r2, [pc, #228]	; (8011964 <UART_SetConfig+0x310>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d124      	bne.n	80118cc <UART_SetConfig+0x278>
 8011882:	4b33      	ldr	r3, [pc, #204]	; (8011950 <UART_SetConfig+0x2fc>)
 8011884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801188c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011890:	d012      	beq.n	80118b8 <UART_SetConfig+0x264>
 8011892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011896:	d802      	bhi.n	801189e <UART_SetConfig+0x24a>
 8011898:	2b00      	cmp	r3, #0
 801189a:	d007      	beq.n	80118ac <UART_SetConfig+0x258>
 801189c:	e012      	b.n	80118c4 <UART_SetConfig+0x270>
 801189e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80118a2:	d006      	beq.n	80118b2 <UART_SetConfig+0x25e>
 80118a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80118a8:	d009      	beq.n	80118be <UART_SetConfig+0x26a>
 80118aa:	e00b      	b.n	80118c4 <UART_SetConfig+0x270>
 80118ac:	2301      	movs	r3, #1
 80118ae:	77fb      	strb	r3, [r7, #31]
 80118b0:	e077      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118b2:	2302      	movs	r3, #2
 80118b4:	77fb      	strb	r3, [r7, #31]
 80118b6:	e074      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118b8:	2304      	movs	r3, #4
 80118ba:	77fb      	strb	r3, [r7, #31]
 80118bc:	e071      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118be:	2308      	movs	r3, #8
 80118c0:	77fb      	strb	r3, [r7, #31]
 80118c2:	e06e      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118c4:	2310      	movs	r3, #16
 80118c6:	77fb      	strb	r3, [r7, #31]
 80118c8:	bf00      	nop
 80118ca:	e06a      	b.n	80119a2 <UART_SetConfig+0x34e>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	4a25      	ldr	r2, [pc, #148]	; (8011968 <UART_SetConfig+0x314>)
 80118d2:	4293      	cmp	r3, r2
 80118d4:	d124      	bne.n	8011920 <UART_SetConfig+0x2cc>
 80118d6:	4b1e      	ldr	r3, [pc, #120]	; (8011950 <UART_SetConfig+0x2fc>)
 80118d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118dc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80118e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118e4:	d012      	beq.n	801190c <UART_SetConfig+0x2b8>
 80118e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118ea:	d802      	bhi.n	80118f2 <UART_SetConfig+0x29e>
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d007      	beq.n	8011900 <UART_SetConfig+0x2ac>
 80118f0:	e012      	b.n	8011918 <UART_SetConfig+0x2c4>
 80118f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80118f6:	d006      	beq.n	8011906 <UART_SetConfig+0x2b2>
 80118f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80118fc:	d009      	beq.n	8011912 <UART_SetConfig+0x2be>
 80118fe:	e00b      	b.n	8011918 <UART_SetConfig+0x2c4>
 8011900:	2300      	movs	r3, #0
 8011902:	77fb      	strb	r3, [r7, #31]
 8011904:	e04d      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011906:	2302      	movs	r3, #2
 8011908:	77fb      	strb	r3, [r7, #31]
 801190a:	e04a      	b.n	80119a2 <UART_SetConfig+0x34e>
 801190c:	2304      	movs	r3, #4
 801190e:	77fb      	strb	r3, [r7, #31]
 8011910:	e047      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011912:	2308      	movs	r3, #8
 8011914:	77fb      	strb	r3, [r7, #31]
 8011916:	e044      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011918:	2310      	movs	r3, #16
 801191a:	77fb      	strb	r3, [r7, #31]
 801191c:	bf00      	nop
 801191e:	e040      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	4a11      	ldr	r2, [pc, #68]	; (801196c <UART_SetConfig+0x318>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d139      	bne.n	801199e <UART_SetConfig+0x34a>
 801192a:	4b09      	ldr	r3, [pc, #36]	; (8011950 <UART_SetConfig+0x2fc>)
 801192c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011938:	d027      	beq.n	801198a <UART_SetConfig+0x336>
 801193a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801193e:	d817      	bhi.n	8011970 <UART_SetConfig+0x31c>
 8011940:	2b00      	cmp	r3, #0
 8011942:	d01c      	beq.n	801197e <UART_SetConfig+0x32a>
 8011944:	e027      	b.n	8011996 <UART_SetConfig+0x342>
 8011946:	bf00      	nop
 8011948:	efff69f3 	.word	0xefff69f3
 801194c:	40011000 	.word	0x40011000
 8011950:	40023800 	.word	0x40023800
 8011954:	40004400 	.word	0x40004400
 8011958:	40004800 	.word	0x40004800
 801195c:	40004c00 	.word	0x40004c00
 8011960:	40005000 	.word	0x40005000
 8011964:	40011400 	.word	0x40011400
 8011968:	40007800 	.word	0x40007800
 801196c:	40007c00 	.word	0x40007c00
 8011970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011974:	d006      	beq.n	8011984 <UART_SetConfig+0x330>
 8011976:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801197a:	d009      	beq.n	8011990 <UART_SetConfig+0x33c>
 801197c:	e00b      	b.n	8011996 <UART_SetConfig+0x342>
 801197e:	2300      	movs	r3, #0
 8011980:	77fb      	strb	r3, [r7, #31]
 8011982:	e00e      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011984:	2302      	movs	r3, #2
 8011986:	77fb      	strb	r3, [r7, #31]
 8011988:	e00b      	b.n	80119a2 <UART_SetConfig+0x34e>
 801198a:	2304      	movs	r3, #4
 801198c:	77fb      	strb	r3, [r7, #31]
 801198e:	e008      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011990:	2308      	movs	r3, #8
 8011992:	77fb      	strb	r3, [r7, #31]
 8011994:	e005      	b.n	80119a2 <UART_SetConfig+0x34e>
 8011996:	2310      	movs	r3, #16
 8011998:	77fb      	strb	r3, [r7, #31]
 801199a:	bf00      	nop
 801199c:	e001      	b.n	80119a2 <UART_SetConfig+0x34e>
 801199e:	2310      	movs	r3, #16
 80119a0:	77fb      	strb	r3, [r7, #31]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	69db      	ldr	r3, [r3, #28]
 80119a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119aa:	d17f      	bne.n	8011aac <UART_SetConfig+0x458>
 80119ac:	7ffb      	ldrb	r3, [r7, #31]
 80119ae:	2b08      	cmp	r3, #8
 80119b0:	d85c      	bhi.n	8011a6c <UART_SetConfig+0x418>
 80119b2:	a201      	add	r2, pc, #4	; (adr r2, 80119b8 <UART_SetConfig+0x364>)
 80119b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b8:	080119dd 	.word	0x080119dd
 80119bc:	080119fd 	.word	0x080119fd
 80119c0:	08011a1d 	.word	0x08011a1d
 80119c4:	08011a6d 	.word	0x08011a6d
 80119c8:	08011a35 	.word	0x08011a35
 80119cc:	08011a6d 	.word	0x08011a6d
 80119d0:	08011a6d 	.word	0x08011a6d
 80119d4:	08011a6d 	.word	0x08011a6d
 80119d8:	08011a55 	.word	0x08011a55
 80119dc:	f7fb f95c 	bl	800cc98 <HAL_RCC_GetPCLK1Freq>
 80119e0:	60f8      	str	r0, [r7, #12]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	005a      	lsls	r2, r3, #1
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	085b      	lsrs	r3, r3, #1
 80119ec:	441a      	add	r2, r3
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	61bb      	str	r3, [r7, #24]
 80119fa:	e03a      	b.n	8011a72 <UART_SetConfig+0x41e>
 80119fc:	f7fb f960 	bl	800ccc0 <HAL_RCC_GetPCLK2Freq>
 8011a00:	60f8      	str	r0, [r7, #12]
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	005a      	lsls	r2, r3, #1
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	085b      	lsrs	r3, r3, #1
 8011a0c:	441a      	add	r2, r3
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	61bb      	str	r3, [r7, #24]
 8011a1a:	e02a      	b.n	8011a72 <UART_SetConfig+0x41e>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	085a      	lsrs	r2, r3, #1
 8011a22:	4b5f      	ldr	r3, [pc, #380]	; (8011ba0 <UART_SetConfig+0x54c>)
 8011a24:	4413      	add	r3, r2
 8011a26:	687a      	ldr	r2, [r7, #4]
 8011a28:	6852      	ldr	r2, [r2, #4]
 8011a2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	61bb      	str	r3, [r7, #24]
 8011a32:	e01e      	b.n	8011a72 <UART_SetConfig+0x41e>
 8011a34:	f7fb f872 	bl	800cb1c <HAL_RCC_GetSysClockFreq>
 8011a38:	60f8      	str	r0, [r7, #12]
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	005a      	lsls	r2, r3, #1
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	085b      	lsrs	r3, r3, #1
 8011a44:	441a      	add	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	61bb      	str	r3, [r7, #24]
 8011a52:	e00e      	b.n	8011a72 <UART_SetConfig+0x41e>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	085b      	lsrs	r3, r3, #1
 8011a5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	61bb      	str	r3, [r7, #24]
 8011a6a:	e002      	b.n	8011a72 <UART_SetConfig+0x41e>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	75fb      	strb	r3, [r7, #23]
 8011a70:	bf00      	nop
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	2b0f      	cmp	r3, #15
 8011a76:	d916      	bls.n	8011aa6 <UART_SetConfig+0x452>
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a7e:	d212      	bcs.n	8011aa6 <UART_SetConfig+0x452>
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	f023 030f 	bic.w	r3, r3, #15
 8011a88:	817b      	strh	r3, [r7, #10]
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	085b      	lsrs	r3, r3, #1
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	f003 0307 	and.w	r3, r3, #7
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	897b      	ldrh	r3, [r7, #10]
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	817b      	strh	r3, [r7, #10]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	897a      	ldrh	r2, [r7, #10]
 8011aa2:	60da      	str	r2, [r3, #12]
 8011aa4:	e070      	b.n	8011b88 <UART_SetConfig+0x534>
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	75fb      	strb	r3, [r7, #23]
 8011aaa:	e06d      	b.n	8011b88 <UART_SetConfig+0x534>
 8011aac:	7ffb      	ldrb	r3, [r7, #31]
 8011aae:	2b08      	cmp	r3, #8
 8011ab0:	d859      	bhi.n	8011b66 <UART_SetConfig+0x512>
 8011ab2:	a201      	add	r2, pc, #4	; (adr r2, 8011ab8 <UART_SetConfig+0x464>)
 8011ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ab8:	08011add 	.word	0x08011add
 8011abc:	08011afb 	.word	0x08011afb
 8011ac0:	08011b19 	.word	0x08011b19
 8011ac4:	08011b67 	.word	0x08011b67
 8011ac8:	08011b31 	.word	0x08011b31
 8011acc:	08011b67 	.word	0x08011b67
 8011ad0:	08011b67 	.word	0x08011b67
 8011ad4:	08011b67 	.word	0x08011b67
 8011ad8:	08011b4f 	.word	0x08011b4f
 8011adc:	f7fb f8dc 	bl	800cc98 <HAL_RCC_GetPCLK1Freq>
 8011ae0:	60f8      	str	r0, [r7, #12]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	085a      	lsrs	r2, r3, #1
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	441a      	add	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	61bb      	str	r3, [r7, #24]
 8011af8:	e038      	b.n	8011b6c <UART_SetConfig+0x518>
 8011afa:	f7fb f8e1 	bl	800ccc0 <HAL_RCC_GetPCLK2Freq>
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	085a      	lsrs	r2, r3, #1
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	441a      	add	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	61bb      	str	r3, [r7, #24]
 8011b16:	e029      	b.n	8011b6c <UART_SetConfig+0x518>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	085a      	lsrs	r2, r3, #1
 8011b1e:	4b21      	ldr	r3, [pc, #132]	; (8011ba4 <UART_SetConfig+0x550>)
 8011b20:	4413      	add	r3, r2
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	6852      	ldr	r2, [r2, #4]
 8011b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	61bb      	str	r3, [r7, #24]
 8011b2e:	e01d      	b.n	8011b6c <UART_SetConfig+0x518>
 8011b30:	f7fa fff4 	bl	800cb1c <HAL_RCC_GetSysClockFreq>
 8011b34:	60f8      	str	r0, [r7, #12]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	085a      	lsrs	r2, r3, #1
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	441a      	add	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	61bb      	str	r3, [r7, #24]
 8011b4c:	e00e      	b.n	8011b6c <UART_SetConfig+0x518>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	085b      	lsrs	r3, r3, #1
 8011b54:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	61bb      	str	r3, [r7, #24]
 8011b64:	e002      	b.n	8011b6c <UART_SetConfig+0x518>
 8011b66:	2301      	movs	r3, #1
 8011b68:	75fb      	strb	r3, [r7, #23]
 8011b6a:	bf00      	nop
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	2b0f      	cmp	r3, #15
 8011b70:	d908      	bls.n	8011b84 <UART_SetConfig+0x530>
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b78:	d204      	bcs.n	8011b84 <UART_SetConfig+0x530>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	69ba      	ldr	r2, [r7, #24]
 8011b80:	60da      	str	r2, [r3, #12]
 8011b82:	e001      	b.n	8011b88 <UART_SetConfig+0x534>
 8011b84:	2301      	movs	r3, #1
 8011b86:	75fb      	strb	r3, [r7, #23]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	661a      	str	r2, [r3, #96]	; 0x60
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2200      	movs	r2, #0
 8011b92:	665a      	str	r2, [r3, #100]	; 0x64
 8011b94:	7dfb      	ldrb	r3, [r7, #23]
 8011b96:	4618      	mov	r0, r3
 8011b98:	3720      	adds	r7, #32
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	01e84800 	.word	0x01e84800
 8011ba4:	00f42400 	.word	0x00f42400

08011ba8 <UART_AdvFeatureConfig>:
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb4:	f003 0301 	and.w	r3, r3, #1
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00a      	beq.n	8011bd2 <UART_AdvFeatureConfig+0x2a>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	430a      	orrs	r2, r1
 8011bd0:	605a      	str	r2, [r3, #4]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd6:	f003 0302 	and.w	r3, r3, #2
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d00a      	beq.n	8011bf4 <UART_AdvFeatureConfig+0x4c>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	430a      	orrs	r2, r1
 8011bf2:	605a      	str	r2, [r3, #4]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf8:	f003 0304 	and.w	r3, r3, #4
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00a      	beq.n	8011c16 <UART_AdvFeatureConfig+0x6e>
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	430a      	orrs	r2, r1
 8011c14:	605a      	str	r2, [r3, #4]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c1a:	f003 0308 	and.w	r3, r3, #8
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d00a      	beq.n	8011c38 <UART_AdvFeatureConfig+0x90>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	430a      	orrs	r2, r1
 8011c36:	605a      	str	r2, [r3, #4]
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c3c:	f003 0310 	and.w	r3, r3, #16
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00a      	beq.n	8011c5a <UART_AdvFeatureConfig+0xb2>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	689b      	ldr	r3, [r3, #8]
 8011c4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	430a      	orrs	r2, r1
 8011c58:	609a      	str	r2, [r3, #8]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c5e:	f003 0320 	and.w	r3, r3, #32
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d00a      	beq.n	8011c7c <UART_AdvFeatureConfig+0xd4>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	689b      	ldr	r3, [r3, #8]
 8011c6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	430a      	orrs	r2, r1
 8011c7a:	609a      	str	r2, [r3, #8]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d01a      	beq.n	8011cbe <UART_AdvFeatureConfig+0x116>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	430a      	orrs	r2, r1
 8011c9c:	605a      	str	r2, [r3, #4]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ca6:	d10a      	bne.n	8011cbe <UART_AdvFeatureConfig+0x116>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	430a      	orrs	r2, r1
 8011cbc:	605a      	str	r2, [r3, #4]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d00a      	beq.n	8011ce0 <UART_AdvFeatureConfig+0x138>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	430a      	orrs	r2, r1
 8011cde:	605a      	str	r2, [r3, #4]
 8011ce0:	bf00      	nop
 8011ce2:	370c      	adds	r7, #12
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <UART_CheckIdleState>:
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b086      	sub	sp, #24
 8011cf0:	af02      	add	r7, sp, #8
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	67da      	str	r2, [r3, #124]	; 0x7c
 8011cfa:	f7f6 faa5 	bl	8008248 <HAL_GetTick>
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	f003 0308 	and.w	r3, r3, #8
 8011d0a:	2b08      	cmp	r3, #8
 8011d0c:	d10e      	bne.n	8011d2c <UART_CheckIdleState+0x40>
 8011d0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2200      	movs	r2, #0
 8011d18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 f82a 	bl	8011d76 <UART_WaitOnFlagUntilTimeout>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <UART_CheckIdleState+0x40>
 8011d28:	2303      	movs	r3, #3
 8011d2a:	e020      	b.n	8011d6e <UART_CheckIdleState+0x82>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f003 0304 	and.w	r3, r3, #4
 8011d36:	2b04      	cmp	r3, #4
 8011d38:	d10e      	bne.n	8011d58 <UART_CheckIdleState+0x6c>
 8011d3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	2200      	movs	r2, #0
 8011d44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f000 f814 	bl	8011d76 <UART_WaitOnFlagUntilTimeout>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d001      	beq.n	8011d58 <UART_CheckIdleState+0x6c>
 8011d54:	2303      	movs	r3, #3
 8011d56:	e00a      	b.n	8011d6e <UART_CheckIdleState+0x82>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2220      	movs	r2, #32
 8011d5c:	675a      	str	r2, [r3, #116]	; 0x74
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2220      	movs	r2, #32
 8011d62:	679a      	str	r2, [r3, #120]	; 0x78
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2200      	movs	r2, #0
 8011d68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <UART_WaitOnFlagUntilTimeout>:
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b084      	sub	sp, #16
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	60f8      	str	r0, [r7, #12]
 8011d7e:	60b9      	str	r1, [r7, #8]
 8011d80:	603b      	str	r3, [r7, #0]
 8011d82:	4613      	mov	r3, r2
 8011d84:	71fb      	strb	r3, [r7, #7]
 8011d86:	e05d      	b.n	8011e44 <UART_WaitOnFlagUntilTimeout+0xce>
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8e:	d059      	beq.n	8011e44 <UART_WaitOnFlagUntilTimeout+0xce>
 8011d90:	f7f6 fa5a 	bl	8008248 <HAL_GetTick>
 8011d94:	4602      	mov	r2, r0
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	1ad3      	subs	r3, r2, r3
 8011d9a:	69ba      	ldr	r2, [r7, #24]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d302      	bcc.n	8011da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8011da0:	69bb      	ldr	r3, [r7, #24]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d11b      	bne.n	8011dde <UART_WaitOnFlagUntilTimeout+0x68>
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011db4:	601a      	str	r2, [r3, #0]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	689a      	ldr	r2, [r3, #8]
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f022 0201 	bic.w	r2, r2, #1
 8011dc4:	609a      	str	r2, [r3, #8]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2220      	movs	r2, #32
 8011dca:	675a      	str	r2, [r3, #116]	; 0x74
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2220      	movs	r2, #32
 8011dd0:	679a      	str	r2, [r3, #120]	; 0x78
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8011dda:	2303      	movs	r3, #3
 8011ddc:	e042      	b.n	8011e64 <UART_WaitOnFlagUntilTimeout+0xee>
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f003 0304 	and.w	r3, r3, #4
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d02b      	beq.n	8011e44 <UART_WaitOnFlagUntilTimeout+0xce>
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	69db      	ldr	r3, [r3, #28]
 8011df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011dfa:	d123      	bne.n	8011e44 <UART_WaitOnFlagUntilTimeout+0xce>
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e04:	621a      	str	r2, [r3, #32]
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011e14:	601a      	str	r2, [r3, #0]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	689a      	ldr	r2, [r3, #8]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	f022 0201 	bic.w	r2, r2, #1
 8011e24:	609a      	str	r2, [r3, #8]
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	2220      	movs	r2, #32
 8011e2a:	675a      	str	r2, [r3, #116]	; 0x74
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2220      	movs	r2, #32
 8011e30:	679a      	str	r2, [r3, #120]	; 0x78
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2220      	movs	r2, #32
 8011e36:	67da      	str	r2, [r3, #124]	; 0x7c
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8011e40:	2303      	movs	r3, #3
 8011e42:	e00f      	b.n	8011e64 <UART_WaitOnFlagUntilTimeout+0xee>
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	69da      	ldr	r2, [r3, #28]
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	4013      	ands	r3, r2
 8011e4e:	68ba      	ldr	r2, [r7, #8]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	bf0c      	ite	eq
 8011e54:	2301      	moveq	r3, #1
 8011e56:	2300      	movne	r3, #0
 8011e58:	b2db      	uxtb	r3, r3
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	79fb      	ldrb	r3, [r7, #7]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d092      	beq.n	8011d88 <UART_WaitOnFlagUntilTimeout+0x12>
 8011e62:	2300      	movs	r3, #0
 8011e64:	4618      	mov	r0, r3
 8011e66:	3710      	adds	r7, #16
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <UART_EndTxTransfer>:
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011e82:	601a      	str	r2, [r3, #0]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2220      	movs	r2, #32
 8011e88:	675a      	str	r2, [r3, #116]	; 0x74
 8011e8a:	bf00      	nop
 8011e8c:	370c      	adds	r7, #12
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e94:	4770      	bx	lr

08011e96 <UART_EndRxTransfer>:
 8011e96:	b480      	push	{r7}
 8011e98:	b083      	sub	sp, #12
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	681a      	ldr	r2, [r3, #0]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011eac:	601a      	str	r2, [r3, #0]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	689a      	ldr	r2, [r3, #8]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f022 0201 	bic.w	r2, r2, #1
 8011ebc:	609a      	str	r2, [r3, #8]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2220      	movs	r2, #32
 8011ec2:	679a      	str	r2, [r3, #120]	; 0x78
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	661a      	str	r2, [r3, #96]	; 0x60
 8011eca:	bf00      	nop
 8011ecc:	370c      	adds	r7, #12
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <UART_DMATransmitCplt>:
 8011ed6:	b580      	push	{r7, lr}
 8011ed8:	b084      	sub	sp, #16
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ee2:	60fb      	str	r3, [r7, #12]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	69db      	ldr	r3, [r3, #28]
 8011ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011eec:	d014      	beq.n	8011f18 <UART_DMATransmitCplt+0x42>
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	689a      	ldr	r2, [r3, #8]
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011f04:	609a      	str	r2, [r3, #8]
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f14:	601a      	str	r2, [r3, #0]
 8011f16:	e002      	b.n	8011f1e <UART_DMATransmitCplt+0x48>
 8011f18:	68f8      	ldr	r0, [r7, #12]
 8011f1a:	f7f6 f829 	bl	8007f70 <HAL_UART_TxCpltCallback>
 8011f1e:	bf00      	nop
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <UART_DMATxHalfCplt>:
 8011f26:	b580      	push	{r7, lr}
 8011f28:	b084      	sub	sp, #16
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	6078      	str	r0, [r7, #4]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f32:	60fb      	str	r3, [r7, #12]
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	f7ff fb65 	bl	8011604 <HAL_UART_TxHalfCpltCallback>
 8011f3a:	bf00      	nop
 8011f3c:	3710      	adds	r7, #16
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <UART_DMAReceiveCplt>:
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b084      	sub	sp, #16
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f4e:	60fb      	str	r3, [r7, #12]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	69db      	ldr	r3, [r3, #28]
 8011f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f58:	d01e      	beq.n	8011f98 <UART_DMAReceiveCplt+0x56>
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011f70:	601a      	str	r2, [r3, #0]
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	689a      	ldr	r2, [r3, #8]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f022 0201 	bic.w	r2, r2, #1
 8011f80:	609a      	str	r2, [r3, #8]
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	689a      	ldr	r2, [r3, #8]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011f90:	609a      	str	r2, [r3, #8]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2220      	movs	r2, #32
 8011f96:	679a      	str	r2, [r3, #120]	; 0x78
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f7f6 f88b 	bl	80080b4 <HAL_UART_RxCpltCallback>
 8011f9e:	bf00      	nop
 8011fa0:	3710      	adds	r7, #16
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}

08011fa6 <UART_DMARxHalfCplt>:
 8011fa6:	b580      	push	{r7, lr}
 8011fa8:	b084      	sub	sp, #16
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fb2:	60fb      	str	r3, [r7, #12]
 8011fb4:	68f8      	ldr	r0, [r7, #12]
 8011fb6:	f7ff fb2f 	bl	8011618 <HAL_UART_RxHalfCpltCallback>
 8011fba:	bf00      	nop
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <UART_DMAError>:
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b086      	sub	sp, #24
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fce:	617b      	str	r3, [r7, #20]
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fd4:	613b      	str	r3, [r7, #16]
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fda:	60fb      	str	r3, [r7, #12]
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	689b      	ldr	r3, [r3, #8]
 8011fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fe6:	2b80      	cmp	r3, #128	; 0x80
 8011fe8:	d109      	bne.n	8011ffe <UART_DMAError+0x3c>
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	2b21      	cmp	r3, #33	; 0x21
 8011fee:	d106      	bne.n	8011ffe <UART_DMAError+0x3c>
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011ff8:	6978      	ldr	r0, [r7, #20]
 8011ffa:	f7ff ff37 	bl	8011e6c <UART_EndTxTransfer>
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012008:	2b40      	cmp	r3, #64	; 0x40
 801200a:	d109      	bne.n	8012020 <UART_DMAError+0x5e>
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2b22      	cmp	r3, #34	; 0x22
 8012010:	d106      	bne.n	8012020 <UART_DMAError+0x5e>
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	2200      	movs	r2, #0
 8012016:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 801201a:	6978      	ldr	r0, [r7, #20]
 801201c:	f7ff ff3b 	bl	8011e96 <UART_EndRxTransfer>
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012024:	f043 0210 	orr.w	r2, r3, #16
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	67da      	str	r2, [r3, #124]	; 0x7c
 801202c:	6978      	ldr	r0, [r7, #20]
 801202e:	f7ff fafd 	bl	801162c <HAL_UART_ErrorCallback>
 8012032:	bf00      	nop
 8012034:	3718      	adds	r7, #24
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}

0801203a <UART_DMAAbortOnError>:
 801203a:	b580      	push	{r7, lr}
 801203c:	b084      	sub	sp, #16
 801203e:	af00      	add	r7, sp, #0
 8012040:	6078      	str	r0, [r7, #4]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012046:	60fb      	str	r3, [r7, #12]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2200      	movs	r2, #0
 801204c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2200      	movs	r2, #0
 8012054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8012058:	68f8      	ldr	r0, [r7, #12]
 801205a:	f7ff fae7 	bl	801162c <HAL_UART_ErrorCallback>
 801205e:	bf00      	nop
 8012060:	3710      	adds	r7, #16
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}

08012066 <UART_EndTransmit_IT>:
 8012066:	b580      	push	{r7, lr}
 8012068:	b082      	sub	sp, #8
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2220      	movs	r2, #32
 8012082:	675a      	str	r2, [r3, #116]	; 0x74
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2200      	movs	r2, #0
 8012088:	665a      	str	r2, [r3, #100]	; 0x64
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7f5 ff70 	bl	8007f70 <HAL_UART_TxCpltCallback>
 8012090:	bf00      	nop
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <SDMMC_Init>:
 8012098:	b084      	sub	sp, #16
 801209a:	b480      	push	{r7}
 801209c:	b085      	sub	sp, #20
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
 80120a2:	f107 001c 	add.w	r0, r7, #28
 80120a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80120aa:	2300      	movs	r3, #0
 80120ac:	60fb      	str	r3, [r7, #12]
 80120ae:	69fa      	ldr	r2, [r7, #28]
 80120b0:	6a3b      	ldr	r3, [r7, #32]
 80120b2:	431a      	orrs	r2, r3
 80120b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b6:	431a      	orrs	r2, r3
 80120b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ba:	431a      	orrs	r2, r3
 80120bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120be:	431a      	orrs	r2, r3
 80120c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c2:	4313      	orrs	r3, r2
 80120c4:	68fa      	ldr	r2, [r7, #12]
 80120c6:	4313      	orrs	r3, r2
 80120c8:	60fb      	str	r3, [r7, #12]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	685a      	ldr	r2, [r3, #4]
 80120ce:	4b07      	ldr	r3, [pc, #28]	; (80120ec <SDMMC_Init+0x54>)
 80120d0:	4013      	ands	r3, r2
 80120d2:	68fa      	ldr	r2, [r7, #12]
 80120d4:	431a      	orrs	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	605a      	str	r2, [r3, #4]
 80120da:	2300      	movs	r3, #0
 80120dc:	4618      	mov	r0, r3
 80120de:	3714      	adds	r7, #20
 80120e0:	46bd      	mov	sp, r7
 80120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e6:	b004      	add	sp, #16
 80120e8:	4770      	bx	lr
 80120ea:	bf00      	nop
 80120ec:	ffff8100 	.word	0xffff8100

080120f0 <SDMMC_ReadFIFO>:
 80120f0:	b480      	push	{r7}
 80120f2:	b083      	sub	sp, #12
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80120fe:	4618      	mov	r0, r3
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr

0801210a <SDMMC_WriteFIFO>:
 801210a:	b480      	push	{r7}
 801210c:	b083      	sub	sp, #12
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	6039      	str	r1, [r7, #0]
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 801211e:	2300      	movs	r3, #0
 8012120:	4618      	mov	r0, r3
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr

0801212c <SDMMC_PowerState_ON>:
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2203      	movs	r2, #3
 8012138:	601a      	str	r2, [r3, #0]
 801213a:	2002      	movs	r0, #2
 801213c:	f7f6 f890 	bl	8008260 <HAL_Delay>
 8012140:	2300      	movs	r3, #0
 8012142:	4618      	mov	r0, r3
 8012144:	3708      	adds	r7, #8
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}

0801214a <SDMMC_GetPowerState>:
 801214a:	b480      	push	{r7}
 801214c:	b083      	sub	sp, #12
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f003 0303 	and.w	r3, r3, #3
 801215a:	4618      	mov	r0, r3
 801215c:	370c      	adds	r7, #12
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr
	...

08012168 <SDMMC_SendCommand>:
 8012168:	b480      	push	{r7}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
 8012172:	2300      	movs	r3, #0
 8012174:	60fb      	str	r3, [r7, #12]
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	609a      	str	r2, [r3, #8]
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	685a      	ldr	r2, [r3, #4]
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	689b      	ldr	r3, [r3, #8]
 8012186:	431a      	orrs	r2, r3
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	431a      	orrs	r2, r3
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	691b      	ldr	r3, [r3, #16]
 8012192:	4313      	orrs	r3, r2
 8012194:	68fa      	ldr	r2, [r7, #12]
 8012196:	4313      	orrs	r3, r2
 8012198:	60fb      	str	r3, [r7, #12]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	68da      	ldr	r2, [r3, #12]
 801219e:	4b06      	ldr	r3, [pc, #24]	; (80121b8 <SDMMC_SendCommand+0x50>)
 80121a0:	4013      	ands	r3, r2
 80121a2:	68fa      	ldr	r2, [r7, #12]
 80121a4:	431a      	orrs	r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	60da      	str	r2, [r3, #12]
 80121aa:	2300      	movs	r3, #0
 80121ac:	4618      	mov	r0, r3
 80121ae:	3714      	adds	r7, #20
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr
 80121b8:	fffff000 	.word	0xfffff000

080121bc <SDMMC_GetCommandResponse>:
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	691b      	ldr	r3, [r3, #16]
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	4618      	mov	r0, r3
 80121cc:	370c      	adds	r7, #12
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr

080121d6 <SDMMC_GetResponse>:
 80121d6:	b480      	push	{r7}
 80121d8:	b085      	sub	sp, #20
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
 80121de:	6039      	str	r1, [r7, #0]
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	3314      	adds	r3, #20
 80121e4:	461a      	mov	r2, r3
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	4413      	add	r3, r2
 80121ea:	60fb      	str	r3, [r7, #12]
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4618      	mov	r0, r3
 80121f2:	3714      	adds	r7, #20
 80121f4:	46bd      	mov	sp, r7
 80121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fa:	4770      	bx	lr

080121fc <SDMMC_ConfigData>:
 80121fc:	b480      	push	{r7}
 80121fe:	b085      	sub	sp, #20
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
 8012206:	2300      	movs	r3, #0
 8012208:	60fb      	str	r3, [r7, #12]
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	625a      	str	r2, [r3, #36]	; 0x24
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	685a      	ldr	r2, [r3, #4]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	629a      	str	r2, [r3, #40]	; 0x28
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	689a      	ldr	r2, [r3, #8]
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	431a      	orrs	r2, r3
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	691b      	ldr	r3, [r3, #16]
 8012228:	431a      	orrs	r2, r3
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	695b      	ldr	r3, [r3, #20]
 801222e:	4313      	orrs	r3, r2
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	4313      	orrs	r3, r2
 8012234:	60fb      	str	r3, [r7, #12]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801223a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	431a      	orrs	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	62da      	str	r2, [r3, #44]	; 0x2c
 8012246:	2300      	movs	r3, #0
 8012248:	4618      	mov	r0, r3
 801224a:	3714      	adds	r7, #20
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <SDMMC_CmdBlockLength>:
 8012254:	b580      	push	{r7, lr}
 8012256:	b088      	sub	sp, #32
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6039      	str	r1, [r7, #0]
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	60bb      	str	r3, [r7, #8]
 8012262:	2310      	movs	r3, #16
 8012264:	60fb      	str	r3, [r7, #12]
 8012266:	2340      	movs	r3, #64	; 0x40
 8012268:	613b      	str	r3, [r7, #16]
 801226a:	2300      	movs	r3, #0
 801226c:	617b      	str	r3, [r7, #20]
 801226e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012272:	61bb      	str	r3, [r7, #24]
 8012274:	f107 0308 	add.w	r3, r7, #8
 8012278:	4619      	mov	r1, r3
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7ff ff74 	bl	8012168 <SDMMC_SendCommand>
 8012280:	f241 3288 	movw	r2, #5000	; 0x1388
 8012284:	2110      	movs	r1, #16
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f000 fa42 	bl	8012710 <SDMMC_GetCmdResp1>
 801228c:	61f8      	str	r0, [r7, #28]
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	4618      	mov	r0, r3
 8012292:	3720      	adds	r7, #32
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}

08012298 <SDMMC_CmdReadSingleBlock>:
 8012298:	b580      	push	{r7, lr}
 801229a:	b088      	sub	sp, #32
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	6039      	str	r1, [r7, #0]
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	60bb      	str	r3, [r7, #8]
 80122a6:	2311      	movs	r3, #17
 80122a8:	60fb      	str	r3, [r7, #12]
 80122aa:	2340      	movs	r3, #64	; 0x40
 80122ac:	613b      	str	r3, [r7, #16]
 80122ae:	2300      	movs	r3, #0
 80122b0:	617b      	str	r3, [r7, #20]
 80122b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122b6:	61bb      	str	r3, [r7, #24]
 80122b8:	f107 0308 	add.w	r3, r7, #8
 80122bc:	4619      	mov	r1, r3
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f7ff ff52 	bl	8012168 <SDMMC_SendCommand>
 80122c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80122c8:	2111      	movs	r1, #17
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 fa20 	bl	8012710 <SDMMC_GetCmdResp1>
 80122d0:	61f8      	str	r0, [r7, #28]
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	4618      	mov	r0, r3
 80122d6:	3720      	adds	r7, #32
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}

080122dc <SDMMC_CmdReadMultiBlock>:
 80122dc:	b580      	push	{r7, lr}
 80122de:	b088      	sub	sp, #32
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	60bb      	str	r3, [r7, #8]
 80122ea:	2312      	movs	r3, #18
 80122ec:	60fb      	str	r3, [r7, #12]
 80122ee:	2340      	movs	r3, #64	; 0x40
 80122f0:	613b      	str	r3, [r7, #16]
 80122f2:	2300      	movs	r3, #0
 80122f4:	617b      	str	r3, [r7, #20]
 80122f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122fa:	61bb      	str	r3, [r7, #24]
 80122fc:	f107 0308 	add.w	r3, r7, #8
 8012300:	4619      	mov	r1, r3
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f7ff ff30 	bl	8012168 <SDMMC_SendCommand>
 8012308:	f241 3288 	movw	r2, #5000	; 0x1388
 801230c:	2112      	movs	r1, #18
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f000 f9fe 	bl	8012710 <SDMMC_GetCmdResp1>
 8012314:	61f8      	str	r0, [r7, #28]
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	4618      	mov	r0, r3
 801231a:	3720      	adds	r7, #32
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <SDMMC_CmdWriteSingleBlock>:
 8012320:	b580      	push	{r7, lr}
 8012322:	b088      	sub	sp, #32
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	60bb      	str	r3, [r7, #8]
 801232e:	2318      	movs	r3, #24
 8012330:	60fb      	str	r3, [r7, #12]
 8012332:	2340      	movs	r3, #64	; 0x40
 8012334:	613b      	str	r3, [r7, #16]
 8012336:	2300      	movs	r3, #0
 8012338:	617b      	str	r3, [r7, #20]
 801233a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801233e:	61bb      	str	r3, [r7, #24]
 8012340:	f107 0308 	add.w	r3, r7, #8
 8012344:	4619      	mov	r1, r3
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f7ff ff0e 	bl	8012168 <SDMMC_SendCommand>
 801234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012350:	2118      	movs	r1, #24
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 f9dc 	bl	8012710 <SDMMC_GetCmdResp1>
 8012358:	61f8      	str	r0, [r7, #28]
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	4618      	mov	r0, r3
 801235e:	3720      	adds	r7, #32
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <SDMMC_CmdWriteMultiBlock>:
 8012364:	b580      	push	{r7, lr}
 8012366:	b088      	sub	sp, #32
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	60bb      	str	r3, [r7, #8]
 8012372:	2319      	movs	r3, #25
 8012374:	60fb      	str	r3, [r7, #12]
 8012376:	2340      	movs	r3, #64	; 0x40
 8012378:	613b      	str	r3, [r7, #16]
 801237a:	2300      	movs	r3, #0
 801237c:	617b      	str	r3, [r7, #20]
 801237e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012382:	61bb      	str	r3, [r7, #24]
 8012384:	f107 0308 	add.w	r3, r7, #8
 8012388:	4619      	mov	r1, r3
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f7ff feec 	bl	8012168 <SDMMC_SendCommand>
 8012390:	f241 3288 	movw	r2, #5000	; 0x1388
 8012394:	2119      	movs	r1, #25
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 f9ba 	bl	8012710 <SDMMC_GetCmdResp1>
 801239c:	61f8      	str	r0, [r7, #28]
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	4618      	mov	r0, r3
 80123a2:	3720      	adds	r7, #32
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <SDMMC_CmdStopTransfer>:
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b088      	sub	sp, #32
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	2300      	movs	r3, #0
 80123b2:	60bb      	str	r3, [r7, #8]
 80123b4:	230c      	movs	r3, #12
 80123b6:	60fb      	str	r3, [r7, #12]
 80123b8:	2340      	movs	r3, #64	; 0x40
 80123ba:	613b      	str	r3, [r7, #16]
 80123bc:	2300      	movs	r3, #0
 80123be:	617b      	str	r3, [r7, #20]
 80123c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123c4:	61bb      	str	r3, [r7, #24]
 80123c6:	f107 0308 	add.w	r3, r7, #8
 80123ca:	4619      	mov	r1, r3
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7ff fecb 	bl	8012168 <SDMMC_SendCommand>
 80123d2:	4a05      	ldr	r2, [pc, #20]	; (80123e8 <SDMMC_CmdStopTransfer+0x40>)
 80123d4:	210c      	movs	r1, #12
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f000 f99a 	bl	8012710 <SDMMC_GetCmdResp1>
 80123dc:	61f8      	str	r0, [r7, #28]
 80123de:	69fb      	ldr	r3, [r7, #28]
 80123e0:	4618      	mov	r0, r3
 80123e2:	3720      	adds	r7, #32
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	05f5e100 	.word	0x05f5e100

080123ec <SDMMC_CmdSelDesel>:
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b08a      	sub	sp, #40	; 0x28
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	e9c7 2300 	strd	r2, r3, [r7]
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	613b      	str	r3, [r7, #16]
 80123fc:	2307      	movs	r3, #7
 80123fe:	617b      	str	r3, [r7, #20]
 8012400:	2340      	movs	r3, #64	; 0x40
 8012402:	61bb      	str	r3, [r7, #24]
 8012404:	2300      	movs	r3, #0
 8012406:	61fb      	str	r3, [r7, #28]
 8012408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801240c:	623b      	str	r3, [r7, #32]
 801240e:	f107 0310 	add.w	r3, r7, #16
 8012412:	4619      	mov	r1, r3
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f7ff fea7 	bl	8012168 <SDMMC_SendCommand>
 801241a:	f241 3288 	movw	r2, #5000	; 0x1388
 801241e:	2107      	movs	r1, #7
 8012420:	68f8      	ldr	r0, [r7, #12]
 8012422:	f000 f975 	bl	8012710 <SDMMC_GetCmdResp1>
 8012426:	6278      	str	r0, [r7, #36]	; 0x24
 8012428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242a:	4618      	mov	r0, r3
 801242c:	3728      	adds	r7, #40	; 0x28
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <SDMMC_CmdGoIdleState>:
 8012432:	b580      	push	{r7, lr}
 8012434:	b088      	sub	sp, #32
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
 801243a:	2300      	movs	r3, #0
 801243c:	60bb      	str	r3, [r7, #8]
 801243e:	2300      	movs	r3, #0
 8012440:	60fb      	str	r3, [r7, #12]
 8012442:	2300      	movs	r3, #0
 8012444:	613b      	str	r3, [r7, #16]
 8012446:	2300      	movs	r3, #0
 8012448:	617b      	str	r3, [r7, #20]
 801244a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801244e:	61bb      	str	r3, [r7, #24]
 8012450:	f107 0308 	add.w	r3, r7, #8
 8012454:	4619      	mov	r1, r3
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f7ff fe86 	bl	8012168 <SDMMC_SendCommand>
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 f92f 	bl	80126c0 <SDMMC_GetCmdError>
 8012462:	61f8      	str	r0, [r7, #28]
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	4618      	mov	r0, r3
 8012468:	3720      	adds	r7, #32
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}

0801246e <SDMMC_CmdOperCond>:
 801246e:	b580      	push	{r7, lr}
 8012470:	b088      	sub	sp, #32
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
 8012476:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801247a:	60bb      	str	r3, [r7, #8]
 801247c:	2308      	movs	r3, #8
 801247e:	60fb      	str	r3, [r7, #12]
 8012480:	2340      	movs	r3, #64	; 0x40
 8012482:	613b      	str	r3, [r7, #16]
 8012484:	2300      	movs	r3, #0
 8012486:	617b      	str	r3, [r7, #20]
 8012488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801248c:	61bb      	str	r3, [r7, #24]
 801248e:	f107 0308 	add.w	r3, r7, #8
 8012492:	4619      	mov	r1, r3
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f7ff fe67 	bl	8012168 <SDMMC_SendCommand>
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 fb18 	bl	8012ad0 <SDMMC_GetCmdResp7>
 80124a0:	61f8      	str	r0, [r7, #28]
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	4618      	mov	r0, r3
 80124a6:	3720      	adds	r7, #32
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <SDMMC_CmdAppCommand>:
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b088      	sub	sp, #32
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	60bb      	str	r3, [r7, #8]
 80124ba:	2337      	movs	r3, #55	; 0x37
 80124bc:	60fb      	str	r3, [r7, #12]
 80124be:	2340      	movs	r3, #64	; 0x40
 80124c0:	613b      	str	r3, [r7, #16]
 80124c2:	2300      	movs	r3, #0
 80124c4:	617b      	str	r3, [r7, #20]
 80124c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124ca:	61bb      	str	r3, [r7, #24]
 80124cc:	f107 0308 	add.w	r3, r7, #8
 80124d0:	4619      	mov	r1, r3
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7ff fe48 	bl	8012168 <SDMMC_SendCommand>
 80124d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80124dc:	2137      	movs	r1, #55	; 0x37
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f000 f916 	bl	8012710 <SDMMC_GetCmdResp1>
 80124e4:	61f8      	str	r0, [r7, #28]
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	4618      	mov	r0, r3
 80124ea:	3720      	adds	r7, #32
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}

080124f0 <SDMMC_CmdAppOperCommand>:
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b088      	sub	sp, #32
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
 80124fa:	683a      	ldr	r2, [r7, #0]
 80124fc:	4b0d      	ldr	r3, [pc, #52]	; (8012534 <SDMMC_CmdAppOperCommand+0x44>)
 80124fe:	4313      	orrs	r3, r2
 8012500:	60bb      	str	r3, [r7, #8]
 8012502:	2329      	movs	r3, #41	; 0x29
 8012504:	60fb      	str	r3, [r7, #12]
 8012506:	2340      	movs	r3, #64	; 0x40
 8012508:	613b      	str	r3, [r7, #16]
 801250a:	2300      	movs	r3, #0
 801250c:	617b      	str	r3, [r7, #20]
 801250e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012512:	61bb      	str	r3, [r7, #24]
 8012514:	f107 0308 	add.w	r3, r7, #8
 8012518:	4619      	mov	r1, r3
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7ff fe24 	bl	8012168 <SDMMC_SendCommand>
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f000 fa27 	bl	8012974 <SDMMC_GetCmdResp3>
 8012526:	61f8      	str	r0, [r7, #28]
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	4618      	mov	r0, r3
 801252c:	3720      	adds	r7, #32
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	80100000 	.word	0x80100000

08012538 <SDMMC_CmdBusWidth>:
 8012538:	b580      	push	{r7, lr}
 801253a:	b088      	sub	sp, #32
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	60bb      	str	r3, [r7, #8]
 8012546:	2306      	movs	r3, #6
 8012548:	60fb      	str	r3, [r7, #12]
 801254a:	2340      	movs	r3, #64	; 0x40
 801254c:	613b      	str	r3, [r7, #16]
 801254e:	2300      	movs	r3, #0
 8012550:	617b      	str	r3, [r7, #20]
 8012552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012556:	61bb      	str	r3, [r7, #24]
 8012558:	f107 0308 	add.w	r3, r7, #8
 801255c:	4619      	mov	r1, r3
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f7ff fe02 	bl	8012168 <SDMMC_SendCommand>
 8012564:	f241 3288 	movw	r2, #5000	; 0x1388
 8012568:	2106      	movs	r1, #6
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f000 f8d0 	bl	8012710 <SDMMC_GetCmdResp1>
 8012570:	61f8      	str	r0, [r7, #28]
 8012572:	69fb      	ldr	r3, [r7, #28]
 8012574:	4618      	mov	r0, r3
 8012576:	3720      	adds	r7, #32
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <SDMMC_CmdSendSCR>:
 801257c:	b580      	push	{r7, lr}
 801257e:	b088      	sub	sp, #32
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	2300      	movs	r3, #0
 8012586:	60bb      	str	r3, [r7, #8]
 8012588:	2333      	movs	r3, #51	; 0x33
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	2340      	movs	r3, #64	; 0x40
 801258e:	613b      	str	r3, [r7, #16]
 8012590:	2300      	movs	r3, #0
 8012592:	617b      	str	r3, [r7, #20]
 8012594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012598:	61bb      	str	r3, [r7, #24]
 801259a:	f107 0308 	add.w	r3, r7, #8
 801259e:	4619      	mov	r1, r3
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7ff fde1 	bl	8012168 <SDMMC_SendCommand>
 80125a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80125aa:	2133      	movs	r1, #51	; 0x33
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f000 f8af 	bl	8012710 <SDMMC_GetCmdResp1>
 80125b2:	61f8      	str	r0, [r7, #28]
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	4618      	mov	r0, r3
 80125b8:	3720      	adds	r7, #32
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}

080125be <SDMMC_CmdSendCID>:
 80125be:	b580      	push	{r7, lr}
 80125c0:	b088      	sub	sp, #32
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
 80125c6:	2300      	movs	r3, #0
 80125c8:	60bb      	str	r3, [r7, #8]
 80125ca:	2302      	movs	r3, #2
 80125cc:	60fb      	str	r3, [r7, #12]
 80125ce:	23c0      	movs	r3, #192	; 0xc0
 80125d0:	613b      	str	r3, [r7, #16]
 80125d2:	2300      	movs	r3, #0
 80125d4:	617b      	str	r3, [r7, #20]
 80125d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125da:	61bb      	str	r3, [r7, #24]
 80125dc:	f107 0308 	add.w	r3, r7, #8
 80125e0:	4619      	mov	r1, r3
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7ff fdc0 	bl	8012168 <SDMMC_SendCommand>
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 f97d 	bl	80128e8 <SDMMC_GetCmdResp2>
 80125ee:	61f8      	str	r0, [r7, #28]
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	4618      	mov	r0, r3
 80125f4:	3720      	adds	r7, #32
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <SDMMC_CmdSendCSD>:
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b088      	sub	sp, #32
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
 8012602:	6039      	str	r1, [r7, #0]
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	60bb      	str	r3, [r7, #8]
 8012608:	2309      	movs	r3, #9
 801260a:	60fb      	str	r3, [r7, #12]
 801260c:	23c0      	movs	r3, #192	; 0xc0
 801260e:	613b      	str	r3, [r7, #16]
 8012610:	2300      	movs	r3, #0
 8012612:	617b      	str	r3, [r7, #20]
 8012614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012618:	61bb      	str	r3, [r7, #24]
 801261a:	f107 0308 	add.w	r3, r7, #8
 801261e:	4619      	mov	r1, r3
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7ff fda1 	bl	8012168 <SDMMC_SendCommand>
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f000 f95e 	bl	80128e8 <SDMMC_GetCmdResp2>
 801262c:	61f8      	str	r0, [r7, #28]
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	4618      	mov	r0, r3
 8012632:	3720      	adds	r7, #32
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <SDMMC_CmdSetRelAdd>:
 8012638:	b580      	push	{r7, lr}
 801263a:	b088      	sub	sp, #32
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6039      	str	r1, [r7, #0]
 8012642:	2300      	movs	r3, #0
 8012644:	60bb      	str	r3, [r7, #8]
 8012646:	2303      	movs	r3, #3
 8012648:	60fb      	str	r3, [r7, #12]
 801264a:	2340      	movs	r3, #64	; 0x40
 801264c:	613b      	str	r3, [r7, #16]
 801264e:	2300      	movs	r3, #0
 8012650:	617b      	str	r3, [r7, #20]
 8012652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012656:	61bb      	str	r3, [r7, #24]
 8012658:	f107 0308 	add.w	r3, r7, #8
 801265c:	4619      	mov	r1, r3
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f7ff fd82 	bl	8012168 <SDMMC_SendCommand>
 8012664:	683a      	ldr	r2, [r7, #0]
 8012666:	2103      	movs	r1, #3
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f000 f9bd 	bl	80129e8 <SDMMC_GetCmdResp6>
 801266e:	61f8      	str	r0, [r7, #28]
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	4618      	mov	r0, r3
 8012674:	3720      	adds	r7, #32
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}

0801267a <SDMMC_CmdSendStatus>:
 801267a:	b580      	push	{r7, lr}
 801267c:	b088      	sub	sp, #32
 801267e:	af00      	add	r7, sp, #0
 8012680:	6078      	str	r0, [r7, #4]
 8012682:	6039      	str	r1, [r7, #0]
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	60bb      	str	r3, [r7, #8]
 8012688:	230d      	movs	r3, #13
 801268a:	60fb      	str	r3, [r7, #12]
 801268c:	2340      	movs	r3, #64	; 0x40
 801268e:	613b      	str	r3, [r7, #16]
 8012690:	2300      	movs	r3, #0
 8012692:	617b      	str	r3, [r7, #20]
 8012694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012698:	61bb      	str	r3, [r7, #24]
 801269a:	f107 0308 	add.w	r3, r7, #8
 801269e:	4619      	mov	r1, r3
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7ff fd61 	bl	8012168 <SDMMC_SendCommand>
 80126a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80126aa:	210d      	movs	r1, #13
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 f82f 	bl	8012710 <SDMMC_GetCmdResp1>
 80126b2:	61f8      	str	r0, [r7, #28]
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	4618      	mov	r0, r3
 80126b8:	3720      	adds	r7, #32
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
	...

080126c0 <SDMMC_GetCmdError>:
 80126c0:	b490      	push	{r4, r7}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	4b0f      	ldr	r3, [pc, #60]	; (8012708 <SDMMC_GetCmdError+0x48>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4a0f      	ldr	r2, [pc, #60]	; (801270c <SDMMC_GetCmdError+0x4c>)
 80126ce:	fba2 2303 	umull	r2, r3, r2, r3
 80126d2:	0a5b      	lsrs	r3, r3, #9
 80126d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80126d8:	fb02 f403 	mul.w	r4, r2, r3
 80126dc:	4623      	mov	r3, r4
 80126de:	1e5c      	subs	r4, r3, #1
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d102      	bne.n	80126ea <SDMMC_GetCmdError+0x2a>
 80126e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126e8:	e009      	b.n	80126fe <SDMMC_GetCmdError+0x3e>
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d0f2      	beq.n	80126dc <SDMMC_GetCmdError+0x1c>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	22c5      	movs	r2, #197	; 0xc5
 80126fa:	639a      	str	r2, [r3, #56]	; 0x38
 80126fc:	2300      	movs	r3, #0
 80126fe:	4618      	mov	r0, r3
 8012700:	3708      	adds	r7, #8
 8012702:	46bd      	mov	sp, r7
 8012704:	bc90      	pop	{r4, r7}
 8012706:	4770      	bx	lr
 8012708:	2000005c 	.word	0x2000005c
 801270c:	10624dd3 	.word	0x10624dd3

08012710 <SDMMC_GetCmdResp1>:
 8012710:	b590      	push	{r4, r7, lr}
 8012712:	b087      	sub	sp, #28
 8012714:	af00      	add	r7, sp, #0
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	460b      	mov	r3, r1
 801271a:	607a      	str	r2, [r7, #4]
 801271c:	72fb      	strb	r3, [r7, #11]
 801271e:	4b6f      	ldr	r3, [pc, #444]	; (80128dc <SDMMC_GetCmdResp1+0x1cc>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	4a6f      	ldr	r2, [pc, #444]	; (80128e0 <SDMMC_GetCmdResp1+0x1d0>)
 8012724:	fba2 2303 	umull	r2, r3, r2, r3
 8012728:	0a5b      	lsrs	r3, r3, #9
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	fb02 f403 	mul.w	r4, r2, r3
 8012730:	4623      	mov	r3, r4
 8012732:	1e5c      	subs	r4, r3, #1
 8012734:	2b00      	cmp	r3, #0
 8012736:	d102      	bne.n	801273e <SDMMC_GetCmdResp1+0x2e>
 8012738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801273c:	e0c9      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012742:	617b      	str	r3, [r7, #20]
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801274a:	2b00      	cmp	r3, #0
 801274c:	d0f0      	beq.n	8012730 <SDMMC_GetCmdResp1+0x20>
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1eb      	bne.n	8012730 <SDMMC_GetCmdResp1+0x20>
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801275c:	f003 0304 	and.w	r3, r3, #4
 8012760:	2b00      	cmp	r3, #0
 8012762:	d004      	beq.n	801276e <SDMMC_GetCmdResp1+0x5e>
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2204      	movs	r2, #4
 8012768:	639a      	str	r2, [r3, #56]	; 0x38
 801276a:	2304      	movs	r3, #4
 801276c:	e0b1      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012772:	f003 0301 	and.w	r3, r3, #1
 8012776:	2b00      	cmp	r3, #0
 8012778:	d004      	beq.n	8012784 <SDMMC_GetCmdResp1+0x74>
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	2201      	movs	r2, #1
 801277e:	639a      	str	r2, [r3, #56]	; 0x38
 8012780:	2301      	movs	r3, #1
 8012782:	e0a6      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	22c5      	movs	r2, #197	; 0xc5
 8012788:	639a      	str	r2, [r3, #56]	; 0x38
 801278a:	68f8      	ldr	r0, [r7, #12]
 801278c:	f7ff fd16 	bl	80121bc <SDMMC_GetCommandResponse>
 8012790:	4603      	mov	r3, r0
 8012792:	461a      	mov	r2, r3
 8012794:	7afb      	ldrb	r3, [r7, #11]
 8012796:	4293      	cmp	r3, r2
 8012798:	d001      	beq.n	801279e <SDMMC_GetCmdResp1+0x8e>
 801279a:	2301      	movs	r3, #1
 801279c:	e099      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801279e:	2100      	movs	r1, #0
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f7ff fd18 	bl	80121d6 <SDMMC_GetResponse>
 80127a6:	6138      	str	r0, [r7, #16]
 80127a8:	693a      	ldr	r2, [r7, #16]
 80127aa:	4b4e      	ldr	r3, [pc, #312]	; (80128e4 <SDMMC_GetCmdResp1+0x1d4>)
 80127ac:	4013      	ands	r3, r2
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d101      	bne.n	80127b6 <SDMMC_GetCmdResp1+0xa6>
 80127b2:	2300      	movs	r3, #0
 80127b4:	e08d      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	da02      	bge.n	80127c2 <SDMMC_GetCmdResp1+0xb2>
 80127bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80127c0:	e087      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d001      	beq.n	80127d0 <SDMMC_GetCmdResp1+0xc0>
 80127cc:	2340      	movs	r3, #64	; 0x40
 80127ce:	e080      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d001      	beq.n	80127de <SDMMC_GetCmdResp1+0xce>
 80127da:	2380      	movs	r3, #128	; 0x80
 80127dc:	e079      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d002      	beq.n	80127ee <SDMMC_GetCmdResp1+0xde>
 80127e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127ec:	e071      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d002      	beq.n	80127fe <SDMMC_GetCmdResp1+0xee>
 80127f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127fc:	e069      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012804:	2b00      	cmp	r3, #0
 8012806:	d002      	beq.n	801280e <SDMMC_GetCmdResp1+0xfe>
 8012808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801280c:	e061      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012814:	2b00      	cmp	r3, #0
 8012816:	d002      	beq.n	801281e <SDMMC_GetCmdResp1+0x10e>
 8012818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801281c:	e059      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012824:	2b00      	cmp	r3, #0
 8012826:	d002      	beq.n	801282e <SDMMC_GetCmdResp1+0x11e>
 8012828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801282c:	e051      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012834:	2b00      	cmp	r3, #0
 8012836:	d002      	beq.n	801283e <SDMMC_GetCmdResp1+0x12e>
 8012838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801283c:	e049      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012844:	2b00      	cmp	r3, #0
 8012846:	d002      	beq.n	801284e <SDMMC_GetCmdResp1+0x13e>
 8012848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801284c:	e041      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012854:	2b00      	cmp	r3, #0
 8012856:	d002      	beq.n	801285e <SDMMC_GetCmdResp1+0x14e>
 8012858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801285c:	e039      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012864:	2b00      	cmp	r3, #0
 8012866:	d002      	beq.n	801286e <SDMMC_GetCmdResp1+0x15e>
 8012868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801286c:	e031      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012874:	2b00      	cmp	r3, #0
 8012876:	d002      	beq.n	801287e <SDMMC_GetCmdResp1+0x16e>
 8012878:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801287c:	e029      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012884:	2b00      	cmp	r3, #0
 8012886:	d002      	beq.n	801288e <SDMMC_GetCmdResp1+0x17e>
 8012888:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801288c:	e021      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012894:	2b00      	cmp	r3, #0
 8012896:	d002      	beq.n	801289e <SDMMC_GetCmdResp1+0x18e>
 8012898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801289c:	e019      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d002      	beq.n	80128ae <SDMMC_GetCmdResp1+0x19e>
 80128a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80128ac:	e011      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d002      	beq.n	80128be <SDMMC_GetCmdResp1+0x1ae>
 80128b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80128bc:	e009      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	f003 0308 	and.w	r3, r3, #8
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d002      	beq.n	80128ce <SDMMC_GetCmdResp1+0x1be>
 80128c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80128cc:	e001      	b.n	80128d2 <SDMMC_GetCmdResp1+0x1c2>
 80128ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80128d2:	4618      	mov	r0, r3
 80128d4:	371c      	adds	r7, #28
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd90      	pop	{r4, r7, pc}
 80128da:	bf00      	nop
 80128dc:	2000005c 	.word	0x2000005c
 80128e0:	10624dd3 	.word	0x10624dd3
 80128e4:	fdffe008 	.word	0xfdffe008

080128e8 <SDMMC_GetCmdResp2>:
 80128e8:	b490      	push	{r4, r7}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	4b1e      	ldr	r3, [pc, #120]	; (801296c <SDMMC_GetCmdResp2+0x84>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4a1e      	ldr	r2, [pc, #120]	; (8012970 <SDMMC_GetCmdResp2+0x88>)
 80128f6:	fba2 2303 	umull	r2, r3, r2, r3
 80128fa:	0a5b      	lsrs	r3, r3, #9
 80128fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012900:	fb02 f403 	mul.w	r4, r2, r3
 8012904:	4623      	mov	r3, r4
 8012906:	1e5c      	subs	r4, r3, #1
 8012908:	2b00      	cmp	r3, #0
 801290a:	d102      	bne.n	8012912 <SDMMC_GetCmdResp2+0x2a>
 801290c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012910:	e026      	b.n	8012960 <SDMMC_GetCmdResp2+0x78>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012916:	60fb      	str	r3, [r7, #12]
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801291e:	2b00      	cmp	r3, #0
 8012920:	d0f0      	beq.n	8012904 <SDMMC_GetCmdResp2+0x1c>
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012928:	2b00      	cmp	r3, #0
 801292a:	d1eb      	bne.n	8012904 <SDMMC_GetCmdResp2+0x1c>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012930:	f003 0304 	and.w	r3, r3, #4
 8012934:	2b00      	cmp	r3, #0
 8012936:	d004      	beq.n	8012942 <SDMMC_GetCmdResp2+0x5a>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2204      	movs	r2, #4
 801293c:	639a      	str	r2, [r3, #56]	; 0x38
 801293e:	2304      	movs	r3, #4
 8012940:	e00e      	b.n	8012960 <SDMMC_GetCmdResp2+0x78>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	2b00      	cmp	r3, #0
 801294c:	d004      	beq.n	8012958 <SDMMC_GetCmdResp2+0x70>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2201      	movs	r2, #1
 8012952:	639a      	str	r2, [r3, #56]	; 0x38
 8012954:	2301      	movs	r3, #1
 8012956:	e003      	b.n	8012960 <SDMMC_GetCmdResp2+0x78>
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	22c5      	movs	r2, #197	; 0xc5
 801295c:	639a      	str	r2, [r3, #56]	; 0x38
 801295e:	2300      	movs	r3, #0
 8012960:	4618      	mov	r0, r3
 8012962:	3710      	adds	r7, #16
 8012964:	46bd      	mov	sp, r7
 8012966:	bc90      	pop	{r4, r7}
 8012968:	4770      	bx	lr
 801296a:	bf00      	nop
 801296c:	2000005c 	.word	0x2000005c
 8012970:	10624dd3 	.word	0x10624dd3

08012974 <SDMMC_GetCmdResp3>:
 8012974:	b490      	push	{r4, r7}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	4b18      	ldr	r3, [pc, #96]	; (80129e0 <SDMMC_GetCmdResp3+0x6c>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4a18      	ldr	r2, [pc, #96]	; (80129e4 <SDMMC_GetCmdResp3+0x70>)
 8012982:	fba2 2303 	umull	r2, r3, r2, r3
 8012986:	0a5b      	lsrs	r3, r3, #9
 8012988:	f241 3288 	movw	r2, #5000	; 0x1388
 801298c:	fb02 f403 	mul.w	r4, r2, r3
 8012990:	4623      	mov	r3, r4
 8012992:	1e5c      	subs	r4, r3, #1
 8012994:	2b00      	cmp	r3, #0
 8012996:	d102      	bne.n	801299e <SDMMC_GetCmdResp3+0x2a>
 8012998:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801299c:	e01b      	b.n	80129d6 <SDMMC_GetCmdResp3+0x62>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129a2:	60fb      	str	r3, [r7, #12]
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d0f0      	beq.n	8012990 <SDMMC_GetCmdResp3+0x1c>
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d1eb      	bne.n	8012990 <SDMMC_GetCmdResp3+0x1c>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129bc:	f003 0304 	and.w	r3, r3, #4
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d004      	beq.n	80129ce <SDMMC_GetCmdResp3+0x5a>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2204      	movs	r2, #4
 80129c8:	639a      	str	r2, [r3, #56]	; 0x38
 80129ca:	2304      	movs	r3, #4
 80129cc:	e003      	b.n	80129d6 <SDMMC_GetCmdResp3+0x62>
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	22c5      	movs	r2, #197	; 0xc5
 80129d2:	639a      	str	r2, [r3, #56]	; 0x38
 80129d4:	2300      	movs	r3, #0
 80129d6:	4618      	mov	r0, r3
 80129d8:	3710      	adds	r7, #16
 80129da:	46bd      	mov	sp, r7
 80129dc:	bc90      	pop	{r4, r7}
 80129de:	4770      	bx	lr
 80129e0:	2000005c 	.word	0x2000005c
 80129e4:	10624dd3 	.word	0x10624dd3

080129e8 <SDMMC_GetCmdResp6>:
 80129e8:	b590      	push	{r4, r7, lr}
 80129ea:	b087      	sub	sp, #28
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	460b      	mov	r3, r1
 80129f2:	607a      	str	r2, [r7, #4]
 80129f4:	72fb      	strb	r3, [r7, #11]
 80129f6:	4b34      	ldr	r3, [pc, #208]	; (8012ac8 <SDMMC_GetCmdResp6+0xe0>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	4a34      	ldr	r2, [pc, #208]	; (8012acc <SDMMC_GetCmdResp6+0xe4>)
 80129fc:	fba2 2303 	umull	r2, r3, r2, r3
 8012a00:	0a5b      	lsrs	r3, r3, #9
 8012a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a06:	fb02 f403 	mul.w	r4, r2, r3
 8012a0a:	4623      	mov	r3, r4
 8012a0c:	1e5c      	subs	r4, r3, #1
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d102      	bne.n	8012a18 <SDMMC_GetCmdResp6+0x30>
 8012a12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a16:	e052      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a1c:	617b      	str	r3, [r7, #20]
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d0f0      	beq.n	8012a0a <SDMMC_GetCmdResp6+0x22>
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1eb      	bne.n	8012a0a <SDMMC_GetCmdResp6+0x22>
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a36:	f003 0304 	and.w	r3, r3, #4
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d004      	beq.n	8012a48 <SDMMC_GetCmdResp6+0x60>
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2204      	movs	r2, #4
 8012a42:	639a      	str	r2, [r3, #56]	; 0x38
 8012a44:	2304      	movs	r3, #4
 8012a46:	e03a      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a4c:	f003 0301 	and.w	r3, r3, #1
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d004      	beq.n	8012a5e <SDMMC_GetCmdResp6+0x76>
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	2201      	movs	r2, #1
 8012a58:	639a      	str	r2, [r3, #56]	; 0x38
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e02f      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
 8012a5e:	68f8      	ldr	r0, [r7, #12]
 8012a60:	f7ff fbac 	bl	80121bc <SDMMC_GetCommandResponse>
 8012a64:	4603      	mov	r3, r0
 8012a66:	461a      	mov	r2, r3
 8012a68:	7afb      	ldrb	r3, [r7, #11]
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d001      	beq.n	8012a72 <SDMMC_GetCmdResp6+0x8a>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e025      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	22c5      	movs	r2, #197	; 0xc5
 8012a76:	639a      	str	r2, [r3, #56]	; 0x38
 8012a78:	2100      	movs	r1, #0
 8012a7a:	68f8      	ldr	r0, [r7, #12]
 8012a7c:	f7ff fbab 	bl	80121d6 <SDMMC_GetResponse>
 8012a80:	6138      	str	r0, [r7, #16]
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d106      	bne.n	8012a9a <SDMMC_GetCmdResp6+0xb2>
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	0c1b      	lsrs	r3, r3, #16
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	801a      	strh	r2, [r3, #0]
 8012a96:	2300      	movs	r3, #0
 8012a98:	e011      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d002      	beq.n	8012aaa <SDMMC_GetCmdResp6+0xc2>
 8012aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012aa8:	e009      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d002      	beq.n	8012aba <SDMMC_GetCmdResp6+0xd2>
 8012ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ab8:	e001      	b.n	8012abe <SDMMC_GetCmdResp6+0xd6>
 8012aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012abe:	4618      	mov	r0, r3
 8012ac0:	371c      	adds	r7, #28
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd90      	pop	{r4, r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	2000005c 	.word	0x2000005c
 8012acc:	10624dd3 	.word	0x10624dd3

08012ad0 <SDMMC_GetCmdResp7>:
 8012ad0:	b490      	push	{r4, r7}
 8012ad2:	b084      	sub	sp, #16
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	4b21      	ldr	r3, [pc, #132]	; (8012b60 <SDMMC_GetCmdResp7+0x90>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4a21      	ldr	r2, [pc, #132]	; (8012b64 <SDMMC_GetCmdResp7+0x94>)
 8012ade:	fba2 2303 	umull	r2, r3, r2, r3
 8012ae2:	0a5b      	lsrs	r3, r3, #9
 8012ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ae8:	fb02 f403 	mul.w	r4, r2, r3
 8012aec:	4623      	mov	r3, r4
 8012aee:	1e5c      	subs	r4, r3, #1
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d102      	bne.n	8012afa <SDMMC_GetCmdResp7+0x2a>
 8012af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012af8:	e02c      	b.n	8012b54 <SDMMC_GetCmdResp7+0x84>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012afe:	60fb      	str	r3, [r7, #12]
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d0f0      	beq.n	8012aec <SDMMC_GetCmdResp7+0x1c>
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d1eb      	bne.n	8012aec <SDMMC_GetCmdResp7+0x1c>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b18:	f003 0304 	and.w	r3, r3, #4
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d004      	beq.n	8012b2a <SDMMC_GetCmdResp7+0x5a>
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2204      	movs	r2, #4
 8012b24:	639a      	str	r2, [r3, #56]	; 0x38
 8012b26:	2304      	movs	r3, #4
 8012b28:	e014      	b.n	8012b54 <SDMMC_GetCmdResp7+0x84>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b2e:	f003 0301 	and.w	r3, r3, #1
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d004      	beq.n	8012b40 <SDMMC_GetCmdResp7+0x70>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2201      	movs	r2, #1
 8012b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	e009      	b.n	8012b54 <SDMMC_GetCmdResp7+0x84>
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d002      	beq.n	8012b52 <SDMMC_GetCmdResp7+0x82>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2240      	movs	r2, #64	; 0x40
 8012b50:	639a      	str	r2, [r3, #56]	; 0x38
 8012b52:	2300      	movs	r3, #0
 8012b54:	4618      	mov	r0, r3
 8012b56:	3710      	adds	r7, #16
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bc90      	pop	{r4, r7}
 8012b5c:	4770      	bx	lr
 8012b5e:	bf00      	nop
 8012b60:	2000005c 	.word	0x2000005c
 8012b64:	10624dd3 	.word	0x10624dd3

08012b68 <USB_CoreInit>:
 8012b68:	b084      	sub	sp, #16
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b084      	sub	sp, #16
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	6078      	str	r0, [r7, #4]
 8012b72:	f107 001c 	add.w	r0, r7, #28
 8012b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7c:	2b01      	cmp	r3, #1
 8012b7e:	d120      	bne.n	8012bc2 <USB_CoreInit+0x5a>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	639a      	str	r2, [r3, #56]	; 0x38
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	68da      	ldr	r2, [r3, #12]
 8012b90:	4b20      	ldr	r3, [pc, #128]	; (8012c14 <USB_CoreInit+0xac>)
 8012b92:	4013      	ands	r3, r2
 8012b94:	687a      	ldr	r2, [r7, #4]
 8012b96:	60d3      	str	r3, [r2, #12]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	68db      	ldr	r3, [r3, #12]
 8012b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	60da      	str	r2, [r3, #12]
 8012ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ba6:	2b01      	cmp	r3, #1
 8012ba8:	d105      	bne.n	8012bb6 <USB_CoreInit+0x4e>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	60da      	str	r2, [r3, #12]
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	f000 f942 	bl	8012e40 <USB_CoreReset>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	73fb      	strb	r3, [r7, #15]
 8012bc0:	e010      	b.n	8012be4 <USB_CoreInit+0x7c>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	68db      	ldr	r3, [r3, #12]
 8012bc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	60da      	str	r2, [r3, #12]
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 f936 	bl	8012e40 <USB_CoreReset>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	73fb      	strb	r3, [r7, #15]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	639a      	str	r2, [r3, #56]	; 0x38
 8012be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d10b      	bne.n	8012c02 <USB_CoreInit+0x9a>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	689b      	ldr	r3, [r3, #8]
 8012bee:	f043 0206 	orr.w	r2, r3, #6
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	609a      	str	r2, [r3, #8]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	689b      	ldr	r3, [r3, #8]
 8012bfa:	f043 0220 	orr.w	r2, r3, #32
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	609a      	str	r2, [r3, #8]
 8012c02:	7bfb      	ldrb	r3, [r7, #15]
 8012c04:	4618      	mov	r0, r3
 8012c06:	3710      	adds	r7, #16
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012c0e:	b004      	add	sp, #16
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	ffbdffbf 	.word	0xffbdffbf

08012c18 <USB_EnableGlobalInt>:
 8012c18:	b480      	push	{r7}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	689b      	ldr	r3, [r3, #8]
 8012c24:	f043 0201 	orr.w	r2, r3, #1
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	609a      	str	r2, [r3, #8]
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	4618      	mov	r0, r3
 8012c30:	370c      	adds	r7, #12
 8012c32:	46bd      	mov	sp, r7
 8012c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c38:	4770      	bx	lr

08012c3a <USB_DisableGlobalInt>:
 8012c3a:	b480      	push	{r7}
 8012c3c:	b083      	sub	sp, #12
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	689b      	ldr	r3, [r3, #8]
 8012c46:	f023 0201 	bic.w	r2, r3, #1
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	609a      	str	r2, [r3, #8]
 8012c4e:	2300      	movs	r3, #0
 8012c50:	4618      	mov	r0, r3
 8012c52:	370c      	adds	r7, #12
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <USB_SetCurrentMode>:
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	460b      	mov	r3, r1
 8012c66:	70fb      	strb	r3, [r7, #3]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	68db      	ldr	r3, [r3, #12]
 8012c6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	60da      	str	r2, [r3, #12]
 8012c74:	78fb      	ldrb	r3, [r7, #3]
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d106      	bne.n	8012c88 <USB_SetCurrentMode+0x2c>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	60da      	str	r2, [r3, #12]
 8012c86:	e00b      	b.n	8012ca0 <USB_SetCurrentMode+0x44>
 8012c88:	78fb      	ldrb	r3, [r7, #3]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d106      	bne.n	8012c9c <USB_SetCurrentMode+0x40>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	68db      	ldr	r3, [r3, #12]
 8012c92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	60da      	str	r2, [r3, #12]
 8012c9a:	e001      	b.n	8012ca0 <USB_SetCurrentMode+0x44>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e003      	b.n	8012ca8 <USB_SetCurrentMode+0x4c>
 8012ca0:	2032      	movs	r0, #50	; 0x32
 8012ca2:	f7f5 fadd 	bl	8008260 <HAL_Delay>
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <USB_FlushTxFifo>:
 8012cb0:	b480      	push	{r7}
 8012cb2:	b085      	sub	sp, #20
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	6039      	str	r1, [r7, #0]
 8012cba:	2300      	movs	r3, #0
 8012cbc:	60fb      	str	r3, [r7, #12]
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	019b      	lsls	r3, r3, #6
 8012cc2:	f043 0220 	orr.w	r2, r3, #32
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	611a      	str	r2, [r3, #16]
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	3301      	adds	r3, #1
 8012cce:	60fb      	str	r3, [r7, #12]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	4a09      	ldr	r2, [pc, #36]	; (8012cf8 <USB_FlushTxFifo+0x48>)
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d901      	bls.n	8012cdc <USB_FlushTxFifo+0x2c>
 8012cd8:	2303      	movs	r3, #3
 8012cda:	e006      	b.n	8012cea <USB_FlushTxFifo+0x3a>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	691b      	ldr	r3, [r3, #16]
 8012ce0:	f003 0320 	and.w	r3, r3, #32
 8012ce4:	2b20      	cmp	r3, #32
 8012ce6:	d0f0      	beq.n	8012cca <USB_FlushTxFifo+0x1a>
 8012ce8:	2300      	movs	r3, #0
 8012cea:	4618      	mov	r0, r3
 8012cec:	3714      	adds	r7, #20
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop
 8012cf8:	00030d40 	.word	0x00030d40

08012cfc <USB_FlushRxFifo>:
 8012cfc:	b480      	push	{r7}
 8012cfe:	b085      	sub	sp, #20
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	2300      	movs	r3, #0
 8012d06:	60fb      	str	r3, [r7, #12]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2210      	movs	r2, #16
 8012d0c:	611a      	str	r2, [r3, #16]
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	3301      	adds	r3, #1
 8012d12:	60fb      	str	r3, [r7, #12]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	4a09      	ldr	r2, [pc, #36]	; (8012d3c <USB_FlushRxFifo+0x40>)
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d901      	bls.n	8012d20 <USB_FlushRxFifo+0x24>
 8012d1c:	2303      	movs	r3, #3
 8012d1e:	e006      	b.n	8012d2e <USB_FlushRxFifo+0x32>
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	691b      	ldr	r3, [r3, #16]
 8012d24:	f003 0310 	and.w	r3, r3, #16
 8012d28:	2b10      	cmp	r3, #16
 8012d2a:	d0f0      	beq.n	8012d0e <USB_FlushRxFifo+0x12>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3714      	adds	r7, #20
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop
 8012d3c:	00030d40 	.word	0x00030d40

08012d40 <USB_WritePacket>:
 8012d40:	b480      	push	{r7}
 8012d42:	b089      	sub	sp, #36	; 0x24
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	60f8      	str	r0, [r7, #12]
 8012d48:	60b9      	str	r1, [r7, #8]
 8012d4a:	4611      	mov	r1, r2
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	460b      	mov	r3, r1
 8012d50:	71fb      	strb	r3, [r7, #7]
 8012d52:	4613      	mov	r3, r2
 8012d54:	80bb      	strh	r3, [r7, #4]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	617b      	str	r3, [r7, #20]
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	61fb      	str	r3, [r7, #28]
 8012d5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d11a      	bne.n	8012d9c <USB_WritePacket+0x5c>
 8012d66:	88bb      	ldrh	r3, [r7, #4]
 8012d68:	3303      	adds	r3, #3
 8012d6a:	089b      	lsrs	r3, r3, #2
 8012d6c:	613b      	str	r3, [r7, #16]
 8012d6e:	2300      	movs	r3, #0
 8012d70:	61bb      	str	r3, [r7, #24]
 8012d72:	e00f      	b.n	8012d94 <USB_WritePacket+0x54>
 8012d74:	79fb      	ldrb	r3, [r7, #7]
 8012d76:	031a      	lsls	r2, r3, #12
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	4413      	add	r3, r2
 8012d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012d80:	461a      	mov	r2, r3
 8012d82:	69fb      	ldr	r3, [r7, #28]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	6013      	str	r3, [r2, #0]
 8012d88:	69fb      	ldr	r3, [r7, #28]
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	61fb      	str	r3, [r7, #28]
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	3301      	adds	r3, #1
 8012d92:	61bb      	str	r3, [r7, #24]
 8012d94:	69ba      	ldr	r2, [r7, #24]
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d3eb      	bcc.n	8012d74 <USB_WritePacket+0x34>
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3724      	adds	r7, #36	; 0x24
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr

08012daa <USB_ReadPacket>:
 8012daa:	b480      	push	{r7}
 8012dac:	b089      	sub	sp, #36	; 0x24
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	60f8      	str	r0, [r7, #12]
 8012db2:	60b9      	str	r1, [r7, #8]
 8012db4:	4613      	mov	r3, r2
 8012db6:	80fb      	strh	r3, [r7, #6]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	617b      	str	r3, [r7, #20]
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	61fb      	str	r3, [r7, #28]
 8012dc0:	88fb      	ldrh	r3, [r7, #6]
 8012dc2:	3303      	adds	r3, #3
 8012dc4:	089b      	lsrs	r3, r3, #2
 8012dc6:	613b      	str	r3, [r7, #16]
 8012dc8:	2300      	movs	r3, #0
 8012dca:	61bb      	str	r3, [r7, #24]
 8012dcc:	e00b      	b.n	8012de6 <USB_ReadPacket+0x3c>
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	601a      	str	r2, [r3, #0]
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	3304      	adds	r3, #4
 8012dde:	61fb      	str	r3, [r7, #28]
 8012de0:	69bb      	ldr	r3, [r7, #24]
 8012de2:	3301      	adds	r3, #1
 8012de4:	61bb      	str	r3, [r7, #24]
 8012de6:	69ba      	ldr	r2, [r7, #24]
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d3ef      	bcc.n	8012dce <USB_ReadPacket+0x24>
 8012dee:	69fb      	ldr	r3, [r7, #28]
 8012df0:	4618      	mov	r0, r3
 8012df2:	3724      	adds	r7, #36	; 0x24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr

08012dfc <USB_ReadInterrupts>:
 8012dfc:	b480      	push	{r7}
 8012dfe:	b085      	sub	sp, #20
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	695b      	ldr	r3, [r3, #20]
 8012e08:	60fb      	str	r3, [r7, #12]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	699b      	ldr	r3, [r3, #24]
 8012e0e:	68fa      	ldr	r2, [r7, #12]
 8012e10:	4013      	ands	r3, r2
 8012e12:	60fb      	str	r3, [r7, #12]
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	4618      	mov	r0, r3
 8012e18:	3714      	adds	r7, #20
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr

08012e22 <USB_GetMode>:
 8012e22:	b480      	push	{r7}
 8012e24:	b083      	sub	sp, #12
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	695b      	ldr	r3, [r3, #20]
 8012e2e:	f003 0301 	and.w	r3, r3, #1
 8012e32:	4618      	mov	r0, r3
 8012e34:	370c      	adds	r7, #12
 8012e36:	46bd      	mov	sp, r7
 8012e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3c:	4770      	bx	lr
	...

08012e40 <USB_CoreReset>:
 8012e40:	b480      	push	{r7}
 8012e42:	b085      	sub	sp, #20
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	2300      	movs	r3, #0
 8012e4a:	60fb      	str	r3, [r7, #12]
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	60fb      	str	r3, [r7, #12]
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	4a13      	ldr	r2, [pc, #76]	; (8012ea4 <USB_CoreReset+0x64>)
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d901      	bls.n	8012e5e <USB_CoreReset+0x1e>
 8012e5a:	2303      	movs	r3, #3
 8012e5c:	e01b      	b.n	8012e96 <USB_CoreReset+0x56>
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	daf2      	bge.n	8012e4c <USB_CoreReset+0xc>
 8012e66:	2300      	movs	r3, #0
 8012e68:	60fb      	str	r3, [r7, #12]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	691b      	ldr	r3, [r3, #16]
 8012e6e:	f043 0201 	orr.w	r2, r3, #1
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	611a      	str	r2, [r3, #16]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	60fb      	str	r3, [r7, #12]
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	4a09      	ldr	r2, [pc, #36]	; (8012ea4 <USB_CoreReset+0x64>)
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d901      	bls.n	8012e88 <USB_CoreReset+0x48>
 8012e84:	2303      	movs	r3, #3
 8012e86:	e006      	b.n	8012e96 <USB_CoreReset+0x56>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	691b      	ldr	r3, [r3, #16]
 8012e8c:	f003 0301 	and.w	r3, r3, #1
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	d0f0      	beq.n	8012e76 <USB_CoreReset+0x36>
 8012e94:	2300      	movs	r3, #0
 8012e96:	4618      	mov	r0, r3
 8012e98:	3714      	adds	r7, #20
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	00030d40 	.word	0x00030d40

08012ea8 <USB_HostInit>:
 8012ea8:	b084      	sub	sp, #16
 8012eaa:	b580      	push	{r7, lr}
 8012eac:	b084      	sub	sp, #16
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	6078      	str	r0, [r7, #4]
 8012eb2:	f107 001c 	add.w	r0, r7, #28
 8012eb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	60bb      	str	r3, [r7, #8]
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	6013      	str	r3, [r2, #0]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ece:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	639a      	str	r2, [r3, #56]	; 0x38
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d018      	beq.n	8012f14 <USB_HostInit+0x6c>
 8012ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d10a      	bne.n	8012efe <USB_HostInit+0x56>
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	68ba      	ldr	r2, [r7, #8]
 8012ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012ef6:	f043 0304 	orr.w	r3, r3, #4
 8012efa:	6013      	str	r3, [r2, #0]
 8012efc:	e014      	b.n	8012f28 <USB_HostInit+0x80>
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	68ba      	ldr	r2, [r7, #8]
 8012f08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f0c:	f023 0304 	bic.w	r3, r3, #4
 8012f10:	6013      	str	r3, [r2, #0]
 8012f12:	e009      	b.n	8012f28 <USB_HostInit+0x80>
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	68ba      	ldr	r2, [r7, #8]
 8012f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f22:	f023 0304 	bic.w	r3, r3, #4
 8012f26:	6013      	str	r3, [r2, #0]
 8012f28:	2110      	movs	r1, #16
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7ff fec0 	bl	8012cb0 <USB_FlushTxFifo>
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7ff fee3 	bl	8012cfc <USB_FlushRxFifo>
 8012f36:	2300      	movs	r3, #0
 8012f38:	60fb      	str	r3, [r7, #12]
 8012f3a:	e015      	b.n	8012f68 <USB_HostInit+0xc0>
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	015a      	lsls	r2, r3, #5
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	4413      	add	r3, r2
 8012f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f48:	461a      	mov	r2, r3
 8012f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f4e:	6093      	str	r3, [r2, #8]
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	015a      	lsls	r2, r3, #5
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	4413      	add	r3, r2
 8012f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f5c:	461a      	mov	r2, r3
 8012f5e:	2300      	movs	r3, #0
 8012f60:	60d3      	str	r3, [r2, #12]
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	3301      	adds	r3, #1
 8012f66:	60fb      	str	r3, [r7, #12]
 8012f68:	6a3b      	ldr	r3, [r7, #32]
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d3e5      	bcc.n	8012f3c <USB_HostInit+0x94>
 8012f70:	2101      	movs	r1, #1
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f000 f8ac 	bl	80130d0 <USB_DriveVbus>
 8012f78:	20c8      	movs	r0, #200	; 0xc8
 8012f7a:	f7f5 f971 	bl	8008260 <HAL_Delay>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2200      	movs	r2, #0
 8012f82:	619a      	str	r2, [r3, #24]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f04f 32ff 	mov.w	r2, #4294967295
 8012f8a:	615a      	str	r2, [r3, #20]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00b      	beq.n	8012fb0 <USB_HostInit+0x108>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f9e:	625a      	str	r2, [r3, #36]	; 0x24
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	4a14      	ldr	r2, [pc, #80]	; (8012ff4 <USB_HostInit+0x14c>)
 8012fa4:	629a      	str	r2, [r3, #40]	; 0x28
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	4a13      	ldr	r2, [pc, #76]	; (8012ff8 <USB_HostInit+0x150>)
 8012faa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8012fae:	e009      	b.n	8012fc4 <USB_HostInit+0x11c>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2280      	movs	r2, #128	; 0x80
 8012fb4:	625a      	str	r2, [r3, #36]	; 0x24
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	4a10      	ldr	r2, [pc, #64]	; (8012ffc <USB_HostInit+0x154>)
 8012fba:	629a      	str	r2, [r3, #40]	; 0x28
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	4a10      	ldr	r2, [pc, #64]	; (8013000 <USB_HostInit+0x158>)
 8012fc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8012fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d105      	bne.n	8012fd6 <USB_HostInit+0x12e>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	699b      	ldr	r3, [r3, #24]
 8012fce:	f043 0210 	orr.w	r2, r3, #16
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	619a      	str	r2, [r3, #24]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	699a      	ldr	r2, [r3, #24]
 8012fda:	4b0a      	ldr	r3, [pc, #40]	; (8013004 <USB_HostInit+0x15c>)
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	6193      	str	r3, [r2, #24]
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3710      	adds	r7, #16
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012fee:	b004      	add	sp, #16
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	01000200 	.word	0x01000200
 8012ff8:	00e00300 	.word	0x00e00300
 8012ffc:	00600080 	.word	0x00600080
 8013000:	004000e0 	.word	0x004000e0
 8013004:	a3200008 	.word	0xa3200008

08013008 <USB_InitFSLSPClkSel>:
 8013008:	b480      	push	{r7}
 801300a:	b085      	sub	sp, #20
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	460b      	mov	r3, r1
 8013012:	70fb      	strb	r3, [r7, #3]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	60fb      	str	r3, [r7, #12]
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	68fa      	ldr	r2, [r7, #12]
 8013022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013026:	f023 0303 	bic.w	r3, r3, #3
 801302a:	6013      	str	r3, [r2, #0]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	78fb      	ldrb	r3, [r7, #3]
 8013036:	f003 0303 	and.w	r3, r3, #3
 801303a:	68f9      	ldr	r1, [r7, #12]
 801303c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8013040:	4313      	orrs	r3, r2
 8013042:	600b      	str	r3, [r1, #0]
 8013044:	78fb      	ldrb	r3, [r7, #3]
 8013046:	2b01      	cmp	r3, #1
 8013048:	d107      	bne.n	801305a <USB_InitFSLSPClkSel+0x52>
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013050:	461a      	mov	r2, r3
 8013052:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8013056:	6053      	str	r3, [r2, #4]
 8013058:	e009      	b.n	801306e <USB_InitFSLSPClkSel+0x66>
 801305a:	78fb      	ldrb	r3, [r7, #3]
 801305c:	2b02      	cmp	r3, #2
 801305e:	d106      	bne.n	801306e <USB_InitFSLSPClkSel+0x66>
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013066:	461a      	mov	r2, r3
 8013068:	f241 7370 	movw	r3, #6000	; 0x1770
 801306c:	6053      	str	r3, [r2, #4]
 801306e:	2300      	movs	r3, #0
 8013070:	4618      	mov	r0, r3
 8013072:	3714      	adds	r7, #20
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr

0801307c <USB_ResetPort>:
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	60fb      	str	r3, [r7, #12]
 8013088:	2300      	movs	r3, #0
 801308a:	60bb      	str	r3, [r7, #8]
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	60bb      	str	r3, [r7, #8]
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801309c:	60bb      	str	r3, [r7, #8]
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80130a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130aa:	6013      	str	r3, [r2, #0]
 80130ac:	2064      	movs	r0, #100	; 0x64
 80130ae:	f7f5 f8d7 	bl	8008260 <HAL_Delay>
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	68fa      	ldr	r2, [r7, #12]
 80130b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80130ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80130be:	6013      	str	r3, [r2, #0]
 80130c0:	200a      	movs	r0, #10
 80130c2:	f7f5 f8cd 	bl	8008260 <HAL_Delay>
 80130c6:	2300      	movs	r3, #0
 80130c8:	4618      	mov	r0, r3
 80130ca:	3710      	adds	r7, #16
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}

080130d0 <USB_DriveVbus>:
 80130d0:	b480      	push	{r7}
 80130d2:	b085      	sub	sp, #20
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	460b      	mov	r3, r1
 80130da:	70fb      	strb	r3, [r7, #3]
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	60fb      	str	r3, [r7, #12]
 80130e0:	2300      	movs	r3, #0
 80130e2:	60bb      	str	r3, [r7, #8]
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	60bb      	str	r3, [r7, #8]
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80130f4:	60bb      	str	r3, [r7, #8]
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d109      	bne.n	8013114 <USB_DriveVbus+0x44>
 8013100:	78fb      	ldrb	r3, [r7, #3]
 8013102:	2b01      	cmp	r3, #1
 8013104:	d106      	bne.n	8013114 <USB_DriveVbus+0x44>
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	68fa      	ldr	r2, [r7, #12]
 801310a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801310e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013112:	6013      	str	r3, [r2, #0]
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801311e:	d109      	bne.n	8013134 <USB_DriveVbus+0x64>
 8013120:	78fb      	ldrb	r3, [r7, #3]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d106      	bne.n	8013134 <USB_DriveVbus+0x64>
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	68fa      	ldr	r2, [r7, #12]
 801312a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801312e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013132:	6013      	str	r3, [r2, #0]
 8013134:	2300      	movs	r3, #0
 8013136:	4618      	mov	r0, r3
 8013138:	3714      	adds	r7, #20
 801313a:	46bd      	mov	sp, r7
 801313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013140:	4770      	bx	lr

08013142 <USB_GetHostSpeed>:
 8013142:	b480      	push	{r7}
 8013144:	b085      	sub	sp, #20
 8013146:	af00      	add	r7, sp, #0
 8013148:	6078      	str	r0, [r7, #4]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	60fb      	str	r3, [r7, #12]
 801314e:	2300      	movs	r3, #0
 8013150:	60bb      	str	r3, [r7, #8]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	60bb      	str	r3, [r7, #8]
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	0c5b      	lsrs	r3, r3, #17
 8013160:	f003 0303 	and.w	r3, r3, #3
 8013164:	4618      	mov	r0, r3
 8013166:	3714      	adds	r7, #20
 8013168:	46bd      	mov	sp, r7
 801316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316e:	4770      	bx	lr

08013170 <USB_GetCurrentFrame>:
 8013170:	b480      	push	{r7}
 8013172:	b085      	sub	sp, #20
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	60fb      	str	r3, [r7, #12]
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013182:	689b      	ldr	r3, [r3, #8]
 8013184:	b29b      	uxth	r3, r3
 8013186:	4618      	mov	r0, r3
 8013188:	3714      	adds	r7, #20
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
	...

08013194 <USB_HC_Init>:
 8013194:	b480      	push	{r7}
 8013196:	b087      	sub	sp, #28
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	4608      	mov	r0, r1
 801319e:	4611      	mov	r1, r2
 80131a0:	461a      	mov	r2, r3
 80131a2:	4603      	mov	r3, r0
 80131a4:	70fb      	strb	r3, [r7, #3]
 80131a6:	460b      	mov	r3, r1
 80131a8:	70bb      	strb	r3, [r7, #2]
 80131aa:	4613      	mov	r3, r2
 80131ac:	707b      	strb	r3, [r7, #1]
 80131ae:	2300      	movs	r3, #0
 80131b0:	75fb      	strb	r3, [r7, #23]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	60bb      	str	r3, [r7, #8]
 80131b6:	78fb      	ldrb	r3, [r7, #3]
 80131b8:	015a      	lsls	r2, r3, #5
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	4413      	add	r3, r2
 80131be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80131c2:	461a      	mov	r2, r3
 80131c4:	f04f 33ff 	mov.w	r3, #4294967295
 80131c8:	6093      	str	r3, [r2, #8]
 80131ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80131ce:	2b03      	cmp	r3, #3
 80131d0:	d87e      	bhi.n	80132d0 <USB_HC_Init+0x13c>
 80131d2:	a201      	add	r2, pc, #4	; (adr r2, 80131d8 <USB_HC_Init+0x44>)
 80131d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131d8:	080131e9 	.word	0x080131e9
 80131dc:	08013293 	.word	0x08013293
 80131e0:	080131e9 	.word	0x080131e9
 80131e4:	08013255 	.word	0x08013255
 80131e8:	78fb      	ldrb	r3, [r7, #3]
 80131ea:	015a      	lsls	r2, r3, #5
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	4413      	add	r3, r2
 80131f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80131f4:	461a      	mov	r2, r3
 80131f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80131fa:	60d3      	str	r3, [r2, #12]
 80131fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8013200:	2b00      	cmp	r3, #0
 8013202:	da10      	bge.n	8013226 <USB_HC_Init+0x92>
 8013204:	78fb      	ldrb	r3, [r7, #3]
 8013206:	015a      	lsls	r2, r3, #5
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	4413      	add	r3, r2
 801320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	78fa      	ldrb	r2, [r7, #3]
 8013214:	0151      	lsls	r1, r2, #5
 8013216:	68ba      	ldr	r2, [r7, #8]
 8013218:	440a      	add	r2, r1
 801321a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013222:	60d3      	str	r3, [r2, #12]
 8013224:	e057      	b.n	80132d6 <USB_HC_Init+0x142>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801322e:	2b00      	cmp	r3, #0
 8013230:	d051      	beq.n	80132d6 <USB_HC_Init+0x142>
 8013232:	78fb      	ldrb	r3, [r7, #3]
 8013234:	015a      	lsls	r2, r3, #5
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	4413      	add	r3, r2
 801323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801323e:	68db      	ldr	r3, [r3, #12]
 8013240:	78fa      	ldrb	r2, [r7, #3]
 8013242:	0151      	lsls	r1, r2, #5
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	440a      	add	r2, r1
 8013248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801324c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013250:	60d3      	str	r3, [r2, #12]
 8013252:	e040      	b.n	80132d6 <USB_HC_Init+0x142>
 8013254:	78fb      	ldrb	r3, [r7, #3]
 8013256:	015a      	lsls	r2, r3, #5
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	4413      	add	r3, r2
 801325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013260:	461a      	mov	r2, r3
 8013262:	f240 639d 	movw	r3, #1693	; 0x69d
 8013266:	60d3      	str	r3, [r2, #12]
 8013268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801326c:	2b00      	cmp	r3, #0
 801326e:	da34      	bge.n	80132da <USB_HC_Init+0x146>
 8013270:	78fb      	ldrb	r3, [r7, #3]
 8013272:	015a      	lsls	r2, r3, #5
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	4413      	add	r3, r2
 8013278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	78fa      	ldrb	r2, [r7, #3]
 8013280:	0151      	lsls	r1, r2, #5
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	440a      	add	r2, r1
 8013286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801328a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801328e:	60d3      	str	r3, [r2, #12]
 8013290:	e023      	b.n	80132da <USB_HC_Init+0x146>
 8013292:	78fb      	ldrb	r3, [r7, #3]
 8013294:	015a      	lsls	r2, r3, #5
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	4413      	add	r3, r2
 801329a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801329e:	461a      	mov	r2, r3
 80132a0:	f240 2325 	movw	r3, #549	; 0x225
 80132a4:	60d3      	str	r3, [r2, #12]
 80132a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	da17      	bge.n	80132de <USB_HC_Init+0x14a>
 80132ae:	78fb      	ldrb	r3, [r7, #3]
 80132b0:	015a      	lsls	r2, r3, #5
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	4413      	add	r3, r2
 80132b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	78fa      	ldrb	r2, [r7, #3]
 80132be:	0151      	lsls	r1, r2, #5
 80132c0:	68ba      	ldr	r2, [r7, #8]
 80132c2:	440a      	add	r2, r1
 80132c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80132c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80132cc:	60d3      	str	r3, [r2, #12]
 80132ce:	e006      	b.n	80132de <USB_HC_Init+0x14a>
 80132d0:	2301      	movs	r3, #1
 80132d2:	75fb      	strb	r3, [r7, #23]
 80132d4:	e004      	b.n	80132e0 <USB_HC_Init+0x14c>
 80132d6:	bf00      	nop
 80132d8:	e002      	b.n	80132e0 <USB_HC_Init+0x14c>
 80132da:	bf00      	nop
 80132dc:	e000      	b.n	80132e0 <USB_HC_Init+0x14c>
 80132de:	bf00      	nop
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80132e6:	699a      	ldr	r2, [r3, #24]
 80132e8:	78fb      	ldrb	r3, [r7, #3]
 80132ea:	f003 030f 	and.w	r3, r3, #15
 80132ee:	2101      	movs	r1, #1
 80132f0:	fa01 f303 	lsl.w	r3, r1, r3
 80132f4:	68b9      	ldr	r1, [r7, #8]
 80132f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80132fa:	4313      	orrs	r3, r2
 80132fc:	618b      	str	r3, [r1, #24]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	699b      	ldr	r3, [r3, #24]
 8013302:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	619a      	str	r2, [r3, #24]
 801330a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801330e:	2b00      	cmp	r3, #0
 8013310:	da03      	bge.n	801331a <USB_HC_Init+0x186>
 8013312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013316:	613b      	str	r3, [r7, #16]
 8013318:	e001      	b.n	801331e <USB_HC_Init+0x18a>
 801331a:	2300      	movs	r3, #0
 801331c:	613b      	str	r3, [r7, #16]
 801331e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013322:	2b02      	cmp	r3, #2
 8013324:	d103      	bne.n	801332e <USB_HC_Init+0x19a>
 8013326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801332a:	60fb      	str	r3, [r7, #12]
 801332c:	e001      	b.n	8013332 <USB_HC_Init+0x19e>
 801332e:	2300      	movs	r3, #0
 8013330:	60fb      	str	r3, [r7, #12]
 8013332:	787b      	ldrb	r3, [r7, #1]
 8013334:	059b      	lsls	r3, r3, #22
 8013336:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
 801333a:	78bb      	ldrb	r3, [r7, #2]
 801333c:	02db      	lsls	r3, r3, #11
 801333e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8013342:	431a      	orrs	r2, r3
 8013344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013348:	049b      	lsls	r3, r3, #18
 801334a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 801334e:	431a      	orrs	r2, r3
 8013350:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013356:	431a      	orrs	r2, r3
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	431a      	orrs	r2, r3
 801335c:	78fb      	ldrb	r3, [r7, #3]
 801335e:	0159      	lsls	r1, r3, #5
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	440b      	add	r3, r1
 8013364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013368:	4619      	mov	r1, r3
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	4313      	orrs	r3, r2
 801336e:	600b      	str	r3, [r1, #0]
 8013370:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013374:	2b03      	cmp	r3, #3
 8013376:	d10f      	bne.n	8013398 <USB_HC_Init+0x204>
 8013378:	78fb      	ldrb	r3, [r7, #3]
 801337a:	015a      	lsls	r2, r3, #5
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	4413      	add	r3, r2
 8013380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	78fa      	ldrb	r2, [r7, #3]
 8013388:	0151      	lsls	r1, r2, #5
 801338a:	68ba      	ldr	r2, [r7, #8]
 801338c:	440a      	add	r2, r1
 801338e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013396:	6013      	str	r3, [r2, #0]
 8013398:	7dfb      	ldrb	r3, [r7, #23]
 801339a:	4618      	mov	r0, r3
 801339c:	371c      	adds	r7, #28
 801339e:	46bd      	mov	sp, r7
 80133a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop

080133a8 <USB_HC_StartXfer>:
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b08c      	sub	sp, #48	; 0x30
 80133ac:	af02      	add	r7, sp, #8
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	60b9      	str	r1, [r7, #8]
 80133b2:	4613      	mov	r3, r2
 80133b4:	71fb      	strb	r3, [r7, #7]
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	623b      	str	r3, [r7, #32]
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	785b      	ldrb	r3, [r3, #1]
 80133be:	61fb      	str	r3, [r7, #28]
 80133c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133c4:	837b      	strh	r3, [r7, #26]
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d028      	beq.n	8013424 <USB_HC_StartXfer+0x7c>
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	791b      	ldrb	r3, [r3, #4]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d124      	bne.n	8013424 <USB_HC_StartXfer+0x7c>
 80133da:	79fb      	ldrb	r3, [r7, #7]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d10b      	bne.n	80133f8 <USB_HC_StartXfer+0x50>
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	795b      	ldrb	r3, [r3, #5]
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	d107      	bne.n	80133f8 <USB_HC_StartXfer+0x50>
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	785b      	ldrb	r3, [r3, #1]
 80133ec:	4619      	mov	r1, r3
 80133ee:	68f8      	ldr	r0, [r7, #12]
 80133f0:	f000 fa2e 	bl	8013850 <USB_DoPing>
 80133f4:	2300      	movs	r3, #0
 80133f6:	e112      	b.n	801361e <USB_HC_StartXfer+0x276>
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d112      	bne.n	8013424 <USB_HC_StartXfer+0x7c>
 80133fe:	69fb      	ldr	r3, [r7, #28]
 8013400:	015a      	lsls	r2, r3, #5
 8013402:	6a3b      	ldr	r3, [r7, #32]
 8013404:	4413      	add	r3, r2
 8013406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	69fa      	ldr	r2, [r7, #28]
 801340e:	0151      	lsls	r1, r2, #5
 8013410:	6a3a      	ldr	r2, [r7, #32]
 8013412:	440a      	add	r2, r1
 8013414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013418:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 801341c:	60d3      	str	r3, [r2, #12]
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	2200      	movs	r2, #0
 8013422:	715a      	strb	r2, [r3, #5]
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	691b      	ldr	r3, [r3, #16]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d018      	beq.n	801345e <USB_HC_StartXfer+0xb6>
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	691b      	ldr	r3, [r3, #16]
 8013430:	68ba      	ldr	r2, [r7, #8]
 8013432:	8912      	ldrh	r2, [r2, #8]
 8013434:	4413      	add	r3, r2
 8013436:	3b01      	subs	r3, #1
 8013438:	68ba      	ldr	r2, [r7, #8]
 801343a:	8912      	ldrh	r2, [r2, #8]
 801343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013440:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013442:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013444:	8b7b      	ldrh	r3, [r7, #26]
 8013446:	429a      	cmp	r2, r3
 8013448:	d90b      	bls.n	8013462 <USB_HC_StartXfer+0xba>
 801344a:	8b7b      	ldrh	r3, [r7, #26]
 801344c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801344e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013450:	68ba      	ldr	r2, [r7, #8]
 8013452:	8912      	ldrh	r2, [r2, #8]
 8013454:	fb02 f203 	mul.w	r2, r2, r3
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	611a      	str	r2, [r3, #16]
 801345c:	e001      	b.n	8013462 <USB_HC_StartXfer+0xba>
 801345e:	2301      	movs	r3, #1
 8013460:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	78db      	ldrb	r3, [r3, #3]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d006      	beq.n	8013478 <USB_HC_StartXfer+0xd0>
 801346a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801346c:	68ba      	ldr	r2, [r7, #8]
 801346e:	8912      	ldrh	r2, [r2, #8]
 8013470:	fb02 f203 	mul.w	r2, r2, r3
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	611a      	str	r2, [r3, #16]
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	691b      	ldr	r3, [r3, #16]
 801347c:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8013480:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013482:	04d9      	lsls	r1, r3, #19
 8013484:	4b68      	ldr	r3, [pc, #416]	; (8013628 <USB_HC_StartXfer+0x280>)
 8013486:	400b      	ands	r3, r1
 8013488:	431a      	orrs	r2, r3
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	7a9b      	ldrb	r3, [r3, #10]
 801348e:	075b      	lsls	r3, r3, #29
 8013490:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8013494:	69f9      	ldr	r1, [r7, #28]
 8013496:	0148      	lsls	r0, r1, #5
 8013498:	6a39      	ldr	r1, [r7, #32]
 801349a:	4401      	add	r1, r0
 801349c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80134a0:	4313      	orrs	r3, r2
 80134a2:	610b      	str	r3, [r1, #16]
 80134a4:	79fb      	ldrb	r3, [r7, #7]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d009      	beq.n	80134be <USB_HC_StartXfer+0x116>
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	68d9      	ldr	r1, [r3, #12]
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	015a      	lsls	r2, r3, #5
 80134b2:	6a3b      	ldr	r3, [r7, #32]
 80134b4:	4413      	add	r3, r2
 80134b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134ba:	460a      	mov	r2, r1
 80134bc:	615a      	str	r2, [r3, #20]
 80134be:	6a3b      	ldr	r3, [r7, #32]
 80134c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80134c4:	689b      	ldr	r3, [r3, #8]
 80134c6:	f003 0301 	and.w	r3, r3, #1
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	bf0c      	ite	eq
 80134ce:	2301      	moveq	r3, #1
 80134d0:	2300      	movne	r3, #0
 80134d2:	b2db      	uxtb	r3, r3
 80134d4:	767b      	strb	r3, [r7, #25]
 80134d6:	69fb      	ldr	r3, [r7, #28]
 80134d8:	015a      	lsls	r2, r3, #5
 80134da:	6a3b      	ldr	r3, [r7, #32]
 80134dc:	4413      	add	r3, r2
 80134de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	69fa      	ldr	r2, [r7, #28]
 80134e6:	0151      	lsls	r1, r2, #5
 80134e8:	6a3a      	ldr	r2, [r7, #32]
 80134ea:	440a      	add	r2, r1
 80134ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80134f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80134f4:	6013      	str	r3, [r2, #0]
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	015a      	lsls	r2, r3, #5
 80134fa:	6a3b      	ldr	r3, [r7, #32]
 80134fc:	4413      	add	r3, r2
 80134fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	7e7b      	ldrb	r3, [r7, #25]
 8013506:	075b      	lsls	r3, r3, #29
 8013508:	69f9      	ldr	r1, [r7, #28]
 801350a:	0148      	lsls	r0, r1, #5
 801350c:	6a39      	ldr	r1, [r7, #32]
 801350e:	4401      	add	r1, r0
 8013510:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8013514:	4313      	orrs	r3, r2
 8013516:	600b      	str	r3, [r1, #0]
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	015a      	lsls	r2, r3, #5
 801351c:	6a3b      	ldr	r3, [r7, #32]
 801351e:	4413      	add	r3, r2
 8013520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	4a41      	ldr	r2, [pc, #260]	; (801362c <USB_HC_StartXfer+0x284>)
 8013528:	6013      	str	r3, [r2, #0]
 801352a:	4b40      	ldr	r3, [pc, #256]	; (801362c <USB_HC_StartXfer+0x284>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013532:	4a3e      	ldr	r2, [pc, #248]	; (801362c <USB_HC_StartXfer+0x284>)
 8013534:	6013      	str	r3, [r2, #0]
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	78db      	ldrb	r3, [r3, #3]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d006      	beq.n	801354c <USB_HC_StartXfer+0x1a4>
 801353e:	4b3b      	ldr	r3, [pc, #236]	; (801362c <USB_HC_StartXfer+0x284>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013546:	4a39      	ldr	r2, [pc, #228]	; (801362c <USB_HC_StartXfer+0x284>)
 8013548:	6013      	str	r3, [r2, #0]
 801354a:	e005      	b.n	8013558 <USB_HC_StartXfer+0x1b0>
 801354c:	4b37      	ldr	r3, [pc, #220]	; (801362c <USB_HC_StartXfer+0x284>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013554:	4a35      	ldr	r2, [pc, #212]	; (801362c <USB_HC_StartXfer+0x284>)
 8013556:	6013      	str	r3, [r2, #0]
 8013558:	4b34      	ldr	r3, [pc, #208]	; (801362c <USB_HC_StartXfer+0x284>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013560:	4a32      	ldr	r2, [pc, #200]	; (801362c <USB_HC_StartXfer+0x284>)
 8013562:	6013      	str	r3, [r2, #0]
 8013564:	69fb      	ldr	r3, [r7, #28]
 8013566:	015a      	lsls	r2, r3, #5
 8013568:	6a3b      	ldr	r3, [r7, #32]
 801356a:	4413      	add	r3, r2
 801356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013570:	461a      	mov	r2, r3
 8013572:	4b2e      	ldr	r3, [pc, #184]	; (801362c <USB_HC_StartXfer+0x284>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	6013      	str	r3, [r2, #0]
 8013578:	79fb      	ldrb	r3, [r7, #7]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d14e      	bne.n	801361c <USB_HC_StartXfer+0x274>
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	78db      	ldrb	r3, [r3, #3]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d14a      	bne.n	801361c <USB_HC_StartXfer+0x274>
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	691b      	ldr	r3, [r3, #16]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d046      	beq.n	801361c <USB_HC_StartXfer+0x274>
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	79db      	ldrb	r3, [r3, #7]
 8013592:	2b03      	cmp	r3, #3
 8013594:	d830      	bhi.n	80135f8 <USB_HC_StartXfer+0x250>
 8013596:	a201      	add	r2, pc, #4	; (adr r2, 801359c <USB_HC_StartXfer+0x1f4>)
 8013598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801359c:	080135ad 	.word	0x080135ad
 80135a0:	080135d1 	.word	0x080135d1
 80135a4:	080135ad 	.word	0x080135ad
 80135a8:	080135d1 	.word	0x080135d1
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	691b      	ldr	r3, [r3, #16]
 80135b0:	3303      	adds	r3, #3
 80135b2:	089b      	lsrs	r3, r3, #2
 80135b4:	82fb      	strh	r3, [r7, #22]
 80135b6:	8afa      	ldrh	r2, [r7, #22]
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135bc:	b29b      	uxth	r3, r3
 80135be:	429a      	cmp	r2, r3
 80135c0:	d91c      	bls.n	80135fc <USB_HC_StartXfer+0x254>
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	699b      	ldr	r3, [r3, #24]
 80135c6:	f043 0220 	orr.w	r2, r3, #32
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	619a      	str	r2, [r3, #24]
 80135ce:	e015      	b.n	80135fc <USB_HC_StartXfer+0x254>
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	691b      	ldr	r3, [r3, #16]
 80135d4:	3303      	adds	r3, #3
 80135d6:	089b      	lsrs	r3, r3, #2
 80135d8:	82fb      	strh	r3, [r7, #22]
 80135da:	8afa      	ldrh	r2, [r7, #22]
 80135dc:	6a3b      	ldr	r3, [r7, #32]
 80135de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80135e2:	691b      	ldr	r3, [r3, #16]
 80135e4:	b29b      	uxth	r3, r3
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d90a      	bls.n	8013600 <USB_HC_StartXfer+0x258>
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	699b      	ldr	r3, [r3, #24]
 80135ee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	619a      	str	r2, [r3, #24]
 80135f6:	e003      	b.n	8013600 <USB_HC_StartXfer+0x258>
 80135f8:	bf00      	nop
 80135fa:	e002      	b.n	8013602 <USB_HC_StartXfer+0x25a>
 80135fc:	bf00      	nop
 80135fe:	e000      	b.n	8013602 <USB_HC_StartXfer+0x25a>
 8013600:	bf00      	nop
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	68d9      	ldr	r1, [r3, #12]
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	785a      	ldrb	r2, [r3, #1]
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	691b      	ldr	r3, [r3, #16]
 801360e:	b298      	uxth	r0, r3
 8013610:	2300      	movs	r3, #0
 8013612:	9300      	str	r3, [sp, #0]
 8013614:	4603      	mov	r3, r0
 8013616:	68f8      	ldr	r0, [r7, #12]
 8013618:	f7ff fb92 	bl	8012d40 <USB_WritePacket>
 801361c:	2300      	movs	r3, #0
 801361e:	4618      	mov	r0, r3
 8013620:	3728      	adds	r7, #40	; 0x28
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	1ff80000 	.word	0x1ff80000
 801362c:	2000037c 	.word	0x2000037c

08013630 <USB_HC_ReadInterrupt>:
 8013630:	b480      	push	{r7}
 8013632:	b085      	sub	sp, #20
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	60fb      	str	r3, [r7, #12]
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013642:	695b      	ldr	r3, [r3, #20]
 8013644:	b29b      	uxth	r3, r3
 8013646:	4618      	mov	r0, r3
 8013648:	3714      	adds	r7, #20
 801364a:	46bd      	mov	sp, r7
 801364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013650:	4770      	bx	lr

08013652 <USB_HC_Halt>:
 8013652:	b480      	push	{r7}
 8013654:	b087      	sub	sp, #28
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
 801365a:	460b      	mov	r3, r1
 801365c:	70fb      	strb	r3, [r7, #3]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	613b      	str	r3, [r7, #16]
 8013662:	78fb      	ldrb	r3, [r7, #3]
 8013664:	60fb      	str	r3, [r7, #12]
 8013666:	2300      	movs	r3, #0
 8013668:	617b      	str	r3, [r7, #20]
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	015a      	lsls	r2, r3, #5
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	4413      	add	r3, r2
 8013672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	0c9b      	lsrs	r3, r3, #18
 801367a:	f003 0303 	and.w	r3, r3, #3
 801367e:	60bb      	str	r3, [r7, #8]
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d002      	beq.n	801368c <USB_HC_Halt+0x3a>
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	2b02      	cmp	r3, #2
 801368a:	d16c      	bne.n	8013766 <USB_HC_Halt+0x114>
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	015a      	lsls	r2, r3, #5
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	4413      	add	r3, r2
 8013694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	68fa      	ldr	r2, [r7, #12]
 801369c:	0151      	lsls	r1, r2, #5
 801369e:	693a      	ldr	r2, [r7, #16]
 80136a0:	440a      	add	r2, r1
 80136a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80136a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80136aa:	6013      	str	r3, [r2, #0]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d143      	bne.n	8013740 <USB_HC_Halt+0xee>
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	015a      	lsls	r2, r3, #5
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	4413      	add	r3, r2
 80136c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	68fa      	ldr	r2, [r7, #12]
 80136c8:	0151      	lsls	r1, r2, #5
 80136ca:	693a      	ldr	r2, [r7, #16]
 80136cc:	440a      	add	r2, r1
 80136ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80136d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136d6:	6013      	str	r3, [r2, #0]
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	015a      	lsls	r2, r3, #5
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	4413      	add	r3, r2
 80136e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	68fa      	ldr	r2, [r7, #12]
 80136e8:	0151      	lsls	r1, r2, #5
 80136ea:	693a      	ldr	r2, [r7, #16]
 80136ec:	440a      	add	r2, r1
 80136ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80136f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80136f6:	6013      	str	r3, [r2, #0]
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	015a      	lsls	r2, r3, #5
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	4413      	add	r3, r2
 8013700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	68fa      	ldr	r2, [r7, #12]
 8013708:	0151      	lsls	r1, r2, #5
 801370a:	693a      	ldr	r2, [r7, #16]
 801370c:	440a      	add	r2, r1
 801370e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013716:	6013      	str	r3, [r2, #0]
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	3301      	adds	r3, #1
 801371c:	617b      	str	r3, [r7, #20]
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013724:	d81d      	bhi.n	8013762 <USB_HC_Halt+0x110>
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	015a      	lsls	r2, r3, #5
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	4413      	add	r3, r2
 801372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801373c:	d0ec      	beq.n	8013718 <USB_HC_Halt+0xc6>
 801373e:	e080      	b.n	8013842 <USB_HC_Halt+0x1f0>
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	015a      	lsls	r2, r3, #5
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	4413      	add	r3, r2
 8013748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	68fa      	ldr	r2, [r7, #12]
 8013750:	0151      	lsls	r1, r2, #5
 8013752:	693a      	ldr	r2, [r7, #16]
 8013754:	440a      	add	r2, r1
 8013756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801375a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801375e:	6013      	str	r3, [r2, #0]
 8013760:	e06f      	b.n	8013842 <USB_HC_Halt+0x1f0>
 8013762:	bf00      	nop
 8013764:	e06d      	b.n	8013842 <USB_HC_Halt+0x1f0>
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	015a      	lsls	r2, r3, #5
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	4413      	add	r3, r2
 801376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	68fa      	ldr	r2, [r7, #12]
 8013776:	0151      	lsls	r1, r2, #5
 8013778:	693a      	ldr	r2, [r7, #16]
 801377a:	440a      	add	r2, r1
 801377c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013784:	6013      	str	r3, [r2, #0]
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801378c:	691b      	ldr	r3, [r3, #16]
 801378e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013792:	2b00      	cmp	r3, #0
 8013794:	d143      	bne.n	801381e <USB_HC_Halt+0x1cc>
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	015a      	lsls	r2, r3, #5
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	4413      	add	r3, r2
 801379e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	68fa      	ldr	r2, [r7, #12]
 80137a6:	0151      	lsls	r1, r2, #5
 80137a8:	693a      	ldr	r2, [r7, #16]
 80137aa:	440a      	add	r2, r1
 80137ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80137b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137b4:	6013      	str	r3, [r2, #0]
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	015a      	lsls	r2, r3, #5
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	4413      	add	r3, r2
 80137be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	68fa      	ldr	r2, [r7, #12]
 80137c6:	0151      	lsls	r1, r2, #5
 80137c8:	693a      	ldr	r2, [r7, #16]
 80137ca:	440a      	add	r2, r1
 80137cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80137d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80137d4:	6013      	str	r3, [r2, #0]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	015a      	lsls	r2, r3, #5
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	4413      	add	r3, r2
 80137de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	68fa      	ldr	r2, [r7, #12]
 80137e6:	0151      	lsls	r1, r2, #5
 80137e8:	693a      	ldr	r2, [r7, #16]
 80137ea:	440a      	add	r2, r1
 80137ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80137f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80137f4:	6013      	str	r3, [r2, #0]
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	3301      	adds	r3, #1
 80137fa:	617b      	str	r3, [r7, #20]
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013802:	d81d      	bhi.n	8013840 <USB_HC_Halt+0x1ee>
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	015a      	lsls	r2, r3, #5
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	4413      	add	r3, r2
 801380c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801381a:	d0ec      	beq.n	80137f6 <USB_HC_Halt+0x1a4>
 801381c:	e011      	b.n	8013842 <USB_HC_Halt+0x1f0>
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	015a      	lsls	r2, r3, #5
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	4413      	add	r3, r2
 8013826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	0151      	lsls	r1, r2, #5
 8013830:	693a      	ldr	r2, [r7, #16]
 8013832:	440a      	add	r2, r1
 8013834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8013838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801383c:	6013      	str	r3, [r2, #0]
 801383e:	e000      	b.n	8013842 <USB_HC_Halt+0x1f0>
 8013840:	bf00      	nop
 8013842:	2300      	movs	r3, #0
 8013844:	4618      	mov	r0, r3
 8013846:	371c      	adds	r7, #28
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <USB_DoPing>:
 8013850:	b480      	push	{r7}
 8013852:	b087      	sub	sp, #28
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	460b      	mov	r3, r1
 801385a:	70fb      	strb	r3, [r7, #3]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	617b      	str	r3, [r7, #20]
 8013860:	78fb      	ldrb	r3, [r7, #3]
 8013862:	613b      	str	r3, [r7, #16]
 8013864:	2301      	movs	r3, #1
 8013866:	60fb      	str	r3, [r7, #12]
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	04da      	lsls	r2, r3, #19
 801386c:	4b15      	ldr	r3, [pc, #84]	; (80138c4 <USB_DoPing+0x74>)
 801386e:	4013      	ands	r3, r2
 8013870:	693a      	ldr	r2, [r7, #16]
 8013872:	0151      	lsls	r1, r2, #5
 8013874:	697a      	ldr	r2, [r7, #20]
 8013876:	440a      	add	r2, r1
 8013878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801387c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013880:	6113      	str	r3, [r2, #16]
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	015a      	lsls	r2, r3, #5
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	4413      	add	r3, r2
 801388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	60bb      	str	r3, [r7, #8]
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013898:	60bb      	str	r3, [r7, #8]
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80138a0:	60bb      	str	r3, [r7, #8]
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	015a      	lsls	r2, r3, #5
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	4413      	add	r3, r2
 80138aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138ae:	461a      	mov	r2, r3
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	6013      	str	r3, [r2, #0]
 80138b4:	2300      	movs	r3, #0
 80138b6:	4618      	mov	r0, r3
 80138b8:	371c      	adds	r7, #28
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop
 80138c4:	1ff80000 	.word	0x1ff80000

080138c8 <USB_StopHost>:
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b086      	sub	sp, #24
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	60fb      	str	r3, [r7, #12]
 80138d4:	2300      	movs	r3, #0
 80138d6:	617b      	str	r3, [r7, #20]
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f7ff f9ae 	bl	8012c3a <USB_DisableGlobalInt>
 80138de:	2110      	movs	r1, #16
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f7ff f9e5 	bl	8012cb0 <USB_FlushTxFifo>
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ff fa08 	bl	8012cfc <USB_FlushRxFifo>
 80138ec:	2300      	movs	r3, #0
 80138ee:	613b      	str	r3, [r7, #16]
 80138f0:	e01f      	b.n	8013932 <USB_StopHost+0x6a>
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	015a      	lsls	r2, r3, #5
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	4413      	add	r3, r2
 80138fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	60bb      	str	r3, [r7, #8]
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013908:	60bb      	str	r3, [r7, #8]
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013910:	60bb      	str	r3, [r7, #8]
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013918:	60bb      	str	r3, [r7, #8]
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	015a      	lsls	r2, r3, #5
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	4413      	add	r3, r2
 8013922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013926:	461a      	mov	r2, r3
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	6013      	str	r3, [r2, #0]
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	3301      	adds	r3, #1
 8013930:	613b      	str	r3, [r7, #16]
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	2b0f      	cmp	r3, #15
 8013936:	d9dc      	bls.n	80138f2 <USB_StopHost+0x2a>
 8013938:	2300      	movs	r3, #0
 801393a:	613b      	str	r3, [r7, #16]
 801393c:	e034      	b.n	80139a8 <USB_StopHost+0xe0>
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	015a      	lsls	r2, r3, #5
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	4413      	add	r3, r2
 8013946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	60bb      	str	r3, [r7, #8]
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013954:	60bb      	str	r3, [r7, #8]
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801395c:	60bb      	str	r3, [r7, #8]
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013964:	60bb      	str	r3, [r7, #8]
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	015a      	lsls	r2, r3, #5
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	4413      	add	r3, r2
 801396e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013972:	461a      	mov	r2, r3
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	6013      	str	r3, [r2, #0]
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	3301      	adds	r3, #1
 801397c:	617b      	str	r3, [r7, #20]
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013984:	d80c      	bhi.n	80139a0 <USB_StopHost+0xd8>
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	015a      	lsls	r2, r3, #5
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	4413      	add	r3, r2
 801398e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801399c:	d0ec      	beq.n	8013978 <USB_StopHost+0xb0>
 801399e:	e000      	b.n	80139a2 <USB_StopHost+0xda>
 80139a0:	bf00      	nop
 80139a2:	693b      	ldr	r3, [r7, #16]
 80139a4:	3301      	adds	r3, #1
 80139a6:	613b      	str	r3, [r7, #16]
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	2b0f      	cmp	r3, #15
 80139ac:	d9c7      	bls.n	801393e <USB_StopHost+0x76>
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80139b4:	461a      	mov	r2, r3
 80139b6:	f04f 33ff 	mov.w	r3, #4294967295
 80139ba:	6153      	str	r3, [r2, #20]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f04f 32ff 	mov.w	r2, #4294967295
 80139c2:	615a      	str	r2, [r3, #20]
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f7ff f927 	bl	8012c18 <USB_EnableGlobalInt>
 80139ca:	2300      	movs	r3, #0
 80139cc:	4618      	mov	r0, r3
 80139ce:	3718      	adds	r7, #24
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af02      	add	r7, sp, #8
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	4608      	mov	r0, r1
 80139de:	4611      	mov	r1, r2
 80139e0:	461a      	mov	r2, r3
 80139e2:	4603      	mov	r3, r0
 80139e4:	70fb      	strb	r3, [r7, #3]
 80139e6:	460b      	mov	r3, r1
 80139e8:	70bb      	strb	r3, [r7, #2]
 80139ea:	4613      	mov	r3, r2
 80139ec:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80139ee:	78fa      	ldrb	r2, [r7, #3]
 80139f0:	787b      	ldrb	r3, [r7, #1]
 80139f2:	4413      	add	r3, r2
 80139f4:	b2d8      	uxtb	r0, r3
 80139f6:	78ba      	ldrb	r2, [r7, #2]
 80139f8:	7c3b      	ldrb	r3, [r7, #16]
 80139fa:	4413      	add	r3, r2
 80139fc:	b2db      	uxtb	r3, r3
 80139fe:	78ba      	ldrb	r2, [r7, #2]
 8013a00:	78f9      	ldrb	r1, [r7, #3]
 8013a02:	9300      	str	r3, [sp, #0]
 8013a04:	4603      	mov	r3, r0
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f001 fb27 	bl	801505a <u8g2_IsIntersection>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d013      	beq.n	8013a3a <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8013a12:	e00e      	b.n	8013a32 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8013a14:	7878      	ldrb	r0, [r7, #1]
 8013a16:	78ba      	ldrb	r2, [r7, #2]
 8013a18:	78f9      	ldrb	r1, [r7, #3]
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	9300      	str	r3, [sp, #0]
 8013a1e:	4603      	mov	r3, r0
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f001 f86e 	bl	8014b02 <u8g2_DrawHVLine>
    y++;    
 8013a26:	78bb      	ldrb	r3, [r7, #2]
 8013a28:	3301      	adds	r3, #1
 8013a2a:	70bb      	strb	r3, [r7, #2]
    h--;
 8013a2c:	7c3b      	ldrb	r3, [r7, #16]
 8013a2e:	3b01      	subs	r3, #1
 8013a30:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8013a32:	7c3b      	ldrb	r3, [r7, #16]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d1ed      	bne.n	8013a14 <u8g2_DrawBox+0x40>
 8013a38:	e000      	b.n	8013a3c <u8g2_DrawBox+0x68>
    return;
 8013a3a:	bf00      	nop
  }
}
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}

08013a42 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8013a42:	b580      	push	{r7, lr}
 8013a44:	b086      	sub	sp, #24
 8013a46:	af02      	add	r7, sp, #8
 8013a48:	6078      	str	r0, [r7, #4]
 8013a4a:	4608      	mov	r0, r1
 8013a4c:	4611      	mov	r1, r2
 8013a4e:	461a      	mov	r2, r3
 8013a50:	4603      	mov	r3, r0
 8013a52:	70fb      	strb	r3, [r7, #3]
 8013a54:	460b      	mov	r3, r1
 8013a56:	70bb      	strb	r3, [r7, #2]
 8013a58:	4613      	mov	r3, r2
 8013a5a:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8013a5c:	78fb      	ldrb	r3, [r7, #3]
 8013a5e:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8013a60:	78fa      	ldrb	r2, [r7, #3]
 8013a62:	787b      	ldrb	r3, [r7, #1]
 8013a64:	4413      	add	r3, r2
 8013a66:	b2d8      	uxtb	r0, r3
 8013a68:	78ba      	ldrb	r2, [r7, #2]
 8013a6a:	7e3b      	ldrb	r3, [r7, #24]
 8013a6c:	4413      	add	r3, r2
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	78ba      	ldrb	r2, [r7, #2]
 8013a72:	78f9      	ldrb	r1, [r7, #3]
 8013a74:	9300      	str	r3, [sp, #0]
 8013a76:	4603      	mov	r3, r0
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f001 faee 	bl	801505a <u8g2_IsIntersection>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d03b      	beq.n	8013afc <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8013a84:	7878      	ldrb	r0, [r7, #1]
 8013a86:	78ba      	ldrb	r2, [r7, #2]
 8013a88:	78f9      	ldrb	r1, [r7, #3]
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	9300      	str	r3, [sp, #0]
 8013a8e:	4603      	mov	r3, r0
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f001 f836 	bl	8014b02 <u8g2_DrawHVLine>
  if (h >= 2) {
 8013a96:	7e3b      	ldrb	r3, [r7, #24]
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d930      	bls.n	8013afe <u8g2_DrawFrame+0xbc>
    h-=2;
 8013a9c:	7e3b      	ldrb	r3, [r7, #24]
 8013a9e:	3b02      	subs	r3, #2
 8013aa0:	763b      	strb	r3, [r7, #24]
    y++;
 8013aa2:	78bb      	ldrb	r3, [r7, #2]
 8013aa4:	3301      	adds	r3, #1
 8013aa6:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8013aa8:	7e3b      	ldrb	r3, [r7, #24]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d01c      	beq.n	8013ae8 <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8013aae:	7e38      	ldrb	r0, [r7, #24]
 8013ab0:	78ba      	ldrb	r2, [r7, #2]
 8013ab2:	78f9      	ldrb	r1, [r7, #3]
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	4603      	mov	r3, r0
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f001 f821 	bl	8014b02 <u8g2_DrawHVLine>
      x+=w;
 8013ac0:	78fa      	ldrb	r2, [r7, #3]
 8013ac2:	787b      	ldrb	r3, [r7, #1]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	70fb      	strb	r3, [r7, #3]
      x--;
 8013ac8:	78fb      	ldrb	r3, [r7, #3]
 8013aca:	3b01      	subs	r3, #1
 8013acc:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8013ace:	7e38      	ldrb	r0, [r7, #24]
 8013ad0:	78ba      	ldrb	r2, [r7, #2]
 8013ad2:	78f9      	ldrb	r1, [r7, #3]
 8013ad4:	2301      	movs	r3, #1
 8013ad6:	9300      	str	r3, [sp, #0]
 8013ad8:	4603      	mov	r3, r0
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f001 f811 	bl	8014b02 <u8g2_DrawHVLine>
      y+=h;
 8013ae0:	78ba      	ldrb	r2, [r7, #2]
 8013ae2:	7e3b      	ldrb	r3, [r7, #24]
 8013ae4:	4413      	add	r3, r2
 8013ae6:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8013ae8:	7878      	ldrb	r0, [r7, #1]
 8013aea:	78ba      	ldrb	r2, [r7, #2]
 8013aec:	7bf9      	ldrb	r1, [r7, #15]
 8013aee:	2300      	movs	r3, #0
 8013af0:	9300      	str	r3, [sp, #0]
 8013af2:	4603      	mov	r3, r0
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f001 f804 	bl	8014b02 <u8g2_DrawHVLine>
 8013afa:	e000      	b.n	8013afe <u8g2_DrawFrame+0xbc>
    return;
 8013afc:	bf00      	nop
  }
}
 8013afe:	3710      	adds	r7, #16
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}

08013b04 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b084      	sub	sp, #16
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	7c1b      	ldrb	r3, [r3, #16]
 8013b12:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b1a:	461a      	mov	r2, r3
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	fb02 f303 	mul.w	r3, r2, r3
 8013b22:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	00db      	lsls	r3, r3, #3
 8013b28:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b2e:	68fa      	ldr	r2, [r7, #12]
 8013b30:	2100      	movs	r1, #0
 8013b32:	4618      	mov	r0, r3
 8013b34:	f00a fb15 	bl	801e162 <memset>
}
 8013b38:	bf00      	nop
 8013b3a:	3710      	adds	r7, #16
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b086      	sub	sp, #24
 8013b44:	af02      	add	r7, sp, #8
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	460b      	mov	r3, r1
 8013b4a:	70fb      	strb	r3, [r7, #3]
 8013b4c:	4613      	mov	r3, r2
 8013b4e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	7c1b      	ldrb	r3, [r3, #16]
 8013b56:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8013b58:	78fb      	ldrb	r3, [r7, #3]
 8013b5a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b60:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8013b62:	7bfb      	ldrb	r3, [r7, #15]
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	89ba      	ldrh	r2, [r7, #12]
 8013b68:	fb12 f303 	smulbb	r3, r2, r3
 8013b6c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8013b6e:	89bb      	ldrh	r3, [r7, #12]
 8013b70:	00db      	lsls	r3, r3, #3
 8013b72:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8013b74:	89bb      	ldrh	r3, [r7, #12]
 8013b76:	68ba      	ldr	r2, [r7, #8]
 8013b78:	4413      	add	r3, r2
 8013b7a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8013b7c:	7bf9      	ldrb	r1, [r7, #15]
 8013b7e:	78ba      	ldrb	r2, [r7, #2]
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	9300      	str	r3, [sp, #0]
 8013b84:	460b      	mov	r3, r1
 8013b86:	2100      	movs	r1, #0
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f002 fca0 	bl	80164ce <u8x8_DrawTile>
}
 8013b8e:	bf00      	nop
 8013b90:	3710      	adds	r7, #16
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}

08013b96 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8013b96:	b580      	push	{r7, lr}
 8013b98:	b084      	sub	sp, #16
 8013b9a:	af00      	add	r7, sp, #0
 8013b9c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013ba8:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013bb0:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	7c5b      	ldrb	r3, [r3, #17]
 8013bb8:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8013bba:	7bba      	ldrb	r2, [r7, #14]
 8013bbc:	7bfb      	ldrb	r3, [r7, #15]
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f7ff ffbd 	bl	8013b40 <u8g2_send_tile_row>
    src_row++;
 8013bc6:	7bfb      	ldrb	r3, [r7, #15]
 8013bc8:	3301      	adds	r3, #1
 8013bca:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8013bcc:	7bbb      	ldrb	r3, [r7, #14]
 8013bce:	3301      	adds	r3, #1
 8013bd0:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8013bd2:	7bfa      	ldrb	r2, [r7, #15]
 8013bd4:	7b7b      	ldrb	r3, [r7, #13]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d203      	bcs.n	8013be2 <u8g2_send_buffer+0x4c>
 8013bda:	7bba      	ldrb	r2, [r7, #14]
 8013bdc:	7b3b      	ldrb	r3, [r7, #12]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d3eb      	bcc.n	8013bba <u8g2_send_buffer+0x24>
}
 8013be2:	bf00      	nop
 8013be4:	3710      	adds	r7, #16
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}

08013bea <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8013bea:	b580      	push	{r7, lr}
 8013bec:	b082      	sub	sp, #8
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7ff ffcf 	bl	8013b96 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f002 fcdb 	bl	80165b4 <u8x8_RefreshDisplay>
}
 8013bfe:	bf00      	nop
 8013c00:	3708      	adds	r7, #8
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}

08013c06 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8013c06:	b580      	push	{r7, lr}
 8013c08:	b082      	sub	sp, #8
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
 8013c0e:	460b      	mov	r3, r1
 8013c10:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	78fa      	ldrb	r2, [r7, #3]
 8013c16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	4798      	blx	r3
}
 8013c2e:	bf00      	nop
 8013c30:	3708      	adds	r7, #8
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}

08013c36 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8013c36:	b580      	push	{r7, lr}
 8013c38:	b082      	sub	sp, #8
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d002      	beq.n	8013c4e <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f7ff ff5b 	bl	8013b04 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8013c4e:	2100      	movs	r1, #0
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7ff ffd8 	bl	8013c06 <u8g2_SetBufferCurrTileRow>
}
 8013c56:	bf00      	nop
 8013c58:	3708      	adds	r7, #8
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}

08013c5e <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8013c5e:	b580      	push	{r7, lr}
 8013c60:	b084      	sub	sp, #16
 8013c62:	af00      	add	r7, sp, #0
 8013c64:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f7ff ff95 	bl	8013b96 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013c72:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8013c7a:	7bfb      	ldrb	r3, [r7, #15]
 8013c7c:	4413      	add	r3, r2
 8013c7e:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	7c5b      	ldrb	r3, [r3, #17]
 8013c86:	7bfa      	ldrb	r2, [r7, #15]
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d304      	bcc.n	8013c96 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f002 fc91 	bl	80165b4 <u8x8_RefreshDisplay>
    return 0;
 8013c92:	2300      	movs	r3, #0
 8013c94:	e00d      	b.n	8013cb2 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d002      	beq.n	8013ca6 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f7ff ff2f 	bl	8013b04 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8013ca6:	7bfb      	ldrb	r3, [r7, #15]
 8013ca8:	4619      	mov	r1, r3
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f7ff ffab 	bl	8013c06 <u8g2_SetBufferCurrTileRow>
  return 1;
 8013cb0:	2301      	movs	r3, #1
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3710      	adds	r7, #16
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}

08013cba <u8g2_UpdateDisplay>:
  }  
}

/* same as sendBuffer, but does not send the ePaper refresh message */
void u8g2_UpdateDisplay(u8g2_t *u8g2)
{
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b082      	sub	sp, #8
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f7ff ff67 	bl	8013b96 <u8g2_send_buffer>
}
 8013cc8:	bf00      	nop
 8013cca:	3708      	adds	r7, #8
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f7ff ffac 	bl	8013c36 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f7ff ffbd 	bl	8013c5e <u8g2_NextPage>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d1f9      	bne.n	8013cde <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8013cea:	2100      	movs	r1, #0
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f7ff ff8a 	bl	8013c06 <u8g2_SetBufferCurrTileRow>
}
 8013cf2:	bf00      	nop
 8013cf4:	3708      	adds	r7, #8
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}
	...

08013cfc <u8g2_m_20_13_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_20_13_f(uint8_t *page_cnt)
{
 8013cfc:	b480      	push	{r7}
 8013cfe:	b083      	sub	sp, #12
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 13;
  return 0;
  #else
  static uint8_t buf[2080];
  *page_cnt = 13;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	220d      	movs	r2, #13
 8013d08:	701a      	strb	r2, [r3, #0]
  return buf;
 8013d0a:	4b03      	ldr	r3, [pc, #12]	; (8013d18 <u8g2_m_20_13_f+0x1c>)
  #endif
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	370c      	adds	r7, #12
 8013d10:	46bd      	mov	sp, r7
 8013d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d16:	4770      	bx	lr
 8013d18:	20000380 	.word	0x20000380

08013d1c <u8g2_Setup_st7528_i2c_nhd_c160100_f>:
  buf = u8g2_m_20_13_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* st7528 f */
void u8g2_Setup_st7528_i2c_nhd_c160100_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b088      	sub	sp, #32
 8013d20:	af02      	add	r7, sp, #8
 8013d22:	60f8      	str	r0, [r7, #12]
 8013d24:	60b9      	str	r1, [r7, #8]
 8013d26:	607a      	str	r2, [r7, #4]
 8013d28:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7528_nhd_c160100, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	9300      	str	r3, [sp, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4a0b      	ldr	r2, [pc, #44]	; (8013d60 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x44>)
 8013d32:	490c      	ldr	r1, [pc, #48]	; (8013d64 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x48>)
 8013d34:	68f8      	ldr	r0, [r7, #12]
 8013d36:	f002 fd05 	bl	8016744 <u8x8_Setup>
  buf = u8g2_m_20_13_f(&tile_buf_height);
 8013d3a:	f107 0313 	add.w	r3, r7, #19
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f7ff ffdc 	bl	8013cfc <u8g2_m_20_13_f>
 8013d44:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8013d46:	7cfa      	ldrb	r2, [r7, #19]
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	9300      	str	r3, [sp, #0]
 8013d4c:	4b06      	ldr	r3, [pc, #24]	; (8013d68 <u8g2_Setup_st7528_i2c_nhd_c160100_f+0x4c>)
 8013d4e:	6979      	ldr	r1, [r7, #20]
 8013d50:	68f8      	ldr	r0, [r7, #12]
 8013d52:	f001 fe80 	bl	8015a56 <u8g2_SetupBuffer>
}
 8013d56:	bf00      	nop
 8013d58:	3718      	adds	r7, #24
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}
 8013d5e:	bf00      	nop
 8013d60:	080160d1 	.word	0x080160d1
 8013d64:	080163c9 	.word	0x080163c9
 8013d68:	080151dd 	.word	0x080151dd

08013d6c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	b083      	sub	sp, #12
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	460b      	mov	r3, r1
 8013d76:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8013d78:	78fb      	ldrb	r3, [r7, #3]
 8013d7a:	687a      	ldr	r2, [r7, #4]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	781b      	ldrb	r3, [r3, #0]
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	370c      	adds	r7, #12
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8e:	4770      	bx	lr

08013d90 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8013d90:	b480      	push	{r7}
 8013d92:	b085      	sub	sp, #20
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	460b      	mov	r3, r1
 8013d9a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8013d9c:	78fb      	ldrb	r3, [r7, #3]
 8013d9e:	687a      	ldr	r2, [r7, #4]
 8013da0:	4413      	add	r3, r2
 8013da2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	81fb      	strh	r3, [r7, #14]
    font++;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	3301      	adds	r3, #1
 8013dae:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8013db0:	89fb      	ldrh	r3, [r7, #14]
 8013db2:	021b      	lsls	r3, r3, #8
 8013db4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	781b      	ldrb	r3, [r3, #0]
 8013dba:	b29a      	uxth	r2, r3
 8013dbc:	89fb      	ldrh	r3, [r7, #14]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	81fb      	strh	r3, [r7, #14]
    return pos;
 8013dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3714      	adds	r7, #20
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b082      	sub	sp, #8
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8013dda:	2100      	movs	r1, #0
 8013ddc:	6838      	ldr	r0, [r7, #0]
 8013dde:	f7ff ffc5 	bl	8013d6c <u8g2_font_get_byte>
 8013de2:	4603      	mov	r3, r0
 8013de4:	461a      	mov	r2, r3
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8013dea:	2101      	movs	r1, #1
 8013dec:	6838      	ldr	r0, [r7, #0]
 8013dee:	f7ff ffbd 	bl	8013d6c <u8g2_font_get_byte>
 8013df2:	4603      	mov	r3, r0
 8013df4:	461a      	mov	r2, r3
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8013dfa:	2102      	movs	r1, #2
 8013dfc:	6838      	ldr	r0, [r7, #0]
 8013dfe:	f7ff ffb5 	bl	8013d6c <u8g2_font_get_byte>
 8013e02:	4603      	mov	r3, r0
 8013e04:	461a      	mov	r2, r3
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8013e0a:	2103      	movs	r1, #3
 8013e0c:	6838      	ldr	r0, [r7, #0]
 8013e0e:	f7ff ffad 	bl	8013d6c <u8g2_font_get_byte>
 8013e12:	4603      	mov	r3, r0
 8013e14:	461a      	mov	r2, r3
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8013e1a:	2104      	movs	r1, #4
 8013e1c:	6838      	ldr	r0, [r7, #0]
 8013e1e:	f7ff ffa5 	bl	8013d6c <u8g2_font_get_byte>
 8013e22:	4603      	mov	r3, r0
 8013e24:	461a      	mov	r2, r3
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8013e2a:	2105      	movs	r1, #5
 8013e2c:	6838      	ldr	r0, [r7, #0]
 8013e2e:	f7ff ff9d 	bl	8013d6c <u8g2_font_get_byte>
 8013e32:	4603      	mov	r3, r0
 8013e34:	461a      	mov	r2, r3
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8013e3a:	2106      	movs	r1, #6
 8013e3c:	6838      	ldr	r0, [r7, #0]
 8013e3e:	f7ff ff95 	bl	8013d6c <u8g2_font_get_byte>
 8013e42:	4603      	mov	r3, r0
 8013e44:	461a      	mov	r2, r3
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8013e4a:	2107      	movs	r1, #7
 8013e4c:	6838      	ldr	r0, [r7, #0]
 8013e4e:	f7ff ff8d 	bl	8013d6c <u8g2_font_get_byte>
 8013e52:	4603      	mov	r3, r0
 8013e54:	461a      	mov	r2, r3
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8013e5a:	2108      	movs	r1, #8
 8013e5c:	6838      	ldr	r0, [r7, #0]
 8013e5e:	f7ff ff85 	bl	8013d6c <u8g2_font_get_byte>
 8013e62:	4603      	mov	r3, r0
 8013e64:	461a      	mov	r2, r3
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8013e6a:	2109      	movs	r1, #9
 8013e6c:	6838      	ldr	r0, [r7, #0]
 8013e6e:	f7ff ff7d 	bl	8013d6c <u8g2_font_get_byte>
 8013e72:	4603      	mov	r3, r0
 8013e74:	b25a      	sxtb	r2, r3
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8013e7a:	210a      	movs	r1, #10
 8013e7c:	6838      	ldr	r0, [r7, #0]
 8013e7e:	f7ff ff75 	bl	8013d6c <u8g2_font_get_byte>
 8013e82:	4603      	mov	r3, r0
 8013e84:	b25a      	sxtb	r2, r3
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8013e8a:	210b      	movs	r1, #11
 8013e8c:	6838      	ldr	r0, [r7, #0]
 8013e8e:	f7ff ff6d 	bl	8013d6c <u8g2_font_get_byte>
 8013e92:	4603      	mov	r3, r0
 8013e94:	b25a      	sxtb	r2, r3
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8013e9a:	210c      	movs	r1, #12
 8013e9c:	6838      	ldr	r0, [r7, #0]
 8013e9e:	f7ff ff65 	bl	8013d6c <u8g2_font_get_byte>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	b25a      	sxtb	r2, r3
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8013eaa:	210d      	movs	r1, #13
 8013eac:	6838      	ldr	r0, [r7, #0]
 8013eae:	f7ff ff5d 	bl	8013d6c <u8g2_font_get_byte>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	b25a      	sxtb	r2, r3
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8013eba:	210e      	movs	r1, #14
 8013ebc:	6838      	ldr	r0, [r7, #0]
 8013ebe:	f7ff ff55 	bl	8013d6c <u8g2_font_get_byte>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	b25a      	sxtb	r2, r3
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8013eca:	210f      	movs	r1, #15
 8013ecc:	6838      	ldr	r0, [r7, #0]
 8013ece:	f7ff ff4d 	bl	8013d6c <u8g2_font_get_byte>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	b25a      	sxtb	r2, r3
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8013eda:	2110      	movs	r1, #16
 8013edc:	6838      	ldr	r0, [r7, #0]
 8013ede:	f7ff ff45 	bl	8013d6c <u8g2_font_get_byte>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	b25a      	sxtb	r2, r3
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8013eea:	2111      	movs	r1, #17
 8013eec:	6838      	ldr	r0, [r7, #0]
 8013eee:	f7ff ff4f 	bl	8013d90 <u8g2_font_get_word>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8013efa:	2113      	movs	r1, #19
 8013efc:	6838      	ldr	r0, [r7, #0]
 8013efe:	f7ff ff47 	bl	8013d90 <u8g2_font_get_word>
 8013f02:	4603      	mov	r3, r0
 8013f04:	461a      	mov	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8013f0a:	2115      	movs	r1, #21
 8013f0c:	6838      	ldr	r0, [r7, #0]
 8013f0e:	f7ff ff3f 	bl	8013d90 <u8g2_font_get_word>
 8013f12:	4603      	mov	r3, r0
 8013f14:	461a      	mov	r2, r3
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	82da      	strh	r2, [r3, #22]
#endif
}
 8013f1a:	bf00      	nop
 8013f1c:	3708      	adds	r7, #8
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}

08013f22 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8013f22:	b480      	push	{r7}
 8013f24:	b085      	sub	sp, #20
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	6078      	str	r0, [r7, #4]
 8013f2a:	460b      	mov	r3, r1
 8013f2c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	7a9b      	ldrb	r3, [r3, #10]
 8013f32:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8013f3c:	7bfa      	ldrb	r2, [r7, #15]
 8013f3e:	7b7b      	ldrb	r3, [r7, #13]
 8013f40:	fa42 f303 	asr.w	r3, r2, r3
 8013f44:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8013f46:	7b7b      	ldrb	r3, [r7, #13]
 8013f48:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8013f4a:	7bba      	ldrb	r2, [r7, #14]
 8013f4c:	78fb      	ldrb	r3, [r7, #3]
 8013f4e:	4413      	add	r3, r2
 8013f50:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8013f52:	7bbb      	ldrb	r3, [r7, #14]
 8013f54:	2b07      	cmp	r3, #7
 8013f56:	d91a      	bls.n	8013f8e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8013f58:	2308      	movs	r3, #8
 8013f5a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8013f5c:	7b3a      	ldrb	r2, [r7, #12]
 8013f5e:	7b7b      	ldrb	r3, [r7, #13]
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	1c5a      	adds	r2, r3, #1
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	461a      	mov	r2, r3
 8013f76:	7b3b      	ldrb	r3, [r7, #12]
 8013f78:	fa02 f303 	lsl.w	r3, r2, r3
 8013f7c:	b25a      	sxtb	r2, r3
 8013f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f82:	4313      	orrs	r3, r2
 8013f84:	b25b      	sxtb	r3, r3
 8013f86:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8013f88:	7bbb      	ldrb	r3, [r7, #14]
 8013f8a:	3b08      	subs	r3, #8
 8013f8c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8013f8e:	78fb      	ldrb	r3, [r7, #3]
 8013f90:	f04f 32ff 	mov.w	r2, #4294967295
 8013f94:	fa02 f303 	lsl.w	r3, r2, r3
 8013f98:	b2db      	uxtb	r3, r3
 8013f9a:	43db      	mvns	r3, r3
 8013f9c:	b2da      	uxtb	r2, r3
 8013f9e:	7bfb      	ldrb	r3, [r7, #15]
 8013fa0:	4013      	ands	r3, r2
 8013fa2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	7bba      	ldrb	r2, [r7, #14]
 8013fa8:	729a      	strb	r2, [r3, #10]
  return val;
 8013faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3714      	adds	r7, #20
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb6:	4770      	bx	lr

08013fb8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	460b      	mov	r3, r1
 8013fc2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8013fc4:	78fb      	ldrb	r3, [r7, #3]
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f7ff ffaa 	bl	8013f22 <u8g2_font_decode_get_unsigned_bits>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8013fd6:	78fb      	ldrb	r3, [r7, #3]
 8013fd8:	3b01      	subs	r3, #1
 8013fda:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8013fdc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8013fe0:	78fb      	ldrb	r3, [r7, #3]
 8013fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8013fe6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8013fe8:	7bfa      	ldrb	r2, [r7, #15]
 8013fea:	7bbb      	ldrb	r3, [r7, #14]
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	b2db      	uxtb	r3, r3
 8013ff0:	73fb      	strb	r3, [r7, #15]
  return v;
 8013ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3710      	adds	r7, #16
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}

08013ffe <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8013ffe:	b490      	push	{r4, r7}
 8014000:	b082      	sub	sp, #8
 8014002:	af00      	add	r7, sp, #0
 8014004:	4604      	mov	r4, r0
 8014006:	4608      	mov	r0, r1
 8014008:	4611      	mov	r1, r2
 801400a:	461a      	mov	r2, r3
 801400c:	4623      	mov	r3, r4
 801400e:	71fb      	strb	r3, [r7, #7]
 8014010:	4603      	mov	r3, r0
 8014012:	71bb      	strb	r3, [r7, #6]
 8014014:	460b      	mov	r3, r1
 8014016:	717b      	strb	r3, [r7, #5]
 8014018:	4613      	mov	r3, r2
 801401a:	713b      	strb	r3, [r7, #4]
  switch(dir)
 801401c:	793b      	ldrb	r3, [r7, #4]
 801401e:	2b01      	cmp	r3, #1
 8014020:	d008      	beq.n	8014034 <u8g2_add_vector_y+0x36>
 8014022:	2b02      	cmp	r3, #2
 8014024:	d00b      	beq.n	801403e <u8g2_add_vector_y+0x40>
 8014026:	2b00      	cmp	r3, #0
 8014028:	d10e      	bne.n	8014048 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 801402a:	797a      	ldrb	r2, [r7, #5]
 801402c:	79fb      	ldrb	r3, [r7, #7]
 801402e:	4413      	add	r3, r2
 8014030:	71fb      	strb	r3, [r7, #7]
      break;
 8014032:	e00e      	b.n	8014052 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8014034:	79ba      	ldrb	r2, [r7, #6]
 8014036:	79fb      	ldrb	r3, [r7, #7]
 8014038:	4413      	add	r3, r2
 801403a:	71fb      	strb	r3, [r7, #7]
      break;
 801403c:	e009      	b.n	8014052 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 801403e:	797b      	ldrb	r3, [r7, #5]
 8014040:	79fa      	ldrb	r2, [r7, #7]
 8014042:	1ad3      	subs	r3, r2, r3
 8014044:	71fb      	strb	r3, [r7, #7]
      break;
 8014046:	e004      	b.n	8014052 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8014048:	79bb      	ldrb	r3, [r7, #6]
 801404a:	79fa      	ldrb	r2, [r7, #7]
 801404c:	1ad3      	subs	r3, r2, r3
 801404e:	71fb      	strb	r3, [r7, #7]
      break;      
 8014050:	bf00      	nop
  }
  return dy;
 8014052:	79fb      	ldrb	r3, [r7, #7]
}
 8014054:	4618      	mov	r0, r3
 8014056:	3708      	adds	r7, #8
 8014058:	46bd      	mov	sp, r7
 801405a:	bc90      	pop	{r4, r7}
 801405c:	4770      	bx	lr

0801405e <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 801405e:	b490      	push	{r4, r7}
 8014060:	b082      	sub	sp, #8
 8014062:	af00      	add	r7, sp, #0
 8014064:	4604      	mov	r4, r0
 8014066:	4608      	mov	r0, r1
 8014068:	4611      	mov	r1, r2
 801406a:	461a      	mov	r2, r3
 801406c:	4623      	mov	r3, r4
 801406e:	71fb      	strb	r3, [r7, #7]
 8014070:	4603      	mov	r3, r0
 8014072:	71bb      	strb	r3, [r7, #6]
 8014074:	460b      	mov	r3, r1
 8014076:	717b      	strb	r3, [r7, #5]
 8014078:	4613      	mov	r3, r2
 801407a:	713b      	strb	r3, [r7, #4]
  switch(dir)
 801407c:	793b      	ldrb	r3, [r7, #4]
 801407e:	2b01      	cmp	r3, #1
 8014080:	d008      	beq.n	8014094 <u8g2_add_vector_x+0x36>
 8014082:	2b02      	cmp	r3, #2
 8014084:	d00b      	beq.n	801409e <u8g2_add_vector_x+0x40>
 8014086:	2b00      	cmp	r3, #0
 8014088:	d10e      	bne.n	80140a8 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 801408a:	79ba      	ldrb	r2, [r7, #6]
 801408c:	79fb      	ldrb	r3, [r7, #7]
 801408e:	4413      	add	r3, r2
 8014090:	71fb      	strb	r3, [r7, #7]
      break;
 8014092:	e00e      	b.n	80140b2 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8014094:	797b      	ldrb	r3, [r7, #5]
 8014096:	79fa      	ldrb	r2, [r7, #7]
 8014098:	1ad3      	subs	r3, r2, r3
 801409a:	71fb      	strb	r3, [r7, #7]
      break;
 801409c:	e009      	b.n	80140b2 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 801409e:	79bb      	ldrb	r3, [r7, #6]
 80140a0:	79fa      	ldrb	r2, [r7, #7]
 80140a2:	1ad3      	subs	r3, r2, r3
 80140a4:	71fb      	strb	r3, [r7, #7]
      break;
 80140a6:	e004      	b.n	80140b2 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 80140a8:	797a      	ldrb	r2, [r7, #5]
 80140aa:	79fb      	ldrb	r3, [r7, #7]
 80140ac:	4413      	add	r3, r2
 80140ae:	71fb      	strb	r3, [r7, #7]
      break;      
 80140b0:	bf00      	nop
  }
  return dx;
 80140b2:	79fb      	ldrb	r3, [r7, #7]
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bc90      	pop	{r4, r7}
 80140bc:	4770      	bx	lr

080140be <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80140be:	b580      	push	{r7, lr}
 80140c0:	b088      	sub	sp, #32
 80140c2:	af02      	add	r7, sp, #8
 80140c4:	6078      	str	r0, [r7, #4]
 80140c6:	460b      	mov	r3, r1
 80140c8:	70fb      	strb	r3, [r7, #3]
 80140ca:	4613      	mov	r3, r2
 80140cc:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	3354      	adds	r3, #84	; 0x54
 80140d2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80140d4:	78fb      	ldrb	r3, [r7, #3]
 80140d6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80140de:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80140e6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80140ee:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80140f0:	7bfa      	ldrb	r2, [r7, #15]
 80140f2:	7d7b      	ldrb	r3, [r7, #21]
 80140f4:	1ad3      	subs	r3, r2, r3
 80140f6:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80140f8:	7bfb      	ldrb	r3, [r7, #15]
 80140fa:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80140fc:	7dfa      	ldrb	r2, [r7, #23]
 80140fe:	7bfb      	ldrb	r3, [r7, #15]
 8014100:	429a      	cmp	r2, r3
 8014102:	d201      	bcs.n	8014108 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8014104:	7dfb      	ldrb	r3, [r7, #23]
 8014106:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8014108:	693b      	ldr	r3, [r7, #16]
 801410a:	791b      	ldrb	r3, [r3, #4]
 801410c:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 801410e:	693b      	ldr	r3, [r7, #16]
 8014110:	795b      	ldrb	r3, [r3, #5]
 8014112:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8014114:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8014118:	f997 2014 	ldrsb.w	r2, [r7, #20]
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	7b9b      	ldrb	r3, [r3, #14]
 8014120:	7bb8      	ldrb	r0, [r7, #14]
 8014122:	f7ff ff9c 	bl	801405e <u8g2_add_vector_x>
 8014126:	4603      	mov	r3, r0
 8014128:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 801412a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 801412e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	7b9b      	ldrb	r3, [r3, #14]
 8014136:	7b78      	ldrb	r0, [r7, #13]
 8014138:	f7ff ff61 	bl	8013ffe <u8g2_add_vector_y>
 801413c:	4603      	mov	r3, r0
 801413e:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8014140:	78bb      	ldrb	r3, [r7, #2]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d00f      	beq.n	8014166 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	7b1a      	ldrb	r2, [r3, #12]
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	7b9b      	ldrb	r3, [r3, #14]
 8014154:	7db8      	ldrb	r0, [r7, #22]
 8014156:	7b7a      	ldrb	r2, [r7, #13]
 8014158:	7bb9      	ldrb	r1, [r7, #14]
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	4603      	mov	r3, r0
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f000 fccf 	bl	8014b02 <u8g2_DrawHVLine>
 8014164:	e012      	b.n	801418c <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	7adb      	ldrb	r3, [r3, #11]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d10e      	bne.n	801418c <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 801416e:	693b      	ldr	r3, [r7, #16]
 8014170:	7b5a      	ldrb	r2, [r3, #13]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	7b9b      	ldrb	r3, [r3, #14]
 801417c:	7db8      	ldrb	r0, [r7, #22]
 801417e:	7b7a      	ldrb	r2, [r7, #13]
 8014180:	7bb9      	ldrb	r1, [r7, #14]
 8014182:	9300      	str	r3, [sp, #0]
 8014184:	4603      	mov	r3, r0
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f000 fcbb 	bl	8014b02 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 801418c:	7dfa      	ldrb	r2, [r7, #23]
 801418e:	7bfb      	ldrb	r3, [r7, #15]
 8014190:	429a      	cmp	r2, r3
 8014192:	d309      	bcc.n	80141a8 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8014194:	7dfa      	ldrb	r2, [r7, #23]
 8014196:	7bfb      	ldrb	r3, [r7, #15]
 8014198:	1ad3      	subs	r3, r2, r3
 801419a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 801419c:	2300      	movs	r3, #0
 801419e:	757b      	strb	r3, [r7, #21]
    ly++;
 80141a0:	7d3b      	ldrb	r3, [r7, #20]
 80141a2:	3301      	adds	r3, #1
 80141a4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80141a6:	e79f      	b.n	80140e8 <u8g2_font_decode_len+0x2a>
      break;
 80141a8:	bf00      	nop
  }
  lx += cnt;
 80141aa:	7d7a      	ldrb	r2, [r7, #21]
 80141ac:	7dfb      	ldrb	r3, [r7, #23]
 80141ae:	4413      	add	r3, r2
 80141b0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80141b2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 80141ba:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	71da      	strb	r2, [r3, #7]
  
}
 80141c2:	bf00      	nop
 80141c4:	3718      	adds	r7, #24
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}

080141ca <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80141ca:	b580      	push	{r7, lr}
 80141cc:	b084      	sub	sp, #16
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	6078      	str	r0, [r7, #4]
 80141d2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	3354      	adds	r3, #84	; 0x54
 80141d8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	683a      	ldr	r2, [r7, #0]
 80141de:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	2200      	movs	r2, #0
 80141e4:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80141ec:	4619      	mov	r1, r3
 80141ee:	68f8      	ldr	r0, [r7, #12]
 80141f0:	f7ff fe97 	bl	8013f22 <u8g2_font_decode_get_unsigned_bits>
 80141f4:	4603      	mov	r3, r0
 80141f6:	b25a      	sxtb	r2, r3
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8014202:	4619      	mov	r1, r3
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f7ff fe8c 	bl	8013f22 <u8g2_font_decode_get_unsigned_bits>
 801420a:	4603      	mov	r3, r0
 801420c:	b25a      	sxtb	r2, r3
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	7b1b      	ldrb	r3, [r3, #12]
 8014220:	2b00      	cmp	r3, #0
 8014222:	bf0c      	ite	eq
 8014224:	2301      	moveq	r3, #1
 8014226:	2300      	movne	r3, #0
 8014228:	b2db      	uxtb	r3, r3
 801422a:	461a      	mov	r2, r3
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	735a      	strb	r2, [r3, #13]
}
 8014230:	bf00      	nop
 8014232:	3710      	adds	r7, #16
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b088      	sub	sp, #32
 801423c:	af02      	add	r7, sp, #8
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	3354      	adds	r3, #84	; 0x54
 8014246:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8014248:	6839      	ldr	r1, [r7, #0]
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f7ff ffbd 	bl	80141ca <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014256:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 801425e:	4619      	mov	r1, r3
 8014260:	6938      	ldr	r0, [r7, #16]
 8014262:	f7ff fea9 	bl	8013fb8 <u8g2_font_decode_get_signed_bits>
 8014266:	4603      	mov	r3, r0
 8014268:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8014270:	4619      	mov	r1, r3
 8014272:	6938      	ldr	r0, [r7, #16]
 8014274:	f7ff fea0 	bl	8013fb8 <u8g2_font_decode_get_signed_bits>
 8014278:	4603      	mov	r3, r0
 801427a:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8014282:	4619      	mov	r1, r3
 8014284:	6938      	ldr	r0, [r7, #16]
 8014286:	f7ff fe97 	bl	8013fb8 <u8g2_font_decode_get_signed_bits>
 801428a:	4603      	mov	r3, r0
 801428c:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014294:	2b00      	cmp	r3, #0
 8014296:	f340 80cf 	ble.w	8014438 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 801429a:	693b      	ldr	r3, [r7, #16]
 801429c:	7918      	ldrb	r0, [r3, #4]
 801429e:	7bfa      	ldrb	r2, [r7, #15]
 80142a0:	7b7b      	ldrb	r3, [r7, #13]
 80142a2:	4413      	add	r3, r2
 80142a4:	b2db      	uxtb	r3, r3
 80142a6:	425b      	negs	r3, r3
 80142a8:	b2db      	uxtb	r3, r3
 80142aa:	b25a      	sxtb	r2, r3
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	7b9b      	ldrb	r3, [r3, #14]
 80142b0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80142b4:	f7ff fed3 	bl	801405e <u8g2_add_vector_x>
 80142b8:	4603      	mov	r3, r0
 80142ba:	461a      	mov	r2, r3
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	7958      	ldrb	r0, [r3, #5]
 80142c4:	7bfa      	ldrb	r2, [r7, #15]
 80142c6:	7b7b      	ldrb	r3, [r7, #13]
 80142c8:	4413      	add	r3, r2
 80142ca:	b2db      	uxtb	r3, r3
 80142cc:	425b      	negs	r3, r3
 80142ce:	b2db      	uxtb	r3, r3
 80142d0:	b25a      	sxtb	r2, r3
 80142d2:	693b      	ldr	r3, [r7, #16]
 80142d4:	7b9b      	ldrb	r3, [r3, #14]
 80142d6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80142da:	f7ff fe90 	bl	8013ffe <u8g2_add_vector_y>
 80142de:	4603      	mov	r3, r0
 80142e0:	461a      	mov	r2, r3
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	791b      	ldrb	r3, [r3, #4]
 80142ea:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	795b      	ldrb	r3, [r3, #5]
 80142f0:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 80142f2:	7dfb      	ldrb	r3, [r7, #23]
 80142f4:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 80142f6:	7d7b      	ldrb	r3, [r7, #21]
 80142f8:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	7b9b      	ldrb	r3, [r3, #14]
 80142fe:	2b03      	cmp	r3, #3
 8014300:	d852      	bhi.n	80143a8 <u8g2_font_decode_glyph+0x170>
 8014302:	a201      	add	r2, pc, #4	; (adr r2, 8014308 <u8g2_font_decode_glyph+0xd0>)
 8014304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014308:	08014319 	.word	0x08014319
 801430c:	08014331 	.word	0x08014331
 8014310:	08014355 	.word	0x08014355
 8014314:	08014385 	.word	0x08014385
      {
	case 0:
	    x1 += decode->glyph_width;
 8014318:	693b      	ldr	r3, [r7, #16]
 801431a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801431e:	b2da      	uxtb	r2, r3
 8014320:	7dbb      	ldrb	r3, [r7, #22]
 8014322:	4413      	add	r3, r2
 8014324:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8014326:	7bfa      	ldrb	r2, [r7, #15]
 8014328:	7d3b      	ldrb	r3, [r7, #20]
 801432a:	4413      	add	r3, r2
 801432c:	753b      	strb	r3, [r7, #20]
	    break;
 801432e:	e03b      	b.n	80143a8 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8014330:	7bfb      	ldrb	r3, [r7, #15]
 8014332:	7dfa      	ldrb	r2, [r7, #23]
 8014334:	1ad3      	subs	r3, r2, r3
 8014336:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8014338:	7dfb      	ldrb	r3, [r7, #23]
 801433a:	3301      	adds	r3, #1
 801433c:	75fb      	strb	r3, [r7, #23]
	    x1++;
 801433e:	7dbb      	ldrb	r3, [r7, #22]
 8014340:	3301      	adds	r3, #1
 8014342:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801434a:	b2da      	uxtb	r2, r3
 801434c:	7d3b      	ldrb	r3, [r7, #20]
 801434e:	4413      	add	r3, r2
 8014350:	753b      	strb	r3, [r7, #20]
	    break;
 8014352:	e029      	b.n	80143a8 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801435a:	b2db      	uxtb	r3, r3
 801435c:	7dfa      	ldrb	r2, [r7, #23]
 801435e:	1ad3      	subs	r3, r2, r3
 8014360:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8014362:	7dfb      	ldrb	r3, [r7, #23]
 8014364:	3301      	adds	r3, #1
 8014366:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8014368:	7dbb      	ldrb	r3, [r7, #22]
 801436a:	3301      	adds	r3, #1
 801436c:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 801436e:	7bfb      	ldrb	r3, [r7, #15]
 8014370:	7d7a      	ldrb	r2, [r7, #21]
 8014372:	1ad3      	subs	r3, r2, r3
 8014374:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8014376:	7d7b      	ldrb	r3, [r7, #21]
 8014378:	3301      	adds	r3, #1
 801437a:	757b      	strb	r3, [r7, #21]
	    y1++;
 801437c:	7d3b      	ldrb	r3, [r7, #20]
 801437e:	3301      	adds	r3, #1
 8014380:	753b      	strb	r3, [r7, #20]
	    break;	  
 8014382:	e011      	b.n	80143a8 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8014384:	7bfa      	ldrb	r2, [r7, #15]
 8014386:	7dbb      	ldrb	r3, [r7, #22]
 8014388:	4413      	add	r3, r2
 801438a:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014392:	b2db      	uxtb	r3, r3
 8014394:	7d7a      	ldrb	r2, [r7, #21]
 8014396:	1ad3      	subs	r3, r2, r3
 8014398:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 801439a:	7d7b      	ldrb	r3, [r7, #21]
 801439c:	3301      	adds	r3, #1
 801439e:	757b      	strb	r3, [r7, #21]
	    y1++;
 80143a0:	7d3b      	ldrb	r3, [r7, #20]
 80143a2:	3301      	adds	r3, #1
 80143a4:	753b      	strb	r3, [r7, #20]
	    break;	  
 80143a6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80143a8:	7db8      	ldrb	r0, [r7, #22]
 80143aa:	7d7a      	ldrb	r2, [r7, #21]
 80143ac:	7df9      	ldrb	r1, [r7, #23]
 80143ae:	7d3b      	ldrb	r3, [r7, #20]
 80143b0:	9300      	str	r3, [sp, #0]
 80143b2:	4603      	mov	r3, r0
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f000 fe50 	bl	801505a <u8g2_IsIntersection>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d102      	bne.n	80143c6 <u8g2_font_decode_glyph+0x18e>
	return d;
 80143c0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80143c4:	e03a      	b.n	801443c <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	2200      	movs	r2, #0
 80143ca:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	2200      	movs	r2, #0
 80143d0:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80143d8:	4619      	mov	r1, r3
 80143da:	6938      	ldr	r0, [r7, #16]
 80143dc:	f7ff fda1 	bl	8013f22 <u8g2_font_decode_get_unsigned_bits>
 80143e0:	4603      	mov	r3, r0
 80143e2:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80143ea:	4619      	mov	r1, r3
 80143ec:	6938      	ldr	r0, [r7, #16]
 80143ee:	f7ff fd98 	bl	8013f22 <u8g2_font_decode_get_unsigned_bits>
 80143f2:	4603      	mov	r3, r0
 80143f4:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80143f6:	7afb      	ldrb	r3, [r7, #11]
 80143f8:	2200      	movs	r2, #0
 80143fa:	4619      	mov	r1, r3
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7ff fe5e 	bl	80140be <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8014402:	7abb      	ldrb	r3, [r7, #10]
 8014404:	2201      	movs	r2, #1
 8014406:	4619      	mov	r1, r3
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7ff fe58 	bl	80140be <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 801440e:	2101      	movs	r1, #1
 8014410:	6938      	ldr	r0, [r7, #16]
 8014412:	f7ff fd86 	bl	8013f22 <u8g2_font_decode_get_unsigned_bits>
 8014416:	4603      	mov	r3, r0
 8014418:	2b00      	cmp	r3, #0
 801441a:	d1ec      	bne.n	80143f6 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8014422:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014426:	429a      	cmp	r2, r3
 8014428:	dd00      	ble.n	801442c <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 801442a:	e7d2      	b.n	80143d2 <u8g2_font_decode_glyph+0x19a>
	break;
 801442c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	7b1a      	ldrb	r2, [r3, #12]
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8014438:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 801443c:	4618      	mov	r0, r3
 801443e:	3718      	adds	r7, #24
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b086      	sub	sp, #24
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	460b      	mov	r3, r1
 801444e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014454:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	3317      	adds	r3, #23
 801445a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 801445c:	887b      	ldrh	r3, [r7, #2]
 801445e:	2bff      	cmp	r3, #255	; 0xff
 8014460:	d82a      	bhi.n	80144b8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8014462:	887b      	ldrh	r3, [r7, #2]
 8014464:	2b60      	cmp	r3, #96	; 0x60
 8014466:	d907      	bls.n	8014478 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 801446e:	461a      	mov	r2, r3
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	4413      	add	r3, r2
 8014474:	617b      	str	r3, [r7, #20]
 8014476:	e009      	b.n	801448c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8014478:	887b      	ldrh	r3, [r7, #2]
 801447a:	2b40      	cmp	r3, #64	; 0x40
 801447c:	d906      	bls.n	801448c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8014484:	461a      	mov	r2, r3
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	4413      	add	r3, r2
 801448a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 801448c:	697b      	ldr	r3, [r7, #20]
 801448e:	3301      	adds	r3, #1
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d04e      	beq.n	8014534 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	b29b      	uxth	r3, r3
 801449c:	887a      	ldrh	r2, [r7, #2]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d102      	bne.n	80144a8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	3302      	adds	r3, #2
 80144a6:	e049      	b.n	801453c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	3301      	adds	r3, #1
 80144ac:	781b      	ldrb	r3, [r3, #0]
 80144ae:	461a      	mov	r2, r3
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	4413      	add	r3, r2
 80144b4:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80144b6:	e7e9      	b.n	801448c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80144be:	461a      	mov	r2, r3
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	4413      	add	r3, r2
 80144c4:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80144ca:	2100      	movs	r1, #0
 80144cc:	6938      	ldr	r0, [r7, #16]
 80144ce:	f7ff fc5f 	bl	8013d90 <u8g2_font_get_word>
 80144d2:	4603      	mov	r3, r0
 80144d4:	461a      	mov	r2, r3
 80144d6:	697b      	ldr	r3, [r7, #20]
 80144d8:	4413      	add	r3, r2
 80144da:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80144dc:	2102      	movs	r1, #2
 80144de:	6938      	ldr	r0, [r7, #16]
 80144e0:	f7ff fc56 	bl	8013d90 <u8g2_font_get_word>
 80144e4:	4603      	mov	r3, r0
 80144e6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	3304      	adds	r3, #4
 80144ec:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80144ee:	89fa      	ldrh	r2, [r7, #14]
 80144f0:	887b      	ldrh	r3, [r7, #2]
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d3e9      	bcc.n	80144ca <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80144fc:	89fb      	ldrh	r3, [r7, #14]
 80144fe:	021b      	lsls	r3, r3, #8
 8014500:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	3301      	adds	r3, #1
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	b29a      	uxth	r2, r3
 801450a:	89fb      	ldrh	r3, [r7, #14]
 801450c:	4313      	orrs	r3, r2
 801450e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8014510:	89fb      	ldrh	r3, [r7, #14]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d010      	beq.n	8014538 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8014516:	89fa      	ldrh	r2, [r7, #14]
 8014518:	887b      	ldrh	r3, [r7, #2]
 801451a:	429a      	cmp	r2, r3
 801451c:	d102      	bne.n	8014524 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	3303      	adds	r3, #3
 8014522:	e00b      	b.n	801453c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	3302      	adds	r3, #2
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	461a      	mov	r2, r3
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	4413      	add	r3, r2
 8014530:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8014532:	e7e0      	b.n	80144f6 <u8g2_font_get_glyph_data+0xb2>
	break;
 8014534:	bf00      	nop
 8014536:	e000      	b.n	801453a <u8g2_font_get_glyph_data+0xf6>
	break;
 8014538:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 801453a:	2300      	movs	r3, #0
}
 801453c:	4618      	mov	r0, r3
 801453e:	3718      	adds	r7, #24
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}

08014544 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b084      	sub	sp, #16
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
 801454c:	4608      	mov	r0, r1
 801454e:	4611      	mov	r1, r2
 8014550:	461a      	mov	r2, r3
 8014552:	4603      	mov	r3, r0
 8014554:	70fb      	strb	r3, [r7, #3]
 8014556:	460b      	mov	r3, r1
 8014558:	70bb      	strb	r3, [r7, #2]
 801455a:	4613      	mov	r3, r2
 801455c:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 801455e:	2300      	movs	r3, #0
 8014560:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	78fa      	ldrb	r2, [r7, #3]
 8014566:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	78ba      	ldrb	r2, [r7, #2]
 801456e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8014572:	883b      	ldrh	r3, [r7, #0]
 8014574:	4619      	mov	r1, r3
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f7ff ff64 	bl	8014444 <u8g2_font_get_glyph_data>
 801457c:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d005      	beq.n	8014590 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8014584:	68b9      	ldr	r1, [r7, #8]
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f7ff fe56 	bl	8014238 <u8g2_font_decode_glyph>
 801458c:	4603      	mov	r3, r0
 801458e:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8014590:	7bfb      	ldrb	r3, [r7, #15]
}
 8014592:	4618      	mov	r0, r3
 8014594:	3710      	adds	r7, #16
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}

0801459a <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 801459a:	b580      	push	{r7, lr}
 801459c:	b084      	sub	sp, #16
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
 80145a2:	460b      	mov	r3, r1
 80145a4:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 80145a6:	887b      	ldrh	r3, [r7, #2]
 80145a8:	4619      	mov	r1, r3
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f7ff ff4a 	bl	8014444 <u8g2_font_get_glyph_data>
 80145b0:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d101      	bne.n	80145bc <u8g2_GetGlyphWidth+0x22>
    return 0; 
 80145b8:	2300      	movs	r3, #0
 80145ba:	e027      	b.n	801460c <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 80145bc:	68f9      	ldr	r1, [r7, #12]
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f7ff fe03 	bl	80141ca <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80145d0:	4619      	mov	r1, r3
 80145d2:	4610      	mov	r0, r2
 80145d4:	f7ff fcf0 	bl	8013fb8 <u8g2_font_decode_get_signed_bits>
 80145d8:	4603      	mov	r3, r0
 80145da:	461a      	mov	r2, r3
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80145ee:	4619      	mov	r1, r3
 80145f0:	4610      	mov	r0, r2
 80145f2:	f7ff fce1 	bl	8013fb8 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8014602:	4619      	mov	r1, r3
 8014604:	4610      	mov	r0, r2
 8014606:	f7ff fcd7 	bl	8013fb8 <u8g2_font_decode_get_signed_bits>
 801460a:	4603      	mov	r3, r0
}
 801460c:	4618      	mov	r0, r3
 801460e:	3710      	adds	r7, #16
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8014614:	b480      	push	{r7}
 8014616:	b083      	sub	sp, #12
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	460b      	mov	r3, r1
 801461e:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	78fa      	ldrb	r2, [r7, #3]
 8014624:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8014628:	bf00      	nop
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014632:	4770      	bx	lr

08014634 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b082      	sub	sp, #8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	4608      	mov	r0, r1
 801463e:	4611      	mov	r1, r2
 8014640:	461a      	mov	r2, r3
 8014642:	4603      	mov	r3, r0
 8014644:	70fb      	strb	r3, [r7, #3]
 8014646:	460b      	mov	r3, r1
 8014648:	70bb      	strb	r3, [r7, #2]
 801464a:	4613      	mov	r3, r2
 801464c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014654:	2b03      	cmp	r3, #3
 8014656:	d833      	bhi.n	80146c0 <u8g2_DrawGlyph+0x8c>
 8014658:	a201      	add	r2, pc, #4	; (adr r2, 8014660 <u8g2_DrawGlyph+0x2c>)
 801465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801465e:	bf00      	nop
 8014660:	08014671 	.word	0x08014671
 8014664:	08014685 	.word	0x08014685
 8014668:	08014699 	.word	0x08014699
 801466c:	080146ad 	.word	0x080146ad
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	4798      	blx	r3
 8014678:	4603      	mov	r3, r0
 801467a:	461a      	mov	r2, r3
 801467c:	78bb      	ldrb	r3, [r7, #2]
 801467e:	4413      	add	r3, r2
 8014680:	70bb      	strb	r3, [r7, #2]
      break;
 8014682:	e01d      	b.n	80146c0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	4798      	blx	r3
 801468c:	4603      	mov	r3, r0
 801468e:	461a      	mov	r2, r3
 8014690:	78fb      	ldrb	r3, [r7, #3]
 8014692:	1a9b      	subs	r3, r3, r2
 8014694:	70fb      	strb	r3, [r7, #3]
      break;
 8014696:	e013      	b.n	80146c0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	4798      	blx	r3
 80146a0:	4603      	mov	r3, r0
 80146a2:	461a      	mov	r2, r3
 80146a4:	78bb      	ldrb	r3, [r7, #2]
 80146a6:	1a9b      	subs	r3, r3, r2
 80146a8:	70bb      	strb	r3, [r7, #2]
      break;
 80146aa:	e009      	b.n	80146c0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	4798      	blx	r3
 80146b4:	4603      	mov	r3, r0
 80146b6:	461a      	mov	r2, r3
 80146b8:	78fb      	ldrb	r3, [r7, #3]
 80146ba:	4413      	add	r3, r2
 80146bc:	70fb      	strb	r3, [r7, #3]
      break;
 80146be:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80146c0:	883b      	ldrh	r3, [r7, #0]
 80146c2:	78ba      	ldrb	r2, [r7, #2]
 80146c4:	78f9      	ldrb	r1, [r7, #3]
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f7ff ff3c 	bl	8014544 <u8g2_font_draw_glyph>
 80146cc:	4603      	mov	r3, r0
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3708      	adds	r7, #8
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop

080146d8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b086      	sub	sp, #24
 80146dc:	af00      	add	r7, sp, #0
 80146de:	60f8      	str	r0, [r7, #12]
 80146e0:	607b      	str	r3, [r7, #4]
 80146e2:	460b      	mov	r3, r1
 80146e4:	72fb      	strb	r3, [r7, #11]
 80146e6:	4613      	mov	r3, r2
 80146e8:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80146ea:	68f8      	ldr	r0, [r7, #12]
 80146ec:	f001 fb42 	bl	8015d74 <u8x8_utf8_init>
  sum = 0;
 80146f0:	2300      	movs	r3, #0
 80146f2:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	7812      	ldrb	r2, [r2, #0]
 80146fc:	4611      	mov	r1, r2
 80146fe:	68f8      	ldr	r0, [r7, #12]
 8014700:	4798      	blx	r3
 8014702:	4603      	mov	r3, r0
 8014704:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8014706:	8abb      	ldrh	r3, [r7, #20]
 8014708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801470c:	4293      	cmp	r3, r2
 801470e:	d038      	beq.n	8014782 <u8g2_draw_string+0xaa>
      break;
    str++;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	3301      	adds	r3, #1
 8014714:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8014716:	8abb      	ldrh	r3, [r7, #20]
 8014718:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801471c:	4293      	cmp	r3, r2
 801471e:	d0e9      	beq.n	80146f4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8014720:	8abb      	ldrh	r3, [r7, #20]
 8014722:	7aba      	ldrb	r2, [r7, #10]
 8014724:	7af9      	ldrb	r1, [r7, #11]
 8014726:	68f8      	ldr	r0, [r7, #12]
 8014728:	f7ff ff84 	bl	8014634 <u8g2_DrawGlyph>
 801472c:	4603      	mov	r3, r0
 801472e:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014736:	2b03      	cmp	r3, #3
 8014738:	d81e      	bhi.n	8014778 <u8g2_draw_string+0xa0>
 801473a:	a201      	add	r2, pc, #4	; (adr r2, 8014740 <u8g2_draw_string+0x68>)
 801473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014740:	08014751 	.word	0x08014751
 8014744:	0801475b 	.word	0x0801475b
 8014748:	08014765 	.word	0x08014765
 801474c:	0801476f 	.word	0x0801476f
      {
	case 0:
	  x += delta;
 8014750:	7afa      	ldrb	r2, [r7, #11]
 8014752:	7cfb      	ldrb	r3, [r7, #19]
 8014754:	4413      	add	r3, r2
 8014756:	72fb      	strb	r3, [r7, #11]
	  break;
 8014758:	e00e      	b.n	8014778 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 801475a:	7aba      	ldrb	r2, [r7, #10]
 801475c:	7cfb      	ldrb	r3, [r7, #19]
 801475e:	4413      	add	r3, r2
 8014760:	72bb      	strb	r3, [r7, #10]
	  break;
 8014762:	e009      	b.n	8014778 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8014764:	7afa      	ldrb	r2, [r7, #11]
 8014766:	7cfb      	ldrb	r3, [r7, #19]
 8014768:	1ad3      	subs	r3, r2, r3
 801476a:	72fb      	strb	r3, [r7, #11]
	  break;
 801476c:	e004      	b.n	8014778 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 801476e:	7aba      	ldrb	r2, [r7, #10]
 8014770:	7cfb      	ldrb	r3, [r7, #19]
 8014772:	1ad3      	subs	r3, r2, r3
 8014774:	72bb      	strb	r3, [r7, #10]
	  break;
 8014776:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8014778:	7dfa      	ldrb	r2, [r7, #23]
 801477a:	7cfb      	ldrb	r3, [r7, #19]
 801477c:	4413      	add	r3, r2
 801477e:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8014780:	e7b8      	b.n	80146f4 <u8g2_draw_string+0x1c>
      break;
 8014782:	bf00      	nop
    }
  }
  return sum;
 8014784:	7dfb      	ldrb	r3, [r7, #23]
}
 8014786:	4618      	mov	r0, r3
 8014788:	3718      	adds	r7, #24
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop

08014790 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b084      	sub	sp, #16
 8014794:	af00      	add	r7, sp, #0
 8014796:	60f8      	str	r0, [r7, #12]
 8014798:	607b      	str	r3, [r7, #4]
 801479a:	460b      	mov	r3, r1
 801479c:	72fb      	strb	r3, [r7, #11]
 801479e:	4613      	mov	r3, r2
 80147a0:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	4a06      	ldr	r2, [pc, #24]	; (80147c0 <u8g2_DrawStr+0x30>)
 80147a6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80147a8:	7aba      	ldrb	r2, [r7, #10]
 80147aa:	7af9      	ldrb	r1, [r7, #11]
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	68f8      	ldr	r0, [r7, #12]
 80147b0:	f7ff ff92 	bl	80146d8 <u8g2_draw_string>
 80147b4:	4603      	mov	r3, r0
}
 80147b6:	4618      	mov	r0, r3
 80147b8:	3710      	adds	r7, #16
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}
 80147be:	bf00      	nop
 80147c0:	08015d91 	.word	0x08015d91

080147c4 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b084      	sub	sp, #16
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	607b      	str	r3, [r7, #4]
 80147ce:	460b      	mov	r3, r1
 80147d0:	72fb      	strb	r3, [r7, #11]
 80147d2:	4613      	mov	r3, r2
 80147d4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	4a06      	ldr	r2, [pc, #24]	; (80147f4 <u8g2_DrawUTF8+0x30>)
 80147da:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80147dc:	7aba      	ldrb	r2, [r7, #10]
 80147de:	7af9      	ldrb	r1, [r7, #11]
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	68f8      	ldr	r0, [r7, #12]
 80147e4:	f7ff ff78 	bl	80146d8 <u8g2_draw_string>
 80147e8:	4603      	mov	r3, r0
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3710      	adds	r7, #16
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	08015dbf 	.word	0x08015dbf

080147f8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014804:	2b00      	cmp	r3, #0
 8014806:	d05d      	beq.n	80148c4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014826:	2b00      	cmp	r3, #0
 8014828:	d04d      	beq.n	80148c6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014830:	2b01      	cmp	r3, #1
 8014832:	d11c      	bne.n	801486e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8014840:	429a      	cmp	r2, r3
 8014842:	da05      	bge.n	8014850 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 801485c:	429a      	cmp	r2, r3
 801485e:	dd32      	ble.n	80148c6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 801486c:	e02b      	b.n	80148c6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8014874:	461a      	mov	r2, r3
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801487c:	4619      	mov	r1, r3
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014884:	440b      	add	r3, r1
 8014886:	429a      	cmp	r2, r3
 8014888:	da0d      	bge.n	80148a6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8014890:	b2da      	uxtb	r2, r3
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014898:	b2db      	uxtb	r3, r3
 801489a:	4413      	add	r3, r2
 801489c:	b2db      	uxtb	r3, r3
 801489e:	b25a      	sxtb	r2, r3
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80148b2:	429a      	cmp	r2, r3
 80148b4:	dd07      	ble.n	80148c6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80148c2:	e000      	b.n	80148c6 <u8g2_UpdateRefHeight+0xce>
    return;
 80148c4:	bf00      	nop
  }  
}
 80148c6:	370c      	adds	r7, #12
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr

080148d0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
  return 0;
 80148d8:	2300      	movs	r3, #0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	370c      	adds	r7, #12
 80148de:	46bd      	mov	sp, r7
 80148e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e4:	4770      	bx	lr
	...

080148e8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	4a04      	ldr	r2, [pc, #16]	; (8014904 <u8g2_SetFontPosBaseline+0x1c>)
 80148f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80148f6:	bf00      	nop
 80148f8:	370c      	adds	r7, #12
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr
 8014902:	bf00      	nop
 8014904:	080148d1 	.word	0x080148d1

08014908 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014916:	683a      	ldr	r2, [r7, #0]
 8014918:	429a      	cmp	r2, r3
 801491a:	d00b      	beq.n	8014934 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	683a      	ldr	r2, [r7, #0]
 8014920:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	3364      	adds	r3, #100	; 0x64
 8014926:	6839      	ldr	r1, [r7, #0]
 8014928:	4618      	mov	r0, r3
 801492a:	f7ff fa51 	bl	8013dd0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f7ff ff62 	bl	80147f8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8014934:	bf00      	nop
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}

0801493c <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b084      	sub	sp, #16
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2200      	movs	r2, #0
 801494a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f001 fa10 	bl	8015d74 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8014954:	2300      	movs	r3, #0
 8014956:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8014958:	2300      	movs	r3, #0
 801495a:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	683a      	ldr	r2, [r7, #0]
 8014962:	7812      	ldrb	r2, [r2, #0]
 8014964:	4611      	mov	r1, r2
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	4798      	blx	r3
 801496a:	4603      	mov	r3, r0
 801496c:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 801496e:	89bb      	ldrh	r3, [r7, #12]
 8014970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014974:	4293      	cmp	r3, r2
 8014976:	d013      	beq.n	80149a0 <u8g2_string_width+0x64>
      break;
    str++;
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	3301      	adds	r3, #1
 801497c:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 801497e:	89bb      	ldrh	r3, [r7, #12]
 8014980:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014984:	4293      	cmp	r3, r2
 8014986:	d0e9      	beq.n	801495c <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8014988:	89bb      	ldrh	r3, [r7, #12]
 801498a:	4619      	mov	r1, r3
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f7ff fe04 	bl	801459a <u8g2_GetGlyphWidth>
 8014992:	4603      	mov	r3, r0
 8014994:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8014996:	7bfa      	ldrb	r2, [r7, #15]
 8014998:	7bbb      	ldrb	r3, [r7, #14]
 801499a:	4413      	add	r3, r2
 801499c:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 801499e:	e7dd      	b.n	801495c <u8g2_string_width+0x20>
      break;
 80149a0:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d011      	beq.n	80149d0 <u8g2_string_width+0x94>
  {
    w -= dx;
 80149ac:	7bfa      	ldrb	r2, [r7, #15]
 80149ae:	7bbb      	ldrb	r3, [r7, #14]
 80149b0:	1ad3      	subs	r3, r2, r3
 80149b2:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80149ba:	b2da      	uxtb	r2, r3
 80149bc:	7bfb      	ldrb	r3, [r7, #15]
 80149be:	4413      	add	r3, r2
 80149c0:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80149c8:	b2da      	uxtb	r2, r3
 80149ca:	7bfb      	ldrb	r3, [r7, #15]
 80149cc:	4413      	add	r3, r2
 80149ce:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 80149d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3710      	adds	r7, #16
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
	...

080149dc <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	4a05      	ldr	r2, [pc, #20]	; (8014a00 <u8g2_GetUTF8Width+0x24>)
 80149ea:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 80149ec:	6839      	ldr	r1, [r7, #0]
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f7ff ffa4 	bl	801493c <u8g2_string_width>
 80149f4:	4603      	mov	r3, r0
}
 80149f6:	4618      	mov	r0, r3
 80149f8:	3708      	adds	r7, #8
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}
 80149fe:	bf00      	nop
 8014a00:	08015dbf 	.word	0x08015dbf

08014a04 <u8g2_SetFontDirection>:



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8014a04:	b480      	push	{r7}
 8014a06:	b083      	sub	sp, #12
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	78fa      	ldrb	r2, [r7, #3]
 8014a14:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8014a18:	bf00      	nop
 8014a1a:	370c      	adds	r7, #12
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr

08014a24 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8014a24:	b480      	push	{r7}
 8014a26:	b087      	sub	sp, #28
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	60f8      	str	r0, [r7, #12]
 8014a2c:	60b9      	str	r1, [r7, #8]
 8014a2e:	4611      	mov	r1, r2
 8014a30:	461a      	mov	r2, r3
 8014a32:	460b      	mov	r3, r1
 8014a34:	71fb      	strb	r3, [r7, #7]
 8014a36:	4613      	mov	r3, r2
 8014a38:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8014a40:	7dfb      	ldrb	r3, [r7, #23]
 8014a42:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	781a      	ldrb	r2, [r3, #0]
 8014a48:	7dbb      	ldrb	r3, [r7, #22]
 8014a4a:	4413      	add	r3, r2
 8014a4c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8014a4e:	7dfa      	ldrb	r2, [r7, #23]
 8014a50:	7dbb      	ldrb	r3, [r7, #22]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d90b      	bls.n	8014a6e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8014a56:	7dfa      	ldrb	r2, [r7, #23]
 8014a58:	79bb      	ldrb	r3, [r7, #6]
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	d205      	bcs.n	8014a6a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8014a5e:	79bb      	ldrb	r3, [r7, #6]
 8014a60:	75bb      	strb	r3, [r7, #22]
      b--;
 8014a62:	7dbb      	ldrb	r3, [r7, #22]
 8014a64:	3b01      	subs	r3, #1
 8014a66:	75bb      	strb	r3, [r7, #22]
 8014a68:	e001      	b.n	8014a6e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8014a6a:	79fb      	ldrb	r3, [r7, #7]
 8014a6c:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8014a6e:	7dfa      	ldrb	r2, [r7, #23]
 8014a70:	79bb      	ldrb	r3, [r7, #6]
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d301      	bcc.n	8014a7a <u8g2_clip_intersection2+0x56>
    return 0;
 8014a76:	2300      	movs	r3, #0
 8014a78:	e01c      	b.n	8014ab4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8014a7a:	7dba      	ldrb	r2, [r7, #22]
 8014a7c:	79fb      	ldrb	r3, [r7, #7]
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	d801      	bhi.n	8014a86 <u8g2_clip_intersection2+0x62>
    return 0;
 8014a82:	2300      	movs	r3, #0
 8014a84:	e016      	b.n	8014ab4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8014a86:	7dfa      	ldrb	r2, [r7, #23]
 8014a88:	79fb      	ldrb	r3, [r7, #7]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d201      	bcs.n	8014a92 <u8g2_clip_intersection2+0x6e>
    a = c;
 8014a8e:	79fb      	ldrb	r3, [r7, #7]
 8014a90:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8014a92:	7dba      	ldrb	r2, [r7, #22]
 8014a94:	79bb      	ldrb	r3, [r7, #6]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d901      	bls.n	8014a9e <u8g2_clip_intersection2+0x7a>
    b = d;
 8014a9a:	79bb      	ldrb	r3, [r7, #6]
 8014a9c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	7dfa      	ldrb	r2, [r7, #23]
 8014aa2:	701a      	strb	r2, [r3, #0]
  b -= a;
 8014aa4:	7dba      	ldrb	r2, [r7, #22]
 8014aa6:	7dfb      	ldrb	r3, [r7, #23]
 8014aa8:	1ad3      	subs	r3, r2, r3
 8014aaa:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	7dba      	ldrb	r2, [r7, #22]
 8014ab0:	701a      	strb	r2, [r3, #0]
  return 1;
 8014ab2:	2301      	movs	r3, #1
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	371c      	adds	r7, #28
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr

08014ac0 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8014ac0:	b590      	push	{r4, r7, lr}
 8014ac2:	b085      	sub	sp, #20
 8014ac4:	af02      	add	r7, sp, #8
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	4608      	mov	r0, r1
 8014aca:	4611      	mov	r1, r2
 8014acc:	461a      	mov	r2, r3
 8014ace:	4603      	mov	r3, r0
 8014ad0:	70fb      	strb	r3, [r7, #3]
 8014ad2:	460b      	mov	r3, r1
 8014ad4:	70bb      	strb	r3, [r7, #2]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014ae0:	78ba      	ldrb	r2, [r7, #2]
 8014ae2:	1ad3      	subs	r3, r2, r3
 8014ae4:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8014aea:	7878      	ldrb	r0, [r7, #1]
 8014aec:	78ba      	ldrb	r2, [r7, #2]
 8014aee:	78f9      	ldrb	r1, [r7, #3]
 8014af0:	7e3b      	ldrb	r3, [r7, #24]
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	4603      	mov	r3, r0
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	47a0      	blx	r4
}
 8014afa:	bf00      	nop
 8014afc:	370c      	adds	r7, #12
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd90      	pop	{r4, r7, pc}

08014b02 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8014b02:	b590      	push	{r4, r7, lr}
 8014b04:	b085      	sub	sp, #20
 8014b06:	af02      	add	r7, sp, #8
 8014b08:	6078      	str	r0, [r7, #4]
 8014b0a:	4608      	mov	r0, r1
 8014b0c:	4611      	mov	r1, r2
 8014b0e:	461a      	mov	r2, r3
 8014b10:	4603      	mov	r3, r0
 8014b12:	70fb      	strb	r3, [r7, #3]
 8014b14:	460b      	mov	r3, r1
 8014b16:	70bb      	strb	r3, [r7, #2]
 8014b18:	4613      	mov	r3, r2
 8014b1a:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d06d      	beq.n	8014c02 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8014b26:	787b      	ldrb	r3, [r7, #1]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d06a      	beq.n	8014c02 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8014b2c:	787b      	ldrb	r3, [r7, #1]
 8014b2e:	2b01      	cmp	r3, #1
 8014b30:	d918      	bls.n	8014b64 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8014b32:	7e3b      	ldrb	r3, [r7, #24]
 8014b34:	2b02      	cmp	r3, #2
 8014b36:	d109      	bne.n	8014b4c <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8014b38:	78fa      	ldrb	r2, [r7, #3]
 8014b3a:	787b      	ldrb	r3, [r7, #1]
 8014b3c:	1ad3      	subs	r3, r2, r3
 8014b3e:	b2db      	uxtb	r3, r3
 8014b40:	70fb      	strb	r3, [r7, #3]
	  x++;
 8014b42:	78fb      	ldrb	r3, [r7, #3]
 8014b44:	3301      	adds	r3, #1
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	70fb      	strb	r3, [r7, #3]
 8014b4a:	e00b      	b.n	8014b64 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8014b4c:	7e3b      	ldrb	r3, [r7, #24]
 8014b4e:	2b03      	cmp	r3, #3
 8014b50:	d108      	bne.n	8014b64 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8014b52:	78ba      	ldrb	r2, [r7, #2]
 8014b54:	787b      	ldrb	r3, [r7, #1]
 8014b56:	1ad3      	subs	r3, r2, r3
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	70bb      	strb	r3, [r7, #2]
	  y++;
 8014b5c:	78bb      	ldrb	r3, [r7, #2]
 8014b5e:	3301      	adds	r3, #1
 8014b60:	b2db      	uxtb	r3, r3
 8014b62:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8014b64:	7e3b      	ldrb	r3, [r7, #24]
 8014b66:	f003 0301 	and.w	r3, r3, #1
 8014b6a:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8014b6c:	7e3b      	ldrb	r3, [r7, #24]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d119      	bne.n	8014ba6 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8014b78:	78bb      	ldrb	r3, [r7, #2]
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	d838      	bhi.n	8014bf0 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014b84:	78bb      	ldrb	r3, [r7, #2]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d934      	bls.n	8014bf4 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014b96:	1c79      	adds	r1, r7, #1
 8014b98:	1cf8      	adds	r0, r7, #3
 8014b9a:	f7ff ff43 	bl	8014a24 <u8g2_clip_intersection2>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d119      	bne.n	8014bd8 <u8g2_DrawHVLine+0xd6>
	  return;
 8014ba4:	e02d      	b.n	8014c02 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8014bac:	78fb      	ldrb	r3, [r7, #3]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d822      	bhi.n	8014bf8 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8014bb8:	78fb      	ldrb	r3, [r7, #3]
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d91e      	bls.n	8014bfc <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014bca:	1c79      	adds	r1, r7, #1
 8014bcc:	1cb8      	adds	r0, r7, #2
 8014bce:	f7ff ff29 	bl	8014a24 <u8g2_clip_intersection2>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d013      	beq.n	8014c00 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bdc:	689c      	ldr	r4, [r3, #8]
 8014bde:	78f9      	ldrb	r1, [r7, #3]
 8014be0:	78ba      	ldrb	r2, [r7, #2]
 8014be2:	7878      	ldrb	r0, [r7, #1]
 8014be4:	7e3b      	ldrb	r3, [r7, #24]
 8014be6:	9300      	str	r3, [sp, #0]
 8014be8:	4603      	mov	r3, r0
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	47a0      	blx	r4
 8014bee:	e008      	b.n	8014c02 <u8g2_DrawHVLine+0x100>
	  return;
 8014bf0:	bf00      	nop
 8014bf2:	e006      	b.n	8014c02 <u8g2_DrawHVLine+0x100>
	  return;
 8014bf4:	bf00      	nop
 8014bf6:	e004      	b.n	8014c02 <u8g2_DrawHVLine+0x100>
	  return;
 8014bf8:	bf00      	nop
 8014bfa:	e002      	b.n	8014c02 <u8g2_DrawHVLine+0x100>
	  return;
 8014bfc:	bf00      	nop
 8014bfe:	e000      	b.n	8014c02 <u8g2_DrawHVLine+0x100>
	  return;
 8014c00:	bf00      	nop
    }
}
 8014c02:	370c      	adds	r7, #12
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd90      	pop	{r4, r7, pc}

08014c08 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af02      	add	r7, sp, #8
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	4608      	mov	r0, r1
 8014c12:	4611      	mov	r1, r2
 8014c14:	461a      	mov	r2, r3
 8014c16:	4603      	mov	r3, r0
 8014c18:	70fb      	strb	r3, [r7, #3]
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	70bb      	strb	r3, [r7, #2]
 8014c1e:	4613      	mov	r3, r2
 8014c20:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8014c22:	7878      	ldrb	r0, [r7, #1]
 8014c24:	78ba      	ldrb	r2, [r7, #2]
 8014c26:	78f9      	ldrb	r1, [r7, #3]
 8014c28:	2300      	movs	r3, #0
 8014c2a:	9300      	str	r3, [sp, #0]
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f7ff ff67 	bl	8014b02 <u8g2_DrawHVLine>
}
 8014c34:	bf00      	nop
 8014c36:	3708      	adds	r7, #8
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}

08014c3c <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af02      	add	r7, sp, #8
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	460b      	mov	r3, r1
 8014c46:	70fb      	strb	r3, [r7, #3]
 8014c48:	4613      	mov	r3, r2
 8014c4a:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c52:	78ba      	ldrb	r2, [r7, #2]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d31a      	bcc.n	8014c8e <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c5e:	78ba      	ldrb	r2, [r7, #2]
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d216      	bcs.n	8014c92 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014c6a:	78fa      	ldrb	r2, [r7, #3]
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d312      	bcc.n	8014c96 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014c76:	78fa      	ldrb	r2, [r7, #3]
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d20e      	bcs.n	8014c9a <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8014c7c:	78ba      	ldrb	r2, [r7, #2]
 8014c7e:	78f9      	ldrb	r1, [r7, #3]
 8014c80:	2300      	movs	r3, #0
 8014c82:	9300      	str	r3, [sp, #0]
 8014c84:	2301      	movs	r3, #1
 8014c86:	6878      	ldr	r0, [r7, #4]
 8014c88:	f7ff ff3b 	bl	8014b02 <u8g2_DrawHVLine>
 8014c8c:	e006      	b.n	8014c9c <u8g2_DrawPixel+0x60>
    return;
 8014c8e:	bf00      	nop
 8014c90:	e004      	b.n	8014c9c <u8g2_DrawPixel+0x60>
    return;
 8014c92:	bf00      	nop
 8014c94:	e002      	b.n	8014c9c <u8g2_DrawPixel+0x60>
    return;
 8014c96:	bf00      	nop
 8014c98:	e000      	b.n	8014c9c <u8g2_DrawPixel+0x60>
    return;
 8014c9a:	bf00      	nop
}
 8014c9c:	3708      	adds	r7, #8
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}

08014ca2 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8014ca2:	b480      	push	{r7}
 8014ca4:	b083      	sub	sp, #12
 8014ca6:	af00      	add	r7, sp, #0
 8014ca8:	6078      	str	r0, [r7, #4]
 8014caa:	460b      	mov	r3, r1
 8014cac:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	78fa      	ldrb	r2, [r7, #3]
 8014cb2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8014cb6:	78fb      	ldrb	r3, [r7, #3]
 8014cb8:	2b02      	cmp	r3, #2
 8014cba:	d903      	bls.n	8014cc4 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2201      	movs	r2, #1
 8014cc0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8014cc4:	bf00      	nop
 8014cc6:	370c      	adds	r7, #12
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cce:	4770      	bx	lr

08014cd0 <u8g2_UserInterfaceInputValue32>:
  //return r;  
}


uint32_t u8g2_UserInterfaceInputValue32(u8g2_t *u8g2, const char *title, const char *pre, uint32_t *value, uint32_t lo, uint32_t hi, uint8_t digits, const char *post)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b08a      	sub	sp, #40	; 0x28
 8014cd4:	af02      	add	r7, sp, #8
 8014cd6:	60f8      	str	r0, [r7, #12]
 8014cd8:	60b9      	str	r1, [r7, #8]
 8014cda:	607a      	str	r2, [r7, #4]
 8014cdc:	603b      	str	r3, [r7, #0]
  u8g2_uint_t pixel_height;
  u8g2_uint_t  y, yy;
  u8g2_uint_t  pixel_width;
  u8g2_uint_t  x, xx;

  uint8_t multiplier = 1;
 8014cde:	2301      	movs	r3, #1
 8014ce0:	777b      	strb	r3, [r7, #29]


  uint32_t local_value = *value;
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	61bb      	str	r3, [r7, #24]
  //uint8_t r; /* not used ??? */
  uint8_t event;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8014ce8:	2100      	movs	r1, #0
 8014cea:	68f8      	ldr	r0, [r7, #12]
 8014cec:	f7ff fe8a 	bl	8014a04 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f7ff fdf9 	bl	80148e8 <u8g2_SetFontPosBaseline>

  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8014cfc:	75fb      	strb	r3, [r7, #23]
  line_height -= u8g2_GetDescent(u8g2);
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	7dfa      	ldrb	r2, [r7, #23]
 8014d08:	1ad3      	subs	r3, r2, r3
 8014d0a:	75fb      	strb	r3, [r7, #23]


  /* calculate overall height of the input value box */
  height = 1;	/* value input line */
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	75bb      	strb	r3, [r7, #22]
  height += u8x8_GetStringLineCnt(title);
 8014d10:	68b8      	ldr	r0, [r7, #8]
 8014d12:	f001 fd34 	bl	801677e <u8x8_GetStringLineCnt>
 8014d16:	4603      	mov	r3, r0
 8014d18:	461a      	mov	r2, r3
 8014d1a:	7dbb      	ldrb	r3, [r7, #22]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	75bb      	strb	r3, [r7, #22]

  /* calculate the height in pixel */
  pixel_height = height;
 8014d20:	7dbb      	ldrb	r3, [r7, #22]
 8014d22:	757b      	strb	r3, [r7, #21]
  pixel_height *= line_height;
 8014d24:	7d7a      	ldrb	r2, [r7, #21]
 8014d26:	7dfb      	ldrb	r3, [r7, #23]
 8014d28:	fb12 f303 	smulbb	r3, r2, r3
 8014d2c:	757b      	strb	r3, [r7, #21]


  /* calculate offset from top */
  y = 0;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	77fb      	strb	r3, [r7, #31]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)  )
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014d38:	7d7a      	ldrb	r2, [r7, #21]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d20a      	bcs.n	8014d54 <u8g2_UserInterfaceInputValue32+0x84>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014d44:	77fb      	strb	r3, [r7, #31]
    y -= pixel_height;
 8014d46:	7ffa      	ldrb	r2, [r7, #31]
 8014d48:	7d7b      	ldrb	r3, [r7, #21]
 8014d4a:	1ad3      	subs	r3, r2, r3
 8014d4c:	77fb      	strb	r3, [r7, #31]
    y /= 2;
 8014d4e:	7ffb      	ldrb	r3, [r7, #31]
 8014d50:	085b      	lsrs	r3, r3, #1
 8014d52:	77fb      	strb	r3, [r7, #31]
  }

  /* calculate offset from left for the label */
  x = 0;
 8014d54:	2300      	movs	r3, #0
 8014d56:	77bb      	strb	r3, [r7, #30]
  pixel_width = u8g2_GetUTF8Width(u8g2, pre);
 8014d58:	6879      	ldr	r1, [r7, #4]
 8014d5a:	68f8      	ldr	r0, [r7, #12]
 8014d5c:	f7ff fe3e 	bl	80149dc <u8g2_GetUTF8Width>
 8014d60:	4603      	mov	r3, r0
 8014d62:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, " ");
 8014d64:	49a0      	ldr	r1, [pc, #640]	; (8014fe8 <u8g2_UserInterfaceInputValue32+0x318>)
 8014d66:	68f8      	ldr	r0, [r7, #12]
 8014d68:	f7ff fe38 	bl	80149dc <u8g2_GetUTF8Width>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	461a      	mov	r2, r3
 8014d70:	7d3b      	ldrb	r3, [r7, #20]
 8014d72:	4413      	add	r3, r2
 8014d74:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 8014d76:	499d      	ldr	r1, [pc, #628]	; (8014fec <u8g2_UserInterfaceInputValue32+0x31c>)
 8014d78:	68f8      	ldr	r0, [r7, #12]
 8014d7a:	f7ff fe2f 	bl	80149dc <u8g2_GetUTF8Width>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	461a      	mov	r2, r3
 8014d82:	7d3b      	ldrb	r3, [r7, #20]
 8014d84:	4413      	add	r3, r2
 8014d86:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * 3;
 8014d88:	4999      	ldr	r1, [pc, #612]	; (8014ff0 <u8g2_UserInterfaceInputValue32+0x320>)
 8014d8a:	68f8      	ldr	r0, [r7, #12]
 8014d8c:	f7ff fe26 	bl	80149dc <u8g2_GetUTF8Width>
 8014d90:	4603      	mov	r3, r0
 8014d92:	461a      	mov	r2, r3
 8014d94:	4613      	mov	r3, r2
 8014d96:	005b      	lsls	r3, r3, #1
 8014d98:	4413      	add	r3, r2
 8014d9a:	b2da      	uxtb	r2, r3
 8014d9c:	7d3b      	ldrb	r3, [r7, #20]
 8014d9e:	4413      	add	r3, r2
 8014da0:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "x");
 8014da2:	4992      	ldr	r1, [pc, #584]	; (8014fec <u8g2_UserInterfaceInputValue32+0x31c>)
 8014da4:	68f8      	ldr	r0, [r7, #12]
 8014da6:	f7ff fe19 	bl	80149dc <u8g2_GetUTF8Width>
 8014daa:	4603      	mov	r3, r0
 8014dac:	461a      	mov	r2, r3
 8014dae:	7d3b      	ldrb	r3, [r7, #20]
 8014db0:	4413      	add	r3, r2
 8014db2:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
 8014db4:	498e      	ldr	r1, [pc, #568]	; (8014ff0 <u8g2_UserInterfaceInputValue32+0x320>)
 8014db6:	68f8      	ldr	r0, [r7, #12]
 8014db8:	f7ff fe10 	bl	80149dc <u8g2_GetUTF8Width>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014dc4:	fb03 f302 	mul.w	r3, r3, r2
 8014dc8:	b2da      	uxtb	r2, r3
 8014dca:	7d3b      	ldrb	r3, [r7, #20]
 8014dcc:	4413      	add	r3, r2
 8014dce:	753b      	strb	r3, [r7, #20]
  pixel_width += u8g2_GetUTF8Width(u8g2, post);
 8014dd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	f7ff fe02 	bl	80149dc <u8g2_GetUTF8Width>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	461a      	mov	r2, r3
 8014ddc:	7d3b      	ldrb	r3, [r7, #20]
 8014dde:	4413      	add	r3, r2
 8014de0:	753b      	strb	r3, [r7, #20]
  if ( pixel_width < u8g2_GetDisplayWidth(u8g2) )
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014de8:	7d3a      	ldrb	r2, [r7, #20]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d20a      	bcs.n	8014e04 <u8g2_UserInterfaceInputValue32+0x134>
  {
    x = u8g2_GetDisplayWidth(u8g2);
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014df4:	77bb      	strb	r3, [r7, #30]
    x -= pixel_width;
 8014df6:	7fba      	ldrb	r2, [r7, #30]
 8014df8:	7d3b      	ldrb	r3, [r7, #20]
 8014dfa:	1ad3      	subs	r3, r2, r3
 8014dfc:	77bb      	strb	r3, [r7, #30]
    x /= 2;
 8014dfe:	7fbb      	ldrb	r3, [r7, #30]
 8014e00:	085b      	lsrs	r3, r3, #1
 8014e02:	77bb      	strb	r3, [r7, #30]
  }

  /* event loop */
  for(;;)
  {
    u8g2_FirstPage(u8g2);
 8014e04:	68f8      	ldr	r0, [r7, #12]
 8014e06:	f7fe ff16 	bl	8013c36 <u8g2_FirstPage>
    do
    {
      /* render */
      yy = y;
 8014e0a:	7ffb      	ldrb	r3, [r7, #31]
 8014e0c:	74fb      	strb	r3, [r7, #19]
      yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8014e14:	7cfa      	ldrb	r2, [r7, #19]
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	9301      	str	r3, [sp, #4]
 8014e1a:	7dfb      	ldrb	r3, [r7, #23]
 8014e1c:	9300      	str	r3, [sp, #0]
 8014e1e:	460b      	mov	r3, r1
 8014e20:	2100      	movs	r1, #0
 8014e22:	68f8      	ldr	r0, [r7, #12]
 8014e24:	f000 fc71 	bl	801570a <u8g2_DrawUTF8Lines>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	461a      	mov	r2, r3
 8014e2c:	7cfb      	ldrb	r3, [r7, #19]
 8014e2e:	4413      	add	r3, r2
 8014e30:	74fb      	strb	r3, [r7, #19]
      xx = x;
 8014e32:	7fbb      	ldrb	r3, [r7, #30]
 8014e34:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 8014e36:	7cfa      	ldrb	r2, [r7, #19]
 8014e38:	7cb9      	ldrb	r1, [r7, #18]
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	68f8      	ldr	r0, [r7, #12]
 8014e3e:	f7ff fcc1 	bl	80147c4 <u8g2_DrawUTF8>
 8014e42:	4603      	mov	r3, r0
 8014e44:	461a      	mov	r2, r3
 8014e46:	7cbb      	ldrb	r3, [r7, #18]
 8014e48:	4413      	add	r3, r2
 8014e4a:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 8014e4c:	7cfa      	ldrb	r2, [r7, #19]
 8014e4e:	7cb9      	ldrb	r1, [r7, #18]
 8014e50:	4b65      	ldr	r3, [pc, #404]	; (8014fe8 <u8g2_UserInterfaceInputValue32+0x318>)
 8014e52:	68f8      	ldr	r0, [r7, #12]
 8014e54:	f7ff fcb6 	bl	80147c4 <u8g2_DrawUTF8>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	461a      	mov	r2, r3
 8014e5c:	7cbb      	ldrb	r3, [r7, #18]
 8014e5e:	4413      	add	r3, r2
 8014e60:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, "x");
 8014e62:	7cfa      	ldrb	r2, [r7, #19]
 8014e64:	7cb9      	ldrb	r1, [r7, #18]
 8014e66:	4b61      	ldr	r3, [pc, #388]	; (8014fec <u8g2_UserInterfaceInputValue32+0x31c>)
 8014e68:	68f8      	ldr	r0, [r7, #12]
 8014e6a:	f7ff fcab 	bl	80147c4 <u8g2_DrawUTF8>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	461a      	mov	r2, r3
 8014e72:	7cbb      	ldrb	r3, [r7, #18]
 8014e74:	4413      	add	r3, r2
 8014e76:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(multiplier, 3));
 8014e78:	7f7b      	ldrb	r3, [r7, #29]
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	2103      	movs	r1, #3
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f001 fd04 	bl	801688c <u8x8_u16toa>
 8014e84:	4603      	mov	r3, r0
 8014e86:	7cfa      	ldrb	r2, [r7, #19]
 8014e88:	7cb9      	ldrb	r1, [r7, #18]
 8014e8a:	68f8      	ldr	r0, [r7, #12]
 8014e8c:	f7ff fc9a 	bl	80147c4 <u8g2_DrawUTF8>
 8014e90:	4603      	mov	r3, r0
 8014e92:	461a      	mov	r2, r3
 8014e94:	7cbb      	ldrb	r3, [r7, #18]
 8014e96:	4413      	add	r3, r2
 8014e98:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, " ");
 8014e9a:	7cfa      	ldrb	r2, [r7, #19]
 8014e9c:	7cb9      	ldrb	r1, [r7, #18]
 8014e9e:	4b52      	ldr	r3, [pc, #328]	; (8014fe8 <u8g2_UserInterfaceInputValue32+0x318>)
 8014ea0:	68f8      	ldr	r0, [r7, #12]
 8014ea2:	f7ff fc8f 	bl	80147c4 <u8g2_DrawUTF8>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	461a      	mov	r2, r3
 8014eaa:	7cbb      	ldrb	r3, [r7, #18]
 8014eac:	4413      	add	r3, r2
 8014eae:	74bb      	strb	r3, [r7, #18]
      xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u16toa(local_value, digits));
 8014eb0:	69bb      	ldr	r3, [r7, #24]
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8014eb8:	4611      	mov	r1, r2
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f001 fce6 	bl	801688c <u8x8_u16toa>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	7cfa      	ldrb	r2, [r7, #19]
 8014ec4:	7cb9      	ldrb	r1, [r7, #18]
 8014ec6:	68f8      	ldr	r0, [r7, #12]
 8014ec8:	f7ff fc7c 	bl	80147c4 <u8g2_DrawUTF8>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	461a      	mov	r2, r3
 8014ed0:	7cbb      	ldrb	r3, [r7, #18]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	74bb      	strb	r3, [r7, #18]
      u8g2_DrawUTF8(u8g2, xx, yy, post);
 8014ed6:	7cfa      	ldrb	r2, [r7, #19]
 8014ed8:	7cb9      	ldrb	r1, [r7, #18]
 8014eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014edc:	68f8      	ldr	r0, [r7, #12]
 8014ede:	f7ff fc71 	bl	80147c4 <u8g2_DrawUTF8>
    } while( u8g2_NextPage(u8g2) );
 8014ee2:	68f8      	ldr	r0, [r7, #12]
 8014ee4:	f7fe febb 	bl	8013c5e <u8g2_NextPage>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d18d      	bne.n	8014e0a <u8g2_UserInterfaceInputValue32+0x13a>
      return 0;
#endif

    for(;;)
    {
      event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 8014eee:	68f8      	ldr	r0, [r7, #12]
 8014ef0:	f7ef fc84 	bl	80047fc <u8x8_GetMenuEvent>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	747b      	strb	r3, [r7, #17]
      if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8014ef8:	7c7b      	ldrb	r3, [r7, #17]
 8014efa:	2b50      	cmp	r3, #80	; 0x50
 8014efc:	d106      	bne.n	8014f0c <u8g2_UserInterfaceInputValue32+0x23c>
      {
    	  *value = local_value;
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	69ba      	ldr	r2, [r7, #24]
 8014f02:	601a      	str	r2, [r3, #0]
    	  multiplier = 1;
 8014f04:	2301      	movs	r3, #1
 8014f06:	777b      	strb	r3, [r7, #29]
    	  return 1;
 8014f08:	2301      	movs	r3, #1
 8014f0a:	e068      	b.n	8014fde <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8014f0c:	7c7b      	ldrb	r3, [r7, #17]
 8014f0e:	2b53      	cmp	r3, #83	; 0x53
 8014f10:	d101      	bne.n	8014f16 <u8g2_UserInterfaceInputValue32+0x246>
      {
    	  return 0;
 8014f12:	2300      	movs	r3, #0
 8014f14:	e063      	b.n	8014fde <u8g2_UserInterfaceInputValue32+0x30e>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_UP )
 8014f16:	7c7b      	ldrb	r3, [r7, #17]
 8014f18:	2b54      	cmp	r3, #84	; 0x54
 8014f1a:	d10b      	bne.n	8014f34 <u8g2_UserInterfaceInputValue32+0x264>
      {
    	  if ( local_value >= hi )
 8014f1c:	69ba      	ldr	r2, [r7, #24]
 8014f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d302      	bcc.n	8014f2a <u8g2_UserInterfaceInputValue32+0x25a>
    		  local_value = lo;
 8014f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f26:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value + 1*multiplier;
    	  break;
 8014f28:	e058      	b.n	8014fdc <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value + 1*multiplier;
 8014f2a:	7f7b      	ldrb	r3, [r7, #29]
 8014f2c:	69ba      	ldr	r2, [r7, #24]
 8014f2e:	4413      	add	r3, r2
 8014f30:	61bb      	str	r3, [r7, #24]
    	  break;
 8014f32:	e053      	b.n	8014fdc <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_DOWN )
 8014f34:	7c7b      	ldrb	r3, [r7, #17]
 8014f36:	2b55      	cmp	r3, #85	; 0x55
 8014f38:	d10b      	bne.n	8014f52 <u8g2_UserInterfaceInputValue32+0x282>
      {
    	  if ( local_value <= lo )
 8014f3a:	69ba      	ldr	r2, [r7, #24]
 8014f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d802      	bhi.n	8014f48 <u8g2_UserInterfaceInputValue32+0x278>
    		  local_value = hi;
 8014f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f44:	61bb      	str	r3, [r7, #24]
    	  else
    		  local_value = local_value - 1*multiplier;
    	  break;
 8014f46:	e049      	b.n	8014fdc <u8g2_UserInterfaceInputValue32+0x30c>
    		  local_value = local_value - 1*multiplier;
 8014f48:	7f7b      	ldrb	r3, [r7, #29]
 8014f4a:	69ba      	ldr	r2, [r7, #24]
 8014f4c:	1ad3      	subs	r3, r2, r3
 8014f4e:	61bb      	str	r3, [r7, #24]
    	  break;
 8014f50:	e044      	b.n	8014fdc <u8g2_UserInterfaceInputValue32+0x30c>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_NEXT )
 8014f52:	7c7b      	ldrb	r3, [r7, #17]
 8014f54:	2b51      	cmp	r3, #81	; 0x51
 8014f56:	d11d      	bne.n	8014f94 <u8g2_UserInterfaceInputValue32+0x2c4>
    	  if(multiplier >50)
    		  multiplier = 10;
    		*/
    	  //multiplier = multiplier%3 + 1;

    	  if(multiplier == 1)
 8014f58:	7f7b      	ldrb	r3, [r7, #29]
 8014f5a:	2b01      	cmp	r3, #1
 8014f5c:	d102      	bne.n	8014f64 <u8g2_UserInterfaceInputValue32+0x294>
    		  multiplier = 5;
 8014f5e:	2305      	movs	r3, #5
 8014f60:	777b      	strb	r3, [r7, #29]
    	  else if(multiplier == 50)
    		  multiplier = 100;
    	  else if(multiplier == 100)
    		  multiplier = 1;

    	  break;
 8014f62:	e038      	b.n	8014fd6 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 5)
 8014f64:	7f7b      	ldrb	r3, [r7, #29]
 8014f66:	2b05      	cmp	r3, #5
 8014f68:	d102      	bne.n	8014f70 <u8g2_UserInterfaceInputValue32+0x2a0>
    		  multiplier = 10;
 8014f6a:	230a      	movs	r3, #10
 8014f6c:	777b      	strb	r3, [r7, #29]
    	  break;
 8014f6e:	e032      	b.n	8014fd6 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 10)
 8014f70:	7f7b      	ldrb	r3, [r7, #29]
 8014f72:	2b0a      	cmp	r3, #10
 8014f74:	d102      	bne.n	8014f7c <u8g2_UserInterfaceInputValue32+0x2ac>
    		  multiplier = 50;
 8014f76:	2332      	movs	r3, #50	; 0x32
 8014f78:	777b      	strb	r3, [r7, #29]
    	  break;
 8014f7a:	e02c      	b.n	8014fd6 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 50)
 8014f7c:	7f7b      	ldrb	r3, [r7, #29]
 8014f7e:	2b32      	cmp	r3, #50	; 0x32
 8014f80:	d102      	bne.n	8014f88 <u8g2_UserInterfaceInputValue32+0x2b8>
    		  multiplier = 100;
 8014f82:	2364      	movs	r3, #100	; 0x64
 8014f84:	777b      	strb	r3, [r7, #29]
    	  break;
 8014f86:	e026      	b.n	8014fd6 <u8g2_UserInterfaceInputValue32+0x306>
    	  else if(multiplier == 100)
 8014f88:	7f7b      	ldrb	r3, [r7, #29]
 8014f8a:	2b64      	cmp	r3, #100	; 0x64
 8014f8c:	d123      	bne.n	8014fd6 <u8g2_UserInterfaceInputValue32+0x306>
    		  multiplier = 1;
 8014f8e:	2301      	movs	r3, #1
 8014f90:	777b      	strb	r3, [r7, #29]
    	  break;
 8014f92:	e020      	b.n	8014fd6 <u8g2_UserInterfaceInputValue32+0x306>
      }
      else if ( event == U8X8_MSG_GPIO_MENU_PREV )
 8014f94:	7c7b      	ldrb	r3, [r7, #17]
 8014f96:	2b52      	cmp	r3, #82	; 0x52
 8014f98:	d1a9      	bne.n	8014eee <u8g2_UserInterfaceInputValue32+0x21e>
    		  //multiplier = 2;
    		 // multiplier = multiplier%3 + 1;
    	  }
    	  */

    	  if(multiplier == 1)
 8014f9a:	7f7b      	ldrb	r3, [r7, #29]
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d102      	bne.n	8014fa6 <u8g2_UserInterfaceInputValue32+0x2d6>
    		  multiplier = 100;
 8014fa0:	2364      	movs	r3, #100	; 0x64
 8014fa2:	777b      	strb	r3, [r7, #29]
    	  /*
    	  multiplier -=10;
    	  if(multiplier <=0)
    		  multiplier = 50;
    		*/
    	  break;
 8014fa4:	e019      	b.n	8014fda <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 5)
 8014fa6:	7f7b      	ldrb	r3, [r7, #29]
 8014fa8:	2b05      	cmp	r3, #5
 8014faa:	d102      	bne.n	8014fb2 <u8g2_UserInterfaceInputValue32+0x2e2>
    		  multiplier = 1;
 8014fac:	2301      	movs	r3, #1
 8014fae:	777b      	strb	r3, [r7, #29]
    	  break;
 8014fb0:	e013      	b.n	8014fda <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 10)
 8014fb2:	7f7b      	ldrb	r3, [r7, #29]
 8014fb4:	2b0a      	cmp	r3, #10
 8014fb6:	d102      	bne.n	8014fbe <u8g2_UserInterfaceInputValue32+0x2ee>
    		  multiplier = 5;
 8014fb8:	2305      	movs	r3, #5
 8014fba:	777b      	strb	r3, [r7, #29]
    	  break;
 8014fbc:	e00d      	b.n	8014fda <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 50)
 8014fbe:	7f7b      	ldrb	r3, [r7, #29]
 8014fc0:	2b32      	cmp	r3, #50	; 0x32
 8014fc2:	d102      	bne.n	8014fca <u8g2_UserInterfaceInputValue32+0x2fa>
    		  multiplier = 10;
 8014fc4:	230a      	movs	r3, #10
 8014fc6:	777b      	strb	r3, [r7, #29]
    	  break;
 8014fc8:	e007      	b.n	8014fda <u8g2_UserInterfaceInputValue32+0x30a>
    	  else if(multiplier == 100)
 8014fca:	7f7b      	ldrb	r3, [r7, #29]
 8014fcc:	2b64      	cmp	r3, #100	; 0x64
 8014fce:	d104      	bne.n	8014fda <u8g2_UserInterfaceInputValue32+0x30a>
    		  multiplier = 50;
 8014fd0:	2332      	movs	r3, #50	; 0x32
 8014fd2:	777b      	strb	r3, [r7, #29]
    	  break;
 8014fd4:	e001      	b.n	8014fda <u8g2_UserInterfaceInputValue32+0x30a>
    	  break;
 8014fd6:	bf00      	nop
 8014fd8:	e714      	b.n	8014e04 <u8g2_UserInterfaceInputValue32+0x134>
    	  break;
 8014fda:	bf00      	nop
    u8g2_FirstPage(u8g2);
 8014fdc:	e712      	b.n	8014e04 <u8g2_UserInterfaceInputValue32+0x134>
    }
  }

  /* never reached */
  //return r;
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3720      	adds	r7, #32
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	08022928 	.word	0x08022928
 8014fec:	0802292c 	.word	0x0802292c
 8014ff0:	08022924 	.word	0x08022924

08014ff4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8014ff4:	b490      	push	{r4, r7}
 8014ff6:	b082      	sub	sp, #8
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	4604      	mov	r4, r0
 8014ffc:	4608      	mov	r0, r1
 8014ffe:	4611      	mov	r1, r2
 8015000:	461a      	mov	r2, r3
 8015002:	4623      	mov	r3, r4
 8015004:	71fb      	strb	r3, [r7, #7]
 8015006:	4603      	mov	r3, r0
 8015008:	71bb      	strb	r3, [r7, #6]
 801500a:	460b      	mov	r3, r1
 801500c:	717b      	strb	r3, [r7, #5]
 801500e:	4613      	mov	r3, r2
 8015010:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8015012:	797a      	ldrb	r2, [r7, #5]
 8015014:	79bb      	ldrb	r3, [r7, #6]
 8015016:	429a      	cmp	r2, r3
 8015018:	d20d      	bcs.n	8015036 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 801501a:	793a      	ldrb	r2, [r7, #4]
 801501c:	79fb      	ldrb	r3, [r7, #7]
 801501e:	429a      	cmp	r2, r3
 8015020:	d901      	bls.n	8015026 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8015022:	2301      	movs	r3, #1
 8015024:	e014      	b.n	8015050 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8015026:	797a      	ldrb	r2, [r7, #5]
 8015028:	793b      	ldrb	r3, [r7, #4]
 801502a:	429a      	cmp	r2, r3
 801502c:	d901      	bls.n	8015032 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 801502e:	2301      	movs	r3, #1
 8015030:	e00e      	b.n	8015050 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8015032:	2300      	movs	r3, #0
 8015034:	e00c      	b.n	8015050 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8015036:	793a      	ldrb	r2, [r7, #4]
 8015038:	79fb      	ldrb	r3, [r7, #7]
 801503a:	429a      	cmp	r2, r3
 801503c:	d907      	bls.n	801504e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 801503e:	797a      	ldrb	r2, [r7, #5]
 8015040:	793b      	ldrb	r3, [r7, #4]
 8015042:	429a      	cmp	r2, r3
 8015044:	d901      	bls.n	801504a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8015046:	2301      	movs	r3, #1
 8015048:	e002      	b.n	8015050 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 801504a:	2300      	movs	r3, #0
 801504c:	e000      	b.n	8015050 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 801504e:	2300      	movs	r3, #0
    }
  }
}
 8015050:	4618      	mov	r0, r3
 8015052:	3708      	adds	r7, #8
 8015054:	46bd      	mov	sp, r7
 8015056:	bc90      	pop	{r4, r7}
 8015058:	4770      	bx	lr

0801505a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 801505a:	b580      	push	{r7, lr}
 801505c:	b082      	sub	sp, #8
 801505e:	af00      	add	r7, sp, #0
 8015060:	6078      	str	r0, [r7, #4]
 8015062:	4608      	mov	r0, r1
 8015064:	4611      	mov	r1, r2
 8015066:	461a      	mov	r2, r3
 8015068:	4603      	mov	r3, r0
 801506a:	70fb      	strb	r3, [r7, #3]
 801506c:	460b      	mov	r3, r1
 801506e:	70bb      	strb	r3, [r7, #2]
 8015070:	4613      	mov	r3, r2
 8015072:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8015080:	7c3b      	ldrb	r3, [r7, #16]
 8015082:	78ba      	ldrb	r2, [r7, #2]
 8015084:	f7ff ffb6 	bl	8014ff4 <u8g2_is_intersection_decision_tree>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	d101      	bne.n	8015092 <u8g2_IsIntersection+0x38>
    return 0; 
 801508e:	2300      	movs	r3, #0
 8015090:	e00a      	b.n	80150a8 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 801509e:	787b      	ldrb	r3, [r7, #1]
 80150a0:	78fa      	ldrb	r2, [r7, #3]
 80150a2:	f7ff ffa7 	bl	8014ff4 <u8g2_is_intersection_decision_tree>
 80150a6:	4603      	mov	r3, r0
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3708      	adds	r7, #8
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}

080150b0 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	4608      	mov	r0, r1
 80150ba:	4611      	mov	r1, r2
 80150bc:	461a      	mov	r2, r3
 80150be:	4603      	mov	r3, r0
 80150c0:	70fb      	strb	r3, [r7, #3]
 80150c2:	460b      	mov	r3, r1
 80150c4:	70bb      	strb	r3, [r7, #2]
 80150c6:	4613      	mov	r3, r2
 80150c8:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 80150ca:	2300      	movs	r3, #0
 80150cc:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 80150ce:	78fa      	ldrb	r2, [r7, #3]
 80150d0:	787b      	ldrb	r3, [r7, #1]
 80150d2:	429a      	cmp	r2, r3
 80150d4:	d904      	bls.n	80150e0 <u8g2_DrawLine+0x30>
 80150d6:	78fa      	ldrb	r2, [r7, #3]
 80150d8:	787b      	ldrb	r3, [r7, #1]
 80150da:	1ad3      	subs	r3, r2, r3
 80150dc:	737b      	strb	r3, [r7, #13]
 80150de:	e003      	b.n	80150e8 <u8g2_DrawLine+0x38>
 80150e0:	787a      	ldrb	r2, [r7, #1]
 80150e2:	78fb      	ldrb	r3, [r7, #3]
 80150e4:	1ad3      	subs	r3, r2, r3
 80150e6:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80150e8:	78ba      	ldrb	r2, [r7, #2]
 80150ea:	7e3b      	ldrb	r3, [r7, #24]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d904      	bls.n	80150fa <u8g2_DrawLine+0x4a>
 80150f0:	78ba      	ldrb	r2, [r7, #2]
 80150f2:	7e3b      	ldrb	r3, [r7, #24]
 80150f4:	1ad3      	subs	r3, r2, r3
 80150f6:	733b      	strb	r3, [r7, #12]
 80150f8:	e003      	b.n	8015102 <u8g2_DrawLine+0x52>
 80150fa:	7e3a      	ldrb	r2, [r7, #24]
 80150fc:	78bb      	ldrb	r3, [r7, #2]
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 8015102:	7b3a      	ldrb	r2, [r7, #12]
 8015104:	7b7b      	ldrb	r3, [r7, #13]
 8015106:	429a      	cmp	r2, r3
 8015108:	d913      	bls.n	8015132 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 801510a:	2301      	movs	r3, #1
 801510c:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 801510e:	7b7b      	ldrb	r3, [r7, #13]
 8015110:	723b      	strb	r3, [r7, #8]
 8015112:	7b3b      	ldrb	r3, [r7, #12]
 8015114:	737b      	strb	r3, [r7, #13]
 8015116:	7a3b      	ldrb	r3, [r7, #8]
 8015118:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 801511a:	78fb      	ldrb	r3, [r7, #3]
 801511c:	723b      	strb	r3, [r7, #8]
 801511e:	78bb      	ldrb	r3, [r7, #2]
 8015120:	70fb      	strb	r3, [r7, #3]
 8015122:	7a3b      	ldrb	r3, [r7, #8]
 8015124:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 8015126:	787b      	ldrb	r3, [r7, #1]
 8015128:	723b      	strb	r3, [r7, #8]
 801512a:	7e3b      	ldrb	r3, [r7, #24]
 801512c:	707b      	strb	r3, [r7, #1]
 801512e:	7a3b      	ldrb	r3, [r7, #8]
 8015130:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 8015132:	78fa      	ldrb	r2, [r7, #3]
 8015134:	787b      	ldrb	r3, [r7, #1]
 8015136:	429a      	cmp	r2, r3
 8015138:	d90b      	bls.n	8015152 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 801513a:	78fb      	ldrb	r3, [r7, #3]
 801513c:	723b      	strb	r3, [r7, #8]
 801513e:	787b      	ldrb	r3, [r7, #1]
 8015140:	70fb      	strb	r3, [r7, #3]
 8015142:	7a3b      	ldrb	r3, [r7, #8]
 8015144:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 8015146:	78bb      	ldrb	r3, [r7, #2]
 8015148:	723b      	strb	r3, [r7, #8]
 801514a:	7e3b      	ldrb	r3, [r7, #24]
 801514c:	70bb      	strb	r3, [r7, #2]
 801514e:	7a3b      	ldrb	r3, [r7, #8]
 8015150:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 8015152:	7b7b      	ldrb	r3, [r7, #13]
 8015154:	085b      	lsrs	r3, r3, #1
 8015156:	b2db      	uxtb	r3, r3
 8015158:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 801515a:	7e3a      	ldrb	r2, [r7, #24]
 801515c:	78bb      	ldrb	r3, [r7, #2]
 801515e:	429a      	cmp	r2, r3
 8015160:	d902      	bls.n	8015168 <u8g2_DrawLine+0xb8>
 8015162:	2301      	movs	r3, #1
 8015164:	72bb      	strb	r3, [r7, #10]
 8015166:	e001      	b.n	801516c <u8g2_DrawLine+0xbc>
 8015168:	23ff      	movs	r3, #255	; 0xff
 801516a:	72bb      	strb	r3, [r7, #10]
  y = y1;
 801516c:	78bb      	ldrb	r3, [r7, #2]
 801516e:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 8015170:	787b      	ldrb	r3, [r7, #1]
 8015172:	2bff      	cmp	r3, #255	; 0xff
 8015174:	d102      	bne.n	801517c <u8g2_DrawLine+0xcc>
    x2--;
 8015176:	787b      	ldrb	r3, [r7, #1]
 8015178:	3b01      	subs	r3, #1
 801517a:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 801517c:	78fb      	ldrb	r3, [r7, #3]
 801517e:	73fb      	strb	r3, [r7, #15]
 8015180:	e024      	b.n	80151cc <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 8015182:	7a7b      	ldrb	r3, [r7, #9]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d106      	bne.n	8015196 <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 8015188:	7bba      	ldrb	r2, [r7, #14]
 801518a:	7bfb      	ldrb	r3, [r7, #15]
 801518c:	4619      	mov	r1, r3
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f7ff fd54 	bl	8014c3c <u8g2_DrawPixel>
 8015194:	e005      	b.n	80151a2 <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8015196:	7bfa      	ldrb	r2, [r7, #15]
 8015198:	7bbb      	ldrb	r3, [r7, #14]
 801519a:	4619      	mov	r1, r3
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7ff fd4d 	bl	8014c3c <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 80151a2:	7afa      	ldrb	r2, [r7, #11]
 80151a4:	7b3b      	ldrb	r3, [r7, #12]
 80151a6:	1ad3      	subs	r3, r2, r3
 80151a8:	b2db      	uxtb	r3, r3
 80151aa:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 80151ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	da08      	bge.n	80151c6 <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 80151b4:	7aba      	ldrb	r2, [r7, #10]
 80151b6:	7bbb      	ldrb	r3, [r7, #14]
 80151b8:	4413      	add	r3, r2
 80151ba:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 80151bc:	7afa      	ldrb	r2, [r7, #11]
 80151be:	7b7b      	ldrb	r3, [r7, #13]
 80151c0:	4413      	add	r3, r2
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 80151c6:	7bfb      	ldrb	r3, [r7, #15]
 80151c8:	3301      	adds	r3, #1
 80151ca:	73fb      	strb	r3, [r7, #15]
 80151cc:	7bfa      	ldrb	r2, [r7, #15]
 80151ce:	787b      	ldrb	r3, [r7, #1]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d9d6      	bls.n	8015182 <u8g2_DrawLine+0xd2>
    }
  }
}
 80151d4:	bf00      	nop
 80151d6:	3710      	adds	r7, #16
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}

080151dc <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80151dc:	b480      	push	{r7}
 80151de:	b087      	sub	sp, #28
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
 80151e4:	4608      	mov	r0, r1
 80151e6:	4611      	mov	r1, r2
 80151e8:	461a      	mov	r2, r3
 80151ea:	4603      	mov	r3, r0
 80151ec:	70fb      	strb	r3, [r7, #3]
 80151ee:	460b      	mov	r3, r1
 80151f0:	70bb      	strb	r3, [r7, #2]
 80151f2:	4613      	mov	r3, r2
 80151f4:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80151f6:	78bb      	ldrb	r3, [r7, #2]
 80151f8:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80151fa:	7cfb      	ldrb	r3, [r7, #19]
 80151fc:	f003 0307 	and.w	r3, r3, #7
 8015200:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8015202:	2301      	movs	r3, #1
 8015204:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8015206:	7c3a      	ldrb	r2, [r7, #16]
 8015208:	7cfb      	ldrb	r3, [r7, #19]
 801520a:	fa02 f303 	lsl.w	r3, r2, r3
 801520e:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8015210:	2300      	movs	r3, #0
 8015212:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8015214:	2300      	movs	r3, #0
 8015216:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801521e:	2b01      	cmp	r3, #1
 8015220:	d801      	bhi.n	8015226 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8015222:	7c3b      	ldrb	r3, [r7, #16]
 8015224:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801522c:	2b01      	cmp	r3, #1
 801522e:	d001      	beq.n	8015234 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8015230:	7c3b      	ldrb	r3, [r7, #16]
 8015232:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8015234:	78bb      	ldrb	r3, [r7, #2]
 8015236:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8015238:	89fb      	ldrh	r3, [r7, #14]
 801523a:	f023 0307 	bic.w	r3, r3, #7
 801523e:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	7c1b      	ldrb	r3, [r3, #16]
 8015246:	b29b      	uxth	r3, r3
 8015248:	89fa      	ldrh	r2, [r7, #14]
 801524a:	fb12 f303 	smulbb	r3, r2, r3
 801524e:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015254:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8015256:	89fb      	ldrh	r3, [r7, #14]
 8015258:	697a      	ldr	r2, [r7, #20]
 801525a:	4413      	add	r3, r2
 801525c:	617b      	str	r3, [r7, #20]
  ptr += x;
 801525e:	78fb      	ldrb	r3, [r7, #3]
 8015260:	697a      	ldr	r2, [r7, #20]
 8015262:	4413      	add	r3, r2
 8015264:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8015266:	f897 3020 	ldrb.w	r3, [r7, #32]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d117      	bne.n	801529e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 801526e:	697b      	ldr	r3, [r7, #20]
 8015270:	781a      	ldrb	r2, [r3, #0]
 8015272:	7cbb      	ldrb	r3, [r7, #18]
 8015274:	4313      	orrs	r3, r2
 8015276:	b2da      	uxtb	r2, r3
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 801527c:	697b      	ldr	r3, [r7, #20]
 801527e:	781a      	ldrb	r2, [r3, #0]
 8015280:	7c7b      	ldrb	r3, [r7, #17]
 8015282:	4053      	eors	r3, r2
 8015284:	b2da      	uxtb	r2, r3
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	701a      	strb	r2, [r3, #0]
	ptr++;
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	3301      	adds	r3, #1
 801528e:	617b      	str	r3, [r7, #20]
	len--;
 8015290:	787b      	ldrb	r3, [r7, #1]
 8015292:	3b01      	subs	r3, #1
 8015294:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8015296:	787b      	ldrb	r3, [r7, #1]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d1e8      	bne.n	801526e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 801529c:	e039      	b.n	8015312 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	781a      	ldrb	r2, [r3, #0]
 80152a2:	7cbb      	ldrb	r3, [r7, #18]
 80152a4:	4313      	orrs	r3, r2
 80152a6:	b2da      	uxtb	r2, r3
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	781a      	ldrb	r2, [r3, #0]
 80152b0:	7c7b      	ldrb	r3, [r7, #17]
 80152b2:	4053      	eors	r3, r2
 80152b4:	b2da      	uxtb	r2, r3
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80152ba:	7cfb      	ldrb	r3, [r7, #19]
 80152bc:	3301      	adds	r3, #1
 80152be:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80152c0:	7cfb      	ldrb	r3, [r7, #19]
 80152c2:	f003 0307 	and.w	r3, r3, #7
 80152c6:	74fb      	strb	r3, [r7, #19]
      len--;
 80152c8:	787b      	ldrb	r3, [r7, #1]
 80152ca:	3b01      	subs	r3, #1
 80152cc:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80152ce:	7cfb      	ldrb	r3, [r7, #19]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d115      	bne.n	8015300 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80152da:	461a      	mov	r2, r3
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	4413      	add	r3, r2
 80152e0:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d801      	bhi.n	80152f0 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80152ec:	2301      	movs	r3, #1
 80152ee:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80152f6:	2b01      	cmp	r3, #1
 80152f8:	d008      	beq.n	801530c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80152fa:	2301      	movs	r3, #1
 80152fc:	747b      	strb	r3, [r7, #17]
 80152fe:	e005      	b.n	801530c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8015300:	7cbb      	ldrb	r3, [r7, #18]
 8015302:	005b      	lsls	r3, r3, #1
 8015304:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8015306:	7c7b      	ldrb	r3, [r7, #17]
 8015308:	005b      	lsls	r3, r3, #1
 801530a:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 801530c:	787b      	ldrb	r3, [r7, #1]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d1c5      	bne.n	801529e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8015312:	bf00      	nop
 8015314:	371c      	adds	r7, #28
 8015316:	46bd      	mov	sp, r7
 8015318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531c:	4770      	bx	lr

0801531e <u8g2_draw_button_line>:

#define SPACE_BETWEEN_BUTTONS_IN_PIXEL 6
#define SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL 3

uint8_t u8g2_draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
{
 801531e:	b580      	push	{r7, lr}
 8015320:	b088      	sub	sp, #32
 8015322:	af04      	add	r7, sp, #16
 8015324:	6078      	str	r0, [r7, #4]
 8015326:	4608      	mov	r0, r1
 8015328:	4611      	mov	r1, r2
 801532a:	461a      	mov	r2, r3
 801532c:	4603      	mov	r3, r0
 801532e:	70fb      	strb	r3, [r7, #3]
 8015330:	460b      	mov	r3, r1
 8015332:	70bb      	strb	r3, [r7, #2]
 8015334:	4613      	mov	r3, r2
 8015336:	707b      	strb	r3, [r7, #1]
  uint8_t is_invert;
	
  u8g2_uint_t d;
  u8g2_uint_t x;
	
  cnt = u8x8_GetStringLineCnt(s);
 8015338:	69b8      	ldr	r0, [r7, #24]
 801533a:	f001 fa20 	bl	801677e <u8x8_GetStringLineCnt>
 801533e:	4603      	mov	r3, r0
 8015340:	72bb      	strb	r3, [r7, #10]
  
	
  /* calculate the width of the button line */
  button_line_width = 0;
 8015342:	2300      	movs	r3, #0
 8015344:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 8015346:	2300      	movs	r3, #0
 8015348:	73bb      	strb	r3, [r7, #14]
 801534a:	e011      	b.n	8015370 <u8g2_draw_button_line+0x52>
  {
    button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 801534c:	7bbb      	ldrb	r3, [r7, #14]
 801534e:	69b9      	ldr	r1, [r7, #24]
 8015350:	4618      	mov	r0, r3
 8015352:	f001 fa37 	bl	80167c4 <u8x8_GetStringLineStart>
 8015356:	4603      	mov	r3, r0
 8015358:	4619      	mov	r1, r3
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f7ff fb3e 	bl	80149dc <u8g2_GetUTF8Width>
 8015360:	4603      	mov	r3, r0
 8015362:	461a      	mov	r2, r3
 8015364:	7bfb      	ldrb	r3, [r7, #15]
 8015366:	4413      	add	r3, r2
 8015368:	73fb      	strb	r3, [r7, #15]
  for( i = 0; i < cnt; i++ )
 801536a:	7bbb      	ldrb	r3, [r7, #14]
 801536c:	3301      	adds	r3, #1
 801536e:	73bb      	strb	r3, [r7, #14]
 8015370:	7bba      	ldrb	r2, [r7, #14]
 8015372:	7abb      	ldrb	r3, [r7, #10]
 8015374:	429a      	cmp	r2, r3
 8015376:	d3e9      	bcc.n	801534c <u8g2_draw_button_line+0x2e>
  }
  button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;	/* add some space between the buttons */
 8015378:	7abb      	ldrb	r3, [r7, #10]
 801537a:	461a      	mov	r2, r3
 801537c:	0052      	lsls	r2, r2, #1
 801537e:	4413      	add	r3, r2
 8015380:	005b      	lsls	r3, r3, #1
 8015382:	b2da      	uxtb	r2, r3
 8015384:	7bfb      	ldrb	r3, [r7, #15]
 8015386:	4413      	add	r3, r2
 8015388:	b2db      	uxtb	r3, r3
 801538a:	3b06      	subs	r3, #6
 801538c:	73fb      	strb	r3, [r7, #15]
  
  /* calculate the left offset */
  d = 0;
 801538e:	2300      	movs	r3, #0
 8015390:	733b      	strb	r3, [r7, #12]
  if ( button_line_width < w )
 8015392:	7bfa      	ldrb	r2, [r7, #15]
 8015394:	78bb      	ldrb	r3, [r7, #2]
 8015396:	429a      	cmp	r2, r3
 8015398:	d208      	bcs.n	80153ac <u8g2_draw_button_line+0x8e>
  {
    d = w;
 801539a:	78bb      	ldrb	r3, [r7, #2]
 801539c:	733b      	strb	r3, [r7, #12]
    d -= button_line_width;
 801539e:	7b3a      	ldrb	r2, [r7, #12]
 80153a0:	7bfb      	ldrb	r3, [r7, #15]
 80153a2:	1ad3      	subs	r3, r2, r3
 80153a4:	733b      	strb	r3, [r7, #12]
    d /= 2;
 80153a6:	7b3b      	ldrb	r3, [r7, #12]
 80153a8:	085b      	lsrs	r3, r3, #1
 80153aa:	733b      	strb	r3, [r7, #12]
  }
  
  /* draw the buttons */
  x = d;
 80153ac:	7b3b      	ldrb	r3, [r7, #12]
 80153ae:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 80153b0:	2300      	movs	r3, #0
 80153b2:	73bb      	strb	r3, [r7, #14]
 80153b4:	e02c      	b.n	8015410 <u8g2_draw_button_line+0xf2>
  {
    is_invert = 0;
 80153b6:	2300      	movs	r3, #0
 80153b8:	737b      	strb	r3, [r7, #13]
    if ( i == cursor )
 80153ba:	7bba      	ldrb	r2, [r7, #14]
 80153bc:	787b      	ldrb	r3, [r7, #1]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d101      	bne.n	80153c6 <u8g2_draw_button_line+0xa8>
      is_invert = 1;
 80153c2:	2301      	movs	r3, #1
 80153c4:	737b      	strb	r3, [r7, #13]

    u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
 80153c6:	7bbb      	ldrb	r3, [r7, #14]
 80153c8:	69b9      	ldr	r1, [r7, #24]
 80153ca:	4618      	mov	r0, r3
 80153cc:	f001 f9fa 	bl	80167c4 <u8x8_GetStringLineStart>
 80153d0:	78fa      	ldrb	r2, [r7, #3]
 80153d2:	7af9      	ldrb	r1, [r7, #11]
 80153d4:	7b7b      	ldrb	r3, [r7, #13]
 80153d6:	9302      	str	r3, [sp, #8]
 80153d8:	2301      	movs	r3, #1
 80153da:	9301      	str	r3, [sp, #4]
 80153dc:	9000      	str	r0, [sp, #0]
 80153de:	2300      	movs	r3, #0
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f000 f900 	bl	80155e6 <u8g2_DrawUTF8Line>
    x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
 80153e6:	7bbb      	ldrb	r3, [r7, #14]
 80153e8:	69b9      	ldr	r1, [r7, #24]
 80153ea:	4618      	mov	r0, r3
 80153ec:	f001 f9ea 	bl	80167c4 <u8x8_GetStringLineStart>
 80153f0:	4603      	mov	r3, r0
 80153f2:	4619      	mov	r1, r3
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f7ff faf1 	bl	80149dc <u8g2_GetUTF8Width>
 80153fa:	4603      	mov	r3, r0
 80153fc:	461a      	mov	r2, r3
 80153fe:	7afb      	ldrb	r3, [r7, #11]
 8015400:	4413      	add	r3, r2
 8015402:	72fb      	strb	r3, [r7, #11]
    x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
 8015404:	7afb      	ldrb	r3, [r7, #11]
 8015406:	3306      	adds	r3, #6
 8015408:	72fb      	strb	r3, [r7, #11]
  for( i = 0; i < cnt; i++ )
 801540a:	7bbb      	ldrb	r3, [r7, #14]
 801540c:	3301      	adds	r3, #1
 801540e:	73bb      	strb	r3, [r7, #14]
 8015410:	7bba      	ldrb	r2, [r7, #14]
 8015412:	7abb      	ldrb	r3, [r7, #10]
 8015414:	429a      	cmp	r2, r3
 8015416:	d3ce      	bcc.n	80153b6 <u8g2_draw_button_line+0x98>
  }
  
  /* return the number of buttons */
  return cnt;
 8015418:	7abb      	ldrb	r3, [r7, #10]
}
 801541a:	4618      	mov	r0, r3
 801541c:	3710      	adds	r7, #16
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}

08015422 <u8g2_UserInterfaceMessage>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
*/

uint8_t u8g2_UserInterfaceMessage(u8g2_t *u8g2, const char *title1, const char *title2, const char *title3, const char *buttons)
{
 8015422:	b580      	push	{r7, lr}
 8015424:	b08a      	sub	sp, #40	; 0x28
 8015426:	af04      	add	r7, sp, #16
 8015428:	60f8      	str	r0, [r7, #12]
 801542a:	60b9      	str	r1, [r7, #8]
 801542c:	607a      	str	r2, [r7, #4]
 801542e:	603b      	str	r3, [r7, #0]
  uint8_t height;
  uint8_t line_height;
  u8g2_uint_t pixel_height;
  u8g2_uint_t y, yy;
	
  uint8_t cursor = 0;
 8015430:	2300      	movs	r3, #0
 8015432:	753b      	strb	r3, [r7, #20]
  uint8_t button_cnt;
  uint8_t event;
	
  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8015434:	2100      	movs	r1, #0
 8015436:	68f8      	ldr	r0, [r7, #12]
 8015438:	f7ff fae4 	bl	8014a04 <u8g2_SetFontDirection>

  /* force baseline position */
  u8g2_SetFontPosBaseline(u8g2);
 801543c:	68f8      	ldr	r0, [r7, #12]
 801543e:	f7ff fa53 	bl	80148e8 <u8g2_SetFontPosBaseline>
	
	
  /* calculate line height */
  line_height = u8g2_GetAscent(u8g2);
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015448:	74fb      	strb	r3, [r7, #19]
  line_height -= u8g2_GetDescent(u8g2);
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8015450:	b2db      	uxtb	r3, r3
 8015452:	7cfa      	ldrb	r2, [r7, #19]
 8015454:	1ad3      	subs	r3, r2, r3
 8015456:	74fb      	strb	r3, [r7, #19]

  /* calculate overall height of the message box in lines*/
  height = 1;	/* button line */
 8015458:	2301      	movs	r3, #1
 801545a:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title1);
 801545c:	68b8      	ldr	r0, [r7, #8]
 801545e:	f001 f98e 	bl	801677e <u8x8_GetStringLineCnt>
 8015462:	4603      	mov	r3, r0
 8015464:	461a      	mov	r2, r3
 8015466:	7dfb      	ldrb	r3, [r7, #23]
 8015468:	4413      	add	r3, r2
 801546a:	75fb      	strb	r3, [r7, #23]
  if ( title2 != NULL )
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d002      	beq.n	8015478 <u8g2_UserInterfaceMessage+0x56>
    height++;
 8015472:	7dfb      	ldrb	r3, [r7, #23]
 8015474:	3301      	adds	r3, #1
 8015476:	75fb      	strb	r3, [r7, #23]
  height += u8x8_GetStringLineCnt(title3);
 8015478:	6838      	ldr	r0, [r7, #0]
 801547a:	f001 f980 	bl	801677e <u8x8_GetStringLineCnt>
 801547e:	4603      	mov	r3, r0
 8015480:	461a      	mov	r2, r3
 8015482:	7dfb      	ldrb	r3, [r7, #23]
 8015484:	4413      	add	r3, r2
 8015486:	75fb      	strb	r3, [r7, #23]
  
  /* calculate the height in pixel */
  pixel_height = height;
 8015488:	7dfb      	ldrb	r3, [r7, #23]
 801548a:	74bb      	strb	r3, [r7, #18]
  pixel_height *= line_height;
 801548c:	7cba      	ldrb	r2, [r7, #18]
 801548e:	7cfb      	ldrb	r3, [r7, #19]
 8015490:	fb12 f303 	smulbb	r3, r2, r3
 8015494:	74bb      	strb	r3, [r7, #18]
  
  /* ... and add the space between the text and the buttons */
  pixel_height +=SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 8015496:	7cbb      	ldrb	r3, [r7, #18]
 8015498:	3303      	adds	r3, #3
 801549a:	74bb      	strb	r3, [r7, #18]
  
  /* calculate offset from top */
  y = 0;
 801549c:	2300      	movs	r3, #0
 801549e:	75bb      	strb	r3, [r7, #22]
  if ( pixel_height < u8g2_GetDisplayHeight(u8g2)   )
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80154a6:	7cba      	ldrb	r2, [r7, #18]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d20a      	bcs.n	80154c2 <u8g2_UserInterfaceMessage+0xa0>
  {
    y = u8g2_GetDisplayHeight(u8g2);
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80154b2:	75bb      	strb	r3, [r7, #22]
    y -= pixel_height;
 80154b4:	7dba      	ldrb	r2, [r7, #22]
 80154b6:	7cbb      	ldrb	r3, [r7, #18]
 80154b8:	1ad3      	subs	r3, r2, r3
 80154ba:	75bb      	strb	r3, [r7, #22]
    y /= 2;
 80154bc:	7dbb      	ldrb	r3, [r7, #22]
 80154be:	085b      	lsrs	r3, r3, #1
 80154c0:	75bb      	strb	r3, [r7, #22]
  }
  y += u8g2_GetAscent(u8g2);
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80154c8:	b2da      	uxtb	r2, r3
 80154ca:	7dbb      	ldrb	r3, [r7, #22]
 80154cc:	4413      	add	r3, r2
 80154ce:	75bb      	strb	r3, [r7, #22]

  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	f7fe fbb0 	bl	8013c36 <u8g2_FirstPage>
      do
      {
	  yy = y;
 80154d6:	7dbb      	ldrb	r3, [r7, #22]
 80154d8:	757b      	strb	r3, [r7, #21]
	  /* draw message box */
	  
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80154e0:	7d7a      	ldrb	r2, [r7, #21]
 80154e2:	68bb      	ldr	r3, [r7, #8]
 80154e4:	9301      	str	r3, [sp, #4]
 80154e6:	7cfb      	ldrb	r3, [r7, #19]
 80154e8:	9300      	str	r3, [sp, #0]
 80154ea:	460b      	mov	r3, r1
 80154ec:	2100      	movs	r1, #0
 80154ee:	68f8      	ldr	r0, [r7, #12]
 80154f0:	f000 f90b 	bl	801570a <u8g2_DrawUTF8Lines>
 80154f4:	4603      	mov	r3, r0
 80154f6:	461a      	mov	r2, r3
 80154f8:	7d7b      	ldrb	r3, [r7, #21]
 80154fa:	4413      	add	r3, r2
 80154fc:	757b      	strb	r3, [r7, #21]
	  if ( title2 != NULL )
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d012      	beq.n	801552a <u8g2_UserInterfaceMessage+0x108>
	  {
	    u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 801550a:	7d7a      	ldrb	r2, [r7, #21]
 801550c:	2300      	movs	r3, #0
 801550e:	9302      	str	r3, [sp, #8]
 8015510:	2300      	movs	r3, #0
 8015512:	9301      	str	r3, [sp, #4]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	9300      	str	r3, [sp, #0]
 8015518:	460b      	mov	r3, r1
 801551a:	2100      	movs	r1, #0
 801551c:	68f8      	ldr	r0, [r7, #12]
 801551e:	f000 f862 	bl	80155e6 <u8g2_DrawUTF8Line>
	    yy+=line_height;
 8015522:	7d7a      	ldrb	r2, [r7, #21]
 8015524:	7cfb      	ldrb	r3, [r7, #19]
 8015526:	4413      	add	r3, r2
 8015528:	757b      	strb	r3, [r7, #21]
	  }
	  yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title3);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8015530:	7d7a      	ldrb	r2, [r7, #21]
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	9301      	str	r3, [sp, #4]
 8015536:	7cfb      	ldrb	r3, [r7, #19]
 8015538:	9300      	str	r3, [sp, #0]
 801553a:	460b      	mov	r3, r1
 801553c:	2100      	movs	r1, #0
 801553e:	68f8      	ldr	r0, [r7, #12]
 8015540:	f000 f8e3 	bl	801570a <u8g2_DrawUTF8Lines>
 8015544:	4603      	mov	r3, r0
 8015546:	461a      	mov	r2, r3
 8015548:	7d7b      	ldrb	r3, [r7, #21]
 801554a:	4413      	add	r3, r2
 801554c:	757b      	strb	r3, [r7, #21]
	  yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 801554e:	7d7b      	ldrb	r3, [r7, #21]
 8015550:	3303      	adds	r3, #3
 8015552:	757b      	strb	r3, [r7, #21]

	  button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 801555a:	7d38      	ldrb	r0, [r7, #20]
 801555c:	7d79      	ldrb	r1, [r7, #21]
 801555e:	6a3b      	ldr	r3, [r7, #32]
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	4603      	mov	r3, r0
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f7ff feda 	bl	801531e <u8g2_draw_button_line>
 801556a:	4603      	mov	r3, r0
 801556c:	747b      	strb	r3, [r7, #17]
	  
      } while( u8g2_NextPage(u8g2) );
 801556e:	68f8      	ldr	r0, [r7, #12]
 8015570:	f7fe fb75 	bl	8013c5e <u8g2_NextPage>
 8015574:	4603      	mov	r3, r0
 8015576:	2b00      	cmp	r3, #0
 8015578:	d1ad      	bne.n	80154d6 <u8g2_UserInterfaceMessage+0xb4>
      return 0;
#endif
	  
      for(;;)
      {
	    event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 801557a:	68f8      	ldr	r0, [r7, #12]
 801557c:	f7ef f93e 	bl	80047fc <u8x8_GetMenuEvent>
 8015580:	4603      	mov	r3, r0
 8015582:	743b      	strb	r3, [r7, #16]
	    if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 8015584:	7c3b      	ldrb	r3, [r7, #16]
 8015586:	2b50      	cmp	r3, #80	; 0x50
 8015588:	d103      	bne.n	8015592 <u8g2_UserInterfaceMessage+0x170>
	      return cursor+1;
 801558a:	7d3b      	ldrb	r3, [r7, #20]
 801558c:	3301      	adds	r3, #1
 801558e:	b2db      	uxtb	r3, r3
 8015590:	e025      	b.n	80155de <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 8015592:	7c3b      	ldrb	r3, [r7, #16]
 8015594:	2b53      	cmp	r3, #83	; 0x53
 8015596:	d101      	bne.n	801559c <u8g2_UserInterfaceMessage+0x17a>
	      return 0;
 8015598:	2300      	movs	r3, #0
 801559a:	e020      	b.n	80155de <u8g2_UserInterfaceMessage+0x1bc>
	    else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 801559c:	7c3b      	ldrb	r3, [r7, #16]
 801559e:	2b51      	cmp	r3, #81	; 0x51
 80155a0:	d002      	beq.n	80155a8 <u8g2_UserInterfaceMessage+0x186>
 80155a2:	7c3b      	ldrb	r3, [r7, #16]
 80155a4:	2b55      	cmp	r3, #85	; 0x55
 80155a6:	d109      	bne.n	80155bc <u8g2_UserInterfaceMessage+0x19a>
	    {
	      cursor++;
 80155a8:	7d3b      	ldrb	r3, [r7, #20]
 80155aa:	3301      	adds	r3, #1
 80155ac:	753b      	strb	r3, [r7, #20]
	      if ( cursor >= button_cnt )
 80155ae:	7d3a      	ldrb	r2, [r7, #20]
 80155b0:	7c7b      	ldrb	r3, [r7, #17]
 80155b2:	429a      	cmp	r2, r3
 80155b4:	d311      	bcc.n	80155da <u8g2_UserInterfaceMessage+0x1b8>
		cursor = 0;
 80155b6:	2300      	movs	r3, #0
 80155b8:	753b      	strb	r3, [r7, #20]
	      break;
 80155ba:	e00e      	b.n	80155da <u8g2_UserInterfaceMessage+0x1b8>
	    }
	    else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 80155bc:	7c3b      	ldrb	r3, [r7, #16]
 80155be:	2b52      	cmp	r3, #82	; 0x52
 80155c0:	d002      	beq.n	80155c8 <u8g2_UserInterfaceMessage+0x1a6>
 80155c2:	7c3b      	ldrb	r3, [r7, #16]
 80155c4:	2b54      	cmp	r3, #84	; 0x54
 80155c6:	d1d8      	bne.n	801557a <u8g2_UserInterfaceMessage+0x158>
	    {
	      if ( cursor == 0 )
 80155c8:	7d3b      	ldrb	r3, [r7, #20]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d101      	bne.n	80155d2 <u8g2_UserInterfaceMessage+0x1b0>
		cursor = button_cnt;
 80155ce:	7c7b      	ldrb	r3, [r7, #17]
 80155d0:	753b      	strb	r3, [r7, #20]
	      cursor--;
 80155d2:	7d3b      	ldrb	r3, [r7, #20]
 80155d4:	3b01      	subs	r3, #1
 80155d6:	753b      	strb	r3, [r7, #20]
	      break;
 80155d8:	e000      	b.n	80155dc <u8g2_UserInterfaceMessage+0x1ba>
	      break;
 80155da:	bf00      	nop
      u8g2_FirstPage(u8g2);
 80155dc:	e778      	b.n	80154d0 <u8g2_UserInterfaceMessage+0xae>
	    }    
      }
  }
  /* never reached */
  //return 0;
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3718      	adds	r7, #24
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}

080155e6 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
 80155e6:	b580      	push	{r7, lr}
 80155e8:	b086      	sub	sp, #24
 80155ea:	af02      	add	r7, sp, #8
 80155ec:	6078      	str	r0, [r7, #4]
 80155ee:	4608      	mov	r0, r1
 80155f0:	4611      	mov	r1, r2
 80155f2:	461a      	mov	r2, r3
 80155f4:	4603      	mov	r3, r0
 80155f6:	70fb      	strb	r3, [r7, #3]
 80155f8:	460b      	mov	r3, r1
 80155fa:	70bb      	strb	r3, [r7, #2]
 80155fc:	4613      	mov	r3, r2
 80155fe:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
 8015600:	2100      	movs	r1, #0
 8015602:	6878      	ldr	r0, [r7, #4]
 8015604:	f7ff f9fe 	bl	8014a04 <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	4798      	blx	r3
 8015610:	4603      	mov	r3, r0
 8015612:	461a      	mov	r2, r3
 8015614:	78bb      	ldrb	r3, [r7, #2]
 8015616:	4413      	add	r3, r2
 8015618:	70bb      	strb	r3, [r7, #2]

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
 801561a:	69b9      	ldr	r1, [r7, #24]
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f7ff f9dd 	bl	80149dc <u8g2_GetUTF8Width>
 8015622:	4603      	mov	r3, r0
 8015624:	72bb      	strb	r3, [r7, #10]

  /* calculate delta d within the box */
  d = 0;
 8015626:	2300      	movs	r3, #0
 8015628:	73fb      	strb	r3, [r7, #15]
  if ( str_width < w )
 801562a:	7aba      	ldrb	r2, [r7, #10]
 801562c:	787b      	ldrb	r3, [r7, #1]
 801562e:	429a      	cmp	r2, r3
 8015630:	d209      	bcs.n	8015646 <u8g2_DrawUTF8Line+0x60>
  {
    d = w;
 8015632:	787b      	ldrb	r3, [r7, #1]
 8015634:	73fb      	strb	r3, [r7, #15]
    d -=str_width;
 8015636:	7bfa      	ldrb	r2, [r7, #15]
 8015638:	7abb      	ldrb	r3, [r7, #10]
 801563a:	1ad3      	subs	r3, r2, r3
 801563c:	73fb      	strb	r3, [r7, #15]
    d /= 2;
 801563e:	7bfb      	ldrb	r3, [r7, #15]
 8015640:	085b      	lsrs	r3, r3, #1
 8015642:	73fb      	strb	r3, [r7, #15]
 8015644:	e001      	b.n	801564a <u8g2_DrawUTF8Line+0x64>
  }
  else
  {
    w = str_width;
 8015646:	7abb      	ldrb	r3, [r7, #10]
 8015648:	707b      	strb	r3, [r7, #1]
  }

  /* caluclate text box */
  fx = x;
 801564a:	78fb      	ldrb	r3, [r7, #3]
 801564c:	73bb      	strb	r3, [r7, #14]
  fy = y - u8g2_GetAscent(u8g2) ;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015654:	b2db      	uxtb	r3, r3
 8015656:	78ba      	ldrb	r2, [r7, #2]
 8015658:	1ad3      	subs	r3, r2, r3
 801565a:	737b      	strb	r3, [r7, #13]
  fw = w;
 801565c:	787b      	ldrb	r3, [r7, #1]
 801565e:	733b      	strb	r3, [r7, #12]
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015666:	b2da      	uxtb	r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 801566e:	b2db      	uxtb	r3, r3
 8015670:	1ad3      	subs	r3, r2, r3
 8015672:	72fb      	strb	r3, [r7, #11]

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
 8015674:	2101      	movs	r1, #1
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f7ff fb13 	bl	8014ca2 <u8g2_SetDrawColor>
  if ( is_invert )
 801567c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d021      	beq.n	80156c8 <u8g2_DrawUTF8Line+0xe2>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
 8015684:	7b38      	ldrb	r0, [r7, #12]
 8015686:	7b7a      	ldrb	r2, [r7, #13]
 8015688:	7bb9      	ldrb	r1, [r7, #14]
 801568a:	7afb      	ldrb	r3, [r7, #11]
 801568c:	9300      	str	r3, [sp, #0]
 801568e:	4603      	mov	r3, r0
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f7fe f99f 	bl	80139d4 <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
 8015696:	e017      	b.n	80156c8 <u8g2_DrawUTF8Line+0xe2>
  {
    fx--;
 8015698:	7bbb      	ldrb	r3, [r7, #14]
 801569a:	3b01      	subs	r3, #1
 801569c:	73bb      	strb	r3, [r7, #14]
    fy--;
 801569e:	7b7b      	ldrb	r3, [r7, #13]
 80156a0:	3b01      	subs	r3, #1
 80156a2:	737b      	strb	r3, [r7, #13]
    fw +=2;
 80156a4:	7b3b      	ldrb	r3, [r7, #12]
 80156a6:	3302      	adds	r3, #2
 80156a8:	733b      	strb	r3, [r7, #12]
    fh +=2;
 80156aa:	7afb      	ldrb	r3, [r7, #11]
 80156ac:	3302      	adds	r3, #2
 80156ae:	72fb      	strb	r3, [r7, #11]
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 80156b0:	7b38      	ldrb	r0, [r7, #12]
 80156b2:	7b7a      	ldrb	r2, [r7, #13]
 80156b4:	7bb9      	ldrb	r1, [r7, #14]
 80156b6:	7afb      	ldrb	r3, [r7, #11]
 80156b8:	9300      	str	r3, [sp, #0]
 80156ba:	4603      	mov	r3, r0
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f7fe f9c0 	bl	8013a42 <u8g2_DrawFrame>
    border_size--;
 80156c2:	7f3b      	ldrb	r3, [r7, #28]
 80156c4:	3b01      	subs	r3, #1
 80156c6:	773b      	strb	r3, [r7, #28]
  while( border_size > 0 )
 80156c8:	7f3b      	ldrb	r3, [r7, #28]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d1e4      	bne.n	8015698 <u8g2_DrawUTF8Line+0xb2>
  }

  if ( is_invert )
 80156ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d004      	beq.n	80156e0 <u8g2_DrawUTF8Line+0xfa>
  {
    u8g2_SetDrawColor(u8g2, 0);
 80156d6:	2100      	movs	r1, #0
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f7ff fae2 	bl	8014ca2 <u8g2_SetDrawColor>
 80156de:	e003      	b.n	80156e8 <u8g2_DrawUTF8Line+0x102>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
 80156e0:	2101      	movs	r1, #1
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f7ff fadd 	bl	8014ca2 <u8g2_SetDrawColor>
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
 80156e8:	78fa      	ldrb	r2, [r7, #3]
 80156ea:	7bfb      	ldrb	r3, [r7, #15]
 80156ec:	4413      	add	r3, r2
 80156ee:	b2d9      	uxtb	r1, r3
 80156f0:	78ba      	ldrb	r2, [r7, #2]
 80156f2:	69bb      	ldr	r3, [r7, #24]
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f7ff f865 	bl	80147c4 <u8g2_DrawUTF8>

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
 80156fa:	2101      	movs	r1, #1
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f7ff fad0 	bl	8014ca2 <u8g2_SetDrawColor>

}
 8015702:	bf00      	nop
 8015704:	3710      	adds	r7, #16
 8015706:	46bd      	mov	sp, r7
 8015708:	bd80      	pop	{r7, pc}

0801570a <u8g2_DrawUTF8Lines>:
  lines can be centered with respect to "w"
  if s == NULL nothing is drawn and 0 is returned
  returns the number of lines in s multiplied with line_height
*/
u8g2_uint_t u8g2_DrawUTF8Lines(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t line_height, const char *s)
{
 801570a:	b590      	push	{r4, r7, lr}
 801570c:	b089      	sub	sp, #36	; 0x24
 801570e:	af04      	add	r7, sp, #16
 8015710:	6078      	str	r0, [r7, #4]
 8015712:	4608      	mov	r0, r1
 8015714:	4611      	mov	r1, r2
 8015716:	461a      	mov	r2, r3
 8015718:	4603      	mov	r3, r0
 801571a:	70fb      	strb	r3, [r7, #3]
 801571c:	460b      	mov	r3, r1
 801571e:	70bb      	strb	r3, [r7, #2]
 8015720:	4613      	mov	r3, r2
 8015722:	707b      	strb	r3, [r7, #1]
  uint8_t i;
  uint8_t cnt;
  u8g2_uint_t yy = 0;
 8015724:	2300      	movs	r3, #0
 8015726:	73bb      	strb	r3, [r7, #14]
  cnt = u8x8_GetStringLineCnt(s);
 8015728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801572a:	f001 f828 	bl	801677e <u8x8_GetStringLineCnt>
 801572e:	4603      	mov	r3, r0
 8015730:	737b      	strb	r3, [r7, #13]
  //printf("str=%s\n", s);
  //printf("cnt=%d, y=%d, line_height=%d\n", cnt, y, line_height);
  for( i = 0; i < cnt; i++ )
 8015732:	2300      	movs	r3, #0
 8015734:	73fb      	strb	r3, [r7, #15]
 8015736:	e01e      	b.n	8015776 <u8g2_DrawUTF8Lines+0x6c>
  {
    //printf("  i=%d, y=%d, line_height=%d\n", i, y, line_height);
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
 8015738:	7bfb      	ldrb	r3, [r7, #15]
 801573a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801573c:	4618      	mov	r0, r3
 801573e:	f001 f841 	bl	80167c4 <u8x8_GetStringLineStart>
 8015742:	4604      	mov	r4, r0
 8015744:	7878      	ldrb	r0, [r7, #1]
 8015746:	78ba      	ldrb	r2, [r7, #2]
 8015748:	78f9      	ldrb	r1, [r7, #3]
 801574a:	2300      	movs	r3, #0
 801574c:	9302      	str	r3, [sp, #8]
 801574e:	2300      	movs	r3, #0
 8015750:	9301      	str	r3, [sp, #4]
 8015752:	9400      	str	r4, [sp, #0]
 8015754:	4603      	mov	r3, r0
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f7ff ff45 	bl	80155e6 <u8g2_DrawUTF8Line>
    y+=line_height;
 801575c:	78ba      	ldrb	r2, [r7, #2]
 801575e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015762:	4413      	add	r3, r2
 8015764:	70bb      	strb	r3, [r7, #2]
    yy+=line_height;
 8015766:	7bba      	ldrb	r2, [r7, #14]
 8015768:	f897 3020 	ldrb.w	r3, [r7, #32]
 801576c:	4413      	add	r3, r2
 801576e:	73bb      	strb	r3, [r7, #14]
  for( i = 0; i < cnt; i++ )
 8015770:	7bfb      	ldrb	r3, [r7, #15]
 8015772:	3301      	adds	r3, #1
 8015774:	73fb      	strb	r3, [r7, #15]
 8015776:	7bfa      	ldrb	r2, [r7, #15]
 8015778:	7b7b      	ldrb	r3, [r7, #13]
 801577a:	429a      	cmp	r2, r3
 801577c:	d3dc      	bcc.n	8015738 <u8g2_DrawUTF8Lines+0x2e>
  }
  return yy;
 801577e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015780:	4618      	mov	r0, r3
 8015782:	3714      	adds	r7, #20
 8015784:	46bd      	mov	sp, r7
 8015786:	bd90      	pop	{r4, r7, pc}

08015788 <u8g2_draw_selection_list_line>:
  selection list with string line
  returns line height
*/
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b08a      	sub	sp, #40	; 0x28
 801578c:	af04      	add	r7, sp, #16
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	60b9      	str	r1, [r7, #8]
 8015792:	4611      	mov	r1, r2
 8015794:	461a      	mov	r2, r3
 8015796:	460b      	mov	r3, r1
 8015798:	71fb      	strb	r3, [r7, #7]
 801579a:	4613      	mov	r3, r2
 801579c:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t yy;
  uint8_t border_size = 0;
 801579e:	2300      	movs	r3, #0
 80157a0:	75fb      	strb	r3, [r7, #23]
  uint8_t is_invert = 0;
 80157a2:	2300      	movs	r3, #0
 80157a4:	75bb      	strb	r3, [r7, #22]
	
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80157ac:	b2da      	uxtb	r2, r3
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	b2db      	uxtb	r3, r3
 80157ba:	3301      	adds	r3, #1
 80157bc:	757b      	strb	r3, [r7, #21]

  /* calculate offset from display upper border */
  yy = idx;
 80157be:	79bb      	ldrb	r3, [r7, #6]
 80157c0:	753b      	strb	r3, [r7, #20]
  yy -= u8sl->first_pos;
 80157c2:	68bb      	ldr	r3, [r7, #8]
 80157c4:	789b      	ldrb	r3, [r3, #2]
 80157c6:	7d3a      	ldrb	r2, [r7, #20]
 80157c8:	1ad3      	subs	r3, r2, r3
 80157ca:	753b      	strb	r3, [r7, #20]
  yy *= line_height;
 80157cc:	7d3a      	ldrb	r2, [r7, #20]
 80157ce:	7d7b      	ldrb	r3, [r7, #21]
 80157d0:	fb12 f303 	smulbb	r3, r2, r3
 80157d4:	753b      	strb	r3, [r7, #20]
  yy += y;
 80157d6:	7d3a      	ldrb	r2, [r7, #20]
 80157d8:	79fb      	ldrb	r3, [r7, #7]
 80157da:	4413      	add	r3, r2
 80157dc:	753b      	strb	r3, [r7, #20]

  /* check whether this is the current cursor line */
  if ( idx == u8sl->current_pos )
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	78db      	ldrb	r3, [r3, #3]
 80157e2:	79ba      	ldrb	r2, [r7, #6]
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d103      	bne.n	80157f0 <u8g2_draw_selection_list_line+0x68>
  {
    border_size = MY_BORDER_SIZE;
 80157e8:	2301      	movs	r3, #1
 80157ea:	75fb      	strb	r3, [r7, #23]
    is_invert = 1;
 80157ec:	2301      	movs	r3, #1
 80157ee:	75bb      	strb	r3, [r7, #22]
  }

  /* get the line from the array */
  s = u8x8_GetStringLineStart(idx, s);
 80157f0:	79bb      	ldrb	r3, [r7, #6]
 80157f2:	6a39      	ldr	r1, [r7, #32]
 80157f4:	4618      	mov	r0, r3
 80157f6:	f000 ffe5 	bl	80167c4 <u8x8_GetStringLineStart>
 80157fa:	6238      	str	r0, [r7, #32]

  /* draw the line */
  if ( s == NULL )
 80157fc:	6a3b      	ldr	r3, [r7, #32]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d101      	bne.n	8015806 <u8g2_draw_selection_list_line+0x7e>
    s = "";
 8015802:	4b0c      	ldr	r3, [pc, #48]	; (8015834 <u8g2_draw_selection_list_line+0xac>)
 8015804:	623b      	str	r3, [r7, #32]
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801580c:	3b02      	subs	r3, #2
 801580e:	b2d9      	uxtb	r1, r3
 8015810:	79fa      	ldrb	r2, [r7, #7]
 8015812:	7dbb      	ldrb	r3, [r7, #22]
 8015814:	9302      	str	r3, [sp, #8]
 8015816:	7dfb      	ldrb	r3, [r7, #23]
 8015818:	9301      	str	r3, [sp, #4]
 801581a:	6a3b      	ldr	r3, [r7, #32]
 801581c:	9300      	str	r3, [sp, #0]
 801581e:	460b      	mov	r3, r1
 8015820:	2101      	movs	r1, #1
 8015822:	68f8      	ldr	r0, [r7, #12]
 8015824:	f7ff fedf 	bl	80155e6 <u8g2_DrawUTF8Line>
  return line_height;
 8015828:	7d7b      	ldrb	r3, [r7, #21]
}
 801582a:	4618      	mov	r0, r3
 801582c:	3718      	adds	r7, #24
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	08022930 	.word	0x08022930

08015838 <u8g2_DrawSelectionList>:

void u8g2_DrawSelectionList(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, const char *s)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b088      	sub	sp, #32
 801583c:	af02      	add	r7, sp, #8
 801583e:	60f8      	str	r0, [r7, #12]
 8015840:	60b9      	str	r1, [r7, #8]
 8015842:	603b      	str	r3, [r7, #0]
 8015844:	4613      	mov	r3, r2
 8015846:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for( i = 0; i < u8sl->visible; i++ )
 8015848:	2300      	movs	r3, #0
 801584a:	75fb      	strb	r3, [r7, #23]
 801584c:	e014      	b.n	8015878 <u8g2_DrawSelectionList+0x40>
  {
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	789a      	ldrb	r2, [r3, #2]
 8015852:	7dfb      	ldrb	r3, [r7, #23]
 8015854:	4413      	add	r3, r2
 8015856:	b2d9      	uxtb	r1, r3
 8015858:	79fa      	ldrb	r2, [r7, #7]
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	9300      	str	r3, [sp, #0]
 801585e:	460b      	mov	r3, r1
 8015860:	68b9      	ldr	r1, [r7, #8]
 8015862:	68f8      	ldr	r0, [r7, #12]
 8015864:	f7ff ff90 	bl	8015788 <u8g2_draw_selection_list_line>
 8015868:	4603      	mov	r3, r0
 801586a:	461a      	mov	r2, r3
 801586c:	79fb      	ldrb	r3, [r7, #7]
 801586e:	4413      	add	r3, r2
 8015870:	71fb      	strb	r3, [r7, #7]
  for( i = 0; i < u8sl->visible; i++ )
 8015872:	7dfb      	ldrb	r3, [r7, #23]
 8015874:	3301      	adds	r3, #1
 8015876:	75fb      	strb	r3, [r7, #23]
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	781b      	ldrb	r3, [r3, #0]
 801587c:	7dfa      	ldrb	r2, [r7, #23]
 801587e:	429a      	cmp	r2, r3
 8015880:	d3e5      	bcc.n	801584e <u8g2_DrawSelectionList+0x16>
  }
}
 8015882:	bf00      	nop
 8015884:	3718      	adds	r7, #24
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}

0801588a <u8g2_UserInterfaceSelectionList>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
	
*/
uint8_t u8g2_UserInterfaceSelectionList(u8g2_t *u8g2, const char *title, uint8_t start_pos, const char *sl)
{
 801588a:	b580      	push	{r7, lr}
 801588c:	b08a      	sub	sp, #40	; 0x28
 801588e:	af02      	add	r7, sp, #8
 8015890:	60f8      	str	r0, [r7, #12]
 8015892:	60b9      	str	r1, [r7, #8]
 8015894:	603b      	str	r3, [r7, #0]
 8015896:	4613      	mov	r3, r2
 8015898:	71fb      	strb	r3, [r7, #7]
  u8sl_t u8sl;
  u8g2_uint_t yy;

  uint8_t event;

  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80158a0:	b2da      	uxtb	r2, r3
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 80158a8:	b2db      	uxtb	r3, r3
 80158aa:	1ad3      	subs	r3, r2, r3
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	3301      	adds	r3, #1
 80158b0:	77bb      	strb	r3, [r7, #30]

  uint8_t title_lines = u8x8_GetStringLineCnt(title);
 80158b2:	68b8      	ldr	r0, [r7, #8]
 80158b4:	f000 ff63 	bl	801677e <u8x8_GetStringLineCnt>
 80158b8:	4603      	mov	r3, r0
 80158ba:	777b      	strb	r3, [r7, #29]
  uint8_t display_lines;

  
  if ( start_pos > 0 )	/* issue 112 */
 80158bc:	79fb      	ldrb	r3, [r7, #7]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d002      	beq.n	80158c8 <u8g2_UserInterfaceSelectionList+0x3e>
    start_pos--;		/* issue 112 */
 80158c2:	79fb      	ldrb	r3, [r7, #7]
 80158c4:	3b01      	subs	r3, #1
 80158c6:	71fb      	strb	r3, [r7, #7]


  if ( title_lines > 0 )
 80158c8:	7f7b      	ldrb	r3, [r7, #29]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d00f      	beq.n	80158ee <u8g2_UserInterfaceSelectionList+0x64>
  {
	display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80158d4:	1eda      	subs	r2, r3, #3
 80158d6:	7fbb      	ldrb	r3, [r7, #30]
 80158d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80158dc:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 80158de:	7f3b      	ldrb	r3, [r7, #28]
 80158e0:	753b      	strb	r3, [r7, #20]
	u8sl.visible -= title_lines;
 80158e2:	7d3a      	ldrb	r2, [r7, #20]
 80158e4:	7f7b      	ldrb	r3, [r7, #29]
 80158e6:	1ad3      	subs	r3, r2, r3
 80158e8:	b2db      	uxtb	r3, r3
 80158ea:	753b      	strb	r3, [r7, #20]
 80158ec:	e008      	b.n	8015900 <u8g2_UserInterfaceSelectionList+0x76>
  }
  else
  {
	display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80158f4:	7fbb      	ldrb	r3, [r7, #30]
 80158f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80158fa:	773b      	strb	r3, [r7, #28]
	u8sl.visible = display_lines;
 80158fc:	7f3b      	ldrb	r3, [r7, #28]
 80158fe:	753b      	strb	r3, [r7, #20]
  }

  u8sl.total = u8x8_GetStringLineCnt(sl);
 8015900:	6838      	ldr	r0, [r7, #0]
 8015902:	f000 ff3c 	bl	801677e <u8x8_GetStringLineCnt>
 8015906:	4603      	mov	r3, r0
 8015908:	757b      	strb	r3, [r7, #21]
  u8sl.first_pos = 0;
 801590a:	2300      	movs	r3, #0
 801590c:	75bb      	strb	r3, [r7, #22]
  u8sl.current_pos = start_pos;
 801590e:	79fb      	ldrb	r3, [r7, #7]
 8015910:	75fb      	strb	r3, [r7, #23]

  if ( u8sl.current_pos >= u8sl.total )
 8015912:	7dfa      	ldrb	r2, [r7, #23]
 8015914:	7d7b      	ldrb	r3, [r7, #21]
 8015916:	429a      	cmp	r2, r3
 8015918:	d303      	bcc.n	8015922 <u8g2_UserInterfaceSelectionList+0x98>
    u8sl.current_pos = u8sl.total-1;
 801591a:	7d7b      	ldrb	r3, [r7, #21]
 801591c:	3b01      	subs	r3, #1
 801591e:	b2db      	uxtb	r3, r3
 8015920:	75fb      	strb	r3, [r7, #23]
  if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
 8015922:	7dbb      	ldrb	r3, [r7, #22]
 8015924:	461a      	mov	r2, r3
 8015926:	7d3b      	ldrb	r3, [r7, #20]
 8015928:	4413      	add	r3, r2
 801592a:	7dfa      	ldrb	r2, [r7, #23]
 801592c:	4293      	cmp	r3, r2
 801592e:	dc06      	bgt.n	801593e <u8g2_UserInterfaceSelectionList+0xb4>
    u8sl.first_pos = u8sl.current_pos-u8sl.visible+1;
 8015930:	7dfa      	ldrb	r2, [r7, #23]
 8015932:	7d3b      	ldrb	r3, [r7, #20]
 8015934:	1ad3      	subs	r3, r2, r3
 8015936:	b2db      	uxtb	r3, r3
 8015938:	3301      	adds	r3, #1
 801593a:	b2db      	uxtb	r3, r3
 801593c:	75bb      	strb	r3, [r7, #22]

  u8g2_SetFontPosBaseline(u8g2);
 801593e:	68f8      	ldr	r0, [r7, #12]
 8015940:	f7fe ffd2 	bl	80148e8 <u8g2_SetFontPosBaseline>
  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
 8015944:	68f8      	ldr	r0, [r7, #12]
 8015946:	f7fe f976 	bl	8013c36 <u8g2_FirstPage>
      do
      {
        yy = u8g2_GetAscent(u8g2);
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8015950:	77fb      	strb	r3, [r7, #31]
        if ( title_lines > 0 )
 8015952:	7f7b      	ldrb	r3, [r7, #29]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d027      	beq.n	80159a8 <u8g2_UserInterfaceSelectionList+0x11e>
        {
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 801595e:	7ffa      	ldrb	r2, [r7, #31]
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	9301      	str	r3, [sp, #4]
 8015964:	7fbb      	ldrb	r3, [r7, #30]
 8015966:	9300      	str	r3, [sp, #0]
 8015968:	460b      	mov	r3, r1
 801596a:	2100      	movs	r1, #0
 801596c:	68f8      	ldr	r0, [r7, #12]
 801596e:	f7ff fecc 	bl	801570a <u8g2_DrawUTF8Lines>
 8015972:	4603      	mov	r3, r0
 8015974:	461a      	mov	r2, r3
 8015976:	7ffb      	ldrb	r3, [r7, #31]
 8015978:	4413      	add	r3, r2
 801597a:	77fb      	strb	r3, [r7, #31]
		
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 801597c:	7ffa      	ldrb	r2, [r7, #31]
 801597e:	7fbb      	ldrb	r3, [r7, #30]
 8015980:	1ad3      	subs	r3, r2, r3
 8015982:	b2da      	uxtb	r2, r3
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 801598a:	b2db      	uxtb	r3, r3
 801598c:	1ad3      	subs	r3, r2, r3
 801598e:	b2db      	uxtb	r3, r3
 8015990:	3301      	adds	r3, #1
 8015992:	b2da      	uxtb	r2, r3
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801599a:	2100      	movs	r1, #0
 801599c:	68f8      	ldr	r0, [r7, #12]
 801599e:	f7ff f933 	bl	8014c08 <u8g2_DrawHLine>
		
	  yy += 3;
 80159a2:	7ffb      	ldrb	r3, [r7, #31]
 80159a4:	3303      	adds	r3, #3
 80159a6:	77fb      	strb	r3, [r7, #31]
        }
        u8g2_DrawSelectionList(u8g2, &u8sl, yy, sl);
 80159a8:	7ffa      	ldrb	r2, [r7, #31]
 80159aa:	f107 0114 	add.w	r1, r7, #20
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	68f8      	ldr	r0, [r7, #12]
 80159b2:	f7ff ff41 	bl	8015838 <u8g2_DrawSelectionList>
      } while( u8g2_NextPage(u8g2) );
 80159b6:	68f8      	ldr	r0, [r7, #12]
 80159b8:	f7fe f951 	bl	8013c5e <u8g2_NextPage>
 80159bc:	4603      	mov	r3, r0
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d1c3      	bne.n	801594a <u8g2_UserInterfaceSelectionList+0xc0>
#endif


      for(;;)
      {
        event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 80159c2:	68f8      	ldr	r0, [r7, #12]
 80159c4:	f7ee ff1a 	bl	80047fc <u8x8_GetMenuEvent>
 80159c8:	4603      	mov	r3, r0
 80159ca:	76fb      	strb	r3, [r7, #27]
        if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 80159cc:	7efb      	ldrb	r3, [r7, #27]
 80159ce:	2b50      	cmp	r3, #80	; 0x50
 80159d0:	d103      	bne.n	80159da <u8g2_UserInterfaceSelectionList+0x150>
          return u8sl.current_pos+1;		/* +1, issue 112 */
 80159d2:	7dfb      	ldrb	r3, [r7, #23]
 80159d4:	3301      	adds	r3, #1
 80159d6:	b2db      	uxtb	r3, r3
 80159d8:	e01c      	b.n	8015a14 <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 80159da:	7efb      	ldrb	r3, [r7, #27]
 80159dc:	2b53      	cmp	r3, #83	; 0x53
 80159de:	d101      	bne.n	80159e4 <u8g2_UserInterfaceSelectionList+0x15a>
          return 0;				/* issue 112: return 0 instead of start_pos */
 80159e0:	2300      	movs	r3, #0
 80159e2:	e017      	b.n	8015a14 <u8g2_UserInterfaceSelectionList+0x18a>
        else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 80159e4:	7efb      	ldrb	r3, [r7, #27]
 80159e6:	2b51      	cmp	r3, #81	; 0x51
 80159e8:	d002      	beq.n	80159f0 <u8g2_UserInterfaceSelectionList+0x166>
 80159ea:	7efb      	ldrb	r3, [r7, #27]
 80159ec:	2b55      	cmp	r3, #85	; 0x55
 80159ee:	d105      	bne.n	80159fc <u8g2_UserInterfaceSelectionList+0x172>
        {
          u8sl_Next(&u8sl);
 80159f0:	f107 0314 	add.w	r3, r7, #20
 80159f4:	4618      	mov	r0, r3
 80159f6:	f000 fdff 	bl	80165f8 <u8sl_Next>
          break;
 80159fa:	e00a      	b.n	8015a12 <u8g2_UserInterfaceSelectionList+0x188>
        }
        else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 80159fc:	7efb      	ldrb	r3, [r7, #27]
 80159fe:	2b52      	cmp	r3, #82	; 0x52
 8015a00:	d002      	beq.n	8015a08 <u8g2_UserInterfaceSelectionList+0x17e>
 8015a02:	7efb      	ldrb	r3, [r7, #27]
 8015a04:	2b54      	cmp	r3, #84	; 0x54
 8015a06:	d1dc      	bne.n	80159c2 <u8g2_UserInterfaceSelectionList+0x138>
        {
          u8sl_Prev(&u8sl);
 8015a08:	f107 0314 	add.w	r3, r7, #20
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f000 fe25 	bl	801665c <u8sl_Prev>
      u8g2_FirstPage(u8g2);
 8015a12:	e797      	b.n	8015944 <u8g2_UserInterfaceSelectionList+0xba>
          break;
        }
      }
  }
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	3720      	adds	r7, #32
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	2200      	movs	r2, #0
 8015a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	22ff      	movs	r2, #255	; 0xff
 8015a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	22ff      	movs	r2, #255	; 0xff
 8015a40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a48:	685b      	ldr	r3, [r3, #4]
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	4798      	blx	r3
}
 8015a4e:	bf00      	nop
 8015a50:	3708      	adds	r7, #8
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}

08015a56 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8015a56:	b580      	push	{r7, lr}
 8015a58:	b084      	sub	sp, #16
 8015a5a:	af00      	add	r7, sp, #0
 8015a5c:	60f8      	str	r0, [r7, #12]
 8015a5e:	60b9      	str	r1, [r7, #8]
 8015a60:	603b      	str	r3, [r7, #0]
 8015a62:	4613      	mov	r3, r2
 8015a64:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2200      	movs	r2, #0
 8015a6a:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	683a      	ldr	r2, [r7, #0]
 8015a70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	68ba      	ldr	r2, [r7, #8]
 8015a76:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	79fa      	ldrb	r2, [r7, #7]
 8015a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2200      	movs	r2, #0
 8015a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	2200      	movs	r2, #0
 8015a94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	69ba      	ldr	r2, [r7, #24]
 8015aac:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8015ab8:	68f8      	ldr	r0, [r7, #12]
 8015aba:	f7ff ffaf 	bl	8015a1c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8015abe:	68f8      	ldr	r0, [r7, #12]
 8015ac0:	f7fe ff12 	bl	80148e8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8015acc:	bf00      	nop
 8015ace:	3710      	adds	r7, #16
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	b085      	sub	sp, #20
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015ae8:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
 8015aec:	00db      	lsls	r3, r3, #3
 8015aee:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	7bfa      	ldrb	r2, [r7, #15]
 8015af4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	7c1b      	ldrb	r3, [r3, #16]
 8015afc:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8015afe:	7bfb      	ldrb	r3, [r7, #15]
 8015b00:	2b1f      	cmp	r3, #31
 8015b02:	d901      	bls.n	8015b08 <u8g2_update_dimension_common+0x34>
    t = 31;
 8015b04:	231f      	movs	r3, #31
 8015b06:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8015b08:	7bfb      	ldrb	r3, [r7, #15]
 8015b0a:	00db      	lsls	r3, r3, #3
 8015b0c:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	7bfa      	ldrb	r2, [r7, #15]
 8015b12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015b1c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8015b1e:	7bfb      	ldrb	r3, [r7, #15]
 8015b20:	00db      	lsls	r3, r3, #3
 8015b22:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	7bfa      	ldrb	r2, [r7, #15]
 8015b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015b32:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8015b34:	7bfb      	ldrb	r3, [r7, #15]
 8015b36:	687a      	ldr	r2, [r7, #4]
 8015b38:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8015b3c:	4413      	add	r3, r2
 8015b3e:	68ba      	ldr	r2, [r7, #8]
 8015b40:	7c52      	ldrb	r2, [r2, #17]
 8015b42:	4293      	cmp	r3, r2
 8015b44:	dd06      	ble.n	8015b54 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	7c5a      	ldrb	r2, [r3, #17]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015b50:	1ad3      	subs	r3, r2, r3
 8015b52:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8015b54:	7bfb      	ldrb	r3, [r7, #15]
 8015b56:	00db      	lsls	r3, r3, #3
 8015b58:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8015b78:	7bfb      	ldrb	r3, [r7, #15]
 8015b7a:	4413      	add	r3, r2
 8015b7c:	b2da      	uxtb	r2, r3
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	22f0      	movs	r2, #240	; 0xf0
 8015b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	8a9b      	ldrh	r3, [r3, #20]
 8015b90:	2bf0      	cmp	r3, #240	; 0xf0
 8015b92:	d805      	bhi.n	8015ba0 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	8a9b      	ldrh	r3, [r3, #20]
 8015b98:	b2da      	uxtb	r2, r3
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 8015ba0:	68bb      	ldr	r3, [r7, #8]
 8015ba2:	8adb      	ldrh	r3, [r3, #22]
 8015ba4:	b2da      	uxtb	r2, r3
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8015bac:	bf00      	nop
 8015bae:	3714      	adds	r7, #20
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr

08015bb8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b084      	sub	sp, #16
 8015bbc:	af02      	add	r7, sp, #8
 8015bbe:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015bd8:	9300      	str	r3, [sp, #0]
 8015bda:	4603      	mov	r3, r0
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f7ff fa3c 	bl	801505a <u8g2_IsIntersection>
 8015be2:	4603      	mov	r3, r0
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d104      	bne.n	8015bf2 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2200      	movs	r2, #0
 8015bec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8015bf0:	e03b      	b.n	8015c6a <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2201      	movs	r2, #1
 8015bf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d205      	bcs.n	8015c16 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d905      	bls.n	8015c32 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d205      	bcs.n	8015c4e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d905      	bls.n	8015c6a <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8015c6a:	bf00      	nop
 8015c6c:	3708      	adds	r7, #8
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}

08015c72 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8015c72:	b580      	push	{r7, lr}
 8015c74:	b082      	sub	sp, #8
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f7ff ff2a 	bl	8015ad4 <u8g2_update_dimension_common>
}
 8015c80:	bf00      	nop
 8015c82:	3708      	adds	r7, #8
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b082      	sub	sp, #8
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2200      	movs	r2, #0
 8015c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d30a      	bcc.n	8015cd2 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015cc8:	1ad3      	subs	r3, r2, r3
 8015cca:	b2da      	uxtb	r2, r3
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015cde:	1ad3      	subs	r3, r2, r3
 8015ce0:	b2da      	uxtb	r2, r3
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8015ce8:	6878      	ldr	r0, [r7, #4]
 8015cea:	f7ff ff65 	bl	8015bb8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8015cee:	bf00      	nop
 8015cf0:	3708      	adds	r7, #8
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}

08015cf6 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8015cf6:	b580      	push	{r7, lr}
 8015cf8:	b086      	sub	sp, #24
 8015cfa:	af02      	add	r7, sp, #8
 8015cfc:	6078      	str	r0, [r7, #4]
 8015cfe:	4608      	mov	r0, r1
 8015d00:	4611      	mov	r1, r2
 8015d02:	461a      	mov	r2, r3
 8015d04:	4603      	mov	r3, r0
 8015d06:	70fb      	strb	r3, [r7, #3]
 8015d08:	460b      	mov	r3, r1
 8015d0a:	70bb      	strb	r3, [r7, #2]
 8015d0c:	4613      	mov	r3, r2
 8015d0e:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015d16:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8015d18:	7bba      	ldrb	r2, [r7, #14]
 8015d1a:	78bb      	ldrb	r3, [r7, #2]
 8015d1c:	1ad3      	subs	r3, r2, r3
 8015d1e:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015d26:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8015d28:	7bfa      	ldrb	r2, [r7, #15]
 8015d2a:	78fb      	ldrb	r3, [r7, #3]
 8015d2c:	1ad3      	subs	r3, r2, r3
 8015d2e:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8015d30:	7e3b      	ldrb	r3, [r7, #24]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d107      	bne.n	8015d46 <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8015d36:	7bbb      	ldrb	r3, [r7, #14]
 8015d38:	3b01      	subs	r3, #1
 8015d3a:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8015d3c:	7bfa      	ldrb	r2, [r7, #15]
 8015d3e:	787b      	ldrb	r3, [r7, #1]
 8015d40:	1ad3      	subs	r3, r2, r3
 8015d42:	73fb      	strb	r3, [r7, #15]
 8015d44:	e009      	b.n	8015d5a <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8015d46:	7e3b      	ldrb	r3, [r7, #24]
 8015d48:	2b01      	cmp	r3, #1
 8015d4a:	d106      	bne.n	8015d5a <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8015d4c:	7bfb      	ldrb	r3, [r7, #15]
 8015d4e:	3b01      	subs	r3, #1
 8015d50:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8015d52:	7bba      	ldrb	r2, [r7, #14]
 8015d54:	787b      	ldrb	r3, [r7, #1]
 8015d56:	1ad3      	subs	r3, r2, r3
 8015d58:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8015d5a:	7878      	ldrb	r0, [r7, #1]
 8015d5c:	7bba      	ldrb	r2, [r7, #14]
 8015d5e:	7bf9      	ldrb	r1, [r7, #15]
 8015d60:	7e3b      	ldrb	r3, [r7, #24]
 8015d62:	9300      	str	r3, [sp, #0]
 8015d64:	4603      	mov	r3, r0
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f7fe feaa 	bl	8014ac0 <u8g2_draw_hv_line_2dir>
}
 8015d6c:	bf00      	nop
 8015d6e:	3710      	adds	r7, #16
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}

08015d74 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8015d74:	b480      	push	{r7}
 8015d76:	b083      	sub	sp, #12
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8015d84:	bf00      	nop
 8015d86:	370c      	adds	r7, #12
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8e:	4770      	bx	lr

08015d90 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8015d90:	b480      	push	{r7}
 8015d92:	b083      	sub	sp, #12
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	460b      	mov	r3, r1
 8015d9a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8015d9c:	78fb      	ldrb	r3, [r7, #3]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d002      	beq.n	8015da8 <u8x8_ascii_next+0x18>
 8015da2:	78fb      	ldrb	r3, [r7, #3]
 8015da4:	2b0a      	cmp	r3, #10
 8015da6:	d102      	bne.n	8015dae <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8015da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015dac:	e001      	b.n	8015db2 <u8x8_ascii_next+0x22>
  return b;
 8015dae:	78fb      	ldrb	r3, [r7, #3]
 8015db0:	b29b      	uxth	r3, r3
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	370c      	adds	r7, #12
 8015db6:	46bd      	mov	sp, r7
 8015db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dbc:	4770      	bx	lr

08015dbe <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8015dbe:	b480      	push	{r7}
 8015dc0:	b083      	sub	sp, #12
 8015dc2:	af00      	add	r7, sp, #0
 8015dc4:	6078      	str	r0, [r7, #4]
 8015dc6:	460b      	mov	r3, r1
 8015dc8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8015dca:	78fb      	ldrb	r3, [r7, #3]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d002      	beq.n	8015dd6 <u8x8_utf8_next+0x18>
 8015dd0:	78fb      	ldrb	r3, [r7, #3]
 8015dd2:	2b0a      	cmp	r3, #10
 8015dd4:	d102      	bne.n	8015ddc <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8015dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015dda:	e06e      	b.n	8015eba <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d145      	bne.n	8015e72 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8015de6:	78fb      	ldrb	r3, [r7, #3]
 8015de8:	2bfb      	cmp	r3, #251	; 0xfb
 8015dea:	d908      	bls.n	8015dfe <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2205      	movs	r2, #5
 8015df0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8015df4:	78fb      	ldrb	r3, [r7, #3]
 8015df6:	f003 0301 	and.w	r3, r3, #1
 8015dfa:	70fb      	strb	r3, [r7, #3]
 8015dfc:	e032      	b.n	8015e64 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8015dfe:	78fb      	ldrb	r3, [r7, #3]
 8015e00:	2bf7      	cmp	r3, #247	; 0xf7
 8015e02:	d908      	bls.n	8015e16 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2204      	movs	r2, #4
 8015e08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8015e0c:	78fb      	ldrb	r3, [r7, #3]
 8015e0e:	f003 0303 	and.w	r3, r3, #3
 8015e12:	70fb      	strb	r3, [r7, #3]
 8015e14:	e026      	b.n	8015e64 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8015e16:	78fb      	ldrb	r3, [r7, #3]
 8015e18:	2bef      	cmp	r3, #239	; 0xef
 8015e1a:	d908      	bls.n	8015e2e <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2203      	movs	r2, #3
 8015e20:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8015e24:	78fb      	ldrb	r3, [r7, #3]
 8015e26:	f003 0307 	and.w	r3, r3, #7
 8015e2a:	70fb      	strb	r3, [r7, #3]
 8015e2c:	e01a      	b.n	8015e64 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8015e2e:	78fb      	ldrb	r3, [r7, #3]
 8015e30:	2bdf      	cmp	r3, #223	; 0xdf
 8015e32:	d908      	bls.n	8015e46 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	2202      	movs	r2, #2
 8015e38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8015e3c:	78fb      	ldrb	r3, [r7, #3]
 8015e3e:	f003 030f 	and.w	r3, r3, #15
 8015e42:	70fb      	strb	r3, [r7, #3]
 8015e44:	e00e      	b.n	8015e64 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8015e46:	78fb      	ldrb	r3, [r7, #3]
 8015e48:	2bbf      	cmp	r3, #191	; 0xbf
 8015e4a:	d908      	bls.n	8015e5e <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	2201      	movs	r2, #1
 8015e50:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8015e54:	78fb      	ldrb	r3, [r7, #3]
 8015e56:	f003 031f 	and.w	r3, r3, #31
 8015e5a:	70fb      	strb	r3, [r7, #3]
 8015e5c:	e002      	b.n	8015e64 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8015e5e:	78fb      	ldrb	r3, [r7, #3]
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	e02a      	b.n	8015eba <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8015e64:	78fb      	ldrb	r3, [r7, #3]
 8015e66:	b29a      	uxth	r2, r3
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8015e6c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8015e70:	e023      	b.n	8015eba <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015e78:	3b01      	subs	r3, #1
 8015e7a:	b2da      	uxtb	r2, r3
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	8c1b      	ldrh	r3, [r3, #32]
 8015e86:	019b      	lsls	r3, r3, #6
 8015e88:	b29a      	uxth	r2, r3
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8015e8e:	78fb      	ldrb	r3, [r7, #3]
 8015e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e94:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	8c1a      	ldrh	r2, [r3, #32]
 8015e9a:	78fb      	ldrb	r3, [r7, #3]
 8015e9c:	b29b      	uxth	r3, r3
 8015e9e:	4313      	orrs	r3, r2
 8015ea0:	b29a      	uxth	r2, r3
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d002      	beq.n	8015eb6 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8015eb0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8015eb4:	e001      	b.n	8015eba <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	8c1b      	ldrh	r3, [r3, #32]
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	370c      	adds	r7, #12
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec4:	4770      	bx	lr

08015ec6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8015ec6:	b590      	push	{r4, r7, lr}
 8015ec8:	b085      	sub	sp, #20
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	60f8      	str	r0, [r7, #12]
 8015ece:	460b      	mov	r3, r1
 8015ed0:	607a      	str	r2, [r7, #4]
 8015ed2:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	691c      	ldr	r4, [r3, #16]
 8015ed8:	7afa      	ldrb	r2, [r7, #11]
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2117      	movs	r1, #23
 8015ede:	68f8      	ldr	r0, [r7, #12]
 8015ee0:	47a0      	blx	r4
 8015ee2:	4603      	mov	r3, r0
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	3714      	adds	r7, #20
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd90      	pop	{r4, r7, pc}

08015eec <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8015ef8:	1cfb      	adds	r3, r7, #3
 8015efa:	461a      	mov	r2, r3
 8015efc:	2101      	movs	r1, #1
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f7ff ffe1 	bl	8015ec6 <u8x8_byte_SendBytes>
 8015f04:	4603      	mov	r3, r0
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	3708      	adds	r7, #8
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}

08015f0e <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8015f0e:	b590      	push	{r4, r7, lr}
 8015f10:	b083      	sub	sp, #12
 8015f12:	af00      	add	r7, sp, #0
 8015f14:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	691c      	ldr	r4, [r3, #16]
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	2118      	movs	r1, #24
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	47a0      	blx	r4
 8015f24:	4603      	mov	r3, r0
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	370c      	adds	r7, #12
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd90      	pop	{r4, r7, pc}

08015f2e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8015f2e:	b590      	push	{r4, r7, lr}
 8015f30:	b083      	sub	sp, #12
 8015f32:	af00      	add	r7, sp, #0
 8015f34:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	691c      	ldr	r4, [r3, #16]
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	2119      	movs	r1, #25
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	47a0      	blx	r4
 8015f44:	4603      	mov	r3, r0
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	370c      	adds	r7, #12
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd90      	pop	{r4, r7, pc}

08015f4e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8015f4e:	b590      	push	{r4, r7, lr}
 8015f50:	b083      	sub	sp, #12
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	6078      	str	r0, [r7, #4]
 8015f56:	460b      	mov	r3, r1
 8015f58:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	68dc      	ldr	r4, [r3, #12]
 8015f5e:	78fa      	ldrb	r2, [r7, #3]
 8015f60:	2300      	movs	r3, #0
 8015f62:	2115      	movs	r1, #21
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	47a0      	blx	r4
 8015f68:	4603      	mov	r3, r0
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	370c      	adds	r7, #12
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd90      	pop	{r4, r7, pc}

08015f72 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8015f72:	b590      	push	{r4, r7, lr}
 8015f74:	b083      	sub	sp, #12
 8015f76:	af00      	add	r7, sp, #0
 8015f78:	6078      	str	r0, [r7, #4]
 8015f7a:	460b      	mov	r3, r1
 8015f7c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	68dc      	ldr	r4, [r3, #12]
 8015f82:	78fa      	ldrb	r2, [r7, #3]
 8015f84:	2300      	movs	r3, #0
 8015f86:	2116      	movs	r1, #22
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	47a0      	blx	r4
 8015f8c:	4603      	mov	r3, r0
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	370c      	adds	r7, #12
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd90      	pop	{r4, r7, pc}

08015f96 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8015f96:	b590      	push	{r4, r7, lr}
 8015f98:	b085      	sub	sp, #20
 8015f9a:	af00      	add	r7, sp, #0
 8015f9c:	60f8      	str	r0, [r7, #12]
 8015f9e:	460b      	mov	r3, r1
 8015fa0:	607a      	str	r2, [r7, #4]
 8015fa2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	68dc      	ldr	r4, [r3, #12]
 8015fa8:	7afa      	ldrb	r2, [r7, #11]
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	2117      	movs	r1, #23
 8015fae:	68f8      	ldr	r0, [r7, #12]
 8015fb0:	47a0      	blx	r4
 8015fb2:	4603      	mov	r3, r0
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3714      	adds	r7, #20
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd90      	pop	{r4, r7, pc}

08015fbc <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8015fbc:	b590      	push	{r4, r7, lr}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	68dc      	ldr	r4, [r3, #12]
 8015fc8:	2300      	movs	r3, #0
 8015fca:	2200      	movs	r2, #0
 8015fcc:	2118      	movs	r1, #24
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	47a0      	blx	r4
 8015fd2:	4603      	mov	r3, r0
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	370c      	adds	r7, #12
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd90      	pop	{r4, r7, pc}

08015fdc <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8015fdc:	b590      	push	{r4, r7, lr}
 8015fde:	b083      	sub	sp, #12
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	68dc      	ldr	r4, [r3, #12]
 8015fe8:	2300      	movs	r3, #0
 8015fea:	2200      	movs	r2, #0
 8015fec:	2119      	movs	r1, #25
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	47a0      	blx	r4
 8015ff2:	4603      	mov	r3, r0
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	370c      	adds	r7, #12
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd90      	pop	{r4, r7, pc}

08015ffc <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8015ffc:	b590      	push	{r4, r7, lr}
 8015ffe:	b085      	sub	sp, #20
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
 8016004:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	781b      	ldrb	r3, [r3, #0]
 801600a:	73fb      	strb	r3, [r7, #15]
    data++;
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	3301      	adds	r3, #1
 8016010:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8016012:	7bfb      	ldrb	r3, [r7, #15]
 8016014:	2b17      	cmp	r3, #23
 8016016:	d017      	beq.n	8016048 <u8x8_cad_SendSequence+0x4c>
 8016018:	2b17      	cmp	r3, #23
 801601a:	dc02      	bgt.n	8016022 <u8x8_cad_SendSequence+0x26>
 801601c:	2b15      	cmp	r3, #21
 801601e:	db37      	blt.n	8016090 <u8x8_cad_SendSequence+0x94>
 8016020:	e004      	b.n	801602c <u8x8_cad_SendSequence+0x30>
 8016022:	2b19      	cmp	r3, #25
 8016024:	dd1e      	ble.n	8016064 <u8x8_cad_SendSequence+0x68>
 8016026:	2bfe      	cmp	r3, #254	; 0xfe
 8016028:	d024      	beq.n	8016074 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 801602a:	e031      	b.n	8016090 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	68dc      	ldr	r4, [r3, #12]
 8016036:	7bba      	ldrb	r2, [r7, #14]
 8016038:	7bf9      	ldrb	r1, [r7, #15]
 801603a:	2300      	movs	r3, #0
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	47a0      	blx	r4
	  data++;
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	3301      	adds	r3, #1
 8016044:	603b      	str	r3, [r7, #0]
	  break;
 8016046:	e022      	b.n	801608e <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	781b      	ldrb	r3, [r3, #0]
 801604c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 801604e:	f107 030e 	add.w	r3, r7, #14
 8016052:	461a      	mov	r2, r3
 8016054:	2101      	movs	r1, #1
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f7ff ff9d 	bl	8015f96 <u8x8_cad_SendData>
	  data++;
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	3301      	adds	r3, #1
 8016060:	603b      	str	r3, [r7, #0]
	  break;
 8016062:	e014      	b.n	801608e <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	68dc      	ldr	r4, [r3, #12]
 8016068:	7bf9      	ldrb	r1, [r7, #15]
 801606a:	2300      	movs	r3, #0
 801606c:	2200      	movs	r2, #0
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	47a0      	blx	r4
	  break;
 8016072:	e00c      	b.n	801608e <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 801607a:	7bbb      	ldrb	r3, [r7, #14]
 801607c:	461a      	mov	r2, r3
 801607e:	2129      	movs	r1, #41	; 0x29
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f000 faa6 	bl	80165d2 <u8x8_gpio_call>
	  data++;
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	3301      	adds	r3, #1
 801608a:	603b      	str	r3, [r7, #0]
	  break;
 801608c:	bf00      	nop
    cmd = *data;
 801608e:	e7ba      	b.n	8016006 <u8x8_cad_SendSequence+0xa>
	return;
 8016090:	bf00      	nop
    }
  }
}
 8016092:	3714      	adds	r7, #20
 8016094:	46bd      	mov	sp, r7
 8016096:	bd90      	pop	{r4, r7, pc}

08016098 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8016098:	b590      	push	{r4, r7, lr}
 801609a:	b085      	sub	sp, #20
 801609c:	af00      	add	r7, sp, #0
 801609e:	60f8      	str	r0, [r7, #12]
 80160a0:	460b      	mov	r3, r1
 80160a2:	607a      	str	r2, [r7, #4]
 80160a4:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80160a6:	68f8      	ldr	r0, [r7, #12]
 80160a8:	f7ff ff31 	bl	8015f0e <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80160ac:	2140      	movs	r1, #64	; 0x40
 80160ae:	68f8      	ldr	r0, [r7, #12]
 80160b0:	f7ff ff1c 	bl	8015eec <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	691c      	ldr	r4, [r3, #16]
 80160b8:	7afa      	ldrb	r2, [r7, #11]
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	2117      	movs	r1, #23
 80160be:	68f8      	ldr	r0, [r7, #12]
 80160c0:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80160c2:	68f8      	ldr	r0, [r7, #12]
 80160c4:	f7ff ff33 	bl	8015f2e <u8x8_byte_EndTransfer>
}
 80160c8:	bf00      	nop
 80160ca:	3714      	adds	r7, #20
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd90      	pop	{r4, r7, pc}

080160d0 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80160d0:	b590      	push	{r4, r7, lr}
 80160d2:	b087      	sub	sp, #28
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	60f8      	str	r0, [r7, #12]
 80160d8:	607b      	str	r3, [r7, #4]
 80160da:	460b      	mov	r3, r1
 80160dc:	72fb      	strb	r3, [r7, #11]
 80160de:	4613      	mov	r3, r2
 80160e0:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 80160e2:	7afb      	ldrb	r3, [r7, #11]
 80160e4:	3b14      	subs	r3, #20
 80160e6:	2b05      	cmp	r3, #5
 80160e8:	d848      	bhi.n	801617c <u8x8_cad_ssd13xx_i2c+0xac>
 80160ea:	a201      	add	r2, pc, #4	; (adr r2, 80160f0 <u8x8_cad_ssd13xx_i2c+0x20>)
 80160ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160f0:	08016159 	.word	0x08016159
 80160f4:	08016109 	.word	0x08016109
 80160f8:	08016109 	.word	0x08016109
 80160fc:	08016129 	.word	0x08016129
 8016100:	08016181 	.word	0x08016181
 8016104:	08016181 	.word	0x08016181
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8016108:	68f8      	ldr	r0, [r7, #12]
 801610a:	f7ff ff00 	bl	8015f0e <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 801610e:	2100      	movs	r1, #0
 8016110:	68f8      	ldr	r0, [r7, #12]
 8016112:	f7ff feeb 	bl	8015eec <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8016116:	7abb      	ldrb	r3, [r7, #10]
 8016118:	4619      	mov	r1, r3
 801611a:	68f8      	ldr	r0, [r7, #12]
 801611c:	f7ff fee6 	bl	8015eec <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8016120:	68f8      	ldr	r0, [r7, #12]
 8016122:	f7ff ff04 	bl	8015f2e <u8x8_byte_EndTransfer>
      break;
 8016126:	e02c      	b.n	8016182 <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 801612c:	e00a      	b.n	8016144 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 801612e:	697a      	ldr	r2, [r7, #20]
 8016130:	2118      	movs	r1, #24
 8016132:	68f8      	ldr	r0, [r7, #12]
 8016134:	f7ff ffb0 	bl	8016098 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8016138:	7abb      	ldrb	r3, [r7, #10]
 801613a:	3b18      	subs	r3, #24
 801613c:	72bb      	strb	r3, [r7, #10]
	p+=24;
 801613e:	697b      	ldr	r3, [r7, #20]
 8016140:	3318      	adds	r3, #24
 8016142:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8016144:	7abb      	ldrb	r3, [r7, #10]
 8016146:	2b18      	cmp	r3, #24
 8016148:	d8f1      	bhi.n	801612e <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 801614a:	7abb      	ldrb	r3, [r7, #10]
 801614c:	697a      	ldr	r2, [r7, #20]
 801614e:	4619      	mov	r1, r3
 8016150:	68f8      	ldr	r0, [r7, #12]
 8016152:	f7ff ffa1 	bl	8016098 <u8x8_i2c_data_transfer>
      break;
 8016156:	e014      	b.n	8016182 <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801615e:	2bff      	cmp	r3, #255	; 0xff
 8016160:	d103      	bne.n	801616a <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	2278      	movs	r2, #120	; 0x78
 8016166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	691c      	ldr	r4, [r3, #16]
 801616e:	7aba      	ldrb	r2, [r7, #10]
 8016170:	7af9      	ldrb	r1, [r7, #11]
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	47a0      	blx	r4
 8016178:	4603      	mov	r3, r0
 801617a:	e003      	b.n	8016184 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 801617c:	2300      	movs	r3, #0
 801617e:	e001      	b.n	8016184 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8016180:	bf00      	nop
  }
  return 1;
 8016182:	2301      	movs	r3, #1
}
 8016184:	4618      	mov	r0, r3
 8016186:	371c      	adds	r7, #28
 8016188:	46bd      	mov	sp, r7
 801618a:	bd90      	pop	{r4, r7, pc}

0801618c <u8x8_st7528_8to32>:
*/

static uint8_t u8x8_st7528_8to32_dest_buf[32];

static uint8_t *u8x8_st7528_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 801618c:	b480      	push	{r7}
 801618e:	b085      	sub	sp, #20
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	6039      	str	r1, [r7, #0]
  uint8_t j;
  uint8_t *dest;
  
  dest = u8x8_st7528_8to32_dest_buf;
 8016196:	4b16      	ldr	r3, [pc, #88]	; (80161f0 <u8x8_st7528_8to32+0x64>)
 8016198:	60bb      	str	r3, [r7, #8]
  for( j = 0; j < 8; j++ )
 801619a:	2300      	movs	r3, #0
 801619c:	73fb      	strb	r3, [r7, #15]
 801619e:	e01d      	b.n	80161dc <u8x8_st7528_8to32+0x50>
  {
    *dest++ =*ptr;
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	1c5a      	adds	r2, r3, #1
 80161a4:	60ba      	str	r2, [r7, #8]
 80161a6:	683a      	ldr	r2, [r7, #0]
 80161a8:	7812      	ldrb	r2, [r2, #0]
 80161aa:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	1c5a      	adds	r2, r3, #1
 80161b0:	60ba      	str	r2, [r7, #8]
 80161b2:	683a      	ldr	r2, [r7, #0]
 80161b4:	7812      	ldrb	r2, [r2, #0]
 80161b6:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 80161b8:	68bb      	ldr	r3, [r7, #8]
 80161ba:	1c5a      	adds	r2, r3, #1
 80161bc:	60ba      	str	r2, [r7, #8]
 80161be:	683a      	ldr	r2, [r7, #0]
 80161c0:	7812      	ldrb	r2, [r2, #0]
 80161c2:	701a      	strb	r2, [r3, #0]
    *dest++ =*ptr;
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	1c5a      	adds	r2, r3, #1
 80161c8:	60ba      	str	r2, [r7, #8]
 80161ca:	683a      	ldr	r2, [r7, #0]
 80161cc:	7812      	ldrb	r2, [r2, #0]
 80161ce:	701a      	strb	r2, [r3, #0]
    ptr++;
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	3301      	adds	r3, #1
 80161d4:	603b      	str	r3, [r7, #0]
  for( j = 0; j < 8; j++ )
 80161d6:	7bfb      	ldrb	r3, [r7, #15]
 80161d8:	3301      	adds	r3, #1
 80161da:	73fb      	strb	r3, [r7, #15]
 80161dc:	7bfb      	ldrb	r3, [r7, #15]
 80161de:	2b07      	cmp	r3, #7
 80161e0:	d9de      	bls.n	80161a0 <u8x8_st7528_8to32+0x14>
  }
  return u8x8_st7528_8to32_dest_buf;
 80161e2:	4b03      	ldr	r3, [pc, #12]	; (80161f0 <u8x8_st7528_8to32+0x64>)
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	3714      	adds	r7, #20
 80161e8:	46bd      	mov	sp, r7
 80161ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ee:	4770      	bx	lr
 80161f0:	20000ba0 	.word	0x20000ba0

080161f4 <u8x8_d_st7528_generic>:



static uint8_t u8x8_d_st7528_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b088      	sub	sp, #32
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	607b      	str	r3, [r7, #4]
 80161fe:	460b      	mov	r3, r1
 8016200:	72fb      	strb	r3, [r7, #11]
 8016202:	4613      	mov	r3, r2
 8016204:	72bb      	strb	r3, [r7, #10]
  uint8_t x;
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 8016206:	7afb      	ldrb	r3, [r7, #11]
 8016208:	3b0b      	subs	r3, #11
 801620a:	2b04      	cmp	r3, #4
 801620c:	f200 8090 	bhi.w	8016330 <u8x8_d_st7528_generic+0x13c>
 8016210:	a201      	add	r2, pc, #4	; (adr r2, 8016218 <u8x8_d_st7528_generic+0x24>)
 8016212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016216:	bf00      	nop
 8016218:	0801622d 	.word	0x0801622d
 801621c:	08016331 	.word	0x08016331
 8016220:	08016247 	.word	0x08016247
 8016224:	08016279 	.word	0x08016279
 8016228:	08016299 	.word	0x08016299
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
    */
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 801622c:	7abb      	ldrb	r3, [r7, #10]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d104      	bne.n	801623c <u8x8_d_st7528_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave0_seq);
 8016232:	4943      	ldr	r1, [pc, #268]	; (8016340 <u8x8_d_st7528_generic+0x14c>)
 8016234:	68f8      	ldr	r0, [r7, #12]
 8016236:	f7ff fee1 	bl	8015ffc <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave1_seq);
      break;
 801623a:	e07b      	b.n	8016334 <u8x8_d_st7528_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_powersave1_seq);
 801623c:	4941      	ldr	r1, [pc, #260]	; (8016344 <u8x8_d_st7528_generic+0x150>)
 801623e:	68f8      	ldr	r0, [r7, #12]
 8016240:	f7ff fedc 	bl	8015ffc <u8x8_cad_SendSequence>
      break;
 8016244:	e076      	b.n	8016334 <u8x8_d_st7528_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8016246:	7abb      	ldrb	r3, [r7, #10]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d10a      	bne.n	8016262 <u8x8_d_st7528_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip0_seq);
 801624c:	493e      	ldr	r1, [pc, #248]	; (8016348 <u8x8_d_st7528_generic+0x154>)
 801624e:	68f8      	ldr	r0, [r7, #12]
 8016250:	f7ff fed4 	bl	8015ffc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	7c9a      	ldrb	r2, [r3, #18]
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8016260:	e068      	b.n	8016334 <u8x8_d_st7528_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_flip1_seq);
 8016262:	493a      	ldr	r1, [pc, #232]	; (801634c <u8x8_d_st7528_generic+0x158>)
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f7ff fec9 	bl	8015ffc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	7cda      	ldrb	r2, [r3, #19]
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8016276:	e05d      	b.n	8016334 <u8x8_d_st7528_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8016278:	68f8      	ldr	r0, [r7, #12]
 801627a:	f7ff fe9f 	bl	8015fbc <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 801627e:	2181      	movs	r1, #129	; 0x81
 8016280:	68f8      	ldr	r0, [r7, #12]
 8016282:	f7ff fe64 	bl	8015f4e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1326 has range from 0 to 255 */
 8016286:	7abb      	ldrb	r3, [r7, #10]
 8016288:	4619      	mov	r1, r3
 801628a:	68f8      	ldr	r0, [r7, #12]
 801628c:	f7ff fe71 	bl	8015f72 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8016290:	68f8      	ldr	r0, [r7, #12]
 8016292:	f7ff fea3 	bl	8015fdc <u8x8_cad_EndTransfer>
      break;
 8016296:	e04d      	b.n	8016334 <u8x8_d_st7528_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8016298:	68f8      	ldr	r0, [r7, #12]
 801629a:	f7ff fe8f 	bl	8015fbc <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	795b      	ldrb	r3, [r3, #5]
 80162a2:	77fb      	strb	r3, [r7, #31]
      x *= 8;  // not clear
 80162a4:	7ffb      	ldrb	r3, [r7, #31]
 80162a6:	00db      	lsls	r3, r3, #3
 80162a8:	77fb      	strb	r3, [r7, #31]
      
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	799b      	ldrb	r3, [r3, #6]
 80162ae:	75fb      	strb	r3, [r7, #23]
      
    
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	791b      	ldrb	r3, [r3, #4]
 80162b4:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	61bb      	str	r3, [r7, #24]

	do
	{
          u8x8_cad_SendCmd(u8x8, 0xb0 | y );	/* set page address */
 80162bc:	7dfb      	ldrb	r3, [r7, #23]
 80162be:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80162c2:	b2db      	uxtb	r3, r3
 80162c4:	4619      	mov	r1, r3
 80162c6:	68f8      	ldr	r0, [r7, #12]
 80162c8:	f7ff fe41 	bl	8015f4e <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x10| (x>>4) );	/* set col msb*/
 80162cc:	7ffb      	ldrb	r3, [r7, #31]
 80162ce:	091b      	lsrs	r3, r3, #4
 80162d0:	b2db      	uxtb	r3, r3
 80162d2:	f043 0310 	orr.w	r3, r3, #16
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	4619      	mov	r1, r3
 80162da:	68f8      	ldr	r0, [r7, #12]
 80162dc:	f7ff fe37 	bl	8015f4e <u8x8_cad_SendCmd>
          u8x8_cad_SendCmd(u8x8, 0x00| (x&15) );	/* set col lsb*/
 80162e0:	7ffb      	ldrb	r3, [r7, #31]
 80162e2:	f003 030f 	and.w	r3, r3, #15
 80162e6:	b2db      	uxtb	r3, r3
 80162e8:	4619      	mov	r1, r3
 80162ea:	68f8      	ldr	r0, [r7, #12]
 80162ec:	f7ff fe2f 	bl	8015f4e <u8x8_cad_SendCmd>
          
          u8x8_cad_SendData(u8x8, 32, u8x8_st7528_8to32(u8x8, ptr));
 80162f0:	69b9      	ldr	r1, [r7, #24]
 80162f2:	68f8      	ldr	r0, [r7, #12]
 80162f4:	f7ff ff4a 	bl	801618c <u8x8_st7528_8to32>
 80162f8:	4603      	mov	r3, r0
 80162fa:	461a      	mov	r2, r3
 80162fc:	2120      	movs	r1, #32
 80162fe:	68f8      	ldr	r0, [r7, #12]
 8016300:	f7ff fe49 	bl	8015f96 <u8x8_cad_SendData>
          
	  ptr += 8;
 8016304:	69bb      	ldr	r3, [r7, #24]
 8016306:	3308      	adds	r3, #8
 8016308:	61bb      	str	r3, [r7, #24]
	  x += 8;
 801630a:	7ffb      	ldrb	r3, [r7, #31]
 801630c:	3308      	adds	r3, #8
 801630e:	77fb      	strb	r3, [r7, #31]
	  c--;
 8016310:	7fbb      	ldrb	r3, [r7, #30]
 8016312:	3b01      	subs	r3, #1
 8016314:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );	
 8016316:	7fbb      	ldrb	r3, [r7, #30]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d1cf      	bne.n	80162bc <u8x8_d_st7528_generic+0xc8>
	arg_int--;
 801631c:	7abb      	ldrb	r3, [r7, #10]
 801631e:	3b01      	subs	r3, #1
 8016320:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8016322:	7abb      	ldrb	r3, [r7, #10]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d1c3      	bne.n	80162b0 <u8x8_d_st7528_generic+0xbc>
      
      u8x8_cad_EndTransfer(u8x8);
 8016328:	68f8      	ldr	r0, [r7, #12]
 801632a:	f7ff fe57 	bl	8015fdc <u8x8_cad_EndTransfer>
      break;
 801632e:	e001      	b.n	8016334 <u8x8_d_st7528_generic+0x140>
    default:
      return 0;
 8016330:	2300      	movs	r3, #0
 8016332:	e000      	b.n	8016336 <u8x8_d_st7528_generic+0x142>
  }
  return 1;
 8016334:	2301      	movs	r3, #1
}
 8016336:	4618      	mov	r0, r3
 8016338:	3720      	adds	r7, #32
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}
 801633e:	bf00      	nop
 8016340:	08022f74 	.word	0x08022f74
 8016344:	08022f80 	.word	0x08022f80
 8016348:	08022f8c 	.word	0x08022f8c
 801634c:	08022f94 	.word	0x08022f94

08016350 <u8x8_d_st7528_graylevel_init>:


static void u8x8_d_st7528_graylevel_init(u8x8_t *u8x8, uint8_t mode0)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b084      	sub	sp, #16
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	460b      	mov	r3, r1
 801635a:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  
  u8x8_cad_StartTransfer(u8x8);
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	f7ff fe2d 	bl	8015fbc <u8x8_cad_StartTransfer>
  u8x8_cad_SendCmd(u8x8, 0x38 );
 8016362:	2138      	movs	r1, #56	; 0x38
 8016364:	6878      	ldr	r0, [r7, #4]
 8016366:	f7ff fdf2 	bl	8015f4e <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0+1 );
 801636a:	78fb      	ldrb	r3, [r7, #3]
 801636c:	3301      	adds	r3, #1
 801636e:	b2db      	uxtb	r3, r3
 8016370:	4619      	mov	r1, r3
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f7ff fdfd 	bl	8015f72 <u8x8_cad_SendArg>
  for( i = 0; i < 64; i++ )
 8016378:	2300      	movs	r3, #0
 801637a:	73fb      	strb	r3, [r7, #15]
 801637c:	e011      	b.n	80163a2 <u8x8_d_st7528_graylevel_init+0x52>
  {
          u8x8_cad_SendCmd(u8x8, i+0x080 );
 801637e:	7bfb      	ldrb	r3, [r7, #15]
 8016380:	3b80      	subs	r3, #128	; 0x80
 8016382:	b2db      	uxtb	r3, r3
 8016384:	4619      	mov	r1, r3
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f7ff fde1 	bl	8015f4e <u8x8_cad_SendCmd>
          u8x8_cad_SendArg(u8x8, i & 0xfc);
 801638c:	7bfb      	ldrb	r3, [r7, #15]
 801638e:	f023 0303 	bic.w	r3, r3, #3
 8016392:	b2db      	uxtb	r3, r3
 8016394:	4619      	mov	r1, r3
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f7ff fdeb 	bl	8015f72 <u8x8_cad_SendArg>
  for( i = 0; i < 64; i++ )
 801639c:	7bfb      	ldrb	r3, [r7, #15]
 801639e:	3301      	adds	r3, #1
 80163a0:	73fb      	strb	r3, [r7, #15]
 80163a2:	7bfb      	ldrb	r3, [r7, #15]
 80163a4:	2b3f      	cmp	r3, #63	; 0x3f
 80163a6:	d9ea      	bls.n	801637e <u8x8_d_st7528_graylevel_init+0x2e>
  }
  u8x8_cad_SendCmd(u8x8, 0x38 );
 80163a8:	2138      	movs	r1, #56	; 0x38
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f7ff fdcf 	bl	8015f4e <u8x8_cad_SendCmd>
  u8x8_cad_SendArg(u8x8, mode0 );
 80163b0:	78fb      	ldrb	r3, [r7, #3]
 80163b2:	4619      	mov	r1, r3
 80163b4:	6878      	ldr	r0, [r7, #4]
 80163b6:	f7ff fddc 	bl	8015f72 <u8x8_cad_SendArg>
  u8x8_cad_EndTransfer(u8x8);
 80163ba:	6878      	ldr	r0, [r7, #4]
 80163bc:	f7ff fe0e 	bl	8015fdc <u8x8_cad_EndTransfer>
}
 80163c0:	bf00      	nop
 80163c2:	3710      	adds	r7, #16
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}

080163c8 <u8x8_d_st7528_nhd_c160100>:
  /* pixel_width = */ 160,
  /* pixel_height = */ 100
};

uint8_t u8x8_d_st7528_nhd_c160100(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b084      	sub	sp, #16
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	60f8      	str	r0, [r7, #12]
 80163d0:	607b      	str	r3, [r7, #4]
 80163d2:	460b      	mov	r3, r1
 80163d4:	72fb      	strb	r3, [r7, #11]
 80163d6:	4613      	mov	r3, r2
 80163d8:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 80163da:	7afb      	ldrb	r3, [r7, #11]
 80163dc:	2b09      	cmp	r3, #9
 80163de:	d105      	bne.n	80163ec <u8x8_d_st7528_nhd_c160100+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7528_160x100_display_info);
 80163e0:	4910      	ldr	r1, [pc, #64]	; (8016424 <u8x8_d_st7528_nhd_c160100+0x5c>)
 80163e2:	68f8      	ldr	r0, [r7, #12]
 80163e4:	f000 f822 	bl	801642c <u8x8_d_helper_display_setup_memory>
      return 1;
 80163e8:	2301      	movs	r3, #1
 80163ea:	e016      	b.n	801641a <u8x8_d_st7528_nhd_c160100+0x52>
    }
    if ( msg == U8X8_MSG_DISPLAY_INIT )
 80163ec:	7afb      	ldrb	r3, [r7, #11]
 80163ee:	2b0a      	cmp	r3, #10
 80163f0:	d10c      	bne.n	801640c <u8x8_d_st7528_nhd_c160100+0x44>
    {
      u8x8_d_helper_display_init(u8x8);
 80163f2:	68f8      	ldr	r0, [r7, #12]
 80163f4:	f000 f82e 	bl	8016454 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7528_nhd_c160100_init_seq);    
 80163f8:	490b      	ldr	r1, [pc, #44]	; (8016428 <u8x8_d_st7528_nhd_c160100+0x60>)
 80163fa:	68f8      	ldr	r0, [r7, #12]
 80163fc:	f7ff fdfe 	bl	8015ffc <u8x8_cad_SendSequence>
      u8x8_d_st7528_graylevel_init(u8x8, 0x074);
 8016400:	2174      	movs	r1, #116	; 0x74
 8016402:	68f8      	ldr	r0, [r7, #12]
 8016404:	f7ff ffa4 	bl	8016350 <u8x8_d_st7528_graylevel_init>
      return 1;
 8016408:	2301      	movs	r3, #1
 801640a:	e006      	b.n	801641a <u8x8_d_st7528_nhd_c160100+0x52>
    }    
    return u8x8_d_st7528_generic(u8x8, msg, arg_int, arg_ptr);
 801640c:	7aba      	ldrb	r2, [r7, #10]
 801640e:	7af9      	ldrb	r1, [r7, #11]
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	68f8      	ldr	r0, [r7, #12]
 8016414:	f7ff feee 	bl	80161f4 <u8x8_d_st7528_generic>
 8016418:	4603      	mov	r3, r0
}
 801641a:	4618      	mov	r0, r3
 801641c:	3710      	adds	r7, #16
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	08022fd0 	.word	0x08022fd0
 8016428:	08022f9c 	.word	0x08022f9c

0801642c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 801642c:	b480      	push	{r7}
 801642e:	b083      	sub	sp, #12
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	683a      	ldr	r2, [r7, #0]
 801643a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	7c9a      	ldrb	r2, [r3, #18]
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8016448:	bf00      	nop
 801644a:	370c      	adds	r7, #12
 801644c:	46bd      	mov	sp, r7
 801644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016452:	4770      	bx	lr

08016454 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8016454:	b590      	push	{r4, r7, lr}
 8016456:	b083      	sub	sp, #12
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	695c      	ldr	r4, [r3, #20]
 8016460:	2300      	movs	r3, #0
 8016462:	2200      	movs	r2, #0
 8016464:	2128      	movs	r1, #40	; 0x28
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	68dc      	ldr	r4, [r3, #12]
 801646e:	2300      	movs	r3, #0
 8016470:	2200      	movs	r2, #0
 8016472:	2114      	movs	r1, #20
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8016478:	2201      	movs	r2, #1
 801647a:	214b      	movs	r1, #75	; 0x4b
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	f000 f8a8 	bl	80165d2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	791b      	ldrb	r3, [r3, #4]
 8016488:	461a      	mov	r2, r3
 801648a:	2129      	movs	r1, #41	; 0x29
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f000 f8a0 	bl	80165d2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8016492:	2200      	movs	r2, #0
 8016494:	214b      	movs	r1, #75	; 0x4b
 8016496:	6878      	ldr	r0, [r7, #4]
 8016498:	f000 f89b 	bl	80165d2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	791b      	ldrb	r3, [r3, #4]
 80164a2:	461a      	mov	r2, r3
 80164a4:	2129      	movs	r1, #41	; 0x29
 80164a6:	6878      	ldr	r0, [r7, #4]
 80164a8:	f000 f893 	bl	80165d2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80164ac:	2201      	movs	r2, #1
 80164ae:	214b      	movs	r1, #75	; 0x4b
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f000 f88e 	bl	80165d2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	795b      	ldrb	r3, [r3, #5]
 80164bc:	461a      	mov	r2, r3
 80164be:	2129      	movs	r1, #41	; 0x29
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f000 f886 	bl	80165d2 <u8x8_gpio_call>
}    
 80164c6:	bf00      	nop
 80164c8:	370c      	adds	r7, #12
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd90      	pop	{r4, r7, pc}

080164ce <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80164ce:	b590      	push	{r4, r7, lr}
 80164d0:	b085      	sub	sp, #20
 80164d2:	af00      	add	r7, sp, #0
 80164d4:	6078      	str	r0, [r7, #4]
 80164d6:	4608      	mov	r0, r1
 80164d8:	4611      	mov	r1, r2
 80164da:	461a      	mov	r2, r3
 80164dc:	4603      	mov	r3, r0
 80164de:	70fb      	strb	r3, [r7, #3]
 80164e0:	460b      	mov	r3, r1
 80164e2:	70bb      	strb	r3, [r7, #2]
 80164e4:	4613      	mov	r3, r2
 80164e6:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80164e8:	78fb      	ldrb	r3, [r7, #3]
 80164ea:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80164ec:	78bb      	ldrb	r3, [r7, #2]
 80164ee:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80164f0:	787b      	ldrb	r3, [r7, #1]
 80164f2:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80164f4:	6a3b      	ldr	r3, [r7, #32]
 80164f6:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	689c      	ldr	r4, [r3, #8]
 80164fc:	f107 0308 	add.w	r3, r7, #8
 8016500:	2201      	movs	r2, #1
 8016502:	210f      	movs	r1, #15
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	47a0      	blx	r4
 8016508:	4603      	mov	r3, r0
}
 801650a:	4618      	mov	r0, r3
 801650c:	3714      	adds	r7, #20
 801650e:	46bd      	mov	sp, r7
 8016510:	bd90      	pop	{r4, r7, pc}

08016512 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8016512:	b590      	push	{r4, r7, lr}
 8016514:	b083      	sub	sp, #12
 8016516:	af00      	add	r7, sp, #0
 8016518:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	689c      	ldr	r4, [r3, #8]
 801651e:	2300      	movs	r3, #0
 8016520:	2200      	movs	r2, #0
 8016522:	2109      	movs	r1, #9
 8016524:	6878      	ldr	r0, [r7, #4]
 8016526:	47a0      	blx	r4
}
 8016528:	bf00      	nop
 801652a:	370c      	adds	r7, #12
 801652c:	46bd      	mov	sp, r7
 801652e:	bd90      	pop	{r4, r7, pc}

08016530 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8016530:	b590      	push	{r4, r7, lr}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	689c      	ldr	r4, [r3, #8]
 801653c:	2300      	movs	r3, #0
 801653e:	2200      	movs	r2, #0
 8016540:	210a      	movs	r1, #10
 8016542:	6878      	ldr	r0, [r7, #4]
 8016544:	47a0      	blx	r4
}
 8016546:	bf00      	nop
 8016548:	370c      	adds	r7, #12
 801654a:	46bd      	mov	sp, r7
 801654c:	bd90      	pop	{r4, r7, pc}

0801654e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 801654e:	b590      	push	{r4, r7, lr}
 8016550:	b083      	sub	sp, #12
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
 8016556:	460b      	mov	r3, r1
 8016558:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	689c      	ldr	r4, [r3, #8]
 801655e:	78fa      	ldrb	r2, [r7, #3]
 8016560:	2300      	movs	r3, #0
 8016562:	210b      	movs	r1, #11
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	47a0      	blx	r4
}
 8016568:	bf00      	nop
 801656a:	370c      	adds	r7, #12
 801656c:	46bd      	mov	sp, r7
 801656e:	bd90      	pop	{r4, r7, pc}

08016570 <u8x8_SetFlipMode>:

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
 8016570:	b590      	push	{r4, r7, lr}
 8016572:	b083      	sub	sp, #12
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	460b      	mov	r3, r1
 801657a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	689c      	ldr	r4, [r3, #8]
 8016580:	78fa      	ldrb	r2, [r7, #3]
 8016582:	2300      	movs	r3, #0
 8016584:	210d      	movs	r1, #13
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	47a0      	blx	r4
}
 801658a:	bf00      	nop
 801658c:	370c      	adds	r7, #12
 801658e:	46bd      	mov	sp, r7
 8016590:	bd90      	pop	{r4, r7, pc}

08016592 <u8x8_SetContrast>:

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8016592:	b590      	push	{r4, r7, lr}
 8016594:	b083      	sub	sp, #12
 8016596:	af00      	add	r7, sp, #0
 8016598:	6078      	str	r0, [r7, #4]
 801659a:	460b      	mov	r3, r1
 801659c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	689c      	ldr	r4, [r3, #8]
 80165a2:	78fa      	ldrb	r2, [r7, #3]
 80165a4:	2300      	movs	r3, #0
 80165a6:	210e      	movs	r1, #14
 80165a8:	6878      	ldr	r0, [r7, #4]
 80165aa:	47a0      	blx	r4
}
 80165ac:	bf00      	nop
 80165ae:	370c      	adds	r7, #12
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd90      	pop	{r4, r7, pc}

080165b4 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80165b4:	b590      	push	{r4, r7, lr}
 80165b6:	b083      	sub	sp, #12
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	689c      	ldr	r4, [r3, #8]
 80165c0:	2300      	movs	r3, #0
 80165c2:	2200      	movs	r2, #0
 80165c4:	2110      	movs	r1, #16
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	47a0      	blx	r4
}
 80165ca:	bf00      	nop
 80165cc:	370c      	adds	r7, #12
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd90      	pop	{r4, r7, pc}

080165d2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80165d2:	b590      	push	{r4, r7, lr}
 80165d4:	b083      	sub	sp, #12
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	460b      	mov	r3, r1
 80165dc:	70fb      	strb	r3, [r7, #3]
 80165de:	4613      	mov	r3, r2
 80165e0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	695c      	ldr	r4, [r3, #20]
 80165e6:	78ba      	ldrb	r2, [r7, #2]
 80165e8:	78f9      	ldrb	r1, [r7, #3]
 80165ea:	2300      	movs	r3, #0
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	47a0      	blx	r4
}
 80165f0:	bf00      	nop
 80165f2:	370c      	adds	r7, #12
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd90      	pop	{r4, r7, pc}

080165f8 <u8sl_Next>:

/*
  increase the cursor position
*/
void u8sl_Next(u8sl_t *u8sl)
{
 80165f8:	b480      	push	{r7}
 80165fa:	b083      	sub	sp, #12
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
  u8sl->current_pos++;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	78db      	ldrb	r3, [r3, #3]
 8016604:	3301      	adds	r3, #1
 8016606:	b2da      	uxtb	r2, r3
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	70da      	strb	r2, [r3, #3]
  if ( u8sl->current_pos >= u8sl->total )
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	78da      	ldrb	r2, [r3, #3]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	785b      	ldrb	r3, [r3, #1]
 8016614:	429a      	cmp	r2, r3
 8016616:	d306      	bcc.n	8016626 <u8sl_Next+0x2e>
  {
    u8sl->current_pos = 0;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2200      	movs	r2, #0
 801661c:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2200      	movs	r2, #0
 8016622:	709a      	strb	r2, [r3, #2]
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
    {
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
    }
  }
}
 8016624:	e014      	b.n	8016650 <u8sl_Next+0x58>
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	789b      	ldrb	r3, [r3, #2]
 801662a:	461a      	mov	r2, r3
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	781b      	ldrb	r3, [r3, #0]
 8016630:	441a      	add	r2, r3
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	78db      	ldrb	r3, [r3, #3]
 8016636:	3301      	adds	r3, #1
 8016638:	429a      	cmp	r2, r3
 801663a:	dc09      	bgt.n	8016650 <u8sl_Next+0x58>
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	78da      	ldrb	r2, [r3, #3]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	1ad3      	subs	r3, r2, r3
 8016646:	b2db      	uxtb	r3, r3
 8016648:	3301      	adds	r3, #1
 801664a:	b2da      	uxtb	r2, r3
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	709a      	strb	r2, [r3, #2]
}
 8016650:	bf00      	nop
 8016652:	370c      	adds	r7, #12
 8016654:	46bd      	mov	sp, r7
 8016656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665a:	4770      	bx	lr

0801665c <u8sl_Prev>:

void u8sl_Prev(u8sl_t *u8sl)
{
 801665c:	b480      	push	{r7}
 801665e:	b083      	sub	sp, #12
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
  if ( u8sl->current_pos == 0 )
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	78db      	ldrb	r3, [r3, #3]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d117      	bne.n	801669c <u8sl_Prev+0x40>
  {
    u8sl->current_pos = u8sl->total - 1;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	785b      	ldrb	r3, [r3, #1]
 8016670:	3b01      	subs	r3, #1
 8016672:	b2da      	uxtb	r2, r3
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	70da      	strb	r2, [r3, #3]
    u8sl->first_pos = 0;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2200      	movs	r2, #0
 801667c:	709a      	strb	r2, [r3, #2]
    if ( u8sl->total > u8sl->visible )
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	785a      	ldrb	r2, [r3, #1]
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	781b      	ldrb	r3, [r3, #0]
 8016686:	429a      	cmp	r2, r3
 8016688:	d918      	bls.n	80166bc <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->total - u8sl->visible;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	785a      	ldrb	r2, [r3, #1]
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	1ad3      	subs	r3, r2, r3
 8016694:	b2da      	uxtb	r2, r3
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	709a      	strb	r2, [r3, #2]
  {
    u8sl->current_pos--;
    if ( u8sl->first_pos > u8sl->current_pos )
      u8sl->first_pos = u8sl->current_pos;
  }
}
 801669a:	e00f      	b.n	80166bc <u8sl_Prev+0x60>
    u8sl->current_pos--;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	78db      	ldrb	r3, [r3, #3]
 80166a0:	3b01      	subs	r3, #1
 80166a2:	b2da      	uxtb	r2, r3
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	70da      	strb	r2, [r3, #3]
    if ( u8sl->first_pos > u8sl->current_pos )
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	789a      	ldrb	r2, [r3, #2]
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	78db      	ldrb	r3, [r3, #3]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d903      	bls.n	80166bc <u8sl_Prev+0x60>
      u8sl->first_pos = u8sl->current_pos;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	78da      	ldrb	r2, [r3, #3]
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	709a      	strb	r2, [r3, #2]
}
 80166bc:	bf00      	nop
 80166be:	370c      	adds	r7, #12
 80166c0:	46bd      	mov	sp, r7
 80166c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c6:	4770      	bx	lr

080166c8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80166c8:	b480      	push	{r7}
 80166ca:	b085      	sub	sp, #20
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	60f8      	str	r0, [r7, #12]
 80166d0:	607b      	str	r3, [r7, #4]
 80166d2:	460b      	mov	r3, r1
 80166d4:	72fb      	strb	r3, [r7, #11]
 80166d6:	4613      	mov	r3, r2
 80166d8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80166da:	2300      	movs	r3, #0
}
 80166dc:	4618      	mov	r0, r3
 80166de:	3714      	adds	r7, #20
 80166e0:	46bd      	mov	sp, r7
 80166e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e6:	4770      	bx	lr

080166e8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80166e8:	b480      	push	{r7}
 80166ea:	b083      	sub	sp, #12
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2200      	movs	r2, #0
 80166f4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	4a11      	ldr	r2, [pc, #68]	; (8016740 <u8x8_SetupDefaults+0x58>)
 80166fa:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	4a10      	ldr	r2, [pc, #64]	; (8016740 <u8x8_SetupDefaults+0x58>)
 8016700:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	4a0e      	ldr	r2, [pc, #56]	; (8016740 <u8x8_SetupDefaults+0x58>)
 8016706:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	4a0d      	ldr	r2, [pc, #52]	; (8016740 <u8x8_SetupDefaults+0x58>)
 801670c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	2200      	movs	r2, #0
 8016712:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2200      	movs	r2, #0
 801671a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2200      	movs	r2, #0
 8016722:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	22ff      	movs	r2, #255	; 0xff
 8016728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	22ff      	movs	r2, #255	; 0xff
 8016730:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8016734:	bf00      	nop
 8016736:	370c      	adds	r7, #12
 8016738:	46bd      	mov	sp, r7
 801673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673e:	4770      	bx	lr
 8016740:	080166c9 	.word	0x080166c9

08016744 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b084      	sub	sp, #16
 8016748:	af00      	add	r7, sp, #0
 801674a:	60f8      	str	r0, [r7, #12]
 801674c:	60b9      	str	r1, [r7, #8]
 801674e:	607a      	str	r2, [r7, #4]
 8016750:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8016752:	68f8      	ldr	r0, [r7, #12]
 8016754:	f7ff ffc8 	bl	80166e8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	68ba      	ldr	r2, [r7, #8]
 801675c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	683a      	ldr	r2, [r7, #0]
 8016768:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	69ba      	ldr	r2, [r7, #24]
 801676e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8016770:	68f8      	ldr	r0, [r7, #12]
 8016772:	f7ff fece 	bl	8016512 <u8x8_SetupMemory>
}
 8016776:	bf00      	nop
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}

0801677e <u8x8_GetStringLineCnt>:
*/

#include "u8x8.h"

uint8_t u8x8_GetStringLineCnt(const char *str)
{
 801677e:	b480      	push	{r7}
 8016780:	b085      	sub	sp, #20
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
  char e;
  uint8_t line_cnt = 1;
 8016786:	2301      	movs	r3, #1
 8016788:	73fb      	strb	r3, [r7, #15]
  if ( str == NULL )
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d101      	bne.n	8016794 <u8x8_GetStringLineCnt+0x16>
    return 0;
 8016790:	2300      	movs	r3, #0
 8016792:	e011      	b.n	80167b8 <u8x8_GetStringLineCnt+0x3a>
  for(;;)
  {
    e = *str;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	781b      	ldrb	r3, [r3, #0]
 8016798:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 801679a:	7bbb      	ldrb	r3, [r7, #14]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d009      	beq.n	80167b4 <u8x8_GetStringLineCnt+0x36>
      break;
    str++;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	3301      	adds	r3, #1
 80167a4:	607b      	str	r3, [r7, #4]
    if ( e == '\n' )
 80167a6:	7bbb      	ldrb	r3, [r7, #14]
 80167a8:	2b0a      	cmp	r3, #10
 80167aa:	d1f3      	bne.n	8016794 <u8x8_GetStringLineCnt+0x16>
      line_cnt++;
 80167ac:	7bfb      	ldrb	r3, [r7, #15]
 80167ae:	3301      	adds	r3, #1
 80167b0:	73fb      	strb	r3, [r7, #15]
    e = *str;
 80167b2:	e7ef      	b.n	8016794 <u8x8_GetStringLineCnt+0x16>
      break;
 80167b4:	bf00      	nop
  }
  return line_cnt;
 80167b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	3714      	adds	r7, #20
 80167bc:	46bd      	mov	sp, r7
 80167be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c2:	4770      	bx	lr

080167c4 <u8x8_GetStringLineStart>:
    Example:
      Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
    Support both UTF8 and normal strings.
*/
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
 80167c4:	b480      	push	{r7}
 80167c6:	b085      	sub	sp, #20
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	4603      	mov	r3, r0
 80167cc:	6039      	str	r1, [r7, #0]
 80167ce:	71fb      	strb	r3, [r7, #7]
  char e;
  uint8_t line_cnt = 1;
 80167d0:	2301      	movs	r3, #1
 80167d2:	73fb      	strb	r3, [r7, #15]
  
  if ( line_idx == 0 )
 80167d4:	79fb      	ldrb	r3, [r7, #7]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d101      	bne.n	80167de <u8x8_GetStringLineStart+0x1a>
    return str;
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	e017      	b.n	801680e <u8x8_GetStringLineStart+0x4a>

  for(;;)
  {
    e = *str;
 80167de:	683b      	ldr	r3, [r7, #0]
 80167e0:	781b      	ldrb	r3, [r3, #0]
 80167e2:	73bb      	strb	r3, [r7, #14]
    if ( e == '\0' )
 80167e4:	7bbb      	ldrb	r3, [r7, #14]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d00f      	beq.n	801680a <u8x8_GetStringLineStart+0x46>
      break;
    str++;
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	3301      	adds	r3, #1
 80167ee:	603b      	str	r3, [r7, #0]
    if ( e == '\n' )
 80167f0:	7bbb      	ldrb	r3, [r7, #14]
 80167f2:	2b0a      	cmp	r3, #10
 80167f4:	d1f3      	bne.n	80167de <u8x8_GetStringLineStart+0x1a>
    {
      if ( line_cnt == line_idx )
 80167f6:	7bfa      	ldrb	r2, [r7, #15]
 80167f8:	79fb      	ldrb	r3, [r7, #7]
 80167fa:	429a      	cmp	r2, r3
 80167fc:	d101      	bne.n	8016802 <u8x8_GetStringLineStart+0x3e>
	return str;
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	e005      	b.n	801680e <u8x8_GetStringLineStart+0x4a>
      line_cnt++;
 8016802:	7bfb      	ldrb	r3, [r7, #15]
 8016804:	3301      	adds	r3, #1
 8016806:	73fb      	strb	r3, [r7, #15]
    e = *str;
 8016808:	e7e9      	b.n	80167de <u8x8_GetStringLineStart+0x1a>
      break;
 801680a:	bf00      	nop
    }
  }
  return NULL;	/* line not found */
 801680c:	2300      	movs	r3, #0
}
 801680e:	4618      	mov	r0, r3
 8016810:	3714      	adds	r7, #20
 8016812:	46bd      	mov	sp, r7
 8016814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016818:	4770      	bx	lr
	...

0801681c <u8x8_u16toap>:


#include "u8x8.h"

const char *u8x8_u16toap(char * dest, uint16_t v)
{
 801681c:	b480      	push	{r7}
 801681e:	b085      	sub	sp, #20
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	460b      	mov	r3, r1
 8016826:	807b      	strh	r3, [r7, #2]
  uint8_t pos;
  uint8_t d;
  uint16_t c;
  c = 10000;
 8016828:	f242 7310 	movw	r3, #10000	; 0x2710
 801682c:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 801682e:	2300      	movs	r3, #0
 8016830:	73fb      	strb	r3, [r7, #15]
 8016832:	e01b      	b.n	801686c <u8x8_u16toap+0x50>
  {
      d = '0';
 8016834:	2330      	movs	r3, #48	; 0x30
 8016836:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 8016838:	e006      	b.n	8016848 <u8x8_u16toap+0x2c>
      {
	v -= c;
 801683a:	887a      	ldrh	r2, [r7, #2]
 801683c:	89bb      	ldrh	r3, [r7, #12]
 801683e:	1ad3      	subs	r3, r2, r3
 8016840:	807b      	strh	r3, [r7, #2]
	d++;
 8016842:	7bbb      	ldrb	r3, [r7, #14]
 8016844:	3301      	adds	r3, #1
 8016846:	73bb      	strb	r3, [r7, #14]
      while( v >= c )
 8016848:	887a      	ldrh	r2, [r7, #2]
 801684a:	89bb      	ldrh	r3, [r7, #12]
 801684c:	429a      	cmp	r2, r3
 801684e:	d2f4      	bcs.n	801683a <u8x8_u16toap+0x1e>
      }
      dest[pos] = d;
 8016850:	7bfb      	ldrb	r3, [r7, #15]
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	4413      	add	r3, r2
 8016856:	7bba      	ldrb	r2, [r7, #14]
 8016858:	701a      	strb	r2, [r3, #0]
      c /= 10;
 801685a:	89bb      	ldrh	r3, [r7, #12]
 801685c:	4a0a      	ldr	r2, [pc, #40]	; (8016888 <u8x8_u16toap+0x6c>)
 801685e:	fba2 2303 	umull	r2, r3, r2, r3
 8016862:	08db      	lsrs	r3, r3, #3
 8016864:	81bb      	strh	r3, [r7, #12]
  for( pos = 0; pos < 5; pos++ )
 8016866:	7bfb      	ldrb	r3, [r7, #15]
 8016868:	3301      	adds	r3, #1
 801686a:	73fb      	strb	r3, [r7, #15]
 801686c:	7bfb      	ldrb	r3, [r7, #15]
 801686e:	2b04      	cmp	r3, #4
 8016870:	d9e0      	bls.n	8016834 <u8x8_u16toap+0x18>
  }  
  dest[5] = '\0';
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	3305      	adds	r3, #5
 8016876:	2200      	movs	r2, #0
 8016878:	701a      	strb	r2, [r3, #0]
  return dest;
 801687a:	687b      	ldr	r3, [r7, #4]
}
 801687c:	4618      	mov	r0, r3
 801687e:	3714      	adds	r7, #20
 8016880:	46bd      	mov	sp, r7
 8016882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016886:	4770      	bx	lr
 8016888:	cccccccd 	.word	0xcccccccd

0801688c <u8x8_u16toa>:

/* v = value, d = number of digits */
const char *u8x8_u16toa(uint16_t v, uint8_t d)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	4603      	mov	r3, r0
 8016894:	460a      	mov	r2, r1
 8016896:	80fb      	strh	r3, [r7, #6]
 8016898:	4613      	mov	r3, r2
 801689a:	717b      	strb	r3, [r7, #5]
  static char buf[6];
  d = 5-d;
 801689c:	797b      	ldrb	r3, [r7, #5]
 801689e:	f1c3 0305 	rsb	r3, r3, #5
 80168a2:	717b      	strb	r3, [r7, #5]
  return u8x8_u16toap(buf, v) + d;
 80168a4:	88fb      	ldrh	r3, [r7, #6]
 80168a6:	4619      	mov	r1, r3
 80168a8:	4804      	ldr	r0, [pc, #16]	; (80168bc <u8x8_u16toa+0x30>)
 80168aa:	f7ff ffb7 	bl	801681c <u8x8_u16toap>
 80168ae:	4602      	mov	r2, r0
 80168b0:	797b      	ldrb	r3, [r7, #5]
 80168b2:	4413      	add	r3, r2
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	3708      	adds	r7, #8
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bd80      	pop	{r7, pc}
 80168bc:	20000bc0 	.word	0x20000bc0

080168c0 <MX_FATFS_Init>:
 80168c0:	b580      	push	{r7, lr}
 80168c2:	af00      	add	r7, sp, #0
 80168c4:	490c      	ldr	r1, [pc, #48]	; (80168f8 <MX_FATFS_Init+0x38>)
 80168c6:	480d      	ldr	r0, [pc, #52]	; (80168fc <MX_FATFS_Init+0x3c>)
 80168c8:	f006 fffc 	bl	801d8c4 <FATFS_LinkDriver>
 80168cc:	4603      	mov	r3, r0
 80168ce:	461a      	mov	r2, r3
 80168d0:	4b0b      	ldr	r3, [pc, #44]	; (8016900 <MX_FATFS_Init+0x40>)
 80168d2:	701a      	strb	r2, [r3, #0]
 80168d4:	490b      	ldr	r1, [pc, #44]	; (8016904 <MX_FATFS_Init+0x44>)
 80168d6:	480c      	ldr	r0, [pc, #48]	; (8016908 <MX_FATFS_Init+0x48>)
 80168d8:	f006 fff4 	bl	801d8c4 <FATFS_LinkDriver>
 80168dc:	4603      	mov	r3, r0
 80168de:	461a      	mov	r2, r3
 80168e0:	4b0a      	ldr	r3, [pc, #40]	; (801690c <MX_FATFS_Init+0x4c>)
 80168e2:	701a      	strb	r2, [r3, #0]
 80168e4:	490a      	ldr	r1, [pc, #40]	; (8016910 <MX_FATFS_Init+0x50>)
 80168e6:	480b      	ldr	r0, [pc, #44]	; (8016914 <MX_FATFS_Init+0x54>)
 80168e8:	f006 ffec 	bl	801d8c4 <FATFS_LinkDriver>
 80168ec:	4603      	mov	r3, r0
 80168ee:	461a      	mov	r2, r3
 80168f0:	4b09      	ldr	r3, [pc, #36]	; (8016918 <MX_FATFS_Init+0x58>)
 80168f2:	701a      	strb	r2, [r3, #0]
 80168f4:	bf00      	nop
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	200179f0 	.word	0x200179f0
 80168fc:	08022fe8 	.word	0x08022fe8
 8016900:	20019a70 	.word	0x20019a70
 8016904:	20018a2c 	.word	0x20018a2c
 8016908:	08022ffc 	.word	0x08022ffc
 801690c:	20019a71 	.word	0x20019a71
 8016910:	20019a6c 	.word	0x20019a6c
 8016914:	20000068 	.word	0x20000068
 8016918:	20019a68 	.word	0x20019a68

0801691c <get_fattime>:
 801691c:	b480      	push	{r7}
 801691e:	af00      	add	r7, sp, #0
 8016920:	2300      	movs	r3, #0
 8016922:	4618      	mov	r0, r3
 8016924:	46bd      	mov	sp, r7
 8016926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692a:	4770      	bx	lr

0801692c <BSP_SD_Init>:
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
 8016932:	2300      	movs	r3, #0
 8016934:	71fb      	strb	r3, [r7, #7]
 8016936:	f000 f8a5 	bl	8016a84 <BSP_SD_IsDetected>
 801693a:	4603      	mov	r3, r0
 801693c:	2b01      	cmp	r3, #1
 801693e:	d001      	beq.n	8016944 <BSP_SD_Init+0x18>
 8016940:	2302      	movs	r3, #2
 8016942:	e012      	b.n	801696a <BSP_SD_Init+0x3e>
 8016944:	480b      	ldr	r0, [pc, #44]	; (8016974 <BSP_SD_Init+0x48>)
 8016946:	f7f7 f92f 	bl	800dba8 <HAL_SD_Init>
 801694a:	4603      	mov	r3, r0
 801694c:	71fb      	strb	r3, [r7, #7]
 801694e:	79fb      	ldrb	r3, [r7, #7]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d109      	bne.n	8016968 <BSP_SD_Init+0x3c>
 8016954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016958:	4806      	ldr	r0, [pc, #24]	; (8016974 <BSP_SD_Init+0x48>)
 801695a:	f7f8 f8a5 	bl	800eaa8 <HAL_SD_ConfigWideBusOperation>
 801695e:	4603      	mov	r3, r0
 8016960:	2b00      	cmp	r3, #0
 8016962:	d001      	beq.n	8016968 <BSP_SD_Init+0x3c>
 8016964:	2301      	movs	r3, #1
 8016966:	71fb      	strb	r3, [r7, #7]
 8016968:	79fb      	ldrb	r3, [r7, #7]
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
 8016972:	bf00      	nop
 8016974:	20002fbc 	.word	0x20002fbc

08016978 <BSP_SD_ReadBlocks>:
 8016978:	b580      	push	{r7, lr}
 801697a:	b088      	sub	sp, #32
 801697c:	af02      	add	r7, sp, #8
 801697e:	60f8      	str	r0, [r7, #12]
 8016980:	60b9      	str	r1, [r7, #8]
 8016982:	607a      	str	r2, [r7, #4]
 8016984:	603b      	str	r3, [r7, #0]
 8016986:	2300      	movs	r3, #0
 8016988:	75fb      	strb	r3, [r7, #23]
 801698a:	683b      	ldr	r3, [r7, #0]
 801698c:	9300      	str	r3, [sp, #0]
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	68ba      	ldr	r2, [r7, #8]
 8016992:	68f9      	ldr	r1, [r7, #12]
 8016994:	4806      	ldr	r0, [pc, #24]	; (80169b0 <BSP_SD_ReadBlocks+0x38>)
 8016996:	f7f7 f99f 	bl	800dcd8 <HAL_SD_ReadBlocks>
 801699a:	4603      	mov	r3, r0
 801699c:	2b00      	cmp	r3, #0
 801699e:	d001      	beq.n	80169a4 <BSP_SD_ReadBlocks+0x2c>
 80169a0:	2301      	movs	r3, #1
 80169a2:	75fb      	strb	r3, [r7, #23]
 80169a4:	7dfb      	ldrb	r3, [r7, #23]
 80169a6:	4618      	mov	r0, r3
 80169a8:	3718      	adds	r7, #24
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}
 80169ae:	bf00      	nop
 80169b0:	20002fbc 	.word	0x20002fbc

080169b4 <BSP_SD_WriteBlocks>:
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b088      	sub	sp, #32
 80169b8:	af02      	add	r7, sp, #8
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
 80169c0:	603b      	str	r3, [r7, #0]
 80169c2:	2300      	movs	r3, #0
 80169c4:	75fb      	strb	r3, [r7, #23]
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	9300      	str	r3, [sp, #0]
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	68ba      	ldr	r2, [r7, #8]
 80169ce:	68f9      	ldr	r1, [r7, #12]
 80169d0:	4806      	ldr	r0, [pc, #24]	; (80169ec <BSP_SD_WriteBlocks+0x38>)
 80169d2:	f7f7 fb79 	bl	800e0c8 <HAL_SD_WriteBlocks>
 80169d6:	4603      	mov	r3, r0
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d001      	beq.n	80169e0 <BSP_SD_WriteBlocks+0x2c>
 80169dc:	2301      	movs	r3, #1
 80169de:	75fb      	strb	r3, [r7, #23]
 80169e0:	7dfb      	ldrb	r3, [r7, #23]
 80169e2:	4618      	mov	r0, r3
 80169e4:	3718      	adds	r7, #24
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}
 80169ea:	bf00      	nop
 80169ec:	20002fbc 	.word	0x20002fbc

080169f0 <BSP_SD_GetCardState>:
 80169f0:	b580      	push	{r7, lr}
 80169f2:	af00      	add	r7, sp, #0
 80169f4:	4805      	ldr	r0, [pc, #20]	; (8016a0c <BSP_SD_GetCardState+0x1c>)
 80169f6:	f7f8 f8d3 	bl	800eba0 <HAL_SD_GetCardState>
 80169fa:	4603      	mov	r3, r0
 80169fc:	2b04      	cmp	r3, #4
 80169fe:	bf14      	ite	ne
 8016a00:	2301      	movne	r3, #1
 8016a02:	2300      	moveq	r3, #0
 8016a04:	b2db      	uxtb	r3, r3
 8016a06:	4618      	mov	r0, r3
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	20002fbc 	.word	0x20002fbc

08016a10 <BSP_SD_GetCardInfo>:
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b082      	sub	sp, #8
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
 8016a18:	6879      	ldr	r1, [r7, #4]
 8016a1a:	4803      	ldr	r0, [pc, #12]	; (8016a28 <BSP_SD_GetCardInfo+0x18>)
 8016a1c:	f7f8 f818 	bl	800ea50 <HAL_SD_GetCardInfo>
 8016a20:	bf00      	nop
 8016a22:	3708      	adds	r7, #8
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}
 8016a28:	20002fbc 	.word	0x20002fbc

08016a2c <HAL_SD_AbortCallback>:
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b082      	sub	sp, #8
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	f000 f818 	bl	8016a68 <BSP_SD_AbortCallback>
 8016a38:	bf00      	nop
 8016a3a:	3708      	adds	r7, #8
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}

08016a40 <HAL_SD_TxCpltCallback>:
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b082      	sub	sp, #8
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	f7ea ff46 	bl	80018d8 <BSP_SD_WriteCpltCallback>
 8016a4c:	bf00      	nop
 8016a4e:	3708      	adds	r7, #8
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd80      	pop	{r7, pc}

08016a54 <HAL_SD_RxCpltCallback>:
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
 8016a5c:	f000 f80b 	bl	8016a76 <BSP_SD_ReadCpltCallback>
 8016a60:	bf00      	nop
 8016a62:	3708      	adds	r7, #8
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}

08016a68 <BSP_SD_AbortCallback>:
 8016a68:	b480      	push	{r7}
 8016a6a:	af00      	add	r7, sp, #0
 8016a6c:	bf00      	nop
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a74:	4770      	bx	lr

08016a76 <BSP_SD_ReadCpltCallback>:
 8016a76:	b480      	push	{r7}
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	bf00      	nop
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a82:	4770      	bx	lr

08016a84 <BSP_SD_IsDetected>:
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b082      	sub	sp, #8
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	71fb      	strb	r3, [r7, #7]
 8016a8e:	f000 f80b 	bl	8016aa8 <BSP_PlatformIsDetected>
 8016a92:	4603      	mov	r3, r0
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d101      	bne.n	8016a9c <BSP_SD_IsDetected+0x18>
 8016a98:	2300      	movs	r3, #0
 8016a9a:	71fb      	strb	r3, [r7, #7]
 8016a9c:	79fb      	ldrb	r3, [r7, #7]
 8016a9e:	b2db      	uxtb	r3, r3
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3708      	adds	r7, #8
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}

08016aa8 <BSP_PlatformIsDetected>:
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b082      	sub	sp, #8
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	2301      	movs	r3, #1
 8016ab0:	71fb      	strb	r3, [r7, #7]
 8016ab2:	2101      	movs	r1, #1
 8016ab4:	4806      	ldr	r0, [pc, #24]	; (8016ad0 <BSP_PlatformIsDetected+0x28>)
 8016ab6:	f7f2 feb5 	bl	8009824 <HAL_GPIO_ReadPin>
 8016aba:	4603      	mov	r3, r0
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d001      	beq.n	8016ac4 <BSP_PlatformIsDetected+0x1c>
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	71fb      	strb	r3, [r7, #7]
 8016ac4:	79fb      	ldrb	r3, [r7, #7]
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	3708      	adds	r7, #8
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd80      	pop	{r7, pc}
 8016ace:	bf00      	nop
 8016ad0:	40020c00 	.word	0x40020c00

08016ad4 <SD_CheckStatus>:
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	4603      	mov	r3, r0
 8016adc:	71fb      	strb	r3, [r7, #7]
 8016ade:	4b0b      	ldr	r3, [pc, #44]	; (8016b0c <SD_CheckStatus+0x38>)
 8016ae0:	2201      	movs	r2, #1
 8016ae2:	701a      	strb	r2, [r3, #0]
 8016ae4:	f7ff ff84 	bl	80169f0 <BSP_SD_GetCardState>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d107      	bne.n	8016afe <SD_CheckStatus+0x2a>
 8016aee:	4b07      	ldr	r3, [pc, #28]	; (8016b0c <SD_CheckStatus+0x38>)
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	b2db      	uxtb	r3, r3
 8016af4:	f023 0301 	bic.w	r3, r3, #1
 8016af8:	b2da      	uxtb	r2, r3
 8016afa:	4b04      	ldr	r3, [pc, #16]	; (8016b0c <SD_CheckStatus+0x38>)
 8016afc:	701a      	strb	r2, [r3, #0]
 8016afe:	4b03      	ldr	r3, [pc, #12]	; (8016b0c <SD_CheckStatus+0x38>)
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	b2db      	uxtb	r3, r3
 8016b04:	4618      	mov	r0, r3
 8016b06:	3708      	adds	r7, #8
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}
 8016b0c:	20000065 	.word	0x20000065

08016b10 <SD_initialize>:
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	4603      	mov	r3, r0
 8016b18:	71fb      	strb	r3, [r7, #7]
 8016b1a:	4b0b      	ldr	r3, [pc, #44]	; (8016b48 <SD_initialize+0x38>)
 8016b1c:	2201      	movs	r2, #1
 8016b1e:	701a      	strb	r2, [r3, #0]
 8016b20:	f7ff ff04 	bl	801692c <BSP_SD_Init>
 8016b24:	4603      	mov	r3, r0
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d107      	bne.n	8016b3a <SD_initialize+0x2a>
 8016b2a:	79fb      	ldrb	r3, [r7, #7]
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7ff ffd1 	bl	8016ad4 <SD_CheckStatus>
 8016b32:	4603      	mov	r3, r0
 8016b34:	461a      	mov	r2, r3
 8016b36:	4b04      	ldr	r3, [pc, #16]	; (8016b48 <SD_initialize+0x38>)
 8016b38:	701a      	strb	r2, [r3, #0]
 8016b3a:	4b03      	ldr	r3, [pc, #12]	; (8016b48 <SD_initialize+0x38>)
 8016b3c:	781b      	ldrb	r3, [r3, #0]
 8016b3e:	b2db      	uxtb	r3, r3
 8016b40:	4618      	mov	r0, r3
 8016b42:	3708      	adds	r7, #8
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}
 8016b48:	20000065 	.word	0x20000065

08016b4c <SD_status>:
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	4603      	mov	r3, r0
 8016b54:	71fb      	strb	r3, [r7, #7]
 8016b56:	79fb      	ldrb	r3, [r7, #7]
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7ff ffbb 	bl	8016ad4 <SD_CheckStatus>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	4618      	mov	r0, r3
 8016b62:	3708      	adds	r7, #8
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}

08016b68 <SD_read>:
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b086      	sub	sp, #24
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	60b9      	str	r1, [r7, #8]
 8016b70:	607a      	str	r2, [r7, #4]
 8016b72:	603b      	str	r3, [r7, #0]
 8016b74:	4603      	mov	r3, r0
 8016b76:	73fb      	strb	r3, [r7, #15]
 8016b78:	2301      	movs	r3, #1
 8016b7a:	75fb      	strb	r3, [r7, #23]
 8016b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8016b80:	683a      	ldr	r2, [r7, #0]
 8016b82:	6879      	ldr	r1, [r7, #4]
 8016b84:	68b8      	ldr	r0, [r7, #8]
 8016b86:	f7ff fef7 	bl	8016978 <BSP_SD_ReadBlocks>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d107      	bne.n	8016ba0 <SD_read+0x38>
 8016b90:	bf00      	nop
 8016b92:	f7ff ff2d 	bl	80169f0 <BSP_SD_GetCardState>
 8016b96:	4603      	mov	r3, r0
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d1fa      	bne.n	8016b92 <SD_read+0x2a>
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	75fb      	strb	r3, [r7, #23]
 8016ba0:	7dfb      	ldrb	r3, [r7, #23]
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3718      	adds	r7, #24
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}

08016baa <SD_write>:
 8016baa:	b580      	push	{r7, lr}
 8016bac:	b086      	sub	sp, #24
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	60b9      	str	r1, [r7, #8]
 8016bb2:	607a      	str	r2, [r7, #4]
 8016bb4:	603b      	str	r3, [r7, #0]
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	73fb      	strb	r3, [r7, #15]
 8016bba:	2301      	movs	r3, #1
 8016bbc:	75fb      	strb	r3, [r7, #23]
 8016bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8016bc2:	683a      	ldr	r2, [r7, #0]
 8016bc4:	6879      	ldr	r1, [r7, #4]
 8016bc6:	68b8      	ldr	r0, [r7, #8]
 8016bc8:	f7ff fef4 	bl	80169b4 <BSP_SD_WriteBlocks>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d107      	bne.n	8016be2 <SD_write+0x38>
 8016bd2:	bf00      	nop
 8016bd4:	f7ff ff0c 	bl	80169f0 <BSP_SD_GetCardState>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d1fa      	bne.n	8016bd4 <SD_write+0x2a>
 8016bde:	2300      	movs	r3, #0
 8016be0:	75fb      	strb	r3, [r7, #23]
 8016be2:	7dfb      	ldrb	r3, [r7, #23]
 8016be4:	4618      	mov	r0, r3
 8016be6:	3718      	adds	r7, #24
 8016be8:	46bd      	mov	sp, r7
 8016bea:	bd80      	pop	{r7, pc}

08016bec <SD_ioctl>:
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b08c      	sub	sp, #48	; 0x30
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	603a      	str	r2, [r7, #0]
 8016bf6:	71fb      	strb	r3, [r7, #7]
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	71bb      	strb	r3, [r7, #6]
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016c02:	4b25      	ldr	r3, [pc, #148]	; (8016c98 <SD_ioctl+0xac>)
 8016c04:	781b      	ldrb	r3, [r3, #0]
 8016c06:	b2db      	uxtb	r3, r3
 8016c08:	f003 0301 	and.w	r3, r3, #1
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d001      	beq.n	8016c14 <SD_ioctl+0x28>
 8016c10:	2303      	movs	r3, #3
 8016c12:	e03c      	b.n	8016c8e <SD_ioctl+0xa2>
 8016c14:	79bb      	ldrb	r3, [r7, #6]
 8016c16:	2b03      	cmp	r3, #3
 8016c18:	d834      	bhi.n	8016c84 <SD_ioctl+0x98>
 8016c1a:	a201      	add	r2, pc, #4	; (adr r2, 8016c20 <SD_ioctl+0x34>)
 8016c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c20:	08016c31 	.word	0x08016c31
 8016c24:	08016c39 	.word	0x08016c39
 8016c28:	08016c51 	.word	0x08016c51
 8016c2c:	08016c6b 	.word	0x08016c6b
 8016c30:	2300      	movs	r3, #0
 8016c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016c36:	e028      	b.n	8016c8a <SD_ioctl+0x9e>
 8016c38:	f107 030c 	add.w	r3, r7, #12
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7ff fee7 	bl	8016a10 <BSP_SD_GetCardInfo>
 8016c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	601a      	str	r2, [r3, #0]
 8016c48:	2300      	movs	r3, #0
 8016c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016c4e:	e01c      	b.n	8016c8a <SD_ioctl+0x9e>
 8016c50:	f107 030c 	add.w	r3, r7, #12
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7ff fedb 	bl	8016a10 <BSP_SD_GetCardInfo>
 8016c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c5c:	b29a      	uxth	r2, r3
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	801a      	strh	r2, [r3, #0]
 8016c62:	2300      	movs	r3, #0
 8016c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016c68:	e00f      	b.n	8016c8a <SD_ioctl+0x9e>
 8016c6a:	f107 030c 	add.w	r3, r7, #12
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7ff fece 	bl	8016a10 <BSP_SD_GetCardInfo>
 8016c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c76:	0a5a      	lsrs	r2, r3, #9
 8016c78:	683b      	ldr	r3, [r7, #0]
 8016c7a:	601a      	str	r2, [r3, #0]
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016c82:	e002      	b.n	8016c8a <SD_ioctl+0x9e>
 8016c84:	2304      	movs	r3, #4
 8016c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016c8e:	4618      	mov	r0, r3
 8016c90:	3730      	adds	r7, #48	; 0x30
 8016c92:	46bd      	mov	sp, r7
 8016c94:	bd80      	pop	{r7, pc}
 8016c96:	bf00      	nop
 8016c98:	20000065 	.word	0x20000065

08016c9c <USBH_initialize>:
 8016c9c:	b480      	push	{r7}
 8016c9e:	b083      	sub	sp, #12
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	71fb      	strb	r3, [r7, #7]
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	4618      	mov	r0, r3
 8016caa:	370c      	adds	r7, #12
 8016cac:	46bd      	mov	sp, r7
 8016cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb2:	4770      	bx	lr

08016cb4 <USBH_status>:
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	4603      	mov	r3, r0
 8016cbc:	71fb      	strb	r3, [r7, #7]
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	73fb      	strb	r3, [r7, #15]
 8016cc2:	79fb      	ldrb	r3, [r7, #7]
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	4808      	ldr	r0, [pc, #32]	; (8016ce8 <USBH_status+0x34>)
 8016cc8:	f000 fe65 	bl	8017996 <USBH_MSC_UnitIsReady>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d002      	beq.n	8016cd8 <USBH_status+0x24>
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	73fb      	strb	r3, [r7, #15]
 8016cd6:	e001      	b.n	8016cdc <USBH_status+0x28>
 8016cd8:	2301      	movs	r3, #1
 8016cda:	73fb      	strb	r3, [r7, #15]
 8016cdc:	7bfb      	ldrb	r3, [r7, #15]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	3710      	adds	r7, #16
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
 8016ce6:	bf00      	nop
 8016ce8:	2000865c 	.word	0x2000865c

08016cec <USBH_read>:
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b094      	sub	sp, #80	; 0x50
 8016cf0:	af02      	add	r7, sp, #8
 8016cf2:	60b9      	str	r1, [r7, #8]
 8016cf4:	607a      	str	r2, [r7, #4]
 8016cf6:	603b      	str	r3, [r7, #0]
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	73fb      	strb	r3, [r7, #15]
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016d02:	7bf9      	ldrb	r1, [r7, #15]
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	9300      	str	r3, [sp, #0]
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	687a      	ldr	r2, [r7, #4]
 8016d0c:	4812      	ldr	r0, [pc, #72]	; (8016d58 <USBH_read+0x6c>)
 8016d0e:	f000 fe8c 	bl	8017a2a <USBH_MSC_Read>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d103      	bne.n	8016d20 <USBH_read+0x34>
 8016d18:	2300      	movs	r3, #0
 8016d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016d1e:	e015      	b.n	8016d4c <USBH_read+0x60>
 8016d20:	f107 0210 	add.w	r2, r7, #16
 8016d24:	7bfb      	ldrb	r3, [r7, #15]
 8016d26:	4619      	mov	r1, r3
 8016d28:	480b      	ldr	r0, [pc, #44]	; (8016d58 <USBH_read+0x6c>)
 8016d2a:	f000 fe5a 	bl	80179e2 <USBH_MSC_GetLUNInfo>
 8016d2e:	7f7b      	ldrb	r3, [r7, #29]
 8016d30:	2b28      	cmp	r3, #40	; 0x28
 8016d32:	d003      	beq.n	8016d3c <USBH_read+0x50>
 8016d34:	2b3a      	cmp	r3, #58	; 0x3a
 8016d36:	d001      	beq.n	8016d3c <USBH_read+0x50>
 8016d38:	2b04      	cmp	r3, #4
 8016d3a:	d103      	bne.n	8016d44 <USBH_read+0x58>
 8016d3c:	2303      	movs	r3, #3
 8016d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016d42:	e003      	b.n	8016d4c <USBH_read+0x60>
 8016d44:	2301      	movs	r3, #1
 8016d46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016d4a:	bf00      	nop
 8016d4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016d50:	4618      	mov	r0, r3
 8016d52:	3748      	adds	r7, #72	; 0x48
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	2000865c 	.word	0x2000865c

08016d5c <USBH_write>:
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b094      	sub	sp, #80	; 0x50
 8016d60:	af02      	add	r7, sp, #8
 8016d62:	60b9      	str	r1, [r7, #8]
 8016d64:	607a      	str	r2, [r7, #4]
 8016d66:	603b      	str	r3, [r7, #0]
 8016d68:	4603      	mov	r3, r0
 8016d6a:	73fb      	strb	r3, [r7, #15]
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016d72:	7bf9      	ldrb	r1, [r7, #15]
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	9300      	str	r3, [sp, #0]
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	687a      	ldr	r2, [r7, #4]
 8016d7c:	4817      	ldr	r0, [pc, #92]	; (8016ddc <USBH_write+0x80>)
 8016d7e:	f000 febd 	bl	8017afc <USBH_MSC_Write>
 8016d82:	4603      	mov	r3, r0
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d103      	bne.n	8016d90 <USBH_write+0x34>
 8016d88:	2300      	movs	r3, #0
 8016d8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016d8e:	e01f      	b.n	8016dd0 <USBH_write+0x74>
 8016d90:	f107 0210 	add.w	r2, r7, #16
 8016d94:	7bfb      	ldrb	r3, [r7, #15]
 8016d96:	4619      	mov	r1, r3
 8016d98:	4810      	ldr	r0, [pc, #64]	; (8016ddc <USBH_write+0x80>)
 8016d9a:	f000 fe22 	bl	80179e2 <USBH_MSC_GetLUNInfo>
 8016d9e:	7f7b      	ldrb	r3, [r7, #29]
 8016da0:	2b27      	cmp	r3, #39	; 0x27
 8016da2:	d009      	beq.n	8016db8 <USBH_write+0x5c>
 8016da4:	2b27      	cmp	r3, #39	; 0x27
 8016da6:	dc02      	bgt.n	8016dae <USBH_write+0x52>
 8016da8:	2b04      	cmp	r3, #4
 8016daa:	d009      	beq.n	8016dc0 <USBH_write+0x64>
 8016dac:	e00c      	b.n	8016dc8 <USBH_write+0x6c>
 8016dae:	2b28      	cmp	r3, #40	; 0x28
 8016db0:	d006      	beq.n	8016dc0 <USBH_write+0x64>
 8016db2:	2b3a      	cmp	r3, #58	; 0x3a
 8016db4:	d004      	beq.n	8016dc0 <USBH_write+0x64>
 8016db6:	e007      	b.n	8016dc8 <USBH_write+0x6c>
 8016db8:	2302      	movs	r3, #2
 8016dba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016dbe:	e007      	b.n	8016dd0 <USBH_write+0x74>
 8016dc0:	2303      	movs	r3, #3
 8016dc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016dc6:	e003      	b.n	8016dd0 <USBH_write+0x74>
 8016dc8:	2301      	movs	r3, #1
 8016dca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8016dce:	bf00      	nop
 8016dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3748      	adds	r7, #72	; 0x48
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}
 8016ddc:	2000865c 	.word	0x2000865c

08016de0 <USBH_ioctl>:
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b090      	sub	sp, #64	; 0x40
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	4603      	mov	r3, r0
 8016de8:	603a      	str	r2, [r7, #0]
 8016dea:	71fb      	strb	r3, [r7, #7]
 8016dec:	460b      	mov	r3, r1
 8016dee:	71bb      	strb	r3, [r7, #6]
 8016df0:	2301      	movs	r3, #1
 8016df2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016df6:	79bb      	ldrb	r3, [r7, #6]
 8016df8:	2b03      	cmp	r3, #3
 8016dfa:	d852      	bhi.n	8016ea2 <USBH_ioctl+0xc2>
 8016dfc:	a201      	add	r2, pc, #4	; (adr r2, 8016e04 <USBH_ioctl+0x24>)
 8016dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e02:	bf00      	nop
 8016e04:	08016e15 	.word	0x08016e15
 8016e08:	08016e1d 	.word	0x08016e1d
 8016e0c:	08016e47 	.word	0x08016e47
 8016e10:	08016e73 	.word	0x08016e73
 8016e14:	2300      	movs	r3, #0
 8016e16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016e1a:	e045      	b.n	8016ea8 <USBH_ioctl+0xc8>
 8016e1c:	f107 0208 	add.w	r2, r7, #8
 8016e20:	79fb      	ldrb	r3, [r7, #7]
 8016e22:	4619      	mov	r1, r3
 8016e24:	4823      	ldr	r0, [pc, #140]	; (8016eb4 <USBH_ioctl+0xd4>)
 8016e26:	f000 fddc 	bl	80179e2 <USBH_MSC_GetLUNInfo>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d106      	bne.n	8016e3e <USBH_ioctl+0x5e>
 8016e30:	68fa      	ldr	r2, [r7, #12]
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	601a      	str	r2, [r3, #0]
 8016e36:	2300      	movs	r3, #0
 8016e38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016e3c:	e034      	b.n	8016ea8 <USBH_ioctl+0xc8>
 8016e3e:	2301      	movs	r3, #1
 8016e40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016e44:	e030      	b.n	8016ea8 <USBH_ioctl+0xc8>
 8016e46:	f107 0208 	add.w	r2, r7, #8
 8016e4a:	79fb      	ldrb	r3, [r7, #7]
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	4819      	ldr	r0, [pc, #100]	; (8016eb4 <USBH_ioctl+0xd4>)
 8016e50:	f000 fdc7 	bl	80179e2 <USBH_MSC_GetLUNInfo>
 8016e54:	4603      	mov	r3, r0
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d107      	bne.n	8016e6a <USBH_ioctl+0x8a>
 8016e5a:	8a3b      	ldrh	r3, [r7, #16]
 8016e5c:	461a      	mov	r2, r3
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	601a      	str	r2, [r3, #0]
 8016e62:	2300      	movs	r3, #0
 8016e64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016e68:	e01e      	b.n	8016ea8 <USBH_ioctl+0xc8>
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016e70:	e01a      	b.n	8016ea8 <USBH_ioctl+0xc8>
 8016e72:	f107 0208 	add.w	r2, r7, #8
 8016e76:	79fb      	ldrb	r3, [r7, #7]
 8016e78:	4619      	mov	r1, r3
 8016e7a:	480e      	ldr	r0, [pc, #56]	; (8016eb4 <USBH_ioctl+0xd4>)
 8016e7c:	f000 fdb1 	bl	80179e2 <USBH_MSC_GetLUNInfo>
 8016e80:	4603      	mov	r3, r0
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d109      	bne.n	8016e9a <USBH_ioctl+0xba>
 8016e86:	8a3b      	ldrh	r3, [r7, #16]
 8016e88:	0a5b      	lsrs	r3, r3, #9
 8016e8a:	b29b      	uxth	r3, r3
 8016e8c:	461a      	mov	r2, r3
 8016e8e:	683b      	ldr	r3, [r7, #0]
 8016e90:	601a      	str	r2, [r3, #0]
 8016e92:	2300      	movs	r3, #0
 8016e94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016e98:	e006      	b.n	8016ea8 <USBH_ioctl+0xc8>
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016ea0:	e002      	b.n	8016ea8 <USBH_ioctl+0xc8>
 8016ea2:	2304      	movs	r3, #4
 8016ea4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8016ea8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016eac:	4618      	mov	r0, r3
 8016eae:	3740      	adds	r7, #64	; 0x40
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}
 8016eb4:	2000865c 	.word	0x2000865c

08016eb8 <USER_initialize>:
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	71fb      	strb	r3, [r7, #7]
 8016ec2:	79fb      	ldrb	r3, [r7, #7]
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f7ea f951 	bl	800116c <SD_disk_initialize>
 8016eca:	bf00      	nop
 8016ecc:	4618      	mov	r0, r3
 8016ece:	3708      	adds	r7, #8
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}

08016ed4 <USER_status>:
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b082      	sub	sp, #8
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	4603      	mov	r3, r0
 8016edc:	71fb      	strb	r3, [r7, #7]
 8016ede:	79fb      	ldrb	r3, [r7, #7]
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7ea fa2d 	bl	8001340 <SD_disk_status>
 8016ee6:	bf00      	nop
 8016ee8:	4618      	mov	r0, r3
 8016eea:	3708      	adds	r7, #8
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd80      	pop	{r7, pc}

08016ef0 <USER_read>:
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b084      	sub	sp, #16
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	60b9      	str	r1, [r7, #8]
 8016ef8:	607a      	str	r2, [r7, #4]
 8016efa:	603b      	str	r3, [r7, #0]
 8016efc:	4603      	mov	r3, r0
 8016efe:	73fb      	strb	r3, [r7, #15]
 8016f00:	7bf8      	ldrb	r0, [r7, #15]
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	687a      	ldr	r2, [r7, #4]
 8016f06:	68b9      	ldr	r1, [r7, #8]
 8016f08:	f7ea fa30 	bl	800136c <SD_disk_read>
 8016f0c:	bf00      	nop
 8016f0e:	4618      	mov	r0, r3
 8016f10:	3710      	adds	r7, #16
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}

08016f16 <USER_write>:
 8016f16:	b580      	push	{r7, lr}
 8016f18:	b084      	sub	sp, #16
 8016f1a:	af00      	add	r7, sp, #0
 8016f1c:	60b9      	str	r1, [r7, #8]
 8016f1e:	607a      	str	r2, [r7, #4]
 8016f20:	603b      	str	r3, [r7, #0]
 8016f22:	4603      	mov	r3, r0
 8016f24:	73fb      	strb	r3, [r7, #15]
 8016f26:	7bf8      	ldrb	r0, [r7, #15]
 8016f28:	683b      	ldr	r3, [r7, #0]
 8016f2a:	687a      	ldr	r2, [r7, #4]
 8016f2c:	68b9      	ldr	r1, [r7, #8]
 8016f2e:	f7ea fa87 	bl	8001440 <SD_disk_write>
 8016f32:	bf00      	nop
 8016f34:	4618      	mov	r0, r3
 8016f36:	3710      	adds	r7, #16
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}

08016f3c <USER_ioctl>:
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b082      	sub	sp, #8
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	4603      	mov	r3, r0
 8016f44:	603a      	str	r2, [r7, #0]
 8016f46:	71fb      	strb	r3, [r7, #7]
 8016f48:	460b      	mov	r3, r1
 8016f4a:	71bb      	strb	r3, [r7, #6]
 8016f4c:	79fb      	ldrb	r3, [r7, #7]
 8016f4e:	79b9      	ldrb	r1, [r7, #6]
 8016f50:	683a      	ldr	r2, [r7, #0]
 8016f52:	4618      	mov	r0, r3
 8016f54:	f7ea faf8 	bl	8001548 <SD_disk_ioctl>
 8016f58:	bf00      	nop
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	3708      	adds	r7, #8
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	bd80      	pop	{r7, pc}

08016f62 <USBH_MSC_InterfaceInit>:
 8016f62:	b590      	push	{r4, r7, lr}
 8016f64:	b089      	sub	sp, #36	; 0x24
 8016f66:	af04      	add	r7, sp, #16
 8016f68:	6078      	str	r0, [r7, #4]
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016f70:	7919      	ldrb	r1, [r3, #4]
 8016f72:	2350      	movs	r3, #80	; 0x50
 8016f74:	2206      	movs	r2, #6
 8016f76:	6878      	ldr	r0, [r7, #4]
 8016f78:	f001 fc4e 	bl	8018818 <USBH_FindInterface>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	73fb      	strb	r3, [r7, #15]
 8016f80:	7bfb      	ldrb	r3, [r7, #15]
 8016f82:	2bff      	cmp	r3, #255	; 0xff
 8016f84:	d002      	beq.n	8016f8c <USBH_MSC_InterfaceInit+0x2a>
 8016f86:	7bfb      	ldrb	r3, [r7, #15]
 8016f88:	2b01      	cmp	r3, #1
 8016f8a:	d901      	bls.n	8016f90 <USBH_MSC_InterfaceInit+0x2e>
 8016f8c:	2302      	movs	r3, #2
 8016f8e:	e0ef      	b.n	8017170 <USBH_MSC_InterfaceInit+0x20e>
 8016f90:	7bfb      	ldrb	r3, [r7, #15]
 8016f92:	4619      	mov	r1, r3
 8016f94:	6878      	ldr	r0, [r7, #4]
 8016f96:	f001 fc23 	bl	80187e0 <USBH_SelectInterface>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	73bb      	strb	r3, [r7, #14]
 8016f9e:	7bbb      	ldrb	r3, [r7, #14]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d001      	beq.n	8016fa8 <USBH_MSC_InterfaceInit+0x46>
 8016fa4:	2302      	movs	r3, #2
 8016fa6:	e0e3      	b.n	8017170 <USBH_MSC_InterfaceInit+0x20e>
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8016fae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8016fb2:	f007 f8bb 	bl	801e12c <malloc>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	61e3      	str	r3, [r4, #28]
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016fc0:	69db      	ldr	r3, [r3, #28]
 8016fc2:	60bb      	str	r3, [r7, #8]
 8016fc4:	68bb      	ldr	r3, [r7, #8]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d101      	bne.n	8016fce <USBH_MSC_InterfaceInit+0x6c>
 8016fca:	2302      	movs	r3, #2
 8016fcc:	e0d0      	b.n	8017170 <USBH_MSC_InterfaceInit+0x20e>
 8016fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016fd2:	2100      	movs	r1, #0
 8016fd4:	68b8      	ldr	r0, [r7, #8]
 8016fd6:	f007 f8c4 	bl	801e162 <memset>
 8016fda:	7bfb      	ldrb	r3, [r7, #15]
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	211a      	movs	r1, #26
 8016fe0:	fb01 f303 	mul.w	r3, r1, r3
 8016fe4:	4413      	add	r3, r2
 8016fe6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	b25b      	sxtb	r3, r3
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	da16      	bge.n	8017020 <USBH_MSC_InterfaceInit+0xbe>
 8016ff2:	7bfb      	ldrb	r3, [r7, #15]
 8016ff4:	687a      	ldr	r2, [r7, #4]
 8016ff6:	211a      	movs	r1, #26
 8016ff8:	fb01 f303 	mul.w	r3, r1, r3
 8016ffc:	4413      	add	r3, r2
 8016ffe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8017002:	781a      	ldrb	r2, [r3, #0]
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	71da      	strb	r2, [r3, #7]
 8017008:	7bfb      	ldrb	r3, [r7, #15]
 801700a:	687a      	ldr	r2, [r7, #4]
 801700c:	211a      	movs	r1, #26
 801700e:	fb01 f303 	mul.w	r3, r1, r3
 8017012:	4413      	add	r3, r2
 8017014:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8017018:	881a      	ldrh	r2, [r3, #0]
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	815a      	strh	r2, [r3, #10]
 801701e:	e015      	b.n	801704c <USBH_MSC_InterfaceInit+0xea>
 8017020:	7bfb      	ldrb	r3, [r7, #15]
 8017022:	687a      	ldr	r2, [r7, #4]
 8017024:	211a      	movs	r1, #26
 8017026:	fb01 f303 	mul.w	r3, r1, r3
 801702a:	4413      	add	r3, r2
 801702c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8017030:	781a      	ldrb	r2, [r3, #0]
 8017032:	68bb      	ldr	r3, [r7, #8]
 8017034:	719a      	strb	r2, [r3, #6]
 8017036:	7bfb      	ldrb	r3, [r7, #15]
 8017038:	687a      	ldr	r2, [r7, #4]
 801703a:	211a      	movs	r1, #26
 801703c:	fb01 f303 	mul.w	r3, r1, r3
 8017040:	4413      	add	r3, r2
 8017042:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8017046:	881a      	ldrh	r2, [r3, #0]
 8017048:	68bb      	ldr	r3, [r7, #8]
 801704a:	811a      	strh	r2, [r3, #8]
 801704c:	7bfb      	ldrb	r3, [r7, #15]
 801704e:	687a      	ldr	r2, [r7, #4]
 8017050:	211a      	movs	r1, #26
 8017052:	fb01 f303 	mul.w	r3, r1, r3
 8017056:	4413      	add	r3, r2
 8017058:	f203 3356 	addw	r3, r3, #854	; 0x356
 801705c:	781b      	ldrb	r3, [r3, #0]
 801705e:	b25b      	sxtb	r3, r3
 8017060:	2b00      	cmp	r3, #0
 8017062:	da16      	bge.n	8017092 <USBH_MSC_InterfaceInit+0x130>
 8017064:	7bfb      	ldrb	r3, [r7, #15]
 8017066:	687a      	ldr	r2, [r7, #4]
 8017068:	211a      	movs	r1, #26
 801706a:	fb01 f303 	mul.w	r3, r1, r3
 801706e:	4413      	add	r3, r2
 8017070:	f203 3356 	addw	r3, r3, #854	; 0x356
 8017074:	781a      	ldrb	r2, [r3, #0]
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	71da      	strb	r2, [r3, #7]
 801707a:	7bfb      	ldrb	r3, [r7, #15]
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	211a      	movs	r1, #26
 8017080:	fb01 f303 	mul.w	r3, r1, r3
 8017084:	4413      	add	r3, r2
 8017086:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801708a:	881a      	ldrh	r2, [r3, #0]
 801708c:	68bb      	ldr	r3, [r7, #8]
 801708e:	815a      	strh	r2, [r3, #10]
 8017090:	e015      	b.n	80170be <USBH_MSC_InterfaceInit+0x15c>
 8017092:	7bfb      	ldrb	r3, [r7, #15]
 8017094:	687a      	ldr	r2, [r7, #4]
 8017096:	211a      	movs	r1, #26
 8017098:	fb01 f303 	mul.w	r3, r1, r3
 801709c:	4413      	add	r3, r2
 801709e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80170a2:	781a      	ldrb	r2, [r3, #0]
 80170a4:	68bb      	ldr	r3, [r7, #8]
 80170a6:	719a      	strb	r2, [r3, #6]
 80170a8:	7bfb      	ldrb	r3, [r7, #15]
 80170aa:	687a      	ldr	r2, [r7, #4]
 80170ac:	211a      	movs	r1, #26
 80170ae:	fb01 f303 	mul.w	r3, r1, r3
 80170b2:	4413      	add	r3, r2
 80170b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80170b8:	881a      	ldrh	r2, [r3, #0]
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	811a      	strh	r2, [r3, #8]
 80170be:	68bb      	ldr	r3, [r7, #8]
 80170c0:	2200      	movs	r2, #0
 80170c2:	731a      	strb	r2, [r3, #12]
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	2200      	movs	r2, #0
 80170c8:	735a      	strb	r2, [r3, #13]
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	2200      	movs	r2, #0
 80170ce:	739a      	strb	r2, [r3, #14]
 80170d0:	68bb      	ldr	r3, [r7, #8]
 80170d2:	799b      	ldrb	r3, [r3, #6]
 80170d4:	4619      	mov	r1, r3
 80170d6:	6878      	ldr	r0, [r7, #4]
 80170d8:	f002 fdc1 	bl	8019c5e <USBH_AllocPipe>
 80170dc:	4603      	mov	r3, r0
 80170de:	461a      	mov	r2, r3
 80170e0:	68bb      	ldr	r3, [r7, #8]
 80170e2:	715a      	strb	r2, [r3, #5]
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	79db      	ldrb	r3, [r3, #7]
 80170e8:	4619      	mov	r1, r3
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	f002 fdb7 	bl	8019c5e <USBH_AllocPipe>
 80170f0:	4603      	mov	r3, r0
 80170f2:	461a      	mov	r2, r3
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	711a      	strb	r2, [r3, #4]
 80170f8:	6878      	ldr	r0, [r7, #4]
 80170fa:	f000 fda3 	bl	8017c44 <USBH_MSC_BOT_Init>
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	7959      	ldrb	r1, [r3, #5]
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	7998      	ldrb	r0, [r3, #6]
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017112:	68ba      	ldr	r2, [r7, #8]
 8017114:	8912      	ldrh	r2, [r2, #8]
 8017116:	9202      	str	r2, [sp, #8]
 8017118:	2202      	movs	r2, #2
 801711a:	9201      	str	r2, [sp, #4]
 801711c:	9300      	str	r3, [sp, #0]
 801711e:	4623      	mov	r3, r4
 8017120:	4602      	mov	r2, r0
 8017122:	6878      	ldr	r0, [r7, #4]
 8017124:	f002 fd6c 	bl	8019c00 <USBH_OpenPipe>
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	7919      	ldrb	r1, [r3, #4]
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	79d8      	ldrb	r0, [r3, #7]
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801713c:	68ba      	ldr	r2, [r7, #8]
 801713e:	8952      	ldrh	r2, [r2, #10]
 8017140:	9202      	str	r2, [sp, #8]
 8017142:	2202      	movs	r2, #2
 8017144:	9201      	str	r2, [sp, #4]
 8017146:	9300      	str	r3, [sp, #0]
 8017148:	4623      	mov	r3, r4
 801714a:	4602      	mov	r2, r0
 801714c:	6878      	ldr	r0, [r7, #4]
 801714e:	f002 fd57 	bl	8019c00 <USBH_OpenPipe>
 8017152:	68bb      	ldr	r3, [r7, #8]
 8017154:	791b      	ldrb	r3, [r3, #4]
 8017156:	2200      	movs	r2, #0
 8017158:	4619      	mov	r1, r3
 801715a:	6878      	ldr	r0, [r7, #4]
 801715c:	f006 fefe 	bl	801df5c <USBH_LL_SetToggle>
 8017160:	68bb      	ldr	r3, [r7, #8]
 8017162:	795b      	ldrb	r3, [r3, #5]
 8017164:	2200      	movs	r2, #0
 8017166:	4619      	mov	r1, r3
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f006 fef7 	bl	801df5c <USBH_LL_SetToggle>
 801716e:	2300      	movs	r3, #0
 8017170:	4618      	mov	r0, r3
 8017172:	3714      	adds	r7, #20
 8017174:	46bd      	mov	sp, r7
 8017176:	bd90      	pop	{r4, r7, pc}

08017178 <USBH_MSC_InterfaceDeInit>:
 8017178:	b580      	push	{r7, lr}
 801717a:	b084      	sub	sp, #16
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017186:	69db      	ldr	r3, [r3, #28]
 8017188:	60fb      	str	r3, [r7, #12]
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	795b      	ldrb	r3, [r3, #5]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d00e      	beq.n	80171b0 <USBH_MSC_InterfaceDeInit+0x38>
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	795b      	ldrb	r3, [r3, #5]
 8017196:	4619      	mov	r1, r3
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f002 fd50 	bl	8019c3e <USBH_ClosePipe>
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	795b      	ldrb	r3, [r3, #5]
 80171a2:	4619      	mov	r1, r3
 80171a4:	6878      	ldr	r0, [r7, #4]
 80171a6:	f002 fd7b 	bl	8019ca0 <USBH_FreePipe>
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	2200      	movs	r2, #0
 80171ae:	715a      	strb	r2, [r3, #5]
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	791b      	ldrb	r3, [r3, #4]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d00e      	beq.n	80171d6 <USBH_MSC_InterfaceDeInit+0x5e>
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	791b      	ldrb	r3, [r3, #4]
 80171bc:	4619      	mov	r1, r3
 80171be:	6878      	ldr	r0, [r7, #4]
 80171c0:	f002 fd3d 	bl	8019c3e <USBH_ClosePipe>
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	791b      	ldrb	r3, [r3, #4]
 80171c8:	4619      	mov	r1, r3
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f002 fd68 	bl	8019ca0 <USBH_FreePipe>
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	2200      	movs	r2, #0
 80171d4:	711a      	strb	r2, [r3, #4]
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80171dc:	69db      	ldr	r3, [r3, #28]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d00b      	beq.n	80171fa <USBH_MSC_InterfaceDeInit+0x82>
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80171e8:	69db      	ldr	r3, [r3, #28]
 80171ea:	4618      	mov	r0, r3
 80171ec:	f006 ffa6 	bl	801e13c <free>
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80171f6:	2200      	movs	r2, #0
 80171f8:	61da      	str	r2, [r3, #28]
 80171fa:	2300      	movs	r3, #0
 80171fc:	4618      	mov	r0, r3
 80171fe:	3710      	adds	r7, #16
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}

08017204 <USBH_MSC_ClassRequest>:
 8017204:	b580      	push	{r7, lr}
 8017206:	b084      	sub	sp, #16
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017212:	69db      	ldr	r3, [r3, #28]
 8017214:	60bb      	str	r3, [r7, #8]
 8017216:	2301      	movs	r3, #1
 8017218:	73fb      	strb	r3, [r7, #15]
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	7b9b      	ldrb	r3, [r3, #14]
 801721e:	2b02      	cmp	r3, #2
 8017220:	d004      	beq.n	801722c <USBH_MSC_ClassRequest+0x28>
 8017222:	2b03      	cmp	r3, #3
 8017224:	d03e      	beq.n	80172a4 <USBH_MSC_ClassRequest+0xa0>
 8017226:	2b00      	cmp	r3, #0
 8017228:	d000      	beq.n	801722c <USBH_MSC_ClassRequest+0x28>
 801722a:	e04a      	b.n	80172c2 <USBH_MSC_ClassRequest+0xbe>
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	4619      	mov	r1, r3
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f000 fce9 	bl	8017c08 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8017236:	4603      	mov	r3, r0
 8017238:	73fb      	strb	r3, [r7, #15]
 801723a:	7bfb      	ldrb	r3, [r7, #15]
 801723c:	2b03      	cmp	r3, #3
 801723e:	d104      	bne.n	801724a <USBH_MSC_ClassRequest+0x46>
 8017240:	68bb      	ldr	r3, [r7, #8]
 8017242:	2200      	movs	r2, #0
 8017244:	701a      	strb	r2, [r3, #0]
 8017246:	2300      	movs	r3, #0
 8017248:	73fb      	strb	r3, [r7, #15]
 801724a:	7bfb      	ldrb	r3, [r7, #15]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d135      	bne.n	80172bc <USBH_MSC_ClassRequest+0xb8>
 8017250:	68bb      	ldr	r3, [r7, #8]
 8017252:	781b      	ldrb	r3, [r3, #0]
 8017254:	2b02      	cmp	r3, #2
 8017256:	d804      	bhi.n	8017262 <USBH_MSC_ClassRequest+0x5e>
 8017258:	68bb      	ldr	r3, [r7, #8]
 801725a:	781b      	ldrb	r3, [r3, #0]
 801725c:	3301      	adds	r3, #1
 801725e:	b2da      	uxtb	r2, r3
 8017260:	e000      	b.n	8017264 <USBH_MSC_ClassRequest+0x60>
 8017262:	2202      	movs	r2, #2
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	701a      	strb	r2, [r3, #0]
 8017268:	2300      	movs	r3, #0
 801726a:	73bb      	strb	r3, [r7, #14]
 801726c:	e014      	b.n	8017298 <USBH_MSC_ClassRequest+0x94>
 801726e:	7bbb      	ldrb	r3, [r7, #14]
 8017270:	68ba      	ldr	r2, [r7, #8]
 8017272:	2134      	movs	r1, #52	; 0x34
 8017274:	fb01 f303 	mul.w	r3, r1, r3
 8017278:	4413      	add	r3, r2
 801727a:	3392      	adds	r3, #146	; 0x92
 801727c:	2202      	movs	r2, #2
 801727e:	701a      	strb	r2, [r3, #0]
 8017280:	7bbb      	ldrb	r3, [r7, #14]
 8017282:	68ba      	ldr	r2, [r7, #8]
 8017284:	2134      	movs	r1, #52	; 0x34
 8017286:	fb01 f303 	mul.w	r3, r1, r3
 801728a:	4413      	add	r3, r2
 801728c:	33c1      	adds	r3, #193	; 0xc1
 801728e:	2200      	movs	r2, #0
 8017290:	701a      	strb	r2, [r3, #0]
 8017292:	7bbb      	ldrb	r3, [r7, #14]
 8017294:	3301      	adds	r3, #1
 8017296:	73bb      	strb	r3, [r7, #14]
 8017298:	68bb      	ldr	r3, [r7, #8]
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	7bba      	ldrb	r2, [r7, #14]
 801729e:	429a      	cmp	r2, r3
 80172a0:	d3e5      	bcc.n	801726e <USBH_MSC_ClassRequest+0x6a>
 80172a2:	e00b      	b.n	80172bc <USBH_MSC_ClassRequest+0xb8>
 80172a4:	2100      	movs	r1, #0
 80172a6:	6878      	ldr	r0, [r7, #4]
 80172a8:	f002 f877 	bl	801939a <USBH_ClrFeature>
 80172ac:	4603      	mov	r3, r0
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d106      	bne.n	80172c0 <USBH_MSC_ClassRequest+0xbc>
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	7bda      	ldrb	r2, [r3, #15]
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	739a      	strb	r2, [r3, #14]
 80172ba:	e001      	b.n	80172c0 <USBH_MSC_ClassRequest+0xbc>
 80172bc:	bf00      	nop
 80172be:	e000      	b.n	80172c2 <USBH_MSC_ClassRequest+0xbe>
 80172c0:	bf00      	nop
 80172c2:	7bfb      	ldrb	r3, [r7, #15]
 80172c4:	4618      	mov	r0, r3
 80172c6:	3710      	adds	r7, #16
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd80      	pop	{r7, pc}

080172cc <USBH_MSC_Process>:
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b086      	sub	sp, #24
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80172da:	69db      	ldr	r3, [r3, #28]
 80172dc:	613b      	str	r3, [r7, #16]
 80172de:	2301      	movs	r3, #1
 80172e0:	75fb      	strb	r3, [r7, #23]
 80172e2:	2301      	movs	r3, #1
 80172e4:	73fb      	strb	r3, [r7, #15]
 80172e6:	2301      	movs	r3, #1
 80172e8:	73bb      	strb	r3, [r7, #14]
 80172ea:	693b      	ldr	r3, [r7, #16]
 80172ec:	7b1b      	ldrb	r3, [r3, #12]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d003      	beq.n	80172fa <USBH_MSC_Process+0x2e>
 80172f2:	2b01      	cmp	r3, #1
 80172f4:	f000 8271 	beq.w	80177da <USBH_MSC_Process+0x50e>
 80172f8:	e272      	b.n	80177e0 <USBH_MSC_Process+0x514>
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8017300:	693b      	ldr	r3, [r7, #16]
 8017302:	781b      	ldrb	r3, [r3, #0]
 8017304:	b29b      	uxth	r3, r3
 8017306:	429a      	cmp	r2, r3
 8017308:	f080 824f 	bcs.w	80177aa <USBH_MSC_Process+0x4de>
 801730c:	693b      	ldr	r3, [r7, #16]
 801730e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017312:	4619      	mov	r1, r3
 8017314:	693a      	ldr	r2, [r7, #16]
 8017316:	2334      	movs	r3, #52	; 0x34
 8017318:	fb03 f301 	mul.w	r3, r3, r1
 801731c:	4413      	add	r3, r2
 801731e:	3391      	adds	r3, #145	; 0x91
 8017320:	2201      	movs	r2, #1
 8017322:	701a      	strb	r2, [r3, #0]
 8017324:	693b      	ldr	r3, [r7, #16]
 8017326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801732a:	4619      	mov	r1, r3
 801732c:	693a      	ldr	r2, [r7, #16]
 801732e:	2334      	movs	r3, #52	; 0x34
 8017330:	fb03 f301 	mul.w	r3, r3, r1
 8017334:	4413      	add	r3, r2
 8017336:	3390      	adds	r3, #144	; 0x90
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	2b08      	cmp	r3, #8
 801733c:	f200 8243 	bhi.w	80177c6 <USBH_MSC_Process+0x4fa>
 8017340:	a201      	add	r2, pc, #4	; (adr r2, 8017348 <USBH_MSC_Process+0x7c>)
 8017342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017346:	bf00      	nop
 8017348:	0801736d 	.word	0x0801736d
 801734c:	080177c7 	.word	0x080177c7
 8017350:	08017435 	.word	0x08017435
 8017354:	080175b9 	.word	0x080175b9
 8017358:	08017393 	.word	0x08017393
 801735c:	08017685 	.word	0x08017685
 8017360:	080177c7 	.word	0x080177c7
 8017364:	080177c7 	.word	0x080177c7
 8017368:	08017799 	.word	0x08017799
 801736c:	693b      	ldr	r3, [r7, #16]
 801736e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017372:	4619      	mov	r1, r3
 8017374:	693a      	ldr	r2, [r7, #16]
 8017376:	2334      	movs	r3, #52	; 0x34
 8017378:	fb03 f301 	mul.w	r3, r3, r1
 801737c:	4413      	add	r3, r2
 801737e:	3390      	adds	r3, #144	; 0x90
 8017380:	2204      	movs	r2, #4
 8017382:	701a      	strb	r2, [r3, #0]
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 801738a:	693b      	ldr	r3, [r7, #16]
 801738c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8017390:	e222      	b.n	80177d8 <USBH_MSC_Process+0x50c>
 8017392:	693b      	ldr	r3, [r7, #16]
 8017394:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017398:	b2d9      	uxtb	r1, r3
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80173a0:	461a      	mov	r2, r3
 80173a2:	2334      	movs	r3, #52	; 0x34
 80173a4:	fb03 f302 	mul.w	r3, r3, r2
 80173a8:	3398      	adds	r3, #152	; 0x98
 80173aa:	693a      	ldr	r2, [r7, #16]
 80173ac:	4413      	add	r3, r2
 80173ae:	3307      	adds	r3, #7
 80173b0:	461a      	mov	r2, r3
 80173b2:	6878      	ldr	r0, [r7, #4]
 80173b4:	f000 ff68 	bl	8018288 <USBH_MSC_SCSI_Inquiry>
 80173b8:	4603      	mov	r3, r0
 80173ba:	73fb      	strb	r3, [r7, #15]
 80173bc:	7bfb      	ldrb	r3, [r7, #15]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d10b      	bne.n	80173da <USBH_MSC_Process+0x10e>
 80173c2:	693b      	ldr	r3, [r7, #16]
 80173c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80173c8:	4619      	mov	r1, r3
 80173ca:	693a      	ldr	r2, [r7, #16]
 80173cc:	2334      	movs	r3, #52	; 0x34
 80173ce:	fb03 f301 	mul.w	r3, r3, r1
 80173d2:	4413      	add	r3, r2
 80173d4:	3390      	adds	r3, #144	; 0x90
 80173d6:	2202      	movs	r2, #2
 80173d8:	701a      	strb	r2, [r3, #0]
 80173da:	7bfb      	ldrb	r3, [r7, #15]
 80173dc:	2b02      	cmp	r3, #2
 80173de:	d10c      	bne.n	80173fa <USBH_MSC_Process+0x12e>
 80173e0:	693b      	ldr	r3, [r7, #16]
 80173e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80173e6:	4619      	mov	r1, r3
 80173e8:	693a      	ldr	r2, [r7, #16]
 80173ea:	2334      	movs	r3, #52	; 0x34
 80173ec:	fb03 f301 	mul.w	r3, r3, r1
 80173f0:	4413      	add	r3, r2
 80173f2:	3390      	adds	r3, #144	; 0x90
 80173f4:	2205      	movs	r2, #5
 80173f6:	701a      	strb	r2, [r3, #0]
 80173f8:	e1e7      	b.n	80177ca <USBH_MSC_Process+0x4fe>
 80173fa:	7bfb      	ldrb	r3, [r7, #15]
 80173fc:	2b04      	cmp	r3, #4
 80173fe:	f040 81e4 	bne.w	80177ca <USBH_MSC_Process+0x4fe>
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017408:	4619      	mov	r1, r3
 801740a:	693a      	ldr	r2, [r7, #16]
 801740c:	2334      	movs	r3, #52	; 0x34
 801740e:	fb03 f301 	mul.w	r3, r3, r1
 8017412:	4413      	add	r3, r2
 8017414:	3390      	adds	r3, #144	; 0x90
 8017416:	2201      	movs	r2, #1
 8017418:	701a      	strb	r2, [r3, #0]
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017420:	4619      	mov	r1, r3
 8017422:	693a      	ldr	r2, [r7, #16]
 8017424:	2334      	movs	r3, #52	; 0x34
 8017426:	fb03 f301 	mul.w	r3, r3, r1
 801742a:	4413      	add	r3, r2
 801742c:	3391      	adds	r3, #145	; 0x91
 801742e:	2202      	movs	r2, #2
 8017430:	701a      	strb	r2, [r3, #0]
 8017432:	e1ca      	b.n	80177ca <USBH_MSC_Process+0x4fe>
 8017434:	693b      	ldr	r3, [r7, #16]
 8017436:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801743a:	b2db      	uxtb	r3, r3
 801743c:	4619      	mov	r1, r3
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f000 fe64 	bl	801810c <USBH_MSC_SCSI_TestUnitReady>
 8017444:	4603      	mov	r3, r0
 8017446:	73bb      	strb	r3, [r7, #14]
 8017448:	7bbb      	ldrb	r3, [r7, #14]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d149      	bne.n	80174e2 <USBH_MSC_Process+0x216>
 801744e:	693b      	ldr	r3, [r7, #16]
 8017450:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017454:	4619      	mov	r1, r3
 8017456:	693a      	ldr	r2, [r7, #16]
 8017458:	2334      	movs	r3, #52	; 0x34
 801745a:	fb03 f301 	mul.w	r3, r3, r1
 801745e:	4413      	add	r3, r2
 8017460:	3392      	adds	r3, #146	; 0x92
 8017462:	781b      	ldrb	r3, [r3, #0]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d00c      	beq.n	8017482 <USBH_MSC_Process+0x1b6>
 8017468:	693b      	ldr	r3, [r7, #16]
 801746a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801746e:	4619      	mov	r1, r3
 8017470:	693a      	ldr	r2, [r7, #16]
 8017472:	2334      	movs	r3, #52	; 0x34
 8017474:	fb03 f301 	mul.w	r3, r3, r1
 8017478:	4413      	add	r3, r2
 801747a:	33c1      	adds	r3, #193	; 0xc1
 801747c:	2201      	movs	r2, #1
 801747e:	701a      	strb	r2, [r3, #0]
 8017480:	e00b      	b.n	801749a <USBH_MSC_Process+0x1ce>
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017488:	4619      	mov	r1, r3
 801748a:	693a      	ldr	r2, [r7, #16]
 801748c:	2334      	movs	r3, #52	; 0x34
 801748e:	fb03 f301 	mul.w	r3, r3, r1
 8017492:	4413      	add	r3, r2
 8017494:	33c1      	adds	r3, #193	; 0xc1
 8017496:	2200      	movs	r2, #0
 8017498:	701a      	strb	r2, [r3, #0]
 801749a:	693b      	ldr	r3, [r7, #16]
 801749c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80174a0:	4619      	mov	r1, r3
 80174a2:	693a      	ldr	r2, [r7, #16]
 80174a4:	2334      	movs	r3, #52	; 0x34
 80174a6:	fb03 f301 	mul.w	r3, r3, r1
 80174aa:	4413      	add	r3, r2
 80174ac:	3390      	adds	r3, #144	; 0x90
 80174ae:	2203      	movs	r2, #3
 80174b0:	701a      	strb	r2, [r3, #0]
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80174b8:	4619      	mov	r1, r3
 80174ba:	693a      	ldr	r2, [r7, #16]
 80174bc:	2334      	movs	r3, #52	; 0x34
 80174be:	fb03 f301 	mul.w	r3, r3, r1
 80174c2:	4413      	add	r3, r2
 80174c4:	3391      	adds	r3, #145	; 0x91
 80174c6:	2200      	movs	r2, #0
 80174c8:	701a      	strb	r2, [r3, #0]
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80174d0:	4619      	mov	r1, r3
 80174d2:	693a      	ldr	r2, [r7, #16]
 80174d4:	2334      	movs	r3, #52	; 0x34
 80174d6:	fb03 f301 	mul.w	r3, r3, r1
 80174da:	4413      	add	r3, r2
 80174dc:	3392      	adds	r3, #146	; 0x92
 80174de:	2200      	movs	r2, #0
 80174e0:	701a      	strb	r2, [r3, #0]
 80174e2:	7bbb      	ldrb	r3, [r7, #14]
 80174e4:	2b02      	cmp	r3, #2
 80174e6:	d14a      	bne.n	801757e <USBH_MSC_Process+0x2b2>
 80174e8:	693b      	ldr	r3, [r7, #16]
 80174ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80174ee:	4619      	mov	r1, r3
 80174f0:	693a      	ldr	r2, [r7, #16]
 80174f2:	2334      	movs	r3, #52	; 0x34
 80174f4:	fb03 f301 	mul.w	r3, r3, r1
 80174f8:	4413      	add	r3, r2
 80174fa:	3392      	adds	r3, #146	; 0x92
 80174fc:	781b      	ldrb	r3, [r3, #0]
 80174fe:	2b02      	cmp	r3, #2
 8017500:	d00c      	beq.n	801751c <USBH_MSC_Process+0x250>
 8017502:	693b      	ldr	r3, [r7, #16]
 8017504:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017508:	4619      	mov	r1, r3
 801750a:	693a      	ldr	r2, [r7, #16]
 801750c:	2334      	movs	r3, #52	; 0x34
 801750e:	fb03 f301 	mul.w	r3, r3, r1
 8017512:	4413      	add	r3, r2
 8017514:	33c1      	adds	r3, #193	; 0xc1
 8017516:	2201      	movs	r2, #1
 8017518:	701a      	strb	r2, [r3, #0]
 801751a:	e00b      	b.n	8017534 <USBH_MSC_Process+0x268>
 801751c:	693b      	ldr	r3, [r7, #16]
 801751e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017522:	4619      	mov	r1, r3
 8017524:	693a      	ldr	r2, [r7, #16]
 8017526:	2334      	movs	r3, #52	; 0x34
 8017528:	fb03 f301 	mul.w	r3, r3, r1
 801752c:	4413      	add	r3, r2
 801752e:	33c1      	adds	r3, #193	; 0xc1
 8017530:	2200      	movs	r2, #0
 8017532:	701a      	strb	r2, [r3, #0]
 8017534:	693b      	ldr	r3, [r7, #16]
 8017536:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801753a:	4619      	mov	r1, r3
 801753c:	693a      	ldr	r2, [r7, #16]
 801753e:	2334      	movs	r3, #52	; 0x34
 8017540:	fb03 f301 	mul.w	r3, r3, r1
 8017544:	4413      	add	r3, r2
 8017546:	3390      	adds	r3, #144	; 0x90
 8017548:	2205      	movs	r2, #5
 801754a:	701a      	strb	r2, [r3, #0]
 801754c:	693b      	ldr	r3, [r7, #16]
 801754e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017552:	4619      	mov	r1, r3
 8017554:	693a      	ldr	r2, [r7, #16]
 8017556:	2334      	movs	r3, #52	; 0x34
 8017558:	fb03 f301 	mul.w	r3, r3, r1
 801755c:	4413      	add	r3, r2
 801755e:	3391      	adds	r3, #145	; 0x91
 8017560:	2201      	movs	r2, #1
 8017562:	701a      	strb	r2, [r3, #0]
 8017564:	693b      	ldr	r3, [r7, #16]
 8017566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801756a:	4619      	mov	r1, r3
 801756c:	693a      	ldr	r2, [r7, #16]
 801756e:	2334      	movs	r3, #52	; 0x34
 8017570:	fb03 f301 	mul.w	r3, r3, r1
 8017574:	4413      	add	r3, r2
 8017576:	3392      	adds	r3, #146	; 0x92
 8017578:	2202      	movs	r2, #2
 801757a:	701a      	strb	r2, [r3, #0]
 801757c:	e127      	b.n	80177ce <USBH_MSC_Process+0x502>
 801757e:	7bbb      	ldrb	r3, [r7, #14]
 8017580:	2b04      	cmp	r3, #4
 8017582:	f040 8124 	bne.w	80177ce <USBH_MSC_Process+0x502>
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801758c:	4619      	mov	r1, r3
 801758e:	693a      	ldr	r2, [r7, #16]
 8017590:	2334      	movs	r3, #52	; 0x34
 8017592:	fb03 f301 	mul.w	r3, r3, r1
 8017596:	4413      	add	r3, r2
 8017598:	3390      	adds	r3, #144	; 0x90
 801759a:	2201      	movs	r2, #1
 801759c:	701a      	strb	r2, [r3, #0]
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80175a4:	4619      	mov	r1, r3
 80175a6:	693a      	ldr	r2, [r7, #16]
 80175a8:	2334      	movs	r3, #52	; 0x34
 80175aa:	fb03 f301 	mul.w	r3, r3, r1
 80175ae:	4413      	add	r3, r2
 80175b0:	3391      	adds	r3, #145	; 0x91
 80175b2:	2202      	movs	r2, #2
 80175b4:	701a      	strb	r2, [r3, #0]
 80175b6:	e10a      	b.n	80177ce <USBH_MSC_Process+0x502>
 80175b8:	693b      	ldr	r3, [r7, #16]
 80175ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80175be:	b2d9      	uxtb	r1, r3
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80175c6:	461a      	mov	r2, r3
 80175c8:	2334      	movs	r3, #52	; 0x34
 80175ca:	fb03 f302 	mul.w	r3, r3, r2
 80175ce:	3390      	adds	r3, #144	; 0x90
 80175d0:	693a      	ldr	r2, [r7, #16]
 80175d2:	4413      	add	r3, r2
 80175d4:	3304      	adds	r3, #4
 80175d6:	461a      	mov	r2, r3
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f000 fdda 	bl	8018192 <USBH_MSC_SCSI_ReadCapacity>
 80175de:	4603      	mov	r3, r0
 80175e0:	73fb      	strb	r3, [r7, #15]
 80175e2:	7bfb      	ldrb	r3, [r7, #15]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d120      	bne.n	801762a <USBH_MSC_Process+0x35e>
 80175e8:	693b      	ldr	r3, [r7, #16]
 80175ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80175ee:	4619      	mov	r1, r3
 80175f0:	693a      	ldr	r2, [r7, #16]
 80175f2:	2334      	movs	r3, #52	; 0x34
 80175f4:	fb03 f301 	mul.w	r3, r3, r1
 80175f8:	4413      	add	r3, r2
 80175fa:	3390      	adds	r3, #144	; 0x90
 80175fc:	2201      	movs	r2, #1
 80175fe:	701a      	strb	r2, [r3, #0]
 8017600:	693b      	ldr	r3, [r7, #16]
 8017602:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017606:	4619      	mov	r1, r3
 8017608:	693a      	ldr	r2, [r7, #16]
 801760a:	2334      	movs	r3, #52	; 0x34
 801760c:	fb03 f301 	mul.w	r3, r3, r1
 8017610:	4413      	add	r3, r2
 8017612:	3391      	adds	r3, #145	; 0x91
 8017614:	2200      	movs	r2, #0
 8017616:	701a      	strb	r2, [r3, #0]
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801761e:	3301      	adds	r3, #1
 8017620:	b29a      	uxth	r2, r3
 8017622:	693b      	ldr	r3, [r7, #16]
 8017624:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8017628:	e0d3      	b.n	80177d2 <USBH_MSC_Process+0x506>
 801762a:	7bfb      	ldrb	r3, [r7, #15]
 801762c:	2b02      	cmp	r3, #2
 801762e:	d10c      	bne.n	801764a <USBH_MSC_Process+0x37e>
 8017630:	693b      	ldr	r3, [r7, #16]
 8017632:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017636:	4619      	mov	r1, r3
 8017638:	693a      	ldr	r2, [r7, #16]
 801763a:	2334      	movs	r3, #52	; 0x34
 801763c:	fb03 f301 	mul.w	r3, r3, r1
 8017640:	4413      	add	r3, r2
 8017642:	3390      	adds	r3, #144	; 0x90
 8017644:	2205      	movs	r2, #5
 8017646:	701a      	strb	r2, [r3, #0]
 8017648:	e0c3      	b.n	80177d2 <USBH_MSC_Process+0x506>
 801764a:	7bfb      	ldrb	r3, [r7, #15]
 801764c:	2b04      	cmp	r3, #4
 801764e:	f040 80c0 	bne.w	80177d2 <USBH_MSC_Process+0x506>
 8017652:	693b      	ldr	r3, [r7, #16]
 8017654:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017658:	4619      	mov	r1, r3
 801765a:	693a      	ldr	r2, [r7, #16]
 801765c:	2334      	movs	r3, #52	; 0x34
 801765e:	fb03 f301 	mul.w	r3, r3, r1
 8017662:	4413      	add	r3, r2
 8017664:	3390      	adds	r3, #144	; 0x90
 8017666:	2201      	movs	r2, #1
 8017668:	701a      	strb	r2, [r3, #0]
 801766a:	693b      	ldr	r3, [r7, #16]
 801766c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017670:	4619      	mov	r1, r3
 8017672:	693a      	ldr	r2, [r7, #16]
 8017674:	2334      	movs	r3, #52	; 0x34
 8017676:	fb03 f301 	mul.w	r3, r3, r1
 801767a:	4413      	add	r3, r2
 801767c:	3391      	adds	r3, #145	; 0x91
 801767e:	2202      	movs	r2, #2
 8017680:	701a      	strb	r2, [r3, #0]
 8017682:	e0a6      	b.n	80177d2 <USBH_MSC_Process+0x506>
 8017684:	693b      	ldr	r3, [r7, #16]
 8017686:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801768a:	b2d9      	uxtb	r1, r3
 801768c:	693b      	ldr	r3, [r7, #16]
 801768e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017692:	461a      	mov	r2, r3
 8017694:	2334      	movs	r3, #52	; 0x34
 8017696:	fb03 f302 	mul.w	r3, r3, r2
 801769a:	3398      	adds	r3, #152	; 0x98
 801769c:	693a      	ldr	r2, [r7, #16]
 801769e:	4413      	add	r3, r2
 80176a0:	3304      	adds	r3, #4
 80176a2:	461a      	mov	r2, r3
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	f000 fe94 	bl	80183d2 <USBH_MSC_SCSI_RequestSense>
 80176aa:	4603      	mov	r3, r0
 80176ac:	73fb      	strb	r3, [r7, #15]
 80176ae:	7bfb      	ldrb	r3, [r7, #15]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d145      	bne.n	8017740 <USBH_MSC_Process+0x474>
 80176b4:	693b      	ldr	r3, [r7, #16]
 80176b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80176ba:	4619      	mov	r1, r3
 80176bc:	693a      	ldr	r2, [r7, #16]
 80176be:	2334      	movs	r3, #52	; 0x34
 80176c0:	fb03 f301 	mul.w	r3, r3, r1
 80176c4:	4413      	add	r3, r2
 80176c6:	339c      	adds	r3, #156	; 0x9c
 80176c8:	781b      	ldrb	r3, [r3, #0]
 80176ca:	2b06      	cmp	r3, #6
 80176cc:	d00c      	beq.n	80176e8 <USBH_MSC_Process+0x41c>
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80176d4:	4619      	mov	r1, r3
 80176d6:	693a      	ldr	r2, [r7, #16]
 80176d8:	2334      	movs	r3, #52	; 0x34
 80176da:	fb03 f301 	mul.w	r3, r3, r1
 80176de:	4413      	add	r3, r2
 80176e0:	339c      	adds	r3, #156	; 0x9c
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	2b02      	cmp	r3, #2
 80176e6:	d117      	bne.n	8017718 <USBH_MSC_Process+0x44c>
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80176f4:	1ad3      	subs	r3, r2, r3
 80176f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80176fa:	4293      	cmp	r3, r2
 80176fc:	d80c      	bhi.n	8017718 <USBH_MSC_Process+0x44c>
 80176fe:	693b      	ldr	r3, [r7, #16]
 8017700:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017704:	4619      	mov	r1, r3
 8017706:	693a      	ldr	r2, [r7, #16]
 8017708:	2334      	movs	r3, #52	; 0x34
 801770a:	fb03 f301 	mul.w	r3, r3, r1
 801770e:	4413      	add	r3, r2
 8017710:	3390      	adds	r3, #144	; 0x90
 8017712:	2202      	movs	r2, #2
 8017714:	701a      	strb	r2, [r3, #0]
 8017716:	e05f      	b.n	80177d8 <USBH_MSC_Process+0x50c>
 8017718:	693b      	ldr	r3, [r7, #16]
 801771a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801771e:	4619      	mov	r1, r3
 8017720:	693a      	ldr	r2, [r7, #16]
 8017722:	2334      	movs	r3, #52	; 0x34
 8017724:	fb03 f301 	mul.w	r3, r3, r1
 8017728:	4413      	add	r3, r2
 801772a:	3390      	adds	r3, #144	; 0x90
 801772c:	2201      	movs	r2, #1
 801772e:	701a      	strb	r2, [r3, #0]
 8017730:	693b      	ldr	r3, [r7, #16]
 8017732:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017736:	3301      	adds	r3, #1
 8017738:	b29a      	uxth	r2, r3
 801773a:	693b      	ldr	r3, [r7, #16]
 801773c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8017740:	7bfb      	ldrb	r3, [r7, #15]
 8017742:	2b02      	cmp	r3, #2
 8017744:	d10c      	bne.n	8017760 <USBH_MSC_Process+0x494>
 8017746:	693b      	ldr	r3, [r7, #16]
 8017748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801774c:	4619      	mov	r1, r3
 801774e:	693a      	ldr	r2, [r7, #16]
 8017750:	2334      	movs	r3, #52	; 0x34
 8017752:	fb03 f301 	mul.w	r3, r3, r1
 8017756:	4413      	add	r3, r2
 8017758:	3390      	adds	r3, #144	; 0x90
 801775a:	2208      	movs	r2, #8
 801775c:	701a      	strb	r2, [r3, #0]
 801775e:	e03a      	b.n	80177d6 <USBH_MSC_Process+0x50a>
 8017760:	7bfb      	ldrb	r3, [r7, #15]
 8017762:	2b04      	cmp	r3, #4
 8017764:	d137      	bne.n	80177d6 <USBH_MSC_Process+0x50a>
 8017766:	693b      	ldr	r3, [r7, #16]
 8017768:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801776c:	4619      	mov	r1, r3
 801776e:	693a      	ldr	r2, [r7, #16]
 8017770:	2334      	movs	r3, #52	; 0x34
 8017772:	fb03 f301 	mul.w	r3, r3, r1
 8017776:	4413      	add	r3, r2
 8017778:	3390      	adds	r3, #144	; 0x90
 801777a:	2201      	movs	r2, #1
 801777c:	701a      	strb	r2, [r3, #0]
 801777e:	693b      	ldr	r3, [r7, #16]
 8017780:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8017784:	4619      	mov	r1, r3
 8017786:	693a      	ldr	r2, [r7, #16]
 8017788:	2334      	movs	r3, #52	; 0x34
 801778a:	fb03 f301 	mul.w	r3, r3, r1
 801778e:	4413      	add	r3, r2
 8017790:	3391      	adds	r3, #145	; 0x91
 8017792:	2202      	movs	r2, #2
 8017794:	701a      	strb	r2, [r3, #0]
 8017796:	e01e      	b.n	80177d6 <USBH_MSC_Process+0x50a>
 8017798:	693b      	ldr	r3, [r7, #16]
 801779a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801779e:	3301      	adds	r3, #1
 80177a0:	b29a      	uxth	r2, r3
 80177a2:	693b      	ldr	r3, [r7, #16]
 80177a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80177a8:	e016      	b.n	80177d8 <USBH_MSC_Process+0x50c>
 80177aa:	693b      	ldr	r3, [r7, #16]
 80177ac:	2200      	movs	r2, #0
 80177ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80177b2:	693b      	ldr	r3, [r7, #16]
 80177b4:	2201      	movs	r2, #1
 80177b6:	731a      	strb	r2, [r3, #12]
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80177be:	2102      	movs	r1, #2
 80177c0:	6878      	ldr	r0, [r7, #4]
 80177c2:	4798      	blx	r3
 80177c4:	e00c      	b.n	80177e0 <USBH_MSC_Process+0x514>
 80177c6:	bf00      	nop
 80177c8:	e00a      	b.n	80177e0 <USBH_MSC_Process+0x514>
 80177ca:	bf00      	nop
 80177cc:	e008      	b.n	80177e0 <USBH_MSC_Process+0x514>
 80177ce:	bf00      	nop
 80177d0:	e006      	b.n	80177e0 <USBH_MSC_Process+0x514>
 80177d2:	bf00      	nop
 80177d4:	e004      	b.n	80177e0 <USBH_MSC_Process+0x514>
 80177d6:	bf00      	nop
 80177d8:	e002      	b.n	80177e0 <USBH_MSC_Process+0x514>
 80177da:	2300      	movs	r3, #0
 80177dc:	75fb      	strb	r3, [r7, #23]
 80177de:	bf00      	nop
 80177e0:	7dfb      	ldrb	r3, [r7, #23]
 80177e2:	4618      	mov	r0, r3
 80177e4:	3718      	adds	r7, #24
 80177e6:	46bd      	mov	sp, r7
 80177e8:	bd80      	pop	{r7, pc}
 80177ea:	bf00      	nop

080177ec <USBH_MSC_SOFProcess>:
 80177ec:	b480      	push	{r7}
 80177ee:	b083      	sub	sp, #12
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
 80177f4:	2300      	movs	r3, #0
 80177f6:	4618      	mov	r0, r3
 80177f8:	370c      	adds	r7, #12
 80177fa:	46bd      	mov	sp, r7
 80177fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017800:	4770      	bx	lr

08017802 <USBH_MSC_RdWrProcess>:
 8017802:	b580      	push	{r7, lr}
 8017804:	b088      	sub	sp, #32
 8017806:	af02      	add	r7, sp, #8
 8017808:	6078      	str	r0, [r7, #4]
 801780a:	460b      	mov	r3, r1
 801780c:	70fb      	strb	r3, [r7, #3]
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017814:	69db      	ldr	r3, [r3, #28]
 8017816:	613b      	str	r3, [r7, #16]
 8017818:	2301      	movs	r3, #1
 801781a:	75fb      	strb	r3, [r7, #23]
 801781c:	2301      	movs	r3, #1
 801781e:	73fb      	strb	r3, [r7, #15]
 8017820:	78fb      	ldrb	r3, [r7, #3]
 8017822:	693a      	ldr	r2, [r7, #16]
 8017824:	2134      	movs	r1, #52	; 0x34
 8017826:	fb01 f303 	mul.w	r3, r1, r3
 801782a:	4413      	add	r3, r2
 801782c:	3390      	adds	r3, #144	; 0x90
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	2b06      	cmp	r3, #6
 8017832:	d004      	beq.n	801783e <USBH_MSC_RdWrProcess+0x3c>
 8017834:	2b07      	cmp	r3, #7
 8017836:	d037      	beq.n	80178a8 <USBH_MSC_RdWrProcess+0xa6>
 8017838:	2b05      	cmp	r3, #5
 801783a:	d06a      	beq.n	8017912 <USBH_MSC_RdWrProcess+0x110>
 801783c:	e0a6      	b.n	801798c <USBH_MSC_RdWrProcess+0x18a>
 801783e:	78f9      	ldrb	r1, [r7, #3]
 8017840:	2300      	movs	r3, #0
 8017842:	9300      	str	r3, [sp, #0]
 8017844:	2300      	movs	r3, #0
 8017846:	2200      	movs	r2, #0
 8017848:	6878      	ldr	r0, [r7, #4]
 801784a:	f000 fea6 	bl	801859a <USBH_MSC_SCSI_Read>
 801784e:	4603      	mov	r3, r0
 8017850:	73fb      	strb	r3, [r7, #15]
 8017852:	7bfb      	ldrb	r3, [r7, #15]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d10b      	bne.n	8017870 <USBH_MSC_RdWrProcess+0x6e>
 8017858:	78fb      	ldrb	r3, [r7, #3]
 801785a:	693a      	ldr	r2, [r7, #16]
 801785c:	2134      	movs	r1, #52	; 0x34
 801785e:	fb01 f303 	mul.w	r3, r1, r3
 8017862:	4413      	add	r3, r2
 8017864:	3390      	adds	r3, #144	; 0x90
 8017866:	2201      	movs	r2, #1
 8017868:	701a      	strb	r2, [r3, #0]
 801786a:	2300      	movs	r3, #0
 801786c:	75fb      	strb	r3, [r7, #23]
 801786e:	e088      	b.n	8017982 <USBH_MSC_RdWrProcess+0x180>
 8017870:	7bfb      	ldrb	r3, [r7, #15]
 8017872:	2b02      	cmp	r3, #2
 8017874:	d109      	bne.n	801788a <USBH_MSC_RdWrProcess+0x88>
 8017876:	78fb      	ldrb	r3, [r7, #3]
 8017878:	693a      	ldr	r2, [r7, #16]
 801787a:	2134      	movs	r1, #52	; 0x34
 801787c:	fb01 f303 	mul.w	r3, r1, r3
 8017880:	4413      	add	r3, r2
 8017882:	3390      	adds	r3, #144	; 0x90
 8017884:	2205      	movs	r2, #5
 8017886:	701a      	strb	r2, [r3, #0]
 8017888:	e07b      	b.n	8017982 <USBH_MSC_RdWrProcess+0x180>
 801788a:	7bfb      	ldrb	r3, [r7, #15]
 801788c:	2b04      	cmp	r3, #4
 801788e:	d178      	bne.n	8017982 <USBH_MSC_RdWrProcess+0x180>
 8017890:	78fb      	ldrb	r3, [r7, #3]
 8017892:	693a      	ldr	r2, [r7, #16]
 8017894:	2134      	movs	r1, #52	; 0x34
 8017896:	fb01 f303 	mul.w	r3, r1, r3
 801789a:	4413      	add	r3, r2
 801789c:	3390      	adds	r3, #144	; 0x90
 801789e:	2208      	movs	r2, #8
 80178a0:	701a      	strb	r2, [r3, #0]
 80178a2:	2302      	movs	r3, #2
 80178a4:	75fb      	strb	r3, [r7, #23]
 80178a6:	e06c      	b.n	8017982 <USBH_MSC_RdWrProcess+0x180>
 80178a8:	78f9      	ldrb	r1, [r7, #3]
 80178aa:	2300      	movs	r3, #0
 80178ac:	9300      	str	r3, [sp, #0]
 80178ae:	2300      	movs	r3, #0
 80178b0:	2200      	movs	r2, #0
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f000 fe06 	bl	80184c4 <USBH_MSC_SCSI_Write>
 80178b8:	4603      	mov	r3, r0
 80178ba:	73fb      	strb	r3, [r7, #15]
 80178bc:	7bfb      	ldrb	r3, [r7, #15]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d10b      	bne.n	80178da <USBH_MSC_RdWrProcess+0xd8>
 80178c2:	78fb      	ldrb	r3, [r7, #3]
 80178c4:	693a      	ldr	r2, [r7, #16]
 80178c6:	2134      	movs	r1, #52	; 0x34
 80178c8:	fb01 f303 	mul.w	r3, r1, r3
 80178cc:	4413      	add	r3, r2
 80178ce:	3390      	adds	r3, #144	; 0x90
 80178d0:	2201      	movs	r2, #1
 80178d2:	701a      	strb	r2, [r3, #0]
 80178d4:	2300      	movs	r3, #0
 80178d6:	75fb      	strb	r3, [r7, #23]
 80178d8:	e055      	b.n	8017986 <USBH_MSC_RdWrProcess+0x184>
 80178da:	7bfb      	ldrb	r3, [r7, #15]
 80178dc:	2b02      	cmp	r3, #2
 80178de:	d109      	bne.n	80178f4 <USBH_MSC_RdWrProcess+0xf2>
 80178e0:	78fb      	ldrb	r3, [r7, #3]
 80178e2:	693a      	ldr	r2, [r7, #16]
 80178e4:	2134      	movs	r1, #52	; 0x34
 80178e6:	fb01 f303 	mul.w	r3, r1, r3
 80178ea:	4413      	add	r3, r2
 80178ec:	3390      	adds	r3, #144	; 0x90
 80178ee:	2205      	movs	r2, #5
 80178f0:	701a      	strb	r2, [r3, #0]
 80178f2:	e048      	b.n	8017986 <USBH_MSC_RdWrProcess+0x184>
 80178f4:	7bfb      	ldrb	r3, [r7, #15]
 80178f6:	2b04      	cmp	r3, #4
 80178f8:	d145      	bne.n	8017986 <USBH_MSC_RdWrProcess+0x184>
 80178fa:	78fb      	ldrb	r3, [r7, #3]
 80178fc:	693a      	ldr	r2, [r7, #16]
 80178fe:	2134      	movs	r1, #52	; 0x34
 8017900:	fb01 f303 	mul.w	r3, r1, r3
 8017904:	4413      	add	r3, r2
 8017906:	3390      	adds	r3, #144	; 0x90
 8017908:	2208      	movs	r2, #8
 801790a:	701a      	strb	r2, [r3, #0]
 801790c:	2302      	movs	r3, #2
 801790e:	75fb      	strb	r3, [r7, #23]
 8017910:	e039      	b.n	8017986 <USBH_MSC_RdWrProcess+0x184>
 8017912:	78fb      	ldrb	r3, [r7, #3]
 8017914:	2234      	movs	r2, #52	; 0x34
 8017916:	fb02 f303 	mul.w	r3, r2, r3
 801791a:	3398      	adds	r3, #152	; 0x98
 801791c:	693a      	ldr	r2, [r7, #16]
 801791e:	4413      	add	r3, r2
 8017920:	1d1a      	adds	r2, r3, #4
 8017922:	78fb      	ldrb	r3, [r7, #3]
 8017924:	4619      	mov	r1, r3
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	f000 fd53 	bl	80183d2 <USBH_MSC_SCSI_RequestSense>
 801792c:	4603      	mov	r3, r0
 801792e:	73fb      	strb	r3, [r7, #15]
 8017930:	7bfb      	ldrb	r3, [r7, #15]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d113      	bne.n	801795e <USBH_MSC_RdWrProcess+0x15c>
 8017936:	78fb      	ldrb	r3, [r7, #3]
 8017938:	693a      	ldr	r2, [r7, #16]
 801793a:	2134      	movs	r1, #52	; 0x34
 801793c:	fb01 f303 	mul.w	r3, r1, r3
 8017940:	4413      	add	r3, r2
 8017942:	3390      	adds	r3, #144	; 0x90
 8017944:	2201      	movs	r2, #1
 8017946:	701a      	strb	r2, [r3, #0]
 8017948:	78fb      	ldrb	r3, [r7, #3]
 801794a:	693a      	ldr	r2, [r7, #16]
 801794c:	2134      	movs	r1, #52	; 0x34
 801794e:	fb01 f303 	mul.w	r3, r1, r3
 8017952:	4413      	add	r3, r2
 8017954:	3391      	adds	r3, #145	; 0x91
 8017956:	2202      	movs	r2, #2
 8017958:	701a      	strb	r2, [r3, #0]
 801795a:	2302      	movs	r3, #2
 801795c:	75fb      	strb	r3, [r7, #23]
 801795e:	7bfb      	ldrb	r3, [r7, #15]
 8017960:	2b02      	cmp	r3, #2
 8017962:	d012      	beq.n	801798a <USBH_MSC_RdWrProcess+0x188>
 8017964:	7bfb      	ldrb	r3, [r7, #15]
 8017966:	2b04      	cmp	r3, #4
 8017968:	d10f      	bne.n	801798a <USBH_MSC_RdWrProcess+0x188>
 801796a:	78fb      	ldrb	r3, [r7, #3]
 801796c:	693a      	ldr	r2, [r7, #16]
 801796e:	2134      	movs	r1, #52	; 0x34
 8017970:	fb01 f303 	mul.w	r3, r1, r3
 8017974:	4413      	add	r3, r2
 8017976:	3390      	adds	r3, #144	; 0x90
 8017978:	2208      	movs	r2, #8
 801797a:	701a      	strb	r2, [r3, #0]
 801797c:	2302      	movs	r3, #2
 801797e:	75fb      	strb	r3, [r7, #23]
 8017980:	e003      	b.n	801798a <USBH_MSC_RdWrProcess+0x188>
 8017982:	bf00      	nop
 8017984:	e002      	b.n	801798c <USBH_MSC_RdWrProcess+0x18a>
 8017986:	bf00      	nop
 8017988:	e000      	b.n	801798c <USBH_MSC_RdWrProcess+0x18a>
 801798a:	bf00      	nop
 801798c:	7dfb      	ldrb	r3, [r7, #23]
 801798e:	4618      	mov	r0, r3
 8017990:	3718      	adds	r7, #24
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}

08017996 <USBH_MSC_UnitIsReady>:
 8017996:	b480      	push	{r7}
 8017998:	b085      	sub	sp, #20
 801799a:	af00      	add	r7, sp, #0
 801799c:	6078      	str	r0, [r7, #4]
 801799e:	460b      	mov	r3, r1
 80179a0:	70fb      	strb	r3, [r7, #3]
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80179a8:	69db      	ldr	r3, [r3, #28]
 80179aa:	60bb      	str	r3, [r7, #8]
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	781b      	ldrb	r3, [r3, #0]
 80179b0:	b2db      	uxtb	r3, r3
 80179b2:	2b0b      	cmp	r3, #11
 80179b4:	d10c      	bne.n	80179d0 <USBH_MSC_UnitIsReady+0x3a>
 80179b6:	78fb      	ldrb	r3, [r7, #3]
 80179b8:	68ba      	ldr	r2, [r7, #8]
 80179ba:	2134      	movs	r1, #52	; 0x34
 80179bc:	fb01 f303 	mul.w	r3, r1, r3
 80179c0:	4413      	add	r3, r2
 80179c2:	3391      	adds	r3, #145	; 0x91
 80179c4:	781b      	ldrb	r3, [r3, #0]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d102      	bne.n	80179d0 <USBH_MSC_UnitIsReady+0x3a>
 80179ca:	2301      	movs	r3, #1
 80179cc:	73fb      	strb	r3, [r7, #15]
 80179ce:	e001      	b.n	80179d4 <USBH_MSC_UnitIsReady+0x3e>
 80179d0:	2300      	movs	r3, #0
 80179d2:	73fb      	strb	r3, [r7, #15]
 80179d4:	7bfb      	ldrb	r3, [r7, #15]
 80179d6:	4618      	mov	r0, r3
 80179d8:	3714      	adds	r7, #20
 80179da:	46bd      	mov	sp, r7
 80179dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e0:	4770      	bx	lr

080179e2 <USBH_MSC_GetLUNInfo>:
 80179e2:	b580      	push	{r7, lr}
 80179e4:	b086      	sub	sp, #24
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	60f8      	str	r0, [r7, #12]
 80179ea:	460b      	mov	r3, r1
 80179ec:	607a      	str	r2, [r7, #4]
 80179ee:	72fb      	strb	r3, [r7, #11]
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80179f6:	69db      	ldr	r3, [r3, #28]
 80179f8:	617b      	str	r3, [r7, #20]
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	781b      	ldrb	r3, [r3, #0]
 80179fe:	b2db      	uxtb	r3, r3
 8017a00:	2b0b      	cmp	r3, #11
 8017a02:	d10d      	bne.n	8017a20 <USBH_MSC_GetLUNInfo+0x3e>
 8017a04:	7afb      	ldrb	r3, [r7, #11]
 8017a06:	2234      	movs	r2, #52	; 0x34
 8017a08:	fb02 f303 	mul.w	r3, r2, r3
 8017a0c:	3390      	adds	r3, #144	; 0x90
 8017a0e:	697a      	ldr	r2, [r7, #20]
 8017a10:	4413      	add	r3, r2
 8017a12:	2234      	movs	r2, #52	; 0x34
 8017a14:	4619      	mov	r1, r3
 8017a16:	6878      	ldr	r0, [r7, #4]
 8017a18:	f006 fb98 	bl	801e14c <memcpy>
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	e000      	b.n	8017a22 <USBH_MSC_GetLUNInfo+0x40>
 8017a20:	2302      	movs	r3, #2
 8017a22:	4618      	mov	r0, r3
 8017a24:	3718      	adds	r7, #24
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}

08017a2a <USBH_MSC_Read>:
 8017a2a:	b580      	push	{r7, lr}
 8017a2c:	b088      	sub	sp, #32
 8017a2e:	af02      	add	r7, sp, #8
 8017a30:	60f8      	str	r0, [r7, #12]
 8017a32:	607a      	str	r2, [r7, #4]
 8017a34:	603b      	str	r3, [r7, #0]
 8017a36:	460b      	mov	r3, r1
 8017a38:	72fb      	strb	r3, [r7, #11]
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017a40:	69db      	ldr	r3, [r3, #28]
 8017a42:	617b      	str	r3, [r7, #20]
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017a4a:	b2db      	uxtb	r3, r3
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d00e      	beq.n	8017a6e <USBH_MSC_Read+0x44>
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	781b      	ldrb	r3, [r3, #0]
 8017a54:	b2db      	uxtb	r3, r3
 8017a56:	2b0b      	cmp	r3, #11
 8017a58:	d109      	bne.n	8017a6e <USBH_MSC_Read+0x44>
 8017a5a:	7afb      	ldrb	r3, [r7, #11]
 8017a5c:	697a      	ldr	r2, [r7, #20]
 8017a5e:	2134      	movs	r1, #52	; 0x34
 8017a60:	fb01 f303 	mul.w	r3, r1, r3
 8017a64:	4413      	add	r3, r2
 8017a66:	3390      	adds	r3, #144	; 0x90
 8017a68:	781b      	ldrb	r3, [r3, #0]
 8017a6a:	2b01      	cmp	r3, #1
 8017a6c:	d001      	beq.n	8017a72 <USBH_MSC_Read+0x48>
 8017a6e:	2302      	movs	r3, #2
 8017a70:	e040      	b.n	8017af4 <USBH_MSC_Read+0xca>
 8017a72:	697b      	ldr	r3, [r7, #20]
 8017a74:	2206      	movs	r2, #6
 8017a76:	731a      	strb	r2, [r3, #12]
 8017a78:	7afb      	ldrb	r3, [r7, #11]
 8017a7a:	697a      	ldr	r2, [r7, #20]
 8017a7c:	2134      	movs	r1, #52	; 0x34
 8017a7e:	fb01 f303 	mul.w	r3, r1, r3
 8017a82:	4413      	add	r3, r2
 8017a84:	3390      	adds	r3, #144	; 0x90
 8017a86:	2206      	movs	r2, #6
 8017a88:	701a      	strb	r2, [r3, #0]
 8017a8a:	7afb      	ldrb	r3, [r7, #11]
 8017a8c:	b29a      	uxth	r2, r3
 8017a8e:	697b      	ldr	r3, [r7, #20]
 8017a90:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 8017a94:	7af9      	ldrb	r1, [r7, #11]
 8017a96:	6a3b      	ldr	r3, [r7, #32]
 8017a98:	9300      	str	r3, [sp, #0]
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	687a      	ldr	r2, [r7, #4]
 8017a9e:	68f8      	ldr	r0, [r7, #12]
 8017aa0:	f000 fd7b 	bl	801859a <USBH_MSC_SCSI_Read>
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017aaa:	613b      	str	r3, [r7, #16]
 8017aac:	e016      	b.n	8017adc <USBH_MSC_Read+0xb2>
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8017ab4:	693b      	ldr	r3, [r7, #16]
 8017ab6:	1ad2      	subs	r2, r2, r3
 8017ab8:	6a3b      	ldr	r3, [r7, #32]
 8017aba:	f242 7110 	movw	r1, #10000	; 0x2710
 8017abe:	fb01 f303 	mul.w	r3, r1, r3
 8017ac2:	429a      	cmp	r2, r3
 8017ac4:	d805      	bhi.n	8017ad2 <USBH_MSC_Read+0xa8>
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017acc:	b2db      	uxtb	r3, r3
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d104      	bne.n	8017adc <USBH_MSC_Read+0xb2>
 8017ad2:	697b      	ldr	r3, [r7, #20]
 8017ad4:	2201      	movs	r2, #1
 8017ad6:	731a      	strb	r2, [r3, #12]
 8017ad8:	2302      	movs	r3, #2
 8017ada:	e00b      	b.n	8017af4 <USBH_MSC_Read+0xca>
 8017adc:	7afb      	ldrb	r3, [r7, #11]
 8017ade:	4619      	mov	r1, r3
 8017ae0:	68f8      	ldr	r0, [r7, #12]
 8017ae2:	f7ff fe8e 	bl	8017802 <USBH_MSC_RdWrProcess>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	2b01      	cmp	r3, #1
 8017aea:	d0e0      	beq.n	8017aae <USBH_MSC_Read+0x84>
 8017aec:	697b      	ldr	r3, [r7, #20]
 8017aee:	2201      	movs	r2, #1
 8017af0:	731a      	strb	r2, [r3, #12]
 8017af2:	2300      	movs	r3, #0
 8017af4:	4618      	mov	r0, r3
 8017af6:	3718      	adds	r7, #24
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}

08017afc <USBH_MSC_Write>:
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b088      	sub	sp, #32
 8017b00:	af02      	add	r7, sp, #8
 8017b02:	60f8      	str	r0, [r7, #12]
 8017b04:	607a      	str	r2, [r7, #4]
 8017b06:	603b      	str	r3, [r7, #0]
 8017b08:	460b      	mov	r3, r1
 8017b0a:	72fb      	strb	r3, [r7, #11]
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017b12:	69db      	ldr	r3, [r3, #28]
 8017b14:	617b      	str	r3, [r7, #20]
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017b1c:	b2db      	uxtb	r3, r3
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d00e      	beq.n	8017b40 <USBH_MSC_Write+0x44>
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	781b      	ldrb	r3, [r3, #0]
 8017b26:	b2db      	uxtb	r3, r3
 8017b28:	2b0b      	cmp	r3, #11
 8017b2a:	d109      	bne.n	8017b40 <USBH_MSC_Write+0x44>
 8017b2c:	7afb      	ldrb	r3, [r7, #11]
 8017b2e:	697a      	ldr	r2, [r7, #20]
 8017b30:	2134      	movs	r1, #52	; 0x34
 8017b32:	fb01 f303 	mul.w	r3, r1, r3
 8017b36:	4413      	add	r3, r2
 8017b38:	3390      	adds	r3, #144	; 0x90
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	d001      	beq.n	8017b44 <USBH_MSC_Write+0x48>
 8017b40:	2302      	movs	r3, #2
 8017b42:	e040      	b.n	8017bc6 <USBH_MSC_Write+0xca>
 8017b44:	697b      	ldr	r3, [r7, #20]
 8017b46:	2207      	movs	r2, #7
 8017b48:	731a      	strb	r2, [r3, #12]
 8017b4a:	7afb      	ldrb	r3, [r7, #11]
 8017b4c:	697a      	ldr	r2, [r7, #20]
 8017b4e:	2134      	movs	r1, #52	; 0x34
 8017b50:	fb01 f303 	mul.w	r3, r1, r3
 8017b54:	4413      	add	r3, r2
 8017b56:	3390      	adds	r3, #144	; 0x90
 8017b58:	2207      	movs	r2, #7
 8017b5a:	701a      	strb	r2, [r3, #0]
 8017b5c:	7afb      	ldrb	r3, [r7, #11]
 8017b5e:	b29a      	uxth	r2, r3
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 8017b66:	7af9      	ldrb	r1, [r7, #11]
 8017b68:	6a3b      	ldr	r3, [r7, #32]
 8017b6a:	9300      	str	r3, [sp, #0]
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	687a      	ldr	r2, [r7, #4]
 8017b70:	68f8      	ldr	r0, [r7, #12]
 8017b72:	f000 fca7 	bl	80184c4 <USBH_MSC_SCSI_Write>
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017b7c:	613b      	str	r3, [r7, #16]
 8017b7e:	e016      	b.n	8017bae <USBH_MSC_Write+0xb2>
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8017b86:	693b      	ldr	r3, [r7, #16]
 8017b88:	1ad2      	subs	r2, r2, r3
 8017b8a:	6a3b      	ldr	r3, [r7, #32]
 8017b8c:	f242 7110 	movw	r1, #10000	; 0x2710
 8017b90:	fb01 f303 	mul.w	r3, r1, r3
 8017b94:	429a      	cmp	r2, r3
 8017b96:	d805      	bhi.n	8017ba4 <USBH_MSC_Write+0xa8>
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8017b9e:	b2db      	uxtb	r3, r3
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d104      	bne.n	8017bae <USBH_MSC_Write+0xb2>
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	2201      	movs	r2, #1
 8017ba8:	731a      	strb	r2, [r3, #12]
 8017baa:	2302      	movs	r3, #2
 8017bac:	e00b      	b.n	8017bc6 <USBH_MSC_Write+0xca>
 8017bae:	7afb      	ldrb	r3, [r7, #11]
 8017bb0:	4619      	mov	r1, r3
 8017bb2:	68f8      	ldr	r0, [r7, #12]
 8017bb4:	f7ff fe25 	bl	8017802 <USBH_MSC_RdWrProcess>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	2b01      	cmp	r3, #1
 8017bbc:	d0e0      	beq.n	8017b80 <USBH_MSC_Write+0x84>
 8017bbe:	697b      	ldr	r3, [r7, #20]
 8017bc0:	2201      	movs	r2, #1
 8017bc2:	731a      	strb	r2, [r3, #12]
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	3718      	adds	r7, #24
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}

08017bce <USBH_MSC_BOT_REQ_Reset>:
 8017bce:	b580      	push	{r7, lr}
 8017bd0:	b082      	sub	sp, #8
 8017bd2:	af00      	add	r7, sp, #0
 8017bd4:	6078      	str	r0, [r7, #4]
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	2221      	movs	r2, #33	; 0x21
 8017bda:	741a      	strb	r2, [r3, #16]
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	22ff      	movs	r2, #255	; 0xff
 8017be0:	745a      	strb	r2, [r3, #17]
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	2200      	movs	r2, #0
 8017be6:	825a      	strh	r2, [r3, #18]
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	2200      	movs	r2, #0
 8017bec:	829a      	strh	r2, [r3, #20]
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	82da      	strh	r2, [r3, #22]
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	2100      	movs	r1, #0
 8017bf8:	6878      	ldr	r0, [r7, #4]
 8017bfa:	f001 fdae 	bl	801975a <USBH_CtlReq>
 8017bfe:	4603      	mov	r3, r0
 8017c00:	4618      	mov	r0, r3
 8017c02:	3708      	adds	r7, #8
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}

08017c08 <USBH_MSC_BOT_REQ_GetMaxLUN>:
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b082      	sub	sp, #8
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	6039      	str	r1, [r7, #0]
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	22a1      	movs	r2, #161	; 0xa1
 8017c16:	741a      	strb	r2, [r3, #16]
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	22fe      	movs	r2, #254	; 0xfe
 8017c1c:	745a      	strb	r2, [r3, #17]
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	2200      	movs	r2, #0
 8017c22:	825a      	strh	r2, [r3, #18]
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	2200      	movs	r2, #0
 8017c28:	829a      	strh	r2, [r3, #20]
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	2201      	movs	r2, #1
 8017c2e:	82da      	strh	r2, [r3, #22]
 8017c30:	2201      	movs	r2, #1
 8017c32:	6839      	ldr	r1, [r7, #0]
 8017c34:	6878      	ldr	r0, [r7, #4]
 8017c36:	f001 fd90 	bl	801975a <USBH_CtlReq>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3708      	adds	r7, #8
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <USBH_MSC_BOT_Init>:
 8017c44:	b480      	push	{r7}
 8017c46:	b085      	sub	sp, #20
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017c52:	69db      	ldr	r3, [r3, #28]
 8017c54:	60fb      	str	r3, [r7, #12]
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	4a09      	ldr	r2, [pc, #36]	; (8017c80 <USBH_MSC_BOT_Init+0x3c>)
 8017c5a:	655a      	str	r2, [r3, #84]	; 0x54
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	4a09      	ldr	r2, [pc, #36]	; (8017c84 <USBH_MSC_BOT_Init+0x40>)
 8017c60:	659a      	str	r2, [r3, #88]	; 0x58
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	2201      	movs	r2, #1
 8017c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	2201      	movs	r2, #1
 8017c6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8017c72:	2300      	movs	r3, #0
 8017c74:	4618      	mov	r0, r3
 8017c76:	3714      	adds	r7, #20
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7e:	4770      	bx	lr
 8017c80:	43425355 	.word	0x43425355
 8017c84:	20304050 	.word	0x20304050

08017c88 <USBH_MSC_BOT_Process>:
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b088      	sub	sp, #32
 8017c8c:	af02      	add	r7, sp, #8
 8017c8e:	6078      	str	r0, [r7, #4]
 8017c90:	460b      	mov	r3, r1
 8017c92:	70fb      	strb	r3, [r7, #3]
 8017c94:	2301      	movs	r3, #1
 8017c96:	75fb      	strb	r3, [r7, #23]
 8017c98:	2301      	movs	r3, #1
 8017c9a:	75bb      	strb	r3, [r7, #22]
 8017c9c:	2301      	movs	r3, #1
 8017c9e:	757b      	strb	r3, [r7, #21]
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	753b      	strb	r3, [r7, #20]
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8017caa:	69db      	ldr	r3, [r3, #28]
 8017cac:	613b      	str	r3, [r7, #16]
 8017cae:	2300      	movs	r3, #0
 8017cb0:	73fb      	strb	r3, [r7, #15]
 8017cb2:	693b      	ldr	r3, [r7, #16]
 8017cb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017cb8:	3b01      	subs	r3, #1
 8017cba:	2b0a      	cmp	r3, #10
 8017cbc:	f200 81a1 	bhi.w	8018002 <USBH_MSC_BOT_Process+0x37a>
 8017cc0:	a201      	add	r2, pc, #4	; (adr r2, 8017cc8 <USBH_MSC_BOT_Process+0x40>)
 8017cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cc6:	bf00      	nop
 8017cc8:	08017cf5 	.word	0x08017cf5
 8017ccc:	08017d1f 	.word	0x08017d1f
 8017cd0:	08017d89 	.word	0x08017d89
 8017cd4:	08017da7 	.word	0x08017da7
 8017cd8:	08017e2b 	.word	0x08017e2b
 8017cdc:	08017e4f 	.word	0x08017e4f
 8017ce0:	08017ee9 	.word	0x08017ee9
 8017ce4:	08017f05 	.word	0x08017f05
 8017ce8:	08017f57 	.word	0x08017f57
 8017cec:	08017f87 	.word	0x08017f87
 8017cf0:	08017fe9 	.word	0x08017fe9
 8017cf4:	693b      	ldr	r3, [r7, #16]
 8017cf6:	78fa      	ldrb	r2, [r7, #3]
 8017cf8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8017cfc:	693b      	ldr	r3, [r7, #16]
 8017cfe:	2202      	movs	r2, #2
 8017d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017d04:	693b      	ldr	r3, [r7, #16]
 8017d06:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8017d0a:	693b      	ldr	r3, [r7, #16]
 8017d0c:	795a      	ldrb	r2, [r3, #5]
 8017d0e:	2301      	movs	r3, #1
 8017d10:	9300      	str	r3, [sp, #0]
 8017d12:	4613      	mov	r3, r2
 8017d14:	221f      	movs	r2, #31
 8017d16:	6878      	ldr	r0, [r7, #4]
 8017d18:	f001 ff2f 	bl	8019b7a <USBH_BulkSendData>
 8017d1c:	e180      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 8017d1e:	693b      	ldr	r3, [r7, #16]
 8017d20:	795b      	ldrb	r3, [r3, #5]
 8017d22:	4619      	mov	r1, r3
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f006 f8ef 	bl	801df08 <USBH_LL_GetURBState>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	753b      	strb	r3, [r7, #20]
 8017d2e:	7d3b      	ldrb	r3, [r7, #20]
 8017d30:	2b01      	cmp	r3, #1
 8017d32:	d118      	bne.n	8017d66 <USBH_MSC_BOT_Process+0xde>
 8017d34:	693b      	ldr	r3, [r7, #16]
 8017d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d00f      	beq.n	8017d5c <USBH_MSC_BOT_Process+0xd4>
 8017d3c:	693b      	ldr	r3, [r7, #16]
 8017d3e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8017d42:	b25b      	sxtb	r3, r3
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	da04      	bge.n	8017d52 <USBH_MSC_BOT_Process+0xca>
 8017d48:	693b      	ldr	r3, [r7, #16]
 8017d4a:	2203      	movs	r2, #3
 8017d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017d50:	e159      	b.n	8018006 <USBH_MSC_BOT_Process+0x37e>
 8017d52:	693b      	ldr	r3, [r7, #16]
 8017d54:	2205      	movs	r2, #5
 8017d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017d5a:	e154      	b.n	8018006 <USBH_MSC_BOT_Process+0x37e>
 8017d5c:	693b      	ldr	r3, [r7, #16]
 8017d5e:	2207      	movs	r2, #7
 8017d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017d64:	e14f      	b.n	8018006 <USBH_MSC_BOT_Process+0x37e>
 8017d66:	7d3b      	ldrb	r3, [r7, #20]
 8017d68:	2b02      	cmp	r3, #2
 8017d6a:	d104      	bne.n	8017d76 <USBH_MSC_BOT_Process+0xee>
 8017d6c:	693b      	ldr	r3, [r7, #16]
 8017d6e:	2201      	movs	r2, #1
 8017d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017d74:	e147      	b.n	8018006 <USBH_MSC_BOT_Process+0x37e>
 8017d76:	7d3b      	ldrb	r3, [r7, #20]
 8017d78:	2b05      	cmp	r3, #5
 8017d7a:	f040 8144 	bne.w	8018006 <USBH_MSC_BOT_Process+0x37e>
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	220a      	movs	r2, #10
 8017d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017d86:	e13e      	b.n	8018006 <USBH_MSC_BOT_Process+0x37e>
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	895a      	ldrh	r2, [r3, #10]
 8017d92:	693b      	ldr	r3, [r7, #16]
 8017d94:	791b      	ldrb	r3, [r3, #4]
 8017d96:	6878      	ldr	r0, [r7, #4]
 8017d98:	f001 ff14 	bl	8019bc4 <USBH_BulkReceiveData>
 8017d9c:	693b      	ldr	r3, [r7, #16]
 8017d9e:	2204      	movs	r2, #4
 8017da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017da4:	e13c      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 8017da6:	693b      	ldr	r3, [r7, #16]
 8017da8:	791b      	ldrb	r3, [r3, #4]
 8017daa:	4619      	mov	r1, r3
 8017dac:	6878      	ldr	r0, [r7, #4]
 8017dae:	f006 f8ab 	bl	801df08 <USBH_LL_GetURBState>
 8017db2:	4603      	mov	r3, r0
 8017db4:	753b      	strb	r3, [r7, #20]
 8017db6:	7d3b      	ldrb	r3, [r7, #20]
 8017db8:	2b01      	cmp	r3, #1
 8017dba:	d12d      	bne.n	8017e18 <USBH_MSC_BOT_Process+0x190>
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017dc0:	693a      	ldr	r2, [r7, #16]
 8017dc2:	8952      	ldrh	r2, [r2, #10]
 8017dc4:	4293      	cmp	r3, r2
 8017dc6:	d910      	bls.n	8017dea <USBH_MSC_BOT_Process+0x162>
 8017dc8:	693b      	ldr	r3, [r7, #16]
 8017dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017dce:	693a      	ldr	r2, [r7, #16]
 8017dd0:	8952      	ldrh	r2, [r2, #10]
 8017dd2:	441a      	add	r2, r3
 8017dd4:	693b      	ldr	r3, [r7, #16]
 8017dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017dde:	693a      	ldr	r2, [r7, #16]
 8017de0:	8952      	ldrh	r2, [r2, #10]
 8017de2:	1a9a      	subs	r2, r3, r2
 8017de4:	693b      	ldr	r3, [r7, #16]
 8017de6:	65da      	str	r2, [r3, #92]	; 0x5c
 8017de8:	e002      	b.n	8017df0 <USBH_MSC_BOT_Process+0x168>
 8017dea:	693b      	ldr	r3, [r7, #16]
 8017dec:	2200      	movs	r2, #0
 8017dee:	65da      	str	r2, [r3, #92]	; 0x5c
 8017df0:	693b      	ldr	r3, [r7, #16]
 8017df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d00a      	beq.n	8017e0e <USBH_MSC_BOT_Process+0x186>
 8017df8:	693b      	ldr	r3, [r7, #16]
 8017dfa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017dfe:	693b      	ldr	r3, [r7, #16]
 8017e00:	895a      	ldrh	r2, [r3, #10]
 8017e02:	693b      	ldr	r3, [r7, #16]
 8017e04:	791b      	ldrb	r3, [r3, #4]
 8017e06:	6878      	ldr	r0, [r7, #4]
 8017e08:	f001 fedc 	bl	8019bc4 <USBH_BulkReceiveData>
 8017e0c:	e0fd      	b.n	801800a <USBH_MSC_BOT_Process+0x382>
 8017e0e:	693b      	ldr	r3, [r7, #16]
 8017e10:	2207      	movs	r2, #7
 8017e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017e16:	e0f8      	b.n	801800a <USBH_MSC_BOT_Process+0x382>
 8017e18:	7d3b      	ldrb	r3, [r7, #20]
 8017e1a:	2b05      	cmp	r3, #5
 8017e1c:	f040 80f5 	bne.w	801800a <USBH_MSC_BOT_Process+0x382>
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	2209      	movs	r2, #9
 8017e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017e28:	e0ef      	b.n	801800a <USBH_MSC_BOT_Process+0x382>
 8017e2a:	693b      	ldr	r3, [r7, #16]
 8017e2c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017e30:	693b      	ldr	r3, [r7, #16]
 8017e32:	891a      	ldrh	r2, [r3, #8]
 8017e34:	693b      	ldr	r3, [r7, #16]
 8017e36:	7958      	ldrb	r0, [r3, #5]
 8017e38:	2301      	movs	r3, #1
 8017e3a:	9300      	str	r3, [sp, #0]
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	6878      	ldr	r0, [r7, #4]
 8017e40:	f001 fe9b 	bl	8019b7a <USBH_BulkSendData>
 8017e44:	693b      	ldr	r3, [r7, #16]
 8017e46:	2206      	movs	r2, #6
 8017e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017e4c:	e0e8      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 8017e4e:	693b      	ldr	r3, [r7, #16]
 8017e50:	795b      	ldrb	r3, [r3, #5]
 8017e52:	4619      	mov	r1, r3
 8017e54:	6878      	ldr	r0, [r7, #4]
 8017e56:	f006 f857 	bl	801df08 <USBH_LL_GetURBState>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	753b      	strb	r3, [r7, #20]
 8017e5e:	7d3b      	ldrb	r3, [r7, #20]
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	d130      	bne.n	8017ec6 <USBH_MSC_BOT_Process+0x23e>
 8017e64:	693b      	ldr	r3, [r7, #16]
 8017e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e68:	693a      	ldr	r2, [r7, #16]
 8017e6a:	8912      	ldrh	r2, [r2, #8]
 8017e6c:	4293      	cmp	r3, r2
 8017e6e:	d910      	bls.n	8017e92 <USBH_MSC_BOT_Process+0x20a>
 8017e70:	693b      	ldr	r3, [r7, #16]
 8017e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e76:	693a      	ldr	r2, [r7, #16]
 8017e78:	8912      	ldrh	r2, [r2, #8]
 8017e7a:	441a      	add	r2, r3
 8017e7c:	693b      	ldr	r3, [r7, #16]
 8017e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e86:	693a      	ldr	r2, [r7, #16]
 8017e88:	8912      	ldrh	r2, [r2, #8]
 8017e8a:	1a9a      	subs	r2, r3, r2
 8017e8c:	693b      	ldr	r3, [r7, #16]
 8017e8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8017e90:	e002      	b.n	8017e98 <USBH_MSC_BOT_Process+0x210>
 8017e92:	693b      	ldr	r3, [r7, #16]
 8017e94:	2200      	movs	r2, #0
 8017e96:	65da      	str	r2, [r3, #92]	; 0x5c
 8017e98:	693b      	ldr	r3, [r7, #16]
 8017e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d00d      	beq.n	8017ebc <USBH_MSC_BOT_Process+0x234>
 8017ea0:	693b      	ldr	r3, [r7, #16]
 8017ea2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8017ea6:	693b      	ldr	r3, [r7, #16]
 8017ea8:	891a      	ldrh	r2, [r3, #8]
 8017eaa:	693b      	ldr	r3, [r7, #16]
 8017eac:	7958      	ldrb	r0, [r3, #5]
 8017eae:	2301      	movs	r3, #1
 8017eb0:	9300      	str	r3, [sp, #0]
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	6878      	ldr	r0, [r7, #4]
 8017eb6:	f001 fe60 	bl	8019b7a <USBH_BulkSendData>
 8017eba:	e0a8      	b.n	801800e <USBH_MSC_BOT_Process+0x386>
 8017ebc:	693b      	ldr	r3, [r7, #16]
 8017ebe:	2207      	movs	r2, #7
 8017ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017ec4:	e0a3      	b.n	801800e <USBH_MSC_BOT_Process+0x386>
 8017ec6:	7d3b      	ldrb	r3, [r7, #20]
 8017ec8:	2b02      	cmp	r3, #2
 8017eca:	d104      	bne.n	8017ed6 <USBH_MSC_BOT_Process+0x24e>
 8017ecc:	693b      	ldr	r3, [r7, #16]
 8017ece:	2205      	movs	r2, #5
 8017ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017ed4:	e09b      	b.n	801800e <USBH_MSC_BOT_Process+0x386>
 8017ed6:	7d3b      	ldrb	r3, [r7, #20]
 8017ed8:	2b05      	cmp	r3, #5
 8017eda:	f040 8098 	bne.w	801800e <USBH_MSC_BOT_Process+0x386>
 8017ede:	693b      	ldr	r3, [r7, #16]
 8017ee0:	220a      	movs	r2, #10
 8017ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017ee6:	e092      	b.n	801800e <USBH_MSC_BOT_Process+0x386>
 8017ee8:	693b      	ldr	r3, [r7, #16]
 8017eea:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8017eee:	693b      	ldr	r3, [r7, #16]
 8017ef0:	791b      	ldrb	r3, [r3, #4]
 8017ef2:	220d      	movs	r2, #13
 8017ef4:	6878      	ldr	r0, [r7, #4]
 8017ef6:	f001 fe65 	bl	8019bc4 <USBH_BulkReceiveData>
 8017efa:	693b      	ldr	r3, [r7, #16]
 8017efc:	2208      	movs	r2, #8
 8017efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017f02:	e08d      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 8017f04:	693b      	ldr	r3, [r7, #16]
 8017f06:	791b      	ldrb	r3, [r3, #4]
 8017f08:	4619      	mov	r1, r3
 8017f0a:	6878      	ldr	r0, [r7, #4]
 8017f0c:	f005 fffc 	bl	801df08 <USBH_LL_GetURBState>
 8017f10:	4603      	mov	r3, r0
 8017f12:	753b      	strb	r3, [r7, #20]
 8017f14:	7d3b      	ldrb	r3, [r7, #20]
 8017f16:	2b01      	cmp	r3, #1
 8017f18:	d115      	bne.n	8017f46 <USBH_MSC_BOT_Process+0x2be>
 8017f1a:	693b      	ldr	r3, [r7, #16]
 8017f1c:	2201      	movs	r2, #1
 8017f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017f22:	693b      	ldr	r3, [r7, #16]
 8017f24:	2201      	movs	r2, #1
 8017f26:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8017f2a:	6878      	ldr	r0, [r7, #4]
 8017f2c:	f000 f8aa 	bl	8018084 <USBH_MSC_DecodeCSW>
 8017f30:	4603      	mov	r3, r0
 8017f32:	757b      	strb	r3, [r7, #21]
 8017f34:	7d7b      	ldrb	r3, [r7, #21]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d102      	bne.n	8017f40 <USBH_MSC_BOT_Process+0x2b8>
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	75fb      	strb	r3, [r7, #23]
 8017f3e:	e068      	b.n	8018012 <USBH_MSC_BOT_Process+0x38a>
 8017f40:	2302      	movs	r3, #2
 8017f42:	75fb      	strb	r3, [r7, #23]
 8017f44:	e065      	b.n	8018012 <USBH_MSC_BOT_Process+0x38a>
 8017f46:	7d3b      	ldrb	r3, [r7, #20]
 8017f48:	2b05      	cmp	r3, #5
 8017f4a:	d162      	bne.n	8018012 <USBH_MSC_BOT_Process+0x38a>
 8017f4c:	693b      	ldr	r3, [r7, #16]
 8017f4e:	2209      	movs	r2, #9
 8017f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017f54:	e05d      	b.n	8018012 <USBH_MSC_BOT_Process+0x38a>
 8017f56:	78fb      	ldrb	r3, [r7, #3]
 8017f58:	2200      	movs	r2, #0
 8017f5a:	4619      	mov	r1, r3
 8017f5c:	6878      	ldr	r0, [r7, #4]
 8017f5e:	f000 f865 	bl	801802c <USBH_MSC_BOT_Abort>
 8017f62:	4603      	mov	r3, r0
 8017f64:	75bb      	strb	r3, [r7, #22]
 8017f66:	7dbb      	ldrb	r3, [r7, #22]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d104      	bne.n	8017f76 <USBH_MSC_BOT_Process+0x2ee>
 8017f6c:	693b      	ldr	r3, [r7, #16]
 8017f6e:	2207      	movs	r2, #7
 8017f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017f74:	e04f      	b.n	8018016 <USBH_MSC_BOT_Process+0x38e>
 8017f76:	7dbb      	ldrb	r3, [r7, #22]
 8017f78:	2b04      	cmp	r3, #4
 8017f7a:	d14c      	bne.n	8018016 <USBH_MSC_BOT_Process+0x38e>
 8017f7c:	693b      	ldr	r3, [r7, #16]
 8017f7e:	220b      	movs	r2, #11
 8017f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017f84:	e047      	b.n	8018016 <USBH_MSC_BOT_Process+0x38e>
 8017f86:	78fb      	ldrb	r3, [r7, #3]
 8017f88:	2201      	movs	r2, #1
 8017f8a:	4619      	mov	r1, r3
 8017f8c:	6878      	ldr	r0, [r7, #4]
 8017f8e:	f000 f84d 	bl	801802c <USBH_MSC_BOT_Abort>
 8017f92:	4603      	mov	r3, r0
 8017f94:	75bb      	strb	r3, [r7, #22]
 8017f96:	7dbb      	ldrb	r3, [r7, #22]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d11d      	bne.n	8017fd8 <USBH_MSC_BOT_Process+0x350>
 8017f9c:	693b      	ldr	r3, [r7, #16]
 8017f9e:	795b      	ldrb	r3, [r3, #5]
 8017fa0:	4619      	mov	r1, r3
 8017fa2:	6878      	ldr	r0, [r7, #4]
 8017fa4:	f006 f80d 	bl	801dfc2 <USBH_LL_GetToggle>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	73fb      	strb	r3, [r7, #15]
 8017fac:	693b      	ldr	r3, [r7, #16]
 8017fae:	7959      	ldrb	r1, [r3, #5]
 8017fb0:	7bfb      	ldrb	r3, [r7, #15]
 8017fb2:	f1c3 0301 	rsb	r3, r3, #1
 8017fb6:	b2db      	uxtb	r3, r3
 8017fb8:	461a      	mov	r2, r3
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f005 ffce 	bl	801df5c <USBH_LL_SetToggle>
 8017fc0:	693b      	ldr	r3, [r7, #16]
 8017fc2:	791b      	ldrb	r3, [r3, #4]
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	4619      	mov	r1, r3
 8017fc8:	6878      	ldr	r0, [r7, #4]
 8017fca:	f005 ffc7 	bl	801df5c <USBH_LL_SetToggle>
 8017fce:	693b      	ldr	r3, [r7, #16]
 8017fd0:	2209      	movs	r2, #9
 8017fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017fd6:	e020      	b.n	801801a <USBH_MSC_BOT_Process+0x392>
 8017fd8:	7dbb      	ldrb	r3, [r7, #22]
 8017fda:	2b04      	cmp	r3, #4
 8017fdc:	d11d      	bne.n	801801a <USBH_MSC_BOT_Process+0x392>
 8017fde:	693b      	ldr	r3, [r7, #16]
 8017fe0:	220b      	movs	r2, #11
 8017fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8017fe6:	e018      	b.n	801801a <USBH_MSC_BOT_Process+0x392>
 8017fe8:	6878      	ldr	r0, [r7, #4]
 8017fea:	f7ff fdf0 	bl	8017bce <USBH_MSC_BOT_REQ_Reset>
 8017fee:	4603      	mov	r3, r0
 8017ff0:	75fb      	strb	r3, [r7, #23]
 8017ff2:	7dfb      	ldrb	r3, [r7, #23]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d112      	bne.n	801801e <USBH_MSC_BOT_Process+0x396>
 8017ff8:	693b      	ldr	r3, [r7, #16]
 8017ffa:	2201      	movs	r2, #1
 8017ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8018000:	e00d      	b.n	801801e <USBH_MSC_BOT_Process+0x396>
 8018002:	bf00      	nop
 8018004:	e00c      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 8018006:	bf00      	nop
 8018008:	e00a      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 801800a:	bf00      	nop
 801800c:	e008      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 801800e:	bf00      	nop
 8018010:	e006      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 8018012:	bf00      	nop
 8018014:	e004      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 8018016:	bf00      	nop
 8018018:	e002      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 801801a:	bf00      	nop
 801801c:	e000      	b.n	8018020 <USBH_MSC_BOT_Process+0x398>
 801801e:	bf00      	nop
 8018020:	7dfb      	ldrb	r3, [r7, #23]
 8018022:	4618      	mov	r0, r3
 8018024:	3718      	adds	r7, #24
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop

0801802c <USBH_MSC_BOT_Abort>:
 801802c:	b580      	push	{r7, lr}
 801802e:	b084      	sub	sp, #16
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
 8018034:	460b      	mov	r3, r1
 8018036:	70fb      	strb	r3, [r7, #3]
 8018038:	4613      	mov	r3, r2
 801803a:	70bb      	strb	r3, [r7, #2]
 801803c:	2302      	movs	r3, #2
 801803e:	73fb      	strb	r3, [r7, #15]
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018046:	69db      	ldr	r3, [r3, #28]
 8018048:	60bb      	str	r3, [r7, #8]
 801804a:	78bb      	ldrb	r3, [r7, #2]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d002      	beq.n	8018056 <USBH_MSC_BOT_Abort+0x2a>
 8018050:	2b01      	cmp	r3, #1
 8018052:	d009      	beq.n	8018068 <USBH_MSC_BOT_Abort+0x3c>
 8018054:	e011      	b.n	801807a <USBH_MSC_BOT_Abort+0x4e>
 8018056:	68bb      	ldr	r3, [r7, #8]
 8018058:	79db      	ldrb	r3, [r3, #7]
 801805a:	4619      	mov	r1, r3
 801805c:	6878      	ldr	r0, [r7, #4]
 801805e:	f001 f99c 	bl	801939a <USBH_ClrFeature>
 8018062:	4603      	mov	r3, r0
 8018064:	73fb      	strb	r3, [r7, #15]
 8018066:	e008      	b.n	801807a <USBH_MSC_BOT_Abort+0x4e>
 8018068:	68bb      	ldr	r3, [r7, #8]
 801806a:	799b      	ldrb	r3, [r3, #6]
 801806c:	4619      	mov	r1, r3
 801806e:	6878      	ldr	r0, [r7, #4]
 8018070:	f001 f993 	bl	801939a <USBH_ClrFeature>
 8018074:	4603      	mov	r3, r0
 8018076:	73fb      	strb	r3, [r7, #15]
 8018078:	bf00      	nop
 801807a:	7bfb      	ldrb	r3, [r7, #15]
 801807c:	4618      	mov	r0, r3
 801807e:	3710      	adds	r7, #16
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}

08018084 <USBH_MSC_DecodeCSW>:
 8018084:	b580      	push	{r7, lr}
 8018086:	b084      	sub	sp, #16
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018092:	69db      	ldr	r3, [r3, #28]
 8018094:	60bb      	str	r3, [r7, #8]
 8018096:	2301      	movs	r3, #1
 8018098:	73fb      	strb	r3, [r7, #15]
 801809a:	68bb      	ldr	r3, [r7, #8]
 801809c:	791b      	ldrb	r3, [r3, #4]
 801809e:	4619      	mov	r1, r3
 80180a0:	6878      	ldr	r0, [r7, #4]
 80180a2:	f005 fe9f 	bl	801dde4 <USBH_LL_GetLastXferSize>
 80180a6:	4603      	mov	r3, r0
 80180a8:	2b0d      	cmp	r3, #13
 80180aa:	d002      	beq.n	80180b2 <USBH_MSC_DecodeCSW+0x2e>
 80180ac:	2302      	movs	r3, #2
 80180ae:	73fb      	strb	r3, [r7, #15]
 80180b0:	e024      	b.n	80180fc <USBH_MSC_DecodeCSW+0x78>
 80180b2:	68bb      	ldr	r3, [r7, #8]
 80180b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80180b6:	4a14      	ldr	r2, [pc, #80]	; (8018108 <USBH_MSC_DecodeCSW+0x84>)
 80180b8:	4293      	cmp	r3, r2
 80180ba:	d11d      	bne.n	80180f8 <USBH_MSC_DecodeCSW+0x74>
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80180c0:	68bb      	ldr	r3, [r7, #8]
 80180c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80180c4:	429a      	cmp	r2, r3
 80180c6:	d119      	bne.n	80180fc <USBH_MSC_DecodeCSW+0x78>
 80180c8:	68bb      	ldr	r3, [r7, #8]
 80180ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d102      	bne.n	80180d8 <USBH_MSC_DecodeCSW+0x54>
 80180d2:	2300      	movs	r3, #0
 80180d4:	73fb      	strb	r3, [r7, #15]
 80180d6:	e011      	b.n	80180fc <USBH_MSC_DecodeCSW+0x78>
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80180de:	2b01      	cmp	r3, #1
 80180e0:	d102      	bne.n	80180e8 <USBH_MSC_DecodeCSW+0x64>
 80180e2:	2301      	movs	r3, #1
 80180e4:	73fb      	strb	r3, [r7, #15]
 80180e6:	e009      	b.n	80180fc <USBH_MSC_DecodeCSW+0x78>
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80180ee:	2b02      	cmp	r3, #2
 80180f0:	d104      	bne.n	80180fc <USBH_MSC_DecodeCSW+0x78>
 80180f2:	2302      	movs	r3, #2
 80180f4:	73fb      	strb	r3, [r7, #15]
 80180f6:	e001      	b.n	80180fc <USBH_MSC_DecodeCSW+0x78>
 80180f8:	2302      	movs	r3, #2
 80180fa:	73fb      	strb	r3, [r7, #15]
 80180fc:	7bfb      	ldrb	r3, [r7, #15]
 80180fe:	4618      	mov	r0, r3
 8018100:	3710      	adds	r7, #16
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}
 8018106:	bf00      	nop
 8018108:	53425355 	.word	0x53425355

0801810c <USBH_MSC_SCSI_TestUnitReady>:
 801810c:	b580      	push	{r7, lr}
 801810e:	b084      	sub	sp, #16
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
 8018114:	460b      	mov	r3, r1
 8018116:	70fb      	strb	r3, [r7, #3]
 8018118:	2302      	movs	r3, #2
 801811a:	73fb      	strb	r3, [r7, #15]
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018122:	69db      	ldr	r3, [r3, #28]
 8018124:	60bb      	str	r3, [r7, #8]
 8018126:	68bb      	ldr	r3, [r7, #8]
 8018128:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801812c:	2b01      	cmp	r3, #1
 801812e:	d002      	beq.n	8018136 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8018130:	2b02      	cmp	r3, #2
 8018132:	d021      	beq.n	8018178 <USBH_MSC_SCSI_TestUnitReady+0x6c>
 8018134:	e028      	b.n	8018188 <USBH_MSC_SCSI_TestUnitReady+0x7c>
 8018136:	68bb      	ldr	r3, [r7, #8]
 8018138:	2200      	movs	r2, #0
 801813a:	65da      	str	r2, [r3, #92]	; 0x5c
 801813c:	68bb      	ldr	r3, [r7, #8]
 801813e:	2200      	movs	r2, #0
 8018140:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8018144:	68bb      	ldr	r3, [r7, #8]
 8018146:	220a      	movs	r2, #10
 8018148:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 801814c:	68bb      	ldr	r3, [r7, #8]
 801814e:	3363      	adds	r3, #99	; 0x63
 8018150:	2210      	movs	r2, #16
 8018152:	2100      	movs	r1, #0
 8018154:	4618      	mov	r0, r3
 8018156:	f006 f804 	bl	801e162 <memset>
 801815a:	68bb      	ldr	r3, [r7, #8]
 801815c:	2200      	movs	r2, #0
 801815e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8018162:	68bb      	ldr	r3, [r7, #8]
 8018164:	2201      	movs	r2, #1
 8018166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	2202      	movs	r2, #2
 801816e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8018172:	2301      	movs	r3, #1
 8018174:	73fb      	strb	r3, [r7, #15]
 8018176:	e007      	b.n	8018188 <USBH_MSC_SCSI_TestUnitReady+0x7c>
 8018178:	78fb      	ldrb	r3, [r7, #3]
 801817a:	4619      	mov	r1, r3
 801817c:	6878      	ldr	r0, [r7, #4]
 801817e:	f7ff fd83 	bl	8017c88 <USBH_MSC_BOT_Process>
 8018182:	4603      	mov	r3, r0
 8018184:	73fb      	strb	r3, [r7, #15]
 8018186:	bf00      	nop
 8018188:	7bfb      	ldrb	r3, [r7, #15]
 801818a:	4618      	mov	r0, r3
 801818c:	3710      	adds	r7, #16
 801818e:	46bd      	mov	sp, r7
 8018190:	bd80      	pop	{r7, pc}

08018192 <USBH_MSC_SCSI_ReadCapacity>:
 8018192:	b580      	push	{r7, lr}
 8018194:	b086      	sub	sp, #24
 8018196:	af00      	add	r7, sp, #0
 8018198:	60f8      	str	r0, [r7, #12]
 801819a:	460b      	mov	r3, r1
 801819c:	607a      	str	r2, [r7, #4]
 801819e:	72fb      	strb	r3, [r7, #11]
 80181a0:	2301      	movs	r3, #1
 80181a2:	75fb      	strb	r3, [r7, #23]
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80181aa:	69db      	ldr	r3, [r3, #28]
 80181ac:	613b      	str	r3, [r7, #16]
 80181ae:	693b      	ldr	r3, [r7, #16]
 80181b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80181b4:	2b01      	cmp	r3, #1
 80181b6:	d002      	beq.n	80181be <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80181b8:	2b02      	cmp	r3, #2
 80181ba:	d027      	beq.n	801820c <USBH_MSC_SCSI_ReadCapacity+0x7a>
 80181bc:	e05f      	b.n	801827e <USBH_MSC_SCSI_ReadCapacity+0xec>
 80181be:	693b      	ldr	r3, [r7, #16]
 80181c0:	2208      	movs	r2, #8
 80181c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80181c4:	693b      	ldr	r3, [r7, #16]
 80181c6:	2280      	movs	r2, #128	; 0x80
 80181c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80181cc:	693b      	ldr	r3, [r7, #16]
 80181ce:	220a      	movs	r2, #10
 80181d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80181d4:	693b      	ldr	r3, [r7, #16]
 80181d6:	3363      	adds	r3, #99	; 0x63
 80181d8:	2210      	movs	r2, #16
 80181da:	2100      	movs	r1, #0
 80181dc:	4618      	mov	r0, r3
 80181de:	f005 ffc0 	bl	801e162 <memset>
 80181e2:	693b      	ldr	r3, [r7, #16]
 80181e4:	2225      	movs	r2, #37	; 0x25
 80181e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80181ea:	693b      	ldr	r3, [r7, #16]
 80181ec:	2201      	movs	r2, #1
 80181ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80181f2:	693b      	ldr	r3, [r7, #16]
 80181f4:	2202      	movs	r2, #2
 80181f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80181fa:	693b      	ldr	r3, [r7, #16]
 80181fc:	f103 0210 	add.w	r2, r3, #16
 8018200:	693b      	ldr	r3, [r7, #16]
 8018202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8018206:	2301      	movs	r3, #1
 8018208:	75fb      	strb	r3, [r7, #23]
 801820a:	e038      	b.n	801827e <USBH_MSC_SCSI_ReadCapacity+0xec>
 801820c:	7afb      	ldrb	r3, [r7, #11]
 801820e:	4619      	mov	r1, r3
 8018210:	68f8      	ldr	r0, [r7, #12]
 8018212:	f7ff fd39 	bl	8017c88 <USBH_MSC_BOT_Process>
 8018216:	4603      	mov	r3, r0
 8018218:	75fb      	strb	r3, [r7, #23]
 801821a:	7dfb      	ldrb	r3, [r7, #23]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d12d      	bne.n	801827c <USBH_MSC_SCSI_ReadCapacity+0xea>
 8018220:	693b      	ldr	r3, [r7, #16]
 8018222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018226:	3303      	adds	r3, #3
 8018228:	781b      	ldrb	r3, [r3, #0]
 801822a:	461a      	mov	r2, r3
 801822c:	693b      	ldr	r3, [r7, #16]
 801822e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018232:	3302      	adds	r3, #2
 8018234:	781b      	ldrb	r3, [r3, #0]
 8018236:	021b      	lsls	r3, r3, #8
 8018238:	431a      	orrs	r2, r3
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018240:	3301      	adds	r3, #1
 8018242:	781b      	ldrb	r3, [r3, #0]
 8018244:	041b      	lsls	r3, r3, #16
 8018246:	431a      	orrs	r2, r3
 8018248:	693b      	ldr	r3, [r7, #16]
 801824a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801824e:	781b      	ldrb	r3, [r3, #0]
 8018250:	061b      	lsls	r3, r3, #24
 8018252:	431a      	orrs	r2, r3
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	601a      	str	r2, [r3, #0]
 8018258:	693b      	ldr	r3, [r7, #16]
 801825a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801825e:	3307      	adds	r3, #7
 8018260:	781b      	ldrb	r3, [r3, #0]
 8018262:	b29a      	uxth	r2, r3
 8018264:	693b      	ldr	r3, [r7, #16]
 8018266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801826a:	3306      	adds	r3, #6
 801826c:	781b      	ldrb	r3, [r3, #0]
 801826e:	b29b      	uxth	r3, r3
 8018270:	021b      	lsls	r3, r3, #8
 8018272:	b29b      	uxth	r3, r3
 8018274:	4313      	orrs	r3, r2
 8018276:	b29a      	uxth	r2, r3
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	809a      	strh	r2, [r3, #4]
 801827c:	bf00      	nop
 801827e:	7dfb      	ldrb	r3, [r7, #23]
 8018280:	4618      	mov	r0, r3
 8018282:	3718      	adds	r7, #24
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}

08018288 <USBH_MSC_SCSI_Inquiry>:
 8018288:	b580      	push	{r7, lr}
 801828a:	b086      	sub	sp, #24
 801828c:	af00      	add	r7, sp, #0
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	460b      	mov	r3, r1
 8018292:	607a      	str	r2, [r7, #4]
 8018294:	72fb      	strb	r3, [r7, #11]
 8018296:	2302      	movs	r3, #2
 8018298:	75fb      	strb	r3, [r7, #23]
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80182a0:	69db      	ldr	r3, [r3, #28]
 80182a2:	613b      	str	r3, [r7, #16]
 80182a4:	693b      	ldr	r3, [r7, #16]
 80182a6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80182aa:	2b01      	cmp	r3, #1
 80182ac:	d002      	beq.n	80182b4 <USBH_MSC_SCSI_Inquiry+0x2c>
 80182ae:	2b02      	cmp	r3, #2
 80182b0:	d03d      	beq.n	801832e <USBH_MSC_SCSI_Inquiry+0xa6>
 80182b2:	e089      	b.n	80183c8 <USBH_MSC_SCSI_Inquiry+0x140>
 80182b4:	693b      	ldr	r3, [r7, #16]
 80182b6:	2224      	movs	r2, #36	; 0x24
 80182b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80182ba:	693b      	ldr	r3, [r7, #16]
 80182bc:	2280      	movs	r2, #128	; 0x80
 80182be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80182c2:	693b      	ldr	r3, [r7, #16]
 80182c4:	220a      	movs	r2, #10
 80182c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80182ca:	693b      	ldr	r3, [r7, #16]
 80182cc:	3363      	adds	r3, #99	; 0x63
 80182ce:	220a      	movs	r2, #10
 80182d0:	2100      	movs	r1, #0
 80182d2:	4618      	mov	r0, r3
 80182d4:	f005 ff45 	bl	801e162 <memset>
 80182d8:	693b      	ldr	r3, [r7, #16]
 80182da:	2212      	movs	r2, #18
 80182dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80182e0:	7afb      	ldrb	r3, [r7, #11]
 80182e2:	015b      	lsls	r3, r3, #5
 80182e4:	b2da      	uxtb	r2, r3
 80182e6:	693b      	ldr	r3, [r7, #16]
 80182e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80182ec:	693b      	ldr	r3, [r7, #16]
 80182ee:	2200      	movs	r2, #0
 80182f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80182f4:	693b      	ldr	r3, [r7, #16]
 80182f6:	2200      	movs	r2, #0
 80182f8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80182fc:	693b      	ldr	r3, [r7, #16]
 80182fe:	2224      	movs	r2, #36	; 0x24
 8018300:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8018304:	693b      	ldr	r3, [r7, #16]
 8018306:	2200      	movs	r2, #0
 8018308:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801830c:	693b      	ldr	r3, [r7, #16]
 801830e:	2201      	movs	r2, #1
 8018310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8018314:	693b      	ldr	r3, [r7, #16]
 8018316:	2202      	movs	r2, #2
 8018318:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 801831c:	693b      	ldr	r3, [r7, #16]
 801831e:	f103 0210 	add.w	r2, r3, #16
 8018322:	693b      	ldr	r3, [r7, #16]
 8018324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8018328:	2301      	movs	r3, #1
 801832a:	75fb      	strb	r3, [r7, #23]
 801832c:	e04c      	b.n	80183c8 <USBH_MSC_SCSI_Inquiry+0x140>
 801832e:	7afb      	ldrb	r3, [r7, #11]
 8018330:	4619      	mov	r1, r3
 8018332:	68f8      	ldr	r0, [r7, #12]
 8018334:	f7ff fca8 	bl	8017c88 <USBH_MSC_BOT_Process>
 8018338:	4603      	mov	r3, r0
 801833a:	75fb      	strb	r3, [r7, #23]
 801833c:	7dfb      	ldrb	r3, [r7, #23]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d141      	bne.n	80183c6 <USBH_MSC_SCSI_Inquiry+0x13e>
 8018342:	2222      	movs	r2, #34	; 0x22
 8018344:	2100      	movs	r1, #0
 8018346:	6878      	ldr	r0, [r7, #4]
 8018348:	f005 ff0b 	bl	801e162 <memset>
 801834c:	693b      	ldr	r3, [r7, #16]
 801834e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	f003 031f 	and.w	r3, r3, #31
 8018358:	b2da      	uxtb	r2, r3
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	705a      	strb	r2, [r3, #1]
 801835e:	693b      	ldr	r3, [r7, #16]
 8018360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018364:	781b      	ldrb	r3, [r3, #0]
 8018366:	095b      	lsrs	r3, r3, #5
 8018368:	b2da      	uxtb	r2, r3
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	701a      	strb	r2, [r3, #0]
 801836e:	693b      	ldr	r3, [r7, #16]
 8018370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018374:	3301      	adds	r3, #1
 8018376:	781b      	ldrb	r3, [r3, #0]
 8018378:	b25b      	sxtb	r3, r3
 801837a:	2b00      	cmp	r3, #0
 801837c:	da03      	bge.n	8018386 <USBH_MSC_SCSI_Inquiry+0xfe>
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	2201      	movs	r2, #1
 8018382:	709a      	strb	r2, [r3, #2]
 8018384:	e002      	b.n	801838c <USBH_MSC_SCSI_Inquiry+0x104>
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	2200      	movs	r2, #0
 801838a:	709a      	strb	r2, [r3, #2]
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	1cd8      	adds	r0, r3, #3
 8018390:	693b      	ldr	r3, [r7, #16]
 8018392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018396:	3308      	adds	r3, #8
 8018398:	2208      	movs	r2, #8
 801839a:	4619      	mov	r1, r3
 801839c:	f005 fed6 	bl	801e14c <memcpy>
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	f103 000c 	add.w	r0, r3, #12
 80183a6:	693b      	ldr	r3, [r7, #16]
 80183a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80183ac:	3310      	adds	r3, #16
 80183ae:	2210      	movs	r2, #16
 80183b0:	4619      	mov	r1, r3
 80183b2:	f005 fecb 	bl	801e14c <memcpy>
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	331d      	adds	r3, #29
 80183ba:	693a      	ldr	r2, [r7, #16]
 80183bc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80183c0:	3220      	adds	r2, #32
 80183c2:	6812      	ldr	r2, [r2, #0]
 80183c4:	601a      	str	r2, [r3, #0]
 80183c6:	bf00      	nop
 80183c8:	7dfb      	ldrb	r3, [r7, #23]
 80183ca:	4618      	mov	r0, r3
 80183cc:	3718      	adds	r7, #24
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}

080183d2 <USBH_MSC_SCSI_RequestSense>:
 80183d2:	b580      	push	{r7, lr}
 80183d4:	b086      	sub	sp, #24
 80183d6:	af00      	add	r7, sp, #0
 80183d8:	60f8      	str	r0, [r7, #12]
 80183da:	460b      	mov	r3, r1
 80183dc:	607a      	str	r2, [r7, #4]
 80183de:	72fb      	strb	r3, [r7, #11]
 80183e0:	2302      	movs	r3, #2
 80183e2:	75fb      	strb	r3, [r7, #23]
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80183ea:	69db      	ldr	r3, [r3, #28]
 80183ec:	613b      	str	r3, [r7, #16]
 80183ee:	693b      	ldr	r3, [r7, #16]
 80183f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80183f4:	2b01      	cmp	r3, #1
 80183f6:	d002      	beq.n	80183fe <USBH_MSC_SCSI_RequestSense+0x2c>
 80183f8:	2b02      	cmp	r3, #2
 80183fa:	d03d      	beq.n	8018478 <USBH_MSC_SCSI_RequestSense+0xa6>
 80183fc:	e05d      	b.n	80184ba <USBH_MSC_SCSI_RequestSense+0xe8>
 80183fe:	693b      	ldr	r3, [r7, #16]
 8018400:	220e      	movs	r2, #14
 8018402:	65da      	str	r2, [r3, #92]	; 0x5c
 8018404:	693b      	ldr	r3, [r7, #16]
 8018406:	2280      	movs	r2, #128	; 0x80
 8018408:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	220a      	movs	r2, #10
 8018410:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8018414:	693b      	ldr	r3, [r7, #16]
 8018416:	3363      	adds	r3, #99	; 0x63
 8018418:	2210      	movs	r2, #16
 801841a:	2100      	movs	r1, #0
 801841c:	4618      	mov	r0, r3
 801841e:	f005 fea0 	bl	801e162 <memset>
 8018422:	693b      	ldr	r3, [r7, #16]
 8018424:	2203      	movs	r2, #3
 8018426:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 801842a:	7afb      	ldrb	r3, [r7, #11]
 801842c:	015b      	lsls	r3, r3, #5
 801842e:	b2da      	uxtb	r2, r3
 8018430:	693b      	ldr	r3, [r7, #16]
 8018432:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8018436:	693b      	ldr	r3, [r7, #16]
 8018438:	2200      	movs	r2, #0
 801843a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801843e:	693b      	ldr	r3, [r7, #16]
 8018440:	2200      	movs	r2, #0
 8018442:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8018446:	693b      	ldr	r3, [r7, #16]
 8018448:	220e      	movs	r2, #14
 801844a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	2200      	movs	r2, #0
 8018452:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8018456:	693b      	ldr	r3, [r7, #16]
 8018458:	2201      	movs	r2, #1
 801845a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	2202      	movs	r2, #2
 8018462:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8018466:	693b      	ldr	r3, [r7, #16]
 8018468:	f103 0210 	add.w	r2, r3, #16
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8018472:	2301      	movs	r3, #1
 8018474:	75fb      	strb	r3, [r7, #23]
 8018476:	e020      	b.n	80184ba <USBH_MSC_SCSI_RequestSense+0xe8>
 8018478:	7afb      	ldrb	r3, [r7, #11]
 801847a:	4619      	mov	r1, r3
 801847c:	68f8      	ldr	r0, [r7, #12]
 801847e:	f7ff fc03 	bl	8017c88 <USBH_MSC_BOT_Process>
 8018482:	4603      	mov	r3, r0
 8018484:	75fb      	strb	r3, [r7, #23]
 8018486:	7dfb      	ldrb	r3, [r7, #23]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d115      	bne.n	80184b8 <USBH_MSC_SCSI_RequestSense+0xe6>
 801848c:	693b      	ldr	r3, [r7, #16]
 801848e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018492:	3302      	adds	r3, #2
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	f003 030f 	and.w	r3, r3, #15
 801849a:	b2da      	uxtb	r2, r3
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	701a      	strb	r2, [r3, #0]
 80184a0:	693b      	ldr	r3, [r7, #16]
 80184a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80184a6:	7b1a      	ldrb	r2, [r3, #12]
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	705a      	strb	r2, [r3, #1]
 80184ac:	693b      	ldr	r3, [r7, #16]
 80184ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80184b2:	7b5a      	ldrb	r2, [r3, #13]
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	709a      	strb	r2, [r3, #2]
 80184b8:	bf00      	nop
 80184ba:	7dfb      	ldrb	r3, [r7, #23]
 80184bc:	4618      	mov	r0, r3
 80184be:	3718      	adds	r7, #24
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bd80      	pop	{r7, pc}

080184c4 <USBH_MSC_SCSI_Write>:
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b086      	sub	sp, #24
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	60f8      	str	r0, [r7, #12]
 80184cc:	607a      	str	r2, [r7, #4]
 80184ce:	603b      	str	r3, [r7, #0]
 80184d0:	460b      	mov	r3, r1
 80184d2:	72fb      	strb	r3, [r7, #11]
 80184d4:	2302      	movs	r3, #2
 80184d6:	75fb      	strb	r3, [r7, #23]
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80184de:	69db      	ldr	r3, [r3, #28]
 80184e0:	613b      	str	r3, [r7, #16]
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80184e8:	2b01      	cmp	r3, #1
 80184ea:	d002      	beq.n	80184f2 <USBH_MSC_SCSI_Write+0x2e>
 80184ec:	2b02      	cmp	r3, #2
 80184ee:	d047      	beq.n	8018580 <USBH_MSC_SCSI_Write+0xbc>
 80184f0:	e04e      	b.n	8018590 <USBH_MSC_SCSI_Write+0xcc>
 80184f2:	693b      	ldr	r3, [r7, #16]
 80184f4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80184f8:	461a      	mov	r2, r3
 80184fa:	6a3b      	ldr	r3, [r7, #32]
 80184fc:	fb03 f202 	mul.w	r2, r3, r2
 8018500:	693b      	ldr	r3, [r7, #16]
 8018502:	65da      	str	r2, [r3, #92]	; 0x5c
 8018504:	693b      	ldr	r3, [r7, #16]
 8018506:	2200      	movs	r2, #0
 8018508:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 801850c:	693b      	ldr	r3, [r7, #16]
 801850e:	220a      	movs	r2, #10
 8018510:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8018514:	693b      	ldr	r3, [r7, #16]
 8018516:	3363      	adds	r3, #99	; 0x63
 8018518:	2210      	movs	r2, #16
 801851a:	2100      	movs	r1, #0
 801851c:	4618      	mov	r0, r3
 801851e:	f005 fe20 	bl	801e162 <memset>
 8018522:	693b      	ldr	r3, [r7, #16]
 8018524:	222a      	movs	r2, #42	; 0x2a
 8018526:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 801852a:	79fa      	ldrb	r2, [r7, #7]
 801852c:	693b      	ldr	r3, [r7, #16]
 801852e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8018532:	79ba      	ldrb	r2, [r7, #6]
 8018534:	693b      	ldr	r3, [r7, #16]
 8018536:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801853a:	797a      	ldrb	r2, [r7, #5]
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8018542:	1d3b      	adds	r3, r7, #4
 8018544:	781a      	ldrb	r2, [r3, #0]
 8018546:	693b      	ldr	r3, [r7, #16]
 8018548:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801854c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8018550:	693b      	ldr	r3, [r7, #16]
 8018552:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8018556:	f107 0320 	add.w	r3, r7, #32
 801855a:	781a      	ldrb	r2, [r3, #0]
 801855c:	693b      	ldr	r3, [r7, #16]
 801855e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	2201      	movs	r2, #1
 8018566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	2202      	movs	r2, #2
 801856e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8018572:	693b      	ldr	r3, [r7, #16]
 8018574:	683a      	ldr	r2, [r7, #0]
 8018576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801857a:	2301      	movs	r3, #1
 801857c:	75fb      	strb	r3, [r7, #23]
 801857e:	e007      	b.n	8018590 <USBH_MSC_SCSI_Write+0xcc>
 8018580:	7afb      	ldrb	r3, [r7, #11]
 8018582:	4619      	mov	r1, r3
 8018584:	68f8      	ldr	r0, [r7, #12]
 8018586:	f7ff fb7f 	bl	8017c88 <USBH_MSC_BOT_Process>
 801858a:	4603      	mov	r3, r0
 801858c:	75fb      	strb	r3, [r7, #23]
 801858e:	bf00      	nop
 8018590:	7dfb      	ldrb	r3, [r7, #23]
 8018592:	4618      	mov	r0, r3
 8018594:	3718      	adds	r7, #24
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}

0801859a <USBH_MSC_SCSI_Read>:
 801859a:	b580      	push	{r7, lr}
 801859c:	b086      	sub	sp, #24
 801859e:	af00      	add	r7, sp, #0
 80185a0:	60f8      	str	r0, [r7, #12]
 80185a2:	607a      	str	r2, [r7, #4]
 80185a4:	603b      	str	r3, [r7, #0]
 80185a6:	460b      	mov	r3, r1
 80185a8:	72fb      	strb	r3, [r7, #11]
 80185aa:	2302      	movs	r3, #2
 80185ac:	75fb      	strb	r3, [r7, #23]
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80185b4:	69db      	ldr	r3, [r3, #28]
 80185b6:	613b      	str	r3, [r7, #16]
 80185b8:	693b      	ldr	r3, [r7, #16]
 80185ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80185be:	2b01      	cmp	r3, #1
 80185c0:	d002      	beq.n	80185c8 <USBH_MSC_SCSI_Read+0x2e>
 80185c2:	2b02      	cmp	r3, #2
 80185c4:	d047      	beq.n	8018656 <USBH_MSC_SCSI_Read+0xbc>
 80185c6:	e04e      	b.n	8018666 <USBH_MSC_SCSI_Read+0xcc>
 80185c8:	693b      	ldr	r3, [r7, #16]
 80185ca:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80185ce:	461a      	mov	r2, r3
 80185d0:	6a3b      	ldr	r3, [r7, #32]
 80185d2:	fb03 f202 	mul.w	r2, r3, r2
 80185d6:	693b      	ldr	r3, [r7, #16]
 80185d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80185da:	693b      	ldr	r3, [r7, #16]
 80185dc:	2280      	movs	r2, #128	; 0x80
 80185de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80185e2:	693b      	ldr	r3, [r7, #16]
 80185e4:	220a      	movs	r2, #10
 80185e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80185ea:	693b      	ldr	r3, [r7, #16]
 80185ec:	3363      	adds	r3, #99	; 0x63
 80185ee:	2210      	movs	r2, #16
 80185f0:	2100      	movs	r1, #0
 80185f2:	4618      	mov	r0, r3
 80185f4:	f005 fdb5 	bl	801e162 <memset>
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	2228      	movs	r2, #40	; 0x28
 80185fc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8018600:	79fa      	ldrb	r2, [r7, #7]
 8018602:	693b      	ldr	r3, [r7, #16]
 8018604:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8018608:	79ba      	ldrb	r2, [r7, #6]
 801860a:	693b      	ldr	r3, [r7, #16]
 801860c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8018610:	797a      	ldrb	r2, [r7, #5]
 8018612:	693b      	ldr	r3, [r7, #16]
 8018614:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8018618:	1d3b      	adds	r3, r7, #4
 801861a:	781a      	ldrb	r2, [r3, #0]
 801861c:	693b      	ldr	r3, [r7, #16]
 801861e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8018622:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8018626:	693b      	ldr	r3, [r7, #16]
 8018628:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801862c:	f107 0320 	add.w	r3, r7, #32
 8018630:	781a      	ldrb	r2, [r3, #0]
 8018632:	693b      	ldr	r3, [r7, #16]
 8018634:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8018638:	693b      	ldr	r3, [r7, #16]
 801863a:	2201      	movs	r2, #1
 801863c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8018640:	693b      	ldr	r3, [r7, #16]
 8018642:	2202      	movs	r2, #2
 8018644:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8018648:	693b      	ldr	r3, [r7, #16]
 801864a:	683a      	ldr	r2, [r7, #0]
 801864c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8018650:	2301      	movs	r3, #1
 8018652:	75fb      	strb	r3, [r7, #23]
 8018654:	e007      	b.n	8018666 <USBH_MSC_SCSI_Read+0xcc>
 8018656:	7afb      	ldrb	r3, [r7, #11]
 8018658:	4619      	mov	r1, r3
 801865a:	68f8      	ldr	r0, [r7, #12]
 801865c:	f7ff fb14 	bl	8017c88 <USBH_MSC_BOT_Process>
 8018660:	4603      	mov	r3, r0
 8018662:	75fb      	strb	r3, [r7, #23]
 8018664:	bf00      	nop
 8018666:	7dfb      	ldrb	r3, [r7, #23]
 8018668:	4618      	mov	r0, r3
 801866a:	3718      	adds	r7, #24
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}

08018670 <USBH_Init>:
 8018670:	b580      	push	{r7, lr}
 8018672:	b084      	sub	sp, #16
 8018674:	af00      	add	r7, sp, #0
 8018676:	60f8      	str	r0, [r7, #12]
 8018678:	60b9      	str	r1, [r7, #8]
 801867a:	4613      	mov	r3, r2
 801867c:	71fb      	strb	r3, [r7, #7]
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d101      	bne.n	8018688 <USBH_Init+0x18>
 8018684:	2302      	movs	r3, #2
 8018686:	e029      	b.n	80186dc <USBH_Init+0x6c>
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	79fa      	ldrb	r2, [r7, #7]
 801868c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	2200      	movs	r2, #0
 8018694:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	2200      	movs	r2, #0
 801869c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 80186a0:	68f8      	ldr	r0, [r7, #12]
 80186a2:	f000 f81f 	bl	80186e4 <DeInitStateMachine>
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	2200      	movs	r2, #0
 80186aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	2200      	movs	r2, #0
 80186b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	2200      	movs	r2, #0
 80186ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	2200      	movs	r2, #0
 80186c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80186c6:	68bb      	ldr	r3, [r7, #8]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d003      	beq.n	80186d4 <USBH_Init+0x64>
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	68ba      	ldr	r2, [r7, #8]
 80186d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
 80186d4:	68f8      	ldr	r0, [r7, #12]
 80186d6:	f005 fad3 	bl	801dc80 <USBH_LL_Init>
 80186da:	2300      	movs	r3, #0
 80186dc:	4618      	mov	r0, r3
 80186de:	3710      	adds	r7, #16
 80186e0:	46bd      	mov	sp, r7
 80186e2:	bd80      	pop	{r7, pc}

080186e4 <DeInitStateMachine>:
 80186e4:	b480      	push	{r7}
 80186e6:	b085      	sub	sp, #20
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
 80186ec:	2300      	movs	r3, #0
 80186ee:	60fb      	str	r3, [r7, #12]
 80186f0:	2300      	movs	r3, #0
 80186f2:	60fb      	str	r3, [r7, #12]
 80186f4:	e009      	b.n	801870a <DeInitStateMachine+0x26>
 80186f6:	687a      	ldr	r2, [r7, #4]
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	33e0      	adds	r3, #224	; 0xe0
 80186fc:	009b      	lsls	r3, r3, #2
 80186fe:	4413      	add	r3, r2
 8018700:	2200      	movs	r2, #0
 8018702:	605a      	str	r2, [r3, #4]
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	3301      	adds	r3, #1
 8018708:	60fb      	str	r3, [r7, #12]
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	2b0e      	cmp	r3, #14
 801870e:	d9f2      	bls.n	80186f6 <DeInitStateMachine+0x12>
 8018710:	2300      	movs	r3, #0
 8018712:	60fb      	str	r3, [r7, #12]
 8018714:	e009      	b.n	801872a <DeInitStateMachine+0x46>
 8018716:	687a      	ldr	r2, [r7, #4]
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	4413      	add	r3, r2
 801871c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8018720:	2200      	movs	r2, #0
 8018722:	701a      	strb	r2, [r3, #0]
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	3301      	adds	r3, #1
 8018728:	60fb      	str	r3, [r7, #12]
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018730:	d3f1      	bcc.n	8018716 <DeInitStateMachine+0x32>
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2200      	movs	r2, #0
 8018736:	701a      	strb	r2, [r3, #0]
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	2200      	movs	r2, #0
 801873c:	705a      	strb	r2, [r3, #1]
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	2201      	movs	r2, #1
 8018742:	709a      	strb	r2, [r3, #2]
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	2200      	movs	r2, #0
 8018748:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	2201      	movs	r2, #1
 8018750:	761a      	strb	r2, [r3, #24]
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	2240      	movs	r2, #64	; 0x40
 8018756:	719a      	strb	r2, [r3, #6]
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	2200      	movs	r2, #0
 801875c:	765a      	strb	r2, [r3, #25]
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	2200      	movs	r2, #0
 8018762:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	2201      	movs	r2, #1
 801876a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	2200      	movs	r2, #0
 8018772:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	2200      	movs	r2, #0
 801877a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
 801877e:	2300      	movs	r3, #0
 8018780:	4618      	mov	r0, r3
 8018782:	3714      	adds	r7, #20
 8018784:	46bd      	mov	sp, r7
 8018786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878a:	4770      	bx	lr

0801878c <USBH_RegisterClass>:
 801878c:	b480      	push	{r7}
 801878e:	b085      	sub	sp, #20
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
 8018794:	6039      	str	r1, [r7, #0]
 8018796:	2300      	movs	r3, #0
 8018798:	73fb      	strb	r3, [r7, #15]
 801879a:	683b      	ldr	r3, [r7, #0]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d016      	beq.n	80187ce <USBH_RegisterClass+0x42>
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d10e      	bne.n	80187c8 <USBH_RegisterClass+0x3c>
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80187b0:	1c59      	adds	r1, r3, #1
 80187b2:	687a      	ldr	r2, [r7, #4]
 80187b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80187b8:	687a      	ldr	r2, [r7, #4]
 80187ba:	33de      	adds	r3, #222	; 0xde
 80187bc:	6839      	ldr	r1, [r7, #0]
 80187be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80187c2:	2300      	movs	r3, #0
 80187c4:	73fb      	strb	r3, [r7, #15]
 80187c6:	e004      	b.n	80187d2 <USBH_RegisterClass+0x46>
 80187c8:	2302      	movs	r3, #2
 80187ca:	73fb      	strb	r3, [r7, #15]
 80187cc:	e001      	b.n	80187d2 <USBH_RegisterClass+0x46>
 80187ce:	2302      	movs	r3, #2
 80187d0:	73fb      	strb	r3, [r7, #15]
 80187d2:	7bfb      	ldrb	r3, [r7, #15]
 80187d4:	4618      	mov	r0, r3
 80187d6:	3714      	adds	r7, #20
 80187d8:	46bd      	mov	sp, r7
 80187da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187de:	4770      	bx	lr

080187e0 <USBH_SelectInterface>:
 80187e0:	b480      	push	{r7}
 80187e2:	b085      	sub	sp, #20
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	460b      	mov	r3, r1
 80187ea:	70fb      	strb	r3, [r7, #3]
 80187ec:	2300      	movs	r3, #0
 80187ee:	73fb      	strb	r3, [r7, #15]
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80187f6:	78fa      	ldrb	r2, [r7, #3]
 80187f8:	429a      	cmp	r2, r3
 80187fa:	d204      	bcs.n	8018806 <USBH_SelectInterface+0x26>
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	78fa      	ldrb	r2, [r7, #3]
 8018800:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8018804:	e001      	b.n	801880a <USBH_SelectInterface+0x2a>
 8018806:	2302      	movs	r3, #2
 8018808:	73fb      	strb	r3, [r7, #15]
 801880a:	7bfb      	ldrb	r3, [r7, #15]
 801880c:	4618      	mov	r0, r3
 801880e:	3714      	adds	r7, #20
 8018810:	46bd      	mov	sp, r7
 8018812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018816:	4770      	bx	lr

08018818 <USBH_FindInterface>:
 8018818:	b480      	push	{r7}
 801881a:	b087      	sub	sp, #28
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
 8018820:	4608      	mov	r0, r1
 8018822:	4611      	mov	r1, r2
 8018824:	461a      	mov	r2, r3
 8018826:	4603      	mov	r3, r0
 8018828:	70fb      	strb	r3, [r7, #3]
 801882a:	460b      	mov	r3, r1
 801882c:	70bb      	strb	r3, [r7, #2]
 801882e:	4613      	mov	r3, r2
 8018830:	707b      	strb	r3, [r7, #1]
 8018832:	2300      	movs	r3, #0
 8018834:	75fb      	strb	r3, [r7, #23]
 8018836:	2300      	movs	r3, #0
 8018838:	613b      	str	r3, [r7, #16]
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8018840:	60fb      	str	r3, [r7, #12]
 8018842:	e025      	b.n	8018890 <USBH_FindInterface+0x78>
 8018844:	7dfb      	ldrb	r3, [r7, #23]
 8018846:	221a      	movs	r2, #26
 8018848:	fb02 f303 	mul.w	r3, r2, r3
 801884c:	3308      	adds	r3, #8
 801884e:	68fa      	ldr	r2, [r7, #12]
 8018850:	4413      	add	r3, r2
 8018852:	3302      	adds	r3, #2
 8018854:	613b      	str	r3, [r7, #16]
 8018856:	693b      	ldr	r3, [r7, #16]
 8018858:	795b      	ldrb	r3, [r3, #5]
 801885a:	78fa      	ldrb	r2, [r7, #3]
 801885c:	429a      	cmp	r2, r3
 801885e:	d002      	beq.n	8018866 <USBH_FindInterface+0x4e>
 8018860:	78fb      	ldrb	r3, [r7, #3]
 8018862:	2bff      	cmp	r3, #255	; 0xff
 8018864:	d111      	bne.n	801888a <USBH_FindInterface+0x72>
 8018866:	693b      	ldr	r3, [r7, #16]
 8018868:	799b      	ldrb	r3, [r3, #6]
 801886a:	78ba      	ldrb	r2, [r7, #2]
 801886c:	429a      	cmp	r2, r3
 801886e:	d002      	beq.n	8018876 <USBH_FindInterface+0x5e>
 8018870:	78bb      	ldrb	r3, [r7, #2]
 8018872:	2bff      	cmp	r3, #255	; 0xff
 8018874:	d109      	bne.n	801888a <USBH_FindInterface+0x72>
 8018876:	693b      	ldr	r3, [r7, #16]
 8018878:	79db      	ldrb	r3, [r3, #7]
 801887a:	787a      	ldrb	r2, [r7, #1]
 801887c:	429a      	cmp	r2, r3
 801887e:	d002      	beq.n	8018886 <USBH_FindInterface+0x6e>
 8018880:	787b      	ldrb	r3, [r7, #1]
 8018882:	2bff      	cmp	r3, #255	; 0xff
 8018884:	d101      	bne.n	801888a <USBH_FindInterface+0x72>
 8018886:	7dfb      	ldrb	r3, [r7, #23]
 8018888:	e006      	b.n	8018898 <USBH_FindInterface+0x80>
 801888a:	7dfb      	ldrb	r3, [r7, #23]
 801888c:	3301      	adds	r3, #1
 801888e:	75fb      	strb	r3, [r7, #23]
 8018890:	7dfb      	ldrb	r3, [r7, #23]
 8018892:	2b01      	cmp	r3, #1
 8018894:	d9d6      	bls.n	8018844 <USBH_FindInterface+0x2c>
 8018896:	23ff      	movs	r3, #255	; 0xff
 8018898:	4618      	mov	r0, r3
 801889a:	371c      	adds	r7, #28
 801889c:	46bd      	mov	sp, r7
 801889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a2:	4770      	bx	lr

080188a4 <USBH_Start>:
 80188a4:	b580      	push	{r7, lr}
 80188a6:	b082      	sub	sp, #8
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
 80188ac:	6878      	ldr	r0, [r7, #4]
 80188ae:	f005 fa23 	bl	801dcf8 <USBH_LL_Start>
 80188b2:	2101      	movs	r1, #1
 80188b4:	6878      	ldr	r0, [r7, #4]
 80188b6:	f005 fb3a 	bl	801df2e <USBH_LL_DriverVBUS>
 80188ba:	2300      	movs	r3, #0
 80188bc:	4618      	mov	r0, r3
 80188be:	3708      	adds	r7, #8
 80188c0:	46bd      	mov	sp, r7
 80188c2:	bd80      	pop	{r7, pc}

080188c4 <USBH_Process>:
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b088      	sub	sp, #32
 80188c8:	af04      	add	r7, sp, #16
 80188ca:	6078      	str	r0, [r7, #4]
 80188cc:	2302      	movs	r3, #2
 80188ce:	73bb      	strb	r3, [r7, #14]
 80188d0:	2300      	movs	r3, #0
 80188d2:	73fb      	strb	r3, [r7, #15]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80188da:	b2db      	uxtb	r3, r3
 80188dc:	2b01      	cmp	r3, #1
 80188de:	d102      	bne.n	80188e6 <USBH_Process+0x22>
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2203      	movs	r2, #3
 80188e4:	701a      	strb	r2, [r3, #0]
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	b2db      	uxtb	r3, r3
 80188ec:	2b0b      	cmp	r3, #11
 80188ee:	f200 81b3 	bhi.w	8018c58 <USBH_Process+0x394>
 80188f2:	a201      	add	r2, pc, #4	; (adr r2, 80188f8 <USBH_Process+0x34>)
 80188f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188f8:	08018929 	.word	0x08018929
 80188fc:	0801895b 	.word	0x0801895b
 8018900:	080189c3 	.word	0x080189c3
 8018904:	08018bf3 	.word	0x08018bf3
 8018908:	08018c59 	.word	0x08018c59
 801890c:	08018a67 	.word	0x08018a67
 8018910:	08018b99 	.word	0x08018b99
 8018914:	08018a9d 	.word	0x08018a9d
 8018918:	08018abd 	.word	0x08018abd
 801891c:	08018add 	.word	0x08018add
 8018920:	08018b0b 	.word	0x08018b0b
 8018924:	08018bdb 	.word	0x08018bdb
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 801892e:	b2db      	uxtb	r3, r3
 8018930:	2b00      	cmp	r3, #0
 8018932:	f000 8193 	beq.w	8018c5c <USBH_Process+0x398>
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	2201      	movs	r2, #1
 801893a:	701a      	strb	r2, [r3, #0]
 801893c:	20c8      	movs	r0, #200	; 0xc8
 801893e:	f005 fb73 	bl	801e028 <USBH_Delay>
 8018942:	6878      	ldr	r0, [r7, #4]
 8018944:	f005 fa33 	bl	801ddae <USBH_LL_ResetPort>
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	2200      	movs	r2, #0
 801894c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	2200      	movs	r2, #0
 8018954:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
 8018958:	e180      	b.n	8018c5c <USBH_Process+0x398>
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8018960:	2b01      	cmp	r3, #1
 8018962:	d107      	bne.n	8018974 <USBH_Process+0xb0>
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	2200      	movs	r2, #0
 8018968:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2202      	movs	r2, #2
 8018970:	701a      	strb	r2, [r3, #0]
 8018972:	e182      	b.n	8018c7a <USBH_Process+0x3b6>
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801897a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801897e:	d914      	bls.n	80189aa <USBH_Process+0xe6>
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8018986:	3301      	adds	r3, #1
 8018988:	b2da      	uxtb	r2, r3
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8018996:	2b03      	cmp	r3, #3
 8018998:	d903      	bls.n	80189a2 <USBH_Process+0xde>
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	220d      	movs	r2, #13
 801899e:	701a      	strb	r2, [r3, #0]
 80189a0:	e16b      	b.n	8018c7a <USBH_Process+0x3b6>
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	2200      	movs	r2, #0
 80189a6:	701a      	strb	r2, [r3, #0]
 80189a8:	e167      	b.n	8018c7a <USBH_Process+0x3b6>
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80189b0:	f103 020a 	add.w	r2, r3, #10
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
 80189ba:	200a      	movs	r0, #10
 80189bc:	f005 fb34 	bl	801e028 <USBH_Delay>
 80189c0:	e15b      	b.n	8018c7a <USBH_Process+0x3b6>
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d005      	beq.n	80189d8 <USBH_Process+0x114>
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80189d2:	2104      	movs	r1, #4
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	4798      	blx	r3
 80189d8:	2064      	movs	r0, #100	; 0x64
 80189da:	f005 fb25 	bl	801e028 <USBH_Delay>
 80189de:	6878      	ldr	r0, [r7, #4]
 80189e0:	f005 f9c0 	bl	801dd64 <USBH_LL_GetSpeed>
 80189e4:	4603      	mov	r3, r0
 80189e6:	461a      	mov	r2, r3
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	2205      	movs	r2, #5
 80189f2:	701a      	strb	r2, [r3, #0]
 80189f4:	2100      	movs	r1, #0
 80189f6:	6878      	ldr	r0, [r7, #4]
 80189f8:	f001 f931 	bl	8019c5e <USBH_AllocPipe>
 80189fc:	4603      	mov	r3, r0
 80189fe:	461a      	mov	r2, r3
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	715a      	strb	r2, [r3, #5]
 8018a04:	2180      	movs	r1, #128	; 0x80
 8018a06:	6878      	ldr	r0, [r7, #4]
 8018a08:	f001 f929 	bl	8019c5e <USBH_AllocPipe>
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	461a      	mov	r2, r3
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	711a      	strb	r2, [r3, #4]
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	7919      	ldrb	r1, [r3, #4]
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8018a24:	687a      	ldr	r2, [r7, #4]
 8018a26:	7992      	ldrb	r2, [r2, #6]
 8018a28:	b292      	uxth	r2, r2
 8018a2a:	9202      	str	r2, [sp, #8]
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	9201      	str	r2, [sp, #4]
 8018a30:	9300      	str	r3, [sp, #0]
 8018a32:	4603      	mov	r3, r0
 8018a34:	2280      	movs	r2, #128	; 0x80
 8018a36:	6878      	ldr	r0, [r7, #4]
 8018a38:	f001 f8e2 	bl	8019c00 <USBH_OpenPipe>
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	7959      	ldrb	r1, [r3, #5]
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8018a4c:	687a      	ldr	r2, [r7, #4]
 8018a4e:	7992      	ldrb	r2, [r2, #6]
 8018a50:	b292      	uxth	r2, r2
 8018a52:	9202      	str	r2, [sp, #8]
 8018a54:	2200      	movs	r2, #0
 8018a56:	9201      	str	r2, [sp, #4]
 8018a58:	9300      	str	r3, [sp, #0]
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	6878      	ldr	r0, [r7, #4]
 8018a60:	f001 f8ce 	bl	8019c00 <USBH_OpenPipe>
 8018a64:	e109      	b.n	8018c7a <USBH_Process+0x3b6>
 8018a66:	6878      	ldr	r0, [r7, #4]
 8018a68:	f000 f90c 	bl	8018c84 <USBH_HandleEnum>
 8018a6c:	4603      	mov	r3, r0
 8018a6e:	73bb      	strb	r3, [r7, #14]
 8018a70:	7bbb      	ldrb	r3, [r7, #14]
 8018a72:	b2db      	uxtb	r3, r3
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	f040 80f3 	bne.w	8018c60 <USBH_Process+0x39c>
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8018a88:	2b01      	cmp	r3, #1
 8018a8a:	d103      	bne.n	8018a94 <USBH_Process+0x1d0>
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	2208      	movs	r2, #8
 8018a90:	701a      	strb	r2, [r3, #0]
 8018a92:	e0e5      	b.n	8018c60 <USBH_Process+0x39c>
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	2207      	movs	r2, #7
 8018a98:	701a      	strb	r2, [r3, #0]
 8018a9a:	e0e1      	b.n	8018c60 <USBH_Process+0x39c>
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	f000 80de 	beq.w	8018c64 <USBH_Process+0x3a0>
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018aae:	2101      	movs	r1, #1
 8018ab0:	6878      	ldr	r0, [r7, #4]
 8018ab2:	4798      	blx	r3
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	2208      	movs	r2, #8
 8018ab8:	701a      	strb	r2, [r3, #0]
 8018aba:	e0d3      	b.n	8018c64 <USBH_Process+0x3a0>
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8018ac2:	b29b      	uxth	r3, r3
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	6878      	ldr	r0, [r7, #4]
 8018ac8:	f000 fc20 	bl	801930c <USBH_SetCfg>
 8018acc:	4603      	mov	r3, r0
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	f040 80ca 	bne.w	8018c68 <USBH_Process+0x3a4>
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	2209      	movs	r2, #9
 8018ad8:	701a      	strb	r2, [r3, #0]
 8018ada:	e0c5      	b.n	8018c68 <USBH_Process+0x3a4>
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8018ae2:	f003 0320 	and.w	r3, r3, #32
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d00b      	beq.n	8018b02 <USBH_Process+0x23e>
 8018aea:	2101      	movs	r1, #1
 8018aec:	6878      	ldr	r0, [r7, #4]
 8018aee:	f000 fc30 	bl	8019352 <USBH_SetFeature>
 8018af2:	4603      	mov	r3, r0
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	f040 80b9 	bne.w	8018c6c <USBH_Process+0x3a8>
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	220a      	movs	r2, #10
 8018afe:	701a      	strb	r2, [r3, #0]
 8018b00:	e0b4      	b.n	8018c6c <USBH_Process+0x3a8>
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	220a      	movs	r2, #10
 8018b06:	701a      	strb	r2, [r3, #0]
 8018b08:	e0b0      	b.n	8018c6c <USBH_Process+0x3a8>
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	f000 80ad 	beq.w	8018c70 <USBH_Process+0x3ac>
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8018b1e:	2300      	movs	r3, #0
 8018b20:	73fb      	strb	r3, [r7, #15]
 8018b22:	e016      	b.n	8018b52 <USBH_Process+0x28e>
 8018b24:	7bfa      	ldrb	r2, [r7, #15]
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	32de      	adds	r2, #222	; 0xde
 8018b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b2e:	791a      	ldrb	r2, [r3, #4]
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8018b36:	429a      	cmp	r2, r3
 8018b38:	d108      	bne.n	8018b4c <USBH_Process+0x288>
 8018b3a:	7bfa      	ldrb	r2, [r7, #15]
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	32de      	adds	r2, #222	; 0xde
 8018b40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8018b4a:	e005      	b.n	8018b58 <USBH_Process+0x294>
 8018b4c:	7bfb      	ldrb	r3, [r7, #15]
 8018b4e:	3301      	adds	r3, #1
 8018b50:	73fb      	strb	r3, [r7, #15]
 8018b52:	7bfb      	ldrb	r3, [r7, #15]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d0e5      	beq.n	8018b24 <USBH_Process+0x260>
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d016      	beq.n	8018b90 <USBH_Process+0x2cc>
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018b68:	689b      	ldr	r3, [r3, #8]
 8018b6a:	6878      	ldr	r0, [r7, #4]
 8018b6c:	4798      	blx	r3
 8018b6e:	4603      	mov	r3, r0
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d109      	bne.n	8018b88 <USBH_Process+0x2c4>
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	2206      	movs	r2, #6
 8018b78:	701a      	strb	r2, [r3, #0]
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018b80:	2103      	movs	r1, #3
 8018b82:	6878      	ldr	r0, [r7, #4]
 8018b84:	4798      	blx	r3
 8018b86:	e073      	b.n	8018c70 <USBH_Process+0x3ac>
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	220d      	movs	r2, #13
 8018b8c:	701a      	strb	r2, [r3, #0]
 8018b8e:	e06f      	b.n	8018c70 <USBH_Process+0x3ac>
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	220d      	movs	r2, #13
 8018b94:	701a      	strb	r2, [r3, #0]
 8018b96:	e06b      	b.n	8018c70 <USBH_Process+0x3ac>
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d017      	beq.n	8018bd2 <USBH_Process+0x30e>
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018ba8:	691b      	ldr	r3, [r3, #16]
 8018baa:	6878      	ldr	r0, [r7, #4]
 8018bac:	4798      	blx	r3
 8018bae:	4603      	mov	r3, r0
 8018bb0:	73bb      	strb	r3, [r7, #14]
 8018bb2:	7bbb      	ldrb	r3, [r7, #14]
 8018bb4:	b2db      	uxtb	r3, r3
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d103      	bne.n	8018bc2 <USBH_Process+0x2fe>
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	220b      	movs	r2, #11
 8018bbe:	701a      	strb	r2, [r3, #0]
 8018bc0:	e058      	b.n	8018c74 <USBH_Process+0x3b0>
 8018bc2:	7bbb      	ldrb	r3, [r7, #14]
 8018bc4:	b2db      	uxtb	r3, r3
 8018bc6:	2b02      	cmp	r3, #2
 8018bc8:	d154      	bne.n	8018c74 <USBH_Process+0x3b0>
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	220d      	movs	r2, #13
 8018bce:	701a      	strb	r2, [r3, #0]
 8018bd0:	e050      	b.n	8018c74 <USBH_Process+0x3b0>
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	220d      	movs	r2, #13
 8018bd6:	701a      	strb	r2, [r3, #0]
 8018bd8:	e04c      	b.n	8018c74 <USBH_Process+0x3b0>
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d049      	beq.n	8018c78 <USBH_Process+0x3b4>
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018bea:	695b      	ldr	r3, [r3, #20]
 8018bec:	6878      	ldr	r0, [r7, #4]
 8018bee:	4798      	blx	r3
 8018bf0:	e042      	b.n	8018c78 <USBH_Process+0x3b4>
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8018bfa:	6878      	ldr	r0, [r7, #4]
 8018bfc:	f7ff fd72 	bl	80186e4 <DeInitStateMachine>
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d009      	beq.n	8018c1e <USBH_Process+0x35a>
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8018c10:	68db      	ldr	r3, [r3, #12]
 8018c12:	6878      	ldr	r0, [r7, #4]
 8018c14:	4798      	blx	r3
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	2200      	movs	r2, #0
 8018c1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d005      	beq.n	8018c34 <USBH_Process+0x370>
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8018c2e:	2105      	movs	r1, #5
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	4798      	blx	r3
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8018c3a:	b2db      	uxtb	r3, r3
 8018c3c:	2b01      	cmp	r3, #1
 8018c3e:	d107      	bne.n	8018c50 <USBH_Process+0x38c>
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	2200      	movs	r2, #0
 8018c44:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8018c48:	6878      	ldr	r0, [r7, #4]
 8018c4a:	f7ff fe2b 	bl	80188a4 <USBH_Start>
 8018c4e:	e014      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f005 f851 	bl	801dcf8 <USBH_LL_Start>
 8018c56:	e010      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c58:	bf00      	nop
 8018c5a:	e00e      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c5c:	bf00      	nop
 8018c5e:	e00c      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c60:	bf00      	nop
 8018c62:	e00a      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c64:	bf00      	nop
 8018c66:	e008      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c68:	bf00      	nop
 8018c6a:	e006      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c6c:	bf00      	nop
 8018c6e:	e004      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c70:	bf00      	nop
 8018c72:	e002      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c74:	bf00      	nop
 8018c76:	e000      	b.n	8018c7a <USBH_Process+0x3b6>
 8018c78:	bf00      	nop
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3710      	adds	r7, #16
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}

08018c84 <USBH_HandleEnum>:
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b088      	sub	sp, #32
 8018c88:	af04      	add	r7, sp, #16
 8018c8a:	6078      	str	r0, [r7, #4]
 8018c8c:	2301      	movs	r3, #1
 8018c8e:	73fb      	strb	r3, [r7, #15]
 8018c90:	2301      	movs	r3, #1
 8018c92:	73bb      	strb	r3, [r7, #14]
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	785b      	ldrb	r3, [r3, #1]
 8018c98:	2b07      	cmp	r3, #7
 8018c9a:	f200 81c1 	bhi.w	8019020 <USBH_HandleEnum+0x39c>
 8018c9e:	a201      	add	r2, pc, #4	; (adr r2, 8018ca4 <USBH_HandleEnum+0x20>)
 8018ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ca4:	08018cc5 	.word	0x08018cc5
 8018ca8:	08018d83 	.word	0x08018d83
 8018cac:	08018ded 	.word	0x08018ded
 8018cb0:	08018e7b 	.word	0x08018e7b
 8018cb4:	08018ee5 	.word	0x08018ee5
 8018cb8:	08018f55 	.word	0x08018f55
 8018cbc:	08018f9b 	.word	0x08018f9b
 8018cc0:	08018fe1 	.word	0x08018fe1
 8018cc4:	2108      	movs	r1, #8
 8018cc6:	6878      	ldr	r0, [r7, #4]
 8018cc8:	f000 fa50 	bl	801916c <USBH_Get_DevDesc>
 8018ccc:	4603      	mov	r3, r0
 8018cce:	73bb      	strb	r3, [r7, #14]
 8018cd0:	7bbb      	ldrb	r3, [r7, #14]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d130      	bne.n	8018d38 <USBH_HandleEnum+0xb4>
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	719a      	strb	r2, [r3, #6]
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	2201      	movs	r2, #1
 8018ce4:	705a      	strb	r2, [r3, #1]
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	7919      	ldrb	r1, [r3, #4]
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8018cf6:	687a      	ldr	r2, [r7, #4]
 8018cf8:	7992      	ldrb	r2, [r2, #6]
 8018cfa:	b292      	uxth	r2, r2
 8018cfc:	9202      	str	r2, [sp, #8]
 8018cfe:	2200      	movs	r2, #0
 8018d00:	9201      	str	r2, [sp, #4]
 8018d02:	9300      	str	r3, [sp, #0]
 8018d04:	4603      	mov	r3, r0
 8018d06:	2280      	movs	r2, #128	; 0x80
 8018d08:	6878      	ldr	r0, [r7, #4]
 8018d0a:	f000 ff79 	bl	8019c00 <USBH_OpenPipe>
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	7959      	ldrb	r1, [r3, #5]
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8018d1e:	687a      	ldr	r2, [r7, #4]
 8018d20:	7992      	ldrb	r2, [r2, #6]
 8018d22:	b292      	uxth	r2, r2
 8018d24:	9202      	str	r2, [sp, #8]
 8018d26:	2200      	movs	r2, #0
 8018d28:	9201      	str	r2, [sp, #4]
 8018d2a:	9300      	str	r3, [sp, #0]
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	2200      	movs	r2, #0
 8018d30:	6878      	ldr	r0, [r7, #4]
 8018d32:	f000 ff65 	bl	8019c00 <USBH_OpenPipe>
 8018d36:	e175      	b.n	8019024 <USBH_HandleEnum+0x3a0>
 8018d38:	7bbb      	ldrb	r3, [r7, #14]
 8018d3a:	2b03      	cmp	r3, #3
 8018d3c:	f040 8172 	bne.w	8019024 <USBH_HandleEnum+0x3a0>
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018d46:	3301      	adds	r3, #1
 8018d48:	b2da      	uxtb	r2, r3
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018d56:	2b03      	cmp	r3, #3
 8018d58:	d903      	bls.n	8018d62 <USBH_HandleEnum+0xde>
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	220d      	movs	r2, #13
 8018d5e:	701a      	strb	r2, [r3, #0]
 8018d60:	e160      	b.n	8019024 <USBH_HandleEnum+0x3a0>
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	795b      	ldrb	r3, [r3, #5]
 8018d66:	4619      	mov	r1, r3
 8018d68:	6878      	ldr	r0, [r7, #4]
 8018d6a:	f000 ff99 	bl	8019ca0 <USBH_FreePipe>
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	791b      	ldrb	r3, [r3, #4]
 8018d72:	4619      	mov	r1, r3
 8018d74:	6878      	ldr	r0, [r7, #4]
 8018d76:	f000 ff93 	bl	8019ca0 <USBH_FreePipe>
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	701a      	strb	r2, [r3, #0]
 8018d80:	e150      	b.n	8019024 <USBH_HandleEnum+0x3a0>
 8018d82:	2112      	movs	r1, #18
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f000 f9f1 	bl	801916c <USBH_Get_DevDesc>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	73bb      	strb	r3, [r7, #14]
 8018d8e:	7bbb      	ldrb	r3, [r7, #14]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d103      	bne.n	8018d9c <USBH_HandleEnum+0x118>
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	2202      	movs	r2, #2
 8018d98:	705a      	strb	r2, [r3, #1]
 8018d9a:	e145      	b.n	8019028 <USBH_HandleEnum+0x3a4>
 8018d9c:	7bbb      	ldrb	r3, [r7, #14]
 8018d9e:	2b03      	cmp	r3, #3
 8018da0:	f040 8142 	bne.w	8019028 <USBH_HandleEnum+0x3a4>
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018daa:	3301      	adds	r3, #1
 8018dac:	b2da      	uxtb	r2, r3
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018dba:	2b03      	cmp	r3, #3
 8018dbc:	d903      	bls.n	8018dc6 <USBH_HandleEnum+0x142>
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	220d      	movs	r2, #13
 8018dc2:	701a      	strb	r2, [r3, #0]
 8018dc4:	e130      	b.n	8019028 <USBH_HandleEnum+0x3a4>
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	795b      	ldrb	r3, [r3, #5]
 8018dca:	4619      	mov	r1, r3
 8018dcc:	6878      	ldr	r0, [r7, #4]
 8018dce:	f000 ff67 	bl	8019ca0 <USBH_FreePipe>
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	791b      	ldrb	r3, [r3, #4]
 8018dd6:	4619      	mov	r1, r3
 8018dd8:	6878      	ldr	r0, [r7, #4]
 8018dda:	f000 ff61 	bl	8019ca0 <USBH_FreePipe>
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	2200      	movs	r2, #0
 8018de2:	705a      	strb	r2, [r3, #1]
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	2200      	movs	r2, #0
 8018de8:	701a      	strb	r2, [r3, #0]
 8018dea:	e11d      	b.n	8019028 <USBH_HandleEnum+0x3a4>
 8018dec:	2101      	movs	r1, #1
 8018dee:	6878      	ldr	r0, [r7, #4]
 8018df0:	f000 fa68 	bl	80192c4 <USBH_SetAddress>
 8018df4:	4603      	mov	r3, r0
 8018df6:	73bb      	strb	r3, [r7, #14]
 8018df8:	7bbb      	ldrb	r3, [r7, #14]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d132      	bne.n	8018e64 <USBH_HandleEnum+0x1e0>
 8018dfe:	2002      	movs	r0, #2
 8018e00:	f005 f912 	bl	801e028 <USBH_Delay>
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	2201      	movs	r2, #1
 8018e08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	2203      	movs	r2, #3
 8018e10:	705a      	strb	r2, [r3, #1]
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	7919      	ldrb	r1, [r3, #4]
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8018e22:	687a      	ldr	r2, [r7, #4]
 8018e24:	7992      	ldrb	r2, [r2, #6]
 8018e26:	b292      	uxth	r2, r2
 8018e28:	9202      	str	r2, [sp, #8]
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	9201      	str	r2, [sp, #4]
 8018e2e:	9300      	str	r3, [sp, #0]
 8018e30:	4603      	mov	r3, r0
 8018e32:	2280      	movs	r2, #128	; 0x80
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f000 fee3 	bl	8019c00 <USBH_OpenPipe>
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	7959      	ldrb	r1, [r3, #5]
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8018e4a:	687a      	ldr	r2, [r7, #4]
 8018e4c:	7992      	ldrb	r2, [r2, #6]
 8018e4e:	b292      	uxth	r2, r2
 8018e50:	9202      	str	r2, [sp, #8]
 8018e52:	2200      	movs	r2, #0
 8018e54:	9201      	str	r2, [sp, #4]
 8018e56:	9300      	str	r3, [sp, #0]
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	6878      	ldr	r0, [r7, #4]
 8018e5e:	f000 fecf 	bl	8019c00 <USBH_OpenPipe>
 8018e62:	e0e3      	b.n	801902c <USBH_HandleEnum+0x3a8>
 8018e64:	7bbb      	ldrb	r3, [r7, #14]
 8018e66:	2b03      	cmp	r3, #3
 8018e68:	f040 80e0 	bne.w	801902c <USBH_HandleEnum+0x3a8>
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	220d      	movs	r2, #13
 8018e70:	701a      	strb	r2, [r3, #0]
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	2200      	movs	r2, #0
 8018e76:	705a      	strb	r2, [r3, #1]
 8018e78:	e0d8      	b.n	801902c <USBH_HandleEnum+0x3a8>
 8018e7a:	2109      	movs	r1, #9
 8018e7c:	6878      	ldr	r0, [r7, #4]
 8018e7e:	f000 f99d 	bl	80191bc <USBH_Get_CfgDesc>
 8018e82:	4603      	mov	r3, r0
 8018e84:	73bb      	strb	r3, [r7, #14]
 8018e86:	7bbb      	ldrb	r3, [r7, #14]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d103      	bne.n	8018e94 <USBH_HandleEnum+0x210>
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	2204      	movs	r2, #4
 8018e90:	705a      	strb	r2, [r3, #1]
 8018e92:	e0cd      	b.n	8019030 <USBH_HandleEnum+0x3ac>
 8018e94:	7bbb      	ldrb	r3, [r7, #14]
 8018e96:	2b03      	cmp	r3, #3
 8018e98:	f040 80ca 	bne.w	8019030 <USBH_HandleEnum+0x3ac>
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018ea2:	3301      	adds	r3, #1
 8018ea4:	b2da      	uxtb	r2, r3
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018eb2:	2b03      	cmp	r3, #3
 8018eb4:	d903      	bls.n	8018ebe <USBH_HandleEnum+0x23a>
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	220d      	movs	r2, #13
 8018eba:	701a      	strb	r2, [r3, #0]
 8018ebc:	e0b8      	b.n	8019030 <USBH_HandleEnum+0x3ac>
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	795b      	ldrb	r3, [r3, #5]
 8018ec2:	4619      	mov	r1, r3
 8018ec4:	6878      	ldr	r0, [r7, #4]
 8018ec6:	f000 feeb 	bl	8019ca0 <USBH_FreePipe>
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	791b      	ldrb	r3, [r3, #4]
 8018ece:	4619      	mov	r1, r3
 8018ed0:	6878      	ldr	r0, [r7, #4]
 8018ed2:	f000 fee5 	bl	8019ca0 <USBH_FreePipe>
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	2200      	movs	r2, #0
 8018eda:	705a      	strb	r2, [r3, #1]
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2200      	movs	r2, #0
 8018ee0:	701a      	strb	r2, [r3, #0]
 8018ee2:	e0a5      	b.n	8019030 <USBH_HandleEnum+0x3ac>
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8018eea:	4619      	mov	r1, r3
 8018eec:	6878      	ldr	r0, [r7, #4]
 8018eee:	f000 f965 	bl	80191bc <USBH_Get_CfgDesc>
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	73bb      	strb	r3, [r7, #14]
 8018ef6:	7bbb      	ldrb	r3, [r7, #14]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d103      	bne.n	8018f04 <USBH_HandleEnum+0x280>
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2205      	movs	r2, #5
 8018f00:	705a      	strb	r2, [r3, #1]
 8018f02:	e097      	b.n	8019034 <USBH_HandleEnum+0x3b0>
 8018f04:	7bbb      	ldrb	r3, [r7, #14]
 8018f06:	2b03      	cmp	r3, #3
 8018f08:	f040 8094 	bne.w	8019034 <USBH_HandleEnum+0x3b0>
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018f12:	3301      	adds	r3, #1
 8018f14:	b2da      	uxtb	r2, r3
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8018f22:	2b03      	cmp	r3, #3
 8018f24:	d903      	bls.n	8018f2e <USBH_HandleEnum+0x2aa>
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	220d      	movs	r2, #13
 8018f2a:	701a      	strb	r2, [r3, #0]
 8018f2c:	e082      	b.n	8019034 <USBH_HandleEnum+0x3b0>
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	795b      	ldrb	r3, [r3, #5]
 8018f32:	4619      	mov	r1, r3
 8018f34:	6878      	ldr	r0, [r7, #4]
 8018f36:	f000 feb3 	bl	8019ca0 <USBH_FreePipe>
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	791b      	ldrb	r3, [r3, #4]
 8018f3e:	4619      	mov	r1, r3
 8018f40:	6878      	ldr	r0, [r7, #4]
 8018f42:	f000 fead 	bl	8019ca0 <USBH_FreePipe>
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	2200      	movs	r2, #0
 8018f4a:	705a      	strb	r2, [r3, #1]
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	2200      	movs	r2, #0
 8018f50:	701a      	strb	r2, [r3, #0]
 8018f52:	e06f      	b.n	8019034 <USBH_HandleEnum+0x3b0>
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d019      	beq.n	8018f92 <USBH_HandleEnum+0x30e>
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8018f6a:	23ff      	movs	r3, #255	; 0xff
 8018f6c:	6878      	ldr	r0, [r7, #4]
 8018f6e:	f000 f949 	bl	8019204 <USBH_Get_StringDesc>
 8018f72:	4603      	mov	r3, r0
 8018f74:	73bb      	strb	r3, [r7, #14]
 8018f76:	7bbb      	ldrb	r3, [r7, #14]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d103      	bne.n	8018f84 <USBH_HandleEnum+0x300>
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	2206      	movs	r2, #6
 8018f80:	705a      	strb	r2, [r3, #1]
 8018f82:	e059      	b.n	8019038 <USBH_HandleEnum+0x3b4>
 8018f84:	7bbb      	ldrb	r3, [r7, #14]
 8018f86:	2b03      	cmp	r3, #3
 8018f88:	d156      	bne.n	8019038 <USBH_HandleEnum+0x3b4>
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	2206      	movs	r2, #6
 8018f8e:	705a      	strb	r2, [r3, #1]
 8018f90:	e052      	b.n	8019038 <USBH_HandleEnum+0x3b4>
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	2206      	movs	r2, #6
 8018f96:	705a      	strb	r2, [r3, #1]
 8018f98:	e04e      	b.n	8019038 <USBH_HandleEnum+0x3b4>
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d019      	beq.n	8018fd8 <USBH_HandleEnum+0x354>
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8018fb0:	23ff      	movs	r3, #255	; 0xff
 8018fb2:	6878      	ldr	r0, [r7, #4]
 8018fb4:	f000 f926 	bl	8019204 <USBH_Get_StringDesc>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	73bb      	strb	r3, [r7, #14]
 8018fbc:	7bbb      	ldrb	r3, [r7, #14]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d103      	bne.n	8018fca <USBH_HandleEnum+0x346>
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	2207      	movs	r2, #7
 8018fc6:	705a      	strb	r2, [r3, #1]
 8018fc8:	e038      	b.n	801903c <USBH_HandleEnum+0x3b8>
 8018fca:	7bbb      	ldrb	r3, [r7, #14]
 8018fcc:	2b03      	cmp	r3, #3
 8018fce:	d135      	bne.n	801903c <USBH_HandleEnum+0x3b8>
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2207      	movs	r2, #7
 8018fd4:	705a      	strb	r2, [r3, #1]
 8018fd6:	e031      	b.n	801903c <USBH_HandleEnum+0x3b8>
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	2207      	movs	r2, #7
 8018fdc:	705a      	strb	r2, [r3, #1]
 8018fde:	e02d      	b.n	801903c <USBH_HandleEnum+0x3b8>
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d017      	beq.n	801901a <USBH_HandleEnum+0x396>
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8018ff6:	23ff      	movs	r3, #255	; 0xff
 8018ff8:	6878      	ldr	r0, [r7, #4]
 8018ffa:	f000 f903 	bl	8019204 <USBH_Get_StringDesc>
 8018ffe:	4603      	mov	r3, r0
 8019000:	73bb      	strb	r3, [r7, #14]
 8019002:	7bbb      	ldrb	r3, [r7, #14]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d102      	bne.n	801900e <USBH_HandleEnum+0x38a>
 8019008:	2300      	movs	r3, #0
 801900a:	73fb      	strb	r3, [r7, #15]
 801900c:	e018      	b.n	8019040 <USBH_HandleEnum+0x3bc>
 801900e:	7bbb      	ldrb	r3, [r7, #14]
 8019010:	2b03      	cmp	r3, #3
 8019012:	d115      	bne.n	8019040 <USBH_HandleEnum+0x3bc>
 8019014:	2300      	movs	r3, #0
 8019016:	73fb      	strb	r3, [r7, #15]
 8019018:	e012      	b.n	8019040 <USBH_HandleEnum+0x3bc>
 801901a:	2300      	movs	r3, #0
 801901c:	73fb      	strb	r3, [r7, #15]
 801901e:	e00f      	b.n	8019040 <USBH_HandleEnum+0x3bc>
 8019020:	bf00      	nop
 8019022:	e00e      	b.n	8019042 <USBH_HandleEnum+0x3be>
 8019024:	bf00      	nop
 8019026:	e00c      	b.n	8019042 <USBH_HandleEnum+0x3be>
 8019028:	bf00      	nop
 801902a:	e00a      	b.n	8019042 <USBH_HandleEnum+0x3be>
 801902c:	bf00      	nop
 801902e:	e008      	b.n	8019042 <USBH_HandleEnum+0x3be>
 8019030:	bf00      	nop
 8019032:	e006      	b.n	8019042 <USBH_HandleEnum+0x3be>
 8019034:	bf00      	nop
 8019036:	e004      	b.n	8019042 <USBH_HandleEnum+0x3be>
 8019038:	bf00      	nop
 801903a:	e002      	b.n	8019042 <USBH_HandleEnum+0x3be>
 801903c:	bf00      	nop
 801903e:	e000      	b.n	8019042 <USBH_HandleEnum+0x3be>
 8019040:	bf00      	nop
 8019042:	7bfb      	ldrb	r3, [r7, #15]
 8019044:	4618      	mov	r0, r3
 8019046:	3710      	adds	r7, #16
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}

0801904c <USBH_LL_SetTimer>:
 801904c:	b480      	push	{r7}
 801904e:	b083      	sub	sp, #12
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
 8019054:	6039      	str	r1, [r7, #0]
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	683a      	ldr	r2, [r7, #0]
 801905a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 801905e:	bf00      	nop
 8019060:	370c      	adds	r7, #12
 8019062:	46bd      	mov	sp, r7
 8019064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019068:	4770      	bx	lr

0801906a <USBH_LL_IncTimer>:
 801906a:	b580      	push	{r7, lr}
 801906c:	b082      	sub	sp, #8
 801906e:	af00      	add	r7, sp, #0
 8019070:	6078      	str	r0, [r7, #4]
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019078:	1c5a      	adds	r2, r3, #1
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 8019080:	6878      	ldr	r0, [r7, #4]
 8019082:	f000 f804 	bl	801908e <USBH_HandleSof>
 8019086:	bf00      	nop
 8019088:	3708      	adds	r7, #8
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}

0801908e <USBH_HandleSof>:
 801908e:	b580      	push	{r7, lr}
 8019090:	b082      	sub	sp, #8
 8019092:	af00      	add	r7, sp, #0
 8019094:	6078      	str	r0, [r7, #4]
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	781b      	ldrb	r3, [r3, #0]
 801909a:	b2db      	uxtb	r3, r3
 801909c:	2b0b      	cmp	r3, #11
 801909e:	d10a      	bne.n	80190b6 <USBH_HandleSof+0x28>
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d005      	beq.n	80190b6 <USBH_HandleSof+0x28>
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80190b0:	699b      	ldr	r3, [r3, #24]
 80190b2:	6878      	ldr	r0, [r7, #4]
 80190b4:	4798      	blx	r3
 80190b6:	bf00      	nop
 80190b8:	3708      	adds	r7, #8
 80190ba:	46bd      	mov	sp, r7
 80190bc:	bd80      	pop	{r7, pc}

080190be <USBH_LL_PortEnabled>:
 80190be:	b480      	push	{r7}
 80190c0:	b083      	sub	sp, #12
 80190c2:	af00      	add	r7, sp, #0
 80190c4:	6078      	str	r0, [r7, #4]
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2201      	movs	r2, #1
 80190ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
 80190ce:	bf00      	nop
 80190d0:	370c      	adds	r7, #12
 80190d2:	46bd      	mov	sp, r7
 80190d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d8:	4770      	bx	lr

080190da <USBH_LL_PortDisabled>:
 80190da:	b480      	push	{r7}
 80190dc:	b083      	sub	sp, #12
 80190de:	af00      	add	r7, sp, #0
 80190e0:	6078      	str	r0, [r7, #4]
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2200      	movs	r2, #0
 80190e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
 80190ea:	bf00      	nop
 80190ec:	370c      	adds	r7, #12
 80190ee:	46bd      	mov	sp, r7
 80190f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f4:	4770      	bx	lr

080190f6 <USBH_LL_Connect>:
 80190f6:	b480      	push	{r7}
 80190f8:	b083      	sub	sp, #12
 80190fa:	af00      	add	r7, sp, #0
 80190fc:	6078      	str	r0, [r7, #4]
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	2201      	movs	r2, #1
 8019102:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	2200      	movs	r2, #0
 801910a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	2200      	movs	r2, #0
 8019112:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8019116:	2300      	movs	r3, #0
 8019118:	4618      	mov	r0, r3
 801911a:	370c      	adds	r7, #12
 801911c:	46bd      	mov	sp, r7
 801911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019122:	4770      	bx	lr

08019124 <USBH_LL_Disconnect>:
 8019124:	b580      	push	{r7, lr}
 8019126:	b082      	sub	sp, #8
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	2201      	movs	r2, #1
 8019130:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	2200      	movs	r2, #0
 8019138:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	2200      	movs	r2, #0
 8019140:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
 8019144:	6878      	ldr	r0, [r7, #4]
 8019146:	f004 fdf2 	bl	801dd2e <USBH_LL_Stop>
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	791b      	ldrb	r3, [r3, #4]
 801914e:	4619      	mov	r1, r3
 8019150:	6878      	ldr	r0, [r7, #4]
 8019152:	f000 fda5 	bl	8019ca0 <USBH_FreePipe>
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	795b      	ldrb	r3, [r3, #5]
 801915a:	4619      	mov	r1, r3
 801915c:	6878      	ldr	r0, [r7, #4]
 801915e:	f000 fd9f 	bl	8019ca0 <USBH_FreePipe>
 8019162:	2300      	movs	r3, #0
 8019164:	4618      	mov	r0, r3
 8019166:	3708      	adds	r7, #8
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}

0801916c <USBH_Get_DevDesc>:
 801916c:	b580      	push	{r7, lr}
 801916e:	b086      	sub	sp, #24
 8019170:	af02      	add	r7, sp, #8
 8019172:	6078      	str	r0, [r7, #4]
 8019174:	460b      	mov	r3, r1
 8019176:	70fb      	strb	r3, [r7, #3]
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 801917e:	78fb      	ldrb	r3, [r7, #3]
 8019180:	b29b      	uxth	r3, r3
 8019182:	9300      	str	r3, [sp, #0]
 8019184:	4613      	mov	r3, r2
 8019186:	f44f 7280 	mov.w	r2, #256	; 0x100
 801918a:	2100      	movs	r1, #0
 801918c:	6878      	ldr	r0, [r7, #4]
 801918e:	f000 f864 	bl	801925a <USBH_GetDescriptor>
 8019192:	4603      	mov	r3, r0
 8019194:	73fb      	strb	r3, [r7, #15]
 8019196:	7bfb      	ldrb	r3, [r7, #15]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d10a      	bne.n	80191b2 <USBH_Get_DevDesc+0x46>
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	f203 3026 	addw	r0, r3, #806	; 0x326
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80191a8:	78fa      	ldrb	r2, [r7, #3]
 80191aa:	b292      	uxth	r2, r2
 80191ac:	4619      	mov	r1, r3
 80191ae:	f000 f918 	bl	80193e2 <USBH_ParseDevDesc>
 80191b2:	7bfb      	ldrb	r3, [r7, #15]
 80191b4:	4618      	mov	r0, r3
 80191b6:	3710      	adds	r7, #16
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}

080191bc <USBH_Get_CfgDesc>:
 80191bc:	b580      	push	{r7, lr}
 80191be:	b086      	sub	sp, #24
 80191c0:	af02      	add	r7, sp, #8
 80191c2:	6078      	str	r0, [r7, #4]
 80191c4:	460b      	mov	r3, r1
 80191c6:	807b      	strh	r3, [r7, #2]
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	331c      	adds	r3, #28
 80191cc:	60fb      	str	r3, [r7, #12]
 80191ce:	887b      	ldrh	r3, [r7, #2]
 80191d0:	9300      	str	r3, [sp, #0]
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80191d8:	2100      	movs	r1, #0
 80191da:	6878      	ldr	r0, [r7, #4]
 80191dc:	f000 f83d 	bl	801925a <USBH_GetDescriptor>
 80191e0:	4603      	mov	r3, r0
 80191e2:	72fb      	strb	r3, [r7, #11]
 80191e4:	7afb      	ldrb	r3, [r7, #11]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d107      	bne.n	80191fa <USBH_Get_CfgDesc+0x3e>
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80191f0:	887a      	ldrh	r2, [r7, #2]
 80191f2:	68f9      	ldr	r1, [r7, #12]
 80191f4:	4618      	mov	r0, r3
 80191f6:	f000 f964 	bl	80194c2 <USBH_ParseCfgDesc>
 80191fa:	7afb      	ldrb	r3, [r7, #11]
 80191fc:	4618      	mov	r0, r3
 80191fe:	3710      	adds	r7, #16
 8019200:	46bd      	mov	sp, r7
 8019202:	bd80      	pop	{r7, pc}

08019204 <USBH_Get_StringDesc>:
 8019204:	b580      	push	{r7, lr}
 8019206:	b088      	sub	sp, #32
 8019208:	af02      	add	r7, sp, #8
 801920a:	60f8      	str	r0, [r7, #12]
 801920c:	607a      	str	r2, [r7, #4]
 801920e:	461a      	mov	r2, r3
 8019210:	460b      	mov	r3, r1
 8019212:	72fb      	strb	r3, [r7, #11]
 8019214:	4613      	mov	r3, r2
 8019216:	813b      	strh	r3, [r7, #8]
 8019218:	7afb      	ldrb	r3, [r7, #11]
 801921a:	b29b      	uxth	r3, r3
 801921c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8019220:	b29a      	uxth	r2, r3
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8019228:	893b      	ldrh	r3, [r7, #8]
 801922a:	9300      	str	r3, [sp, #0]
 801922c:	460b      	mov	r3, r1
 801922e:	2100      	movs	r1, #0
 8019230:	68f8      	ldr	r0, [r7, #12]
 8019232:	f000 f812 	bl	801925a <USBH_GetDescriptor>
 8019236:	4603      	mov	r3, r0
 8019238:	75fb      	strb	r3, [r7, #23]
 801923a:	7dfb      	ldrb	r3, [r7, #23]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d107      	bne.n	8019250 <USBH_Get_StringDesc+0x4c>
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8019246:	893a      	ldrh	r2, [r7, #8]
 8019248:	6879      	ldr	r1, [r7, #4]
 801924a:	4618      	mov	r0, r3
 801924c:	f000 fa37 	bl	80196be <USBH_ParseStringDesc>
 8019250:	7dfb      	ldrb	r3, [r7, #23]
 8019252:	4618      	mov	r0, r3
 8019254:	3718      	adds	r7, #24
 8019256:	46bd      	mov	sp, r7
 8019258:	bd80      	pop	{r7, pc}

0801925a <USBH_GetDescriptor>:
 801925a:	b580      	push	{r7, lr}
 801925c:	b084      	sub	sp, #16
 801925e:	af00      	add	r7, sp, #0
 8019260:	60f8      	str	r0, [r7, #12]
 8019262:	607b      	str	r3, [r7, #4]
 8019264:	460b      	mov	r3, r1
 8019266:	72fb      	strb	r3, [r7, #11]
 8019268:	4613      	mov	r3, r2
 801926a:	813b      	strh	r3, [r7, #8]
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	789b      	ldrb	r3, [r3, #2]
 8019270:	2b01      	cmp	r3, #1
 8019272:	d11c      	bne.n	80192ae <USBH_GetDescriptor+0x54>
 8019274:	7afb      	ldrb	r3, [r7, #11]
 8019276:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801927a:	b2da      	uxtb	r2, r3
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	741a      	strb	r2, [r3, #16]
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	2206      	movs	r2, #6
 8019284:	745a      	strb	r2, [r3, #17]
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	893a      	ldrh	r2, [r7, #8]
 801928a:	825a      	strh	r2, [r3, #18]
 801928c:	893b      	ldrh	r3, [r7, #8]
 801928e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019296:	d104      	bne.n	80192a2 <USBH_GetDescriptor+0x48>
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	f240 4209 	movw	r2, #1033	; 0x409
 801929e:	829a      	strh	r2, [r3, #20]
 80192a0:	e002      	b.n	80192a8 <USBH_GetDescriptor+0x4e>
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	2200      	movs	r2, #0
 80192a6:	829a      	strh	r2, [r3, #20]
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	8b3a      	ldrh	r2, [r7, #24]
 80192ac:	82da      	strh	r2, [r3, #22]
 80192ae:	8b3b      	ldrh	r3, [r7, #24]
 80192b0:	461a      	mov	r2, r3
 80192b2:	6879      	ldr	r1, [r7, #4]
 80192b4:	68f8      	ldr	r0, [r7, #12]
 80192b6:	f000 fa50 	bl	801975a <USBH_CtlReq>
 80192ba:	4603      	mov	r3, r0
 80192bc:	4618      	mov	r0, r3
 80192be:	3710      	adds	r7, #16
 80192c0:	46bd      	mov	sp, r7
 80192c2:	bd80      	pop	{r7, pc}

080192c4 <USBH_SetAddress>:
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b082      	sub	sp, #8
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
 80192cc:	460b      	mov	r3, r1
 80192ce:	70fb      	strb	r3, [r7, #3]
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	789b      	ldrb	r3, [r3, #2]
 80192d4:	2b01      	cmp	r3, #1
 80192d6:	d10f      	bne.n	80192f8 <USBH_SetAddress+0x34>
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2200      	movs	r2, #0
 80192dc:	741a      	strb	r2, [r3, #16]
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	2205      	movs	r2, #5
 80192e2:	745a      	strb	r2, [r3, #17]
 80192e4:	78fb      	ldrb	r3, [r7, #3]
 80192e6:	b29a      	uxth	r2, r3
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	825a      	strh	r2, [r3, #18]
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	2200      	movs	r2, #0
 80192f0:	829a      	strh	r2, [r3, #20]
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	2200      	movs	r2, #0
 80192f6:	82da      	strh	r2, [r3, #22]
 80192f8:	2200      	movs	r2, #0
 80192fa:	2100      	movs	r1, #0
 80192fc:	6878      	ldr	r0, [r7, #4]
 80192fe:	f000 fa2c 	bl	801975a <USBH_CtlReq>
 8019302:	4603      	mov	r3, r0
 8019304:	4618      	mov	r0, r3
 8019306:	3708      	adds	r7, #8
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}

0801930c <USBH_SetCfg>:
 801930c:	b580      	push	{r7, lr}
 801930e:	b082      	sub	sp, #8
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
 8019314:	460b      	mov	r3, r1
 8019316:	807b      	strh	r3, [r7, #2]
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	789b      	ldrb	r3, [r3, #2]
 801931c:	2b01      	cmp	r3, #1
 801931e:	d10e      	bne.n	801933e <USBH_SetCfg+0x32>
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	2200      	movs	r2, #0
 8019324:	741a      	strb	r2, [r3, #16]
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	2209      	movs	r2, #9
 801932a:	745a      	strb	r2, [r3, #17]
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	887a      	ldrh	r2, [r7, #2]
 8019330:	825a      	strh	r2, [r3, #18]
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	2200      	movs	r2, #0
 8019336:	829a      	strh	r2, [r3, #20]
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	2200      	movs	r2, #0
 801933c:	82da      	strh	r2, [r3, #22]
 801933e:	2200      	movs	r2, #0
 8019340:	2100      	movs	r1, #0
 8019342:	6878      	ldr	r0, [r7, #4]
 8019344:	f000 fa09 	bl	801975a <USBH_CtlReq>
 8019348:	4603      	mov	r3, r0
 801934a:	4618      	mov	r0, r3
 801934c:	3708      	adds	r7, #8
 801934e:	46bd      	mov	sp, r7
 8019350:	bd80      	pop	{r7, pc}

08019352 <USBH_SetFeature>:
 8019352:	b580      	push	{r7, lr}
 8019354:	b082      	sub	sp, #8
 8019356:	af00      	add	r7, sp, #0
 8019358:	6078      	str	r0, [r7, #4]
 801935a:	460b      	mov	r3, r1
 801935c:	70fb      	strb	r3, [r7, #3]
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	789b      	ldrb	r3, [r3, #2]
 8019362:	2b01      	cmp	r3, #1
 8019364:	d10f      	bne.n	8019386 <USBH_SetFeature+0x34>
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	2200      	movs	r2, #0
 801936a:	741a      	strb	r2, [r3, #16]
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	2203      	movs	r2, #3
 8019370:	745a      	strb	r2, [r3, #17]
 8019372:	78fb      	ldrb	r3, [r7, #3]
 8019374:	b29a      	uxth	r2, r3
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	825a      	strh	r2, [r3, #18]
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	2200      	movs	r2, #0
 801937e:	829a      	strh	r2, [r3, #20]
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	2200      	movs	r2, #0
 8019384:	82da      	strh	r2, [r3, #22]
 8019386:	2200      	movs	r2, #0
 8019388:	2100      	movs	r1, #0
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f000 f9e5 	bl	801975a <USBH_CtlReq>
 8019390:	4603      	mov	r3, r0
 8019392:	4618      	mov	r0, r3
 8019394:	3708      	adds	r7, #8
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}

0801939a <USBH_ClrFeature>:
 801939a:	b580      	push	{r7, lr}
 801939c:	b082      	sub	sp, #8
 801939e:	af00      	add	r7, sp, #0
 80193a0:	6078      	str	r0, [r7, #4]
 80193a2:	460b      	mov	r3, r1
 80193a4:	70fb      	strb	r3, [r7, #3]
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	789b      	ldrb	r3, [r3, #2]
 80193aa:	2b01      	cmp	r3, #1
 80193ac:	d10f      	bne.n	80193ce <USBH_ClrFeature+0x34>
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	2202      	movs	r2, #2
 80193b2:	741a      	strb	r2, [r3, #16]
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2201      	movs	r2, #1
 80193b8:	745a      	strb	r2, [r3, #17]
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	2200      	movs	r2, #0
 80193be:	825a      	strh	r2, [r3, #18]
 80193c0:	78fb      	ldrb	r3, [r7, #3]
 80193c2:	b29a      	uxth	r2, r3
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	829a      	strh	r2, [r3, #20]
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	2200      	movs	r2, #0
 80193cc:	82da      	strh	r2, [r3, #22]
 80193ce:	2200      	movs	r2, #0
 80193d0:	2100      	movs	r1, #0
 80193d2:	6878      	ldr	r0, [r7, #4]
 80193d4:	f000 f9c1 	bl	801975a <USBH_CtlReq>
 80193d8:	4603      	mov	r3, r0
 80193da:	4618      	mov	r0, r3
 80193dc:	3708      	adds	r7, #8
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}

080193e2 <USBH_ParseDevDesc>:
 80193e2:	b480      	push	{r7}
 80193e4:	b085      	sub	sp, #20
 80193e6:	af00      	add	r7, sp, #0
 80193e8:	60f8      	str	r0, [r7, #12]
 80193ea:	60b9      	str	r1, [r7, #8]
 80193ec:	4613      	mov	r3, r2
 80193ee:	80fb      	strh	r3, [r7, #6]
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	781a      	ldrb	r2, [r3, #0]
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	701a      	strb	r2, [r3, #0]
 80193f8:	68bb      	ldr	r3, [r7, #8]
 80193fa:	785a      	ldrb	r2, [r3, #1]
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	705a      	strb	r2, [r3, #1]
 8019400:	68bb      	ldr	r3, [r7, #8]
 8019402:	3302      	adds	r3, #2
 8019404:	781b      	ldrb	r3, [r3, #0]
 8019406:	b29a      	uxth	r2, r3
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	3303      	adds	r3, #3
 801940c:	781b      	ldrb	r3, [r3, #0]
 801940e:	b29b      	uxth	r3, r3
 8019410:	021b      	lsls	r3, r3, #8
 8019412:	b29b      	uxth	r3, r3
 8019414:	4313      	orrs	r3, r2
 8019416:	b29a      	uxth	r2, r3
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	805a      	strh	r2, [r3, #2]
 801941c:	68bb      	ldr	r3, [r7, #8]
 801941e:	791a      	ldrb	r2, [r3, #4]
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	711a      	strb	r2, [r3, #4]
 8019424:	68bb      	ldr	r3, [r7, #8]
 8019426:	795a      	ldrb	r2, [r3, #5]
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	715a      	strb	r2, [r3, #5]
 801942c:	68bb      	ldr	r3, [r7, #8]
 801942e:	799a      	ldrb	r2, [r3, #6]
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	719a      	strb	r2, [r3, #6]
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	79da      	ldrb	r2, [r3, #7]
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	71da      	strb	r2, [r3, #7]
 801943c:	88fb      	ldrh	r3, [r7, #6]
 801943e:	2b08      	cmp	r3, #8
 8019440:	d939      	bls.n	80194b6 <USBH_ParseDevDesc+0xd4>
 8019442:	68bb      	ldr	r3, [r7, #8]
 8019444:	3308      	adds	r3, #8
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	b29a      	uxth	r2, r3
 801944a:	68bb      	ldr	r3, [r7, #8]
 801944c:	3309      	adds	r3, #9
 801944e:	781b      	ldrb	r3, [r3, #0]
 8019450:	b29b      	uxth	r3, r3
 8019452:	021b      	lsls	r3, r3, #8
 8019454:	b29b      	uxth	r3, r3
 8019456:	4313      	orrs	r3, r2
 8019458:	b29a      	uxth	r2, r3
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	811a      	strh	r2, [r3, #8]
 801945e:	68bb      	ldr	r3, [r7, #8]
 8019460:	330a      	adds	r3, #10
 8019462:	781b      	ldrb	r3, [r3, #0]
 8019464:	b29a      	uxth	r2, r3
 8019466:	68bb      	ldr	r3, [r7, #8]
 8019468:	330b      	adds	r3, #11
 801946a:	781b      	ldrb	r3, [r3, #0]
 801946c:	b29b      	uxth	r3, r3
 801946e:	021b      	lsls	r3, r3, #8
 8019470:	b29b      	uxth	r3, r3
 8019472:	4313      	orrs	r3, r2
 8019474:	b29a      	uxth	r2, r3
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	815a      	strh	r2, [r3, #10]
 801947a:	68bb      	ldr	r3, [r7, #8]
 801947c:	330c      	adds	r3, #12
 801947e:	781b      	ldrb	r3, [r3, #0]
 8019480:	b29a      	uxth	r2, r3
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	330d      	adds	r3, #13
 8019486:	781b      	ldrb	r3, [r3, #0]
 8019488:	b29b      	uxth	r3, r3
 801948a:	021b      	lsls	r3, r3, #8
 801948c:	b29b      	uxth	r3, r3
 801948e:	4313      	orrs	r3, r2
 8019490:	b29a      	uxth	r2, r3
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	819a      	strh	r2, [r3, #12]
 8019496:	68bb      	ldr	r3, [r7, #8]
 8019498:	7b9a      	ldrb	r2, [r3, #14]
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	739a      	strb	r2, [r3, #14]
 801949e:	68bb      	ldr	r3, [r7, #8]
 80194a0:	7bda      	ldrb	r2, [r3, #15]
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	73da      	strb	r2, [r3, #15]
 80194a6:	68bb      	ldr	r3, [r7, #8]
 80194a8:	7c1a      	ldrb	r2, [r3, #16]
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	741a      	strb	r2, [r3, #16]
 80194ae:	68bb      	ldr	r3, [r7, #8]
 80194b0:	7c5a      	ldrb	r2, [r3, #17]
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	745a      	strb	r2, [r3, #17]
 80194b6:	bf00      	nop
 80194b8:	3714      	adds	r7, #20
 80194ba:	46bd      	mov	sp, r7
 80194bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194c0:	4770      	bx	lr

080194c2 <USBH_ParseCfgDesc>:
 80194c2:	b580      	push	{r7, lr}
 80194c4:	b08a      	sub	sp, #40	; 0x28
 80194c6:	af00      	add	r7, sp, #0
 80194c8:	60f8      	str	r0, [r7, #12]
 80194ca:	60b9      	str	r1, [r7, #8]
 80194cc:	4613      	mov	r3, r2
 80194ce:	80fb      	strh	r3, [r7, #6]
 80194d0:	68bb      	ldr	r3, [r7, #8]
 80194d2:	627b      	str	r3, [r7, #36]	; 0x24
 80194d4:	2300      	movs	r3, #0
 80194d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80194da:	2300      	movs	r3, #0
 80194dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80194e0:	68bb      	ldr	r3, [r7, #8]
 80194e2:	627b      	str	r3, [r7, #36]	; 0x24
 80194e4:	68bb      	ldr	r3, [r7, #8]
 80194e6:	781a      	ldrb	r2, [r3, #0]
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	701a      	strb	r2, [r3, #0]
 80194ec:	68bb      	ldr	r3, [r7, #8]
 80194ee:	785a      	ldrb	r2, [r3, #1]
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	705a      	strb	r2, [r3, #1]
 80194f4:	68bb      	ldr	r3, [r7, #8]
 80194f6:	3302      	adds	r3, #2
 80194f8:	781b      	ldrb	r3, [r3, #0]
 80194fa:	b29a      	uxth	r2, r3
 80194fc:	68bb      	ldr	r3, [r7, #8]
 80194fe:	3303      	adds	r3, #3
 8019500:	781b      	ldrb	r3, [r3, #0]
 8019502:	b29b      	uxth	r3, r3
 8019504:	021b      	lsls	r3, r3, #8
 8019506:	b29b      	uxth	r3, r3
 8019508:	4313      	orrs	r3, r2
 801950a:	b29a      	uxth	r2, r3
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	805a      	strh	r2, [r3, #2]
 8019510:	68bb      	ldr	r3, [r7, #8]
 8019512:	791a      	ldrb	r2, [r3, #4]
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	711a      	strb	r2, [r3, #4]
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	795a      	ldrb	r2, [r3, #5]
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	715a      	strb	r2, [r3, #5]
 8019520:	68bb      	ldr	r3, [r7, #8]
 8019522:	799a      	ldrb	r2, [r3, #6]
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	719a      	strb	r2, [r3, #6]
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	79da      	ldrb	r2, [r3, #7]
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	71da      	strb	r2, [r3, #7]
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	7a1a      	ldrb	r2, [r3, #8]
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	721a      	strb	r2, [r3, #8]
 8019538:	88fb      	ldrh	r3, [r7, #6]
 801953a:	2b09      	cmp	r3, #9
 801953c:	d95f      	bls.n	80195fe <USBH_ParseCfgDesc+0x13c>
 801953e:	2309      	movs	r3, #9
 8019540:	82fb      	strh	r3, [r7, #22]
 8019542:	2300      	movs	r3, #0
 8019544:	61fb      	str	r3, [r7, #28]
 8019546:	e051      	b.n	80195ec <USBH_ParseCfgDesc+0x12a>
 8019548:	f107 0316 	add.w	r3, r7, #22
 801954c:	4619      	mov	r1, r3
 801954e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019550:	f000 f8e8 	bl	8019724 <USBH_GetNextDesc>
 8019554:	6278      	str	r0, [r7, #36]	; 0x24
 8019556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019558:	785b      	ldrb	r3, [r3, #1]
 801955a:	2b04      	cmp	r3, #4
 801955c:	d146      	bne.n	80195ec <USBH_ParseCfgDesc+0x12a>
 801955e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019562:	221a      	movs	r2, #26
 8019564:	fb02 f303 	mul.w	r3, r2, r3
 8019568:	3308      	adds	r3, #8
 801956a:	68fa      	ldr	r2, [r7, #12]
 801956c:	4413      	add	r3, r2
 801956e:	3302      	adds	r3, #2
 8019570:	61fb      	str	r3, [r7, #28]
 8019572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019574:	69f8      	ldr	r0, [r7, #28]
 8019576:	f000 f846 	bl	8019606 <USBH_ParseInterfaceDesc>
 801957a:	2300      	movs	r3, #0
 801957c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019580:	2300      	movs	r3, #0
 8019582:	61bb      	str	r3, [r7, #24]
 8019584:	e022      	b.n	80195cc <USBH_ParseCfgDesc+0x10a>
 8019586:	f107 0316 	add.w	r3, r7, #22
 801958a:	4619      	mov	r1, r3
 801958c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801958e:	f000 f8c9 	bl	8019724 <USBH_GetNextDesc>
 8019592:	6278      	str	r0, [r7, #36]	; 0x24
 8019594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019596:	785b      	ldrb	r3, [r3, #1]
 8019598:	2b05      	cmp	r3, #5
 801959a:	d117      	bne.n	80195cc <USBH_ParseCfgDesc+0x10a>
 801959c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80195a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80195a4:	3201      	adds	r2, #1
 80195a6:	00d2      	lsls	r2, r2, #3
 80195a8:	211a      	movs	r1, #26
 80195aa:	fb01 f303 	mul.w	r3, r1, r3
 80195ae:	4413      	add	r3, r2
 80195b0:	3308      	adds	r3, #8
 80195b2:	68fa      	ldr	r2, [r7, #12]
 80195b4:	4413      	add	r3, r2
 80195b6:	3304      	adds	r3, #4
 80195b8:	61bb      	str	r3, [r7, #24]
 80195ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80195bc:	69b8      	ldr	r0, [r7, #24]
 80195be:	f000 f851 	bl	8019664 <USBH_ParseEPDesc>
 80195c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80195c6:	3301      	adds	r3, #1
 80195c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80195cc:	69fb      	ldr	r3, [r7, #28]
 80195ce:	791b      	ldrb	r3, [r3, #4]
 80195d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80195d4:	429a      	cmp	r2, r3
 80195d6:	d204      	bcs.n	80195e2 <USBH_ParseCfgDesc+0x120>
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	885a      	ldrh	r2, [r3, #2]
 80195dc:	8afb      	ldrh	r3, [r7, #22]
 80195de:	429a      	cmp	r2, r3
 80195e0:	d8d1      	bhi.n	8019586 <USBH_ParseCfgDesc+0xc4>
 80195e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80195e6:	3301      	adds	r3, #1
 80195e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80195ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80195f0:	2b01      	cmp	r3, #1
 80195f2:	d804      	bhi.n	80195fe <USBH_ParseCfgDesc+0x13c>
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	885a      	ldrh	r2, [r3, #2]
 80195f8:	8afb      	ldrh	r3, [r7, #22]
 80195fa:	429a      	cmp	r2, r3
 80195fc:	d8a4      	bhi.n	8019548 <USBH_ParseCfgDesc+0x86>
 80195fe:	bf00      	nop
 8019600:	3728      	adds	r7, #40	; 0x28
 8019602:	46bd      	mov	sp, r7
 8019604:	bd80      	pop	{r7, pc}

08019606 <USBH_ParseInterfaceDesc>:
 8019606:	b480      	push	{r7}
 8019608:	b083      	sub	sp, #12
 801960a:	af00      	add	r7, sp, #0
 801960c:	6078      	str	r0, [r7, #4]
 801960e:	6039      	str	r1, [r7, #0]
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	781a      	ldrb	r2, [r3, #0]
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	701a      	strb	r2, [r3, #0]
 8019618:	683b      	ldr	r3, [r7, #0]
 801961a:	785a      	ldrb	r2, [r3, #1]
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	705a      	strb	r2, [r3, #1]
 8019620:	683b      	ldr	r3, [r7, #0]
 8019622:	789a      	ldrb	r2, [r3, #2]
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	709a      	strb	r2, [r3, #2]
 8019628:	683b      	ldr	r3, [r7, #0]
 801962a:	78da      	ldrb	r2, [r3, #3]
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	70da      	strb	r2, [r3, #3]
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	791a      	ldrb	r2, [r3, #4]
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	711a      	strb	r2, [r3, #4]
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	795a      	ldrb	r2, [r3, #5]
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	715a      	strb	r2, [r3, #5]
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	799a      	ldrb	r2, [r3, #6]
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	719a      	strb	r2, [r3, #6]
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	79da      	ldrb	r2, [r3, #7]
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	71da      	strb	r2, [r3, #7]
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	7a1a      	ldrb	r2, [r3, #8]
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	721a      	strb	r2, [r3, #8]
 8019658:	bf00      	nop
 801965a:	370c      	adds	r7, #12
 801965c:	46bd      	mov	sp, r7
 801965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019662:	4770      	bx	lr

08019664 <USBH_ParseEPDesc>:
 8019664:	b480      	push	{r7}
 8019666:	b083      	sub	sp, #12
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
 801966c:	6039      	str	r1, [r7, #0]
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	781a      	ldrb	r2, [r3, #0]
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	701a      	strb	r2, [r3, #0]
 8019676:	683b      	ldr	r3, [r7, #0]
 8019678:	785a      	ldrb	r2, [r3, #1]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	705a      	strb	r2, [r3, #1]
 801967e:	683b      	ldr	r3, [r7, #0]
 8019680:	789a      	ldrb	r2, [r3, #2]
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	709a      	strb	r2, [r3, #2]
 8019686:	683b      	ldr	r3, [r7, #0]
 8019688:	78da      	ldrb	r2, [r3, #3]
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	70da      	strb	r2, [r3, #3]
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	3304      	adds	r3, #4
 8019692:	781b      	ldrb	r3, [r3, #0]
 8019694:	b29a      	uxth	r2, r3
 8019696:	683b      	ldr	r3, [r7, #0]
 8019698:	3305      	adds	r3, #5
 801969a:	781b      	ldrb	r3, [r3, #0]
 801969c:	b29b      	uxth	r3, r3
 801969e:	021b      	lsls	r3, r3, #8
 80196a0:	b29b      	uxth	r3, r3
 80196a2:	4313      	orrs	r3, r2
 80196a4:	b29a      	uxth	r2, r3
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	809a      	strh	r2, [r3, #4]
 80196aa:	683b      	ldr	r3, [r7, #0]
 80196ac:	799a      	ldrb	r2, [r3, #6]
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	719a      	strb	r2, [r3, #6]
 80196b2:	bf00      	nop
 80196b4:	370c      	adds	r7, #12
 80196b6:	46bd      	mov	sp, r7
 80196b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196bc:	4770      	bx	lr

080196be <USBH_ParseStringDesc>:
 80196be:	b480      	push	{r7}
 80196c0:	b087      	sub	sp, #28
 80196c2:	af00      	add	r7, sp, #0
 80196c4:	60f8      	str	r0, [r7, #12]
 80196c6:	60b9      	str	r1, [r7, #8]
 80196c8:	4613      	mov	r3, r2
 80196ca:	80fb      	strh	r3, [r7, #6]
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	3301      	adds	r3, #1
 80196d0:	781b      	ldrb	r3, [r3, #0]
 80196d2:	2b03      	cmp	r3, #3
 80196d4:	d120      	bne.n	8019718 <USBH_ParseStringDesc+0x5a>
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	781b      	ldrb	r3, [r3, #0]
 80196da:	1e9a      	subs	r2, r3, #2
 80196dc:	88fb      	ldrh	r3, [r7, #6]
 80196de:	4293      	cmp	r3, r2
 80196e0:	bf28      	it	cs
 80196e2:	4613      	movcs	r3, r2
 80196e4:	82bb      	strh	r3, [r7, #20]
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	3302      	adds	r3, #2
 80196ea:	60fb      	str	r3, [r7, #12]
 80196ec:	2300      	movs	r3, #0
 80196ee:	82fb      	strh	r3, [r7, #22]
 80196f0:	e00b      	b.n	801970a <USBH_ParseStringDesc+0x4c>
 80196f2:	8afb      	ldrh	r3, [r7, #22]
 80196f4:	68fa      	ldr	r2, [r7, #12]
 80196f6:	4413      	add	r3, r2
 80196f8:	781a      	ldrb	r2, [r3, #0]
 80196fa:	68bb      	ldr	r3, [r7, #8]
 80196fc:	701a      	strb	r2, [r3, #0]
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	3301      	adds	r3, #1
 8019702:	60bb      	str	r3, [r7, #8]
 8019704:	8afb      	ldrh	r3, [r7, #22]
 8019706:	3302      	adds	r3, #2
 8019708:	82fb      	strh	r3, [r7, #22]
 801970a:	8afa      	ldrh	r2, [r7, #22]
 801970c:	8abb      	ldrh	r3, [r7, #20]
 801970e:	429a      	cmp	r2, r3
 8019710:	d3ef      	bcc.n	80196f2 <USBH_ParseStringDesc+0x34>
 8019712:	68bb      	ldr	r3, [r7, #8]
 8019714:	2200      	movs	r2, #0
 8019716:	701a      	strb	r2, [r3, #0]
 8019718:	bf00      	nop
 801971a:	371c      	adds	r7, #28
 801971c:	46bd      	mov	sp, r7
 801971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019722:	4770      	bx	lr

08019724 <USBH_GetNextDesc>:
 8019724:	b480      	push	{r7}
 8019726:	b085      	sub	sp, #20
 8019728:	af00      	add	r7, sp, #0
 801972a:	6078      	str	r0, [r7, #4]
 801972c:	6039      	str	r1, [r7, #0]
 801972e:	683b      	ldr	r3, [r7, #0]
 8019730:	881a      	ldrh	r2, [r3, #0]
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	781b      	ldrb	r3, [r3, #0]
 8019736:	b29b      	uxth	r3, r3
 8019738:	4413      	add	r3, r2
 801973a:	b29a      	uxth	r2, r3
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	801a      	strh	r2, [r3, #0]
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	781b      	ldrb	r3, [r3, #0]
 8019744:	461a      	mov	r2, r3
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	4413      	add	r3, r2
 801974a:	60fb      	str	r3, [r7, #12]
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	4618      	mov	r0, r3
 8019750:	3714      	adds	r7, #20
 8019752:	46bd      	mov	sp, r7
 8019754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019758:	4770      	bx	lr

0801975a <USBH_CtlReq>:
 801975a:	b580      	push	{r7, lr}
 801975c:	b086      	sub	sp, #24
 801975e:	af00      	add	r7, sp, #0
 8019760:	60f8      	str	r0, [r7, #12]
 8019762:	60b9      	str	r1, [r7, #8]
 8019764:	4613      	mov	r3, r2
 8019766:	80fb      	strh	r3, [r7, #6]
 8019768:	2301      	movs	r3, #1
 801976a:	75fb      	strb	r3, [r7, #23]
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	789b      	ldrb	r3, [r3, #2]
 8019770:	2b01      	cmp	r3, #1
 8019772:	d002      	beq.n	801977a <USBH_CtlReq+0x20>
 8019774:	2b02      	cmp	r3, #2
 8019776:	d00f      	beq.n	8019798 <USBH_CtlReq+0x3e>
 8019778:	e027      	b.n	80197ca <USBH_CtlReq+0x70>
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	68ba      	ldr	r2, [r7, #8]
 801977e:	609a      	str	r2, [r3, #8]
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	88fa      	ldrh	r2, [r7, #6]
 8019784:	819a      	strh	r2, [r3, #12]
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	2201      	movs	r2, #1
 801978a:	761a      	strb	r2, [r3, #24]
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	2202      	movs	r2, #2
 8019790:	709a      	strb	r2, [r3, #2]
 8019792:	2301      	movs	r3, #1
 8019794:	75fb      	strb	r3, [r7, #23]
 8019796:	e018      	b.n	80197ca <USBH_CtlReq+0x70>
 8019798:	68f8      	ldr	r0, [r7, #12]
 801979a:	f000 f81b 	bl	80197d4 <USBH_HandleControl>
 801979e:	4603      	mov	r3, r0
 80197a0:	75fb      	strb	r3, [r7, #23]
 80197a2:	7dfb      	ldrb	r3, [r7, #23]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d002      	beq.n	80197ae <USBH_CtlReq+0x54>
 80197a8:	7dfb      	ldrb	r3, [r7, #23]
 80197aa:	2b03      	cmp	r3, #3
 80197ac:	d106      	bne.n	80197bc <USBH_CtlReq+0x62>
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	2201      	movs	r2, #1
 80197b2:	709a      	strb	r2, [r3, #2]
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	2200      	movs	r2, #0
 80197b8:	761a      	strb	r2, [r3, #24]
 80197ba:	e005      	b.n	80197c8 <USBH_CtlReq+0x6e>
 80197bc:	7dfb      	ldrb	r3, [r7, #23]
 80197be:	2b02      	cmp	r3, #2
 80197c0:	d102      	bne.n	80197c8 <USBH_CtlReq+0x6e>
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	2201      	movs	r2, #1
 80197c6:	709a      	strb	r2, [r3, #2]
 80197c8:	bf00      	nop
 80197ca:	7dfb      	ldrb	r3, [r7, #23]
 80197cc:	4618      	mov	r0, r3
 80197ce:	3718      	adds	r7, #24
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}

080197d4 <USBH_HandleControl>:
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b086      	sub	sp, #24
 80197d8:	af02      	add	r7, sp, #8
 80197da:	6078      	str	r0, [r7, #4]
 80197dc:	2301      	movs	r3, #1
 80197de:	73fb      	strb	r3, [r7, #15]
 80197e0:	2300      	movs	r3, #0
 80197e2:	73bb      	strb	r3, [r7, #14]
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	7e1b      	ldrb	r3, [r3, #24]
 80197e8:	3b01      	subs	r3, #1
 80197ea:	2b0a      	cmp	r3, #10
 80197ec:	f200 8158 	bhi.w	8019aa0 <USBH_HandleControl+0x2cc>
 80197f0:	a201      	add	r2, pc, #4	; (adr r2, 80197f8 <USBH_HandleControl+0x24>)
 80197f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197f6:	bf00      	nop
 80197f8:	08019825 	.word	0x08019825
 80197fc:	0801983f 	.word	0x0801983f
 8019800:	080198a9 	.word	0x080198a9
 8019804:	080198cf 	.word	0x080198cf
 8019808:	08019907 	.word	0x08019907
 801980c:	08019933 	.word	0x08019933
 8019810:	08019985 	.word	0x08019985
 8019814:	080199a7 	.word	0x080199a7
 8019818:	080199e3 	.word	0x080199e3
 801981c:	08019a0b 	.word	0x08019a0b
 8019820:	08019a49 	.word	0x08019a49
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	f103 0110 	add.w	r1, r3, #16
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	795b      	ldrb	r3, [r3, #5]
 801982e:	461a      	mov	r2, r3
 8019830:	6878      	ldr	r0, [r7, #4]
 8019832:	f000 f945 	bl	8019ac0 <USBH_CtlSendSetup>
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	2202      	movs	r2, #2
 801983a:	761a      	strb	r2, [r3, #24]
 801983c:	e13b      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	795b      	ldrb	r3, [r3, #5]
 8019842:	4619      	mov	r1, r3
 8019844:	6878      	ldr	r0, [r7, #4]
 8019846:	f004 fb5f 	bl	801df08 <USBH_LL_GetURBState>
 801984a:	4603      	mov	r3, r0
 801984c:	73bb      	strb	r3, [r7, #14]
 801984e:	7bbb      	ldrb	r3, [r7, #14]
 8019850:	2b01      	cmp	r3, #1
 8019852:	d11e      	bne.n	8019892 <USBH_HandleControl+0xbe>
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	7c1b      	ldrb	r3, [r3, #16]
 8019858:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801985c:	737b      	strb	r3, [r7, #13]
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	8adb      	ldrh	r3, [r3, #22]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d00a      	beq.n	801987c <USBH_HandleControl+0xa8>
 8019866:	7b7b      	ldrb	r3, [r7, #13]
 8019868:	2b80      	cmp	r3, #128	; 0x80
 801986a:	d103      	bne.n	8019874 <USBH_HandleControl+0xa0>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	2203      	movs	r2, #3
 8019870:	761a      	strb	r2, [r3, #24]
 8019872:	e117      	b.n	8019aa4 <USBH_HandleControl+0x2d0>
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	2205      	movs	r2, #5
 8019878:	761a      	strb	r2, [r3, #24]
 801987a:	e113      	b.n	8019aa4 <USBH_HandleControl+0x2d0>
 801987c:	7b7b      	ldrb	r3, [r7, #13]
 801987e:	2b80      	cmp	r3, #128	; 0x80
 8019880:	d103      	bne.n	801988a <USBH_HandleControl+0xb6>
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	2209      	movs	r2, #9
 8019886:	761a      	strb	r2, [r3, #24]
 8019888:	e10c      	b.n	8019aa4 <USBH_HandleControl+0x2d0>
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2207      	movs	r2, #7
 801988e:	761a      	strb	r2, [r3, #24]
 8019890:	e108      	b.n	8019aa4 <USBH_HandleControl+0x2d0>
 8019892:	7bbb      	ldrb	r3, [r7, #14]
 8019894:	2b04      	cmp	r3, #4
 8019896:	d003      	beq.n	80198a0 <USBH_HandleControl+0xcc>
 8019898:	7bbb      	ldrb	r3, [r7, #14]
 801989a:	2b02      	cmp	r3, #2
 801989c:	f040 8102 	bne.w	8019aa4 <USBH_HandleControl+0x2d0>
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	220b      	movs	r2, #11
 80198a4:	761a      	strb	r2, [r3, #24]
 80198a6:	e0fd      	b.n	8019aa4 <USBH_HandleControl+0x2d0>
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80198ae:	b29a      	uxth	r2, r3
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	81da      	strh	r2, [r3, #14]
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	6899      	ldr	r1, [r3, #8]
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	899a      	ldrh	r2, [r3, #12]
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	791b      	ldrb	r3, [r3, #4]
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f000 f93c 	bl	8019b3e <USBH_CtlReceiveData>
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	2204      	movs	r2, #4
 80198ca:	761a      	strb	r2, [r3, #24]
 80198cc:	e0f3      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	791b      	ldrb	r3, [r3, #4]
 80198d2:	4619      	mov	r1, r3
 80198d4:	6878      	ldr	r0, [r7, #4]
 80198d6:	f004 fb17 	bl	801df08 <USBH_LL_GetURBState>
 80198da:	4603      	mov	r3, r0
 80198dc:	73bb      	strb	r3, [r7, #14]
 80198de:	7bbb      	ldrb	r3, [r7, #14]
 80198e0:	2b01      	cmp	r3, #1
 80198e2:	d102      	bne.n	80198ea <USBH_HandleControl+0x116>
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	2209      	movs	r2, #9
 80198e8:	761a      	strb	r2, [r3, #24]
 80198ea:	7bbb      	ldrb	r3, [r7, #14]
 80198ec:	2b05      	cmp	r3, #5
 80198ee:	d102      	bne.n	80198f6 <USBH_HandleControl+0x122>
 80198f0:	2303      	movs	r3, #3
 80198f2:	73fb      	strb	r3, [r7, #15]
 80198f4:	e0d8      	b.n	8019aa8 <USBH_HandleControl+0x2d4>
 80198f6:	7bbb      	ldrb	r3, [r7, #14]
 80198f8:	2b04      	cmp	r3, #4
 80198fa:	f040 80d5 	bne.w	8019aa8 <USBH_HandleControl+0x2d4>
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	220b      	movs	r2, #11
 8019902:	761a      	strb	r2, [r3, #24]
 8019904:	e0d0      	b.n	8019aa8 <USBH_HandleControl+0x2d4>
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	6899      	ldr	r1, [r3, #8]
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	899a      	ldrh	r2, [r3, #12]
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	7958      	ldrb	r0, [r3, #5]
 8019912:	2301      	movs	r3, #1
 8019914:	9300      	str	r3, [sp, #0]
 8019916:	4603      	mov	r3, r0
 8019918:	6878      	ldr	r0, [r7, #4]
 801991a:	f000 f8eb 	bl	8019af4 <USBH_CtlSendData>
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019924:	b29a      	uxth	r2, r3
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	81da      	strh	r2, [r3, #14]
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	2206      	movs	r2, #6
 801992e:	761a      	strb	r2, [r3, #24]
 8019930:	e0c1      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	795b      	ldrb	r3, [r3, #5]
 8019936:	4619      	mov	r1, r3
 8019938:	6878      	ldr	r0, [r7, #4]
 801993a:	f004 fae5 	bl	801df08 <USBH_LL_GetURBState>
 801993e:	4603      	mov	r3, r0
 8019940:	73bb      	strb	r3, [r7, #14]
 8019942:	7bbb      	ldrb	r3, [r7, #14]
 8019944:	2b01      	cmp	r3, #1
 8019946:	d103      	bne.n	8019950 <USBH_HandleControl+0x17c>
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2207      	movs	r2, #7
 801994c:	761a      	strb	r2, [r3, #24]
 801994e:	e0ad      	b.n	8019aac <USBH_HandleControl+0x2d8>
 8019950:	7bbb      	ldrb	r3, [r7, #14]
 8019952:	2b05      	cmp	r3, #5
 8019954:	d105      	bne.n	8019962 <USBH_HandleControl+0x18e>
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	220c      	movs	r2, #12
 801995a:	761a      	strb	r2, [r3, #24]
 801995c:	2303      	movs	r3, #3
 801995e:	73fb      	strb	r3, [r7, #15]
 8019960:	e0a4      	b.n	8019aac <USBH_HandleControl+0x2d8>
 8019962:	7bbb      	ldrb	r3, [r7, #14]
 8019964:	2b02      	cmp	r3, #2
 8019966:	d103      	bne.n	8019970 <USBH_HandleControl+0x19c>
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	2205      	movs	r2, #5
 801996c:	761a      	strb	r2, [r3, #24]
 801996e:	e09d      	b.n	8019aac <USBH_HandleControl+0x2d8>
 8019970:	7bbb      	ldrb	r3, [r7, #14]
 8019972:	2b04      	cmp	r3, #4
 8019974:	f040 809a 	bne.w	8019aac <USBH_HandleControl+0x2d8>
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	220b      	movs	r2, #11
 801997c:	761a      	strb	r2, [r3, #24]
 801997e:	2302      	movs	r3, #2
 8019980:	73fb      	strb	r3, [r7, #15]
 8019982:	e093      	b.n	8019aac <USBH_HandleControl+0x2d8>
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	791b      	ldrb	r3, [r3, #4]
 8019988:	2200      	movs	r2, #0
 801998a:	2100      	movs	r1, #0
 801998c:	6878      	ldr	r0, [r7, #4]
 801998e:	f000 f8d6 	bl	8019b3e <USBH_CtlReceiveData>
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019998:	b29a      	uxth	r2, r3
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	81da      	strh	r2, [r3, #14]
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	2208      	movs	r2, #8
 80199a2:	761a      	strb	r2, [r3, #24]
 80199a4:	e087      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	791b      	ldrb	r3, [r3, #4]
 80199aa:	4619      	mov	r1, r3
 80199ac:	6878      	ldr	r0, [r7, #4]
 80199ae:	f004 faab 	bl	801df08 <USBH_LL_GetURBState>
 80199b2:	4603      	mov	r3, r0
 80199b4:	73bb      	strb	r3, [r7, #14]
 80199b6:	7bbb      	ldrb	r3, [r7, #14]
 80199b8:	2b01      	cmp	r3, #1
 80199ba:	d105      	bne.n	80199c8 <USBH_HandleControl+0x1f4>
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	220d      	movs	r2, #13
 80199c0:	761a      	strb	r2, [r3, #24]
 80199c2:	2300      	movs	r3, #0
 80199c4:	73fb      	strb	r3, [r7, #15]
 80199c6:	e073      	b.n	8019ab0 <USBH_HandleControl+0x2dc>
 80199c8:	7bbb      	ldrb	r3, [r7, #14]
 80199ca:	2b04      	cmp	r3, #4
 80199cc:	d103      	bne.n	80199d6 <USBH_HandleControl+0x202>
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	220b      	movs	r2, #11
 80199d2:	761a      	strb	r2, [r3, #24]
 80199d4:	e06c      	b.n	8019ab0 <USBH_HandleControl+0x2dc>
 80199d6:	7bbb      	ldrb	r3, [r7, #14]
 80199d8:	2b05      	cmp	r3, #5
 80199da:	d169      	bne.n	8019ab0 <USBH_HandleControl+0x2dc>
 80199dc:	2303      	movs	r3, #3
 80199de:	73fb      	strb	r3, [r7, #15]
 80199e0:	e066      	b.n	8019ab0 <USBH_HandleControl+0x2dc>
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	795a      	ldrb	r2, [r3, #5]
 80199e6:	2301      	movs	r3, #1
 80199e8:	9300      	str	r3, [sp, #0]
 80199ea:	4613      	mov	r3, r2
 80199ec:	2200      	movs	r2, #0
 80199ee:	2100      	movs	r1, #0
 80199f0:	6878      	ldr	r0, [r7, #4]
 80199f2:	f000 f87f 	bl	8019af4 <USBH_CtlSendData>
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80199fc:	b29a      	uxth	r2, r3
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	81da      	strh	r2, [r3, #14]
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	220a      	movs	r2, #10
 8019a06:	761a      	strb	r2, [r3, #24]
 8019a08:	e055      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	795b      	ldrb	r3, [r3, #5]
 8019a0e:	4619      	mov	r1, r3
 8019a10:	6878      	ldr	r0, [r7, #4]
 8019a12:	f004 fa79 	bl	801df08 <USBH_LL_GetURBState>
 8019a16:	4603      	mov	r3, r0
 8019a18:	73bb      	strb	r3, [r7, #14]
 8019a1a:	7bbb      	ldrb	r3, [r7, #14]
 8019a1c:	2b01      	cmp	r3, #1
 8019a1e:	d105      	bne.n	8019a2c <USBH_HandleControl+0x258>
 8019a20:	2300      	movs	r3, #0
 8019a22:	73fb      	strb	r3, [r7, #15]
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	220d      	movs	r2, #13
 8019a28:	761a      	strb	r2, [r3, #24]
 8019a2a:	e043      	b.n	8019ab4 <USBH_HandleControl+0x2e0>
 8019a2c:	7bbb      	ldrb	r3, [r7, #14]
 8019a2e:	2b02      	cmp	r3, #2
 8019a30:	d103      	bne.n	8019a3a <USBH_HandleControl+0x266>
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	2209      	movs	r2, #9
 8019a36:	761a      	strb	r2, [r3, #24]
 8019a38:	e03c      	b.n	8019ab4 <USBH_HandleControl+0x2e0>
 8019a3a:	7bbb      	ldrb	r3, [r7, #14]
 8019a3c:	2b04      	cmp	r3, #4
 8019a3e:	d139      	bne.n	8019ab4 <USBH_HandleControl+0x2e0>
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	220b      	movs	r2, #11
 8019a44:	761a      	strb	r2, [r3, #24]
 8019a46:	e035      	b.n	8019ab4 <USBH_HandleControl+0x2e0>
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	7e5b      	ldrb	r3, [r3, #25]
 8019a4c:	3301      	adds	r3, #1
 8019a4e:	b2da      	uxtb	r2, r3
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	765a      	strb	r2, [r3, #25]
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	7e5b      	ldrb	r3, [r3, #25]
 8019a58:	2b02      	cmp	r3, #2
 8019a5a:	d806      	bhi.n	8019a6a <USBH_HandleControl+0x296>
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	2201      	movs	r2, #1
 8019a60:	761a      	strb	r2, [r3, #24]
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	2201      	movs	r2, #1
 8019a66:	709a      	strb	r2, [r3, #2]
 8019a68:	e025      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8019a70:	2106      	movs	r1, #6
 8019a72:	6878      	ldr	r0, [r7, #4]
 8019a74:	4798      	blx	r3
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	2200      	movs	r2, #0
 8019a7a:	765a      	strb	r2, [r3, #25]
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	795b      	ldrb	r3, [r3, #5]
 8019a80:	4619      	mov	r1, r3
 8019a82:	6878      	ldr	r0, [r7, #4]
 8019a84:	f000 f90c 	bl	8019ca0 <USBH_FreePipe>
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	791b      	ldrb	r3, [r3, #4]
 8019a8c:	4619      	mov	r1, r3
 8019a8e:	6878      	ldr	r0, [r7, #4]
 8019a90:	f000 f906 	bl	8019ca0 <USBH_FreePipe>
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	2200      	movs	r2, #0
 8019a98:	701a      	strb	r2, [r3, #0]
 8019a9a:	2302      	movs	r3, #2
 8019a9c:	73fb      	strb	r3, [r7, #15]
 8019a9e:	e00a      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 8019aa0:	bf00      	nop
 8019aa2:	e008      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 8019aa4:	bf00      	nop
 8019aa6:	e006      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 8019aa8:	bf00      	nop
 8019aaa:	e004      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 8019aac:	bf00      	nop
 8019aae:	e002      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 8019ab0:	bf00      	nop
 8019ab2:	e000      	b.n	8019ab6 <USBH_HandleControl+0x2e2>
 8019ab4:	bf00      	nop
 8019ab6:	7bfb      	ldrb	r3, [r7, #15]
 8019ab8:	4618      	mov	r0, r3
 8019aba:	3710      	adds	r7, #16
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd80      	pop	{r7, pc}

08019ac0 <USBH_CtlSendSetup>:
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b088      	sub	sp, #32
 8019ac4:	af04      	add	r7, sp, #16
 8019ac6:	60f8      	str	r0, [r7, #12]
 8019ac8:	60b9      	str	r1, [r7, #8]
 8019aca:	4613      	mov	r3, r2
 8019acc:	71fb      	strb	r3, [r7, #7]
 8019ace:	79f9      	ldrb	r1, [r7, #7]
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	9303      	str	r3, [sp, #12]
 8019ad4:	2308      	movs	r3, #8
 8019ad6:	9302      	str	r3, [sp, #8]
 8019ad8:	68bb      	ldr	r3, [r7, #8]
 8019ada:	9301      	str	r3, [sp, #4]
 8019adc:	2300      	movs	r3, #0
 8019ade:	9300      	str	r3, [sp, #0]
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	68f8      	ldr	r0, [r7, #12]
 8019ae6:	f004 f9de 	bl	801dea6 <USBH_LL_SubmitURB>
 8019aea:	2300      	movs	r3, #0
 8019aec:	4618      	mov	r0, r3
 8019aee:	3710      	adds	r7, #16
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}

08019af4 <USBH_CtlSendData>:
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b088      	sub	sp, #32
 8019af8:	af04      	add	r7, sp, #16
 8019afa:	60f8      	str	r0, [r7, #12]
 8019afc:	60b9      	str	r1, [r7, #8]
 8019afe:	4611      	mov	r1, r2
 8019b00:	461a      	mov	r2, r3
 8019b02:	460b      	mov	r3, r1
 8019b04:	80fb      	strh	r3, [r7, #6]
 8019b06:	4613      	mov	r3, r2
 8019b08:	717b      	strb	r3, [r7, #5]
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d001      	beq.n	8019b18 <USBH_CtlSendData+0x24>
 8019b14:	2300      	movs	r3, #0
 8019b16:	763b      	strb	r3, [r7, #24]
 8019b18:	7979      	ldrb	r1, [r7, #5]
 8019b1a:	7e3b      	ldrb	r3, [r7, #24]
 8019b1c:	9303      	str	r3, [sp, #12]
 8019b1e:	88fb      	ldrh	r3, [r7, #6]
 8019b20:	9302      	str	r3, [sp, #8]
 8019b22:	68bb      	ldr	r3, [r7, #8]
 8019b24:	9301      	str	r3, [sp, #4]
 8019b26:	2301      	movs	r3, #1
 8019b28:	9300      	str	r3, [sp, #0]
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	68f8      	ldr	r0, [r7, #12]
 8019b30:	f004 f9b9 	bl	801dea6 <USBH_LL_SubmitURB>
 8019b34:	2300      	movs	r3, #0
 8019b36:	4618      	mov	r0, r3
 8019b38:	3710      	adds	r7, #16
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	bd80      	pop	{r7, pc}

08019b3e <USBH_CtlReceiveData>:
 8019b3e:	b580      	push	{r7, lr}
 8019b40:	b088      	sub	sp, #32
 8019b42:	af04      	add	r7, sp, #16
 8019b44:	60f8      	str	r0, [r7, #12]
 8019b46:	60b9      	str	r1, [r7, #8]
 8019b48:	4611      	mov	r1, r2
 8019b4a:	461a      	mov	r2, r3
 8019b4c:	460b      	mov	r3, r1
 8019b4e:	80fb      	strh	r3, [r7, #6]
 8019b50:	4613      	mov	r3, r2
 8019b52:	717b      	strb	r3, [r7, #5]
 8019b54:	7979      	ldrb	r1, [r7, #5]
 8019b56:	2300      	movs	r3, #0
 8019b58:	9303      	str	r3, [sp, #12]
 8019b5a:	88fb      	ldrh	r3, [r7, #6]
 8019b5c:	9302      	str	r3, [sp, #8]
 8019b5e:	68bb      	ldr	r3, [r7, #8]
 8019b60:	9301      	str	r3, [sp, #4]
 8019b62:	2301      	movs	r3, #1
 8019b64:	9300      	str	r3, [sp, #0]
 8019b66:	2300      	movs	r3, #0
 8019b68:	2201      	movs	r2, #1
 8019b6a:	68f8      	ldr	r0, [r7, #12]
 8019b6c:	f004 f99b 	bl	801dea6 <USBH_LL_SubmitURB>
 8019b70:	2300      	movs	r3, #0
 8019b72:	4618      	mov	r0, r3
 8019b74:	3710      	adds	r7, #16
 8019b76:	46bd      	mov	sp, r7
 8019b78:	bd80      	pop	{r7, pc}

08019b7a <USBH_BulkSendData>:
 8019b7a:	b580      	push	{r7, lr}
 8019b7c:	b088      	sub	sp, #32
 8019b7e:	af04      	add	r7, sp, #16
 8019b80:	60f8      	str	r0, [r7, #12]
 8019b82:	60b9      	str	r1, [r7, #8]
 8019b84:	4611      	mov	r1, r2
 8019b86:	461a      	mov	r2, r3
 8019b88:	460b      	mov	r3, r1
 8019b8a:	80fb      	strh	r3, [r7, #6]
 8019b8c:	4613      	mov	r3, r2
 8019b8e:	717b      	strb	r3, [r7, #5]
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d001      	beq.n	8019b9e <USBH_BulkSendData+0x24>
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	763b      	strb	r3, [r7, #24]
 8019b9e:	7979      	ldrb	r1, [r7, #5]
 8019ba0:	7e3b      	ldrb	r3, [r7, #24]
 8019ba2:	9303      	str	r3, [sp, #12]
 8019ba4:	88fb      	ldrh	r3, [r7, #6]
 8019ba6:	9302      	str	r3, [sp, #8]
 8019ba8:	68bb      	ldr	r3, [r7, #8]
 8019baa:	9301      	str	r3, [sp, #4]
 8019bac:	2301      	movs	r3, #1
 8019bae:	9300      	str	r3, [sp, #0]
 8019bb0:	2302      	movs	r3, #2
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	68f8      	ldr	r0, [r7, #12]
 8019bb6:	f004 f976 	bl	801dea6 <USBH_LL_SubmitURB>
 8019bba:	2300      	movs	r3, #0
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	3710      	adds	r7, #16
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	bd80      	pop	{r7, pc}

08019bc4 <USBH_BulkReceiveData>:
 8019bc4:	b580      	push	{r7, lr}
 8019bc6:	b088      	sub	sp, #32
 8019bc8:	af04      	add	r7, sp, #16
 8019bca:	60f8      	str	r0, [r7, #12]
 8019bcc:	60b9      	str	r1, [r7, #8]
 8019bce:	4611      	mov	r1, r2
 8019bd0:	461a      	mov	r2, r3
 8019bd2:	460b      	mov	r3, r1
 8019bd4:	80fb      	strh	r3, [r7, #6]
 8019bd6:	4613      	mov	r3, r2
 8019bd8:	717b      	strb	r3, [r7, #5]
 8019bda:	7979      	ldrb	r1, [r7, #5]
 8019bdc:	2300      	movs	r3, #0
 8019bde:	9303      	str	r3, [sp, #12]
 8019be0:	88fb      	ldrh	r3, [r7, #6]
 8019be2:	9302      	str	r3, [sp, #8]
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	9301      	str	r3, [sp, #4]
 8019be8:	2301      	movs	r3, #1
 8019bea:	9300      	str	r3, [sp, #0]
 8019bec:	2302      	movs	r3, #2
 8019bee:	2201      	movs	r2, #1
 8019bf0:	68f8      	ldr	r0, [r7, #12]
 8019bf2:	f004 f958 	bl	801dea6 <USBH_LL_SubmitURB>
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	3710      	adds	r7, #16
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	bd80      	pop	{r7, pc}

08019c00 <USBH_OpenPipe>:
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b086      	sub	sp, #24
 8019c04:	af04      	add	r7, sp, #16
 8019c06:	6078      	str	r0, [r7, #4]
 8019c08:	4608      	mov	r0, r1
 8019c0a:	4611      	mov	r1, r2
 8019c0c:	461a      	mov	r2, r3
 8019c0e:	4603      	mov	r3, r0
 8019c10:	70fb      	strb	r3, [r7, #3]
 8019c12:	460b      	mov	r3, r1
 8019c14:	70bb      	strb	r3, [r7, #2]
 8019c16:	4613      	mov	r3, r2
 8019c18:	707b      	strb	r3, [r7, #1]
 8019c1a:	7878      	ldrb	r0, [r7, #1]
 8019c1c:	78ba      	ldrb	r2, [r7, #2]
 8019c1e:	78f9      	ldrb	r1, [r7, #3]
 8019c20:	8b3b      	ldrh	r3, [r7, #24]
 8019c22:	9302      	str	r3, [sp, #8]
 8019c24:	7d3b      	ldrb	r3, [r7, #20]
 8019c26:	9301      	str	r3, [sp, #4]
 8019c28:	7c3b      	ldrb	r3, [r7, #16]
 8019c2a:	9300      	str	r3, [sp, #0]
 8019c2c:	4603      	mov	r3, r0
 8019c2e:	6878      	ldr	r0, [r7, #4]
 8019c30:	f004 f8eb 	bl	801de0a <USBH_LL_OpenPipe>
 8019c34:	2300      	movs	r3, #0
 8019c36:	4618      	mov	r0, r3
 8019c38:	3708      	adds	r7, #8
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}

08019c3e <USBH_ClosePipe>:
 8019c3e:	b580      	push	{r7, lr}
 8019c40:	b082      	sub	sp, #8
 8019c42:	af00      	add	r7, sp, #0
 8019c44:	6078      	str	r0, [r7, #4]
 8019c46:	460b      	mov	r3, r1
 8019c48:	70fb      	strb	r3, [r7, #3]
 8019c4a:	78fb      	ldrb	r3, [r7, #3]
 8019c4c:	4619      	mov	r1, r3
 8019c4e:	6878      	ldr	r0, [r7, #4]
 8019c50:	f004 f90a 	bl	801de68 <USBH_LL_ClosePipe>
 8019c54:	2300      	movs	r3, #0
 8019c56:	4618      	mov	r0, r3
 8019c58:	3708      	adds	r7, #8
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	bd80      	pop	{r7, pc}

08019c5e <USBH_AllocPipe>:
 8019c5e:	b580      	push	{r7, lr}
 8019c60:	b084      	sub	sp, #16
 8019c62:	af00      	add	r7, sp, #0
 8019c64:	6078      	str	r0, [r7, #4]
 8019c66:	460b      	mov	r3, r1
 8019c68:	70fb      	strb	r3, [r7, #3]
 8019c6a:	6878      	ldr	r0, [r7, #4]
 8019c6c:	f000 f836 	bl	8019cdc <USBH_GetFreePipe>
 8019c70:	4603      	mov	r3, r0
 8019c72:	81fb      	strh	r3, [r7, #14]
 8019c74:	89fb      	ldrh	r3, [r7, #14]
 8019c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019c7a:	4293      	cmp	r3, r2
 8019c7c:	d00a      	beq.n	8019c94 <USBH_AllocPipe+0x36>
 8019c7e:	78fa      	ldrb	r2, [r7, #3]
 8019c80:	89fb      	ldrh	r3, [r7, #14]
 8019c82:	f003 030f 	and.w	r3, r3, #15
 8019c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019c8a:	6879      	ldr	r1, [r7, #4]
 8019c8c:	33e0      	adds	r3, #224	; 0xe0
 8019c8e:	009b      	lsls	r3, r3, #2
 8019c90:	440b      	add	r3, r1
 8019c92:	605a      	str	r2, [r3, #4]
 8019c94:	89fb      	ldrh	r3, [r7, #14]
 8019c96:	b2db      	uxtb	r3, r3
 8019c98:	4618      	mov	r0, r3
 8019c9a:	3710      	adds	r7, #16
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd80      	pop	{r7, pc}

08019ca0 <USBH_FreePipe>:
 8019ca0:	b480      	push	{r7}
 8019ca2:	b083      	sub	sp, #12
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
 8019ca8:	460b      	mov	r3, r1
 8019caa:	70fb      	strb	r3, [r7, #3]
 8019cac:	78fb      	ldrb	r3, [r7, #3]
 8019cae:	2b0a      	cmp	r3, #10
 8019cb0:	d80d      	bhi.n	8019cce <USBH_FreePipe+0x2e>
 8019cb2:	78fb      	ldrb	r3, [r7, #3]
 8019cb4:	687a      	ldr	r2, [r7, #4]
 8019cb6:	33e0      	adds	r3, #224	; 0xe0
 8019cb8:	009b      	lsls	r3, r3, #2
 8019cba:	4413      	add	r3, r2
 8019cbc:	685a      	ldr	r2, [r3, #4]
 8019cbe:	78fb      	ldrb	r3, [r7, #3]
 8019cc0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8019cc4:	6879      	ldr	r1, [r7, #4]
 8019cc6:	33e0      	adds	r3, #224	; 0xe0
 8019cc8:	009b      	lsls	r3, r3, #2
 8019cca:	440b      	add	r3, r1
 8019ccc:	605a      	str	r2, [r3, #4]
 8019cce:	2300      	movs	r3, #0
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	370c      	adds	r7, #12
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cda:	4770      	bx	lr

08019cdc <USBH_GetFreePipe>:
 8019cdc:	b480      	push	{r7}
 8019cde:	b085      	sub	sp, #20
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	73fb      	strb	r3, [r7, #15]
 8019ce8:	2300      	movs	r3, #0
 8019cea:	73fb      	strb	r3, [r7, #15]
 8019cec:	e00f      	b.n	8019d0e <USBH_GetFreePipe+0x32>
 8019cee:	7bfb      	ldrb	r3, [r7, #15]
 8019cf0:	687a      	ldr	r2, [r7, #4]
 8019cf2:	33e0      	adds	r3, #224	; 0xe0
 8019cf4:	009b      	lsls	r3, r3, #2
 8019cf6:	4413      	add	r3, r2
 8019cf8:	685b      	ldr	r3, [r3, #4]
 8019cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d102      	bne.n	8019d08 <USBH_GetFreePipe+0x2c>
 8019d02:	7bfb      	ldrb	r3, [r7, #15]
 8019d04:	b29b      	uxth	r3, r3
 8019d06:	e007      	b.n	8019d18 <USBH_GetFreePipe+0x3c>
 8019d08:	7bfb      	ldrb	r3, [r7, #15]
 8019d0a:	3301      	adds	r3, #1
 8019d0c:	73fb      	strb	r3, [r7, #15]
 8019d0e:	7bfb      	ldrb	r3, [r7, #15]
 8019d10:	2b0a      	cmp	r3, #10
 8019d12:	d9ec      	bls.n	8019cee <USBH_GetFreePipe+0x12>
 8019d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d18:	4618      	mov	r0, r3
 8019d1a:	3714      	adds	r7, #20
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d22:	4770      	bx	lr

08019d24 <disk_status>:
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b084      	sub	sp, #16
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	71fb      	strb	r3, [r7, #7]
 8019d2e:	79fb      	ldrb	r3, [r7, #7]
 8019d30:	4a08      	ldr	r2, [pc, #32]	; (8019d54 <disk_status+0x30>)
 8019d32:	009b      	lsls	r3, r3, #2
 8019d34:	4413      	add	r3, r2
 8019d36:	685b      	ldr	r3, [r3, #4]
 8019d38:	685b      	ldr	r3, [r3, #4]
 8019d3a:	79fa      	ldrb	r2, [r7, #7]
 8019d3c:	4905      	ldr	r1, [pc, #20]	; (8019d54 <disk_status+0x30>)
 8019d3e:	440a      	add	r2, r1
 8019d40:	7c12      	ldrb	r2, [r2, #16]
 8019d42:	4610      	mov	r0, r2
 8019d44:	4798      	blx	r3
 8019d46:	4603      	mov	r3, r0
 8019d48:	73fb      	strb	r3, [r7, #15]
 8019d4a:	7bfb      	ldrb	r3, [r7, #15]
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	3710      	adds	r7, #16
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}
 8019d54:	20000df8 	.word	0x20000df8

08019d58 <disk_initialize>:
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b084      	sub	sp, #16
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	4603      	mov	r3, r0
 8019d60:	71fb      	strb	r3, [r7, #7]
 8019d62:	2300      	movs	r3, #0
 8019d64:	73fb      	strb	r3, [r7, #15]
 8019d66:	79fb      	ldrb	r3, [r7, #7]
 8019d68:	4a0d      	ldr	r2, [pc, #52]	; (8019da0 <disk_initialize+0x48>)
 8019d6a:	5cd3      	ldrb	r3, [r2, r3]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d111      	bne.n	8019d94 <disk_initialize+0x3c>
 8019d70:	79fb      	ldrb	r3, [r7, #7]
 8019d72:	4a0b      	ldr	r2, [pc, #44]	; (8019da0 <disk_initialize+0x48>)
 8019d74:	2101      	movs	r1, #1
 8019d76:	54d1      	strb	r1, [r2, r3]
 8019d78:	79fb      	ldrb	r3, [r7, #7]
 8019d7a:	4a09      	ldr	r2, [pc, #36]	; (8019da0 <disk_initialize+0x48>)
 8019d7c:	009b      	lsls	r3, r3, #2
 8019d7e:	4413      	add	r3, r2
 8019d80:	685b      	ldr	r3, [r3, #4]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	79fa      	ldrb	r2, [r7, #7]
 8019d86:	4906      	ldr	r1, [pc, #24]	; (8019da0 <disk_initialize+0x48>)
 8019d88:	440a      	add	r2, r1
 8019d8a:	7c12      	ldrb	r2, [r2, #16]
 8019d8c:	4610      	mov	r0, r2
 8019d8e:	4798      	blx	r3
 8019d90:	4603      	mov	r3, r0
 8019d92:	73fb      	strb	r3, [r7, #15]
 8019d94:	7bfb      	ldrb	r3, [r7, #15]
 8019d96:	4618      	mov	r0, r3
 8019d98:	3710      	adds	r7, #16
 8019d9a:	46bd      	mov	sp, r7
 8019d9c:	bd80      	pop	{r7, pc}
 8019d9e:	bf00      	nop
 8019da0:	20000df8 	.word	0x20000df8

08019da4 <disk_read>:
 8019da4:	b590      	push	{r4, r7, lr}
 8019da6:	b087      	sub	sp, #28
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	60b9      	str	r1, [r7, #8]
 8019dac:	607a      	str	r2, [r7, #4]
 8019dae:	603b      	str	r3, [r7, #0]
 8019db0:	4603      	mov	r3, r0
 8019db2:	73fb      	strb	r3, [r7, #15]
 8019db4:	7bfb      	ldrb	r3, [r7, #15]
 8019db6:	4a0a      	ldr	r2, [pc, #40]	; (8019de0 <disk_read+0x3c>)
 8019db8:	009b      	lsls	r3, r3, #2
 8019dba:	4413      	add	r3, r2
 8019dbc:	685b      	ldr	r3, [r3, #4]
 8019dbe:	689c      	ldr	r4, [r3, #8]
 8019dc0:	7bfb      	ldrb	r3, [r7, #15]
 8019dc2:	4a07      	ldr	r2, [pc, #28]	; (8019de0 <disk_read+0x3c>)
 8019dc4:	4413      	add	r3, r2
 8019dc6:	7c18      	ldrb	r0, [r3, #16]
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	687a      	ldr	r2, [r7, #4]
 8019dcc:	68b9      	ldr	r1, [r7, #8]
 8019dce:	47a0      	blx	r4
 8019dd0:	4603      	mov	r3, r0
 8019dd2:	75fb      	strb	r3, [r7, #23]
 8019dd4:	7dfb      	ldrb	r3, [r7, #23]
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	371c      	adds	r7, #28
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	bd90      	pop	{r4, r7, pc}
 8019dde:	bf00      	nop
 8019de0:	20000df8 	.word	0x20000df8

08019de4 <disk_write>:
 8019de4:	b590      	push	{r4, r7, lr}
 8019de6:	b087      	sub	sp, #28
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	60b9      	str	r1, [r7, #8]
 8019dec:	607a      	str	r2, [r7, #4]
 8019dee:	603b      	str	r3, [r7, #0]
 8019df0:	4603      	mov	r3, r0
 8019df2:	73fb      	strb	r3, [r7, #15]
 8019df4:	7bfb      	ldrb	r3, [r7, #15]
 8019df6:	4a0a      	ldr	r2, [pc, #40]	; (8019e20 <disk_write+0x3c>)
 8019df8:	009b      	lsls	r3, r3, #2
 8019dfa:	4413      	add	r3, r2
 8019dfc:	685b      	ldr	r3, [r3, #4]
 8019dfe:	68dc      	ldr	r4, [r3, #12]
 8019e00:	7bfb      	ldrb	r3, [r7, #15]
 8019e02:	4a07      	ldr	r2, [pc, #28]	; (8019e20 <disk_write+0x3c>)
 8019e04:	4413      	add	r3, r2
 8019e06:	7c18      	ldrb	r0, [r3, #16]
 8019e08:	683b      	ldr	r3, [r7, #0]
 8019e0a:	687a      	ldr	r2, [r7, #4]
 8019e0c:	68b9      	ldr	r1, [r7, #8]
 8019e0e:	47a0      	blx	r4
 8019e10:	4603      	mov	r3, r0
 8019e12:	75fb      	strb	r3, [r7, #23]
 8019e14:	7dfb      	ldrb	r3, [r7, #23]
 8019e16:	4618      	mov	r0, r3
 8019e18:	371c      	adds	r7, #28
 8019e1a:	46bd      	mov	sp, r7
 8019e1c:	bd90      	pop	{r4, r7, pc}
 8019e1e:	bf00      	nop
 8019e20:	20000df8 	.word	0x20000df8

08019e24 <disk_ioctl>:
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b084      	sub	sp, #16
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	603a      	str	r2, [r7, #0]
 8019e2e:	71fb      	strb	r3, [r7, #7]
 8019e30:	460b      	mov	r3, r1
 8019e32:	71bb      	strb	r3, [r7, #6]
 8019e34:	79fb      	ldrb	r3, [r7, #7]
 8019e36:	4a09      	ldr	r2, [pc, #36]	; (8019e5c <disk_ioctl+0x38>)
 8019e38:	009b      	lsls	r3, r3, #2
 8019e3a:	4413      	add	r3, r2
 8019e3c:	685b      	ldr	r3, [r3, #4]
 8019e3e:	691b      	ldr	r3, [r3, #16]
 8019e40:	79fa      	ldrb	r2, [r7, #7]
 8019e42:	4906      	ldr	r1, [pc, #24]	; (8019e5c <disk_ioctl+0x38>)
 8019e44:	440a      	add	r2, r1
 8019e46:	7c10      	ldrb	r0, [r2, #16]
 8019e48:	79b9      	ldrb	r1, [r7, #6]
 8019e4a:	683a      	ldr	r2, [r7, #0]
 8019e4c:	4798      	blx	r3
 8019e4e:	4603      	mov	r3, r0
 8019e50:	73fb      	strb	r3, [r7, #15]
 8019e52:	7bfb      	ldrb	r3, [r7, #15]
 8019e54:	4618      	mov	r0, r3
 8019e56:	3710      	adds	r7, #16
 8019e58:	46bd      	mov	sp, r7
 8019e5a:	bd80      	pop	{r7, pc}
 8019e5c:	20000df8 	.word	0x20000df8

08019e60 <ld_word>:
 8019e60:	b480      	push	{r7}
 8019e62:	b085      	sub	sp, #20
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	6078      	str	r0, [r7, #4]
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	3301      	adds	r3, #1
 8019e6c:	781b      	ldrb	r3, [r3, #0]
 8019e6e:	81fb      	strh	r3, [r7, #14]
 8019e70:	89fb      	ldrh	r3, [r7, #14]
 8019e72:	021b      	lsls	r3, r3, #8
 8019e74:	b21a      	sxth	r2, r3
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	781b      	ldrb	r3, [r3, #0]
 8019e7a:	b21b      	sxth	r3, r3
 8019e7c:	4313      	orrs	r3, r2
 8019e7e:	b21b      	sxth	r3, r3
 8019e80:	81fb      	strh	r3, [r7, #14]
 8019e82:	89fb      	ldrh	r3, [r7, #14]
 8019e84:	4618      	mov	r0, r3
 8019e86:	3714      	adds	r7, #20
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8e:	4770      	bx	lr

08019e90 <ld_dword>:
 8019e90:	b480      	push	{r7}
 8019e92:	b085      	sub	sp, #20
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	3303      	adds	r3, #3
 8019e9c:	781b      	ldrb	r3, [r3, #0]
 8019e9e:	60fb      	str	r3, [r7, #12]
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	021b      	lsls	r3, r3, #8
 8019ea4:	687a      	ldr	r2, [r7, #4]
 8019ea6:	3202      	adds	r2, #2
 8019ea8:	7812      	ldrb	r2, [r2, #0]
 8019eaa:	4313      	orrs	r3, r2
 8019eac:	60fb      	str	r3, [r7, #12]
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	021b      	lsls	r3, r3, #8
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	3201      	adds	r2, #1
 8019eb6:	7812      	ldrb	r2, [r2, #0]
 8019eb8:	4313      	orrs	r3, r2
 8019eba:	60fb      	str	r3, [r7, #12]
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	021b      	lsls	r3, r3, #8
 8019ec0:	687a      	ldr	r2, [r7, #4]
 8019ec2:	7812      	ldrb	r2, [r2, #0]
 8019ec4:	4313      	orrs	r3, r2
 8019ec6:	60fb      	str	r3, [r7, #12]
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	4618      	mov	r0, r3
 8019ecc:	3714      	adds	r7, #20
 8019ece:	46bd      	mov	sp, r7
 8019ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed4:	4770      	bx	lr

08019ed6 <st_word>:
 8019ed6:	b480      	push	{r7}
 8019ed8:	b083      	sub	sp, #12
 8019eda:	af00      	add	r7, sp, #0
 8019edc:	6078      	str	r0, [r7, #4]
 8019ede:	460b      	mov	r3, r1
 8019ee0:	807b      	strh	r3, [r7, #2]
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	1c5a      	adds	r2, r3, #1
 8019ee6:	607a      	str	r2, [r7, #4]
 8019ee8:	887a      	ldrh	r2, [r7, #2]
 8019eea:	b2d2      	uxtb	r2, r2
 8019eec:	701a      	strb	r2, [r3, #0]
 8019eee:	887b      	ldrh	r3, [r7, #2]
 8019ef0:	0a1b      	lsrs	r3, r3, #8
 8019ef2:	807b      	strh	r3, [r7, #2]
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	1c5a      	adds	r2, r3, #1
 8019ef8:	607a      	str	r2, [r7, #4]
 8019efa:	887a      	ldrh	r2, [r7, #2]
 8019efc:	b2d2      	uxtb	r2, r2
 8019efe:	701a      	strb	r2, [r3, #0]
 8019f00:	bf00      	nop
 8019f02:	370c      	adds	r7, #12
 8019f04:	46bd      	mov	sp, r7
 8019f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f0a:	4770      	bx	lr

08019f0c <st_dword>:
 8019f0c:	b480      	push	{r7}
 8019f0e:	b083      	sub	sp, #12
 8019f10:	af00      	add	r7, sp, #0
 8019f12:	6078      	str	r0, [r7, #4]
 8019f14:	6039      	str	r1, [r7, #0]
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	1c5a      	adds	r2, r3, #1
 8019f1a:	607a      	str	r2, [r7, #4]
 8019f1c:	683a      	ldr	r2, [r7, #0]
 8019f1e:	b2d2      	uxtb	r2, r2
 8019f20:	701a      	strb	r2, [r3, #0]
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	0a1b      	lsrs	r3, r3, #8
 8019f26:	603b      	str	r3, [r7, #0]
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	1c5a      	adds	r2, r3, #1
 8019f2c:	607a      	str	r2, [r7, #4]
 8019f2e:	683a      	ldr	r2, [r7, #0]
 8019f30:	b2d2      	uxtb	r2, r2
 8019f32:	701a      	strb	r2, [r3, #0]
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	0a1b      	lsrs	r3, r3, #8
 8019f38:	603b      	str	r3, [r7, #0]
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	1c5a      	adds	r2, r3, #1
 8019f3e:	607a      	str	r2, [r7, #4]
 8019f40:	683a      	ldr	r2, [r7, #0]
 8019f42:	b2d2      	uxtb	r2, r2
 8019f44:	701a      	strb	r2, [r3, #0]
 8019f46:	683b      	ldr	r3, [r7, #0]
 8019f48:	0a1b      	lsrs	r3, r3, #8
 8019f4a:	603b      	str	r3, [r7, #0]
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	1c5a      	adds	r2, r3, #1
 8019f50:	607a      	str	r2, [r7, #4]
 8019f52:	683a      	ldr	r2, [r7, #0]
 8019f54:	b2d2      	uxtb	r2, r2
 8019f56:	701a      	strb	r2, [r3, #0]
 8019f58:	bf00      	nop
 8019f5a:	370c      	adds	r7, #12
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f62:	4770      	bx	lr

08019f64 <mem_cpy>:
 8019f64:	b480      	push	{r7}
 8019f66:	b087      	sub	sp, #28
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	60f8      	str	r0, [r7, #12]
 8019f6c:	60b9      	str	r1, [r7, #8]
 8019f6e:	607a      	str	r2, [r7, #4]
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	617b      	str	r3, [r7, #20]
 8019f74:	68bb      	ldr	r3, [r7, #8]
 8019f76:	613b      	str	r3, [r7, #16]
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d00d      	beq.n	8019f9a <mem_cpy+0x36>
 8019f7e:	693a      	ldr	r2, [r7, #16]
 8019f80:	1c53      	adds	r3, r2, #1
 8019f82:	613b      	str	r3, [r7, #16]
 8019f84:	697b      	ldr	r3, [r7, #20]
 8019f86:	1c59      	adds	r1, r3, #1
 8019f88:	6179      	str	r1, [r7, #20]
 8019f8a:	7812      	ldrb	r2, [r2, #0]
 8019f8c:	701a      	strb	r2, [r3, #0]
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	3b01      	subs	r3, #1
 8019f92:	607b      	str	r3, [r7, #4]
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d1f1      	bne.n	8019f7e <mem_cpy+0x1a>
 8019f9a:	bf00      	nop
 8019f9c:	371c      	adds	r7, #28
 8019f9e:	46bd      	mov	sp, r7
 8019fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa4:	4770      	bx	lr

08019fa6 <mem_set>:
 8019fa6:	b480      	push	{r7}
 8019fa8:	b087      	sub	sp, #28
 8019faa:	af00      	add	r7, sp, #0
 8019fac:	60f8      	str	r0, [r7, #12]
 8019fae:	60b9      	str	r1, [r7, #8]
 8019fb0:	607a      	str	r2, [r7, #4]
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	617b      	str	r3, [r7, #20]
 8019fb6:	697b      	ldr	r3, [r7, #20]
 8019fb8:	1c5a      	adds	r2, r3, #1
 8019fba:	617a      	str	r2, [r7, #20]
 8019fbc:	68ba      	ldr	r2, [r7, #8]
 8019fbe:	b2d2      	uxtb	r2, r2
 8019fc0:	701a      	strb	r2, [r3, #0]
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	3b01      	subs	r3, #1
 8019fc6:	607b      	str	r3, [r7, #4]
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d1f3      	bne.n	8019fb6 <mem_set+0x10>
 8019fce:	bf00      	nop
 8019fd0:	371c      	adds	r7, #28
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd8:	4770      	bx	lr

08019fda <mem_cmp>:
 8019fda:	b480      	push	{r7}
 8019fdc:	b089      	sub	sp, #36	; 0x24
 8019fde:	af00      	add	r7, sp, #0
 8019fe0:	60f8      	str	r0, [r7, #12]
 8019fe2:	60b9      	str	r1, [r7, #8]
 8019fe4:	607a      	str	r2, [r7, #4]
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	61fb      	str	r3, [r7, #28]
 8019fea:	68bb      	ldr	r3, [r7, #8]
 8019fec:	61bb      	str	r3, [r7, #24]
 8019fee:	2300      	movs	r3, #0
 8019ff0:	617b      	str	r3, [r7, #20]
 8019ff2:	69fb      	ldr	r3, [r7, #28]
 8019ff4:	1c5a      	adds	r2, r3, #1
 8019ff6:	61fa      	str	r2, [r7, #28]
 8019ff8:	781b      	ldrb	r3, [r3, #0]
 8019ffa:	4619      	mov	r1, r3
 8019ffc:	69bb      	ldr	r3, [r7, #24]
 8019ffe:	1c5a      	adds	r2, r3, #1
 801a000:	61ba      	str	r2, [r7, #24]
 801a002:	781b      	ldrb	r3, [r3, #0]
 801a004:	1acb      	subs	r3, r1, r3
 801a006:	617b      	str	r3, [r7, #20]
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	3b01      	subs	r3, #1
 801a00c:	607b      	str	r3, [r7, #4]
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d002      	beq.n	801a01a <mem_cmp+0x40>
 801a014:	697b      	ldr	r3, [r7, #20]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d0eb      	beq.n	8019ff2 <mem_cmp+0x18>
 801a01a:	697b      	ldr	r3, [r7, #20]
 801a01c:	4618      	mov	r0, r3
 801a01e:	3724      	adds	r7, #36	; 0x24
 801a020:	46bd      	mov	sp, r7
 801a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a026:	4770      	bx	lr

0801a028 <chk_chr>:
 801a028:	b480      	push	{r7}
 801a02a:	b083      	sub	sp, #12
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
 801a030:	6039      	str	r1, [r7, #0]
 801a032:	e002      	b.n	801a03a <chk_chr+0x12>
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	3301      	adds	r3, #1
 801a038:	607b      	str	r3, [r7, #4]
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	781b      	ldrb	r3, [r3, #0]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d005      	beq.n	801a04e <chk_chr+0x26>
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	781b      	ldrb	r3, [r3, #0]
 801a046:	461a      	mov	r2, r3
 801a048:	683b      	ldr	r3, [r7, #0]
 801a04a:	4293      	cmp	r3, r2
 801a04c:	d1f2      	bne.n	801a034 <chk_chr+0xc>
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	781b      	ldrb	r3, [r3, #0]
 801a052:	4618      	mov	r0, r3
 801a054:	370c      	adds	r7, #12
 801a056:	46bd      	mov	sp, r7
 801a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a05c:	4770      	bx	lr
	...

0801a060 <chk_lock>:
 801a060:	b480      	push	{r7}
 801a062:	b085      	sub	sp, #20
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
 801a068:	6039      	str	r1, [r7, #0]
 801a06a:	2300      	movs	r3, #0
 801a06c:	60bb      	str	r3, [r7, #8]
 801a06e:	68bb      	ldr	r3, [r7, #8]
 801a070:	60fb      	str	r3, [r7, #12]
 801a072:	e029      	b.n	801a0c8 <chk_lock+0x68>
 801a074:	4a27      	ldr	r2, [pc, #156]	; (801a114 <chk_lock+0xb4>)
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	011b      	lsls	r3, r3, #4
 801a07a:	4413      	add	r3, r2
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d01d      	beq.n	801a0be <chk_lock+0x5e>
 801a082:	4a24      	ldr	r2, [pc, #144]	; (801a114 <chk_lock+0xb4>)
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	011b      	lsls	r3, r3, #4
 801a088:	4413      	add	r3, r2
 801a08a:	681a      	ldr	r2, [r3, #0]
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	429a      	cmp	r2, r3
 801a092:	d116      	bne.n	801a0c2 <chk_lock+0x62>
 801a094:	4a1f      	ldr	r2, [pc, #124]	; (801a114 <chk_lock+0xb4>)
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	011b      	lsls	r3, r3, #4
 801a09a:	4413      	add	r3, r2
 801a09c:	3304      	adds	r3, #4
 801a09e:	681a      	ldr	r2, [r3, #0]
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	689b      	ldr	r3, [r3, #8]
 801a0a4:	429a      	cmp	r2, r3
 801a0a6:	d10c      	bne.n	801a0c2 <chk_lock+0x62>
 801a0a8:	4a1a      	ldr	r2, [pc, #104]	; (801a114 <chk_lock+0xb4>)
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	011b      	lsls	r3, r3, #4
 801a0ae:	4413      	add	r3, r2
 801a0b0:	3308      	adds	r3, #8
 801a0b2:	681a      	ldr	r2, [r3, #0]
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	695b      	ldr	r3, [r3, #20]
 801a0b8:	429a      	cmp	r2, r3
 801a0ba:	d102      	bne.n	801a0c2 <chk_lock+0x62>
 801a0bc:	e007      	b.n	801a0ce <chk_lock+0x6e>
 801a0be:	2301      	movs	r3, #1
 801a0c0:	60bb      	str	r3, [r7, #8]
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	60fb      	str	r3, [r7, #12]
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	2b01      	cmp	r3, #1
 801a0cc:	d9d2      	bls.n	801a074 <chk_lock+0x14>
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	2b02      	cmp	r3, #2
 801a0d2:	d109      	bne.n	801a0e8 <chk_lock+0x88>
 801a0d4:	68bb      	ldr	r3, [r7, #8]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d102      	bne.n	801a0e0 <chk_lock+0x80>
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	2b02      	cmp	r3, #2
 801a0de:	d101      	bne.n	801a0e4 <chk_lock+0x84>
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	e010      	b.n	801a106 <chk_lock+0xa6>
 801a0e4:	2312      	movs	r3, #18
 801a0e6:	e00e      	b.n	801a106 <chk_lock+0xa6>
 801a0e8:	683b      	ldr	r3, [r7, #0]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d108      	bne.n	801a100 <chk_lock+0xa0>
 801a0ee:	4a09      	ldr	r2, [pc, #36]	; (801a114 <chk_lock+0xb4>)
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	011b      	lsls	r3, r3, #4
 801a0f4:	4413      	add	r3, r2
 801a0f6:	330c      	adds	r3, #12
 801a0f8:	881b      	ldrh	r3, [r3, #0]
 801a0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a0fe:	d101      	bne.n	801a104 <chk_lock+0xa4>
 801a100:	2310      	movs	r3, #16
 801a102:	e000      	b.n	801a106 <chk_lock+0xa6>
 801a104:	2300      	movs	r3, #0
 801a106:	4618      	mov	r0, r3
 801a108:	3714      	adds	r7, #20
 801a10a:	46bd      	mov	sp, r7
 801a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a110:	4770      	bx	lr
 801a112:	bf00      	nop
 801a114:	20000bd8 	.word	0x20000bd8

0801a118 <enq_lock>:
 801a118:	b480      	push	{r7}
 801a11a:	b083      	sub	sp, #12
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	2300      	movs	r3, #0
 801a120:	607b      	str	r3, [r7, #4]
 801a122:	e002      	b.n	801a12a <enq_lock+0x12>
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	3301      	adds	r3, #1
 801a128:	607b      	str	r3, [r7, #4]
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	2b01      	cmp	r3, #1
 801a12e:	d806      	bhi.n	801a13e <enq_lock+0x26>
 801a130:	4a09      	ldr	r2, [pc, #36]	; (801a158 <enq_lock+0x40>)
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	011b      	lsls	r3, r3, #4
 801a136:	4413      	add	r3, r2
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d1f2      	bne.n	801a124 <enq_lock+0xc>
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	2b02      	cmp	r3, #2
 801a142:	bf14      	ite	ne
 801a144:	2301      	movne	r3, #1
 801a146:	2300      	moveq	r3, #0
 801a148:	b2db      	uxtb	r3, r3
 801a14a:	4618      	mov	r0, r3
 801a14c:	370c      	adds	r7, #12
 801a14e:	46bd      	mov	sp, r7
 801a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a154:	4770      	bx	lr
 801a156:	bf00      	nop
 801a158:	20000bd8 	.word	0x20000bd8

0801a15c <inc_lock>:
 801a15c:	b480      	push	{r7}
 801a15e:	b085      	sub	sp, #20
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
 801a164:	6039      	str	r1, [r7, #0]
 801a166:	2300      	movs	r3, #0
 801a168:	60fb      	str	r3, [r7, #12]
 801a16a:	e01f      	b.n	801a1ac <inc_lock+0x50>
 801a16c:	4a41      	ldr	r2, [pc, #260]	; (801a274 <inc_lock+0x118>)
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	011b      	lsls	r3, r3, #4
 801a172:	4413      	add	r3, r2
 801a174:	681a      	ldr	r2, [r3, #0]
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	429a      	cmp	r2, r3
 801a17c:	d113      	bne.n	801a1a6 <inc_lock+0x4a>
 801a17e:	4a3d      	ldr	r2, [pc, #244]	; (801a274 <inc_lock+0x118>)
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	011b      	lsls	r3, r3, #4
 801a184:	4413      	add	r3, r2
 801a186:	3304      	adds	r3, #4
 801a188:	681a      	ldr	r2, [r3, #0]
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	689b      	ldr	r3, [r3, #8]
 801a18e:	429a      	cmp	r2, r3
 801a190:	d109      	bne.n	801a1a6 <inc_lock+0x4a>
 801a192:	4a38      	ldr	r2, [pc, #224]	; (801a274 <inc_lock+0x118>)
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	011b      	lsls	r3, r3, #4
 801a198:	4413      	add	r3, r2
 801a19a:	3308      	adds	r3, #8
 801a19c:	681a      	ldr	r2, [r3, #0]
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	695b      	ldr	r3, [r3, #20]
 801a1a2:	429a      	cmp	r2, r3
 801a1a4:	d006      	beq.n	801a1b4 <inc_lock+0x58>
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	3301      	adds	r3, #1
 801a1aa:	60fb      	str	r3, [r7, #12]
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	2b01      	cmp	r3, #1
 801a1b0:	d9dc      	bls.n	801a16c <inc_lock+0x10>
 801a1b2:	e000      	b.n	801a1b6 <inc_lock+0x5a>
 801a1b4:	bf00      	nop
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	2b02      	cmp	r3, #2
 801a1ba:	d132      	bne.n	801a222 <inc_lock+0xc6>
 801a1bc:	2300      	movs	r3, #0
 801a1be:	60fb      	str	r3, [r7, #12]
 801a1c0:	e002      	b.n	801a1c8 <inc_lock+0x6c>
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	3301      	adds	r3, #1
 801a1c6:	60fb      	str	r3, [r7, #12]
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	2b01      	cmp	r3, #1
 801a1cc:	d806      	bhi.n	801a1dc <inc_lock+0x80>
 801a1ce:	4a29      	ldr	r2, [pc, #164]	; (801a274 <inc_lock+0x118>)
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	011b      	lsls	r3, r3, #4
 801a1d4:	4413      	add	r3, r2
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d1f2      	bne.n	801a1c2 <inc_lock+0x66>
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	2b02      	cmp	r3, #2
 801a1e0:	d101      	bne.n	801a1e6 <inc_lock+0x8a>
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	e040      	b.n	801a268 <inc_lock+0x10c>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681a      	ldr	r2, [r3, #0]
 801a1ea:	4922      	ldr	r1, [pc, #136]	; (801a274 <inc_lock+0x118>)
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	011b      	lsls	r3, r3, #4
 801a1f0:	440b      	add	r3, r1
 801a1f2:	601a      	str	r2, [r3, #0]
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	689a      	ldr	r2, [r3, #8]
 801a1f8:	491e      	ldr	r1, [pc, #120]	; (801a274 <inc_lock+0x118>)
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	011b      	lsls	r3, r3, #4
 801a1fe:	440b      	add	r3, r1
 801a200:	3304      	adds	r3, #4
 801a202:	601a      	str	r2, [r3, #0]
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	695a      	ldr	r2, [r3, #20]
 801a208:	491a      	ldr	r1, [pc, #104]	; (801a274 <inc_lock+0x118>)
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	011b      	lsls	r3, r3, #4
 801a20e:	440b      	add	r3, r1
 801a210:	3308      	adds	r3, #8
 801a212:	601a      	str	r2, [r3, #0]
 801a214:	4a17      	ldr	r2, [pc, #92]	; (801a274 <inc_lock+0x118>)
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	011b      	lsls	r3, r3, #4
 801a21a:	4413      	add	r3, r2
 801a21c:	330c      	adds	r3, #12
 801a21e:	2200      	movs	r2, #0
 801a220:	801a      	strh	r2, [r3, #0]
 801a222:	683b      	ldr	r3, [r7, #0]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d009      	beq.n	801a23c <inc_lock+0xe0>
 801a228:	4a12      	ldr	r2, [pc, #72]	; (801a274 <inc_lock+0x118>)
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	011b      	lsls	r3, r3, #4
 801a22e:	4413      	add	r3, r2
 801a230:	330c      	adds	r3, #12
 801a232:	881b      	ldrh	r3, [r3, #0]
 801a234:	2b00      	cmp	r3, #0
 801a236:	d001      	beq.n	801a23c <inc_lock+0xe0>
 801a238:	2300      	movs	r3, #0
 801a23a:	e015      	b.n	801a268 <inc_lock+0x10c>
 801a23c:	683b      	ldr	r3, [r7, #0]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d108      	bne.n	801a254 <inc_lock+0xf8>
 801a242:	4a0c      	ldr	r2, [pc, #48]	; (801a274 <inc_lock+0x118>)
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	011b      	lsls	r3, r3, #4
 801a248:	4413      	add	r3, r2
 801a24a:	330c      	adds	r3, #12
 801a24c:	881b      	ldrh	r3, [r3, #0]
 801a24e:	3301      	adds	r3, #1
 801a250:	b29a      	uxth	r2, r3
 801a252:	e001      	b.n	801a258 <inc_lock+0xfc>
 801a254:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a258:	4906      	ldr	r1, [pc, #24]	; (801a274 <inc_lock+0x118>)
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	011b      	lsls	r3, r3, #4
 801a25e:	440b      	add	r3, r1
 801a260:	330c      	adds	r3, #12
 801a262:	801a      	strh	r2, [r3, #0]
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	3301      	adds	r3, #1
 801a268:	4618      	mov	r0, r3
 801a26a:	3714      	adds	r7, #20
 801a26c:	46bd      	mov	sp, r7
 801a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a272:	4770      	bx	lr
 801a274:	20000bd8 	.word	0x20000bd8

0801a278 <dec_lock>:
 801a278:	b480      	push	{r7}
 801a27a:	b085      	sub	sp, #20
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	3b01      	subs	r3, #1
 801a284:	607b      	str	r3, [r7, #4]
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	2b01      	cmp	r3, #1
 801a28a:	d825      	bhi.n	801a2d8 <dec_lock+0x60>
 801a28c:	4a17      	ldr	r2, [pc, #92]	; (801a2ec <dec_lock+0x74>)
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	011b      	lsls	r3, r3, #4
 801a292:	4413      	add	r3, r2
 801a294:	330c      	adds	r3, #12
 801a296:	881b      	ldrh	r3, [r3, #0]
 801a298:	81fb      	strh	r3, [r7, #14]
 801a29a:	89fb      	ldrh	r3, [r7, #14]
 801a29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a2a0:	d101      	bne.n	801a2a6 <dec_lock+0x2e>
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	81fb      	strh	r3, [r7, #14]
 801a2a6:	89fb      	ldrh	r3, [r7, #14]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d002      	beq.n	801a2b2 <dec_lock+0x3a>
 801a2ac:	89fb      	ldrh	r3, [r7, #14]
 801a2ae:	3b01      	subs	r3, #1
 801a2b0:	81fb      	strh	r3, [r7, #14]
 801a2b2:	4a0e      	ldr	r2, [pc, #56]	; (801a2ec <dec_lock+0x74>)
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	011b      	lsls	r3, r3, #4
 801a2b8:	4413      	add	r3, r2
 801a2ba:	330c      	adds	r3, #12
 801a2bc:	89fa      	ldrh	r2, [r7, #14]
 801a2be:	801a      	strh	r2, [r3, #0]
 801a2c0:	89fb      	ldrh	r3, [r7, #14]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d105      	bne.n	801a2d2 <dec_lock+0x5a>
 801a2c6:	4a09      	ldr	r2, [pc, #36]	; (801a2ec <dec_lock+0x74>)
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	011b      	lsls	r3, r3, #4
 801a2cc:	4413      	add	r3, r2
 801a2ce:	2200      	movs	r2, #0
 801a2d0:	601a      	str	r2, [r3, #0]
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	737b      	strb	r3, [r7, #13]
 801a2d6:	e001      	b.n	801a2dc <dec_lock+0x64>
 801a2d8:	2302      	movs	r3, #2
 801a2da:	737b      	strb	r3, [r7, #13]
 801a2dc:	7b7b      	ldrb	r3, [r7, #13]
 801a2de:	4618      	mov	r0, r3
 801a2e0:	3714      	adds	r7, #20
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e8:	4770      	bx	lr
 801a2ea:	bf00      	nop
 801a2ec:	20000bd8 	.word	0x20000bd8

0801a2f0 <clear_lock>:
 801a2f0:	b480      	push	{r7}
 801a2f2:	b085      	sub	sp, #20
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	60fb      	str	r3, [r7, #12]
 801a2fc:	e010      	b.n	801a320 <clear_lock+0x30>
 801a2fe:	4a0d      	ldr	r2, [pc, #52]	; (801a334 <clear_lock+0x44>)
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	011b      	lsls	r3, r3, #4
 801a304:	4413      	add	r3, r2
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	687a      	ldr	r2, [r7, #4]
 801a30a:	429a      	cmp	r2, r3
 801a30c:	d105      	bne.n	801a31a <clear_lock+0x2a>
 801a30e:	4a09      	ldr	r2, [pc, #36]	; (801a334 <clear_lock+0x44>)
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	011b      	lsls	r3, r3, #4
 801a314:	4413      	add	r3, r2
 801a316:	2200      	movs	r2, #0
 801a318:	601a      	str	r2, [r3, #0]
 801a31a:	68fb      	ldr	r3, [r7, #12]
 801a31c:	3301      	adds	r3, #1
 801a31e:	60fb      	str	r3, [r7, #12]
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	2b01      	cmp	r3, #1
 801a324:	d9eb      	bls.n	801a2fe <clear_lock+0xe>
 801a326:	bf00      	nop
 801a328:	3714      	adds	r7, #20
 801a32a:	46bd      	mov	sp, r7
 801a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a330:	4770      	bx	lr
 801a332:	bf00      	nop
 801a334:	20000bd8 	.word	0x20000bd8

0801a338 <sync_window>:
 801a338:	b580      	push	{r7, lr}
 801a33a:	b086      	sub	sp, #24
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	6078      	str	r0, [r7, #4]
 801a340:	2300      	movs	r3, #0
 801a342:	73fb      	strb	r3, [r7, #15]
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	78db      	ldrb	r3, [r3, #3]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d034      	beq.n	801a3b6 <sync_window+0x7e>
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a350:	617b      	str	r3, [r7, #20]
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	7858      	ldrb	r0, [r3, #1]
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a35c:	2301      	movs	r3, #1
 801a35e:	697a      	ldr	r2, [r7, #20]
 801a360:	f7ff fd40 	bl	8019de4 <disk_write>
 801a364:	4603      	mov	r3, r0
 801a366:	2b00      	cmp	r3, #0
 801a368:	d002      	beq.n	801a370 <sync_window+0x38>
 801a36a:	2301      	movs	r3, #1
 801a36c:	73fb      	strb	r3, [r7, #15]
 801a36e:	e022      	b.n	801a3b6 <sync_window+0x7e>
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	2200      	movs	r2, #0
 801a374:	70da      	strb	r2, [r3, #3]
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a37a:	697a      	ldr	r2, [r7, #20]
 801a37c:	1ad2      	subs	r2, r2, r3
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	6a1b      	ldr	r3, [r3, #32]
 801a382:	429a      	cmp	r2, r3
 801a384:	d217      	bcs.n	801a3b6 <sync_window+0x7e>
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	789b      	ldrb	r3, [r3, #2]
 801a38a:	613b      	str	r3, [r7, #16]
 801a38c:	e010      	b.n	801a3b0 <sync_window+0x78>
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	6a1b      	ldr	r3, [r3, #32]
 801a392:	697a      	ldr	r2, [r7, #20]
 801a394:	4413      	add	r3, r2
 801a396:	617b      	str	r3, [r7, #20]
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	7858      	ldrb	r0, [r3, #1]
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a3a2:	2301      	movs	r3, #1
 801a3a4:	697a      	ldr	r2, [r7, #20]
 801a3a6:	f7ff fd1d 	bl	8019de4 <disk_write>
 801a3aa:	693b      	ldr	r3, [r7, #16]
 801a3ac:	3b01      	subs	r3, #1
 801a3ae:	613b      	str	r3, [r7, #16]
 801a3b0:	693b      	ldr	r3, [r7, #16]
 801a3b2:	2b01      	cmp	r3, #1
 801a3b4:	d8eb      	bhi.n	801a38e <sync_window+0x56>
 801a3b6:	7bfb      	ldrb	r3, [r7, #15]
 801a3b8:	4618      	mov	r0, r3
 801a3ba:	3718      	adds	r7, #24
 801a3bc:	46bd      	mov	sp, r7
 801a3be:	bd80      	pop	{r7, pc}

0801a3c0 <move_window>:
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b084      	sub	sp, #16
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
 801a3c8:	6039      	str	r1, [r7, #0]
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	73fb      	strb	r3, [r7, #15]
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a3d2:	683a      	ldr	r2, [r7, #0]
 801a3d4:	429a      	cmp	r2, r3
 801a3d6:	d01b      	beq.n	801a410 <move_window+0x50>
 801a3d8:	6878      	ldr	r0, [r7, #4]
 801a3da:	f7ff ffad 	bl	801a338 <sync_window>
 801a3de:	4603      	mov	r3, r0
 801a3e0:	73fb      	strb	r3, [r7, #15]
 801a3e2:	7bfb      	ldrb	r3, [r7, #15]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d113      	bne.n	801a410 <move_window+0x50>
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	7858      	ldrb	r0, [r3, #1]
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a3f2:	2301      	movs	r3, #1
 801a3f4:	683a      	ldr	r2, [r7, #0]
 801a3f6:	f7ff fcd5 	bl	8019da4 <disk_read>
 801a3fa:	4603      	mov	r3, r0
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d004      	beq.n	801a40a <move_window+0x4a>
 801a400:	f04f 33ff 	mov.w	r3, #4294967295
 801a404:	603b      	str	r3, [r7, #0]
 801a406:	2301      	movs	r3, #1
 801a408:	73fb      	strb	r3, [r7, #15]
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	683a      	ldr	r2, [r7, #0]
 801a40e:	635a      	str	r2, [r3, #52]	; 0x34
 801a410:	7bfb      	ldrb	r3, [r7, #15]
 801a412:	4618      	mov	r0, r3
 801a414:	3710      	adds	r7, #16
 801a416:	46bd      	mov	sp, r7
 801a418:	bd80      	pop	{r7, pc}
	...

0801a41c <sync_fs>:
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b084      	sub	sp, #16
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
 801a424:	6878      	ldr	r0, [r7, #4]
 801a426:	f7ff ff87 	bl	801a338 <sync_window>
 801a42a:	4603      	mov	r3, r0
 801a42c:	73fb      	strb	r3, [r7, #15]
 801a42e:	7bfb      	ldrb	r3, [r7, #15]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d159      	bne.n	801a4e8 <sync_fs+0xcc>
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	781b      	ldrb	r3, [r3, #0]
 801a438:	2b03      	cmp	r3, #3
 801a43a:	d149      	bne.n	801a4d0 <sync_fs+0xb4>
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	791b      	ldrb	r3, [r3, #4]
 801a440:	2b01      	cmp	r3, #1
 801a442:	d145      	bne.n	801a4d0 <sync_fs+0xb4>
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	899b      	ldrh	r3, [r3, #12]
 801a44e:	461a      	mov	r2, r3
 801a450:	2100      	movs	r1, #0
 801a452:	f7ff fda8 	bl	8019fa6 <mem_set>
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	3338      	adds	r3, #56	; 0x38
 801a45a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a45e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801a462:	4618      	mov	r0, r3
 801a464:	f7ff fd37 	bl	8019ed6 <st_word>
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	3338      	adds	r3, #56	; 0x38
 801a46c:	4921      	ldr	r1, [pc, #132]	; (801a4f4 <sync_fs+0xd8>)
 801a46e:	4618      	mov	r0, r3
 801a470:	f7ff fd4c 	bl	8019f0c <st_dword>
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	3338      	adds	r3, #56	; 0x38
 801a478:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801a47c:	491e      	ldr	r1, [pc, #120]	; (801a4f8 <sync_fs+0xdc>)
 801a47e:	4618      	mov	r0, r3
 801a480:	f7ff fd44 	bl	8019f0c <st_dword>
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	3338      	adds	r3, #56	; 0x38
 801a488:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	699b      	ldr	r3, [r3, #24]
 801a490:	4619      	mov	r1, r3
 801a492:	4610      	mov	r0, r2
 801a494:	f7ff fd3a 	bl	8019f0c <st_dword>
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	3338      	adds	r3, #56	; 0x38
 801a49c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	695b      	ldr	r3, [r3, #20]
 801a4a4:	4619      	mov	r1, r3
 801a4a6:	4610      	mov	r0, r2
 801a4a8:	f7ff fd30 	bl	8019f0c <st_dword>
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4b0:	1c5a      	adds	r2, r3, #1
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	635a      	str	r2, [r3, #52]	; 0x34
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	7858      	ldrb	r0, [r3, #1]
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a4c4:	2301      	movs	r3, #1
 801a4c6:	f7ff fc8d 	bl	8019de4 <disk_write>
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	711a      	strb	r2, [r3, #4]
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	785b      	ldrb	r3, [r3, #1]
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	2100      	movs	r1, #0
 801a4d8:	4618      	mov	r0, r3
 801a4da:	f7ff fca3 	bl	8019e24 <disk_ioctl>
 801a4de:	4603      	mov	r3, r0
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d001      	beq.n	801a4e8 <sync_fs+0xcc>
 801a4e4:	2301      	movs	r3, #1
 801a4e6:	73fb      	strb	r3, [r7, #15]
 801a4e8:	7bfb      	ldrb	r3, [r7, #15]
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	3710      	adds	r7, #16
 801a4ee:	46bd      	mov	sp, r7
 801a4f0:	bd80      	pop	{r7, pc}
 801a4f2:	bf00      	nop
 801a4f4:	41615252 	.word	0x41615252
 801a4f8:	61417272 	.word	0x61417272

0801a4fc <clust2sect>:
 801a4fc:	b480      	push	{r7}
 801a4fe:	b083      	sub	sp, #12
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]
 801a504:	6039      	str	r1, [r7, #0]
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	3b02      	subs	r3, #2
 801a50a:	603b      	str	r3, [r7, #0]
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	69db      	ldr	r3, [r3, #28]
 801a510:	3b02      	subs	r3, #2
 801a512:	683a      	ldr	r2, [r7, #0]
 801a514:	429a      	cmp	r2, r3
 801a516:	d301      	bcc.n	801a51c <clust2sect+0x20>
 801a518:	2300      	movs	r3, #0
 801a51a:	e008      	b.n	801a52e <clust2sect+0x32>
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	895b      	ldrh	r3, [r3, #10]
 801a520:	461a      	mov	r2, r3
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	fb03 f202 	mul.w	r2, r3, r2
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a52c:	4413      	add	r3, r2
 801a52e:	4618      	mov	r0, r3
 801a530:	370c      	adds	r7, #12
 801a532:	46bd      	mov	sp, r7
 801a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a538:	4770      	bx	lr

0801a53a <get_fat>:
 801a53a:	b580      	push	{r7, lr}
 801a53c:	b086      	sub	sp, #24
 801a53e:	af00      	add	r7, sp, #0
 801a540:	6078      	str	r0, [r7, #4]
 801a542:	6039      	str	r1, [r7, #0]
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	613b      	str	r3, [r7, #16]
 801a54a:	683b      	ldr	r3, [r7, #0]
 801a54c:	2b01      	cmp	r3, #1
 801a54e:	d904      	bls.n	801a55a <get_fat+0x20>
 801a550:	693b      	ldr	r3, [r7, #16]
 801a552:	69db      	ldr	r3, [r3, #28]
 801a554:	683a      	ldr	r2, [r7, #0]
 801a556:	429a      	cmp	r2, r3
 801a558:	d302      	bcc.n	801a560 <get_fat+0x26>
 801a55a:	2301      	movs	r3, #1
 801a55c:	617b      	str	r3, [r7, #20]
 801a55e:	e0b7      	b.n	801a6d0 <get_fat+0x196>
 801a560:	f04f 33ff 	mov.w	r3, #4294967295
 801a564:	617b      	str	r3, [r7, #20]
 801a566:	693b      	ldr	r3, [r7, #16]
 801a568:	781b      	ldrb	r3, [r3, #0]
 801a56a:	2b02      	cmp	r3, #2
 801a56c:	d05a      	beq.n	801a624 <get_fat+0xea>
 801a56e:	2b03      	cmp	r3, #3
 801a570:	d07d      	beq.n	801a66e <get_fat+0x134>
 801a572:	2b01      	cmp	r3, #1
 801a574:	f040 80a2 	bne.w	801a6bc <get_fat+0x182>
 801a578:	683b      	ldr	r3, [r7, #0]
 801a57a:	60fb      	str	r3, [r7, #12]
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	085b      	lsrs	r3, r3, #1
 801a580:	68fa      	ldr	r2, [r7, #12]
 801a582:	4413      	add	r3, r2
 801a584:	60fb      	str	r3, [r7, #12]
 801a586:	693b      	ldr	r3, [r7, #16]
 801a588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a58a:	693b      	ldr	r3, [r7, #16]
 801a58c:	899b      	ldrh	r3, [r3, #12]
 801a58e:	4619      	mov	r1, r3
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	fbb3 f3f1 	udiv	r3, r3, r1
 801a596:	4413      	add	r3, r2
 801a598:	4619      	mov	r1, r3
 801a59a:	6938      	ldr	r0, [r7, #16]
 801a59c:	f7ff ff10 	bl	801a3c0 <move_window>
 801a5a0:	4603      	mov	r3, r0
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	f040 808d 	bne.w	801a6c2 <get_fat+0x188>
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	1c5a      	adds	r2, r3, #1
 801a5ac:	60fa      	str	r2, [r7, #12]
 801a5ae:	693a      	ldr	r2, [r7, #16]
 801a5b0:	8992      	ldrh	r2, [r2, #12]
 801a5b2:	fbb3 f1f2 	udiv	r1, r3, r2
 801a5b6:	fb02 f201 	mul.w	r2, r2, r1
 801a5ba:	1a9b      	subs	r3, r3, r2
 801a5bc:	693a      	ldr	r2, [r7, #16]
 801a5be:	4413      	add	r3, r2
 801a5c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a5c4:	60bb      	str	r3, [r7, #8]
 801a5c6:	693b      	ldr	r3, [r7, #16]
 801a5c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a5ca:	693b      	ldr	r3, [r7, #16]
 801a5cc:	899b      	ldrh	r3, [r3, #12]
 801a5ce:	4619      	mov	r1, r3
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a5d6:	4413      	add	r3, r2
 801a5d8:	4619      	mov	r1, r3
 801a5da:	6938      	ldr	r0, [r7, #16]
 801a5dc:	f7ff fef0 	bl	801a3c0 <move_window>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d16f      	bne.n	801a6c6 <get_fat+0x18c>
 801a5e6:	693b      	ldr	r3, [r7, #16]
 801a5e8:	899b      	ldrh	r3, [r3, #12]
 801a5ea:	461a      	mov	r2, r3
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	fbb3 f1f2 	udiv	r1, r3, r2
 801a5f2:	fb02 f201 	mul.w	r2, r2, r1
 801a5f6:	1a9b      	subs	r3, r3, r2
 801a5f8:	693a      	ldr	r2, [r7, #16]
 801a5fa:	4413      	add	r3, r2
 801a5fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a600:	021b      	lsls	r3, r3, #8
 801a602:	461a      	mov	r2, r3
 801a604:	68bb      	ldr	r3, [r7, #8]
 801a606:	4313      	orrs	r3, r2
 801a608:	60bb      	str	r3, [r7, #8]
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	f003 0301 	and.w	r3, r3, #1
 801a610:	2b00      	cmp	r3, #0
 801a612:	d002      	beq.n	801a61a <get_fat+0xe0>
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	091b      	lsrs	r3, r3, #4
 801a618:	e002      	b.n	801a620 <get_fat+0xe6>
 801a61a:	68bb      	ldr	r3, [r7, #8]
 801a61c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a620:	617b      	str	r3, [r7, #20]
 801a622:	e055      	b.n	801a6d0 <get_fat+0x196>
 801a624:	693b      	ldr	r3, [r7, #16]
 801a626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a628:	693b      	ldr	r3, [r7, #16]
 801a62a:	899b      	ldrh	r3, [r3, #12]
 801a62c:	085b      	lsrs	r3, r3, #1
 801a62e:	b29b      	uxth	r3, r3
 801a630:	4619      	mov	r1, r3
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	fbb3 f3f1 	udiv	r3, r3, r1
 801a638:	4413      	add	r3, r2
 801a63a:	4619      	mov	r1, r3
 801a63c:	6938      	ldr	r0, [r7, #16]
 801a63e:	f7ff febf 	bl	801a3c0 <move_window>
 801a642:	4603      	mov	r3, r0
 801a644:	2b00      	cmp	r3, #0
 801a646:	d140      	bne.n	801a6ca <get_fat+0x190>
 801a648:	693b      	ldr	r3, [r7, #16]
 801a64a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a64e:	683b      	ldr	r3, [r7, #0]
 801a650:	005b      	lsls	r3, r3, #1
 801a652:	693a      	ldr	r2, [r7, #16]
 801a654:	8992      	ldrh	r2, [r2, #12]
 801a656:	fbb3 f0f2 	udiv	r0, r3, r2
 801a65a:	fb02 f200 	mul.w	r2, r2, r0
 801a65e:	1a9b      	subs	r3, r3, r2
 801a660:	440b      	add	r3, r1
 801a662:	4618      	mov	r0, r3
 801a664:	f7ff fbfc 	bl	8019e60 <ld_word>
 801a668:	4603      	mov	r3, r0
 801a66a:	617b      	str	r3, [r7, #20]
 801a66c:	e030      	b.n	801a6d0 <get_fat+0x196>
 801a66e:	693b      	ldr	r3, [r7, #16]
 801a670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a672:	693b      	ldr	r3, [r7, #16]
 801a674:	899b      	ldrh	r3, [r3, #12]
 801a676:	089b      	lsrs	r3, r3, #2
 801a678:	b29b      	uxth	r3, r3
 801a67a:	4619      	mov	r1, r3
 801a67c:	683b      	ldr	r3, [r7, #0]
 801a67e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a682:	4413      	add	r3, r2
 801a684:	4619      	mov	r1, r3
 801a686:	6938      	ldr	r0, [r7, #16]
 801a688:	f7ff fe9a 	bl	801a3c0 <move_window>
 801a68c:	4603      	mov	r3, r0
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d11d      	bne.n	801a6ce <get_fat+0x194>
 801a692:	693b      	ldr	r3, [r7, #16]
 801a694:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	009b      	lsls	r3, r3, #2
 801a69c:	693a      	ldr	r2, [r7, #16]
 801a69e:	8992      	ldrh	r2, [r2, #12]
 801a6a0:	fbb3 f0f2 	udiv	r0, r3, r2
 801a6a4:	fb02 f200 	mul.w	r2, r2, r0
 801a6a8:	1a9b      	subs	r3, r3, r2
 801a6aa:	440b      	add	r3, r1
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	f7ff fbef 	bl	8019e90 <ld_dword>
 801a6b2:	4603      	mov	r3, r0
 801a6b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801a6b8:	617b      	str	r3, [r7, #20]
 801a6ba:	e009      	b.n	801a6d0 <get_fat+0x196>
 801a6bc:	2301      	movs	r3, #1
 801a6be:	617b      	str	r3, [r7, #20]
 801a6c0:	e006      	b.n	801a6d0 <get_fat+0x196>
 801a6c2:	bf00      	nop
 801a6c4:	e004      	b.n	801a6d0 <get_fat+0x196>
 801a6c6:	bf00      	nop
 801a6c8:	e002      	b.n	801a6d0 <get_fat+0x196>
 801a6ca:	bf00      	nop
 801a6cc:	e000      	b.n	801a6d0 <get_fat+0x196>
 801a6ce:	bf00      	nop
 801a6d0:	697b      	ldr	r3, [r7, #20]
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	3718      	adds	r7, #24
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	bd80      	pop	{r7, pc}

0801a6da <put_fat>:
 801a6da:	b590      	push	{r4, r7, lr}
 801a6dc:	b089      	sub	sp, #36	; 0x24
 801a6de:	af00      	add	r7, sp, #0
 801a6e0:	60f8      	str	r0, [r7, #12]
 801a6e2:	60b9      	str	r1, [r7, #8]
 801a6e4:	607a      	str	r2, [r7, #4]
 801a6e6:	2302      	movs	r3, #2
 801a6e8:	77fb      	strb	r3, [r7, #31]
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	2b01      	cmp	r3, #1
 801a6ee:	f240 8106 	bls.w	801a8fe <put_fat+0x224>
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	69db      	ldr	r3, [r3, #28]
 801a6f6:	68ba      	ldr	r2, [r7, #8]
 801a6f8:	429a      	cmp	r2, r3
 801a6fa:	f080 8100 	bcs.w	801a8fe <put_fat+0x224>
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	781b      	ldrb	r3, [r3, #0]
 801a702:	2b02      	cmp	r3, #2
 801a704:	f000 8088 	beq.w	801a818 <put_fat+0x13e>
 801a708:	2b03      	cmp	r3, #3
 801a70a:	f000 80b0 	beq.w	801a86e <put_fat+0x194>
 801a70e:	2b01      	cmp	r3, #1
 801a710:	f040 80f5 	bne.w	801a8fe <put_fat+0x224>
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	61bb      	str	r3, [r7, #24]
 801a718:	69bb      	ldr	r3, [r7, #24]
 801a71a:	085b      	lsrs	r3, r3, #1
 801a71c:	69ba      	ldr	r2, [r7, #24]
 801a71e:	4413      	add	r3, r2
 801a720:	61bb      	str	r3, [r7, #24]
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	899b      	ldrh	r3, [r3, #12]
 801a72a:	4619      	mov	r1, r3
 801a72c:	69bb      	ldr	r3, [r7, #24]
 801a72e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a732:	4413      	add	r3, r2
 801a734:	4619      	mov	r1, r3
 801a736:	68f8      	ldr	r0, [r7, #12]
 801a738:	f7ff fe42 	bl	801a3c0 <move_window>
 801a73c:	4603      	mov	r3, r0
 801a73e:	77fb      	strb	r3, [r7, #31]
 801a740:	7ffb      	ldrb	r3, [r7, #31]
 801a742:	2b00      	cmp	r3, #0
 801a744:	f040 80d4 	bne.w	801a8f0 <put_fat+0x216>
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a74e:	69bb      	ldr	r3, [r7, #24]
 801a750:	1c5a      	adds	r2, r3, #1
 801a752:	61ba      	str	r2, [r7, #24]
 801a754:	68fa      	ldr	r2, [r7, #12]
 801a756:	8992      	ldrh	r2, [r2, #12]
 801a758:	fbb3 f0f2 	udiv	r0, r3, r2
 801a75c:	fb02 f200 	mul.w	r2, r2, r0
 801a760:	1a9b      	subs	r3, r3, r2
 801a762:	440b      	add	r3, r1
 801a764:	617b      	str	r3, [r7, #20]
 801a766:	68bb      	ldr	r3, [r7, #8]
 801a768:	f003 0301 	and.w	r3, r3, #1
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d00d      	beq.n	801a78c <put_fat+0xb2>
 801a770:	697b      	ldr	r3, [r7, #20]
 801a772:	781b      	ldrb	r3, [r3, #0]
 801a774:	b25b      	sxtb	r3, r3
 801a776:	f003 030f 	and.w	r3, r3, #15
 801a77a:	b25a      	sxtb	r2, r3
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	b2db      	uxtb	r3, r3
 801a780:	011b      	lsls	r3, r3, #4
 801a782:	b25b      	sxtb	r3, r3
 801a784:	4313      	orrs	r3, r2
 801a786:	b25b      	sxtb	r3, r3
 801a788:	b2db      	uxtb	r3, r3
 801a78a:	e001      	b.n	801a790 <put_fat+0xb6>
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	b2db      	uxtb	r3, r3
 801a790:	697a      	ldr	r2, [r7, #20]
 801a792:	7013      	strb	r3, [r2, #0]
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	2201      	movs	r2, #1
 801a798:	70da      	strb	r2, [r3, #3]
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	899b      	ldrh	r3, [r3, #12]
 801a7a2:	4619      	mov	r1, r3
 801a7a4:	69bb      	ldr	r3, [r7, #24]
 801a7a6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a7aa:	4413      	add	r3, r2
 801a7ac:	4619      	mov	r1, r3
 801a7ae:	68f8      	ldr	r0, [r7, #12]
 801a7b0:	f7ff fe06 	bl	801a3c0 <move_window>
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	77fb      	strb	r3, [r7, #31]
 801a7b8:	7ffb      	ldrb	r3, [r7, #31]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	f040 809a 	bne.w	801a8f4 <put_fat+0x21a>
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	899b      	ldrh	r3, [r3, #12]
 801a7ca:	461a      	mov	r2, r3
 801a7cc:	69bb      	ldr	r3, [r7, #24]
 801a7ce:	fbb3 f0f2 	udiv	r0, r3, r2
 801a7d2:	fb02 f200 	mul.w	r2, r2, r0
 801a7d6:	1a9b      	subs	r3, r3, r2
 801a7d8:	440b      	add	r3, r1
 801a7da:	617b      	str	r3, [r7, #20]
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	f003 0301 	and.w	r3, r3, #1
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d003      	beq.n	801a7ee <put_fat+0x114>
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	091b      	lsrs	r3, r3, #4
 801a7ea:	b2db      	uxtb	r3, r3
 801a7ec:	e00e      	b.n	801a80c <put_fat+0x132>
 801a7ee:	697b      	ldr	r3, [r7, #20]
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	b25b      	sxtb	r3, r3
 801a7f4:	f023 030f 	bic.w	r3, r3, #15
 801a7f8:	b25a      	sxtb	r2, r3
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	0a1b      	lsrs	r3, r3, #8
 801a7fe:	b25b      	sxtb	r3, r3
 801a800:	f003 030f 	and.w	r3, r3, #15
 801a804:	b25b      	sxtb	r3, r3
 801a806:	4313      	orrs	r3, r2
 801a808:	b25b      	sxtb	r3, r3
 801a80a:	b2db      	uxtb	r3, r3
 801a80c:	697a      	ldr	r2, [r7, #20]
 801a80e:	7013      	strb	r3, [r2, #0]
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	2201      	movs	r2, #1
 801a814:	70da      	strb	r2, [r3, #3]
 801a816:	e072      	b.n	801a8fe <put_fat+0x224>
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	899b      	ldrh	r3, [r3, #12]
 801a820:	085b      	lsrs	r3, r3, #1
 801a822:	b29b      	uxth	r3, r3
 801a824:	4619      	mov	r1, r3
 801a826:	68bb      	ldr	r3, [r7, #8]
 801a828:	fbb3 f3f1 	udiv	r3, r3, r1
 801a82c:	4413      	add	r3, r2
 801a82e:	4619      	mov	r1, r3
 801a830:	68f8      	ldr	r0, [r7, #12]
 801a832:	f7ff fdc5 	bl	801a3c0 <move_window>
 801a836:	4603      	mov	r3, r0
 801a838:	77fb      	strb	r3, [r7, #31]
 801a83a:	7ffb      	ldrb	r3, [r7, #31]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d15b      	bne.n	801a8f8 <put_fat+0x21e>
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a846:	68bb      	ldr	r3, [r7, #8]
 801a848:	005b      	lsls	r3, r3, #1
 801a84a:	68fa      	ldr	r2, [r7, #12]
 801a84c:	8992      	ldrh	r2, [r2, #12]
 801a84e:	fbb3 f0f2 	udiv	r0, r3, r2
 801a852:	fb02 f200 	mul.w	r2, r2, r0
 801a856:	1a9b      	subs	r3, r3, r2
 801a858:	440b      	add	r3, r1
 801a85a:	687a      	ldr	r2, [r7, #4]
 801a85c:	b292      	uxth	r2, r2
 801a85e:	4611      	mov	r1, r2
 801a860:	4618      	mov	r0, r3
 801a862:	f7ff fb38 	bl	8019ed6 <st_word>
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	2201      	movs	r2, #1
 801a86a:	70da      	strb	r2, [r3, #3]
 801a86c:	e047      	b.n	801a8fe <put_fat+0x224>
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	899b      	ldrh	r3, [r3, #12]
 801a876:	089b      	lsrs	r3, r3, #2
 801a878:	b29b      	uxth	r3, r3
 801a87a:	4619      	mov	r1, r3
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	fbb3 f3f1 	udiv	r3, r3, r1
 801a882:	4413      	add	r3, r2
 801a884:	4619      	mov	r1, r3
 801a886:	68f8      	ldr	r0, [r7, #12]
 801a888:	f7ff fd9a 	bl	801a3c0 <move_window>
 801a88c:	4603      	mov	r3, r0
 801a88e:	77fb      	strb	r3, [r7, #31]
 801a890:	7ffb      	ldrb	r3, [r7, #31]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d132      	bne.n	801a8fc <put_fat+0x222>
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801a89c:	68fb      	ldr	r3, [r7, #12]
 801a89e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	009b      	lsls	r3, r3, #2
 801a8a6:	68fa      	ldr	r2, [r7, #12]
 801a8a8:	8992      	ldrh	r2, [r2, #12]
 801a8aa:	fbb3 f0f2 	udiv	r0, r3, r2
 801a8ae:	fb02 f200 	mul.w	r2, r2, r0
 801a8b2:	1a9b      	subs	r3, r3, r2
 801a8b4:	440b      	add	r3, r1
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f7ff faea 	bl	8019e90 <ld_dword>
 801a8bc:	4603      	mov	r3, r0
 801a8be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a8c2:	4323      	orrs	r3, r4
 801a8c4:	607b      	str	r3, [r7, #4]
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801a8cc:	68bb      	ldr	r3, [r7, #8]
 801a8ce:	009b      	lsls	r3, r3, #2
 801a8d0:	68fa      	ldr	r2, [r7, #12]
 801a8d2:	8992      	ldrh	r2, [r2, #12]
 801a8d4:	fbb3 f0f2 	udiv	r0, r3, r2
 801a8d8:	fb02 f200 	mul.w	r2, r2, r0
 801a8dc:	1a9b      	subs	r3, r3, r2
 801a8de:	440b      	add	r3, r1
 801a8e0:	6879      	ldr	r1, [r7, #4]
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f7ff fb12 	bl	8019f0c <st_dword>
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	2201      	movs	r2, #1
 801a8ec:	70da      	strb	r2, [r3, #3]
 801a8ee:	e006      	b.n	801a8fe <put_fat+0x224>
 801a8f0:	bf00      	nop
 801a8f2:	e004      	b.n	801a8fe <put_fat+0x224>
 801a8f4:	bf00      	nop
 801a8f6:	e002      	b.n	801a8fe <put_fat+0x224>
 801a8f8:	bf00      	nop
 801a8fa:	e000      	b.n	801a8fe <put_fat+0x224>
 801a8fc:	bf00      	nop
 801a8fe:	7ffb      	ldrb	r3, [r7, #31]
 801a900:	4618      	mov	r0, r3
 801a902:	3724      	adds	r7, #36	; 0x24
 801a904:	46bd      	mov	sp, r7
 801a906:	bd90      	pop	{r4, r7, pc}

0801a908 <remove_chain>:
 801a908:	b580      	push	{r7, lr}
 801a90a:	b088      	sub	sp, #32
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	60f8      	str	r0, [r7, #12]
 801a910:	60b9      	str	r1, [r7, #8]
 801a912:	607a      	str	r2, [r7, #4]
 801a914:	2300      	movs	r3, #0
 801a916:	77fb      	strb	r3, [r7, #31]
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	61bb      	str	r3, [r7, #24]
 801a91e:	68bb      	ldr	r3, [r7, #8]
 801a920:	2b01      	cmp	r3, #1
 801a922:	d904      	bls.n	801a92e <remove_chain+0x26>
 801a924:	69bb      	ldr	r3, [r7, #24]
 801a926:	69db      	ldr	r3, [r3, #28]
 801a928:	68ba      	ldr	r2, [r7, #8]
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d301      	bcc.n	801a932 <remove_chain+0x2a>
 801a92e:	2302      	movs	r3, #2
 801a930:	e04b      	b.n	801a9ca <remove_chain+0xc2>
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d00c      	beq.n	801a952 <remove_chain+0x4a>
 801a938:	f04f 32ff 	mov.w	r2, #4294967295
 801a93c:	6879      	ldr	r1, [r7, #4]
 801a93e:	69b8      	ldr	r0, [r7, #24]
 801a940:	f7ff fecb 	bl	801a6da <put_fat>
 801a944:	4603      	mov	r3, r0
 801a946:	77fb      	strb	r3, [r7, #31]
 801a948:	7ffb      	ldrb	r3, [r7, #31]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d001      	beq.n	801a952 <remove_chain+0x4a>
 801a94e:	7ffb      	ldrb	r3, [r7, #31]
 801a950:	e03b      	b.n	801a9ca <remove_chain+0xc2>
 801a952:	68b9      	ldr	r1, [r7, #8]
 801a954:	68f8      	ldr	r0, [r7, #12]
 801a956:	f7ff fdf0 	bl	801a53a <get_fat>
 801a95a:	6178      	str	r0, [r7, #20]
 801a95c:	697b      	ldr	r3, [r7, #20]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d031      	beq.n	801a9c6 <remove_chain+0xbe>
 801a962:	697b      	ldr	r3, [r7, #20]
 801a964:	2b01      	cmp	r3, #1
 801a966:	d101      	bne.n	801a96c <remove_chain+0x64>
 801a968:	2302      	movs	r3, #2
 801a96a:	e02e      	b.n	801a9ca <remove_chain+0xc2>
 801a96c:	697b      	ldr	r3, [r7, #20]
 801a96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a972:	d101      	bne.n	801a978 <remove_chain+0x70>
 801a974:	2301      	movs	r3, #1
 801a976:	e028      	b.n	801a9ca <remove_chain+0xc2>
 801a978:	2200      	movs	r2, #0
 801a97a:	68b9      	ldr	r1, [r7, #8]
 801a97c:	69b8      	ldr	r0, [r7, #24]
 801a97e:	f7ff feac 	bl	801a6da <put_fat>
 801a982:	4603      	mov	r3, r0
 801a984:	77fb      	strb	r3, [r7, #31]
 801a986:	7ffb      	ldrb	r3, [r7, #31]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d001      	beq.n	801a990 <remove_chain+0x88>
 801a98c:	7ffb      	ldrb	r3, [r7, #31]
 801a98e:	e01c      	b.n	801a9ca <remove_chain+0xc2>
 801a990:	69bb      	ldr	r3, [r7, #24]
 801a992:	699a      	ldr	r2, [r3, #24]
 801a994:	69bb      	ldr	r3, [r7, #24]
 801a996:	69db      	ldr	r3, [r3, #28]
 801a998:	3b02      	subs	r3, #2
 801a99a:	429a      	cmp	r2, r3
 801a99c:	d20b      	bcs.n	801a9b6 <remove_chain+0xae>
 801a99e:	69bb      	ldr	r3, [r7, #24]
 801a9a0:	699b      	ldr	r3, [r3, #24]
 801a9a2:	1c5a      	adds	r2, r3, #1
 801a9a4:	69bb      	ldr	r3, [r7, #24]
 801a9a6:	619a      	str	r2, [r3, #24]
 801a9a8:	69bb      	ldr	r3, [r7, #24]
 801a9aa:	791b      	ldrb	r3, [r3, #4]
 801a9ac:	f043 0301 	orr.w	r3, r3, #1
 801a9b0:	b2da      	uxtb	r2, r3
 801a9b2:	69bb      	ldr	r3, [r7, #24]
 801a9b4:	711a      	strb	r2, [r3, #4]
 801a9b6:	697b      	ldr	r3, [r7, #20]
 801a9b8:	60bb      	str	r3, [r7, #8]
 801a9ba:	69bb      	ldr	r3, [r7, #24]
 801a9bc:	69db      	ldr	r3, [r3, #28]
 801a9be:	68ba      	ldr	r2, [r7, #8]
 801a9c0:	429a      	cmp	r2, r3
 801a9c2:	d3c6      	bcc.n	801a952 <remove_chain+0x4a>
 801a9c4:	e000      	b.n	801a9c8 <remove_chain+0xc0>
 801a9c6:	bf00      	nop
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	3720      	adds	r7, #32
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	bd80      	pop	{r7, pc}

0801a9d2 <create_chain>:
 801a9d2:	b580      	push	{r7, lr}
 801a9d4:	b088      	sub	sp, #32
 801a9d6:	af00      	add	r7, sp, #0
 801a9d8:	6078      	str	r0, [r7, #4]
 801a9da:	6039      	str	r1, [r7, #0]
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	613b      	str	r3, [r7, #16]
 801a9e2:	683b      	ldr	r3, [r7, #0]
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d10d      	bne.n	801aa04 <create_chain+0x32>
 801a9e8:	693b      	ldr	r3, [r7, #16]
 801a9ea:	695b      	ldr	r3, [r3, #20]
 801a9ec:	61bb      	str	r3, [r7, #24]
 801a9ee:	69bb      	ldr	r3, [r7, #24]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d004      	beq.n	801a9fe <create_chain+0x2c>
 801a9f4:	693b      	ldr	r3, [r7, #16]
 801a9f6:	69db      	ldr	r3, [r3, #28]
 801a9f8:	69ba      	ldr	r2, [r7, #24]
 801a9fa:	429a      	cmp	r2, r3
 801a9fc:	d31b      	bcc.n	801aa36 <create_chain+0x64>
 801a9fe:	2301      	movs	r3, #1
 801aa00:	61bb      	str	r3, [r7, #24]
 801aa02:	e018      	b.n	801aa36 <create_chain+0x64>
 801aa04:	6839      	ldr	r1, [r7, #0]
 801aa06:	6878      	ldr	r0, [r7, #4]
 801aa08:	f7ff fd97 	bl	801a53a <get_fat>
 801aa0c:	60f8      	str	r0, [r7, #12]
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	2b01      	cmp	r3, #1
 801aa12:	d801      	bhi.n	801aa18 <create_chain+0x46>
 801aa14:	2301      	movs	r3, #1
 801aa16:	e070      	b.n	801aafa <create_chain+0x128>
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa1e:	d101      	bne.n	801aa24 <create_chain+0x52>
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	e06a      	b.n	801aafa <create_chain+0x128>
 801aa24:	693b      	ldr	r3, [r7, #16]
 801aa26:	69db      	ldr	r3, [r3, #28]
 801aa28:	68fa      	ldr	r2, [r7, #12]
 801aa2a:	429a      	cmp	r2, r3
 801aa2c:	d201      	bcs.n	801aa32 <create_chain+0x60>
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	e063      	b.n	801aafa <create_chain+0x128>
 801aa32:	683b      	ldr	r3, [r7, #0]
 801aa34:	61bb      	str	r3, [r7, #24]
 801aa36:	69bb      	ldr	r3, [r7, #24]
 801aa38:	61fb      	str	r3, [r7, #28]
 801aa3a:	69fb      	ldr	r3, [r7, #28]
 801aa3c:	3301      	adds	r3, #1
 801aa3e:	61fb      	str	r3, [r7, #28]
 801aa40:	693b      	ldr	r3, [r7, #16]
 801aa42:	69db      	ldr	r3, [r3, #28]
 801aa44:	69fa      	ldr	r2, [r7, #28]
 801aa46:	429a      	cmp	r2, r3
 801aa48:	d307      	bcc.n	801aa5a <create_chain+0x88>
 801aa4a:	2302      	movs	r3, #2
 801aa4c:	61fb      	str	r3, [r7, #28]
 801aa4e:	69fa      	ldr	r2, [r7, #28]
 801aa50:	69bb      	ldr	r3, [r7, #24]
 801aa52:	429a      	cmp	r2, r3
 801aa54:	d901      	bls.n	801aa5a <create_chain+0x88>
 801aa56:	2300      	movs	r3, #0
 801aa58:	e04f      	b.n	801aafa <create_chain+0x128>
 801aa5a:	69f9      	ldr	r1, [r7, #28]
 801aa5c:	6878      	ldr	r0, [r7, #4]
 801aa5e:	f7ff fd6c 	bl	801a53a <get_fat>
 801aa62:	60f8      	str	r0, [r7, #12]
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d00e      	beq.n	801aa88 <create_chain+0xb6>
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	2b01      	cmp	r3, #1
 801aa6e:	d003      	beq.n	801aa78 <create_chain+0xa6>
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa76:	d101      	bne.n	801aa7c <create_chain+0xaa>
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	e03e      	b.n	801aafa <create_chain+0x128>
 801aa7c:	69fa      	ldr	r2, [r7, #28]
 801aa7e:	69bb      	ldr	r3, [r7, #24]
 801aa80:	429a      	cmp	r2, r3
 801aa82:	d1da      	bne.n	801aa3a <create_chain+0x68>
 801aa84:	2300      	movs	r3, #0
 801aa86:	e038      	b.n	801aafa <create_chain+0x128>
 801aa88:	bf00      	nop
 801aa8a:	f04f 32ff 	mov.w	r2, #4294967295
 801aa8e:	69f9      	ldr	r1, [r7, #28]
 801aa90:	6938      	ldr	r0, [r7, #16]
 801aa92:	f7ff fe22 	bl	801a6da <put_fat>
 801aa96:	4603      	mov	r3, r0
 801aa98:	75fb      	strb	r3, [r7, #23]
 801aa9a:	7dfb      	ldrb	r3, [r7, #23]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d109      	bne.n	801aab4 <create_chain+0xe2>
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d006      	beq.n	801aab4 <create_chain+0xe2>
 801aaa6:	69fa      	ldr	r2, [r7, #28]
 801aaa8:	6839      	ldr	r1, [r7, #0]
 801aaaa:	6938      	ldr	r0, [r7, #16]
 801aaac:	f7ff fe15 	bl	801a6da <put_fat>
 801aab0:	4603      	mov	r3, r0
 801aab2:	75fb      	strb	r3, [r7, #23]
 801aab4:	7dfb      	ldrb	r3, [r7, #23]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d116      	bne.n	801aae8 <create_chain+0x116>
 801aaba:	693b      	ldr	r3, [r7, #16]
 801aabc:	69fa      	ldr	r2, [r7, #28]
 801aabe:	615a      	str	r2, [r3, #20]
 801aac0:	693b      	ldr	r3, [r7, #16]
 801aac2:	699a      	ldr	r2, [r3, #24]
 801aac4:	693b      	ldr	r3, [r7, #16]
 801aac6:	69db      	ldr	r3, [r3, #28]
 801aac8:	3b02      	subs	r3, #2
 801aaca:	429a      	cmp	r2, r3
 801aacc:	d804      	bhi.n	801aad8 <create_chain+0x106>
 801aace:	693b      	ldr	r3, [r7, #16]
 801aad0:	699b      	ldr	r3, [r3, #24]
 801aad2:	1e5a      	subs	r2, r3, #1
 801aad4:	693b      	ldr	r3, [r7, #16]
 801aad6:	619a      	str	r2, [r3, #24]
 801aad8:	693b      	ldr	r3, [r7, #16]
 801aada:	791b      	ldrb	r3, [r3, #4]
 801aadc:	f043 0301 	orr.w	r3, r3, #1
 801aae0:	b2da      	uxtb	r2, r3
 801aae2:	693b      	ldr	r3, [r7, #16]
 801aae4:	711a      	strb	r2, [r3, #4]
 801aae6:	e007      	b.n	801aaf8 <create_chain+0x126>
 801aae8:	7dfb      	ldrb	r3, [r7, #23]
 801aaea:	2b01      	cmp	r3, #1
 801aaec:	d102      	bne.n	801aaf4 <create_chain+0x122>
 801aaee:	f04f 33ff 	mov.w	r3, #4294967295
 801aaf2:	e000      	b.n	801aaf6 <create_chain+0x124>
 801aaf4:	2301      	movs	r3, #1
 801aaf6:	61fb      	str	r3, [r7, #28]
 801aaf8:	69fb      	ldr	r3, [r7, #28]
 801aafa:	4618      	mov	r0, r3
 801aafc:	3720      	adds	r7, #32
 801aafe:	46bd      	mov	sp, r7
 801ab00:	bd80      	pop	{r7, pc}

0801ab02 <clmt_clust>:
 801ab02:	b480      	push	{r7}
 801ab04:	b087      	sub	sp, #28
 801ab06:	af00      	add	r7, sp, #0
 801ab08:	6078      	str	r0, [r7, #4]
 801ab0a:	6039      	str	r1, [r7, #0]
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	60fb      	str	r3, [r7, #12]
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab16:	3304      	adds	r3, #4
 801ab18:	613b      	str	r3, [r7, #16]
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	899b      	ldrh	r3, [r3, #12]
 801ab1e:	461a      	mov	r2, r3
 801ab20:	683b      	ldr	r3, [r7, #0]
 801ab22:	fbb3 f3f2 	udiv	r3, r3, r2
 801ab26:	68fa      	ldr	r2, [r7, #12]
 801ab28:	8952      	ldrh	r2, [r2, #10]
 801ab2a:	fbb3 f3f2 	udiv	r3, r3, r2
 801ab2e:	617b      	str	r3, [r7, #20]
 801ab30:	693b      	ldr	r3, [r7, #16]
 801ab32:	1d1a      	adds	r2, r3, #4
 801ab34:	613a      	str	r2, [r7, #16]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	60bb      	str	r3, [r7, #8]
 801ab3a:	68bb      	ldr	r3, [r7, #8]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d101      	bne.n	801ab44 <clmt_clust+0x42>
 801ab40:	2300      	movs	r3, #0
 801ab42:	e010      	b.n	801ab66 <clmt_clust+0x64>
 801ab44:	697a      	ldr	r2, [r7, #20]
 801ab46:	68bb      	ldr	r3, [r7, #8]
 801ab48:	429a      	cmp	r2, r3
 801ab4a:	d307      	bcc.n	801ab5c <clmt_clust+0x5a>
 801ab4c:	697a      	ldr	r2, [r7, #20]
 801ab4e:	68bb      	ldr	r3, [r7, #8]
 801ab50:	1ad3      	subs	r3, r2, r3
 801ab52:	617b      	str	r3, [r7, #20]
 801ab54:	693b      	ldr	r3, [r7, #16]
 801ab56:	3304      	adds	r3, #4
 801ab58:	613b      	str	r3, [r7, #16]
 801ab5a:	e7e9      	b.n	801ab30 <clmt_clust+0x2e>
 801ab5c:	bf00      	nop
 801ab5e:	693b      	ldr	r3, [r7, #16]
 801ab60:	681a      	ldr	r2, [r3, #0]
 801ab62:	697b      	ldr	r3, [r7, #20]
 801ab64:	4413      	add	r3, r2
 801ab66:	4618      	mov	r0, r3
 801ab68:	371c      	adds	r7, #28
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab70:	4770      	bx	lr

0801ab72 <dir_sdi>:
 801ab72:	b580      	push	{r7, lr}
 801ab74:	b086      	sub	sp, #24
 801ab76:	af00      	add	r7, sp, #0
 801ab78:	6078      	str	r0, [r7, #4]
 801ab7a:	6039      	str	r1, [r7, #0]
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	613b      	str	r3, [r7, #16]
 801ab82:	683b      	ldr	r3, [r7, #0]
 801ab84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801ab88:	d204      	bcs.n	801ab94 <dir_sdi+0x22>
 801ab8a:	683b      	ldr	r3, [r7, #0]
 801ab8c:	f003 031f 	and.w	r3, r3, #31
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d001      	beq.n	801ab98 <dir_sdi+0x26>
 801ab94:	2302      	movs	r3, #2
 801ab96:	e071      	b.n	801ac7c <dir_sdi+0x10a>
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	683a      	ldr	r2, [r7, #0]
 801ab9c:	615a      	str	r2, [r3, #20]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	689b      	ldr	r3, [r3, #8]
 801aba2:	617b      	str	r3, [r7, #20]
 801aba4:	697b      	ldr	r3, [r7, #20]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d106      	bne.n	801abb8 <dir_sdi+0x46>
 801abaa:	693b      	ldr	r3, [r7, #16]
 801abac:	781b      	ldrb	r3, [r3, #0]
 801abae:	2b02      	cmp	r3, #2
 801abb0:	d902      	bls.n	801abb8 <dir_sdi+0x46>
 801abb2:	693b      	ldr	r3, [r7, #16]
 801abb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abb6:	617b      	str	r3, [r7, #20]
 801abb8:	697b      	ldr	r3, [r7, #20]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d10c      	bne.n	801abd8 <dir_sdi+0x66>
 801abbe:	683b      	ldr	r3, [r7, #0]
 801abc0:	095b      	lsrs	r3, r3, #5
 801abc2:	693a      	ldr	r2, [r7, #16]
 801abc4:	8912      	ldrh	r2, [r2, #8]
 801abc6:	4293      	cmp	r3, r2
 801abc8:	d301      	bcc.n	801abce <dir_sdi+0x5c>
 801abca:	2302      	movs	r3, #2
 801abcc:	e056      	b.n	801ac7c <dir_sdi+0x10a>
 801abce:	693b      	ldr	r3, [r7, #16]
 801abd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	61da      	str	r2, [r3, #28]
 801abd6:	e02d      	b.n	801ac34 <dir_sdi+0xc2>
 801abd8:	693b      	ldr	r3, [r7, #16]
 801abda:	895b      	ldrh	r3, [r3, #10]
 801abdc:	461a      	mov	r2, r3
 801abde:	693b      	ldr	r3, [r7, #16]
 801abe0:	899b      	ldrh	r3, [r3, #12]
 801abe2:	fb03 f302 	mul.w	r3, r3, r2
 801abe6:	60fb      	str	r3, [r7, #12]
 801abe8:	e019      	b.n	801ac1e <dir_sdi+0xac>
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	6979      	ldr	r1, [r7, #20]
 801abee:	4618      	mov	r0, r3
 801abf0:	f7ff fca3 	bl	801a53a <get_fat>
 801abf4:	6178      	str	r0, [r7, #20]
 801abf6:	697b      	ldr	r3, [r7, #20]
 801abf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abfc:	d101      	bne.n	801ac02 <dir_sdi+0x90>
 801abfe:	2301      	movs	r3, #1
 801ac00:	e03c      	b.n	801ac7c <dir_sdi+0x10a>
 801ac02:	697b      	ldr	r3, [r7, #20]
 801ac04:	2b01      	cmp	r3, #1
 801ac06:	d904      	bls.n	801ac12 <dir_sdi+0xa0>
 801ac08:	693b      	ldr	r3, [r7, #16]
 801ac0a:	69db      	ldr	r3, [r3, #28]
 801ac0c:	697a      	ldr	r2, [r7, #20]
 801ac0e:	429a      	cmp	r2, r3
 801ac10:	d301      	bcc.n	801ac16 <dir_sdi+0xa4>
 801ac12:	2302      	movs	r3, #2
 801ac14:	e032      	b.n	801ac7c <dir_sdi+0x10a>
 801ac16:	683a      	ldr	r2, [r7, #0]
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	1ad3      	subs	r3, r2, r3
 801ac1c:	603b      	str	r3, [r7, #0]
 801ac1e:	683a      	ldr	r2, [r7, #0]
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	429a      	cmp	r2, r3
 801ac24:	d2e1      	bcs.n	801abea <dir_sdi+0x78>
 801ac26:	6979      	ldr	r1, [r7, #20]
 801ac28:	6938      	ldr	r0, [r7, #16]
 801ac2a:	f7ff fc67 	bl	801a4fc <clust2sect>
 801ac2e:	4602      	mov	r2, r0
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	61da      	str	r2, [r3, #28]
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	697a      	ldr	r2, [r7, #20]
 801ac38:	619a      	str	r2, [r3, #24]
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	69db      	ldr	r3, [r3, #28]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d101      	bne.n	801ac46 <dir_sdi+0xd4>
 801ac42:	2302      	movs	r3, #2
 801ac44:	e01a      	b.n	801ac7c <dir_sdi+0x10a>
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	69da      	ldr	r2, [r3, #28]
 801ac4a:	693b      	ldr	r3, [r7, #16]
 801ac4c:	899b      	ldrh	r3, [r3, #12]
 801ac4e:	4619      	mov	r1, r3
 801ac50:	683b      	ldr	r3, [r7, #0]
 801ac52:	fbb3 f3f1 	udiv	r3, r3, r1
 801ac56:	441a      	add	r2, r3
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	61da      	str	r2, [r3, #28]
 801ac5c:	693b      	ldr	r3, [r7, #16]
 801ac5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801ac62:	693b      	ldr	r3, [r7, #16]
 801ac64:	899b      	ldrh	r3, [r3, #12]
 801ac66:	461a      	mov	r2, r3
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	fbb3 f0f2 	udiv	r0, r3, r2
 801ac6e:	fb02 f200 	mul.w	r2, r2, r0
 801ac72:	1a9b      	subs	r3, r3, r2
 801ac74:	18ca      	adds	r2, r1, r3
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	621a      	str	r2, [r3, #32]
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	3718      	adds	r7, #24
 801ac80:	46bd      	mov	sp, r7
 801ac82:	bd80      	pop	{r7, pc}

0801ac84 <dir_next>:
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b086      	sub	sp, #24
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
 801ac8c:	6039      	str	r1, [r7, #0]
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	60fb      	str	r3, [r7, #12]
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	695b      	ldr	r3, [r3, #20]
 801ac98:	3320      	adds	r3, #32
 801ac9a:	60bb      	str	r3, [r7, #8]
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	69db      	ldr	r3, [r3, #28]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d003      	beq.n	801acac <dir_next+0x28>
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801acaa:	d301      	bcc.n	801acb0 <dir_next+0x2c>
 801acac:	2304      	movs	r3, #4
 801acae:	e0bb      	b.n	801ae28 <dir_next+0x1a4>
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	899b      	ldrh	r3, [r3, #12]
 801acb4:	461a      	mov	r2, r3
 801acb6:	68bb      	ldr	r3, [r7, #8]
 801acb8:	fbb3 f1f2 	udiv	r1, r3, r2
 801acbc:	fb02 f201 	mul.w	r2, r2, r1
 801acc0:	1a9b      	subs	r3, r3, r2
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	f040 809d 	bne.w	801ae02 <dir_next+0x17e>
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	69db      	ldr	r3, [r3, #28]
 801accc:	1c5a      	adds	r2, r3, #1
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	61da      	str	r2, [r3, #28]
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	699b      	ldr	r3, [r3, #24]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d10b      	bne.n	801acf2 <dir_next+0x6e>
 801acda:	68bb      	ldr	r3, [r7, #8]
 801acdc:	095b      	lsrs	r3, r3, #5
 801acde:	68fa      	ldr	r2, [r7, #12]
 801ace0:	8912      	ldrh	r2, [r2, #8]
 801ace2:	4293      	cmp	r3, r2
 801ace4:	f0c0 808d 	bcc.w	801ae02 <dir_next+0x17e>
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	2200      	movs	r2, #0
 801acec:	61da      	str	r2, [r3, #28]
 801acee:	2304      	movs	r3, #4
 801acf0:	e09a      	b.n	801ae28 <dir_next+0x1a4>
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	899b      	ldrh	r3, [r3, #12]
 801acf6:	461a      	mov	r2, r3
 801acf8:	68bb      	ldr	r3, [r7, #8]
 801acfa:	fbb3 f3f2 	udiv	r3, r3, r2
 801acfe:	68fa      	ldr	r2, [r7, #12]
 801ad00:	8952      	ldrh	r2, [r2, #10]
 801ad02:	3a01      	subs	r2, #1
 801ad04:	4013      	ands	r3, r2
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d17b      	bne.n	801ae02 <dir_next+0x17e>
 801ad0a:	687a      	ldr	r2, [r7, #4]
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	699b      	ldr	r3, [r3, #24]
 801ad10:	4619      	mov	r1, r3
 801ad12:	4610      	mov	r0, r2
 801ad14:	f7ff fc11 	bl	801a53a <get_fat>
 801ad18:	6178      	str	r0, [r7, #20]
 801ad1a:	697b      	ldr	r3, [r7, #20]
 801ad1c:	2b01      	cmp	r3, #1
 801ad1e:	d801      	bhi.n	801ad24 <dir_next+0xa0>
 801ad20:	2302      	movs	r3, #2
 801ad22:	e081      	b.n	801ae28 <dir_next+0x1a4>
 801ad24:	697b      	ldr	r3, [r7, #20]
 801ad26:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad2a:	d101      	bne.n	801ad30 <dir_next+0xac>
 801ad2c:	2301      	movs	r3, #1
 801ad2e:	e07b      	b.n	801ae28 <dir_next+0x1a4>
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	69db      	ldr	r3, [r3, #28]
 801ad34:	697a      	ldr	r2, [r7, #20]
 801ad36:	429a      	cmp	r2, r3
 801ad38:	d359      	bcc.n	801adee <dir_next+0x16a>
 801ad3a:	683b      	ldr	r3, [r7, #0]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d104      	bne.n	801ad4a <dir_next+0xc6>
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	2200      	movs	r2, #0
 801ad44:	61da      	str	r2, [r3, #28]
 801ad46:	2304      	movs	r3, #4
 801ad48:	e06e      	b.n	801ae28 <dir_next+0x1a4>
 801ad4a:	687a      	ldr	r2, [r7, #4]
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	699b      	ldr	r3, [r3, #24]
 801ad50:	4619      	mov	r1, r3
 801ad52:	4610      	mov	r0, r2
 801ad54:	f7ff fe3d 	bl	801a9d2 <create_chain>
 801ad58:	6178      	str	r0, [r7, #20]
 801ad5a:	697b      	ldr	r3, [r7, #20]
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d101      	bne.n	801ad64 <dir_next+0xe0>
 801ad60:	2307      	movs	r3, #7
 801ad62:	e061      	b.n	801ae28 <dir_next+0x1a4>
 801ad64:	697b      	ldr	r3, [r7, #20]
 801ad66:	2b01      	cmp	r3, #1
 801ad68:	d101      	bne.n	801ad6e <dir_next+0xea>
 801ad6a:	2302      	movs	r3, #2
 801ad6c:	e05c      	b.n	801ae28 <dir_next+0x1a4>
 801ad6e:	697b      	ldr	r3, [r7, #20]
 801ad70:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad74:	d101      	bne.n	801ad7a <dir_next+0xf6>
 801ad76:	2301      	movs	r3, #1
 801ad78:	e056      	b.n	801ae28 <dir_next+0x1a4>
 801ad7a:	68f8      	ldr	r0, [r7, #12]
 801ad7c:	f7ff fadc 	bl	801a338 <sync_window>
 801ad80:	4603      	mov	r3, r0
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d001      	beq.n	801ad8a <dir_next+0x106>
 801ad86:	2301      	movs	r3, #1
 801ad88:	e04e      	b.n	801ae28 <dir_next+0x1a4>
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	899b      	ldrh	r3, [r3, #12]
 801ad94:	461a      	mov	r2, r3
 801ad96:	2100      	movs	r1, #0
 801ad98:	f7ff f905 	bl	8019fa6 <mem_set>
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	613b      	str	r3, [r7, #16]
 801ada0:	6979      	ldr	r1, [r7, #20]
 801ada2:	68f8      	ldr	r0, [r7, #12]
 801ada4:	f7ff fbaa 	bl	801a4fc <clust2sect>
 801ada8:	4602      	mov	r2, r0
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	635a      	str	r2, [r3, #52]	; 0x34
 801adae:	e012      	b.n	801add6 <dir_next+0x152>
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	2201      	movs	r2, #1
 801adb4:	70da      	strb	r2, [r3, #3]
 801adb6:	68f8      	ldr	r0, [r7, #12]
 801adb8:	f7ff fabe 	bl	801a338 <sync_window>
 801adbc:	4603      	mov	r3, r0
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d001      	beq.n	801adc6 <dir_next+0x142>
 801adc2:	2301      	movs	r3, #1
 801adc4:	e030      	b.n	801ae28 <dir_next+0x1a4>
 801adc6:	693b      	ldr	r3, [r7, #16]
 801adc8:	3301      	adds	r3, #1
 801adca:	613b      	str	r3, [r7, #16]
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801add0:	1c5a      	adds	r2, r3, #1
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	635a      	str	r2, [r3, #52]	; 0x34
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	895b      	ldrh	r3, [r3, #10]
 801adda:	461a      	mov	r2, r3
 801addc:	693b      	ldr	r3, [r7, #16]
 801adde:	4293      	cmp	r3, r2
 801ade0:	d3e6      	bcc.n	801adb0 <dir_next+0x12c>
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ade6:	693b      	ldr	r3, [r7, #16]
 801ade8:	1ad2      	subs	r2, r2, r3
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	635a      	str	r2, [r3, #52]	; 0x34
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	697a      	ldr	r2, [r7, #20]
 801adf2:	619a      	str	r2, [r3, #24]
 801adf4:	6979      	ldr	r1, [r7, #20]
 801adf6:	68f8      	ldr	r0, [r7, #12]
 801adf8:	f7ff fb80 	bl	801a4fc <clust2sect>
 801adfc:	4602      	mov	r2, r0
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	61da      	str	r2, [r3, #28]
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	68ba      	ldr	r2, [r7, #8]
 801ae06:	615a      	str	r2, [r3, #20]
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	899b      	ldrh	r3, [r3, #12]
 801ae12:	461a      	mov	r2, r3
 801ae14:	68bb      	ldr	r3, [r7, #8]
 801ae16:	fbb3 f0f2 	udiv	r0, r3, r2
 801ae1a:	fb02 f200 	mul.w	r2, r2, r0
 801ae1e:	1a9b      	subs	r3, r3, r2
 801ae20:	18ca      	adds	r2, r1, r3
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	621a      	str	r2, [r3, #32]
 801ae26:	2300      	movs	r3, #0
 801ae28:	4618      	mov	r0, r3
 801ae2a:	3718      	adds	r7, #24
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}

0801ae30 <dir_alloc>:
 801ae30:	b580      	push	{r7, lr}
 801ae32:	b086      	sub	sp, #24
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	6078      	str	r0, [r7, #4]
 801ae38:	6039      	str	r1, [r7, #0]
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	60fb      	str	r3, [r7, #12]
 801ae40:	2100      	movs	r1, #0
 801ae42:	6878      	ldr	r0, [r7, #4]
 801ae44:	f7ff fe95 	bl	801ab72 <dir_sdi>
 801ae48:	4603      	mov	r3, r0
 801ae4a:	75fb      	strb	r3, [r7, #23]
 801ae4c:	7dfb      	ldrb	r3, [r7, #23]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d12b      	bne.n	801aeaa <dir_alloc+0x7a>
 801ae52:	2300      	movs	r3, #0
 801ae54:	613b      	str	r3, [r7, #16]
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	69db      	ldr	r3, [r3, #28]
 801ae5a:	4619      	mov	r1, r3
 801ae5c:	68f8      	ldr	r0, [r7, #12]
 801ae5e:	f7ff faaf 	bl	801a3c0 <move_window>
 801ae62:	4603      	mov	r3, r0
 801ae64:	75fb      	strb	r3, [r7, #23]
 801ae66:	7dfb      	ldrb	r3, [r7, #23]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d11d      	bne.n	801aea8 <dir_alloc+0x78>
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	6a1b      	ldr	r3, [r3, #32]
 801ae70:	781b      	ldrb	r3, [r3, #0]
 801ae72:	2be5      	cmp	r3, #229	; 0xe5
 801ae74:	d004      	beq.n	801ae80 <dir_alloc+0x50>
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	6a1b      	ldr	r3, [r3, #32]
 801ae7a:	781b      	ldrb	r3, [r3, #0]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d107      	bne.n	801ae90 <dir_alloc+0x60>
 801ae80:	693b      	ldr	r3, [r7, #16]
 801ae82:	3301      	adds	r3, #1
 801ae84:	613b      	str	r3, [r7, #16]
 801ae86:	693a      	ldr	r2, [r7, #16]
 801ae88:	683b      	ldr	r3, [r7, #0]
 801ae8a:	429a      	cmp	r2, r3
 801ae8c:	d102      	bne.n	801ae94 <dir_alloc+0x64>
 801ae8e:	e00c      	b.n	801aeaa <dir_alloc+0x7a>
 801ae90:	2300      	movs	r3, #0
 801ae92:	613b      	str	r3, [r7, #16]
 801ae94:	2101      	movs	r1, #1
 801ae96:	6878      	ldr	r0, [r7, #4]
 801ae98:	f7ff fef4 	bl	801ac84 <dir_next>
 801ae9c:	4603      	mov	r3, r0
 801ae9e:	75fb      	strb	r3, [r7, #23]
 801aea0:	7dfb      	ldrb	r3, [r7, #23]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d0d7      	beq.n	801ae56 <dir_alloc+0x26>
 801aea6:	e000      	b.n	801aeaa <dir_alloc+0x7a>
 801aea8:	bf00      	nop
 801aeaa:	7dfb      	ldrb	r3, [r7, #23]
 801aeac:	2b04      	cmp	r3, #4
 801aeae:	d101      	bne.n	801aeb4 <dir_alloc+0x84>
 801aeb0:	2307      	movs	r3, #7
 801aeb2:	75fb      	strb	r3, [r7, #23]
 801aeb4:	7dfb      	ldrb	r3, [r7, #23]
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	3718      	adds	r7, #24
 801aeba:	46bd      	mov	sp, r7
 801aebc:	bd80      	pop	{r7, pc}

0801aebe <ld_clust>:
 801aebe:	b580      	push	{r7, lr}
 801aec0:	b084      	sub	sp, #16
 801aec2:	af00      	add	r7, sp, #0
 801aec4:	6078      	str	r0, [r7, #4]
 801aec6:	6039      	str	r1, [r7, #0]
 801aec8:	683b      	ldr	r3, [r7, #0]
 801aeca:	331a      	adds	r3, #26
 801aecc:	4618      	mov	r0, r3
 801aece:	f7fe ffc7 	bl	8019e60 <ld_word>
 801aed2:	4603      	mov	r3, r0
 801aed4:	60fb      	str	r3, [r7, #12]
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	781b      	ldrb	r3, [r3, #0]
 801aeda:	2b03      	cmp	r3, #3
 801aedc:	d109      	bne.n	801aef2 <ld_clust+0x34>
 801aede:	683b      	ldr	r3, [r7, #0]
 801aee0:	3314      	adds	r3, #20
 801aee2:	4618      	mov	r0, r3
 801aee4:	f7fe ffbc 	bl	8019e60 <ld_word>
 801aee8:	4603      	mov	r3, r0
 801aeea:	041b      	lsls	r3, r3, #16
 801aeec:	68fa      	ldr	r2, [r7, #12]
 801aeee:	4313      	orrs	r3, r2
 801aef0:	60fb      	str	r3, [r7, #12]
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	4618      	mov	r0, r3
 801aef6:	3710      	adds	r7, #16
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd80      	pop	{r7, pc}

0801aefc <st_clust>:
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b084      	sub	sp, #16
 801af00:	af00      	add	r7, sp, #0
 801af02:	60f8      	str	r0, [r7, #12]
 801af04:	60b9      	str	r1, [r7, #8]
 801af06:	607a      	str	r2, [r7, #4]
 801af08:	68bb      	ldr	r3, [r7, #8]
 801af0a:	331a      	adds	r3, #26
 801af0c:	687a      	ldr	r2, [r7, #4]
 801af0e:	b292      	uxth	r2, r2
 801af10:	4611      	mov	r1, r2
 801af12:	4618      	mov	r0, r3
 801af14:	f7fe ffdf 	bl	8019ed6 <st_word>
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	781b      	ldrb	r3, [r3, #0]
 801af1c:	2b03      	cmp	r3, #3
 801af1e:	d109      	bne.n	801af34 <st_clust+0x38>
 801af20:	68bb      	ldr	r3, [r7, #8]
 801af22:	f103 0214 	add.w	r2, r3, #20
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	0c1b      	lsrs	r3, r3, #16
 801af2a:	b29b      	uxth	r3, r3
 801af2c:	4619      	mov	r1, r3
 801af2e:	4610      	mov	r0, r2
 801af30:	f7fe ffd1 	bl	8019ed6 <st_word>
 801af34:	bf00      	nop
 801af36:	3710      	adds	r7, #16
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}

0801af3c <cmp_lfn>:
 801af3c:	b590      	push	{r4, r7, lr}
 801af3e:	b087      	sub	sp, #28
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
 801af44:	6039      	str	r1, [r7, #0]
 801af46:	683b      	ldr	r3, [r7, #0]
 801af48:	331a      	adds	r3, #26
 801af4a:	4618      	mov	r0, r3
 801af4c:	f7fe ff88 	bl	8019e60 <ld_word>
 801af50:	4603      	mov	r3, r0
 801af52:	2b00      	cmp	r3, #0
 801af54:	d001      	beq.n	801af5a <cmp_lfn+0x1e>
 801af56:	2300      	movs	r3, #0
 801af58:	e059      	b.n	801b00e <cmp_lfn+0xd2>
 801af5a:	683b      	ldr	r3, [r7, #0]
 801af5c:	781b      	ldrb	r3, [r3, #0]
 801af5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801af62:	1e5a      	subs	r2, r3, #1
 801af64:	4613      	mov	r3, r2
 801af66:	005b      	lsls	r3, r3, #1
 801af68:	4413      	add	r3, r2
 801af6a:	009b      	lsls	r3, r3, #2
 801af6c:	4413      	add	r3, r2
 801af6e:	617b      	str	r3, [r7, #20]
 801af70:	2301      	movs	r3, #1
 801af72:	81fb      	strh	r3, [r7, #14]
 801af74:	2300      	movs	r3, #0
 801af76:	613b      	str	r3, [r7, #16]
 801af78:	e033      	b.n	801afe2 <cmp_lfn+0xa6>
 801af7a:	4a27      	ldr	r2, [pc, #156]	; (801b018 <cmp_lfn+0xdc>)
 801af7c:	693b      	ldr	r3, [r7, #16]
 801af7e:	4413      	add	r3, r2
 801af80:	781b      	ldrb	r3, [r3, #0]
 801af82:	461a      	mov	r2, r3
 801af84:	683b      	ldr	r3, [r7, #0]
 801af86:	4413      	add	r3, r2
 801af88:	4618      	mov	r0, r3
 801af8a:	f7fe ff69 	bl	8019e60 <ld_word>
 801af8e:	4603      	mov	r3, r0
 801af90:	81bb      	strh	r3, [r7, #12]
 801af92:	89fb      	ldrh	r3, [r7, #14]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d01a      	beq.n	801afce <cmp_lfn+0x92>
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	2bfe      	cmp	r3, #254	; 0xfe
 801af9c:	d812      	bhi.n	801afc4 <cmp_lfn+0x88>
 801af9e:	89bb      	ldrh	r3, [r7, #12]
 801afa0:	4618      	mov	r0, r3
 801afa2:	f002 fcdb 	bl	801d95c <ff_wtoupper>
 801afa6:	4603      	mov	r3, r0
 801afa8:	461c      	mov	r4, r3
 801afaa:	697b      	ldr	r3, [r7, #20]
 801afac:	1c5a      	adds	r2, r3, #1
 801afae:	617a      	str	r2, [r7, #20]
 801afb0:	005b      	lsls	r3, r3, #1
 801afb2:	687a      	ldr	r2, [r7, #4]
 801afb4:	4413      	add	r3, r2
 801afb6:	881b      	ldrh	r3, [r3, #0]
 801afb8:	4618      	mov	r0, r3
 801afba:	f002 fccf 	bl	801d95c <ff_wtoupper>
 801afbe:	4603      	mov	r3, r0
 801afc0:	429c      	cmp	r4, r3
 801afc2:	d001      	beq.n	801afc8 <cmp_lfn+0x8c>
 801afc4:	2300      	movs	r3, #0
 801afc6:	e022      	b.n	801b00e <cmp_lfn+0xd2>
 801afc8:	89bb      	ldrh	r3, [r7, #12]
 801afca:	81fb      	strh	r3, [r7, #14]
 801afcc:	e006      	b.n	801afdc <cmp_lfn+0xa0>
 801afce:	89bb      	ldrh	r3, [r7, #12]
 801afd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801afd4:	4293      	cmp	r3, r2
 801afd6:	d001      	beq.n	801afdc <cmp_lfn+0xa0>
 801afd8:	2300      	movs	r3, #0
 801afda:	e018      	b.n	801b00e <cmp_lfn+0xd2>
 801afdc:	693b      	ldr	r3, [r7, #16]
 801afde:	3301      	adds	r3, #1
 801afe0:	613b      	str	r3, [r7, #16]
 801afe2:	693b      	ldr	r3, [r7, #16]
 801afe4:	2b0c      	cmp	r3, #12
 801afe6:	d9c8      	bls.n	801af7a <cmp_lfn+0x3e>
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	781b      	ldrb	r3, [r3, #0]
 801afec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d00b      	beq.n	801b00c <cmp_lfn+0xd0>
 801aff4:	89fb      	ldrh	r3, [r7, #14]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d008      	beq.n	801b00c <cmp_lfn+0xd0>
 801affa:	697b      	ldr	r3, [r7, #20]
 801affc:	005b      	lsls	r3, r3, #1
 801affe:	687a      	ldr	r2, [r7, #4]
 801b000:	4413      	add	r3, r2
 801b002:	881b      	ldrh	r3, [r3, #0]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d001      	beq.n	801b00c <cmp_lfn+0xd0>
 801b008:	2300      	movs	r3, #0
 801b00a:	e000      	b.n	801b00e <cmp_lfn+0xd2>
 801b00c:	2301      	movs	r3, #1
 801b00e:	4618      	mov	r0, r3
 801b010:	371c      	adds	r7, #28
 801b012:	46bd      	mov	sp, r7
 801b014:	bd90      	pop	{r4, r7, pc}
 801b016:	bf00      	nop
 801b018:	08023090 	.word	0x08023090

0801b01c <pick_lfn>:
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b086      	sub	sp, #24
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
 801b024:	6039      	str	r1, [r7, #0]
 801b026:	683b      	ldr	r3, [r7, #0]
 801b028:	331a      	adds	r3, #26
 801b02a:	4618      	mov	r0, r3
 801b02c:	f7fe ff18 	bl	8019e60 <ld_word>
 801b030:	4603      	mov	r3, r0
 801b032:	2b00      	cmp	r3, #0
 801b034:	d001      	beq.n	801b03a <pick_lfn+0x1e>
 801b036:	2300      	movs	r3, #0
 801b038:	e04d      	b.n	801b0d6 <pick_lfn+0xba>
 801b03a:	683b      	ldr	r3, [r7, #0]
 801b03c:	781b      	ldrb	r3, [r3, #0]
 801b03e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b042:	1e5a      	subs	r2, r3, #1
 801b044:	4613      	mov	r3, r2
 801b046:	005b      	lsls	r3, r3, #1
 801b048:	4413      	add	r3, r2
 801b04a:	009b      	lsls	r3, r3, #2
 801b04c:	4413      	add	r3, r2
 801b04e:	617b      	str	r3, [r7, #20]
 801b050:	2301      	movs	r3, #1
 801b052:	81fb      	strh	r3, [r7, #14]
 801b054:	2300      	movs	r3, #0
 801b056:	613b      	str	r3, [r7, #16]
 801b058:	e028      	b.n	801b0ac <pick_lfn+0x90>
 801b05a:	4a21      	ldr	r2, [pc, #132]	; (801b0e0 <pick_lfn+0xc4>)
 801b05c:	693b      	ldr	r3, [r7, #16]
 801b05e:	4413      	add	r3, r2
 801b060:	781b      	ldrb	r3, [r3, #0]
 801b062:	461a      	mov	r2, r3
 801b064:	683b      	ldr	r3, [r7, #0]
 801b066:	4413      	add	r3, r2
 801b068:	4618      	mov	r0, r3
 801b06a:	f7fe fef9 	bl	8019e60 <ld_word>
 801b06e:	4603      	mov	r3, r0
 801b070:	81bb      	strh	r3, [r7, #12]
 801b072:	89fb      	ldrh	r3, [r7, #14]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d00f      	beq.n	801b098 <pick_lfn+0x7c>
 801b078:	697b      	ldr	r3, [r7, #20]
 801b07a:	2bfe      	cmp	r3, #254	; 0xfe
 801b07c:	d901      	bls.n	801b082 <pick_lfn+0x66>
 801b07e:	2300      	movs	r3, #0
 801b080:	e029      	b.n	801b0d6 <pick_lfn+0xba>
 801b082:	89bb      	ldrh	r3, [r7, #12]
 801b084:	81fb      	strh	r3, [r7, #14]
 801b086:	697b      	ldr	r3, [r7, #20]
 801b088:	1c5a      	adds	r2, r3, #1
 801b08a:	617a      	str	r2, [r7, #20]
 801b08c:	005b      	lsls	r3, r3, #1
 801b08e:	687a      	ldr	r2, [r7, #4]
 801b090:	4413      	add	r3, r2
 801b092:	89fa      	ldrh	r2, [r7, #14]
 801b094:	801a      	strh	r2, [r3, #0]
 801b096:	e006      	b.n	801b0a6 <pick_lfn+0x8a>
 801b098:	89bb      	ldrh	r3, [r7, #12]
 801b09a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b09e:	4293      	cmp	r3, r2
 801b0a0:	d001      	beq.n	801b0a6 <pick_lfn+0x8a>
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	e017      	b.n	801b0d6 <pick_lfn+0xba>
 801b0a6:	693b      	ldr	r3, [r7, #16]
 801b0a8:	3301      	adds	r3, #1
 801b0aa:	613b      	str	r3, [r7, #16]
 801b0ac:	693b      	ldr	r3, [r7, #16]
 801b0ae:	2b0c      	cmp	r3, #12
 801b0b0:	d9d3      	bls.n	801b05a <pick_lfn+0x3e>
 801b0b2:	683b      	ldr	r3, [r7, #0]
 801b0b4:	781b      	ldrb	r3, [r3, #0]
 801b0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d00a      	beq.n	801b0d4 <pick_lfn+0xb8>
 801b0be:	697b      	ldr	r3, [r7, #20]
 801b0c0:	2bfe      	cmp	r3, #254	; 0xfe
 801b0c2:	d901      	bls.n	801b0c8 <pick_lfn+0xac>
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	e006      	b.n	801b0d6 <pick_lfn+0xba>
 801b0c8:	697b      	ldr	r3, [r7, #20]
 801b0ca:	005b      	lsls	r3, r3, #1
 801b0cc:	687a      	ldr	r2, [r7, #4]
 801b0ce:	4413      	add	r3, r2
 801b0d0:	2200      	movs	r2, #0
 801b0d2:	801a      	strh	r2, [r3, #0]
 801b0d4:	2301      	movs	r3, #1
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	3718      	adds	r7, #24
 801b0da:	46bd      	mov	sp, r7
 801b0dc:	bd80      	pop	{r7, pc}
 801b0de:	bf00      	nop
 801b0e0:	08023090 	.word	0x08023090

0801b0e4 <put_lfn>:
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b088      	sub	sp, #32
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	60f8      	str	r0, [r7, #12]
 801b0ec:	60b9      	str	r1, [r7, #8]
 801b0ee:	4611      	mov	r1, r2
 801b0f0:	461a      	mov	r2, r3
 801b0f2:	460b      	mov	r3, r1
 801b0f4:	71fb      	strb	r3, [r7, #7]
 801b0f6:	4613      	mov	r3, r2
 801b0f8:	71bb      	strb	r3, [r7, #6]
 801b0fa:	68bb      	ldr	r3, [r7, #8]
 801b0fc:	330d      	adds	r3, #13
 801b0fe:	79ba      	ldrb	r2, [r7, #6]
 801b100:	701a      	strb	r2, [r3, #0]
 801b102:	68bb      	ldr	r3, [r7, #8]
 801b104:	330b      	adds	r3, #11
 801b106:	220f      	movs	r2, #15
 801b108:	701a      	strb	r2, [r3, #0]
 801b10a:	68bb      	ldr	r3, [r7, #8]
 801b10c:	330c      	adds	r3, #12
 801b10e:	2200      	movs	r2, #0
 801b110:	701a      	strb	r2, [r3, #0]
 801b112:	68bb      	ldr	r3, [r7, #8]
 801b114:	331a      	adds	r3, #26
 801b116:	2100      	movs	r1, #0
 801b118:	4618      	mov	r0, r3
 801b11a:	f7fe fedc 	bl	8019ed6 <st_word>
 801b11e:	79fb      	ldrb	r3, [r7, #7]
 801b120:	1e5a      	subs	r2, r3, #1
 801b122:	4613      	mov	r3, r2
 801b124:	005b      	lsls	r3, r3, #1
 801b126:	4413      	add	r3, r2
 801b128:	009b      	lsls	r3, r3, #2
 801b12a:	4413      	add	r3, r2
 801b12c:	61fb      	str	r3, [r7, #28]
 801b12e:	2300      	movs	r3, #0
 801b130:	82fb      	strh	r3, [r7, #22]
 801b132:	2300      	movs	r3, #0
 801b134:	61bb      	str	r3, [r7, #24]
 801b136:	8afb      	ldrh	r3, [r7, #22]
 801b138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b13c:	4293      	cmp	r3, r2
 801b13e:	d007      	beq.n	801b150 <put_lfn+0x6c>
 801b140:	69fb      	ldr	r3, [r7, #28]
 801b142:	1c5a      	adds	r2, r3, #1
 801b144:	61fa      	str	r2, [r7, #28]
 801b146:	005b      	lsls	r3, r3, #1
 801b148:	68fa      	ldr	r2, [r7, #12]
 801b14a:	4413      	add	r3, r2
 801b14c:	881b      	ldrh	r3, [r3, #0]
 801b14e:	82fb      	strh	r3, [r7, #22]
 801b150:	4a17      	ldr	r2, [pc, #92]	; (801b1b0 <put_lfn+0xcc>)
 801b152:	69bb      	ldr	r3, [r7, #24]
 801b154:	4413      	add	r3, r2
 801b156:	781b      	ldrb	r3, [r3, #0]
 801b158:	461a      	mov	r2, r3
 801b15a:	68bb      	ldr	r3, [r7, #8]
 801b15c:	4413      	add	r3, r2
 801b15e:	8afa      	ldrh	r2, [r7, #22]
 801b160:	4611      	mov	r1, r2
 801b162:	4618      	mov	r0, r3
 801b164:	f7fe feb7 	bl	8019ed6 <st_word>
 801b168:	8afb      	ldrh	r3, [r7, #22]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d102      	bne.n	801b174 <put_lfn+0x90>
 801b16e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b172:	82fb      	strh	r3, [r7, #22]
 801b174:	69bb      	ldr	r3, [r7, #24]
 801b176:	3301      	adds	r3, #1
 801b178:	61bb      	str	r3, [r7, #24]
 801b17a:	69bb      	ldr	r3, [r7, #24]
 801b17c:	2b0c      	cmp	r3, #12
 801b17e:	d9da      	bls.n	801b136 <put_lfn+0x52>
 801b180:	8afb      	ldrh	r3, [r7, #22]
 801b182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b186:	4293      	cmp	r3, r2
 801b188:	d006      	beq.n	801b198 <put_lfn+0xb4>
 801b18a:	69fb      	ldr	r3, [r7, #28]
 801b18c:	005b      	lsls	r3, r3, #1
 801b18e:	68fa      	ldr	r2, [r7, #12]
 801b190:	4413      	add	r3, r2
 801b192:	881b      	ldrh	r3, [r3, #0]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d103      	bne.n	801b1a0 <put_lfn+0xbc>
 801b198:	79fb      	ldrb	r3, [r7, #7]
 801b19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b19e:	71fb      	strb	r3, [r7, #7]
 801b1a0:	68bb      	ldr	r3, [r7, #8]
 801b1a2:	79fa      	ldrb	r2, [r7, #7]
 801b1a4:	701a      	strb	r2, [r3, #0]
 801b1a6:	bf00      	nop
 801b1a8:	3720      	adds	r7, #32
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bd80      	pop	{r7, pc}
 801b1ae:	bf00      	nop
 801b1b0:	08023090 	.word	0x08023090

0801b1b4 <gen_numname>:
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b08c      	sub	sp, #48	; 0x30
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	60f8      	str	r0, [r7, #12]
 801b1bc:	60b9      	str	r1, [r7, #8]
 801b1be:	607a      	str	r2, [r7, #4]
 801b1c0:	603b      	str	r3, [r7, #0]
 801b1c2:	220b      	movs	r2, #11
 801b1c4:	68b9      	ldr	r1, [r7, #8]
 801b1c6:	68f8      	ldr	r0, [r7, #12]
 801b1c8:	f7fe fecc 	bl	8019f64 <mem_cpy>
 801b1cc:	683b      	ldr	r3, [r7, #0]
 801b1ce:	2b05      	cmp	r3, #5
 801b1d0:	d929      	bls.n	801b226 <gen_numname+0x72>
 801b1d2:	683b      	ldr	r3, [r7, #0]
 801b1d4:	61fb      	str	r3, [r7, #28]
 801b1d6:	e020      	b.n	801b21a <gen_numname+0x66>
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	1c9a      	adds	r2, r3, #2
 801b1dc:	607a      	str	r2, [r7, #4]
 801b1de:	881b      	ldrh	r3, [r3, #0]
 801b1e0:	847b      	strh	r3, [r7, #34]	; 0x22
 801b1e2:	2300      	movs	r3, #0
 801b1e4:	62bb      	str	r3, [r7, #40]	; 0x28
 801b1e6:	e015      	b.n	801b214 <gen_numname+0x60>
 801b1e8:	69fb      	ldr	r3, [r7, #28]
 801b1ea:	005a      	lsls	r2, r3, #1
 801b1ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b1ee:	f003 0301 	and.w	r3, r3, #1
 801b1f2:	4413      	add	r3, r2
 801b1f4:	61fb      	str	r3, [r7, #28]
 801b1f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b1f8:	085b      	lsrs	r3, r3, #1
 801b1fa:	847b      	strh	r3, [r7, #34]	; 0x22
 801b1fc:	69fb      	ldr	r3, [r7, #28]
 801b1fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b202:	2b00      	cmp	r3, #0
 801b204:	d003      	beq.n	801b20e <gen_numname+0x5a>
 801b206:	69fa      	ldr	r2, [r7, #28]
 801b208:	4b31      	ldr	r3, [pc, #196]	; (801b2d0 <gen_numname+0x11c>)
 801b20a:	4053      	eors	r3, r2
 801b20c:	61fb      	str	r3, [r7, #28]
 801b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b210:	3301      	adds	r3, #1
 801b212:	62bb      	str	r3, [r7, #40]	; 0x28
 801b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b216:	2b0f      	cmp	r3, #15
 801b218:	d9e6      	bls.n	801b1e8 <gen_numname+0x34>
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	881b      	ldrh	r3, [r3, #0]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d1da      	bne.n	801b1d8 <gen_numname+0x24>
 801b222:	69fb      	ldr	r3, [r7, #28]
 801b224:	603b      	str	r3, [r7, #0]
 801b226:	2307      	movs	r3, #7
 801b228:	62bb      	str	r3, [r7, #40]	; 0x28
 801b22a:	683b      	ldr	r3, [r7, #0]
 801b22c:	b2db      	uxtb	r3, r3
 801b22e:	f003 030f 	and.w	r3, r3, #15
 801b232:	b2db      	uxtb	r3, r3
 801b234:	3330      	adds	r3, #48	; 0x30
 801b236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b23a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b23e:	2b39      	cmp	r3, #57	; 0x39
 801b240:	d904      	bls.n	801b24c <gen_numname+0x98>
 801b242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b246:	3307      	adds	r3, #7
 801b248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b24e:	1e5a      	subs	r2, r3, #1
 801b250:	62ba      	str	r2, [r7, #40]	; 0x28
 801b252:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b256:	4413      	add	r3, r2
 801b258:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b25c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 801b260:	683b      	ldr	r3, [r7, #0]
 801b262:	091b      	lsrs	r3, r3, #4
 801b264:	603b      	str	r3, [r7, #0]
 801b266:	683b      	ldr	r3, [r7, #0]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d1de      	bne.n	801b22a <gen_numname+0x76>
 801b26c:	f107 0214 	add.w	r2, r7, #20
 801b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b272:	4413      	add	r3, r2
 801b274:	227e      	movs	r2, #126	; 0x7e
 801b276:	701a      	strb	r2, [r3, #0]
 801b278:	2300      	movs	r3, #0
 801b27a:	627b      	str	r3, [r7, #36]	; 0x24
 801b27c:	e002      	b.n	801b284 <gen_numname+0xd0>
 801b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b280:	3301      	adds	r3, #1
 801b282:	627b      	str	r3, [r7, #36]	; 0x24
 801b284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b288:	429a      	cmp	r2, r3
 801b28a:	d205      	bcs.n	801b298 <gen_numname+0xe4>
 801b28c:	68fa      	ldr	r2, [r7, #12]
 801b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b290:	4413      	add	r3, r2
 801b292:	781b      	ldrb	r3, [r3, #0]
 801b294:	2b20      	cmp	r3, #32
 801b296:	d1f2      	bne.n	801b27e <gen_numname+0xca>
 801b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b29a:	2b07      	cmp	r3, #7
 801b29c:	d808      	bhi.n	801b2b0 <gen_numname+0xfc>
 801b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2a0:	1c5a      	adds	r2, r3, #1
 801b2a2:	62ba      	str	r2, [r7, #40]	; 0x28
 801b2a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b2a8:	4413      	add	r3, r2
 801b2aa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801b2ae:	e000      	b.n	801b2b2 <gen_numname+0xfe>
 801b2b0:	2120      	movs	r1, #32
 801b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2b4:	1c5a      	adds	r2, r3, #1
 801b2b6:	627a      	str	r2, [r7, #36]	; 0x24
 801b2b8:	68fa      	ldr	r2, [r7, #12]
 801b2ba:	4413      	add	r3, r2
 801b2bc:	460a      	mov	r2, r1
 801b2be:	701a      	strb	r2, [r3, #0]
 801b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2c2:	2b07      	cmp	r3, #7
 801b2c4:	d9e8      	bls.n	801b298 <gen_numname+0xe4>
 801b2c6:	bf00      	nop
 801b2c8:	3730      	adds	r7, #48	; 0x30
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bd80      	pop	{r7, pc}
 801b2ce:	bf00      	nop
 801b2d0:	00011021 	.word	0x00011021

0801b2d4 <sum_sfn>:
 801b2d4:	b480      	push	{r7}
 801b2d6:	b085      	sub	sp, #20
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]
 801b2dc:	2300      	movs	r3, #0
 801b2de:	73fb      	strb	r3, [r7, #15]
 801b2e0:	230b      	movs	r3, #11
 801b2e2:	60bb      	str	r3, [r7, #8]
 801b2e4:	7bfb      	ldrb	r3, [r7, #15]
 801b2e6:	b2da      	uxtb	r2, r3
 801b2e8:	0852      	lsrs	r2, r2, #1
 801b2ea:	01db      	lsls	r3, r3, #7
 801b2ec:	4313      	orrs	r3, r2
 801b2ee:	b2da      	uxtb	r2, r3
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	1c59      	adds	r1, r3, #1
 801b2f4:	6079      	str	r1, [r7, #4]
 801b2f6:	781b      	ldrb	r3, [r3, #0]
 801b2f8:	4413      	add	r3, r2
 801b2fa:	73fb      	strb	r3, [r7, #15]
 801b2fc:	68bb      	ldr	r3, [r7, #8]
 801b2fe:	3b01      	subs	r3, #1
 801b300:	60bb      	str	r3, [r7, #8]
 801b302:	68bb      	ldr	r3, [r7, #8]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d1ed      	bne.n	801b2e4 <sum_sfn+0x10>
 801b308:	7bfb      	ldrb	r3, [r7, #15]
 801b30a:	4618      	mov	r0, r3
 801b30c:	3714      	adds	r7, #20
 801b30e:	46bd      	mov	sp, r7
 801b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b314:	4770      	bx	lr

0801b316 <dir_read>:
 801b316:	b580      	push	{r7, lr}
 801b318:	b086      	sub	sp, #24
 801b31a:	af00      	add	r7, sp, #0
 801b31c:	6078      	str	r0, [r7, #4]
 801b31e:	6039      	str	r1, [r7, #0]
 801b320:	2304      	movs	r3, #4
 801b322:	75fb      	strb	r3, [r7, #23]
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	613b      	str	r3, [r7, #16]
 801b32a:	23ff      	movs	r3, #255	; 0xff
 801b32c:	757b      	strb	r3, [r7, #21]
 801b32e:	23ff      	movs	r3, #255	; 0xff
 801b330:	753b      	strb	r3, [r7, #20]
 801b332:	e081      	b.n	801b438 <dir_read+0x122>
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	69db      	ldr	r3, [r3, #28]
 801b338:	4619      	mov	r1, r3
 801b33a:	6938      	ldr	r0, [r7, #16]
 801b33c:	f7ff f840 	bl	801a3c0 <move_window>
 801b340:	4603      	mov	r3, r0
 801b342:	75fb      	strb	r3, [r7, #23]
 801b344:	7dfb      	ldrb	r3, [r7, #23]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d17c      	bne.n	801b444 <dir_read+0x12e>
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	6a1b      	ldr	r3, [r3, #32]
 801b34e:	781b      	ldrb	r3, [r3, #0]
 801b350:	75bb      	strb	r3, [r7, #22]
 801b352:	7dbb      	ldrb	r3, [r7, #22]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d102      	bne.n	801b35e <dir_read+0x48>
 801b358:	2304      	movs	r3, #4
 801b35a:	75fb      	strb	r3, [r7, #23]
 801b35c:	e077      	b.n	801b44e <dir_read+0x138>
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	6a1b      	ldr	r3, [r3, #32]
 801b362:	330b      	adds	r3, #11
 801b364:	781b      	ldrb	r3, [r3, #0]
 801b366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b36a:	73fb      	strb	r3, [r7, #15]
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	7bfa      	ldrb	r2, [r7, #15]
 801b370:	719a      	strb	r2, [r3, #6]
 801b372:	7dbb      	ldrb	r3, [r7, #22]
 801b374:	2be5      	cmp	r3, #229	; 0xe5
 801b376:	d00e      	beq.n	801b396 <dir_read+0x80>
 801b378:	7dbb      	ldrb	r3, [r7, #22]
 801b37a:	2b2e      	cmp	r3, #46	; 0x2e
 801b37c:	d00b      	beq.n	801b396 <dir_read+0x80>
 801b37e:	7bfb      	ldrb	r3, [r7, #15]
 801b380:	f023 0320 	bic.w	r3, r3, #32
 801b384:	2b08      	cmp	r3, #8
 801b386:	bf0c      	ite	eq
 801b388:	2301      	moveq	r3, #1
 801b38a:	2300      	movne	r3, #0
 801b38c:	b2db      	uxtb	r3, r3
 801b38e:	461a      	mov	r2, r3
 801b390:	683b      	ldr	r3, [r7, #0]
 801b392:	4293      	cmp	r3, r2
 801b394:	d002      	beq.n	801b39c <dir_read+0x86>
 801b396:	23ff      	movs	r3, #255	; 0xff
 801b398:	757b      	strb	r3, [r7, #21]
 801b39a:	e044      	b.n	801b426 <dir_read+0x110>
 801b39c:	7bfb      	ldrb	r3, [r7, #15]
 801b39e:	2b0f      	cmp	r3, #15
 801b3a0:	d12f      	bne.n	801b402 <dir_read+0xec>
 801b3a2:	7dbb      	ldrb	r3, [r7, #22]
 801b3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d00d      	beq.n	801b3c8 <dir_read+0xb2>
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	6a1b      	ldr	r3, [r3, #32]
 801b3b0:	7b5b      	ldrb	r3, [r3, #13]
 801b3b2:	753b      	strb	r3, [r7, #20]
 801b3b4:	7dbb      	ldrb	r3, [r7, #22]
 801b3b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b3ba:	75bb      	strb	r3, [r7, #22]
 801b3bc:	7dbb      	ldrb	r3, [r7, #22]
 801b3be:	757b      	strb	r3, [r7, #21]
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	695a      	ldr	r2, [r3, #20]
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	631a      	str	r2, [r3, #48]	; 0x30
 801b3c8:	7dba      	ldrb	r2, [r7, #22]
 801b3ca:	7d7b      	ldrb	r3, [r7, #21]
 801b3cc:	429a      	cmp	r2, r3
 801b3ce:	d115      	bne.n	801b3fc <dir_read+0xe6>
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	6a1b      	ldr	r3, [r3, #32]
 801b3d4:	330d      	adds	r3, #13
 801b3d6:	781b      	ldrb	r3, [r3, #0]
 801b3d8:	7d3a      	ldrb	r2, [r7, #20]
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d10e      	bne.n	801b3fc <dir_read+0xe6>
 801b3de:	693b      	ldr	r3, [r7, #16]
 801b3e0:	691a      	ldr	r2, [r3, #16]
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	6a1b      	ldr	r3, [r3, #32]
 801b3e6:	4619      	mov	r1, r3
 801b3e8:	4610      	mov	r0, r2
 801b3ea:	f7ff fe17 	bl	801b01c <pick_lfn>
 801b3ee:	4603      	mov	r3, r0
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d003      	beq.n	801b3fc <dir_read+0xe6>
 801b3f4:	7d7b      	ldrb	r3, [r7, #21]
 801b3f6:	3b01      	subs	r3, #1
 801b3f8:	b2db      	uxtb	r3, r3
 801b3fa:	e000      	b.n	801b3fe <dir_read+0xe8>
 801b3fc:	23ff      	movs	r3, #255	; 0xff
 801b3fe:	757b      	strb	r3, [r7, #21]
 801b400:	e011      	b.n	801b426 <dir_read+0x110>
 801b402:	7d7b      	ldrb	r3, [r7, #21]
 801b404:	2b00      	cmp	r3, #0
 801b406:	d109      	bne.n	801b41c <dir_read+0x106>
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	6a1b      	ldr	r3, [r3, #32]
 801b40c:	4618      	mov	r0, r3
 801b40e:	f7ff ff61 	bl	801b2d4 <sum_sfn>
 801b412:	4603      	mov	r3, r0
 801b414:	461a      	mov	r2, r3
 801b416:	7d3b      	ldrb	r3, [r7, #20]
 801b418:	4293      	cmp	r3, r2
 801b41a:	d015      	beq.n	801b448 <dir_read+0x132>
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	f04f 32ff 	mov.w	r2, #4294967295
 801b422:	631a      	str	r2, [r3, #48]	; 0x30
 801b424:	e010      	b.n	801b448 <dir_read+0x132>
 801b426:	2100      	movs	r1, #0
 801b428:	6878      	ldr	r0, [r7, #4]
 801b42a:	f7ff fc2b 	bl	801ac84 <dir_next>
 801b42e:	4603      	mov	r3, r0
 801b430:	75fb      	strb	r3, [r7, #23]
 801b432:	7dfb      	ldrb	r3, [r7, #23]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d109      	bne.n	801b44c <dir_read+0x136>
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	69db      	ldr	r3, [r3, #28]
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	f47f af79 	bne.w	801b334 <dir_read+0x1e>
 801b442:	e004      	b.n	801b44e <dir_read+0x138>
 801b444:	bf00      	nop
 801b446:	e002      	b.n	801b44e <dir_read+0x138>
 801b448:	bf00      	nop
 801b44a:	e000      	b.n	801b44e <dir_read+0x138>
 801b44c:	bf00      	nop
 801b44e:	7dfb      	ldrb	r3, [r7, #23]
 801b450:	2b00      	cmp	r3, #0
 801b452:	d002      	beq.n	801b45a <dir_read+0x144>
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	2200      	movs	r2, #0
 801b458:	61da      	str	r2, [r3, #28]
 801b45a:	7dfb      	ldrb	r3, [r7, #23]
 801b45c:	4618      	mov	r0, r3
 801b45e:	3718      	adds	r7, #24
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}

0801b464 <dir_find>:
 801b464:	b580      	push	{r7, lr}
 801b466:	b086      	sub	sp, #24
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	613b      	str	r3, [r7, #16]
 801b472:	2100      	movs	r1, #0
 801b474:	6878      	ldr	r0, [r7, #4]
 801b476:	f7ff fb7c 	bl	801ab72 <dir_sdi>
 801b47a:	4603      	mov	r3, r0
 801b47c:	75fb      	strb	r3, [r7, #23]
 801b47e:	7dfb      	ldrb	r3, [r7, #23]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d001      	beq.n	801b488 <dir_find+0x24>
 801b484:	7dfb      	ldrb	r3, [r7, #23]
 801b486:	e0a9      	b.n	801b5dc <dir_find+0x178>
 801b488:	23ff      	movs	r3, #255	; 0xff
 801b48a:	753b      	strb	r3, [r7, #20]
 801b48c:	7d3b      	ldrb	r3, [r7, #20]
 801b48e:	757b      	strb	r3, [r7, #21]
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	f04f 32ff 	mov.w	r2, #4294967295
 801b496:	631a      	str	r2, [r3, #48]	; 0x30
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	69db      	ldr	r3, [r3, #28]
 801b49c:	4619      	mov	r1, r3
 801b49e:	6938      	ldr	r0, [r7, #16]
 801b4a0:	f7fe ff8e 	bl	801a3c0 <move_window>
 801b4a4:	4603      	mov	r3, r0
 801b4a6:	75fb      	strb	r3, [r7, #23]
 801b4a8:	7dfb      	ldrb	r3, [r7, #23]
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	f040 8090 	bne.w	801b5d0 <dir_find+0x16c>
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	6a1b      	ldr	r3, [r3, #32]
 801b4b4:	781b      	ldrb	r3, [r3, #0]
 801b4b6:	75bb      	strb	r3, [r7, #22]
 801b4b8:	7dbb      	ldrb	r3, [r7, #22]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d102      	bne.n	801b4c4 <dir_find+0x60>
 801b4be:	2304      	movs	r3, #4
 801b4c0:	75fb      	strb	r3, [r7, #23]
 801b4c2:	e08a      	b.n	801b5da <dir_find+0x176>
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	6a1b      	ldr	r3, [r3, #32]
 801b4c8:	330b      	adds	r3, #11
 801b4ca:	781b      	ldrb	r3, [r3, #0]
 801b4cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b4d0:	73fb      	strb	r3, [r7, #15]
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	7bfa      	ldrb	r2, [r7, #15]
 801b4d6:	719a      	strb	r2, [r3, #6]
 801b4d8:	7dbb      	ldrb	r3, [r7, #22]
 801b4da:	2be5      	cmp	r3, #229	; 0xe5
 801b4dc:	d007      	beq.n	801b4ee <dir_find+0x8a>
 801b4de:	7bfb      	ldrb	r3, [r7, #15]
 801b4e0:	f003 0308 	and.w	r3, r3, #8
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d009      	beq.n	801b4fc <dir_find+0x98>
 801b4e8:	7bfb      	ldrb	r3, [r7, #15]
 801b4ea:	2b0f      	cmp	r3, #15
 801b4ec:	d006      	beq.n	801b4fc <dir_find+0x98>
 801b4ee:	23ff      	movs	r3, #255	; 0xff
 801b4f0:	757b      	strb	r3, [r7, #21]
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	f04f 32ff 	mov.w	r2, #4294967295
 801b4f8:	631a      	str	r2, [r3, #48]	; 0x30
 801b4fa:	e05e      	b.n	801b5ba <dir_find+0x156>
 801b4fc:	7bfb      	ldrb	r3, [r7, #15]
 801b4fe:	2b0f      	cmp	r3, #15
 801b500:	d136      	bne.n	801b570 <dir_find+0x10c>
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d154      	bne.n	801b5ba <dir_find+0x156>
 801b510:	7dbb      	ldrb	r3, [r7, #22]
 801b512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b516:	2b00      	cmp	r3, #0
 801b518:	d00d      	beq.n	801b536 <dir_find+0xd2>
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	6a1b      	ldr	r3, [r3, #32]
 801b51e:	7b5b      	ldrb	r3, [r3, #13]
 801b520:	753b      	strb	r3, [r7, #20]
 801b522:	7dbb      	ldrb	r3, [r7, #22]
 801b524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b528:	75bb      	strb	r3, [r7, #22]
 801b52a:	7dbb      	ldrb	r3, [r7, #22]
 801b52c:	757b      	strb	r3, [r7, #21]
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	695a      	ldr	r2, [r3, #20]
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	631a      	str	r2, [r3, #48]	; 0x30
 801b536:	7dba      	ldrb	r2, [r7, #22]
 801b538:	7d7b      	ldrb	r3, [r7, #21]
 801b53a:	429a      	cmp	r2, r3
 801b53c:	d115      	bne.n	801b56a <dir_find+0x106>
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	6a1b      	ldr	r3, [r3, #32]
 801b542:	330d      	adds	r3, #13
 801b544:	781b      	ldrb	r3, [r3, #0]
 801b546:	7d3a      	ldrb	r2, [r7, #20]
 801b548:	429a      	cmp	r2, r3
 801b54a:	d10e      	bne.n	801b56a <dir_find+0x106>
 801b54c:	693b      	ldr	r3, [r7, #16]
 801b54e:	691a      	ldr	r2, [r3, #16]
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	6a1b      	ldr	r3, [r3, #32]
 801b554:	4619      	mov	r1, r3
 801b556:	4610      	mov	r0, r2
 801b558:	f7ff fcf0 	bl	801af3c <cmp_lfn>
 801b55c:	4603      	mov	r3, r0
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d003      	beq.n	801b56a <dir_find+0x106>
 801b562:	7d7b      	ldrb	r3, [r7, #21]
 801b564:	3b01      	subs	r3, #1
 801b566:	b2db      	uxtb	r3, r3
 801b568:	e000      	b.n	801b56c <dir_find+0x108>
 801b56a:	23ff      	movs	r3, #255	; 0xff
 801b56c:	757b      	strb	r3, [r7, #21]
 801b56e:	e024      	b.n	801b5ba <dir_find+0x156>
 801b570:	7d7b      	ldrb	r3, [r7, #21]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d109      	bne.n	801b58a <dir_find+0x126>
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	6a1b      	ldr	r3, [r3, #32]
 801b57a:	4618      	mov	r0, r3
 801b57c:	f7ff feaa 	bl	801b2d4 <sum_sfn>
 801b580:	4603      	mov	r3, r0
 801b582:	461a      	mov	r2, r3
 801b584:	7d3b      	ldrb	r3, [r7, #20]
 801b586:	4293      	cmp	r3, r2
 801b588:	d024      	beq.n	801b5d4 <dir_find+0x170>
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b590:	f003 0301 	and.w	r3, r3, #1
 801b594:	2b00      	cmp	r3, #0
 801b596:	d10a      	bne.n	801b5ae <dir_find+0x14a>
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	6a18      	ldr	r0, [r3, #32]
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	3324      	adds	r3, #36	; 0x24
 801b5a0:	220b      	movs	r2, #11
 801b5a2:	4619      	mov	r1, r3
 801b5a4:	f7fe fd19 	bl	8019fda <mem_cmp>
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d014      	beq.n	801b5d8 <dir_find+0x174>
 801b5ae:	23ff      	movs	r3, #255	; 0xff
 801b5b0:	757b      	strb	r3, [r7, #21]
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	f04f 32ff 	mov.w	r2, #4294967295
 801b5b8:	631a      	str	r2, [r3, #48]	; 0x30
 801b5ba:	2100      	movs	r1, #0
 801b5bc:	6878      	ldr	r0, [r7, #4]
 801b5be:	f7ff fb61 	bl	801ac84 <dir_next>
 801b5c2:	4603      	mov	r3, r0
 801b5c4:	75fb      	strb	r3, [r7, #23]
 801b5c6:	7dfb      	ldrb	r3, [r7, #23]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	f43f af65 	beq.w	801b498 <dir_find+0x34>
 801b5ce:	e004      	b.n	801b5da <dir_find+0x176>
 801b5d0:	bf00      	nop
 801b5d2:	e002      	b.n	801b5da <dir_find+0x176>
 801b5d4:	bf00      	nop
 801b5d6:	e000      	b.n	801b5da <dir_find+0x176>
 801b5d8:	bf00      	nop
 801b5da:	7dfb      	ldrb	r3, [r7, #23]
 801b5dc:	4618      	mov	r0, r3
 801b5de:	3718      	adds	r7, #24
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bd80      	pop	{r7, pc}

0801b5e4 <dir_register>:
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b08c      	sub	sp, #48	; 0x30
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	681b      	ldr	r3, [r3, #0]
 801b5f0:	61fb      	str	r3, [r7, #28]
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b5f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d001      	beq.n	801b604 <dir_register+0x20>
 801b600:	2306      	movs	r3, #6
 801b602:	e0e0      	b.n	801b7c6 <dir_register+0x1e2>
 801b604:	2300      	movs	r3, #0
 801b606:	627b      	str	r3, [r7, #36]	; 0x24
 801b608:	e002      	b.n	801b610 <dir_register+0x2c>
 801b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b60c:	3301      	adds	r3, #1
 801b60e:	627b      	str	r3, [r7, #36]	; 0x24
 801b610:	69fb      	ldr	r3, [r7, #28]
 801b612:	691a      	ldr	r2, [r3, #16]
 801b614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b616:	005b      	lsls	r3, r3, #1
 801b618:	4413      	add	r3, r2
 801b61a:	881b      	ldrh	r3, [r3, #0]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d1f4      	bne.n	801b60a <dir_register+0x26>
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801b626:	f107 030c 	add.w	r3, r7, #12
 801b62a:	220c      	movs	r2, #12
 801b62c:	4618      	mov	r0, r3
 801b62e:	f7fe fc99 	bl	8019f64 <mem_cpy>
 801b632:	7dfb      	ldrb	r3, [r7, #23]
 801b634:	f003 0301 	and.w	r3, r3, #1
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d032      	beq.n	801b6a2 <dir_register+0xbe>
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	2240      	movs	r2, #64	; 0x40
 801b640:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801b644:	2301      	movs	r3, #1
 801b646:	62bb      	str	r3, [r7, #40]	; 0x28
 801b648:	e016      	b.n	801b678 <dir_register+0x94>
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801b650:	69fb      	ldr	r3, [r7, #28]
 801b652:	691a      	ldr	r2, [r3, #16]
 801b654:	f107 010c 	add.w	r1, r7, #12
 801b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b65a:	f7ff fdab 	bl	801b1b4 <gen_numname>
 801b65e:	6878      	ldr	r0, [r7, #4]
 801b660:	f7ff ff00 	bl	801b464 <dir_find>
 801b664:	4603      	mov	r3, r0
 801b666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b66a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d106      	bne.n	801b680 <dir_register+0x9c>
 801b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b674:	3301      	adds	r3, #1
 801b676:	62bb      	str	r3, [r7, #40]	; 0x28
 801b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b67a:	2b63      	cmp	r3, #99	; 0x63
 801b67c:	d9e5      	bls.n	801b64a <dir_register+0x66>
 801b67e:	e000      	b.n	801b682 <dir_register+0x9e>
 801b680:	bf00      	nop
 801b682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b684:	2b64      	cmp	r3, #100	; 0x64
 801b686:	d101      	bne.n	801b68c <dir_register+0xa8>
 801b688:	2307      	movs	r3, #7
 801b68a:	e09c      	b.n	801b7c6 <dir_register+0x1e2>
 801b68c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b690:	2b04      	cmp	r3, #4
 801b692:	d002      	beq.n	801b69a <dir_register+0xb6>
 801b694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b698:	e095      	b.n	801b7c6 <dir_register+0x1e2>
 801b69a:	7dfa      	ldrb	r2, [r7, #23]
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801b6a2:	7dfb      	ldrb	r3, [r7, #23]
 801b6a4:	f003 0302 	and.w	r3, r3, #2
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d007      	beq.n	801b6bc <dir_register+0xd8>
 801b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ae:	330c      	adds	r3, #12
 801b6b0:	4a47      	ldr	r2, [pc, #284]	; (801b7d0 <dir_register+0x1ec>)
 801b6b2:	fba2 2303 	umull	r2, r3, r2, r3
 801b6b6:	089b      	lsrs	r3, r3, #2
 801b6b8:	3301      	adds	r3, #1
 801b6ba:	e000      	b.n	801b6be <dir_register+0xda>
 801b6bc:	2301      	movs	r3, #1
 801b6be:	623b      	str	r3, [r7, #32]
 801b6c0:	6a39      	ldr	r1, [r7, #32]
 801b6c2:	6878      	ldr	r0, [r7, #4]
 801b6c4:	f7ff fbb4 	bl	801ae30 <dir_alloc>
 801b6c8:	4603      	mov	r3, r0
 801b6ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b6ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d148      	bne.n	801b768 <dir_register+0x184>
 801b6d6:	6a3b      	ldr	r3, [r7, #32]
 801b6d8:	3b01      	subs	r3, #1
 801b6da:	623b      	str	r3, [r7, #32]
 801b6dc:	6a3b      	ldr	r3, [r7, #32]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d042      	beq.n	801b768 <dir_register+0x184>
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	695a      	ldr	r2, [r3, #20]
 801b6e6:	6a3b      	ldr	r3, [r7, #32]
 801b6e8:	015b      	lsls	r3, r3, #5
 801b6ea:	1ad3      	subs	r3, r2, r3
 801b6ec:	4619      	mov	r1, r3
 801b6ee:	6878      	ldr	r0, [r7, #4]
 801b6f0:	f7ff fa3f 	bl	801ab72 <dir_sdi>
 801b6f4:	4603      	mov	r3, r0
 801b6f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b6fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d132      	bne.n	801b768 <dir_register+0x184>
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	3324      	adds	r3, #36	; 0x24
 801b706:	4618      	mov	r0, r3
 801b708:	f7ff fde4 	bl	801b2d4 <sum_sfn>
 801b70c:	4603      	mov	r3, r0
 801b70e:	76fb      	strb	r3, [r7, #27]
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	69db      	ldr	r3, [r3, #28]
 801b714:	4619      	mov	r1, r3
 801b716:	69f8      	ldr	r0, [r7, #28]
 801b718:	f7fe fe52 	bl	801a3c0 <move_window>
 801b71c:	4603      	mov	r3, r0
 801b71e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b726:	2b00      	cmp	r3, #0
 801b728:	d11d      	bne.n	801b766 <dir_register+0x182>
 801b72a:	69fb      	ldr	r3, [r7, #28]
 801b72c:	6918      	ldr	r0, [r3, #16]
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	6a19      	ldr	r1, [r3, #32]
 801b732:	6a3b      	ldr	r3, [r7, #32]
 801b734:	b2da      	uxtb	r2, r3
 801b736:	7efb      	ldrb	r3, [r7, #27]
 801b738:	f7ff fcd4 	bl	801b0e4 <put_lfn>
 801b73c:	69fb      	ldr	r3, [r7, #28]
 801b73e:	2201      	movs	r2, #1
 801b740:	70da      	strb	r2, [r3, #3]
 801b742:	2100      	movs	r1, #0
 801b744:	6878      	ldr	r0, [r7, #4]
 801b746:	f7ff fa9d 	bl	801ac84 <dir_next>
 801b74a:	4603      	mov	r3, r0
 801b74c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b754:	2b00      	cmp	r3, #0
 801b756:	d107      	bne.n	801b768 <dir_register+0x184>
 801b758:	6a3b      	ldr	r3, [r7, #32]
 801b75a:	3b01      	subs	r3, #1
 801b75c:	623b      	str	r3, [r7, #32]
 801b75e:	6a3b      	ldr	r3, [r7, #32]
 801b760:	2b00      	cmp	r3, #0
 801b762:	d1d5      	bne.n	801b710 <dir_register+0x12c>
 801b764:	e000      	b.n	801b768 <dir_register+0x184>
 801b766:	bf00      	nop
 801b768:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d128      	bne.n	801b7c2 <dir_register+0x1de>
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	69db      	ldr	r3, [r3, #28]
 801b774:	4619      	mov	r1, r3
 801b776:	69f8      	ldr	r0, [r7, #28]
 801b778:	f7fe fe22 	bl	801a3c0 <move_window>
 801b77c:	4603      	mov	r3, r0
 801b77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b786:	2b00      	cmp	r3, #0
 801b788:	d11b      	bne.n	801b7c2 <dir_register+0x1de>
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	6a1b      	ldr	r3, [r3, #32]
 801b78e:	2220      	movs	r2, #32
 801b790:	2100      	movs	r1, #0
 801b792:	4618      	mov	r0, r3
 801b794:	f7fe fc07 	bl	8019fa6 <mem_set>
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	6a18      	ldr	r0, [r3, #32]
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	3324      	adds	r3, #36	; 0x24
 801b7a0:	220b      	movs	r2, #11
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	f7fe fbde 	bl	8019f64 <mem_cpy>
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	6a1b      	ldr	r3, [r3, #32]
 801b7b2:	330c      	adds	r3, #12
 801b7b4:	f002 0218 	and.w	r2, r2, #24
 801b7b8:	b2d2      	uxtb	r2, r2
 801b7ba:	701a      	strb	r2, [r3, #0]
 801b7bc:	69fb      	ldr	r3, [r7, #28]
 801b7be:	2201      	movs	r2, #1
 801b7c0:	70da      	strb	r2, [r3, #3]
 801b7c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	3730      	adds	r7, #48	; 0x30
 801b7ca:	46bd      	mov	sp, r7
 801b7cc:	bd80      	pop	{r7, pc}
 801b7ce:	bf00      	nop
 801b7d0:	4ec4ec4f 	.word	0x4ec4ec4f

0801b7d4 <dir_remove>:
 801b7d4:	b580      	push	{r7, lr}
 801b7d6:	b086      	sub	sp, #24
 801b7d8:	af00      	add	r7, sp, #0
 801b7da:	6078      	str	r0, [r7, #4]
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	613b      	str	r3, [r7, #16]
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	695b      	ldr	r3, [r3, #20]
 801b7e6:	60fb      	str	r3, [r7, #12]
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7f0:	d007      	beq.n	801b802 <dir_remove+0x2e>
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7f6:	4619      	mov	r1, r3
 801b7f8:	6878      	ldr	r0, [r7, #4]
 801b7fa:	f7ff f9ba 	bl	801ab72 <dir_sdi>
 801b7fe:	4603      	mov	r3, r0
 801b800:	e000      	b.n	801b804 <dir_remove+0x30>
 801b802:	2300      	movs	r3, #0
 801b804:	75fb      	strb	r3, [r7, #23]
 801b806:	7dfb      	ldrb	r3, [r7, #23]
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d128      	bne.n	801b85e <dir_remove+0x8a>
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	69db      	ldr	r3, [r3, #28]
 801b810:	4619      	mov	r1, r3
 801b812:	6938      	ldr	r0, [r7, #16]
 801b814:	f7fe fdd4 	bl	801a3c0 <move_window>
 801b818:	4603      	mov	r3, r0
 801b81a:	75fb      	strb	r3, [r7, #23]
 801b81c:	7dfb      	ldrb	r3, [r7, #23]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d115      	bne.n	801b84e <dir_remove+0x7a>
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	6a1b      	ldr	r3, [r3, #32]
 801b826:	22e5      	movs	r2, #229	; 0xe5
 801b828:	701a      	strb	r2, [r3, #0]
 801b82a:	693b      	ldr	r3, [r7, #16]
 801b82c:	2201      	movs	r2, #1
 801b82e:	70da      	strb	r2, [r3, #3]
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	695b      	ldr	r3, [r3, #20]
 801b834:	68fa      	ldr	r2, [r7, #12]
 801b836:	429a      	cmp	r2, r3
 801b838:	d90b      	bls.n	801b852 <dir_remove+0x7e>
 801b83a:	2100      	movs	r1, #0
 801b83c:	6878      	ldr	r0, [r7, #4]
 801b83e:	f7ff fa21 	bl	801ac84 <dir_next>
 801b842:	4603      	mov	r3, r0
 801b844:	75fb      	strb	r3, [r7, #23]
 801b846:	7dfb      	ldrb	r3, [r7, #23]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d0df      	beq.n	801b80c <dir_remove+0x38>
 801b84c:	e002      	b.n	801b854 <dir_remove+0x80>
 801b84e:	bf00      	nop
 801b850:	e000      	b.n	801b854 <dir_remove+0x80>
 801b852:	bf00      	nop
 801b854:	7dfb      	ldrb	r3, [r7, #23]
 801b856:	2b04      	cmp	r3, #4
 801b858:	d101      	bne.n	801b85e <dir_remove+0x8a>
 801b85a:	2302      	movs	r3, #2
 801b85c:	75fb      	strb	r3, [r7, #23]
 801b85e:	7dfb      	ldrb	r3, [r7, #23]
 801b860:	4618      	mov	r0, r3
 801b862:	3718      	adds	r7, #24
 801b864:	46bd      	mov	sp, r7
 801b866:	bd80      	pop	{r7, pc}

0801b868 <get_fileinfo>:
 801b868:	b580      	push	{r7, lr}
 801b86a:	b088      	sub	sp, #32
 801b86c:	af00      	add	r7, sp, #0
 801b86e:	6078      	str	r0, [r7, #4]
 801b870:	6039      	str	r1, [r7, #0]
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	613b      	str	r3, [r7, #16]
 801b878:	683b      	ldr	r3, [r7, #0]
 801b87a:	2200      	movs	r2, #0
 801b87c:	759a      	strb	r2, [r3, #22]
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	69db      	ldr	r3, [r3, #28]
 801b882:	2b00      	cmp	r3, #0
 801b884:	f000 80c9 	beq.w	801ba1a <get_fileinfo+0x1b2>
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b890:	d032      	beq.n	801b8f8 <get_fileinfo+0x90>
 801b892:	2300      	movs	r3, #0
 801b894:	61bb      	str	r3, [r7, #24]
 801b896:	69bb      	ldr	r3, [r7, #24]
 801b898:	61fb      	str	r3, [r7, #28]
 801b89a:	e01b      	b.n	801b8d4 <get_fileinfo+0x6c>
 801b89c:	89fb      	ldrh	r3, [r7, #14]
 801b89e:	2100      	movs	r1, #0
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f002 f81f 	bl	801d8e4 <ff_convert>
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	81fb      	strh	r3, [r7, #14]
 801b8aa:	89fb      	ldrh	r3, [r7, #14]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d102      	bne.n	801b8b6 <get_fileinfo+0x4e>
 801b8b0:	2300      	movs	r3, #0
 801b8b2:	61fb      	str	r3, [r7, #28]
 801b8b4:	e01a      	b.n	801b8ec <get_fileinfo+0x84>
 801b8b6:	69fb      	ldr	r3, [r7, #28]
 801b8b8:	2bfe      	cmp	r3, #254	; 0xfe
 801b8ba:	d902      	bls.n	801b8c2 <get_fileinfo+0x5a>
 801b8bc:	2300      	movs	r3, #0
 801b8be:	61fb      	str	r3, [r7, #28]
 801b8c0:	e014      	b.n	801b8ec <get_fileinfo+0x84>
 801b8c2:	69fb      	ldr	r3, [r7, #28]
 801b8c4:	1c5a      	adds	r2, r3, #1
 801b8c6:	61fa      	str	r2, [r7, #28]
 801b8c8:	89fa      	ldrh	r2, [r7, #14]
 801b8ca:	b2d1      	uxtb	r1, r2
 801b8cc:	683a      	ldr	r2, [r7, #0]
 801b8ce:	4413      	add	r3, r2
 801b8d0:	460a      	mov	r2, r1
 801b8d2:	759a      	strb	r2, [r3, #22]
 801b8d4:	693b      	ldr	r3, [r7, #16]
 801b8d6:	691a      	ldr	r2, [r3, #16]
 801b8d8:	69bb      	ldr	r3, [r7, #24]
 801b8da:	1c59      	adds	r1, r3, #1
 801b8dc:	61b9      	str	r1, [r7, #24]
 801b8de:	005b      	lsls	r3, r3, #1
 801b8e0:	4413      	add	r3, r2
 801b8e2:	881b      	ldrh	r3, [r3, #0]
 801b8e4:	81fb      	strh	r3, [r7, #14]
 801b8e6:	89fb      	ldrh	r3, [r7, #14]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d1d7      	bne.n	801b89c <get_fileinfo+0x34>
 801b8ec:	683a      	ldr	r2, [r7, #0]
 801b8ee:	69fb      	ldr	r3, [r7, #28]
 801b8f0:	4413      	add	r3, r2
 801b8f2:	3316      	adds	r3, #22
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	701a      	strb	r2, [r3, #0]
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	61bb      	str	r3, [r7, #24]
 801b8fc:	69bb      	ldr	r3, [r7, #24]
 801b8fe:	61fb      	str	r3, [r7, #28]
 801b900:	683a      	ldr	r2, [r7, #0]
 801b902:	69fb      	ldr	r3, [r7, #28]
 801b904:	4413      	add	r3, r2
 801b906:	3316      	adds	r3, #22
 801b908:	781b      	ldrb	r3, [r3, #0]
 801b90a:	81bb      	strh	r3, [r7, #12]
 801b90c:	e04c      	b.n	801b9a8 <get_fileinfo+0x140>
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	6a1a      	ldr	r2, [r3, #32]
 801b912:	69fb      	ldr	r3, [r7, #28]
 801b914:	1c59      	adds	r1, r3, #1
 801b916:	61f9      	str	r1, [r7, #28]
 801b918:	4413      	add	r3, r2
 801b91a:	781b      	ldrb	r3, [r3, #0]
 801b91c:	75fb      	strb	r3, [r7, #23]
 801b91e:	7dfb      	ldrb	r3, [r7, #23]
 801b920:	2b20      	cmp	r3, #32
 801b922:	d100      	bne.n	801b926 <get_fileinfo+0xbe>
 801b924:	e040      	b.n	801b9a8 <get_fileinfo+0x140>
 801b926:	7dfb      	ldrb	r3, [r7, #23]
 801b928:	2b05      	cmp	r3, #5
 801b92a:	d101      	bne.n	801b930 <get_fileinfo+0xc8>
 801b92c:	23e5      	movs	r3, #229	; 0xe5
 801b92e:	75fb      	strb	r3, [r7, #23]
 801b930:	69fb      	ldr	r3, [r7, #28]
 801b932:	2b09      	cmp	r3, #9
 801b934:	d10f      	bne.n	801b956 <get_fileinfo+0xee>
 801b936:	89bb      	ldrh	r3, [r7, #12]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d105      	bne.n	801b948 <get_fileinfo+0xe0>
 801b93c:	683a      	ldr	r2, [r7, #0]
 801b93e:	69bb      	ldr	r3, [r7, #24]
 801b940:	4413      	add	r3, r2
 801b942:	3316      	adds	r3, #22
 801b944:	222e      	movs	r2, #46	; 0x2e
 801b946:	701a      	strb	r2, [r3, #0]
 801b948:	69bb      	ldr	r3, [r7, #24]
 801b94a:	1c5a      	adds	r2, r3, #1
 801b94c:	61ba      	str	r2, [r7, #24]
 801b94e:	683a      	ldr	r2, [r7, #0]
 801b950:	4413      	add	r3, r2
 801b952:	222e      	movs	r2, #46	; 0x2e
 801b954:	725a      	strb	r2, [r3, #9]
 801b956:	683a      	ldr	r2, [r7, #0]
 801b958:	69bb      	ldr	r3, [r7, #24]
 801b95a:	4413      	add	r3, r2
 801b95c:	3309      	adds	r3, #9
 801b95e:	7dfa      	ldrb	r2, [r7, #23]
 801b960:	701a      	strb	r2, [r3, #0]
 801b962:	89bb      	ldrh	r3, [r7, #12]
 801b964:	2b00      	cmp	r3, #0
 801b966:	d11c      	bne.n	801b9a2 <get_fileinfo+0x13a>
 801b968:	7dfb      	ldrb	r3, [r7, #23]
 801b96a:	2b40      	cmp	r3, #64	; 0x40
 801b96c:	d913      	bls.n	801b996 <get_fileinfo+0x12e>
 801b96e:	7dfb      	ldrb	r3, [r7, #23]
 801b970:	2b5a      	cmp	r3, #90	; 0x5a
 801b972:	d810      	bhi.n	801b996 <get_fileinfo+0x12e>
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	6a1b      	ldr	r3, [r3, #32]
 801b978:	330c      	adds	r3, #12
 801b97a:	781b      	ldrb	r3, [r3, #0]
 801b97c:	461a      	mov	r2, r3
 801b97e:	69fb      	ldr	r3, [r7, #28]
 801b980:	2b08      	cmp	r3, #8
 801b982:	d901      	bls.n	801b988 <get_fileinfo+0x120>
 801b984:	2310      	movs	r3, #16
 801b986:	e000      	b.n	801b98a <get_fileinfo+0x122>
 801b988:	2308      	movs	r3, #8
 801b98a:	4013      	ands	r3, r2
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d002      	beq.n	801b996 <get_fileinfo+0x12e>
 801b990:	7dfb      	ldrb	r3, [r7, #23]
 801b992:	3320      	adds	r3, #32
 801b994:	75fb      	strb	r3, [r7, #23]
 801b996:	683a      	ldr	r2, [r7, #0]
 801b998:	69bb      	ldr	r3, [r7, #24]
 801b99a:	4413      	add	r3, r2
 801b99c:	3316      	adds	r3, #22
 801b99e:	7dfa      	ldrb	r2, [r7, #23]
 801b9a0:	701a      	strb	r2, [r3, #0]
 801b9a2:	69bb      	ldr	r3, [r7, #24]
 801b9a4:	3301      	adds	r3, #1
 801b9a6:	61bb      	str	r3, [r7, #24]
 801b9a8:	69fb      	ldr	r3, [r7, #28]
 801b9aa:	2b0a      	cmp	r3, #10
 801b9ac:	d9af      	bls.n	801b90e <get_fileinfo+0xa6>
 801b9ae:	89bb      	ldrh	r3, [r7, #12]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d10d      	bne.n	801b9d0 <get_fileinfo+0x168>
 801b9b4:	683a      	ldr	r2, [r7, #0]
 801b9b6:	69bb      	ldr	r3, [r7, #24]
 801b9b8:	4413      	add	r3, r2
 801b9ba:	3316      	adds	r3, #22
 801b9bc:	2200      	movs	r2, #0
 801b9be:	701a      	strb	r2, [r3, #0]
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	6a1b      	ldr	r3, [r3, #32]
 801b9c4:	330c      	adds	r3, #12
 801b9c6:	781b      	ldrb	r3, [r3, #0]
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d101      	bne.n	801b9d0 <get_fileinfo+0x168>
 801b9cc:	2300      	movs	r3, #0
 801b9ce:	61bb      	str	r3, [r7, #24]
 801b9d0:	683a      	ldr	r2, [r7, #0]
 801b9d2:	69bb      	ldr	r3, [r7, #24]
 801b9d4:	4413      	add	r3, r2
 801b9d6:	3309      	adds	r3, #9
 801b9d8:	2200      	movs	r2, #0
 801b9da:	701a      	strb	r2, [r3, #0]
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	6a1b      	ldr	r3, [r3, #32]
 801b9e0:	7ada      	ldrb	r2, [r3, #11]
 801b9e2:	683b      	ldr	r3, [r7, #0]
 801b9e4:	721a      	strb	r2, [r3, #8]
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	6a1b      	ldr	r3, [r3, #32]
 801b9ea:	331c      	adds	r3, #28
 801b9ec:	4618      	mov	r0, r3
 801b9ee:	f7fe fa4f 	bl	8019e90 <ld_dword>
 801b9f2:	4602      	mov	r2, r0
 801b9f4:	683b      	ldr	r3, [r7, #0]
 801b9f6:	601a      	str	r2, [r3, #0]
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	6a1b      	ldr	r3, [r3, #32]
 801b9fc:	3316      	adds	r3, #22
 801b9fe:	4618      	mov	r0, r3
 801ba00:	f7fe fa46 	bl	8019e90 <ld_dword>
 801ba04:	60b8      	str	r0, [r7, #8]
 801ba06:	68bb      	ldr	r3, [r7, #8]
 801ba08:	b29a      	uxth	r2, r3
 801ba0a:	683b      	ldr	r3, [r7, #0]
 801ba0c:	80da      	strh	r2, [r3, #6]
 801ba0e:	68bb      	ldr	r3, [r7, #8]
 801ba10:	0c1b      	lsrs	r3, r3, #16
 801ba12:	b29a      	uxth	r2, r3
 801ba14:	683b      	ldr	r3, [r7, #0]
 801ba16:	809a      	strh	r2, [r3, #4]
 801ba18:	e000      	b.n	801ba1c <get_fileinfo+0x1b4>
 801ba1a:	bf00      	nop
 801ba1c:	3720      	adds	r7, #32
 801ba1e:	46bd      	mov	sp, r7
 801ba20:	bd80      	pop	{r7, pc}
	...

0801ba24 <create_name>:
 801ba24:	b580      	push	{r7, lr}
 801ba26:	b08a      	sub	sp, #40	; 0x28
 801ba28:	af00      	add	r7, sp, #0
 801ba2a:	6078      	str	r0, [r7, #4]
 801ba2c:	6039      	str	r1, [r7, #0]
 801ba2e:	683b      	ldr	r3, [r7, #0]
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	613b      	str	r3, [r7, #16]
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	691b      	ldr	r3, [r3, #16]
 801ba3a:	60fb      	str	r3, [r7, #12]
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	617b      	str	r3, [r7, #20]
 801ba40:	697b      	ldr	r3, [r7, #20]
 801ba42:	61bb      	str	r3, [r7, #24]
 801ba44:	69bb      	ldr	r3, [r7, #24]
 801ba46:	1c5a      	adds	r2, r3, #1
 801ba48:	61ba      	str	r2, [r7, #24]
 801ba4a:	693a      	ldr	r2, [r7, #16]
 801ba4c:	4413      	add	r3, r2
 801ba4e:	781b      	ldrb	r3, [r3, #0]
 801ba50:	84bb      	strh	r3, [r7, #36]	; 0x24
 801ba52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ba54:	2b1f      	cmp	r3, #31
 801ba56:	d940      	bls.n	801bada <create_name+0xb6>
 801ba58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ba5a:	2b2f      	cmp	r3, #47	; 0x2f
 801ba5c:	d006      	beq.n	801ba6c <create_name+0x48>
 801ba5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ba60:	2b5c      	cmp	r3, #92	; 0x5c
 801ba62:	d110      	bne.n	801ba86 <create_name+0x62>
 801ba64:	e002      	b.n	801ba6c <create_name+0x48>
 801ba66:	69bb      	ldr	r3, [r7, #24]
 801ba68:	3301      	adds	r3, #1
 801ba6a:	61bb      	str	r3, [r7, #24]
 801ba6c:	693a      	ldr	r2, [r7, #16]
 801ba6e:	69bb      	ldr	r3, [r7, #24]
 801ba70:	4413      	add	r3, r2
 801ba72:	781b      	ldrb	r3, [r3, #0]
 801ba74:	2b2f      	cmp	r3, #47	; 0x2f
 801ba76:	d0f6      	beq.n	801ba66 <create_name+0x42>
 801ba78:	693a      	ldr	r2, [r7, #16]
 801ba7a:	69bb      	ldr	r3, [r7, #24]
 801ba7c:	4413      	add	r3, r2
 801ba7e:	781b      	ldrb	r3, [r3, #0]
 801ba80:	2b5c      	cmp	r3, #92	; 0x5c
 801ba82:	d0f0      	beq.n	801ba66 <create_name+0x42>
 801ba84:	e02a      	b.n	801badc <create_name+0xb8>
 801ba86:	697b      	ldr	r3, [r7, #20]
 801ba88:	2bfe      	cmp	r3, #254	; 0xfe
 801ba8a:	d901      	bls.n	801ba90 <create_name+0x6c>
 801ba8c:	2306      	movs	r3, #6
 801ba8e:	e177      	b.n	801bd80 <create_name+0x35c>
 801ba90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ba92:	b2db      	uxtb	r3, r3
 801ba94:	84bb      	strh	r3, [r7, #36]	; 0x24
 801ba96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ba98:	2101      	movs	r1, #1
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	f001 ff22 	bl	801d8e4 <ff_convert>
 801baa0:	4603      	mov	r3, r0
 801baa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 801baa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d101      	bne.n	801baae <create_name+0x8a>
 801baaa:	2306      	movs	r3, #6
 801baac:	e168      	b.n	801bd80 <create_name+0x35c>
 801baae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bab0:	2b7f      	cmp	r3, #127	; 0x7f
 801bab2:	d809      	bhi.n	801bac8 <create_name+0xa4>
 801bab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bab6:	4619      	mov	r1, r3
 801bab8:	48b3      	ldr	r0, [pc, #716]	; (801bd88 <create_name+0x364>)
 801baba:	f7fe fab5 	bl	801a028 <chk_chr>
 801babe:	4603      	mov	r3, r0
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d001      	beq.n	801bac8 <create_name+0xa4>
 801bac4:	2306      	movs	r3, #6
 801bac6:	e15b      	b.n	801bd80 <create_name+0x35c>
 801bac8:	697b      	ldr	r3, [r7, #20]
 801baca:	1c5a      	adds	r2, r3, #1
 801bacc:	617a      	str	r2, [r7, #20]
 801bace:	005b      	lsls	r3, r3, #1
 801bad0:	68fa      	ldr	r2, [r7, #12]
 801bad2:	4413      	add	r3, r2
 801bad4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bad6:	801a      	strh	r2, [r3, #0]
 801bad8:	e7b4      	b.n	801ba44 <create_name+0x20>
 801bada:	bf00      	nop
 801badc:	693a      	ldr	r2, [r7, #16]
 801bade:	69bb      	ldr	r3, [r7, #24]
 801bae0:	441a      	add	r2, r3
 801bae2:	683b      	ldr	r3, [r7, #0]
 801bae4:	601a      	str	r2, [r3, #0]
 801bae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bae8:	2b1f      	cmp	r3, #31
 801baea:	d801      	bhi.n	801baf0 <create_name+0xcc>
 801baec:	2304      	movs	r3, #4
 801baee:	e000      	b.n	801baf2 <create_name+0xce>
 801baf0:	2300      	movs	r3, #0
 801baf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801baf6:	e011      	b.n	801bb1c <create_name+0xf8>
 801baf8:	697a      	ldr	r2, [r7, #20]
 801bafa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bafe:	4413      	add	r3, r2
 801bb00:	005b      	lsls	r3, r3, #1
 801bb02:	68fa      	ldr	r2, [r7, #12]
 801bb04:	4413      	add	r3, r2
 801bb06:	881b      	ldrh	r3, [r3, #0]
 801bb08:	84bb      	strh	r3, [r7, #36]	; 0x24
 801bb0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb0c:	2b20      	cmp	r3, #32
 801bb0e:	d002      	beq.n	801bb16 <create_name+0xf2>
 801bb10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb12:	2b2e      	cmp	r3, #46	; 0x2e
 801bb14:	d106      	bne.n	801bb24 <create_name+0x100>
 801bb16:	697b      	ldr	r3, [r7, #20]
 801bb18:	3b01      	subs	r3, #1
 801bb1a:	617b      	str	r3, [r7, #20]
 801bb1c:	697b      	ldr	r3, [r7, #20]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d1ea      	bne.n	801baf8 <create_name+0xd4>
 801bb22:	e000      	b.n	801bb26 <create_name+0x102>
 801bb24:	bf00      	nop
 801bb26:	697b      	ldr	r3, [r7, #20]
 801bb28:	005b      	lsls	r3, r3, #1
 801bb2a:	68fa      	ldr	r2, [r7, #12]
 801bb2c:	4413      	add	r3, r2
 801bb2e:	2200      	movs	r2, #0
 801bb30:	801a      	strh	r2, [r3, #0]
 801bb32:	697b      	ldr	r3, [r7, #20]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d101      	bne.n	801bb3c <create_name+0x118>
 801bb38:	2306      	movs	r3, #6
 801bb3a:	e121      	b.n	801bd80 <create_name+0x35c>
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	3324      	adds	r3, #36	; 0x24
 801bb40:	220b      	movs	r2, #11
 801bb42:	2120      	movs	r1, #32
 801bb44:	4618      	mov	r0, r3
 801bb46:	f7fe fa2e 	bl	8019fa6 <mem_set>
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	61bb      	str	r3, [r7, #24]
 801bb4e:	e002      	b.n	801bb56 <create_name+0x132>
 801bb50:	69bb      	ldr	r3, [r7, #24]
 801bb52:	3301      	adds	r3, #1
 801bb54:	61bb      	str	r3, [r7, #24]
 801bb56:	69bb      	ldr	r3, [r7, #24]
 801bb58:	005b      	lsls	r3, r3, #1
 801bb5a:	68fa      	ldr	r2, [r7, #12]
 801bb5c:	4413      	add	r3, r2
 801bb5e:	881b      	ldrh	r3, [r3, #0]
 801bb60:	2b20      	cmp	r3, #32
 801bb62:	d0f5      	beq.n	801bb50 <create_name+0x12c>
 801bb64:	69bb      	ldr	r3, [r7, #24]
 801bb66:	005b      	lsls	r3, r3, #1
 801bb68:	68fa      	ldr	r2, [r7, #12]
 801bb6a:	4413      	add	r3, r2
 801bb6c:	881b      	ldrh	r3, [r3, #0]
 801bb6e:	2b2e      	cmp	r3, #46	; 0x2e
 801bb70:	d0ee      	beq.n	801bb50 <create_name+0x12c>
 801bb72:	69bb      	ldr	r3, [r7, #24]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d009      	beq.n	801bb8c <create_name+0x168>
 801bb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb7c:	f043 0303 	orr.w	r3, r3, #3
 801bb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bb84:	e002      	b.n	801bb8c <create_name+0x168>
 801bb86:	697b      	ldr	r3, [r7, #20]
 801bb88:	3b01      	subs	r3, #1
 801bb8a:	617b      	str	r3, [r7, #20]
 801bb8c:	697b      	ldr	r3, [r7, #20]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d009      	beq.n	801bba6 <create_name+0x182>
 801bb92:	697a      	ldr	r2, [r7, #20]
 801bb94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bb98:	4413      	add	r3, r2
 801bb9a:	005b      	lsls	r3, r3, #1
 801bb9c:	68fa      	ldr	r2, [r7, #12]
 801bb9e:	4413      	add	r3, r2
 801bba0:	881b      	ldrh	r3, [r3, #0]
 801bba2:	2b2e      	cmp	r3, #46	; 0x2e
 801bba4:	d1ef      	bne.n	801bb86 <create_name+0x162>
 801bba6:	2300      	movs	r3, #0
 801bba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801bbac:	2300      	movs	r3, #0
 801bbae:	623b      	str	r3, [r7, #32]
 801bbb0:	2308      	movs	r3, #8
 801bbb2:	61fb      	str	r3, [r7, #28]
 801bbb4:	69bb      	ldr	r3, [r7, #24]
 801bbb6:	1c5a      	adds	r2, r3, #1
 801bbb8:	61ba      	str	r2, [r7, #24]
 801bbba:	005b      	lsls	r3, r3, #1
 801bbbc:	68fa      	ldr	r2, [r7, #12]
 801bbbe:	4413      	add	r3, r2
 801bbc0:	881b      	ldrh	r3, [r3, #0]
 801bbc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 801bbc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	f000 8090 	beq.w	801bcec <create_name+0x2c8>
 801bbcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bbce:	2b20      	cmp	r3, #32
 801bbd0:	d006      	beq.n	801bbe0 <create_name+0x1bc>
 801bbd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bbd4:	2b2e      	cmp	r3, #46	; 0x2e
 801bbd6:	d10a      	bne.n	801bbee <create_name+0x1ca>
 801bbd8:	69ba      	ldr	r2, [r7, #24]
 801bbda:	697b      	ldr	r3, [r7, #20]
 801bbdc:	429a      	cmp	r2, r3
 801bbde:	d006      	beq.n	801bbee <create_name+0x1ca>
 801bbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bbe4:	f043 0303 	orr.w	r3, r3, #3
 801bbe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bbec:	e07d      	b.n	801bcea <create_name+0x2c6>
 801bbee:	6a3a      	ldr	r2, [r7, #32]
 801bbf0:	69fb      	ldr	r3, [r7, #28]
 801bbf2:	429a      	cmp	r2, r3
 801bbf4:	d203      	bcs.n	801bbfe <create_name+0x1da>
 801bbf6:	69ba      	ldr	r2, [r7, #24]
 801bbf8:	697b      	ldr	r3, [r7, #20]
 801bbfa:	429a      	cmp	r2, r3
 801bbfc:	d123      	bne.n	801bc46 <create_name+0x222>
 801bbfe:	69fb      	ldr	r3, [r7, #28]
 801bc00:	2b0b      	cmp	r3, #11
 801bc02:	d106      	bne.n	801bc12 <create_name+0x1ee>
 801bc04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc08:	f043 0303 	orr.w	r3, r3, #3
 801bc0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bc10:	e06f      	b.n	801bcf2 <create_name+0x2ce>
 801bc12:	69ba      	ldr	r2, [r7, #24]
 801bc14:	697b      	ldr	r3, [r7, #20]
 801bc16:	429a      	cmp	r2, r3
 801bc18:	d005      	beq.n	801bc26 <create_name+0x202>
 801bc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc1e:	f043 0303 	orr.w	r3, r3, #3
 801bc22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bc26:	69ba      	ldr	r2, [r7, #24]
 801bc28:	697b      	ldr	r3, [r7, #20]
 801bc2a:	429a      	cmp	r2, r3
 801bc2c:	d860      	bhi.n	801bcf0 <create_name+0x2cc>
 801bc2e:	697b      	ldr	r3, [r7, #20]
 801bc30:	61bb      	str	r3, [r7, #24]
 801bc32:	2308      	movs	r3, #8
 801bc34:	623b      	str	r3, [r7, #32]
 801bc36:	230b      	movs	r3, #11
 801bc38:	61fb      	str	r3, [r7, #28]
 801bc3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bc3e:	009b      	lsls	r3, r3, #2
 801bc40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801bc44:	e051      	b.n	801bcea <create_name+0x2c6>
 801bc46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc48:	2b7f      	cmp	r3, #127	; 0x7f
 801bc4a:	d914      	bls.n	801bc76 <create_name+0x252>
 801bc4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc4e:	2100      	movs	r1, #0
 801bc50:	4618      	mov	r0, r3
 801bc52:	f001 fe47 	bl	801d8e4 <ff_convert>
 801bc56:	4603      	mov	r3, r0
 801bc58:	84bb      	strh	r3, [r7, #36]	; 0x24
 801bc5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d004      	beq.n	801bc6a <create_name+0x246>
 801bc60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc62:	3b80      	subs	r3, #128	; 0x80
 801bc64:	4a49      	ldr	r2, [pc, #292]	; (801bd8c <create_name+0x368>)
 801bc66:	5cd3      	ldrb	r3, [r2, r3]
 801bc68:	84bb      	strh	r3, [r7, #36]	; 0x24
 801bc6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc6e:	f043 0302 	orr.w	r3, r3, #2
 801bc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bc76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d007      	beq.n	801bc8c <create_name+0x268>
 801bc7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bc7e:	4619      	mov	r1, r3
 801bc80:	4843      	ldr	r0, [pc, #268]	; (801bd90 <create_name+0x36c>)
 801bc82:	f7fe f9d1 	bl	801a028 <chk_chr>
 801bc86:	4603      	mov	r3, r0
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d008      	beq.n	801bc9e <create_name+0x27a>
 801bc8c:	235f      	movs	r3, #95	; 0x5f
 801bc8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 801bc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc94:	f043 0303 	orr.w	r3, r3, #3
 801bc98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bc9c:	e01b      	b.n	801bcd6 <create_name+0x2b2>
 801bc9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bca0:	2b40      	cmp	r3, #64	; 0x40
 801bca2:	d909      	bls.n	801bcb8 <create_name+0x294>
 801bca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bca6:	2b5a      	cmp	r3, #90	; 0x5a
 801bca8:	d806      	bhi.n	801bcb8 <create_name+0x294>
 801bcaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bcae:	f043 0302 	orr.w	r3, r3, #2
 801bcb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801bcb6:	e00e      	b.n	801bcd6 <create_name+0x2b2>
 801bcb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bcba:	2b60      	cmp	r3, #96	; 0x60
 801bcbc:	d90b      	bls.n	801bcd6 <create_name+0x2b2>
 801bcbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bcc0:	2b7a      	cmp	r3, #122	; 0x7a
 801bcc2:	d808      	bhi.n	801bcd6 <create_name+0x2b2>
 801bcc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bcc8:	f043 0301 	orr.w	r3, r3, #1
 801bccc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801bcd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bcd2:	3b20      	subs	r3, #32
 801bcd4:	84bb      	strh	r3, [r7, #36]	; 0x24
 801bcd6:	6a3b      	ldr	r3, [r7, #32]
 801bcd8:	1c5a      	adds	r2, r3, #1
 801bcda:	623a      	str	r2, [r7, #32]
 801bcdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bcde:	b2d1      	uxtb	r1, r2
 801bce0:	687a      	ldr	r2, [r7, #4]
 801bce2:	4413      	add	r3, r2
 801bce4:	460a      	mov	r2, r1
 801bce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801bcea:	e763      	b.n	801bbb4 <create_name+0x190>
 801bcec:	bf00      	nop
 801bcee:	e000      	b.n	801bcf2 <create_name+0x2ce>
 801bcf0:	bf00      	nop
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bcf8:	2be5      	cmp	r3, #229	; 0xe5
 801bcfa:	d103      	bne.n	801bd04 <create_name+0x2e0>
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	2205      	movs	r2, #5
 801bd00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801bd04:	69fb      	ldr	r3, [r7, #28]
 801bd06:	2b08      	cmp	r3, #8
 801bd08:	d104      	bne.n	801bd14 <create_name+0x2f0>
 801bd0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bd0e:	009b      	lsls	r3, r3, #2
 801bd10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801bd14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bd18:	f003 030c 	and.w	r3, r3, #12
 801bd1c:	2b0c      	cmp	r3, #12
 801bd1e:	d005      	beq.n	801bd2c <create_name+0x308>
 801bd20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bd24:	f003 0303 	and.w	r3, r3, #3
 801bd28:	2b03      	cmp	r3, #3
 801bd2a:	d105      	bne.n	801bd38 <create_name+0x314>
 801bd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd30:	f043 0302 	orr.w	r3, r3, #2
 801bd34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bd38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd3c:	f003 0302 	and.w	r3, r3, #2
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d117      	bne.n	801bd74 <create_name+0x350>
 801bd44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bd48:	f003 0303 	and.w	r3, r3, #3
 801bd4c:	2b01      	cmp	r3, #1
 801bd4e:	d105      	bne.n	801bd5c <create_name+0x338>
 801bd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd54:	f043 0310 	orr.w	r3, r3, #16
 801bd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bd5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801bd60:	f003 030c 	and.w	r3, r3, #12
 801bd64:	2b04      	cmp	r3, #4
 801bd66:	d105      	bne.n	801bd74 <create_name+0x350>
 801bd68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd6c:	f043 0308 	orr.w	r3, r3, #8
 801bd70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801bd7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801bd7e:	2300      	movs	r3, #0
 801bd80:	4618      	mov	r0, r3
 801bd82:	3728      	adds	r7, #40	; 0x28
 801bd84:	46bd      	mov	sp, r7
 801bd86:	bd80      	pop	{r7, pc}
 801bd88:	08022938 	.word	0x08022938
 801bd8c:	08023010 	.word	0x08023010
 801bd90:	08022944 	.word	0x08022944

0801bd94 <follow_path>:
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b086      	sub	sp, #24
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
 801bd9c:	6039      	str	r1, [r7, #0]
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	613b      	str	r3, [r7, #16]
 801bda2:	693b      	ldr	r3, [r7, #16]
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	60fb      	str	r3, [r7, #12]
 801bda8:	e002      	b.n	801bdb0 <follow_path+0x1c>
 801bdaa:	683b      	ldr	r3, [r7, #0]
 801bdac:	3301      	adds	r3, #1
 801bdae:	603b      	str	r3, [r7, #0]
 801bdb0:	683b      	ldr	r3, [r7, #0]
 801bdb2:	781b      	ldrb	r3, [r3, #0]
 801bdb4:	2b2f      	cmp	r3, #47	; 0x2f
 801bdb6:	d0f8      	beq.n	801bdaa <follow_path+0x16>
 801bdb8:	683b      	ldr	r3, [r7, #0]
 801bdba:	781b      	ldrb	r3, [r3, #0]
 801bdbc:	2b5c      	cmp	r3, #92	; 0x5c
 801bdbe:	d0f4      	beq.n	801bdaa <follow_path+0x16>
 801bdc0:	693b      	ldr	r3, [r7, #16]
 801bdc2:	2200      	movs	r2, #0
 801bdc4:	609a      	str	r2, [r3, #8]
 801bdc6:	683b      	ldr	r3, [r7, #0]
 801bdc8:	781b      	ldrb	r3, [r3, #0]
 801bdca:	2b1f      	cmp	r3, #31
 801bdcc:	d80a      	bhi.n	801bde4 <follow_path+0x50>
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	2280      	movs	r2, #128	; 0x80
 801bdd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801bdd6:	2100      	movs	r1, #0
 801bdd8:	6878      	ldr	r0, [r7, #4]
 801bdda:	f7fe feca 	bl	801ab72 <dir_sdi>
 801bdde:	4603      	mov	r3, r0
 801bde0:	75fb      	strb	r3, [r7, #23]
 801bde2:	e048      	b.n	801be76 <follow_path+0xe2>
 801bde4:	463b      	mov	r3, r7
 801bde6:	4619      	mov	r1, r3
 801bde8:	6878      	ldr	r0, [r7, #4]
 801bdea:	f7ff fe1b 	bl	801ba24 <create_name>
 801bdee:	4603      	mov	r3, r0
 801bdf0:	75fb      	strb	r3, [r7, #23]
 801bdf2:	7dfb      	ldrb	r3, [r7, #23]
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d139      	bne.n	801be6c <follow_path+0xd8>
 801bdf8:	6878      	ldr	r0, [r7, #4]
 801bdfa:	f7ff fb33 	bl	801b464 <dir_find>
 801bdfe:	4603      	mov	r3, r0
 801be00:	75fb      	strb	r3, [r7, #23]
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801be08:	72fb      	strb	r3, [r7, #11]
 801be0a:	7dfb      	ldrb	r3, [r7, #23]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d00a      	beq.n	801be26 <follow_path+0x92>
 801be10:	7dfb      	ldrb	r3, [r7, #23]
 801be12:	2b04      	cmp	r3, #4
 801be14:	d12c      	bne.n	801be70 <follow_path+0xdc>
 801be16:	7afb      	ldrb	r3, [r7, #11]
 801be18:	f003 0304 	and.w	r3, r3, #4
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d127      	bne.n	801be70 <follow_path+0xdc>
 801be20:	2305      	movs	r3, #5
 801be22:	75fb      	strb	r3, [r7, #23]
 801be24:	e024      	b.n	801be70 <follow_path+0xdc>
 801be26:	7afb      	ldrb	r3, [r7, #11]
 801be28:	f003 0304 	and.w	r3, r3, #4
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d121      	bne.n	801be74 <follow_path+0xe0>
 801be30:	693b      	ldr	r3, [r7, #16]
 801be32:	799b      	ldrb	r3, [r3, #6]
 801be34:	f003 0310 	and.w	r3, r3, #16
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d102      	bne.n	801be42 <follow_path+0xae>
 801be3c:	2305      	movs	r3, #5
 801be3e:	75fb      	strb	r3, [r7, #23]
 801be40:	e019      	b.n	801be76 <follow_path+0xe2>
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	695b      	ldr	r3, [r3, #20]
 801be4c:	68fa      	ldr	r2, [r7, #12]
 801be4e:	8992      	ldrh	r2, [r2, #12]
 801be50:	fbb3 f0f2 	udiv	r0, r3, r2
 801be54:	fb02 f200 	mul.w	r2, r2, r0
 801be58:	1a9b      	subs	r3, r3, r2
 801be5a:	440b      	add	r3, r1
 801be5c:	4619      	mov	r1, r3
 801be5e:	68f8      	ldr	r0, [r7, #12]
 801be60:	f7ff f82d 	bl	801aebe <ld_clust>
 801be64:	4602      	mov	r2, r0
 801be66:	693b      	ldr	r3, [r7, #16]
 801be68:	609a      	str	r2, [r3, #8]
 801be6a:	e7bb      	b.n	801bde4 <follow_path+0x50>
 801be6c:	bf00      	nop
 801be6e:	e002      	b.n	801be76 <follow_path+0xe2>
 801be70:	bf00      	nop
 801be72:	e000      	b.n	801be76 <follow_path+0xe2>
 801be74:	bf00      	nop
 801be76:	7dfb      	ldrb	r3, [r7, #23]
 801be78:	4618      	mov	r0, r3
 801be7a:	3718      	adds	r7, #24
 801be7c:	46bd      	mov	sp, r7
 801be7e:	bd80      	pop	{r7, pc}

0801be80 <get_ldnumber>:
 801be80:	b480      	push	{r7}
 801be82:	b087      	sub	sp, #28
 801be84:	af00      	add	r7, sp, #0
 801be86:	6078      	str	r0, [r7, #4]
 801be88:	f04f 33ff 	mov.w	r3, #4294967295
 801be8c:	613b      	str	r3, [r7, #16]
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d031      	beq.n	801befa <get_ldnumber+0x7a>
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	617b      	str	r3, [r7, #20]
 801be9c:	e002      	b.n	801bea4 <get_ldnumber+0x24>
 801be9e:	697b      	ldr	r3, [r7, #20]
 801bea0:	3301      	adds	r3, #1
 801bea2:	617b      	str	r3, [r7, #20]
 801bea4:	697b      	ldr	r3, [r7, #20]
 801bea6:	781b      	ldrb	r3, [r3, #0]
 801bea8:	2b1f      	cmp	r3, #31
 801beaa:	d903      	bls.n	801beb4 <get_ldnumber+0x34>
 801beac:	697b      	ldr	r3, [r7, #20]
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	2b3a      	cmp	r3, #58	; 0x3a
 801beb2:	d1f4      	bne.n	801be9e <get_ldnumber+0x1e>
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	781b      	ldrb	r3, [r3, #0]
 801beb8:	2b3a      	cmp	r3, #58	; 0x3a
 801beba:	d11c      	bne.n	801bef6 <get_ldnumber+0x76>
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	60fb      	str	r3, [r7, #12]
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	1c5a      	adds	r2, r3, #1
 801bec6:	60fa      	str	r2, [r7, #12]
 801bec8:	781b      	ldrb	r3, [r3, #0]
 801beca:	3b30      	subs	r3, #48	; 0x30
 801becc:	60bb      	str	r3, [r7, #8]
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	2b09      	cmp	r3, #9
 801bed2:	d80e      	bhi.n	801bef2 <get_ldnumber+0x72>
 801bed4:	68fa      	ldr	r2, [r7, #12]
 801bed6:	697b      	ldr	r3, [r7, #20]
 801bed8:	429a      	cmp	r2, r3
 801beda:	d10a      	bne.n	801bef2 <get_ldnumber+0x72>
 801bedc:	68bb      	ldr	r3, [r7, #8]
 801bede:	2b02      	cmp	r3, #2
 801bee0:	d807      	bhi.n	801bef2 <get_ldnumber+0x72>
 801bee2:	68bb      	ldr	r3, [r7, #8]
 801bee4:	613b      	str	r3, [r7, #16]
 801bee6:	697b      	ldr	r3, [r7, #20]
 801bee8:	3301      	adds	r3, #1
 801beea:	617b      	str	r3, [r7, #20]
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	697a      	ldr	r2, [r7, #20]
 801bef0:	601a      	str	r2, [r3, #0]
 801bef2:	693b      	ldr	r3, [r7, #16]
 801bef4:	e002      	b.n	801befc <get_ldnumber+0x7c>
 801bef6:	2300      	movs	r3, #0
 801bef8:	613b      	str	r3, [r7, #16]
 801befa:	693b      	ldr	r3, [r7, #16]
 801befc:	4618      	mov	r0, r3
 801befe:	371c      	adds	r7, #28
 801bf00:	46bd      	mov	sp, r7
 801bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf06:	4770      	bx	lr

0801bf08 <check_fs>:
 801bf08:	b580      	push	{r7, lr}
 801bf0a:	b082      	sub	sp, #8
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	6078      	str	r0, [r7, #4]
 801bf10:	6039      	str	r1, [r7, #0]
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	2200      	movs	r2, #0
 801bf16:	70da      	strb	r2, [r3, #3]
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	f04f 32ff 	mov.w	r2, #4294967295
 801bf1e:	635a      	str	r2, [r3, #52]	; 0x34
 801bf20:	6839      	ldr	r1, [r7, #0]
 801bf22:	6878      	ldr	r0, [r7, #4]
 801bf24:	f7fe fa4c 	bl	801a3c0 <move_window>
 801bf28:	4603      	mov	r3, r0
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d001      	beq.n	801bf32 <check_fs+0x2a>
 801bf2e:	2304      	movs	r3, #4
 801bf30:	e038      	b.n	801bfa4 <check_fs+0x9c>
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	3338      	adds	r3, #56	; 0x38
 801bf36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	f7fd ff90 	bl	8019e60 <ld_word>
 801bf40:	4603      	mov	r3, r0
 801bf42:	461a      	mov	r2, r3
 801bf44:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801bf48:	429a      	cmp	r2, r3
 801bf4a:	d001      	beq.n	801bf50 <check_fs+0x48>
 801bf4c:	2303      	movs	r3, #3
 801bf4e:	e029      	b.n	801bfa4 <check_fs+0x9c>
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bf56:	2be9      	cmp	r3, #233	; 0xe9
 801bf58:	d009      	beq.n	801bf6e <check_fs+0x66>
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bf60:	2beb      	cmp	r3, #235	; 0xeb
 801bf62:	d11e      	bne.n	801bfa2 <check_fs+0x9a>
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801bf6a:	2b90      	cmp	r3, #144	; 0x90
 801bf6c:	d119      	bne.n	801bfa2 <check_fs+0x9a>
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	3338      	adds	r3, #56	; 0x38
 801bf72:	3336      	adds	r3, #54	; 0x36
 801bf74:	4618      	mov	r0, r3
 801bf76:	f7fd ff8b 	bl	8019e90 <ld_dword>
 801bf7a:	4603      	mov	r3, r0
 801bf7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801bf80:	4a0a      	ldr	r2, [pc, #40]	; (801bfac <check_fs+0xa4>)
 801bf82:	4293      	cmp	r3, r2
 801bf84:	d101      	bne.n	801bf8a <check_fs+0x82>
 801bf86:	2300      	movs	r3, #0
 801bf88:	e00c      	b.n	801bfa4 <check_fs+0x9c>
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	3338      	adds	r3, #56	; 0x38
 801bf8e:	3352      	adds	r3, #82	; 0x52
 801bf90:	4618      	mov	r0, r3
 801bf92:	f7fd ff7d 	bl	8019e90 <ld_dword>
 801bf96:	4602      	mov	r2, r0
 801bf98:	4b05      	ldr	r3, [pc, #20]	; (801bfb0 <check_fs+0xa8>)
 801bf9a:	429a      	cmp	r2, r3
 801bf9c:	d101      	bne.n	801bfa2 <check_fs+0x9a>
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	e000      	b.n	801bfa4 <check_fs+0x9c>
 801bfa2:	2302      	movs	r3, #2
 801bfa4:	4618      	mov	r0, r3
 801bfa6:	3708      	adds	r7, #8
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	bd80      	pop	{r7, pc}
 801bfac:	00544146 	.word	0x00544146
 801bfb0:	33544146 	.word	0x33544146

0801bfb4 <find_volume>:
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b096      	sub	sp, #88	; 0x58
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	60f8      	str	r0, [r7, #12]
 801bfbc:	60b9      	str	r1, [r7, #8]
 801bfbe:	4613      	mov	r3, r2
 801bfc0:	71fb      	strb	r3, [r7, #7]
 801bfc2:	68bb      	ldr	r3, [r7, #8]
 801bfc4:	2200      	movs	r2, #0
 801bfc6:	601a      	str	r2, [r3, #0]
 801bfc8:	68f8      	ldr	r0, [r7, #12]
 801bfca:	f7ff ff59 	bl	801be80 <get_ldnumber>
 801bfce:	63f8      	str	r0, [r7, #60]	; 0x3c
 801bfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	da01      	bge.n	801bfda <find_volume+0x26>
 801bfd6:	230b      	movs	r3, #11
 801bfd8:	e268      	b.n	801c4ac <find_volume+0x4f8>
 801bfda:	4ab0      	ldr	r2, [pc, #704]	; (801c29c <find_volume+0x2e8>)
 801bfdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bfde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bfe2:	63bb      	str	r3, [r7, #56]	; 0x38
 801bfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d101      	bne.n	801bfee <find_volume+0x3a>
 801bfea:	230c      	movs	r3, #12
 801bfec:	e25e      	b.n	801c4ac <find_volume+0x4f8>
 801bfee:	68bb      	ldr	r3, [r7, #8]
 801bff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bff2:	601a      	str	r2, [r3, #0]
 801bff4:	79fb      	ldrb	r3, [r7, #7]
 801bff6:	f023 0301 	bic.w	r3, r3, #1
 801bffa:	71fb      	strb	r3, [r7, #7]
 801bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bffe:	781b      	ldrb	r3, [r3, #0]
 801c000:	2b00      	cmp	r3, #0
 801c002:	d01a      	beq.n	801c03a <find_volume+0x86>
 801c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c006:	785b      	ldrb	r3, [r3, #1]
 801c008:	4618      	mov	r0, r3
 801c00a:	f7fd fe8b 	bl	8019d24 <disk_status>
 801c00e:	4603      	mov	r3, r0
 801c010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801c014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c018:	f003 0301 	and.w	r3, r3, #1
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d10c      	bne.n	801c03a <find_volume+0x86>
 801c020:	79fb      	ldrb	r3, [r7, #7]
 801c022:	2b00      	cmp	r3, #0
 801c024:	d007      	beq.n	801c036 <find_volume+0x82>
 801c026:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c02a:	f003 0304 	and.w	r3, r3, #4
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d001      	beq.n	801c036 <find_volume+0x82>
 801c032:	230a      	movs	r3, #10
 801c034:	e23a      	b.n	801c4ac <find_volume+0x4f8>
 801c036:	2300      	movs	r3, #0
 801c038:	e238      	b.n	801c4ac <find_volume+0x4f8>
 801c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c03c:	2200      	movs	r2, #0
 801c03e:	701a      	strb	r2, [r3, #0]
 801c040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c042:	b2da      	uxtb	r2, r3
 801c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c046:	705a      	strb	r2, [r3, #1]
 801c048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c04a:	785b      	ldrb	r3, [r3, #1]
 801c04c:	4618      	mov	r0, r3
 801c04e:	f7fd fe83 	bl	8019d58 <disk_initialize>
 801c052:	4603      	mov	r3, r0
 801c054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801c058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c05c:	f003 0301 	and.w	r3, r3, #1
 801c060:	2b00      	cmp	r3, #0
 801c062:	d001      	beq.n	801c068 <find_volume+0xb4>
 801c064:	2303      	movs	r3, #3
 801c066:	e221      	b.n	801c4ac <find_volume+0x4f8>
 801c068:	79fb      	ldrb	r3, [r7, #7]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d007      	beq.n	801c07e <find_volume+0xca>
 801c06e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c072:	f003 0304 	and.w	r3, r3, #4
 801c076:	2b00      	cmp	r3, #0
 801c078:	d001      	beq.n	801c07e <find_volume+0xca>
 801c07a:	230a      	movs	r3, #10
 801c07c:	e216      	b.n	801c4ac <find_volume+0x4f8>
 801c07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c080:	7858      	ldrb	r0, [r3, #1]
 801c082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c084:	330c      	adds	r3, #12
 801c086:	461a      	mov	r2, r3
 801c088:	2102      	movs	r1, #2
 801c08a:	f7fd fecb 	bl	8019e24 <disk_ioctl>
 801c08e:	4603      	mov	r3, r0
 801c090:	2b00      	cmp	r3, #0
 801c092:	d001      	beq.n	801c098 <find_volume+0xe4>
 801c094:	2301      	movs	r3, #1
 801c096:	e209      	b.n	801c4ac <find_volume+0x4f8>
 801c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c09a:	899b      	ldrh	r3, [r3, #12]
 801c09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c0a0:	d80d      	bhi.n	801c0be <find_volume+0x10a>
 801c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0a4:	899b      	ldrh	r3, [r3, #12]
 801c0a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c0aa:	d308      	bcc.n	801c0be <find_volume+0x10a>
 801c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0ae:	899b      	ldrh	r3, [r3, #12]
 801c0b0:	461a      	mov	r2, r3
 801c0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0b4:	899b      	ldrh	r3, [r3, #12]
 801c0b6:	3b01      	subs	r3, #1
 801c0b8:	4013      	ands	r3, r2
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d001      	beq.n	801c0c2 <find_volume+0x10e>
 801c0be:	2301      	movs	r3, #1
 801c0c0:	e1f4      	b.n	801c4ac <find_volume+0x4f8>
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	653b      	str	r3, [r7, #80]	; 0x50
 801c0c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c0c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c0ca:	f7ff ff1d 	bl	801bf08 <check_fs>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801c0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c0d8:	2b02      	cmp	r3, #2
 801c0da:	d14b      	bne.n	801c174 <find_volume+0x1c0>
 801c0dc:	2300      	movs	r3, #0
 801c0de:	643b      	str	r3, [r7, #64]	; 0x40
 801c0e0:	e01f      	b.n	801c122 <find_volume+0x16e>
 801c0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0e4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801c0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c0ea:	011b      	lsls	r3, r3, #4
 801c0ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801c0f0:	4413      	add	r3, r2
 801c0f2:	633b      	str	r3, [r7, #48]	; 0x30
 801c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0f6:	3304      	adds	r3, #4
 801c0f8:	781b      	ldrb	r3, [r3, #0]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d006      	beq.n	801c10c <find_volume+0x158>
 801c0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c100:	3308      	adds	r3, #8
 801c102:	4618      	mov	r0, r3
 801c104:	f7fd fec4 	bl	8019e90 <ld_dword>
 801c108:	4602      	mov	r2, r0
 801c10a:	e000      	b.n	801c10e <find_volume+0x15a>
 801c10c:	2200      	movs	r2, #0
 801c10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c110:	009b      	lsls	r3, r3, #2
 801c112:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801c116:	440b      	add	r3, r1
 801c118:	f843 2c44 	str.w	r2, [r3, #-68]
 801c11c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c11e:	3301      	adds	r3, #1
 801c120:	643b      	str	r3, [r7, #64]	; 0x40
 801c122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c124:	2b03      	cmp	r3, #3
 801c126:	d9dc      	bls.n	801c0e2 <find_volume+0x12e>
 801c128:	2300      	movs	r3, #0
 801c12a:	643b      	str	r3, [r7, #64]	; 0x40
 801c12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d002      	beq.n	801c138 <find_volume+0x184>
 801c132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c134:	3b01      	subs	r3, #1
 801c136:	643b      	str	r3, [r7, #64]	; 0x40
 801c138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c13a:	009b      	lsls	r3, r3, #2
 801c13c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801c140:	4413      	add	r3, r2
 801c142:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c146:	653b      	str	r3, [r7, #80]	; 0x50
 801c148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d005      	beq.n	801c15a <find_volume+0x1a6>
 801c14e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c150:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c152:	f7ff fed9 	bl	801bf08 <check_fs>
 801c156:	4603      	mov	r3, r0
 801c158:	e000      	b.n	801c15c <find_volume+0x1a8>
 801c15a:	2303      	movs	r3, #3
 801c15c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801c160:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c164:	2b01      	cmp	r3, #1
 801c166:	d905      	bls.n	801c174 <find_volume+0x1c0>
 801c168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c16a:	3301      	adds	r3, #1
 801c16c:	643b      	str	r3, [r7, #64]	; 0x40
 801c16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c170:	2b03      	cmp	r3, #3
 801c172:	d9e1      	bls.n	801c138 <find_volume+0x184>
 801c174:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c178:	2b04      	cmp	r3, #4
 801c17a:	d101      	bne.n	801c180 <find_volume+0x1cc>
 801c17c:	2301      	movs	r3, #1
 801c17e:	e195      	b.n	801c4ac <find_volume+0x4f8>
 801c180:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c184:	2b01      	cmp	r3, #1
 801c186:	d901      	bls.n	801c18c <find_volume+0x1d8>
 801c188:	230d      	movs	r3, #13
 801c18a:	e18f      	b.n	801c4ac <find_volume+0x4f8>
 801c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c18e:	3338      	adds	r3, #56	; 0x38
 801c190:	330b      	adds	r3, #11
 801c192:	4618      	mov	r0, r3
 801c194:	f7fd fe64 	bl	8019e60 <ld_word>
 801c198:	4603      	mov	r3, r0
 801c19a:	461a      	mov	r2, r3
 801c19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c19e:	899b      	ldrh	r3, [r3, #12]
 801c1a0:	429a      	cmp	r2, r3
 801c1a2:	d001      	beq.n	801c1a8 <find_volume+0x1f4>
 801c1a4:	230d      	movs	r3, #13
 801c1a6:	e181      	b.n	801c4ac <find_volume+0x4f8>
 801c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1aa:	3338      	adds	r3, #56	; 0x38
 801c1ac:	3316      	adds	r3, #22
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	f7fd fe56 	bl	8019e60 <ld_word>
 801c1b4:	4603      	mov	r3, r0
 801c1b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d106      	bne.n	801c1cc <find_volume+0x218>
 801c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1c0:	3338      	adds	r3, #56	; 0x38
 801c1c2:	3324      	adds	r3, #36	; 0x24
 801c1c4:	4618      	mov	r0, r3
 801c1c6:	f7fd fe63 	bl	8019e90 <ld_dword>
 801c1ca:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c1d0:	621a      	str	r2, [r3, #32]
 801c1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1d4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1da:	709a      	strb	r2, [r3, #2]
 801c1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1de:	789b      	ldrb	r3, [r3, #2]
 801c1e0:	2b01      	cmp	r3, #1
 801c1e2:	d005      	beq.n	801c1f0 <find_volume+0x23c>
 801c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1e6:	789b      	ldrb	r3, [r3, #2]
 801c1e8:	2b02      	cmp	r3, #2
 801c1ea:	d001      	beq.n	801c1f0 <find_volume+0x23c>
 801c1ec:	230d      	movs	r3, #13
 801c1ee:	e15d      	b.n	801c4ac <find_volume+0x4f8>
 801c1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1f2:	789b      	ldrb	r3, [r3, #2]
 801c1f4:	461a      	mov	r2, r3
 801c1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c1f8:	fb02 f303 	mul.w	r3, r2, r3
 801c1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801c204:	b29a      	uxth	r2, r3
 801c206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c208:	815a      	strh	r2, [r3, #10]
 801c20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c20c:	895b      	ldrh	r3, [r3, #10]
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d008      	beq.n	801c224 <find_volume+0x270>
 801c212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c214:	895b      	ldrh	r3, [r3, #10]
 801c216:	461a      	mov	r2, r3
 801c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c21a:	895b      	ldrh	r3, [r3, #10]
 801c21c:	3b01      	subs	r3, #1
 801c21e:	4013      	ands	r3, r2
 801c220:	2b00      	cmp	r3, #0
 801c222:	d001      	beq.n	801c228 <find_volume+0x274>
 801c224:	230d      	movs	r3, #13
 801c226:	e141      	b.n	801c4ac <find_volume+0x4f8>
 801c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c22a:	3338      	adds	r3, #56	; 0x38
 801c22c:	3311      	adds	r3, #17
 801c22e:	4618      	mov	r0, r3
 801c230:	f7fd fe16 	bl	8019e60 <ld_word>
 801c234:	4603      	mov	r3, r0
 801c236:	461a      	mov	r2, r3
 801c238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c23a:	811a      	strh	r2, [r3, #8]
 801c23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c23e:	891b      	ldrh	r3, [r3, #8]
 801c240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c242:	8992      	ldrh	r2, [r2, #12]
 801c244:	0952      	lsrs	r2, r2, #5
 801c246:	b292      	uxth	r2, r2
 801c248:	fbb3 f1f2 	udiv	r1, r3, r2
 801c24c:	fb02 f201 	mul.w	r2, r2, r1
 801c250:	1a9b      	subs	r3, r3, r2
 801c252:	b29b      	uxth	r3, r3
 801c254:	2b00      	cmp	r3, #0
 801c256:	d001      	beq.n	801c25c <find_volume+0x2a8>
 801c258:	230d      	movs	r3, #13
 801c25a:	e127      	b.n	801c4ac <find_volume+0x4f8>
 801c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c25e:	3338      	adds	r3, #56	; 0x38
 801c260:	3313      	adds	r3, #19
 801c262:	4618      	mov	r0, r3
 801c264:	f7fd fdfc 	bl	8019e60 <ld_word>
 801c268:	4603      	mov	r3, r0
 801c26a:	64bb      	str	r3, [r7, #72]	; 0x48
 801c26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d106      	bne.n	801c280 <find_volume+0x2cc>
 801c272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c274:	3338      	adds	r3, #56	; 0x38
 801c276:	3320      	adds	r3, #32
 801c278:	4618      	mov	r0, r3
 801c27a:	f7fd fe09 	bl	8019e90 <ld_dword>
 801c27e:	64b8      	str	r0, [r7, #72]	; 0x48
 801c280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c282:	3338      	adds	r3, #56	; 0x38
 801c284:	330e      	adds	r3, #14
 801c286:	4618      	mov	r0, r3
 801c288:	f7fd fdea 	bl	8019e60 <ld_word>
 801c28c:	4603      	mov	r3, r0
 801c28e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c290:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c292:	2b00      	cmp	r3, #0
 801c294:	d104      	bne.n	801c2a0 <find_volume+0x2ec>
 801c296:	230d      	movs	r3, #13
 801c298:	e108      	b.n	801c4ac <find_volume+0x4f8>
 801c29a:	bf00      	nop
 801c29c:	20000bc8 	.word	0x20000bc8
 801c2a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2a4:	4413      	add	r3, r2
 801c2a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c2a8:	8911      	ldrh	r1, [r2, #8]
 801c2aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c2ac:	8992      	ldrh	r2, [r2, #12]
 801c2ae:	0952      	lsrs	r2, r2, #5
 801c2b0:	b292      	uxth	r2, r2
 801c2b2:	fbb1 f2f2 	udiv	r2, r1, r2
 801c2b6:	b292      	uxth	r2, r2
 801c2b8:	4413      	add	r3, r2
 801c2ba:	62bb      	str	r3, [r7, #40]	; 0x28
 801c2bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2c0:	429a      	cmp	r2, r3
 801c2c2:	d201      	bcs.n	801c2c8 <find_volume+0x314>
 801c2c4:	230d      	movs	r3, #13
 801c2c6:	e0f1      	b.n	801c4ac <find_volume+0x4f8>
 801c2c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2cc:	1ad3      	subs	r3, r2, r3
 801c2ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c2d0:	8952      	ldrh	r2, [r2, #10]
 801c2d2:	fbb3 f3f2 	udiv	r3, r3, r2
 801c2d6:	627b      	str	r3, [r7, #36]	; 0x24
 801c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	d101      	bne.n	801c2e2 <find_volume+0x32e>
 801c2de:	230d      	movs	r3, #13
 801c2e0:	e0e4      	b.n	801c4ac <find_volume+0x4f8>
 801c2e2:	2303      	movs	r3, #3
 801c2e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801c2ee:	4293      	cmp	r3, r2
 801c2f0:	d802      	bhi.n	801c2f8 <find_volume+0x344>
 801c2f2:	2302      	movs	r3, #2
 801c2f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 801c2fe:	4293      	cmp	r3, r2
 801c300:	d802      	bhi.n	801c308 <find_volume+0x354>
 801c302:	2301      	movs	r3, #1
 801c304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c30a:	1c9a      	adds	r2, r3, #2
 801c30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c30e:	61da      	str	r2, [r3, #28]
 801c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c312:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c314:	625a      	str	r2, [r3, #36]	; 0x24
 801c316:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c31a:	441a      	add	r2, r3
 801c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c31e:	629a      	str	r2, [r3, #40]	; 0x28
 801c320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c324:	441a      	add	r2, r3
 801c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c328:	631a      	str	r2, [r3, #48]	; 0x30
 801c32a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c32e:	2b03      	cmp	r3, #3
 801c330:	d11e      	bne.n	801c370 <find_volume+0x3bc>
 801c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c334:	3338      	adds	r3, #56	; 0x38
 801c336:	332a      	adds	r3, #42	; 0x2a
 801c338:	4618      	mov	r0, r3
 801c33a:	f7fd fd91 	bl	8019e60 <ld_word>
 801c33e:	4603      	mov	r3, r0
 801c340:	2b00      	cmp	r3, #0
 801c342:	d001      	beq.n	801c348 <find_volume+0x394>
 801c344:	230d      	movs	r3, #13
 801c346:	e0b1      	b.n	801c4ac <find_volume+0x4f8>
 801c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c34a:	891b      	ldrh	r3, [r3, #8]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d001      	beq.n	801c354 <find_volume+0x3a0>
 801c350:	230d      	movs	r3, #13
 801c352:	e0ab      	b.n	801c4ac <find_volume+0x4f8>
 801c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c356:	3338      	adds	r3, #56	; 0x38
 801c358:	332c      	adds	r3, #44	; 0x2c
 801c35a:	4618      	mov	r0, r3
 801c35c:	f7fd fd98 	bl	8019e90 <ld_dword>
 801c360:	4602      	mov	r2, r0
 801c362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c364:	62da      	str	r2, [r3, #44]	; 0x2c
 801c366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c368:	69db      	ldr	r3, [r3, #28]
 801c36a:	009b      	lsls	r3, r3, #2
 801c36c:	647b      	str	r3, [r7, #68]	; 0x44
 801c36e:	e01f      	b.n	801c3b0 <find_volume+0x3fc>
 801c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c372:	891b      	ldrh	r3, [r3, #8]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d101      	bne.n	801c37c <find_volume+0x3c8>
 801c378:	230d      	movs	r3, #13
 801c37a:	e097      	b.n	801c4ac <find_volume+0x4f8>
 801c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c37e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c382:	441a      	add	r2, r3
 801c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c386:	62da      	str	r2, [r3, #44]	; 0x2c
 801c388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c38c:	2b02      	cmp	r3, #2
 801c38e:	d103      	bne.n	801c398 <find_volume+0x3e4>
 801c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c392:	69db      	ldr	r3, [r3, #28]
 801c394:	005b      	lsls	r3, r3, #1
 801c396:	e00a      	b.n	801c3ae <find_volume+0x3fa>
 801c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c39a:	69da      	ldr	r2, [r3, #28]
 801c39c:	4613      	mov	r3, r2
 801c39e:	005b      	lsls	r3, r3, #1
 801c3a0:	4413      	add	r3, r2
 801c3a2:	085a      	lsrs	r2, r3, #1
 801c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3a6:	69db      	ldr	r3, [r3, #28]
 801c3a8:	f003 0301 	and.w	r3, r3, #1
 801c3ac:	4413      	add	r3, r2
 801c3ae:	647b      	str	r3, [r7, #68]	; 0x44
 801c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3b2:	6a1a      	ldr	r2, [r3, #32]
 801c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3b6:	899b      	ldrh	r3, [r3, #12]
 801c3b8:	4619      	mov	r1, r3
 801c3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c3bc:	440b      	add	r3, r1
 801c3be:	3b01      	subs	r3, #1
 801c3c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c3c2:	8989      	ldrh	r1, [r1, #12]
 801c3c4:	fbb3 f3f1 	udiv	r3, r3, r1
 801c3c8:	429a      	cmp	r2, r3
 801c3ca:	d201      	bcs.n	801c3d0 <find_volume+0x41c>
 801c3cc:	230d      	movs	r3, #13
 801c3ce:	e06d      	b.n	801c4ac <find_volume+0x4f8>
 801c3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3d2:	f04f 32ff 	mov.w	r2, #4294967295
 801c3d6:	619a      	str	r2, [r3, #24]
 801c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3da:	699a      	ldr	r2, [r3, #24]
 801c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3de:	615a      	str	r2, [r3, #20]
 801c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3e2:	2280      	movs	r2, #128	; 0x80
 801c3e4:	711a      	strb	r2, [r3, #4]
 801c3e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c3ea:	2b03      	cmp	r3, #3
 801c3ec:	d149      	bne.n	801c482 <find_volume+0x4ce>
 801c3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3f0:	3338      	adds	r3, #56	; 0x38
 801c3f2:	3330      	adds	r3, #48	; 0x30
 801c3f4:	4618      	mov	r0, r3
 801c3f6:	f7fd fd33 	bl	8019e60 <ld_word>
 801c3fa:	4603      	mov	r3, r0
 801c3fc:	2b01      	cmp	r3, #1
 801c3fe:	d140      	bne.n	801c482 <find_volume+0x4ce>
 801c400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c402:	3301      	adds	r3, #1
 801c404:	4619      	mov	r1, r3
 801c406:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c408:	f7fd ffda 	bl	801a3c0 <move_window>
 801c40c:	4603      	mov	r3, r0
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d137      	bne.n	801c482 <find_volume+0x4ce>
 801c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c414:	2200      	movs	r2, #0
 801c416:	711a      	strb	r2, [r3, #4]
 801c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c41a:	3338      	adds	r3, #56	; 0x38
 801c41c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c420:	4618      	mov	r0, r3
 801c422:	f7fd fd1d 	bl	8019e60 <ld_word>
 801c426:	4603      	mov	r3, r0
 801c428:	461a      	mov	r2, r3
 801c42a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801c42e:	429a      	cmp	r2, r3
 801c430:	d127      	bne.n	801c482 <find_volume+0x4ce>
 801c432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c434:	3338      	adds	r3, #56	; 0x38
 801c436:	4618      	mov	r0, r3
 801c438:	f7fd fd2a 	bl	8019e90 <ld_dword>
 801c43c:	4602      	mov	r2, r0
 801c43e:	4b1d      	ldr	r3, [pc, #116]	; (801c4b4 <find_volume+0x500>)
 801c440:	429a      	cmp	r2, r3
 801c442:	d11e      	bne.n	801c482 <find_volume+0x4ce>
 801c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c446:	3338      	adds	r3, #56	; 0x38
 801c448:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801c44c:	4618      	mov	r0, r3
 801c44e:	f7fd fd1f 	bl	8019e90 <ld_dword>
 801c452:	4602      	mov	r2, r0
 801c454:	4b18      	ldr	r3, [pc, #96]	; (801c4b8 <find_volume+0x504>)
 801c456:	429a      	cmp	r2, r3
 801c458:	d113      	bne.n	801c482 <find_volume+0x4ce>
 801c45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c45c:	3338      	adds	r3, #56	; 0x38
 801c45e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801c462:	4618      	mov	r0, r3
 801c464:	f7fd fd14 	bl	8019e90 <ld_dword>
 801c468:	4602      	mov	r2, r0
 801c46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c46c:	619a      	str	r2, [r3, #24]
 801c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c470:	3338      	adds	r3, #56	; 0x38
 801c472:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801c476:	4618      	mov	r0, r3
 801c478:	f7fd fd0a 	bl	8019e90 <ld_dword>
 801c47c:	4602      	mov	r2, r0
 801c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c480:	615a      	str	r2, [r3, #20]
 801c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c484:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801c488:	701a      	strb	r2, [r3, #0]
 801c48a:	4b0c      	ldr	r3, [pc, #48]	; (801c4bc <find_volume+0x508>)
 801c48c:	881b      	ldrh	r3, [r3, #0]
 801c48e:	3301      	adds	r3, #1
 801c490:	b29a      	uxth	r2, r3
 801c492:	4b0a      	ldr	r3, [pc, #40]	; (801c4bc <find_volume+0x508>)
 801c494:	801a      	strh	r2, [r3, #0]
 801c496:	4b09      	ldr	r3, [pc, #36]	; (801c4bc <find_volume+0x508>)
 801c498:	881a      	ldrh	r2, [r3, #0]
 801c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c49c:	80da      	strh	r2, [r3, #6]
 801c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4a0:	4a07      	ldr	r2, [pc, #28]	; (801c4c0 <find_volume+0x50c>)
 801c4a2:	611a      	str	r2, [r3, #16]
 801c4a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c4a6:	f7fd ff23 	bl	801a2f0 <clear_lock>
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	4618      	mov	r0, r3
 801c4ae:	3758      	adds	r7, #88	; 0x58
 801c4b0:	46bd      	mov	sp, r7
 801c4b2:	bd80      	pop	{r7, pc}
 801c4b4:	41615252 	.word	0x41615252
 801c4b8:	61417272 	.word	0x61417272
 801c4bc:	20000bd4 	.word	0x20000bd4
 801c4c0:	20000bf8 	.word	0x20000bf8

0801c4c4 <validate>:
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b084      	sub	sp, #16
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
 801c4cc:	6039      	str	r1, [r7, #0]
 801c4ce:	2309      	movs	r3, #9
 801c4d0:	73fb      	strb	r3, [r7, #15]
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d01c      	beq.n	801c512 <validate+0x4e>
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d018      	beq.n	801c512 <validate+0x4e>
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	781b      	ldrb	r3, [r3, #0]
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d013      	beq.n	801c512 <validate+0x4e>
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	889a      	ldrh	r2, [r3, #4]
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	88db      	ldrh	r3, [r3, #6]
 801c4f4:	429a      	cmp	r2, r3
 801c4f6:	d10c      	bne.n	801c512 <validate+0x4e>
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	785b      	ldrb	r3, [r3, #1]
 801c4fe:	4618      	mov	r0, r3
 801c500:	f7fd fc10 	bl	8019d24 <disk_status>
 801c504:	4603      	mov	r3, r0
 801c506:	f003 0301 	and.w	r3, r3, #1
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d101      	bne.n	801c512 <validate+0x4e>
 801c50e:	2300      	movs	r3, #0
 801c510:	73fb      	strb	r3, [r7, #15]
 801c512:	7bfb      	ldrb	r3, [r7, #15]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d102      	bne.n	801c51e <validate+0x5a>
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	e000      	b.n	801c520 <validate+0x5c>
 801c51e:	2300      	movs	r3, #0
 801c520:	683a      	ldr	r2, [r7, #0]
 801c522:	6013      	str	r3, [r2, #0]
 801c524:	7bfb      	ldrb	r3, [r7, #15]
 801c526:	4618      	mov	r0, r3
 801c528:	3710      	adds	r7, #16
 801c52a:	46bd      	mov	sp, r7
 801c52c:	bd80      	pop	{r7, pc}
	...

0801c530 <f_mount>:
 801c530:	b580      	push	{r7, lr}
 801c532:	b088      	sub	sp, #32
 801c534:	af00      	add	r7, sp, #0
 801c536:	60f8      	str	r0, [r7, #12]
 801c538:	60b9      	str	r1, [r7, #8]
 801c53a:	4613      	mov	r3, r2
 801c53c:	71fb      	strb	r3, [r7, #7]
 801c53e:	68bb      	ldr	r3, [r7, #8]
 801c540:	613b      	str	r3, [r7, #16]
 801c542:	f107 0310 	add.w	r3, r7, #16
 801c546:	4618      	mov	r0, r3
 801c548:	f7ff fc9a 	bl	801be80 <get_ldnumber>
 801c54c:	61f8      	str	r0, [r7, #28]
 801c54e:	69fb      	ldr	r3, [r7, #28]
 801c550:	2b00      	cmp	r3, #0
 801c552:	da01      	bge.n	801c558 <f_mount+0x28>
 801c554:	230b      	movs	r3, #11
 801c556:	e02b      	b.n	801c5b0 <f_mount+0x80>
 801c558:	4a17      	ldr	r2, [pc, #92]	; (801c5b8 <f_mount+0x88>)
 801c55a:	69fb      	ldr	r3, [r7, #28]
 801c55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c560:	61bb      	str	r3, [r7, #24]
 801c562:	69bb      	ldr	r3, [r7, #24]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d005      	beq.n	801c574 <f_mount+0x44>
 801c568:	69b8      	ldr	r0, [r7, #24]
 801c56a:	f7fd fec1 	bl	801a2f0 <clear_lock>
 801c56e:	69bb      	ldr	r3, [r7, #24]
 801c570:	2200      	movs	r2, #0
 801c572:	701a      	strb	r2, [r3, #0]
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d002      	beq.n	801c580 <f_mount+0x50>
 801c57a:	68fb      	ldr	r3, [r7, #12]
 801c57c:	2200      	movs	r2, #0
 801c57e:	701a      	strb	r2, [r3, #0]
 801c580:	68fa      	ldr	r2, [r7, #12]
 801c582:	490d      	ldr	r1, [pc, #52]	; (801c5b8 <f_mount+0x88>)
 801c584:	69fb      	ldr	r3, [r7, #28]
 801c586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d002      	beq.n	801c596 <f_mount+0x66>
 801c590:	79fb      	ldrb	r3, [r7, #7]
 801c592:	2b01      	cmp	r3, #1
 801c594:	d001      	beq.n	801c59a <f_mount+0x6a>
 801c596:	2300      	movs	r3, #0
 801c598:	e00a      	b.n	801c5b0 <f_mount+0x80>
 801c59a:	f107 010c 	add.w	r1, r7, #12
 801c59e:	f107 0308 	add.w	r3, r7, #8
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	4618      	mov	r0, r3
 801c5a6:	f7ff fd05 	bl	801bfb4 <find_volume>
 801c5aa:	4603      	mov	r3, r0
 801c5ac:	75fb      	strb	r3, [r7, #23]
 801c5ae:	7dfb      	ldrb	r3, [r7, #23]
 801c5b0:	4618      	mov	r0, r3
 801c5b2:	3720      	adds	r7, #32
 801c5b4:	46bd      	mov	sp, r7
 801c5b6:	bd80      	pop	{r7, pc}
 801c5b8:	20000bc8 	.word	0x20000bc8

0801c5bc <f_open>:
 801c5bc:	b580      	push	{r7, lr}
 801c5be:	b09a      	sub	sp, #104	; 0x68
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	60f8      	str	r0, [r7, #12]
 801c5c4:	60b9      	str	r1, [r7, #8]
 801c5c6:	4613      	mov	r3, r2
 801c5c8:	71fb      	strb	r3, [r7, #7]
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d101      	bne.n	801c5d4 <f_open+0x18>
 801c5d0:	2309      	movs	r3, #9
 801c5d2:	e1bb      	b.n	801c94c <f_open+0x390>
 801c5d4:	79fb      	ldrb	r3, [r7, #7]
 801c5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c5da:	71fb      	strb	r3, [r7, #7]
 801c5dc:	79fa      	ldrb	r2, [r7, #7]
 801c5de:	f107 0114 	add.w	r1, r7, #20
 801c5e2:	f107 0308 	add.w	r3, r7, #8
 801c5e6:	4618      	mov	r0, r3
 801c5e8:	f7ff fce4 	bl	801bfb4 <find_volume>
 801c5ec:	4603      	mov	r3, r0
 801c5ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c5f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	f040 819f 	bne.w	801c93a <f_open+0x37e>
 801c5fc:	697b      	ldr	r3, [r7, #20]
 801c5fe:	61bb      	str	r3, [r7, #24]
 801c600:	68ba      	ldr	r2, [r7, #8]
 801c602:	f107 0318 	add.w	r3, r7, #24
 801c606:	4611      	mov	r1, r2
 801c608:	4618      	mov	r0, r3
 801c60a:	f7ff fbc3 	bl	801bd94 <follow_path>
 801c60e:	4603      	mov	r3, r0
 801c610:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d11a      	bne.n	801c652 <f_open+0x96>
 801c61c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801c620:	b25b      	sxtb	r3, r3
 801c622:	2b00      	cmp	r3, #0
 801c624:	da03      	bge.n	801c62e <f_open+0x72>
 801c626:	2306      	movs	r3, #6
 801c628:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c62c:	e011      	b.n	801c652 <f_open+0x96>
 801c62e:	79fb      	ldrb	r3, [r7, #7]
 801c630:	f023 0301 	bic.w	r3, r3, #1
 801c634:	2b00      	cmp	r3, #0
 801c636:	bf14      	ite	ne
 801c638:	2301      	movne	r3, #1
 801c63a:	2300      	moveq	r3, #0
 801c63c:	b2db      	uxtb	r3, r3
 801c63e:	461a      	mov	r2, r3
 801c640:	f107 0318 	add.w	r3, r7, #24
 801c644:	4611      	mov	r1, r2
 801c646:	4618      	mov	r0, r3
 801c648:	f7fd fd0a 	bl	801a060 <chk_lock>
 801c64c:	4603      	mov	r3, r0
 801c64e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c652:	79fb      	ldrb	r3, [r7, #7]
 801c654:	f003 031c 	and.w	r3, r3, #28
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d07f      	beq.n	801c75c <f_open+0x1a0>
 801c65c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c660:	2b00      	cmp	r3, #0
 801c662:	d017      	beq.n	801c694 <f_open+0xd8>
 801c664:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c668:	2b04      	cmp	r3, #4
 801c66a:	d10e      	bne.n	801c68a <f_open+0xce>
 801c66c:	f7fd fd54 	bl	801a118 <enq_lock>
 801c670:	4603      	mov	r3, r0
 801c672:	2b00      	cmp	r3, #0
 801c674:	d006      	beq.n	801c684 <f_open+0xc8>
 801c676:	f107 0318 	add.w	r3, r7, #24
 801c67a:	4618      	mov	r0, r3
 801c67c:	f7fe ffb2 	bl	801b5e4 <dir_register>
 801c680:	4603      	mov	r3, r0
 801c682:	e000      	b.n	801c686 <f_open+0xca>
 801c684:	2312      	movs	r3, #18
 801c686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c68a:	79fb      	ldrb	r3, [r7, #7]
 801c68c:	f043 0308 	orr.w	r3, r3, #8
 801c690:	71fb      	strb	r3, [r7, #7]
 801c692:	e010      	b.n	801c6b6 <f_open+0xfa>
 801c694:	7fbb      	ldrb	r3, [r7, #30]
 801c696:	f003 0311 	and.w	r3, r3, #17
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d003      	beq.n	801c6a6 <f_open+0xea>
 801c69e:	2307      	movs	r3, #7
 801c6a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c6a4:	e007      	b.n	801c6b6 <f_open+0xfa>
 801c6a6:	79fb      	ldrb	r3, [r7, #7]
 801c6a8:	f003 0304 	and.w	r3, r3, #4
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d002      	beq.n	801c6b6 <f_open+0xfa>
 801c6b0:	2308      	movs	r3, #8
 801c6b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c6b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d168      	bne.n	801c790 <f_open+0x1d4>
 801c6be:	79fb      	ldrb	r3, [r7, #7]
 801c6c0:	f003 0308 	and.w	r3, r3, #8
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d063      	beq.n	801c790 <f_open+0x1d4>
 801c6c8:	f7fa f928 	bl	801691c <get_fattime>
 801c6cc:	65b8      	str	r0, [r7, #88]	; 0x58
 801c6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6d0:	330e      	adds	r3, #14
 801c6d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c6d4:	4618      	mov	r0, r3
 801c6d6:	f7fd fc19 	bl	8019f0c <st_dword>
 801c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6dc:	3316      	adds	r3, #22
 801c6de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	f7fd fc13 	bl	8019f0c <st_dword>
 801c6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6e8:	330b      	adds	r3, #11
 801c6ea:	2220      	movs	r2, #32
 801c6ec:	701a      	strb	r2, [r3, #0]
 801c6ee:	697b      	ldr	r3, [r7, #20]
 801c6f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c6f2:	4611      	mov	r1, r2
 801c6f4:	4618      	mov	r0, r3
 801c6f6:	f7fe fbe2 	bl	801aebe <ld_clust>
 801c6fa:	6578      	str	r0, [r7, #84]	; 0x54
 801c6fc:	697b      	ldr	r3, [r7, #20]
 801c6fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c700:	2200      	movs	r2, #0
 801c702:	4618      	mov	r0, r3
 801c704:	f7fe fbfa 	bl	801aefc <st_clust>
 801c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c70a:	331c      	adds	r3, #28
 801c70c:	2100      	movs	r1, #0
 801c70e:	4618      	mov	r0, r3
 801c710:	f7fd fbfc 	bl	8019f0c <st_dword>
 801c714:	697b      	ldr	r3, [r7, #20]
 801c716:	2201      	movs	r2, #1
 801c718:	70da      	strb	r2, [r3, #3]
 801c71a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d037      	beq.n	801c790 <f_open+0x1d4>
 801c720:	697b      	ldr	r3, [r7, #20]
 801c722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c724:	65bb      	str	r3, [r7, #88]	; 0x58
 801c726:	f107 0318 	add.w	r3, r7, #24
 801c72a:	2200      	movs	r2, #0
 801c72c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c72e:	4618      	mov	r0, r3
 801c730:	f7fe f8ea 	bl	801a908 <remove_chain>
 801c734:	4603      	mov	r3, r0
 801c736:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c73a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d126      	bne.n	801c790 <f_open+0x1d4>
 801c742:	697b      	ldr	r3, [r7, #20]
 801c744:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c746:	4618      	mov	r0, r3
 801c748:	f7fd fe3a 	bl	801a3c0 <move_window>
 801c74c:	4603      	mov	r3, r0
 801c74e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c752:	697b      	ldr	r3, [r7, #20]
 801c754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c756:	3a01      	subs	r2, #1
 801c758:	615a      	str	r2, [r3, #20]
 801c75a:	e019      	b.n	801c790 <f_open+0x1d4>
 801c75c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c760:	2b00      	cmp	r3, #0
 801c762:	d115      	bne.n	801c790 <f_open+0x1d4>
 801c764:	7fbb      	ldrb	r3, [r7, #30]
 801c766:	f003 0310 	and.w	r3, r3, #16
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d003      	beq.n	801c776 <f_open+0x1ba>
 801c76e:	2304      	movs	r3, #4
 801c770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c774:	e00c      	b.n	801c790 <f_open+0x1d4>
 801c776:	79fb      	ldrb	r3, [r7, #7]
 801c778:	f003 0302 	and.w	r3, r3, #2
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d007      	beq.n	801c790 <f_open+0x1d4>
 801c780:	7fbb      	ldrb	r3, [r7, #30]
 801c782:	f003 0301 	and.w	r3, r3, #1
 801c786:	2b00      	cmp	r3, #0
 801c788:	d002      	beq.n	801c790 <f_open+0x1d4>
 801c78a:	2307      	movs	r3, #7
 801c78c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c790:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c794:	2b00      	cmp	r3, #0
 801c796:	d128      	bne.n	801c7ea <f_open+0x22e>
 801c798:	79fb      	ldrb	r3, [r7, #7]
 801c79a:	f003 0308 	and.w	r3, r3, #8
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d003      	beq.n	801c7aa <f_open+0x1ee>
 801c7a2:	79fb      	ldrb	r3, [r7, #7]
 801c7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c7a8:	71fb      	strb	r3, [r7, #7]
 801c7aa:	697b      	ldr	r3, [r7, #20]
 801c7ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	625a      	str	r2, [r3, #36]	; 0x24
 801c7b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	629a      	str	r2, [r3, #40]	; 0x28
 801c7b8:	79fb      	ldrb	r3, [r7, #7]
 801c7ba:	f023 0301 	bic.w	r3, r3, #1
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	bf14      	ite	ne
 801c7c2:	2301      	movne	r3, #1
 801c7c4:	2300      	moveq	r3, #0
 801c7c6:	b2db      	uxtb	r3, r3
 801c7c8:	461a      	mov	r2, r3
 801c7ca:	f107 0318 	add.w	r3, r7, #24
 801c7ce:	4611      	mov	r1, r2
 801c7d0:	4618      	mov	r0, r3
 801c7d2:	f7fd fcc3 	bl	801a15c <inc_lock>
 801c7d6:	4602      	mov	r2, r0
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	611a      	str	r2, [r3, #16]
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	691b      	ldr	r3, [r3, #16]
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d102      	bne.n	801c7ea <f_open+0x22e>
 801c7e4:	2302      	movs	r3, #2
 801c7e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c7ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	f040 80a3 	bne.w	801c93a <f_open+0x37e>
 801c7f4:	697b      	ldr	r3, [r7, #20]
 801c7f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c7f8:	4611      	mov	r1, r2
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	f7fe fb5f 	bl	801aebe <ld_clust>
 801c800:	4602      	mov	r2, r0
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	609a      	str	r2, [r3, #8]
 801c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c808:	331c      	adds	r3, #28
 801c80a:	4618      	mov	r0, r3
 801c80c:	f7fd fb40 	bl	8019e90 <ld_dword>
 801c810:	4602      	mov	r2, r0
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	60da      	str	r2, [r3, #12]
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	2200      	movs	r2, #0
 801c81a:	62da      	str	r2, [r3, #44]	; 0x2c
 801c81c:	697a      	ldr	r2, [r7, #20]
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	601a      	str	r2, [r3, #0]
 801c822:	697b      	ldr	r3, [r7, #20]
 801c824:	88da      	ldrh	r2, [r3, #6]
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	809a      	strh	r2, [r3, #4]
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	79fa      	ldrb	r2, [r7, #7]
 801c82e:	751a      	strb	r2, [r3, #20]
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	2200      	movs	r2, #0
 801c834:	755a      	strb	r2, [r3, #21]
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	2200      	movs	r2, #0
 801c83a:	621a      	str	r2, [r3, #32]
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	2200      	movs	r2, #0
 801c840:	619a      	str	r2, [r3, #24]
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	3330      	adds	r3, #48	; 0x30
 801c846:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801c84a:	2100      	movs	r1, #0
 801c84c:	4618      	mov	r0, r3
 801c84e:	f7fd fbaa 	bl	8019fa6 <mem_set>
 801c852:	79fb      	ldrb	r3, [r7, #7]
 801c854:	f003 0320 	and.w	r3, r3, #32
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d06e      	beq.n	801c93a <f_open+0x37e>
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	68db      	ldr	r3, [r3, #12]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d06a      	beq.n	801c93a <f_open+0x37e>
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	68da      	ldr	r2, [r3, #12]
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	619a      	str	r2, [r3, #24]
 801c86c:	697b      	ldr	r3, [r7, #20]
 801c86e:	895b      	ldrh	r3, [r3, #10]
 801c870:	461a      	mov	r2, r3
 801c872:	697b      	ldr	r3, [r7, #20]
 801c874:	899b      	ldrh	r3, [r3, #12]
 801c876:	fb03 f302 	mul.w	r3, r3, r2
 801c87a:	653b      	str	r3, [r7, #80]	; 0x50
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	689b      	ldr	r3, [r3, #8]
 801c880:	663b      	str	r3, [r7, #96]	; 0x60
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	68db      	ldr	r3, [r3, #12]
 801c886:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c888:	e016      	b.n	801c8b8 <f_open+0x2fc>
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c88e:	4618      	mov	r0, r3
 801c890:	f7fd fe53 	bl	801a53a <get_fat>
 801c894:	6638      	str	r0, [r7, #96]	; 0x60
 801c896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c898:	2b01      	cmp	r3, #1
 801c89a:	d802      	bhi.n	801c8a2 <f_open+0x2e6>
 801c89c:	2302      	movs	r3, #2
 801c89e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c8a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8a8:	d102      	bne.n	801c8b0 <f_open+0x2f4>
 801c8aa:	2301      	movs	r3, #1
 801c8ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c8b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c8b4:	1ad3      	subs	r3, r2, r3
 801c8b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c8b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d103      	bne.n	801c8c8 <f_open+0x30c>
 801c8c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c8c4:	429a      	cmp	r2, r3
 801c8c6:	d8e0      	bhi.n	801c88a <f_open+0x2ce>
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c8cc:	61da      	str	r2, [r3, #28]
 801c8ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d131      	bne.n	801c93a <f_open+0x37e>
 801c8d6:	697b      	ldr	r3, [r7, #20]
 801c8d8:	899b      	ldrh	r3, [r3, #12]
 801c8da:	461a      	mov	r2, r3
 801c8dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c8de:	fbb3 f1f2 	udiv	r1, r3, r2
 801c8e2:	fb02 f201 	mul.w	r2, r2, r1
 801c8e6:	1a9b      	subs	r3, r3, r2
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	d026      	beq.n	801c93a <f_open+0x37e>
 801c8ec:	697b      	ldr	r3, [r7, #20]
 801c8ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c8f0:	4618      	mov	r0, r3
 801c8f2:	f7fd fe03 	bl	801a4fc <clust2sect>
 801c8f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d103      	bne.n	801c906 <f_open+0x34a>
 801c8fe:	2302      	movs	r3, #2
 801c900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c904:	e019      	b.n	801c93a <f_open+0x37e>
 801c906:	697b      	ldr	r3, [r7, #20]
 801c908:	899b      	ldrh	r3, [r3, #12]
 801c90a:	461a      	mov	r2, r3
 801c90c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c90e:	fbb3 f2f2 	udiv	r2, r3, r2
 801c912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c914:	441a      	add	r2, r3
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	621a      	str	r2, [r3, #32]
 801c91a:	697b      	ldr	r3, [r7, #20]
 801c91c:	7858      	ldrb	r0, [r3, #1]
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	6a1a      	ldr	r2, [r3, #32]
 801c928:	2301      	movs	r3, #1
 801c92a:	f7fd fa3b 	bl	8019da4 <disk_read>
 801c92e:	4603      	mov	r3, r0
 801c930:	2b00      	cmp	r3, #0
 801c932:	d002      	beq.n	801c93a <f_open+0x37e>
 801c934:	2301      	movs	r3, #1
 801c936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801c93a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d002      	beq.n	801c948 <f_open+0x38c>
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	2200      	movs	r2, #0
 801c946:	601a      	str	r2, [r3, #0]
 801c948:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801c94c:	4618      	mov	r0, r3
 801c94e:	3768      	adds	r7, #104	; 0x68
 801c950:	46bd      	mov	sp, r7
 801c952:	bd80      	pop	{r7, pc}

0801c954 <f_write>:
 801c954:	b580      	push	{r7, lr}
 801c956:	b08c      	sub	sp, #48	; 0x30
 801c958:	af00      	add	r7, sp, #0
 801c95a:	60f8      	str	r0, [r7, #12]
 801c95c:	60b9      	str	r1, [r7, #8]
 801c95e:	607a      	str	r2, [r7, #4]
 801c960:	603b      	str	r3, [r7, #0]
 801c962:	68bb      	ldr	r3, [r7, #8]
 801c964:	61fb      	str	r3, [r7, #28]
 801c966:	683b      	ldr	r3, [r7, #0]
 801c968:	2200      	movs	r2, #0
 801c96a:	601a      	str	r2, [r3, #0]
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	f107 0210 	add.w	r2, r7, #16
 801c972:	4611      	mov	r1, r2
 801c974:	4618      	mov	r0, r3
 801c976:	f7ff fda5 	bl	801c4c4 <validate>
 801c97a:	4603      	mov	r3, r0
 801c97c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801c980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c984:	2b00      	cmp	r3, #0
 801c986:	d107      	bne.n	801c998 <f_write+0x44>
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	7d5b      	ldrb	r3, [r3, #21]
 801c98c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801c990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c994:	2b00      	cmp	r3, #0
 801c996:	d002      	beq.n	801c99e <f_write+0x4a>
 801c998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c99c:	e16a      	b.n	801cc74 <f_write+0x320>
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	7d1b      	ldrb	r3, [r3, #20]
 801c9a2:	f003 0302 	and.w	r3, r3, #2
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d101      	bne.n	801c9ae <f_write+0x5a>
 801c9aa:	2307      	movs	r3, #7
 801c9ac:	e162      	b.n	801cc74 <f_write+0x320>
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	699a      	ldr	r2, [r3, #24]
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	441a      	add	r2, r3
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	699b      	ldr	r3, [r3, #24]
 801c9ba:	429a      	cmp	r2, r3
 801c9bc:	f080 814c 	bcs.w	801cc58 <f_write+0x304>
 801c9c0:	68fb      	ldr	r3, [r7, #12]
 801c9c2:	699b      	ldr	r3, [r3, #24]
 801c9c4:	43db      	mvns	r3, r3
 801c9c6:	607b      	str	r3, [r7, #4]
 801c9c8:	e146      	b.n	801cc58 <f_write+0x304>
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	699b      	ldr	r3, [r3, #24]
 801c9ce:	693a      	ldr	r2, [r7, #16]
 801c9d0:	8992      	ldrh	r2, [r2, #12]
 801c9d2:	fbb3 f1f2 	udiv	r1, r3, r2
 801c9d6:	fb02 f201 	mul.w	r2, r2, r1
 801c9da:	1a9b      	subs	r3, r3, r2
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	f040 80f1 	bne.w	801cbc4 <f_write+0x270>
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	699b      	ldr	r3, [r3, #24]
 801c9e6:	693a      	ldr	r2, [r7, #16]
 801c9e8:	8992      	ldrh	r2, [r2, #12]
 801c9ea:	fbb3 f3f2 	udiv	r3, r3, r2
 801c9ee:	693a      	ldr	r2, [r7, #16]
 801c9f0:	8952      	ldrh	r2, [r2, #10]
 801c9f2:	3a01      	subs	r2, #1
 801c9f4:	4013      	ands	r3, r2
 801c9f6:	61bb      	str	r3, [r7, #24]
 801c9f8:	69bb      	ldr	r3, [r7, #24]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d143      	bne.n	801ca86 <f_write+0x132>
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	699b      	ldr	r3, [r3, #24]
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d10c      	bne.n	801ca20 <f_write+0xcc>
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	689b      	ldr	r3, [r3, #8]
 801ca0a:	62bb      	str	r3, [r7, #40]	; 0x28
 801ca0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d11a      	bne.n	801ca48 <f_write+0xf4>
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	2100      	movs	r1, #0
 801ca16:	4618      	mov	r0, r3
 801ca18:	f7fd ffdb 	bl	801a9d2 <create_chain>
 801ca1c:	62b8      	str	r0, [r7, #40]	; 0x28
 801ca1e:	e013      	b.n	801ca48 <f_write+0xf4>
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d007      	beq.n	801ca38 <f_write+0xe4>
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	699b      	ldr	r3, [r3, #24]
 801ca2c:	4619      	mov	r1, r3
 801ca2e:	68f8      	ldr	r0, [r7, #12]
 801ca30:	f7fe f867 	bl	801ab02 <clmt_clust>
 801ca34:	62b8      	str	r0, [r7, #40]	; 0x28
 801ca36:	e007      	b.n	801ca48 <f_write+0xf4>
 801ca38:	68fa      	ldr	r2, [r7, #12]
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	69db      	ldr	r3, [r3, #28]
 801ca3e:	4619      	mov	r1, r3
 801ca40:	4610      	mov	r0, r2
 801ca42:	f7fd ffc6 	bl	801a9d2 <create_chain>
 801ca46:	62b8      	str	r0, [r7, #40]	; 0x28
 801ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	f000 8109 	beq.w	801cc62 <f_write+0x30e>
 801ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca52:	2b01      	cmp	r3, #1
 801ca54:	d104      	bne.n	801ca60 <f_write+0x10c>
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	2202      	movs	r2, #2
 801ca5a:	755a      	strb	r2, [r3, #21]
 801ca5c:	2302      	movs	r3, #2
 801ca5e:	e109      	b.n	801cc74 <f_write+0x320>
 801ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca62:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca66:	d104      	bne.n	801ca72 <f_write+0x11e>
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	2201      	movs	r2, #1
 801ca6c:	755a      	strb	r2, [r3, #21]
 801ca6e:	2301      	movs	r3, #1
 801ca70:	e100      	b.n	801cc74 <f_write+0x320>
 801ca72:	68fb      	ldr	r3, [r7, #12]
 801ca74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca76:	61da      	str	r2, [r3, #28]
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	689b      	ldr	r3, [r3, #8]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d102      	bne.n	801ca86 <f_write+0x132>
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca84:	609a      	str	r2, [r3, #8]
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	7d1b      	ldrb	r3, [r3, #20]
 801ca8a:	b25b      	sxtb	r3, r3
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	da18      	bge.n	801cac2 <f_write+0x16e>
 801ca90:	693b      	ldr	r3, [r7, #16]
 801ca92:	7858      	ldrb	r0, [r3, #1]
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	6a1a      	ldr	r2, [r3, #32]
 801ca9e:	2301      	movs	r3, #1
 801caa0:	f7fd f9a0 	bl	8019de4 <disk_write>
 801caa4:	4603      	mov	r3, r0
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d004      	beq.n	801cab4 <f_write+0x160>
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	2201      	movs	r2, #1
 801caae:	755a      	strb	r2, [r3, #21]
 801cab0:	2301      	movs	r3, #1
 801cab2:	e0df      	b.n	801cc74 <f_write+0x320>
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	7d1b      	ldrb	r3, [r3, #20]
 801cab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cabc:	b2da      	uxtb	r2, r3
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	751a      	strb	r2, [r3, #20]
 801cac2:	693a      	ldr	r2, [r7, #16]
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	69db      	ldr	r3, [r3, #28]
 801cac8:	4619      	mov	r1, r3
 801caca:	4610      	mov	r0, r2
 801cacc:	f7fd fd16 	bl	801a4fc <clust2sect>
 801cad0:	6178      	str	r0, [r7, #20]
 801cad2:	697b      	ldr	r3, [r7, #20]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d104      	bne.n	801cae2 <f_write+0x18e>
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	2202      	movs	r2, #2
 801cadc:	755a      	strb	r2, [r3, #21]
 801cade:	2302      	movs	r3, #2
 801cae0:	e0c8      	b.n	801cc74 <f_write+0x320>
 801cae2:	697a      	ldr	r2, [r7, #20]
 801cae4:	69bb      	ldr	r3, [r7, #24]
 801cae6:	4413      	add	r3, r2
 801cae8:	617b      	str	r3, [r7, #20]
 801caea:	693b      	ldr	r3, [r7, #16]
 801caec:	899b      	ldrh	r3, [r3, #12]
 801caee:	461a      	mov	r2, r3
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	fbb3 f3f2 	udiv	r3, r3, r2
 801caf6:	623b      	str	r3, [r7, #32]
 801caf8:	6a3b      	ldr	r3, [r7, #32]
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d043      	beq.n	801cb86 <f_write+0x232>
 801cafe:	69ba      	ldr	r2, [r7, #24]
 801cb00:	6a3b      	ldr	r3, [r7, #32]
 801cb02:	4413      	add	r3, r2
 801cb04:	693a      	ldr	r2, [r7, #16]
 801cb06:	8952      	ldrh	r2, [r2, #10]
 801cb08:	4293      	cmp	r3, r2
 801cb0a:	d905      	bls.n	801cb18 <f_write+0x1c4>
 801cb0c:	693b      	ldr	r3, [r7, #16]
 801cb0e:	895b      	ldrh	r3, [r3, #10]
 801cb10:	461a      	mov	r2, r3
 801cb12:	69bb      	ldr	r3, [r7, #24]
 801cb14:	1ad3      	subs	r3, r2, r3
 801cb16:	623b      	str	r3, [r7, #32]
 801cb18:	693b      	ldr	r3, [r7, #16]
 801cb1a:	7858      	ldrb	r0, [r3, #1]
 801cb1c:	6a3b      	ldr	r3, [r7, #32]
 801cb1e:	697a      	ldr	r2, [r7, #20]
 801cb20:	69f9      	ldr	r1, [r7, #28]
 801cb22:	f7fd f95f 	bl	8019de4 <disk_write>
 801cb26:	4603      	mov	r3, r0
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d004      	beq.n	801cb36 <f_write+0x1e2>
 801cb2c:	68fb      	ldr	r3, [r7, #12]
 801cb2e:	2201      	movs	r2, #1
 801cb30:	755a      	strb	r2, [r3, #21]
 801cb32:	2301      	movs	r3, #1
 801cb34:	e09e      	b.n	801cc74 <f_write+0x320>
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	6a1a      	ldr	r2, [r3, #32]
 801cb3a:	697b      	ldr	r3, [r7, #20]
 801cb3c:	1ad3      	subs	r3, r2, r3
 801cb3e:	6a3a      	ldr	r2, [r7, #32]
 801cb40:	429a      	cmp	r2, r3
 801cb42:	d918      	bls.n	801cb76 <f_write+0x222>
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801cb4a:	68fb      	ldr	r3, [r7, #12]
 801cb4c:	6a1a      	ldr	r2, [r3, #32]
 801cb4e:	697b      	ldr	r3, [r7, #20]
 801cb50:	1ad3      	subs	r3, r2, r3
 801cb52:	693a      	ldr	r2, [r7, #16]
 801cb54:	8992      	ldrh	r2, [r2, #12]
 801cb56:	fb02 f303 	mul.w	r3, r2, r3
 801cb5a:	69fa      	ldr	r2, [r7, #28]
 801cb5c:	18d1      	adds	r1, r2, r3
 801cb5e:	693b      	ldr	r3, [r7, #16]
 801cb60:	899b      	ldrh	r3, [r3, #12]
 801cb62:	461a      	mov	r2, r3
 801cb64:	f7fd f9fe 	bl	8019f64 <mem_cpy>
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	7d1b      	ldrb	r3, [r3, #20]
 801cb6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cb70:	b2da      	uxtb	r2, r3
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	751a      	strb	r2, [r3, #20]
 801cb76:	693b      	ldr	r3, [r7, #16]
 801cb78:	899b      	ldrh	r3, [r3, #12]
 801cb7a:	461a      	mov	r2, r3
 801cb7c:	6a3b      	ldr	r3, [r7, #32]
 801cb7e:	fb02 f303 	mul.w	r3, r2, r3
 801cb82:	627b      	str	r3, [r7, #36]	; 0x24
 801cb84:	e04b      	b.n	801cc1e <f_write+0x2ca>
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	6a1b      	ldr	r3, [r3, #32]
 801cb8a:	697a      	ldr	r2, [r7, #20]
 801cb8c:	429a      	cmp	r2, r3
 801cb8e:	d016      	beq.n	801cbbe <f_write+0x26a>
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	699a      	ldr	r2, [r3, #24]
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	68db      	ldr	r3, [r3, #12]
 801cb98:	429a      	cmp	r2, r3
 801cb9a:	d210      	bcs.n	801cbbe <f_write+0x26a>
 801cb9c:	693b      	ldr	r3, [r7, #16]
 801cb9e:	7858      	ldrb	r0, [r3, #1]
 801cba0:	68fb      	ldr	r3, [r7, #12]
 801cba2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cba6:	2301      	movs	r3, #1
 801cba8:	697a      	ldr	r2, [r7, #20]
 801cbaa:	f7fd f8fb 	bl	8019da4 <disk_read>
 801cbae:	4603      	mov	r3, r0
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d004      	beq.n	801cbbe <f_write+0x26a>
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	2201      	movs	r2, #1
 801cbb8:	755a      	strb	r2, [r3, #21]
 801cbba:	2301      	movs	r3, #1
 801cbbc:	e05a      	b.n	801cc74 <f_write+0x320>
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	697a      	ldr	r2, [r7, #20]
 801cbc2:	621a      	str	r2, [r3, #32]
 801cbc4:	693b      	ldr	r3, [r7, #16]
 801cbc6:	899b      	ldrh	r3, [r3, #12]
 801cbc8:	4618      	mov	r0, r3
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	699b      	ldr	r3, [r3, #24]
 801cbce:	693a      	ldr	r2, [r7, #16]
 801cbd0:	8992      	ldrh	r2, [r2, #12]
 801cbd2:	fbb3 f1f2 	udiv	r1, r3, r2
 801cbd6:	fb02 f201 	mul.w	r2, r2, r1
 801cbda:	1a9b      	subs	r3, r3, r2
 801cbdc:	1ac3      	subs	r3, r0, r3
 801cbde:	627b      	str	r3, [r7, #36]	; 0x24
 801cbe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	429a      	cmp	r2, r3
 801cbe6:	d901      	bls.n	801cbec <f_write+0x298>
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	627b      	str	r3, [r7, #36]	; 0x24
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	699b      	ldr	r3, [r3, #24]
 801cbf6:	693a      	ldr	r2, [r7, #16]
 801cbf8:	8992      	ldrh	r2, [r2, #12]
 801cbfa:	fbb3 f0f2 	udiv	r0, r3, r2
 801cbfe:	fb02 f200 	mul.w	r2, r2, r0
 801cc02:	1a9b      	subs	r3, r3, r2
 801cc04:	440b      	add	r3, r1
 801cc06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cc08:	69f9      	ldr	r1, [r7, #28]
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	f7fd f9aa 	bl	8019f64 <mem_cpy>
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	7d1b      	ldrb	r3, [r3, #20]
 801cc14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801cc18:	b2da      	uxtb	r2, r3
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	751a      	strb	r2, [r3, #20]
 801cc1e:	69fa      	ldr	r2, [r7, #28]
 801cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc22:	4413      	add	r3, r2
 801cc24:	61fb      	str	r3, [r7, #28]
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	699a      	ldr	r2, [r3, #24]
 801cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc2c:	441a      	add	r2, r3
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	619a      	str	r2, [r3, #24]
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	68da      	ldr	r2, [r3, #12]
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	699b      	ldr	r3, [r3, #24]
 801cc3a:	429a      	cmp	r2, r3
 801cc3c:	bf38      	it	cc
 801cc3e:	461a      	movcc	r2, r3
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	60da      	str	r2, [r3, #12]
 801cc44:	683b      	ldr	r3, [r7, #0]
 801cc46:	681a      	ldr	r2, [r3, #0]
 801cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc4a:	441a      	add	r2, r3
 801cc4c:	683b      	ldr	r3, [r7, #0]
 801cc4e:	601a      	str	r2, [r3, #0]
 801cc50:	687a      	ldr	r2, [r7, #4]
 801cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc54:	1ad3      	subs	r3, r2, r3
 801cc56:	607b      	str	r3, [r7, #4]
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	f47f aeb5 	bne.w	801c9ca <f_write+0x76>
 801cc60:	e000      	b.n	801cc64 <f_write+0x310>
 801cc62:	bf00      	nop
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	7d1b      	ldrb	r3, [r3, #20]
 801cc68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc6c:	b2da      	uxtb	r2, r3
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	751a      	strb	r2, [r3, #20]
 801cc72:	2300      	movs	r3, #0
 801cc74:	4618      	mov	r0, r3
 801cc76:	3730      	adds	r7, #48	; 0x30
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	bd80      	pop	{r7, pc}

0801cc7c <f_sync>:
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	b086      	sub	sp, #24
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	f107 0208 	add.w	r2, r7, #8
 801cc8a:	4611      	mov	r1, r2
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	f7ff fc19 	bl	801c4c4 <validate>
 801cc92:	4603      	mov	r3, r0
 801cc94:	75fb      	strb	r3, [r7, #23]
 801cc96:	7dfb      	ldrb	r3, [r7, #23]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d168      	bne.n	801cd6e <f_sync+0xf2>
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	7d1b      	ldrb	r3, [r3, #20]
 801cca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d062      	beq.n	801cd6e <f_sync+0xf2>
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	7d1b      	ldrb	r3, [r3, #20]
 801ccac:	b25b      	sxtb	r3, r3
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	da15      	bge.n	801ccde <f_sync+0x62>
 801ccb2:	68bb      	ldr	r3, [r7, #8]
 801ccb4:	7858      	ldrb	r0, [r3, #1]
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	6a1a      	ldr	r2, [r3, #32]
 801ccc0:	2301      	movs	r3, #1
 801ccc2:	f7fd f88f 	bl	8019de4 <disk_write>
 801ccc6:	4603      	mov	r3, r0
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d001      	beq.n	801ccd0 <f_sync+0x54>
 801cccc:	2301      	movs	r3, #1
 801ccce:	e04f      	b.n	801cd70 <f_sync+0xf4>
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	7d1b      	ldrb	r3, [r3, #20]
 801ccd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ccd8:	b2da      	uxtb	r2, r3
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	751a      	strb	r2, [r3, #20]
 801ccde:	f7f9 fe1d 	bl	801691c <get_fattime>
 801cce2:	6138      	str	r0, [r7, #16]
 801cce4:	68ba      	ldr	r2, [r7, #8]
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccea:	4619      	mov	r1, r3
 801ccec:	4610      	mov	r0, r2
 801ccee:	f7fd fb67 	bl	801a3c0 <move_window>
 801ccf2:	4603      	mov	r3, r0
 801ccf4:	75fb      	strb	r3, [r7, #23]
 801ccf6:	7dfb      	ldrb	r3, [r7, #23]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d138      	bne.n	801cd6e <f_sync+0xf2>
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd00:	60fb      	str	r3, [r7, #12]
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	330b      	adds	r3, #11
 801cd06:	781a      	ldrb	r2, [r3, #0]
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	330b      	adds	r3, #11
 801cd0c:	f042 0220 	orr.w	r2, r2, #32
 801cd10:	b2d2      	uxtb	r2, r2
 801cd12:	701a      	strb	r2, [r3, #0]
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	6818      	ldr	r0, [r3, #0]
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	689b      	ldr	r3, [r3, #8]
 801cd1c:	461a      	mov	r2, r3
 801cd1e:	68f9      	ldr	r1, [r7, #12]
 801cd20:	f7fe f8ec 	bl	801aefc <st_clust>
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	f103 021c 	add.w	r2, r3, #28
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	68db      	ldr	r3, [r3, #12]
 801cd2e:	4619      	mov	r1, r3
 801cd30:	4610      	mov	r0, r2
 801cd32:	f7fd f8eb 	bl	8019f0c <st_dword>
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	3316      	adds	r3, #22
 801cd3a:	6939      	ldr	r1, [r7, #16]
 801cd3c:	4618      	mov	r0, r3
 801cd3e:	f7fd f8e5 	bl	8019f0c <st_dword>
 801cd42:	68fb      	ldr	r3, [r7, #12]
 801cd44:	3312      	adds	r3, #18
 801cd46:	2100      	movs	r1, #0
 801cd48:	4618      	mov	r0, r3
 801cd4a:	f7fd f8c4 	bl	8019ed6 <st_word>
 801cd4e:	68bb      	ldr	r3, [r7, #8]
 801cd50:	2201      	movs	r2, #1
 801cd52:	70da      	strb	r2, [r3, #3]
 801cd54:	68bb      	ldr	r3, [r7, #8]
 801cd56:	4618      	mov	r0, r3
 801cd58:	f7fd fb60 	bl	801a41c <sync_fs>
 801cd5c:	4603      	mov	r3, r0
 801cd5e:	75fb      	strb	r3, [r7, #23]
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	7d1b      	ldrb	r3, [r3, #20]
 801cd64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801cd68:	b2da      	uxtb	r2, r3
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	751a      	strb	r2, [r3, #20]
 801cd6e:	7dfb      	ldrb	r3, [r7, #23]
 801cd70:	4618      	mov	r0, r3
 801cd72:	3718      	adds	r7, #24
 801cd74:	46bd      	mov	sp, r7
 801cd76:	bd80      	pop	{r7, pc}

0801cd78 <f_close>:
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b084      	sub	sp, #16
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	6078      	str	r0, [r7, #4]
 801cd80:	6878      	ldr	r0, [r7, #4]
 801cd82:	f7ff ff7b 	bl	801cc7c <f_sync>
 801cd86:	4603      	mov	r3, r0
 801cd88:	73fb      	strb	r3, [r7, #15]
 801cd8a:	7bfb      	ldrb	r3, [r7, #15]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d118      	bne.n	801cdc2 <f_close+0x4a>
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	f107 0208 	add.w	r2, r7, #8
 801cd96:	4611      	mov	r1, r2
 801cd98:	4618      	mov	r0, r3
 801cd9a:	f7ff fb93 	bl	801c4c4 <validate>
 801cd9e:	4603      	mov	r3, r0
 801cda0:	73fb      	strb	r3, [r7, #15]
 801cda2:	7bfb      	ldrb	r3, [r7, #15]
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d10c      	bne.n	801cdc2 <f_close+0x4a>
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	691b      	ldr	r3, [r3, #16]
 801cdac:	4618      	mov	r0, r3
 801cdae:	f7fd fa63 	bl	801a278 <dec_lock>
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	73fb      	strb	r3, [r7, #15]
 801cdb6:	7bfb      	ldrb	r3, [r7, #15]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d102      	bne.n	801cdc2 <f_close+0x4a>
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2200      	movs	r2, #0
 801cdc0:	601a      	str	r2, [r3, #0]
 801cdc2:	7bfb      	ldrb	r3, [r7, #15]
 801cdc4:	4618      	mov	r0, r3
 801cdc6:	3710      	adds	r7, #16
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	bd80      	pop	{r7, pc}

0801cdcc <f_lseek>:
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b090      	sub	sp, #64	; 0x40
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	6078      	str	r0, [r7, #4]
 801cdd4:	6039      	str	r1, [r7, #0]
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	f107 0208 	add.w	r2, r7, #8
 801cddc:	4611      	mov	r1, r2
 801cdde:	4618      	mov	r0, r3
 801cde0:	f7ff fb70 	bl	801c4c4 <validate>
 801cde4:	4603      	mov	r3, r0
 801cde6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801cdea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d103      	bne.n	801cdfa <f_lseek+0x2e>
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	7d5b      	ldrb	r3, [r3, #21]
 801cdf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801cdfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d002      	beq.n	801ce08 <f_lseek+0x3c>
 801ce02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ce06:	e201      	b.n	801d20c <f_lseek+0x440>
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	f000 80d9 	beq.w	801cfc4 <f_lseek+0x1f8>
 801ce12:	683b      	ldr	r3, [r7, #0]
 801ce14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce18:	d15a      	bne.n	801ced0 <f_lseek+0x104>
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce1e:	627b      	str	r3, [r7, #36]	; 0x24
 801ce20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce22:	1d1a      	adds	r2, r3, #4
 801ce24:	627a      	str	r2, [r7, #36]	; 0x24
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	617b      	str	r3, [r7, #20]
 801ce2a:	2302      	movs	r3, #2
 801ce2c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	689b      	ldr	r3, [r3, #8]
 801ce32:	633b      	str	r3, [r7, #48]	; 0x30
 801ce34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d03a      	beq.n	801ceb0 <f_lseek+0xe4>
 801ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce3c:	613b      	str	r3, [r7, #16]
 801ce3e:	2300      	movs	r3, #0
 801ce40:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ce42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce44:	3302      	adds	r3, #2
 801ce46:	62bb      	str	r3, [r7, #40]	; 0x28
 801ce48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce4a:	60fb      	str	r3, [r7, #12]
 801ce4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce4e:	3301      	adds	r3, #1
 801ce50:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ce56:	4618      	mov	r0, r3
 801ce58:	f7fd fb6f 	bl	801a53a <get_fat>
 801ce5c:	6338      	str	r0, [r7, #48]	; 0x30
 801ce5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce60:	2b01      	cmp	r3, #1
 801ce62:	d804      	bhi.n	801ce6e <f_lseek+0xa2>
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	2202      	movs	r2, #2
 801ce68:	755a      	strb	r2, [r3, #21]
 801ce6a:	2302      	movs	r3, #2
 801ce6c:	e1ce      	b.n	801d20c <f_lseek+0x440>
 801ce6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce70:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce74:	d104      	bne.n	801ce80 <f_lseek+0xb4>
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	2201      	movs	r2, #1
 801ce7a:	755a      	strb	r2, [r3, #21]
 801ce7c:	2301      	movs	r3, #1
 801ce7e:	e1c5      	b.n	801d20c <f_lseek+0x440>
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	3301      	adds	r3, #1
 801ce84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce86:	429a      	cmp	r2, r3
 801ce88:	d0de      	beq.n	801ce48 <f_lseek+0x7c>
 801ce8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ce8c:	697b      	ldr	r3, [r7, #20]
 801ce8e:	429a      	cmp	r2, r3
 801ce90:	d809      	bhi.n	801cea6 <f_lseek+0xda>
 801ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce94:	1d1a      	adds	r2, r3, #4
 801ce96:	627a      	str	r2, [r7, #36]	; 0x24
 801ce98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ce9a:	601a      	str	r2, [r3, #0]
 801ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce9e:	1d1a      	adds	r2, r3, #4
 801cea0:	627a      	str	r2, [r7, #36]	; 0x24
 801cea2:	693a      	ldr	r2, [r7, #16]
 801cea4:	601a      	str	r2, [r3, #0]
 801cea6:	68bb      	ldr	r3, [r7, #8]
 801cea8:	69db      	ldr	r3, [r3, #28]
 801ceaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ceac:	429a      	cmp	r2, r3
 801ceae:	d3c4      	bcc.n	801ce3a <f_lseek+0x6e>
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ceb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ceb6:	601a      	str	r2, [r3, #0]
 801ceb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ceba:	697b      	ldr	r3, [r7, #20]
 801cebc:	429a      	cmp	r2, r3
 801cebe:	d803      	bhi.n	801cec8 <f_lseek+0xfc>
 801cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cec2:	2200      	movs	r2, #0
 801cec4:	601a      	str	r2, [r3, #0]
 801cec6:	e19f      	b.n	801d208 <f_lseek+0x43c>
 801cec8:	2311      	movs	r3, #17
 801ceca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801cece:	e19b      	b.n	801d208 <f_lseek+0x43c>
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	68db      	ldr	r3, [r3, #12]
 801ced4:	683a      	ldr	r2, [r7, #0]
 801ced6:	429a      	cmp	r2, r3
 801ced8:	d902      	bls.n	801cee0 <f_lseek+0x114>
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	68db      	ldr	r3, [r3, #12]
 801cede:	603b      	str	r3, [r7, #0]
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	683a      	ldr	r2, [r7, #0]
 801cee4:	619a      	str	r2, [r3, #24]
 801cee6:	683b      	ldr	r3, [r7, #0]
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	f000 818d 	beq.w	801d208 <f_lseek+0x43c>
 801ceee:	683b      	ldr	r3, [r7, #0]
 801cef0:	3b01      	subs	r3, #1
 801cef2:	4619      	mov	r1, r3
 801cef4:	6878      	ldr	r0, [r7, #4]
 801cef6:	f7fd fe04 	bl	801ab02 <clmt_clust>
 801cefa:	4602      	mov	r2, r0
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	61da      	str	r2, [r3, #28]
 801cf00:	68ba      	ldr	r2, [r7, #8]
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	69db      	ldr	r3, [r3, #28]
 801cf06:	4619      	mov	r1, r3
 801cf08:	4610      	mov	r0, r2
 801cf0a:	f7fd faf7 	bl	801a4fc <clust2sect>
 801cf0e:	61b8      	str	r0, [r7, #24]
 801cf10:	69bb      	ldr	r3, [r7, #24]
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d104      	bne.n	801cf20 <f_lseek+0x154>
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	2202      	movs	r2, #2
 801cf1a:	755a      	strb	r2, [r3, #21]
 801cf1c:	2302      	movs	r3, #2
 801cf1e:	e175      	b.n	801d20c <f_lseek+0x440>
 801cf20:	683b      	ldr	r3, [r7, #0]
 801cf22:	3b01      	subs	r3, #1
 801cf24:	68ba      	ldr	r2, [r7, #8]
 801cf26:	8992      	ldrh	r2, [r2, #12]
 801cf28:	fbb3 f3f2 	udiv	r3, r3, r2
 801cf2c:	68ba      	ldr	r2, [r7, #8]
 801cf2e:	8952      	ldrh	r2, [r2, #10]
 801cf30:	3a01      	subs	r2, #1
 801cf32:	4013      	ands	r3, r2
 801cf34:	69ba      	ldr	r2, [r7, #24]
 801cf36:	4413      	add	r3, r2
 801cf38:	61bb      	str	r3, [r7, #24]
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	699b      	ldr	r3, [r3, #24]
 801cf3e:	68ba      	ldr	r2, [r7, #8]
 801cf40:	8992      	ldrh	r2, [r2, #12]
 801cf42:	fbb3 f1f2 	udiv	r1, r3, r2
 801cf46:	fb02 f201 	mul.w	r2, r2, r1
 801cf4a:	1a9b      	subs	r3, r3, r2
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	f000 815b 	beq.w	801d208 <f_lseek+0x43c>
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	6a1b      	ldr	r3, [r3, #32]
 801cf56:	69ba      	ldr	r2, [r7, #24]
 801cf58:	429a      	cmp	r2, r3
 801cf5a:	f000 8155 	beq.w	801d208 <f_lseek+0x43c>
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	7d1b      	ldrb	r3, [r3, #20]
 801cf62:	b25b      	sxtb	r3, r3
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	da18      	bge.n	801cf9a <f_lseek+0x1ce>
 801cf68:	68bb      	ldr	r3, [r7, #8]
 801cf6a:	7858      	ldrb	r0, [r3, #1]
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	6a1a      	ldr	r2, [r3, #32]
 801cf76:	2301      	movs	r3, #1
 801cf78:	f7fc ff34 	bl	8019de4 <disk_write>
 801cf7c:	4603      	mov	r3, r0
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d004      	beq.n	801cf8c <f_lseek+0x1c0>
 801cf82:	687b      	ldr	r3, [r7, #4]
 801cf84:	2201      	movs	r2, #1
 801cf86:	755a      	strb	r2, [r3, #21]
 801cf88:	2301      	movs	r3, #1
 801cf8a:	e13f      	b.n	801d20c <f_lseek+0x440>
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	7d1b      	ldrb	r3, [r3, #20]
 801cf90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cf94:	b2da      	uxtb	r2, r3
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	751a      	strb	r2, [r3, #20]
 801cf9a:	68bb      	ldr	r3, [r7, #8]
 801cf9c:	7858      	ldrb	r0, [r3, #1]
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cfa4:	2301      	movs	r3, #1
 801cfa6:	69ba      	ldr	r2, [r7, #24]
 801cfa8:	f7fc fefc 	bl	8019da4 <disk_read>
 801cfac:	4603      	mov	r3, r0
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d004      	beq.n	801cfbc <f_lseek+0x1f0>
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	2201      	movs	r2, #1
 801cfb6:	755a      	strb	r2, [r3, #21]
 801cfb8:	2301      	movs	r3, #1
 801cfba:	e127      	b.n	801d20c <f_lseek+0x440>
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	69ba      	ldr	r2, [r7, #24]
 801cfc0:	621a      	str	r2, [r3, #32]
 801cfc2:	e121      	b.n	801d208 <f_lseek+0x43c>
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	68db      	ldr	r3, [r3, #12]
 801cfc8:	683a      	ldr	r2, [r7, #0]
 801cfca:	429a      	cmp	r2, r3
 801cfcc:	d908      	bls.n	801cfe0 <f_lseek+0x214>
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	7d1b      	ldrb	r3, [r3, #20]
 801cfd2:	f003 0302 	and.w	r3, r3, #2
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d102      	bne.n	801cfe0 <f_lseek+0x214>
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	68db      	ldr	r3, [r3, #12]
 801cfde:	603b      	str	r3, [r7, #0]
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	699b      	ldr	r3, [r3, #24]
 801cfe4:	623b      	str	r3, [r7, #32]
 801cfe6:	2300      	movs	r3, #0
 801cfe8:	637b      	str	r3, [r7, #52]	; 0x34
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cfee:	619a      	str	r2, [r3, #24]
 801cff0:	683b      	ldr	r3, [r7, #0]
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	f000 80b5 	beq.w	801d162 <f_lseek+0x396>
 801cff8:	68bb      	ldr	r3, [r7, #8]
 801cffa:	895b      	ldrh	r3, [r3, #10]
 801cffc:	461a      	mov	r2, r3
 801cffe:	68bb      	ldr	r3, [r7, #8]
 801d000:	899b      	ldrh	r3, [r3, #12]
 801d002:	fb03 f302 	mul.w	r3, r3, r2
 801d006:	61fb      	str	r3, [r7, #28]
 801d008:	6a3b      	ldr	r3, [r7, #32]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d01b      	beq.n	801d046 <f_lseek+0x27a>
 801d00e:	683b      	ldr	r3, [r7, #0]
 801d010:	1e5a      	subs	r2, r3, #1
 801d012:	69fb      	ldr	r3, [r7, #28]
 801d014:	fbb2 f2f3 	udiv	r2, r2, r3
 801d018:	6a3b      	ldr	r3, [r7, #32]
 801d01a:	1e59      	subs	r1, r3, #1
 801d01c:	69fb      	ldr	r3, [r7, #28]
 801d01e:	fbb1 f3f3 	udiv	r3, r1, r3
 801d022:	429a      	cmp	r2, r3
 801d024:	d30f      	bcc.n	801d046 <f_lseek+0x27a>
 801d026:	6a3b      	ldr	r3, [r7, #32]
 801d028:	1e5a      	subs	r2, r3, #1
 801d02a:	69fb      	ldr	r3, [r7, #28]
 801d02c:	425b      	negs	r3, r3
 801d02e:	401a      	ands	r2, r3
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	619a      	str	r2, [r3, #24]
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	699b      	ldr	r3, [r3, #24]
 801d038:	683a      	ldr	r2, [r7, #0]
 801d03a:	1ad3      	subs	r3, r2, r3
 801d03c:	603b      	str	r3, [r7, #0]
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	69db      	ldr	r3, [r3, #28]
 801d042:	63bb      	str	r3, [r7, #56]	; 0x38
 801d044:	e022      	b.n	801d08c <f_lseek+0x2c0>
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	689b      	ldr	r3, [r3, #8]
 801d04a:	63bb      	str	r3, [r7, #56]	; 0x38
 801d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d119      	bne.n	801d086 <f_lseek+0x2ba>
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	2100      	movs	r1, #0
 801d056:	4618      	mov	r0, r3
 801d058:	f7fd fcbb 	bl	801a9d2 <create_chain>
 801d05c:	63b8      	str	r0, [r7, #56]	; 0x38
 801d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d060:	2b01      	cmp	r3, #1
 801d062:	d104      	bne.n	801d06e <f_lseek+0x2a2>
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	2202      	movs	r2, #2
 801d068:	755a      	strb	r2, [r3, #21]
 801d06a:	2302      	movs	r3, #2
 801d06c:	e0ce      	b.n	801d20c <f_lseek+0x440>
 801d06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d070:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d074:	d104      	bne.n	801d080 <f_lseek+0x2b4>
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	2201      	movs	r2, #1
 801d07a:	755a      	strb	r2, [r3, #21]
 801d07c:	2301      	movs	r3, #1
 801d07e:	e0c5      	b.n	801d20c <f_lseek+0x440>
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d084:	609a      	str	r2, [r3, #8]
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d08a:	61da      	str	r2, [r3, #28]
 801d08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d067      	beq.n	801d162 <f_lseek+0x396>
 801d092:	e03a      	b.n	801d10a <f_lseek+0x33e>
 801d094:	683a      	ldr	r2, [r7, #0]
 801d096:	69fb      	ldr	r3, [r7, #28]
 801d098:	1ad3      	subs	r3, r2, r3
 801d09a:	603b      	str	r3, [r7, #0]
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	699a      	ldr	r2, [r3, #24]
 801d0a0:	69fb      	ldr	r3, [r7, #28]
 801d0a2:	441a      	add	r2, r3
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	619a      	str	r2, [r3, #24]
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	7d1b      	ldrb	r3, [r3, #20]
 801d0ac:	f003 0302 	and.w	r3, r3, #2
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d00b      	beq.n	801d0cc <f_lseek+0x300>
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	f7fd fc8a 	bl	801a9d2 <create_chain>
 801d0be:	63b8      	str	r0, [r7, #56]	; 0x38
 801d0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d108      	bne.n	801d0d8 <f_lseek+0x30c>
 801d0c6:	2300      	movs	r3, #0
 801d0c8:	603b      	str	r3, [r7, #0]
 801d0ca:	e022      	b.n	801d112 <f_lseek+0x346>
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	f7fd fa32 	bl	801a53a <get_fat>
 801d0d6:	63b8      	str	r0, [r7, #56]	; 0x38
 801d0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d0de:	d104      	bne.n	801d0ea <f_lseek+0x31e>
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	2201      	movs	r2, #1
 801d0e4:	755a      	strb	r2, [r3, #21]
 801d0e6:	2301      	movs	r3, #1
 801d0e8:	e090      	b.n	801d20c <f_lseek+0x440>
 801d0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0ec:	2b01      	cmp	r3, #1
 801d0ee:	d904      	bls.n	801d0fa <f_lseek+0x32e>
 801d0f0:	68bb      	ldr	r3, [r7, #8]
 801d0f2:	69db      	ldr	r3, [r3, #28]
 801d0f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d0f6:	429a      	cmp	r2, r3
 801d0f8:	d304      	bcc.n	801d104 <f_lseek+0x338>
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	2202      	movs	r2, #2
 801d0fe:	755a      	strb	r2, [r3, #21]
 801d100:	2302      	movs	r3, #2
 801d102:	e083      	b.n	801d20c <f_lseek+0x440>
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d108:	61da      	str	r2, [r3, #28]
 801d10a:	683a      	ldr	r2, [r7, #0]
 801d10c:	69fb      	ldr	r3, [r7, #28]
 801d10e:	429a      	cmp	r2, r3
 801d110:	d8c0      	bhi.n	801d094 <f_lseek+0x2c8>
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	699a      	ldr	r2, [r3, #24]
 801d116:	683b      	ldr	r3, [r7, #0]
 801d118:	441a      	add	r2, r3
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	619a      	str	r2, [r3, #24]
 801d11e:	68bb      	ldr	r3, [r7, #8]
 801d120:	899b      	ldrh	r3, [r3, #12]
 801d122:	461a      	mov	r2, r3
 801d124:	683b      	ldr	r3, [r7, #0]
 801d126:	fbb3 f1f2 	udiv	r1, r3, r2
 801d12a:	fb02 f201 	mul.w	r2, r2, r1
 801d12e:	1a9b      	subs	r3, r3, r2
 801d130:	2b00      	cmp	r3, #0
 801d132:	d016      	beq.n	801d162 <f_lseek+0x396>
 801d134:	68bb      	ldr	r3, [r7, #8]
 801d136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d138:	4618      	mov	r0, r3
 801d13a:	f7fd f9df 	bl	801a4fc <clust2sect>
 801d13e:	6378      	str	r0, [r7, #52]	; 0x34
 801d140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d142:	2b00      	cmp	r3, #0
 801d144:	d104      	bne.n	801d150 <f_lseek+0x384>
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	2202      	movs	r2, #2
 801d14a:	755a      	strb	r2, [r3, #21]
 801d14c:	2302      	movs	r3, #2
 801d14e:	e05d      	b.n	801d20c <f_lseek+0x440>
 801d150:	68bb      	ldr	r3, [r7, #8]
 801d152:	899b      	ldrh	r3, [r3, #12]
 801d154:	461a      	mov	r2, r3
 801d156:	683b      	ldr	r3, [r7, #0]
 801d158:	fbb3 f3f2 	udiv	r3, r3, r2
 801d15c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d15e:	4413      	add	r3, r2
 801d160:	637b      	str	r3, [r7, #52]	; 0x34
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	699a      	ldr	r2, [r3, #24]
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	68db      	ldr	r3, [r3, #12]
 801d16a:	429a      	cmp	r2, r3
 801d16c:	d90a      	bls.n	801d184 <f_lseek+0x3b8>
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	699a      	ldr	r2, [r3, #24]
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	60da      	str	r2, [r3, #12]
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	7d1b      	ldrb	r3, [r3, #20]
 801d17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d17e:	b2da      	uxtb	r2, r3
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	751a      	strb	r2, [r3, #20]
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	699b      	ldr	r3, [r3, #24]
 801d188:	68ba      	ldr	r2, [r7, #8]
 801d18a:	8992      	ldrh	r2, [r2, #12]
 801d18c:	fbb3 f1f2 	udiv	r1, r3, r2
 801d190:	fb02 f201 	mul.w	r2, r2, r1
 801d194:	1a9b      	subs	r3, r3, r2
 801d196:	2b00      	cmp	r3, #0
 801d198:	d036      	beq.n	801d208 <f_lseek+0x43c>
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	6a1b      	ldr	r3, [r3, #32]
 801d19e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d1a0:	429a      	cmp	r2, r3
 801d1a2:	d031      	beq.n	801d208 <f_lseek+0x43c>
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	7d1b      	ldrb	r3, [r3, #20]
 801d1a8:	b25b      	sxtb	r3, r3
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	da18      	bge.n	801d1e0 <f_lseek+0x414>
 801d1ae:	68bb      	ldr	r3, [r7, #8]
 801d1b0:	7858      	ldrb	r0, [r3, #1]
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	6a1a      	ldr	r2, [r3, #32]
 801d1bc:	2301      	movs	r3, #1
 801d1be:	f7fc fe11 	bl	8019de4 <disk_write>
 801d1c2:	4603      	mov	r3, r0
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d004      	beq.n	801d1d2 <f_lseek+0x406>
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	2201      	movs	r2, #1
 801d1cc:	755a      	strb	r2, [r3, #21]
 801d1ce:	2301      	movs	r3, #1
 801d1d0:	e01c      	b.n	801d20c <f_lseek+0x440>
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	7d1b      	ldrb	r3, [r3, #20]
 801d1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d1da:	b2da      	uxtb	r2, r3
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	751a      	strb	r2, [r3, #20]
 801d1e0:	68bb      	ldr	r3, [r7, #8]
 801d1e2:	7858      	ldrb	r0, [r3, #1]
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801d1ea:	2301      	movs	r3, #1
 801d1ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d1ee:	f7fc fdd9 	bl	8019da4 <disk_read>
 801d1f2:	4603      	mov	r3, r0
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d004      	beq.n	801d202 <f_lseek+0x436>
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	2201      	movs	r2, #1
 801d1fc:	755a      	strb	r2, [r3, #21]
 801d1fe:	2301      	movs	r3, #1
 801d200:	e004      	b.n	801d20c <f_lseek+0x440>
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d206:	621a      	str	r2, [r3, #32]
 801d208:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d20c:	4618      	mov	r0, r3
 801d20e:	3740      	adds	r7, #64	; 0x40
 801d210:	46bd      	mov	sp, r7
 801d212:	bd80      	pop	{r7, pc}

0801d214 <f_opendir>:
 801d214:	b580      	push	{r7, lr}
 801d216:	b086      	sub	sp, #24
 801d218:	af00      	add	r7, sp, #0
 801d21a:	6078      	str	r0, [r7, #4]
 801d21c:	6039      	str	r1, [r7, #0]
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	2b00      	cmp	r3, #0
 801d222:	d101      	bne.n	801d228 <f_opendir+0x14>
 801d224:	2309      	movs	r3, #9
 801d226:	e064      	b.n	801d2f2 <f_opendir+0xde>
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	613b      	str	r3, [r7, #16]
 801d22c:	f107 010c 	add.w	r1, r7, #12
 801d230:	463b      	mov	r3, r7
 801d232:	2200      	movs	r2, #0
 801d234:	4618      	mov	r0, r3
 801d236:	f7fe febd 	bl	801bfb4 <find_volume>
 801d23a:	4603      	mov	r3, r0
 801d23c:	75fb      	strb	r3, [r7, #23]
 801d23e:	7dfb      	ldrb	r3, [r7, #23]
 801d240:	2b00      	cmp	r3, #0
 801d242:	d14f      	bne.n	801d2e4 <f_opendir+0xd0>
 801d244:	68fa      	ldr	r2, [r7, #12]
 801d246:	693b      	ldr	r3, [r7, #16]
 801d248:	601a      	str	r2, [r3, #0]
 801d24a:	683b      	ldr	r3, [r7, #0]
 801d24c:	4619      	mov	r1, r3
 801d24e:	6878      	ldr	r0, [r7, #4]
 801d250:	f7fe fda0 	bl	801bd94 <follow_path>
 801d254:	4603      	mov	r3, r0
 801d256:	75fb      	strb	r3, [r7, #23]
 801d258:	7dfb      	ldrb	r3, [r7, #23]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d13d      	bne.n	801d2da <f_opendir+0xc6>
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801d264:	b25b      	sxtb	r3, r3
 801d266:	2b00      	cmp	r3, #0
 801d268:	db12      	blt.n	801d290 <f_opendir+0x7c>
 801d26a:	693b      	ldr	r3, [r7, #16]
 801d26c:	799b      	ldrb	r3, [r3, #6]
 801d26e:	f003 0310 	and.w	r3, r3, #16
 801d272:	2b00      	cmp	r3, #0
 801d274:	d00a      	beq.n	801d28c <f_opendir+0x78>
 801d276:	68fa      	ldr	r2, [r7, #12]
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	6a1b      	ldr	r3, [r3, #32]
 801d27c:	4619      	mov	r1, r3
 801d27e:	4610      	mov	r0, r2
 801d280:	f7fd fe1d 	bl	801aebe <ld_clust>
 801d284:	4602      	mov	r2, r0
 801d286:	693b      	ldr	r3, [r7, #16]
 801d288:	609a      	str	r2, [r3, #8]
 801d28a:	e001      	b.n	801d290 <f_opendir+0x7c>
 801d28c:	2305      	movs	r3, #5
 801d28e:	75fb      	strb	r3, [r7, #23]
 801d290:	7dfb      	ldrb	r3, [r7, #23]
 801d292:	2b00      	cmp	r3, #0
 801d294:	d121      	bne.n	801d2da <f_opendir+0xc6>
 801d296:	68fb      	ldr	r3, [r7, #12]
 801d298:	88da      	ldrh	r2, [r3, #6]
 801d29a:	693b      	ldr	r3, [r7, #16]
 801d29c:	809a      	strh	r2, [r3, #4]
 801d29e:	2100      	movs	r1, #0
 801d2a0:	6878      	ldr	r0, [r7, #4]
 801d2a2:	f7fd fc66 	bl	801ab72 <dir_sdi>
 801d2a6:	4603      	mov	r3, r0
 801d2a8:	75fb      	strb	r3, [r7, #23]
 801d2aa:	7dfb      	ldrb	r3, [r7, #23]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d114      	bne.n	801d2da <f_opendir+0xc6>
 801d2b0:	693b      	ldr	r3, [r7, #16]
 801d2b2:	689b      	ldr	r3, [r3, #8]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d00d      	beq.n	801d2d4 <f_opendir+0xc0>
 801d2b8:	2100      	movs	r1, #0
 801d2ba:	6878      	ldr	r0, [r7, #4]
 801d2bc:	f7fc ff4e 	bl	801a15c <inc_lock>
 801d2c0:	4602      	mov	r2, r0
 801d2c2:	693b      	ldr	r3, [r7, #16]
 801d2c4:	611a      	str	r2, [r3, #16]
 801d2c6:	693b      	ldr	r3, [r7, #16]
 801d2c8:	691b      	ldr	r3, [r3, #16]
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d105      	bne.n	801d2da <f_opendir+0xc6>
 801d2ce:	2312      	movs	r3, #18
 801d2d0:	75fb      	strb	r3, [r7, #23]
 801d2d2:	e002      	b.n	801d2da <f_opendir+0xc6>
 801d2d4:	693b      	ldr	r3, [r7, #16]
 801d2d6:	2200      	movs	r2, #0
 801d2d8:	611a      	str	r2, [r3, #16]
 801d2da:	7dfb      	ldrb	r3, [r7, #23]
 801d2dc:	2b04      	cmp	r3, #4
 801d2de:	d101      	bne.n	801d2e4 <f_opendir+0xd0>
 801d2e0:	2305      	movs	r3, #5
 801d2e2:	75fb      	strb	r3, [r7, #23]
 801d2e4:	7dfb      	ldrb	r3, [r7, #23]
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d002      	beq.n	801d2f0 <f_opendir+0xdc>
 801d2ea:	693b      	ldr	r3, [r7, #16]
 801d2ec:	2200      	movs	r2, #0
 801d2ee:	601a      	str	r2, [r3, #0]
 801d2f0:	7dfb      	ldrb	r3, [r7, #23]
 801d2f2:	4618      	mov	r0, r3
 801d2f4:	3718      	adds	r7, #24
 801d2f6:	46bd      	mov	sp, r7
 801d2f8:	bd80      	pop	{r7, pc}

0801d2fa <f_closedir>:
 801d2fa:	b580      	push	{r7, lr}
 801d2fc:	b084      	sub	sp, #16
 801d2fe:	af00      	add	r7, sp, #0
 801d300:	6078      	str	r0, [r7, #4]
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	f107 0208 	add.w	r2, r7, #8
 801d308:	4611      	mov	r1, r2
 801d30a:	4618      	mov	r0, r3
 801d30c:	f7ff f8da 	bl	801c4c4 <validate>
 801d310:	4603      	mov	r3, r0
 801d312:	73fb      	strb	r3, [r7, #15]
 801d314:	7bfb      	ldrb	r3, [r7, #15]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d110      	bne.n	801d33c <f_closedir+0x42>
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	691b      	ldr	r3, [r3, #16]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d006      	beq.n	801d330 <f_closedir+0x36>
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	691b      	ldr	r3, [r3, #16]
 801d326:	4618      	mov	r0, r3
 801d328:	f7fc ffa6 	bl	801a278 <dec_lock>
 801d32c:	4603      	mov	r3, r0
 801d32e:	73fb      	strb	r3, [r7, #15]
 801d330:	7bfb      	ldrb	r3, [r7, #15]
 801d332:	2b00      	cmp	r3, #0
 801d334:	d102      	bne.n	801d33c <f_closedir+0x42>
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	2200      	movs	r2, #0
 801d33a:	601a      	str	r2, [r3, #0]
 801d33c:	7bfb      	ldrb	r3, [r7, #15]
 801d33e:	4618      	mov	r0, r3
 801d340:	3710      	adds	r7, #16
 801d342:	46bd      	mov	sp, r7
 801d344:	bd80      	pop	{r7, pc}

0801d346 <f_readdir>:
 801d346:	b580      	push	{r7, lr}
 801d348:	b084      	sub	sp, #16
 801d34a:	af00      	add	r7, sp, #0
 801d34c:	6078      	str	r0, [r7, #4]
 801d34e:	6039      	str	r1, [r7, #0]
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	f107 0208 	add.w	r2, r7, #8
 801d356:	4611      	mov	r1, r2
 801d358:	4618      	mov	r0, r3
 801d35a:	f7ff f8b3 	bl	801c4c4 <validate>
 801d35e:	4603      	mov	r3, r0
 801d360:	73fb      	strb	r3, [r7, #15]
 801d362:	7bfb      	ldrb	r3, [r7, #15]
 801d364:	2b00      	cmp	r3, #0
 801d366:	d126      	bne.n	801d3b6 <f_readdir+0x70>
 801d368:	683b      	ldr	r3, [r7, #0]
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d106      	bne.n	801d37c <f_readdir+0x36>
 801d36e:	2100      	movs	r1, #0
 801d370:	6878      	ldr	r0, [r7, #4]
 801d372:	f7fd fbfe 	bl	801ab72 <dir_sdi>
 801d376:	4603      	mov	r3, r0
 801d378:	73fb      	strb	r3, [r7, #15]
 801d37a:	e01c      	b.n	801d3b6 <f_readdir+0x70>
 801d37c:	2100      	movs	r1, #0
 801d37e:	6878      	ldr	r0, [r7, #4]
 801d380:	f7fd ffc9 	bl	801b316 <dir_read>
 801d384:	4603      	mov	r3, r0
 801d386:	73fb      	strb	r3, [r7, #15]
 801d388:	7bfb      	ldrb	r3, [r7, #15]
 801d38a:	2b04      	cmp	r3, #4
 801d38c:	d101      	bne.n	801d392 <f_readdir+0x4c>
 801d38e:	2300      	movs	r3, #0
 801d390:	73fb      	strb	r3, [r7, #15]
 801d392:	7bfb      	ldrb	r3, [r7, #15]
 801d394:	2b00      	cmp	r3, #0
 801d396:	d10e      	bne.n	801d3b6 <f_readdir+0x70>
 801d398:	6839      	ldr	r1, [r7, #0]
 801d39a:	6878      	ldr	r0, [r7, #4]
 801d39c:	f7fe fa64 	bl	801b868 <get_fileinfo>
 801d3a0:	2100      	movs	r1, #0
 801d3a2:	6878      	ldr	r0, [r7, #4]
 801d3a4:	f7fd fc6e 	bl	801ac84 <dir_next>
 801d3a8:	4603      	mov	r3, r0
 801d3aa:	73fb      	strb	r3, [r7, #15]
 801d3ac:	7bfb      	ldrb	r3, [r7, #15]
 801d3ae:	2b04      	cmp	r3, #4
 801d3b0:	d101      	bne.n	801d3b6 <f_readdir+0x70>
 801d3b2:	2300      	movs	r3, #0
 801d3b4:	73fb      	strb	r3, [r7, #15]
 801d3b6:	7bfb      	ldrb	r3, [r7, #15]
 801d3b8:	4618      	mov	r0, r3
 801d3ba:	3710      	adds	r7, #16
 801d3bc:	46bd      	mov	sp, r7
 801d3be:	bd80      	pop	{r7, pc}

0801d3c0 <f_stat>:
 801d3c0:	b580      	push	{r7, lr}
 801d3c2:	b090      	sub	sp, #64	; 0x40
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
 801d3c8:	6039      	str	r1, [r7, #0]
 801d3ca:	f107 0108 	add.w	r1, r7, #8
 801d3ce:	1d3b      	adds	r3, r7, #4
 801d3d0:	2200      	movs	r2, #0
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f7fe fdee 	bl	801bfb4 <find_volume>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801d3de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d11f      	bne.n	801d426 <f_stat+0x66>
 801d3e6:	687a      	ldr	r2, [r7, #4]
 801d3e8:	f107 0308 	add.w	r3, r7, #8
 801d3ec:	4611      	mov	r1, r2
 801d3ee:	4618      	mov	r0, r3
 801d3f0:	f7fe fcd0 	bl	801bd94 <follow_path>
 801d3f4:	4603      	mov	r3, r0
 801d3f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801d3fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d111      	bne.n	801d426 <f_stat+0x66>
 801d402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d406:	b25b      	sxtb	r3, r3
 801d408:	2b00      	cmp	r3, #0
 801d40a:	da03      	bge.n	801d414 <f_stat+0x54>
 801d40c:	2306      	movs	r3, #6
 801d40e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801d412:	e008      	b.n	801d426 <f_stat+0x66>
 801d414:	683b      	ldr	r3, [r7, #0]
 801d416:	2b00      	cmp	r3, #0
 801d418:	d005      	beq.n	801d426 <f_stat+0x66>
 801d41a:	f107 0308 	add.w	r3, r7, #8
 801d41e:	6839      	ldr	r1, [r7, #0]
 801d420:	4618      	mov	r0, r3
 801d422:	f7fe fa21 	bl	801b868 <get_fileinfo>
 801d426:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d42a:	4618      	mov	r0, r3
 801d42c:	3740      	adds	r7, #64	; 0x40
 801d42e:	46bd      	mov	sp, r7
 801d430:	bd80      	pop	{r7, pc}

0801d432 <f_getfree>:
 801d432:	b580      	push	{r7, lr}
 801d434:	b092      	sub	sp, #72	; 0x48
 801d436:	af00      	add	r7, sp, #0
 801d438:	60f8      	str	r0, [r7, #12]
 801d43a:	60b9      	str	r1, [r7, #8]
 801d43c:	607a      	str	r2, [r7, #4]
 801d43e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801d442:	f107 030c 	add.w	r3, r7, #12
 801d446:	2200      	movs	r2, #0
 801d448:	4618      	mov	r0, r3
 801d44a:	f7fe fdb3 	bl	801bfb4 <find_volume>
 801d44e:	4603      	mov	r3, r0
 801d450:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801d454:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d458:	2b00      	cmp	r3, #0
 801d45a:	f040 8099 	bne.w	801d590 <f_getfree+0x15e>
 801d45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	601a      	str	r2, [r3, #0]
 801d464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d466:	699a      	ldr	r2, [r3, #24]
 801d468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d46a:	69db      	ldr	r3, [r3, #28]
 801d46c:	3b02      	subs	r3, #2
 801d46e:	429a      	cmp	r2, r3
 801d470:	d804      	bhi.n	801d47c <f_getfree+0x4a>
 801d472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d474:	699a      	ldr	r2, [r3, #24]
 801d476:	68bb      	ldr	r3, [r7, #8]
 801d478:	601a      	str	r2, [r3, #0]
 801d47a:	e089      	b.n	801d590 <f_getfree+0x15e>
 801d47c:	2300      	movs	r3, #0
 801d47e:	643b      	str	r3, [r7, #64]	; 0x40
 801d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d482:	781b      	ldrb	r3, [r3, #0]
 801d484:	2b01      	cmp	r3, #1
 801d486:	d128      	bne.n	801d4da <f_getfree+0xa8>
 801d488:	2302      	movs	r3, #2
 801d48a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d48e:	617b      	str	r3, [r7, #20]
 801d490:	f107 0314 	add.w	r3, r7, #20
 801d494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d496:	4618      	mov	r0, r3
 801d498:	f7fd f84f 	bl	801a53a <get_fat>
 801d49c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4a4:	d103      	bne.n	801d4ae <f_getfree+0x7c>
 801d4a6:	2301      	movs	r3, #1
 801d4a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801d4ac:	e063      	b.n	801d576 <f_getfree+0x144>
 801d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4b0:	2b01      	cmp	r3, #1
 801d4b2:	d103      	bne.n	801d4bc <f_getfree+0x8a>
 801d4b4:	2302      	movs	r3, #2
 801d4b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801d4ba:	e05c      	b.n	801d576 <f_getfree+0x144>
 801d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d102      	bne.n	801d4c8 <f_getfree+0x96>
 801d4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d4c4:	3301      	adds	r3, #1
 801d4c6:	643b      	str	r3, [r7, #64]	; 0x40
 801d4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d4ca:	3301      	adds	r3, #1
 801d4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4d0:	69db      	ldr	r3, [r3, #28]
 801d4d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d4d4:	429a      	cmp	r2, r3
 801d4d6:	d3db      	bcc.n	801d490 <f_getfree+0x5e>
 801d4d8:	e04d      	b.n	801d576 <f_getfree+0x144>
 801d4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4dc:	69db      	ldr	r3, [r3, #28]
 801d4de:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4e4:	63bb      	str	r3, [r7, #56]	; 0x38
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	637b      	str	r3, [r7, #52]	; 0x34
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	633b      	str	r3, [r7, #48]	; 0x30
 801d4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d113      	bne.n	801d51c <f_getfree+0xea>
 801d4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4f8:	1c5a      	adds	r2, r3, #1
 801d4fa:	63ba      	str	r2, [r7, #56]	; 0x38
 801d4fc:	4619      	mov	r1, r3
 801d4fe:	f7fc ff5f 	bl	801a3c0 <move_window>
 801d502:	4603      	mov	r3, r0
 801d504:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801d508:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d131      	bne.n	801d574 <f_getfree+0x142>
 801d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d512:	3338      	adds	r3, #56	; 0x38
 801d514:	633b      	str	r3, [r7, #48]	; 0x30
 801d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d518:	899b      	ldrh	r3, [r3, #12]
 801d51a:	637b      	str	r3, [r7, #52]	; 0x34
 801d51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d51e:	781b      	ldrb	r3, [r3, #0]
 801d520:	2b02      	cmp	r3, #2
 801d522:	d10f      	bne.n	801d544 <f_getfree+0x112>
 801d524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d526:	f7fc fc9b 	bl	8019e60 <ld_word>
 801d52a:	4603      	mov	r3, r0
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d102      	bne.n	801d536 <f_getfree+0x104>
 801d530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d532:	3301      	adds	r3, #1
 801d534:	643b      	str	r3, [r7, #64]	; 0x40
 801d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d538:	3302      	adds	r3, #2
 801d53a:	633b      	str	r3, [r7, #48]	; 0x30
 801d53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d53e:	3b02      	subs	r3, #2
 801d540:	637b      	str	r3, [r7, #52]	; 0x34
 801d542:	e010      	b.n	801d566 <f_getfree+0x134>
 801d544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d546:	f7fc fca3 	bl	8019e90 <ld_dword>
 801d54a:	4603      	mov	r3, r0
 801d54c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801d550:	2b00      	cmp	r3, #0
 801d552:	d102      	bne.n	801d55a <f_getfree+0x128>
 801d554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d556:	3301      	adds	r3, #1
 801d558:	643b      	str	r3, [r7, #64]	; 0x40
 801d55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d55c:	3304      	adds	r3, #4
 801d55e:	633b      	str	r3, [r7, #48]	; 0x30
 801d560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d562:	3b04      	subs	r3, #4
 801d564:	637b      	str	r3, [r7, #52]	; 0x34
 801d566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d568:	3b01      	subs	r3, #1
 801d56a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d1bd      	bne.n	801d4ee <f_getfree+0xbc>
 801d572:	e000      	b.n	801d576 <f_getfree+0x144>
 801d574:	bf00      	nop
 801d576:	68bb      	ldr	r3, [r7, #8]
 801d578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d57a:	601a      	str	r2, [r3, #0]
 801d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d57e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d580:	619a      	str	r2, [r3, #24]
 801d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d584:	791a      	ldrb	r2, [r3, #4]
 801d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d588:	f042 0201 	orr.w	r2, r2, #1
 801d58c:	b2d2      	uxtb	r2, r2
 801d58e:	711a      	strb	r2, [r3, #4]
 801d590:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801d594:	4618      	mov	r0, r3
 801d596:	3748      	adds	r7, #72	; 0x48
 801d598:	46bd      	mov	sp, r7
 801d59a:	bd80      	pop	{r7, pc}

0801d59c <f_unlink>:
 801d59c:	b580      	push	{r7, lr}
 801d59e:	b0a0      	sub	sp, #128	; 0x80
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	6078      	str	r0, [r7, #4]
 801d5a4:	2300      	movs	r3, #0
 801d5a6:	67bb      	str	r3, [r7, #120]	; 0x78
 801d5a8:	f107 010c 	add.w	r1, r7, #12
 801d5ac:	1d3b      	adds	r3, r7, #4
 801d5ae:	2202      	movs	r2, #2
 801d5b0:	4618      	mov	r0, r3
 801d5b2:	f7fe fcff 	bl	801bfb4 <find_volume>
 801d5b6:	4603      	mov	r3, r0
 801d5b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	647b      	str	r3, [r7, #68]	; 0x44
 801d5c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	f040 808e 	bne.w	801d6e6 <f_unlink+0x14a>
 801d5ca:	687a      	ldr	r2, [r7, #4]
 801d5cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d5d0:	4611      	mov	r1, r2
 801d5d2:	4618      	mov	r0, r3
 801d5d4:	f7fe fbde 	bl	801bd94 <follow_path>
 801d5d8:	4603      	mov	r3, r0
 801d5da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d5de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d108      	bne.n	801d5f8 <f_unlink+0x5c>
 801d5e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d5ea:	2102      	movs	r1, #2
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f7fc fd37 	bl	801a060 <chk_lock>
 801d5f2:	4603      	mov	r3, r0
 801d5f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d5f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d172      	bne.n	801d6e6 <f_unlink+0x14a>
 801d600:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d604:	b25b      	sxtb	r3, r3
 801d606:	2b00      	cmp	r3, #0
 801d608:	da03      	bge.n	801d612 <f_unlink+0x76>
 801d60a:	2306      	movs	r3, #6
 801d60c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d610:	e008      	b.n	801d624 <f_unlink+0x88>
 801d612:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801d616:	f003 0301 	and.w	r3, r3, #1
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d002      	beq.n	801d624 <f_unlink+0x88>
 801d61e:	2307      	movs	r3, #7
 801d620:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d624:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d134      	bne.n	801d696 <f_unlink+0xfa>
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d630:	4611      	mov	r1, r2
 801d632:	4618      	mov	r0, r3
 801d634:	f7fd fc43 	bl	801aebe <ld_clust>
 801d638:	67b8      	str	r0, [r7, #120]	; 0x78
 801d63a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801d63e:	f003 0310 	and.w	r3, r3, #16
 801d642:	2b00      	cmp	r3, #0
 801d644:	d027      	beq.n	801d696 <f_unlink+0xfa>
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	613b      	str	r3, [r7, #16]
 801d64a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d64c:	61bb      	str	r3, [r7, #24]
 801d64e:	f107 0310 	add.w	r3, r7, #16
 801d652:	2100      	movs	r1, #0
 801d654:	4618      	mov	r0, r3
 801d656:	f7fd fa8c 	bl	801ab72 <dir_sdi>
 801d65a:	4603      	mov	r3, r0
 801d65c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d660:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d664:	2b00      	cmp	r3, #0
 801d666:	d116      	bne.n	801d696 <f_unlink+0xfa>
 801d668:	f107 0310 	add.w	r3, r7, #16
 801d66c:	2100      	movs	r1, #0
 801d66e:	4618      	mov	r0, r3
 801d670:	f7fd fe51 	bl	801b316 <dir_read>
 801d674:	4603      	mov	r3, r0
 801d676:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d67a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d102      	bne.n	801d688 <f_unlink+0xec>
 801d682:	2307      	movs	r3, #7
 801d684:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d688:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d68c:	2b04      	cmp	r3, #4
 801d68e:	d102      	bne.n	801d696 <f_unlink+0xfa>
 801d690:	2300      	movs	r3, #0
 801d692:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d696:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d123      	bne.n	801d6e6 <f_unlink+0x14a>
 801d69e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	f7fe f896 	bl	801b7d4 <dir_remove>
 801d6a8:	4603      	mov	r3, r0
 801d6aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d6ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d10c      	bne.n	801d6d0 <f_unlink+0x134>
 801d6b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d009      	beq.n	801d6d0 <f_unlink+0x134>
 801d6bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d6c0:	2200      	movs	r2, #0
 801d6c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801d6c4:	4618      	mov	r0, r3
 801d6c6:	f7fd f91f 	bl	801a908 <remove_chain>
 801d6ca:	4603      	mov	r3, r0
 801d6cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d6d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d106      	bne.n	801d6e6 <f_unlink+0x14a>
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	4618      	mov	r0, r3
 801d6dc:	f7fc fe9e 	bl	801a41c <sync_fs>
 801d6e0:	4603      	mov	r3, r0
 801d6e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801d6e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	3780      	adds	r7, #128	; 0x80
 801d6ee:	46bd      	mov	sp, r7
 801d6f0:	bd80      	pop	{r7, pc}

0801d6f2 <putc_bfd>:
 801d6f2:	b580      	push	{r7, lr}
 801d6f4:	b084      	sub	sp, #16
 801d6f6:	af00      	add	r7, sp, #0
 801d6f8:	6078      	str	r0, [r7, #4]
 801d6fa:	460b      	mov	r3, r1
 801d6fc:	70fb      	strb	r3, [r7, #3]
 801d6fe:	78fb      	ldrb	r3, [r7, #3]
 801d700:	2b0a      	cmp	r3, #10
 801d702:	d103      	bne.n	801d70c <putc_bfd+0x1a>
 801d704:	210d      	movs	r1, #13
 801d706:	6878      	ldr	r0, [r7, #4]
 801d708:	f7ff fff3 	bl	801d6f2 <putc_bfd>
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	685b      	ldr	r3, [r3, #4]
 801d710:	60fb      	str	r3, [r7, #12]
 801d712:	68fb      	ldr	r3, [r7, #12]
 801d714:	2b00      	cmp	r3, #0
 801d716:	db25      	blt.n	801d764 <putc_bfd+0x72>
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	1c5a      	adds	r2, r3, #1
 801d71c:	60fa      	str	r2, [r7, #12]
 801d71e:	687a      	ldr	r2, [r7, #4]
 801d720:	4413      	add	r3, r2
 801d722:	78fa      	ldrb	r2, [r7, #3]
 801d724:	731a      	strb	r2, [r3, #12]
 801d726:	68fb      	ldr	r3, [r7, #12]
 801d728:	2b3c      	cmp	r3, #60	; 0x3c
 801d72a:	dd12      	ble.n	801d752 <putc_bfd+0x60>
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	6818      	ldr	r0, [r3, #0]
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	f103 010c 	add.w	r1, r3, #12
 801d736:	68fa      	ldr	r2, [r7, #12]
 801d738:	f107 0308 	add.w	r3, r7, #8
 801d73c:	f7ff f90a 	bl	801c954 <f_write>
 801d740:	68ba      	ldr	r2, [r7, #8]
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	429a      	cmp	r2, r3
 801d746:	d101      	bne.n	801d74c <putc_bfd+0x5a>
 801d748:	2300      	movs	r3, #0
 801d74a:	e001      	b.n	801d750 <putc_bfd+0x5e>
 801d74c:	f04f 33ff 	mov.w	r3, #4294967295
 801d750:	60fb      	str	r3, [r7, #12]
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	68fa      	ldr	r2, [r7, #12]
 801d756:	605a      	str	r2, [r3, #4]
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	689b      	ldr	r3, [r3, #8]
 801d75c:	1c5a      	adds	r2, r3, #1
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	609a      	str	r2, [r3, #8]
 801d762:	e000      	b.n	801d766 <putc_bfd+0x74>
 801d764:	bf00      	nop
 801d766:	3710      	adds	r7, #16
 801d768:	46bd      	mov	sp, r7
 801d76a:	bd80      	pop	{r7, pc}

0801d76c <putc_flush>:
 801d76c:	b580      	push	{r7, lr}
 801d76e:	b084      	sub	sp, #16
 801d770:	af00      	add	r7, sp, #0
 801d772:	6078      	str	r0, [r7, #4]
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	685b      	ldr	r3, [r3, #4]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	db17      	blt.n	801d7ac <putc_flush+0x40>
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	6818      	ldr	r0, [r3, #0]
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	f103 010c 	add.w	r1, r3, #12
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	685b      	ldr	r3, [r3, #4]
 801d78a:	461a      	mov	r2, r3
 801d78c:	f107 030c 	add.w	r3, r7, #12
 801d790:	f7ff f8e0 	bl	801c954 <f_write>
 801d794:	4603      	mov	r3, r0
 801d796:	2b00      	cmp	r3, #0
 801d798:	d108      	bne.n	801d7ac <putc_flush+0x40>
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	685b      	ldr	r3, [r3, #4]
 801d79e:	461a      	mov	r2, r3
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	429a      	cmp	r2, r3
 801d7a4:	d102      	bne.n	801d7ac <putc_flush+0x40>
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	689b      	ldr	r3, [r3, #8]
 801d7aa:	e001      	b.n	801d7b0 <putc_flush+0x44>
 801d7ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d7b0:	4618      	mov	r0, r3
 801d7b2:	3710      	adds	r7, #16
 801d7b4:	46bd      	mov	sp, r7
 801d7b6:	bd80      	pop	{r7, pc}

0801d7b8 <putc_init>:
 801d7b8:	b480      	push	{r7}
 801d7ba:	b083      	sub	sp, #12
 801d7bc:	af00      	add	r7, sp, #0
 801d7be:	6078      	str	r0, [r7, #4]
 801d7c0:	6039      	str	r1, [r7, #0]
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	683a      	ldr	r2, [r7, #0]
 801d7c6:	601a      	str	r2, [r3, #0]
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	2200      	movs	r2, #0
 801d7cc:	605a      	str	r2, [r3, #4]
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	685a      	ldr	r2, [r3, #4]
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	609a      	str	r2, [r3, #8]
 801d7d6:	bf00      	nop
 801d7d8:	370c      	adds	r7, #12
 801d7da:	46bd      	mov	sp, r7
 801d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7e0:	4770      	bx	lr

0801d7e2 <f_puts>:
 801d7e2:	b580      	push	{r7, lr}
 801d7e4:	b096      	sub	sp, #88	; 0x58
 801d7e6:	af00      	add	r7, sp, #0
 801d7e8:	6078      	str	r0, [r7, #4]
 801d7ea:	6039      	str	r1, [r7, #0]
 801d7ec:	f107 030c 	add.w	r3, r7, #12
 801d7f0:	6839      	ldr	r1, [r7, #0]
 801d7f2:	4618      	mov	r0, r3
 801d7f4:	f7ff ffe0 	bl	801d7b8 <putc_init>
 801d7f8:	e009      	b.n	801d80e <f_puts+0x2c>
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	1c5a      	adds	r2, r3, #1
 801d7fe:	607a      	str	r2, [r7, #4]
 801d800:	781a      	ldrb	r2, [r3, #0]
 801d802:	f107 030c 	add.w	r3, r7, #12
 801d806:	4611      	mov	r1, r2
 801d808:	4618      	mov	r0, r3
 801d80a:	f7ff ff72 	bl	801d6f2 <putc_bfd>
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	781b      	ldrb	r3, [r3, #0]
 801d812:	2b00      	cmp	r3, #0
 801d814:	d1f1      	bne.n	801d7fa <f_puts+0x18>
 801d816:	f107 030c 	add.w	r3, r7, #12
 801d81a:	4618      	mov	r0, r3
 801d81c:	f7ff ffa6 	bl	801d76c <putc_flush>
 801d820:	4603      	mov	r3, r0
 801d822:	4618      	mov	r0, r3
 801d824:	3758      	adds	r7, #88	; 0x58
 801d826:	46bd      	mov	sp, r7
 801d828:	bd80      	pop	{r7, pc}
	...

0801d82c <FATFS_LinkDriverEx>:
 801d82c:	b480      	push	{r7}
 801d82e:	b087      	sub	sp, #28
 801d830:	af00      	add	r7, sp, #0
 801d832:	60f8      	str	r0, [r7, #12]
 801d834:	60b9      	str	r1, [r7, #8]
 801d836:	4613      	mov	r3, r2
 801d838:	71fb      	strb	r3, [r7, #7]
 801d83a:	2301      	movs	r3, #1
 801d83c:	75fb      	strb	r3, [r7, #23]
 801d83e:	2300      	movs	r3, #0
 801d840:	75bb      	strb	r3, [r7, #22]
 801d842:	4b1f      	ldr	r3, [pc, #124]	; (801d8c0 <FATFS_LinkDriverEx+0x94>)
 801d844:	7cdb      	ldrb	r3, [r3, #19]
 801d846:	b2db      	uxtb	r3, r3
 801d848:	2b02      	cmp	r3, #2
 801d84a:	d831      	bhi.n	801d8b0 <FATFS_LinkDriverEx+0x84>
 801d84c:	4b1c      	ldr	r3, [pc, #112]	; (801d8c0 <FATFS_LinkDriverEx+0x94>)
 801d84e:	7cdb      	ldrb	r3, [r3, #19]
 801d850:	b2db      	uxtb	r3, r3
 801d852:	461a      	mov	r2, r3
 801d854:	4b1a      	ldr	r3, [pc, #104]	; (801d8c0 <FATFS_LinkDriverEx+0x94>)
 801d856:	2100      	movs	r1, #0
 801d858:	5499      	strb	r1, [r3, r2]
 801d85a:	4b19      	ldr	r3, [pc, #100]	; (801d8c0 <FATFS_LinkDriverEx+0x94>)
 801d85c:	7cdb      	ldrb	r3, [r3, #19]
 801d85e:	b2db      	uxtb	r3, r3
 801d860:	4a17      	ldr	r2, [pc, #92]	; (801d8c0 <FATFS_LinkDriverEx+0x94>)
 801d862:	009b      	lsls	r3, r3, #2
 801d864:	4413      	add	r3, r2
 801d866:	68fa      	ldr	r2, [r7, #12]
 801d868:	605a      	str	r2, [r3, #4]
 801d86a:	4b15      	ldr	r3, [pc, #84]	; (801d8c0 <FATFS_LinkDriverEx+0x94>)
 801d86c:	7cdb      	ldrb	r3, [r3, #19]
 801d86e:	b2db      	uxtb	r3, r3
 801d870:	461a      	mov	r2, r3
 801d872:	4b13      	ldr	r3, [pc, #76]	; (801d8c0 <FATFS_LinkDriverEx+0x94>)
 801d874:	4413      	add	r3, r2
 801d876:	79fa      	ldrb	r2, [r7, #7]
 801d878:	741a      	strb	r2, [r3, #16]
 801d87a:	4b11      	ldr	r3, [pc, #68]	; (801d8c0 <FATFS_LinkDriverEx+0x94>)
 801d87c:	7cdb      	ldrb	r3, [r3, #19]
 801d87e:	b2db      	uxtb	r3, r3
 801d880:	1c5a      	adds	r2, r3, #1
 801d882:	b2d1      	uxtb	r1, r2
 801d884:	4a0e      	ldr	r2, [pc, #56]	; (801d8c0 <FATFS_LinkDriverEx+0x94>)
 801d886:	74d1      	strb	r1, [r2, #19]
 801d888:	75bb      	strb	r3, [r7, #22]
 801d88a:	7dbb      	ldrb	r3, [r7, #22]
 801d88c:	3330      	adds	r3, #48	; 0x30
 801d88e:	b2da      	uxtb	r2, r3
 801d890:	68bb      	ldr	r3, [r7, #8]
 801d892:	701a      	strb	r2, [r3, #0]
 801d894:	68bb      	ldr	r3, [r7, #8]
 801d896:	3301      	adds	r3, #1
 801d898:	223a      	movs	r2, #58	; 0x3a
 801d89a:	701a      	strb	r2, [r3, #0]
 801d89c:	68bb      	ldr	r3, [r7, #8]
 801d89e:	3302      	adds	r3, #2
 801d8a0:	222f      	movs	r2, #47	; 0x2f
 801d8a2:	701a      	strb	r2, [r3, #0]
 801d8a4:	68bb      	ldr	r3, [r7, #8]
 801d8a6:	3303      	adds	r3, #3
 801d8a8:	2200      	movs	r2, #0
 801d8aa:	701a      	strb	r2, [r3, #0]
 801d8ac:	2300      	movs	r3, #0
 801d8ae:	75fb      	strb	r3, [r7, #23]
 801d8b0:	7dfb      	ldrb	r3, [r7, #23]
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	371c      	adds	r7, #28
 801d8b6:	46bd      	mov	sp, r7
 801d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8bc:	4770      	bx	lr
 801d8be:	bf00      	nop
 801d8c0:	20000df8 	.word	0x20000df8

0801d8c4 <FATFS_LinkDriver>:
 801d8c4:	b580      	push	{r7, lr}
 801d8c6:	b082      	sub	sp, #8
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	6078      	str	r0, [r7, #4]
 801d8cc:	6039      	str	r1, [r7, #0]
 801d8ce:	2200      	movs	r2, #0
 801d8d0:	6839      	ldr	r1, [r7, #0]
 801d8d2:	6878      	ldr	r0, [r7, #4]
 801d8d4:	f7ff ffaa 	bl	801d82c <FATFS_LinkDriverEx>
 801d8d8:	4603      	mov	r3, r0
 801d8da:	4618      	mov	r0, r3
 801d8dc:	3708      	adds	r7, #8
 801d8de:	46bd      	mov	sp, r7
 801d8e0:	bd80      	pop	{r7, pc}
	...

0801d8e4 <ff_convert>:
 801d8e4:	b480      	push	{r7}
 801d8e6:	b085      	sub	sp, #20
 801d8e8:	af00      	add	r7, sp, #0
 801d8ea:	4603      	mov	r3, r0
 801d8ec:	6039      	str	r1, [r7, #0]
 801d8ee:	80fb      	strh	r3, [r7, #6]
 801d8f0:	88fb      	ldrh	r3, [r7, #6]
 801d8f2:	2b7f      	cmp	r3, #127	; 0x7f
 801d8f4:	d802      	bhi.n	801d8fc <ff_convert+0x18>
 801d8f6:	88fb      	ldrh	r3, [r7, #6]
 801d8f8:	81fb      	strh	r3, [r7, #14]
 801d8fa:	e025      	b.n	801d948 <ff_convert+0x64>
 801d8fc:	683b      	ldr	r3, [r7, #0]
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d00b      	beq.n	801d91a <ff_convert+0x36>
 801d902:	88fb      	ldrh	r3, [r7, #6]
 801d904:	2bff      	cmp	r3, #255	; 0xff
 801d906:	d805      	bhi.n	801d914 <ff_convert+0x30>
 801d908:	88fb      	ldrh	r3, [r7, #6]
 801d90a:	3b80      	subs	r3, #128	; 0x80
 801d90c:	4a12      	ldr	r2, [pc, #72]	; (801d958 <ff_convert+0x74>)
 801d90e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d912:	e000      	b.n	801d916 <ff_convert+0x32>
 801d914:	2300      	movs	r3, #0
 801d916:	81fb      	strh	r3, [r7, #14]
 801d918:	e016      	b.n	801d948 <ff_convert+0x64>
 801d91a:	2300      	movs	r3, #0
 801d91c:	81fb      	strh	r3, [r7, #14]
 801d91e:	e009      	b.n	801d934 <ff_convert+0x50>
 801d920:	89fb      	ldrh	r3, [r7, #14]
 801d922:	4a0d      	ldr	r2, [pc, #52]	; (801d958 <ff_convert+0x74>)
 801d924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d928:	88fa      	ldrh	r2, [r7, #6]
 801d92a:	429a      	cmp	r2, r3
 801d92c:	d006      	beq.n	801d93c <ff_convert+0x58>
 801d92e:	89fb      	ldrh	r3, [r7, #14]
 801d930:	3301      	adds	r3, #1
 801d932:	81fb      	strh	r3, [r7, #14]
 801d934:	89fb      	ldrh	r3, [r7, #14]
 801d936:	2b7f      	cmp	r3, #127	; 0x7f
 801d938:	d9f2      	bls.n	801d920 <ff_convert+0x3c>
 801d93a:	e000      	b.n	801d93e <ff_convert+0x5a>
 801d93c:	bf00      	nop
 801d93e:	89fb      	ldrh	r3, [r7, #14]
 801d940:	3380      	adds	r3, #128	; 0x80
 801d942:	b29b      	uxth	r3, r3
 801d944:	b2db      	uxtb	r3, r3
 801d946:	81fb      	strh	r3, [r7, #14]
 801d948:	89fb      	ldrh	r3, [r7, #14]
 801d94a:	4618      	mov	r0, r3
 801d94c:	3714      	adds	r7, #20
 801d94e:	46bd      	mov	sp, r7
 801d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d954:	4770      	bx	lr
 801d956:	bf00      	nop
 801d958:	080230a0 	.word	0x080230a0

0801d95c <ff_wtoupper>:
 801d95c:	b480      	push	{r7}
 801d95e:	b087      	sub	sp, #28
 801d960:	af00      	add	r7, sp, #0
 801d962:	4603      	mov	r3, r0
 801d964:	80fb      	strh	r3, [r7, #6]
 801d966:	88fb      	ldrh	r3, [r7, #6]
 801d968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d96c:	d201      	bcs.n	801d972 <ff_wtoupper+0x16>
 801d96e:	4b3e      	ldr	r3, [pc, #248]	; (801da68 <ff_wtoupper+0x10c>)
 801d970:	e000      	b.n	801d974 <ff_wtoupper+0x18>
 801d972:	4b3e      	ldr	r3, [pc, #248]	; (801da6c <ff_wtoupper+0x110>)
 801d974:	617b      	str	r3, [r7, #20]
 801d976:	697b      	ldr	r3, [r7, #20]
 801d978:	1c9a      	adds	r2, r3, #2
 801d97a:	617a      	str	r2, [r7, #20]
 801d97c:	881b      	ldrh	r3, [r3, #0]
 801d97e:	827b      	strh	r3, [r7, #18]
 801d980:	8a7b      	ldrh	r3, [r7, #18]
 801d982:	2b00      	cmp	r3, #0
 801d984:	d068      	beq.n	801da58 <ff_wtoupper+0xfc>
 801d986:	88fa      	ldrh	r2, [r7, #6]
 801d988:	8a7b      	ldrh	r3, [r7, #18]
 801d98a:	429a      	cmp	r2, r3
 801d98c:	d364      	bcc.n	801da58 <ff_wtoupper+0xfc>
 801d98e:	697b      	ldr	r3, [r7, #20]
 801d990:	1c9a      	adds	r2, r3, #2
 801d992:	617a      	str	r2, [r7, #20]
 801d994:	881b      	ldrh	r3, [r3, #0]
 801d996:	823b      	strh	r3, [r7, #16]
 801d998:	8a3b      	ldrh	r3, [r7, #16]
 801d99a:	0a1b      	lsrs	r3, r3, #8
 801d99c:	81fb      	strh	r3, [r7, #14]
 801d99e:	8a3b      	ldrh	r3, [r7, #16]
 801d9a0:	b2db      	uxtb	r3, r3
 801d9a2:	823b      	strh	r3, [r7, #16]
 801d9a4:	88fa      	ldrh	r2, [r7, #6]
 801d9a6:	8a79      	ldrh	r1, [r7, #18]
 801d9a8:	8a3b      	ldrh	r3, [r7, #16]
 801d9aa:	440b      	add	r3, r1
 801d9ac:	429a      	cmp	r2, r3
 801d9ae:	da49      	bge.n	801da44 <ff_wtoupper+0xe8>
 801d9b0:	89fb      	ldrh	r3, [r7, #14]
 801d9b2:	2b08      	cmp	r3, #8
 801d9b4:	d84f      	bhi.n	801da56 <ff_wtoupper+0xfa>
 801d9b6:	a201      	add	r2, pc, #4	; (adr r2, 801d9bc <ff_wtoupper+0x60>)
 801d9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d9bc:	0801d9e1 	.word	0x0801d9e1
 801d9c0:	0801d9f3 	.word	0x0801d9f3
 801d9c4:	0801da09 	.word	0x0801da09
 801d9c8:	0801da11 	.word	0x0801da11
 801d9cc:	0801da19 	.word	0x0801da19
 801d9d0:	0801da21 	.word	0x0801da21
 801d9d4:	0801da29 	.word	0x0801da29
 801d9d8:	0801da31 	.word	0x0801da31
 801d9dc:	0801da39 	.word	0x0801da39
 801d9e0:	88fa      	ldrh	r2, [r7, #6]
 801d9e2:	8a7b      	ldrh	r3, [r7, #18]
 801d9e4:	1ad3      	subs	r3, r2, r3
 801d9e6:	005b      	lsls	r3, r3, #1
 801d9e8:	697a      	ldr	r2, [r7, #20]
 801d9ea:	4413      	add	r3, r2
 801d9ec:	881b      	ldrh	r3, [r3, #0]
 801d9ee:	80fb      	strh	r3, [r7, #6]
 801d9f0:	e027      	b.n	801da42 <ff_wtoupper+0xe6>
 801d9f2:	88fa      	ldrh	r2, [r7, #6]
 801d9f4:	8a7b      	ldrh	r3, [r7, #18]
 801d9f6:	1ad3      	subs	r3, r2, r3
 801d9f8:	b29b      	uxth	r3, r3
 801d9fa:	f003 0301 	and.w	r3, r3, #1
 801d9fe:	b29b      	uxth	r3, r3
 801da00:	88fa      	ldrh	r2, [r7, #6]
 801da02:	1ad3      	subs	r3, r2, r3
 801da04:	80fb      	strh	r3, [r7, #6]
 801da06:	e01c      	b.n	801da42 <ff_wtoupper+0xe6>
 801da08:	88fb      	ldrh	r3, [r7, #6]
 801da0a:	3b10      	subs	r3, #16
 801da0c:	80fb      	strh	r3, [r7, #6]
 801da0e:	e018      	b.n	801da42 <ff_wtoupper+0xe6>
 801da10:	88fb      	ldrh	r3, [r7, #6]
 801da12:	3b20      	subs	r3, #32
 801da14:	80fb      	strh	r3, [r7, #6]
 801da16:	e014      	b.n	801da42 <ff_wtoupper+0xe6>
 801da18:	88fb      	ldrh	r3, [r7, #6]
 801da1a:	3b30      	subs	r3, #48	; 0x30
 801da1c:	80fb      	strh	r3, [r7, #6]
 801da1e:	e010      	b.n	801da42 <ff_wtoupper+0xe6>
 801da20:	88fb      	ldrh	r3, [r7, #6]
 801da22:	3b1a      	subs	r3, #26
 801da24:	80fb      	strh	r3, [r7, #6]
 801da26:	e00c      	b.n	801da42 <ff_wtoupper+0xe6>
 801da28:	88fb      	ldrh	r3, [r7, #6]
 801da2a:	3308      	adds	r3, #8
 801da2c:	80fb      	strh	r3, [r7, #6]
 801da2e:	e008      	b.n	801da42 <ff_wtoupper+0xe6>
 801da30:	88fb      	ldrh	r3, [r7, #6]
 801da32:	3b50      	subs	r3, #80	; 0x50
 801da34:	80fb      	strh	r3, [r7, #6]
 801da36:	e004      	b.n	801da42 <ff_wtoupper+0xe6>
 801da38:	88fb      	ldrh	r3, [r7, #6]
 801da3a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801da3e:	80fb      	strh	r3, [r7, #6]
 801da40:	bf00      	nop
 801da42:	e008      	b.n	801da56 <ff_wtoupper+0xfa>
 801da44:	89fb      	ldrh	r3, [r7, #14]
 801da46:	2b00      	cmp	r3, #0
 801da48:	d195      	bne.n	801d976 <ff_wtoupper+0x1a>
 801da4a:	8a3b      	ldrh	r3, [r7, #16]
 801da4c:	005b      	lsls	r3, r3, #1
 801da4e:	697a      	ldr	r2, [r7, #20]
 801da50:	4413      	add	r3, r2
 801da52:	617b      	str	r3, [r7, #20]
 801da54:	e78f      	b.n	801d976 <ff_wtoupper+0x1a>
 801da56:	bf00      	nop
 801da58:	88fb      	ldrh	r3, [r7, #6]
 801da5a:	4618      	mov	r0, r3
 801da5c:	371c      	adds	r7, #28
 801da5e:	46bd      	mov	sp, r7
 801da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da64:	4770      	bx	lr
 801da66:	bf00      	nop
 801da68:	080231a0 	.word	0x080231a0
 801da6c:	08023394 	.word	0x08023394

0801da70 <MX_USB_HOST_Init>:
 801da70:	b580      	push	{r7, lr}
 801da72:	af00      	add	r7, sp, #0
 801da74:	2201      	movs	r2, #1
 801da76:	490e      	ldr	r1, [pc, #56]	; (801dab0 <MX_USB_HOST_Init+0x40>)
 801da78:	480e      	ldr	r0, [pc, #56]	; (801dab4 <MX_USB_HOST_Init+0x44>)
 801da7a:	f7fa fdf9 	bl	8018670 <USBH_Init>
 801da7e:	4603      	mov	r3, r0
 801da80:	2b00      	cmp	r3, #0
 801da82:	d001      	beq.n	801da88 <MX_USB_HOST_Init+0x18>
 801da84:	f7e9 f940 	bl	8006d08 <Error_Handler>
 801da88:	490b      	ldr	r1, [pc, #44]	; (801dab8 <MX_USB_HOST_Init+0x48>)
 801da8a:	480a      	ldr	r0, [pc, #40]	; (801dab4 <MX_USB_HOST_Init+0x44>)
 801da8c:	f7fa fe7e 	bl	801878c <USBH_RegisterClass>
 801da90:	4603      	mov	r3, r0
 801da92:	2b00      	cmp	r3, #0
 801da94:	d001      	beq.n	801da9a <MX_USB_HOST_Init+0x2a>
 801da96:	f7e9 f937 	bl	8006d08 <Error_Handler>
 801da9a:	4806      	ldr	r0, [pc, #24]	; (801dab4 <MX_USB_HOST_Init+0x44>)
 801da9c:	f7fa ff02 	bl	80188a4 <USBH_Start>
 801daa0:	4603      	mov	r3, r0
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d001      	beq.n	801daaa <MX_USB_HOST_Init+0x3a>
 801daa6:	f7e9 f92f 	bl	8006d08 <Error_Handler>
 801daaa:	bf00      	nop
 801daac:	bd80      	pop	{r7, pc}
 801daae:	bf00      	nop
 801dab0:	0801dad1 	.word	0x0801dad1
 801dab4:	2000865c 	.word	0x2000865c
 801dab8:	2000007c 	.word	0x2000007c

0801dabc <MX_USB_HOST_Process>:
 801dabc:	b580      	push	{r7, lr}
 801dabe:	af00      	add	r7, sp, #0
 801dac0:	4802      	ldr	r0, [pc, #8]	; (801dacc <MX_USB_HOST_Process+0x10>)
 801dac2:	f7fa feff 	bl	80188c4 <USBH_Process>
 801dac6:	bf00      	nop
 801dac8:	bd80      	pop	{r7, pc}
 801daca:	bf00      	nop
 801dacc:	2000865c 	.word	0x2000865c

0801dad0 <USBH_UserProcess>:
 801dad0:	b480      	push	{r7}
 801dad2:	b083      	sub	sp, #12
 801dad4:	af00      	add	r7, sp, #0
 801dad6:	6078      	str	r0, [r7, #4]
 801dad8:	460b      	mov	r3, r1
 801dada:	70fb      	strb	r3, [r7, #3]
 801dadc:	78fb      	ldrb	r3, [r7, #3]
 801dade:	3b01      	subs	r3, #1
 801dae0:	2b04      	cmp	r3, #4
 801dae2:	d819      	bhi.n	801db18 <USBH_UserProcess+0x48>
 801dae4:	a201      	add	r2, pc, #4	; (adr r2, 801daec <USBH_UserProcess+0x1c>)
 801dae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801daea:	bf00      	nop
 801daec:	0801db19 	.word	0x0801db19
 801daf0:	0801db09 	.word	0x0801db09
 801daf4:	0801db19 	.word	0x0801db19
 801daf8:	0801db11 	.word	0x0801db11
 801dafc:	0801db01 	.word	0x0801db01
 801db00:	4b09      	ldr	r3, [pc, #36]	; (801db28 <USBH_UserProcess+0x58>)
 801db02:	2203      	movs	r2, #3
 801db04:	701a      	strb	r2, [r3, #0]
 801db06:	e008      	b.n	801db1a <USBH_UserProcess+0x4a>
 801db08:	4b07      	ldr	r3, [pc, #28]	; (801db28 <USBH_UserProcess+0x58>)
 801db0a:	2202      	movs	r2, #2
 801db0c:	701a      	strb	r2, [r3, #0]
 801db0e:	e004      	b.n	801db1a <USBH_UserProcess+0x4a>
 801db10:	4b05      	ldr	r3, [pc, #20]	; (801db28 <USBH_UserProcess+0x58>)
 801db12:	2201      	movs	r2, #1
 801db14:	701a      	strb	r2, [r3, #0]
 801db16:	e000      	b.n	801db1a <USBH_UserProcess+0x4a>
 801db18:	bf00      	nop
 801db1a:	bf00      	nop
 801db1c:	370c      	adds	r7, #12
 801db1e:	46bd      	mov	sp, r7
 801db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db24:	4770      	bx	lr
 801db26:	bf00      	nop
 801db28:	20000e0c 	.word	0x20000e0c

0801db2c <HAL_HCD_MspInit>:
 801db2c:	b580      	push	{r7, lr}
 801db2e:	b08a      	sub	sp, #40	; 0x28
 801db30:	af00      	add	r7, sp, #0
 801db32:	6078      	str	r0, [r7, #4]
 801db34:	f107 0314 	add.w	r3, r7, #20
 801db38:	2200      	movs	r2, #0
 801db3a:	601a      	str	r2, [r3, #0]
 801db3c:	605a      	str	r2, [r3, #4]
 801db3e:	609a      	str	r2, [r3, #8]
 801db40:	60da      	str	r2, [r3, #12]
 801db42:	611a      	str	r2, [r3, #16]
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801db4c:	d13c      	bne.n	801dbc8 <HAL_HCD_MspInit+0x9c>
 801db4e:	4b20      	ldr	r3, [pc, #128]	; (801dbd0 <HAL_HCD_MspInit+0xa4>)
 801db50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db52:	4a1f      	ldr	r2, [pc, #124]	; (801dbd0 <HAL_HCD_MspInit+0xa4>)
 801db54:	f043 0301 	orr.w	r3, r3, #1
 801db58:	6313      	str	r3, [r2, #48]	; 0x30
 801db5a:	4b1d      	ldr	r3, [pc, #116]	; (801dbd0 <HAL_HCD_MspInit+0xa4>)
 801db5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db5e:	f003 0301 	and.w	r3, r3, #1
 801db62:	613b      	str	r3, [r7, #16]
 801db64:	693b      	ldr	r3, [r7, #16]
 801db66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801db6a:	617b      	str	r3, [r7, #20]
 801db6c:	2302      	movs	r3, #2
 801db6e:	61bb      	str	r3, [r7, #24]
 801db70:	2300      	movs	r3, #0
 801db72:	61fb      	str	r3, [r7, #28]
 801db74:	2303      	movs	r3, #3
 801db76:	623b      	str	r3, [r7, #32]
 801db78:	230a      	movs	r3, #10
 801db7a:	627b      	str	r3, [r7, #36]	; 0x24
 801db7c:	f107 0314 	add.w	r3, r7, #20
 801db80:	4619      	mov	r1, r3
 801db82:	4814      	ldr	r0, [pc, #80]	; (801dbd4 <HAL_HCD_MspInit+0xa8>)
 801db84:	f7eb fca4 	bl	80094d0 <HAL_GPIO_Init>
 801db88:	4b11      	ldr	r3, [pc, #68]	; (801dbd0 <HAL_HCD_MspInit+0xa4>)
 801db8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db8c:	4a10      	ldr	r2, [pc, #64]	; (801dbd0 <HAL_HCD_MspInit+0xa4>)
 801db8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db92:	6353      	str	r3, [r2, #52]	; 0x34
 801db94:	4b0e      	ldr	r3, [pc, #56]	; (801dbd0 <HAL_HCD_MspInit+0xa4>)
 801db96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801db9c:	60fb      	str	r3, [r7, #12]
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	4b0b      	ldr	r3, [pc, #44]	; (801dbd0 <HAL_HCD_MspInit+0xa4>)
 801dba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dba4:	4a0a      	ldr	r2, [pc, #40]	; (801dbd0 <HAL_HCD_MspInit+0xa4>)
 801dba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801dbaa:	6453      	str	r3, [r2, #68]	; 0x44
 801dbac:	4b08      	ldr	r3, [pc, #32]	; (801dbd0 <HAL_HCD_MspInit+0xa4>)
 801dbae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dbb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801dbb4:	60bb      	str	r3, [r7, #8]
 801dbb6:	68bb      	ldr	r3, [r7, #8]
 801dbb8:	2200      	movs	r2, #0
 801dbba:	2100      	movs	r1, #0
 801dbbc:	2043      	movs	r0, #67	; 0x43
 801dbbe:	f7ea fc4c 	bl	800845a <HAL_NVIC_SetPriority>
 801dbc2:	2043      	movs	r0, #67	; 0x43
 801dbc4:	f7ea fc65 	bl	8008492 <HAL_NVIC_EnableIRQ>
 801dbc8:	bf00      	nop
 801dbca:	3728      	adds	r7, #40	; 0x28
 801dbcc:	46bd      	mov	sp, r7
 801dbce:	bd80      	pop	{r7, pc}
 801dbd0:	40023800 	.word	0x40023800
 801dbd4:	40020000 	.word	0x40020000

0801dbd8 <HAL_HCD_SOF_Callback>:
 801dbd8:	b580      	push	{r7, lr}
 801dbda:	b082      	sub	sp, #8
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	6078      	str	r0, [r7, #4]
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	f7fb fa3f 	bl	801906a <USBH_LL_IncTimer>
 801dbec:	bf00      	nop
 801dbee:	3708      	adds	r7, #8
 801dbf0:	46bd      	mov	sp, r7
 801dbf2:	bd80      	pop	{r7, pc}

0801dbf4 <HAL_HCD_Connect_Callback>:
 801dbf4:	b580      	push	{r7, lr}
 801dbf6:	b082      	sub	sp, #8
 801dbf8:	af00      	add	r7, sp, #0
 801dbfa:	6078      	str	r0, [r7, #4]
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dc02:	4618      	mov	r0, r3
 801dc04:	f7fb fa77 	bl	80190f6 <USBH_LL_Connect>
 801dc08:	bf00      	nop
 801dc0a:	3708      	adds	r7, #8
 801dc0c:	46bd      	mov	sp, r7
 801dc0e:	bd80      	pop	{r7, pc}

0801dc10 <HAL_HCD_Disconnect_Callback>:
 801dc10:	b580      	push	{r7, lr}
 801dc12:	b082      	sub	sp, #8
 801dc14:	af00      	add	r7, sp, #0
 801dc16:	6078      	str	r0, [r7, #4]
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f7fb fa80 	bl	8019124 <USBH_LL_Disconnect>
 801dc24:	bf00      	nop
 801dc26:	3708      	adds	r7, #8
 801dc28:	46bd      	mov	sp, r7
 801dc2a:	bd80      	pop	{r7, pc}

0801dc2c <HAL_HCD_HC_NotifyURBChange_Callback>:
 801dc2c:	b480      	push	{r7}
 801dc2e:	b083      	sub	sp, #12
 801dc30:	af00      	add	r7, sp, #0
 801dc32:	6078      	str	r0, [r7, #4]
 801dc34:	460b      	mov	r3, r1
 801dc36:	70fb      	strb	r3, [r7, #3]
 801dc38:	4613      	mov	r3, r2
 801dc3a:	70bb      	strb	r3, [r7, #2]
 801dc3c:	bf00      	nop
 801dc3e:	370c      	adds	r7, #12
 801dc40:	46bd      	mov	sp, r7
 801dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc46:	4770      	bx	lr

0801dc48 <HAL_HCD_PortEnabled_Callback>:
 801dc48:	b580      	push	{r7, lr}
 801dc4a:	b082      	sub	sp, #8
 801dc4c:	af00      	add	r7, sp, #0
 801dc4e:	6078      	str	r0, [r7, #4]
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dc56:	4618      	mov	r0, r3
 801dc58:	f7fb fa31 	bl	80190be <USBH_LL_PortEnabled>
 801dc5c:	bf00      	nop
 801dc5e:	3708      	adds	r7, #8
 801dc60:	46bd      	mov	sp, r7
 801dc62:	bd80      	pop	{r7, pc}

0801dc64 <HAL_HCD_PortDisabled_Callback>:
 801dc64:	b580      	push	{r7, lr}
 801dc66:	b082      	sub	sp, #8
 801dc68:	af00      	add	r7, sp, #0
 801dc6a:	6078      	str	r0, [r7, #4]
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dc72:	4618      	mov	r0, r3
 801dc74:	f7fb fa31 	bl	80190da <USBH_LL_PortDisabled>
 801dc78:	bf00      	nop
 801dc7a:	3708      	adds	r7, #8
 801dc7c:	46bd      	mov	sp, r7
 801dc7e:	bd80      	pop	{r7, pc}

0801dc80 <USBH_LL_Init>:
 801dc80:	b580      	push	{r7, lr}
 801dc82:	b082      	sub	sp, #8
 801dc84:	af00      	add	r7, sp, #0
 801dc86:	6078      	str	r0, [r7, #4]
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801dc8e:	2b01      	cmp	r3, #1
 801dc90:	d12a      	bne.n	801dce8 <USBH_LL_Init+0x68>
 801dc92:	4a18      	ldr	r2, [pc, #96]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	4a15      	ldr	r2, [pc, #84]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dc9e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
 801dca2:	4b14      	ldr	r3, [pc, #80]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801dca8:	601a      	str	r2, [r3, #0]
 801dcaa:	4b12      	ldr	r3, [pc, #72]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dcac:	2208      	movs	r2, #8
 801dcae:	609a      	str	r2, [r3, #8]
 801dcb0:	4b10      	ldr	r3, [pc, #64]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dcb2:	2201      	movs	r2, #1
 801dcb4:	60da      	str	r2, [r3, #12]
 801dcb6:	4b0f      	ldr	r3, [pc, #60]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dcb8:	2200      	movs	r2, #0
 801dcba:	611a      	str	r2, [r3, #16]
 801dcbc:	4b0d      	ldr	r3, [pc, #52]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dcbe:	2202      	movs	r2, #2
 801dcc0:	619a      	str	r2, [r3, #24]
 801dcc2:	4b0c      	ldr	r3, [pc, #48]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dcc4:	2200      	movs	r2, #0
 801dcc6:	61da      	str	r2, [r3, #28]
 801dcc8:	480a      	ldr	r0, [pc, #40]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dcca:	f7eb fe0f 	bl	80098ec <HAL_HCD_Init>
 801dcce:	4603      	mov	r3, r0
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d001      	beq.n	801dcd8 <USBH_LL_Init+0x58>
 801dcd4:	f7e9 f818 	bl	8006d08 <Error_Handler>
 801dcd8:	4806      	ldr	r0, [pc, #24]	; (801dcf4 <USBH_LL_Init+0x74>)
 801dcda:	f7ec fa13 	bl	800a104 <HAL_HCD_GetCurrentFrame>
 801dcde:	4603      	mov	r3, r0
 801dce0:	4619      	mov	r1, r3
 801dce2:	6878      	ldr	r0, [r7, #4]
 801dce4:	f7fb f9b2 	bl	801904c <USBH_LL_SetTimer>
 801dce8:	2300      	movs	r3, #0
 801dcea:	4618      	mov	r0, r3
 801dcec:	3708      	adds	r7, #8
 801dcee:	46bd      	mov	sp, r7
 801dcf0:	bd80      	pop	{r7, pc}
 801dcf2:	bf00      	nop
 801dcf4:	20019a74 	.word	0x20019a74

0801dcf8 <USBH_LL_Start>:
 801dcf8:	b580      	push	{r7, lr}
 801dcfa:	b084      	sub	sp, #16
 801dcfc:	af00      	add	r7, sp, #0
 801dcfe:	6078      	str	r0, [r7, #4]
 801dd00:	2300      	movs	r3, #0
 801dd02:	73fb      	strb	r3, [r7, #15]
 801dd04:	2300      	movs	r3, #0
 801dd06:	73bb      	strb	r3, [r7, #14]
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dd0e:	4618      	mov	r0, r3
 801dd10:	f7ec f980 	bl	800a014 <HAL_HCD_Start>
 801dd14:	4603      	mov	r3, r0
 801dd16:	73fb      	strb	r3, [r7, #15]
 801dd18:	7bfb      	ldrb	r3, [r7, #15]
 801dd1a:	4618      	mov	r0, r3
 801dd1c:	f000 f990 	bl	801e040 <USBH_Get_USB_Status>
 801dd20:	4603      	mov	r3, r0
 801dd22:	73bb      	strb	r3, [r7, #14]
 801dd24:	7bbb      	ldrb	r3, [r7, #14]
 801dd26:	4618      	mov	r0, r3
 801dd28:	3710      	adds	r7, #16
 801dd2a:	46bd      	mov	sp, r7
 801dd2c:	bd80      	pop	{r7, pc}

0801dd2e <USBH_LL_Stop>:
 801dd2e:	b580      	push	{r7, lr}
 801dd30:	b084      	sub	sp, #16
 801dd32:	af00      	add	r7, sp, #0
 801dd34:	6078      	str	r0, [r7, #4]
 801dd36:	2300      	movs	r3, #0
 801dd38:	73fb      	strb	r3, [r7, #15]
 801dd3a:	2300      	movs	r3, #0
 801dd3c:	73bb      	strb	r3, [r7, #14]
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dd44:	4618      	mov	r0, r3
 801dd46:	f7ec f988 	bl	800a05a <HAL_HCD_Stop>
 801dd4a:	4603      	mov	r3, r0
 801dd4c:	73fb      	strb	r3, [r7, #15]
 801dd4e:	7bfb      	ldrb	r3, [r7, #15]
 801dd50:	4618      	mov	r0, r3
 801dd52:	f000 f975 	bl	801e040 <USBH_Get_USB_Status>
 801dd56:	4603      	mov	r3, r0
 801dd58:	73bb      	strb	r3, [r7, #14]
 801dd5a:	7bbb      	ldrb	r3, [r7, #14]
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	3710      	adds	r7, #16
 801dd60:	46bd      	mov	sp, r7
 801dd62:	bd80      	pop	{r7, pc}

0801dd64 <USBH_LL_GetSpeed>:
 801dd64:	b580      	push	{r7, lr}
 801dd66:	b084      	sub	sp, #16
 801dd68:	af00      	add	r7, sp, #0
 801dd6a:	6078      	str	r0, [r7, #4]
 801dd6c:	2301      	movs	r3, #1
 801dd6e:	73fb      	strb	r3, [r7, #15]
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dd76:	4618      	mov	r0, r3
 801dd78:	f7ec f9d2 	bl	800a120 <HAL_HCD_GetCurrentSpeed>
 801dd7c:	4603      	mov	r3, r0
 801dd7e:	2b01      	cmp	r3, #1
 801dd80:	d007      	beq.n	801dd92 <USBH_LL_GetSpeed+0x2e>
 801dd82:	2b01      	cmp	r3, #1
 801dd84:	d302      	bcc.n	801dd8c <USBH_LL_GetSpeed+0x28>
 801dd86:	2b02      	cmp	r3, #2
 801dd88:	d006      	beq.n	801dd98 <USBH_LL_GetSpeed+0x34>
 801dd8a:	e008      	b.n	801dd9e <USBH_LL_GetSpeed+0x3a>
 801dd8c:	2300      	movs	r3, #0
 801dd8e:	73fb      	strb	r3, [r7, #15]
 801dd90:	e008      	b.n	801dda4 <USBH_LL_GetSpeed+0x40>
 801dd92:	2301      	movs	r3, #1
 801dd94:	73fb      	strb	r3, [r7, #15]
 801dd96:	e005      	b.n	801dda4 <USBH_LL_GetSpeed+0x40>
 801dd98:	2302      	movs	r3, #2
 801dd9a:	73fb      	strb	r3, [r7, #15]
 801dd9c:	e002      	b.n	801dda4 <USBH_LL_GetSpeed+0x40>
 801dd9e:	2301      	movs	r3, #1
 801dda0:	73fb      	strb	r3, [r7, #15]
 801dda2:	bf00      	nop
 801dda4:	7bfb      	ldrb	r3, [r7, #15]
 801dda6:	4618      	mov	r0, r3
 801dda8:	3710      	adds	r7, #16
 801ddaa:	46bd      	mov	sp, r7
 801ddac:	bd80      	pop	{r7, pc}

0801ddae <USBH_LL_ResetPort>:
 801ddae:	b580      	push	{r7, lr}
 801ddb0:	b084      	sub	sp, #16
 801ddb2:	af00      	add	r7, sp, #0
 801ddb4:	6078      	str	r0, [r7, #4]
 801ddb6:	2300      	movs	r3, #0
 801ddb8:	73fb      	strb	r3, [r7, #15]
 801ddba:	2300      	movs	r3, #0
 801ddbc:	73bb      	strb	r3, [r7, #14]
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ddc4:	4618      	mov	r0, r3
 801ddc6:	f7ec f965 	bl	800a094 <HAL_HCD_ResetPort>
 801ddca:	4603      	mov	r3, r0
 801ddcc:	73fb      	strb	r3, [r7, #15]
 801ddce:	7bfb      	ldrb	r3, [r7, #15]
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	f000 f935 	bl	801e040 <USBH_Get_USB_Status>
 801ddd6:	4603      	mov	r3, r0
 801ddd8:	73bb      	strb	r3, [r7, #14]
 801ddda:	7bbb      	ldrb	r3, [r7, #14]
 801dddc:	4618      	mov	r0, r3
 801ddde:	3710      	adds	r7, #16
 801dde0:	46bd      	mov	sp, r7
 801dde2:	bd80      	pop	{r7, pc}

0801dde4 <USBH_LL_GetLastXferSize>:
 801dde4:	b580      	push	{r7, lr}
 801dde6:	b082      	sub	sp, #8
 801dde8:	af00      	add	r7, sp, #0
 801ddea:	6078      	str	r0, [r7, #4]
 801ddec:	460b      	mov	r3, r1
 801ddee:	70fb      	strb	r3, [r7, #3]
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801ddf6:	78fa      	ldrb	r2, [r7, #3]
 801ddf8:	4611      	mov	r1, r2
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	f7ec f96d 	bl	800a0da <HAL_HCD_HC_GetXferCount>
 801de00:	4603      	mov	r3, r0
 801de02:	4618      	mov	r0, r3
 801de04:	3708      	adds	r7, #8
 801de06:	46bd      	mov	sp, r7
 801de08:	bd80      	pop	{r7, pc}

0801de0a <USBH_LL_OpenPipe>:
 801de0a:	b590      	push	{r4, r7, lr}
 801de0c:	b089      	sub	sp, #36	; 0x24
 801de0e:	af04      	add	r7, sp, #16
 801de10:	6078      	str	r0, [r7, #4]
 801de12:	4608      	mov	r0, r1
 801de14:	4611      	mov	r1, r2
 801de16:	461a      	mov	r2, r3
 801de18:	4603      	mov	r3, r0
 801de1a:	70fb      	strb	r3, [r7, #3]
 801de1c:	460b      	mov	r3, r1
 801de1e:	70bb      	strb	r3, [r7, #2]
 801de20:	4613      	mov	r3, r2
 801de22:	707b      	strb	r3, [r7, #1]
 801de24:	2300      	movs	r3, #0
 801de26:	73fb      	strb	r3, [r7, #15]
 801de28:	2300      	movs	r3, #0
 801de2a:	73bb      	strb	r3, [r7, #14]
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801de32:	787c      	ldrb	r4, [r7, #1]
 801de34:	78ba      	ldrb	r2, [r7, #2]
 801de36:	78f9      	ldrb	r1, [r7, #3]
 801de38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801de3a:	9302      	str	r3, [sp, #8]
 801de3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801de40:	9301      	str	r3, [sp, #4]
 801de42:	f897 3020 	ldrb.w	r3, [r7, #32]
 801de46:	9300      	str	r3, [sp, #0]
 801de48:	4623      	mov	r3, r4
 801de4a:	f7eb fdb1 	bl	80099b0 <HAL_HCD_HC_Init>
 801de4e:	4603      	mov	r3, r0
 801de50:	73fb      	strb	r3, [r7, #15]
 801de52:	7bfb      	ldrb	r3, [r7, #15]
 801de54:	4618      	mov	r0, r3
 801de56:	f000 f8f3 	bl	801e040 <USBH_Get_USB_Status>
 801de5a:	4603      	mov	r3, r0
 801de5c:	73bb      	strb	r3, [r7, #14]
 801de5e:	7bbb      	ldrb	r3, [r7, #14]
 801de60:	4618      	mov	r0, r3
 801de62:	3714      	adds	r7, #20
 801de64:	46bd      	mov	sp, r7
 801de66:	bd90      	pop	{r4, r7, pc}

0801de68 <USBH_LL_ClosePipe>:
 801de68:	b580      	push	{r7, lr}
 801de6a:	b084      	sub	sp, #16
 801de6c:	af00      	add	r7, sp, #0
 801de6e:	6078      	str	r0, [r7, #4]
 801de70:	460b      	mov	r3, r1
 801de72:	70fb      	strb	r3, [r7, #3]
 801de74:	2300      	movs	r3, #0
 801de76:	73fb      	strb	r3, [r7, #15]
 801de78:	2300      	movs	r3, #0
 801de7a:	73bb      	strb	r3, [r7, #14]
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801de82:	78fa      	ldrb	r2, [r7, #3]
 801de84:	4611      	mov	r1, r2
 801de86:	4618      	mov	r0, r3
 801de88:	f7eb fe2a 	bl	8009ae0 <HAL_HCD_HC_Halt>
 801de8c:	4603      	mov	r3, r0
 801de8e:	73fb      	strb	r3, [r7, #15]
 801de90:	7bfb      	ldrb	r3, [r7, #15]
 801de92:	4618      	mov	r0, r3
 801de94:	f000 f8d4 	bl	801e040 <USBH_Get_USB_Status>
 801de98:	4603      	mov	r3, r0
 801de9a:	73bb      	strb	r3, [r7, #14]
 801de9c:	7bbb      	ldrb	r3, [r7, #14]
 801de9e:	4618      	mov	r0, r3
 801dea0:	3710      	adds	r7, #16
 801dea2:	46bd      	mov	sp, r7
 801dea4:	bd80      	pop	{r7, pc}

0801dea6 <USBH_LL_SubmitURB>:
 801dea6:	b590      	push	{r4, r7, lr}
 801dea8:	b089      	sub	sp, #36	; 0x24
 801deaa:	af04      	add	r7, sp, #16
 801deac:	6078      	str	r0, [r7, #4]
 801deae:	4608      	mov	r0, r1
 801deb0:	4611      	mov	r1, r2
 801deb2:	461a      	mov	r2, r3
 801deb4:	4603      	mov	r3, r0
 801deb6:	70fb      	strb	r3, [r7, #3]
 801deb8:	460b      	mov	r3, r1
 801deba:	70bb      	strb	r3, [r7, #2]
 801debc:	4613      	mov	r3, r2
 801debe:	707b      	strb	r3, [r7, #1]
 801dec0:	2300      	movs	r3, #0
 801dec2:	73fb      	strb	r3, [r7, #15]
 801dec4:	2300      	movs	r3, #0
 801dec6:	73bb      	strb	r3, [r7, #14]
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801dece:	787c      	ldrb	r4, [r7, #1]
 801ded0:	78ba      	ldrb	r2, [r7, #2]
 801ded2:	78f9      	ldrb	r1, [r7, #3]
 801ded4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ded8:	9303      	str	r3, [sp, #12]
 801deda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dedc:	9302      	str	r3, [sp, #8]
 801dede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dee0:	9301      	str	r3, [sp, #4]
 801dee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dee6:	9300      	str	r3, [sp, #0]
 801dee8:	4623      	mov	r3, r4
 801deea:	f7eb fe1d 	bl	8009b28 <HAL_HCD_HC_SubmitRequest>
 801deee:	4603      	mov	r3, r0
 801def0:	73fb      	strb	r3, [r7, #15]
 801def2:	7bfb      	ldrb	r3, [r7, #15]
 801def4:	4618      	mov	r0, r3
 801def6:	f000 f8a3 	bl	801e040 <USBH_Get_USB_Status>
 801defa:	4603      	mov	r3, r0
 801defc:	73bb      	strb	r3, [r7, #14]
 801defe:	7bbb      	ldrb	r3, [r7, #14]
 801df00:	4618      	mov	r0, r3
 801df02:	3714      	adds	r7, #20
 801df04:	46bd      	mov	sp, r7
 801df06:	bd90      	pop	{r4, r7, pc}

0801df08 <USBH_LL_GetURBState>:
 801df08:	b580      	push	{r7, lr}
 801df0a:	b082      	sub	sp, #8
 801df0c:	af00      	add	r7, sp, #0
 801df0e:	6078      	str	r0, [r7, #4]
 801df10:	460b      	mov	r3, r1
 801df12:	70fb      	strb	r3, [r7, #3]
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801df1a:	78fa      	ldrb	r2, [r7, #3]
 801df1c:	4611      	mov	r1, r2
 801df1e:	4618      	mov	r0, r3
 801df20:	f7ec f8c6 	bl	800a0b0 <HAL_HCD_HC_GetURBState>
 801df24:	4603      	mov	r3, r0
 801df26:	4618      	mov	r0, r3
 801df28:	3708      	adds	r7, #8
 801df2a:	46bd      	mov	sp, r7
 801df2c:	bd80      	pop	{r7, pc}

0801df2e <USBH_LL_DriverVBUS>:
 801df2e:	b580      	push	{r7, lr}
 801df30:	b082      	sub	sp, #8
 801df32:	af00      	add	r7, sp, #0
 801df34:	6078      	str	r0, [r7, #4]
 801df36:	460b      	mov	r3, r1
 801df38:	70fb      	strb	r3, [r7, #3]
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801df40:	2b01      	cmp	r3, #1
 801df42:	d103      	bne.n	801df4c <USBH_LL_DriverVBUS+0x1e>
 801df44:	78fb      	ldrb	r3, [r7, #3]
 801df46:	4618      	mov	r0, r3
 801df48:	f000 f8a6 	bl	801e098 <MX_DriverVbusFS>
 801df4c:	20c8      	movs	r0, #200	; 0xc8
 801df4e:	f7ea f987 	bl	8008260 <HAL_Delay>
 801df52:	2300      	movs	r3, #0
 801df54:	4618      	mov	r0, r3
 801df56:	3708      	adds	r7, #8
 801df58:	46bd      	mov	sp, r7
 801df5a:	bd80      	pop	{r7, pc}

0801df5c <USBH_LL_SetToggle>:
 801df5c:	b480      	push	{r7}
 801df5e:	b085      	sub	sp, #20
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]
 801df64:	460b      	mov	r3, r1
 801df66:	70fb      	strb	r3, [r7, #3]
 801df68:	4613      	mov	r3, r2
 801df6a:	70bb      	strb	r3, [r7, #2]
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801df72:	60fb      	str	r3, [r7, #12]
 801df74:	78fa      	ldrb	r2, [r7, #3]
 801df76:	68f9      	ldr	r1, [r7, #12]
 801df78:	4613      	mov	r3, r2
 801df7a:	009b      	lsls	r3, r3, #2
 801df7c:	4413      	add	r3, r2
 801df7e:	00db      	lsls	r3, r3, #3
 801df80:	440b      	add	r3, r1
 801df82:	333b      	adds	r3, #59	; 0x3b
 801df84:	781b      	ldrb	r3, [r3, #0]
 801df86:	2b00      	cmp	r3, #0
 801df88:	d00a      	beq.n	801dfa0 <USBH_LL_SetToggle+0x44>
 801df8a:	78fa      	ldrb	r2, [r7, #3]
 801df8c:	68f9      	ldr	r1, [r7, #12]
 801df8e:	4613      	mov	r3, r2
 801df90:	009b      	lsls	r3, r3, #2
 801df92:	4413      	add	r3, r2
 801df94:	00db      	lsls	r3, r3, #3
 801df96:	440b      	add	r3, r1
 801df98:	3350      	adds	r3, #80	; 0x50
 801df9a:	78ba      	ldrb	r2, [r7, #2]
 801df9c:	701a      	strb	r2, [r3, #0]
 801df9e:	e009      	b.n	801dfb4 <USBH_LL_SetToggle+0x58>
 801dfa0:	78fa      	ldrb	r2, [r7, #3]
 801dfa2:	68f9      	ldr	r1, [r7, #12]
 801dfa4:	4613      	mov	r3, r2
 801dfa6:	009b      	lsls	r3, r3, #2
 801dfa8:	4413      	add	r3, r2
 801dfaa:	00db      	lsls	r3, r3, #3
 801dfac:	440b      	add	r3, r1
 801dfae:	3351      	adds	r3, #81	; 0x51
 801dfb0:	78ba      	ldrb	r2, [r7, #2]
 801dfb2:	701a      	strb	r2, [r3, #0]
 801dfb4:	2300      	movs	r3, #0
 801dfb6:	4618      	mov	r0, r3
 801dfb8:	3714      	adds	r7, #20
 801dfba:	46bd      	mov	sp, r7
 801dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfc0:	4770      	bx	lr

0801dfc2 <USBH_LL_GetToggle>:
 801dfc2:	b480      	push	{r7}
 801dfc4:	b085      	sub	sp, #20
 801dfc6:	af00      	add	r7, sp, #0
 801dfc8:	6078      	str	r0, [r7, #4]
 801dfca:	460b      	mov	r3, r1
 801dfcc:	70fb      	strb	r3, [r7, #3]
 801dfce:	2300      	movs	r3, #0
 801dfd0:	73fb      	strb	r3, [r7, #15]
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801dfd8:	60bb      	str	r3, [r7, #8]
 801dfda:	78fa      	ldrb	r2, [r7, #3]
 801dfdc:	68b9      	ldr	r1, [r7, #8]
 801dfde:	4613      	mov	r3, r2
 801dfe0:	009b      	lsls	r3, r3, #2
 801dfe2:	4413      	add	r3, r2
 801dfe4:	00db      	lsls	r3, r3, #3
 801dfe6:	440b      	add	r3, r1
 801dfe8:	333b      	adds	r3, #59	; 0x3b
 801dfea:	781b      	ldrb	r3, [r3, #0]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d00a      	beq.n	801e006 <USBH_LL_GetToggle+0x44>
 801dff0:	78fa      	ldrb	r2, [r7, #3]
 801dff2:	68b9      	ldr	r1, [r7, #8]
 801dff4:	4613      	mov	r3, r2
 801dff6:	009b      	lsls	r3, r3, #2
 801dff8:	4413      	add	r3, r2
 801dffa:	00db      	lsls	r3, r3, #3
 801dffc:	440b      	add	r3, r1
 801dffe:	3350      	adds	r3, #80	; 0x50
 801e000:	781b      	ldrb	r3, [r3, #0]
 801e002:	73fb      	strb	r3, [r7, #15]
 801e004:	e009      	b.n	801e01a <USBH_LL_GetToggle+0x58>
 801e006:	78fa      	ldrb	r2, [r7, #3]
 801e008:	68b9      	ldr	r1, [r7, #8]
 801e00a:	4613      	mov	r3, r2
 801e00c:	009b      	lsls	r3, r3, #2
 801e00e:	4413      	add	r3, r2
 801e010:	00db      	lsls	r3, r3, #3
 801e012:	440b      	add	r3, r1
 801e014:	3351      	adds	r3, #81	; 0x51
 801e016:	781b      	ldrb	r3, [r3, #0]
 801e018:	73fb      	strb	r3, [r7, #15]
 801e01a:	7bfb      	ldrb	r3, [r7, #15]
 801e01c:	4618      	mov	r0, r3
 801e01e:	3714      	adds	r7, #20
 801e020:	46bd      	mov	sp, r7
 801e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e026:	4770      	bx	lr

0801e028 <USBH_Delay>:
 801e028:	b580      	push	{r7, lr}
 801e02a:	b082      	sub	sp, #8
 801e02c:	af00      	add	r7, sp, #0
 801e02e:	6078      	str	r0, [r7, #4]
 801e030:	6878      	ldr	r0, [r7, #4]
 801e032:	f7ea f915 	bl	8008260 <HAL_Delay>
 801e036:	bf00      	nop
 801e038:	3708      	adds	r7, #8
 801e03a:	46bd      	mov	sp, r7
 801e03c:	bd80      	pop	{r7, pc}
	...

0801e040 <USBH_Get_USB_Status>:
 801e040:	b480      	push	{r7}
 801e042:	b085      	sub	sp, #20
 801e044:	af00      	add	r7, sp, #0
 801e046:	4603      	mov	r3, r0
 801e048:	71fb      	strb	r3, [r7, #7]
 801e04a:	2300      	movs	r3, #0
 801e04c:	73fb      	strb	r3, [r7, #15]
 801e04e:	79fb      	ldrb	r3, [r7, #7]
 801e050:	2b03      	cmp	r3, #3
 801e052:	d817      	bhi.n	801e084 <USBH_Get_USB_Status+0x44>
 801e054:	a201      	add	r2, pc, #4	; (adr r2, 801e05c <USBH_Get_USB_Status+0x1c>)
 801e056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e05a:	bf00      	nop
 801e05c:	0801e06d 	.word	0x0801e06d
 801e060:	0801e073 	.word	0x0801e073
 801e064:	0801e079 	.word	0x0801e079
 801e068:	0801e07f 	.word	0x0801e07f
 801e06c:	2300      	movs	r3, #0
 801e06e:	73fb      	strb	r3, [r7, #15]
 801e070:	e00b      	b.n	801e08a <USBH_Get_USB_Status+0x4a>
 801e072:	2302      	movs	r3, #2
 801e074:	73fb      	strb	r3, [r7, #15]
 801e076:	e008      	b.n	801e08a <USBH_Get_USB_Status+0x4a>
 801e078:	2301      	movs	r3, #1
 801e07a:	73fb      	strb	r3, [r7, #15]
 801e07c:	e005      	b.n	801e08a <USBH_Get_USB_Status+0x4a>
 801e07e:	2302      	movs	r3, #2
 801e080:	73fb      	strb	r3, [r7, #15]
 801e082:	e002      	b.n	801e08a <USBH_Get_USB_Status+0x4a>
 801e084:	2302      	movs	r3, #2
 801e086:	73fb      	strb	r3, [r7, #15]
 801e088:	bf00      	nop
 801e08a:	7bfb      	ldrb	r3, [r7, #15]
 801e08c:	4618      	mov	r0, r3
 801e08e:	3714      	adds	r7, #20
 801e090:	46bd      	mov	sp, r7
 801e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e096:	4770      	bx	lr

0801e098 <MX_DriverVbusFS>:
 801e098:	b580      	push	{r7, lr}
 801e09a:	b084      	sub	sp, #16
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	4603      	mov	r3, r0
 801e0a0:	71fb      	strb	r3, [r7, #7]
 801e0a2:	79fb      	ldrb	r3, [r7, #7]
 801e0a4:	73fb      	strb	r3, [r7, #15]
 801e0a6:	79fb      	ldrb	r3, [r7, #7]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d102      	bne.n	801e0b2 <MX_DriverVbusFS+0x1a>
 801e0ac:	2301      	movs	r3, #1
 801e0ae:	73fb      	strb	r3, [r7, #15]
 801e0b0:	e001      	b.n	801e0b6 <MX_DriverVbusFS+0x1e>
 801e0b2:	2300      	movs	r3, #0
 801e0b4:	73fb      	strb	r3, [r7, #15]
 801e0b6:	7bfb      	ldrb	r3, [r7, #15]
 801e0b8:	461a      	mov	r2, r3
 801e0ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e0be:	4803      	ldr	r0, [pc, #12]	; (801e0cc <MX_DriverVbusFS+0x34>)
 801e0c0:	f7eb fbc8 	bl	8009854 <HAL_GPIO_WritePin>
 801e0c4:	bf00      	nop
 801e0c6:	3710      	adds	r7, #16
 801e0c8:	46bd      	mov	sp, r7
 801e0ca:	bd80      	pop	{r7, pc}
 801e0cc:	40020000 	.word	0x40020000

0801e0d0 <atoi>:
 801e0d0:	220a      	movs	r2, #10
 801e0d2:	2100      	movs	r1, #0
 801e0d4:	f000 bddc 	b.w	801ec90 <strtol>

0801e0d8 <__errno>:
 801e0d8:	4b01      	ldr	r3, [pc, #4]	; (801e0e0 <__errno+0x8>)
 801e0da:	6818      	ldr	r0, [r3, #0]
 801e0dc:	4770      	bx	lr
 801e0de:	bf00      	nop
 801e0e0:	2000009c 	.word	0x2000009c

0801e0e4 <__libc_init_array>:
 801e0e4:	b570      	push	{r4, r5, r6, lr}
 801e0e6:	4e0d      	ldr	r6, [pc, #52]	; (801e11c <__libc_init_array+0x38>)
 801e0e8:	4c0d      	ldr	r4, [pc, #52]	; (801e120 <__libc_init_array+0x3c>)
 801e0ea:	1ba4      	subs	r4, r4, r6
 801e0ec:	10a4      	asrs	r4, r4, #2
 801e0ee:	2500      	movs	r5, #0
 801e0f0:	42a5      	cmp	r5, r4
 801e0f2:	d109      	bne.n	801e108 <__libc_init_array+0x24>
 801e0f4:	4e0b      	ldr	r6, [pc, #44]	; (801e124 <__libc_init_array+0x40>)
 801e0f6:	4c0c      	ldr	r4, [pc, #48]	; (801e128 <__libc_init_array+0x44>)
 801e0f8:	f002 f870 	bl	80201dc <_init>
 801e0fc:	1ba4      	subs	r4, r4, r6
 801e0fe:	10a4      	asrs	r4, r4, #2
 801e100:	2500      	movs	r5, #0
 801e102:	42a5      	cmp	r5, r4
 801e104:	d105      	bne.n	801e112 <__libc_init_array+0x2e>
 801e106:	bd70      	pop	{r4, r5, r6, pc}
 801e108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e10c:	4798      	blx	r3
 801e10e:	3501      	adds	r5, #1
 801e110:	e7ee      	b.n	801e0f0 <__libc_init_array+0xc>
 801e112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e116:	4798      	blx	r3
 801e118:	3501      	adds	r5, #1
 801e11a:	e7f2      	b.n	801e102 <__libc_init_array+0x1e>
 801e11c:	08023718 	.word	0x08023718
 801e120:	08023718 	.word	0x08023718
 801e124:	08023718 	.word	0x08023718
 801e128:	0802371c 	.word	0x0802371c

0801e12c <malloc>:
 801e12c:	4b02      	ldr	r3, [pc, #8]	; (801e138 <malloc+0xc>)
 801e12e:	4601      	mov	r1, r0
 801e130:	6818      	ldr	r0, [r3, #0]
 801e132:	f000 b86d 	b.w	801e210 <_malloc_r>
 801e136:	bf00      	nop
 801e138:	2000009c 	.word	0x2000009c

0801e13c <free>:
 801e13c:	4b02      	ldr	r3, [pc, #8]	; (801e148 <free+0xc>)
 801e13e:	4601      	mov	r1, r0
 801e140:	6818      	ldr	r0, [r3, #0]
 801e142:	f000 b817 	b.w	801e174 <_free_r>
 801e146:	bf00      	nop
 801e148:	2000009c 	.word	0x2000009c

0801e14c <memcpy>:
 801e14c:	b510      	push	{r4, lr}
 801e14e:	1e43      	subs	r3, r0, #1
 801e150:	440a      	add	r2, r1
 801e152:	4291      	cmp	r1, r2
 801e154:	d100      	bne.n	801e158 <memcpy+0xc>
 801e156:	bd10      	pop	{r4, pc}
 801e158:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e15c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e160:	e7f7      	b.n	801e152 <memcpy+0x6>

0801e162 <memset>:
 801e162:	4402      	add	r2, r0
 801e164:	4603      	mov	r3, r0
 801e166:	4293      	cmp	r3, r2
 801e168:	d100      	bne.n	801e16c <memset+0xa>
 801e16a:	4770      	bx	lr
 801e16c:	f803 1b01 	strb.w	r1, [r3], #1
 801e170:	e7f9      	b.n	801e166 <memset+0x4>
	...

0801e174 <_free_r>:
 801e174:	b538      	push	{r3, r4, r5, lr}
 801e176:	4605      	mov	r5, r0
 801e178:	2900      	cmp	r1, #0
 801e17a:	d045      	beq.n	801e208 <_free_r+0x94>
 801e17c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e180:	1f0c      	subs	r4, r1, #4
 801e182:	2b00      	cmp	r3, #0
 801e184:	bfb8      	it	lt
 801e186:	18e4      	addlt	r4, r4, r3
 801e188:	f001 fb96 	bl	801f8b8 <__malloc_lock>
 801e18c:	4a1f      	ldr	r2, [pc, #124]	; (801e20c <_free_r+0x98>)
 801e18e:	6813      	ldr	r3, [r2, #0]
 801e190:	4610      	mov	r0, r2
 801e192:	b933      	cbnz	r3, 801e1a2 <_free_r+0x2e>
 801e194:	6063      	str	r3, [r4, #4]
 801e196:	6014      	str	r4, [r2, #0]
 801e198:	4628      	mov	r0, r5
 801e19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e19e:	f001 bb8c 	b.w	801f8ba <__malloc_unlock>
 801e1a2:	42a3      	cmp	r3, r4
 801e1a4:	d90c      	bls.n	801e1c0 <_free_r+0x4c>
 801e1a6:	6821      	ldr	r1, [r4, #0]
 801e1a8:	1862      	adds	r2, r4, r1
 801e1aa:	4293      	cmp	r3, r2
 801e1ac:	bf04      	itt	eq
 801e1ae:	681a      	ldreq	r2, [r3, #0]
 801e1b0:	685b      	ldreq	r3, [r3, #4]
 801e1b2:	6063      	str	r3, [r4, #4]
 801e1b4:	bf04      	itt	eq
 801e1b6:	1852      	addeq	r2, r2, r1
 801e1b8:	6022      	streq	r2, [r4, #0]
 801e1ba:	6004      	str	r4, [r0, #0]
 801e1bc:	e7ec      	b.n	801e198 <_free_r+0x24>
 801e1be:	4613      	mov	r3, r2
 801e1c0:	685a      	ldr	r2, [r3, #4]
 801e1c2:	b10a      	cbz	r2, 801e1c8 <_free_r+0x54>
 801e1c4:	42a2      	cmp	r2, r4
 801e1c6:	d9fa      	bls.n	801e1be <_free_r+0x4a>
 801e1c8:	6819      	ldr	r1, [r3, #0]
 801e1ca:	1858      	adds	r0, r3, r1
 801e1cc:	42a0      	cmp	r0, r4
 801e1ce:	d10b      	bne.n	801e1e8 <_free_r+0x74>
 801e1d0:	6820      	ldr	r0, [r4, #0]
 801e1d2:	4401      	add	r1, r0
 801e1d4:	1858      	adds	r0, r3, r1
 801e1d6:	4282      	cmp	r2, r0
 801e1d8:	6019      	str	r1, [r3, #0]
 801e1da:	d1dd      	bne.n	801e198 <_free_r+0x24>
 801e1dc:	6810      	ldr	r0, [r2, #0]
 801e1de:	6852      	ldr	r2, [r2, #4]
 801e1e0:	605a      	str	r2, [r3, #4]
 801e1e2:	4401      	add	r1, r0
 801e1e4:	6019      	str	r1, [r3, #0]
 801e1e6:	e7d7      	b.n	801e198 <_free_r+0x24>
 801e1e8:	d902      	bls.n	801e1f0 <_free_r+0x7c>
 801e1ea:	230c      	movs	r3, #12
 801e1ec:	602b      	str	r3, [r5, #0]
 801e1ee:	e7d3      	b.n	801e198 <_free_r+0x24>
 801e1f0:	6820      	ldr	r0, [r4, #0]
 801e1f2:	1821      	adds	r1, r4, r0
 801e1f4:	428a      	cmp	r2, r1
 801e1f6:	bf04      	itt	eq
 801e1f8:	6811      	ldreq	r1, [r2, #0]
 801e1fa:	6852      	ldreq	r2, [r2, #4]
 801e1fc:	6062      	str	r2, [r4, #4]
 801e1fe:	bf04      	itt	eq
 801e200:	1809      	addeq	r1, r1, r0
 801e202:	6021      	streq	r1, [r4, #0]
 801e204:	605c      	str	r4, [r3, #4]
 801e206:	e7c7      	b.n	801e198 <_free_r+0x24>
 801e208:	bd38      	pop	{r3, r4, r5, pc}
 801e20a:	bf00      	nop
 801e20c:	20000e10 	.word	0x20000e10

0801e210 <_malloc_r>:
 801e210:	b570      	push	{r4, r5, r6, lr}
 801e212:	1ccd      	adds	r5, r1, #3
 801e214:	f025 0503 	bic.w	r5, r5, #3
 801e218:	3508      	adds	r5, #8
 801e21a:	2d0c      	cmp	r5, #12
 801e21c:	bf38      	it	cc
 801e21e:	250c      	movcc	r5, #12
 801e220:	2d00      	cmp	r5, #0
 801e222:	4606      	mov	r6, r0
 801e224:	db01      	blt.n	801e22a <_malloc_r+0x1a>
 801e226:	42a9      	cmp	r1, r5
 801e228:	d903      	bls.n	801e232 <_malloc_r+0x22>
 801e22a:	230c      	movs	r3, #12
 801e22c:	6033      	str	r3, [r6, #0]
 801e22e:	2000      	movs	r0, #0
 801e230:	bd70      	pop	{r4, r5, r6, pc}
 801e232:	f001 fb41 	bl	801f8b8 <__malloc_lock>
 801e236:	4a21      	ldr	r2, [pc, #132]	; (801e2bc <_malloc_r+0xac>)
 801e238:	6814      	ldr	r4, [r2, #0]
 801e23a:	4621      	mov	r1, r4
 801e23c:	b991      	cbnz	r1, 801e264 <_malloc_r+0x54>
 801e23e:	4c20      	ldr	r4, [pc, #128]	; (801e2c0 <_malloc_r+0xb0>)
 801e240:	6823      	ldr	r3, [r4, #0]
 801e242:	b91b      	cbnz	r3, 801e24c <_malloc_r+0x3c>
 801e244:	4630      	mov	r0, r6
 801e246:	f000 fc77 	bl	801eb38 <_sbrk_r>
 801e24a:	6020      	str	r0, [r4, #0]
 801e24c:	4629      	mov	r1, r5
 801e24e:	4630      	mov	r0, r6
 801e250:	f000 fc72 	bl	801eb38 <_sbrk_r>
 801e254:	1c43      	adds	r3, r0, #1
 801e256:	d124      	bne.n	801e2a2 <_malloc_r+0x92>
 801e258:	230c      	movs	r3, #12
 801e25a:	6033      	str	r3, [r6, #0]
 801e25c:	4630      	mov	r0, r6
 801e25e:	f001 fb2c 	bl	801f8ba <__malloc_unlock>
 801e262:	e7e4      	b.n	801e22e <_malloc_r+0x1e>
 801e264:	680b      	ldr	r3, [r1, #0]
 801e266:	1b5b      	subs	r3, r3, r5
 801e268:	d418      	bmi.n	801e29c <_malloc_r+0x8c>
 801e26a:	2b0b      	cmp	r3, #11
 801e26c:	d90f      	bls.n	801e28e <_malloc_r+0x7e>
 801e26e:	600b      	str	r3, [r1, #0]
 801e270:	50cd      	str	r5, [r1, r3]
 801e272:	18cc      	adds	r4, r1, r3
 801e274:	4630      	mov	r0, r6
 801e276:	f001 fb20 	bl	801f8ba <__malloc_unlock>
 801e27a:	f104 000b 	add.w	r0, r4, #11
 801e27e:	1d23      	adds	r3, r4, #4
 801e280:	f020 0007 	bic.w	r0, r0, #7
 801e284:	1ac3      	subs	r3, r0, r3
 801e286:	d0d3      	beq.n	801e230 <_malloc_r+0x20>
 801e288:	425a      	negs	r2, r3
 801e28a:	50e2      	str	r2, [r4, r3]
 801e28c:	e7d0      	b.n	801e230 <_malloc_r+0x20>
 801e28e:	428c      	cmp	r4, r1
 801e290:	684b      	ldr	r3, [r1, #4]
 801e292:	bf16      	itet	ne
 801e294:	6063      	strne	r3, [r4, #4]
 801e296:	6013      	streq	r3, [r2, #0]
 801e298:	460c      	movne	r4, r1
 801e29a:	e7eb      	b.n	801e274 <_malloc_r+0x64>
 801e29c:	460c      	mov	r4, r1
 801e29e:	6849      	ldr	r1, [r1, #4]
 801e2a0:	e7cc      	b.n	801e23c <_malloc_r+0x2c>
 801e2a2:	1cc4      	adds	r4, r0, #3
 801e2a4:	f024 0403 	bic.w	r4, r4, #3
 801e2a8:	42a0      	cmp	r0, r4
 801e2aa:	d005      	beq.n	801e2b8 <_malloc_r+0xa8>
 801e2ac:	1a21      	subs	r1, r4, r0
 801e2ae:	4630      	mov	r0, r6
 801e2b0:	f000 fc42 	bl	801eb38 <_sbrk_r>
 801e2b4:	3001      	adds	r0, #1
 801e2b6:	d0cf      	beq.n	801e258 <_malloc_r+0x48>
 801e2b8:	6025      	str	r5, [r4, #0]
 801e2ba:	e7db      	b.n	801e274 <_malloc_r+0x64>
 801e2bc:	20000e10 	.word	0x20000e10
 801e2c0:	20000e14 	.word	0x20000e14

0801e2c4 <__cvt>:
 801e2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2c6:	ed2d 8b02 	vpush	{d8}
 801e2ca:	eeb0 8b40 	vmov.f64	d8, d0
 801e2ce:	b085      	sub	sp, #20
 801e2d0:	4617      	mov	r7, r2
 801e2d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e2d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e2d6:	ee18 2a90 	vmov	r2, s17
 801e2da:	f025 0520 	bic.w	r5, r5, #32
 801e2de:	2a00      	cmp	r2, #0
 801e2e0:	bfb6      	itet	lt
 801e2e2:	222d      	movlt	r2, #45	; 0x2d
 801e2e4:	2200      	movge	r2, #0
 801e2e6:	eeb1 8b40 	vneglt.f64	d8, d0
 801e2ea:	2d46      	cmp	r5, #70	; 0x46
 801e2ec:	460c      	mov	r4, r1
 801e2ee:	701a      	strb	r2, [r3, #0]
 801e2f0:	d004      	beq.n	801e2fc <__cvt+0x38>
 801e2f2:	2d45      	cmp	r5, #69	; 0x45
 801e2f4:	d100      	bne.n	801e2f8 <__cvt+0x34>
 801e2f6:	3401      	adds	r4, #1
 801e2f8:	2102      	movs	r1, #2
 801e2fa:	e000      	b.n	801e2fe <__cvt+0x3a>
 801e2fc:	2103      	movs	r1, #3
 801e2fe:	ab03      	add	r3, sp, #12
 801e300:	9301      	str	r3, [sp, #4]
 801e302:	ab02      	add	r3, sp, #8
 801e304:	9300      	str	r3, [sp, #0]
 801e306:	4622      	mov	r2, r4
 801e308:	4633      	mov	r3, r6
 801e30a:	eeb0 0b48 	vmov.f64	d0, d8
 801e30e:	f000 fd63 	bl	801edd8 <_dtoa_r>
 801e312:	2d47      	cmp	r5, #71	; 0x47
 801e314:	d101      	bne.n	801e31a <__cvt+0x56>
 801e316:	07fb      	lsls	r3, r7, #31
 801e318:	d51e      	bpl.n	801e358 <__cvt+0x94>
 801e31a:	2d46      	cmp	r5, #70	; 0x46
 801e31c:	eb00 0304 	add.w	r3, r0, r4
 801e320:	d10c      	bne.n	801e33c <__cvt+0x78>
 801e322:	7802      	ldrb	r2, [r0, #0]
 801e324:	2a30      	cmp	r2, #48	; 0x30
 801e326:	d107      	bne.n	801e338 <__cvt+0x74>
 801e328:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e330:	bf1c      	itt	ne
 801e332:	f1c4 0401 	rsbne	r4, r4, #1
 801e336:	6034      	strne	r4, [r6, #0]
 801e338:	6832      	ldr	r2, [r6, #0]
 801e33a:	4413      	add	r3, r2
 801e33c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e344:	d007      	beq.n	801e356 <__cvt+0x92>
 801e346:	2130      	movs	r1, #48	; 0x30
 801e348:	9a03      	ldr	r2, [sp, #12]
 801e34a:	429a      	cmp	r2, r3
 801e34c:	d204      	bcs.n	801e358 <__cvt+0x94>
 801e34e:	1c54      	adds	r4, r2, #1
 801e350:	9403      	str	r4, [sp, #12]
 801e352:	7011      	strb	r1, [r2, #0]
 801e354:	e7f8      	b.n	801e348 <__cvt+0x84>
 801e356:	9303      	str	r3, [sp, #12]
 801e358:	9b03      	ldr	r3, [sp, #12]
 801e35a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e35c:	1a1b      	subs	r3, r3, r0
 801e35e:	6013      	str	r3, [r2, #0]
 801e360:	b005      	add	sp, #20
 801e362:	ecbd 8b02 	vpop	{d8}
 801e366:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e368 <__exponent>:
 801e368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e36a:	2900      	cmp	r1, #0
 801e36c:	4604      	mov	r4, r0
 801e36e:	bfba      	itte	lt
 801e370:	4249      	neglt	r1, r1
 801e372:	232d      	movlt	r3, #45	; 0x2d
 801e374:	232b      	movge	r3, #43	; 0x2b
 801e376:	2909      	cmp	r1, #9
 801e378:	f804 2b02 	strb.w	r2, [r4], #2
 801e37c:	7043      	strb	r3, [r0, #1]
 801e37e:	dd20      	ble.n	801e3c2 <__exponent+0x5a>
 801e380:	f10d 0307 	add.w	r3, sp, #7
 801e384:	461f      	mov	r7, r3
 801e386:	260a      	movs	r6, #10
 801e388:	fb91 f5f6 	sdiv	r5, r1, r6
 801e38c:	fb06 1115 	mls	r1, r6, r5, r1
 801e390:	3130      	adds	r1, #48	; 0x30
 801e392:	2d09      	cmp	r5, #9
 801e394:	f803 1c01 	strb.w	r1, [r3, #-1]
 801e398:	f103 32ff 	add.w	r2, r3, #4294967295
 801e39c:	4629      	mov	r1, r5
 801e39e:	dc09      	bgt.n	801e3b4 <__exponent+0x4c>
 801e3a0:	3130      	adds	r1, #48	; 0x30
 801e3a2:	3b02      	subs	r3, #2
 801e3a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 801e3a8:	42bb      	cmp	r3, r7
 801e3aa:	4622      	mov	r2, r4
 801e3ac:	d304      	bcc.n	801e3b8 <__exponent+0x50>
 801e3ae:	1a10      	subs	r0, r2, r0
 801e3b0:	b003      	add	sp, #12
 801e3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3b4:	4613      	mov	r3, r2
 801e3b6:	e7e7      	b.n	801e388 <__exponent+0x20>
 801e3b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e3bc:	f804 2b01 	strb.w	r2, [r4], #1
 801e3c0:	e7f2      	b.n	801e3a8 <__exponent+0x40>
 801e3c2:	2330      	movs	r3, #48	; 0x30
 801e3c4:	4419      	add	r1, r3
 801e3c6:	7083      	strb	r3, [r0, #2]
 801e3c8:	1d02      	adds	r2, r0, #4
 801e3ca:	70c1      	strb	r1, [r0, #3]
 801e3cc:	e7ef      	b.n	801e3ae <__exponent+0x46>
	...

0801e3d0 <_printf_float>:
 801e3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3d4:	b08d      	sub	sp, #52	; 0x34
 801e3d6:	460c      	mov	r4, r1
 801e3d8:	4616      	mov	r6, r2
 801e3da:	461f      	mov	r7, r3
 801e3dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e3e0:	4605      	mov	r5, r0
 801e3e2:	f001 fa49 	bl	801f878 <_localeconv_r>
 801e3e6:	f8d0 b000 	ldr.w	fp, [r0]
 801e3ea:	4658      	mov	r0, fp
 801e3ec:	f7e1 ff32 	bl	8000254 <strlen>
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	930a      	str	r3, [sp, #40]	; 0x28
 801e3f4:	f8d8 3000 	ldr.w	r3, [r8]
 801e3f8:	9005      	str	r0, [sp, #20]
 801e3fa:	3307      	adds	r3, #7
 801e3fc:	f023 0307 	bic.w	r3, r3, #7
 801e400:	f103 0108 	add.w	r1, r3, #8
 801e404:	f894 9018 	ldrb.w	r9, [r4, #24]
 801e408:	6822      	ldr	r2, [r4, #0]
 801e40a:	f8c8 1000 	str.w	r1, [r8]
 801e40e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e412:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801e416:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801e6a0 <_printf_float+0x2d0>
 801e41a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801e41e:	eeb0 6bc0 	vabs.f64	d6, d0
 801e422:	eeb4 6b47 	vcmp.f64	d6, d7
 801e426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e42a:	dd24      	ble.n	801e476 <_printf_float+0xa6>
 801e42c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e434:	d502      	bpl.n	801e43c <_printf_float+0x6c>
 801e436:	232d      	movs	r3, #45	; 0x2d
 801e438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e43c:	499a      	ldr	r1, [pc, #616]	; (801e6a8 <_printf_float+0x2d8>)
 801e43e:	4b9b      	ldr	r3, [pc, #620]	; (801e6ac <_printf_float+0x2dc>)
 801e440:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801e444:	bf8c      	ite	hi
 801e446:	4688      	movhi	r8, r1
 801e448:	4698      	movls	r8, r3
 801e44a:	f022 0204 	bic.w	r2, r2, #4
 801e44e:	2303      	movs	r3, #3
 801e450:	6123      	str	r3, [r4, #16]
 801e452:	6022      	str	r2, [r4, #0]
 801e454:	f04f 0a00 	mov.w	sl, #0
 801e458:	9700      	str	r7, [sp, #0]
 801e45a:	4633      	mov	r3, r6
 801e45c:	aa0b      	add	r2, sp, #44	; 0x2c
 801e45e:	4621      	mov	r1, r4
 801e460:	4628      	mov	r0, r5
 801e462:	f000 f9e1 	bl	801e828 <_printf_common>
 801e466:	3001      	adds	r0, #1
 801e468:	f040 8089 	bne.w	801e57e <_printf_float+0x1ae>
 801e46c:	f04f 30ff 	mov.w	r0, #4294967295
 801e470:	b00d      	add	sp, #52	; 0x34
 801e472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e476:	eeb4 0b40 	vcmp.f64	d0, d0
 801e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e47e:	d702      	bvc.n	801e486 <_printf_float+0xb6>
 801e480:	498b      	ldr	r1, [pc, #556]	; (801e6b0 <_printf_float+0x2e0>)
 801e482:	4b8c      	ldr	r3, [pc, #560]	; (801e6b4 <_printf_float+0x2e4>)
 801e484:	e7dc      	b.n	801e440 <_printf_float+0x70>
 801e486:	6861      	ldr	r1, [r4, #4]
 801e488:	1c4b      	adds	r3, r1, #1
 801e48a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e48e:	ab0a      	add	r3, sp, #40	; 0x28
 801e490:	a809      	add	r0, sp, #36	; 0x24
 801e492:	d13b      	bne.n	801e50c <_printf_float+0x13c>
 801e494:	2106      	movs	r1, #6
 801e496:	6061      	str	r1, [r4, #4]
 801e498:	f04f 0c00 	mov.w	ip, #0
 801e49c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e4a0:	e9cd 0900 	strd	r0, r9, [sp]
 801e4a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e4a8:	6022      	str	r2, [r4, #0]
 801e4aa:	6861      	ldr	r1, [r4, #4]
 801e4ac:	4628      	mov	r0, r5
 801e4ae:	f7ff ff09 	bl	801e2c4 <__cvt>
 801e4b2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801e4b6:	2b47      	cmp	r3, #71	; 0x47
 801e4b8:	4680      	mov	r8, r0
 801e4ba:	d109      	bne.n	801e4d0 <_printf_float+0x100>
 801e4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4be:	1cd8      	adds	r0, r3, #3
 801e4c0:	db02      	blt.n	801e4c8 <_printf_float+0xf8>
 801e4c2:	6862      	ldr	r2, [r4, #4]
 801e4c4:	4293      	cmp	r3, r2
 801e4c6:	dd47      	ble.n	801e558 <_printf_float+0x188>
 801e4c8:	f1a9 0902 	sub.w	r9, r9, #2
 801e4cc:	fa5f f989 	uxtb.w	r9, r9
 801e4d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e4d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e4d6:	d824      	bhi.n	801e522 <_printf_float+0x152>
 801e4d8:	3901      	subs	r1, #1
 801e4da:	464a      	mov	r2, r9
 801e4dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e4e0:	9109      	str	r1, [sp, #36]	; 0x24
 801e4e2:	f7ff ff41 	bl	801e368 <__exponent>
 801e4e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e4e8:	1813      	adds	r3, r2, r0
 801e4ea:	2a01      	cmp	r2, #1
 801e4ec:	4682      	mov	sl, r0
 801e4ee:	6123      	str	r3, [r4, #16]
 801e4f0:	dc02      	bgt.n	801e4f8 <_printf_float+0x128>
 801e4f2:	6822      	ldr	r2, [r4, #0]
 801e4f4:	07d1      	lsls	r1, r2, #31
 801e4f6:	d501      	bpl.n	801e4fc <_printf_float+0x12c>
 801e4f8:	3301      	adds	r3, #1
 801e4fa:	6123      	str	r3, [r4, #16]
 801e4fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e500:	2b00      	cmp	r3, #0
 801e502:	d0a9      	beq.n	801e458 <_printf_float+0x88>
 801e504:	232d      	movs	r3, #45	; 0x2d
 801e506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e50a:	e7a5      	b.n	801e458 <_printf_float+0x88>
 801e50c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801e510:	f000 8178 	beq.w	801e804 <_printf_float+0x434>
 801e514:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801e518:	d1be      	bne.n	801e498 <_printf_float+0xc8>
 801e51a:	2900      	cmp	r1, #0
 801e51c:	d1bc      	bne.n	801e498 <_printf_float+0xc8>
 801e51e:	2101      	movs	r1, #1
 801e520:	e7b9      	b.n	801e496 <_printf_float+0xc6>
 801e522:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801e526:	d119      	bne.n	801e55c <_printf_float+0x18c>
 801e528:	2900      	cmp	r1, #0
 801e52a:	6863      	ldr	r3, [r4, #4]
 801e52c:	dd0c      	ble.n	801e548 <_printf_float+0x178>
 801e52e:	6121      	str	r1, [r4, #16]
 801e530:	b913      	cbnz	r3, 801e538 <_printf_float+0x168>
 801e532:	6822      	ldr	r2, [r4, #0]
 801e534:	07d2      	lsls	r2, r2, #31
 801e536:	d502      	bpl.n	801e53e <_printf_float+0x16e>
 801e538:	3301      	adds	r3, #1
 801e53a:	440b      	add	r3, r1
 801e53c:	6123      	str	r3, [r4, #16]
 801e53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e540:	65a3      	str	r3, [r4, #88]	; 0x58
 801e542:	f04f 0a00 	mov.w	sl, #0
 801e546:	e7d9      	b.n	801e4fc <_printf_float+0x12c>
 801e548:	b913      	cbnz	r3, 801e550 <_printf_float+0x180>
 801e54a:	6822      	ldr	r2, [r4, #0]
 801e54c:	07d0      	lsls	r0, r2, #31
 801e54e:	d501      	bpl.n	801e554 <_printf_float+0x184>
 801e550:	3302      	adds	r3, #2
 801e552:	e7f3      	b.n	801e53c <_printf_float+0x16c>
 801e554:	2301      	movs	r3, #1
 801e556:	e7f1      	b.n	801e53c <_printf_float+0x16c>
 801e558:	f04f 0967 	mov.w	r9, #103	; 0x67
 801e55c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801e560:	4293      	cmp	r3, r2
 801e562:	db05      	blt.n	801e570 <_printf_float+0x1a0>
 801e564:	6822      	ldr	r2, [r4, #0]
 801e566:	6123      	str	r3, [r4, #16]
 801e568:	07d1      	lsls	r1, r2, #31
 801e56a:	d5e8      	bpl.n	801e53e <_printf_float+0x16e>
 801e56c:	3301      	adds	r3, #1
 801e56e:	e7e5      	b.n	801e53c <_printf_float+0x16c>
 801e570:	2b00      	cmp	r3, #0
 801e572:	bfd4      	ite	le
 801e574:	f1c3 0302 	rsble	r3, r3, #2
 801e578:	2301      	movgt	r3, #1
 801e57a:	4413      	add	r3, r2
 801e57c:	e7de      	b.n	801e53c <_printf_float+0x16c>
 801e57e:	6823      	ldr	r3, [r4, #0]
 801e580:	055a      	lsls	r2, r3, #21
 801e582:	d407      	bmi.n	801e594 <_printf_float+0x1c4>
 801e584:	6923      	ldr	r3, [r4, #16]
 801e586:	4642      	mov	r2, r8
 801e588:	4631      	mov	r1, r6
 801e58a:	4628      	mov	r0, r5
 801e58c:	47b8      	blx	r7
 801e58e:	3001      	adds	r0, #1
 801e590:	d12a      	bne.n	801e5e8 <_printf_float+0x218>
 801e592:	e76b      	b.n	801e46c <_printf_float+0x9c>
 801e594:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e598:	f240 80de 	bls.w	801e758 <_printf_float+0x388>
 801e59c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e5a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5a8:	d133      	bne.n	801e612 <_printf_float+0x242>
 801e5aa:	2301      	movs	r3, #1
 801e5ac:	4a42      	ldr	r2, [pc, #264]	; (801e6b8 <_printf_float+0x2e8>)
 801e5ae:	4631      	mov	r1, r6
 801e5b0:	4628      	mov	r0, r5
 801e5b2:	47b8      	blx	r7
 801e5b4:	3001      	adds	r0, #1
 801e5b6:	f43f af59 	beq.w	801e46c <_printf_float+0x9c>
 801e5ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e5be:	429a      	cmp	r2, r3
 801e5c0:	db02      	blt.n	801e5c8 <_printf_float+0x1f8>
 801e5c2:	6823      	ldr	r3, [r4, #0]
 801e5c4:	07d8      	lsls	r0, r3, #31
 801e5c6:	d50f      	bpl.n	801e5e8 <_printf_float+0x218>
 801e5c8:	9b05      	ldr	r3, [sp, #20]
 801e5ca:	465a      	mov	r2, fp
 801e5cc:	4631      	mov	r1, r6
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	47b8      	blx	r7
 801e5d2:	3001      	adds	r0, #1
 801e5d4:	f43f af4a 	beq.w	801e46c <_printf_float+0x9c>
 801e5d8:	f04f 0800 	mov.w	r8, #0
 801e5dc:	f104 091a 	add.w	r9, r4, #26
 801e5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5e2:	3b01      	subs	r3, #1
 801e5e4:	4543      	cmp	r3, r8
 801e5e6:	dc09      	bgt.n	801e5fc <_printf_float+0x22c>
 801e5e8:	6823      	ldr	r3, [r4, #0]
 801e5ea:	079b      	lsls	r3, r3, #30
 801e5ec:	f100 8105 	bmi.w	801e7fa <_printf_float+0x42a>
 801e5f0:	68e0      	ldr	r0, [r4, #12]
 801e5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5f4:	4298      	cmp	r0, r3
 801e5f6:	bfb8      	it	lt
 801e5f8:	4618      	movlt	r0, r3
 801e5fa:	e739      	b.n	801e470 <_printf_float+0xa0>
 801e5fc:	2301      	movs	r3, #1
 801e5fe:	464a      	mov	r2, r9
 801e600:	4631      	mov	r1, r6
 801e602:	4628      	mov	r0, r5
 801e604:	47b8      	blx	r7
 801e606:	3001      	adds	r0, #1
 801e608:	f43f af30 	beq.w	801e46c <_printf_float+0x9c>
 801e60c:	f108 0801 	add.w	r8, r8, #1
 801e610:	e7e6      	b.n	801e5e0 <_printf_float+0x210>
 801e612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e614:	2b00      	cmp	r3, #0
 801e616:	dc2b      	bgt.n	801e670 <_printf_float+0x2a0>
 801e618:	2301      	movs	r3, #1
 801e61a:	4a27      	ldr	r2, [pc, #156]	; (801e6b8 <_printf_float+0x2e8>)
 801e61c:	4631      	mov	r1, r6
 801e61e:	4628      	mov	r0, r5
 801e620:	47b8      	blx	r7
 801e622:	3001      	adds	r0, #1
 801e624:	f43f af22 	beq.w	801e46c <_printf_float+0x9c>
 801e628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e62a:	b923      	cbnz	r3, 801e636 <_printf_float+0x266>
 801e62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e62e:	b913      	cbnz	r3, 801e636 <_printf_float+0x266>
 801e630:	6823      	ldr	r3, [r4, #0]
 801e632:	07d9      	lsls	r1, r3, #31
 801e634:	d5d8      	bpl.n	801e5e8 <_printf_float+0x218>
 801e636:	9b05      	ldr	r3, [sp, #20]
 801e638:	465a      	mov	r2, fp
 801e63a:	4631      	mov	r1, r6
 801e63c:	4628      	mov	r0, r5
 801e63e:	47b8      	blx	r7
 801e640:	3001      	adds	r0, #1
 801e642:	f43f af13 	beq.w	801e46c <_printf_float+0x9c>
 801e646:	f04f 0900 	mov.w	r9, #0
 801e64a:	f104 0a1a 	add.w	sl, r4, #26
 801e64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e650:	425b      	negs	r3, r3
 801e652:	454b      	cmp	r3, r9
 801e654:	dc01      	bgt.n	801e65a <_printf_float+0x28a>
 801e656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e658:	e795      	b.n	801e586 <_printf_float+0x1b6>
 801e65a:	2301      	movs	r3, #1
 801e65c:	4652      	mov	r2, sl
 801e65e:	4631      	mov	r1, r6
 801e660:	4628      	mov	r0, r5
 801e662:	47b8      	blx	r7
 801e664:	3001      	adds	r0, #1
 801e666:	f43f af01 	beq.w	801e46c <_printf_float+0x9c>
 801e66a:	f109 0901 	add.w	r9, r9, #1
 801e66e:	e7ee      	b.n	801e64e <_printf_float+0x27e>
 801e670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e674:	429a      	cmp	r2, r3
 801e676:	bfa8      	it	ge
 801e678:	461a      	movge	r2, r3
 801e67a:	2a00      	cmp	r2, #0
 801e67c:	4691      	mov	r9, r2
 801e67e:	dd07      	ble.n	801e690 <_printf_float+0x2c0>
 801e680:	4613      	mov	r3, r2
 801e682:	4631      	mov	r1, r6
 801e684:	4642      	mov	r2, r8
 801e686:	4628      	mov	r0, r5
 801e688:	47b8      	blx	r7
 801e68a:	3001      	adds	r0, #1
 801e68c:	f43f aeee 	beq.w	801e46c <_printf_float+0x9c>
 801e690:	f104 031a 	add.w	r3, r4, #26
 801e694:	f04f 0a00 	mov.w	sl, #0
 801e698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e69c:	9307      	str	r3, [sp, #28]
 801e69e:	e017      	b.n	801e6d0 <_printf_float+0x300>
 801e6a0:	ffffffff 	.word	0xffffffff
 801e6a4:	7fefffff 	.word	0x7fefffff
 801e6a8:	08023454 	.word	0x08023454
 801e6ac:	08023450 	.word	0x08023450
 801e6b0:	0802345c 	.word	0x0802345c
 801e6b4:	08023458 	.word	0x08023458
 801e6b8:	08023460 	.word	0x08023460
 801e6bc:	2301      	movs	r3, #1
 801e6be:	9a07      	ldr	r2, [sp, #28]
 801e6c0:	4631      	mov	r1, r6
 801e6c2:	4628      	mov	r0, r5
 801e6c4:	47b8      	blx	r7
 801e6c6:	3001      	adds	r0, #1
 801e6c8:	f43f aed0 	beq.w	801e46c <_printf_float+0x9c>
 801e6cc:	f10a 0a01 	add.w	sl, sl, #1
 801e6d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e6d2:	9306      	str	r3, [sp, #24]
 801e6d4:	eba3 0309 	sub.w	r3, r3, r9
 801e6d8:	4553      	cmp	r3, sl
 801e6da:	dcef      	bgt.n	801e6bc <_printf_float+0x2ec>
 801e6dc:	9b06      	ldr	r3, [sp, #24]
 801e6de:	4498      	add	r8, r3
 801e6e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e6e4:	429a      	cmp	r2, r3
 801e6e6:	db15      	blt.n	801e714 <_printf_float+0x344>
 801e6e8:	6823      	ldr	r3, [r4, #0]
 801e6ea:	07da      	lsls	r2, r3, #31
 801e6ec:	d412      	bmi.n	801e714 <_printf_float+0x344>
 801e6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6f0:	9a06      	ldr	r2, [sp, #24]
 801e6f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e6f4:	1a9a      	subs	r2, r3, r2
 801e6f6:	eba3 0a01 	sub.w	sl, r3, r1
 801e6fa:	4592      	cmp	sl, r2
 801e6fc:	bfa8      	it	ge
 801e6fe:	4692      	movge	sl, r2
 801e700:	f1ba 0f00 	cmp.w	sl, #0
 801e704:	dc0e      	bgt.n	801e724 <_printf_float+0x354>
 801e706:	f04f 0800 	mov.w	r8, #0
 801e70a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e70e:	f104 091a 	add.w	r9, r4, #26
 801e712:	e019      	b.n	801e748 <_printf_float+0x378>
 801e714:	9b05      	ldr	r3, [sp, #20]
 801e716:	465a      	mov	r2, fp
 801e718:	4631      	mov	r1, r6
 801e71a:	4628      	mov	r0, r5
 801e71c:	47b8      	blx	r7
 801e71e:	3001      	adds	r0, #1
 801e720:	d1e5      	bne.n	801e6ee <_printf_float+0x31e>
 801e722:	e6a3      	b.n	801e46c <_printf_float+0x9c>
 801e724:	4653      	mov	r3, sl
 801e726:	4642      	mov	r2, r8
 801e728:	4631      	mov	r1, r6
 801e72a:	4628      	mov	r0, r5
 801e72c:	47b8      	blx	r7
 801e72e:	3001      	adds	r0, #1
 801e730:	d1e9      	bne.n	801e706 <_printf_float+0x336>
 801e732:	e69b      	b.n	801e46c <_printf_float+0x9c>
 801e734:	2301      	movs	r3, #1
 801e736:	464a      	mov	r2, r9
 801e738:	4631      	mov	r1, r6
 801e73a:	4628      	mov	r0, r5
 801e73c:	47b8      	blx	r7
 801e73e:	3001      	adds	r0, #1
 801e740:	f43f ae94 	beq.w	801e46c <_printf_float+0x9c>
 801e744:	f108 0801 	add.w	r8, r8, #1
 801e748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e74c:	1a9b      	subs	r3, r3, r2
 801e74e:	eba3 030a 	sub.w	r3, r3, sl
 801e752:	4543      	cmp	r3, r8
 801e754:	dcee      	bgt.n	801e734 <_printf_float+0x364>
 801e756:	e747      	b.n	801e5e8 <_printf_float+0x218>
 801e758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e75a:	2a01      	cmp	r2, #1
 801e75c:	dc01      	bgt.n	801e762 <_printf_float+0x392>
 801e75e:	07db      	lsls	r3, r3, #31
 801e760:	d539      	bpl.n	801e7d6 <_printf_float+0x406>
 801e762:	2301      	movs	r3, #1
 801e764:	4642      	mov	r2, r8
 801e766:	4631      	mov	r1, r6
 801e768:	4628      	mov	r0, r5
 801e76a:	47b8      	blx	r7
 801e76c:	3001      	adds	r0, #1
 801e76e:	f43f ae7d 	beq.w	801e46c <_printf_float+0x9c>
 801e772:	9b05      	ldr	r3, [sp, #20]
 801e774:	465a      	mov	r2, fp
 801e776:	4631      	mov	r1, r6
 801e778:	4628      	mov	r0, r5
 801e77a:	47b8      	blx	r7
 801e77c:	3001      	adds	r0, #1
 801e77e:	f108 0801 	add.w	r8, r8, #1
 801e782:	f43f ae73 	beq.w	801e46c <_printf_float+0x9c>
 801e786:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e78c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e794:	f103 33ff 	add.w	r3, r3, #4294967295
 801e798:	d018      	beq.n	801e7cc <_printf_float+0x3fc>
 801e79a:	4642      	mov	r2, r8
 801e79c:	4631      	mov	r1, r6
 801e79e:	4628      	mov	r0, r5
 801e7a0:	47b8      	blx	r7
 801e7a2:	3001      	adds	r0, #1
 801e7a4:	d10e      	bne.n	801e7c4 <_printf_float+0x3f4>
 801e7a6:	e661      	b.n	801e46c <_printf_float+0x9c>
 801e7a8:	2301      	movs	r3, #1
 801e7aa:	464a      	mov	r2, r9
 801e7ac:	4631      	mov	r1, r6
 801e7ae:	4628      	mov	r0, r5
 801e7b0:	47b8      	blx	r7
 801e7b2:	3001      	adds	r0, #1
 801e7b4:	f43f ae5a 	beq.w	801e46c <_printf_float+0x9c>
 801e7b8:	f108 0801 	add.w	r8, r8, #1
 801e7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7be:	3b01      	subs	r3, #1
 801e7c0:	4543      	cmp	r3, r8
 801e7c2:	dcf1      	bgt.n	801e7a8 <_printf_float+0x3d8>
 801e7c4:	4653      	mov	r3, sl
 801e7c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e7ca:	e6dd      	b.n	801e588 <_printf_float+0x1b8>
 801e7cc:	f04f 0800 	mov.w	r8, #0
 801e7d0:	f104 091a 	add.w	r9, r4, #26
 801e7d4:	e7f2      	b.n	801e7bc <_printf_float+0x3ec>
 801e7d6:	2301      	movs	r3, #1
 801e7d8:	e7df      	b.n	801e79a <_printf_float+0x3ca>
 801e7da:	2301      	movs	r3, #1
 801e7dc:	464a      	mov	r2, r9
 801e7de:	4631      	mov	r1, r6
 801e7e0:	4628      	mov	r0, r5
 801e7e2:	47b8      	blx	r7
 801e7e4:	3001      	adds	r0, #1
 801e7e6:	f43f ae41 	beq.w	801e46c <_printf_float+0x9c>
 801e7ea:	f108 0801 	add.w	r8, r8, #1
 801e7ee:	68e3      	ldr	r3, [r4, #12]
 801e7f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e7f2:	1a9b      	subs	r3, r3, r2
 801e7f4:	4543      	cmp	r3, r8
 801e7f6:	dcf0      	bgt.n	801e7da <_printf_float+0x40a>
 801e7f8:	e6fa      	b.n	801e5f0 <_printf_float+0x220>
 801e7fa:	f04f 0800 	mov.w	r8, #0
 801e7fe:	f104 0919 	add.w	r9, r4, #25
 801e802:	e7f4      	b.n	801e7ee <_printf_float+0x41e>
 801e804:	2900      	cmp	r1, #0
 801e806:	f43f ae8a 	beq.w	801e51e <_printf_float+0x14e>
 801e80a:	f04f 0c00 	mov.w	ip, #0
 801e80e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e812:	e9cd 0900 	strd	r0, r9, [sp]
 801e816:	6022      	str	r2, [r4, #0]
 801e818:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e81c:	4628      	mov	r0, r5
 801e81e:	f7ff fd51 	bl	801e2c4 <__cvt>
 801e822:	4680      	mov	r8, r0
 801e824:	e64a      	b.n	801e4bc <_printf_float+0xec>
 801e826:	bf00      	nop

0801e828 <_printf_common>:
 801e828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e82c:	4691      	mov	r9, r2
 801e82e:	461f      	mov	r7, r3
 801e830:	688a      	ldr	r2, [r1, #8]
 801e832:	690b      	ldr	r3, [r1, #16]
 801e834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e838:	4293      	cmp	r3, r2
 801e83a:	bfb8      	it	lt
 801e83c:	4613      	movlt	r3, r2
 801e83e:	f8c9 3000 	str.w	r3, [r9]
 801e842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e846:	4606      	mov	r6, r0
 801e848:	460c      	mov	r4, r1
 801e84a:	b112      	cbz	r2, 801e852 <_printf_common+0x2a>
 801e84c:	3301      	adds	r3, #1
 801e84e:	f8c9 3000 	str.w	r3, [r9]
 801e852:	6823      	ldr	r3, [r4, #0]
 801e854:	0699      	lsls	r1, r3, #26
 801e856:	bf42      	ittt	mi
 801e858:	f8d9 3000 	ldrmi.w	r3, [r9]
 801e85c:	3302      	addmi	r3, #2
 801e85e:	f8c9 3000 	strmi.w	r3, [r9]
 801e862:	6825      	ldr	r5, [r4, #0]
 801e864:	f015 0506 	ands.w	r5, r5, #6
 801e868:	d107      	bne.n	801e87a <_printf_common+0x52>
 801e86a:	f104 0a19 	add.w	sl, r4, #25
 801e86e:	68e3      	ldr	r3, [r4, #12]
 801e870:	f8d9 2000 	ldr.w	r2, [r9]
 801e874:	1a9b      	subs	r3, r3, r2
 801e876:	42ab      	cmp	r3, r5
 801e878:	dc28      	bgt.n	801e8cc <_printf_common+0xa4>
 801e87a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801e87e:	6822      	ldr	r2, [r4, #0]
 801e880:	3300      	adds	r3, #0
 801e882:	bf18      	it	ne
 801e884:	2301      	movne	r3, #1
 801e886:	0692      	lsls	r2, r2, #26
 801e888:	d42d      	bmi.n	801e8e6 <_printf_common+0xbe>
 801e88a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e88e:	4639      	mov	r1, r7
 801e890:	4630      	mov	r0, r6
 801e892:	47c0      	blx	r8
 801e894:	3001      	adds	r0, #1
 801e896:	d020      	beq.n	801e8da <_printf_common+0xb2>
 801e898:	6823      	ldr	r3, [r4, #0]
 801e89a:	68e5      	ldr	r5, [r4, #12]
 801e89c:	f8d9 2000 	ldr.w	r2, [r9]
 801e8a0:	f003 0306 	and.w	r3, r3, #6
 801e8a4:	2b04      	cmp	r3, #4
 801e8a6:	bf08      	it	eq
 801e8a8:	1aad      	subeq	r5, r5, r2
 801e8aa:	68a3      	ldr	r3, [r4, #8]
 801e8ac:	6922      	ldr	r2, [r4, #16]
 801e8ae:	bf0c      	ite	eq
 801e8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e8b4:	2500      	movne	r5, #0
 801e8b6:	4293      	cmp	r3, r2
 801e8b8:	bfc4      	itt	gt
 801e8ba:	1a9b      	subgt	r3, r3, r2
 801e8bc:	18ed      	addgt	r5, r5, r3
 801e8be:	f04f 0900 	mov.w	r9, #0
 801e8c2:	341a      	adds	r4, #26
 801e8c4:	454d      	cmp	r5, r9
 801e8c6:	d11a      	bne.n	801e8fe <_printf_common+0xd6>
 801e8c8:	2000      	movs	r0, #0
 801e8ca:	e008      	b.n	801e8de <_printf_common+0xb6>
 801e8cc:	2301      	movs	r3, #1
 801e8ce:	4652      	mov	r2, sl
 801e8d0:	4639      	mov	r1, r7
 801e8d2:	4630      	mov	r0, r6
 801e8d4:	47c0      	blx	r8
 801e8d6:	3001      	adds	r0, #1
 801e8d8:	d103      	bne.n	801e8e2 <_printf_common+0xba>
 801e8da:	f04f 30ff 	mov.w	r0, #4294967295
 801e8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8e2:	3501      	adds	r5, #1
 801e8e4:	e7c3      	b.n	801e86e <_printf_common+0x46>
 801e8e6:	18e1      	adds	r1, r4, r3
 801e8e8:	1c5a      	adds	r2, r3, #1
 801e8ea:	2030      	movs	r0, #48	; 0x30
 801e8ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e8f0:	4422      	add	r2, r4
 801e8f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e8f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e8fa:	3302      	adds	r3, #2
 801e8fc:	e7c5      	b.n	801e88a <_printf_common+0x62>
 801e8fe:	2301      	movs	r3, #1
 801e900:	4622      	mov	r2, r4
 801e902:	4639      	mov	r1, r7
 801e904:	4630      	mov	r0, r6
 801e906:	47c0      	blx	r8
 801e908:	3001      	adds	r0, #1
 801e90a:	d0e6      	beq.n	801e8da <_printf_common+0xb2>
 801e90c:	f109 0901 	add.w	r9, r9, #1
 801e910:	e7d8      	b.n	801e8c4 <_printf_common+0x9c>
	...

0801e914 <_printf_i>:
 801e914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e918:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801e91c:	460c      	mov	r4, r1
 801e91e:	7e09      	ldrb	r1, [r1, #24]
 801e920:	b085      	sub	sp, #20
 801e922:	296e      	cmp	r1, #110	; 0x6e
 801e924:	4617      	mov	r7, r2
 801e926:	4606      	mov	r6, r0
 801e928:	4698      	mov	r8, r3
 801e92a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e92c:	f000 80b3 	beq.w	801ea96 <_printf_i+0x182>
 801e930:	d822      	bhi.n	801e978 <_printf_i+0x64>
 801e932:	2963      	cmp	r1, #99	; 0x63
 801e934:	d036      	beq.n	801e9a4 <_printf_i+0x90>
 801e936:	d80a      	bhi.n	801e94e <_printf_i+0x3a>
 801e938:	2900      	cmp	r1, #0
 801e93a:	f000 80b9 	beq.w	801eab0 <_printf_i+0x19c>
 801e93e:	2958      	cmp	r1, #88	; 0x58
 801e940:	f000 8083 	beq.w	801ea4a <_printf_i+0x136>
 801e944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801e94c:	e032      	b.n	801e9b4 <_printf_i+0xa0>
 801e94e:	2964      	cmp	r1, #100	; 0x64
 801e950:	d001      	beq.n	801e956 <_printf_i+0x42>
 801e952:	2969      	cmp	r1, #105	; 0x69
 801e954:	d1f6      	bne.n	801e944 <_printf_i+0x30>
 801e956:	6820      	ldr	r0, [r4, #0]
 801e958:	6813      	ldr	r3, [r2, #0]
 801e95a:	0605      	lsls	r5, r0, #24
 801e95c:	f103 0104 	add.w	r1, r3, #4
 801e960:	d52a      	bpl.n	801e9b8 <_printf_i+0xa4>
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	6011      	str	r1, [r2, #0]
 801e966:	2b00      	cmp	r3, #0
 801e968:	da03      	bge.n	801e972 <_printf_i+0x5e>
 801e96a:	222d      	movs	r2, #45	; 0x2d
 801e96c:	425b      	negs	r3, r3
 801e96e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e972:	486f      	ldr	r0, [pc, #444]	; (801eb30 <_printf_i+0x21c>)
 801e974:	220a      	movs	r2, #10
 801e976:	e039      	b.n	801e9ec <_printf_i+0xd8>
 801e978:	2973      	cmp	r1, #115	; 0x73
 801e97a:	f000 809d 	beq.w	801eab8 <_printf_i+0x1a4>
 801e97e:	d808      	bhi.n	801e992 <_printf_i+0x7e>
 801e980:	296f      	cmp	r1, #111	; 0x6f
 801e982:	d020      	beq.n	801e9c6 <_printf_i+0xb2>
 801e984:	2970      	cmp	r1, #112	; 0x70
 801e986:	d1dd      	bne.n	801e944 <_printf_i+0x30>
 801e988:	6823      	ldr	r3, [r4, #0]
 801e98a:	f043 0320 	orr.w	r3, r3, #32
 801e98e:	6023      	str	r3, [r4, #0]
 801e990:	e003      	b.n	801e99a <_printf_i+0x86>
 801e992:	2975      	cmp	r1, #117	; 0x75
 801e994:	d017      	beq.n	801e9c6 <_printf_i+0xb2>
 801e996:	2978      	cmp	r1, #120	; 0x78
 801e998:	d1d4      	bne.n	801e944 <_printf_i+0x30>
 801e99a:	2378      	movs	r3, #120	; 0x78
 801e99c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e9a0:	4864      	ldr	r0, [pc, #400]	; (801eb34 <_printf_i+0x220>)
 801e9a2:	e055      	b.n	801ea50 <_printf_i+0x13c>
 801e9a4:	6813      	ldr	r3, [r2, #0]
 801e9a6:	1d19      	adds	r1, r3, #4
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	6011      	str	r1, [r2, #0]
 801e9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e9b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e9b4:	2301      	movs	r3, #1
 801e9b6:	e08c      	b.n	801ead2 <_printf_i+0x1be>
 801e9b8:	681b      	ldr	r3, [r3, #0]
 801e9ba:	6011      	str	r1, [r2, #0]
 801e9bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e9c0:	bf18      	it	ne
 801e9c2:	b21b      	sxthne	r3, r3
 801e9c4:	e7cf      	b.n	801e966 <_printf_i+0x52>
 801e9c6:	6813      	ldr	r3, [r2, #0]
 801e9c8:	6825      	ldr	r5, [r4, #0]
 801e9ca:	1d18      	adds	r0, r3, #4
 801e9cc:	6010      	str	r0, [r2, #0]
 801e9ce:	0628      	lsls	r0, r5, #24
 801e9d0:	d501      	bpl.n	801e9d6 <_printf_i+0xc2>
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	e002      	b.n	801e9dc <_printf_i+0xc8>
 801e9d6:	0668      	lsls	r0, r5, #25
 801e9d8:	d5fb      	bpl.n	801e9d2 <_printf_i+0xbe>
 801e9da:	881b      	ldrh	r3, [r3, #0]
 801e9dc:	4854      	ldr	r0, [pc, #336]	; (801eb30 <_printf_i+0x21c>)
 801e9de:	296f      	cmp	r1, #111	; 0x6f
 801e9e0:	bf14      	ite	ne
 801e9e2:	220a      	movne	r2, #10
 801e9e4:	2208      	moveq	r2, #8
 801e9e6:	2100      	movs	r1, #0
 801e9e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e9ec:	6865      	ldr	r5, [r4, #4]
 801e9ee:	60a5      	str	r5, [r4, #8]
 801e9f0:	2d00      	cmp	r5, #0
 801e9f2:	f2c0 8095 	blt.w	801eb20 <_printf_i+0x20c>
 801e9f6:	6821      	ldr	r1, [r4, #0]
 801e9f8:	f021 0104 	bic.w	r1, r1, #4
 801e9fc:	6021      	str	r1, [r4, #0]
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d13d      	bne.n	801ea7e <_printf_i+0x16a>
 801ea02:	2d00      	cmp	r5, #0
 801ea04:	f040 808e 	bne.w	801eb24 <_printf_i+0x210>
 801ea08:	4665      	mov	r5, ip
 801ea0a:	2a08      	cmp	r2, #8
 801ea0c:	d10b      	bne.n	801ea26 <_printf_i+0x112>
 801ea0e:	6823      	ldr	r3, [r4, #0]
 801ea10:	07db      	lsls	r3, r3, #31
 801ea12:	d508      	bpl.n	801ea26 <_printf_i+0x112>
 801ea14:	6923      	ldr	r3, [r4, #16]
 801ea16:	6862      	ldr	r2, [r4, #4]
 801ea18:	429a      	cmp	r2, r3
 801ea1a:	bfde      	ittt	le
 801ea1c:	2330      	movle	r3, #48	; 0x30
 801ea1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ea22:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ea26:	ebac 0305 	sub.w	r3, ip, r5
 801ea2a:	6123      	str	r3, [r4, #16]
 801ea2c:	f8cd 8000 	str.w	r8, [sp]
 801ea30:	463b      	mov	r3, r7
 801ea32:	aa03      	add	r2, sp, #12
 801ea34:	4621      	mov	r1, r4
 801ea36:	4630      	mov	r0, r6
 801ea38:	f7ff fef6 	bl	801e828 <_printf_common>
 801ea3c:	3001      	adds	r0, #1
 801ea3e:	d14d      	bne.n	801eadc <_printf_i+0x1c8>
 801ea40:	f04f 30ff 	mov.w	r0, #4294967295
 801ea44:	b005      	add	sp, #20
 801ea46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea4a:	4839      	ldr	r0, [pc, #228]	; (801eb30 <_printf_i+0x21c>)
 801ea4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801ea50:	6813      	ldr	r3, [r2, #0]
 801ea52:	6821      	ldr	r1, [r4, #0]
 801ea54:	1d1d      	adds	r5, r3, #4
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	6015      	str	r5, [r2, #0]
 801ea5a:	060a      	lsls	r2, r1, #24
 801ea5c:	d50b      	bpl.n	801ea76 <_printf_i+0x162>
 801ea5e:	07ca      	lsls	r2, r1, #31
 801ea60:	bf44      	itt	mi
 801ea62:	f041 0120 	orrmi.w	r1, r1, #32
 801ea66:	6021      	strmi	r1, [r4, #0]
 801ea68:	b91b      	cbnz	r3, 801ea72 <_printf_i+0x15e>
 801ea6a:	6822      	ldr	r2, [r4, #0]
 801ea6c:	f022 0220 	bic.w	r2, r2, #32
 801ea70:	6022      	str	r2, [r4, #0]
 801ea72:	2210      	movs	r2, #16
 801ea74:	e7b7      	b.n	801e9e6 <_printf_i+0xd2>
 801ea76:	064d      	lsls	r5, r1, #25
 801ea78:	bf48      	it	mi
 801ea7a:	b29b      	uxthmi	r3, r3
 801ea7c:	e7ef      	b.n	801ea5e <_printf_i+0x14a>
 801ea7e:	4665      	mov	r5, ip
 801ea80:	fbb3 f1f2 	udiv	r1, r3, r2
 801ea84:	fb02 3311 	mls	r3, r2, r1, r3
 801ea88:	5cc3      	ldrb	r3, [r0, r3]
 801ea8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ea8e:	460b      	mov	r3, r1
 801ea90:	2900      	cmp	r1, #0
 801ea92:	d1f5      	bne.n	801ea80 <_printf_i+0x16c>
 801ea94:	e7b9      	b.n	801ea0a <_printf_i+0xf6>
 801ea96:	6813      	ldr	r3, [r2, #0]
 801ea98:	6825      	ldr	r5, [r4, #0]
 801ea9a:	6961      	ldr	r1, [r4, #20]
 801ea9c:	1d18      	adds	r0, r3, #4
 801ea9e:	6010      	str	r0, [r2, #0]
 801eaa0:	0628      	lsls	r0, r5, #24
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	d501      	bpl.n	801eaaa <_printf_i+0x196>
 801eaa6:	6019      	str	r1, [r3, #0]
 801eaa8:	e002      	b.n	801eab0 <_printf_i+0x19c>
 801eaaa:	066a      	lsls	r2, r5, #25
 801eaac:	d5fb      	bpl.n	801eaa6 <_printf_i+0x192>
 801eaae:	8019      	strh	r1, [r3, #0]
 801eab0:	2300      	movs	r3, #0
 801eab2:	6123      	str	r3, [r4, #16]
 801eab4:	4665      	mov	r5, ip
 801eab6:	e7b9      	b.n	801ea2c <_printf_i+0x118>
 801eab8:	6813      	ldr	r3, [r2, #0]
 801eaba:	1d19      	adds	r1, r3, #4
 801eabc:	6011      	str	r1, [r2, #0]
 801eabe:	681d      	ldr	r5, [r3, #0]
 801eac0:	6862      	ldr	r2, [r4, #4]
 801eac2:	2100      	movs	r1, #0
 801eac4:	4628      	mov	r0, r5
 801eac6:	f7e1 fbd3 	bl	8000270 <memchr>
 801eaca:	b108      	cbz	r0, 801ead0 <_printf_i+0x1bc>
 801eacc:	1b40      	subs	r0, r0, r5
 801eace:	6060      	str	r0, [r4, #4]
 801ead0:	6863      	ldr	r3, [r4, #4]
 801ead2:	6123      	str	r3, [r4, #16]
 801ead4:	2300      	movs	r3, #0
 801ead6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eada:	e7a7      	b.n	801ea2c <_printf_i+0x118>
 801eadc:	6923      	ldr	r3, [r4, #16]
 801eade:	462a      	mov	r2, r5
 801eae0:	4639      	mov	r1, r7
 801eae2:	4630      	mov	r0, r6
 801eae4:	47c0      	blx	r8
 801eae6:	3001      	adds	r0, #1
 801eae8:	d0aa      	beq.n	801ea40 <_printf_i+0x12c>
 801eaea:	6823      	ldr	r3, [r4, #0]
 801eaec:	079b      	lsls	r3, r3, #30
 801eaee:	d413      	bmi.n	801eb18 <_printf_i+0x204>
 801eaf0:	68e0      	ldr	r0, [r4, #12]
 801eaf2:	9b03      	ldr	r3, [sp, #12]
 801eaf4:	4298      	cmp	r0, r3
 801eaf6:	bfb8      	it	lt
 801eaf8:	4618      	movlt	r0, r3
 801eafa:	e7a3      	b.n	801ea44 <_printf_i+0x130>
 801eafc:	2301      	movs	r3, #1
 801eafe:	464a      	mov	r2, r9
 801eb00:	4639      	mov	r1, r7
 801eb02:	4630      	mov	r0, r6
 801eb04:	47c0      	blx	r8
 801eb06:	3001      	adds	r0, #1
 801eb08:	d09a      	beq.n	801ea40 <_printf_i+0x12c>
 801eb0a:	3501      	adds	r5, #1
 801eb0c:	68e3      	ldr	r3, [r4, #12]
 801eb0e:	9a03      	ldr	r2, [sp, #12]
 801eb10:	1a9b      	subs	r3, r3, r2
 801eb12:	42ab      	cmp	r3, r5
 801eb14:	dcf2      	bgt.n	801eafc <_printf_i+0x1e8>
 801eb16:	e7eb      	b.n	801eaf0 <_printf_i+0x1dc>
 801eb18:	2500      	movs	r5, #0
 801eb1a:	f104 0919 	add.w	r9, r4, #25
 801eb1e:	e7f5      	b.n	801eb0c <_printf_i+0x1f8>
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	d1ac      	bne.n	801ea7e <_printf_i+0x16a>
 801eb24:	7803      	ldrb	r3, [r0, #0]
 801eb26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801eb2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801eb2e:	e76c      	b.n	801ea0a <_printf_i+0xf6>
 801eb30:	08023462 	.word	0x08023462
 801eb34:	08023473 	.word	0x08023473

0801eb38 <_sbrk_r>:
 801eb38:	b538      	push	{r3, r4, r5, lr}
 801eb3a:	4c06      	ldr	r4, [pc, #24]	; (801eb54 <_sbrk_r+0x1c>)
 801eb3c:	2300      	movs	r3, #0
 801eb3e:	4605      	mov	r5, r0
 801eb40:	4608      	mov	r0, r1
 801eb42:	6023      	str	r3, [r4, #0]
 801eb44:	f7e9 f912 	bl	8007d6c <_sbrk>
 801eb48:	1c43      	adds	r3, r0, #1
 801eb4a:	d102      	bne.n	801eb52 <_sbrk_r+0x1a>
 801eb4c:	6823      	ldr	r3, [r4, #0]
 801eb4e:	b103      	cbz	r3, 801eb52 <_sbrk_r+0x1a>
 801eb50:	602b      	str	r3, [r5, #0]
 801eb52:	bd38      	pop	{r3, r4, r5, pc}
 801eb54:	20019d38 	.word	0x20019d38

0801eb58 <siprintf>:
 801eb58:	b40e      	push	{r1, r2, r3}
 801eb5a:	b500      	push	{lr}
 801eb5c:	b09c      	sub	sp, #112	; 0x70
 801eb5e:	ab1d      	add	r3, sp, #116	; 0x74
 801eb60:	9002      	str	r0, [sp, #8]
 801eb62:	9006      	str	r0, [sp, #24]
 801eb64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801eb68:	4809      	ldr	r0, [pc, #36]	; (801eb90 <siprintf+0x38>)
 801eb6a:	9107      	str	r1, [sp, #28]
 801eb6c:	9104      	str	r1, [sp, #16]
 801eb6e:	4909      	ldr	r1, [pc, #36]	; (801eb94 <siprintf+0x3c>)
 801eb70:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb74:	9105      	str	r1, [sp, #20]
 801eb76:	6800      	ldr	r0, [r0, #0]
 801eb78:	9301      	str	r3, [sp, #4]
 801eb7a:	a902      	add	r1, sp, #8
 801eb7c:	f001 f9e2 	bl	801ff44 <_svfiprintf_r>
 801eb80:	9b02      	ldr	r3, [sp, #8]
 801eb82:	2200      	movs	r2, #0
 801eb84:	701a      	strb	r2, [r3, #0]
 801eb86:	b01c      	add	sp, #112	; 0x70
 801eb88:	f85d eb04 	ldr.w	lr, [sp], #4
 801eb8c:	b003      	add	sp, #12
 801eb8e:	4770      	bx	lr
 801eb90:	2000009c 	.word	0x2000009c
 801eb94:	ffff0208 	.word	0xffff0208

0801eb98 <_strtol_l.isra.0>:
 801eb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb9c:	4680      	mov	r8, r0
 801eb9e:	4689      	mov	r9, r1
 801eba0:	4692      	mov	sl, r2
 801eba2:	461e      	mov	r6, r3
 801eba4:	460f      	mov	r7, r1
 801eba6:	463d      	mov	r5, r7
 801eba8:	9808      	ldr	r0, [sp, #32]
 801ebaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ebae:	f000 fe5f 	bl	801f870 <__locale_ctype_ptr_l>
 801ebb2:	4420      	add	r0, r4
 801ebb4:	7843      	ldrb	r3, [r0, #1]
 801ebb6:	f013 0308 	ands.w	r3, r3, #8
 801ebba:	d132      	bne.n	801ec22 <_strtol_l.isra.0+0x8a>
 801ebbc:	2c2d      	cmp	r4, #45	; 0x2d
 801ebbe:	d132      	bne.n	801ec26 <_strtol_l.isra.0+0x8e>
 801ebc0:	787c      	ldrb	r4, [r7, #1]
 801ebc2:	1cbd      	adds	r5, r7, #2
 801ebc4:	2201      	movs	r2, #1
 801ebc6:	2e00      	cmp	r6, #0
 801ebc8:	d05d      	beq.n	801ec86 <_strtol_l.isra.0+0xee>
 801ebca:	2e10      	cmp	r6, #16
 801ebcc:	d109      	bne.n	801ebe2 <_strtol_l.isra.0+0x4a>
 801ebce:	2c30      	cmp	r4, #48	; 0x30
 801ebd0:	d107      	bne.n	801ebe2 <_strtol_l.isra.0+0x4a>
 801ebd2:	782b      	ldrb	r3, [r5, #0]
 801ebd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ebd8:	2b58      	cmp	r3, #88	; 0x58
 801ebda:	d14f      	bne.n	801ec7c <_strtol_l.isra.0+0xe4>
 801ebdc:	786c      	ldrb	r4, [r5, #1]
 801ebde:	2610      	movs	r6, #16
 801ebe0:	3502      	adds	r5, #2
 801ebe2:	2a00      	cmp	r2, #0
 801ebe4:	bf14      	ite	ne
 801ebe6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801ebea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801ebee:	2700      	movs	r7, #0
 801ebf0:	fbb1 fcf6 	udiv	ip, r1, r6
 801ebf4:	4638      	mov	r0, r7
 801ebf6:	fb06 1e1c 	mls	lr, r6, ip, r1
 801ebfa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801ebfe:	2b09      	cmp	r3, #9
 801ec00:	d817      	bhi.n	801ec32 <_strtol_l.isra.0+0x9a>
 801ec02:	461c      	mov	r4, r3
 801ec04:	42a6      	cmp	r6, r4
 801ec06:	dd23      	ble.n	801ec50 <_strtol_l.isra.0+0xb8>
 801ec08:	1c7b      	adds	r3, r7, #1
 801ec0a:	d007      	beq.n	801ec1c <_strtol_l.isra.0+0x84>
 801ec0c:	4584      	cmp	ip, r0
 801ec0e:	d31c      	bcc.n	801ec4a <_strtol_l.isra.0+0xb2>
 801ec10:	d101      	bne.n	801ec16 <_strtol_l.isra.0+0x7e>
 801ec12:	45a6      	cmp	lr, r4
 801ec14:	db19      	blt.n	801ec4a <_strtol_l.isra.0+0xb2>
 801ec16:	fb00 4006 	mla	r0, r0, r6, r4
 801ec1a:	2701      	movs	r7, #1
 801ec1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ec20:	e7eb      	b.n	801ebfa <_strtol_l.isra.0+0x62>
 801ec22:	462f      	mov	r7, r5
 801ec24:	e7bf      	b.n	801eba6 <_strtol_l.isra.0+0xe>
 801ec26:	2c2b      	cmp	r4, #43	; 0x2b
 801ec28:	bf04      	itt	eq
 801ec2a:	1cbd      	addeq	r5, r7, #2
 801ec2c:	787c      	ldrbeq	r4, [r7, #1]
 801ec2e:	461a      	mov	r2, r3
 801ec30:	e7c9      	b.n	801ebc6 <_strtol_l.isra.0+0x2e>
 801ec32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801ec36:	2b19      	cmp	r3, #25
 801ec38:	d801      	bhi.n	801ec3e <_strtol_l.isra.0+0xa6>
 801ec3a:	3c37      	subs	r4, #55	; 0x37
 801ec3c:	e7e2      	b.n	801ec04 <_strtol_l.isra.0+0x6c>
 801ec3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801ec42:	2b19      	cmp	r3, #25
 801ec44:	d804      	bhi.n	801ec50 <_strtol_l.isra.0+0xb8>
 801ec46:	3c57      	subs	r4, #87	; 0x57
 801ec48:	e7dc      	b.n	801ec04 <_strtol_l.isra.0+0x6c>
 801ec4a:	f04f 37ff 	mov.w	r7, #4294967295
 801ec4e:	e7e5      	b.n	801ec1c <_strtol_l.isra.0+0x84>
 801ec50:	1c7b      	adds	r3, r7, #1
 801ec52:	d108      	bne.n	801ec66 <_strtol_l.isra.0+0xce>
 801ec54:	2322      	movs	r3, #34	; 0x22
 801ec56:	f8c8 3000 	str.w	r3, [r8]
 801ec5a:	4608      	mov	r0, r1
 801ec5c:	f1ba 0f00 	cmp.w	sl, #0
 801ec60:	d107      	bne.n	801ec72 <_strtol_l.isra.0+0xda>
 801ec62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec66:	b102      	cbz	r2, 801ec6a <_strtol_l.isra.0+0xd2>
 801ec68:	4240      	negs	r0, r0
 801ec6a:	f1ba 0f00 	cmp.w	sl, #0
 801ec6e:	d0f8      	beq.n	801ec62 <_strtol_l.isra.0+0xca>
 801ec70:	b10f      	cbz	r7, 801ec76 <_strtol_l.isra.0+0xde>
 801ec72:	f105 39ff 	add.w	r9, r5, #4294967295
 801ec76:	f8ca 9000 	str.w	r9, [sl]
 801ec7a:	e7f2      	b.n	801ec62 <_strtol_l.isra.0+0xca>
 801ec7c:	2430      	movs	r4, #48	; 0x30
 801ec7e:	2e00      	cmp	r6, #0
 801ec80:	d1af      	bne.n	801ebe2 <_strtol_l.isra.0+0x4a>
 801ec82:	2608      	movs	r6, #8
 801ec84:	e7ad      	b.n	801ebe2 <_strtol_l.isra.0+0x4a>
 801ec86:	2c30      	cmp	r4, #48	; 0x30
 801ec88:	d0a3      	beq.n	801ebd2 <_strtol_l.isra.0+0x3a>
 801ec8a:	260a      	movs	r6, #10
 801ec8c:	e7a9      	b.n	801ebe2 <_strtol_l.isra.0+0x4a>
	...

0801ec90 <strtol>:
 801ec90:	4b08      	ldr	r3, [pc, #32]	; (801ecb4 <strtol+0x24>)
 801ec92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ec94:	681c      	ldr	r4, [r3, #0]
 801ec96:	4d08      	ldr	r5, [pc, #32]	; (801ecb8 <strtol+0x28>)
 801ec98:	6a23      	ldr	r3, [r4, #32]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	bf08      	it	eq
 801ec9e:	462b      	moveq	r3, r5
 801eca0:	9300      	str	r3, [sp, #0]
 801eca2:	4613      	mov	r3, r2
 801eca4:	460a      	mov	r2, r1
 801eca6:	4601      	mov	r1, r0
 801eca8:	4620      	mov	r0, r4
 801ecaa:	f7ff ff75 	bl	801eb98 <_strtol_l.isra.0>
 801ecae:	b003      	add	sp, #12
 801ecb0:	bd30      	pop	{r4, r5, pc}
 801ecb2:	bf00      	nop
 801ecb4:	2000009c 	.word	0x2000009c
 801ecb8:	20000100 	.word	0x20000100

0801ecbc <quorem>:
 801ecbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecc0:	6903      	ldr	r3, [r0, #16]
 801ecc2:	690c      	ldr	r4, [r1, #16]
 801ecc4:	42a3      	cmp	r3, r4
 801ecc6:	4680      	mov	r8, r0
 801ecc8:	f2c0 8082 	blt.w	801edd0 <quorem+0x114>
 801eccc:	3c01      	subs	r4, #1
 801ecce:	f101 0714 	add.w	r7, r1, #20
 801ecd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801ecd6:	f100 0614 	add.w	r6, r0, #20
 801ecda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801ecde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801ece2:	eb06 030c 	add.w	r3, r6, ip
 801ece6:	3501      	adds	r5, #1
 801ece8:	eb07 090c 	add.w	r9, r7, ip
 801ecec:	9301      	str	r3, [sp, #4]
 801ecee:	fbb0 f5f5 	udiv	r5, r0, r5
 801ecf2:	b395      	cbz	r5, 801ed5a <quorem+0x9e>
 801ecf4:	f04f 0a00 	mov.w	sl, #0
 801ecf8:	4638      	mov	r0, r7
 801ecfa:	46b6      	mov	lr, r6
 801ecfc:	46d3      	mov	fp, sl
 801ecfe:	f850 2b04 	ldr.w	r2, [r0], #4
 801ed02:	b293      	uxth	r3, r2
 801ed04:	fb05 a303 	mla	r3, r5, r3, sl
 801ed08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ed0c:	b29b      	uxth	r3, r3
 801ed0e:	ebab 0303 	sub.w	r3, fp, r3
 801ed12:	0c12      	lsrs	r2, r2, #16
 801ed14:	f8de b000 	ldr.w	fp, [lr]
 801ed18:	fb05 a202 	mla	r2, r5, r2, sl
 801ed1c:	fa13 f38b 	uxtah	r3, r3, fp
 801ed20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801ed24:	fa1f fb82 	uxth.w	fp, r2
 801ed28:	f8de 2000 	ldr.w	r2, [lr]
 801ed2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801ed30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ed34:	b29b      	uxth	r3, r3
 801ed36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ed3a:	4581      	cmp	r9, r0
 801ed3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801ed40:	f84e 3b04 	str.w	r3, [lr], #4
 801ed44:	d2db      	bcs.n	801ecfe <quorem+0x42>
 801ed46:	f856 300c 	ldr.w	r3, [r6, ip]
 801ed4a:	b933      	cbnz	r3, 801ed5a <quorem+0x9e>
 801ed4c:	9b01      	ldr	r3, [sp, #4]
 801ed4e:	3b04      	subs	r3, #4
 801ed50:	429e      	cmp	r6, r3
 801ed52:	461a      	mov	r2, r3
 801ed54:	d330      	bcc.n	801edb8 <quorem+0xfc>
 801ed56:	f8c8 4010 	str.w	r4, [r8, #16]
 801ed5a:	4640      	mov	r0, r8
 801ed5c:	f000 ffc4 	bl	801fce8 <__mcmp>
 801ed60:	2800      	cmp	r0, #0
 801ed62:	db25      	blt.n	801edb0 <quorem+0xf4>
 801ed64:	3501      	adds	r5, #1
 801ed66:	4630      	mov	r0, r6
 801ed68:	f04f 0c00 	mov.w	ip, #0
 801ed6c:	f857 2b04 	ldr.w	r2, [r7], #4
 801ed70:	f8d0 e000 	ldr.w	lr, [r0]
 801ed74:	b293      	uxth	r3, r2
 801ed76:	ebac 0303 	sub.w	r3, ip, r3
 801ed7a:	0c12      	lsrs	r2, r2, #16
 801ed7c:	fa13 f38e 	uxtah	r3, r3, lr
 801ed80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ed84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ed88:	b29b      	uxth	r3, r3
 801ed8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ed8e:	45b9      	cmp	r9, r7
 801ed90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ed94:	f840 3b04 	str.w	r3, [r0], #4
 801ed98:	d2e8      	bcs.n	801ed6c <quorem+0xb0>
 801ed9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801ed9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801eda2:	b92a      	cbnz	r2, 801edb0 <quorem+0xf4>
 801eda4:	3b04      	subs	r3, #4
 801eda6:	429e      	cmp	r6, r3
 801eda8:	461a      	mov	r2, r3
 801edaa:	d30b      	bcc.n	801edc4 <quorem+0x108>
 801edac:	f8c8 4010 	str.w	r4, [r8, #16]
 801edb0:	4628      	mov	r0, r5
 801edb2:	b003      	add	sp, #12
 801edb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edb8:	6812      	ldr	r2, [r2, #0]
 801edba:	3b04      	subs	r3, #4
 801edbc:	2a00      	cmp	r2, #0
 801edbe:	d1ca      	bne.n	801ed56 <quorem+0x9a>
 801edc0:	3c01      	subs	r4, #1
 801edc2:	e7c5      	b.n	801ed50 <quorem+0x94>
 801edc4:	6812      	ldr	r2, [r2, #0]
 801edc6:	3b04      	subs	r3, #4
 801edc8:	2a00      	cmp	r2, #0
 801edca:	d1ef      	bne.n	801edac <quorem+0xf0>
 801edcc:	3c01      	subs	r4, #1
 801edce:	e7ea      	b.n	801eda6 <quorem+0xea>
 801edd0:	2000      	movs	r0, #0
 801edd2:	e7ee      	b.n	801edb2 <quorem+0xf6>
 801edd4:	0000      	movs	r0, r0
	...

0801edd8 <_dtoa_r>:
 801edd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eddc:	ec57 6b10 	vmov	r6, r7, d0
 801ede0:	b095      	sub	sp, #84	; 0x54
 801ede2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ede4:	9108      	str	r1, [sp, #32]
 801ede6:	4604      	mov	r4, r0
 801ede8:	920a      	str	r2, [sp, #40]	; 0x28
 801edea:	9311      	str	r3, [sp, #68]	; 0x44
 801edec:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801edf0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801edf4:	b93d      	cbnz	r5, 801ee06 <_dtoa_r+0x2e>
 801edf6:	2010      	movs	r0, #16
 801edf8:	f7ff f998 	bl	801e12c <malloc>
 801edfc:	6260      	str	r0, [r4, #36]	; 0x24
 801edfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ee02:	6005      	str	r5, [r0, #0]
 801ee04:	60c5      	str	r5, [r0, #12]
 801ee06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ee08:	6819      	ldr	r1, [r3, #0]
 801ee0a:	b151      	cbz	r1, 801ee22 <_dtoa_r+0x4a>
 801ee0c:	685a      	ldr	r2, [r3, #4]
 801ee0e:	604a      	str	r2, [r1, #4]
 801ee10:	2301      	movs	r3, #1
 801ee12:	4093      	lsls	r3, r2
 801ee14:	608b      	str	r3, [r1, #8]
 801ee16:	4620      	mov	r0, r4
 801ee18:	f000 fd84 	bl	801f924 <_Bfree>
 801ee1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ee1e:	2200      	movs	r2, #0
 801ee20:	601a      	str	r2, [r3, #0]
 801ee22:	1e3b      	subs	r3, r7, #0
 801ee24:	bfb9      	ittee	lt
 801ee26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ee2a:	9303      	strlt	r3, [sp, #12]
 801ee2c:	2300      	movge	r3, #0
 801ee2e:	f8c8 3000 	strge.w	r3, [r8]
 801ee32:	9d03      	ldr	r5, [sp, #12]
 801ee34:	4bac      	ldr	r3, [pc, #688]	; (801f0e8 <_dtoa_r+0x310>)
 801ee36:	bfbc      	itt	lt
 801ee38:	2201      	movlt	r2, #1
 801ee3a:	f8c8 2000 	strlt.w	r2, [r8]
 801ee3e:	43ab      	bics	r3, r5
 801ee40:	d11b      	bne.n	801ee7a <_dtoa_r+0xa2>
 801ee42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee44:	f242 730f 	movw	r3, #9999	; 0x270f
 801ee48:	6013      	str	r3, [r2, #0]
 801ee4a:	9b02      	ldr	r3, [sp, #8]
 801ee4c:	b923      	cbnz	r3, 801ee58 <_dtoa_r+0x80>
 801ee4e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801ee52:	2d00      	cmp	r5, #0
 801ee54:	f000 84dd 	beq.w	801f812 <_dtoa_r+0xa3a>
 801ee58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ee5a:	b953      	cbnz	r3, 801ee72 <_dtoa_r+0x9a>
 801ee5c:	4ba3      	ldr	r3, [pc, #652]	; (801f0ec <_dtoa_r+0x314>)
 801ee5e:	e020      	b.n	801eea2 <_dtoa_r+0xca>
 801ee60:	4ba3      	ldr	r3, [pc, #652]	; (801f0f0 <_dtoa_r+0x318>)
 801ee62:	9304      	str	r3, [sp, #16]
 801ee64:	3308      	adds	r3, #8
 801ee66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ee68:	6013      	str	r3, [r2, #0]
 801ee6a:	9804      	ldr	r0, [sp, #16]
 801ee6c:	b015      	add	sp, #84	; 0x54
 801ee6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee72:	4b9e      	ldr	r3, [pc, #632]	; (801f0ec <_dtoa_r+0x314>)
 801ee74:	9304      	str	r3, [sp, #16]
 801ee76:	3303      	adds	r3, #3
 801ee78:	e7f5      	b.n	801ee66 <_dtoa_r+0x8e>
 801ee7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ee82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee86:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ee8a:	d10c      	bne.n	801eea6 <_dtoa_r+0xce>
 801ee8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee8e:	2301      	movs	r3, #1
 801ee90:	6013      	str	r3, [r2, #0]
 801ee92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ee94:	2b00      	cmp	r3, #0
 801ee96:	f000 84b9 	beq.w	801f80c <_dtoa_r+0xa34>
 801ee9a:	4b96      	ldr	r3, [pc, #600]	; (801f0f4 <_dtoa_r+0x31c>)
 801ee9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ee9e:	6013      	str	r3, [r2, #0]
 801eea0:	3b01      	subs	r3, #1
 801eea2:	9304      	str	r3, [sp, #16]
 801eea4:	e7e1      	b.n	801ee6a <_dtoa_r+0x92>
 801eea6:	a913      	add	r1, sp, #76	; 0x4c
 801eea8:	aa12      	add	r2, sp, #72	; 0x48
 801eeaa:	ed9d 0b04 	vldr	d0, [sp, #16]
 801eeae:	4620      	mov	r0, r4
 801eeb0:	f000 ff91 	bl	801fdd6 <__d2b>
 801eeb4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801eeb8:	9001      	str	r0, [sp, #4]
 801eeba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801eebc:	2e00      	cmp	r6, #0
 801eebe:	d046      	beq.n	801ef4e <_dtoa_r+0x176>
 801eec0:	9805      	ldr	r0, [sp, #20]
 801eec2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801eec6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801eeca:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801eece:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801eed2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801eed6:	2700      	movs	r7, #0
 801eed8:	ee07 aa90 	vmov	s15, sl
 801eedc:	ec43 2b16 	vmov	d6, r2, r3
 801eee0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801eee4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801f0d0 <_dtoa_r+0x2f8>
 801eee8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801eeec:	ee36 7b47 	vsub.f64	d7, d6, d7
 801eef0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801f0d8 <_dtoa_r+0x300>
 801eef4:	eea7 6b04 	vfma.f64	d6, d7, d4
 801eef8:	eeb0 7b46 	vmov.f64	d7, d6
 801eefc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801f0e0 <_dtoa_r+0x308>
 801ef00:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ef04:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801ef08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ef0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef10:	ee16 ba90 	vmov	fp, s13
 801ef14:	d508      	bpl.n	801ef28 <_dtoa_r+0x150>
 801ef16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ef1a:	eeb4 6b47 	vcmp.f64	d6, d7
 801ef1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef22:	bf18      	it	ne
 801ef24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801ef28:	f1bb 0f16 	cmp.w	fp, #22
 801ef2c:	d834      	bhi.n	801ef98 <_dtoa_r+0x1c0>
 801ef2e:	4b72      	ldr	r3, [pc, #456]	; (801f0f8 <_dtoa_r+0x320>)
 801ef30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ef34:	ed93 7b00 	vldr	d7, [r3]
 801ef38:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ef3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ef40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef44:	dd01      	ble.n	801ef4a <_dtoa_r+0x172>
 801ef46:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ef4a:	2300      	movs	r3, #0
 801ef4c:	e025      	b.n	801ef9a <_dtoa_r+0x1c2>
 801ef4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ef50:	eb01 0a03 	add.w	sl, r1, r3
 801ef54:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801ef58:	2b20      	cmp	r3, #32
 801ef5a:	dd17      	ble.n	801ef8c <_dtoa_r+0x1b4>
 801ef5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801ef60:	9a02      	ldr	r2, [sp, #8]
 801ef62:	409d      	lsls	r5, r3
 801ef64:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801ef68:	fa22 f303 	lsr.w	r3, r2, r3
 801ef6c:	432b      	orrs	r3, r5
 801ef6e:	ee07 3a90 	vmov	s15, r3
 801ef72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ef76:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ef7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ef7e:	9805      	ldr	r0, [sp, #20]
 801ef80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ef84:	2701      	movs	r7, #1
 801ef86:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801ef8a:	e7a5      	b.n	801eed8 <_dtoa_r+0x100>
 801ef8c:	9a02      	ldr	r2, [sp, #8]
 801ef8e:	f1c3 0320 	rsb	r3, r3, #32
 801ef92:	fa02 f303 	lsl.w	r3, r2, r3
 801ef96:	e7ea      	b.n	801ef6e <_dtoa_r+0x196>
 801ef98:	2301      	movs	r3, #1
 801ef9a:	eba1 0a0a 	sub.w	sl, r1, sl
 801ef9e:	9310      	str	r3, [sp, #64]	; 0x40
 801efa0:	f1ba 0301 	subs.w	r3, sl, #1
 801efa4:	9307      	str	r3, [sp, #28]
 801efa6:	bf43      	ittte	mi
 801efa8:	2300      	movmi	r3, #0
 801efaa:	f1ca 0a01 	rsbmi	sl, sl, #1
 801efae:	9307      	strmi	r3, [sp, #28]
 801efb0:	f04f 0a00 	movpl.w	sl, #0
 801efb4:	f1bb 0f00 	cmp.w	fp, #0
 801efb8:	db19      	blt.n	801efee <_dtoa_r+0x216>
 801efba:	9b07      	ldr	r3, [sp, #28]
 801efbc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801efc0:	445b      	add	r3, fp
 801efc2:	9307      	str	r3, [sp, #28]
 801efc4:	f04f 0800 	mov.w	r8, #0
 801efc8:	9b08      	ldr	r3, [sp, #32]
 801efca:	2b09      	cmp	r3, #9
 801efcc:	d866      	bhi.n	801f09c <_dtoa_r+0x2c4>
 801efce:	2b05      	cmp	r3, #5
 801efd0:	bfc4      	itt	gt
 801efd2:	3b04      	subgt	r3, #4
 801efd4:	9308      	strgt	r3, [sp, #32]
 801efd6:	9b08      	ldr	r3, [sp, #32]
 801efd8:	f1a3 0302 	sub.w	r3, r3, #2
 801efdc:	bfcc      	ite	gt
 801efde:	2500      	movgt	r5, #0
 801efe0:	2501      	movle	r5, #1
 801efe2:	2b03      	cmp	r3, #3
 801efe4:	d866      	bhi.n	801f0b4 <_dtoa_r+0x2dc>
 801efe6:	e8df f003 	tbb	[pc, r3]
 801efea:	5755      	.short	0x5755
 801efec:	4909      	.short	0x4909
 801efee:	2300      	movs	r3, #0
 801eff0:	ebaa 0a0b 	sub.w	sl, sl, fp
 801eff4:	f1cb 0800 	rsb	r8, fp, #0
 801eff8:	930b      	str	r3, [sp, #44]	; 0x2c
 801effa:	e7e5      	b.n	801efc8 <_dtoa_r+0x1f0>
 801effc:	2301      	movs	r3, #1
 801effe:	9309      	str	r3, [sp, #36]	; 0x24
 801f000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f002:	2b00      	cmp	r3, #0
 801f004:	dd59      	ble.n	801f0ba <_dtoa_r+0x2e2>
 801f006:	9306      	str	r3, [sp, #24]
 801f008:	4699      	mov	r9, r3
 801f00a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f00c:	2200      	movs	r2, #0
 801f00e:	6072      	str	r2, [r6, #4]
 801f010:	2204      	movs	r2, #4
 801f012:	f102 0014 	add.w	r0, r2, #20
 801f016:	4298      	cmp	r0, r3
 801f018:	6871      	ldr	r1, [r6, #4]
 801f01a:	d953      	bls.n	801f0c4 <_dtoa_r+0x2ec>
 801f01c:	4620      	mov	r0, r4
 801f01e:	f000 fc4d 	bl	801f8bc <_Balloc>
 801f022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f024:	6030      	str	r0, [r6, #0]
 801f026:	681b      	ldr	r3, [r3, #0]
 801f028:	9304      	str	r3, [sp, #16]
 801f02a:	f1b9 0f0e 	cmp.w	r9, #14
 801f02e:	f200 80c2 	bhi.w	801f1b6 <_dtoa_r+0x3de>
 801f032:	2d00      	cmp	r5, #0
 801f034:	f000 80bf 	beq.w	801f1b6 <_dtoa_r+0x3de>
 801f038:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f03c:	f1bb 0f00 	cmp.w	fp, #0
 801f040:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801f044:	f340 80e6 	ble.w	801f214 <_dtoa_r+0x43c>
 801f048:	4a2b      	ldr	r2, [pc, #172]	; (801f0f8 <_dtoa_r+0x320>)
 801f04a:	f00b 030f 	and.w	r3, fp, #15
 801f04e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f052:	ed93 7b00 	vldr	d7, [r3]
 801f056:	ea4f 132b 	mov.w	r3, fp, asr #4
 801f05a:	06da      	lsls	r2, r3, #27
 801f05c:	f140 80d8 	bpl.w	801f210 <_dtoa_r+0x438>
 801f060:	4a26      	ldr	r2, [pc, #152]	; (801f0fc <_dtoa_r+0x324>)
 801f062:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801f066:	ed92 6b08 	vldr	d6, [r2, #32]
 801f06a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801f06e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801f072:	f003 030f 	and.w	r3, r3, #15
 801f076:	2203      	movs	r2, #3
 801f078:	4920      	ldr	r1, [pc, #128]	; (801f0fc <_dtoa_r+0x324>)
 801f07a:	e04a      	b.n	801f112 <_dtoa_r+0x33a>
 801f07c:	2301      	movs	r3, #1
 801f07e:	9309      	str	r3, [sp, #36]	; 0x24
 801f080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f082:	445b      	add	r3, fp
 801f084:	f103 0901 	add.w	r9, r3, #1
 801f088:	9306      	str	r3, [sp, #24]
 801f08a:	464b      	mov	r3, r9
 801f08c:	2b01      	cmp	r3, #1
 801f08e:	bfb8      	it	lt
 801f090:	2301      	movlt	r3, #1
 801f092:	e7ba      	b.n	801f00a <_dtoa_r+0x232>
 801f094:	2300      	movs	r3, #0
 801f096:	e7b2      	b.n	801effe <_dtoa_r+0x226>
 801f098:	2300      	movs	r3, #0
 801f09a:	e7f0      	b.n	801f07e <_dtoa_r+0x2a6>
 801f09c:	2501      	movs	r5, #1
 801f09e:	2300      	movs	r3, #0
 801f0a0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801f0a4:	f04f 33ff 	mov.w	r3, #4294967295
 801f0a8:	9306      	str	r3, [sp, #24]
 801f0aa:	4699      	mov	r9, r3
 801f0ac:	2200      	movs	r2, #0
 801f0ae:	2312      	movs	r3, #18
 801f0b0:	920a      	str	r2, [sp, #40]	; 0x28
 801f0b2:	e7aa      	b.n	801f00a <_dtoa_r+0x232>
 801f0b4:	2301      	movs	r3, #1
 801f0b6:	9309      	str	r3, [sp, #36]	; 0x24
 801f0b8:	e7f4      	b.n	801f0a4 <_dtoa_r+0x2cc>
 801f0ba:	2301      	movs	r3, #1
 801f0bc:	9306      	str	r3, [sp, #24]
 801f0be:	4699      	mov	r9, r3
 801f0c0:	461a      	mov	r2, r3
 801f0c2:	e7f5      	b.n	801f0b0 <_dtoa_r+0x2d8>
 801f0c4:	3101      	adds	r1, #1
 801f0c6:	6071      	str	r1, [r6, #4]
 801f0c8:	0052      	lsls	r2, r2, #1
 801f0ca:	e7a2      	b.n	801f012 <_dtoa_r+0x23a>
 801f0cc:	f3af 8000 	nop.w
 801f0d0:	636f4361 	.word	0x636f4361
 801f0d4:	3fd287a7 	.word	0x3fd287a7
 801f0d8:	8b60c8b3 	.word	0x8b60c8b3
 801f0dc:	3fc68a28 	.word	0x3fc68a28
 801f0e0:	509f79fb 	.word	0x509f79fb
 801f0e4:	3fd34413 	.word	0x3fd34413
 801f0e8:	7ff00000 	.word	0x7ff00000
 801f0ec:	0802348d 	.word	0x0802348d
 801f0f0:	08023484 	.word	0x08023484
 801f0f4:	08023461 	.word	0x08023461
 801f0f8:	08023528 	.word	0x08023528
 801f0fc:	08023500 	.word	0x08023500
 801f100:	07de      	lsls	r6, r3, #31
 801f102:	d504      	bpl.n	801f10e <_dtoa_r+0x336>
 801f104:	ed91 6b00 	vldr	d6, [r1]
 801f108:	3201      	adds	r2, #1
 801f10a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f10e:	105b      	asrs	r3, r3, #1
 801f110:	3108      	adds	r1, #8
 801f112:	2b00      	cmp	r3, #0
 801f114:	d1f4      	bne.n	801f100 <_dtoa_r+0x328>
 801f116:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f11a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801f11e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f122:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f124:	2b00      	cmp	r3, #0
 801f126:	f000 80a7 	beq.w	801f278 <_dtoa_r+0x4a0>
 801f12a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801f12e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f132:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f13a:	f140 809d 	bpl.w	801f278 <_dtoa_r+0x4a0>
 801f13e:	f1b9 0f00 	cmp.w	r9, #0
 801f142:	f000 8099 	beq.w	801f278 <_dtoa_r+0x4a0>
 801f146:	9b06      	ldr	r3, [sp, #24]
 801f148:	2b00      	cmp	r3, #0
 801f14a:	dd30      	ble.n	801f1ae <_dtoa_r+0x3d6>
 801f14c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801f150:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f154:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f158:	9d06      	ldr	r5, [sp, #24]
 801f15a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801f15e:	3201      	adds	r2, #1
 801f160:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f164:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801f168:	ee07 2a90 	vmov	s15, r2
 801f16c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f170:	eea7 5b06 	vfma.f64	d5, d7, d6
 801f174:	ed8d 5b02 	vstr	d5, [sp, #8]
 801f178:	9a03      	ldr	r2, [sp, #12]
 801f17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f17e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801f182:	2d00      	cmp	r5, #0
 801f184:	d17b      	bne.n	801f27e <_dtoa_r+0x4a6>
 801f186:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f18a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f18e:	ec41 0b17 	vmov	d7, r0, r1
 801f192:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f19a:	f300 8253 	bgt.w	801f644 <_dtoa_r+0x86c>
 801f19e:	eeb1 7b47 	vneg.f64	d7, d7
 801f1a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1aa:	f100 8249 	bmi.w	801f640 <_dtoa_r+0x868>
 801f1ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801f1b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f1b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	f2c0 8119 	blt.w	801f3f0 <_dtoa_r+0x618>
 801f1be:	f1bb 0f0e 	cmp.w	fp, #14
 801f1c2:	f300 8115 	bgt.w	801f3f0 <_dtoa_r+0x618>
 801f1c6:	4bc3      	ldr	r3, [pc, #780]	; (801f4d4 <_dtoa_r+0x6fc>)
 801f1c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f1cc:	ed93 6b00 	vldr	d6, [r3]
 801f1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	f280 80ba 	bge.w	801f34c <_dtoa_r+0x574>
 801f1d8:	f1b9 0f00 	cmp.w	r9, #0
 801f1dc:	f300 80b6 	bgt.w	801f34c <_dtoa_r+0x574>
 801f1e0:	f040 822d 	bne.w	801f63e <_dtoa_r+0x866>
 801f1e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f1e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f1ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f1f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1f8:	464d      	mov	r5, r9
 801f1fa:	464f      	mov	r7, r9
 801f1fc:	f280 8204 	bge.w	801f608 <_dtoa_r+0x830>
 801f200:	9b04      	ldr	r3, [sp, #16]
 801f202:	9a04      	ldr	r2, [sp, #16]
 801f204:	1c5e      	adds	r6, r3, #1
 801f206:	2331      	movs	r3, #49	; 0x31
 801f208:	7013      	strb	r3, [r2, #0]
 801f20a:	f10b 0b01 	add.w	fp, fp, #1
 801f20e:	e1ff      	b.n	801f610 <_dtoa_r+0x838>
 801f210:	2202      	movs	r2, #2
 801f212:	e731      	b.n	801f078 <_dtoa_r+0x2a0>
 801f214:	d02e      	beq.n	801f274 <_dtoa_r+0x49c>
 801f216:	f1cb 0300 	rsb	r3, fp, #0
 801f21a:	4aae      	ldr	r2, [pc, #696]	; (801f4d4 <_dtoa_r+0x6fc>)
 801f21c:	f003 010f 	and.w	r1, r3, #15
 801f220:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801f224:	ed92 7b00 	vldr	d7, [r2]
 801f228:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801f22c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f230:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f234:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801f238:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f23c:	49a6      	ldr	r1, [pc, #664]	; (801f4d8 <_dtoa_r+0x700>)
 801f23e:	111b      	asrs	r3, r3, #4
 801f240:	2000      	movs	r0, #0
 801f242:	2202      	movs	r2, #2
 801f244:	b93b      	cbnz	r3, 801f256 <_dtoa_r+0x47e>
 801f246:	2800      	cmp	r0, #0
 801f248:	f43f af6b 	beq.w	801f122 <_dtoa_r+0x34a>
 801f24c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f254:	e765      	b.n	801f122 <_dtoa_r+0x34a>
 801f256:	07dd      	lsls	r5, r3, #31
 801f258:	d509      	bpl.n	801f26e <_dtoa_r+0x496>
 801f25a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801f25e:	ed91 7b00 	vldr	d7, [r1]
 801f262:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f266:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f26a:	3201      	adds	r2, #1
 801f26c:	2001      	movs	r0, #1
 801f26e:	105b      	asrs	r3, r3, #1
 801f270:	3108      	adds	r1, #8
 801f272:	e7e7      	b.n	801f244 <_dtoa_r+0x46c>
 801f274:	2202      	movs	r2, #2
 801f276:	e754      	b.n	801f122 <_dtoa_r+0x34a>
 801f278:	465b      	mov	r3, fp
 801f27a:	464d      	mov	r5, r9
 801f27c:	e770      	b.n	801f160 <_dtoa_r+0x388>
 801f27e:	4a95      	ldr	r2, [pc, #596]	; (801f4d4 <_dtoa_r+0x6fc>)
 801f280:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801f284:	ed12 4b02 	vldr	d4, [r2, #-8]
 801f288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f28a:	ec41 0b17 	vmov	d7, r0, r1
 801f28e:	b35a      	cbz	r2, 801f2e8 <_dtoa_r+0x510>
 801f290:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801f294:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801f298:	9e04      	ldr	r6, [sp, #16]
 801f29a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801f29e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f2a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f2a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f2aa:	ee14 2a90 	vmov	r2, s9
 801f2ae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f2b2:	3230      	adds	r2, #48	; 0x30
 801f2b4:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f2b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2c0:	f806 2b01 	strb.w	r2, [r6], #1
 801f2c4:	d43b      	bmi.n	801f33e <_dtoa_r+0x566>
 801f2c6:	ee32 5b46 	vsub.f64	d5, d2, d6
 801f2ca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801f2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2d2:	d472      	bmi.n	801f3ba <_dtoa_r+0x5e2>
 801f2d4:	9a04      	ldr	r2, [sp, #16]
 801f2d6:	1ab2      	subs	r2, r6, r2
 801f2d8:	4295      	cmp	r5, r2
 801f2da:	f77f af68 	ble.w	801f1ae <_dtoa_r+0x3d6>
 801f2de:	ee27 7b03 	vmul.f64	d7, d7, d3
 801f2e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f2e6:	e7de      	b.n	801f2a6 <_dtoa_r+0x4ce>
 801f2e8:	9a04      	ldr	r2, [sp, #16]
 801f2ea:	ee24 7b07 	vmul.f64	d7, d4, d7
 801f2ee:	1956      	adds	r6, r2, r5
 801f2f0:	4611      	mov	r1, r2
 801f2f2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f2f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f2fa:	ee14 2a90 	vmov	r2, s9
 801f2fe:	3230      	adds	r2, #48	; 0x30
 801f300:	f801 2b01 	strb.w	r2, [r1], #1
 801f304:	42b1      	cmp	r1, r6
 801f306:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f30a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f30e:	d11a      	bne.n	801f346 <_dtoa_r+0x56e>
 801f310:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801f314:	ee37 4b05 	vadd.f64	d4, d7, d5
 801f318:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801f31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f320:	dc4b      	bgt.n	801f3ba <_dtoa_r+0x5e2>
 801f322:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f326:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f32e:	f57f af3e 	bpl.w	801f1ae <_dtoa_r+0x3d6>
 801f332:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f336:	2a30      	cmp	r2, #48	; 0x30
 801f338:	f106 31ff 	add.w	r1, r6, #4294967295
 801f33c:	d001      	beq.n	801f342 <_dtoa_r+0x56a>
 801f33e:	469b      	mov	fp, r3
 801f340:	e02a      	b.n	801f398 <_dtoa_r+0x5c0>
 801f342:	460e      	mov	r6, r1
 801f344:	e7f5      	b.n	801f332 <_dtoa_r+0x55a>
 801f346:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f34a:	e7d4      	b.n	801f2f6 <_dtoa_r+0x51e>
 801f34c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f350:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801f354:	9e04      	ldr	r6, [sp, #16]
 801f356:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801f35a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801f35e:	ee15 3a10 	vmov	r3, s10
 801f362:	3330      	adds	r3, #48	; 0x30
 801f364:	f806 3b01 	strb.w	r3, [r6], #1
 801f368:	9b04      	ldr	r3, [sp, #16]
 801f36a:	1af3      	subs	r3, r6, r3
 801f36c:	4599      	cmp	r9, r3
 801f36e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801f372:	eea3 7b46 	vfms.f64	d7, d3, d6
 801f376:	d133      	bne.n	801f3e0 <_dtoa_r+0x608>
 801f378:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f37c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f384:	dc18      	bgt.n	801f3b8 <_dtoa_r+0x5e0>
 801f386:	eeb4 7b46 	vcmp.f64	d7, d6
 801f38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f38e:	d103      	bne.n	801f398 <_dtoa_r+0x5c0>
 801f390:	ee15 3a10 	vmov	r3, s10
 801f394:	07db      	lsls	r3, r3, #31
 801f396:	d40f      	bmi.n	801f3b8 <_dtoa_r+0x5e0>
 801f398:	9901      	ldr	r1, [sp, #4]
 801f39a:	4620      	mov	r0, r4
 801f39c:	f000 fac2 	bl	801f924 <_Bfree>
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f3a4:	7033      	strb	r3, [r6, #0]
 801f3a6:	f10b 0301 	add.w	r3, fp, #1
 801f3aa:	6013      	str	r3, [r2, #0]
 801f3ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	f43f ad5b 	beq.w	801ee6a <_dtoa_r+0x92>
 801f3b4:	601e      	str	r6, [r3, #0]
 801f3b6:	e558      	b.n	801ee6a <_dtoa_r+0x92>
 801f3b8:	465b      	mov	r3, fp
 801f3ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f3be:	2939      	cmp	r1, #57	; 0x39
 801f3c0:	f106 32ff 	add.w	r2, r6, #4294967295
 801f3c4:	d106      	bne.n	801f3d4 <_dtoa_r+0x5fc>
 801f3c6:	9904      	ldr	r1, [sp, #16]
 801f3c8:	4291      	cmp	r1, r2
 801f3ca:	d107      	bne.n	801f3dc <_dtoa_r+0x604>
 801f3cc:	2230      	movs	r2, #48	; 0x30
 801f3ce:	700a      	strb	r2, [r1, #0]
 801f3d0:	3301      	adds	r3, #1
 801f3d2:	460a      	mov	r2, r1
 801f3d4:	7811      	ldrb	r1, [r2, #0]
 801f3d6:	3101      	adds	r1, #1
 801f3d8:	7011      	strb	r1, [r2, #0]
 801f3da:	e7b0      	b.n	801f33e <_dtoa_r+0x566>
 801f3dc:	4616      	mov	r6, r2
 801f3de:	e7ec      	b.n	801f3ba <_dtoa_r+0x5e2>
 801f3e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 801f3e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3ec:	d1b3      	bne.n	801f356 <_dtoa_r+0x57e>
 801f3ee:	e7d3      	b.n	801f398 <_dtoa_r+0x5c0>
 801f3f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f3f2:	2a00      	cmp	r2, #0
 801f3f4:	f000 808d 	beq.w	801f512 <_dtoa_r+0x73a>
 801f3f8:	9a08      	ldr	r2, [sp, #32]
 801f3fa:	2a01      	cmp	r2, #1
 801f3fc:	dc72      	bgt.n	801f4e4 <_dtoa_r+0x70c>
 801f3fe:	2f00      	cmp	r7, #0
 801f400:	d06c      	beq.n	801f4dc <_dtoa_r+0x704>
 801f402:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f406:	4645      	mov	r5, r8
 801f408:	4656      	mov	r6, sl
 801f40a:	9a07      	ldr	r2, [sp, #28]
 801f40c:	2101      	movs	r1, #1
 801f40e:	441a      	add	r2, r3
 801f410:	4620      	mov	r0, r4
 801f412:	449a      	add	sl, r3
 801f414:	9207      	str	r2, [sp, #28]
 801f416:	f000 fb25 	bl	801fa64 <__i2b>
 801f41a:	4607      	mov	r7, r0
 801f41c:	2e00      	cmp	r6, #0
 801f41e:	dd0b      	ble.n	801f438 <_dtoa_r+0x660>
 801f420:	9b07      	ldr	r3, [sp, #28]
 801f422:	2b00      	cmp	r3, #0
 801f424:	dd08      	ble.n	801f438 <_dtoa_r+0x660>
 801f426:	42b3      	cmp	r3, r6
 801f428:	9a07      	ldr	r2, [sp, #28]
 801f42a:	bfa8      	it	ge
 801f42c:	4633      	movge	r3, r6
 801f42e:	ebaa 0a03 	sub.w	sl, sl, r3
 801f432:	1af6      	subs	r6, r6, r3
 801f434:	1ad3      	subs	r3, r2, r3
 801f436:	9307      	str	r3, [sp, #28]
 801f438:	f1b8 0f00 	cmp.w	r8, #0
 801f43c:	d01d      	beq.n	801f47a <_dtoa_r+0x6a2>
 801f43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f440:	2b00      	cmp	r3, #0
 801f442:	d06a      	beq.n	801f51a <_dtoa_r+0x742>
 801f444:	b18d      	cbz	r5, 801f46a <_dtoa_r+0x692>
 801f446:	4639      	mov	r1, r7
 801f448:	462a      	mov	r2, r5
 801f44a:	4620      	mov	r0, r4
 801f44c:	f000 fbaa 	bl	801fba4 <__pow5mult>
 801f450:	9a01      	ldr	r2, [sp, #4]
 801f452:	4601      	mov	r1, r0
 801f454:	4607      	mov	r7, r0
 801f456:	4620      	mov	r0, r4
 801f458:	f000 fb0d 	bl	801fa76 <__multiply>
 801f45c:	9901      	ldr	r1, [sp, #4]
 801f45e:	900c      	str	r0, [sp, #48]	; 0x30
 801f460:	4620      	mov	r0, r4
 801f462:	f000 fa5f 	bl	801f924 <_Bfree>
 801f466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f468:	9301      	str	r3, [sp, #4]
 801f46a:	ebb8 0205 	subs.w	r2, r8, r5
 801f46e:	d004      	beq.n	801f47a <_dtoa_r+0x6a2>
 801f470:	9901      	ldr	r1, [sp, #4]
 801f472:	4620      	mov	r0, r4
 801f474:	f000 fb96 	bl	801fba4 <__pow5mult>
 801f478:	9001      	str	r0, [sp, #4]
 801f47a:	2101      	movs	r1, #1
 801f47c:	4620      	mov	r0, r4
 801f47e:	f000 faf1 	bl	801fa64 <__i2b>
 801f482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f484:	4605      	mov	r5, r0
 801f486:	2b00      	cmp	r3, #0
 801f488:	f000 81ca 	beq.w	801f820 <_dtoa_r+0xa48>
 801f48c:	461a      	mov	r2, r3
 801f48e:	4601      	mov	r1, r0
 801f490:	4620      	mov	r0, r4
 801f492:	f000 fb87 	bl	801fba4 <__pow5mult>
 801f496:	9b08      	ldr	r3, [sp, #32]
 801f498:	2b01      	cmp	r3, #1
 801f49a:	4605      	mov	r5, r0
 801f49c:	dc44      	bgt.n	801f528 <_dtoa_r+0x750>
 801f49e:	9b02      	ldr	r3, [sp, #8]
 801f4a0:	2b00      	cmp	r3, #0
 801f4a2:	d13c      	bne.n	801f51e <_dtoa_r+0x746>
 801f4a4:	9b03      	ldr	r3, [sp, #12]
 801f4a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f4aa:	2b00      	cmp	r3, #0
 801f4ac:	d137      	bne.n	801f51e <_dtoa_r+0x746>
 801f4ae:	9b03      	ldr	r3, [sp, #12]
 801f4b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f4b4:	0d1b      	lsrs	r3, r3, #20
 801f4b6:	051b      	lsls	r3, r3, #20
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d033      	beq.n	801f524 <_dtoa_r+0x74c>
 801f4bc:	9b07      	ldr	r3, [sp, #28]
 801f4be:	3301      	adds	r3, #1
 801f4c0:	f10a 0a01 	add.w	sl, sl, #1
 801f4c4:	9307      	str	r3, [sp, #28]
 801f4c6:	f04f 0801 	mov.w	r8, #1
 801f4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4cc:	bb73      	cbnz	r3, 801f52c <_dtoa_r+0x754>
 801f4ce:	2001      	movs	r0, #1
 801f4d0:	e034      	b.n	801f53c <_dtoa_r+0x764>
 801f4d2:	bf00      	nop
 801f4d4:	08023528 	.word	0x08023528
 801f4d8:	08023500 	.word	0x08023500
 801f4dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f4de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f4e2:	e790      	b.n	801f406 <_dtoa_r+0x62e>
 801f4e4:	f109 35ff 	add.w	r5, r9, #4294967295
 801f4e8:	45a8      	cmp	r8, r5
 801f4ea:	bfbf      	itttt	lt
 801f4ec:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801f4ee:	eba5 0808 	sublt.w	r8, r5, r8
 801f4f2:	4443      	addlt	r3, r8
 801f4f4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801f4f6:	bfb6      	itet	lt
 801f4f8:	46a8      	movlt	r8, r5
 801f4fa:	eba8 0505 	subge.w	r5, r8, r5
 801f4fe:	2500      	movlt	r5, #0
 801f500:	f1b9 0f00 	cmp.w	r9, #0
 801f504:	bfb9      	ittee	lt
 801f506:	ebaa 0609 	sublt.w	r6, sl, r9
 801f50a:	2300      	movlt	r3, #0
 801f50c:	4656      	movge	r6, sl
 801f50e:	464b      	movge	r3, r9
 801f510:	e77b      	b.n	801f40a <_dtoa_r+0x632>
 801f512:	4645      	mov	r5, r8
 801f514:	4656      	mov	r6, sl
 801f516:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f518:	e780      	b.n	801f41c <_dtoa_r+0x644>
 801f51a:	4642      	mov	r2, r8
 801f51c:	e7a8      	b.n	801f470 <_dtoa_r+0x698>
 801f51e:	f04f 0800 	mov.w	r8, #0
 801f522:	e7d2      	b.n	801f4ca <_dtoa_r+0x6f2>
 801f524:	4698      	mov	r8, r3
 801f526:	e7d0      	b.n	801f4ca <_dtoa_r+0x6f2>
 801f528:	f04f 0800 	mov.w	r8, #0
 801f52c:	692b      	ldr	r3, [r5, #16]
 801f52e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801f532:	6918      	ldr	r0, [r3, #16]
 801f534:	f000 fa48 	bl	801f9c8 <__hi0bits>
 801f538:	f1c0 0020 	rsb	r0, r0, #32
 801f53c:	9b07      	ldr	r3, [sp, #28]
 801f53e:	4418      	add	r0, r3
 801f540:	f010 001f 	ands.w	r0, r0, #31
 801f544:	d047      	beq.n	801f5d6 <_dtoa_r+0x7fe>
 801f546:	f1c0 0320 	rsb	r3, r0, #32
 801f54a:	2b04      	cmp	r3, #4
 801f54c:	dd3b      	ble.n	801f5c6 <_dtoa_r+0x7ee>
 801f54e:	9b07      	ldr	r3, [sp, #28]
 801f550:	f1c0 001c 	rsb	r0, r0, #28
 801f554:	4482      	add	sl, r0
 801f556:	4406      	add	r6, r0
 801f558:	4403      	add	r3, r0
 801f55a:	9307      	str	r3, [sp, #28]
 801f55c:	f1ba 0f00 	cmp.w	sl, #0
 801f560:	dd05      	ble.n	801f56e <_dtoa_r+0x796>
 801f562:	4652      	mov	r2, sl
 801f564:	9901      	ldr	r1, [sp, #4]
 801f566:	4620      	mov	r0, r4
 801f568:	f000 fb6a 	bl	801fc40 <__lshift>
 801f56c:	9001      	str	r0, [sp, #4]
 801f56e:	9b07      	ldr	r3, [sp, #28]
 801f570:	2b00      	cmp	r3, #0
 801f572:	dd05      	ble.n	801f580 <_dtoa_r+0x7a8>
 801f574:	4629      	mov	r1, r5
 801f576:	461a      	mov	r2, r3
 801f578:	4620      	mov	r0, r4
 801f57a:	f000 fb61 	bl	801fc40 <__lshift>
 801f57e:	4605      	mov	r5, r0
 801f580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f582:	b353      	cbz	r3, 801f5da <_dtoa_r+0x802>
 801f584:	4629      	mov	r1, r5
 801f586:	9801      	ldr	r0, [sp, #4]
 801f588:	f000 fbae 	bl	801fce8 <__mcmp>
 801f58c:	2800      	cmp	r0, #0
 801f58e:	da24      	bge.n	801f5da <_dtoa_r+0x802>
 801f590:	2300      	movs	r3, #0
 801f592:	220a      	movs	r2, #10
 801f594:	9901      	ldr	r1, [sp, #4]
 801f596:	4620      	mov	r0, r4
 801f598:	f000 f9db 	bl	801f952 <__multadd>
 801f59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f59e:	9001      	str	r0, [sp, #4]
 801f5a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	f000 8142 	beq.w	801f82e <_dtoa_r+0xa56>
 801f5aa:	2300      	movs	r3, #0
 801f5ac:	4639      	mov	r1, r7
 801f5ae:	220a      	movs	r2, #10
 801f5b0:	4620      	mov	r0, r4
 801f5b2:	f000 f9ce 	bl	801f952 <__multadd>
 801f5b6:	9b06      	ldr	r3, [sp, #24]
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	4607      	mov	r7, r0
 801f5bc:	dc4b      	bgt.n	801f656 <_dtoa_r+0x87e>
 801f5be:	9b08      	ldr	r3, [sp, #32]
 801f5c0:	2b02      	cmp	r3, #2
 801f5c2:	dd48      	ble.n	801f656 <_dtoa_r+0x87e>
 801f5c4:	e011      	b.n	801f5ea <_dtoa_r+0x812>
 801f5c6:	d0c9      	beq.n	801f55c <_dtoa_r+0x784>
 801f5c8:	9a07      	ldr	r2, [sp, #28]
 801f5ca:	331c      	adds	r3, #28
 801f5cc:	441a      	add	r2, r3
 801f5ce:	449a      	add	sl, r3
 801f5d0:	441e      	add	r6, r3
 801f5d2:	4613      	mov	r3, r2
 801f5d4:	e7c1      	b.n	801f55a <_dtoa_r+0x782>
 801f5d6:	4603      	mov	r3, r0
 801f5d8:	e7f6      	b.n	801f5c8 <_dtoa_r+0x7f0>
 801f5da:	f1b9 0f00 	cmp.w	r9, #0
 801f5de:	dc34      	bgt.n	801f64a <_dtoa_r+0x872>
 801f5e0:	9b08      	ldr	r3, [sp, #32]
 801f5e2:	2b02      	cmp	r3, #2
 801f5e4:	dd31      	ble.n	801f64a <_dtoa_r+0x872>
 801f5e6:	f8cd 9018 	str.w	r9, [sp, #24]
 801f5ea:	9b06      	ldr	r3, [sp, #24]
 801f5ec:	b963      	cbnz	r3, 801f608 <_dtoa_r+0x830>
 801f5ee:	4629      	mov	r1, r5
 801f5f0:	2205      	movs	r2, #5
 801f5f2:	4620      	mov	r0, r4
 801f5f4:	f000 f9ad 	bl	801f952 <__multadd>
 801f5f8:	4601      	mov	r1, r0
 801f5fa:	4605      	mov	r5, r0
 801f5fc:	9801      	ldr	r0, [sp, #4]
 801f5fe:	f000 fb73 	bl	801fce8 <__mcmp>
 801f602:	2800      	cmp	r0, #0
 801f604:	f73f adfc 	bgt.w	801f200 <_dtoa_r+0x428>
 801f608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f60a:	9e04      	ldr	r6, [sp, #16]
 801f60c:	ea6f 0b03 	mvn.w	fp, r3
 801f610:	f04f 0900 	mov.w	r9, #0
 801f614:	4629      	mov	r1, r5
 801f616:	4620      	mov	r0, r4
 801f618:	f000 f984 	bl	801f924 <_Bfree>
 801f61c:	2f00      	cmp	r7, #0
 801f61e:	f43f aebb 	beq.w	801f398 <_dtoa_r+0x5c0>
 801f622:	f1b9 0f00 	cmp.w	r9, #0
 801f626:	d005      	beq.n	801f634 <_dtoa_r+0x85c>
 801f628:	45b9      	cmp	r9, r7
 801f62a:	d003      	beq.n	801f634 <_dtoa_r+0x85c>
 801f62c:	4649      	mov	r1, r9
 801f62e:	4620      	mov	r0, r4
 801f630:	f000 f978 	bl	801f924 <_Bfree>
 801f634:	4639      	mov	r1, r7
 801f636:	4620      	mov	r0, r4
 801f638:	f000 f974 	bl	801f924 <_Bfree>
 801f63c:	e6ac      	b.n	801f398 <_dtoa_r+0x5c0>
 801f63e:	2500      	movs	r5, #0
 801f640:	462f      	mov	r7, r5
 801f642:	e7e1      	b.n	801f608 <_dtoa_r+0x830>
 801f644:	469b      	mov	fp, r3
 801f646:	462f      	mov	r7, r5
 801f648:	e5da      	b.n	801f200 <_dtoa_r+0x428>
 801f64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f64c:	f8cd 9018 	str.w	r9, [sp, #24]
 801f650:	2b00      	cmp	r3, #0
 801f652:	f000 80f3 	beq.w	801f83c <_dtoa_r+0xa64>
 801f656:	2e00      	cmp	r6, #0
 801f658:	dd05      	ble.n	801f666 <_dtoa_r+0x88e>
 801f65a:	4639      	mov	r1, r7
 801f65c:	4632      	mov	r2, r6
 801f65e:	4620      	mov	r0, r4
 801f660:	f000 faee 	bl	801fc40 <__lshift>
 801f664:	4607      	mov	r7, r0
 801f666:	f1b8 0f00 	cmp.w	r8, #0
 801f66a:	d04c      	beq.n	801f706 <_dtoa_r+0x92e>
 801f66c:	6879      	ldr	r1, [r7, #4]
 801f66e:	4620      	mov	r0, r4
 801f670:	f000 f924 	bl	801f8bc <_Balloc>
 801f674:	693a      	ldr	r2, [r7, #16]
 801f676:	3202      	adds	r2, #2
 801f678:	4606      	mov	r6, r0
 801f67a:	0092      	lsls	r2, r2, #2
 801f67c:	f107 010c 	add.w	r1, r7, #12
 801f680:	300c      	adds	r0, #12
 801f682:	f7fe fd63 	bl	801e14c <memcpy>
 801f686:	2201      	movs	r2, #1
 801f688:	4631      	mov	r1, r6
 801f68a:	4620      	mov	r0, r4
 801f68c:	f000 fad8 	bl	801fc40 <__lshift>
 801f690:	9b02      	ldr	r3, [sp, #8]
 801f692:	f8dd a010 	ldr.w	sl, [sp, #16]
 801f696:	f003 0301 	and.w	r3, r3, #1
 801f69a:	46b9      	mov	r9, r7
 801f69c:	9307      	str	r3, [sp, #28]
 801f69e:	4607      	mov	r7, r0
 801f6a0:	4629      	mov	r1, r5
 801f6a2:	9801      	ldr	r0, [sp, #4]
 801f6a4:	f7ff fb0a 	bl	801ecbc <quorem>
 801f6a8:	4649      	mov	r1, r9
 801f6aa:	4606      	mov	r6, r0
 801f6ac:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801f6b0:	9801      	ldr	r0, [sp, #4]
 801f6b2:	f000 fb19 	bl	801fce8 <__mcmp>
 801f6b6:	463a      	mov	r2, r7
 801f6b8:	9002      	str	r0, [sp, #8]
 801f6ba:	4629      	mov	r1, r5
 801f6bc:	4620      	mov	r0, r4
 801f6be:	f000 fb2d 	bl	801fd1c <__mdiff>
 801f6c2:	68c3      	ldr	r3, [r0, #12]
 801f6c4:	4602      	mov	r2, r0
 801f6c6:	bb03      	cbnz	r3, 801f70a <_dtoa_r+0x932>
 801f6c8:	4601      	mov	r1, r0
 801f6ca:	9009      	str	r0, [sp, #36]	; 0x24
 801f6cc:	9801      	ldr	r0, [sp, #4]
 801f6ce:	f000 fb0b 	bl	801fce8 <__mcmp>
 801f6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6d4:	4603      	mov	r3, r0
 801f6d6:	4611      	mov	r1, r2
 801f6d8:	4620      	mov	r0, r4
 801f6da:	9309      	str	r3, [sp, #36]	; 0x24
 801f6dc:	f000 f922 	bl	801f924 <_Bfree>
 801f6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6e2:	b9a3      	cbnz	r3, 801f70e <_dtoa_r+0x936>
 801f6e4:	9a08      	ldr	r2, [sp, #32]
 801f6e6:	b992      	cbnz	r2, 801f70e <_dtoa_r+0x936>
 801f6e8:	9a07      	ldr	r2, [sp, #28]
 801f6ea:	b982      	cbnz	r2, 801f70e <_dtoa_r+0x936>
 801f6ec:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801f6f0:	d029      	beq.n	801f746 <_dtoa_r+0x96e>
 801f6f2:	9b02      	ldr	r3, [sp, #8]
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	dd01      	ble.n	801f6fc <_dtoa_r+0x924>
 801f6f8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801f6fc:	f10a 0601 	add.w	r6, sl, #1
 801f700:	f88a 8000 	strb.w	r8, [sl]
 801f704:	e786      	b.n	801f614 <_dtoa_r+0x83c>
 801f706:	4638      	mov	r0, r7
 801f708:	e7c2      	b.n	801f690 <_dtoa_r+0x8b8>
 801f70a:	2301      	movs	r3, #1
 801f70c:	e7e3      	b.n	801f6d6 <_dtoa_r+0x8fe>
 801f70e:	9a02      	ldr	r2, [sp, #8]
 801f710:	2a00      	cmp	r2, #0
 801f712:	db04      	blt.n	801f71e <_dtoa_r+0x946>
 801f714:	d124      	bne.n	801f760 <_dtoa_r+0x988>
 801f716:	9a08      	ldr	r2, [sp, #32]
 801f718:	bb12      	cbnz	r2, 801f760 <_dtoa_r+0x988>
 801f71a:	9a07      	ldr	r2, [sp, #28]
 801f71c:	bb02      	cbnz	r2, 801f760 <_dtoa_r+0x988>
 801f71e:	2b00      	cmp	r3, #0
 801f720:	ddec      	ble.n	801f6fc <_dtoa_r+0x924>
 801f722:	2201      	movs	r2, #1
 801f724:	9901      	ldr	r1, [sp, #4]
 801f726:	4620      	mov	r0, r4
 801f728:	f000 fa8a 	bl	801fc40 <__lshift>
 801f72c:	4629      	mov	r1, r5
 801f72e:	9001      	str	r0, [sp, #4]
 801f730:	f000 fada 	bl	801fce8 <__mcmp>
 801f734:	2800      	cmp	r0, #0
 801f736:	dc03      	bgt.n	801f740 <_dtoa_r+0x968>
 801f738:	d1e0      	bne.n	801f6fc <_dtoa_r+0x924>
 801f73a:	f018 0f01 	tst.w	r8, #1
 801f73e:	d0dd      	beq.n	801f6fc <_dtoa_r+0x924>
 801f740:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801f744:	d1d8      	bne.n	801f6f8 <_dtoa_r+0x920>
 801f746:	2339      	movs	r3, #57	; 0x39
 801f748:	f10a 0601 	add.w	r6, sl, #1
 801f74c:	f88a 3000 	strb.w	r3, [sl]
 801f750:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f754:	2b39      	cmp	r3, #57	; 0x39
 801f756:	f106 32ff 	add.w	r2, r6, #4294967295
 801f75a:	d04c      	beq.n	801f7f6 <_dtoa_r+0xa1e>
 801f75c:	3301      	adds	r3, #1
 801f75e:	e051      	b.n	801f804 <_dtoa_r+0xa2c>
 801f760:	2b00      	cmp	r3, #0
 801f762:	f10a 0601 	add.w	r6, sl, #1
 801f766:	dd05      	ble.n	801f774 <_dtoa_r+0x99c>
 801f768:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801f76c:	d0eb      	beq.n	801f746 <_dtoa_r+0x96e>
 801f76e:	f108 0801 	add.w	r8, r8, #1
 801f772:	e7c5      	b.n	801f700 <_dtoa_r+0x928>
 801f774:	9b04      	ldr	r3, [sp, #16]
 801f776:	9a06      	ldr	r2, [sp, #24]
 801f778:	f806 8c01 	strb.w	r8, [r6, #-1]
 801f77c:	1af3      	subs	r3, r6, r3
 801f77e:	4293      	cmp	r3, r2
 801f780:	d021      	beq.n	801f7c6 <_dtoa_r+0x9ee>
 801f782:	2300      	movs	r3, #0
 801f784:	220a      	movs	r2, #10
 801f786:	9901      	ldr	r1, [sp, #4]
 801f788:	4620      	mov	r0, r4
 801f78a:	f000 f8e2 	bl	801f952 <__multadd>
 801f78e:	45b9      	cmp	r9, r7
 801f790:	9001      	str	r0, [sp, #4]
 801f792:	f04f 0300 	mov.w	r3, #0
 801f796:	f04f 020a 	mov.w	r2, #10
 801f79a:	4649      	mov	r1, r9
 801f79c:	4620      	mov	r0, r4
 801f79e:	d105      	bne.n	801f7ac <_dtoa_r+0x9d4>
 801f7a0:	f000 f8d7 	bl	801f952 <__multadd>
 801f7a4:	4681      	mov	r9, r0
 801f7a6:	4607      	mov	r7, r0
 801f7a8:	46b2      	mov	sl, r6
 801f7aa:	e779      	b.n	801f6a0 <_dtoa_r+0x8c8>
 801f7ac:	f000 f8d1 	bl	801f952 <__multadd>
 801f7b0:	4639      	mov	r1, r7
 801f7b2:	4681      	mov	r9, r0
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	220a      	movs	r2, #10
 801f7b8:	4620      	mov	r0, r4
 801f7ba:	f000 f8ca 	bl	801f952 <__multadd>
 801f7be:	4607      	mov	r7, r0
 801f7c0:	e7f2      	b.n	801f7a8 <_dtoa_r+0x9d0>
 801f7c2:	f04f 0900 	mov.w	r9, #0
 801f7c6:	2201      	movs	r2, #1
 801f7c8:	9901      	ldr	r1, [sp, #4]
 801f7ca:	4620      	mov	r0, r4
 801f7cc:	f000 fa38 	bl	801fc40 <__lshift>
 801f7d0:	4629      	mov	r1, r5
 801f7d2:	9001      	str	r0, [sp, #4]
 801f7d4:	f000 fa88 	bl	801fce8 <__mcmp>
 801f7d8:	2800      	cmp	r0, #0
 801f7da:	dcb9      	bgt.n	801f750 <_dtoa_r+0x978>
 801f7dc:	d102      	bne.n	801f7e4 <_dtoa_r+0xa0c>
 801f7de:	f018 0f01 	tst.w	r8, #1
 801f7e2:	d1b5      	bne.n	801f750 <_dtoa_r+0x978>
 801f7e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f7e8:	2b30      	cmp	r3, #48	; 0x30
 801f7ea:	f106 32ff 	add.w	r2, r6, #4294967295
 801f7ee:	f47f af11 	bne.w	801f614 <_dtoa_r+0x83c>
 801f7f2:	4616      	mov	r6, r2
 801f7f4:	e7f6      	b.n	801f7e4 <_dtoa_r+0xa0c>
 801f7f6:	9b04      	ldr	r3, [sp, #16]
 801f7f8:	4293      	cmp	r3, r2
 801f7fa:	d105      	bne.n	801f808 <_dtoa_r+0xa30>
 801f7fc:	9a04      	ldr	r2, [sp, #16]
 801f7fe:	f10b 0b01 	add.w	fp, fp, #1
 801f802:	2331      	movs	r3, #49	; 0x31
 801f804:	7013      	strb	r3, [r2, #0]
 801f806:	e705      	b.n	801f614 <_dtoa_r+0x83c>
 801f808:	4616      	mov	r6, r2
 801f80a:	e7a1      	b.n	801f750 <_dtoa_r+0x978>
 801f80c:	4b16      	ldr	r3, [pc, #88]	; (801f868 <_dtoa_r+0xa90>)
 801f80e:	f7ff bb48 	b.w	801eea2 <_dtoa_r+0xca>
 801f812:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f814:	2b00      	cmp	r3, #0
 801f816:	f47f ab23 	bne.w	801ee60 <_dtoa_r+0x88>
 801f81a:	4b14      	ldr	r3, [pc, #80]	; (801f86c <_dtoa_r+0xa94>)
 801f81c:	f7ff bb41 	b.w	801eea2 <_dtoa_r+0xca>
 801f820:	9b08      	ldr	r3, [sp, #32]
 801f822:	2b01      	cmp	r3, #1
 801f824:	f77f ae3b 	ble.w	801f49e <_dtoa_r+0x6c6>
 801f828:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801f82c:	e64f      	b.n	801f4ce <_dtoa_r+0x6f6>
 801f82e:	9b06      	ldr	r3, [sp, #24]
 801f830:	2b00      	cmp	r3, #0
 801f832:	dc03      	bgt.n	801f83c <_dtoa_r+0xa64>
 801f834:	9b08      	ldr	r3, [sp, #32]
 801f836:	2b02      	cmp	r3, #2
 801f838:	f73f aed7 	bgt.w	801f5ea <_dtoa_r+0x812>
 801f83c:	9e04      	ldr	r6, [sp, #16]
 801f83e:	9801      	ldr	r0, [sp, #4]
 801f840:	4629      	mov	r1, r5
 801f842:	f7ff fa3b 	bl	801ecbc <quorem>
 801f846:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801f84a:	f806 8b01 	strb.w	r8, [r6], #1
 801f84e:	9b04      	ldr	r3, [sp, #16]
 801f850:	9a06      	ldr	r2, [sp, #24]
 801f852:	1af3      	subs	r3, r6, r3
 801f854:	429a      	cmp	r2, r3
 801f856:	ddb4      	ble.n	801f7c2 <_dtoa_r+0x9ea>
 801f858:	2300      	movs	r3, #0
 801f85a:	220a      	movs	r2, #10
 801f85c:	9901      	ldr	r1, [sp, #4]
 801f85e:	4620      	mov	r0, r4
 801f860:	f000 f877 	bl	801f952 <__multadd>
 801f864:	9001      	str	r0, [sp, #4]
 801f866:	e7ea      	b.n	801f83e <_dtoa_r+0xa66>
 801f868:	08023460 	.word	0x08023460
 801f86c:	08023484 	.word	0x08023484

0801f870 <__locale_ctype_ptr_l>:
 801f870:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801f874:	4770      	bx	lr
	...

0801f878 <_localeconv_r>:
 801f878:	4b04      	ldr	r3, [pc, #16]	; (801f88c <_localeconv_r+0x14>)
 801f87a:	681b      	ldr	r3, [r3, #0]
 801f87c:	6a18      	ldr	r0, [r3, #32]
 801f87e:	4b04      	ldr	r3, [pc, #16]	; (801f890 <_localeconv_r+0x18>)
 801f880:	2800      	cmp	r0, #0
 801f882:	bf08      	it	eq
 801f884:	4618      	moveq	r0, r3
 801f886:	30f0      	adds	r0, #240	; 0xf0
 801f888:	4770      	bx	lr
 801f88a:	bf00      	nop
 801f88c:	2000009c 	.word	0x2000009c
 801f890:	20000100 	.word	0x20000100

0801f894 <__ascii_mbtowc>:
 801f894:	b082      	sub	sp, #8
 801f896:	b901      	cbnz	r1, 801f89a <__ascii_mbtowc+0x6>
 801f898:	a901      	add	r1, sp, #4
 801f89a:	b142      	cbz	r2, 801f8ae <__ascii_mbtowc+0x1a>
 801f89c:	b14b      	cbz	r3, 801f8b2 <__ascii_mbtowc+0x1e>
 801f89e:	7813      	ldrb	r3, [r2, #0]
 801f8a0:	600b      	str	r3, [r1, #0]
 801f8a2:	7812      	ldrb	r2, [r2, #0]
 801f8a4:	1c10      	adds	r0, r2, #0
 801f8a6:	bf18      	it	ne
 801f8a8:	2001      	movne	r0, #1
 801f8aa:	b002      	add	sp, #8
 801f8ac:	4770      	bx	lr
 801f8ae:	4610      	mov	r0, r2
 801f8b0:	e7fb      	b.n	801f8aa <__ascii_mbtowc+0x16>
 801f8b2:	f06f 0001 	mvn.w	r0, #1
 801f8b6:	e7f8      	b.n	801f8aa <__ascii_mbtowc+0x16>

0801f8b8 <__malloc_lock>:
 801f8b8:	4770      	bx	lr

0801f8ba <__malloc_unlock>:
 801f8ba:	4770      	bx	lr

0801f8bc <_Balloc>:
 801f8bc:	b570      	push	{r4, r5, r6, lr}
 801f8be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801f8c0:	4604      	mov	r4, r0
 801f8c2:	460e      	mov	r6, r1
 801f8c4:	b93d      	cbnz	r5, 801f8d6 <_Balloc+0x1a>
 801f8c6:	2010      	movs	r0, #16
 801f8c8:	f7fe fc30 	bl	801e12c <malloc>
 801f8cc:	6260      	str	r0, [r4, #36]	; 0x24
 801f8ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801f8d2:	6005      	str	r5, [r0, #0]
 801f8d4:	60c5      	str	r5, [r0, #12]
 801f8d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801f8d8:	68eb      	ldr	r3, [r5, #12]
 801f8da:	b183      	cbz	r3, 801f8fe <_Balloc+0x42>
 801f8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f8de:	68db      	ldr	r3, [r3, #12]
 801f8e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f8e4:	b9b8      	cbnz	r0, 801f916 <_Balloc+0x5a>
 801f8e6:	2101      	movs	r1, #1
 801f8e8:	fa01 f506 	lsl.w	r5, r1, r6
 801f8ec:	1d6a      	adds	r2, r5, #5
 801f8ee:	0092      	lsls	r2, r2, #2
 801f8f0:	4620      	mov	r0, r4
 801f8f2:	f000 fabf 	bl	801fe74 <_calloc_r>
 801f8f6:	b160      	cbz	r0, 801f912 <_Balloc+0x56>
 801f8f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801f8fc:	e00e      	b.n	801f91c <_Balloc+0x60>
 801f8fe:	2221      	movs	r2, #33	; 0x21
 801f900:	2104      	movs	r1, #4
 801f902:	4620      	mov	r0, r4
 801f904:	f000 fab6 	bl	801fe74 <_calloc_r>
 801f908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f90a:	60e8      	str	r0, [r5, #12]
 801f90c:	68db      	ldr	r3, [r3, #12]
 801f90e:	2b00      	cmp	r3, #0
 801f910:	d1e4      	bne.n	801f8dc <_Balloc+0x20>
 801f912:	2000      	movs	r0, #0
 801f914:	bd70      	pop	{r4, r5, r6, pc}
 801f916:	6802      	ldr	r2, [r0, #0]
 801f918:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801f91c:	2300      	movs	r3, #0
 801f91e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f922:	e7f7      	b.n	801f914 <_Balloc+0x58>

0801f924 <_Bfree>:
 801f924:	b570      	push	{r4, r5, r6, lr}
 801f926:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801f928:	4606      	mov	r6, r0
 801f92a:	460d      	mov	r5, r1
 801f92c:	b93c      	cbnz	r4, 801f93e <_Bfree+0x1a>
 801f92e:	2010      	movs	r0, #16
 801f930:	f7fe fbfc 	bl	801e12c <malloc>
 801f934:	6270      	str	r0, [r6, #36]	; 0x24
 801f936:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f93a:	6004      	str	r4, [r0, #0]
 801f93c:	60c4      	str	r4, [r0, #12]
 801f93e:	b13d      	cbz	r5, 801f950 <_Bfree+0x2c>
 801f940:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801f942:	686a      	ldr	r2, [r5, #4]
 801f944:	68db      	ldr	r3, [r3, #12]
 801f946:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f94a:	6029      	str	r1, [r5, #0]
 801f94c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801f950:	bd70      	pop	{r4, r5, r6, pc}

0801f952 <__multadd>:
 801f952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f956:	690d      	ldr	r5, [r1, #16]
 801f958:	461f      	mov	r7, r3
 801f95a:	4606      	mov	r6, r0
 801f95c:	460c      	mov	r4, r1
 801f95e:	f101 0c14 	add.w	ip, r1, #20
 801f962:	2300      	movs	r3, #0
 801f964:	f8dc 0000 	ldr.w	r0, [ip]
 801f968:	b281      	uxth	r1, r0
 801f96a:	fb02 7101 	mla	r1, r2, r1, r7
 801f96e:	0c0f      	lsrs	r7, r1, #16
 801f970:	0c00      	lsrs	r0, r0, #16
 801f972:	fb02 7000 	mla	r0, r2, r0, r7
 801f976:	b289      	uxth	r1, r1
 801f978:	3301      	adds	r3, #1
 801f97a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801f97e:	429d      	cmp	r5, r3
 801f980:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801f984:	f84c 1b04 	str.w	r1, [ip], #4
 801f988:	dcec      	bgt.n	801f964 <__multadd+0x12>
 801f98a:	b1d7      	cbz	r7, 801f9c2 <__multadd+0x70>
 801f98c:	68a3      	ldr	r3, [r4, #8]
 801f98e:	42ab      	cmp	r3, r5
 801f990:	dc12      	bgt.n	801f9b8 <__multadd+0x66>
 801f992:	6861      	ldr	r1, [r4, #4]
 801f994:	4630      	mov	r0, r6
 801f996:	3101      	adds	r1, #1
 801f998:	f7ff ff90 	bl	801f8bc <_Balloc>
 801f99c:	6922      	ldr	r2, [r4, #16]
 801f99e:	3202      	adds	r2, #2
 801f9a0:	f104 010c 	add.w	r1, r4, #12
 801f9a4:	4680      	mov	r8, r0
 801f9a6:	0092      	lsls	r2, r2, #2
 801f9a8:	300c      	adds	r0, #12
 801f9aa:	f7fe fbcf 	bl	801e14c <memcpy>
 801f9ae:	4621      	mov	r1, r4
 801f9b0:	4630      	mov	r0, r6
 801f9b2:	f7ff ffb7 	bl	801f924 <_Bfree>
 801f9b6:	4644      	mov	r4, r8
 801f9b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f9bc:	3501      	adds	r5, #1
 801f9be:	615f      	str	r7, [r3, #20]
 801f9c0:	6125      	str	r5, [r4, #16]
 801f9c2:	4620      	mov	r0, r4
 801f9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f9c8 <__hi0bits>:
 801f9c8:	0c02      	lsrs	r2, r0, #16
 801f9ca:	0412      	lsls	r2, r2, #16
 801f9cc:	4603      	mov	r3, r0
 801f9ce:	b9b2      	cbnz	r2, 801f9fe <__hi0bits+0x36>
 801f9d0:	0403      	lsls	r3, r0, #16
 801f9d2:	2010      	movs	r0, #16
 801f9d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801f9d8:	bf04      	itt	eq
 801f9da:	021b      	lsleq	r3, r3, #8
 801f9dc:	3008      	addeq	r0, #8
 801f9de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801f9e2:	bf04      	itt	eq
 801f9e4:	011b      	lsleq	r3, r3, #4
 801f9e6:	3004      	addeq	r0, #4
 801f9e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801f9ec:	bf04      	itt	eq
 801f9ee:	009b      	lsleq	r3, r3, #2
 801f9f0:	3002      	addeq	r0, #2
 801f9f2:	2b00      	cmp	r3, #0
 801f9f4:	db06      	blt.n	801fa04 <__hi0bits+0x3c>
 801f9f6:	005b      	lsls	r3, r3, #1
 801f9f8:	d503      	bpl.n	801fa02 <__hi0bits+0x3a>
 801f9fa:	3001      	adds	r0, #1
 801f9fc:	4770      	bx	lr
 801f9fe:	2000      	movs	r0, #0
 801fa00:	e7e8      	b.n	801f9d4 <__hi0bits+0xc>
 801fa02:	2020      	movs	r0, #32
 801fa04:	4770      	bx	lr

0801fa06 <__lo0bits>:
 801fa06:	6803      	ldr	r3, [r0, #0]
 801fa08:	f013 0207 	ands.w	r2, r3, #7
 801fa0c:	4601      	mov	r1, r0
 801fa0e:	d00b      	beq.n	801fa28 <__lo0bits+0x22>
 801fa10:	07da      	lsls	r2, r3, #31
 801fa12:	d423      	bmi.n	801fa5c <__lo0bits+0x56>
 801fa14:	0798      	lsls	r0, r3, #30
 801fa16:	bf49      	itett	mi
 801fa18:	085b      	lsrmi	r3, r3, #1
 801fa1a:	089b      	lsrpl	r3, r3, #2
 801fa1c:	2001      	movmi	r0, #1
 801fa1e:	600b      	strmi	r3, [r1, #0]
 801fa20:	bf5c      	itt	pl
 801fa22:	600b      	strpl	r3, [r1, #0]
 801fa24:	2002      	movpl	r0, #2
 801fa26:	4770      	bx	lr
 801fa28:	b298      	uxth	r0, r3
 801fa2a:	b9a8      	cbnz	r0, 801fa58 <__lo0bits+0x52>
 801fa2c:	0c1b      	lsrs	r3, r3, #16
 801fa2e:	2010      	movs	r0, #16
 801fa30:	f013 0fff 	tst.w	r3, #255	; 0xff
 801fa34:	bf04      	itt	eq
 801fa36:	0a1b      	lsreq	r3, r3, #8
 801fa38:	3008      	addeq	r0, #8
 801fa3a:	071a      	lsls	r2, r3, #28
 801fa3c:	bf04      	itt	eq
 801fa3e:	091b      	lsreq	r3, r3, #4
 801fa40:	3004      	addeq	r0, #4
 801fa42:	079a      	lsls	r2, r3, #30
 801fa44:	bf04      	itt	eq
 801fa46:	089b      	lsreq	r3, r3, #2
 801fa48:	3002      	addeq	r0, #2
 801fa4a:	07da      	lsls	r2, r3, #31
 801fa4c:	d402      	bmi.n	801fa54 <__lo0bits+0x4e>
 801fa4e:	085b      	lsrs	r3, r3, #1
 801fa50:	d006      	beq.n	801fa60 <__lo0bits+0x5a>
 801fa52:	3001      	adds	r0, #1
 801fa54:	600b      	str	r3, [r1, #0]
 801fa56:	4770      	bx	lr
 801fa58:	4610      	mov	r0, r2
 801fa5a:	e7e9      	b.n	801fa30 <__lo0bits+0x2a>
 801fa5c:	2000      	movs	r0, #0
 801fa5e:	4770      	bx	lr
 801fa60:	2020      	movs	r0, #32
 801fa62:	4770      	bx	lr

0801fa64 <__i2b>:
 801fa64:	b510      	push	{r4, lr}
 801fa66:	460c      	mov	r4, r1
 801fa68:	2101      	movs	r1, #1
 801fa6a:	f7ff ff27 	bl	801f8bc <_Balloc>
 801fa6e:	2201      	movs	r2, #1
 801fa70:	6144      	str	r4, [r0, #20]
 801fa72:	6102      	str	r2, [r0, #16]
 801fa74:	bd10      	pop	{r4, pc}

0801fa76 <__multiply>:
 801fa76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa7a:	4614      	mov	r4, r2
 801fa7c:	690a      	ldr	r2, [r1, #16]
 801fa7e:	6923      	ldr	r3, [r4, #16]
 801fa80:	429a      	cmp	r2, r3
 801fa82:	bfb8      	it	lt
 801fa84:	460b      	movlt	r3, r1
 801fa86:	4688      	mov	r8, r1
 801fa88:	bfbc      	itt	lt
 801fa8a:	46a0      	movlt	r8, r4
 801fa8c:	461c      	movlt	r4, r3
 801fa8e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801fa92:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801fa96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fa9a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fa9e:	eb07 0609 	add.w	r6, r7, r9
 801faa2:	42b3      	cmp	r3, r6
 801faa4:	bfb8      	it	lt
 801faa6:	3101      	addlt	r1, #1
 801faa8:	f7ff ff08 	bl	801f8bc <_Balloc>
 801faac:	f100 0514 	add.w	r5, r0, #20
 801fab0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801fab4:	462b      	mov	r3, r5
 801fab6:	2200      	movs	r2, #0
 801fab8:	4573      	cmp	r3, lr
 801faba:	d316      	bcc.n	801faea <__multiply+0x74>
 801fabc:	f104 0214 	add.w	r2, r4, #20
 801fac0:	f108 0114 	add.w	r1, r8, #20
 801fac4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801fac8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801facc:	9300      	str	r3, [sp, #0]
 801face:	9b00      	ldr	r3, [sp, #0]
 801fad0:	9201      	str	r2, [sp, #4]
 801fad2:	4293      	cmp	r3, r2
 801fad4:	d80c      	bhi.n	801faf0 <__multiply+0x7a>
 801fad6:	2e00      	cmp	r6, #0
 801fad8:	dd03      	ble.n	801fae2 <__multiply+0x6c>
 801fada:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801fade:	2b00      	cmp	r3, #0
 801fae0:	d05d      	beq.n	801fb9e <__multiply+0x128>
 801fae2:	6106      	str	r6, [r0, #16]
 801fae4:	b003      	add	sp, #12
 801fae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faea:	f843 2b04 	str.w	r2, [r3], #4
 801faee:	e7e3      	b.n	801fab8 <__multiply+0x42>
 801faf0:	f8b2 b000 	ldrh.w	fp, [r2]
 801faf4:	f1bb 0f00 	cmp.w	fp, #0
 801faf8:	d023      	beq.n	801fb42 <__multiply+0xcc>
 801fafa:	4689      	mov	r9, r1
 801fafc:	46ac      	mov	ip, r5
 801fafe:	f04f 0800 	mov.w	r8, #0
 801fb02:	f859 4b04 	ldr.w	r4, [r9], #4
 801fb06:	f8dc a000 	ldr.w	sl, [ip]
 801fb0a:	b2a3      	uxth	r3, r4
 801fb0c:	fa1f fa8a 	uxth.w	sl, sl
 801fb10:	fb0b a303 	mla	r3, fp, r3, sl
 801fb14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801fb18:	f8dc 4000 	ldr.w	r4, [ip]
 801fb1c:	4443      	add	r3, r8
 801fb1e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801fb22:	fb0b 840a 	mla	r4, fp, sl, r8
 801fb26:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801fb2a:	46e2      	mov	sl, ip
 801fb2c:	b29b      	uxth	r3, r3
 801fb2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801fb32:	454f      	cmp	r7, r9
 801fb34:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801fb38:	f84a 3b04 	str.w	r3, [sl], #4
 801fb3c:	d82b      	bhi.n	801fb96 <__multiply+0x120>
 801fb3e:	f8cc 8004 	str.w	r8, [ip, #4]
 801fb42:	9b01      	ldr	r3, [sp, #4]
 801fb44:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801fb48:	3204      	adds	r2, #4
 801fb4a:	f1ba 0f00 	cmp.w	sl, #0
 801fb4e:	d020      	beq.n	801fb92 <__multiply+0x11c>
 801fb50:	682b      	ldr	r3, [r5, #0]
 801fb52:	4689      	mov	r9, r1
 801fb54:	46a8      	mov	r8, r5
 801fb56:	f04f 0b00 	mov.w	fp, #0
 801fb5a:	f8b9 c000 	ldrh.w	ip, [r9]
 801fb5e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801fb62:	fb0a 440c 	mla	r4, sl, ip, r4
 801fb66:	445c      	add	r4, fp
 801fb68:	46c4      	mov	ip, r8
 801fb6a:	b29b      	uxth	r3, r3
 801fb6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801fb70:	f84c 3b04 	str.w	r3, [ip], #4
 801fb74:	f859 3b04 	ldr.w	r3, [r9], #4
 801fb78:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801fb7c:	0c1b      	lsrs	r3, r3, #16
 801fb7e:	fb0a b303 	mla	r3, sl, r3, fp
 801fb82:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801fb86:	454f      	cmp	r7, r9
 801fb88:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801fb8c:	d805      	bhi.n	801fb9a <__multiply+0x124>
 801fb8e:	f8c8 3004 	str.w	r3, [r8, #4]
 801fb92:	3504      	adds	r5, #4
 801fb94:	e79b      	b.n	801face <__multiply+0x58>
 801fb96:	46d4      	mov	ip, sl
 801fb98:	e7b3      	b.n	801fb02 <__multiply+0x8c>
 801fb9a:	46e0      	mov	r8, ip
 801fb9c:	e7dd      	b.n	801fb5a <__multiply+0xe4>
 801fb9e:	3e01      	subs	r6, #1
 801fba0:	e799      	b.n	801fad6 <__multiply+0x60>
	...

0801fba4 <__pow5mult>:
 801fba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fba8:	4615      	mov	r5, r2
 801fbaa:	f012 0203 	ands.w	r2, r2, #3
 801fbae:	4606      	mov	r6, r0
 801fbb0:	460f      	mov	r7, r1
 801fbb2:	d007      	beq.n	801fbc4 <__pow5mult+0x20>
 801fbb4:	3a01      	subs	r2, #1
 801fbb6:	4c21      	ldr	r4, [pc, #132]	; (801fc3c <__pow5mult+0x98>)
 801fbb8:	2300      	movs	r3, #0
 801fbba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fbbe:	f7ff fec8 	bl	801f952 <__multadd>
 801fbc2:	4607      	mov	r7, r0
 801fbc4:	10ad      	asrs	r5, r5, #2
 801fbc6:	d035      	beq.n	801fc34 <__pow5mult+0x90>
 801fbc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801fbca:	b93c      	cbnz	r4, 801fbdc <__pow5mult+0x38>
 801fbcc:	2010      	movs	r0, #16
 801fbce:	f7fe faad 	bl	801e12c <malloc>
 801fbd2:	6270      	str	r0, [r6, #36]	; 0x24
 801fbd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fbd8:	6004      	str	r4, [r0, #0]
 801fbda:	60c4      	str	r4, [r0, #12]
 801fbdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801fbe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fbe4:	b94c      	cbnz	r4, 801fbfa <__pow5mult+0x56>
 801fbe6:	f240 2171 	movw	r1, #625	; 0x271
 801fbea:	4630      	mov	r0, r6
 801fbec:	f7ff ff3a 	bl	801fa64 <__i2b>
 801fbf0:	2300      	movs	r3, #0
 801fbf2:	f8c8 0008 	str.w	r0, [r8, #8]
 801fbf6:	4604      	mov	r4, r0
 801fbf8:	6003      	str	r3, [r0, #0]
 801fbfa:	f04f 0800 	mov.w	r8, #0
 801fbfe:	07eb      	lsls	r3, r5, #31
 801fc00:	d50a      	bpl.n	801fc18 <__pow5mult+0x74>
 801fc02:	4639      	mov	r1, r7
 801fc04:	4622      	mov	r2, r4
 801fc06:	4630      	mov	r0, r6
 801fc08:	f7ff ff35 	bl	801fa76 <__multiply>
 801fc0c:	4639      	mov	r1, r7
 801fc0e:	4681      	mov	r9, r0
 801fc10:	4630      	mov	r0, r6
 801fc12:	f7ff fe87 	bl	801f924 <_Bfree>
 801fc16:	464f      	mov	r7, r9
 801fc18:	106d      	asrs	r5, r5, #1
 801fc1a:	d00b      	beq.n	801fc34 <__pow5mult+0x90>
 801fc1c:	6820      	ldr	r0, [r4, #0]
 801fc1e:	b938      	cbnz	r0, 801fc30 <__pow5mult+0x8c>
 801fc20:	4622      	mov	r2, r4
 801fc22:	4621      	mov	r1, r4
 801fc24:	4630      	mov	r0, r6
 801fc26:	f7ff ff26 	bl	801fa76 <__multiply>
 801fc2a:	6020      	str	r0, [r4, #0]
 801fc2c:	f8c0 8000 	str.w	r8, [r0]
 801fc30:	4604      	mov	r4, r0
 801fc32:	e7e4      	b.n	801fbfe <__pow5mult+0x5a>
 801fc34:	4638      	mov	r0, r7
 801fc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc3a:	bf00      	nop
 801fc3c:	080235f0 	.word	0x080235f0

0801fc40 <__lshift>:
 801fc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc44:	460c      	mov	r4, r1
 801fc46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fc4a:	6923      	ldr	r3, [r4, #16]
 801fc4c:	6849      	ldr	r1, [r1, #4]
 801fc4e:	eb0a 0903 	add.w	r9, sl, r3
 801fc52:	68a3      	ldr	r3, [r4, #8]
 801fc54:	4607      	mov	r7, r0
 801fc56:	4616      	mov	r6, r2
 801fc58:	f109 0501 	add.w	r5, r9, #1
 801fc5c:	42ab      	cmp	r3, r5
 801fc5e:	db32      	blt.n	801fcc6 <__lshift+0x86>
 801fc60:	4638      	mov	r0, r7
 801fc62:	f7ff fe2b 	bl	801f8bc <_Balloc>
 801fc66:	2300      	movs	r3, #0
 801fc68:	4680      	mov	r8, r0
 801fc6a:	f100 0114 	add.w	r1, r0, #20
 801fc6e:	461a      	mov	r2, r3
 801fc70:	4553      	cmp	r3, sl
 801fc72:	db2b      	blt.n	801fccc <__lshift+0x8c>
 801fc74:	6920      	ldr	r0, [r4, #16]
 801fc76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fc7a:	f104 0314 	add.w	r3, r4, #20
 801fc7e:	f016 021f 	ands.w	r2, r6, #31
 801fc82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fc86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fc8a:	d025      	beq.n	801fcd8 <__lshift+0x98>
 801fc8c:	f1c2 0e20 	rsb	lr, r2, #32
 801fc90:	2000      	movs	r0, #0
 801fc92:	681e      	ldr	r6, [r3, #0]
 801fc94:	468a      	mov	sl, r1
 801fc96:	4096      	lsls	r6, r2
 801fc98:	4330      	orrs	r0, r6
 801fc9a:	f84a 0b04 	str.w	r0, [sl], #4
 801fc9e:	f853 0b04 	ldr.w	r0, [r3], #4
 801fca2:	459c      	cmp	ip, r3
 801fca4:	fa20 f00e 	lsr.w	r0, r0, lr
 801fca8:	d814      	bhi.n	801fcd4 <__lshift+0x94>
 801fcaa:	6048      	str	r0, [r1, #4]
 801fcac:	b108      	cbz	r0, 801fcb2 <__lshift+0x72>
 801fcae:	f109 0502 	add.w	r5, r9, #2
 801fcb2:	3d01      	subs	r5, #1
 801fcb4:	4638      	mov	r0, r7
 801fcb6:	f8c8 5010 	str.w	r5, [r8, #16]
 801fcba:	4621      	mov	r1, r4
 801fcbc:	f7ff fe32 	bl	801f924 <_Bfree>
 801fcc0:	4640      	mov	r0, r8
 801fcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fcc6:	3101      	adds	r1, #1
 801fcc8:	005b      	lsls	r3, r3, #1
 801fcca:	e7c7      	b.n	801fc5c <__lshift+0x1c>
 801fccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801fcd0:	3301      	adds	r3, #1
 801fcd2:	e7cd      	b.n	801fc70 <__lshift+0x30>
 801fcd4:	4651      	mov	r1, sl
 801fcd6:	e7dc      	b.n	801fc92 <__lshift+0x52>
 801fcd8:	3904      	subs	r1, #4
 801fcda:	f853 2b04 	ldr.w	r2, [r3], #4
 801fcde:	f841 2f04 	str.w	r2, [r1, #4]!
 801fce2:	459c      	cmp	ip, r3
 801fce4:	d8f9      	bhi.n	801fcda <__lshift+0x9a>
 801fce6:	e7e4      	b.n	801fcb2 <__lshift+0x72>

0801fce8 <__mcmp>:
 801fce8:	6903      	ldr	r3, [r0, #16]
 801fcea:	690a      	ldr	r2, [r1, #16]
 801fcec:	1a9b      	subs	r3, r3, r2
 801fcee:	b530      	push	{r4, r5, lr}
 801fcf0:	d10c      	bne.n	801fd0c <__mcmp+0x24>
 801fcf2:	0092      	lsls	r2, r2, #2
 801fcf4:	3014      	adds	r0, #20
 801fcf6:	3114      	adds	r1, #20
 801fcf8:	1884      	adds	r4, r0, r2
 801fcfa:	4411      	add	r1, r2
 801fcfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801fd00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801fd04:	4295      	cmp	r5, r2
 801fd06:	d003      	beq.n	801fd10 <__mcmp+0x28>
 801fd08:	d305      	bcc.n	801fd16 <__mcmp+0x2e>
 801fd0a:	2301      	movs	r3, #1
 801fd0c:	4618      	mov	r0, r3
 801fd0e:	bd30      	pop	{r4, r5, pc}
 801fd10:	42a0      	cmp	r0, r4
 801fd12:	d3f3      	bcc.n	801fcfc <__mcmp+0x14>
 801fd14:	e7fa      	b.n	801fd0c <__mcmp+0x24>
 801fd16:	f04f 33ff 	mov.w	r3, #4294967295
 801fd1a:	e7f7      	b.n	801fd0c <__mcmp+0x24>

0801fd1c <__mdiff>:
 801fd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd20:	460d      	mov	r5, r1
 801fd22:	4607      	mov	r7, r0
 801fd24:	4611      	mov	r1, r2
 801fd26:	4628      	mov	r0, r5
 801fd28:	4614      	mov	r4, r2
 801fd2a:	f7ff ffdd 	bl	801fce8 <__mcmp>
 801fd2e:	1e06      	subs	r6, r0, #0
 801fd30:	d108      	bne.n	801fd44 <__mdiff+0x28>
 801fd32:	4631      	mov	r1, r6
 801fd34:	4638      	mov	r0, r7
 801fd36:	f7ff fdc1 	bl	801f8bc <_Balloc>
 801fd3a:	2301      	movs	r3, #1
 801fd3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801fd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd44:	bfa4      	itt	ge
 801fd46:	4623      	movge	r3, r4
 801fd48:	462c      	movge	r4, r5
 801fd4a:	4638      	mov	r0, r7
 801fd4c:	6861      	ldr	r1, [r4, #4]
 801fd4e:	bfa6      	itte	ge
 801fd50:	461d      	movge	r5, r3
 801fd52:	2600      	movge	r6, #0
 801fd54:	2601      	movlt	r6, #1
 801fd56:	f7ff fdb1 	bl	801f8bc <_Balloc>
 801fd5a:	692b      	ldr	r3, [r5, #16]
 801fd5c:	60c6      	str	r6, [r0, #12]
 801fd5e:	6926      	ldr	r6, [r4, #16]
 801fd60:	f105 0914 	add.w	r9, r5, #20
 801fd64:	f104 0214 	add.w	r2, r4, #20
 801fd68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801fd6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801fd70:	f100 0514 	add.w	r5, r0, #20
 801fd74:	f04f 0e00 	mov.w	lr, #0
 801fd78:	f852 ab04 	ldr.w	sl, [r2], #4
 801fd7c:	f859 4b04 	ldr.w	r4, [r9], #4
 801fd80:	fa1e f18a 	uxtah	r1, lr, sl
 801fd84:	b2a3      	uxth	r3, r4
 801fd86:	1ac9      	subs	r1, r1, r3
 801fd88:	0c23      	lsrs	r3, r4, #16
 801fd8a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801fd8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801fd92:	b289      	uxth	r1, r1
 801fd94:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801fd98:	45c8      	cmp	r8, r9
 801fd9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801fd9e:	4694      	mov	ip, r2
 801fda0:	f845 3b04 	str.w	r3, [r5], #4
 801fda4:	d8e8      	bhi.n	801fd78 <__mdiff+0x5c>
 801fda6:	45bc      	cmp	ip, r7
 801fda8:	d304      	bcc.n	801fdb4 <__mdiff+0x98>
 801fdaa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801fdae:	b183      	cbz	r3, 801fdd2 <__mdiff+0xb6>
 801fdb0:	6106      	str	r6, [r0, #16]
 801fdb2:	e7c5      	b.n	801fd40 <__mdiff+0x24>
 801fdb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 801fdb8:	fa1e f381 	uxtah	r3, lr, r1
 801fdbc:	141a      	asrs	r2, r3, #16
 801fdbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801fdc2:	b29b      	uxth	r3, r3
 801fdc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fdc8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801fdcc:	f845 3b04 	str.w	r3, [r5], #4
 801fdd0:	e7e9      	b.n	801fda6 <__mdiff+0x8a>
 801fdd2:	3e01      	subs	r6, #1
 801fdd4:	e7e9      	b.n	801fdaa <__mdiff+0x8e>

0801fdd6 <__d2b>:
 801fdd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fdda:	460e      	mov	r6, r1
 801fddc:	2101      	movs	r1, #1
 801fdde:	ec59 8b10 	vmov	r8, r9, d0
 801fde2:	4615      	mov	r5, r2
 801fde4:	f7ff fd6a 	bl	801f8bc <_Balloc>
 801fde8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801fdec:	4607      	mov	r7, r0
 801fdee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fdf2:	bb34      	cbnz	r4, 801fe42 <__d2b+0x6c>
 801fdf4:	9301      	str	r3, [sp, #4]
 801fdf6:	f1b8 0300 	subs.w	r3, r8, #0
 801fdfa:	d027      	beq.n	801fe4c <__d2b+0x76>
 801fdfc:	a802      	add	r0, sp, #8
 801fdfe:	f840 3d08 	str.w	r3, [r0, #-8]!
 801fe02:	f7ff fe00 	bl	801fa06 <__lo0bits>
 801fe06:	9900      	ldr	r1, [sp, #0]
 801fe08:	b1f0      	cbz	r0, 801fe48 <__d2b+0x72>
 801fe0a:	9a01      	ldr	r2, [sp, #4]
 801fe0c:	f1c0 0320 	rsb	r3, r0, #32
 801fe10:	fa02 f303 	lsl.w	r3, r2, r3
 801fe14:	430b      	orrs	r3, r1
 801fe16:	40c2      	lsrs	r2, r0
 801fe18:	617b      	str	r3, [r7, #20]
 801fe1a:	9201      	str	r2, [sp, #4]
 801fe1c:	9b01      	ldr	r3, [sp, #4]
 801fe1e:	61bb      	str	r3, [r7, #24]
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	bf14      	ite	ne
 801fe24:	2102      	movne	r1, #2
 801fe26:	2101      	moveq	r1, #1
 801fe28:	6139      	str	r1, [r7, #16]
 801fe2a:	b1c4      	cbz	r4, 801fe5e <__d2b+0x88>
 801fe2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801fe30:	4404      	add	r4, r0
 801fe32:	6034      	str	r4, [r6, #0]
 801fe34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fe38:	6028      	str	r0, [r5, #0]
 801fe3a:	4638      	mov	r0, r7
 801fe3c:	b003      	add	sp, #12
 801fe3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fe46:	e7d5      	b.n	801fdf4 <__d2b+0x1e>
 801fe48:	6179      	str	r1, [r7, #20]
 801fe4a:	e7e7      	b.n	801fe1c <__d2b+0x46>
 801fe4c:	a801      	add	r0, sp, #4
 801fe4e:	f7ff fdda 	bl	801fa06 <__lo0bits>
 801fe52:	9b01      	ldr	r3, [sp, #4]
 801fe54:	617b      	str	r3, [r7, #20]
 801fe56:	2101      	movs	r1, #1
 801fe58:	6139      	str	r1, [r7, #16]
 801fe5a:	3020      	adds	r0, #32
 801fe5c:	e7e5      	b.n	801fe2a <__d2b+0x54>
 801fe5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801fe62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801fe66:	6030      	str	r0, [r6, #0]
 801fe68:	6918      	ldr	r0, [r3, #16]
 801fe6a:	f7ff fdad 	bl	801f9c8 <__hi0bits>
 801fe6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801fe72:	e7e1      	b.n	801fe38 <__d2b+0x62>

0801fe74 <_calloc_r>:
 801fe74:	b538      	push	{r3, r4, r5, lr}
 801fe76:	fb02 f401 	mul.w	r4, r2, r1
 801fe7a:	4621      	mov	r1, r4
 801fe7c:	f7fe f9c8 	bl	801e210 <_malloc_r>
 801fe80:	4605      	mov	r5, r0
 801fe82:	b118      	cbz	r0, 801fe8c <_calloc_r+0x18>
 801fe84:	4622      	mov	r2, r4
 801fe86:	2100      	movs	r1, #0
 801fe88:	f7fe f96b 	bl	801e162 <memset>
 801fe8c:	4628      	mov	r0, r5
 801fe8e:	bd38      	pop	{r3, r4, r5, pc}

0801fe90 <__ssputs_r>:
 801fe90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe94:	688e      	ldr	r6, [r1, #8]
 801fe96:	429e      	cmp	r6, r3
 801fe98:	4682      	mov	sl, r0
 801fe9a:	460c      	mov	r4, r1
 801fe9c:	4690      	mov	r8, r2
 801fe9e:	4699      	mov	r9, r3
 801fea0:	d837      	bhi.n	801ff12 <__ssputs_r+0x82>
 801fea2:	898a      	ldrh	r2, [r1, #12]
 801fea4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fea8:	d031      	beq.n	801ff0e <__ssputs_r+0x7e>
 801feaa:	6825      	ldr	r5, [r4, #0]
 801feac:	6909      	ldr	r1, [r1, #16]
 801feae:	1a6f      	subs	r7, r5, r1
 801feb0:	6965      	ldr	r5, [r4, #20]
 801feb2:	2302      	movs	r3, #2
 801feb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801feb8:	fb95 f5f3 	sdiv	r5, r5, r3
 801febc:	f109 0301 	add.w	r3, r9, #1
 801fec0:	443b      	add	r3, r7
 801fec2:	429d      	cmp	r5, r3
 801fec4:	bf38      	it	cc
 801fec6:	461d      	movcc	r5, r3
 801fec8:	0553      	lsls	r3, r2, #21
 801feca:	d530      	bpl.n	801ff2e <__ssputs_r+0x9e>
 801fecc:	4629      	mov	r1, r5
 801fece:	f7fe f99f 	bl	801e210 <_malloc_r>
 801fed2:	4606      	mov	r6, r0
 801fed4:	b950      	cbnz	r0, 801feec <__ssputs_r+0x5c>
 801fed6:	230c      	movs	r3, #12
 801fed8:	f8ca 3000 	str.w	r3, [sl]
 801fedc:	89a3      	ldrh	r3, [r4, #12]
 801fede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fee2:	81a3      	strh	r3, [r4, #12]
 801fee4:	f04f 30ff 	mov.w	r0, #4294967295
 801fee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801feec:	463a      	mov	r2, r7
 801feee:	6921      	ldr	r1, [r4, #16]
 801fef0:	f7fe f92c 	bl	801e14c <memcpy>
 801fef4:	89a3      	ldrh	r3, [r4, #12]
 801fef6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fefa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fefe:	81a3      	strh	r3, [r4, #12]
 801ff00:	6126      	str	r6, [r4, #16]
 801ff02:	6165      	str	r5, [r4, #20]
 801ff04:	443e      	add	r6, r7
 801ff06:	1bed      	subs	r5, r5, r7
 801ff08:	6026      	str	r6, [r4, #0]
 801ff0a:	60a5      	str	r5, [r4, #8]
 801ff0c:	464e      	mov	r6, r9
 801ff0e:	454e      	cmp	r6, r9
 801ff10:	d900      	bls.n	801ff14 <__ssputs_r+0x84>
 801ff12:	464e      	mov	r6, r9
 801ff14:	4632      	mov	r2, r6
 801ff16:	4641      	mov	r1, r8
 801ff18:	6820      	ldr	r0, [r4, #0]
 801ff1a:	f000 f918 	bl	802014e <memmove>
 801ff1e:	68a3      	ldr	r3, [r4, #8]
 801ff20:	1b9b      	subs	r3, r3, r6
 801ff22:	60a3      	str	r3, [r4, #8]
 801ff24:	6823      	ldr	r3, [r4, #0]
 801ff26:	441e      	add	r6, r3
 801ff28:	6026      	str	r6, [r4, #0]
 801ff2a:	2000      	movs	r0, #0
 801ff2c:	e7dc      	b.n	801fee8 <__ssputs_r+0x58>
 801ff2e:	462a      	mov	r2, r5
 801ff30:	f000 f926 	bl	8020180 <_realloc_r>
 801ff34:	4606      	mov	r6, r0
 801ff36:	2800      	cmp	r0, #0
 801ff38:	d1e2      	bne.n	801ff00 <__ssputs_r+0x70>
 801ff3a:	6921      	ldr	r1, [r4, #16]
 801ff3c:	4650      	mov	r0, sl
 801ff3e:	f7fe f919 	bl	801e174 <_free_r>
 801ff42:	e7c8      	b.n	801fed6 <__ssputs_r+0x46>

0801ff44 <_svfiprintf_r>:
 801ff44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff48:	461d      	mov	r5, r3
 801ff4a:	898b      	ldrh	r3, [r1, #12]
 801ff4c:	061f      	lsls	r7, r3, #24
 801ff4e:	b09d      	sub	sp, #116	; 0x74
 801ff50:	4680      	mov	r8, r0
 801ff52:	460c      	mov	r4, r1
 801ff54:	4616      	mov	r6, r2
 801ff56:	d50f      	bpl.n	801ff78 <_svfiprintf_r+0x34>
 801ff58:	690b      	ldr	r3, [r1, #16]
 801ff5a:	b96b      	cbnz	r3, 801ff78 <_svfiprintf_r+0x34>
 801ff5c:	2140      	movs	r1, #64	; 0x40
 801ff5e:	f7fe f957 	bl	801e210 <_malloc_r>
 801ff62:	6020      	str	r0, [r4, #0]
 801ff64:	6120      	str	r0, [r4, #16]
 801ff66:	b928      	cbnz	r0, 801ff74 <_svfiprintf_r+0x30>
 801ff68:	230c      	movs	r3, #12
 801ff6a:	f8c8 3000 	str.w	r3, [r8]
 801ff6e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff72:	e0c8      	b.n	8020106 <_svfiprintf_r+0x1c2>
 801ff74:	2340      	movs	r3, #64	; 0x40
 801ff76:	6163      	str	r3, [r4, #20]
 801ff78:	2300      	movs	r3, #0
 801ff7a:	9309      	str	r3, [sp, #36]	; 0x24
 801ff7c:	2320      	movs	r3, #32
 801ff7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ff82:	2330      	movs	r3, #48	; 0x30
 801ff84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ff88:	9503      	str	r5, [sp, #12]
 801ff8a:	f04f 0b01 	mov.w	fp, #1
 801ff8e:	4637      	mov	r7, r6
 801ff90:	463d      	mov	r5, r7
 801ff92:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ff96:	b10b      	cbz	r3, 801ff9c <_svfiprintf_r+0x58>
 801ff98:	2b25      	cmp	r3, #37	; 0x25
 801ff9a:	d13e      	bne.n	802001a <_svfiprintf_r+0xd6>
 801ff9c:	ebb7 0a06 	subs.w	sl, r7, r6
 801ffa0:	d00b      	beq.n	801ffba <_svfiprintf_r+0x76>
 801ffa2:	4653      	mov	r3, sl
 801ffa4:	4632      	mov	r2, r6
 801ffa6:	4621      	mov	r1, r4
 801ffa8:	4640      	mov	r0, r8
 801ffaa:	f7ff ff71 	bl	801fe90 <__ssputs_r>
 801ffae:	3001      	adds	r0, #1
 801ffb0:	f000 80a4 	beq.w	80200fc <_svfiprintf_r+0x1b8>
 801ffb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffb6:	4453      	add	r3, sl
 801ffb8:	9309      	str	r3, [sp, #36]	; 0x24
 801ffba:	783b      	ldrb	r3, [r7, #0]
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	f000 809d 	beq.w	80200fc <_svfiprintf_r+0x1b8>
 801ffc2:	2300      	movs	r3, #0
 801ffc4:	f04f 32ff 	mov.w	r2, #4294967295
 801ffc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ffcc:	9304      	str	r3, [sp, #16]
 801ffce:	9307      	str	r3, [sp, #28]
 801ffd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ffd4:	931a      	str	r3, [sp, #104]	; 0x68
 801ffd6:	462f      	mov	r7, r5
 801ffd8:	2205      	movs	r2, #5
 801ffda:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ffde:	4850      	ldr	r0, [pc, #320]	; (8020120 <_svfiprintf_r+0x1dc>)
 801ffe0:	f7e0 f946 	bl	8000270 <memchr>
 801ffe4:	9b04      	ldr	r3, [sp, #16]
 801ffe6:	b9d0      	cbnz	r0, 802001e <_svfiprintf_r+0xda>
 801ffe8:	06d9      	lsls	r1, r3, #27
 801ffea:	bf44      	itt	mi
 801ffec:	2220      	movmi	r2, #32
 801ffee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801fff2:	071a      	lsls	r2, r3, #28
 801fff4:	bf44      	itt	mi
 801fff6:	222b      	movmi	r2, #43	; 0x2b
 801fff8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801fffc:	782a      	ldrb	r2, [r5, #0]
 801fffe:	2a2a      	cmp	r2, #42	; 0x2a
 8020000:	d015      	beq.n	802002e <_svfiprintf_r+0xea>
 8020002:	9a07      	ldr	r2, [sp, #28]
 8020004:	462f      	mov	r7, r5
 8020006:	2000      	movs	r0, #0
 8020008:	250a      	movs	r5, #10
 802000a:	4639      	mov	r1, r7
 802000c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020010:	3b30      	subs	r3, #48	; 0x30
 8020012:	2b09      	cmp	r3, #9
 8020014:	d94d      	bls.n	80200b2 <_svfiprintf_r+0x16e>
 8020016:	b1b8      	cbz	r0, 8020048 <_svfiprintf_r+0x104>
 8020018:	e00f      	b.n	802003a <_svfiprintf_r+0xf6>
 802001a:	462f      	mov	r7, r5
 802001c:	e7b8      	b.n	801ff90 <_svfiprintf_r+0x4c>
 802001e:	4a40      	ldr	r2, [pc, #256]	; (8020120 <_svfiprintf_r+0x1dc>)
 8020020:	1a80      	subs	r0, r0, r2
 8020022:	fa0b f000 	lsl.w	r0, fp, r0
 8020026:	4318      	orrs	r0, r3
 8020028:	9004      	str	r0, [sp, #16]
 802002a:	463d      	mov	r5, r7
 802002c:	e7d3      	b.n	801ffd6 <_svfiprintf_r+0x92>
 802002e:	9a03      	ldr	r2, [sp, #12]
 8020030:	1d11      	adds	r1, r2, #4
 8020032:	6812      	ldr	r2, [r2, #0]
 8020034:	9103      	str	r1, [sp, #12]
 8020036:	2a00      	cmp	r2, #0
 8020038:	db01      	blt.n	802003e <_svfiprintf_r+0xfa>
 802003a:	9207      	str	r2, [sp, #28]
 802003c:	e004      	b.n	8020048 <_svfiprintf_r+0x104>
 802003e:	4252      	negs	r2, r2
 8020040:	f043 0302 	orr.w	r3, r3, #2
 8020044:	9207      	str	r2, [sp, #28]
 8020046:	9304      	str	r3, [sp, #16]
 8020048:	783b      	ldrb	r3, [r7, #0]
 802004a:	2b2e      	cmp	r3, #46	; 0x2e
 802004c:	d10c      	bne.n	8020068 <_svfiprintf_r+0x124>
 802004e:	787b      	ldrb	r3, [r7, #1]
 8020050:	2b2a      	cmp	r3, #42	; 0x2a
 8020052:	d133      	bne.n	80200bc <_svfiprintf_r+0x178>
 8020054:	9b03      	ldr	r3, [sp, #12]
 8020056:	1d1a      	adds	r2, r3, #4
 8020058:	681b      	ldr	r3, [r3, #0]
 802005a:	9203      	str	r2, [sp, #12]
 802005c:	2b00      	cmp	r3, #0
 802005e:	bfb8      	it	lt
 8020060:	f04f 33ff 	movlt.w	r3, #4294967295
 8020064:	3702      	adds	r7, #2
 8020066:	9305      	str	r3, [sp, #20]
 8020068:	4d2e      	ldr	r5, [pc, #184]	; (8020124 <_svfiprintf_r+0x1e0>)
 802006a:	7839      	ldrb	r1, [r7, #0]
 802006c:	2203      	movs	r2, #3
 802006e:	4628      	mov	r0, r5
 8020070:	f7e0 f8fe 	bl	8000270 <memchr>
 8020074:	b138      	cbz	r0, 8020086 <_svfiprintf_r+0x142>
 8020076:	2340      	movs	r3, #64	; 0x40
 8020078:	1b40      	subs	r0, r0, r5
 802007a:	fa03 f000 	lsl.w	r0, r3, r0
 802007e:	9b04      	ldr	r3, [sp, #16]
 8020080:	4303      	orrs	r3, r0
 8020082:	3701      	adds	r7, #1
 8020084:	9304      	str	r3, [sp, #16]
 8020086:	7839      	ldrb	r1, [r7, #0]
 8020088:	4827      	ldr	r0, [pc, #156]	; (8020128 <_svfiprintf_r+0x1e4>)
 802008a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802008e:	2206      	movs	r2, #6
 8020090:	1c7e      	adds	r6, r7, #1
 8020092:	f7e0 f8ed 	bl	8000270 <memchr>
 8020096:	2800      	cmp	r0, #0
 8020098:	d038      	beq.n	802010c <_svfiprintf_r+0x1c8>
 802009a:	4b24      	ldr	r3, [pc, #144]	; (802012c <_svfiprintf_r+0x1e8>)
 802009c:	bb13      	cbnz	r3, 80200e4 <_svfiprintf_r+0x1a0>
 802009e:	9b03      	ldr	r3, [sp, #12]
 80200a0:	3307      	adds	r3, #7
 80200a2:	f023 0307 	bic.w	r3, r3, #7
 80200a6:	3308      	adds	r3, #8
 80200a8:	9303      	str	r3, [sp, #12]
 80200aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200ac:	444b      	add	r3, r9
 80200ae:	9309      	str	r3, [sp, #36]	; 0x24
 80200b0:	e76d      	b.n	801ff8e <_svfiprintf_r+0x4a>
 80200b2:	fb05 3202 	mla	r2, r5, r2, r3
 80200b6:	2001      	movs	r0, #1
 80200b8:	460f      	mov	r7, r1
 80200ba:	e7a6      	b.n	802000a <_svfiprintf_r+0xc6>
 80200bc:	2300      	movs	r3, #0
 80200be:	3701      	adds	r7, #1
 80200c0:	9305      	str	r3, [sp, #20]
 80200c2:	4619      	mov	r1, r3
 80200c4:	250a      	movs	r5, #10
 80200c6:	4638      	mov	r0, r7
 80200c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80200cc:	3a30      	subs	r2, #48	; 0x30
 80200ce:	2a09      	cmp	r2, #9
 80200d0:	d903      	bls.n	80200da <_svfiprintf_r+0x196>
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d0c8      	beq.n	8020068 <_svfiprintf_r+0x124>
 80200d6:	9105      	str	r1, [sp, #20]
 80200d8:	e7c6      	b.n	8020068 <_svfiprintf_r+0x124>
 80200da:	fb05 2101 	mla	r1, r5, r1, r2
 80200de:	2301      	movs	r3, #1
 80200e0:	4607      	mov	r7, r0
 80200e2:	e7f0      	b.n	80200c6 <_svfiprintf_r+0x182>
 80200e4:	ab03      	add	r3, sp, #12
 80200e6:	9300      	str	r3, [sp, #0]
 80200e8:	4622      	mov	r2, r4
 80200ea:	4b11      	ldr	r3, [pc, #68]	; (8020130 <_svfiprintf_r+0x1ec>)
 80200ec:	a904      	add	r1, sp, #16
 80200ee:	4640      	mov	r0, r8
 80200f0:	f7fe f96e 	bl	801e3d0 <_printf_float>
 80200f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80200f8:	4681      	mov	r9, r0
 80200fa:	d1d6      	bne.n	80200aa <_svfiprintf_r+0x166>
 80200fc:	89a3      	ldrh	r3, [r4, #12]
 80200fe:	065b      	lsls	r3, r3, #25
 8020100:	f53f af35 	bmi.w	801ff6e <_svfiprintf_r+0x2a>
 8020104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020106:	b01d      	add	sp, #116	; 0x74
 8020108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802010c:	ab03      	add	r3, sp, #12
 802010e:	9300      	str	r3, [sp, #0]
 8020110:	4622      	mov	r2, r4
 8020112:	4b07      	ldr	r3, [pc, #28]	; (8020130 <_svfiprintf_r+0x1ec>)
 8020114:	a904      	add	r1, sp, #16
 8020116:	4640      	mov	r0, r8
 8020118:	f7fe fbfc 	bl	801e914 <_printf_i>
 802011c:	e7ea      	b.n	80200f4 <_svfiprintf_r+0x1b0>
 802011e:	bf00      	nop
 8020120:	080235fc 	.word	0x080235fc
 8020124:	08023602 	.word	0x08023602
 8020128:	08023606 	.word	0x08023606
 802012c:	0801e3d1 	.word	0x0801e3d1
 8020130:	0801fe91 	.word	0x0801fe91

08020134 <__ascii_wctomb>:
 8020134:	b149      	cbz	r1, 802014a <__ascii_wctomb+0x16>
 8020136:	2aff      	cmp	r2, #255	; 0xff
 8020138:	bf85      	ittet	hi
 802013a:	238a      	movhi	r3, #138	; 0x8a
 802013c:	6003      	strhi	r3, [r0, #0]
 802013e:	700a      	strbls	r2, [r1, #0]
 8020140:	f04f 30ff 	movhi.w	r0, #4294967295
 8020144:	bf98      	it	ls
 8020146:	2001      	movls	r0, #1
 8020148:	4770      	bx	lr
 802014a:	4608      	mov	r0, r1
 802014c:	4770      	bx	lr

0802014e <memmove>:
 802014e:	4288      	cmp	r0, r1
 8020150:	b510      	push	{r4, lr}
 8020152:	eb01 0302 	add.w	r3, r1, r2
 8020156:	d807      	bhi.n	8020168 <memmove+0x1a>
 8020158:	1e42      	subs	r2, r0, #1
 802015a:	4299      	cmp	r1, r3
 802015c:	d00a      	beq.n	8020174 <memmove+0x26>
 802015e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020162:	f802 4f01 	strb.w	r4, [r2, #1]!
 8020166:	e7f8      	b.n	802015a <memmove+0xc>
 8020168:	4283      	cmp	r3, r0
 802016a:	d9f5      	bls.n	8020158 <memmove+0xa>
 802016c:	1881      	adds	r1, r0, r2
 802016e:	1ad2      	subs	r2, r2, r3
 8020170:	42d3      	cmn	r3, r2
 8020172:	d100      	bne.n	8020176 <memmove+0x28>
 8020174:	bd10      	pop	{r4, pc}
 8020176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802017a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802017e:	e7f7      	b.n	8020170 <memmove+0x22>

08020180 <_realloc_r>:
 8020180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020182:	4607      	mov	r7, r0
 8020184:	4614      	mov	r4, r2
 8020186:	460e      	mov	r6, r1
 8020188:	b921      	cbnz	r1, 8020194 <_realloc_r+0x14>
 802018a:	4611      	mov	r1, r2
 802018c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020190:	f7fe b83e 	b.w	801e210 <_malloc_r>
 8020194:	b922      	cbnz	r2, 80201a0 <_realloc_r+0x20>
 8020196:	f7fd ffed 	bl	801e174 <_free_r>
 802019a:	4625      	mov	r5, r4
 802019c:	4628      	mov	r0, r5
 802019e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80201a0:	f000 f814 	bl	80201cc <_malloc_usable_size_r>
 80201a4:	42a0      	cmp	r0, r4
 80201a6:	d20f      	bcs.n	80201c8 <_realloc_r+0x48>
 80201a8:	4621      	mov	r1, r4
 80201aa:	4638      	mov	r0, r7
 80201ac:	f7fe f830 	bl	801e210 <_malloc_r>
 80201b0:	4605      	mov	r5, r0
 80201b2:	2800      	cmp	r0, #0
 80201b4:	d0f2      	beq.n	802019c <_realloc_r+0x1c>
 80201b6:	4631      	mov	r1, r6
 80201b8:	4622      	mov	r2, r4
 80201ba:	f7fd ffc7 	bl	801e14c <memcpy>
 80201be:	4631      	mov	r1, r6
 80201c0:	4638      	mov	r0, r7
 80201c2:	f7fd ffd7 	bl	801e174 <_free_r>
 80201c6:	e7e9      	b.n	802019c <_realloc_r+0x1c>
 80201c8:	4635      	mov	r5, r6
 80201ca:	e7e7      	b.n	802019c <_realloc_r+0x1c>

080201cc <_malloc_usable_size_r>:
 80201cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80201d0:	1f18      	subs	r0, r3, #4
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	bfbc      	itt	lt
 80201d6:	580b      	ldrlt	r3, [r1, r0]
 80201d8:	18c0      	addlt	r0, r0, r3
 80201da:	4770      	bx	lr

080201dc <_init>:
 80201dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201de:	bf00      	nop
 80201e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80201e2:	bc08      	pop	{r3}
 80201e4:	469e      	mov	lr, r3
 80201e6:	4770      	bx	lr

080201e8 <_fini>:
 80201e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201ea:	bf00      	nop
 80201ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80201ee:	bc08      	pop	{r3}
 80201f0:	469e      	mov	lr, r3
 80201f2:	4770      	bx	lr
